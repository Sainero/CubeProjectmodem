
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001500  0801df18  0801df18  0002df18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f418  0801f418  0002f418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f420  0801f420  0002f420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f424  0801f424  0002f424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  20000000  0801f428  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001578  200001d8  0801f600  000301d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  20001750  0801f600  00031750  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000552c1  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a60d  00000000  00000000  000854c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a68  00000000  00000000  0008fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002690  00000000  00000000  00092538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021e55  00000000  00000000  00094bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c63f  00000000  00000000  000b6a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b2585  00000000  00000000  000f305c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001a55e1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000989c  00000000  00000000  001a5634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801df00 	.word	0x0801df00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0801df00 	.word	0x0801df00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fd2d 	bl	8001e74 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fc77 	bl	8001d18 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fd1f 	bl	8001e74 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd15 	bl	8001e74 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc99 	bl	8001d90 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc8f 	bl	8001d90 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_cfrcmple>:
 8000480:	4684      	mov	ip, r0
 8000482:	1c08      	adds	r0, r1, #0
 8000484:	4661      	mov	r1, ip
 8000486:	e7ff      	b.n	8000488 <__aeabi_cfcmpeq>

08000488 <__aeabi_cfcmpeq>:
 8000488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048a:	f000 fb3f 	bl	8000b0c <__lesf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	d401      	bmi.n	8000496 <__aeabi_cfcmpeq+0xe>
 8000492:	2100      	movs	r1, #0
 8000494:	42c8      	cmn	r0, r1
 8000496:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000498 <__aeabi_fcmpeq>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f000 fac3 	bl	8000a24 <__eqsf2>
 800049e:	4240      	negs	r0, r0
 80004a0:	3001      	adds	r0, #1
 80004a2:	bd10      	pop	{r4, pc}

080004a4 <__aeabi_fcmplt>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fb31 	bl	8000b0c <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	db01      	blt.n	80004b2 <__aeabi_fcmplt+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmple>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb27 	bl	8000b0c <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dd01      	ble.n	80004c6 <__aeabi_fcmple+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpgt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fad1 	bl	8000a74 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dc01      	bgt.n	80004da <__aeabi_fcmpgt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpge>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fac7 	bl	8000a74 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	da01      	bge.n	80004ee <__aeabi_fcmpge+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_ldivmod>:
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d115      	bne.n	8000524 <__aeabi_ldivmod+0x30>
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	d113      	bne.n	8000524 <__aeabi_ldivmod+0x30>
 80004fc:	2900      	cmp	r1, #0
 80004fe:	db06      	blt.n	800050e <__aeabi_ldivmod+0x1a>
 8000500:	dc01      	bgt.n	8000506 <__aeabi_ldivmod+0x12>
 8000502:	2800      	cmp	r0, #0
 8000504:	d006      	beq.n	8000514 <__aeabi_ldivmod+0x20>
 8000506:	2000      	movs	r0, #0
 8000508:	43c0      	mvns	r0, r0
 800050a:	0841      	lsrs	r1, r0, #1
 800050c:	e002      	b.n	8000514 <__aeabi_ldivmod+0x20>
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0609      	lsls	r1, r1, #24
 8000512:	2000      	movs	r0, #0
 8000514:	b407      	push	{r0, r1, r2}
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <__aeabi_ldivmod+0x2c>)
 8000518:	a101      	add	r1, pc, #4	; (adr r1, 8000520 <__aeabi_ldivmod+0x2c>)
 800051a:	1840      	adds	r0, r0, r1
 800051c:	9002      	str	r0, [sp, #8]
 800051e:	bd03      	pop	{r0, r1, pc}
 8000520:	fffffee1 	.word	0xfffffee1
 8000524:	b403      	push	{r0, r1}
 8000526:	4668      	mov	r0, sp
 8000528:	b501      	push	{r0, lr}
 800052a:	9802      	ldr	r0, [sp, #8]
 800052c:	f000 f950 	bl	80007d0 <__gnu_ldivmod_helper>
 8000530:	9b01      	ldr	r3, [sp, #4]
 8000532:	469e      	mov	lr, r3
 8000534:	b002      	add	sp, #8
 8000536:	bc0c      	pop	{r2, r3}
 8000538:	4770      	bx	lr
 800053a:	46c0      	nop			; (mov r8, r8)

0800053c <__aeabi_uldivmod>:
 800053c:	2b00      	cmp	r3, #0
 800053e:	d111      	bne.n	8000564 <__aeabi_uldivmod+0x28>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d10f      	bne.n	8000564 <__aeabi_uldivmod+0x28>
 8000544:	2900      	cmp	r1, #0
 8000546:	d100      	bne.n	800054a <__aeabi_uldivmod+0xe>
 8000548:	2800      	cmp	r0, #0
 800054a:	d002      	beq.n	8000552 <__aeabi_uldivmod+0x16>
 800054c:	2100      	movs	r1, #0
 800054e:	43c9      	mvns	r1, r1
 8000550:	1c08      	adds	r0, r1, #0
 8000552:	b407      	push	{r0, r1, r2}
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <__aeabi_uldivmod+0x24>)
 8000556:	a102      	add	r1, pc, #8	; (adr r1, 8000560 <__aeabi_uldivmod+0x24>)
 8000558:	1840      	adds	r0, r0, r1
 800055a:	9002      	str	r0, [sp, #8]
 800055c:	bd03      	pop	{r0, r1, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	fffffea1 	.word	0xfffffea1
 8000564:	b403      	push	{r0, r1}
 8000566:	4668      	mov	r0, sp
 8000568:	b501      	push	{r0, lr}
 800056a:	9802      	ldr	r0, [sp, #8]
 800056c:	f000 f864 	bl	8000638 <__udivmoddi4>
 8000570:	9b01      	ldr	r3, [sp, #4]
 8000572:	469e      	mov	lr, r3
 8000574:	b002      	add	sp, #8
 8000576:	bc0c      	pop	{r2, r3}
 8000578:	4770      	bx	lr
 800057a:	46c0      	nop			; (mov r8, r8)

0800057c <__aeabi_lmul>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	0415      	lsls	r5, r2, #16
 8000580:	0c2d      	lsrs	r5, r5, #16
 8000582:	000f      	movs	r7, r1
 8000584:	0001      	movs	r1, r0
 8000586:	002e      	movs	r6, r5
 8000588:	46c6      	mov	lr, r8
 800058a:	4684      	mov	ip, r0
 800058c:	0400      	lsls	r0, r0, #16
 800058e:	0c14      	lsrs	r4, r2, #16
 8000590:	0c00      	lsrs	r0, r0, #16
 8000592:	0c09      	lsrs	r1, r1, #16
 8000594:	4346      	muls	r6, r0
 8000596:	434d      	muls	r5, r1
 8000598:	4360      	muls	r0, r4
 800059a:	4361      	muls	r1, r4
 800059c:	1940      	adds	r0, r0, r5
 800059e:	0c34      	lsrs	r4, r6, #16
 80005a0:	1824      	adds	r4, r4, r0
 80005a2:	b500      	push	{lr}
 80005a4:	42a5      	cmp	r5, r4
 80005a6:	d903      	bls.n	80005b0 <__aeabi_lmul+0x34>
 80005a8:	2080      	movs	r0, #128	; 0x80
 80005aa:	0240      	lsls	r0, r0, #9
 80005ac:	4680      	mov	r8, r0
 80005ae:	4441      	add	r1, r8
 80005b0:	0c25      	lsrs	r5, r4, #16
 80005b2:	186d      	adds	r5, r5, r1
 80005b4:	4661      	mov	r1, ip
 80005b6:	4359      	muls	r1, r3
 80005b8:	437a      	muls	r2, r7
 80005ba:	0430      	lsls	r0, r6, #16
 80005bc:	1949      	adds	r1, r1, r5
 80005be:	0424      	lsls	r4, r4, #16
 80005c0:	0c00      	lsrs	r0, r0, #16
 80005c2:	1820      	adds	r0, r4, r0
 80005c4:	1889      	adds	r1, r1, r2
 80005c6:	bc80      	pop	{r7}
 80005c8:	46b8      	mov	r8, r7
 80005ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005cc <__aeabi_f2uiz>:
 80005cc:	219e      	movs	r1, #158	; 0x9e
 80005ce:	b510      	push	{r4, lr}
 80005d0:	05c9      	lsls	r1, r1, #23
 80005d2:	1c04      	adds	r4, r0, #0
 80005d4:	f7ff ff84 	bl	80004e0 <__aeabi_fcmpge>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d103      	bne.n	80005e4 <__aeabi_f2uiz+0x18>
 80005dc:	1c20      	adds	r0, r4, #0
 80005de:	f000 fca7 	bl	8000f30 <__aeabi_f2iz>
 80005e2:	bd10      	pop	{r4, pc}
 80005e4:	219e      	movs	r1, #158	; 0x9e
 80005e6:	1c20      	adds	r0, r4, #0
 80005e8:	05c9      	lsls	r1, r1, #23
 80005ea:	f000 fad9 	bl	8000ba0 <__aeabi_fsub>
 80005ee:	f000 fc9f 	bl	8000f30 <__aeabi_f2iz>
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	061b      	lsls	r3, r3, #24
 80005f6:	469c      	mov	ip, r3
 80005f8:	4460      	add	r0, ip
 80005fa:	e7f2      	b.n	80005e2 <__aeabi_f2uiz+0x16>

080005fc <__aeabi_d2uiz>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	2200      	movs	r2, #0
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__aeabi_d2uiz+0x38>)
 8000602:	0004      	movs	r4, r0
 8000604:	000d      	movs	r5, r1
 8000606:	f7ff ff31 	bl	800046c <__aeabi_dcmpge>
 800060a:	2800      	cmp	r0, #0
 800060c:	d104      	bne.n	8000618 <__aeabi_d2uiz+0x1c>
 800060e:	0020      	movs	r0, r4
 8000610:	0029      	movs	r1, r5
 8000612:	f002 fa9d 	bl	8002b50 <__aeabi_d2iz>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_d2uiz+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	0020      	movs	r0, r4
 800061e:	0029      	movs	r1, r5
 8000620:	f001 ff04 	bl	800242c <__aeabi_dsub>
 8000624:	f002 fa94 	bl	8002b50 <__aeabi_d2iz>
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	061b      	lsls	r3, r3, #24
 800062c:	469c      	mov	ip, r3
 800062e:	4460      	add	r0, ip
 8000630:	e7f1      	b.n	8000616 <__aeabi_d2uiz+0x1a>
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41e00000 	.word	0x41e00000

08000638 <__udivmoddi4>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4657      	mov	r7, sl
 800063c:	464e      	mov	r6, r9
 800063e:	4645      	mov	r5, r8
 8000640:	46de      	mov	lr, fp
 8000642:	b5e0      	push	{r5, r6, r7, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	000d      	movs	r5, r1
 8000648:	4692      	mov	sl, r2
 800064a:	4699      	mov	r9, r3
 800064c:	b083      	sub	sp, #12
 800064e:	428b      	cmp	r3, r1
 8000650:	d830      	bhi.n	80006b4 <__udivmoddi4+0x7c>
 8000652:	d02d      	beq.n	80006b0 <__udivmoddi4+0x78>
 8000654:	4649      	mov	r1, r9
 8000656:	4650      	mov	r0, sl
 8000658:	f002 fb6c 	bl	8002d34 <__clzdi2>
 800065c:	0029      	movs	r1, r5
 800065e:	0006      	movs	r6, r0
 8000660:	0020      	movs	r0, r4
 8000662:	f002 fb67 	bl	8002d34 <__clzdi2>
 8000666:	1a33      	subs	r3, r6, r0
 8000668:	4698      	mov	r8, r3
 800066a:	3b20      	subs	r3, #32
 800066c:	469b      	mov	fp, r3
 800066e:	d433      	bmi.n	80006d8 <__udivmoddi4+0xa0>
 8000670:	465a      	mov	r2, fp
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	4642      	mov	r2, r8
 8000678:	001f      	movs	r7, r3
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001e      	movs	r6, r3
 8000680:	42af      	cmp	r7, r5
 8000682:	d83a      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000684:	42af      	cmp	r7, r5
 8000686:	d100      	bne.n	800068a <__udivmoddi4+0x52>
 8000688:	e078      	b.n	800077c <__udivmoddi4+0x144>
 800068a:	465b      	mov	r3, fp
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	41bd      	sbcs	r5, r7
 8000690:	2b00      	cmp	r3, #0
 8000692:	da00      	bge.n	8000696 <__udivmoddi4+0x5e>
 8000694:	e075      	b.n	8000782 <__udivmoddi4+0x14a>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	465a      	mov	r2, fp
 80006a2:	4093      	lsls	r3, r2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4642      	mov	r2, r8
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	e028      	b.n	8000702 <__udivmoddi4+0xca>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d9cf      	bls.n	8000654 <__udivmoddi4+0x1c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <__udivmoddi4+0x8e>
 80006c2:	601c      	str	r4, [r3, #0]
 80006c4:	605d      	str	r5, [r3, #4]
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	b003      	add	sp, #12
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	4642      	mov	r2, r8
 80006da:	2320      	movs	r3, #32
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	4652      	mov	r2, sl
 80006e0:	40da      	lsrs	r2, r3
 80006e2:	4641      	mov	r1, r8
 80006e4:	0013      	movs	r3, r2
 80006e6:	464a      	mov	r2, r9
 80006e8:	408a      	lsls	r2, r1
 80006ea:	0017      	movs	r7, r2
 80006ec:	4642      	mov	r2, r8
 80006ee:	431f      	orrs	r7, r3
 80006f0:	4653      	mov	r3, sl
 80006f2:	4093      	lsls	r3, r2
 80006f4:	001e      	movs	r6, r3
 80006f6:	42af      	cmp	r7, r5
 80006f8:	d9c4      	bls.n	8000684 <__udivmoddi4+0x4c>
 80006fa:	2200      	movs	r2, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	4643      	mov	r3, r8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0d9      	beq.n	80006bc <__udivmoddi4+0x84>
 8000708:	07fb      	lsls	r3, r7, #31
 800070a:	0872      	lsrs	r2, r6, #1
 800070c:	431a      	orrs	r2, r3
 800070e:	4646      	mov	r6, r8
 8000710:	087b      	lsrs	r3, r7, #1
 8000712:	e00e      	b.n	8000732 <__udivmoddi4+0xfa>
 8000714:	42ab      	cmp	r3, r5
 8000716:	d101      	bne.n	800071c <__udivmoddi4+0xe4>
 8000718:	42a2      	cmp	r2, r4
 800071a:	d80c      	bhi.n	8000736 <__udivmoddi4+0xfe>
 800071c:	1aa4      	subs	r4, r4, r2
 800071e:	419d      	sbcs	r5, r3
 8000720:	2001      	movs	r0, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2100      	movs	r1, #0
 8000728:	3e01      	subs	r6, #1
 800072a:	1824      	adds	r4, r4, r0
 800072c:	414d      	adcs	r5, r1
 800072e:	2e00      	cmp	r6, #0
 8000730:	d006      	beq.n	8000740 <__udivmoddi4+0x108>
 8000732:	42ab      	cmp	r3, r5
 8000734:	d9ee      	bls.n	8000714 <__udivmoddi4+0xdc>
 8000736:	3e01      	subs	r6, #1
 8000738:	1924      	adds	r4, r4, r4
 800073a:	416d      	adcs	r5, r5
 800073c:	2e00      	cmp	r6, #0
 800073e:	d1f8      	bne.n	8000732 <__udivmoddi4+0xfa>
 8000740:	9800      	ldr	r0, [sp, #0]
 8000742:	9901      	ldr	r1, [sp, #4]
 8000744:	465b      	mov	r3, fp
 8000746:	1900      	adds	r0, r0, r4
 8000748:	4169      	adcs	r1, r5
 800074a:	2b00      	cmp	r3, #0
 800074c:	db24      	blt.n	8000798 <__udivmoddi4+0x160>
 800074e:	002b      	movs	r3, r5
 8000750:	465a      	mov	r2, fp
 8000752:	4644      	mov	r4, r8
 8000754:	40d3      	lsrs	r3, r2
 8000756:	002a      	movs	r2, r5
 8000758:	40e2      	lsrs	r2, r4
 800075a:	001c      	movs	r4, r3
 800075c:	465b      	mov	r3, fp
 800075e:	0015      	movs	r5, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	db2a      	blt.n	80007ba <__udivmoddi4+0x182>
 8000764:	0026      	movs	r6, r4
 8000766:	409e      	lsls	r6, r3
 8000768:	0033      	movs	r3, r6
 800076a:	0026      	movs	r6, r4
 800076c:	4647      	mov	r7, r8
 800076e:	40be      	lsls	r6, r7
 8000770:	0032      	movs	r2, r6
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	4199      	sbcs	r1, r3
 8000776:	9000      	str	r0, [sp, #0]
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	e79f      	b.n	80006bc <__udivmoddi4+0x84>
 800077c:	42a3      	cmp	r3, r4
 800077e:	d8bc      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000780:	e783      	b.n	800068a <__udivmoddi4+0x52>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	2100      	movs	r1, #0
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	9100      	str	r1, [sp, #0]
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	2201      	movs	r2, #1
 8000792:	40da      	lsrs	r2, r3
 8000794:	9201      	str	r2, [sp, #4]
 8000796:	e786      	b.n	80006a6 <__udivmoddi4+0x6e>
 8000798:	4642      	mov	r2, r8
 800079a:	2320      	movs	r3, #32
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	002a      	movs	r2, r5
 80007a0:	4646      	mov	r6, r8
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0023      	movs	r3, r4
 80007a6:	40f3      	lsrs	r3, r6
 80007a8:	4644      	mov	r4, r8
 80007aa:	4313      	orrs	r3, r2
 80007ac:	002a      	movs	r2, r5
 80007ae:	40e2      	lsrs	r2, r4
 80007b0:	001c      	movs	r4, r3
 80007b2:	465b      	mov	r3, fp
 80007b4:	0015      	movs	r5, r2
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dad4      	bge.n	8000764 <__udivmoddi4+0x12c>
 80007ba:	4642      	mov	r2, r8
 80007bc:	002f      	movs	r7, r5
 80007be:	2320      	movs	r3, #32
 80007c0:	0026      	movs	r6, r4
 80007c2:	4097      	lsls	r7, r2
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	40de      	lsrs	r6, r3
 80007c8:	003b      	movs	r3, r7
 80007ca:	4333      	orrs	r3, r6
 80007cc:	e7cd      	b.n	800076a <__udivmoddi4+0x132>
 80007ce:	46c0      	nop			; (mov r8, r8)

080007d0 <__gnu_ldivmod_helper>:
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d2:	46ce      	mov	lr, r9
 80007d4:	4647      	mov	r7, r8
 80007d6:	b580      	push	{r7, lr}
 80007d8:	4691      	mov	r9, r2
 80007da:	4698      	mov	r8, r3
 80007dc:	0004      	movs	r4, r0
 80007de:	000d      	movs	r5, r1
 80007e0:	f002 fab4 	bl	8002d4c <__divdi3>
 80007e4:	0007      	movs	r7, r0
 80007e6:	000e      	movs	r6, r1
 80007e8:	0002      	movs	r2, r0
 80007ea:	000b      	movs	r3, r1
 80007ec:	4648      	mov	r0, r9
 80007ee:	4641      	mov	r1, r8
 80007f0:	f7ff fec4 	bl	800057c <__aeabi_lmul>
 80007f4:	1a24      	subs	r4, r4, r0
 80007f6:	418d      	sbcs	r5, r1
 80007f8:	9b08      	ldr	r3, [sp, #32]
 80007fa:	0038      	movs	r0, r7
 80007fc:	0031      	movs	r1, r6
 80007fe:	601c      	str	r4, [r3, #0]
 8000800:	605d      	str	r5, [r3, #4]
 8000802:	bcc0      	pop	{r6, r7}
 8000804:	46b9      	mov	r9, r7
 8000806:	46b0      	mov	r8, r6
 8000808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)

0800080c <__aeabi_fdiv>:
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	464f      	mov	r7, r9
 8000810:	4646      	mov	r6, r8
 8000812:	46d6      	mov	lr, sl
 8000814:	0245      	lsls	r5, r0, #9
 8000816:	b5c0      	push	{r6, r7, lr}
 8000818:	0047      	lsls	r7, r0, #1
 800081a:	1c0c      	adds	r4, r1, #0
 800081c:	0a6d      	lsrs	r5, r5, #9
 800081e:	0e3f      	lsrs	r7, r7, #24
 8000820:	0fc6      	lsrs	r6, r0, #31
 8000822:	2f00      	cmp	r7, #0
 8000824:	d066      	beq.n	80008f4 <__aeabi_fdiv+0xe8>
 8000826:	2fff      	cmp	r7, #255	; 0xff
 8000828:	d06c      	beq.n	8000904 <__aeabi_fdiv+0xf8>
 800082a:	2300      	movs	r3, #0
 800082c:	00ea      	lsls	r2, r5, #3
 800082e:	2580      	movs	r5, #128	; 0x80
 8000830:	4699      	mov	r9, r3
 8000832:	469a      	mov	sl, r3
 8000834:	04ed      	lsls	r5, r5, #19
 8000836:	4315      	orrs	r5, r2
 8000838:	3f7f      	subs	r7, #127	; 0x7f
 800083a:	0260      	lsls	r0, r4, #9
 800083c:	0061      	lsls	r1, r4, #1
 800083e:	0a43      	lsrs	r3, r0, #9
 8000840:	4698      	mov	r8, r3
 8000842:	0e09      	lsrs	r1, r1, #24
 8000844:	0fe4      	lsrs	r4, r4, #31
 8000846:	2900      	cmp	r1, #0
 8000848:	d048      	beq.n	80008dc <__aeabi_fdiv+0xd0>
 800084a:	29ff      	cmp	r1, #255	; 0xff
 800084c:	d010      	beq.n	8000870 <__aeabi_fdiv+0x64>
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	00d8      	lsls	r0, r3, #3
 8000852:	04d2      	lsls	r2, r2, #19
 8000854:	4302      	orrs	r2, r0
 8000856:	4690      	mov	r8, r2
 8000858:	2000      	movs	r0, #0
 800085a:	397f      	subs	r1, #127	; 0x7f
 800085c:	464a      	mov	r2, r9
 800085e:	0033      	movs	r3, r6
 8000860:	1a7f      	subs	r7, r7, r1
 8000862:	4302      	orrs	r2, r0
 8000864:	496c      	ldr	r1, [pc, #432]	; (8000a18 <__aeabi_fdiv+0x20c>)
 8000866:	0092      	lsls	r2, r2, #2
 8000868:	588a      	ldr	r2, [r1, r2]
 800086a:	4063      	eors	r3, r4
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4697      	mov	pc, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d16d      	bne.n	8000950 <__aeabi_fdiv+0x144>
 8000874:	2002      	movs	r0, #2
 8000876:	3fff      	subs	r7, #255	; 0xff
 8000878:	e033      	b.n	80008e2 <__aeabi_fdiv+0xd6>
 800087a:	2300      	movs	r3, #0
 800087c:	4698      	mov	r8, r3
 800087e:	0026      	movs	r6, r4
 8000880:	4645      	mov	r5, r8
 8000882:	4682      	mov	sl, r0
 8000884:	4653      	mov	r3, sl
 8000886:	2b02      	cmp	r3, #2
 8000888:	d100      	bne.n	800088c <__aeabi_fdiv+0x80>
 800088a:	e07f      	b.n	800098c <__aeabi_fdiv+0x180>
 800088c:	2b03      	cmp	r3, #3
 800088e:	d100      	bne.n	8000892 <__aeabi_fdiv+0x86>
 8000890:	e094      	b.n	80009bc <__aeabi_fdiv+0x1b0>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d017      	beq.n	80008c6 <__aeabi_fdiv+0xba>
 8000896:	0038      	movs	r0, r7
 8000898:	307f      	adds	r0, #127	; 0x7f
 800089a:	2800      	cmp	r0, #0
 800089c:	dd5f      	ble.n	800095e <__aeabi_fdiv+0x152>
 800089e:	076b      	lsls	r3, r5, #29
 80008a0:	d004      	beq.n	80008ac <__aeabi_fdiv+0xa0>
 80008a2:	230f      	movs	r3, #15
 80008a4:	402b      	ands	r3, r5
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d000      	beq.n	80008ac <__aeabi_fdiv+0xa0>
 80008aa:	3504      	adds	r5, #4
 80008ac:	012b      	lsls	r3, r5, #4
 80008ae:	d503      	bpl.n	80008b8 <__aeabi_fdiv+0xac>
 80008b0:	0038      	movs	r0, r7
 80008b2:	4b5a      	ldr	r3, [pc, #360]	; (8000a1c <__aeabi_fdiv+0x210>)
 80008b4:	3080      	adds	r0, #128	; 0x80
 80008b6:	401d      	ands	r5, r3
 80008b8:	28fe      	cmp	r0, #254	; 0xfe
 80008ba:	dc67      	bgt.n	800098c <__aeabi_fdiv+0x180>
 80008bc:	01ad      	lsls	r5, r5, #6
 80008be:	0a6d      	lsrs	r5, r5, #9
 80008c0:	b2c0      	uxtb	r0, r0
 80008c2:	e002      	b.n	80008ca <__aeabi_fdiv+0xbe>
 80008c4:	001e      	movs	r6, r3
 80008c6:	2000      	movs	r0, #0
 80008c8:	2500      	movs	r5, #0
 80008ca:	05c0      	lsls	r0, r0, #23
 80008cc:	4328      	orrs	r0, r5
 80008ce:	07f6      	lsls	r6, r6, #31
 80008d0:	4330      	orrs	r0, r6
 80008d2:	bce0      	pop	{r5, r6, r7}
 80008d4:	46ba      	mov	sl, r7
 80008d6:	46b1      	mov	r9, r6
 80008d8:	46a8      	mov	r8, r5
 80008da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d12b      	bne.n	8000938 <__aeabi_fdiv+0x12c>
 80008e0:	2001      	movs	r0, #1
 80008e2:	464a      	mov	r2, r9
 80008e4:	0033      	movs	r3, r6
 80008e6:	494e      	ldr	r1, [pc, #312]	; (8000a20 <__aeabi_fdiv+0x214>)
 80008e8:	4302      	orrs	r2, r0
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	588a      	ldr	r2, [r1, r2]
 80008ee:	4063      	eors	r3, r4
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4697      	mov	pc, r2
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d113      	bne.n	8000920 <__aeabi_fdiv+0x114>
 80008f8:	2304      	movs	r3, #4
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b03      	subs	r3, #3
 80008fe:	2700      	movs	r7, #0
 8000900:	469a      	mov	sl, r3
 8000902:	e79a      	b.n	800083a <__aeabi_fdiv+0x2e>
 8000904:	2d00      	cmp	r5, #0
 8000906:	d105      	bne.n	8000914 <__aeabi_fdiv+0x108>
 8000908:	2308      	movs	r3, #8
 800090a:	4699      	mov	r9, r3
 800090c:	3b06      	subs	r3, #6
 800090e:	27ff      	movs	r7, #255	; 0xff
 8000910:	469a      	mov	sl, r3
 8000912:	e792      	b.n	800083a <__aeabi_fdiv+0x2e>
 8000914:	230c      	movs	r3, #12
 8000916:	4699      	mov	r9, r3
 8000918:	3b09      	subs	r3, #9
 800091a:	27ff      	movs	r7, #255	; 0xff
 800091c:	469a      	mov	sl, r3
 800091e:	e78c      	b.n	800083a <__aeabi_fdiv+0x2e>
 8000920:	0028      	movs	r0, r5
 8000922:	f002 f9e9 	bl	8002cf8 <__clzsi2>
 8000926:	2776      	movs	r7, #118	; 0x76
 8000928:	1f43      	subs	r3, r0, #5
 800092a:	409d      	lsls	r5, r3
 800092c:	2300      	movs	r3, #0
 800092e:	427f      	negs	r7, r7
 8000930:	4699      	mov	r9, r3
 8000932:	469a      	mov	sl, r3
 8000934:	1a3f      	subs	r7, r7, r0
 8000936:	e780      	b.n	800083a <__aeabi_fdiv+0x2e>
 8000938:	0018      	movs	r0, r3
 800093a:	f002 f9dd 	bl	8002cf8 <__clzsi2>
 800093e:	4642      	mov	r2, r8
 8000940:	1f43      	subs	r3, r0, #5
 8000942:	2176      	movs	r1, #118	; 0x76
 8000944:	409a      	lsls	r2, r3
 8000946:	4249      	negs	r1, r1
 8000948:	1a09      	subs	r1, r1, r0
 800094a:	4690      	mov	r8, r2
 800094c:	2000      	movs	r0, #0
 800094e:	e785      	b.n	800085c <__aeabi_fdiv+0x50>
 8000950:	21ff      	movs	r1, #255	; 0xff
 8000952:	2003      	movs	r0, #3
 8000954:	e782      	b.n	800085c <__aeabi_fdiv+0x50>
 8000956:	001e      	movs	r6, r3
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2500      	movs	r5, #0
 800095c:	e7b5      	b.n	80008ca <__aeabi_fdiv+0xbe>
 800095e:	2301      	movs	r3, #1
 8000960:	1a1b      	subs	r3, r3, r0
 8000962:	2b1b      	cmp	r3, #27
 8000964:	dcaf      	bgt.n	80008c6 <__aeabi_fdiv+0xba>
 8000966:	379e      	adds	r7, #158	; 0x9e
 8000968:	0029      	movs	r1, r5
 800096a:	40bd      	lsls	r5, r7
 800096c:	40d9      	lsrs	r1, r3
 800096e:	1e6a      	subs	r2, r5, #1
 8000970:	4195      	sbcs	r5, r2
 8000972:	430d      	orrs	r5, r1
 8000974:	076b      	lsls	r3, r5, #29
 8000976:	d004      	beq.n	8000982 <__aeabi_fdiv+0x176>
 8000978:	230f      	movs	r3, #15
 800097a:	402b      	ands	r3, r5
 800097c:	2b04      	cmp	r3, #4
 800097e:	d000      	beq.n	8000982 <__aeabi_fdiv+0x176>
 8000980:	3504      	adds	r5, #4
 8000982:	016b      	lsls	r3, r5, #5
 8000984:	d544      	bpl.n	8000a10 <__aeabi_fdiv+0x204>
 8000986:	2001      	movs	r0, #1
 8000988:	2500      	movs	r5, #0
 800098a:	e79e      	b.n	80008ca <__aeabi_fdiv+0xbe>
 800098c:	20ff      	movs	r0, #255	; 0xff
 800098e:	2500      	movs	r5, #0
 8000990:	e79b      	b.n	80008ca <__aeabi_fdiv+0xbe>
 8000992:	2580      	movs	r5, #128	; 0x80
 8000994:	2600      	movs	r6, #0
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	03ed      	lsls	r5, r5, #15
 800099a:	e796      	b.n	80008ca <__aeabi_fdiv+0xbe>
 800099c:	2300      	movs	r3, #0
 800099e:	4698      	mov	r8, r3
 80009a0:	2080      	movs	r0, #128	; 0x80
 80009a2:	03c0      	lsls	r0, r0, #15
 80009a4:	4205      	tst	r5, r0
 80009a6:	d009      	beq.n	80009bc <__aeabi_fdiv+0x1b0>
 80009a8:	4643      	mov	r3, r8
 80009aa:	4203      	tst	r3, r0
 80009ac:	d106      	bne.n	80009bc <__aeabi_fdiv+0x1b0>
 80009ae:	4645      	mov	r5, r8
 80009b0:	4305      	orrs	r5, r0
 80009b2:	026d      	lsls	r5, r5, #9
 80009b4:	0026      	movs	r6, r4
 80009b6:	20ff      	movs	r0, #255	; 0xff
 80009b8:	0a6d      	lsrs	r5, r5, #9
 80009ba:	e786      	b.n	80008ca <__aeabi_fdiv+0xbe>
 80009bc:	2080      	movs	r0, #128	; 0x80
 80009be:	03c0      	lsls	r0, r0, #15
 80009c0:	4305      	orrs	r5, r0
 80009c2:	026d      	lsls	r5, r5, #9
 80009c4:	20ff      	movs	r0, #255	; 0xff
 80009c6:	0a6d      	lsrs	r5, r5, #9
 80009c8:	e77f      	b.n	80008ca <__aeabi_fdiv+0xbe>
 80009ca:	4641      	mov	r1, r8
 80009cc:	016a      	lsls	r2, r5, #5
 80009ce:	0148      	lsls	r0, r1, #5
 80009d0:	4282      	cmp	r2, r0
 80009d2:	d219      	bcs.n	8000a08 <__aeabi_fdiv+0x1fc>
 80009d4:	211b      	movs	r1, #27
 80009d6:	2500      	movs	r5, #0
 80009d8:	3f01      	subs	r7, #1
 80009da:	2601      	movs	r6, #1
 80009dc:	0014      	movs	r4, r2
 80009de:	006d      	lsls	r5, r5, #1
 80009e0:	0052      	lsls	r2, r2, #1
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	db01      	blt.n	80009ea <__aeabi_fdiv+0x1de>
 80009e6:	4290      	cmp	r0, r2
 80009e8:	d801      	bhi.n	80009ee <__aeabi_fdiv+0x1e2>
 80009ea:	1a12      	subs	r2, r2, r0
 80009ec:	4335      	orrs	r5, r6
 80009ee:	3901      	subs	r1, #1
 80009f0:	2900      	cmp	r1, #0
 80009f2:	d1f3      	bne.n	80009dc <__aeabi_fdiv+0x1d0>
 80009f4:	1e50      	subs	r0, r2, #1
 80009f6:	4182      	sbcs	r2, r0
 80009f8:	0038      	movs	r0, r7
 80009fa:	307f      	adds	r0, #127	; 0x7f
 80009fc:	001e      	movs	r6, r3
 80009fe:	4315      	orrs	r5, r2
 8000a00:	2800      	cmp	r0, #0
 8000a02:	dd00      	ble.n	8000a06 <__aeabi_fdiv+0x1fa>
 8000a04:	e74b      	b.n	800089e <__aeabi_fdiv+0x92>
 8000a06:	e7aa      	b.n	800095e <__aeabi_fdiv+0x152>
 8000a08:	211a      	movs	r1, #26
 8000a0a:	2501      	movs	r5, #1
 8000a0c:	1a12      	subs	r2, r2, r0
 8000a0e:	e7e4      	b.n	80009da <__aeabi_fdiv+0x1ce>
 8000a10:	01ad      	lsls	r5, r5, #6
 8000a12:	2000      	movs	r0, #0
 8000a14:	0a6d      	lsrs	r5, r5, #9
 8000a16:	e758      	b.n	80008ca <__aeabi_fdiv+0xbe>
 8000a18:	0801f318 	.word	0x0801f318
 8000a1c:	f7ffffff 	.word	0xf7ffffff
 8000a20:	0801f358 	.word	0x0801f358

08000a24 <__eqsf2>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	0042      	lsls	r2, r0, #1
 8000a28:	024e      	lsls	r6, r1, #9
 8000a2a:	004c      	lsls	r4, r1, #1
 8000a2c:	0245      	lsls	r5, r0, #9
 8000a2e:	0a6d      	lsrs	r5, r5, #9
 8000a30:	0e12      	lsrs	r2, r2, #24
 8000a32:	0fc3      	lsrs	r3, r0, #31
 8000a34:	0a76      	lsrs	r6, r6, #9
 8000a36:	0e24      	lsrs	r4, r4, #24
 8000a38:	0fc9      	lsrs	r1, r1, #31
 8000a3a:	2aff      	cmp	r2, #255	; 0xff
 8000a3c:	d00f      	beq.n	8000a5e <__eqsf2+0x3a>
 8000a3e:	2cff      	cmp	r4, #255	; 0xff
 8000a40:	d011      	beq.n	8000a66 <__eqsf2+0x42>
 8000a42:	2001      	movs	r0, #1
 8000a44:	42a2      	cmp	r2, r4
 8000a46:	d000      	beq.n	8000a4a <__eqsf2+0x26>
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
 8000a4a:	42b5      	cmp	r5, r6
 8000a4c:	d1fc      	bne.n	8000a48 <__eqsf2+0x24>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d00d      	beq.n	8000a6e <__eqsf2+0x4a>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d1f8      	bne.n	8000a48 <__eqsf2+0x24>
 8000a56:	0028      	movs	r0, r5
 8000a58:	1e45      	subs	r5, r0, #1
 8000a5a:	41a8      	sbcs	r0, r5
 8000a5c:	e7f4      	b.n	8000a48 <__eqsf2+0x24>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d1f1      	bne.n	8000a48 <__eqsf2+0x24>
 8000a64:	e7eb      	b.n	8000a3e <__eqsf2+0x1a>
 8000a66:	2001      	movs	r0, #1
 8000a68:	2e00      	cmp	r6, #0
 8000a6a:	d1ed      	bne.n	8000a48 <__eqsf2+0x24>
 8000a6c:	e7e9      	b.n	8000a42 <__eqsf2+0x1e>
 8000a6e:	2000      	movs	r0, #0
 8000a70:	e7ea      	b.n	8000a48 <__eqsf2+0x24>
 8000a72:	46c0      	nop			; (mov r8, r8)

08000a74 <__gesf2>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	0042      	lsls	r2, r0, #1
 8000a78:	0246      	lsls	r6, r0, #9
 8000a7a:	024d      	lsls	r5, r1, #9
 8000a7c:	004c      	lsls	r4, r1, #1
 8000a7e:	0fc3      	lsrs	r3, r0, #31
 8000a80:	0a76      	lsrs	r6, r6, #9
 8000a82:	0e12      	lsrs	r2, r2, #24
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	0e24      	lsrs	r4, r4, #24
 8000a88:	0fc8      	lsrs	r0, r1, #31
 8000a8a:	2aff      	cmp	r2, #255	; 0xff
 8000a8c:	d01f      	beq.n	8000ace <__gesf2+0x5a>
 8000a8e:	2cff      	cmp	r4, #255	; 0xff
 8000a90:	d010      	beq.n	8000ab4 <__gesf2+0x40>
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d11f      	bne.n	8000ad6 <__gesf2+0x62>
 8000a96:	4271      	negs	r1, r6
 8000a98:	4171      	adcs	r1, r6
 8000a9a:	2c00      	cmp	r4, #0
 8000a9c:	d101      	bne.n	8000aa2 <__gesf2+0x2e>
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d01e      	beq.n	8000ae0 <__gesf2+0x6c>
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d10e      	bne.n	8000ac4 <__gesf2+0x50>
 8000aa6:	4283      	cmp	r3, r0
 8000aa8:	d01e      	beq.n	8000ae8 <__gesf2+0x74>
 8000aaa:	2102      	movs	r1, #2
 8000aac:	1e58      	subs	r0, r3, #1
 8000aae:	4008      	ands	r0, r1
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d126      	bne.n	8000b06 <__gesf2+0x92>
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d1f4      	bne.n	8000aa6 <__gesf2+0x32>
 8000abc:	4271      	negs	r1, r6
 8000abe:	4171      	adcs	r1, r6
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	d0f0      	beq.n	8000aa6 <__gesf2+0x32>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d1f4      	bne.n	8000ab2 <__gesf2+0x3e>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4240      	negs	r0, r0
 8000acc:	e7f1      	b.n	8000ab2 <__gesf2+0x3e>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d119      	bne.n	8000b06 <__gesf2+0x92>
 8000ad2:	2cff      	cmp	r4, #255	; 0xff
 8000ad4:	d0ee      	beq.n	8000ab4 <__gesf2+0x40>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d1e5      	bne.n	8000aa6 <__gesf2+0x32>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d1e3      	bne.n	8000aa6 <__gesf2+0x32>
 8000ade:	e7e4      	b.n	8000aaa <__gesf2+0x36>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d0e5      	beq.n	8000ab2 <__gesf2+0x3e>
 8000ae6:	e7e0      	b.n	8000aaa <__gesf2+0x36>
 8000ae8:	42a2      	cmp	r2, r4
 8000aea:	dc05      	bgt.n	8000af8 <__gesf2+0x84>
 8000aec:	dbea      	blt.n	8000ac4 <__gesf2+0x50>
 8000aee:	42ae      	cmp	r6, r5
 8000af0:	d802      	bhi.n	8000af8 <__gesf2+0x84>
 8000af2:	d3e7      	bcc.n	8000ac4 <__gesf2+0x50>
 8000af4:	2000      	movs	r0, #0
 8000af6:	e7dc      	b.n	8000ab2 <__gesf2+0x3e>
 8000af8:	4241      	negs	r1, r0
 8000afa:	4141      	adcs	r1, r0
 8000afc:	4248      	negs	r0, r1
 8000afe:	2102      	movs	r1, #2
 8000b00:	4008      	ands	r0, r1
 8000b02:	3801      	subs	r0, #1
 8000b04:	e7d5      	b.n	8000ab2 <__gesf2+0x3e>
 8000b06:	2002      	movs	r0, #2
 8000b08:	4240      	negs	r0, r0
 8000b0a:	e7d2      	b.n	8000ab2 <__gesf2+0x3e>

08000b0c <__lesf2>:
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	0042      	lsls	r2, r0, #1
 8000b10:	0246      	lsls	r6, r0, #9
 8000b12:	024d      	lsls	r5, r1, #9
 8000b14:	004c      	lsls	r4, r1, #1
 8000b16:	0fc3      	lsrs	r3, r0, #31
 8000b18:	0a76      	lsrs	r6, r6, #9
 8000b1a:	0e12      	lsrs	r2, r2, #24
 8000b1c:	0a6d      	lsrs	r5, r5, #9
 8000b1e:	0e24      	lsrs	r4, r4, #24
 8000b20:	0fc8      	lsrs	r0, r1, #31
 8000b22:	2aff      	cmp	r2, #255	; 0xff
 8000b24:	d00d      	beq.n	8000b42 <__lesf2+0x36>
 8000b26:	2cff      	cmp	r4, #255	; 0xff
 8000b28:	d00f      	beq.n	8000b4a <__lesf2+0x3e>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d123      	bne.n	8000b76 <__lesf2+0x6a>
 8000b2e:	4271      	negs	r1, r6
 8000b30:	4171      	adcs	r1, r6
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d10f      	bne.n	8000b56 <__lesf2+0x4a>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d10d      	bne.n	8000b56 <__lesf2+0x4a>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2e00      	cmp	r6, #0
 8000b3e:	d014      	beq.n	8000b6a <__lesf2+0x5e>
 8000b40:	e00d      	b.n	8000b5e <__lesf2+0x52>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d110      	bne.n	8000b68 <__lesf2+0x5c>
 8000b46:	2cff      	cmp	r4, #255	; 0xff
 8000b48:	d115      	bne.n	8000b76 <__lesf2+0x6a>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d10c      	bne.n	8000b68 <__lesf2+0x5c>
 8000b4e:	2a00      	cmp	r2, #0
 8000b50:	d103      	bne.n	8000b5a <__lesf2+0x4e>
 8000b52:	4271      	negs	r1, r6
 8000b54:	4171      	adcs	r1, r6
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d108      	bne.n	8000b6c <__lesf2+0x60>
 8000b5a:	4283      	cmp	r3, r0
 8000b5c:	d010      	beq.n	8000b80 <__lesf2+0x74>
 8000b5e:	2102      	movs	r1, #2
 8000b60:	1e58      	subs	r0, r3, #1
 8000b62:	4008      	ands	r0, r1
 8000b64:	3801      	subs	r0, #1
 8000b66:	e000      	b.n	8000b6a <__lesf2+0x5e>
 8000b68:	2002      	movs	r0, #2
 8000b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d1fc      	bne.n	8000b6a <__lesf2+0x5e>
 8000b70:	2001      	movs	r0, #1
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7f9      	b.n	8000b6a <__lesf2+0x5e>
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d1ef      	bne.n	8000b5a <__lesf2+0x4e>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d1ed      	bne.n	8000b5a <__lesf2+0x4e>
 8000b7e:	e7ee      	b.n	8000b5e <__lesf2+0x52>
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	dc05      	bgt.n	8000b90 <__lesf2+0x84>
 8000b84:	dbf2      	blt.n	8000b6c <__lesf2+0x60>
 8000b86:	42ae      	cmp	r6, r5
 8000b88:	d802      	bhi.n	8000b90 <__lesf2+0x84>
 8000b8a:	d3ef      	bcc.n	8000b6c <__lesf2+0x60>
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	e7ec      	b.n	8000b6a <__lesf2+0x5e>
 8000b90:	4241      	negs	r1, r0
 8000b92:	4141      	adcs	r1, r0
 8000b94:	4248      	negs	r0, r1
 8000b96:	2102      	movs	r1, #2
 8000b98:	4008      	ands	r0, r1
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	e7e5      	b.n	8000b6a <__lesf2+0x5e>
 8000b9e:	46c0      	nop			; (mov r8, r8)

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba2:	4646      	mov	r6, r8
 8000ba4:	46d6      	mov	lr, sl
 8000ba6:	464f      	mov	r7, r9
 8000ba8:	0243      	lsls	r3, r0, #9
 8000baa:	0a5b      	lsrs	r3, r3, #9
 8000bac:	00da      	lsls	r2, r3, #3
 8000bae:	4694      	mov	ip, r2
 8000bb0:	024a      	lsls	r2, r1, #9
 8000bb2:	b5c0      	push	{r6, r7, lr}
 8000bb4:	0044      	lsls	r4, r0, #1
 8000bb6:	0a56      	lsrs	r6, r2, #9
 8000bb8:	1c05      	adds	r5, r0, #0
 8000bba:	46b0      	mov	r8, r6
 8000bbc:	0e24      	lsrs	r4, r4, #24
 8000bbe:	004e      	lsls	r6, r1, #1
 8000bc0:	0992      	lsrs	r2, r2, #6
 8000bc2:	001f      	movs	r7, r3
 8000bc4:	0020      	movs	r0, r4
 8000bc6:	4692      	mov	sl, r2
 8000bc8:	0fed      	lsrs	r5, r5, #31
 8000bca:	0e36      	lsrs	r6, r6, #24
 8000bcc:	0fc9      	lsrs	r1, r1, #31
 8000bce:	2eff      	cmp	r6, #255	; 0xff
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x34>
 8000bd2:	e07f      	b.n	8000cd4 <__aeabi_fsub+0x134>
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4051      	eors	r1, r2
 8000bd8:	428d      	cmp	r5, r1
 8000bda:	d051      	beq.n	8000c80 <__aeabi_fsub+0xe0>
 8000bdc:	1ba2      	subs	r2, r4, r6
 8000bde:	4691      	mov	r9, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	dc00      	bgt.n	8000be6 <__aeabi_fsub+0x46>
 8000be4:	e07e      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e099      	b.n	8000d20 <__aeabi_fsub+0x180>
 8000bec:	2cff      	cmp	r4, #255	; 0xff
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fsub+0x52>
 8000bf0:	e08c      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	4652      	mov	r2, sl
 8000bf6:	04db      	lsls	r3, r3, #19
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	4692      	mov	sl, r2
 8000bfc:	464a      	mov	r2, r9
 8000bfe:	2301      	movs	r3, #1
 8000c00:	2a1b      	cmp	r2, #27
 8000c02:	dc08      	bgt.n	8000c16 <__aeabi_fsub+0x76>
 8000c04:	4653      	mov	r3, sl
 8000c06:	2120      	movs	r1, #32
 8000c08:	40d3      	lsrs	r3, r2
 8000c0a:	1a89      	subs	r1, r1, r2
 8000c0c:	4652      	mov	r2, sl
 8000c0e:	408a      	lsls	r2, r1
 8000c10:	1e51      	subs	r1, r2, #1
 8000c12:	418a      	sbcs	r2, r1
 8000c14:	4313      	orrs	r3, r2
 8000c16:	4662      	mov	r2, ip
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	015a      	lsls	r2, r3, #5
 8000c1c:	d400      	bmi.n	8000c20 <__aeabi_fsub+0x80>
 8000c1e:	e0f3      	b.n	8000e08 <__aeabi_fsub+0x268>
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	099e      	lsrs	r6, r3, #6
 8000c24:	0030      	movs	r0, r6
 8000c26:	f002 f867 	bl	8002cf8 <__clzsi2>
 8000c2a:	3805      	subs	r0, #5
 8000c2c:	4086      	lsls	r6, r0
 8000c2e:	4284      	cmp	r4, r0
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_fsub+0x94>
 8000c32:	e0f7      	b.n	8000e24 <__aeabi_fsub+0x284>
 8000c34:	0032      	movs	r2, r6
 8000c36:	1b04      	subs	r4, r0, r4
 8000c38:	2020      	movs	r0, #32
 8000c3a:	3401      	adds	r4, #1
 8000c3c:	40e2      	lsrs	r2, r4
 8000c3e:	1b04      	subs	r4, r0, r4
 8000c40:	40a6      	lsls	r6, r4
 8000c42:	0033      	movs	r3, r6
 8000c44:	1e5e      	subs	r6, r3, #1
 8000c46:	41b3      	sbcs	r3, r6
 8000c48:	2400      	movs	r4, #0
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	075a      	lsls	r2, r3, #29
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fsub+0xba>
 8000c50:	220f      	movs	r2, #15
 8000c52:	401a      	ands	r2, r3
 8000c54:	2a04      	cmp	r2, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fsub+0xba>
 8000c58:	3304      	adds	r3, #4
 8000c5a:	015a      	lsls	r2, r3, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0xc0>
 8000c5e:	e0d6      	b.n	8000e0e <__aeabi_fsub+0x26e>
 8000c60:	1c62      	adds	r2, r4, #1
 8000c62:	2cfe      	cmp	r4, #254	; 0xfe
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0xc8>
 8000c66:	e0da      	b.n	8000e1e <__aeabi_fsub+0x27e>
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	0a5f      	lsrs	r7, r3, #9
 8000c6c:	b2d0      	uxtb	r0, r2
 8000c6e:	05c0      	lsls	r0, r0, #23
 8000c70:	4338      	orrs	r0, r7
 8000c72:	07ed      	lsls	r5, r5, #31
 8000c74:	4328      	orrs	r0, r5
 8000c76:	bce0      	pop	{r5, r6, r7}
 8000c78:	46ba      	mov	sl, r7
 8000c7a:	46b1      	mov	r9, r6
 8000c7c:	46a8      	mov	r8, r5
 8000c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c80:	1ba2      	subs	r2, r4, r6
 8000c82:	4691      	mov	r9, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	dd63      	ble.n	8000d50 <__aeabi_fsub+0x1b0>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_fsub+0xee>
 8000c8c:	e099      	b.n	8000dc2 <__aeabi_fsub+0x222>
 8000c8e:	2cff      	cmp	r4, #255	; 0xff
 8000c90:	d03c      	beq.n	8000d0c <__aeabi_fsub+0x16c>
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	4652      	mov	r2, sl
 8000c96:	04db      	lsls	r3, r3, #19
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	4692      	mov	sl, r2
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2a1b      	cmp	r2, #27
 8000ca2:	dc08      	bgt.n	8000cb6 <__aeabi_fsub+0x116>
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	40d3      	lsrs	r3, r2
 8000caa:	1a89      	subs	r1, r1, r2
 8000cac:	4652      	mov	r2, sl
 8000cae:	408a      	lsls	r2, r1
 8000cb0:	1e51      	subs	r1, r2, #1
 8000cb2:	418a      	sbcs	r2, r1
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	015a      	lsls	r2, r3, #5
 8000cba:	d400      	bmi.n	8000cbe <__aeabi_fsub+0x11e>
 8000cbc:	e0a4      	b.n	8000e08 <__aeabi_fsub+0x268>
 8000cbe:	3401      	adds	r4, #1
 8000cc0:	2cff      	cmp	r4, #255	; 0xff
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_fsub+0x126>
 8000cc4:	e0ab      	b.n	8000e1e <__aeabi_fsub+0x27e>
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4997      	ldr	r1, [pc, #604]	; (8000f28 <__aeabi_fsub+0x388>)
 8000cca:	401a      	ands	r2, r3
 8000ccc:	085b      	lsrs	r3, r3, #1
 8000cce:	400b      	ands	r3, r1
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	e7bb      	b.n	8000c4c <__aeabi_fsub+0xac>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	d032      	beq.n	8000d3e <__aeabi_fsub+0x19e>
 8000cd8:	428d      	cmp	r5, r1
 8000cda:	d035      	beq.n	8000d48 <__aeabi_fsub+0x1a8>
 8000cdc:	22ff      	movs	r2, #255	; 0xff
 8000cde:	4252      	negs	r2, r2
 8000ce0:	4691      	mov	r9, r2
 8000ce2:	44a1      	add	r9, r4
 8000ce4:	464a      	mov	r2, r9
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d051      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000cea:	1b30      	subs	r0, r6, r4
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fsub+0x152>
 8000cf0:	e09c      	b.n	8000e2c <__aeabi_fsub+0x28c>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_fsub+0x15a>
 8000cf8:	e0df      	b.n	8000eba <__aeabi_fsub+0x31a>
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_fsub+0x162>
 8000d00:	e0f7      	b.n	8000ef2 <__aeabi_fsub+0x352>
 8000d02:	2eff      	cmp	r6, #255	; 0xff
 8000d04:	d000      	beq.n	8000d08 <__aeabi_fsub+0x168>
 8000d06:	e099      	b.n	8000e3c <__aeabi_fsub+0x29c>
 8000d08:	000d      	movs	r5, r1
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_fsub+0x172>
 8000d10:	e085      	b.n	8000e1e <__aeabi_fsub+0x27e>
 8000d12:	2780      	movs	r7, #128	; 0x80
 8000d14:	03ff      	lsls	r7, r7, #15
 8000d16:	431f      	orrs	r7, r3
 8000d18:	027f      	lsls	r7, r7, #9
 8000d1a:	20ff      	movs	r0, #255	; 0xff
 8000d1c:	0a7f      	lsrs	r7, r7, #9
 8000d1e:	e7a6      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000d20:	4652      	mov	r2, sl
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d074      	beq.n	8000e10 <__aeabi_fsub+0x270>
 8000d26:	2201      	movs	r2, #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	44c1      	add	r9, r8
 8000d2e:	464a      	mov	r2, r9
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x196>
 8000d34:	e0c8      	b.n	8000ec8 <__aeabi_fsub+0x328>
 8000d36:	2cff      	cmp	r4, #255	; 0xff
 8000d38:	d000      	beq.n	8000d3c <__aeabi_fsub+0x19c>
 8000d3a:	e75f      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d3c:	e7e6      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4051      	eors	r1, r2
 8000d42:	42a9      	cmp	r1, r5
 8000d44:	d000      	beq.n	8000d48 <__aeabi_fsub+0x1a8>
 8000d46:	e749      	b.n	8000bdc <__aeabi_fsub+0x3c>
 8000d48:	22ff      	movs	r2, #255	; 0xff
 8000d4a:	4252      	negs	r2, r2
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	44a1      	add	r9, r4
 8000d50:	464a      	mov	r2, r9
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d043      	beq.n	8000dde <__aeabi_fsub+0x23e>
 8000d56:	1b31      	subs	r1, r6, r4
 8000d58:	2c00      	cmp	r4, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_fsub+0x1be>
 8000d5c:	e08c      	b.n	8000e78 <__aeabi_fsub+0x2d8>
 8000d5e:	2eff      	cmp	r6, #255	; 0xff
 8000d60:	d100      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d62:	e092      	b.n	8000e8a <__aeabi_fsub+0x2ea>
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	4662      	mov	r2, ip
 8000d68:	04db      	lsls	r3, r3, #19
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	4694      	mov	ip, r2
 8000d6e:	2301      	movs	r3, #1
 8000d70:	291b      	cmp	r1, #27
 8000d72:	dc09      	bgt.n	8000d88 <__aeabi_fsub+0x1e8>
 8000d74:	2020      	movs	r0, #32
 8000d76:	4663      	mov	r3, ip
 8000d78:	4662      	mov	r2, ip
 8000d7a:	40cb      	lsrs	r3, r1
 8000d7c:	1a41      	subs	r1, r0, r1
 8000d7e:	408a      	lsls	r2, r1
 8000d80:	0011      	movs	r1, r2
 8000d82:	1e48      	subs	r0, r1, #1
 8000d84:	4181      	sbcs	r1, r0
 8000d86:	430b      	orrs	r3, r1
 8000d88:	0034      	movs	r4, r6
 8000d8a:	4453      	add	r3, sl
 8000d8c:	e794      	b.n	8000cb8 <__aeabi_fsub+0x118>
 8000d8e:	22fe      	movs	r2, #254	; 0xfe
 8000d90:	1c66      	adds	r6, r4, #1
 8000d92:	4232      	tst	r2, r6
 8000d94:	d164      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000d96:	2c00      	cmp	r4, #0
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fsub+0x1fc>
 8000d9a:	e082      	b.n	8000ea2 <__aeabi_fsub+0x302>
 8000d9c:	4663      	mov	r3, ip
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fsub+0x204>
 8000da2:	e0ab      	b.n	8000efc <__aeabi_fsub+0x35c>
 8000da4:	4653      	mov	r3, sl
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x20c>
 8000daa:	e760      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000dac:	4663      	mov	r3, ip
 8000dae:	4652      	mov	r2, sl
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	015a      	lsls	r2, r3, #5
 8000db4:	d400      	bmi.n	8000db8 <__aeabi_fsub+0x218>
 8000db6:	e0aa      	b.n	8000f0e <__aeabi_fsub+0x36e>
 8000db8:	4663      	mov	r3, ip
 8000dba:	4652      	mov	r2, sl
 8000dbc:	000d      	movs	r5, r1
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	e744      	b.n	8000c4c <__aeabi_fsub+0xac>
 8000dc2:	4652      	mov	r2, sl
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d023      	beq.n	8000e10 <__aeabi_fsub+0x270>
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4252      	negs	r2, r2
 8000dcc:	4690      	mov	r8, r2
 8000dce:	44c1      	add	r9, r8
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d075      	beq.n	8000ec2 <__aeabi_fsub+0x322>
 8000dd6:	2cff      	cmp	r4, #255	; 0xff
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_fsub+0x23c>
 8000dda:	e75f      	b.n	8000c9c <__aeabi_fsub+0xfc>
 8000ddc:	e796      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000dde:	26fe      	movs	r6, #254	; 0xfe
 8000de0:	3401      	adds	r4, #1
 8000de2:	4226      	tst	r6, r4
 8000de4:	d153      	bne.n	8000e8e <__aeabi_fsub+0x2ee>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d172      	bne.n	8000ed0 <__aeabi_fsub+0x330>
 8000dea:	4663      	mov	r3, ip
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fsub+0x252>
 8000df0:	e093      	b.n	8000f1a <__aeabi_fsub+0x37a>
 8000df2:	4653      	mov	r3, sl
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x25a>
 8000df8:	e739      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000dfa:	4463      	add	r3, ip
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	015a      	lsls	r2, r3, #5
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_fsub+0x268>
 8000e02:	4a4a      	ldr	r2, [pc, #296]	; (8000f2c <__aeabi_fsub+0x38c>)
 8000e04:	3401      	adds	r4, #1
 8000e06:	4013      	ands	r3, r2
 8000e08:	075a      	lsls	r2, r3, #29
 8000e0a:	d000      	beq.n	8000e0e <__aeabi_fsub+0x26e>
 8000e0c:	e720      	b.n	8000c50 <__aeabi_fsub+0xb0>
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	2cff      	cmp	r4, #255	; 0xff
 8000e12:	d100      	bne.n	8000e16 <__aeabi_fsub+0x276>
 8000e14:	e77a      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000e16:	025b      	lsls	r3, r3, #9
 8000e18:	0a5f      	lsrs	r7, r3, #9
 8000e1a:	b2e0      	uxtb	r0, r4
 8000e1c:	e727      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000e1e:	20ff      	movs	r0, #255	; 0xff
 8000e20:	2700      	movs	r7, #0
 8000e22:	e724      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000e24:	4b41      	ldr	r3, [pc, #260]	; (8000f2c <__aeabi_fsub+0x38c>)
 8000e26:	1a24      	subs	r4, r4, r0
 8000e28:	4033      	ands	r3, r6
 8000e2a:	e70f      	b.n	8000c4c <__aeabi_fsub+0xac>
 8000e2c:	2eff      	cmp	r6, #255	; 0xff
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0x292>
 8000e30:	e76a      	b.n	8000d08 <__aeabi_fsub+0x168>
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	4662      	mov	r2, ip
 8000e36:	04db      	lsls	r3, r3, #19
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	4694      	mov	ip, r2
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	281b      	cmp	r0, #27
 8000e40:	dc09      	bgt.n	8000e56 <__aeabi_fsub+0x2b6>
 8000e42:	2420      	movs	r4, #32
 8000e44:	4663      	mov	r3, ip
 8000e46:	4662      	mov	r2, ip
 8000e48:	40c3      	lsrs	r3, r0
 8000e4a:	1a20      	subs	r0, r4, r0
 8000e4c:	4082      	lsls	r2, r0
 8000e4e:	0010      	movs	r0, r2
 8000e50:	1e44      	subs	r4, r0, #1
 8000e52:	41a0      	sbcs	r0, r4
 8000e54:	4303      	orrs	r3, r0
 8000e56:	4652      	mov	r2, sl
 8000e58:	000d      	movs	r5, r1
 8000e5a:	0034      	movs	r4, r6
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	e6dc      	b.n	8000c1a <__aeabi_fsub+0x7a>
 8000e60:	4663      	mov	r3, ip
 8000e62:	4652      	mov	r2, sl
 8000e64:	1a9e      	subs	r6, r3, r2
 8000e66:	0173      	lsls	r3, r6, #5
 8000e68:	d417      	bmi.n	8000e9a <__aeabi_fsub+0x2fa>
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d000      	beq.n	8000e70 <__aeabi_fsub+0x2d0>
 8000e6e:	e6d9      	b.n	8000c24 <__aeabi_fsub+0x84>
 8000e70:	2500      	movs	r5, #0
 8000e72:	2000      	movs	r0, #0
 8000e74:	2700      	movs	r7, #0
 8000e76:	e6fa      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000e78:	4663      	mov	r3, ip
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d044      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000e7e:	3901      	subs	r1, #1
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d04c      	beq.n	8000f1e <__aeabi_fsub+0x37e>
 8000e84:	2eff      	cmp	r6, #255	; 0xff
 8000e86:	d000      	beq.n	8000e8a <__aeabi_fsub+0x2ea>
 8000e88:	e771      	b.n	8000d6e <__aeabi_fsub+0x1ce>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	e73e      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000e8e:	2cff      	cmp	r4, #255	; 0xff
 8000e90:	d0c5      	beq.n	8000e1e <__aeabi_fsub+0x27e>
 8000e92:	4652      	mov	r2, sl
 8000e94:	4462      	add	r2, ip
 8000e96:	0853      	lsrs	r3, r2, #1
 8000e98:	e7b6      	b.n	8000e08 <__aeabi_fsub+0x268>
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	000d      	movs	r5, r1
 8000e9e:	1ad6      	subs	r6, r2, r3
 8000ea0:	e6c0      	b.n	8000c24 <__aeabi_fsub+0x84>
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d116      	bne.n	8000ed6 <__aeabi_fsub+0x336>
 8000ea8:	4653      	mov	r3, sl
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_fsub+0x310>
 8000eae:	e72b      	b.n	8000d08 <__aeabi_fsub+0x168>
 8000eb0:	2780      	movs	r7, #128	; 0x80
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	20ff      	movs	r0, #255	; 0xff
 8000eb6:	03ff      	lsls	r7, r7, #15
 8000eb8:	e6d9      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000eba:	000d      	movs	r5, r1
 8000ebc:	4643      	mov	r3, r8
 8000ebe:	0034      	movs	r4, r6
 8000ec0:	e7a6      	b.n	8000e10 <__aeabi_fsub+0x270>
 8000ec2:	4653      	mov	r3, sl
 8000ec4:	4463      	add	r3, ip
 8000ec6:	e6f7      	b.n	8000cb8 <__aeabi_fsub+0x118>
 8000ec8:	4663      	mov	r3, ip
 8000eca:	4652      	mov	r2, sl
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	e6a4      	b.n	8000c1a <__aeabi_fsub+0x7a>
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d0d9      	beq.n	8000e8a <__aeabi_fsub+0x2ea>
 8000ed6:	4652      	mov	r2, sl
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x33e>
 8000edc:	e716      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	03d2      	lsls	r2, r2, #15
 8000ee2:	4213      	tst	r3, r2
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fsub+0x348>
 8000ee6:	e711      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	4210      	tst	r0, r2
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_fsub+0x350>
 8000eee:	e70d      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000ef0:	e70a      	b.n	8000d08 <__aeabi_fsub+0x168>
 8000ef2:	4652      	mov	r2, sl
 8000ef4:	000d      	movs	r5, r1
 8000ef6:	0034      	movs	r4, r6
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	e68e      	b.n	8000c1a <__aeabi_fsub+0x7a>
 8000efc:	4653      	mov	r3, sl
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d008      	beq.n	8000f14 <__aeabi_fsub+0x374>
 8000f02:	000d      	movs	r5, r1
 8000f04:	4647      	mov	r7, r8
 8000f06:	e6b2      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000f08:	4643      	mov	r3, r8
 8000f0a:	0034      	movs	r4, r6
 8000f0c:	e780      	b.n	8000e10 <__aeabi_fsub+0x270>
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d000      	beq.n	8000f14 <__aeabi_fsub+0x374>
 8000f12:	e779      	b.n	8000e08 <__aeabi_fsub+0x268>
 8000f14:	2500      	movs	r5, #0
 8000f16:	2700      	movs	r7, #0
 8000f18:	e6a9      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000f1a:	4647      	mov	r7, r8
 8000f1c:	e6a7      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000f1e:	4653      	mov	r3, sl
 8000f20:	0034      	movs	r4, r6
 8000f22:	4463      	add	r3, ip
 8000f24:	e6c8      	b.n	8000cb8 <__aeabi_fsub+0x118>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	7dffffff 	.word	0x7dffffff
 8000f2c:	fbffffff 	.word	0xfbffffff

08000f30 <__aeabi_f2iz>:
 8000f30:	0241      	lsls	r1, r0, #9
 8000f32:	0042      	lsls	r2, r0, #1
 8000f34:	0fc3      	lsrs	r3, r0, #31
 8000f36:	0a49      	lsrs	r1, r1, #9
 8000f38:	2000      	movs	r0, #0
 8000f3a:	0e12      	lsrs	r2, r2, #24
 8000f3c:	2a7e      	cmp	r2, #126	; 0x7e
 8000f3e:	d903      	bls.n	8000f48 <__aeabi_f2iz+0x18>
 8000f40:	2a9d      	cmp	r2, #157	; 0x9d
 8000f42:	d902      	bls.n	8000f4a <__aeabi_f2iz+0x1a>
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <__aeabi_f2iz+0x3c>)
 8000f46:	1898      	adds	r0, r3, r2
 8000f48:	4770      	bx	lr
 8000f4a:	2080      	movs	r0, #128	; 0x80
 8000f4c:	0400      	lsls	r0, r0, #16
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	2a95      	cmp	r2, #149	; 0x95
 8000f52:	dc07      	bgt.n	8000f64 <__aeabi_f2iz+0x34>
 8000f54:	2096      	movs	r0, #150	; 0x96
 8000f56:	1a82      	subs	r2, r0, r2
 8000f58:	40d1      	lsrs	r1, r2
 8000f5a:	4248      	negs	r0, r1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f3      	bne.n	8000f48 <__aeabi_f2iz+0x18>
 8000f60:	0008      	movs	r0, r1
 8000f62:	e7f1      	b.n	8000f48 <__aeabi_f2iz+0x18>
 8000f64:	3a96      	subs	r2, #150	; 0x96
 8000f66:	4091      	lsls	r1, r2
 8000f68:	e7f7      	b.n	8000f5a <__aeabi_f2iz+0x2a>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	7fffffff 	.word	0x7fffffff

08000f70 <__aeabi_i2f>:
 8000f70:	b570      	push	{r4, r5, r6, lr}
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d013      	beq.n	8000f9e <__aeabi_i2f+0x2e>
 8000f76:	17c3      	asrs	r3, r0, #31
 8000f78:	18c5      	adds	r5, r0, r3
 8000f7a:	405d      	eors	r5, r3
 8000f7c:	0fc4      	lsrs	r4, r0, #31
 8000f7e:	0028      	movs	r0, r5
 8000f80:	f001 feba 	bl	8002cf8 <__clzsi2>
 8000f84:	239e      	movs	r3, #158	; 0x9e
 8000f86:	0001      	movs	r1, r0
 8000f88:	1a1b      	subs	r3, r3, r0
 8000f8a:	2b96      	cmp	r3, #150	; 0x96
 8000f8c:	dc0f      	bgt.n	8000fae <__aeabi_i2f+0x3e>
 8000f8e:	2808      	cmp	r0, #8
 8000f90:	dd01      	ble.n	8000f96 <__aeabi_i2f+0x26>
 8000f92:	3908      	subs	r1, #8
 8000f94:	408d      	lsls	r5, r1
 8000f96:	026d      	lsls	r5, r5, #9
 8000f98:	0a6d      	lsrs	r5, r5, #9
 8000f9a:	b2d8      	uxtb	r0, r3
 8000f9c:	e002      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	05c0      	lsls	r0, r0, #23
 8000fa6:	4328      	orrs	r0, r5
 8000fa8:	07e4      	lsls	r4, r4, #31
 8000faa:	4320      	orrs	r0, r4
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	2b99      	cmp	r3, #153	; 0x99
 8000fb0:	dd0b      	ble.n	8000fca <__aeabi_i2f+0x5a>
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	002e      	movs	r6, r5
 8000fb6:	1a12      	subs	r2, r2, r0
 8000fb8:	40d6      	lsrs	r6, r2
 8000fba:	0002      	movs	r2, r0
 8000fbc:	321b      	adds	r2, #27
 8000fbe:	4095      	lsls	r5, r2
 8000fc0:	0028      	movs	r0, r5
 8000fc2:	1e45      	subs	r5, r0, #1
 8000fc4:	41a8      	sbcs	r0, r5
 8000fc6:	0035      	movs	r5, r6
 8000fc8:	4305      	orrs	r5, r0
 8000fca:	2905      	cmp	r1, #5
 8000fcc:	dd01      	ble.n	8000fd2 <__aeabi_i2f+0x62>
 8000fce:	1f4a      	subs	r2, r1, #5
 8000fd0:	4095      	lsls	r5, r2
 8000fd2:	002a      	movs	r2, r5
 8000fd4:	4e08      	ldr	r6, [pc, #32]	; (8000ff8 <__aeabi_i2f+0x88>)
 8000fd6:	4032      	ands	r2, r6
 8000fd8:	0768      	lsls	r0, r5, #29
 8000fda:	d009      	beq.n	8000ff0 <__aeabi_i2f+0x80>
 8000fdc:	200f      	movs	r0, #15
 8000fde:	4028      	ands	r0, r5
 8000fe0:	2804      	cmp	r0, #4
 8000fe2:	d005      	beq.n	8000ff0 <__aeabi_i2f+0x80>
 8000fe4:	3204      	adds	r2, #4
 8000fe6:	0150      	lsls	r0, r2, #5
 8000fe8:	d502      	bpl.n	8000ff0 <__aeabi_i2f+0x80>
 8000fea:	239f      	movs	r3, #159	; 0x9f
 8000fec:	4032      	ands	r2, r6
 8000fee:	1a5b      	subs	r3, r3, r1
 8000ff0:	0192      	lsls	r2, r2, #6
 8000ff2:	0a55      	lsrs	r5, r2, #9
 8000ff4:	b2d8      	uxtb	r0, r3
 8000ff6:	e7d5      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000ff8:	fbffffff 	.word	0xfbffffff

08000ffc <__aeabi_ui2f>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	1e05      	subs	r5, r0, #0
 8001000:	d00e      	beq.n	8001020 <__aeabi_ui2f+0x24>
 8001002:	f001 fe79 	bl	8002cf8 <__clzsi2>
 8001006:	239e      	movs	r3, #158	; 0x9e
 8001008:	0004      	movs	r4, r0
 800100a:	1a1b      	subs	r3, r3, r0
 800100c:	2b96      	cmp	r3, #150	; 0x96
 800100e:	dc0c      	bgt.n	800102a <__aeabi_ui2f+0x2e>
 8001010:	2808      	cmp	r0, #8
 8001012:	dd01      	ble.n	8001018 <__aeabi_ui2f+0x1c>
 8001014:	3c08      	subs	r4, #8
 8001016:	40a5      	lsls	r5, r4
 8001018:	026d      	lsls	r5, r5, #9
 800101a:	0a6d      	lsrs	r5, r5, #9
 800101c:	b2d8      	uxtb	r0, r3
 800101e:	e001      	b.n	8001024 <__aeabi_ui2f+0x28>
 8001020:	2000      	movs	r0, #0
 8001022:	2500      	movs	r5, #0
 8001024:	05c0      	lsls	r0, r0, #23
 8001026:	4328      	orrs	r0, r5
 8001028:	bd70      	pop	{r4, r5, r6, pc}
 800102a:	2b99      	cmp	r3, #153	; 0x99
 800102c:	dd09      	ble.n	8001042 <__aeabi_ui2f+0x46>
 800102e:	0002      	movs	r2, r0
 8001030:	0029      	movs	r1, r5
 8001032:	321b      	adds	r2, #27
 8001034:	4091      	lsls	r1, r2
 8001036:	1e4a      	subs	r2, r1, #1
 8001038:	4191      	sbcs	r1, r2
 800103a:	2205      	movs	r2, #5
 800103c:	1a12      	subs	r2, r2, r0
 800103e:	40d5      	lsrs	r5, r2
 8001040:	430d      	orrs	r5, r1
 8001042:	2c05      	cmp	r4, #5
 8001044:	dd01      	ble.n	800104a <__aeabi_ui2f+0x4e>
 8001046:	1f62      	subs	r2, r4, #5
 8001048:	4095      	lsls	r5, r2
 800104a:	0029      	movs	r1, r5
 800104c:	4e08      	ldr	r6, [pc, #32]	; (8001070 <__aeabi_ui2f+0x74>)
 800104e:	4031      	ands	r1, r6
 8001050:	076a      	lsls	r2, r5, #29
 8001052:	d009      	beq.n	8001068 <__aeabi_ui2f+0x6c>
 8001054:	200f      	movs	r0, #15
 8001056:	4028      	ands	r0, r5
 8001058:	2804      	cmp	r0, #4
 800105a:	d005      	beq.n	8001068 <__aeabi_ui2f+0x6c>
 800105c:	3104      	adds	r1, #4
 800105e:	014a      	lsls	r2, r1, #5
 8001060:	d502      	bpl.n	8001068 <__aeabi_ui2f+0x6c>
 8001062:	239f      	movs	r3, #159	; 0x9f
 8001064:	4031      	ands	r1, r6
 8001066:	1b1b      	subs	r3, r3, r4
 8001068:	0189      	lsls	r1, r1, #6
 800106a:	0a4d      	lsrs	r5, r1, #9
 800106c:	b2d8      	uxtb	r0, r3
 800106e:	e7d9      	b.n	8001024 <__aeabi_ui2f+0x28>
 8001070:	fbffffff 	.word	0xfbffffff

08001074 <__aeabi_dadd>:
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	464f      	mov	r7, r9
 8001078:	46d6      	mov	lr, sl
 800107a:	4646      	mov	r6, r8
 800107c:	000d      	movs	r5, r1
 800107e:	0001      	movs	r1, r0
 8001080:	0018      	movs	r0, r3
 8001082:	b5c0      	push	{r6, r7, lr}
 8001084:	0017      	movs	r7, r2
 8001086:	032b      	lsls	r3, r5, #12
 8001088:	0a5a      	lsrs	r2, r3, #9
 800108a:	0f4b      	lsrs	r3, r1, #29
 800108c:	4313      	orrs	r3, r2
 800108e:	00ca      	lsls	r2, r1, #3
 8001090:	4691      	mov	r9, r2
 8001092:	0302      	lsls	r2, r0, #12
 8001094:	006e      	lsls	r6, r5, #1
 8001096:	0041      	lsls	r1, r0, #1
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	0fec      	lsrs	r4, r5, #31
 800109c:	0f7d      	lsrs	r5, r7, #29
 800109e:	4315      	orrs	r5, r2
 80010a0:	0d76      	lsrs	r6, r6, #21
 80010a2:	0d49      	lsrs	r1, r1, #21
 80010a4:	0fc0      	lsrs	r0, r0, #31
 80010a6:	4682      	mov	sl, r0
 80010a8:	46ac      	mov	ip, r5
 80010aa:	00ff      	lsls	r7, r7, #3
 80010ac:	1a72      	subs	r2, r6, r1
 80010ae:	4284      	cmp	r4, r0
 80010b0:	d100      	bne.n	80010b4 <__aeabi_dadd+0x40>
 80010b2:	e098      	b.n	80011e6 <__aeabi_dadd+0x172>
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_dadd+0x46>
 80010b8:	e081      	b.n	80011be <__aeabi_dadd+0x14a>
 80010ba:	2900      	cmp	r1, #0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dadd+0x4c>
 80010be:	e0b6      	b.n	800122e <__aeabi_dadd+0x1ba>
 80010c0:	49c9      	ldr	r1, [pc, #804]	; (80013e8 <__aeabi_dadd+0x374>)
 80010c2:	428e      	cmp	r6, r1
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dadd+0x54>
 80010c6:	e172      	b.n	80013ae <__aeabi_dadd+0x33a>
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0028      	movs	r0, r5
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	4308      	orrs	r0, r1
 80010d0:	4684      	mov	ip, r0
 80010d2:	2a38      	cmp	r2, #56	; 0x38
 80010d4:	dd00      	ble.n	80010d8 <__aeabi_dadd+0x64>
 80010d6:	e15e      	b.n	8001396 <__aeabi_dadd+0x322>
 80010d8:	2a1f      	cmp	r2, #31
 80010da:	dd00      	ble.n	80010de <__aeabi_dadd+0x6a>
 80010dc:	e1ee      	b.n	80014bc <__aeabi_dadd+0x448>
 80010de:	2020      	movs	r0, #32
 80010e0:	0039      	movs	r1, r7
 80010e2:	4665      	mov	r5, ip
 80010e4:	1a80      	subs	r0, r0, r2
 80010e6:	4087      	lsls	r7, r0
 80010e8:	40d1      	lsrs	r1, r2
 80010ea:	4085      	lsls	r5, r0
 80010ec:	430d      	orrs	r5, r1
 80010ee:	0039      	movs	r1, r7
 80010f0:	1e4f      	subs	r7, r1, #1
 80010f2:	41b9      	sbcs	r1, r7
 80010f4:	4667      	mov	r7, ip
 80010f6:	40d7      	lsrs	r7, r2
 80010f8:	4329      	orrs	r1, r5
 80010fa:	1bdb      	subs	r3, r3, r7
 80010fc:	464a      	mov	r2, r9
 80010fe:	1a55      	subs	r5, r2, r1
 8001100:	45a9      	cmp	r9, r5
 8001102:	4189      	sbcs	r1, r1
 8001104:	4249      	negs	r1, r1
 8001106:	1a5b      	subs	r3, r3, r1
 8001108:	4698      	mov	r8, r3
 800110a:	4643      	mov	r3, r8
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	d400      	bmi.n	8001112 <__aeabi_dadd+0x9e>
 8001110:	e0cc      	b.n	80012ac <__aeabi_dadd+0x238>
 8001112:	4643      	mov	r3, r8
 8001114:	025b      	lsls	r3, r3, #9
 8001116:	0a5b      	lsrs	r3, r3, #9
 8001118:	4698      	mov	r8, r3
 800111a:	4643      	mov	r3, r8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d100      	bne.n	8001122 <__aeabi_dadd+0xae>
 8001120:	e12c      	b.n	800137c <__aeabi_dadd+0x308>
 8001122:	4640      	mov	r0, r8
 8001124:	f001 fde8 	bl	8002cf8 <__clzsi2>
 8001128:	0001      	movs	r1, r0
 800112a:	3908      	subs	r1, #8
 800112c:	2220      	movs	r2, #32
 800112e:	0028      	movs	r0, r5
 8001130:	4643      	mov	r3, r8
 8001132:	1a52      	subs	r2, r2, r1
 8001134:	408b      	lsls	r3, r1
 8001136:	40d0      	lsrs	r0, r2
 8001138:	408d      	lsls	r5, r1
 800113a:	4303      	orrs	r3, r0
 800113c:	428e      	cmp	r6, r1
 800113e:	dd00      	ble.n	8001142 <__aeabi_dadd+0xce>
 8001140:	e117      	b.n	8001372 <__aeabi_dadd+0x2fe>
 8001142:	1b8e      	subs	r6, r1, r6
 8001144:	1c72      	adds	r2, r6, #1
 8001146:	2a1f      	cmp	r2, #31
 8001148:	dd00      	ble.n	800114c <__aeabi_dadd+0xd8>
 800114a:	e1a7      	b.n	800149c <__aeabi_dadd+0x428>
 800114c:	2120      	movs	r1, #32
 800114e:	0018      	movs	r0, r3
 8001150:	002e      	movs	r6, r5
 8001152:	1a89      	subs	r1, r1, r2
 8001154:	408d      	lsls	r5, r1
 8001156:	4088      	lsls	r0, r1
 8001158:	40d6      	lsrs	r6, r2
 800115a:	40d3      	lsrs	r3, r2
 800115c:	1e69      	subs	r1, r5, #1
 800115e:	418d      	sbcs	r5, r1
 8001160:	4330      	orrs	r0, r6
 8001162:	4698      	mov	r8, r3
 8001164:	2600      	movs	r6, #0
 8001166:	4305      	orrs	r5, r0
 8001168:	076b      	lsls	r3, r5, #29
 800116a:	d009      	beq.n	8001180 <__aeabi_dadd+0x10c>
 800116c:	230f      	movs	r3, #15
 800116e:	402b      	ands	r3, r5
 8001170:	2b04      	cmp	r3, #4
 8001172:	d005      	beq.n	8001180 <__aeabi_dadd+0x10c>
 8001174:	1d2b      	adds	r3, r5, #4
 8001176:	42ab      	cmp	r3, r5
 8001178:	41ad      	sbcs	r5, r5
 800117a:	426d      	negs	r5, r5
 800117c:	44a8      	add	r8, r5
 800117e:	001d      	movs	r5, r3
 8001180:	4643      	mov	r3, r8
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	d400      	bmi.n	8001188 <__aeabi_dadd+0x114>
 8001186:	e094      	b.n	80012b2 <__aeabi_dadd+0x23e>
 8001188:	4b97      	ldr	r3, [pc, #604]	; (80013e8 <__aeabi_dadd+0x374>)
 800118a:	1c72      	adds	r2, r6, #1
 800118c:	429a      	cmp	r2, r3
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x11e>
 8001190:	e09d      	b.n	80012ce <__aeabi_dadd+0x25a>
 8001192:	4641      	mov	r1, r8
 8001194:	4b95      	ldr	r3, [pc, #596]	; (80013ec <__aeabi_dadd+0x378>)
 8001196:	08ed      	lsrs	r5, r5, #3
 8001198:	4019      	ands	r1, r3
 800119a:	000b      	movs	r3, r1
 800119c:	0552      	lsls	r2, r2, #21
 800119e:	0749      	lsls	r1, r1, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	4329      	orrs	r1, r5
 80011a4:	0b1b      	lsrs	r3, r3, #12
 80011a6:	0d52      	lsrs	r2, r2, #21
 80011a8:	0512      	lsls	r2, r2, #20
 80011aa:	4313      	orrs	r3, r2
 80011ac:	07e4      	lsls	r4, r4, #31
 80011ae:	4323      	orrs	r3, r4
 80011b0:	0008      	movs	r0, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	bce0      	pop	{r5, r6, r7}
 80011b6:	46ba      	mov	sl, r7
 80011b8:	46b1      	mov	r9, r6
 80011ba:	46a8      	mov	r8, r5
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011be:	2a00      	cmp	r2, #0
 80011c0:	d043      	beq.n	800124a <__aeabi_dadd+0x1d6>
 80011c2:	1b8a      	subs	r2, r1, r6
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d000      	beq.n	80011ca <__aeabi_dadd+0x156>
 80011c8:	e12a      	b.n	8001420 <__aeabi_dadd+0x3ac>
 80011ca:	464c      	mov	r4, r9
 80011cc:	431c      	orrs	r4, r3
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x15e>
 80011d0:	e1d1      	b.n	8001576 <__aeabi_dadd+0x502>
 80011d2:	1e54      	subs	r4, r2, #1
 80011d4:	2a01      	cmp	r2, #1
 80011d6:	d100      	bne.n	80011da <__aeabi_dadd+0x166>
 80011d8:	e21f      	b.n	800161a <__aeabi_dadd+0x5a6>
 80011da:	4d83      	ldr	r5, [pc, #524]	; (80013e8 <__aeabi_dadd+0x374>)
 80011dc:	42aa      	cmp	r2, r5
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0x16e>
 80011e0:	e272      	b.n	80016c8 <__aeabi_dadd+0x654>
 80011e2:	0022      	movs	r2, r4
 80011e4:	e123      	b.n	800142e <__aeabi_dadd+0x3ba>
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	dc00      	bgt.n	80011ec <__aeabi_dadd+0x178>
 80011ea:	e098      	b.n	800131e <__aeabi_dadd+0x2aa>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d042      	beq.n	8001276 <__aeabi_dadd+0x202>
 80011f0:	497d      	ldr	r1, [pc, #500]	; (80013e8 <__aeabi_dadd+0x374>)
 80011f2:	428e      	cmp	r6, r1
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dadd+0x184>
 80011f6:	e0da      	b.n	80013ae <__aeabi_dadd+0x33a>
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0028      	movs	r0, r5
 80011fc:	0409      	lsls	r1, r1, #16
 80011fe:	4308      	orrs	r0, r1
 8001200:	4684      	mov	ip, r0
 8001202:	2a38      	cmp	r2, #56	; 0x38
 8001204:	dd00      	ble.n	8001208 <__aeabi_dadd+0x194>
 8001206:	e129      	b.n	800145c <__aeabi_dadd+0x3e8>
 8001208:	2a1f      	cmp	r2, #31
 800120a:	dc00      	bgt.n	800120e <__aeabi_dadd+0x19a>
 800120c:	e187      	b.n	800151e <__aeabi_dadd+0x4aa>
 800120e:	0011      	movs	r1, r2
 8001210:	4665      	mov	r5, ip
 8001212:	3920      	subs	r1, #32
 8001214:	40cd      	lsrs	r5, r1
 8001216:	2a20      	cmp	r2, #32
 8001218:	d004      	beq.n	8001224 <__aeabi_dadd+0x1b0>
 800121a:	2040      	movs	r0, #64	; 0x40
 800121c:	4661      	mov	r1, ip
 800121e:	1a82      	subs	r2, r0, r2
 8001220:	4091      	lsls	r1, r2
 8001222:	430f      	orrs	r7, r1
 8001224:	0039      	movs	r1, r7
 8001226:	1e4f      	subs	r7, r1, #1
 8001228:	41b9      	sbcs	r1, r7
 800122a:	430d      	orrs	r5, r1
 800122c:	e11b      	b.n	8001466 <__aeabi_dadd+0x3f2>
 800122e:	0029      	movs	r1, r5
 8001230:	4339      	orrs	r1, r7
 8001232:	d100      	bne.n	8001236 <__aeabi_dadd+0x1c2>
 8001234:	e0b5      	b.n	80013a2 <__aeabi_dadd+0x32e>
 8001236:	1e51      	subs	r1, r2, #1
 8001238:	2a01      	cmp	r2, #1
 800123a:	d100      	bne.n	800123e <__aeabi_dadd+0x1ca>
 800123c:	e1ab      	b.n	8001596 <__aeabi_dadd+0x522>
 800123e:	486a      	ldr	r0, [pc, #424]	; (80013e8 <__aeabi_dadd+0x374>)
 8001240:	4282      	cmp	r2, r0
 8001242:	d100      	bne.n	8001246 <__aeabi_dadd+0x1d2>
 8001244:	e1b2      	b.n	80015ac <__aeabi_dadd+0x538>
 8001246:	000a      	movs	r2, r1
 8001248:	e743      	b.n	80010d2 <__aeabi_dadd+0x5e>
 800124a:	4969      	ldr	r1, [pc, #420]	; (80013f0 <__aeabi_dadd+0x37c>)
 800124c:	1c75      	adds	r5, r6, #1
 800124e:	420d      	tst	r5, r1
 8001250:	d000      	beq.n	8001254 <__aeabi_dadd+0x1e0>
 8001252:	e0cf      	b.n	80013f4 <__aeabi_dadd+0x380>
 8001254:	2e00      	cmp	r6, #0
 8001256:	d000      	beq.n	800125a <__aeabi_dadd+0x1e6>
 8001258:	e193      	b.n	8001582 <__aeabi_dadd+0x50e>
 800125a:	4649      	mov	r1, r9
 800125c:	4319      	orrs	r1, r3
 800125e:	d100      	bne.n	8001262 <__aeabi_dadd+0x1ee>
 8001260:	e1d1      	b.n	8001606 <__aeabi_dadd+0x592>
 8001262:	4661      	mov	r1, ip
 8001264:	4339      	orrs	r1, r7
 8001266:	d000      	beq.n	800126a <__aeabi_dadd+0x1f6>
 8001268:	e1e3      	b.n	8001632 <__aeabi_dadd+0x5be>
 800126a:	4649      	mov	r1, r9
 800126c:	0758      	lsls	r0, r3, #29
 800126e:	08c9      	lsrs	r1, r1, #3
 8001270:	4301      	orrs	r1, r0
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	e026      	b.n	80012c4 <__aeabi_dadd+0x250>
 8001276:	0029      	movs	r1, r5
 8001278:	4339      	orrs	r1, r7
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x20a>
 800127c:	e091      	b.n	80013a2 <__aeabi_dadd+0x32e>
 800127e:	1e51      	subs	r1, r2, #1
 8001280:	2a01      	cmp	r2, #1
 8001282:	d005      	beq.n	8001290 <__aeabi_dadd+0x21c>
 8001284:	4858      	ldr	r0, [pc, #352]	; (80013e8 <__aeabi_dadd+0x374>)
 8001286:	4282      	cmp	r2, r0
 8001288:	d100      	bne.n	800128c <__aeabi_dadd+0x218>
 800128a:	e18f      	b.n	80015ac <__aeabi_dadd+0x538>
 800128c:	000a      	movs	r2, r1
 800128e:	e7b8      	b.n	8001202 <__aeabi_dadd+0x18e>
 8001290:	003d      	movs	r5, r7
 8001292:	444d      	add	r5, r9
 8001294:	454d      	cmp	r5, r9
 8001296:	4189      	sbcs	r1, r1
 8001298:	4463      	add	r3, ip
 800129a:	4698      	mov	r8, r3
 800129c:	4249      	negs	r1, r1
 800129e:	4488      	add	r8, r1
 80012a0:	4643      	mov	r3, r8
 80012a2:	2602      	movs	r6, #2
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	d500      	bpl.n	80012aa <__aeabi_dadd+0x236>
 80012a8:	e0eb      	b.n	8001482 <__aeabi_dadd+0x40e>
 80012aa:	3e01      	subs	r6, #1
 80012ac:	076b      	lsls	r3, r5, #29
 80012ae:	d000      	beq.n	80012b2 <__aeabi_dadd+0x23e>
 80012b0:	e75c      	b.n	800116c <__aeabi_dadd+0xf8>
 80012b2:	4643      	mov	r3, r8
 80012b4:	08e9      	lsrs	r1, r5, #3
 80012b6:	075a      	lsls	r2, r3, #29
 80012b8:	4311      	orrs	r1, r2
 80012ba:	0032      	movs	r2, r6
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	484a      	ldr	r0, [pc, #296]	; (80013e8 <__aeabi_dadd+0x374>)
 80012c0:	4282      	cmp	r2, r0
 80012c2:	d021      	beq.n	8001308 <__aeabi_dadd+0x294>
 80012c4:	031b      	lsls	r3, r3, #12
 80012c6:	0552      	lsls	r2, r2, #21
 80012c8:	0b1b      	lsrs	r3, r3, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	e76c      	b.n	80011a8 <__aeabi_dadd+0x134>
 80012ce:	2300      	movs	r3, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	e769      	b.n	80011a8 <__aeabi_dadd+0x134>
 80012d4:	002a      	movs	r2, r5
 80012d6:	433a      	orrs	r2, r7
 80012d8:	d069      	beq.n	80013ae <__aeabi_dadd+0x33a>
 80012da:	464a      	mov	r2, r9
 80012dc:	0758      	lsls	r0, r3, #29
 80012de:	08d1      	lsrs	r1, r2, #3
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	031b      	lsls	r3, r3, #12
 80012e6:	4308      	orrs	r0, r1
 80012e8:	421a      	tst	r2, r3
 80012ea:	d007      	beq.n	80012fc <__aeabi_dadd+0x288>
 80012ec:	0029      	movs	r1, r5
 80012ee:	08ed      	lsrs	r5, r5, #3
 80012f0:	421d      	tst	r5, r3
 80012f2:	d103      	bne.n	80012fc <__aeabi_dadd+0x288>
 80012f4:	002a      	movs	r2, r5
 80012f6:	08ff      	lsrs	r7, r7, #3
 80012f8:	0748      	lsls	r0, r1, #29
 80012fa:	4338      	orrs	r0, r7
 80012fc:	0f43      	lsrs	r3, r0, #29
 80012fe:	00c1      	lsls	r1, r0, #3
 8001300:	075b      	lsls	r3, r3, #29
 8001302:	08c9      	lsrs	r1, r1, #3
 8001304:	4319      	orrs	r1, r3
 8001306:	0013      	movs	r3, r2
 8001308:	000a      	movs	r2, r1
 800130a:	431a      	orrs	r2, r3
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x29c>
 800130e:	e213      	b.n	8001738 <__aeabi_dadd+0x6c4>
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	0312      	lsls	r2, r2, #12
 8001314:	4313      	orrs	r3, r2
 8001316:	031b      	lsls	r3, r3, #12
 8001318:	4a33      	ldr	r2, [pc, #204]	; (80013e8 <__aeabi_dadd+0x374>)
 800131a:	0b1b      	lsrs	r3, r3, #12
 800131c:	e744      	b.n	80011a8 <__aeabi_dadd+0x134>
 800131e:	2a00      	cmp	r2, #0
 8001320:	d04b      	beq.n	80013ba <__aeabi_dadd+0x346>
 8001322:	1b8a      	subs	r2, r1, r6
 8001324:	2e00      	cmp	r6, #0
 8001326:	d100      	bne.n	800132a <__aeabi_dadd+0x2b6>
 8001328:	e0e7      	b.n	80014fa <__aeabi_dadd+0x486>
 800132a:	482f      	ldr	r0, [pc, #188]	; (80013e8 <__aeabi_dadd+0x374>)
 800132c:	4281      	cmp	r1, r0
 800132e:	d100      	bne.n	8001332 <__aeabi_dadd+0x2be>
 8001330:	e195      	b.n	800165e <__aeabi_dadd+0x5ea>
 8001332:	2080      	movs	r0, #128	; 0x80
 8001334:	0400      	lsls	r0, r0, #16
 8001336:	4303      	orrs	r3, r0
 8001338:	2a38      	cmp	r2, #56	; 0x38
 800133a:	dd00      	ble.n	800133e <__aeabi_dadd+0x2ca>
 800133c:	e143      	b.n	80015c6 <__aeabi_dadd+0x552>
 800133e:	2a1f      	cmp	r2, #31
 8001340:	dd00      	ble.n	8001344 <__aeabi_dadd+0x2d0>
 8001342:	e1db      	b.n	80016fc <__aeabi_dadd+0x688>
 8001344:	2020      	movs	r0, #32
 8001346:	001d      	movs	r5, r3
 8001348:	464e      	mov	r6, r9
 800134a:	1a80      	subs	r0, r0, r2
 800134c:	4085      	lsls	r5, r0
 800134e:	40d6      	lsrs	r6, r2
 8001350:	4335      	orrs	r5, r6
 8001352:	464e      	mov	r6, r9
 8001354:	4086      	lsls	r6, r0
 8001356:	0030      	movs	r0, r6
 8001358:	40d3      	lsrs	r3, r2
 800135a:	1e46      	subs	r6, r0, #1
 800135c:	41b0      	sbcs	r0, r6
 800135e:	449c      	add	ip, r3
 8001360:	4305      	orrs	r5, r0
 8001362:	19ed      	adds	r5, r5, r7
 8001364:	42bd      	cmp	r5, r7
 8001366:	419b      	sbcs	r3, r3
 8001368:	425b      	negs	r3, r3
 800136a:	4463      	add	r3, ip
 800136c:	4698      	mov	r8, r3
 800136e:	000e      	movs	r6, r1
 8001370:	e07f      	b.n	8001472 <__aeabi_dadd+0x3fe>
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <__aeabi_dadd+0x378>)
 8001374:	1a76      	subs	r6, r6, r1
 8001376:	4013      	ands	r3, r2
 8001378:	4698      	mov	r8, r3
 800137a:	e6f5      	b.n	8001168 <__aeabi_dadd+0xf4>
 800137c:	0028      	movs	r0, r5
 800137e:	f001 fcbb 	bl	8002cf8 <__clzsi2>
 8001382:	0001      	movs	r1, r0
 8001384:	3118      	adds	r1, #24
 8001386:	291f      	cmp	r1, #31
 8001388:	dc00      	bgt.n	800138c <__aeabi_dadd+0x318>
 800138a:	e6cf      	b.n	800112c <__aeabi_dadd+0xb8>
 800138c:	002b      	movs	r3, r5
 800138e:	3808      	subs	r0, #8
 8001390:	4083      	lsls	r3, r0
 8001392:	2500      	movs	r5, #0
 8001394:	e6d2      	b.n	800113c <__aeabi_dadd+0xc8>
 8001396:	4662      	mov	r2, ip
 8001398:	433a      	orrs	r2, r7
 800139a:	0011      	movs	r1, r2
 800139c:	1e4f      	subs	r7, r1, #1
 800139e:	41b9      	sbcs	r1, r7
 80013a0:	e6ac      	b.n	80010fc <__aeabi_dadd+0x88>
 80013a2:	4649      	mov	r1, r9
 80013a4:	0758      	lsls	r0, r3, #29
 80013a6:	08c9      	lsrs	r1, r1, #3
 80013a8:	4301      	orrs	r1, r0
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	e787      	b.n	80012be <__aeabi_dadd+0x24a>
 80013ae:	4649      	mov	r1, r9
 80013b0:	075a      	lsls	r2, r3, #29
 80013b2:	08c9      	lsrs	r1, r1, #3
 80013b4:	4311      	orrs	r1, r2
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	e7a6      	b.n	8001308 <__aeabi_dadd+0x294>
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <__aeabi_dadd+0x37c>)
 80013bc:	1c70      	adds	r0, r6, #1
 80013be:	4208      	tst	r0, r1
 80013c0:	d000      	beq.n	80013c4 <__aeabi_dadd+0x350>
 80013c2:	e0bb      	b.n	800153c <__aeabi_dadd+0x4c8>
 80013c4:	2e00      	cmp	r6, #0
 80013c6:	d000      	beq.n	80013ca <__aeabi_dadd+0x356>
 80013c8:	e114      	b.n	80015f4 <__aeabi_dadd+0x580>
 80013ca:	4649      	mov	r1, r9
 80013cc:	4319      	orrs	r1, r3
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0x35e>
 80013d0:	e175      	b.n	80016be <__aeabi_dadd+0x64a>
 80013d2:	0029      	movs	r1, r5
 80013d4:	4339      	orrs	r1, r7
 80013d6:	d000      	beq.n	80013da <__aeabi_dadd+0x366>
 80013d8:	e17e      	b.n	80016d8 <__aeabi_dadd+0x664>
 80013da:	4649      	mov	r1, r9
 80013dc:	0758      	lsls	r0, r3, #29
 80013de:	08c9      	lsrs	r1, r1, #3
 80013e0:	4301      	orrs	r1, r0
 80013e2:	08db      	lsrs	r3, r3, #3
 80013e4:	e76e      	b.n	80012c4 <__aeabi_dadd+0x250>
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	000007ff 	.word	0x000007ff
 80013ec:	ff7fffff 	.word	0xff7fffff
 80013f0:	000007fe 	.word	0x000007fe
 80013f4:	4649      	mov	r1, r9
 80013f6:	1bcd      	subs	r5, r1, r7
 80013f8:	4661      	mov	r1, ip
 80013fa:	1a58      	subs	r0, r3, r1
 80013fc:	45a9      	cmp	r9, r5
 80013fe:	4189      	sbcs	r1, r1
 8001400:	4249      	negs	r1, r1
 8001402:	4688      	mov	r8, r1
 8001404:	0001      	movs	r1, r0
 8001406:	4640      	mov	r0, r8
 8001408:	1a09      	subs	r1, r1, r0
 800140a:	4688      	mov	r8, r1
 800140c:	0209      	lsls	r1, r1, #8
 800140e:	d500      	bpl.n	8001412 <__aeabi_dadd+0x39e>
 8001410:	e0a6      	b.n	8001560 <__aeabi_dadd+0x4ec>
 8001412:	4641      	mov	r1, r8
 8001414:	4329      	orrs	r1, r5
 8001416:	d000      	beq.n	800141a <__aeabi_dadd+0x3a6>
 8001418:	e67f      	b.n	800111a <__aeabi_dadd+0xa6>
 800141a:	2300      	movs	r3, #0
 800141c:	2400      	movs	r4, #0
 800141e:	e751      	b.n	80012c4 <__aeabi_dadd+0x250>
 8001420:	4cc7      	ldr	r4, [pc, #796]	; (8001740 <__aeabi_dadd+0x6cc>)
 8001422:	42a1      	cmp	r1, r4
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x3b4>
 8001426:	e0c7      	b.n	80015b8 <__aeabi_dadd+0x544>
 8001428:	2480      	movs	r4, #128	; 0x80
 800142a:	0424      	lsls	r4, r4, #16
 800142c:	4323      	orrs	r3, r4
 800142e:	2a38      	cmp	r2, #56	; 0x38
 8001430:	dc54      	bgt.n	80014dc <__aeabi_dadd+0x468>
 8001432:	2a1f      	cmp	r2, #31
 8001434:	dd00      	ble.n	8001438 <__aeabi_dadd+0x3c4>
 8001436:	e0cc      	b.n	80015d2 <__aeabi_dadd+0x55e>
 8001438:	2420      	movs	r4, #32
 800143a:	4648      	mov	r0, r9
 800143c:	1aa4      	subs	r4, r4, r2
 800143e:	001d      	movs	r5, r3
 8001440:	464e      	mov	r6, r9
 8001442:	40a0      	lsls	r0, r4
 8001444:	40d6      	lsrs	r6, r2
 8001446:	40a5      	lsls	r5, r4
 8001448:	0004      	movs	r4, r0
 800144a:	40d3      	lsrs	r3, r2
 800144c:	4662      	mov	r2, ip
 800144e:	4335      	orrs	r5, r6
 8001450:	1e66      	subs	r6, r4, #1
 8001452:	41b4      	sbcs	r4, r6
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	469c      	mov	ip, r3
 8001458:	4325      	orrs	r5, r4
 800145a:	e044      	b.n	80014e6 <__aeabi_dadd+0x472>
 800145c:	4662      	mov	r2, ip
 800145e:	433a      	orrs	r2, r7
 8001460:	0015      	movs	r5, r2
 8001462:	1e6f      	subs	r7, r5, #1
 8001464:	41bd      	sbcs	r5, r7
 8001466:	444d      	add	r5, r9
 8001468:	454d      	cmp	r5, r9
 800146a:	4189      	sbcs	r1, r1
 800146c:	4249      	negs	r1, r1
 800146e:	4688      	mov	r8, r1
 8001470:	4498      	add	r8, r3
 8001472:	4643      	mov	r3, r8
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	d400      	bmi.n	800147a <__aeabi_dadd+0x406>
 8001478:	e718      	b.n	80012ac <__aeabi_dadd+0x238>
 800147a:	4bb1      	ldr	r3, [pc, #708]	; (8001740 <__aeabi_dadd+0x6cc>)
 800147c:	3601      	adds	r6, #1
 800147e:	429e      	cmp	r6, r3
 8001480:	d049      	beq.n	8001516 <__aeabi_dadd+0x4a2>
 8001482:	4642      	mov	r2, r8
 8001484:	4baf      	ldr	r3, [pc, #700]	; (8001744 <__aeabi_dadd+0x6d0>)
 8001486:	2101      	movs	r1, #1
 8001488:	401a      	ands	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	086a      	lsrs	r2, r5, #1
 800148e:	400d      	ands	r5, r1
 8001490:	4315      	orrs	r5, r2
 8001492:	07d9      	lsls	r1, r3, #31
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	4698      	mov	r8, r3
 8001498:	430d      	orrs	r5, r1
 800149a:	e665      	b.n	8001168 <__aeabi_dadd+0xf4>
 800149c:	0018      	movs	r0, r3
 800149e:	3e1f      	subs	r6, #31
 80014a0:	40f0      	lsrs	r0, r6
 80014a2:	2a20      	cmp	r2, #32
 80014a4:	d003      	beq.n	80014ae <__aeabi_dadd+0x43a>
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	1a8a      	subs	r2, r1, r2
 80014aa:	4093      	lsls	r3, r2
 80014ac:	431d      	orrs	r5, r3
 80014ae:	1e69      	subs	r1, r5, #1
 80014b0:	418d      	sbcs	r5, r1
 80014b2:	2300      	movs	r3, #0
 80014b4:	2600      	movs	r6, #0
 80014b6:	4698      	mov	r8, r3
 80014b8:	4305      	orrs	r5, r0
 80014ba:	e6f7      	b.n	80012ac <__aeabi_dadd+0x238>
 80014bc:	0011      	movs	r1, r2
 80014be:	4665      	mov	r5, ip
 80014c0:	3920      	subs	r1, #32
 80014c2:	40cd      	lsrs	r5, r1
 80014c4:	2a20      	cmp	r2, #32
 80014c6:	d004      	beq.n	80014d2 <__aeabi_dadd+0x45e>
 80014c8:	2040      	movs	r0, #64	; 0x40
 80014ca:	4661      	mov	r1, ip
 80014cc:	1a82      	subs	r2, r0, r2
 80014ce:	4091      	lsls	r1, r2
 80014d0:	430f      	orrs	r7, r1
 80014d2:	0039      	movs	r1, r7
 80014d4:	1e4f      	subs	r7, r1, #1
 80014d6:	41b9      	sbcs	r1, r7
 80014d8:	4329      	orrs	r1, r5
 80014da:	e60f      	b.n	80010fc <__aeabi_dadd+0x88>
 80014dc:	464a      	mov	r2, r9
 80014de:	4313      	orrs	r3, r2
 80014e0:	001d      	movs	r5, r3
 80014e2:	1e6b      	subs	r3, r5, #1
 80014e4:	419d      	sbcs	r5, r3
 80014e6:	1b7d      	subs	r5, r7, r5
 80014e8:	42af      	cmp	r7, r5
 80014ea:	419b      	sbcs	r3, r3
 80014ec:	4662      	mov	r2, ip
 80014ee:	425b      	negs	r3, r3
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	4698      	mov	r8, r3
 80014f4:	4654      	mov	r4, sl
 80014f6:	000e      	movs	r6, r1
 80014f8:	e607      	b.n	800110a <__aeabi_dadd+0x96>
 80014fa:	4648      	mov	r0, r9
 80014fc:	4318      	orrs	r0, r3
 80014fe:	d100      	bne.n	8001502 <__aeabi_dadd+0x48e>
 8001500:	e0b3      	b.n	800166a <__aeabi_dadd+0x5f6>
 8001502:	1e50      	subs	r0, r2, #1
 8001504:	2a01      	cmp	r2, #1
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0x496>
 8001508:	e10d      	b.n	8001726 <__aeabi_dadd+0x6b2>
 800150a:	4d8d      	ldr	r5, [pc, #564]	; (8001740 <__aeabi_dadd+0x6cc>)
 800150c:	42aa      	cmp	r2, r5
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x49e>
 8001510:	e0a5      	b.n	800165e <__aeabi_dadd+0x5ea>
 8001512:	0002      	movs	r2, r0
 8001514:	e710      	b.n	8001338 <__aeabi_dadd+0x2c4>
 8001516:	0032      	movs	r2, r6
 8001518:	2300      	movs	r3, #0
 800151a:	2100      	movs	r1, #0
 800151c:	e644      	b.n	80011a8 <__aeabi_dadd+0x134>
 800151e:	2120      	movs	r1, #32
 8001520:	0038      	movs	r0, r7
 8001522:	1a89      	subs	r1, r1, r2
 8001524:	4665      	mov	r5, ip
 8001526:	408f      	lsls	r7, r1
 8001528:	408d      	lsls	r5, r1
 800152a:	40d0      	lsrs	r0, r2
 800152c:	1e79      	subs	r1, r7, #1
 800152e:	418f      	sbcs	r7, r1
 8001530:	4305      	orrs	r5, r0
 8001532:	433d      	orrs	r5, r7
 8001534:	4667      	mov	r7, ip
 8001536:	40d7      	lsrs	r7, r2
 8001538:	19db      	adds	r3, r3, r7
 800153a:	e794      	b.n	8001466 <__aeabi_dadd+0x3f2>
 800153c:	4a80      	ldr	r2, [pc, #512]	; (8001740 <__aeabi_dadd+0x6cc>)
 800153e:	4290      	cmp	r0, r2
 8001540:	d100      	bne.n	8001544 <__aeabi_dadd+0x4d0>
 8001542:	e0ec      	b.n	800171e <__aeabi_dadd+0x6aa>
 8001544:	0039      	movs	r1, r7
 8001546:	4449      	add	r1, r9
 8001548:	4549      	cmp	r1, r9
 800154a:	4192      	sbcs	r2, r2
 800154c:	4463      	add	r3, ip
 800154e:	4252      	negs	r2, r2
 8001550:	189b      	adds	r3, r3, r2
 8001552:	07dd      	lsls	r5, r3, #31
 8001554:	0849      	lsrs	r1, r1, #1
 8001556:	085b      	lsrs	r3, r3, #1
 8001558:	4698      	mov	r8, r3
 800155a:	0006      	movs	r6, r0
 800155c:	430d      	orrs	r5, r1
 800155e:	e6a5      	b.n	80012ac <__aeabi_dadd+0x238>
 8001560:	464a      	mov	r2, r9
 8001562:	1abd      	subs	r5, r7, r2
 8001564:	42af      	cmp	r7, r5
 8001566:	4189      	sbcs	r1, r1
 8001568:	4662      	mov	r2, ip
 800156a:	4249      	negs	r1, r1
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	1a5b      	subs	r3, r3, r1
 8001570:	4698      	mov	r8, r3
 8001572:	4654      	mov	r4, sl
 8001574:	e5d1      	b.n	800111a <__aeabi_dadd+0xa6>
 8001576:	076c      	lsls	r4, r5, #29
 8001578:	08f9      	lsrs	r1, r7, #3
 800157a:	4321      	orrs	r1, r4
 800157c:	08eb      	lsrs	r3, r5, #3
 800157e:	0004      	movs	r4, r0
 8001580:	e69d      	b.n	80012be <__aeabi_dadd+0x24a>
 8001582:	464a      	mov	r2, r9
 8001584:	431a      	orrs	r2, r3
 8001586:	d175      	bne.n	8001674 <__aeabi_dadd+0x600>
 8001588:	4661      	mov	r1, ip
 800158a:	4339      	orrs	r1, r7
 800158c:	d114      	bne.n	80015b8 <__aeabi_dadd+0x544>
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	2400      	movs	r4, #0
 8001592:	031b      	lsls	r3, r3, #12
 8001594:	e6bc      	b.n	8001310 <__aeabi_dadd+0x29c>
 8001596:	464a      	mov	r2, r9
 8001598:	1bd5      	subs	r5, r2, r7
 800159a:	45a9      	cmp	r9, r5
 800159c:	4189      	sbcs	r1, r1
 800159e:	4662      	mov	r2, ip
 80015a0:	4249      	negs	r1, r1
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	1a5b      	subs	r3, r3, r1
 80015a6:	4698      	mov	r8, r3
 80015a8:	2601      	movs	r6, #1
 80015aa:	e5ae      	b.n	800110a <__aeabi_dadd+0x96>
 80015ac:	464a      	mov	r2, r9
 80015ae:	08d1      	lsrs	r1, r2, #3
 80015b0:	075a      	lsls	r2, r3, #29
 80015b2:	4311      	orrs	r1, r2
 80015b4:	08db      	lsrs	r3, r3, #3
 80015b6:	e6a7      	b.n	8001308 <__aeabi_dadd+0x294>
 80015b8:	4663      	mov	r3, ip
 80015ba:	08f9      	lsrs	r1, r7, #3
 80015bc:	075a      	lsls	r2, r3, #29
 80015be:	4654      	mov	r4, sl
 80015c0:	4311      	orrs	r1, r2
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	e6a0      	b.n	8001308 <__aeabi_dadd+0x294>
 80015c6:	464a      	mov	r2, r9
 80015c8:	4313      	orrs	r3, r2
 80015ca:	001d      	movs	r5, r3
 80015cc:	1e6b      	subs	r3, r5, #1
 80015ce:	419d      	sbcs	r5, r3
 80015d0:	e6c7      	b.n	8001362 <__aeabi_dadd+0x2ee>
 80015d2:	0014      	movs	r4, r2
 80015d4:	001e      	movs	r6, r3
 80015d6:	3c20      	subs	r4, #32
 80015d8:	40e6      	lsrs	r6, r4
 80015da:	2a20      	cmp	r2, #32
 80015dc:	d005      	beq.n	80015ea <__aeabi_dadd+0x576>
 80015de:	2440      	movs	r4, #64	; 0x40
 80015e0:	1aa2      	subs	r2, r4, r2
 80015e2:	4093      	lsls	r3, r2
 80015e4:	464a      	mov	r2, r9
 80015e6:	431a      	orrs	r2, r3
 80015e8:	4691      	mov	r9, r2
 80015ea:	464d      	mov	r5, r9
 80015ec:	1e6b      	subs	r3, r5, #1
 80015ee:	419d      	sbcs	r5, r3
 80015f0:	4335      	orrs	r5, r6
 80015f2:	e778      	b.n	80014e6 <__aeabi_dadd+0x472>
 80015f4:	464a      	mov	r2, r9
 80015f6:	431a      	orrs	r2, r3
 80015f8:	d000      	beq.n	80015fc <__aeabi_dadd+0x588>
 80015fa:	e66b      	b.n	80012d4 <__aeabi_dadd+0x260>
 80015fc:	076b      	lsls	r3, r5, #29
 80015fe:	08f9      	lsrs	r1, r7, #3
 8001600:	4319      	orrs	r1, r3
 8001602:	08eb      	lsrs	r3, r5, #3
 8001604:	e680      	b.n	8001308 <__aeabi_dadd+0x294>
 8001606:	4661      	mov	r1, ip
 8001608:	4339      	orrs	r1, r7
 800160a:	d054      	beq.n	80016b6 <__aeabi_dadd+0x642>
 800160c:	4663      	mov	r3, ip
 800160e:	08f9      	lsrs	r1, r7, #3
 8001610:	075c      	lsls	r4, r3, #29
 8001612:	4321      	orrs	r1, r4
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	0004      	movs	r4, r0
 8001618:	e654      	b.n	80012c4 <__aeabi_dadd+0x250>
 800161a:	464a      	mov	r2, r9
 800161c:	1abd      	subs	r5, r7, r2
 800161e:	42af      	cmp	r7, r5
 8001620:	4189      	sbcs	r1, r1
 8001622:	4662      	mov	r2, ip
 8001624:	4249      	negs	r1, r1
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	1a5b      	subs	r3, r3, r1
 800162a:	4698      	mov	r8, r3
 800162c:	0004      	movs	r4, r0
 800162e:	2601      	movs	r6, #1
 8001630:	e56b      	b.n	800110a <__aeabi_dadd+0x96>
 8001632:	464a      	mov	r2, r9
 8001634:	1bd5      	subs	r5, r2, r7
 8001636:	45a9      	cmp	r9, r5
 8001638:	4189      	sbcs	r1, r1
 800163a:	4662      	mov	r2, ip
 800163c:	4249      	negs	r1, r1
 800163e:	1a9a      	subs	r2, r3, r2
 8001640:	1a52      	subs	r2, r2, r1
 8001642:	4690      	mov	r8, r2
 8001644:	0212      	lsls	r2, r2, #8
 8001646:	d532      	bpl.n	80016ae <__aeabi_dadd+0x63a>
 8001648:	464a      	mov	r2, r9
 800164a:	1abd      	subs	r5, r7, r2
 800164c:	42af      	cmp	r7, r5
 800164e:	4189      	sbcs	r1, r1
 8001650:	4662      	mov	r2, ip
 8001652:	4249      	negs	r1, r1
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	1a5b      	subs	r3, r3, r1
 8001658:	4698      	mov	r8, r3
 800165a:	0004      	movs	r4, r0
 800165c:	e584      	b.n	8001168 <__aeabi_dadd+0xf4>
 800165e:	4663      	mov	r3, ip
 8001660:	08f9      	lsrs	r1, r7, #3
 8001662:	075a      	lsls	r2, r3, #29
 8001664:	4311      	orrs	r1, r2
 8001666:	08db      	lsrs	r3, r3, #3
 8001668:	e64e      	b.n	8001308 <__aeabi_dadd+0x294>
 800166a:	08f9      	lsrs	r1, r7, #3
 800166c:	0768      	lsls	r0, r5, #29
 800166e:	4301      	orrs	r1, r0
 8001670:	08eb      	lsrs	r3, r5, #3
 8001672:	e624      	b.n	80012be <__aeabi_dadd+0x24a>
 8001674:	4662      	mov	r2, ip
 8001676:	433a      	orrs	r2, r7
 8001678:	d100      	bne.n	800167c <__aeabi_dadd+0x608>
 800167a:	e698      	b.n	80013ae <__aeabi_dadd+0x33a>
 800167c:	464a      	mov	r2, r9
 800167e:	08d1      	lsrs	r1, r2, #3
 8001680:	075a      	lsls	r2, r3, #29
 8001682:	4311      	orrs	r1, r2
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	031b      	lsls	r3, r3, #12
 800168a:	421a      	tst	r2, r3
 800168c:	d008      	beq.n	80016a0 <__aeabi_dadd+0x62c>
 800168e:	4660      	mov	r0, ip
 8001690:	08c5      	lsrs	r5, r0, #3
 8001692:	421d      	tst	r5, r3
 8001694:	d104      	bne.n	80016a0 <__aeabi_dadd+0x62c>
 8001696:	4654      	mov	r4, sl
 8001698:	002a      	movs	r2, r5
 800169a:	08f9      	lsrs	r1, r7, #3
 800169c:	0743      	lsls	r3, r0, #29
 800169e:	4319      	orrs	r1, r3
 80016a0:	0f4b      	lsrs	r3, r1, #29
 80016a2:	00c9      	lsls	r1, r1, #3
 80016a4:	075b      	lsls	r3, r3, #29
 80016a6:	08c9      	lsrs	r1, r1, #3
 80016a8:	4319      	orrs	r1, r3
 80016aa:	0013      	movs	r3, r2
 80016ac:	e62c      	b.n	8001308 <__aeabi_dadd+0x294>
 80016ae:	4641      	mov	r1, r8
 80016b0:	4329      	orrs	r1, r5
 80016b2:	d000      	beq.n	80016b6 <__aeabi_dadd+0x642>
 80016b4:	e5fa      	b.n	80012ac <__aeabi_dadd+0x238>
 80016b6:	2300      	movs	r3, #0
 80016b8:	000a      	movs	r2, r1
 80016ba:	2400      	movs	r4, #0
 80016bc:	e602      	b.n	80012c4 <__aeabi_dadd+0x250>
 80016be:	076b      	lsls	r3, r5, #29
 80016c0:	08f9      	lsrs	r1, r7, #3
 80016c2:	4319      	orrs	r1, r3
 80016c4:	08eb      	lsrs	r3, r5, #3
 80016c6:	e5fd      	b.n	80012c4 <__aeabi_dadd+0x250>
 80016c8:	4663      	mov	r3, ip
 80016ca:	08f9      	lsrs	r1, r7, #3
 80016cc:	075b      	lsls	r3, r3, #29
 80016ce:	4319      	orrs	r1, r3
 80016d0:	4663      	mov	r3, ip
 80016d2:	0004      	movs	r4, r0
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	e617      	b.n	8001308 <__aeabi_dadd+0x294>
 80016d8:	003d      	movs	r5, r7
 80016da:	444d      	add	r5, r9
 80016dc:	4463      	add	r3, ip
 80016de:	454d      	cmp	r5, r9
 80016e0:	4189      	sbcs	r1, r1
 80016e2:	4698      	mov	r8, r3
 80016e4:	4249      	negs	r1, r1
 80016e6:	4488      	add	r8, r1
 80016e8:	4643      	mov	r3, r8
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	d400      	bmi.n	80016f0 <__aeabi_dadd+0x67c>
 80016ee:	e5dd      	b.n	80012ac <__aeabi_dadd+0x238>
 80016f0:	4642      	mov	r2, r8
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <__aeabi_dadd+0x6d0>)
 80016f4:	2601      	movs	r6, #1
 80016f6:	401a      	ands	r2, r3
 80016f8:	4690      	mov	r8, r2
 80016fa:	e5d7      	b.n	80012ac <__aeabi_dadd+0x238>
 80016fc:	0010      	movs	r0, r2
 80016fe:	001e      	movs	r6, r3
 8001700:	3820      	subs	r0, #32
 8001702:	40c6      	lsrs	r6, r0
 8001704:	2a20      	cmp	r2, #32
 8001706:	d005      	beq.n	8001714 <__aeabi_dadd+0x6a0>
 8001708:	2040      	movs	r0, #64	; 0x40
 800170a:	1a82      	subs	r2, r0, r2
 800170c:	4093      	lsls	r3, r2
 800170e:	464a      	mov	r2, r9
 8001710:	431a      	orrs	r2, r3
 8001712:	4691      	mov	r9, r2
 8001714:	464d      	mov	r5, r9
 8001716:	1e6b      	subs	r3, r5, #1
 8001718:	419d      	sbcs	r5, r3
 800171a:	4335      	orrs	r5, r6
 800171c:	e621      	b.n	8001362 <__aeabi_dadd+0x2ee>
 800171e:	0002      	movs	r2, r0
 8001720:	2300      	movs	r3, #0
 8001722:	2100      	movs	r1, #0
 8001724:	e540      	b.n	80011a8 <__aeabi_dadd+0x134>
 8001726:	464a      	mov	r2, r9
 8001728:	19d5      	adds	r5, r2, r7
 800172a:	42bd      	cmp	r5, r7
 800172c:	4189      	sbcs	r1, r1
 800172e:	4463      	add	r3, ip
 8001730:	4698      	mov	r8, r3
 8001732:	4249      	negs	r1, r1
 8001734:	4488      	add	r8, r1
 8001736:	e5b3      	b.n	80012a0 <__aeabi_dadd+0x22c>
 8001738:	2100      	movs	r1, #0
 800173a:	4a01      	ldr	r2, [pc, #4]	; (8001740 <__aeabi_dadd+0x6cc>)
 800173c:	000b      	movs	r3, r1
 800173e:	e533      	b.n	80011a8 <__aeabi_dadd+0x134>
 8001740:	000007ff 	.word	0x000007ff
 8001744:	ff7fffff 	.word	0xff7fffff

08001748 <__aeabi_ddiv>:
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	4657      	mov	r7, sl
 800174c:	464e      	mov	r6, r9
 800174e:	4645      	mov	r5, r8
 8001750:	46de      	mov	lr, fp
 8001752:	b5e0      	push	{r5, r6, r7, lr}
 8001754:	4681      	mov	r9, r0
 8001756:	0005      	movs	r5, r0
 8001758:	030c      	lsls	r4, r1, #12
 800175a:	0048      	lsls	r0, r1, #1
 800175c:	4692      	mov	sl, r2
 800175e:	001f      	movs	r7, r3
 8001760:	b085      	sub	sp, #20
 8001762:	0b24      	lsrs	r4, r4, #12
 8001764:	0d40      	lsrs	r0, r0, #21
 8001766:	0fce      	lsrs	r6, r1, #31
 8001768:	2800      	cmp	r0, #0
 800176a:	d059      	beq.n	8001820 <__aeabi_ddiv+0xd8>
 800176c:	4b87      	ldr	r3, [pc, #540]	; (800198c <__aeabi_ddiv+0x244>)
 800176e:	4298      	cmp	r0, r3
 8001770:	d100      	bne.n	8001774 <__aeabi_ddiv+0x2c>
 8001772:	e098      	b.n	80018a6 <__aeabi_ddiv+0x15e>
 8001774:	0f6b      	lsrs	r3, r5, #29
 8001776:	00e4      	lsls	r4, r4, #3
 8001778:	431c      	orrs	r4, r3
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	4323      	orrs	r3, r4
 8001780:	4698      	mov	r8, r3
 8001782:	4b83      	ldr	r3, [pc, #524]	; (8001990 <__aeabi_ddiv+0x248>)
 8001784:	00ed      	lsls	r5, r5, #3
 8001786:	469b      	mov	fp, r3
 8001788:	2300      	movs	r3, #0
 800178a:	4699      	mov	r9, r3
 800178c:	4483      	add	fp, r0
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	033c      	lsls	r4, r7, #12
 8001792:	007b      	lsls	r3, r7, #1
 8001794:	4650      	mov	r0, sl
 8001796:	0b24      	lsrs	r4, r4, #12
 8001798:	0d5b      	lsrs	r3, r3, #21
 800179a:	0fff      	lsrs	r7, r7, #31
 800179c:	2b00      	cmp	r3, #0
 800179e:	d067      	beq.n	8001870 <__aeabi_ddiv+0x128>
 80017a0:	4a7a      	ldr	r2, [pc, #488]	; (800198c <__aeabi_ddiv+0x244>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d018      	beq.n	80017d8 <__aeabi_ddiv+0x90>
 80017a6:	497a      	ldr	r1, [pc, #488]	; (8001990 <__aeabi_ddiv+0x248>)
 80017a8:	0f42      	lsrs	r2, r0, #29
 80017aa:	468c      	mov	ip, r1
 80017ac:	00e4      	lsls	r4, r4, #3
 80017ae:	4659      	mov	r1, fp
 80017b0:	4314      	orrs	r4, r2
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	4463      	add	r3, ip
 80017b6:	0412      	lsls	r2, r2, #16
 80017b8:	1acb      	subs	r3, r1, r3
 80017ba:	4314      	orrs	r4, r2
 80017bc:	469b      	mov	fp, r3
 80017be:	00c2      	lsls	r2, r0, #3
 80017c0:	2000      	movs	r0, #0
 80017c2:	0033      	movs	r3, r6
 80017c4:	407b      	eors	r3, r7
 80017c6:	469a      	mov	sl, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	d900      	bls.n	80017d0 <__aeabi_ddiv+0x88>
 80017ce:	e0ef      	b.n	80019b0 <__aeabi_ddiv+0x268>
 80017d0:	4970      	ldr	r1, [pc, #448]	; (8001994 <__aeabi_ddiv+0x24c>)
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	58cb      	ldr	r3, [r1, r3]
 80017d6:	469f      	mov	pc, r3
 80017d8:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <__aeabi_ddiv+0x250>)
 80017da:	4652      	mov	r2, sl
 80017dc:	469c      	mov	ip, r3
 80017de:	4322      	orrs	r2, r4
 80017e0:	44e3      	add	fp, ip
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	d000      	beq.n	80017e8 <__aeabi_ddiv+0xa0>
 80017e6:	e095      	b.n	8001914 <__aeabi_ddiv+0x1cc>
 80017e8:	4649      	mov	r1, r9
 80017ea:	2302      	movs	r3, #2
 80017ec:	4319      	orrs	r1, r3
 80017ee:	4689      	mov	r9, r1
 80017f0:	2400      	movs	r4, #0
 80017f2:	2002      	movs	r0, #2
 80017f4:	e7e5      	b.n	80017c2 <__aeabi_ddiv+0x7a>
 80017f6:	2300      	movs	r3, #0
 80017f8:	2400      	movs	r4, #0
 80017fa:	2500      	movs	r5, #0
 80017fc:	4652      	mov	r2, sl
 80017fe:	051b      	lsls	r3, r3, #20
 8001800:	4323      	orrs	r3, r4
 8001802:	07d2      	lsls	r2, r2, #31
 8001804:	4313      	orrs	r3, r2
 8001806:	0028      	movs	r0, r5
 8001808:	0019      	movs	r1, r3
 800180a:	b005      	add	sp, #20
 800180c:	bcf0      	pop	{r4, r5, r6, r7}
 800180e:	46bb      	mov	fp, r7
 8001810:	46b2      	mov	sl, r6
 8001812:	46a9      	mov	r9, r5
 8001814:	46a0      	mov	r8, r4
 8001816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001818:	2400      	movs	r4, #0
 800181a:	2500      	movs	r5, #0
 800181c:	4b5b      	ldr	r3, [pc, #364]	; (800198c <__aeabi_ddiv+0x244>)
 800181e:	e7ed      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001820:	464b      	mov	r3, r9
 8001822:	4323      	orrs	r3, r4
 8001824:	4698      	mov	r8, r3
 8001826:	d100      	bne.n	800182a <__aeabi_ddiv+0xe2>
 8001828:	e089      	b.n	800193e <__aeabi_ddiv+0x1f6>
 800182a:	2c00      	cmp	r4, #0
 800182c:	d100      	bne.n	8001830 <__aeabi_ddiv+0xe8>
 800182e:	e1e0      	b.n	8001bf2 <__aeabi_ddiv+0x4aa>
 8001830:	0020      	movs	r0, r4
 8001832:	f001 fa61 	bl	8002cf8 <__clzsi2>
 8001836:	0001      	movs	r1, r0
 8001838:	0002      	movs	r2, r0
 800183a:	390b      	subs	r1, #11
 800183c:	231d      	movs	r3, #29
 800183e:	1a5b      	subs	r3, r3, r1
 8001840:	4649      	mov	r1, r9
 8001842:	0010      	movs	r0, r2
 8001844:	40d9      	lsrs	r1, r3
 8001846:	3808      	subs	r0, #8
 8001848:	4084      	lsls	r4, r0
 800184a:	000b      	movs	r3, r1
 800184c:	464d      	mov	r5, r9
 800184e:	4323      	orrs	r3, r4
 8001850:	4698      	mov	r8, r3
 8001852:	4085      	lsls	r5, r0
 8001854:	4851      	ldr	r0, [pc, #324]	; (800199c <__aeabi_ddiv+0x254>)
 8001856:	033c      	lsls	r4, r7, #12
 8001858:	1a83      	subs	r3, r0, r2
 800185a:	469b      	mov	fp, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4699      	mov	r9, r3
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	007b      	lsls	r3, r7, #1
 8001864:	4650      	mov	r0, sl
 8001866:	0b24      	lsrs	r4, r4, #12
 8001868:	0d5b      	lsrs	r3, r3, #21
 800186a:	0fff      	lsrs	r7, r7, #31
 800186c:	2b00      	cmp	r3, #0
 800186e:	d197      	bne.n	80017a0 <__aeabi_ddiv+0x58>
 8001870:	4652      	mov	r2, sl
 8001872:	4322      	orrs	r2, r4
 8001874:	d055      	beq.n	8001922 <__aeabi_ddiv+0x1da>
 8001876:	2c00      	cmp	r4, #0
 8001878:	d100      	bne.n	800187c <__aeabi_ddiv+0x134>
 800187a:	e1ca      	b.n	8001c12 <__aeabi_ddiv+0x4ca>
 800187c:	0020      	movs	r0, r4
 800187e:	f001 fa3b 	bl	8002cf8 <__clzsi2>
 8001882:	0002      	movs	r2, r0
 8001884:	3a0b      	subs	r2, #11
 8001886:	231d      	movs	r3, #29
 8001888:	0001      	movs	r1, r0
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	4652      	mov	r2, sl
 800188e:	3908      	subs	r1, #8
 8001890:	40da      	lsrs	r2, r3
 8001892:	408c      	lsls	r4, r1
 8001894:	4314      	orrs	r4, r2
 8001896:	4652      	mov	r2, sl
 8001898:	408a      	lsls	r2, r1
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <__aeabi_ddiv+0x258>)
 800189c:	4458      	add	r0, fp
 800189e:	469b      	mov	fp, r3
 80018a0:	4483      	add	fp, r0
 80018a2:	2000      	movs	r0, #0
 80018a4:	e78d      	b.n	80017c2 <__aeabi_ddiv+0x7a>
 80018a6:	464b      	mov	r3, r9
 80018a8:	4323      	orrs	r3, r4
 80018aa:	4698      	mov	r8, r3
 80018ac:	d140      	bne.n	8001930 <__aeabi_ddiv+0x1e8>
 80018ae:	2308      	movs	r3, #8
 80018b0:	4699      	mov	r9, r3
 80018b2:	3b06      	subs	r3, #6
 80018b4:	2500      	movs	r5, #0
 80018b6:	4683      	mov	fp, r0
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	e769      	b.n	8001790 <__aeabi_ddiv+0x48>
 80018bc:	46b2      	mov	sl, r6
 80018be:	9b00      	ldr	r3, [sp, #0]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d0a9      	beq.n	8001818 <__aeabi_ddiv+0xd0>
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d100      	bne.n	80018ca <__aeabi_ddiv+0x182>
 80018c8:	e211      	b.n	8001cee <__aeabi_ddiv+0x5a6>
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d093      	beq.n	80017f6 <__aeabi_ddiv+0xae>
 80018ce:	4a35      	ldr	r2, [pc, #212]	; (80019a4 <__aeabi_ddiv+0x25c>)
 80018d0:	445a      	add	r2, fp
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	dc00      	bgt.n	80018d8 <__aeabi_ddiv+0x190>
 80018d6:	e13c      	b.n	8001b52 <__aeabi_ddiv+0x40a>
 80018d8:	076b      	lsls	r3, r5, #29
 80018da:	d000      	beq.n	80018de <__aeabi_ddiv+0x196>
 80018dc:	e1a7      	b.n	8001c2e <__aeabi_ddiv+0x4e6>
 80018de:	08ed      	lsrs	r5, r5, #3
 80018e0:	4643      	mov	r3, r8
 80018e2:	01db      	lsls	r3, r3, #7
 80018e4:	d506      	bpl.n	80018f4 <__aeabi_ddiv+0x1ac>
 80018e6:	4642      	mov	r2, r8
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <__aeabi_ddiv+0x260>)
 80018ea:	401a      	ands	r2, r3
 80018ec:	4690      	mov	r8, r2
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	445a      	add	r2, fp
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <__aeabi_ddiv+0x264>)
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dc8e      	bgt.n	8001818 <__aeabi_ddiv+0xd0>
 80018fa:	4643      	mov	r3, r8
 80018fc:	0552      	lsls	r2, r2, #21
 80018fe:	0758      	lsls	r0, r3, #29
 8001900:	025c      	lsls	r4, r3, #9
 8001902:	4305      	orrs	r5, r0
 8001904:	0b24      	lsrs	r4, r4, #12
 8001906:	0d53      	lsrs	r3, r2, #21
 8001908:	e778      	b.n	80017fc <__aeabi_ddiv+0xb4>
 800190a:	46ba      	mov	sl, r7
 800190c:	46a0      	mov	r8, r4
 800190e:	0015      	movs	r5, r2
 8001910:	9000      	str	r0, [sp, #0]
 8001912:	e7d4      	b.n	80018be <__aeabi_ddiv+0x176>
 8001914:	464a      	mov	r2, r9
 8001916:	2303      	movs	r3, #3
 8001918:	431a      	orrs	r2, r3
 800191a:	4691      	mov	r9, r2
 800191c:	2003      	movs	r0, #3
 800191e:	4652      	mov	r2, sl
 8001920:	e74f      	b.n	80017c2 <__aeabi_ddiv+0x7a>
 8001922:	4649      	mov	r1, r9
 8001924:	2301      	movs	r3, #1
 8001926:	4319      	orrs	r1, r3
 8001928:	4689      	mov	r9, r1
 800192a:	2400      	movs	r4, #0
 800192c:	2001      	movs	r0, #1
 800192e:	e748      	b.n	80017c2 <__aeabi_ddiv+0x7a>
 8001930:	230c      	movs	r3, #12
 8001932:	4699      	mov	r9, r3
 8001934:	3b09      	subs	r3, #9
 8001936:	46a0      	mov	r8, r4
 8001938:	4683      	mov	fp, r0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	e728      	b.n	8001790 <__aeabi_ddiv+0x48>
 800193e:	2304      	movs	r3, #4
 8001940:	4699      	mov	r9, r3
 8001942:	2300      	movs	r3, #0
 8001944:	469b      	mov	fp, r3
 8001946:	3301      	adds	r3, #1
 8001948:	2500      	movs	r5, #0
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	e720      	b.n	8001790 <__aeabi_ddiv+0x48>
 800194e:	2300      	movs	r3, #0
 8001950:	2480      	movs	r4, #128	; 0x80
 8001952:	469a      	mov	sl, r3
 8001954:	2500      	movs	r5, #0
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <__aeabi_ddiv+0x244>)
 8001958:	0324      	lsls	r4, r4, #12
 800195a:	e74f      	b.n	80017fc <__aeabi_ddiv+0xb4>
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	4641      	mov	r1, r8
 8001960:	031b      	lsls	r3, r3, #12
 8001962:	4219      	tst	r1, r3
 8001964:	d008      	beq.n	8001978 <__aeabi_ddiv+0x230>
 8001966:	421c      	tst	r4, r3
 8001968:	d106      	bne.n	8001978 <__aeabi_ddiv+0x230>
 800196a:	431c      	orrs	r4, r3
 800196c:	0324      	lsls	r4, r4, #12
 800196e:	46ba      	mov	sl, r7
 8001970:	0015      	movs	r5, r2
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <__aeabi_ddiv+0x244>)
 8001974:	0b24      	lsrs	r4, r4, #12
 8001976:	e741      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001978:	2480      	movs	r4, #128	; 0x80
 800197a:	4643      	mov	r3, r8
 800197c:	0324      	lsls	r4, r4, #12
 800197e:	431c      	orrs	r4, r3
 8001980:	0324      	lsls	r4, r4, #12
 8001982:	46b2      	mov	sl, r6
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <__aeabi_ddiv+0x244>)
 8001986:	0b24      	lsrs	r4, r4, #12
 8001988:	e738      	b.n	80017fc <__aeabi_ddiv+0xb4>
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	000007ff 	.word	0x000007ff
 8001990:	fffffc01 	.word	0xfffffc01
 8001994:	0801f398 	.word	0x0801f398
 8001998:	fffff801 	.word	0xfffff801
 800199c:	fffffc0d 	.word	0xfffffc0d
 80019a0:	000003f3 	.word	0x000003f3
 80019a4:	000003ff 	.word	0x000003ff
 80019a8:	feffffff 	.word	0xfeffffff
 80019ac:	000007fe 	.word	0x000007fe
 80019b0:	4544      	cmp	r4, r8
 80019b2:	d200      	bcs.n	80019b6 <__aeabi_ddiv+0x26e>
 80019b4:	e116      	b.n	8001be4 <__aeabi_ddiv+0x49c>
 80019b6:	d100      	bne.n	80019ba <__aeabi_ddiv+0x272>
 80019b8:	e111      	b.n	8001bde <__aeabi_ddiv+0x496>
 80019ba:	2301      	movs	r3, #1
 80019bc:	425b      	negs	r3, r3
 80019be:	469c      	mov	ip, r3
 80019c0:	002e      	movs	r6, r5
 80019c2:	4640      	mov	r0, r8
 80019c4:	2500      	movs	r5, #0
 80019c6:	44e3      	add	fp, ip
 80019c8:	0223      	lsls	r3, r4, #8
 80019ca:	0e14      	lsrs	r4, r2, #24
 80019cc:	431c      	orrs	r4, r3
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	4699      	mov	r9, r3
 80019d2:	0423      	lsls	r3, r4, #16
 80019d4:	0c1f      	lsrs	r7, r3, #16
 80019d6:	0212      	lsls	r2, r2, #8
 80019d8:	4649      	mov	r1, r9
 80019da:	9200      	str	r2, [sp, #0]
 80019dc:	9701      	str	r7, [sp, #4]
 80019de:	f7fe fc21 	bl	8000224 <__aeabi_uidivmod>
 80019e2:	0002      	movs	r2, r0
 80019e4:	437a      	muls	r2, r7
 80019e6:	040b      	lsls	r3, r1, #16
 80019e8:	0c31      	lsrs	r1, r6, #16
 80019ea:	4680      	mov	r8, r0
 80019ec:	4319      	orrs	r1, r3
 80019ee:	428a      	cmp	r2, r1
 80019f0:	d90b      	bls.n	8001a0a <__aeabi_ddiv+0x2c2>
 80019f2:	2301      	movs	r3, #1
 80019f4:	425b      	negs	r3, r3
 80019f6:	469c      	mov	ip, r3
 80019f8:	1909      	adds	r1, r1, r4
 80019fa:	44e0      	add	r8, ip
 80019fc:	428c      	cmp	r4, r1
 80019fe:	d804      	bhi.n	8001a0a <__aeabi_ddiv+0x2c2>
 8001a00:	428a      	cmp	r2, r1
 8001a02:	d902      	bls.n	8001a0a <__aeabi_ddiv+0x2c2>
 8001a04:	1e83      	subs	r3, r0, #2
 8001a06:	4698      	mov	r8, r3
 8001a08:	1909      	adds	r1, r1, r4
 8001a0a:	1a88      	subs	r0, r1, r2
 8001a0c:	4649      	mov	r1, r9
 8001a0e:	f7fe fc09 	bl	8000224 <__aeabi_uidivmod>
 8001a12:	0409      	lsls	r1, r1, #16
 8001a14:	468c      	mov	ip, r1
 8001a16:	0431      	lsls	r1, r6, #16
 8001a18:	4666      	mov	r6, ip
 8001a1a:	9a01      	ldr	r2, [sp, #4]
 8001a1c:	0c09      	lsrs	r1, r1, #16
 8001a1e:	4342      	muls	r2, r0
 8001a20:	0003      	movs	r3, r0
 8001a22:	4331      	orrs	r1, r6
 8001a24:	428a      	cmp	r2, r1
 8001a26:	d904      	bls.n	8001a32 <__aeabi_ddiv+0x2ea>
 8001a28:	1909      	adds	r1, r1, r4
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	428c      	cmp	r4, r1
 8001a2e:	d800      	bhi.n	8001a32 <__aeabi_ddiv+0x2ea>
 8001a30:	e111      	b.n	8001c56 <__aeabi_ddiv+0x50e>
 8001a32:	1a89      	subs	r1, r1, r2
 8001a34:	4642      	mov	r2, r8
 8001a36:	9e00      	ldr	r6, [sp, #0]
 8001a38:	0412      	lsls	r2, r2, #16
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	0c33      	lsrs	r3, r6, #16
 8001a3e:	001f      	movs	r7, r3
 8001a40:	0c10      	lsrs	r0, r2, #16
 8001a42:	4690      	mov	r8, r2
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	0413      	lsls	r3, r2, #16
 8001a48:	0432      	lsls	r2, r6, #16
 8001a4a:	0c16      	lsrs	r6, r2, #16
 8001a4c:	0032      	movs	r2, r6
 8001a4e:	0c1b      	lsrs	r3, r3, #16
 8001a50:	435a      	muls	r2, r3
 8001a52:	9603      	str	r6, [sp, #12]
 8001a54:	437b      	muls	r3, r7
 8001a56:	4346      	muls	r6, r0
 8001a58:	4378      	muls	r0, r7
 8001a5a:	0c17      	lsrs	r7, r2, #16
 8001a5c:	46bc      	mov	ip, r7
 8001a5e:	199b      	adds	r3, r3, r6
 8001a60:	4463      	add	r3, ip
 8001a62:	429e      	cmp	r6, r3
 8001a64:	d903      	bls.n	8001a6e <__aeabi_ddiv+0x326>
 8001a66:	2680      	movs	r6, #128	; 0x80
 8001a68:	0276      	lsls	r6, r6, #9
 8001a6a:	46b4      	mov	ip, r6
 8001a6c:	4460      	add	r0, ip
 8001a6e:	0c1e      	lsrs	r6, r3, #16
 8001a70:	1830      	adds	r0, r6, r0
 8001a72:	0416      	lsls	r6, r2, #16
 8001a74:	041b      	lsls	r3, r3, #16
 8001a76:	0c36      	lsrs	r6, r6, #16
 8001a78:	199e      	adds	r6, r3, r6
 8001a7a:	4281      	cmp	r1, r0
 8001a7c:	d200      	bcs.n	8001a80 <__aeabi_ddiv+0x338>
 8001a7e:	e09c      	b.n	8001bba <__aeabi_ddiv+0x472>
 8001a80:	d100      	bne.n	8001a84 <__aeabi_ddiv+0x33c>
 8001a82:	e097      	b.n	8001bb4 <__aeabi_ddiv+0x46c>
 8001a84:	1bae      	subs	r6, r5, r6
 8001a86:	1a09      	subs	r1, r1, r0
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	4180      	sbcs	r0, r0
 8001a8c:	4240      	negs	r0, r0
 8001a8e:	1a08      	subs	r0, r1, r0
 8001a90:	4284      	cmp	r4, r0
 8001a92:	d100      	bne.n	8001a96 <__aeabi_ddiv+0x34e>
 8001a94:	e111      	b.n	8001cba <__aeabi_ddiv+0x572>
 8001a96:	4649      	mov	r1, r9
 8001a98:	f7fe fbc4 	bl	8000224 <__aeabi_uidivmod>
 8001a9c:	9a01      	ldr	r2, [sp, #4]
 8001a9e:	040b      	lsls	r3, r1, #16
 8001aa0:	4342      	muls	r2, r0
 8001aa2:	0c31      	lsrs	r1, r6, #16
 8001aa4:	0005      	movs	r5, r0
 8001aa6:	4319      	orrs	r1, r3
 8001aa8:	428a      	cmp	r2, r1
 8001aaa:	d907      	bls.n	8001abc <__aeabi_ddiv+0x374>
 8001aac:	1909      	adds	r1, r1, r4
 8001aae:	3d01      	subs	r5, #1
 8001ab0:	428c      	cmp	r4, r1
 8001ab2:	d803      	bhi.n	8001abc <__aeabi_ddiv+0x374>
 8001ab4:	428a      	cmp	r2, r1
 8001ab6:	d901      	bls.n	8001abc <__aeabi_ddiv+0x374>
 8001ab8:	1e85      	subs	r5, r0, #2
 8001aba:	1909      	adds	r1, r1, r4
 8001abc:	1a88      	subs	r0, r1, r2
 8001abe:	4649      	mov	r1, r9
 8001ac0:	f7fe fbb0 	bl	8000224 <__aeabi_uidivmod>
 8001ac4:	0409      	lsls	r1, r1, #16
 8001ac6:	468c      	mov	ip, r1
 8001ac8:	0431      	lsls	r1, r6, #16
 8001aca:	4666      	mov	r6, ip
 8001acc:	9a01      	ldr	r2, [sp, #4]
 8001ace:	0c09      	lsrs	r1, r1, #16
 8001ad0:	4342      	muls	r2, r0
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	4331      	orrs	r1, r6
 8001ad6:	428a      	cmp	r2, r1
 8001ad8:	d907      	bls.n	8001aea <__aeabi_ddiv+0x3a2>
 8001ada:	1909      	adds	r1, r1, r4
 8001adc:	3b01      	subs	r3, #1
 8001ade:	428c      	cmp	r4, r1
 8001ae0:	d803      	bhi.n	8001aea <__aeabi_ddiv+0x3a2>
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d901      	bls.n	8001aea <__aeabi_ddiv+0x3a2>
 8001ae6:	1e83      	subs	r3, r0, #2
 8001ae8:	1909      	adds	r1, r1, r4
 8001aea:	9e03      	ldr	r6, [sp, #12]
 8001aec:	1a89      	subs	r1, r1, r2
 8001aee:	0032      	movs	r2, r6
 8001af0:	042d      	lsls	r5, r5, #16
 8001af2:	431d      	orrs	r5, r3
 8001af4:	9f02      	ldr	r7, [sp, #8]
 8001af6:	042b      	lsls	r3, r5, #16
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	435a      	muls	r2, r3
 8001afc:	437b      	muls	r3, r7
 8001afe:	469c      	mov	ip, r3
 8001b00:	0c28      	lsrs	r0, r5, #16
 8001b02:	4346      	muls	r6, r0
 8001b04:	0c13      	lsrs	r3, r2, #16
 8001b06:	44b4      	add	ip, r6
 8001b08:	4463      	add	r3, ip
 8001b0a:	4378      	muls	r0, r7
 8001b0c:	429e      	cmp	r6, r3
 8001b0e:	d903      	bls.n	8001b18 <__aeabi_ddiv+0x3d0>
 8001b10:	2680      	movs	r6, #128	; 0x80
 8001b12:	0276      	lsls	r6, r6, #9
 8001b14:	46b4      	mov	ip, r6
 8001b16:	4460      	add	r0, ip
 8001b18:	0c1e      	lsrs	r6, r3, #16
 8001b1a:	0412      	lsls	r2, r2, #16
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	0c12      	lsrs	r2, r2, #16
 8001b20:	1830      	adds	r0, r6, r0
 8001b22:	189b      	adds	r3, r3, r2
 8001b24:	4281      	cmp	r1, r0
 8001b26:	d306      	bcc.n	8001b36 <__aeabi_ddiv+0x3ee>
 8001b28:	d002      	beq.n	8001b30 <__aeabi_ddiv+0x3e8>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	431d      	orrs	r5, r3
 8001b2e:	e6ce      	b.n	80018ce <__aeabi_ddiv+0x186>
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x3ee>
 8001b34:	e6cb      	b.n	80018ce <__aeabi_ddiv+0x186>
 8001b36:	1861      	adds	r1, r4, r1
 8001b38:	1e6e      	subs	r6, r5, #1
 8001b3a:	42a1      	cmp	r1, r4
 8001b3c:	d200      	bcs.n	8001b40 <__aeabi_ddiv+0x3f8>
 8001b3e:	e0a4      	b.n	8001c8a <__aeabi_ddiv+0x542>
 8001b40:	4281      	cmp	r1, r0
 8001b42:	d200      	bcs.n	8001b46 <__aeabi_ddiv+0x3fe>
 8001b44:	e0c9      	b.n	8001cda <__aeabi_ddiv+0x592>
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x402>
 8001b48:	e0d9      	b.n	8001cfe <__aeabi_ddiv+0x5b6>
 8001b4a:	0035      	movs	r5, r6
 8001b4c:	e7ed      	b.n	8001b2a <__aeabi_ddiv+0x3e2>
 8001b4e:	2501      	movs	r5, #1
 8001b50:	426d      	negs	r5, r5
 8001b52:	2101      	movs	r1, #1
 8001b54:	1a89      	subs	r1, r1, r2
 8001b56:	2938      	cmp	r1, #56	; 0x38
 8001b58:	dd00      	ble.n	8001b5c <__aeabi_ddiv+0x414>
 8001b5a:	e64c      	b.n	80017f6 <__aeabi_ddiv+0xae>
 8001b5c:	291f      	cmp	r1, #31
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x41a>
 8001b60:	e07f      	b.n	8001c62 <__aeabi_ddiv+0x51a>
 8001b62:	231f      	movs	r3, #31
 8001b64:	425b      	negs	r3, r3
 8001b66:	1a9a      	subs	r2, r3, r2
 8001b68:	4643      	mov	r3, r8
 8001b6a:	40d3      	lsrs	r3, r2
 8001b6c:	2920      	cmp	r1, #32
 8001b6e:	d004      	beq.n	8001b7a <__aeabi_ddiv+0x432>
 8001b70:	4644      	mov	r4, r8
 8001b72:	4a65      	ldr	r2, [pc, #404]	; (8001d08 <__aeabi_ddiv+0x5c0>)
 8001b74:	445a      	add	r2, fp
 8001b76:	4094      	lsls	r4, r2
 8001b78:	4325      	orrs	r5, r4
 8001b7a:	1e6a      	subs	r2, r5, #1
 8001b7c:	4195      	sbcs	r5, r2
 8001b7e:	2207      	movs	r2, #7
 8001b80:	432b      	orrs	r3, r5
 8001b82:	0015      	movs	r5, r2
 8001b84:	2400      	movs	r4, #0
 8001b86:	401d      	ands	r5, r3
 8001b88:	421a      	tst	r2, r3
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_ddiv+0x446>
 8001b8c:	e0a1      	b.n	8001cd2 <__aeabi_ddiv+0x58a>
 8001b8e:	220f      	movs	r2, #15
 8001b90:	2400      	movs	r4, #0
 8001b92:	401a      	ands	r2, r3
 8001b94:	2a04      	cmp	r2, #4
 8001b96:	d100      	bne.n	8001b9a <__aeabi_ddiv+0x452>
 8001b98:	e098      	b.n	8001ccc <__aeabi_ddiv+0x584>
 8001b9a:	1d1a      	adds	r2, r3, #4
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	419b      	sbcs	r3, r3
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	18e4      	adds	r4, r4, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	0222      	lsls	r2, r4, #8
 8001ba8:	d400      	bmi.n	8001bac <__aeabi_ddiv+0x464>
 8001baa:	e08f      	b.n	8001ccc <__aeabi_ddiv+0x584>
 8001bac:	2301      	movs	r3, #1
 8001bae:	2400      	movs	r4, #0
 8001bb0:	2500      	movs	r5, #0
 8001bb2:	e623      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001bb4:	42b5      	cmp	r5, r6
 8001bb6:	d300      	bcc.n	8001bba <__aeabi_ddiv+0x472>
 8001bb8:	e764      	b.n	8001a84 <__aeabi_ddiv+0x33c>
 8001bba:	4643      	mov	r3, r8
 8001bbc:	1e5a      	subs	r2, r3, #1
 8001bbe:	9b00      	ldr	r3, [sp, #0]
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	4465      	add	r5, ip
 8001bc4:	001f      	movs	r7, r3
 8001bc6:	429d      	cmp	r5, r3
 8001bc8:	419b      	sbcs	r3, r3
 8001bca:	425b      	negs	r3, r3
 8001bcc:	191b      	adds	r3, r3, r4
 8001bce:	18c9      	adds	r1, r1, r3
 8001bd0:	428c      	cmp	r4, r1
 8001bd2:	d23a      	bcs.n	8001c4a <__aeabi_ddiv+0x502>
 8001bd4:	4288      	cmp	r0, r1
 8001bd6:	d863      	bhi.n	8001ca0 <__aeabi_ddiv+0x558>
 8001bd8:	d060      	beq.n	8001c9c <__aeabi_ddiv+0x554>
 8001bda:	4690      	mov	r8, r2
 8001bdc:	e752      	b.n	8001a84 <__aeabi_ddiv+0x33c>
 8001bde:	42aa      	cmp	r2, r5
 8001be0:	d900      	bls.n	8001be4 <__aeabi_ddiv+0x49c>
 8001be2:	e6ea      	b.n	80019ba <__aeabi_ddiv+0x272>
 8001be4:	4643      	mov	r3, r8
 8001be6:	07de      	lsls	r6, r3, #31
 8001be8:	0858      	lsrs	r0, r3, #1
 8001bea:	086b      	lsrs	r3, r5, #1
 8001bec:	431e      	orrs	r6, r3
 8001bee:	07ed      	lsls	r5, r5, #31
 8001bf0:	e6ea      	b.n	80019c8 <__aeabi_ddiv+0x280>
 8001bf2:	4648      	mov	r0, r9
 8001bf4:	f001 f880 	bl	8002cf8 <__clzsi2>
 8001bf8:	0001      	movs	r1, r0
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	3115      	adds	r1, #21
 8001bfe:	3220      	adds	r2, #32
 8001c00:	291c      	cmp	r1, #28
 8001c02:	dc00      	bgt.n	8001c06 <__aeabi_ddiv+0x4be>
 8001c04:	e61a      	b.n	800183c <__aeabi_ddiv+0xf4>
 8001c06:	464b      	mov	r3, r9
 8001c08:	3808      	subs	r0, #8
 8001c0a:	4083      	lsls	r3, r0
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	4698      	mov	r8, r3
 8001c10:	e620      	b.n	8001854 <__aeabi_ddiv+0x10c>
 8001c12:	f001 f871 	bl	8002cf8 <__clzsi2>
 8001c16:	0003      	movs	r3, r0
 8001c18:	001a      	movs	r2, r3
 8001c1a:	3215      	adds	r2, #21
 8001c1c:	3020      	adds	r0, #32
 8001c1e:	2a1c      	cmp	r2, #28
 8001c20:	dc00      	bgt.n	8001c24 <__aeabi_ddiv+0x4dc>
 8001c22:	e630      	b.n	8001886 <__aeabi_ddiv+0x13e>
 8001c24:	4654      	mov	r4, sl
 8001c26:	3b08      	subs	r3, #8
 8001c28:	2200      	movs	r2, #0
 8001c2a:	409c      	lsls	r4, r3
 8001c2c:	e635      	b.n	800189a <__aeabi_ddiv+0x152>
 8001c2e:	230f      	movs	r3, #15
 8001c30:	402b      	ands	r3, r5
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0x4f0>
 8001c36:	e652      	b.n	80018de <__aeabi_ddiv+0x196>
 8001c38:	2305      	movs	r3, #5
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	42ab      	cmp	r3, r5
 8001c3e:	419b      	sbcs	r3, r3
 8001c40:	3504      	adds	r5, #4
 8001c42:	425b      	negs	r3, r3
 8001c44:	08ed      	lsrs	r5, r5, #3
 8001c46:	4498      	add	r8, r3
 8001c48:	e64a      	b.n	80018e0 <__aeabi_ddiv+0x198>
 8001c4a:	428c      	cmp	r4, r1
 8001c4c:	d1c5      	bne.n	8001bda <__aeabi_ddiv+0x492>
 8001c4e:	42af      	cmp	r7, r5
 8001c50:	d9c0      	bls.n	8001bd4 <__aeabi_ddiv+0x48c>
 8001c52:	4690      	mov	r8, r2
 8001c54:	e716      	b.n	8001a84 <__aeabi_ddiv+0x33c>
 8001c56:	428a      	cmp	r2, r1
 8001c58:	d800      	bhi.n	8001c5c <__aeabi_ddiv+0x514>
 8001c5a:	e6ea      	b.n	8001a32 <__aeabi_ddiv+0x2ea>
 8001c5c:	1e83      	subs	r3, r0, #2
 8001c5e:	1909      	adds	r1, r1, r4
 8001c60:	e6e7      	b.n	8001a32 <__aeabi_ddiv+0x2ea>
 8001c62:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <__aeabi_ddiv+0x5c4>)
 8001c64:	0028      	movs	r0, r5
 8001c66:	445a      	add	r2, fp
 8001c68:	4643      	mov	r3, r8
 8001c6a:	4095      	lsls	r5, r2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	40c8      	lsrs	r0, r1
 8001c70:	1e6a      	subs	r2, r5, #1
 8001c72:	4195      	sbcs	r5, r2
 8001c74:	4644      	mov	r4, r8
 8001c76:	4303      	orrs	r3, r0
 8001c78:	432b      	orrs	r3, r5
 8001c7a:	40cc      	lsrs	r4, r1
 8001c7c:	075a      	lsls	r2, r3, #29
 8001c7e:	d092      	beq.n	8001ba6 <__aeabi_ddiv+0x45e>
 8001c80:	220f      	movs	r2, #15
 8001c82:	401a      	ands	r2, r3
 8001c84:	2a04      	cmp	r2, #4
 8001c86:	d188      	bne.n	8001b9a <__aeabi_ddiv+0x452>
 8001c88:	e78d      	b.n	8001ba6 <__aeabi_ddiv+0x45e>
 8001c8a:	0035      	movs	r5, r6
 8001c8c:	4281      	cmp	r1, r0
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_ddiv+0x54a>
 8001c90:	e74b      	b.n	8001b2a <__aeabi_ddiv+0x3e2>
 8001c92:	9a00      	ldr	r2, [sp, #0]
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d000      	beq.n	8001c9a <__aeabi_ddiv+0x552>
 8001c98:	e747      	b.n	8001b2a <__aeabi_ddiv+0x3e2>
 8001c9a:	e618      	b.n	80018ce <__aeabi_ddiv+0x186>
 8001c9c:	42ae      	cmp	r6, r5
 8001c9e:	d99c      	bls.n	8001bda <__aeabi_ddiv+0x492>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	469c      	mov	ip, r3
 8001ca6:	9b00      	ldr	r3, [sp, #0]
 8001ca8:	44e0      	add	r8, ip
 8001caa:	469c      	mov	ip, r3
 8001cac:	4465      	add	r5, ip
 8001cae:	429d      	cmp	r5, r3
 8001cb0:	419b      	sbcs	r3, r3
 8001cb2:	425b      	negs	r3, r3
 8001cb4:	191b      	adds	r3, r3, r4
 8001cb6:	18c9      	adds	r1, r1, r3
 8001cb8:	e6e4      	b.n	8001a84 <__aeabi_ddiv+0x33c>
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <__aeabi_ddiv+0x5c8>)
 8001cbc:	445a      	add	r2, fp
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	dc00      	bgt.n	8001cc4 <__aeabi_ddiv+0x57c>
 8001cc2:	e744      	b.n	8001b4e <__aeabi_ddiv+0x406>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	4498      	add	r8, r3
 8001cca:	e609      	b.n	80018e0 <__aeabi_ddiv+0x198>
 8001ccc:	0765      	lsls	r5, r4, #29
 8001cce:	0264      	lsls	r4, r4, #9
 8001cd0:	0b24      	lsrs	r4, r4, #12
 8001cd2:	08db      	lsrs	r3, r3, #3
 8001cd4:	431d      	orrs	r5, r3
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e590      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001cda:	9e00      	ldr	r6, [sp, #0]
 8001cdc:	3d02      	subs	r5, #2
 8001cde:	0072      	lsls	r2, r6, #1
 8001ce0:	42b2      	cmp	r2, r6
 8001ce2:	41bf      	sbcs	r7, r7
 8001ce4:	427f      	negs	r7, r7
 8001ce6:	193c      	adds	r4, r7, r4
 8001ce8:	1909      	adds	r1, r1, r4
 8001cea:	9200      	str	r2, [sp, #0]
 8001cec:	e7ce      	b.n	8001c8c <__aeabi_ddiv+0x544>
 8001cee:	2480      	movs	r4, #128	; 0x80
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	0324      	lsls	r4, r4, #12
 8001cf4:	431c      	orrs	r4, r3
 8001cf6:	0324      	lsls	r4, r4, #12
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <__aeabi_ddiv+0x5cc>)
 8001cfa:	0b24      	lsrs	r4, r4, #12
 8001cfc:	e57e      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001cfe:	9a00      	ldr	r2, [sp, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3ea      	bcc.n	8001cda <__aeabi_ddiv+0x592>
 8001d04:	0035      	movs	r5, r6
 8001d06:	e7c4      	b.n	8001c92 <__aeabi_ddiv+0x54a>
 8001d08:	0000043e 	.word	0x0000043e
 8001d0c:	0000041e 	.word	0x0000041e
 8001d10:	000003ff 	.word	0x000003ff
 8001d14:	000007ff 	.word	0x000007ff

08001d18 <__eqdf2>:
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	464f      	mov	r7, r9
 8001d1c:	4646      	mov	r6, r8
 8001d1e:	46d6      	mov	lr, sl
 8001d20:	4694      	mov	ip, r2
 8001d22:	4691      	mov	r9, r2
 8001d24:	031a      	lsls	r2, r3, #12
 8001d26:	0b12      	lsrs	r2, r2, #12
 8001d28:	4d18      	ldr	r5, [pc, #96]	; (8001d8c <__eqdf2+0x74>)
 8001d2a:	b5c0      	push	{r6, r7, lr}
 8001d2c:	004c      	lsls	r4, r1, #1
 8001d2e:	030f      	lsls	r7, r1, #12
 8001d30:	4692      	mov	sl, r2
 8001d32:	005a      	lsls	r2, r3, #1
 8001d34:	0006      	movs	r6, r0
 8001d36:	4680      	mov	r8, r0
 8001d38:	0b3f      	lsrs	r7, r7, #12
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	0d64      	lsrs	r4, r4, #21
 8001d3e:	0fc9      	lsrs	r1, r1, #31
 8001d40:	0d52      	lsrs	r2, r2, #21
 8001d42:	0fdb      	lsrs	r3, r3, #31
 8001d44:	42ac      	cmp	r4, r5
 8001d46:	d00a      	beq.n	8001d5e <__eqdf2+0x46>
 8001d48:	42aa      	cmp	r2, r5
 8001d4a:	d003      	beq.n	8001d54 <__eqdf2+0x3c>
 8001d4c:	4294      	cmp	r4, r2
 8001d4e:	d101      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d50:	4557      	cmp	r7, sl
 8001d52:	d00d      	beq.n	8001d70 <__eqdf2+0x58>
 8001d54:	bce0      	pop	{r5, r6, r7}
 8001d56:	46ba      	mov	sl, r7
 8001d58:	46b1      	mov	r9, r6
 8001d5a:	46a8      	mov	r8, r5
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	003d      	movs	r5, r7
 8001d60:	4335      	orrs	r5, r6
 8001d62:	d1f7      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d64:	42a2      	cmp	r2, r4
 8001d66:	d1f5      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d68:	4652      	mov	r2, sl
 8001d6a:	4665      	mov	r5, ip
 8001d6c:	432a      	orrs	r2, r5
 8001d6e:	d1f1      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d70:	2001      	movs	r0, #1
 8001d72:	45c8      	cmp	r8, r9
 8001d74:	d1ee      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d76:	4299      	cmp	r1, r3
 8001d78:	d006      	beq.n	8001d88 <__eqdf2+0x70>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d1ea      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d7e:	433e      	orrs	r6, r7
 8001d80:	0030      	movs	r0, r6
 8001d82:	1e46      	subs	r6, r0, #1
 8001d84:	41b0      	sbcs	r0, r6
 8001d86:	e7e5      	b.n	8001d54 <__eqdf2+0x3c>
 8001d88:	2000      	movs	r0, #0
 8001d8a:	e7e3      	b.n	8001d54 <__eqdf2+0x3c>
 8001d8c:	000007ff 	.word	0x000007ff

08001d90 <__gedf2>:
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	464e      	mov	r6, r9
 8001d94:	4645      	mov	r5, r8
 8001d96:	4657      	mov	r7, sl
 8001d98:	46de      	mov	lr, fp
 8001d9a:	0004      	movs	r4, r0
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	b5e0      	push	{r5, r6, r7, lr}
 8001da0:	0016      	movs	r6, r2
 8001da2:	031b      	lsls	r3, r3, #12
 8001da4:	0b1b      	lsrs	r3, r3, #12
 8001da6:	4d32      	ldr	r5, [pc, #200]	; (8001e70 <__gedf2+0xe0>)
 8001da8:	030f      	lsls	r7, r1, #12
 8001daa:	004a      	lsls	r2, r1, #1
 8001dac:	4699      	mov	r9, r3
 8001dae:	0043      	lsls	r3, r0, #1
 8001db0:	46a4      	mov	ip, r4
 8001db2:	46b0      	mov	r8, r6
 8001db4:	0b3f      	lsrs	r7, r7, #12
 8001db6:	0d52      	lsrs	r2, r2, #21
 8001db8:	0fc9      	lsrs	r1, r1, #31
 8001dba:	0d5b      	lsrs	r3, r3, #21
 8001dbc:	0fc0      	lsrs	r0, r0, #31
 8001dbe:	42aa      	cmp	r2, r5
 8001dc0:	d029      	beq.n	8001e16 <__gedf2+0x86>
 8001dc2:	42ab      	cmp	r3, r5
 8001dc4:	d018      	beq.n	8001df8 <__gedf2+0x68>
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	d12a      	bne.n	8001e20 <__gedf2+0x90>
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	46a3      	mov	fp, r4
 8001dce:	4265      	negs	r5, r4
 8001dd0:	4165      	adcs	r5, r4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <__gedf2+0x4c>
 8001dd6:	464c      	mov	r4, r9
 8001dd8:	4326      	orrs	r6, r4
 8001dda:	d027      	beq.n	8001e2c <__gedf2+0x9c>
 8001ddc:	2d00      	cmp	r5, #0
 8001dde:	d115      	bne.n	8001e0c <__gedf2+0x7c>
 8001de0:	4281      	cmp	r1, r0
 8001de2:	d028      	beq.n	8001e36 <__gedf2+0xa6>
 8001de4:	2002      	movs	r0, #2
 8001de6:	3901      	subs	r1, #1
 8001de8:	4008      	ands	r0, r1
 8001dea:	3801      	subs	r0, #1
 8001dec:	bcf0      	pop	{r4, r5, r6, r7}
 8001dee:	46bb      	mov	fp, r7
 8001df0:	46b2      	mov	sl, r6
 8001df2:	46a9      	mov	r9, r5
 8001df4:	46a0      	mov	r8, r4
 8001df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df8:	464d      	mov	r5, r9
 8001dfa:	432e      	orrs	r6, r5
 8001dfc:	d12f      	bne.n	8001e5e <__gedf2+0xce>
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d1ee      	bne.n	8001de0 <__gedf2+0x50>
 8001e02:	433c      	orrs	r4, r7
 8001e04:	4265      	negs	r5, r4
 8001e06:	4165      	adcs	r5, r4
 8001e08:	2d00      	cmp	r5, #0
 8001e0a:	d0e9      	beq.n	8001de0 <__gedf2+0x50>
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	d1ed      	bne.n	8001dec <__gedf2+0x5c>
 8001e10:	2001      	movs	r0, #1
 8001e12:	4240      	negs	r0, r0
 8001e14:	e7ea      	b.n	8001dec <__gedf2+0x5c>
 8001e16:	003d      	movs	r5, r7
 8001e18:	4325      	orrs	r5, r4
 8001e1a:	d120      	bne.n	8001e5e <__gedf2+0xce>
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d0eb      	beq.n	8001df8 <__gedf2+0x68>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1dd      	bne.n	8001de0 <__gedf2+0x50>
 8001e24:	464c      	mov	r4, r9
 8001e26:	4326      	orrs	r6, r4
 8001e28:	d1da      	bne.n	8001de0 <__gedf2+0x50>
 8001e2a:	e7db      	b.n	8001de4 <__gedf2+0x54>
 8001e2c:	465b      	mov	r3, fp
 8001e2e:	2000      	movs	r0, #0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0db      	beq.n	8001dec <__gedf2+0x5c>
 8001e34:	e7d6      	b.n	8001de4 <__gedf2+0x54>
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dc0a      	bgt.n	8001e50 <__gedf2+0xc0>
 8001e3a:	dbe7      	blt.n	8001e0c <__gedf2+0x7c>
 8001e3c:	454f      	cmp	r7, r9
 8001e3e:	d8d1      	bhi.n	8001de4 <__gedf2+0x54>
 8001e40:	d010      	beq.n	8001e64 <__gedf2+0xd4>
 8001e42:	2000      	movs	r0, #0
 8001e44:	454f      	cmp	r7, r9
 8001e46:	d2d1      	bcs.n	8001dec <__gedf2+0x5c>
 8001e48:	2900      	cmp	r1, #0
 8001e4a:	d0e1      	beq.n	8001e10 <__gedf2+0x80>
 8001e4c:	0008      	movs	r0, r1
 8001e4e:	e7cd      	b.n	8001dec <__gedf2+0x5c>
 8001e50:	4243      	negs	r3, r0
 8001e52:	4158      	adcs	r0, r3
 8001e54:	2302      	movs	r3, #2
 8001e56:	4240      	negs	r0, r0
 8001e58:	4018      	ands	r0, r3
 8001e5a:	3801      	subs	r0, #1
 8001e5c:	e7c6      	b.n	8001dec <__gedf2+0x5c>
 8001e5e:	2002      	movs	r0, #2
 8001e60:	4240      	negs	r0, r0
 8001e62:	e7c3      	b.n	8001dec <__gedf2+0x5c>
 8001e64:	45c4      	cmp	ip, r8
 8001e66:	d8bd      	bhi.n	8001de4 <__gedf2+0x54>
 8001e68:	2000      	movs	r0, #0
 8001e6a:	45c4      	cmp	ip, r8
 8001e6c:	d2be      	bcs.n	8001dec <__gedf2+0x5c>
 8001e6e:	e7eb      	b.n	8001e48 <__gedf2+0xb8>
 8001e70:	000007ff 	.word	0x000007ff

08001e74 <__ledf2>:
 8001e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e76:	464e      	mov	r6, r9
 8001e78:	4645      	mov	r5, r8
 8001e7a:	4657      	mov	r7, sl
 8001e7c:	46de      	mov	lr, fp
 8001e7e:	0004      	movs	r4, r0
 8001e80:	0018      	movs	r0, r3
 8001e82:	b5e0      	push	{r5, r6, r7, lr}
 8001e84:	0016      	movs	r6, r2
 8001e86:	031b      	lsls	r3, r3, #12
 8001e88:	0b1b      	lsrs	r3, r3, #12
 8001e8a:	4d31      	ldr	r5, [pc, #196]	; (8001f50 <__ledf2+0xdc>)
 8001e8c:	030f      	lsls	r7, r1, #12
 8001e8e:	004a      	lsls	r2, r1, #1
 8001e90:	4699      	mov	r9, r3
 8001e92:	0043      	lsls	r3, r0, #1
 8001e94:	46a4      	mov	ip, r4
 8001e96:	46b0      	mov	r8, r6
 8001e98:	0b3f      	lsrs	r7, r7, #12
 8001e9a:	0d52      	lsrs	r2, r2, #21
 8001e9c:	0fc9      	lsrs	r1, r1, #31
 8001e9e:	0d5b      	lsrs	r3, r3, #21
 8001ea0:	0fc0      	lsrs	r0, r0, #31
 8001ea2:	42aa      	cmp	r2, r5
 8001ea4:	d011      	beq.n	8001eca <__ledf2+0x56>
 8001ea6:	42ab      	cmp	r3, r5
 8001ea8:	d014      	beq.n	8001ed4 <__ledf2+0x60>
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	d12f      	bne.n	8001f0e <__ledf2+0x9a>
 8001eae:	433c      	orrs	r4, r7
 8001eb0:	46a3      	mov	fp, r4
 8001eb2:	4265      	negs	r5, r4
 8001eb4:	4165      	adcs	r5, r4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d114      	bne.n	8001ee4 <__ledf2+0x70>
 8001eba:	464c      	mov	r4, r9
 8001ebc:	4326      	orrs	r6, r4
 8001ebe:	d111      	bne.n	8001ee4 <__ledf2+0x70>
 8001ec0:	465b      	mov	r3, fp
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <__ledf2+0x84>
 8001ec8:	e010      	b.n	8001eec <__ledf2+0x78>
 8001eca:	003d      	movs	r5, r7
 8001ecc:	4325      	orrs	r5, r4
 8001ece:	d112      	bne.n	8001ef6 <__ledf2+0x82>
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d11c      	bne.n	8001f0e <__ledf2+0x9a>
 8001ed4:	464d      	mov	r5, r9
 8001ed6:	432e      	orrs	r6, r5
 8001ed8:	d10d      	bne.n	8001ef6 <__ledf2+0x82>
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d104      	bne.n	8001ee8 <__ledf2+0x74>
 8001ede:	433c      	orrs	r4, r7
 8001ee0:	4265      	negs	r5, r4
 8001ee2:	4165      	adcs	r5, r4
 8001ee4:	2d00      	cmp	r5, #0
 8001ee6:	d10d      	bne.n	8001f04 <__ledf2+0x90>
 8001ee8:	4281      	cmp	r1, r0
 8001eea:	d016      	beq.n	8001f1a <__ledf2+0xa6>
 8001eec:	2002      	movs	r0, #2
 8001eee:	3901      	subs	r1, #1
 8001ef0:	4008      	ands	r0, r1
 8001ef2:	3801      	subs	r0, #1
 8001ef4:	e000      	b.n	8001ef8 <__ledf2+0x84>
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	bcf0      	pop	{r4, r5, r6, r7}
 8001efa:	46bb      	mov	fp, r7
 8001efc:	46b2      	mov	sl, r6
 8001efe:	46a9      	mov	r9, r5
 8001f00:	46a0      	mov	r8, r4
 8001f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d1f7      	bne.n	8001ef8 <__ledf2+0x84>
 8001f08:	2001      	movs	r0, #1
 8001f0a:	4240      	negs	r0, r0
 8001f0c:	e7f4      	b.n	8001ef8 <__ledf2+0x84>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ea      	bne.n	8001ee8 <__ledf2+0x74>
 8001f12:	464c      	mov	r4, r9
 8001f14:	4326      	orrs	r6, r4
 8001f16:	d1e7      	bne.n	8001ee8 <__ledf2+0x74>
 8001f18:	e7e8      	b.n	8001eec <__ledf2+0x78>
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dd06      	ble.n	8001f2c <__ledf2+0xb8>
 8001f1e:	4243      	negs	r3, r0
 8001f20:	4158      	adcs	r0, r3
 8001f22:	2302      	movs	r3, #2
 8001f24:	4240      	negs	r0, r0
 8001f26:	4018      	ands	r0, r3
 8001f28:	3801      	subs	r0, #1
 8001f2a:	e7e5      	b.n	8001ef8 <__ledf2+0x84>
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbe9      	blt.n	8001f04 <__ledf2+0x90>
 8001f30:	454f      	cmp	r7, r9
 8001f32:	d8db      	bhi.n	8001eec <__ledf2+0x78>
 8001f34:	d006      	beq.n	8001f44 <__ledf2+0xd0>
 8001f36:	2000      	movs	r0, #0
 8001f38:	454f      	cmp	r7, r9
 8001f3a:	d2dd      	bcs.n	8001ef8 <__ledf2+0x84>
 8001f3c:	2900      	cmp	r1, #0
 8001f3e:	d0e3      	beq.n	8001f08 <__ledf2+0x94>
 8001f40:	0008      	movs	r0, r1
 8001f42:	e7d9      	b.n	8001ef8 <__ledf2+0x84>
 8001f44:	45c4      	cmp	ip, r8
 8001f46:	d8d1      	bhi.n	8001eec <__ledf2+0x78>
 8001f48:	2000      	movs	r0, #0
 8001f4a:	45c4      	cmp	ip, r8
 8001f4c:	d2d4      	bcs.n	8001ef8 <__ledf2+0x84>
 8001f4e:	e7f5      	b.n	8001f3c <__ledf2+0xc8>
 8001f50:	000007ff 	.word	0x000007ff

08001f54 <__aeabi_dmul>:
 8001f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f56:	4657      	mov	r7, sl
 8001f58:	464e      	mov	r6, r9
 8001f5a:	4645      	mov	r5, r8
 8001f5c:	46de      	mov	lr, fp
 8001f5e:	b5e0      	push	{r5, r6, r7, lr}
 8001f60:	4698      	mov	r8, r3
 8001f62:	030c      	lsls	r4, r1, #12
 8001f64:	004b      	lsls	r3, r1, #1
 8001f66:	0006      	movs	r6, r0
 8001f68:	4692      	mov	sl, r2
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	0b24      	lsrs	r4, r4, #12
 8001f6e:	0d5b      	lsrs	r3, r3, #21
 8001f70:	0fcf      	lsrs	r7, r1, #31
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d06c      	beq.n	8002050 <__aeabi_dmul+0xfc>
 8001f76:	4add      	ldr	r2, [pc, #884]	; (80022ec <__aeabi_dmul+0x398>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dmul+0x2a>
 8001f7c:	e086      	b.n	800208c <__aeabi_dmul+0x138>
 8001f7e:	0f42      	lsrs	r2, r0, #29
 8001f80:	00e4      	lsls	r4, r4, #3
 8001f82:	4314      	orrs	r4, r2
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	0412      	lsls	r2, r2, #16
 8001f88:	4314      	orrs	r4, r2
 8001f8a:	4ad9      	ldr	r2, [pc, #868]	; (80022f0 <__aeabi_dmul+0x39c>)
 8001f8c:	00c5      	lsls	r5, r0, #3
 8001f8e:	4694      	mov	ip, r2
 8001f90:	4463      	add	r3, ip
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2300      	movs	r3, #0
 8001f96:	4699      	mov	r9, r3
 8001f98:	469b      	mov	fp, r3
 8001f9a:	4643      	mov	r3, r8
 8001f9c:	4642      	mov	r2, r8
 8001f9e:	031e      	lsls	r6, r3, #12
 8001fa0:	0fd2      	lsrs	r2, r2, #31
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4650      	mov	r0, sl
 8001fa6:	4690      	mov	r8, r2
 8001fa8:	0b36      	lsrs	r6, r6, #12
 8001faa:	0d5b      	lsrs	r3, r3, #21
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dmul+0x5c>
 8001fae:	e078      	b.n	80020a2 <__aeabi_dmul+0x14e>
 8001fb0:	4ace      	ldr	r2, [pc, #824]	; (80022ec <__aeabi_dmul+0x398>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01d      	beq.n	8001ff2 <__aeabi_dmul+0x9e>
 8001fb6:	49ce      	ldr	r1, [pc, #824]	; (80022f0 <__aeabi_dmul+0x39c>)
 8001fb8:	0f42      	lsrs	r2, r0, #29
 8001fba:	468c      	mov	ip, r1
 8001fbc:	9900      	ldr	r1, [sp, #0]
 8001fbe:	4463      	add	r3, ip
 8001fc0:	00f6      	lsls	r6, r6, #3
 8001fc2:	468c      	mov	ip, r1
 8001fc4:	4316      	orrs	r6, r2
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	449c      	add	ip, r3
 8001fca:	0412      	lsls	r2, r2, #16
 8001fcc:	4663      	mov	r3, ip
 8001fce:	4316      	orrs	r6, r2
 8001fd0:	00c2      	lsls	r2, r0, #3
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	9900      	ldr	r1, [sp, #0]
 8001fd8:	4643      	mov	r3, r8
 8001fda:	3101      	adds	r1, #1
 8001fdc:	468c      	mov	ip, r1
 8001fde:	4649      	mov	r1, r9
 8001fe0:	407b      	eors	r3, r7
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	290f      	cmp	r1, #15
 8001fe6:	d900      	bls.n	8001fea <__aeabi_dmul+0x96>
 8001fe8:	e07e      	b.n	80020e8 <__aeabi_dmul+0x194>
 8001fea:	4bc2      	ldr	r3, [pc, #776]	; (80022f4 <__aeabi_dmul+0x3a0>)
 8001fec:	0089      	lsls	r1, r1, #2
 8001fee:	5859      	ldr	r1, [r3, r1]
 8001ff0:	468f      	mov	pc, r1
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	9b00      	ldr	r3, [sp, #0]
 8001ff6:	4332      	orrs	r2, r6
 8001ff8:	d000      	beq.n	8001ffc <__aeabi_dmul+0xa8>
 8001ffa:	e156      	b.n	80022aa <__aeabi_dmul+0x356>
 8001ffc:	49bb      	ldr	r1, [pc, #748]	; (80022ec <__aeabi_dmul+0x398>)
 8001ffe:	2600      	movs	r6, #0
 8002000:	468c      	mov	ip, r1
 8002002:	4463      	add	r3, ip
 8002004:	4649      	mov	r1, r9
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2302      	movs	r3, #2
 800200a:	4319      	orrs	r1, r3
 800200c:	4689      	mov	r9, r1
 800200e:	2002      	movs	r0, #2
 8002010:	e7e1      	b.n	8001fd6 <__aeabi_dmul+0x82>
 8002012:	4643      	mov	r3, r8
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	0034      	movs	r4, r6
 8002018:	0015      	movs	r5, r2
 800201a:	4683      	mov	fp, r0
 800201c:	465b      	mov	r3, fp
 800201e:	2b02      	cmp	r3, #2
 8002020:	d05e      	beq.n	80020e0 <__aeabi_dmul+0x18c>
 8002022:	2b03      	cmp	r3, #3
 8002024:	d100      	bne.n	8002028 <__aeabi_dmul+0xd4>
 8002026:	e1f3      	b.n	8002410 <__aeabi_dmul+0x4bc>
 8002028:	2b01      	cmp	r3, #1
 800202a:	d000      	beq.n	800202e <__aeabi_dmul+0xda>
 800202c:	e118      	b.n	8002260 <__aeabi_dmul+0x30c>
 800202e:	2200      	movs	r2, #0
 8002030:	2400      	movs	r4, #0
 8002032:	2500      	movs	r5, #0
 8002034:	9b01      	ldr	r3, [sp, #4]
 8002036:	0512      	lsls	r2, r2, #20
 8002038:	4322      	orrs	r2, r4
 800203a:	07db      	lsls	r3, r3, #31
 800203c:	431a      	orrs	r2, r3
 800203e:	0028      	movs	r0, r5
 8002040:	0011      	movs	r1, r2
 8002042:	b007      	add	sp, #28
 8002044:	bcf0      	pop	{r4, r5, r6, r7}
 8002046:	46bb      	mov	fp, r7
 8002048:	46b2      	mov	sl, r6
 800204a:	46a9      	mov	r9, r5
 800204c:	46a0      	mov	r8, r4
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002050:	0025      	movs	r5, r4
 8002052:	4305      	orrs	r5, r0
 8002054:	d100      	bne.n	8002058 <__aeabi_dmul+0x104>
 8002056:	e141      	b.n	80022dc <__aeabi_dmul+0x388>
 8002058:	2c00      	cmp	r4, #0
 800205a:	d100      	bne.n	800205e <__aeabi_dmul+0x10a>
 800205c:	e1ad      	b.n	80023ba <__aeabi_dmul+0x466>
 800205e:	0020      	movs	r0, r4
 8002060:	f000 fe4a 	bl	8002cf8 <__clzsi2>
 8002064:	0001      	movs	r1, r0
 8002066:	0002      	movs	r2, r0
 8002068:	390b      	subs	r1, #11
 800206a:	231d      	movs	r3, #29
 800206c:	0010      	movs	r0, r2
 800206e:	1a5b      	subs	r3, r3, r1
 8002070:	0031      	movs	r1, r6
 8002072:	0035      	movs	r5, r6
 8002074:	3808      	subs	r0, #8
 8002076:	4084      	lsls	r4, r0
 8002078:	40d9      	lsrs	r1, r3
 800207a:	4085      	lsls	r5, r0
 800207c:	430c      	orrs	r4, r1
 800207e:	489e      	ldr	r0, [pc, #632]	; (80022f8 <__aeabi_dmul+0x3a4>)
 8002080:	1a83      	subs	r3, r0, r2
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2300      	movs	r3, #0
 8002086:	4699      	mov	r9, r3
 8002088:	469b      	mov	fp, r3
 800208a:	e786      	b.n	8001f9a <__aeabi_dmul+0x46>
 800208c:	0005      	movs	r5, r0
 800208e:	4325      	orrs	r5, r4
 8002090:	d000      	beq.n	8002094 <__aeabi_dmul+0x140>
 8002092:	e11c      	b.n	80022ce <__aeabi_dmul+0x37a>
 8002094:	2208      	movs	r2, #8
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2302      	movs	r3, #2
 800209a:	2400      	movs	r4, #0
 800209c:	4691      	mov	r9, r2
 800209e:	469b      	mov	fp, r3
 80020a0:	e77b      	b.n	8001f9a <__aeabi_dmul+0x46>
 80020a2:	4652      	mov	r2, sl
 80020a4:	4332      	orrs	r2, r6
 80020a6:	d100      	bne.n	80020aa <__aeabi_dmul+0x156>
 80020a8:	e10a      	b.n	80022c0 <__aeabi_dmul+0x36c>
 80020aa:	2e00      	cmp	r6, #0
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dmul+0x15c>
 80020ae:	e176      	b.n	800239e <__aeabi_dmul+0x44a>
 80020b0:	0030      	movs	r0, r6
 80020b2:	f000 fe21 	bl	8002cf8 <__clzsi2>
 80020b6:	0002      	movs	r2, r0
 80020b8:	3a0b      	subs	r2, #11
 80020ba:	231d      	movs	r3, #29
 80020bc:	0001      	movs	r1, r0
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	4652      	mov	r2, sl
 80020c2:	3908      	subs	r1, #8
 80020c4:	40da      	lsrs	r2, r3
 80020c6:	408e      	lsls	r6, r1
 80020c8:	4316      	orrs	r6, r2
 80020ca:	4652      	mov	r2, sl
 80020cc:	408a      	lsls	r2, r1
 80020ce:	9b00      	ldr	r3, [sp, #0]
 80020d0:	4989      	ldr	r1, [pc, #548]	; (80022f8 <__aeabi_dmul+0x3a4>)
 80020d2:	1a18      	subs	r0, r3, r0
 80020d4:	0003      	movs	r3, r0
 80020d6:	468c      	mov	ip, r1
 80020d8:	4463      	add	r3, ip
 80020da:	2000      	movs	r0, #0
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	e77a      	b.n	8001fd6 <__aeabi_dmul+0x82>
 80020e0:	2400      	movs	r4, #0
 80020e2:	2500      	movs	r5, #0
 80020e4:	4a81      	ldr	r2, [pc, #516]	; (80022ec <__aeabi_dmul+0x398>)
 80020e6:	e7a5      	b.n	8002034 <__aeabi_dmul+0xe0>
 80020e8:	0c2f      	lsrs	r7, r5, #16
 80020ea:	042d      	lsls	r5, r5, #16
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	002b      	movs	r3, r5
 80020f0:	0c11      	lsrs	r1, r2, #16
 80020f2:	0412      	lsls	r2, r2, #16
 80020f4:	0c12      	lsrs	r2, r2, #16
 80020f6:	4353      	muls	r3, r2
 80020f8:	4698      	mov	r8, r3
 80020fa:	0013      	movs	r3, r2
 80020fc:	0028      	movs	r0, r5
 80020fe:	437b      	muls	r3, r7
 8002100:	4699      	mov	r9, r3
 8002102:	4348      	muls	r0, r1
 8002104:	4448      	add	r0, r9
 8002106:	4683      	mov	fp, r0
 8002108:	4640      	mov	r0, r8
 800210a:	000b      	movs	r3, r1
 800210c:	0c00      	lsrs	r0, r0, #16
 800210e:	4682      	mov	sl, r0
 8002110:	4658      	mov	r0, fp
 8002112:	437b      	muls	r3, r7
 8002114:	4450      	add	r0, sl
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	4581      	cmp	r9, r0
 800211a:	d906      	bls.n	800212a <__aeabi_dmul+0x1d6>
 800211c:	469a      	mov	sl, r3
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	025b      	lsls	r3, r3, #9
 8002122:	4699      	mov	r9, r3
 8002124:	44ca      	add	sl, r9
 8002126:	4653      	mov	r3, sl
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	0c03      	lsrs	r3, r0, #16
 800212c:	469b      	mov	fp, r3
 800212e:	4643      	mov	r3, r8
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	0c1b      	lsrs	r3, r3, #16
 8002136:	4698      	mov	r8, r3
 8002138:	0003      	movs	r3, r0
 800213a:	4443      	add	r3, r8
 800213c:	9304      	str	r3, [sp, #16]
 800213e:	0c33      	lsrs	r3, r6, #16
 8002140:	4699      	mov	r9, r3
 8002142:	002b      	movs	r3, r5
 8002144:	0436      	lsls	r6, r6, #16
 8002146:	0c36      	lsrs	r6, r6, #16
 8002148:	4373      	muls	r3, r6
 800214a:	4698      	mov	r8, r3
 800214c:	0033      	movs	r3, r6
 800214e:	437b      	muls	r3, r7
 8002150:	469a      	mov	sl, r3
 8002152:	464b      	mov	r3, r9
 8002154:	435d      	muls	r5, r3
 8002156:	435f      	muls	r7, r3
 8002158:	4643      	mov	r3, r8
 800215a:	4455      	add	r5, sl
 800215c:	0c18      	lsrs	r0, r3, #16
 800215e:	1940      	adds	r0, r0, r5
 8002160:	4582      	cmp	sl, r0
 8002162:	d903      	bls.n	800216c <__aeabi_dmul+0x218>
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	469a      	mov	sl, r3
 800216a:	4457      	add	r7, sl
 800216c:	0c05      	lsrs	r5, r0, #16
 800216e:	19eb      	adds	r3, r5, r7
 8002170:	9305      	str	r3, [sp, #20]
 8002172:	4643      	mov	r3, r8
 8002174:	041d      	lsls	r5, r3, #16
 8002176:	0c2d      	lsrs	r5, r5, #16
 8002178:	0400      	lsls	r0, r0, #16
 800217a:	1940      	adds	r0, r0, r5
 800217c:	0c25      	lsrs	r5, r4, #16
 800217e:	0424      	lsls	r4, r4, #16
 8002180:	0c24      	lsrs	r4, r4, #16
 8002182:	0027      	movs	r7, r4
 8002184:	4357      	muls	r7, r2
 8002186:	436a      	muls	r2, r5
 8002188:	4690      	mov	r8, r2
 800218a:	002a      	movs	r2, r5
 800218c:	0c3b      	lsrs	r3, r7, #16
 800218e:	469a      	mov	sl, r3
 8002190:	434a      	muls	r2, r1
 8002192:	4361      	muls	r1, r4
 8002194:	4441      	add	r1, r8
 8002196:	4451      	add	r1, sl
 8002198:	4483      	add	fp, r0
 800219a:	4588      	cmp	r8, r1
 800219c:	d903      	bls.n	80021a6 <__aeabi_dmul+0x252>
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	4698      	mov	r8, r3
 80021a4:	4442      	add	r2, r8
 80021a6:	043f      	lsls	r7, r7, #16
 80021a8:	0c0b      	lsrs	r3, r1, #16
 80021aa:	0c3f      	lsrs	r7, r7, #16
 80021ac:	0409      	lsls	r1, r1, #16
 80021ae:	19c9      	adds	r1, r1, r7
 80021b0:	0027      	movs	r7, r4
 80021b2:	4698      	mov	r8, r3
 80021b4:	464b      	mov	r3, r9
 80021b6:	4377      	muls	r7, r6
 80021b8:	435c      	muls	r4, r3
 80021ba:	436e      	muls	r6, r5
 80021bc:	435d      	muls	r5, r3
 80021be:	0c3b      	lsrs	r3, r7, #16
 80021c0:	4699      	mov	r9, r3
 80021c2:	19a4      	adds	r4, r4, r6
 80021c4:	444c      	add	r4, r9
 80021c6:	4442      	add	r2, r8
 80021c8:	9503      	str	r5, [sp, #12]
 80021ca:	42a6      	cmp	r6, r4
 80021cc:	d904      	bls.n	80021d8 <__aeabi_dmul+0x284>
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	4698      	mov	r8, r3
 80021d4:	4445      	add	r5, r8
 80021d6:	9503      	str	r5, [sp, #12]
 80021d8:	9b02      	ldr	r3, [sp, #8]
 80021da:	043f      	lsls	r7, r7, #16
 80021dc:	445b      	add	r3, fp
 80021de:	001e      	movs	r6, r3
 80021e0:	4283      	cmp	r3, r0
 80021e2:	4180      	sbcs	r0, r0
 80021e4:	0423      	lsls	r3, r4, #16
 80021e6:	4698      	mov	r8, r3
 80021e8:	9b05      	ldr	r3, [sp, #20]
 80021ea:	0c3f      	lsrs	r7, r7, #16
 80021ec:	4447      	add	r7, r8
 80021ee:	4698      	mov	r8, r3
 80021f0:	1876      	adds	r6, r6, r1
 80021f2:	428e      	cmp	r6, r1
 80021f4:	4189      	sbcs	r1, r1
 80021f6:	4447      	add	r7, r8
 80021f8:	4240      	negs	r0, r0
 80021fa:	183d      	adds	r5, r7, r0
 80021fc:	46a8      	mov	r8, r5
 80021fe:	4693      	mov	fp, r2
 8002200:	4249      	negs	r1, r1
 8002202:	468a      	mov	sl, r1
 8002204:	44c3      	add	fp, r8
 8002206:	429f      	cmp	r7, r3
 8002208:	41bf      	sbcs	r7, r7
 800220a:	4580      	cmp	r8, r0
 800220c:	4180      	sbcs	r0, r0
 800220e:	9b03      	ldr	r3, [sp, #12]
 8002210:	44da      	add	sl, fp
 8002212:	4698      	mov	r8, r3
 8002214:	4653      	mov	r3, sl
 8002216:	4240      	negs	r0, r0
 8002218:	427f      	negs	r7, r7
 800221a:	4307      	orrs	r7, r0
 800221c:	0c24      	lsrs	r4, r4, #16
 800221e:	4593      	cmp	fp, r2
 8002220:	4192      	sbcs	r2, r2
 8002222:	458a      	cmp	sl, r1
 8002224:	4189      	sbcs	r1, r1
 8002226:	193f      	adds	r7, r7, r4
 8002228:	0ddc      	lsrs	r4, r3, #23
 800222a:	9b04      	ldr	r3, [sp, #16]
 800222c:	0275      	lsls	r5, r6, #9
 800222e:	431d      	orrs	r5, r3
 8002230:	1e68      	subs	r0, r5, #1
 8002232:	4185      	sbcs	r5, r0
 8002234:	4653      	mov	r3, sl
 8002236:	4252      	negs	r2, r2
 8002238:	4249      	negs	r1, r1
 800223a:	430a      	orrs	r2, r1
 800223c:	18bf      	adds	r7, r7, r2
 800223e:	4447      	add	r7, r8
 8002240:	0df6      	lsrs	r6, r6, #23
 8002242:	027f      	lsls	r7, r7, #9
 8002244:	4335      	orrs	r5, r6
 8002246:	025a      	lsls	r2, r3, #9
 8002248:	433c      	orrs	r4, r7
 800224a:	4315      	orrs	r5, r2
 800224c:	01fb      	lsls	r3, r7, #7
 800224e:	d400      	bmi.n	8002252 <__aeabi_dmul+0x2fe>
 8002250:	e0c1      	b.n	80023d6 <__aeabi_dmul+0x482>
 8002252:	2101      	movs	r1, #1
 8002254:	086a      	lsrs	r2, r5, #1
 8002256:	400d      	ands	r5, r1
 8002258:	4315      	orrs	r5, r2
 800225a:	07e2      	lsls	r2, r4, #31
 800225c:	4315      	orrs	r5, r2
 800225e:	0864      	lsrs	r4, r4, #1
 8002260:	4926      	ldr	r1, [pc, #152]	; (80022fc <__aeabi_dmul+0x3a8>)
 8002262:	4461      	add	r1, ip
 8002264:	2900      	cmp	r1, #0
 8002266:	dd56      	ble.n	8002316 <__aeabi_dmul+0x3c2>
 8002268:	076b      	lsls	r3, r5, #29
 800226a:	d009      	beq.n	8002280 <__aeabi_dmul+0x32c>
 800226c:	220f      	movs	r2, #15
 800226e:	402a      	ands	r2, r5
 8002270:	2a04      	cmp	r2, #4
 8002272:	d005      	beq.n	8002280 <__aeabi_dmul+0x32c>
 8002274:	1d2a      	adds	r2, r5, #4
 8002276:	42aa      	cmp	r2, r5
 8002278:	41ad      	sbcs	r5, r5
 800227a:	426d      	negs	r5, r5
 800227c:	1964      	adds	r4, r4, r5
 800227e:	0015      	movs	r5, r2
 8002280:	01e3      	lsls	r3, r4, #7
 8002282:	d504      	bpl.n	800228e <__aeabi_dmul+0x33a>
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <__aeabi_dmul+0x3ac>)
 8002288:	00c9      	lsls	r1, r1, #3
 800228a:	4014      	ands	r4, r2
 800228c:	4461      	add	r1, ip
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <__aeabi_dmul+0x3b0>)
 8002290:	4291      	cmp	r1, r2
 8002292:	dd00      	ble.n	8002296 <__aeabi_dmul+0x342>
 8002294:	e724      	b.n	80020e0 <__aeabi_dmul+0x18c>
 8002296:	0762      	lsls	r2, r4, #29
 8002298:	08ed      	lsrs	r5, r5, #3
 800229a:	0264      	lsls	r4, r4, #9
 800229c:	0549      	lsls	r1, r1, #21
 800229e:	4315      	orrs	r5, r2
 80022a0:	0b24      	lsrs	r4, r4, #12
 80022a2:	0d4a      	lsrs	r2, r1, #21
 80022a4:	e6c6      	b.n	8002034 <__aeabi_dmul+0xe0>
 80022a6:	9701      	str	r7, [sp, #4]
 80022a8:	e6b8      	b.n	800201c <__aeabi_dmul+0xc8>
 80022aa:	4a10      	ldr	r2, [pc, #64]	; (80022ec <__aeabi_dmul+0x398>)
 80022ac:	2003      	movs	r0, #3
 80022ae:	4694      	mov	ip, r2
 80022b0:	4463      	add	r3, ip
 80022b2:	464a      	mov	r2, r9
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2303      	movs	r3, #3
 80022b8:	431a      	orrs	r2, r3
 80022ba:	4691      	mov	r9, r2
 80022bc:	4652      	mov	r2, sl
 80022be:	e68a      	b.n	8001fd6 <__aeabi_dmul+0x82>
 80022c0:	4649      	mov	r1, r9
 80022c2:	2301      	movs	r3, #1
 80022c4:	4319      	orrs	r1, r3
 80022c6:	4689      	mov	r9, r1
 80022c8:	2600      	movs	r6, #0
 80022ca:	2001      	movs	r0, #1
 80022cc:	e683      	b.n	8001fd6 <__aeabi_dmul+0x82>
 80022ce:	220c      	movs	r2, #12
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2303      	movs	r3, #3
 80022d4:	0005      	movs	r5, r0
 80022d6:	4691      	mov	r9, r2
 80022d8:	469b      	mov	fp, r3
 80022da:	e65e      	b.n	8001f9a <__aeabi_dmul+0x46>
 80022dc:	2304      	movs	r3, #4
 80022de:	4699      	mov	r9, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	2400      	movs	r4, #0
 80022e8:	469b      	mov	fp, r3
 80022ea:	e656      	b.n	8001f9a <__aeabi_dmul+0x46>
 80022ec:	000007ff 	.word	0x000007ff
 80022f0:	fffffc01 	.word	0xfffffc01
 80022f4:	0801f3d8 	.word	0x0801f3d8
 80022f8:	fffffc0d 	.word	0xfffffc0d
 80022fc:	000003ff 	.word	0x000003ff
 8002300:	feffffff 	.word	0xfeffffff
 8002304:	000007fe 	.word	0x000007fe
 8002308:	2300      	movs	r3, #0
 800230a:	2480      	movs	r4, #128	; 0x80
 800230c:	2500      	movs	r5, #0
 800230e:	4a44      	ldr	r2, [pc, #272]	; (8002420 <__aeabi_dmul+0x4cc>)
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	0324      	lsls	r4, r4, #12
 8002314:	e68e      	b.n	8002034 <__aeabi_dmul+0xe0>
 8002316:	2001      	movs	r0, #1
 8002318:	1a40      	subs	r0, r0, r1
 800231a:	2838      	cmp	r0, #56	; 0x38
 800231c:	dd00      	ble.n	8002320 <__aeabi_dmul+0x3cc>
 800231e:	e686      	b.n	800202e <__aeabi_dmul+0xda>
 8002320:	281f      	cmp	r0, #31
 8002322:	dd5b      	ble.n	80023dc <__aeabi_dmul+0x488>
 8002324:	221f      	movs	r2, #31
 8002326:	0023      	movs	r3, r4
 8002328:	4252      	negs	r2, r2
 800232a:	1a51      	subs	r1, r2, r1
 800232c:	40cb      	lsrs	r3, r1
 800232e:	0019      	movs	r1, r3
 8002330:	2820      	cmp	r0, #32
 8002332:	d003      	beq.n	800233c <__aeabi_dmul+0x3e8>
 8002334:	4a3b      	ldr	r2, [pc, #236]	; (8002424 <__aeabi_dmul+0x4d0>)
 8002336:	4462      	add	r2, ip
 8002338:	4094      	lsls	r4, r2
 800233a:	4325      	orrs	r5, r4
 800233c:	1e6a      	subs	r2, r5, #1
 800233e:	4195      	sbcs	r5, r2
 8002340:	002a      	movs	r2, r5
 8002342:	430a      	orrs	r2, r1
 8002344:	2107      	movs	r1, #7
 8002346:	000d      	movs	r5, r1
 8002348:	2400      	movs	r4, #0
 800234a:	4015      	ands	r5, r2
 800234c:	4211      	tst	r1, r2
 800234e:	d05b      	beq.n	8002408 <__aeabi_dmul+0x4b4>
 8002350:	210f      	movs	r1, #15
 8002352:	2400      	movs	r4, #0
 8002354:	4011      	ands	r1, r2
 8002356:	2904      	cmp	r1, #4
 8002358:	d053      	beq.n	8002402 <__aeabi_dmul+0x4ae>
 800235a:	1d11      	adds	r1, r2, #4
 800235c:	4291      	cmp	r1, r2
 800235e:	4192      	sbcs	r2, r2
 8002360:	4252      	negs	r2, r2
 8002362:	18a4      	adds	r4, r4, r2
 8002364:	000a      	movs	r2, r1
 8002366:	0223      	lsls	r3, r4, #8
 8002368:	d54b      	bpl.n	8002402 <__aeabi_dmul+0x4ae>
 800236a:	2201      	movs	r2, #1
 800236c:	2400      	movs	r4, #0
 800236e:	2500      	movs	r5, #0
 8002370:	e660      	b.n	8002034 <__aeabi_dmul+0xe0>
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	031b      	lsls	r3, r3, #12
 8002376:	421c      	tst	r4, r3
 8002378:	d009      	beq.n	800238e <__aeabi_dmul+0x43a>
 800237a:	421e      	tst	r6, r3
 800237c:	d107      	bne.n	800238e <__aeabi_dmul+0x43a>
 800237e:	4333      	orrs	r3, r6
 8002380:	031c      	lsls	r4, r3, #12
 8002382:	4643      	mov	r3, r8
 8002384:	0015      	movs	r5, r2
 8002386:	0b24      	lsrs	r4, r4, #12
 8002388:	4a25      	ldr	r2, [pc, #148]	; (8002420 <__aeabi_dmul+0x4cc>)
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	e652      	b.n	8002034 <__aeabi_dmul+0xe0>
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0312      	lsls	r2, r2, #12
 8002392:	4314      	orrs	r4, r2
 8002394:	0324      	lsls	r4, r4, #12
 8002396:	4a22      	ldr	r2, [pc, #136]	; (8002420 <__aeabi_dmul+0x4cc>)
 8002398:	0b24      	lsrs	r4, r4, #12
 800239a:	9701      	str	r7, [sp, #4]
 800239c:	e64a      	b.n	8002034 <__aeabi_dmul+0xe0>
 800239e:	f000 fcab 	bl	8002cf8 <__clzsi2>
 80023a2:	0003      	movs	r3, r0
 80023a4:	001a      	movs	r2, r3
 80023a6:	3215      	adds	r2, #21
 80023a8:	3020      	adds	r0, #32
 80023aa:	2a1c      	cmp	r2, #28
 80023ac:	dc00      	bgt.n	80023b0 <__aeabi_dmul+0x45c>
 80023ae:	e684      	b.n	80020ba <__aeabi_dmul+0x166>
 80023b0:	4656      	mov	r6, sl
 80023b2:	3b08      	subs	r3, #8
 80023b4:	2200      	movs	r2, #0
 80023b6:	409e      	lsls	r6, r3
 80023b8:	e689      	b.n	80020ce <__aeabi_dmul+0x17a>
 80023ba:	f000 fc9d 	bl	8002cf8 <__clzsi2>
 80023be:	0001      	movs	r1, r0
 80023c0:	0002      	movs	r2, r0
 80023c2:	3115      	adds	r1, #21
 80023c4:	3220      	adds	r2, #32
 80023c6:	291c      	cmp	r1, #28
 80023c8:	dc00      	bgt.n	80023cc <__aeabi_dmul+0x478>
 80023ca:	e64e      	b.n	800206a <__aeabi_dmul+0x116>
 80023cc:	0034      	movs	r4, r6
 80023ce:	3808      	subs	r0, #8
 80023d0:	2500      	movs	r5, #0
 80023d2:	4084      	lsls	r4, r0
 80023d4:	e653      	b.n	800207e <__aeabi_dmul+0x12a>
 80023d6:	9b00      	ldr	r3, [sp, #0]
 80023d8:	469c      	mov	ip, r3
 80023da:	e741      	b.n	8002260 <__aeabi_dmul+0x30c>
 80023dc:	4912      	ldr	r1, [pc, #72]	; (8002428 <__aeabi_dmul+0x4d4>)
 80023de:	0022      	movs	r2, r4
 80023e0:	4461      	add	r1, ip
 80023e2:	002e      	movs	r6, r5
 80023e4:	408d      	lsls	r5, r1
 80023e6:	408a      	lsls	r2, r1
 80023e8:	40c6      	lsrs	r6, r0
 80023ea:	1e69      	subs	r1, r5, #1
 80023ec:	418d      	sbcs	r5, r1
 80023ee:	4332      	orrs	r2, r6
 80023f0:	432a      	orrs	r2, r5
 80023f2:	40c4      	lsrs	r4, r0
 80023f4:	0753      	lsls	r3, r2, #29
 80023f6:	d0b6      	beq.n	8002366 <__aeabi_dmul+0x412>
 80023f8:	210f      	movs	r1, #15
 80023fa:	4011      	ands	r1, r2
 80023fc:	2904      	cmp	r1, #4
 80023fe:	d1ac      	bne.n	800235a <__aeabi_dmul+0x406>
 8002400:	e7b1      	b.n	8002366 <__aeabi_dmul+0x412>
 8002402:	0765      	lsls	r5, r4, #29
 8002404:	0264      	lsls	r4, r4, #9
 8002406:	0b24      	lsrs	r4, r4, #12
 8002408:	08d2      	lsrs	r2, r2, #3
 800240a:	4315      	orrs	r5, r2
 800240c:	2200      	movs	r2, #0
 800240e:	e611      	b.n	8002034 <__aeabi_dmul+0xe0>
 8002410:	2280      	movs	r2, #128	; 0x80
 8002412:	0312      	lsls	r2, r2, #12
 8002414:	4314      	orrs	r4, r2
 8002416:	0324      	lsls	r4, r4, #12
 8002418:	4a01      	ldr	r2, [pc, #4]	; (8002420 <__aeabi_dmul+0x4cc>)
 800241a:	0b24      	lsrs	r4, r4, #12
 800241c:	e60a      	b.n	8002034 <__aeabi_dmul+0xe0>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	000007ff 	.word	0x000007ff
 8002424:	0000043e 	.word	0x0000043e
 8002428:	0000041e 	.word	0x0000041e

0800242c <__aeabi_dsub>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	4657      	mov	r7, sl
 8002430:	464e      	mov	r6, r9
 8002432:	4645      	mov	r5, r8
 8002434:	46de      	mov	lr, fp
 8002436:	0004      	movs	r4, r0
 8002438:	b5e0      	push	{r5, r6, r7, lr}
 800243a:	001f      	movs	r7, r3
 800243c:	0010      	movs	r0, r2
 800243e:	030b      	lsls	r3, r1, #12
 8002440:	0f62      	lsrs	r2, r4, #29
 8002442:	004e      	lsls	r6, r1, #1
 8002444:	0fcd      	lsrs	r5, r1, #31
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	0339      	lsls	r1, r7, #12
 800244a:	4313      	orrs	r3, r2
 800244c:	0a49      	lsrs	r1, r1, #9
 800244e:	00e2      	lsls	r2, r4, #3
 8002450:	0f44      	lsrs	r4, r0, #29
 8002452:	4321      	orrs	r1, r4
 8002454:	4cc2      	ldr	r4, [pc, #776]	; (8002760 <__aeabi_dsub+0x334>)
 8002456:	4691      	mov	r9, r2
 8002458:	4692      	mov	sl, r2
 800245a:	00c0      	lsls	r0, r0, #3
 800245c:	007a      	lsls	r2, r7, #1
 800245e:	4680      	mov	r8, r0
 8002460:	0d76      	lsrs	r6, r6, #21
 8002462:	0d52      	lsrs	r2, r2, #21
 8002464:	0fff      	lsrs	r7, r7, #31
 8002466:	42a2      	cmp	r2, r4
 8002468:	d100      	bne.n	800246c <__aeabi_dsub+0x40>
 800246a:	e0b4      	b.n	80025d6 <__aeabi_dsub+0x1aa>
 800246c:	2401      	movs	r4, #1
 800246e:	4067      	eors	r7, r4
 8002470:	46bb      	mov	fp, r7
 8002472:	42bd      	cmp	r5, r7
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x4c>
 8002476:	e088      	b.n	800258a <__aeabi_dsub+0x15e>
 8002478:	1ab4      	subs	r4, r6, r2
 800247a:	46a4      	mov	ip, r4
 800247c:	2c00      	cmp	r4, #0
 800247e:	dc00      	bgt.n	8002482 <__aeabi_dsub+0x56>
 8002480:	e0b2      	b.n	80025e8 <__aeabi_dsub+0x1bc>
 8002482:	2a00      	cmp	r2, #0
 8002484:	d100      	bne.n	8002488 <__aeabi_dsub+0x5c>
 8002486:	e0c5      	b.n	8002614 <__aeabi_dsub+0x1e8>
 8002488:	4ab5      	ldr	r2, [pc, #724]	; (8002760 <__aeabi_dsub+0x334>)
 800248a:	4296      	cmp	r6, r2
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x64>
 800248e:	e28b      	b.n	80029a8 <__aeabi_dsub+0x57c>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	0412      	lsls	r2, r2, #16
 8002494:	4311      	orrs	r1, r2
 8002496:	4662      	mov	r2, ip
 8002498:	2a38      	cmp	r2, #56	; 0x38
 800249a:	dd00      	ble.n	800249e <__aeabi_dsub+0x72>
 800249c:	e1a1      	b.n	80027e2 <__aeabi_dsub+0x3b6>
 800249e:	2a1f      	cmp	r2, #31
 80024a0:	dd00      	ble.n	80024a4 <__aeabi_dsub+0x78>
 80024a2:	e216      	b.n	80028d2 <__aeabi_dsub+0x4a6>
 80024a4:	2720      	movs	r7, #32
 80024a6:	000c      	movs	r4, r1
 80024a8:	1abf      	subs	r7, r7, r2
 80024aa:	40bc      	lsls	r4, r7
 80024ac:	0002      	movs	r2, r0
 80024ae:	46a0      	mov	r8, r4
 80024b0:	4664      	mov	r4, ip
 80024b2:	40b8      	lsls	r0, r7
 80024b4:	40e2      	lsrs	r2, r4
 80024b6:	4644      	mov	r4, r8
 80024b8:	4314      	orrs	r4, r2
 80024ba:	0002      	movs	r2, r0
 80024bc:	1e50      	subs	r0, r2, #1
 80024be:	4182      	sbcs	r2, r0
 80024c0:	4660      	mov	r0, ip
 80024c2:	40c1      	lsrs	r1, r0
 80024c4:	4322      	orrs	r2, r4
 80024c6:	1a5b      	subs	r3, r3, r1
 80024c8:	4649      	mov	r1, r9
 80024ca:	1a8c      	subs	r4, r1, r2
 80024cc:	45a1      	cmp	r9, r4
 80024ce:	4192      	sbcs	r2, r2
 80024d0:	4252      	negs	r2, r2
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	4698      	mov	r8, r3
 80024d6:	4643      	mov	r3, r8
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	d400      	bmi.n	80024de <__aeabi_dsub+0xb2>
 80024dc:	e117      	b.n	800270e <__aeabi_dsub+0x2e2>
 80024de:	4643      	mov	r3, r8
 80024e0:	025b      	lsls	r3, r3, #9
 80024e2:	0a5b      	lsrs	r3, r3, #9
 80024e4:	4698      	mov	r8, r3
 80024e6:	4643      	mov	r3, r8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d100      	bne.n	80024ee <__aeabi_dsub+0xc2>
 80024ec:	e16c      	b.n	80027c8 <__aeabi_dsub+0x39c>
 80024ee:	4640      	mov	r0, r8
 80024f0:	f000 fc02 	bl	8002cf8 <__clzsi2>
 80024f4:	0002      	movs	r2, r0
 80024f6:	3a08      	subs	r2, #8
 80024f8:	2120      	movs	r1, #32
 80024fa:	0020      	movs	r0, r4
 80024fc:	4643      	mov	r3, r8
 80024fe:	1a89      	subs	r1, r1, r2
 8002500:	4093      	lsls	r3, r2
 8002502:	40c8      	lsrs	r0, r1
 8002504:	4094      	lsls	r4, r2
 8002506:	4303      	orrs	r3, r0
 8002508:	4296      	cmp	r6, r2
 800250a:	dd00      	ble.n	800250e <__aeabi_dsub+0xe2>
 800250c:	e157      	b.n	80027be <__aeabi_dsub+0x392>
 800250e:	1b96      	subs	r6, r2, r6
 8002510:	1c71      	adds	r1, r6, #1
 8002512:	291f      	cmp	r1, #31
 8002514:	dd00      	ble.n	8002518 <__aeabi_dsub+0xec>
 8002516:	e1cb      	b.n	80028b0 <__aeabi_dsub+0x484>
 8002518:	2220      	movs	r2, #32
 800251a:	0018      	movs	r0, r3
 800251c:	0026      	movs	r6, r4
 800251e:	1a52      	subs	r2, r2, r1
 8002520:	4094      	lsls	r4, r2
 8002522:	4090      	lsls	r0, r2
 8002524:	40ce      	lsrs	r6, r1
 8002526:	40cb      	lsrs	r3, r1
 8002528:	1e62      	subs	r2, r4, #1
 800252a:	4194      	sbcs	r4, r2
 800252c:	4330      	orrs	r0, r6
 800252e:	4698      	mov	r8, r3
 8002530:	2600      	movs	r6, #0
 8002532:	4304      	orrs	r4, r0
 8002534:	0763      	lsls	r3, r4, #29
 8002536:	d009      	beq.n	800254c <__aeabi_dsub+0x120>
 8002538:	230f      	movs	r3, #15
 800253a:	4023      	ands	r3, r4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d005      	beq.n	800254c <__aeabi_dsub+0x120>
 8002540:	1d23      	adds	r3, r4, #4
 8002542:	42a3      	cmp	r3, r4
 8002544:	41a4      	sbcs	r4, r4
 8002546:	4264      	negs	r4, r4
 8002548:	44a0      	add	r8, r4
 800254a:	001c      	movs	r4, r3
 800254c:	4643      	mov	r3, r8
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	d400      	bmi.n	8002554 <__aeabi_dsub+0x128>
 8002552:	e0df      	b.n	8002714 <__aeabi_dsub+0x2e8>
 8002554:	4b82      	ldr	r3, [pc, #520]	; (8002760 <__aeabi_dsub+0x334>)
 8002556:	3601      	adds	r6, #1
 8002558:	429e      	cmp	r6, r3
 800255a:	d100      	bne.n	800255e <__aeabi_dsub+0x132>
 800255c:	e0fb      	b.n	8002756 <__aeabi_dsub+0x32a>
 800255e:	4642      	mov	r2, r8
 8002560:	4b80      	ldr	r3, [pc, #512]	; (8002764 <__aeabi_dsub+0x338>)
 8002562:	08e4      	lsrs	r4, r4, #3
 8002564:	401a      	ands	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	0571      	lsls	r1, r6, #21
 800256a:	0752      	lsls	r2, r2, #29
 800256c:	025b      	lsls	r3, r3, #9
 800256e:	4322      	orrs	r2, r4
 8002570:	0b1b      	lsrs	r3, r3, #12
 8002572:	0d49      	lsrs	r1, r1, #21
 8002574:	0509      	lsls	r1, r1, #20
 8002576:	07ed      	lsls	r5, r5, #31
 8002578:	4319      	orrs	r1, r3
 800257a:	4329      	orrs	r1, r5
 800257c:	0010      	movs	r0, r2
 800257e:	bcf0      	pop	{r4, r5, r6, r7}
 8002580:	46bb      	mov	fp, r7
 8002582:	46b2      	mov	sl, r6
 8002584:	46a9      	mov	r9, r5
 8002586:	46a0      	mov	r8, r4
 8002588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800258a:	1ab4      	subs	r4, r6, r2
 800258c:	46a4      	mov	ip, r4
 800258e:	2c00      	cmp	r4, #0
 8002590:	dd58      	ble.n	8002644 <__aeabi_dsub+0x218>
 8002592:	2a00      	cmp	r2, #0
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x16c>
 8002596:	e09e      	b.n	80026d6 <__aeabi_dsub+0x2aa>
 8002598:	4a71      	ldr	r2, [pc, #452]	; (8002760 <__aeabi_dsub+0x334>)
 800259a:	4296      	cmp	r6, r2
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x174>
 800259e:	e13b      	b.n	8002818 <__aeabi_dsub+0x3ec>
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	0412      	lsls	r2, r2, #16
 80025a4:	4311      	orrs	r1, r2
 80025a6:	4662      	mov	r2, ip
 80025a8:	2a38      	cmp	r2, #56	; 0x38
 80025aa:	dd00      	ble.n	80025ae <__aeabi_dsub+0x182>
 80025ac:	e0c1      	b.n	8002732 <__aeabi_dsub+0x306>
 80025ae:	2a1f      	cmp	r2, #31
 80025b0:	dc00      	bgt.n	80025b4 <__aeabi_dsub+0x188>
 80025b2:	e1bb      	b.n	800292c <__aeabi_dsub+0x500>
 80025b4:	000c      	movs	r4, r1
 80025b6:	3a20      	subs	r2, #32
 80025b8:	40d4      	lsrs	r4, r2
 80025ba:	0022      	movs	r2, r4
 80025bc:	4664      	mov	r4, ip
 80025be:	2c20      	cmp	r4, #32
 80025c0:	d004      	beq.n	80025cc <__aeabi_dsub+0x1a0>
 80025c2:	2740      	movs	r7, #64	; 0x40
 80025c4:	1b3f      	subs	r7, r7, r4
 80025c6:	40b9      	lsls	r1, r7
 80025c8:	4308      	orrs	r0, r1
 80025ca:	4680      	mov	r8, r0
 80025cc:	4644      	mov	r4, r8
 80025ce:	1e61      	subs	r1, r4, #1
 80025d0:	418c      	sbcs	r4, r1
 80025d2:	4314      	orrs	r4, r2
 80025d4:	e0b1      	b.n	800273a <__aeabi_dsub+0x30e>
 80025d6:	000c      	movs	r4, r1
 80025d8:	4304      	orrs	r4, r0
 80025da:	d02a      	beq.n	8002632 <__aeabi_dsub+0x206>
 80025dc:	46bb      	mov	fp, r7
 80025de:	42bd      	cmp	r5, r7
 80025e0:	d02d      	beq.n	800263e <__aeabi_dsub+0x212>
 80025e2:	4c61      	ldr	r4, [pc, #388]	; (8002768 <__aeabi_dsub+0x33c>)
 80025e4:	46a4      	mov	ip, r4
 80025e6:	44b4      	add	ip, r6
 80025e8:	4664      	mov	r4, ip
 80025ea:	2c00      	cmp	r4, #0
 80025ec:	d05c      	beq.n	80026a8 <__aeabi_dsub+0x27c>
 80025ee:	1b94      	subs	r4, r2, r6
 80025f0:	46a4      	mov	ip, r4
 80025f2:	2e00      	cmp	r6, #0
 80025f4:	d000      	beq.n	80025f8 <__aeabi_dsub+0x1cc>
 80025f6:	e115      	b.n	8002824 <__aeabi_dsub+0x3f8>
 80025f8:	464d      	mov	r5, r9
 80025fa:	431d      	orrs	r5, r3
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x1d4>
 80025fe:	e1c3      	b.n	8002988 <__aeabi_dsub+0x55c>
 8002600:	1e65      	subs	r5, r4, #1
 8002602:	2c01      	cmp	r4, #1
 8002604:	d100      	bne.n	8002608 <__aeabi_dsub+0x1dc>
 8002606:	e20c      	b.n	8002a22 <__aeabi_dsub+0x5f6>
 8002608:	4e55      	ldr	r6, [pc, #340]	; (8002760 <__aeabi_dsub+0x334>)
 800260a:	42b4      	cmp	r4, r6
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x1e4>
 800260e:	e1f8      	b.n	8002a02 <__aeabi_dsub+0x5d6>
 8002610:	46ac      	mov	ip, r5
 8002612:	e10e      	b.n	8002832 <__aeabi_dsub+0x406>
 8002614:	000a      	movs	r2, r1
 8002616:	4302      	orrs	r2, r0
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x1f0>
 800261a:	e136      	b.n	800288a <__aeabi_dsub+0x45e>
 800261c:	0022      	movs	r2, r4
 800261e:	3a01      	subs	r2, #1
 8002620:	2c01      	cmp	r4, #1
 8002622:	d100      	bne.n	8002626 <__aeabi_dsub+0x1fa>
 8002624:	e1c6      	b.n	80029b4 <__aeabi_dsub+0x588>
 8002626:	4c4e      	ldr	r4, [pc, #312]	; (8002760 <__aeabi_dsub+0x334>)
 8002628:	45a4      	cmp	ip, r4
 800262a:	d100      	bne.n	800262e <__aeabi_dsub+0x202>
 800262c:	e0f4      	b.n	8002818 <__aeabi_dsub+0x3ec>
 800262e:	4694      	mov	ip, r2
 8002630:	e731      	b.n	8002496 <__aeabi_dsub+0x6a>
 8002632:	2401      	movs	r4, #1
 8002634:	4067      	eors	r7, r4
 8002636:	46bb      	mov	fp, r7
 8002638:	42bd      	cmp	r5, r7
 800263a:	d000      	beq.n	800263e <__aeabi_dsub+0x212>
 800263c:	e71c      	b.n	8002478 <__aeabi_dsub+0x4c>
 800263e:	4c4a      	ldr	r4, [pc, #296]	; (8002768 <__aeabi_dsub+0x33c>)
 8002640:	46a4      	mov	ip, r4
 8002642:	44b4      	add	ip, r6
 8002644:	4664      	mov	r4, ip
 8002646:	2c00      	cmp	r4, #0
 8002648:	d100      	bne.n	800264c <__aeabi_dsub+0x220>
 800264a:	e0cf      	b.n	80027ec <__aeabi_dsub+0x3c0>
 800264c:	1b94      	subs	r4, r2, r6
 800264e:	46a4      	mov	ip, r4
 8002650:	2e00      	cmp	r6, #0
 8002652:	d100      	bne.n	8002656 <__aeabi_dsub+0x22a>
 8002654:	e15c      	b.n	8002910 <__aeabi_dsub+0x4e4>
 8002656:	4e42      	ldr	r6, [pc, #264]	; (8002760 <__aeabi_dsub+0x334>)
 8002658:	42b2      	cmp	r2, r6
 800265a:	d100      	bne.n	800265e <__aeabi_dsub+0x232>
 800265c:	e1ec      	b.n	8002a38 <__aeabi_dsub+0x60c>
 800265e:	2680      	movs	r6, #128	; 0x80
 8002660:	0436      	lsls	r6, r6, #16
 8002662:	4333      	orrs	r3, r6
 8002664:	4664      	mov	r4, ip
 8002666:	2c38      	cmp	r4, #56	; 0x38
 8002668:	dd00      	ble.n	800266c <__aeabi_dsub+0x240>
 800266a:	e1b3      	b.n	80029d4 <__aeabi_dsub+0x5a8>
 800266c:	2c1f      	cmp	r4, #31
 800266e:	dd00      	ble.n	8002672 <__aeabi_dsub+0x246>
 8002670:	e238      	b.n	8002ae4 <__aeabi_dsub+0x6b8>
 8002672:	2620      	movs	r6, #32
 8002674:	1b36      	subs	r6, r6, r4
 8002676:	001c      	movs	r4, r3
 8002678:	40b4      	lsls	r4, r6
 800267a:	464f      	mov	r7, r9
 800267c:	46a0      	mov	r8, r4
 800267e:	4664      	mov	r4, ip
 8002680:	40e7      	lsrs	r7, r4
 8002682:	4644      	mov	r4, r8
 8002684:	433c      	orrs	r4, r7
 8002686:	464f      	mov	r7, r9
 8002688:	40b7      	lsls	r7, r6
 800268a:	003e      	movs	r6, r7
 800268c:	1e77      	subs	r7, r6, #1
 800268e:	41be      	sbcs	r6, r7
 8002690:	4334      	orrs	r4, r6
 8002692:	4666      	mov	r6, ip
 8002694:	40f3      	lsrs	r3, r6
 8002696:	18c9      	adds	r1, r1, r3
 8002698:	1824      	adds	r4, r4, r0
 800269a:	4284      	cmp	r4, r0
 800269c:	419b      	sbcs	r3, r3
 800269e:	425b      	negs	r3, r3
 80026a0:	4698      	mov	r8, r3
 80026a2:	0016      	movs	r6, r2
 80026a4:	4488      	add	r8, r1
 80026a6:	e04e      	b.n	8002746 <__aeabi_dsub+0x31a>
 80026a8:	4a30      	ldr	r2, [pc, #192]	; (800276c <__aeabi_dsub+0x340>)
 80026aa:	1c74      	adds	r4, r6, #1
 80026ac:	4214      	tst	r4, r2
 80026ae:	d000      	beq.n	80026b2 <__aeabi_dsub+0x286>
 80026b0:	e0d6      	b.n	8002860 <__aeabi_dsub+0x434>
 80026b2:	464a      	mov	r2, r9
 80026b4:	431a      	orrs	r2, r3
 80026b6:	2e00      	cmp	r6, #0
 80026b8:	d000      	beq.n	80026bc <__aeabi_dsub+0x290>
 80026ba:	e15b      	b.n	8002974 <__aeabi_dsub+0x548>
 80026bc:	2a00      	cmp	r2, #0
 80026be:	d100      	bne.n	80026c2 <__aeabi_dsub+0x296>
 80026c0:	e1a5      	b.n	8002a0e <__aeabi_dsub+0x5e2>
 80026c2:	000a      	movs	r2, r1
 80026c4:	4302      	orrs	r2, r0
 80026c6:	d000      	beq.n	80026ca <__aeabi_dsub+0x29e>
 80026c8:	e1bb      	b.n	8002a42 <__aeabi_dsub+0x616>
 80026ca:	464a      	mov	r2, r9
 80026cc:	0759      	lsls	r1, r3, #29
 80026ce:	08d2      	lsrs	r2, r2, #3
 80026d0:	430a      	orrs	r2, r1
 80026d2:	08db      	lsrs	r3, r3, #3
 80026d4:	e027      	b.n	8002726 <__aeabi_dsub+0x2fa>
 80026d6:	000a      	movs	r2, r1
 80026d8:	4302      	orrs	r2, r0
 80026da:	d100      	bne.n	80026de <__aeabi_dsub+0x2b2>
 80026dc:	e174      	b.n	80029c8 <__aeabi_dsub+0x59c>
 80026de:	0022      	movs	r2, r4
 80026e0:	3a01      	subs	r2, #1
 80026e2:	2c01      	cmp	r4, #1
 80026e4:	d005      	beq.n	80026f2 <__aeabi_dsub+0x2c6>
 80026e6:	4c1e      	ldr	r4, [pc, #120]	; (8002760 <__aeabi_dsub+0x334>)
 80026e8:	45a4      	cmp	ip, r4
 80026ea:	d100      	bne.n	80026ee <__aeabi_dsub+0x2c2>
 80026ec:	e094      	b.n	8002818 <__aeabi_dsub+0x3ec>
 80026ee:	4694      	mov	ip, r2
 80026f0:	e759      	b.n	80025a6 <__aeabi_dsub+0x17a>
 80026f2:	4448      	add	r0, r9
 80026f4:	4548      	cmp	r0, r9
 80026f6:	4192      	sbcs	r2, r2
 80026f8:	185b      	adds	r3, r3, r1
 80026fa:	4698      	mov	r8, r3
 80026fc:	0004      	movs	r4, r0
 80026fe:	4252      	negs	r2, r2
 8002700:	4490      	add	r8, r2
 8002702:	4643      	mov	r3, r8
 8002704:	2602      	movs	r6, #2
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	d500      	bpl.n	800270c <__aeabi_dsub+0x2e0>
 800270a:	e0c4      	b.n	8002896 <__aeabi_dsub+0x46a>
 800270c:	3e01      	subs	r6, #1
 800270e:	0763      	lsls	r3, r4, #29
 8002710:	d000      	beq.n	8002714 <__aeabi_dsub+0x2e8>
 8002712:	e711      	b.n	8002538 <__aeabi_dsub+0x10c>
 8002714:	4643      	mov	r3, r8
 8002716:	46b4      	mov	ip, r6
 8002718:	0759      	lsls	r1, r3, #29
 800271a:	08e2      	lsrs	r2, r4, #3
 800271c:	430a      	orrs	r2, r1
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	490f      	ldr	r1, [pc, #60]	; (8002760 <__aeabi_dsub+0x334>)
 8002722:	458c      	cmp	ip, r1
 8002724:	d040      	beq.n	80027a8 <__aeabi_dsub+0x37c>
 8002726:	4661      	mov	r1, ip
 8002728:	031b      	lsls	r3, r3, #12
 800272a:	0549      	lsls	r1, r1, #21
 800272c:	0b1b      	lsrs	r3, r3, #12
 800272e:	0d49      	lsrs	r1, r1, #21
 8002730:	e720      	b.n	8002574 <__aeabi_dsub+0x148>
 8002732:	4301      	orrs	r1, r0
 8002734:	000c      	movs	r4, r1
 8002736:	1e61      	subs	r1, r4, #1
 8002738:	418c      	sbcs	r4, r1
 800273a:	444c      	add	r4, r9
 800273c:	454c      	cmp	r4, r9
 800273e:	4192      	sbcs	r2, r2
 8002740:	4252      	negs	r2, r2
 8002742:	4690      	mov	r8, r2
 8002744:	4498      	add	r8, r3
 8002746:	4643      	mov	r3, r8
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	d5e0      	bpl.n	800270e <__aeabi_dsub+0x2e2>
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__aeabi_dsub+0x334>)
 800274e:	3601      	adds	r6, #1
 8002750:	429e      	cmp	r6, r3
 8002752:	d000      	beq.n	8002756 <__aeabi_dsub+0x32a>
 8002754:	e09f      	b.n	8002896 <__aeabi_dsub+0x46a>
 8002756:	0031      	movs	r1, r6
 8002758:	2300      	movs	r3, #0
 800275a:	2200      	movs	r2, #0
 800275c:	e70a      	b.n	8002574 <__aeabi_dsub+0x148>
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	000007ff 	.word	0x000007ff
 8002764:	ff7fffff 	.word	0xff7fffff
 8002768:	fffff801 	.word	0xfffff801
 800276c:	000007fe 	.word	0x000007fe
 8002770:	2a00      	cmp	r2, #0
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x34a>
 8002774:	e160      	b.n	8002a38 <__aeabi_dsub+0x60c>
 8002776:	000a      	movs	r2, r1
 8002778:	4302      	orrs	r2, r0
 800277a:	d04d      	beq.n	8002818 <__aeabi_dsub+0x3ec>
 800277c:	464a      	mov	r2, r9
 800277e:	075c      	lsls	r4, r3, #29
 8002780:	08d2      	lsrs	r2, r2, #3
 8002782:	4322      	orrs	r2, r4
 8002784:	2480      	movs	r4, #128	; 0x80
 8002786:	08db      	lsrs	r3, r3, #3
 8002788:	0324      	lsls	r4, r4, #12
 800278a:	4223      	tst	r3, r4
 800278c:	d007      	beq.n	800279e <__aeabi_dsub+0x372>
 800278e:	08ce      	lsrs	r6, r1, #3
 8002790:	4226      	tst	r6, r4
 8002792:	d104      	bne.n	800279e <__aeabi_dsub+0x372>
 8002794:	465d      	mov	r5, fp
 8002796:	0033      	movs	r3, r6
 8002798:	08c2      	lsrs	r2, r0, #3
 800279a:	0749      	lsls	r1, r1, #29
 800279c:	430a      	orrs	r2, r1
 800279e:	0f51      	lsrs	r1, r2, #29
 80027a0:	00d2      	lsls	r2, r2, #3
 80027a2:	08d2      	lsrs	r2, r2, #3
 80027a4:	0749      	lsls	r1, r1, #29
 80027a6:	430a      	orrs	r2, r1
 80027a8:	0011      	movs	r1, r2
 80027aa:	4319      	orrs	r1, r3
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x384>
 80027ae:	e1c8      	b.n	8002b42 <__aeabi_dsub+0x716>
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0309      	lsls	r1, r1, #12
 80027b4:	430b      	orrs	r3, r1
 80027b6:	031b      	lsls	r3, r3, #12
 80027b8:	49d5      	ldr	r1, [pc, #852]	; (8002b10 <__aeabi_dsub+0x6e4>)
 80027ba:	0b1b      	lsrs	r3, r3, #12
 80027bc:	e6da      	b.n	8002574 <__aeabi_dsub+0x148>
 80027be:	49d5      	ldr	r1, [pc, #852]	; (8002b14 <__aeabi_dsub+0x6e8>)
 80027c0:	1ab6      	subs	r6, r6, r2
 80027c2:	400b      	ands	r3, r1
 80027c4:	4698      	mov	r8, r3
 80027c6:	e6b5      	b.n	8002534 <__aeabi_dsub+0x108>
 80027c8:	0020      	movs	r0, r4
 80027ca:	f000 fa95 	bl	8002cf8 <__clzsi2>
 80027ce:	0002      	movs	r2, r0
 80027d0:	3218      	adds	r2, #24
 80027d2:	2a1f      	cmp	r2, #31
 80027d4:	dc00      	bgt.n	80027d8 <__aeabi_dsub+0x3ac>
 80027d6:	e68f      	b.n	80024f8 <__aeabi_dsub+0xcc>
 80027d8:	0023      	movs	r3, r4
 80027da:	3808      	subs	r0, #8
 80027dc:	4083      	lsls	r3, r0
 80027de:	2400      	movs	r4, #0
 80027e0:	e692      	b.n	8002508 <__aeabi_dsub+0xdc>
 80027e2:	4308      	orrs	r0, r1
 80027e4:	0002      	movs	r2, r0
 80027e6:	1e50      	subs	r0, r2, #1
 80027e8:	4182      	sbcs	r2, r0
 80027ea:	e66d      	b.n	80024c8 <__aeabi_dsub+0x9c>
 80027ec:	4cca      	ldr	r4, [pc, #808]	; (8002b18 <__aeabi_dsub+0x6ec>)
 80027ee:	1c72      	adds	r2, r6, #1
 80027f0:	4222      	tst	r2, r4
 80027f2:	d000      	beq.n	80027f6 <__aeabi_dsub+0x3ca>
 80027f4:	e0ad      	b.n	8002952 <__aeabi_dsub+0x526>
 80027f6:	464a      	mov	r2, r9
 80027f8:	431a      	orrs	r2, r3
 80027fa:	2e00      	cmp	r6, #0
 80027fc:	d1b8      	bne.n	8002770 <__aeabi_dsub+0x344>
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x3d8>
 8002802:	e158      	b.n	8002ab6 <__aeabi_dsub+0x68a>
 8002804:	000a      	movs	r2, r1
 8002806:	4302      	orrs	r2, r0
 8002808:	d000      	beq.n	800280c <__aeabi_dsub+0x3e0>
 800280a:	e159      	b.n	8002ac0 <__aeabi_dsub+0x694>
 800280c:	464a      	mov	r2, r9
 800280e:	0759      	lsls	r1, r3, #29
 8002810:	08d2      	lsrs	r2, r2, #3
 8002812:	430a      	orrs	r2, r1
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	e786      	b.n	8002726 <__aeabi_dsub+0x2fa>
 8002818:	464a      	mov	r2, r9
 800281a:	0759      	lsls	r1, r3, #29
 800281c:	08d2      	lsrs	r2, r2, #3
 800281e:	430a      	orrs	r2, r1
 8002820:	08db      	lsrs	r3, r3, #3
 8002822:	e7c1      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002824:	4dba      	ldr	r5, [pc, #744]	; (8002b10 <__aeabi_dsub+0x6e4>)
 8002826:	42aa      	cmp	r2, r5
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x400>
 800282a:	e11e      	b.n	8002a6a <__aeabi_dsub+0x63e>
 800282c:	2580      	movs	r5, #128	; 0x80
 800282e:	042d      	lsls	r5, r5, #16
 8002830:	432b      	orrs	r3, r5
 8002832:	4664      	mov	r4, ip
 8002834:	2c38      	cmp	r4, #56	; 0x38
 8002836:	dc5d      	bgt.n	80028f4 <__aeabi_dsub+0x4c8>
 8002838:	2c1f      	cmp	r4, #31
 800283a:	dd00      	ble.n	800283e <__aeabi_dsub+0x412>
 800283c:	e0d0      	b.n	80029e0 <__aeabi_dsub+0x5b4>
 800283e:	2520      	movs	r5, #32
 8002840:	4667      	mov	r7, ip
 8002842:	1b2d      	subs	r5, r5, r4
 8002844:	464e      	mov	r6, r9
 8002846:	001c      	movs	r4, r3
 8002848:	40fe      	lsrs	r6, r7
 800284a:	40ac      	lsls	r4, r5
 800284c:	4334      	orrs	r4, r6
 800284e:	464e      	mov	r6, r9
 8002850:	40ae      	lsls	r6, r5
 8002852:	0035      	movs	r5, r6
 8002854:	40fb      	lsrs	r3, r7
 8002856:	1e6e      	subs	r6, r5, #1
 8002858:	41b5      	sbcs	r5, r6
 800285a:	1ac9      	subs	r1, r1, r3
 800285c:	432c      	orrs	r4, r5
 800285e:	e04e      	b.n	80028fe <__aeabi_dsub+0x4d2>
 8002860:	464a      	mov	r2, r9
 8002862:	1a14      	subs	r4, r2, r0
 8002864:	45a1      	cmp	r9, r4
 8002866:	4192      	sbcs	r2, r2
 8002868:	4252      	negs	r2, r2
 800286a:	4690      	mov	r8, r2
 800286c:	1a5f      	subs	r7, r3, r1
 800286e:	003a      	movs	r2, r7
 8002870:	4647      	mov	r7, r8
 8002872:	1bd2      	subs	r2, r2, r7
 8002874:	4690      	mov	r8, r2
 8002876:	0212      	lsls	r2, r2, #8
 8002878:	d500      	bpl.n	800287c <__aeabi_dsub+0x450>
 800287a:	e08b      	b.n	8002994 <__aeabi_dsub+0x568>
 800287c:	4642      	mov	r2, r8
 800287e:	4322      	orrs	r2, r4
 8002880:	d000      	beq.n	8002884 <__aeabi_dsub+0x458>
 8002882:	e630      	b.n	80024e6 <__aeabi_dsub+0xba>
 8002884:	2300      	movs	r3, #0
 8002886:	2500      	movs	r5, #0
 8002888:	e74d      	b.n	8002726 <__aeabi_dsub+0x2fa>
 800288a:	464a      	mov	r2, r9
 800288c:	0759      	lsls	r1, r3, #29
 800288e:	08d2      	lsrs	r2, r2, #3
 8002890:	430a      	orrs	r2, r1
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	e744      	b.n	8002720 <__aeabi_dsub+0x2f4>
 8002896:	4642      	mov	r2, r8
 8002898:	4b9e      	ldr	r3, [pc, #632]	; (8002b14 <__aeabi_dsub+0x6e8>)
 800289a:	0861      	lsrs	r1, r4, #1
 800289c:	401a      	ands	r2, r3
 800289e:	0013      	movs	r3, r2
 80028a0:	2201      	movs	r2, #1
 80028a2:	4014      	ands	r4, r2
 80028a4:	430c      	orrs	r4, r1
 80028a6:	07da      	lsls	r2, r3, #31
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	4698      	mov	r8, r3
 80028ac:	4314      	orrs	r4, r2
 80028ae:	e641      	b.n	8002534 <__aeabi_dsub+0x108>
 80028b0:	001a      	movs	r2, r3
 80028b2:	3e1f      	subs	r6, #31
 80028b4:	40f2      	lsrs	r2, r6
 80028b6:	0016      	movs	r6, r2
 80028b8:	2920      	cmp	r1, #32
 80028ba:	d003      	beq.n	80028c4 <__aeabi_dsub+0x498>
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	1a51      	subs	r1, r2, r1
 80028c0:	408b      	lsls	r3, r1
 80028c2:	431c      	orrs	r4, r3
 80028c4:	1e62      	subs	r2, r4, #1
 80028c6:	4194      	sbcs	r4, r2
 80028c8:	2300      	movs	r3, #0
 80028ca:	4334      	orrs	r4, r6
 80028cc:	4698      	mov	r8, r3
 80028ce:	2600      	movs	r6, #0
 80028d0:	e71d      	b.n	800270e <__aeabi_dsub+0x2e2>
 80028d2:	000c      	movs	r4, r1
 80028d4:	3a20      	subs	r2, #32
 80028d6:	40d4      	lsrs	r4, r2
 80028d8:	0022      	movs	r2, r4
 80028da:	4664      	mov	r4, ip
 80028dc:	2c20      	cmp	r4, #32
 80028de:	d004      	beq.n	80028ea <__aeabi_dsub+0x4be>
 80028e0:	2740      	movs	r7, #64	; 0x40
 80028e2:	1b3f      	subs	r7, r7, r4
 80028e4:	40b9      	lsls	r1, r7
 80028e6:	4308      	orrs	r0, r1
 80028e8:	4680      	mov	r8, r0
 80028ea:	4644      	mov	r4, r8
 80028ec:	1e61      	subs	r1, r4, #1
 80028ee:	418c      	sbcs	r4, r1
 80028f0:	4322      	orrs	r2, r4
 80028f2:	e5e9      	b.n	80024c8 <__aeabi_dsub+0x9c>
 80028f4:	464c      	mov	r4, r9
 80028f6:	4323      	orrs	r3, r4
 80028f8:	001c      	movs	r4, r3
 80028fa:	1e63      	subs	r3, r4, #1
 80028fc:	419c      	sbcs	r4, r3
 80028fe:	1b04      	subs	r4, r0, r4
 8002900:	42a0      	cmp	r0, r4
 8002902:	419b      	sbcs	r3, r3
 8002904:	425b      	negs	r3, r3
 8002906:	1acb      	subs	r3, r1, r3
 8002908:	4698      	mov	r8, r3
 800290a:	465d      	mov	r5, fp
 800290c:	0016      	movs	r6, r2
 800290e:	e5e2      	b.n	80024d6 <__aeabi_dsub+0xaa>
 8002910:	464e      	mov	r6, r9
 8002912:	431e      	orrs	r6, r3
 8002914:	d100      	bne.n	8002918 <__aeabi_dsub+0x4ec>
 8002916:	e0ae      	b.n	8002a76 <__aeabi_dsub+0x64a>
 8002918:	1e66      	subs	r6, r4, #1
 800291a:	2c01      	cmp	r4, #1
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x4f4>
 800291e:	e0fd      	b.n	8002b1c <__aeabi_dsub+0x6f0>
 8002920:	4f7b      	ldr	r7, [pc, #492]	; (8002b10 <__aeabi_dsub+0x6e4>)
 8002922:	42bc      	cmp	r4, r7
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x4fc>
 8002926:	e107      	b.n	8002b38 <__aeabi_dsub+0x70c>
 8002928:	46b4      	mov	ip, r6
 800292a:	e69b      	b.n	8002664 <__aeabi_dsub+0x238>
 800292c:	4664      	mov	r4, ip
 800292e:	2220      	movs	r2, #32
 8002930:	1b12      	subs	r2, r2, r4
 8002932:	000c      	movs	r4, r1
 8002934:	4094      	lsls	r4, r2
 8002936:	0007      	movs	r7, r0
 8002938:	4090      	lsls	r0, r2
 800293a:	46a0      	mov	r8, r4
 800293c:	4664      	mov	r4, ip
 800293e:	1e42      	subs	r2, r0, #1
 8002940:	4190      	sbcs	r0, r2
 8002942:	4662      	mov	r2, ip
 8002944:	40e7      	lsrs	r7, r4
 8002946:	4644      	mov	r4, r8
 8002948:	40d1      	lsrs	r1, r2
 800294a:	433c      	orrs	r4, r7
 800294c:	4304      	orrs	r4, r0
 800294e:	185b      	adds	r3, r3, r1
 8002950:	e6f3      	b.n	800273a <__aeabi_dsub+0x30e>
 8002952:	4c6f      	ldr	r4, [pc, #444]	; (8002b10 <__aeabi_dsub+0x6e4>)
 8002954:	42a2      	cmp	r2, r4
 8002956:	d100      	bne.n	800295a <__aeabi_dsub+0x52e>
 8002958:	e0d5      	b.n	8002b06 <__aeabi_dsub+0x6da>
 800295a:	4448      	add	r0, r9
 800295c:	185b      	adds	r3, r3, r1
 800295e:	4548      	cmp	r0, r9
 8002960:	4189      	sbcs	r1, r1
 8002962:	4249      	negs	r1, r1
 8002964:	185b      	adds	r3, r3, r1
 8002966:	07dc      	lsls	r4, r3, #31
 8002968:	0840      	lsrs	r0, r0, #1
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	4698      	mov	r8, r3
 800296e:	0016      	movs	r6, r2
 8002970:	4304      	orrs	r4, r0
 8002972:	e6cc      	b.n	800270e <__aeabi_dsub+0x2e2>
 8002974:	2a00      	cmp	r2, #0
 8002976:	d000      	beq.n	800297a <__aeabi_dsub+0x54e>
 8002978:	e082      	b.n	8002a80 <__aeabi_dsub+0x654>
 800297a:	000a      	movs	r2, r1
 800297c:	4302      	orrs	r2, r0
 800297e:	d140      	bne.n	8002a02 <__aeabi_dsub+0x5d6>
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	2500      	movs	r5, #0
 8002984:	031b      	lsls	r3, r3, #12
 8002986:	e713      	b.n	80027b0 <__aeabi_dsub+0x384>
 8002988:	074b      	lsls	r3, r1, #29
 800298a:	08c2      	lsrs	r2, r0, #3
 800298c:	431a      	orrs	r2, r3
 800298e:	465d      	mov	r5, fp
 8002990:	08cb      	lsrs	r3, r1, #3
 8002992:	e6c5      	b.n	8002720 <__aeabi_dsub+0x2f4>
 8002994:	464a      	mov	r2, r9
 8002996:	1a84      	subs	r4, r0, r2
 8002998:	42a0      	cmp	r0, r4
 800299a:	4192      	sbcs	r2, r2
 800299c:	1acb      	subs	r3, r1, r3
 800299e:	4252      	negs	r2, r2
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	4698      	mov	r8, r3
 80029a4:	465d      	mov	r5, fp
 80029a6:	e59e      	b.n	80024e6 <__aeabi_dsub+0xba>
 80029a8:	464a      	mov	r2, r9
 80029aa:	0759      	lsls	r1, r3, #29
 80029ac:	08d2      	lsrs	r2, r2, #3
 80029ae:	430a      	orrs	r2, r1
 80029b0:	08db      	lsrs	r3, r3, #3
 80029b2:	e6f9      	b.n	80027a8 <__aeabi_dsub+0x37c>
 80029b4:	464a      	mov	r2, r9
 80029b6:	1a14      	subs	r4, r2, r0
 80029b8:	45a1      	cmp	r9, r4
 80029ba:	4192      	sbcs	r2, r2
 80029bc:	1a5b      	subs	r3, r3, r1
 80029be:	4252      	negs	r2, r2
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	4698      	mov	r8, r3
 80029c4:	2601      	movs	r6, #1
 80029c6:	e586      	b.n	80024d6 <__aeabi_dsub+0xaa>
 80029c8:	464a      	mov	r2, r9
 80029ca:	0759      	lsls	r1, r3, #29
 80029cc:	08d2      	lsrs	r2, r2, #3
 80029ce:	430a      	orrs	r2, r1
 80029d0:	08db      	lsrs	r3, r3, #3
 80029d2:	e6a5      	b.n	8002720 <__aeabi_dsub+0x2f4>
 80029d4:	464c      	mov	r4, r9
 80029d6:	4323      	orrs	r3, r4
 80029d8:	001c      	movs	r4, r3
 80029da:	1e63      	subs	r3, r4, #1
 80029dc:	419c      	sbcs	r4, r3
 80029de:	e65b      	b.n	8002698 <__aeabi_dsub+0x26c>
 80029e0:	4665      	mov	r5, ip
 80029e2:	001e      	movs	r6, r3
 80029e4:	3d20      	subs	r5, #32
 80029e6:	40ee      	lsrs	r6, r5
 80029e8:	2c20      	cmp	r4, #32
 80029ea:	d005      	beq.n	80029f8 <__aeabi_dsub+0x5cc>
 80029ec:	2540      	movs	r5, #64	; 0x40
 80029ee:	1b2d      	subs	r5, r5, r4
 80029f0:	40ab      	lsls	r3, r5
 80029f2:	464c      	mov	r4, r9
 80029f4:	431c      	orrs	r4, r3
 80029f6:	46a2      	mov	sl, r4
 80029f8:	4654      	mov	r4, sl
 80029fa:	1e63      	subs	r3, r4, #1
 80029fc:	419c      	sbcs	r4, r3
 80029fe:	4334      	orrs	r4, r6
 8002a00:	e77d      	b.n	80028fe <__aeabi_dsub+0x4d2>
 8002a02:	074b      	lsls	r3, r1, #29
 8002a04:	08c2      	lsrs	r2, r0, #3
 8002a06:	431a      	orrs	r2, r3
 8002a08:	465d      	mov	r5, fp
 8002a0a:	08cb      	lsrs	r3, r1, #3
 8002a0c:	e6cc      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002a0e:	000a      	movs	r2, r1
 8002a10:	4302      	orrs	r2, r0
 8002a12:	d100      	bne.n	8002a16 <__aeabi_dsub+0x5ea>
 8002a14:	e736      	b.n	8002884 <__aeabi_dsub+0x458>
 8002a16:	074b      	lsls	r3, r1, #29
 8002a18:	08c2      	lsrs	r2, r0, #3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	465d      	mov	r5, fp
 8002a1e:	08cb      	lsrs	r3, r1, #3
 8002a20:	e681      	b.n	8002726 <__aeabi_dsub+0x2fa>
 8002a22:	464a      	mov	r2, r9
 8002a24:	1a84      	subs	r4, r0, r2
 8002a26:	42a0      	cmp	r0, r4
 8002a28:	4192      	sbcs	r2, r2
 8002a2a:	1acb      	subs	r3, r1, r3
 8002a2c:	4252      	negs	r2, r2
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	4698      	mov	r8, r3
 8002a32:	465d      	mov	r5, fp
 8002a34:	2601      	movs	r6, #1
 8002a36:	e54e      	b.n	80024d6 <__aeabi_dsub+0xaa>
 8002a38:	074b      	lsls	r3, r1, #29
 8002a3a:	08c2      	lsrs	r2, r0, #3
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	08cb      	lsrs	r3, r1, #3
 8002a40:	e6b2      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002a42:	464a      	mov	r2, r9
 8002a44:	1a14      	subs	r4, r2, r0
 8002a46:	45a1      	cmp	r9, r4
 8002a48:	4192      	sbcs	r2, r2
 8002a4a:	1a5f      	subs	r7, r3, r1
 8002a4c:	4252      	negs	r2, r2
 8002a4e:	1aba      	subs	r2, r7, r2
 8002a50:	4690      	mov	r8, r2
 8002a52:	0212      	lsls	r2, r2, #8
 8002a54:	d56b      	bpl.n	8002b2e <__aeabi_dsub+0x702>
 8002a56:	464a      	mov	r2, r9
 8002a58:	1a84      	subs	r4, r0, r2
 8002a5a:	42a0      	cmp	r0, r4
 8002a5c:	4192      	sbcs	r2, r2
 8002a5e:	1acb      	subs	r3, r1, r3
 8002a60:	4252      	negs	r2, r2
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	4698      	mov	r8, r3
 8002a66:	465d      	mov	r5, fp
 8002a68:	e564      	b.n	8002534 <__aeabi_dsub+0x108>
 8002a6a:	074b      	lsls	r3, r1, #29
 8002a6c:	08c2      	lsrs	r2, r0, #3
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	465d      	mov	r5, fp
 8002a72:	08cb      	lsrs	r3, r1, #3
 8002a74:	e698      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002a76:	074b      	lsls	r3, r1, #29
 8002a78:	08c2      	lsrs	r2, r0, #3
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	08cb      	lsrs	r3, r1, #3
 8002a7e:	e64f      	b.n	8002720 <__aeabi_dsub+0x2f4>
 8002a80:	000a      	movs	r2, r1
 8002a82:	4302      	orrs	r2, r0
 8002a84:	d090      	beq.n	80029a8 <__aeabi_dsub+0x57c>
 8002a86:	464a      	mov	r2, r9
 8002a88:	075c      	lsls	r4, r3, #29
 8002a8a:	08d2      	lsrs	r2, r2, #3
 8002a8c:	4314      	orrs	r4, r2
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	0312      	lsls	r2, r2, #12
 8002a94:	4213      	tst	r3, r2
 8002a96:	d008      	beq.n	8002aaa <__aeabi_dsub+0x67e>
 8002a98:	08ce      	lsrs	r6, r1, #3
 8002a9a:	4216      	tst	r6, r2
 8002a9c:	d105      	bne.n	8002aaa <__aeabi_dsub+0x67e>
 8002a9e:	08c0      	lsrs	r0, r0, #3
 8002aa0:	0749      	lsls	r1, r1, #29
 8002aa2:	4308      	orrs	r0, r1
 8002aa4:	0004      	movs	r4, r0
 8002aa6:	465d      	mov	r5, fp
 8002aa8:	0033      	movs	r3, r6
 8002aaa:	0f61      	lsrs	r1, r4, #29
 8002aac:	00e2      	lsls	r2, r4, #3
 8002aae:	0749      	lsls	r1, r1, #29
 8002ab0:	08d2      	lsrs	r2, r2, #3
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	e678      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002ab6:	074b      	lsls	r3, r1, #29
 8002ab8:	08c2      	lsrs	r2, r0, #3
 8002aba:	431a      	orrs	r2, r3
 8002abc:	08cb      	lsrs	r3, r1, #3
 8002abe:	e632      	b.n	8002726 <__aeabi_dsub+0x2fa>
 8002ac0:	4448      	add	r0, r9
 8002ac2:	185b      	adds	r3, r3, r1
 8002ac4:	4548      	cmp	r0, r9
 8002ac6:	4192      	sbcs	r2, r2
 8002ac8:	4698      	mov	r8, r3
 8002aca:	4252      	negs	r2, r2
 8002acc:	4490      	add	r8, r2
 8002ace:	4643      	mov	r3, r8
 8002ad0:	0004      	movs	r4, r0
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	d400      	bmi.n	8002ad8 <__aeabi_dsub+0x6ac>
 8002ad6:	e61a      	b.n	800270e <__aeabi_dsub+0x2e2>
 8002ad8:	4642      	mov	r2, r8
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <__aeabi_dsub+0x6e8>)
 8002adc:	2601      	movs	r6, #1
 8002ade:	401a      	ands	r2, r3
 8002ae0:	4690      	mov	r8, r2
 8002ae2:	e614      	b.n	800270e <__aeabi_dsub+0x2e2>
 8002ae4:	4666      	mov	r6, ip
 8002ae6:	001f      	movs	r7, r3
 8002ae8:	3e20      	subs	r6, #32
 8002aea:	40f7      	lsrs	r7, r6
 8002aec:	2c20      	cmp	r4, #32
 8002aee:	d005      	beq.n	8002afc <__aeabi_dsub+0x6d0>
 8002af0:	2640      	movs	r6, #64	; 0x40
 8002af2:	1b36      	subs	r6, r6, r4
 8002af4:	40b3      	lsls	r3, r6
 8002af6:	464c      	mov	r4, r9
 8002af8:	431c      	orrs	r4, r3
 8002afa:	46a2      	mov	sl, r4
 8002afc:	4654      	mov	r4, sl
 8002afe:	1e63      	subs	r3, r4, #1
 8002b00:	419c      	sbcs	r4, r3
 8002b02:	433c      	orrs	r4, r7
 8002b04:	e5c8      	b.n	8002698 <__aeabi_dsub+0x26c>
 8002b06:	0011      	movs	r1, r2
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	e532      	b.n	8002574 <__aeabi_dsub+0x148>
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	000007ff 	.word	0x000007ff
 8002b14:	ff7fffff 	.word	0xff7fffff
 8002b18:	000007fe 	.word	0x000007fe
 8002b1c:	464a      	mov	r2, r9
 8002b1e:	1814      	adds	r4, r2, r0
 8002b20:	4284      	cmp	r4, r0
 8002b22:	4192      	sbcs	r2, r2
 8002b24:	185b      	adds	r3, r3, r1
 8002b26:	4698      	mov	r8, r3
 8002b28:	4252      	negs	r2, r2
 8002b2a:	4490      	add	r8, r2
 8002b2c:	e5e9      	b.n	8002702 <__aeabi_dsub+0x2d6>
 8002b2e:	4642      	mov	r2, r8
 8002b30:	4322      	orrs	r2, r4
 8002b32:	d100      	bne.n	8002b36 <__aeabi_dsub+0x70a>
 8002b34:	e6a6      	b.n	8002884 <__aeabi_dsub+0x458>
 8002b36:	e5ea      	b.n	800270e <__aeabi_dsub+0x2e2>
 8002b38:	074b      	lsls	r3, r1, #29
 8002b3a:	08c2      	lsrs	r2, r0, #3
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	08cb      	lsrs	r3, r1, #3
 8002b40:	e632      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002b42:	2200      	movs	r2, #0
 8002b44:	4901      	ldr	r1, [pc, #4]	; (8002b4c <__aeabi_dsub+0x720>)
 8002b46:	0013      	movs	r3, r2
 8002b48:	e514      	b.n	8002574 <__aeabi_dsub+0x148>
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	000007ff 	.word	0x000007ff

08002b50 <__aeabi_d2iz>:
 8002b50:	000a      	movs	r2, r1
 8002b52:	b530      	push	{r4, r5, lr}
 8002b54:	4c13      	ldr	r4, [pc, #76]	; (8002ba4 <__aeabi_d2iz+0x54>)
 8002b56:	0053      	lsls	r3, r2, #1
 8002b58:	0309      	lsls	r1, r1, #12
 8002b5a:	0005      	movs	r5, r0
 8002b5c:	0b09      	lsrs	r1, r1, #12
 8002b5e:	2000      	movs	r0, #0
 8002b60:	0d5b      	lsrs	r3, r3, #21
 8002b62:	0fd2      	lsrs	r2, r2, #31
 8002b64:	42a3      	cmp	r3, r4
 8002b66:	dd04      	ble.n	8002b72 <__aeabi_d2iz+0x22>
 8002b68:	480f      	ldr	r0, [pc, #60]	; (8002ba8 <__aeabi_d2iz+0x58>)
 8002b6a:	4283      	cmp	r3, r0
 8002b6c:	dd02      	ble.n	8002b74 <__aeabi_d2iz+0x24>
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <__aeabi_d2iz+0x5c>)
 8002b70:	18d0      	adds	r0, r2, r3
 8002b72:	bd30      	pop	{r4, r5, pc}
 8002b74:	2080      	movs	r0, #128	; 0x80
 8002b76:	0340      	lsls	r0, r0, #13
 8002b78:	4301      	orrs	r1, r0
 8002b7a:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <__aeabi_d2iz+0x60>)
 8002b7c:	1ac0      	subs	r0, r0, r3
 8002b7e:	281f      	cmp	r0, #31
 8002b80:	dd08      	ble.n	8002b94 <__aeabi_d2iz+0x44>
 8002b82:	480c      	ldr	r0, [pc, #48]	; (8002bb4 <__aeabi_d2iz+0x64>)
 8002b84:	1ac3      	subs	r3, r0, r3
 8002b86:	40d9      	lsrs	r1, r3
 8002b88:	000b      	movs	r3, r1
 8002b8a:	4258      	negs	r0, r3
 8002b8c:	2a00      	cmp	r2, #0
 8002b8e:	d1f0      	bne.n	8002b72 <__aeabi_d2iz+0x22>
 8002b90:	0018      	movs	r0, r3
 8002b92:	e7ee      	b.n	8002b72 <__aeabi_d2iz+0x22>
 8002b94:	4c08      	ldr	r4, [pc, #32]	; (8002bb8 <__aeabi_d2iz+0x68>)
 8002b96:	40c5      	lsrs	r5, r0
 8002b98:	46a4      	mov	ip, r4
 8002b9a:	4463      	add	r3, ip
 8002b9c:	4099      	lsls	r1, r3
 8002b9e:	000b      	movs	r3, r1
 8002ba0:	432b      	orrs	r3, r5
 8002ba2:	e7f2      	b.n	8002b8a <__aeabi_d2iz+0x3a>
 8002ba4:	000003fe 	.word	0x000003fe
 8002ba8:	0000041d 	.word	0x0000041d
 8002bac:	7fffffff 	.word	0x7fffffff
 8002bb0:	00000433 	.word	0x00000433
 8002bb4:	00000413 	.word	0x00000413
 8002bb8:	fffffbed 	.word	0xfffffbed

08002bbc <__aeabi_i2d>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d016      	beq.n	8002bf0 <__aeabi_i2d+0x34>
 8002bc2:	17c3      	asrs	r3, r0, #31
 8002bc4:	18c5      	adds	r5, r0, r3
 8002bc6:	405d      	eors	r5, r3
 8002bc8:	0fc4      	lsrs	r4, r0, #31
 8002bca:	0028      	movs	r0, r5
 8002bcc:	f000 f894 	bl	8002cf8 <__clzsi2>
 8002bd0:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <__aeabi_i2d+0x5c>)
 8002bd2:	1a12      	subs	r2, r2, r0
 8002bd4:	280a      	cmp	r0, #10
 8002bd6:	dc16      	bgt.n	8002c06 <__aeabi_i2d+0x4a>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	002e      	movs	r6, r5
 8002bdc:	3315      	adds	r3, #21
 8002bde:	409e      	lsls	r6, r3
 8002be0:	230b      	movs	r3, #11
 8002be2:	1a18      	subs	r0, r3, r0
 8002be4:	40c5      	lsrs	r5, r0
 8002be6:	0553      	lsls	r3, r2, #21
 8002be8:	032d      	lsls	r5, r5, #12
 8002bea:	0b2d      	lsrs	r5, r5, #12
 8002bec:	0d5b      	lsrs	r3, r3, #21
 8002bee:	e003      	b.n	8002bf8 <__aeabi_i2d+0x3c>
 8002bf0:	2400      	movs	r4, #0
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2500      	movs	r5, #0
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	051b      	lsls	r3, r3, #20
 8002bfa:	432b      	orrs	r3, r5
 8002bfc:	07e4      	lsls	r4, r4, #31
 8002bfe:	4323      	orrs	r3, r4
 8002c00:	0030      	movs	r0, r6
 8002c02:	0019      	movs	r1, r3
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
 8002c06:	380b      	subs	r0, #11
 8002c08:	4085      	lsls	r5, r0
 8002c0a:	0553      	lsls	r3, r2, #21
 8002c0c:	032d      	lsls	r5, r5, #12
 8002c0e:	2600      	movs	r6, #0
 8002c10:	0b2d      	lsrs	r5, r5, #12
 8002c12:	0d5b      	lsrs	r3, r3, #21
 8002c14:	e7f0      	b.n	8002bf8 <__aeabi_i2d+0x3c>
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	0000041e 	.word	0x0000041e

08002c1c <__aeabi_ui2d>:
 8002c1c:	b510      	push	{r4, lr}
 8002c1e:	1e04      	subs	r4, r0, #0
 8002c20:	d010      	beq.n	8002c44 <__aeabi_ui2d+0x28>
 8002c22:	f000 f869 	bl	8002cf8 <__clzsi2>
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <__aeabi_ui2d+0x48>)
 8002c28:	1a1b      	subs	r3, r3, r0
 8002c2a:	280a      	cmp	r0, #10
 8002c2c:	dc11      	bgt.n	8002c52 <__aeabi_ui2d+0x36>
 8002c2e:	220b      	movs	r2, #11
 8002c30:	0021      	movs	r1, r4
 8002c32:	1a12      	subs	r2, r2, r0
 8002c34:	40d1      	lsrs	r1, r2
 8002c36:	3015      	adds	r0, #21
 8002c38:	030a      	lsls	r2, r1, #12
 8002c3a:	055b      	lsls	r3, r3, #21
 8002c3c:	4084      	lsls	r4, r0
 8002c3e:	0b12      	lsrs	r2, r2, #12
 8002c40:	0d5b      	lsrs	r3, r3, #21
 8002c42:	e001      	b.n	8002c48 <__aeabi_ui2d+0x2c>
 8002c44:	2300      	movs	r3, #0
 8002c46:	2200      	movs	r2, #0
 8002c48:	051b      	lsls	r3, r3, #20
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	0020      	movs	r0, r4
 8002c4e:	0019      	movs	r1, r3
 8002c50:	bd10      	pop	{r4, pc}
 8002c52:	0022      	movs	r2, r4
 8002c54:	380b      	subs	r0, #11
 8002c56:	4082      	lsls	r2, r0
 8002c58:	055b      	lsls	r3, r3, #21
 8002c5a:	0312      	lsls	r2, r2, #12
 8002c5c:	2400      	movs	r4, #0
 8002c5e:	0b12      	lsrs	r2, r2, #12
 8002c60:	0d5b      	lsrs	r3, r3, #21
 8002c62:	e7f1      	b.n	8002c48 <__aeabi_ui2d+0x2c>
 8002c64:	0000041e 	.word	0x0000041e

08002c68 <__aeabi_f2d>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	0043      	lsls	r3, r0, #1
 8002c6c:	0246      	lsls	r6, r0, #9
 8002c6e:	0fc4      	lsrs	r4, r0, #31
 8002c70:	20fe      	movs	r0, #254	; 0xfe
 8002c72:	0e1b      	lsrs	r3, r3, #24
 8002c74:	1c59      	adds	r1, r3, #1
 8002c76:	0a75      	lsrs	r5, r6, #9
 8002c78:	4208      	tst	r0, r1
 8002c7a:	d00c      	beq.n	8002c96 <__aeabi_f2d+0x2e>
 8002c7c:	22e0      	movs	r2, #224	; 0xe0
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	4694      	mov	ip, r2
 8002c82:	076d      	lsls	r5, r5, #29
 8002c84:	0b36      	lsrs	r6, r6, #12
 8002c86:	4463      	add	r3, ip
 8002c88:	051b      	lsls	r3, r3, #20
 8002c8a:	4333      	orrs	r3, r6
 8002c8c:	07e4      	lsls	r4, r4, #31
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	0028      	movs	r0, r5
 8002c92:	0019      	movs	r1, r3
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d114      	bne.n	8002cc4 <__aeabi_f2d+0x5c>
 8002c9a:	2d00      	cmp	r5, #0
 8002c9c:	d01b      	beq.n	8002cd6 <__aeabi_f2d+0x6e>
 8002c9e:	0028      	movs	r0, r5
 8002ca0:	f000 f82a 	bl	8002cf8 <__clzsi2>
 8002ca4:	280a      	cmp	r0, #10
 8002ca6:	dc1c      	bgt.n	8002ce2 <__aeabi_f2d+0x7a>
 8002ca8:	230b      	movs	r3, #11
 8002caa:	002a      	movs	r2, r5
 8002cac:	1a1b      	subs	r3, r3, r0
 8002cae:	40da      	lsrs	r2, r3
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	3315      	adds	r3, #21
 8002cb4:	409d      	lsls	r5, r3
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <__aeabi_f2d+0x88>)
 8002cb8:	0312      	lsls	r2, r2, #12
 8002cba:	1a1b      	subs	r3, r3, r0
 8002cbc:	055b      	lsls	r3, r3, #21
 8002cbe:	0b16      	lsrs	r6, r2, #12
 8002cc0:	0d5b      	lsrs	r3, r3, #21
 8002cc2:	e7e1      	b.n	8002c88 <__aeabi_f2d+0x20>
 8002cc4:	2d00      	cmp	r5, #0
 8002cc6:	d009      	beq.n	8002cdc <__aeabi_f2d+0x74>
 8002cc8:	0b32      	lsrs	r2, r6, #12
 8002cca:	2680      	movs	r6, #128	; 0x80
 8002ccc:	0336      	lsls	r6, r6, #12
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <__aeabi_f2d+0x8c>)
 8002cd0:	076d      	lsls	r5, r5, #29
 8002cd2:	4316      	orrs	r6, r2
 8002cd4:	e7d8      	b.n	8002c88 <__aeabi_f2d+0x20>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2600      	movs	r6, #0
 8002cda:	e7d5      	b.n	8002c88 <__aeabi_f2d+0x20>
 8002cdc:	2600      	movs	r6, #0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <__aeabi_f2d+0x8c>)
 8002ce0:	e7d2      	b.n	8002c88 <__aeabi_f2d+0x20>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	002a      	movs	r2, r5
 8002ce6:	3b0b      	subs	r3, #11
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	2500      	movs	r5, #0
 8002cec:	e7e3      	b.n	8002cb6 <__aeabi_f2d+0x4e>
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	00000389 	.word	0x00000389
 8002cf4:	000007ff 	.word	0x000007ff

08002cf8 <__clzsi2>:
 8002cf8:	211c      	movs	r1, #28
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	4298      	cmp	r0, r3
 8002d00:	d301      	bcc.n	8002d06 <__clzsi2+0xe>
 8002d02:	0c00      	lsrs	r0, r0, #16
 8002d04:	3910      	subs	r1, #16
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	4298      	cmp	r0, r3
 8002d0a:	d301      	bcc.n	8002d10 <__clzsi2+0x18>
 8002d0c:	0a00      	lsrs	r0, r0, #8
 8002d0e:	3908      	subs	r1, #8
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	4298      	cmp	r0, r3
 8002d14:	d301      	bcc.n	8002d1a <__clzsi2+0x22>
 8002d16:	0900      	lsrs	r0, r0, #4
 8002d18:	3904      	subs	r1, #4
 8002d1a:	a202      	add	r2, pc, #8	; (adr r2, 8002d24 <__clzsi2+0x2c>)
 8002d1c:	5c10      	ldrb	r0, [r2, r0]
 8002d1e:	1840      	adds	r0, r0, r1
 8002d20:	4770      	bx	lr
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	02020304 	.word	0x02020304
 8002d28:	01010101 	.word	0x01010101
	...

08002d34 <__clzdi2>:
 8002d34:	b510      	push	{r4, lr}
 8002d36:	2900      	cmp	r1, #0
 8002d38:	d103      	bne.n	8002d42 <__clzdi2+0xe>
 8002d3a:	f7ff ffdd 	bl	8002cf8 <__clzsi2>
 8002d3e:	3020      	adds	r0, #32
 8002d40:	e002      	b.n	8002d48 <__clzdi2+0x14>
 8002d42:	1c08      	adds	r0, r1, #0
 8002d44:	f7ff ffd8 	bl	8002cf8 <__clzsi2>
 8002d48:	bd10      	pop	{r4, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)

08002d4c <__divdi3>:
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4e:	4657      	mov	r7, sl
 8002d50:	464e      	mov	r6, r9
 8002d52:	4645      	mov	r5, r8
 8002d54:	46de      	mov	lr, fp
 8002d56:	b5e0      	push	{r5, r6, r7, lr}
 8002d58:	000f      	movs	r7, r1
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	0006      	movs	r6, r0
 8002d60:	4698      	mov	r8, r3
 8002d62:	0010      	movs	r0, r2
 8002d64:	b083      	sub	sp, #12
 8002d66:	2f00      	cmp	r7, #0
 8002d68:	da07      	bge.n	8002d7a <__divdi3+0x2e>
 8002d6a:	0033      	movs	r3, r6
 8002d6c:	003c      	movs	r4, r7
 8002d6e:	2700      	movs	r7, #0
 8002d70:	425e      	negs	r6, r3
 8002d72:	41a7      	sbcs	r7, r4
 8002d74:	2301      	movs	r3, #1
 8002d76:	425b      	negs	r3, r3
 8002d78:	4698      	mov	r8, r3
 8002d7a:	2900      	cmp	r1, #0
 8002d7c:	da07      	bge.n	8002d8e <__divdi3+0x42>
 8002d7e:	4643      	mov	r3, r8
 8002d80:	43db      	mvns	r3, r3
 8002d82:	000c      	movs	r4, r1
 8002d84:	4698      	mov	r8, r3
 8002d86:	0003      	movs	r3, r0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4258      	negs	r0, r3
 8002d8c:	41a1      	sbcs	r1, r4
 8002d8e:	0034      	movs	r4, r6
 8002d90:	003d      	movs	r5, r7
 8002d92:	4682      	mov	sl, r0
 8002d94:	4689      	mov	r9, r1
 8002d96:	42b9      	cmp	r1, r7
 8002d98:	d86a      	bhi.n	8002e70 <__divdi3+0x124>
 8002d9a:	d067      	beq.n	8002e6c <__divdi3+0x120>
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	4650      	mov	r0, sl
 8002da0:	f7ff ffc8 	bl	8002d34 <__clzdi2>
 8002da4:	4683      	mov	fp, r0
 8002da6:	0039      	movs	r1, r7
 8002da8:	0030      	movs	r0, r6
 8002daa:	f7ff ffc3 	bl	8002d34 <__clzdi2>
 8002dae:	465b      	mov	r3, fp
 8002db0:	1a1b      	subs	r3, r3, r0
 8002db2:	469c      	mov	ip, r3
 8002db4:	3b20      	subs	r3, #32
 8002db6:	469b      	mov	fp, r3
 8002db8:	d46b      	bmi.n	8002e92 <__divdi3+0x146>
 8002dba:	4658      	mov	r0, fp
 8002dbc:	4651      	mov	r1, sl
 8002dbe:	4081      	lsls	r1, r0
 8002dc0:	4660      	mov	r0, ip
 8002dc2:	000b      	movs	r3, r1
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	4081      	lsls	r1, r0
 8002dc8:	000a      	movs	r2, r1
 8002dca:	42bb      	cmp	r3, r7
 8002dcc:	d900      	bls.n	8002dd0 <__divdi3+0x84>
 8002dce:	e072      	b.n	8002eb6 <__divdi3+0x16a>
 8002dd0:	42bb      	cmp	r3, r7
 8002dd2:	d100      	bne.n	8002dd6 <__divdi3+0x8a>
 8002dd4:	e079      	b.n	8002eca <__divdi3+0x17e>
 8002dd6:	0034      	movs	r4, r6
 8002dd8:	003d      	movs	r5, r7
 8002dda:	4659      	mov	r1, fp
 8002ddc:	1aa4      	subs	r4, r4, r2
 8002dde:	419d      	sbcs	r5, r3
 8002de0:	2900      	cmp	r1, #0
 8002de2:	da00      	bge.n	8002de6 <__divdi3+0x9a>
 8002de4:	e074      	b.n	8002ed0 <__divdi3+0x184>
 8002de6:	2100      	movs	r1, #0
 8002de8:	2000      	movs	r0, #0
 8002dea:	2601      	movs	r6, #1
 8002dec:	9000      	str	r0, [sp, #0]
 8002dee:	9101      	str	r1, [sp, #4]
 8002df0:	4659      	mov	r1, fp
 8002df2:	408e      	lsls	r6, r1
 8002df4:	9601      	str	r6, [sp, #4]
 8002df6:	4661      	mov	r1, ip
 8002df8:	2601      	movs	r6, #1
 8002dfa:	408e      	lsls	r6, r1
 8002dfc:	4661      	mov	r1, ip
 8002dfe:	9600      	str	r6, [sp, #0]
 8002e00:	2900      	cmp	r1, #0
 8002e02:	d05f      	beq.n	8002ec4 <__divdi3+0x178>
 8002e04:	07d9      	lsls	r1, r3, #31
 8002e06:	0856      	lsrs	r6, r2, #1
 8002e08:	430e      	orrs	r6, r1
 8002e0a:	085f      	lsrs	r7, r3, #1
 8002e0c:	4661      	mov	r1, ip
 8002e0e:	2201      	movs	r2, #1
 8002e10:	2300      	movs	r3, #0
 8002e12:	e00c      	b.n	8002e2e <__divdi3+0xe2>
 8002e14:	42af      	cmp	r7, r5
 8002e16:	d101      	bne.n	8002e1c <__divdi3+0xd0>
 8002e18:	42a6      	cmp	r6, r4
 8002e1a:	d80a      	bhi.n	8002e32 <__divdi3+0xe6>
 8002e1c:	1ba4      	subs	r4, r4, r6
 8002e1e:	41bd      	sbcs	r5, r7
 8002e20:	1924      	adds	r4, r4, r4
 8002e22:	416d      	adcs	r5, r5
 8002e24:	3901      	subs	r1, #1
 8002e26:	18a4      	adds	r4, r4, r2
 8002e28:	415d      	adcs	r5, r3
 8002e2a:	2900      	cmp	r1, #0
 8002e2c:	d006      	beq.n	8002e3c <__divdi3+0xf0>
 8002e2e:	42af      	cmp	r7, r5
 8002e30:	d9f0      	bls.n	8002e14 <__divdi3+0xc8>
 8002e32:	3901      	subs	r1, #1
 8002e34:	1924      	adds	r4, r4, r4
 8002e36:	416d      	adcs	r5, r5
 8002e38:	2900      	cmp	r1, #0
 8002e3a:	d1f8      	bne.n	8002e2e <__divdi3+0xe2>
 8002e3c:	9800      	ldr	r0, [sp, #0]
 8002e3e:	9901      	ldr	r1, [sp, #4]
 8002e40:	465b      	mov	r3, fp
 8002e42:	1900      	adds	r0, r0, r4
 8002e44:	4169      	adcs	r1, r5
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	db4d      	blt.n	8002ee6 <__divdi3+0x19a>
 8002e4a:	002e      	movs	r6, r5
 8002e4c:	002c      	movs	r4, r5
 8002e4e:	40de      	lsrs	r6, r3
 8002e50:	4663      	mov	r3, ip
 8002e52:	40dc      	lsrs	r4, r3
 8002e54:	465b      	mov	r3, fp
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db55      	blt.n	8002f06 <__divdi3+0x1ba>
 8002e5a:	0034      	movs	r4, r6
 8002e5c:	409c      	lsls	r4, r3
 8002e5e:	0023      	movs	r3, r4
 8002e60:	4664      	mov	r4, ip
 8002e62:	40a6      	lsls	r6, r4
 8002e64:	0032      	movs	r2, r6
 8002e66:	1a80      	subs	r0, r0, r2
 8002e68:	4199      	sbcs	r1, r3
 8002e6a:	e003      	b.n	8002e74 <__divdi3+0x128>
 8002e6c:	42b0      	cmp	r0, r6
 8002e6e:	d995      	bls.n	8002d9c <__divdi3+0x50>
 8002e70:	2000      	movs	r0, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	4643      	mov	r3, r8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <__divdi3+0x138>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	000c      	movs	r4, r1
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4258      	negs	r0, r3
 8002e82:	41a1      	sbcs	r1, r4
 8002e84:	b003      	add	sp, #12
 8002e86:	bcf0      	pop	{r4, r5, r6, r7}
 8002e88:	46bb      	mov	fp, r7
 8002e8a:	46b2      	mov	sl, r6
 8002e8c:	46a9      	mov	r9, r5
 8002e8e:	46a0      	mov	r8, r4
 8002e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e92:	4662      	mov	r2, ip
 8002e94:	4648      	mov	r0, r9
 8002e96:	2320      	movs	r3, #32
 8002e98:	4651      	mov	r1, sl
 8002e9a:	4090      	lsls	r0, r2
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	40d9      	lsrs	r1, r3
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	9100      	str	r1, [sp, #0]
 8002ea4:	9900      	ldr	r1, [sp, #0]
 8002ea6:	4660      	mov	r0, ip
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	4651      	mov	r1, sl
 8002eac:	4081      	lsls	r1, r0
 8002eae:	000a      	movs	r2, r1
 8002eb0:	42bb      	cmp	r3, r7
 8002eb2:	d800      	bhi.n	8002eb6 <__divdi3+0x16a>
 8002eb4:	e78c      	b.n	8002dd0 <__divdi3+0x84>
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2000      	movs	r0, #0
 8002eba:	9000      	str	r0, [sp, #0]
 8002ebc:	9101      	str	r1, [sp, #4]
 8002ebe:	4661      	mov	r1, ip
 8002ec0:	2900      	cmp	r1, #0
 8002ec2:	d19f      	bne.n	8002e04 <__divdi3+0xb8>
 8002ec4:	9800      	ldr	r0, [sp, #0]
 8002ec6:	9901      	ldr	r1, [sp, #4]
 8002ec8:	e7d4      	b.n	8002e74 <__divdi3+0x128>
 8002eca:	42b1      	cmp	r1, r6
 8002ecc:	d8f3      	bhi.n	8002eb6 <__divdi3+0x16a>
 8002ece:	e782      	b.n	8002dd6 <__divdi3+0x8a>
 8002ed0:	4661      	mov	r1, ip
 8002ed2:	2620      	movs	r6, #32
 8002ed4:	2701      	movs	r7, #1
 8002ed6:	1a76      	subs	r6, r6, r1
 8002ed8:	2000      	movs	r0, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	40f7      	lsrs	r7, r6
 8002ede:	9000      	str	r0, [sp, #0]
 8002ee0:	9101      	str	r1, [sp, #4]
 8002ee2:	9701      	str	r7, [sp, #4]
 8002ee4:	e787      	b.n	8002df6 <__divdi3+0xaa>
 8002ee6:	4662      	mov	r2, ip
 8002ee8:	2320      	movs	r3, #32
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	002a      	movs	r2, r5
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	0026      	movs	r6, r4
 8002ef2:	0013      	movs	r3, r2
 8002ef4:	4662      	mov	r2, ip
 8002ef6:	40d6      	lsrs	r6, r2
 8002ef8:	002c      	movs	r4, r5
 8002efa:	431e      	orrs	r6, r3
 8002efc:	4663      	mov	r3, ip
 8002efe:	40dc      	lsrs	r4, r3
 8002f00:	465b      	mov	r3, fp
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	daa9      	bge.n	8002e5a <__divdi3+0x10e>
 8002f06:	4662      	mov	r2, ip
 8002f08:	2320      	movs	r3, #32
 8002f0a:	0035      	movs	r5, r6
 8002f0c:	4094      	lsls	r4, r2
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	40dd      	lsrs	r5, r3
 8002f12:	0023      	movs	r3, r4
 8002f14:	432b      	orrs	r3, r5
 8002f16:	e7a3      	b.n	8002e60 <__divdi3+0x114>

08002f18 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002f1c:	f001 ff1a 	bl	8004d54 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002f20:	f000 f80e 	bl	8002f40 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002f2e:	2301      	movs	r3, #1
 8002f30:	425b      	negs	r3, r3
 8002f32:	0018      	movs	r0, r3
 8002f34:	f019 fa30 	bl	801c398 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 8002f46:	2002      	movs	r0, #2
 8002f48:	f002 fdba 	bl	8005ac0 <BSP_LED_Init>
  LED_Init(LED_RED1);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f002 fdb7 	bl	8005ac0 <BSP_LED_Init>
  LED_Init(LED_RED2);
 8002f52:	2003      	movs	r0, #3
 8002f54:	f002 fdb4 	bl	8005ac0 <BSP_LED_Init>
  /* Get LoRa APP version*/
//  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, " ##### Версия протокола:        V%X.%X.%X\r\n",
 8002f58:	4b3c      	ldr	r3, [pc, #240]	; (800304c <LoRaWAN_Init+0x10c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	9202      	str	r2, [sp, #8]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	9201      	str	r2, [sp, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	9200      	str	r2, [sp, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2002      	movs	r0, #2
 8002f6c:	f018 fe52 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT)); // версия радио Middleware
  // APP_LOG(TS_OFF, VLEVEL_M, "MW_:   V%X.%X.%X\r\n",
//  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== EEEPROM EST====\r\n");
  //	 (uint8_t) buffer[20]);
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002f70:	4b37      	ldr	r3, [pc, #220]	; (8003050 <LoRaWAN_Init+0x110>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	4251      	negs	r1, r2
 8002f76:	4837      	ldr	r0, [pc, #220]	; (8003054 <LoRaWAN_Init+0x114>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	9200      	str	r2, [sp, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f019 fcdd 	bl	801c93c <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <LoRaWAN_Init+0x118>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	4251      	negs	r1, r2
 8002f88:	4834      	ldr	r0, [pc, #208]	; (800305c <LoRaWAN_Init+0x11c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	9200      	str	r2, [sp, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f019 fcd4 	bl	801c93c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <LoRaWAN_Init+0x120>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	4251      	negs	r1, r2
 8002f9a:	4832      	ldr	r0, [pc, #200]	; (8003064 <LoRaWAN_Init+0x124>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	9200      	str	r2, [sp, #0]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f019 fccb 	bl	801c93c <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002fa6:	23fa      	movs	r3, #250	; 0xfa
 8002fa8:	005a      	lsls	r2, r3, #1
 8002faa:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <LoRaWAN_Init+0x114>)
 8002fac:	0011      	movs	r1, r2
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f019 fdec 	bl	801cb8c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002fb4:	23fa      	movs	r3, #250	; 0xfa
 8002fb6:	005a      	lsls	r2, r3, #1
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <LoRaWAN_Init+0x11c>)
 8002fba:	0011      	movs	r1, r2
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f019 fde5 	bl	801cb8c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002fc2:	23fa      	movs	r3, #250	; 0xfa
 8002fc4:	005a      	lsls	r2, r3, #1
 8002fc6:	4b27      	ldr	r3, [pc, #156]	; (8003064 <LoRaWAN_Init+0x124>)
 8002fc8:	0011      	movs	r1, r2
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f019 fdde 	bl	801cb8c <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <LoRaWAN_Init+0x128>)
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f019 fac0 	bl	801c55c <UTIL_SEQ_RegTask>
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <LoRaWAN_Init+0x12c>)
 8002fde:	001a      	movs	r2, r3
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2002      	movs	r0, #2
 8002fe4:	f019 faba 	bl	801c55c <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8002fe8:	f000 fb94 	bl	8003714 <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8002fec:	4b20      	ldr	r3, [pc, #128]	; (8003070 <LoRaWAN_Init+0x130>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f00a fe30 	bl	800dc54 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <LoRaWAN_Init+0x134>)
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f00a fe72 	bl	800dce0 <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <LoRaWAN_Init+0x124>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f019 fcd4 	bl	801c9ac <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8003004:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <LoRaWAN_Init+0x138>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f00a ff7b 	bl	800df04 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <LoRaWAN_Init+0x13c>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d113      	bne.n	800303e <LoRaWAN_Init+0xfe>
  {
    /* send every time timer elapses */

    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <LoRaWAN_Init+0x140>)
 8003018:	2201      	movs	r2, #1
 800301a:	4251      	negs	r1, r2
 800301c:	4819      	ldr	r0, [pc, #100]	; (8003084 <LoRaWAN_Init+0x144>)
 800301e:	2200      	movs	r2, #0
 8003020:	9200      	str	r2, [sp, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	f019 fc8a 	bl	801c93c <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8003028:	4a17      	ldr	r2, [pc, #92]	; (8003088 <LoRaWAN_Init+0x148>)
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <LoRaWAN_Init+0x144>)
 800302c:	0011      	movs	r1, r2
 800302e:	0018      	movs	r0, r3
 8003030:	f019 fdac 	bl	801cb8c <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LoRaWAN_Init+0x144>)
 8003036:	0018      	movs	r0, r3
 8003038:	f019 fcb8 	bl	801c9ac <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 800303c:	e003      	b.n	8003046 <LoRaWAN_Init+0x106>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800303e:	2101      	movs	r1, #1
 8003040:	2000      	movs	r0, #0
 8003042:	f002 fdff 	bl	8005c44 <BSP_PB_Init>
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	0801df28 	.word	0x0801df28
 8003050:	0800347d 	.word	0x0800347d
 8003054:	20000300 	.word	0x20000300
 8003058:	08003493 	.word	0x08003493
 800305c:	20000318 	.word	0x20000318
 8003060:	080034a9 	.word	0x080034a9
 8003064:	20000330 	.word	0x20000330
 8003068:	0800de49 	.word	0x0800de49
 800306c:	080031c1 	.word	0x080031c1
 8003070:	2000000c 	.word	0x2000000c
 8003074:	2000002c 	.word	0x2000002c
 8003078:	20000008 	.word	0x20000008
 800307c:	200002e7 	.word	0x200002e7
 8003080:	08003459 	.word	0x08003459
 8003084:	200002e8 	.word	0x200002e8
 8003088:	00002710 	.word	0x00002710

0800308c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800308c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af06      	add	r7, sp, #24
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d100      	bne.n	800309e <OnRxData+0x12>
 800309c:	e07a      	b.n	8003194 <OnRxData+0x108>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d100      	bne.n	80030a6 <OnRxData+0x1a>
 80030a4:	e076      	b.n	8003194 <OnRxData+0x108>
  {
    LED_On(LED_BLUE);
 80030a6:	2002      	movs	r0, #2
 80030a8:	f002 fd78 	bl	8005b9c <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== Индикация приёма данных ==========\r\n");
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <OnRxData+0x11c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	2002      	movs	r0, #2
 80030b4:	f018 fdae 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	7b12      	ldrb	r2, [r2, #12]
 80030c0:	b252      	sxtb	r2, r2
 80030c2:	0011      	movs	r1, r2
 80030c4:	4a39      	ldr	r2, [pc, #228]	; (80031ac <OnRxData+0x120>)
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	588a      	ldr	r2, [r1, r2]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	7809      	ldrb	r1, [r1, #0]
 80030ce:	0008      	movs	r0, r1
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	7889      	ldrb	r1, [r1, #2]
 80030d4:	b249      	sxtb	r1, r1
 80030d6:	000c      	movs	r4, r1
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	78c9      	ldrb	r1, [r1, #3]
 80030dc:	b249      	sxtb	r1, r1
 80030de:	000d      	movs	r5, r1
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	7909      	ldrb	r1, [r1, #4]
 80030e4:	b249      	sxtb	r1, r1
 80030e6:	000e      	movs	r6, r1
 80030e8:	4931      	ldr	r1, [pc, #196]	; (80031b0 <OnRxData+0x124>)
 80030ea:	9605      	str	r6, [sp, #20]
 80030ec:	9504      	str	r5, [sp, #16]
 80030ee:	9403      	str	r4, [sp, #12]
 80030f0:	9002      	str	r0, [sp, #8]
 80030f2:	9201      	str	r2, [sp, #4]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	000b      	movs	r3, r1
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	2003      	movs	r0, #3
 80030fe:	f018 fd89 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d020      	beq.n	800314c <OnRxData+0xc0>
 800310a:	2b03      	cmp	r3, #3
 800310c:	d144      	bne.n	8003198 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	785b      	ldrb	r3, [r3, #1]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d116      	bne.n	8003144 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d00d      	beq.n	800313c <OnRxData+0xb0>
 8003120:	dc12      	bgt.n	8003148 <OnRxData+0xbc>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <OnRxData+0xa0>
 8003126:	2b01      	cmp	r3, #1
 8003128:	d004      	beq.n	8003134 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800312a:	e00d      	b.n	8003148 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800312c:	2000      	movs	r0, #0
 800312e:	f00b f843 	bl	800e1b8 <LmHandlerRequestClass>
              break;
 8003132:	e00a      	b.n	800314a <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 8003134:	2001      	movs	r0, #1
 8003136:	f00b f83f 	bl	800e1b8 <LmHandlerRequestClass>
              break;
 800313a:	e006      	b.n	800314a <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800313c:	2002      	movs	r0, #2
 800313e:	f00b f83b 	bl	800e1b8 <LmHandlerRequestClass>
              break;
 8003142:	e002      	b.n	800314a <OnRxData+0xbe>
          }
        }
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	e02a      	b.n	800319e <OnRxData+0x112>
              break;
 8003148:	46c0      	nop			; (mov r8, r8)
        break;
 800314a:	e028      	b.n	800319e <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d123      	bne.n	800319c <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	4013      	ands	r3, r2
 800315e:	b2da      	uxtb	r2, r3
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <OnRxData+0x128>)
 8003162:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <OnRxData+0x128>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <OnRxData+0x12c>)
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	2003      	movs	r0, #3
 8003174:	f018 fd4e 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 8003178:	2001      	movs	r0, #1
 800317a:	f002 fd2b 	bl	8005bd4 <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 800317e:	e00d      	b.n	800319c <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8003180:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <OnRxData+0x130>)
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	2003      	movs	r0, #3
 8003188:	f018 fd44 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 800318c:	2001      	movs	r0, #1
 800318e:	f002 fd05 	bl	8005b9c <BSP_LED_On>
        break;
 8003192:	e003      	b.n	800319c <OnRxData+0x110>
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
    }
  }
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	e002      	b.n	800319e <OnRxData+0x112>
        break;
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	e000      	b.n	800319e <OnRxData+0x112>
        break;
 800319c:	46c0      	nop			; (mov r8, r8)

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b003      	add	sp, #12
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	0801df64 	.word	0x0801df64
 80031ac:	20000034 	.word	0x20000034
 80031b0:	0801dfb4 	.word	0x0801dfb4
 80031b4:	200002e6 	.word	0x200002e6
 80031b8:	0801dffc 	.word	0x0801dffc
 80031bc:	0801e008 	.word	0x0801e008

080031c0 <SendTxData>:

static void SendTxData(void)
{
 80031c0:	b5b0      	push	{r4, r5, r7, lr}
 80031c2:	b0de      	sub	sp, #376	; 0x178
 80031c4:	af02      	add	r7, sp, #8
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 80031c6:	23b7      	movs	r3, #183	; 0xb7
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2200      	movs	r2, #0
 80031ce:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 80031d0:	23b6      	movs	r3, #182	; 0xb6
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	2200      	movs	r2, #0
 80031d8:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Data[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  bmp280_params_t params;
	RTC_TimeTypeDef sTime1;
  	RTC_DateTypeDef sDate1;
  	uint8_t buffer[20];
  	volatile uint16_t adc = 0;
 80031de:	4b89      	ldr	r3, [pc, #548]	; (8003404 <SendTxData+0x244>)
 80031e0:	22b8      	movs	r2, #184	; 0xb8
 80031e2:	0052      	lsls	r2, r2, #1
 80031e4:	4694      	mov	ip, r2
 80031e6:	44bc      	add	ip, r7
 80031e8:	4463      	add	r3, ip
 80031ea:	2200      	movs	r2, #0
 80031ec:	801a      	strh	r2, [r3, #0]
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 80031ee:	23b5      	movs	r3, #181	; 0xb5
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2200      	movs	r2, #0
 80031f6:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	22b2      	movs	r2, #178	; 0xb2
 80031fc:	0052      	lsls	r2, r2, #1
 80031fe:	18ba      	adds	r2, r7, r2
 8003200:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	22b0      	movs	r2, #176	; 0xb0
 8003206:	0052      	lsls	r2, r2, #1
 8003208:	18ba      	adds	r2, r7, r2
 800320a:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	22ae      	movs	r2, #174	; 0xae
 8003210:	0052      	lsls	r2, r2, #1
 8003212:	18ba      	adds	r2, r7, r2
 8003214:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 8003216:	23ad      	movs	r3, #173	; 0xad
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2200      	movs	r2, #0
 800321e:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8003220:	4b79      	ldr	r3, [pc, #484]	; (8003408 <SendTxData+0x248>)
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 8003226:	f002 fb03 	bl	8005830 <BSP_I2C1_Init>
  MX_ADC_Init();
 800322a:	f000 faa7 	bl	800377c <MX_ADC_Init>
  MX_LPTIM1_Init();
 800322e:	f000 f9eb 	bl	8003608 <MX_LPTIM1_Init>

  HAL_LPTIM_Encoder_Start_IT(&hlptim1, 1000);
 8003232:	23fa      	movs	r3, #250	; 0xfa
 8003234:	009a      	lsls	r2, r3, #2
 8003236:	4b75      	ldr	r3, [pc, #468]	; (800340c <SendTxData+0x24c>)
 8003238:	0011      	movs	r1, r2
 800323a:	0018      	movs	r0, r3
 800323c:	f001 faa6 	bl	800478c <HAL_LPTIM_Encoder_Start_IT>
    		 */
  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  bmp280_init_default_params(&bmp280.params);
 8003240:	4b73      	ldr	r3, [pc, #460]	; (8003410 <SendTxData+0x250>)
 8003242:	0018      	movs	r0, r3
 8003244:	f01a f84e 	bl	801d2e4 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003248:	4b72      	ldr	r3, [pc, #456]	; (8003414 <SendTxData+0x254>)
 800324a:	2276      	movs	r2, #118	; 0x76
 800324c:	849a      	strh	r2, [r3, #36]	; 0x24
    	bmp280.i2c = &hi2c1;
 800324e:	4b71      	ldr	r3, [pc, #452]	; (8003414 <SendTxData+0x254>)
 8003250:	4a71      	ldr	r2, [pc, #452]	; (8003418 <SendTxData+0x258>)
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 8003254:	4a6e      	ldr	r2, [pc, #440]	; (8003410 <SendTxData+0x250>)
 8003256:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <SendTxData+0x254>)
 8003258:	0011      	movs	r1, r2
 800325a:	0018      	movs	r0, r3
 800325c:	f01a f9d6 	bl	801d60c <bmp280_init>
    	// HTS221_Init(&hts221);
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
 8003260:	4b6e      	ldr	r3, [pc, #440]	; (800341c <SendTxData+0x25c>)
 8003262:	4a6f      	ldr	r2, [pc, #444]	; (8003420 <SendTxData+0x260>)
 8003264:	496f      	ldr	r1, [pc, #444]	; (8003424 <SendTxData+0x264>)
 8003266:	486b      	ldr	r0, [pc, #428]	; (8003414 <SendTxData+0x254>)
 8003268:	f01a fd3e 	bl	801dce8 <bmp280_read_float>
    	 temperatureint = temperature1;
 800326c:	4b6d      	ldr	r3, [pc, #436]	; (8003424 <SendTxData+0x264>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	1c18      	adds	r0, r3, #0
 8003272:	f7fd fe5d 	bl	8000f30 <__aeabi_f2iz>
 8003276:	0003      	movs	r3, r0
 8003278:	b21a      	sxth	r2, r3
 800327a:	4b6b      	ldr	r3, [pc, #428]	; (8003428 <SendTxData+0x268>)
 800327c:	801a      	strh	r2, [r3, #0]
    	 humidityint = humidity1;
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <SendTxData+0x25c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1c18      	adds	r0, r3, #0
 8003284:	f7fd fe54 	bl	8000f30 <__aeabi_f2iz>
 8003288:	0002      	movs	r2, r0
 800328a:	4b68      	ldr	r3, [pc, #416]	; (800342c <SendTxData+0x26c>)
 800328c:	601a      	str	r2, [r3, #0]
    	 APP_LOG(TS_OFF, VLEVEL_M, " Температура:%d | Влажность:%d\r\n",
 800328e:	4b66      	ldr	r3, [pc, #408]	; (8003428 <SendTxData+0x268>)
 8003290:	2200      	movs	r2, #0
 8003292:	5e9b      	ldrsh	r3, [r3, r2]
 8003294:	0019      	movs	r1, r3
 8003296:	4b65      	ldr	r3, [pc, #404]	; (800342c <SendTxData+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a65      	ldr	r2, [pc, #404]	; (8003430 <SendTxData+0x270>)
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	9100      	str	r1, [sp, #0]
 80032a0:	0013      	movs	r3, r2
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	2002      	movs	r0, #2
 80032a8:	f018 fcb4 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
    	 	temperatureint, humidityint);
    	 if(bmp280.dig_T1>=0)
    	//*/
    	{
//    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Temp, hum sensor Init ====\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Датчик измерения активен ====\r\n");
 80032ac:	4b61      	ldr	r3, [pc, #388]	; (8003434 <SendTxData+0x274>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	2002      	movs	r0, #2
 80032b4:	f018 fcae 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>

//    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Sensor initialization failed ====\r\n");
    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Ошибка инициализации датчика  ====\r\n");
    	 }

    	 if(temperature1>=1 && temperature1<=30 && pressure1>=1)
 80032b8:	4b5a      	ldr	r3, [pc, #360]	; (8003424 <SendTxData+0x264>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	21fe      	movs	r1, #254	; 0xfe
 80032be:	0589      	lsls	r1, r1, #22
 80032c0:	1c18      	adds	r0, r3, #0
 80032c2:	f7fd f90d 	bl	80004e0 <__aeabi_fcmpge>
 80032c6:	1e03      	subs	r3, r0, #0
 80032c8:	d017      	beq.n	80032fa <SendTxData+0x13a>
 80032ca:	4b56      	ldr	r3, [pc, #344]	; (8003424 <SendTxData+0x264>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	495a      	ldr	r1, [pc, #360]	; (8003438 <SendTxData+0x278>)
 80032d0:	1c18      	adds	r0, r3, #0
 80032d2:	f7fd f8f1 	bl	80004b8 <__aeabi_fcmple>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d00f      	beq.n	80032fa <SendTxData+0x13a>
 80032da:	4b51      	ldr	r3, [pc, #324]	; (8003420 <SendTxData+0x260>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	21fe      	movs	r1, #254	; 0xfe
 80032e0:	0589      	lsls	r1, r1, #22
 80032e2:	1c18      	adds	r0, r3, #0
 80032e4:	f7fd f8fc 	bl	80004e0 <__aeabi_fcmpge>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d006      	beq.n	80032fa <SendTxData+0x13a>
    	     	//*/
    	  {
//    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== All parameters normal ====\r\n");
    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Параметры окружающей среды в норме ====\r\n");
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <SendTxData+0x27c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	2002      	movs	r0, #2
 80032f4:	f018 fc8e 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
 80032f8:	e005      	b.n	8003306 <SendTxData+0x146>
    	  } //*/
    	     	 else
    	   {
//    	     		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Accident ====\r\n");
    	       		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Отклонение от нормы ====\r\n");
 80032fa:	4b51      	ldr	r3, [pc, #324]	; (8003440 <SendTxData+0x280>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	2002      	movs	r0, #2
 8003302:	f018 fc87 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
    	   }
    	 numberdev = 0x01;  // new 0b00010001
 8003306:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <SendTxData+0x284>)
 8003308:	2201      	movs	r2, #1
 800330a:	801a      	strh	r2, [r3, #0]
    	 per = 0xA; // new
 800330c:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <SendTxData+0x288>)
 800330e:	220a      	movs	r2, #10
 8003310:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
     AppData.Buffer[i++] = numberdev; // new номер устройства
 8003312:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <SendTxData+0x284>)
 8003314:	2000      	movs	r0, #0
 8003316:	5e18      	ldrsh	r0, [r3, r0]
 8003318:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <SendTxData+0x248>)
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	25b2      	movs	r5, #178	; 0xb2
 800331e:	006d      	lsls	r5, r5, #1
 8003320:	197b      	adds	r3, r7, r5
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1c59      	adds	r1, r3, #1
 8003326:	197c      	adds	r4, r7, r5
 8003328:	6021      	str	r1, [r4, #0]
 800332a:	18d3      	adds	r3, r2, r3
 800332c:	b2c2      	uxtb	r2, r0
 800332e:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = temperature1;
 8003330:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <SendTxData+0x264>)
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	4b34      	ldr	r3, [pc, #208]	; (8003408 <SendTxData+0x248>)
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	197b      	adds	r3, r7, r5
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	197c      	adds	r4, r7, r5
 8003340:	6021      	str	r1, [r4, #0]
 8003342:	18d4      	adds	r4, r2, r3
 8003344:	f7fd f942 	bl	80005cc <__aeabi_f2uiz>
 8003348:	0003      	movs	r3, r0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = humidity1;
 800334e:	4b33      	ldr	r3, [pc, #204]	; (800341c <SendTxData+0x25c>)
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <SendTxData+0x248>)
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	197b      	adds	r3, r7, r5
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	1c59      	adds	r1, r3, #1
 800335c:	197c      	adds	r4, r7, r5
 800335e:	6021      	str	r1, [r4, #0]
 8003360:	18d4      	adds	r4, r2, r3
 8003362:	f7fd f933 	bl	80005cc <__aeabi_f2uiz>
 8003366:	0003      	movs	r3, r0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = per; // new период включения прибора
 800336c:	4b36      	ldr	r3, [pc, #216]	; (8003448 <SendTxData+0x288>)
 800336e:	2000      	movs	r0, #0
 8003370:	5e18      	ldrsh	r0, [r3, r0]
 8003372:	4b25      	ldr	r3, [pc, #148]	; (8003408 <SendTxData+0x248>)
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	002c      	movs	r4, r5
 8003378:	193b      	adds	r3, r7, r4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	1c59      	adds	r1, r3, #1
 800337e:	193d      	adds	r5, r7, r4
 8003380:	6029      	str	r1, [r5, #0]
 8003382:	18d3      	adds	r3, r2, r3
 8003384:	b2c2      	uxtb	r2, r0
 8003386:	701a      	strb	r2, [r3, #0]
//     temperatureint = temperature1;
//     humidityint = humidity1;
      // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
     chargebattery = GetBatteryLevel(); // new заряд батареи
 8003388:	f001 fd10 	bl	8004dac <GetBatteryLevel>
 800338c:	0003      	movs	r3, r0
 800338e:	b21a      	sxth	r2, r3
 8003390:	4b2e      	ldr	r3, [pc, #184]	; (800344c <SendTxData+0x28c>)
 8003392:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
     AppData.Buffer[i++] = chargebattery;
 8003394:	4b2d      	ldr	r3, [pc, #180]	; (800344c <SendTxData+0x28c>)
 8003396:	2000      	movs	r0, #0
 8003398:	5e18      	ldrsh	r0, [r3, r0]
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <SendTxData+0x248>)
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	1c59      	adds	r1, r3, #1
 80033a4:	193d      	adds	r5, r7, r4
 80033a6:	6029      	str	r1, [r5, #0]
 80033a8:	18d3      	adds	r3, r2, r3
 80033aa:	b2c2      	uxtb	r2, r0
 80033ac:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 80033ae:	193b      	adds	r3, r7, r4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	4b14      	ldr	r3, [pc, #80]	; (8003408 <SendTxData+0x248>)
 80033b6:	705a      	strb	r2, [r3, #1]
  /*  #endif /* CAYENNE_LPP */

   if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 80033b8:	233c      	movs	r3, #60	; 0x3c
 80033ba:	18fa      	adds	r2, r7, r3
 80033bc:	4812      	ldr	r0, [pc, #72]	; (8003408 <SendTxData+0x248>)
 80033be:	2300      	movs	r3, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	f00a fe27 	bl	800e014 <LmHandlerSend>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d106      	bne.n	80033d8 <SendTxData+0x218>
  {
	  APP_LOG(TS_OFF, VLEVEL_L, "Запрос на подключение отправлен\r\n");
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <SendTxData+0x290>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	2100      	movs	r1, #0
 80033d0:	2001      	movs	r0, #1
 80033d2:	f018 fc1f 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, "Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 80033d6:	e011      	b.n	80033fc <SendTxData+0x23c>
  else if (nextTxIn > 0)
 80033d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00e      	beq.n	80033fc <SendTxData+0x23c>
    APP_LOG(TS_OFF, VLEVEL_L, "Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
 80033de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e0:	22fa      	movs	r2, #250	; 0xfa
 80033e2:	0091      	lsls	r1, r2, #2
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fc fe97 	bl	8000118 <__udivsi3>
 80033ea:	0003      	movs	r3, r0
 80033ec:	001a      	movs	r2, r3
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <SendTxData+0x294>)
 80033f0:	9200      	str	r2, [sp, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2100      	movs	r1, #0
 80033f6:	2001      	movs	r0, #1
 80033f8:	f018 fc0c 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b05c      	add	sp, #368	; 0x170
 8003402:	bdb0      	pop	{r4, r5, r7, pc}
 8003404:	fffffe96 	.word	0xfffffe96
 8003408:	20000000 	.word	0x20000000
 800340c:	200013f0 	.word	0x200013f0
 8003410:	20001508 	.word	0x20001508
 8003414:	200014dc 	.word	0x200014dc
 8003418:	2000133c 	.word	0x2000133c
 800341c:	20001388 	.word	0x20001388
 8003420:	200013ec 	.word	0x200013ec
 8003424:	20001338 	.word	0x20001338
 8003428:	20001444 	.word	0x20001444
 800342c:	200013e8 	.word	0x200013e8
 8003430:	0801e014 	.word	0x0801e014
 8003434:	0801e04c 	.word	0x0801e04c
 8003438:	41f00000 	.word	0x41f00000
 800343c:	0801e08c 	.word	0x0801e08c
 8003440:	0801e0dc 	.word	0x0801e0dc
 8003444:	20001510 	.word	0x20001510
 8003448:	200012de 	.word	0x200012de
 800344c:	20000348 	.word	0x20000348
 8003450:	0801e110 	.word	0x0801e110
 8003454:	0801e150 	.word	0x0801e150

08003458 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8003460:	2100      	movs	r1, #0
 8003462:	2002      	movs	r0, #2
 8003464:	f019 f89e 	bl	801c5a4 <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <OnTxTimerEvent+0x20>)
 800346a:	0018      	movs	r0, r3
 800346c:	f019 fa9e 	bl	801c9ac <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200002e8 	.word	0x200002e8

0800347c <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 8003484:	2003      	movs	r0, #3
 8003486:	f002 fba5 	bl	8005bd4 <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}

08003492 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 800349a:	2002      	movs	r0, #2
 800349c:	f002 fb9a 	bl	8005bd4 <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 80034b0:	2001      	movs	r0, #1
 80034b2:	f002 fbab 	bl	8005c0c <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af04      	add	r7, sp, #16
 80034c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d047      	beq.n	800355e <OnTxData+0x9e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d043      	beq.n	800355e <OnTxData+0x9e>
  {
    LED_On(LED_RED2) ;
 80034d6:	2003      	movs	r0, #3
 80034d8:	f002 fb60 	bl	8005b9c <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <OnTxData+0xa8>)
 80034de:	0018      	movs	r0, r3
 80034e0:	f019 fa64 	bl	801c9ac <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n MCPS Подтверждение \r\n");
 80034e4:	4b21      	ldr	r3, [pc, #132]	; (800356c <OnTxData+0xac>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	2002      	movs	r0, #2
 80034ec:	f018 fb92 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " Передача информации :%d", params->AppData.Buffer);
//    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d | Channel:%d", params->UplinkCounter,
//            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Мощность:%d | Канал связи:%d\r\n",
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	7b12      	ldrb	r2, [r2, #12]
 80034f8:	0011      	movs	r1, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	7d12      	ldrb	r2, [r2, #20]
 80034fe:	b252      	sxtb	r2, r2
 8003500:	0010      	movs	r0, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	7d52      	ldrb	r2, [r2, #21]
 8003506:	0014      	movs	r4, r2
 8003508:	4a19      	ldr	r2, [pc, #100]	; (8003570 <OnTxData+0xb0>)
 800350a:	9403      	str	r4, [sp, #12]
 800350c:	9002      	str	r0, [sp, #8]
 800350e:	9101      	str	r1, [sp, #4]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	0013      	movs	r3, r2
 8003514:	2200      	movs	r2, #0
 8003516:	2100      	movs	r1, #0
 8003518:	2002      	movs	r0, #2
 800351a:	f018 fb7b 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
    		params->UplinkCounter, params->AppData.Port, params->TxPower, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <OnTxData+0xb4>)
 8003520:	2200      	movs	r2, #0
 8003522:	2100      	movs	r1, #0
 8003524:	2003      	movs	r0, #3
 8003526:	f018 fb75 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	789b      	ldrb	r3, [r3, #2]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10f      	bne.n	8003552 <OnTxData+0x92>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	78db      	ldrb	r3, [r3, #3]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <OnTxData+0x7e>
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <OnTxData+0xb8>)
 800353c:	e000      	b.n	8003540 <OnTxData+0x80>
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <OnTxData+0xbc>)
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <OnTxData+0xc0>)
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	0013      	movs	r3, r2
 8003546:	2200      	movs	r2, #0
 8003548:	2100      	movs	r1, #0
 800354a:	2003      	movs	r0, #3
 800354c:	f018 fb62 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 8003550:	e005      	b.n	800355e <OnTxData+0x9e>
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n UNCONFIRMED\r\n");
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <OnTxData+0xc4>)
 8003554:	2200      	movs	r2, #0
 8003556:	2100      	movs	r1, #0
 8003558:	2003      	movs	r0, #3
 800355a:	f018 fb5b 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b003      	add	sp, #12
 8003564:	bd90      	pop	{r4, r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	20000300 	.word	0x20000300
 800356c:	0801e1a8 	.word	0x0801e1a8
 8003570:	0801e1d0 	.word	0x0801e1d0
 8003574:	0801e234 	.word	0x0801e234
 8003578:	0801e244 	.word	0x0801e244
 800357c:	0801e248 	.word	0x0801e248
 8003580:	0801e250 	.word	0x0801e250
 8003584:	0801e264 	.word	0x0801e264

08003588 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d029      	beq.n	80035ea <OnJoinRequest+0x62>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	b25b      	sxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11e      	bne.n	80035de <OnJoinRequest+0x56>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <OnJoinRequest+0x6c>)
 80035a2:	0018      	movs	r0, r3
 80035a4:	f019 fa7a 	bl	801ca9c <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 80035a8:	2001      	movs	r0, #1
 80035aa:	f002 fb13 	bl	8005bd4 <BSP_LED_Off>

//      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n      Устройство подключено \r\n  ");
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <OnJoinRequest+0x70>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	2002      	movs	r0, #2
 80035b6:	f018 fb2d 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	789b      	ldrb	r3, [r3, #2]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d106      	bne.n	80035d0 <OnJoinRequest+0x48>
      {
//        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
        APP_LOG(TS_OFF, VLEVEL_M, "  \r\n Активация по персонализации  \r\n");
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <OnJoinRequest+0x74>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	2100      	movs	r1, #0
 80035c8:	2002      	movs	r0, #2
 80035ca:	f018 fb23 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 80035ce:	e00c      	b.n	80035ea <OnJoinRequest+0x62>
        APP_LOG(TS_OFF, VLEVEL_M, "   Активация по воздуху  \r\n");
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <OnJoinRequest+0x78>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	2002      	movs	r0, #2
 80035d8:	f018 fb1c 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
}
 80035dc:	e005      	b.n	80035ea <OnJoinRequest+0x62>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n  Подключение к базовой станции не удалось \r\n");
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <OnJoinRequest+0x7c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	2100      	movs	r1, #0
 80035e4:	2002      	movs	r0, #2
 80035e6:	f018 fb15 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	20000330 	.word	0x20000330
 80035f8:	0801e278 	.word	0x0801e278
 80035fc:	0801e2b0 	.word	0x0801e2b0
 8003600:	0801e2f0 	.word	0x0801e2f0
 8003604:	0801e320 	.word	0x0801e320

08003608 <MX_LPTIM1_Init>:
  }
  */
/*

 */ static void MX_LPTIM1_Init(void) // new
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
	  hlptim1.Instance = LPTIM1;
 800360c:	4b13      	ldr	r3, [pc, #76]	; (800365c <MX_LPTIM1_Init+0x54>)
 800360e:	4a14      	ldr	r2, [pc, #80]	; (8003660 <MX_LPTIM1_Init+0x58>)
 8003610:	601a      	str	r2, [r3, #0]
	  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <MX_LPTIM1_Init+0x54>)
 8003614:	2200      	movs	r2, #0
 8003616:	605a      	str	r2, [r3, #4]
	  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <MX_LPTIM1_Init+0x54>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
	  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <MX_LPTIM1_Init+0x54>)
 8003620:	2200      	movs	r2, #0
 8003622:	60da      	str	r2, [r3, #12]
	  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8003624:	4b0d      	ldr	r3, [pc, #52]	; (800365c <MX_LPTIM1_Init+0x54>)
 8003626:	2200      	movs	r2, #0
 8003628:	611a      	str	r2, [r3, #16]
	  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <MX_LPTIM1_Init+0x54>)
 800362c:	4a0d      	ldr	r2, [pc, #52]	; (8003664 <MX_LPTIM1_Init+0x5c>)
 800362e:	615a      	str	r2, [r3, #20]
	  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003630:	4b0a      	ldr	r3, [pc, #40]	; (800365c <MX_LPTIM1_Init+0x54>)
 8003632:	2200      	movs	r2, #0
 8003634:	621a      	str	r2, [r3, #32]
	  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <MX_LPTIM1_Init+0x54>)
 8003638:	2200      	movs	r2, #0
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
	  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800363c:	4b07      	ldr	r3, [pc, #28]	; (800365c <MX_LPTIM1_Init+0x54>)
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	0412      	lsls	r2, r2, #16
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <MX_LPTIM1_Init+0x54>)
 8003646:	0018      	movs	r0, r3
 8003648:	f001 f81e 	bl	8004688 <HAL_LPTIM_Init>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d001      	beq.n	8003654 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8003650:	f000 faf4 	bl	8003c3c <Error_Handler>
  /*
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	200013f0 	.word	0x200013f0
 8003660:	40007c00 	.word	0x40007c00
 8003664:	0000ffff 	.word	0x0000ffff

08003668 <HAL_LPTIM_MspInit>:
  void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
  {
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	240c      	movs	r4, #12
 8003672:	193b      	adds	r3, r7, r4
 8003674:	0018      	movs	r0, r3
 8003676:	2314      	movs	r3, #20
 8003678:	001a      	movs	r2, r3
 800367a:	2100      	movs	r1, #0
 800367c:	f01a fbad 	bl	801ddda <memset>
    if(hlptim->Instance==LPTIM1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_LPTIM_MspInit+0x8c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d130      	bne.n	80036ec <HAL_LPTIM_MspInit+0x84>
    {
    /* USER CODE BEGIN LPTIM1_MspInit 0 */

    /* USER CODE END LPTIM1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_LPTIM1_CLK_ENABLE();
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_LPTIM_MspInit+0x90>)
 800368c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <HAL_LPTIM_MspInit+0x90>)
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	0609      	lsls	r1, r1, #24
 8003694:	430a      	orrs	r2, r1
 8003696:	639a      	str	r2, [r3, #56]	; 0x38

      __HAL_RCC_GPIOB_CLK_ENABLE();
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <HAL_LPTIM_MspInit+0x90>)
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_LPTIM_MspInit+0x90>)
 800369e:	2102      	movs	r1, #2
 80036a0:	430a      	orrs	r2, r1
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <HAL_LPTIM_MspInit+0x90>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2202      	movs	r2, #2
 80036aa:	4013      	ands	r3, r2
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
      /**LPTIM1 GPIO Configuration
      PB5     ------> LPTIM1_IN1
      PB7     ------> LPTIM1_IN2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80036b0:	0021      	movs	r1, r4
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	22a0      	movs	r2, #160	; 0xa0
 80036b6:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2202      	movs	r2, #2
 80036bc:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	2200      	movs	r2, #0
 80036c2:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c4:	187b      	adds	r3, r7, r1
 80036c6:	2200      	movs	r2, #0
 80036c8:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	2202      	movs	r2, #2
 80036ce:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <HAL_LPTIM_MspInit+0x94>)
 80036d4:	0019      	movs	r1, r3
 80036d6:	0010      	movs	r0, r2
 80036d8:	f004 f870 	bl	80077bc <HAL_GPIO_Init>

      /* LPTIM1 interrupt Init */
      HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80036dc:	2200      	movs	r2, #0
 80036de:	2100      	movs	r1, #0
 80036e0:	200d      	movs	r0, #13
 80036e2:	f003 fd3f 	bl	8007164 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80036e6:	200d      	movs	r0, #13
 80036e8:	f003 fd51 	bl	800718e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM1_MspInit 1 */

    /* USER CODE END LPTIM1_MspInit 1 */
    }

  }
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b009      	add	sp, #36	; 0x24
 80036f2:	bd90      	pop	{r4, r7, pc}
 80036f4:	40007c00 	.word	0x40007c00
 80036f8:	40021000 	.word	0x40021000
 80036fc:	50000400 	.word	0x50000400

08003700 <OnMacProcessNotify>:
    }

  }

static void OnMacProcessNotify(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8003704:	2100      	movs	r1, #0
 8003706:	2001      	movs	r0, #1
 8003708:	f018 ff4c 	bl	801c5a4 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <LoraInfo_Init+0x50>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <LoraInfo_Init+0x50>)
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <LoraInfo_Init+0x50>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <LoraInfo_Init+0x50>)
 800372c:	2200      	movs	r2, #0
 800372e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <LoraInfo_Init+0x50>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	431a      	orrs	r2, r3
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <LoraInfo_Init+0x50>)
 800373a:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <LoraInfo_Init+0x50>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <LoraInfo_Init+0x54>)
 8003746:	2200      	movs	r2, #0
 8003748:	2100      	movs	r1, #0
 800374a:	2000      	movs	r0, #0
 800374c:	f018 fa62 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 8003750:	e7fe      	b.n	8003750 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <LoraInfo_Init+0x50>)
 8003754:	2200      	movs	r2, #0
 8003756:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8003758:	4b02      	ldr	r3, [pc, #8]	; (8003764 <LoraInfo_Init+0x50>)
 800375a:	2203      	movs	r2, #3
 800375c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	2000034c 	.word	0x2000034c
 8003768:	0801e3c0 	.word	0x0801e3c0

0800376c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8003770:	4b01      	ldr	r3, [pc, #4]	; (8003778 <LoraInfo_GetPtr+0xc>)
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000034c 	.word	0x2000034c

0800377c <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 8003780:	4b22      	ldr	r3, [pc, #136]	; (800380c <MX_ADC_Init+0x90>)
 8003782:	4a23      	ldr	r2, [pc, #140]	; (8003810 <MX_ADC_Init+0x94>)
 8003784:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <MX_ADC_Init+0x90>)
 8003788:	2200      	movs	r2, #0
 800378a:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800378c:	4b1f      	ldr	r3, [pc, #124]	; (800380c <MX_ADC_Init+0x90>)
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	0612      	lsls	r2, r2, #24
 8003792:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <MX_ADC_Init+0x90>)
 8003796:	2200      	movs	r2, #0
 8003798:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <MX_ADC_Init+0x90>)
 800379c:	2201      	movs	r2, #1
 800379e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <MX_ADC_Init+0x90>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <MX_ADC_Init+0x90>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <MX_ADC_Init+0x90>)
 80037ae:	2207      	movs	r2, #7
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <MX_ADC_Init+0x90>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <MX_ADC_Init+0x90>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <MX_ADC_Init+0x90>)
 80037c0:	2220      	movs	r2, #32
 80037c2:	2100      	movs	r1, #0
 80037c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <MX_ADC_Init+0x90>)
 80037c8:	2221      	movs	r2, #33	; 0x21
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <MX_ADC_Init+0x90>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80037d4:	4b0d      	ldr	r3, [pc, #52]	; (800380c <MX_ADC_Init+0x90>)
 80037d6:	2204      	movs	r2, #4
 80037d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <MX_ADC_Init+0x90>)
 80037dc:	222c      	movs	r2, #44	; 0x2c
 80037de:	2100      	movs	r1, #0
 80037e0:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <MX_ADC_Init+0x90>)
 80037e4:	0018      	movs	r0, r3
 80037e6:	f002 fe8b 	bl	8006500 <HAL_ADC_Init>
 80037ea:	1e03      	subs	r3, r0, #0
 80037ec:	d001      	beq.n	80037f2 <MX_ADC_Init+0x76>
  {
    Error_Handler();
 80037ee:	f000 fa25 	bl	8003c3c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <MX_ADC_Init+0x90>)
 80037f4:	2100      	movs	r1, #0
 80037f6:	0018      	movs	r0, r3
 80037f8:	f003 fb74 	bl	8006ee4 <HAL_ADCEx_Calibration_Start>
 80037fc:	1e03      	subs	r3, r0, #0
 80037fe:	d001      	beq.n	8003804 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 8003800:	f000 fa1c 	bl	8003c3c <Error_Handler>
  }
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	2000138c 	.word	0x2000138c
 8003810:	40012400 	.word	0x40012400

08003814 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a12      	ldr	r2, [pc, #72]	; (800386c <HAL_ADC_MspInit+0x58>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d11e      	bne.n	8003864 <HAL_ADC_MspInit+0x50>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003826:	240c      	movs	r4, #12
 8003828:	193b      	adds	r3, r7, r4
 800382a:	0018      	movs	r0, r3
 800382c:	2314      	movs	r3, #20
 800382e:	001a      	movs	r2, r3
 8003830:	2100      	movs	r1, #0
 8003832:	f01a fad2 	bl	801ddda <memset>

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_ADC_MspInit+0x5c>)
 8003838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_ADC_MspInit+0x5c>)
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	0089      	lsls	r1, r1, #2
 8003840:	430a      	orrs	r2, r1
 8003842:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4; //N
 8003844:	193b      	adds	r3, r7, r4
 8003846:	2210      	movs	r2, #16
 8003848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; //N
 800384a:	193b      	adds	r3, r7, r4
 800384c:	2203      	movs	r2, #3
 800384e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //N
 8003850:	193b      	adds	r3, r7, r4
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //N
 8003856:	193a      	adds	r2, r7, r4
 8003858:	23a0      	movs	r3, #160	; 0xa0
 800385a:	05db      	lsls	r3, r3, #23
 800385c:	0011      	movs	r1, r2
 800385e:	0018      	movs	r0, r3
 8003860:	f003 ffac 	bl	80077bc <HAL_GPIO_Init>
    /* USER CODE END ADC_MspInit 1
     * */
  }
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b009      	add	sp, #36	; 0x24
 800386a:	bd90      	pop	{r4, r7, pc}
 800386c:	40012400 	.word	0x40012400
 8003870:	40021000 	.word	0x40021000

08003874 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <HAL_ADC_MspDeInit+0x4c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d118      	bne.n	80038b8 <HAL_ADC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_ADC_MspDeInit+0x50>)
 8003888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800388a:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <HAL_ADC_MspDeInit+0x50>)
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	0089      	lsls	r1, r1, #2
 8003890:	430a      	orrs	r2, r1
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_ADC_MspDeInit+0x50>)
 8003896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_ADC_MspDeInit+0x50>)
 800389a:	490b      	ldr	r1, [pc, #44]	; (80038c8 <HAL_ADC_MspDeInit+0x54>)
 800389c:	400a      	ands	r2, r1
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_ADC_MspDeInit+0x50>)
 80038a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <HAL_ADC_MspDeInit+0x50>)
 80038a6:	4908      	ldr	r1, [pc, #32]	; (80038c8 <HAL_ADC_MspDeInit+0x54>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);//N
 80038ac:	23a0      	movs	r3, #160	; 0xa0
 80038ae:	05db      	lsls	r3, r3, #23
 80038b0:	2110      	movs	r1, #16
 80038b2:	0018      	movs	r0, r3
 80038b4:	f004 f900 	bl	8007ab8 <HAL_GPIO_DeInit>
    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b002      	add	sp, #8
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40012400 	.word	0x40012400
 80038c4:	40021000 	.word	0x40021000
 80038c8:	fffffdff 	.word	0xfffffdff

080038cc <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 80038d0:	4b02      	ldr	r3, [pc, #8]	; (80038dc <SYS_InitMeasurement+0x10>)
 80038d2:	4a03      	ldr	r2, [pc, #12]	; (80038e0 <SYS_InitMeasurement+0x14>)
 80038d4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	2000138c 	.word	0x2000138c
 80038e0:	40012400 	.word	0x40012400

080038e4 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80038e4:	b5b0      	push	{r4, r5, r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 80038ea:	250e      	movs	r5, #14
 80038ec:	197b      	adds	r3, r7, r5
 80038ee:	2200      	movs	r2, #0
 80038f0:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80038f6:	1dbc      	adds	r4, r7, #6
 80038f8:	f000 f83c 	bl	8003974 <SYS_GetBatteryLevel>
 80038fc:	0003      	movs	r3, r0
 80038fe:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <SYS_GetTemperatureLevel+0x80>)
 8003902:	0018      	movs	r0, r3
 8003904:	f000 f864 	bl	80039d0 <ADC_ReadChannels>
 8003908:	0003      	movs	r3, r0
 800390a:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800390c:	1dbb      	adds	r3, r7, #6
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	4353      	muls	r3, r2
 8003914:	4914      	ldr	r1, [pc, #80]	; (8003968 <SYS_GetTemperatureLevel+0x84>)
 8003916:	0018      	movs	r0, r3
 8003918:	f7fc fbfe 	bl	8000118 <__udivsi3>
 800391c:	0003      	movs	r3, r0
 800391e:	001a      	movs	r2, r3
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <SYS_GetTemperatureLevel+0x88>)
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	1ad2      	subs	r2, r2, r3
 8003926:	0013      	movs	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	189b      	adds	r3, r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <SYS_GetTemperatureLevel+0x8c>)
 8003932:	8812      	ldrh	r2, [r2, #0]
 8003934:	0011      	movs	r1, r2
 8003936:	4a0d      	ldr	r2, [pc, #52]	; (800396c <SYS_GetTemperatureLevel+0x88>)
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	1a8a      	subs	r2, r1, r2
 800393c:	0011      	movs	r1, r2
 800393e:	0018      	movs	r0, r3
 8003940:	f7fc fc74 	bl	800022c <__divsi3>
 8003944:	0003      	movs	r3, r0
 8003946:	b29b      	uxth	r3, r3
 8003948:	22f0      	movs	r2, #240	; 0xf0
 800394a:	0152      	lsls	r2, r2, #5
 800394c:	4694      	mov	ip, r2
 800394e:	4463      	add	r3, ip
 8003950:	b29a      	uxth	r2, r3
 8003952:	197b      	adds	r3, r7, r5
 8003954:	801a      	strh	r2, [r3, #0]

//  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);

  return (int16_t) temperatureDegreeC;
 8003956:	197b      	adds	r3, r7, r5
 8003958:	2200      	movs	r2, #0
 800395a:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bdb0      	pop	{r4, r5, r7, pc}
 8003964:	48040000 	.word	0x48040000
 8003968:	00000bb8 	.word	0x00000bb8
 800396c:	1ff8007a 	.word	0x1ff8007a
 8003970:	1ff8007e 	.word	0x1ff8007e

08003974 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800397a:	1dbb      	adds	r3, r7, #6
 800397c:	2200      	movs	r2, #0
 800397e:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <SYS_GetBatteryLevel+0x50>)
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f822 	bl	80039d0 <ADC_ReadChannels>
 800398c:	0003      	movs	r3, r0
 800398e:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 8003996:	1dbb      	adds	r3, r7, #6
 8003998:	2200      	movs	r2, #0
 800399a:	801a      	strh	r2, [r3, #0]
 800399c:	e00c      	b.n	80039b8 <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <SYS_GetBatteryLevel+0x54>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	001a      	movs	r2, r3
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <SYS_GetBatteryLevel+0x58>)
 80039a6:	4353      	muls	r3, r2
 80039a8:	6839      	ldr	r1, [r7, #0]
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7fc fbb4 	bl	8000118 <__udivsi3>
 80039b0:	0003      	movs	r3, r0
 80039b2:	001a      	movs	r2, r3
 80039b4:	1dbb      	adds	r3, r7, #6
 80039b6:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 80039b8:	1dbb      	adds	r3, r7, #6
 80039ba:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	b002      	add	sp, #8
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	44020000 	.word	0x44020000
 80039c8:	1ff80078 	.word	0x1ff80078
 80039cc:	00000bb8 	.word	0x00000bb8

080039d0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80039dc:	230c      	movs	r3, #12
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	0018      	movs	r0, r3
 80039e2:	2308      	movs	r3, #8
 80039e4:	001a      	movs	r2, r3
 80039e6:	2100      	movs	r1, #0
 80039e8:	f01a f9f7 	bl	801ddda <memset>

  MX_ADC_Init();
 80039ec:	f7ff fec6 	bl	800377c <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <ADC_ReadChannels+0xd4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2208      	movs	r2, #8
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d1f9      	bne.n	80039f2 <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 80039fe:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <ADC_ReadChannels+0xd8>)
 8003a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <ADC_ReadChannels+0xd8>)
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	0089      	lsls	r1, r1, #2
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <ADC_ReadChannels+0xdc>)
 8003a0e:	2100      	movs	r1, #0
 8003a10:	0018      	movs	r0, r3
 8003a12:	f003 fa67 	bl	8006ee4 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8003a16:	240c      	movs	r4, #12
 8003a18:	193b      	adds	r3, r7, r4
 8003a1a:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <ADC_ReadChannels+0xe0>)
 8003a1c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <ADC_ReadChannels+0xe4>)
 8003a22:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003a24:	193a      	adds	r2, r7, r4
 8003a26:	4b21      	ldr	r3, [pc, #132]	; (8003aac <ADC_ReadChannels+0xdc>)
 8003a28:	0011      	movs	r1, r2
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f003 f8ae 	bl	8006b8c <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8003a30:	0021      	movs	r1, r4
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	2280      	movs	r2, #128	; 0x80
 8003a3c:	0152      	lsls	r2, r2, #5
 8003a3e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a40:	187a      	adds	r2, r7, r1
 8003a42:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <ADC_ReadChannels+0xdc>)
 8003a44:	0011      	movs	r1, r2
 8003a46:	0018      	movs	r0, r3
 8003a48:	f003 f8a0 	bl	8006b8c <HAL_ADC_ConfigChannel>
 8003a4c:	1e03      	subs	r3, r0, #0
 8003a4e:	d001      	beq.n	8003a54 <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 8003a50:	f000 f8f4 	bl	8003c3c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <ADC_ReadChannels+0xdc>)
 8003a56:	0018      	movs	r0, r3
 8003a58:	f002 ff62 	bl	8006920 <HAL_ADC_Start>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d001      	beq.n	8003a64 <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 8003a60:	f000 f8ec 	bl	8003c3c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003a64:	2301      	movs	r3, #1
 8003a66:	425a      	negs	r2, r3
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <ADC_ReadChannels+0xdc>)
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f002 ffeb 	bl	8006a48 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8003a72:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <ADC_ReadChannels+0xdc>)
 8003a74:	0018      	movs	r0, r3
 8003a76:	f002 ffa7 	bl	80069c8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <ADC_ReadChannels+0xdc>)
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f003 f879 	bl	8006b74 <HAL_ADC_GetValue>
 8003a82:	0003      	movs	r3, r0
 8003a84:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <ADC_ReadChannels+0xdc>)
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f002 fead 	bl	80067e8 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <ADC_ReadChannels+0xd8>)
 8003a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <ADC_ReadChannels+0xd8>)
 8003a94:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <ADC_ReadChannels+0xe8>)
 8003a96:	400a      	ands	r2, r1
 8003a98:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 8003a9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b007      	add	sp, #28
 8003aa2:	bd90      	pop	{r4, r7, pc}
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	2000138c 	.word	0x2000138c
 8003ab0:	0007ffff 	.word	0x0007ffff
 8003ab4:	00001001 	.word	0x00001001
 8003ab8:	fffffdff 	.word	0xfffffdff

08003abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <MX_DMA_Init+0x38>)
 8003ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <MX_DMA_Init+0x38>)
 8003ac8:	2101      	movs	r1, #1
 8003aca:	430a      	orrs	r2, r1
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <MX_DMA_Init+0x38>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2100      	movs	r1, #0
 8003ade:	200b      	movs	r0, #11
 8003ae0:	f003 fb40 	bl	8007164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003ae4:	200b      	movs	r0, #11
 8003ae6:	f003 fb52 	bl	800718e <HAL_NVIC_EnableIRQ>

}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b002      	add	sp, #8
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40021000 	.word	0x40021000

08003af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003afc:	f002 fc86 	bl	800640c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b00:	f000 f806 	bl	8003b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8003b04:	f7ff fa08 	bl	8002f18 <MX_LoRaWAN_Init>
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 8003b08:	f7ff fa0f 	bl	8002f2a <MX_LoRaWAN_Process>
 8003b0c:	e7fc      	b.n	8003b08 <main+0x10>
	...

08003b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b09d      	sub	sp, #116	; 0x74
 8003b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b16:	2438      	movs	r4, #56	; 0x38
 8003b18:	193b      	adds	r3, r7, r4
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	2338      	movs	r3, #56	; 0x38
 8003b1e:	001a      	movs	r2, r3
 8003b20:	2100      	movs	r1, #0
 8003b22:	f01a f95a 	bl	801ddda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b26:	2324      	movs	r3, #36	; 0x24
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	2314      	movs	r3, #20
 8003b2e:	001a      	movs	r2, r3
 8003b30:	2100      	movs	r1, #0
 8003b32:	f01a f952 	bl	801ddda <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b36:	003b      	movs	r3, r7
 8003b38:	0018      	movs	r0, r3
 8003b3a:	2324      	movs	r3, #36	; 0x24
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f01a f94b 	bl	801ddda <memset>
  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003b44:	0021      	movs	r1, r4
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	2202      	movs	r2, #2
 8003b4a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	2200      	movs	r2, #0
 8003b50:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	2201      	movs	r2, #1
 8003b56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;// n
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	2210      	movs	r2, #16
 8003b62:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	2202      	movs	r2, #2
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	0312      	lsls	r2, r2, #12
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	0412      	lsls	r2, r2, #16
 8003b7e:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	0018      	movs	r0, r3
 8003b84:	f004 ff90 	bl	8008aa8 <HAL_RCC_OscConfig>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003b8c:	f000 f856 	bl	8003c3c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <SystemClock_Config+0x120>)
 8003b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b94:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <SystemClock_Config+0x120>)
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	0549      	lsls	r1, r1, #21
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b9e:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <SystemClock_Config+0x124>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a25      	ldr	r2, [pc, #148]	; (8003c38 <SystemClock_Config+0x128>)
 8003ba4:	401a      	ands	r2, r3
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <SystemClock_Config+0x124>)
 8003ba8:	2180      	movs	r1, #128	; 0x80
 8003baa:	0109      	lsls	r1, r1, #4
 8003bac:	430a      	orrs	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <SystemClock_Config+0x124>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d0f9      	beq.n	8003bb2 <SystemClock_Config+0xa2>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8003bbe:	2124      	movs	r1, #36	; 0x24
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	601a      	str	r2, [r3, #0]
		 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2203      	movs	r2, #3
 8003bca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2101      	movs	r1, #1
 8003be2:	0018      	movs	r0, r3
 8003be4:	f005 fb34 	bl	8009250 <HAL_RCC_ClockConfig>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d001      	beq.n	8003bf0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003bec:	f000 f826 	bl	8003c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003bf0:	003b      	movs	r3, r7
 8003bf2:	22ab      	movs	r2, #171	; 0xab
 8003bf4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bf6:	003b      	movs	r3, r7
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003bfc:	003b      	movs	r3, r7
 8003bfe:	2200      	movs	r2, #0
 8003c00:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c02:	003b      	movs	r3, r7
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c08:	003b      	movs	r3, r7
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	0292      	lsls	r2, r2, #10
 8003c0e:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003c10:	003b      	movs	r3, r7
 8003c12:	2200      	movs	r2, #0
 8003c14:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c16:	003b      	movs	r3, r7
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f005 fd3d 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8003c1e:	1e03      	subs	r3, r0, #0
 8003c20:	d001      	beq.n	8003c26 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8003c22:	f000 f80b 	bl	8003c3c <Error_Handler>
  }
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b01d      	add	sp, #116	; 0x74
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40007000 	.word	0x40007000
 8003c38:	ffffe7ff 	.word	0xffffe7ff

08003c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8003c40:	e7fe      	b.n	8003c40 <Error_Handler+0x4>
	...

08003c44 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b090      	sub	sp, #64	; 0x40
 8003c48:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003c4a:	232c      	movs	r3, #44	; 0x2c
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	0018      	movs	r0, r3
 8003c50:	2314      	movs	r3, #20
 8003c52:	001a      	movs	r2, r3
 8003c54:	2100      	movs	r1, #0
 8003c56:	f01a f8c0 	bl	801ddda <memset>
  RTC_DateTypeDef sDate = {0};
 8003c5a:	2328      	movs	r3, #40	; 0x28
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003c62:	003b      	movs	r3, r7
 8003c64:	0018      	movs	r0, r3
 8003c66:	2328      	movs	r3, #40	; 0x28
 8003c68:	001a      	movs	r2, r3
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f01a f8b5 	bl	801ddda <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c70:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <MX_RTC_Init+0x134>)
 8003c72:	4a42      	ldr	r2, [pc, #264]	; (8003d7c <MX_RTC_Init+0x138>)
 8003c74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c76:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <MX_RTC_Init+0x134>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8003c7c:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <MX_RTC_Init+0x134>)
 8003c7e:	221f      	movs	r2, #31
 8003c80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8003c82:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <MX_RTC_Init+0x134>)
 8003c84:	4a3e      	ldr	r2, [pc, #248]	; (8003d80 <MX_RTC_Init+0x13c>)
 8003c86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <MX_RTC_Init+0x134>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c8e:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <MX_RTC_Init+0x134>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c94:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <MX_RTC_Init+0x134>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c9a:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <MX_RTC_Init+0x134>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ca0:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <MX_RTC_Init+0x134>)
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f005 fe4e 	bl	8009944 <HAL_RTC_Init>
 8003ca8:	1e03      	subs	r3, r0, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003cac:	f7ff ffc6 	bl	8003c3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003cb0:	212c      	movs	r1, #44	; 0x2c
 8003cb2:	187b      	adds	r3, r7, r1
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	2200      	movs	r2, #0
 8003cbc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003cbe:	187b      	adds	r3, r7, r1
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003cca:	187b      	adds	r3, r7, r1
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003cd0:	1879      	adds	r1, r7, r1
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <MX_RTC_Init+0x134>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f005 fed2 	bl	8009a80 <HAL_RTC_SetTime>
 8003cdc:	1e03      	subs	r3, r0, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003ce0:	f7ff ffac 	bl	8003c3c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003ce4:	2128      	movs	r1, #40	; 0x28
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	2201      	movs	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2201      	movs	r2, #1
 8003cf0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003cfe:	1879      	adds	r1, r7, r1
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <MX_RTC_Init+0x134>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	0018      	movs	r0, r3
 8003d06:	f005 ffdb 	bl	8009cc0 <HAL_RTC_SetDate>
 8003d0a:	1e03      	subs	r3, r0, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003d0e:	f7ff ff95 	bl	8003c3c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003d12:	003b      	movs	r3, r7
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003d18:	003b      	movs	r3, r7
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003d1e:	003b      	movs	r3, r7
 8003d20:	2200      	movs	r2, #0
 8003d22:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003d24:	003b      	movs	r3, r7
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d2a:	003b      	movs	r3, r7
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d30:	003b      	movs	r3, r7
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003d36:	003b      	movs	r3, r7
 8003d38:	2200      	movs	r2, #0
 8003d3a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003d3c:	003b      	movs	r3, r7
 8003d3e:	22a0      	movs	r2, #160	; 0xa0
 8003d40:	0512      	lsls	r2, r2, #20
 8003d42:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003d44:	003b      	movs	r3, r7
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 8003d4a:	003b      	movs	r3, r7
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	211e      	movs	r1, #30
 8003d50:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003d52:	003b      	movs	r3, r7
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	0052      	lsls	r2, r2, #1
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003d5a:	0039      	movs	r1, r7
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <MX_RTC_Init+0x134>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	0018      	movs	r0, r3
 8003d62:	f006 f8a9 	bl	8009eb8 <HAL_RTC_SetAlarm_IT>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d001      	beq.n	8003d6e <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003d6a:	f7ff ff67 	bl	8003c3c <Error_Handler>
  }

}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b010      	add	sp, #64	; 0x40
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	20001420 	.word	0x20001420
 8003d7c:	40002800 	.word	0x40002800
 8003d80:	000003ff 	.word	0x000003ff

08003d84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b091      	sub	sp, #68	; 0x44
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d8c:	2408      	movs	r4, #8
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	0018      	movs	r0, r3
 8003d92:	2338      	movs	r3, #56	; 0x38
 8003d94:	001a      	movs	r2, r3
 8003d96:	2100      	movs	r1, #0
 8003d98:	f01a f81f 	bl	801ddda <memset>
  if (rtcHandle->Instance == RTC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <HAL_RTC_MspInit+0x78>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d126      	bne.n	8003df4 <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003da6:	193b      	adds	r3, r7, r4
 8003da8:	2204      	movs	r2, #4
 8003daa:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	0052      	lsls	r2, r2, #1
 8003db2:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 8003db4:	193b      	adds	r3, r7, r4
 8003db6:	2200      	movs	r2, #0
 8003db8:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003dba:	193b      	adds	r3, r7, r4
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003dc0:	193b      	adds	r3, r7, r4
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dc6:	193b      	adds	r3, r7, r4
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f004 fe6d 	bl	8008aa8 <HAL_RCC_OscConfig>
 8003dce:	1e03      	subs	r3, r0, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8003dd2:	f7ff ff33 	bl	8003c3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <HAL_RTC_MspInit+0x7c>)
 8003dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RTC_MspInit+0x7c>)
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	02c9      	lsls	r1, r1, #11
 8003de0:	430a      	orrs	r2, r1
 8003de2:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003de4:	2200      	movs	r2, #0
 8003de6:	2100      	movs	r1, #0
 8003de8:	2002      	movs	r0, #2
 8003dea:	f003 f9bb 	bl	8007164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 8003dee:	2002      	movs	r0, #2
 8003df0:	f003 f9cd 	bl	800718e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b011      	add	sp, #68	; 0x44
 8003dfa:	bd90      	pop	{r4, r7, pc}
 8003dfc:	40002800 	.word	0x40002800
 8003e00:	40021000 	.word	0x40021000

08003e04 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	0c1b      	lsrs	r3, r3, #16
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <RTC_IF_Init+0x60>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	4053      	eors	r3, r2
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01f      	beq.n	8003e70 <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e30:	1d3b      	adds	r3, r7, #4
 8003e32:	2220      	movs	r2, #32
 8003e34:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003e36:	1d3b      	adds	r3, r7, #4
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	0252      	lsls	r2, r2, #9
 8003e3c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e3e:	1d3b      	adds	r3, r7, #4
 8003e40:	0018      	movs	r0, r3
 8003e42:	f005 fc29 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d000      	beq.n	8003e4c <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 8003e4a:	e7fe      	b.n	8003e4a <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 8003e4c:	f7ff fefa 	bl	8003c44 <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	005a      	lsls	r2, r3, #1
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <RTC_IF_Init+0x64>)
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f006 f979 	bl	800a150 <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003e5e:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <RTC_IF_Init+0x64>)
 8003e60:	0018      	movs	r0, r3
 8003e62:	f006 fb23 	bl	800a4ac <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003e66:	f000 f859 	bl	8003f1c <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <RTC_IF_Init+0x60>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b00a      	add	sp, #40	; 0x28
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	2000035c 	.word	0x2000035c
 8003e80:	20001420 	.word	0x20001420

08003e84 <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <RTC_IF_StartTimer+0x5c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	5e9b      	ldrsh	r3, [r3, r2]
 8003e92:	3303      	adds	r3, #3
 8003e94:	001c      	movs	r4, r3
 8003e96:	f000 f861 	bl	8003f5c <RTC_IF_GetTimerElapsedTime>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	429c      	cmp	r4, r3
 8003ea2:	d204      	bcs.n	8003eae <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	2002      	movs	r0, #2
 8003ea8:	f018 f96c 	bl	801c184 <UTIL_LPM_SetStopMode>
 8003eac:	e003      	b.n	8003eb6 <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003eae:	2101      	movs	r1, #1
 8003eb0:	2002      	movs	r0, #2
 8003eb2:	f018 f967 	bl	801c184 <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003eb6:	f018 f9c5 	bl	801c244 <UTIL_LPM_GetMode>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d106      	bne.n	8003ece <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <RTC_IF_StartTimer+0x5c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 f959 	bl	8004188 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b003      	add	sp, #12
 8003ede:	bd90      	pop	{r4, r7, pc}
 8003ee0:	2000035e 	.word	0x2000035e

08003ee4 <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <RTC_IF_StopTimer+0x30>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	22ff      	movs	r2, #255	; 0xff
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <RTC_IF_StopTimer+0x30>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4908      	ldr	r1, [pc, #32]	; (8003f18 <RTC_IF_StopTimer+0x34>)
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	005a      	lsls	r2, r3, #1
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <RTC_IF_StopTimer+0x30>)
 8003f02:	0011      	movs	r1, r2
 8003f04:	0018      	movs	r0, r3
 8003f06:	f006 f923 	bl	800a150 <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	20001420 	.word	0x20001420
 8003f18:	fffffe7f 	.word	0xfffffe7f

08003f1c <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003f20:	4a06      	ldr	r2, [pc, #24]	; (8003f3c <RTC_IF_SetTimerContext+0x20>)
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <RTC_IF_SetTimerContext+0x24>)
 8003f24:	0011      	movs	r1, r2
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 fa94 	bl	8004454 <RTC_GetCalendarValue>
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <RTC_IF_SetTimerContext+0x28>)
 8003f30:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <RTC_IF_SetTimerContext+0x28>)
 8003f34:	681b      	ldr	r3, [r3, #0]
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	2000038c 	.word	0x2000038c
 8003f40:	200003a0 	.word	0x200003a0
 8003f44:	20000388 	.word	0x20000388

08003f48 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003f4c:	4b02      	ldr	r3, [pc, #8]	; (8003f58 <RTC_IF_GetTimerContext+0x10>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	20000388 	.word	0x20000388

08003f5c <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003f62:	2308      	movs	r3, #8
 8003f64:	18fa      	adds	r2, r7, r3
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	0011      	movs	r1, r2
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fa72 	bl	8004454 <RTC_GetCalendarValue>
 8003f70:	0003      	movs	r3, r0
 8003f72:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <RTC_IF_GetTimerElapsedTime+0x28>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	1ad3      	subs	r3, r2, r3
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b008      	add	sp, #32
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000388 	.word	0x20000388

08003f88 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <RTC_IF_GetTimerValue+0x30>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	18fa      	adds	r2, r7, r3
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	0011      	movs	r1, r2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 fa56 	bl	8004454 <RTC_GetCalendarValue>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 8003fac:	69fb      	ldr	r3, [r7, #28]
}
 8003fae:	0018      	movs	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b008      	add	sp, #32
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	2000035c 	.word	0x2000035c

08003fbc <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003fc0:	2303      	movs	r3, #3
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003fc8:	b5b0      	push	{r4, r5, r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	000a      	movs	r2, r1
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	000b      	movs	r3, r1
 8003fd8:	0e51      	lsrs	r1, r2, #25
 8003fda:	01dd      	lsls	r5, r3, #7
 8003fdc:	430d      	orrs	r5, r1
 8003fde:	01d4      	lsls	r4, r2, #7
 8003fe0:	227d      	movs	r2, #125	; 0x7d
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	0020      	movs	r0, r4
 8003fe6:	0029      	movs	r1, r5
 8003fe8:	f7fc faa8 	bl	800053c <__aeabi_uldivmod>
 8003fec:	0002      	movs	r2, r0
 8003fee:	000b      	movs	r3, r1
 8003ff0:	0013      	movs	r3, r2
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b002      	add	sp, #8
 8003ff8:	bdb0      	pop	{r4, r5, r7, pc}

08003ffa <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8003ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffc:	b089      	sub	sp, #36	; 0x24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	0ed1      	lsrs	r1, r2, #27
 8004010:	0158      	lsls	r0, r3, #5
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	4308      	orrs	r0, r1
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	0153      	lsls	r3, r2, #5
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	68fc      	ldr	r4, [r7, #12]
 8004022:	6939      	ldr	r1, [r7, #16]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	1a5b      	subs	r3, r3, r1
 8004028:	4194      	sbcs	r4, r2
 800402a:	001a      	movs	r2, r3
 800402c:	0023      	movs	r3, r4
 800402e:	0f91      	lsrs	r1, r2, #30
 8004030:	0098      	lsls	r0, r3, #2
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4308      	orrs	r0, r1
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	0093      	lsls	r3, r2, #2
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	6838      	ldr	r0, [r7, #0]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	1812      	adds	r2, r2, r0
 8004048:	414b      	adcs	r3, r1
 800404a:	0659      	lsls	r1, r3, #25
 800404c:	09d0      	lsrs	r0, r2, #7
 800404e:	0005      	movs	r5, r0
 8004050:	0028      	movs	r0, r5
 8004052:	4308      	orrs	r0, r1
 8004054:	0005      	movs	r5, r0
 8004056:	09db      	lsrs	r3, r3, #7
 8004058:	001e      	movs	r6, r3
 800405a:	002b      	movs	r3, r5
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b009      	add	sp, #36	; 0x24
 8004062:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004064 <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	0018      	movs	r0, r3
 8004078:	f7ff ffa6 	bl	8003fc8 <RTC_IF_Convert_ms2Tick>
 800407c:	0003      	movs	r3, r0
 800407e:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 8004080:	f7ff ff82 	bl	8003f88 <RTC_IF_GetTimerValue>
 8004084:	0003      	movs	r3, r0
 8004086:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8004088:	e000      	b.n	800408c <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 800408a:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800408c:	f7ff ff7c 	bl	8003f88 <RTC_IF_GetTimerValue>
 8004090:	0002      	movs	r2, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	429a      	cmp	r2, r3
 800409a:	d8f6      	bhi.n	800408a <RTC_IF_DelayMs+0x26>
  }
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b004      	add	sp, #16
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 80040ae:	f018 fda1 	bl	801cbf4 <UTIL_TIMER_IRQ_Handler>
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b002      	add	sp, #8
 80040b8:	bd80      	pop	{r7, pc}

080040ba <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 80040ba:	b5b0      	push	{r4, r5, r7, lr}
 80040bc:	b08c      	sub	sp, #48	; 0x30
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80040c2:	230c      	movs	r3, #12
 80040c4:	18fa      	adds	r2, r7, r3
 80040c6:	2308      	movs	r3, #8
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	0011      	movs	r1, r2
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 f9c1 	bl	8004454 <RTC_GetCalendarValue>
 80040d2:	0003      	movs	r3, r0
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d6:	2300      	movs	r3, #0
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	059b      	lsls	r3, r3, #22
 80040de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e0:	0a94      	lsrs	r4, r2, #10
 80040e2:	431c      	orrs	r4, r3
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	0a9d      	lsrs	r5, r3, #10
 80040e8:	0023      	movs	r3, r4
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	059b      	lsls	r3, r3, #22
 80040f0:	0d9b      	lsrs	r3, r3, #22
 80040f2:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff ff7f 	bl	8003ffa <RTC_IF_Convert_Tick2ms>
 80040fc:	0003      	movs	r3, r0
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	801a      	strh	r2, [r3, #0]

  return seconds;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b00c      	add	sp, #48	; 0x30
 800410c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004110 <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4b04      	ldr	r3, [pc, #16]	; (800412c <RTC_IF_BkUp_Write_Seconds+0x1c>)
 800411c:	2100      	movs	r1, #0
 800411e:	0018      	movs	r0, r3
 8004120:	f006 f99a 	bl	800a458 <HAL_RTCEx_BKUPWrite>
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20001420 	.word	0x20001420

08004130 <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 800413c:	2101      	movs	r1, #1
 800413e:	0018      	movs	r0, r3
 8004140:	f006 f98a 	bl	800a458 <HAL_RTCEx_BKUPWrite>
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20001420 	.word	0x20001420

08004150 <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <RTC_IF_BkUp_Read_Seconds+0x18>)
 8004156:	2100      	movs	r1, #0
 8004158:	0018      	movs	r0, r3
 800415a:	f006 f993 	bl	800a484 <HAL_RTCEx_BKUPRead>
 800415e:	0003      	movs	r3, r0
}
 8004160:	0018      	movs	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	20001420 	.word	0x20001420

0800416c <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 8004172:	2101      	movs	r1, #1
 8004174:	0018      	movs	r0, r3
 8004176:	f006 f985 	bl	800a484 <HAL_RTCEx_BKUPRead>
 800417a:	0003      	movs	r3, r0
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	20001420 	.word	0x20001420

08004188 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8004188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800418a:	b08d      	sub	sp, #52	; 0x34
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8004190:	242e      	movs	r4, #46	; 0x2e
 8004192:	193b      	adds	r3, r7, r4
 8004194:	2200      	movs	r2, #0
 8004196:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8004198:	232c      	movs	r3, #44	; 0x2c
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	2200      	movs	r2, #0
 800419e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 80041a0:	232a      	movs	r3, #42	; 0x2a
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2200      	movs	r2, #0
 80041a6:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 80041a8:	2328      	movs	r3, #40	; 0x28
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	2200      	movs	r2, #0
 80041ae:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 80041b0:	2526      	movs	r5, #38	; 0x26
 80041b2:	197b      	adds	r3, r7, r5
 80041b4:	2200      	movs	r2, #0
 80041b6:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80041b8:	2610      	movs	r6, #16
 80041ba:	19ba      	adds	r2, r7, r6
 80041bc:	4b9b      	ldr	r3, [pc, #620]	; (800442c <RTC_StartWakeUpAlarm+0x2a4>)
 80041be:	3304      	adds	r3, #4
 80041c0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80041c2:	c223      	stmia	r2!, {r0, r1, r5}
 80041c4:	cb03      	ldmia	r3!, {r0, r1}
 80041c6:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80041c8:	230c      	movs	r3, #12
 80041ca:	001d      	movs	r5, r3
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	4a97      	ldr	r2, [pc, #604]	; (800442c <RTC_StartWakeUpAlarm+0x2a4>)
 80041d0:	6992      	ldr	r2, [r2, #24]
 80041d2:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 80041d4:	f7ff fe86 	bl	8003ee4 <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80041d8:	19bb      	adds	r3, r7, r6
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	193b      	adds	r3, r7, r4
 80041e0:	4993      	ldr	r1, [pc, #588]	; (8004430 <RTC_StartWakeUpAlarm+0x2a8>)
 80041e2:	1a8a      	subs	r2, r1, r2
 80041e4:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	059b      	lsls	r3, r3, #22
 80041ec:	0d9b      	lsrs	r3, r3, #22
 80041ee:	b299      	uxth	r1, r3
 80041f0:	193b      	adds	r3, r7, r4
 80041f2:	193a      	adds	r2, r7, r4
 80041f4:	8812      	ldrh	r2, [r2, #0]
 80041f6:	188a      	adds	r2, r1, r2
 80041f8:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	0a9b      	lsrs	r3, r3, #10
 80041fe:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8004200:	002b      	movs	r3, r5
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	789a      	ldrb	r2, [r3, #2]
 8004206:	2526      	movs	r5, #38	; 0x26
 8004208:	197b      	adds	r3, r7, r5
 800420a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800420c:	e00a      	b.n	8004224 <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a88      	ldr	r2, [pc, #544]	; (8004434 <RTC_StartWakeUpAlarm+0x2ac>)
 8004212:	4694      	mov	ip, r2
 8004214:	4463      	add	r3, ip
 8004216:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8004218:	2126      	movs	r1, #38	; 0x26
 800421a:	187b      	adds	r3, r7, r1
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	187b      	adds	r3, r7, r1
 8004220:	3201      	adds	r2, #1
 8004222:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a84      	ldr	r2, [pc, #528]	; (8004438 <RTC_StartWakeUpAlarm+0x2b0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d8f0      	bhi.n	800420e <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800422c:	2310      	movs	r3, #16
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	2328      	movs	r3, #40	; 0x28
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004238:	e00a      	b.n	8004250 <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a7f      	ldr	r2, [pc, #508]	; (800443c <RTC_StartWakeUpAlarm+0x2b4>)
 800423e:	4694      	mov	ip, r2
 8004240:	4463      	add	r3, ip
 8004242:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8004244:	2128      	movs	r1, #40	; 0x28
 8004246:	187b      	adds	r3, r7, r1
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	187b      	adds	r3, r7, r1
 800424c:	3201      	adds	r2, #1
 800424e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	23e1      	movs	r3, #225	; 0xe1
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	429a      	cmp	r2, r3
 8004258:	d2ef      	bcs.n	800423a <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800425a:	2310      	movs	r3, #16
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	785a      	ldrb	r2, [r3, #1]
 8004260:	232a      	movs	r3, #42	; 0x2a
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004266:	e008      	b.n	800427a <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3b3c      	subs	r3, #60	; 0x3c
 800426c:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 800426e:	212a      	movs	r1, #42	; 0x2a
 8004270:	187b      	adds	r3, r7, r1
 8004272:	881a      	ldrh	r2, [r3, #0]
 8004274:	187b      	adds	r3, r7, r1
 8004276:	3201      	adds	r2, #1
 8004278:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b3b      	cmp	r3, #59	; 0x3b
 800427e:	d8f3      	bhi.n	8004268 <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8004280:	2310      	movs	r3, #16
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	789b      	ldrb	r3, [r3, #2]
 8004286:	b299      	uxth	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	b29a      	uxth	r2, r3
 800428c:	232c      	movs	r3, #44	; 0x2c
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	188a      	adds	r2, r1, r2
 8004292:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8004294:	e00d      	b.n	80042b2 <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 8004296:	222e      	movs	r2, #46	; 0x2e
 8004298:	18bb      	adds	r3, r7, r2
 800429a:	18ba      	adds	r2, r7, r2
 800429c:	8812      	ldrh	r2, [r2, #0]
 800429e:	4968      	ldr	r1, [pc, #416]	; (8004440 <RTC_StartWakeUpAlarm+0x2b8>)
 80042a0:	468c      	mov	ip, r1
 80042a2:	4462      	add	r2, ip
 80042a4:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	187b      	adds	r3, r7, r1
 80042aa:	881a      	ldrh	r2, [r3, #0]
 80042ac:	187b      	adds	r3, r7, r1
 80042ae:	3201      	adds	r2, #1
 80042b0:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80042b2:	232e      	movs	r3, #46	; 0x2e
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	881a      	ldrh	r2, [r3, #0]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	429a      	cmp	r2, r3
 80042be:	d2ea      	bcs.n	8004296 <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80042c0:	e00b      	b.n	80042da <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80042c2:	222c      	movs	r2, #44	; 0x2c
 80042c4:	18bb      	adds	r3, r7, r2
 80042c6:	18ba      	adds	r2, r7, r2
 80042c8:	8812      	ldrh	r2, [r2, #0]
 80042ca:	3a3c      	subs	r2, #60	; 0x3c
 80042cc:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 80042ce:	212a      	movs	r1, #42	; 0x2a
 80042d0:	187b      	adds	r3, r7, r1
 80042d2:	881a      	ldrh	r2, [r3, #0]
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	3201      	adds	r2, #1
 80042d8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80042da:	232c      	movs	r3, #44	; 0x2c
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	2b3b      	cmp	r3, #59	; 0x3b
 80042e2:	d8ee      	bhi.n	80042c2 <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80042e4:	e00b      	b.n	80042fe <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80042e6:	222a      	movs	r2, #42	; 0x2a
 80042e8:	18bb      	adds	r3, r7, r2
 80042ea:	18ba      	adds	r2, r7, r2
 80042ec:	8812      	ldrh	r2, [r2, #0]
 80042ee:	3a3c      	subs	r2, #60	; 0x3c
 80042f0:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 80042f2:	2128      	movs	r1, #40	; 0x28
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	881a      	ldrh	r2, [r3, #0]
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	3201      	adds	r2, #1
 80042fc:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80042fe:	232a      	movs	r3, #42	; 0x2a
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	2b3b      	cmp	r3, #59	; 0x3b
 8004306:	d8ee      	bhi.n	80042e6 <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004308:	e00b      	b.n	8004322 <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 800430a:	2228      	movs	r2, #40	; 0x28
 800430c:	18bb      	adds	r3, r7, r2
 800430e:	18ba      	adds	r2, r7, r2
 8004310:	8812      	ldrh	r2, [r2, #0]
 8004312:	3a18      	subs	r2, #24
 8004314:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8004316:	2126      	movs	r1, #38	; 0x26
 8004318:	187b      	adds	r3, r7, r1
 800431a:	881a      	ldrh	r2, [r3, #0]
 800431c:	187b      	adds	r3, r7, r1
 800431e:	3201      	adds	r2, #1
 8004320:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004322:	2328      	movs	r3, #40	; 0x28
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	2b17      	cmp	r3, #23
 800432a:	d8ee      	bhi.n	800430a <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 800432c:	210c      	movs	r1, #12
 800432e:	187b      	adds	r3, r7, r1
 8004330:	78db      	ldrb	r3, [r3, #3]
 8004332:	2203      	movs	r2, #3
 8004334:	4013      	ands	r3, r2
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d119      	bne.n	8004370 <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800433c:	187b      	adds	r3, r7, r1
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	3b01      	subs	r3, #1
 8004342:	4a40      	ldr	r2, [pc, #256]	; (8004444 <RTC_StartWakeUpAlarm+0x2bc>)
 8004344:	5cd3      	ldrb	r3, [r2, r3]
 8004346:	b29b      	uxth	r3, r3
 8004348:	2426      	movs	r4, #38	; 0x26
 800434a:	193a      	adds	r2, r7, r4
 800434c:	8812      	ldrh	r2, [r2, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d928      	bls.n	80043a4 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8004352:	193b      	adds	r3, r7, r4
 8004354:	8818      	ldrh	r0, [r3, #0]
 8004356:	187b      	adds	r3, r7, r1
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	3b01      	subs	r3, #1
 800435c:	4a39      	ldr	r2, [pc, #228]	; (8004444 <RTC_StartWakeUpAlarm+0x2bc>)
 800435e:	5cd3      	ldrb	r3, [r2, r3]
 8004360:	0019      	movs	r1, r3
 8004362:	f7fc f849 	bl	80003f8 <__aeabi_idivmod>
 8004366:	000b      	movs	r3, r1
 8004368:	001a      	movs	r2, r3
 800436a:	193b      	adds	r3, r7, r4
 800436c:	801a      	strh	r2, [r3, #0]
 800436e:	e019      	b.n	80043a4 <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8004370:	210c      	movs	r1, #12
 8004372:	187b      	adds	r3, r7, r1
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	3b01      	subs	r3, #1
 8004378:	4a33      	ldr	r2, [pc, #204]	; (8004448 <RTC_StartWakeUpAlarm+0x2c0>)
 800437a:	5cd3      	ldrb	r3, [r2, r3]
 800437c:	b29b      	uxth	r3, r3
 800437e:	2426      	movs	r4, #38	; 0x26
 8004380:	193a      	adds	r2, r7, r4
 8004382:	8812      	ldrh	r2, [r2, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d90d      	bls.n	80043a4 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004388:	193b      	adds	r3, r7, r4
 800438a:	8818      	ldrh	r0, [r3, #0]
 800438c:	187b      	adds	r3, r7, r1
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	3b01      	subs	r3, #1
 8004392:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <RTC_StartWakeUpAlarm+0x2c0>)
 8004394:	5cd3      	ldrb	r3, [r2, r3]
 8004396:	0019      	movs	r1, r3
 8004398:	f7fc f82e 	bl	80003f8 <__aeabi_idivmod>
 800439c:	000b      	movs	r3, r1
 800439e:	001a      	movs	r2, r3
 80043a0:	193b      	adds	r3, r7, r4
 80043a2:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80043a4:	232e      	movs	r3, #46	; 0x2e
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	4a21      	ldr	r2, [pc, #132]	; (8004430 <RTC_StartWakeUpAlarm+0x2a8>)
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	001a      	movs	r2, r3
 80043b0:	4b26      	ldr	r3, [pc, #152]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 80043b2:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80043b4:	4b25      	ldr	r3, [pc, #148]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 80043b6:	22a0      	movs	r2, #160	; 0xa0
 80043b8:	0512      	lsls	r2, r2, #20
 80043ba:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80043bc:	232c      	movs	r3, #44	; 0x2c
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	4b21      	ldr	r3, [pc, #132]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 80043c6:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80043c8:	232a      	movs	r3, #42	; 0x2a
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 80043d2:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80043d4:	2328      	movs	r3, #40	; 0x28
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 80043de:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80043e0:	2326      	movs	r3, #38	; 0x26
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b2d9      	uxtb	r1, r3
 80043e8:	4b18      	ldr	r3, [pc, #96]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 80043ea:	2220      	movs	r2, #32
 80043ec:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80043ee:	2310      	movs	r3, #16
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	78da      	ldrb	r2, [r3, #3]
 80043f4:	4b15      	ldr	r3, [pc, #84]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 80043f6:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80043f8:	4b14      	ldr	r3, [pc, #80]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 8004400:	2200      	movs	r2, #0
 8004402:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	0052      	lsls	r2, r2, #1
 800440a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 800440e:	2200      	movs	r2, #0
 8004410:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 8004414:	2200      	movs	r2, #0
 8004416:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8004418:	490c      	ldr	r1, [pc, #48]	; (800444c <RTC_StartWakeUpAlarm+0x2c4>)
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <RTC_StartWakeUpAlarm+0x2c8>)
 800441c:	2200      	movs	r2, #0
 800441e:	0018      	movs	r0, r3
 8004420:	f005 fd4a 	bl	8009eb8 <HAL_RTC_SetAlarm_IT>
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b00d      	add	sp, #52	; 0x34
 800442a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442c:	20000388 	.word	0x20000388
 8004430:	000003ff 	.word	0x000003ff
 8004434:	fffeae80 	.word	0xfffeae80
 8004438:	0001517f 	.word	0x0001517f
 800443c:	fffff1f0 	.word	0xfffff1f0
 8004440:	fffffc00 	.word	0xfffffc00
 8004444:	0801e41c 	.word	0x0801e41c
 8004448:	0801e410 	.word	0x0801e410
 800444c:	20000360 	.word	0x20000360
 8004450:	20001420 	.word	0x20001420

08004454 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	4b42      	ldr	r3, [pc, #264]	; (8004570 <RTC_GetCalendarValue+0x11c>)
 8004466:	2200      	movs	r2, #0
 8004468:	0018      	movs	r0, r3
 800446a:	f005 fbcd 	bl	8009c08 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <RTC_GetCalendarValue+0x120>)
 8004470:	0018      	movs	r0, r3
 8004472:	f7ff fcc7 	bl	8003e04 <LL_RTC_TIME_GetSubSecond>
 8004476:	0003      	movs	r3, r0
 8004478:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4b3c      	ldr	r3, [pc, #240]	; (8004570 <RTC_GetCalendarValue+0x11c>)
 800447e:	2200      	movs	r2, #0
 8004480:	0018      	movs	r0, r3
 8004482:	f005 fccb 	bl	8009e1c <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	4b39      	ldr	r3, [pc, #228]	; (8004570 <RTC_GetCalendarValue+0x11c>)
 800448a:	2200      	movs	r2, #0
 800448c:	0018      	movs	r0, r3
 800448e:	f005 fbbb 	bl	8009c08 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8004492:	4b38      	ldr	r3, [pc, #224]	; (8004574 <RTC_GetCalendarValue+0x120>)
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff fcb5 	bl	8003e04 <LL_RTC_TIME_GetSubSecond>
 800449a:	0002      	movs	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4293      	cmp	r3, r2
 80044a0:	d1e5      	bne.n	800446e <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	78db      	ldrb	r3, [r3, #3]
 80044a6:	001a      	movs	r2, r3
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <RTC_GetCalendarValue+0x124>)
 80044aa:	4353      	muls	r3, r2
 80044ac:	3303      	adds	r3, #3
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	78db      	ldrb	r3, [r3, #3]
 80044b6:	2203      	movs	r2, #3
 80044b8:	4013      	ands	r3, r2
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <RTC_GetCalendarValue+0x70>
 80044c0:	4b2e      	ldr	r3, [pc, #184]	; (800457c <RTC_GetCalendarValue+0x128>)
 80044c2:	e000      	b.n	80044c6 <RTC_GetCalendarValue+0x72>
 80044c4:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <RTC_GetCalendarValue+0x12c>)
 80044c6:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	0013      	movs	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	3301      	adds	r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	da00      	bge.n	80044e0 <RTC_GetCalendarValue+0x8c>
 80044de:	3301      	adds	r3, #1
 80044e0:	105b      	asrs	r3, r3, #1
 80044e2:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	40da      	lsrs	r2, r3
 80044f0:	0013      	movs	r3, r2
 80044f2:	2203      	movs	r2, #3
 80044f4:	4013      	ands	r3, r2
 80044f6:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	18d3      	adds	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	789b      	ldrb	r3, [r3, #2]
 8004502:	001a      	movs	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	18d3      	adds	r3, r2, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	0013      	movs	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	189b      	adds	r3, r3, r2
 8004514:	011a      	lsls	r2, r3, #4
 8004516:	1ad2      	subs	r2, r2, r3
 8004518:	0113      	lsls	r3, r2, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	01db      	lsls	r3, r3, #7
 800451e:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	789b      	ldrb	r3, [r3, #2]
 8004524:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	001a      	movs	r2, r3
 800452c:	0013      	movs	r3, r2
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	011a      	lsls	r2, r3, #4
 8004534:	1ad2      	subs	r2, r2, r3
 8004536:	0113      	lsls	r3, r2, #4
 8004538:	001a      	movs	r2, r3
 800453a:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	001a      	movs	r2, r3
 8004542:	0013      	movs	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	18c3      	adds	r3, r0, r3
 800454c:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	18d3      	adds	r3, r2, r3
 8004552:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	029a      	lsls	r2, r3, #10
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <RTC_GetCalendarValue+0x130>)
 8004560:	4694      	mov	ip, r2
 8004562:	4463      	add	r3, ip
 8004564:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 8004566:	697b      	ldr	r3, [r7, #20]
}
 8004568:	0018      	movs	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	b006      	add	sp, #24
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20001420 	.word	0x20001420
 8004574:	40002800 	.word	0x40002800
 8004578:	000005b5 	.word	0x000005b5
 800457c:	00445550 	.word	0x00445550
 8004580:	0099aaa0 	.word	0x0099aaa0
 8004584:	000003ff 	.word	0x000003ff

08004588 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a2:	f3ef 8310 	mrs	r3, PRIMASK
 80045a6:	607b      	str	r3, [r7, #4]
  return(result);
 80045a8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80045aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80045ac:	b672      	cpsid	i
}
 80045ae:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 80045b0:	f001 fcdc 	bl	8005f6c <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <PWR_EnterStopMode+0x48>)
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7ff f95c 	bl	8003874 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <PWR_EnterStopMode+0x4c>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <PWR_EnterStopMode+0x4c>)
 80045c2:	2104      	movs	r1, #4
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f383 8810 	msr	PRIMASK, r3
}
 80045d2:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80045d4:	2101      	movs	r1, #1
 80045d6:	2001      	movs	r0, #1
 80045d8:	f004 f9ee 	bl	80089b8 <HAL_PWR_EnterSTOPMode>
}
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b004      	add	sp, #16
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	2000138c 	.word	0x2000138c
 80045e8:	40007000 	.word	0x40007000

080045ec <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 80045fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80045fc:	b672      	cpsid	i
}
 80045fe:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <PWR_ExitStopMode+0x7c>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b18      	ldr	r3, [pc, #96]	; (8004668 <PWR_ExitStopMode+0x7c>)
 8004606:	2101      	movs	r1, #1
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	4b16      	ldr	r3, [pc, #88]	; (8004668 <PWR_ExitStopMode+0x7c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2204      	movs	r2, #4
 8004614:	4013      	ands	r3, r2
 8004616:	d0fa      	beq.n	800460e <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <PWR_ExitStopMode+0x7c>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4b12      	ldr	r3, [pc, #72]	; (8004668 <PWR_ExitStopMode+0x7c>)
 800461e:	2180      	movs	r1, #128	; 0x80
 8004620:	0449      	lsls	r1, r1, #17
 8004622:	430a      	orrs	r2, r1
 8004624:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <PWR_ExitStopMode+0x7c>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	049b      	lsls	r3, r3, #18
 8004630:	4013      	ands	r3, r2
 8004632:	d0f9      	beq.n	8004628 <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <PWR_ExitStopMode+0x7c>)
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <PWR_ExitStopMode+0x7c>)
 800463a:	2103      	movs	r1, #3
 800463c:	430a      	orrs	r2, r1
 800463e:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8004640:	46c0      	nop			; (mov r8, r8)
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <PWR_ExitStopMode+0x7c>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	220c      	movs	r2, #12
 8004648:	4013      	ands	r3, r2
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d1f9      	bne.n	8004642 <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 800464e:	f001 fb87 	bl	8005d60 <CMWX1ZZABZ0XX_RADIO_IoInit>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f383 8810 	msr	PRIMASK, r3
}
 800465c:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	46bd      	mov	sp, r7
 8004662:	b004      	add	sp, #16
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	40021000 	.word	0x40021000

0800466c <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004670:	2101      	movs	r1, #1
 8004672:	2000      	movs	r0, #0
 8004674:	f004 f948 	bl	8008908 <HAL_PWR_EnterSLEEPMode>
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	af00      	add	r7, sp, #0
}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06e      	b.n	8004778 <HAL_LPTIM_Init+0xf0>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	222e      	movs	r2, #46	; 0x2e
 800469e:	5c9b      	ldrb	r3, [r3, r2]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d107      	bne.n	80046b6 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	222d      	movs	r2, #45	; 0x2d
 80046aa:	2100      	movs	r1, #0
 80046ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fe ffd9 	bl	8003668 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	222e      	movs	r2, #46	; 0x2e
 80046ba:	2102      	movs	r1, #2
 80046bc:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d103      	bne.n	80046d6 <HAL_LPTIM_Init+0x4e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2206      	movs	r2, #6
 80046d2:	4393      	bics	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	4a29      	ldr	r2, [pc, #164]	; (8004780 <HAL_LPTIM_Init+0xf8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a28      	ldr	r2, [pc, #160]	; (8004784 <HAL_LPTIM_Init+0xfc>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	22d8      	movs	r2, #216	; 0xd8
 80046f4:	4393      	bics	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a23      	ldr	r2, [pc, #140]	; (8004788 <HAL_LPTIM_Init+0x100>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004708:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800470e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004714:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800471a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d107      	bne.n	800473a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004732:	4313      	orrs	r3, r2
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d104      	bne.n	800474c <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <HAL_LPTIM_Init+0xf8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <HAL_LPTIM_Init+0xde>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 800475e:	4313      	orrs	r3, r2
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	222e      	movs	r2, #46	; 0x2e
 8004772:	2101      	movs	r1, #1
 8004774:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	0018      	movs	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	b004      	add	sp, #16
 800477e:	bd80      	pop	{r7, pc}
 8004780:	0000ffff 	.word	0x0000ffff
 8004784:	ffff1fff 	.word	0xffff1fff
 8004788:	ff19f1f8 	.word	0xff19f1f8

0800478c <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	222e      	movs	r2, #46	; 0x2e
 800479a:	2102      	movs	r1, #2
 800479c:	5499      	strb	r1, [r3, r2]

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2206      	movs	r2, #6
 80047aa:	4393      	bics	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	0449      	lsls	r1, r1, #17
 80047ce:	430a      	orrs	r2, r1
 80047d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2101      	movs	r1, #1
 80047de:	430a      	orrs	r2, r1
 80047e0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2210      	movs	r2, #16
 80047e8:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2110      	movs	r1, #16
 80047f6:	0018      	movs	r0, r3
 80047f8:	f000 f922 	bl	8004a40 <LPTIM_WaitForFlag>
 80047fc:	0003      	movs	r3, r0
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d101      	bne.n	8004806 <HAL_LPTIM_Encoder_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e031      	b.n	800486a <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0018      	movs	r0, r3
 800480a:	f000 f951 	bl	8004ab0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f000 f908 	bl	8004a26 <HAL_LPTIM_GetState>
 8004816:	0003      	movs	r3, r0
 8004818:	2b03      	cmp	r3, #3
 800481a:	d101      	bne.n	8004820 <HAL_LPTIM_Encoder_Start_IT+0x94>
  {
    return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e024      	b.n	800486a <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2140      	movs	r1, #64	; 0x40
 800482c:	430a      	orrs	r2, r1
 800482e:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2120      	movs	r1, #32
 800483c:	430a      	orrs	r2, r1
 800483e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2101      	movs	r1, #1
 800484c:	430a      	orrs	r2, r1
 800484e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2104      	movs	r1, #4
 800485c:	430a      	orrs	r2, r1
 800485e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	222e      	movs	r2, #46	; 0x2e
 8004864:	2101      	movs	r1, #1
 8004866:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	0018      	movs	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	b004      	add	sp, #16
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	4013      	ands	r3, r2
 8004884:	2b01      	cmp	r3, #1
 8004886:	d10e      	bne.n	80048a6 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2201      	movs	r2, #1
 8004890:	4013      	ands	r3, r2
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2201      	movs	r2, #1
 800489c:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 f888 	bl	80049b6 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2202      	movs	r2, #2
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d10e      	bne.n	80048d2 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2202      	movs	r2, #2
 80048bc:	4013      	ands	r3, r2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d107      	bne.n	80048d2 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2202      	movs	r2, #2
 80048c8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 f87a 	bl	80049c6 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2204      	movs	r2, #4
 80048da:	4013      	ands	r3, r2
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d10e      	bne.n	80048fe <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2204      	movs	r2, #4
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d107      	bne.n	80048fe <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2204      	movs	r2, #4
 80048f4:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 f86c 	bl	80049d6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2208      	movs	r2, #8
 8004906:	4013      	ands	r3, r2
 8004908:	2b08      	cmp	r3, #8
 800490a:	d10e      	bne.n	800492a <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2208      	movs	r2, #8
 8004914:	4013      	ands	r3, r2
 8004916:	2b08      	cmp	r3, #8
 8004918:	d107      	bne.n	800492a <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2208      	movs	r2, #8
 8004920:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f85e 	bl	80049e6 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2210      	movs	r2, #16
 8004932:	4013      	ands	r3, r2
 8004934:	2b10      	cmp	r3, #16
 8004936:	d10e      	bne.n	8004956 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2210      	movs	r2, #16
 8004940:	4013      	ands	r3, r2
 8004942:	2b10      	cmp	r3, #16
 8004944:	d107      	bne.n	8004956 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2210      	movs	r2, #16
 800494c:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 f850 	bl	80049f6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2220      	movs	r2, #32
 800495e:	4013      	ands	r3, r2
 8004960:	2b20      	cmp	r3, #32
 8004962:	d10e      	bne.n	8004982 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2220      	movs	r2, #32
 800496c:	4013      	ands	r3, r2
 800496e:	2b20      	cmp	r3, #32
 8004970:	d107      	bne.n	8004982 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2220      	movs	r2, #32
 8004978:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0018      	movs	r0, r3
 800497e:	f000 f842 	bl	8004a06 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2240      	movs	r2, #64	; 0x40
 800498a:	4013      	ands	r3, r2
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d10e      	bne.n	80049ae <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2240      	movs	r2, #64	; 0x40
 8004998:	4013      	ands	r3, r2
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d107      	bne.n	80049ae <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2240      	movs	r2, #64	; 0x40
 80049a4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 f834 	bl	8004a16 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b002      	add	sp, #8
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b002      	add	sp, #8
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b002      	add	sp, #8
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b002      	add	sp, #8
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b002      	add	sp, #8
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	222e      	movs	r2, #46	; 0x2e
 8004a32:	5c9b      	ldrb	r3, [r3, r2]
 8004a34:	b2db      	uxtb	r3, r3
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b002      	add	sp, #8
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004a4a:	230f      	movs	r3, #15
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <LPTIM_WaitForFlag+0x68>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4915      	ldr	r1, [pc, #84]	; (8004aac <LPTIM_WaitForFlag+0x6c>)
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fb fb5d 	bl	8000118 <__udivsi3>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	001a      	movs	r2, r3
 8004a62:	0013      	movs	r3, r2
 8004a64:	015b      	lsls	r3, r3, #5
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	189b      	adds	r3, r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d103      	bne.n	8004a84 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8004a7c:	230f      	movs	r3, #15
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	2203      	movs	r2, #3
 8004a82:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d002      	beq.n	8004a9a <LPTIM_WaitForFlag+0x5a>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ea      	bne.n	8004a70 <LPTIM_WaitForFlag+0x30>

  return result;
 8004a9a:	230f      	movs	r3, #15
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	781b      	ldrb	r3, [r3, #0]
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b004      	add	sp, #16
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000070 	.word	0x20000070
 8004aac:	00004e20 	.word	0x00004e20

08004ab0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004abc:	b672      	cpsid	i
}
 8004abe:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	001a      	movs	r2, r3
 8004ac6:	4b55      	ldr	r3, [pc, #340]	; (8004c1c <LPTIM_Disable+0x16c>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d106      	bne.n	8004ada <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004acc:	4b54      	ldr	r3, [pc, #336]	; (8004c20 <LPTIM_Disable+0x170>)
 8004ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad0:	23c0      	movs	r3, #192	; 0xc0
 8004ad2:	031b      	lsls	r3, r3, #12
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61fb      	str	r3, [r7, #28]
      break;
 8004ad8:	e000      	b.n	8004adc <LPTIM_Disable+0x2c>
    default:
      break;
 8004ada:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	001a      	movs	r2, r3
 8004b02:	4b46      	ldr	r3, [pc, #280]	; (8004c1c <LPTIM_Disable+0x16c>)
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d10d      	bne.n	8004b24 <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004b08:	4b45      	ldr	r3, [pc, #276]	; (8004c20 <LPTIM_Disable+0x170>)
 8004b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b0c:	4b44      	ldr	r3, [pc, #272]	; (8004c20 <LPTIM_Disable+0x170>)
 8004b0e:	2180      	movs	r1, #128	; 0x80
 8004b10:	0609      	lsls	r1, r1, #24
 8004b12:	430a      	orrs	r2, r1
 8004b14:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004b16:	4b42      	ldr	r3, [pc, #264]	; (8004c20 <LPTIM_Disable+0x170>)
 8004b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b1a:	4b41      	ldr	r3, [pc, #260]	; (8004c20 <LPTIM_Disable+0x170>)
 8004b1c:	0052      	lsls	r2, r2, #1
 8004b1e:	0852      	lsrs	r2, r2, #1
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004b22:	e000      	b.n	8004b26 <LPTIM_Disable+0x76>
    default:
      break;
 8004b24:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <LPTIM_Disable+0x82>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d05b      	beq.n	8004bea <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	001a      	movs	r2, r3
 8004b38:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <LPTIM_Disable+0x16c>)
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d106      	bne.n	8004b4c <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004b3e:	4b38      	ldr	r3, [pc, #224]	; (8004c20 <LPTIM_Disable+0x170>)
 8004b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b42:	4b37      	ldr	r3, [pc, #220]	; (8004c20 <LPTIM_Disable+0x170>)
 8004b44:	4937      	ldr	r1, [pc, #220]	; (8004c24 <LPTIM_Disable+0x174>)
 8004b46:	400a      	ands	r2, r1
 8004b48:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004b4a:	e000      	b.n	8004b4e <LPTIM_Disable+0x9e>
      default:
        break;
 8004b4c:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2101      	movs	r1, #1
 8004b60:	430a      	orrs	r2, r1
 8004b62:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2108      	movs	r1, #8
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7ff ff65 	bl	8004a40 <LPTIM_WaitForFlag>
 8004b76:	0003      	movs	r3, r0
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d103      	bne.n	8004b84 <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	222e      	movs	r2, #46	; 0x2e
 8004b80:	2103      	movs	r1, #3
 8004b82:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01b      	beq.n	8004bca <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2110      	movs	r1, #16
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7ff ff46 	bl	8004a40 <LPTIM_WaitForFlag>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d103      	bne.n	8004bc2 <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	222e      	movs	r2, #46	; 0x2e
 8004bbe:	2103      	movs	r1, #3
 8004bc0:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2210      	movs	r2, #16
 8004bc8:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	001a      	movs	r2, r3
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <LPTIM_Disable+0x16c>)
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d10b      	bne.n	8004bee <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <LPTIM_Disable+0x170>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <LPTIM_Disable+0x174>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	0019      	movs	r1, r3
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <LPTIM_Disable+0x170>)
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004be8:	e002      	b.n	8004bf0 <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	e000      	b.n	8004bf0 <LPTIM_Disable+0x140>
        break;
 8004bee:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	438a      	bics	r2, r1
 8004bfe:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c10:	b662      	cpsie	i
}
 8004c12:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b008      	add	sp, #32
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40007c00 	.word	0x40007c00
 8004c20:	40021000 	.word	0x40021000
 8004c24:	fff3ffff 	.word	0xfff3ffff

08004c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <HAL_MspInit+0x3c>)
 8004c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <HAL_MspInit+0x3c>)
 8004c32:	2180      	movs	r1, #128	; 0x80
 8004c34:	0549      	lsls	r1, r1, #21
 8004c36:	430a      	orrs	r2, r1
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8004c3a:	f003 fe57 	bl	80088ec <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8004c3e:	f003 ff25 	bl	8008a8c <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_MspInit+0x40>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <HAL_MspInit+0x40>)
 8004c48:	2108      	movs	r1, #8
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_MspInit+0x40>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_MspInit+0x40>)
 8004c54:	2108      	movs	r1, #8
 8004c56:	438a      	bics	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8004c5a:	f003 ff09 	bl	8008a70 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40022000 	.word	0x40022000

08004c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c70:	46c0      	nop			; (mov r8, r8)
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	e7fd      	b.n	8004c7a <HardFault_Handler+0x4>

08004c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c96:	f001 fbd9 	bl	800644c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <EXTI0_1_IRQHandler+0x1c>)
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f002 fd64 	bl	8007774 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <EXTI0_1_IRQHandler+0x20>)
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f002 fd60 	bl	8007774 <HAL_EXTI_IRQHandler>
#endif
}
 8004cb4:	46c0      	nop			; (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	20001678 	.word	0x20001678
 8004cc0:	20001670 	.word	0x20001670

08004cc4 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <EXTI4_15_IRQHandler+0x1c>)
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f002 fd4c 	bl	8007774 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8004cdc:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <EXTI4_15_IRQHandler+0x20>)
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f002 fd48 	bl	8007774 <HAL_EXTI_IRQHandler>
#endif
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	20001668 	.word	0x20001668
 8004cf0:	20001680 	.word	0x20001680

08004cf4 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f002 fc2a 	bl	8007556 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	200015e0 	.word	0x200015e0

08004d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <USART2_IRQHandler+0x14>)
 8004d12:	0018      	movs	r0, r3
 8004d14:	f006 f87c 	bl	800ae10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d18:	46c0      	nop			; (mov r8, r8)
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	200015e0 	.word	0x200015e0

08004d24 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <LPTIM1_IRQHandler+0x14>)
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f7ff fda1 	bl	8004872 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	200013f0 	.word	0x200013f0

08004d3c <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 8004d40:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <RTC_IRQHandler+0x14>)
 8004d42:	0018      	movs	r0, r3
 8004d44:	f005 faa4 	bl	800a290 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004d48:	46c0      	nop			; (mov r8, r8)
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	20001420 	.word	0x20001420

08004d54 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8004d58:	f017 fde0 	bl	801c91c <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004d5c:	f000 f8ee 	bl	8004f3c <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 8004d60:	f000 f9ba 	bl	80050d8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8004d64:	f016 ff36 	bl	801bbd4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <SystemApp_Init+0x44>)
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f016 ffea 	bl	801bd44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8004d70:	2002      	movs	r0, #2
 8004d72:	f016 fff5 	bl	801bd60 <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8004d76:	f7fe fda9 	bl	80038cc <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 8004d7a:	f001 fa25 	bl	80061c8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 8004d7e:	f000 ffef 	bl	8005d60 <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 8004d82:	f000 fa4d 	bl	8005220 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8004d86:	f017 f9ed 	bl	801c164 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f017 fa29 	bl	801c1e4 <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	08004ef1 	.word	0x08004ef1

08004d9c <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8004da0:	f017 fa82 	bl	801c2a8 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8004db8:	1d3c      	adds	r4, r7, #4
 8004dba:	f7fe fddb 	bl	8003974 <SYS_GetBatteryLevel>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <GetBatteryLevel+0x70>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d903      	bls.n	8004dd4 <GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8004dcc:	1dfb      	adds	r3, r7, #7
 8004dce:	22fe      	movs	r2, #254	; 0xfe
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e01d      	b.n	8004e10 <GetBatteryLevel+0x64>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	881a      	ldrh	r2, [r3, #0]
 8004dd8:	23e1      	movs	r3, #225	; 0xe1
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d203      	bcs.n	8004de8 <GetBatteryLevel+0x3c>
  {
    batteryLevel = 0;
 8004de0:	1dfb      	adds	r3, r7, #7
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	e013      	b.n	8004e10 <GetBatteryLevel+0x64>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8004de8:	1d3b      	adds	r3, r7, #4
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	4a0c      	ldr	r2, [pc, #48]	; (8004e20 <GetBatteryLevel+0x74>)
 8004dee:	4694      	mov	ip, r2
 8004df0:	4463      	add	r3, ip
 8004df2:	001a      	movs	r2, r3
 8004df4:	0013      	movs	r3, r2
 8004df6:	01db      	lsls	r3, r3, #7
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	2396      	movs	r3, #150	; 0x96
 8004e00:	00d9      	lsls	r1, r3, #3
 8004e02:	0010      	movs	r0, r2
 8004e04:	f7fb f988 	bl	8000118 <__udivsi3>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	1dfb      	adds	r3, r7, #7
 8004e0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	781b      	ldrb	r3, [r3, #0]
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b003      	add	sp, #12
 8004e1a:	bd90      	pop	{r4, r7, pc}
 8004e1c:	00000bb8 	.word	0x00000bb8
 8004e20:	fffff8f8 	.word	0xfffff8f8

08004e24 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8004e2a:	1dbb      	adds	r3, r7, #6
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004e30:	f7fe fd58 	bl	80038e4 <SYS_GetTemperatureLevel>
 8004e34:	1e03      	subs	r3, r0, #0
 8004e36:	da00      	bge.n	8004e3a <GetTemperatureLevel+0x16>
 8004e38:	33ff      	adds	r3, #255	; 0xff
 8004e3a:	121b      	asrs	r3, r3, #8
 8004e3c:	b21a      	sxth	r2, r3
 8004e3e:	1dbb      	adds	r3, r7, #6
 8004e40:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8004e42:	1dbb      	adds	r3, r7, #6
 8004e44:	881b      	ldrh	r3, [r3, #0]
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b002      	add	sp, #8
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8004e4e:	b590      	push	{r4, r7, lr}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8004e56:	f001 fb0b 	bl	8006470 <HAL_GetUIDw0>
 8004e5a:	0004      	movs	r4, r0
 8004e5c:	f001 fb1c 	bl	8006498 <HAL_GetUIDw2>
 8004e60:	0003      	movs	r3, r0
 8004e62:	18e3      	adds	r3, r4, r3
 8004e64:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 8004e66:	f001 fb0d 	bl	8006484 <HAL_GetUIDw1>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	0e1a      	lsrs	r2, r3, #24
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3307      	adds	r3, #7
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	0c1a      	lsrs	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3306      	adds	r3, #6
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	0a1a      	lsrs	r2, r3, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3305      	adds	r3, #5
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	0e1a      	lsrs	r2, r3, #24
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3303      	adds	r3, #3
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	0c1a      	lsrs	r2, r3, #16
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3302      	adds	r3, #2
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	0a1a      	lsrs	r2, r3, #8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b005      	add	sp, #20
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8004ed0:	b5b0      	push	{r4, r5, r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8004ed4:	f001 facc 	bl	8006470 <HAL_GetUIDw0>
 8004ed8:	0004      	movs	r4, r0
 8004eda:	f001 fad3 	bl	8006484 <HAL_GetUIDw1>
 8004ede:	0003      	movs	r3, r0
 8004ee0:	405c      	eors	r4, r3
 8004ee2:	f001 fad9 	bl	8006498 <HAL_GetUIDw2>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	4063      	eors	r3, r4
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bdb0      	pop	{r4, r5, r7, pc}

08004ef0 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8004efa:	2408      	movs	r4, #8
 8004efc:	193b      	adds	r3, r7, r4
 8004efe:	0018      	movs	r0, r3
 8004f00:	f017 fcaa 	bl	801c858 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8004f04:	0022      	movs	r2, r4
 8004f06:	18bb      	adds	r3, r7, r2
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	18bb      	adds	r3, r7, r2
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	5e9b      	ldrsh	r3, [r3, r2]
 8004f10:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <TimestampNow+0x48>)
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	000b      	movs	r3, r1
 8004f18:	2110      	movs	r1, #16
 8004f1a:	f000 f8a9 	bl	8005070 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7fb f8f1 	bl	8000108 <strlen>
 8004f26:	0003      	movs	r3, r0
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b005      	add	sp, #20
 8004f34:	bd90      	pop	{r4, r7, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	0801e480 	.word	0x0801e480

08004f3c <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b08b      	sub	sp, #44	; 0x2c
 8004f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f42:	2414      	movs	r4, #20
 8004f44:	193b      	adds	r3, r7, r4
 8004f46:	0018      	movs	r0, r3
 8004f48:	2314      	movs	r3, #20
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	f018 ff44 	bl	801ddda <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f52:	4b38      	ldr	r3, [pc, #224]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	4b37      	ldr	r3, [pc, #220]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f58:	2101      	movs	r1, #1
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f5e:	4b35      	ldr	r3, [pc, #212]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	2201      	movs	r2, #1
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6a:	4b32      	ldr	r3, [pc, #200]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6e:	4b31      	ldr	r3, [pc, #196]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f70:	2102      	movs	r1, #2
 8004f72:	430a      	orrs	r2, r1
 8004f74:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f76:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f82:	4b2c      	ldr	r3, [pc, #176]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f86:	4b2b      	ldr	r3, [pc, #172]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f88:	2104      	movs	r1, #4
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f8e:	4b29      	ldr	r3, [pc, #164]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	2204      	movs	r2, #4
 8004f94:	4013      	ands	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f9a:	4b26      	ldr	r3, [pc, #152]	; (8005034 <Gpio_PreInit+0xf8>)
 8004f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9e:	4b25      	ldr	r3, [pc, #148]	; (8005034 <Gpio_PreInit+0xf8>)
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fa6:	4b23      	ldr	r3, [pc, #140]	; (8005034 <Gpio_PreInit+0xf8>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	2280      	movs	r2, #128	; 0x80
 8004fac:	4013      	ands	r3, r2
 8004fae:	607b      	str	r3, [r7, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fb2:	193b      	adds	r3, r7, r4
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	193b      	adds	r3, r7, r4
 8004fba:	2200      	movs	r2, #0
 8004fbc:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8004fbe:	193b      	adds	r3, r7, r4
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <Gpio_PreInit+0xfc>)
 8004fc2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc4:	193a      	adds	r2, r7, r4
 8004fc6:	23a0      	movs	r3, #160	; 0xa0
 8004fc8:	05db      	lsls	r3, r3, #23
 8004fca:	0011      	movs	r1, r2
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f002 fbf5 	bl	80077bc <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8004fd2:	193b      	adds	r3, r7, r4
 8004fd4:	4a19      	ldr	r2, [pc, #100]	; (800503c <Gpio_PreInit+0x100>)
 8004fd6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd8:	193b      	adds	r3, r7, r4
 8004fda:	4a19      	ldr	r2, [pc, #100]	; (8005040 <Gpio_PreInit+0x104>)
 8004fdc:	0019      	movs	r1, r3
 8004fde:	0010      	movs	r0, r2
 8004fe0:	f002 fbec 	bl	80077bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fe4:	193b      	adds	r3, r7, r4
 8004fe6:	4a17      	ldr	r2, [pc, #92]	; (8005044 <Gpio_PreInit+0x108>)
 8004fe8:	0019      	movs	r1, r3
 8004fea:	0010      	movs	r0, r2
 8004fec:	f002 fbe6 	bl	80077bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004ff0:	193b      	adds	r3, r7, r4
 8004ff2:	4a15      	ldr	r2, [pc, #84]	; (8005048 <Gpio_PreInit+0x10c>)
 8004ff4:	0019      	movs	r1, r3
 8004ff6:	0010      	movs	r0, r2
 8004ff8:	f002 fbe0 	bl	80077bc <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <Gpio_PreInit+0xf8>)
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <Gpio_PreInit+0xf8>)
 8005002:	2101      	movs	r1, #1
 8005004:	438a      	bics	r2, r1
 8005006:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <Gpio_PreInit+0xf8>)
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <Gpio_PreInit+0xf8>)
 800500e:	2102      	movs	r1, #2
 8005010:	438a      	bics	r2, r1
 8005012:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <Gpio_PreInit+0xf8>)
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	4b06      	ldr	r3, [pc, #24]	; (8005034 <Gpio_PreInit+0xf8>)
 800501a:	2104      	movs	r1, #4
 800501c:	438a      	bics	r2, r1
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <Gpio_PreInit+0xf8>)
 8005022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <Gpio_PreInit+0xf8>)
 8005026:	2180      	movs	r1, #128	; 0x80
 8005028:	438a      	bics	r2, r1
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b00b      	add	sp, #44	; 0x2c
 8005032:	bd90      	pop	{r4, r7, pc}
 8005034:	40021000 	.word	0x40021000
 8005038:	00009fff 	.word	0x00009fff
 800503c:	0000ffff 	.word	0x0000ffff
 8005040:	50000400 	.word	0x50000400
 8005044:	50000800 	.word	0x50000800
 8005048:	50001c00 	.word	0x50001c00

0800504c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8005050:	2101      	movs	r1, #1
 8005052:	2004      	movs	r0, #4
 8005054:	f017 f896 	bl	801c184 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8005062:	2100      	movs	r1, #0
 8005064:	2004      	movs	r0, #4
 8005066:	f017 f88d 	bl	801c184 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8005070:	b40c      	push	{r2, r3}
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800507c:	231c      	movs	r3, #28
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f018 f811 	bl	801d0b0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	b004      	add	sp, #16
 8005094:	bc80      	pop	{r7}
 8005096:	bc08      	pop	{r3}
 8005098:	b002      	add	sp, #8
 800509a:	4718      	bx	r3

0800509c <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80050a6:	0018      	movs	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b002      	add	sp, #8
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 80050b2:	f7fe ff69 	bl	8003f88 <RTC_IF_GetTimerValue>
 80050b6:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7fe ffcb 	bl	8004064 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b002      	add	sp, #8
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b08b      	sub	sp, #44	; 0x2c
 80050dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80050de:	2414      	movs	r4, #20
 80050e0:	193b      	adds	r3, r7, r4
 80050e2:	0018      	movs	r0, r3
 80050e4:	2314      	movs	r3, #20
 80050e6:	001a      	movs	r2, r3
 80050e8:	2100      	movs	r1, #0
 80050ea:	f018 fe76 	bl	801ddda <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 80050ee:	4b4a      	ldr	r3, [pc, #296]	; (8005218 <DBG_Init+0x140>)
 80050f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f2:	4b49      	ldr	r3, [pc, #292]	; (8005218 <DBG_Init+0x140>)
 80050f4:	2102      	movs	r1, #2
 80050f6:	430a      	orrs	r2, r1
 80050f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050fa:	4b47      	ldr	r3, [pc, #284]	; (8005218 <DBG_Init+0x140>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	2202      	movs	r2, #2
 8005100:	4013      	ands	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 8005106:	4b44      	ldr	r3, [pc, #272]	; (8005218 <DBG_Init+0x140>)
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	4b43      	ldr	r3, [pc, #268]	; (8005218 <DBG_Init+0x140>)
 800510c:	2102      	movs	r1, #2
 800510e:	430a      	orrs	r2, r1
 8005110:	62da      	str	r2, [r3, #44]	; 0x2c
 8005112:	4b41      	ldr	r3, [pc, #260]	; (8005218 <DBG_Init+0x140>)
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	2202      	movs	r2, #2
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 800511e:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <DBG_Init+0x140>)
 8005120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005122:	4b3d      	ldr	r3, [pc, #244]	; (8005218 <DBG_Init+0x140>)
 8005124:	2102      	movs	r1, #2
 8005126:	430a      	orrs	r2, r1
 8005128:	62da      	str	r2, [r3, #44]	; 0x2c
 800512a:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <DBG_Init+0x140>)
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	2202      	movs	r2, #2
 8005130:	4013      	ands	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 8005136:	4b38      	ldr	r3, [pc, #224]	; (8005218 <DBG_Init+0x140>)
 8005138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513a:	4b37      	ldr	r3, [pc, #220]	; (8005218 <DBG_Init+0x140>)
 800513c:	2102      	movs	r1, #2
 800513e:	430a      	orrs	r2, r1
 8005140:	62da      	str	r2, [r3, #44]	; 0x2c
 8005142:	4b35      	ldr	r3, [pc, #212]	; (8005218 <DBG_Init+0x140>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	2202      	movs	r2, #2
 8005148:	4013      	ands	r3, r2
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800514e:	0021      	movs	r1, r4
 8005150:	187b      	adds	r3, r7, r1
 8005152:	2201      	movs	r2, #1
 8005154:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8005156:	187b      	adds	r3, r7, r1
 8005158:	2201      	movs	r2, #1
 800515a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 800515c:	187b      	adds	r3, r7, r1
 800515e:	2203      	movs	r2, #3
 8005160:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 8005162:	187b      	adds	r3, r7, r1
 8005164:	2280      	movs	r2, #128	; 0x80
 8005166:	0152      	lsls	r2, r2, #5
 8005168:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 800516a:	000c      	movs	r4, r1
 800516c:	187b      	adds	r3, r7, r1
 800516e:	4a2b      	ldr	r2, [pc, #172]	; (800521c <DBG_Init+0x144>)
 8005170:	0019      	movs	r1, r3
 8005172:	0010      	movs	r0, r2
 8005174:	f002 fb22 	bl	80077bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 8005178:	0021      	movs	r1, r4
 800517a:	187b      	adds	r3, r7, r1
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	0192      	lsls	r2, r2, #6
 8005180:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 8005182:	000c      	movs	r4, r1
 8005184:	187b      	adds	r3, r7, r1
 8005186:	4a25      	ldr	r2, [pc, #148]	; (800521c <DBG_Init+0x144>)
 8005188:	0019      	movs	r1, r3
 800518a:	0010      	movs	r0, r2
 800518c:	f002 fb16 	bl	80077bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 8005190:	0021      	movs	r1, r4
 8005192:	187b      	adds	r3, r7, r1
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	01d2      	lsls	r2, r2, #7
 8005198:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 800519a:	000c      	movs	r4, r1
 800519c:	187b      	adds	r3, r7, r1
 800519e:	4a1f      	ldr	r2, [pc, #124]	; (800521c <DBG_Init+0x144>)
 80051a0:	0019      	movs	r1, r3
 80051a2:	0010      	movs	r0, r2
 80051a4:	f002 fb0a 	bl	80077bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 80051a8:	0021      	movs	r1, r4
 80051aa:	187b      	adds	r3, r7, r1
 80051ac:	2280      	movs	r2, #128	; 0x80
 80051ae:	0212      	lsls	r2, r2, #8
 80051b0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 80051b2:	187b      	adds	r3, r7, r1
 80051b4:	4a19      	ldr	r2, [pc, #100]	; (800521c <DBG_Init+0x144>)
 80051b6:	0019      	movs	r1, r3
 80051b8:	0010      	movs	r0, r2
 80051ba:	f002 faff 	bl	80077bc <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	015b      	lsls	r3, r3, #5
 80051c2:	4816      	ldr	r0, [pc, #88]	; (800521c <DBG_Init+0x144>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	0019      	movs	r1, r3
 80051c8:	f002 fd75 	bl	8007cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	019b      	lsls	r3, r3, #6
 80051d0:	4812      	ldr	r0, [pc, #72]	; (800521c <DBG_Init+0x144>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	0019      	movs	r1, r3
 80051d6:	f002 fd6e 	bl	8007cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	01db      	lsls	r3, r3, #7
 80051de:	480f      	ldr	r0, [pc, #60]	; (800521c <DBG_Init+0x144>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	0019      	movs	r1, r3
 80051e4:	f002 fd67 	bl	8007cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	480b      	ldr	r0, [pc, #44]	; (800521c <DBG_Init+0x144>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	0019      	movs	r1, r3
 80051f2:	f002 fd60 	bl	8007cb6 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <DBG_Init+0x140>)
 80051f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051fa:	4b07      	ldr	r3, [pc, #28]	; (8005218 <DBG_Init+0x140>)
 80051fc:	2180      	movs	r1, #128	; 0x80
 80051fe:	03c9      	lsls	r1, r1, #15
 8005200:	430a      	orrs	r2, r1
 8005202:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8005204:	f001 f952 	bl	80064ac <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8005208:	f001 f95e 	bl	80064c8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800520c:	f001 f96a 	bl	80064e4 <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	b00b      	add	sp, #44	; 0x2c
 8005216:	bd90      	pop	{r4, r7, pc}
 8005218:	40021000 	.word	0x40021000
 800521c:	50000400 	.word	0x50000400

08005220 <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 8005230:	4b10      	ldr	r3, [pc, #64]	; (8005274 <MX_USART2_Init+0x48>)
 8005232:	4a11      	ldr	r2, [pc, #68]	; (8005278 <MX_USART2_Init+0x4c>)
 8005234:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8005236:	4b0f      	ldr	r3, [pc, #60]	; (8005274 <MX_USART2_Init+0x48>)
 8005238:	22e1      	movs	r2, #225	; 0xe1
 800523a:	0252      	lsls	r2, r2, #9
 800523c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <MX_USART2_Init+0x48>)
 8005240:	2200      	movs	r2, #0
 8005242:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <MX_USART2_Init+0x48>)
 8005246:	2200      	movs	r2, #0
 8005248:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 800524a:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <MX_USART2_Init+0x48>)
 800524c:	2200      	movs	r2, #0
 800524e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 8005250:	4b08      	ldr	r3, [pc, #32]	; (8005274 <MX_USART2_Init+0x48>)
 8005252:	2208      	movs	r2, #8
 8005254:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <MX_USART2_Init+0x48>)
 8005258:	2200      	movs	r2, #0
 800525a:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <MX_USART2_Init+0x48>)
 800525e:	0018      	movs	r0, r3
 8005260:	f005 fc98 	bl	800ab94 <HAL_UART_Init>
 8005264:	1e03      	subs	r3, r0, #0
 8005266:	d001      	beq.n	800526c <MX_USART2_Init+0x40>
  {
    Error_Handler();
 8005268:	f7fe fce8 	bl	8003c3c <Error_Handler>
  }
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	200015e0 	.word	0x200015e0
 8005278:	40004400 	.word	0x40004400

0800527c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b095      	sub	sp, #84	; 0x54
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005284:	233c      	movs	r3, #60	; 0x3c
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	0018      	movs	r0, r3
 800528a:	2314      	movs	r3, #20
 800528c:	001a      	movs	r2, r3
 800528e:	2100      	movs	r1, #0
 8005290:	f018 fda3 	bl	801ddda <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005294:	2418      	movs	r4, #24
 8005296:	193b      	adds	r3, r7, r4
 8005298:	0018      	movs	r0, r3
 800529a:	2324      	movs	r3, #36	; 0x24
 800529c:	001a      	movs	r2, r3
 800529e:	2100      	movs	r1, #0
 80052a0:	f018 fd9b 	bl	801ddda <memset>
  if (uartHandle->Instance == USART2)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a57      	ldr	r2, [pc, #348]	; (8005408 <HAL_UART_MspInit+0x18c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d000      	beq.n	80052b0 <HAL_UART_MspInit+0x34>
 80052ae:	e0a6      	b.n	80053fe <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 80052b0:	4b56      	ldr	r3, [pc, #344]	; (800540c <HAL_UART_MspInit+0x190>)
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4b55      	ldr	r3, [pc, #340]	; (800540c <HAL_UART_MspInit+0x190>)
 80052b6:	2101      	movs	r1, #1
 80052b8:	430a      	orrs	r2, r1
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80052bc:	4b53      	ldr	r3, [pc, #332]	; (800540c <HAL_UART_MspInit+0x190>)
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	2201      	movs	r2, #1
 80052c2:	4013      	ands	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 80052c8:	4b50      	ldr	r3, [pc, #320]	; (800540c <HAL_UART_MspInit+0x190>)
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	4b4f      	ldr	r3, [pc, #316]	; (800540c <HAL_UART_MspInit+0x190>)
 80052ce:	2101      	movs	r1, #1
 80052d0:	430a      	orrs	r2, r1
 80052d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80052d4:	4b4d      	ldr	r3, [pc, #308]	; (800540c <HAL_UART_MspInit+0x190>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	2201      	movs	r2, #1
 80052da:	4013      	ands	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 80052e0:	4b4a      	ldr	r3, [pc, #296]	; (800540c <HAL_UART_MspInit+0x190>)
 80052e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e4:	4b49      	ldr	r3, [pc, #292]	; (800540c <HAL_UART_MspInit+0x190>)
 80052e6:	2180      	movs	r1, #128	; 0x80
 80052e8:	0289      	lsls	r1, r1, #10
 80052ea:	430a      	orrs	r2, r1
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 80052ee:	4b47      	ldr	r3, [pc, #284]	; (800540c <HAL_UART_MspInit+0x190>)
 80052f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f2:	4b46      	ldr	r3, [pc, #280]	; (800540c <HAL_UART_MspInit+0x190>)
 80052f4:	2101      	movs	r1, #1
 80052f6:	430a      	orrs	r2, r1
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
 80052fa:	4b44      	ldr	r3, [pc, #272]	; (800540c <HAL_UART_MspInit+0x190>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	2201      	movs	r2, #1
 8005300:	4013      	ands	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005306:	4b41      	ldr	r3, [pc, #260]	; (800540c <HAL_UART_MspInit+0x190>)
 8005308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530a:	4b40      	ldr	r3, [pc, #256]	; (800540c <HAL_UART_MspInit+0x190>)
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	0289      	lsls	r1, r1, #10
 8005310:	430a      	orrs	r2, r1
 8005312:	639a      	str	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005314:	193b      	adds	r3, r7, r4
 8005316:	2202      	movs	r2, #2
 8005318:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800531a:	193b      	adds	r3, r7, r4
 800531c:	2204      	movs	r2, #4
 800531e:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005320:	193b      	adds	r3, r7, r4
 8005322:	0018      	movs	r0, r3
 8005324:	f004 f9b8 	bl	8009698 <HAL_RCCEx_PeriphCLKConfig>
 8005328:	1e03      	subs	r3, r0, #0
 800532a:	d001      	beq.n	8005330 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800532c:	f7fe fc86 	bl	8003c3c <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8005330:	243c      	movs	r4, #60	; 0x3c
 8005332:	193b      	adds	r3, r7, r4
 8005334:	2204      	movs	r2, #4
 8005336:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005338:	193b      	adds	r3, r7, r4
 800533a:	2202      	movs	r2, #2
 800533c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533e:	193b      	adds	r3, r7, r4
 8005340:	2200      	movs	r2, #0
 8005342:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005344:	193b      	adds	r3, r7, r4
 8005346:	2203      	movs	r2, #3
 8005348:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800534a:	193b      	adds	r3, r7, r4
 800534c:	2204      	movs	r2, #4
 800534e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8005350:	193a      	adds	r2, r7, r4
 8005352:	23a0      	movs	r3, #160	; 0xa0
 8005354:	05db      	lsls	r3, r3, #23
 8005356:	0011      	movs	r1, r2
 8005358:	0018      	movs	r0, r3
 800535a:	f002 fa2f 	bl	80077bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 800535e:	0021      	movs	r1, r4
 8005360:	187b      	adds	r3, r7, r1
 8005362:	2208      	movs	r2, #8
 8005364:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005366:	187b      	adds	r3, r7, r1
 8005368:	2202      	movs	r2, #2
 800536a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536c:	187b      	adds	r3, r7, r1
 800536e:	2200      	movs	r2, #0
 8005370:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005372:	187b      	adds	r3, r7, r1
 8005374:	2203      	movs	r2, #3
 8005376:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8005378:	187b      	adds	r3, r7, r1
 800537a:	2204      	movs	r2, #4
 800537c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 800537e:	187a      	adds	r2, r7, r1
 8005380:	23a0      	movs	r3, #160	; 0xa0
 8005382:	05db      	lsls	r3, r3, #23
 8005384:	0011      	movs	r1, r2
 8005386:	0018      	movs	r0, r3
 8005388:	f002 fa18 	bl	80077bc <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800538c:	4b20      	ldr	r3, [pc, #128]	; (8005410 <HAL_UART_MspInit+0x194>)
 800538e:	4a21      	ldr	r2, [pc, #132]	; (8005414 <HAL_UART_MspInit+0x198>)
 8005390:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8005392:	4b1f      	ldr	r3, [pc, #124]	; (8005410 <HAL_UART_MspInit+0x194>)
 8005394:	2204      	movs	r2, #4
 8005396:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005398:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <HAL_UART_MspInit+0x194>)
 800539a:	2210      	movs	r2, #16
 800539c:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800539e:	4b1c      	ldr	r3, [pc, #112]	; (8005410 <HAL_UART_MspInit+0x194>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80053a4:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <HAL_UART_MspInit+0x194>)
 80053a6:	2280      	movs	r2, #128	; 0x80
 80053a8:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053aa:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_UART_MspInit+0x194>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80053b0:	4b17      	ldr	r3, [pc, #92]	; (8005410 <HAL_UART_MspInit+0x194>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 80053b6:	4b16      	ldr	r3, [pc, #88]	; (8005410 <HAL_UART_MspInit+0x194>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80053bc:	4b14      	ldr	r3, [pc, #80]	; (8005410 <HAL_UART_MspInit+0x194>)
 80053be:	2200      	movs	r2, #0
 80053c0:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 80053c2:	4b13      	ldr	r3, [pc, #76]	; (8005410 <HAL_UART_MspInit+0x194>)
 80053c4:	0018      	movs	r0, r3
 80053c6:	f001 ff03 	bl	80071d0 <HAL_DMA_Init>
 80053ca:	1e03      	subs	r3, r0, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 80053ce:	f7fe fc35 	bl	8003c3c <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <HAL_UART_MspInit+0x194>)
 80053d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <HAL_UART_MspInit+0x194>)
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80053de:	2201      	movs	r2, #1
 80053e0:	2100      	movs	r1, #0
 80053e2:	200b      	movs	r0, #11
 80053e4:	f001 febe 	bl	8007164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80053e8:	200b      	movs	r0, #11
 80053ea:	f001 fed0 	bl	800718e <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 80053ee:	2201      	movs	r2, #1
 80053f0:	2100      	movs	r1, #0
 80053f2:	201c      	movs	r0, #28
 80053f4:	f001 feb6 	bl	8007164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80053f8:	201c      	movs	r0, #28
 80053fa:	f001 fec8 	bl	800718e <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	46bd      	mov	sp, r7
 8005402:	b015      	add	sp, #84	; 0x54
 8005404:	bd90      	pop	{r4, r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	40004400 	.word	0x40004400
 800540c:	40021000 	.word	0x40021000
 8005410:	20001598 	.word	0x20001598
 8005414:	40020080 	.word	0x40020080

08005418 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a0d      	ldr	r2, [pc, #52]	; (800545c <HAL_UART_MspDeInit+0x44>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d113      	bne.n	8005452 <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <HAL_UART_MspDeInit+0x48>)
 800542c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542e:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <HAL_UART_MspDeInit+0x48>)
 8005430:	490c      	ldr	r1, [pc, #48]	; (8005464 <HAL_UART_MspDeInit+0x4c>)
 8005432:	400a      	ands	r2, r1
 8005434:	639a      	str	r2, [r3, #56]	; 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8005436:	23a0      	movs	r3, #160	; 0xa0
 8005438:	05db      	lsls	r3, r3, #23
 800543a:	210c      	movs	r1, #12
 800543c:	0018      	movs	r0, r3
 800543e:	f002 fb3b 	bl	8007ab8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005446:	0018      	movs	r0, r3
 8005448:	f001 ff3a 	bl	80072c0 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800544c:	201c      	movs	r0, #28
 800544e:	f001 feae 	bl	80071ae <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	46bd      	mov	sp, r7
 8005456:	b002      	add	sp, #8
 8005458:	bd80      	pop	{r7, pc}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	40004400 	.word	0x40004400
 8005460:	40021000 	.word	0x40021000
 8005464:	fffdffff 	.word	0xfffdffff

08005468 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <vcom_Init+0x20>)
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 8005476:	f7fe fb21 	bl	8003abc <MX_DMA_Init>
  MX_USART2_Init();
 800547a:	f7ff fed7 	bl	800522c <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 800547e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b002      	add	sp, #8
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200003a4 	.word	0x200003a4

0800548c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <vcom_DeInit+0x34>)
 8005492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005494:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <vcom_DeInit+0x34>)
 8005496:	2180      	movs	r1, #128	; 0x80
 8005498:	0289      	lsls	r1, r1, #10
 800549a:	430a      	orrs	r2, r1
 800549c:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 800549e:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <vcom_DeInit+0x34>)
 80054a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <vcom_DeInit+0x34>)
 80054a4:	4907      	ldr	r1, [pc, #28]	; (80054c4 <vcom_DeInit+0x38>)
 80054a6:	400a      	ands	r2, r1
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <vcom_DeInit+0x3c>)
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7ff ffb3 	bl	8005418 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80054b2:	200b      	movs	r0, #11
 80054b4:	f001 fe7b 	bl	80071ae <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80054b8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	fffdffff 	.word	0xfffdffff
 80054c8:	200015e0 	.word	0x200015e0

080054cc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	000a      	movs	r2, r1
 80054d6:	1cbb      	adds	r3, r7, #2
 80054d8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 80054da:	1cbb      	adds	r3, r7, #2
 80054dc:	881a      	ldrh	r2, [r3, #0]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <vcom_Trace_DMA+0x28>)
 80054e2:	0018      	movs	r0, r3
 80054e4:	f005 fc02 	bl	800acec <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80054e8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80054ea:	0018      	movs	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b002      	add	sp, #8
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	200015e0 	.word	0x200015e0

080054f8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8005500:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <vcom_ReceiveInit+0x80>)
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8005506:	2108      	movs	r1, #8
 8005508:	187b      	adds	r3, r7, r1
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	0392      	lsls	r2, r2, #14
 800550e:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8005510:	187b      	adds	r3, r7, r1
 8005512:	481a      	ldr	r0, [pc, #104]	; (800557c <vcom_ReceiveInit+0x84>)
 8005514:	6819      	ldr	r1, [r3, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	f006 fd40 	bl	800bf9c <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	4b17      	ldr	r3, [pc, #92]	; (800557c <vcom_ReceiveInit+0x84>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	025b      	lsls	r3, r3, #9
 8005528:	401a      	ands	r2, r3
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	025b      	lsls	r3, r3, #9
 800552e:	429a      	cmp	r2, r3
 8005530:	d0f5      	beq.n	800551e <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	4b11      	ldr	r3, [pc, #68]	; (800557c <vcom_ReceiveInit+0x84>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69da      	ldr	r2, [r3, #28]
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	03db      	lsls	r3, r3, #15
 800553e:	401a      	ands	r2, r3
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	03db      	lsls	r3, r3, #15
 8005544:	429a      	cmp	r2, r3
 8005546:	d1f5      	bne.n	8005534 <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <vcom_ReceiveInit+0x84>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <vcom_ReceiveInit+0x84>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2180      	movs	r1, #128	; 0x80
 8005554:	03c9      	lsls	r1, r1, #15
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 800555a:	4b08      	ldr	r3, [pc, #32]	; (800557c <vcom_ReceiveInit+0x84>)
 800555c:	0018      	movs	r0, r3
 800555e:	f006 fd83 	bl	800c068 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8005562:	4907      	ldr	r1, [pc, #28]	; (8005580 <vcom_ReceiveInit+0x88>)
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <vcom_ReceiveInit+0x84>)
 8005566:	2201      	movs	r2, #1
 8005568:	0018      	movs	r0, r3
 800556a:	f005 fb67 	bl	800ac3c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800556e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	b004      	add	sp, #16
 8005576:	bd80      	pop	{r7, pc}
 8005578:	200003a8 	.word	0x200003a8
 800557c:	200015e0 	.word	0x200015e0
 8005580:	20001664 	.word	0x20001664

08005584 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <HAL_UART_TxCpltCallback+0x18>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2000      	movs	r0, #0
 8005592:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8005594:	46c0      	nop			; (mov r8, r8)
 8005596:	46bd      	mov	sp, r7
 8005598:	b002      	add	sp, #8
 800559a:	bd80      	pop	{r7, pc}
 800559c:	200003a4 	.word	0x200003a4

080055a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <HAL_UART_RxCpltCallback+0x3c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_UART_RxCpltCallback+0x26>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2280      	movs	r2, #128	; 0x80
 80055b4:	589b      	ldr	r3, [r3, r2]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80055ba:	4b08      	ldr	r3, [pc, #32]	; (80055dc <HAL_UART_RxCpltCallback+0x3c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4808      	ldr	r0, [pc, #32]	; (80055e0 <HAL_UART_RxCpltCallback+0x40>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	2101      	movs	r1, #1
 80055c4:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 80055c6:	4906      	ldr	r1, [pc, #24]	; (80055e0 <HAL_UART_RxCpltCallback+0x40>)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	0018      	movs	r0, r3
 80055ce:	f005 fb35 	bl	800ac3c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b002      	add	sp, #8
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	200003a8 	.word	0x200003a8
 80055e0:	20001664 	.word	0x20001664

080055e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80055e4:	480d      	ldr	r0, [pc, #52]	; (800561c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80055e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055e8:	480d      	ldr	r0, [pc, #52]	; (8005620 <LoopForever+0x6>)
  ldr r1, =_edata
 80055ea:	490e      	ldr	r1, [pc, #56]	; (8005624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055ec:	4a0e      	ldr	r2, [pc, #56]	; (8005628 <LoopForever+0xe>)
  movs r3, #0
 80055ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055f0:	e002      	b.n	80055f8 <LoopCopyDataInit>

080055f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055f6:	3304      	adds	r3, #4

080055f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055fc:	d3f9      	bcc.n	80055f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055fe:	4a0b      	ldr	r2, [pc, #44]	; (800562c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005600:	4c0b      	ldr	r4, [pc, #44]	; (8005630 <LoopForever+0x16>)
  movs r3, #0
 8005602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005604:	e001      	b.n	800560a <LoopFillZerobss>

08005606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005608:	3204      	adds	r2, #4

0800560a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800560a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800560c:	d3fb      	bcc.n	8005606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800560e:	f000 febf 	bl	8006390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005612:	f018 fbb5 	bl	801dd80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005616:	f7fe fa6f 	bl	8003af8 <main>

0800561a <LoopForever>:

LoopForever:
    b LoopForever
 800561a:	e7fe      	b.n	800561a <LoopForever>
   ldr   r0, =_estack
 800561c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005624:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8005628:	0801f428 	.word	0x0801f428
  ldr r2, =_sbss
 800562c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005630:	20001750 	.word	0x20001750

08005634 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005634:	e7fe      	b.n	8005634 <ADC1_COMP_IRQHandler>
	...

08005638 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <BSP_SPI1_Init+0x40>)
 8005644:	4a0d      	ldr	r2, [pc, #52]	; (800567c <BSP_SPI1_Init+0x44>)
 8005646:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <BSP_SPI1_Init+0x40>)
 800564a:	0018      	movs	r0, r3
 800564c:	f005 f9c1 	bl	800a9d2 <HAL_SPI_GetState>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d10c      	bne.n	800566e <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 8005654:	4b08      	ldr	r3, [pc, #32]	; (8005678 <BSP_SPI1_Init+0x40>)
 8005656:	0018      	movs	r0, r3
 8005658:	f000 f87e 	bl	8005758 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <BSP_SPI1_Init+0x40>)
 800565e:	0018      	movs	r0, r3
 8005660:	f000 f830 	bl	80056c4 <MX_SPI1_Init>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d002      	beq.n	800566e <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005668:	2308      	movs	r3, #8
 800566a:	425b      	negs	r3, r3
 800566c:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800566e:	687b      	ldr	r3, [r7, #4]
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20001484 	.word	0x20001484
 800567c:	40013000 	.word	0x40013000

08005680 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b089      	sub	sp, #36	; 0x24
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	1dbb      	adds	r3, r7, #6
 800568c:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800568e:	2306      	movs	r3, #6
 8005690:	425b      	negs	r3, r3
 8005692:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8005694:	1dbb      	adds	r3, r7, #6
 8005696:	881c      	ldrh	r4, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	4808      	ldr	r0, [pc, #32]	; (80056c0 <BSP_SPI1_SendRecv+0x40>)
 800569e:	23fa      	movs	r3, #250	; 0xfa
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	0023      	movs	r3, r4
 80056a6:	f004 ffd9 	bl	800a65c <HAL_SPI_TransmitReceive>
 80056aa:	1e03      	subs	r3, r0, #0
 80056ac:	d102      	bne.n	80056b4 <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 80056ae:	1dbb      	adds	r3, r7, #6
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80056b4:	697b      	ldr	r3, [r7, #20]
}
 80056b6:	0018      	movs	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b007      	add	sp, #28
 80056bc:	bd90      	pop	{r4, r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	20001484 	.word	0x20001484

080056c4 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80056cc:	240f      	movs	r4, #15
 80056ce:	193b      	adds	r3, r7, r4
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a1e      	ldr	r2, [pc, #120]	; (8005750 <MX_SPI1_Init+0x8c>)
 80056d8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2282      	movs	r2, #130	; 0x82
 80056de:	0052      	lsls	r2, r2, #1
 80056e0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2280      	movs	r2, #128	; 0x80
 80056fe:	0092      	lsls	r2, r2, #2
 8005700:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8005702:	f003 ffb3 	bl	800966c <HAL_RCC_GetPCLK2Freq>
 8005706:	0003      	movs	r3, r0
 8005708:	4a12      	ldr	r2, [pc, #72]	; (8005754 <MX_SPI1_Init+0x90>)
 800570a:	0011      	movs	r1, r2
 800570c:	0018      	movs	r0, r3
 800570e:	f000 f867 	bl	80057e0 <SPI_GetPrescaler>
 8005712:	0002      	movs	r2, r0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2207      	movs	r2, #7
 800572e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	0018      	movs	r0, r3
 8005734:	f004 fef6 	bl	800a524 <HAL_SPI_Init>
 8005738:	1e03      	subs	r3, r0, #0
 800573a:	d002      	beq.n	8005742 <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 800573c:	193b      	adds	r3, r7, r4
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005742:	230f      	movs	r3, #15
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	781b      	ldrb	r3, [r3, #0]
}
 8005748:	0018      	movs	r0, r3
 800574a:	46bd      	mov	sp, r7
 800574c:	b005      	add	sp, #20
 800574e:	bd90      	pop	{r4, r7, pc}
 8005750:	40013000 	.word	0x40013000
 8005754:	00989680 	.word	0x00989680

08005758 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8005758:	b590      	push	{r4, r7, lr}
 800575a:	b089      	sub	sp, #36	; 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 8005760:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <SPI1_MspInit+0x80>)
 8005762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005764:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <SPI1_MspInit+0x80>)
 8005766:	2180      	movs	r1, #128	; 0x80
 8005768:	0149      	lsls	r1, r1, #5
 800576a:	430a      	orrs	r2, r1
 800576c:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576e:	240c      	movs	r4, #12
 8005770:	193b      	adds	r3, r7, r4
 8005772:	2202      	movs	r2, #2
 8005774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005776:	193b      	adds	r3, r7, r4
 8005778:	2200      	movs	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577c:	193b      	adds	r3, r7, r4
 800577e:	2203      	movs	r2, #3
 8005780:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8005782:	193b      	adds	r3, r7, r4
 8005784:	2200      	movs	r2, #0
 8005786:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8005788:	193b      	adds	r3, r7, r4
 800578a:	2280      	movs	r2, #128	; 0x80
 800578c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800578e:	193a      	adds	r2, r7, r4
 8005790:	23a0      	movs	r3, #160	; 0xa0
 8005792:	05db      	lsls	r3, r3, #23
 8005794:	0011      	movs	r1, r2
 8005796:	0018      	movs	r0, r3
 8005798:	f002 f810 	bl	80077bc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800579c:	193b      	adds	r3, r7, r4
 800579e:	2200      	movs	r2, #0
 80057a0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80057a2:	193b      	adds	r3, r7, r4
 80057a4:	2240      	movs	r2, #64	; 0x40
 80057a6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80057a8:	193a      	adds	r2, r7, r4
 80057aa:	23a0      	movs	r3, #160	; 0xa0
 80057ac:	05db      	lsls	r3, r3, #23
 80057ae:	0011      	movs	r1, r2
 80057b0:	0018      	movs	r0, r3
 80057b2:	f002 f803 	bl	80077bc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80057b6:	193b      	adds	r3, r7, r4
 80057b8:	2200      	movs	r2, #0
 80057ba:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80057bc:	193b      	adds	r3, r7, r4
 80057be:	2208      	movs	r2, #8
 80057c0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80057c2:	193b      	adds	r3, r7, r4
 80057c4:	4a05      	ldr	r2, [pc, #20]	; (80057dc <SPI1_MspInit+0x84>)
 80057c6:	0019      	movs	r1, r3
 80057c8:	0010      	movs	r0, r2
 80057ca:	f001 fff7 	bl	80077bc <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b009      	add	sp, #36	; 0x24
 80057d4:	bd90      	pop	{r4, r7, pc}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	40021000 	.word	0x40021000
 80057dc:	50000400 	.word	0x50000400

080057e0 <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 80057f6:	e00d      	b.n	8005814 <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 80057f8:	4b0c      	ldr	r3, [pc, #48]	; (800582c <SPI_GetPrescaler+0x4c>)
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	0092      	lsls	r2, r2, #2
 80057fe:	58d3      	ldr	r3, [r2, r3]
 8005800:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	3301      	adds	r3, #1
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b07      	cmp	r3, #7
 800580c:	d807      	bhi.n	800581e <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	085b      	lsrs	r3, r3, #1
 8005812:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d8ed      	bhi.n	80057f8 <SPI_GetPrescaler+0x18>
 800581c:	e000      	b.n	8005820 <SPI_GetPrescaler+0x40>
      break;
 800581e:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 8005820:	68fb      	ldr	r3, [r7, #12]
}
 8005822:	0018      	movs	r0, r3
 8005824:	46bd      	mov	sp, r7
 8005826:	b006      	add	sp, #24
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	0801e49c 	.word	0x0801e49c

08005830 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800583a:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <BSP_I2C1_Init+0x70>)
 800583c:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <BSP_I2C1_Init+0x74>)
 800583e:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 8005840:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <BSP_I2C1_Init+0x78>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <BSP_I2C1_Init+0x78>)
 8005848:	6011      	str	r1, [r2, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d123      	bne.n	8005896 <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800584e:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <BSP_I2C1_Init+0x70>)
 8005850:	0018      	movs	r0, r3
 8005852:	f002 fd69 	bl	8008328 <HAL_I2C_GetState>
 8005856:	1e03      	subs	r3, r0, #0
 8005858:	d11d      	bne.n	8005896 <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800585a:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <BSP_I2C1_Init+0x70>)
 800585c:	0018      	movs	r0, r3
 800585e:	f000 f873 	bl	8005948 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d116      	bne.n	8005896 <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 8005868:	4b0d      	ldr	r3, [pc, #52]	; (80058a0 <BSP_I2C1_Init+0x70>)
 800586a:	0018      	movs	r0, r3
 800586c:	f000 f81e 	bl	80058ac <MX_I2C1_Init>
 8005870:	1e03      	subs	r3, r0, #0
 8005872:	d003      	beq.n	800587c <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005874:	2308      	movs	r3, #8
 8005876:	425b      	negs	r3, r3
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	e00c      	b.n	8005896 <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800587c:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <BSP_I2C1_Init+0x70>)
 800587e:	2100      	movs	r1, #0
 8005880:	0018      	movs	r0, r3
 8005882:	f002 ff9b 	bl	80087bc <HAL_I2CEx_ConfigAnalogFilter>
 8005886:	1e03      	subs	r3, r0, #0
 8005888:	d003      	beq.n	8005892 <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800588a:	2308      	movs	r3, #8
 800588c:	425b      	negs	r3, r3
 800588e:	607b      	str	r3, [r7, #4]
 8005890:	e001      	b.n	8005896 <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005896:	687b      	ldr	r3, [r7, #4]
}
 8005898:	0018      	movs	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	2000133c 	.word	0x2000133c
 80058a4:	40005400 	.word	0x40005400
 80058a8:	200003ac 	.word	0x200003ac

080058ac <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80058b4:	240f      	movs	r4, #15
 80058b6:	193b      	adds	r3, r7, r4
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a20      	ldr	r2, [pc, #128]	; (8005940 <MX_I2C1_Init+0x94>)
 80058c0:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1f      	ldr	r2, [pc, #124]	; (8005944 <MX_I2C1_Init+0x98>)
 80058c6:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	0018      	movs	r0, r3
 80058f6:	f002 fa17 	bl	8007d28 <HAL_I2C_Init>
 80058fa:	1e03      	subs	r3, r0, #0
 80058fc:	d002      	beq.n	8005904 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 80058fe:	193b      	adds	r3, r7, r4
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2100      	movs	r1, #0
 8005908:	0018      	movs	r0, r3
 800590a:	f002 ff57 	bl	80087bc <HAL_I2CEx_ConfigAnalogFilter>
 800590e:	1e03      	subs	r3, r0, #0
 8005910:	d003      	beq.n	800591a <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 8005912:	230f      	movs	r3, #15
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	2201      	movs	r2, #1
 8005918:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2100      	movs	r1, #0
 800591e:	0018      	movs	r0, r3
 8005920:	f002 ff98 	bl	8008854 <HAL_I2CEx_ConfigDigitalFilter>
 8005924:	1e03      	subs	r3, r0, #0
 8005926:	d003      	beq.n	8005930 <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8005928:	230f      	movs	r3, #15
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005930:	230f      	movs	r3, #15
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	781b      	ldrb	r3, [r3, #0]
}
 8005936:	0018      	movs	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	b005      	add	sp, #20
 800593c:	bd90      	pop	{r4, r7, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	40005400 	.word	0x40005400
 8005944:	00707cbb 	.word	0x00707cbb

08005948 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8005948:	b590      	push	{r4, r7, lr}
 800594a:	b089      	sub	sp, #36	; 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005950:	4b22      	ldr	r3, [pc, #136]	; (80059dc <I2C1_MspInit+0x94>)
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4b21      	ldr	r3, [pc, #132]	; (80059dc <I2C1_MspInit+0x94>)
 8005956:	2102      	movs	r1, #2
 8005958:	430a      	orrs	r2, r1
 800595a:	62da      	str	r2, [r3, #44]	; 0x2c
 800595c:	4b1f      	ldr	r3, [pc, #124]	; (80059dc <I2C1_MspInit+0x94>)
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	2202      	movs	r2, #2
 8005962:	4013      	ands	r3, r2
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8005968:	210c      	movs	r1, #12
 800596a:	187b      	adds	r3, r7, r1
 800596c:	2280      	movs	r2, #128	; 0x80
 800596e:	0052      	lsls	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005972:	000c      	movs	r4, r1
 8005974:	193b      	adds	r3, r7, r4
 8005976:	2212      	movs	r2, #18
 8005978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800597a:	193b      	adds	r3, r7, r4
 800597c:	2201      	movs	r2, #1
 800597e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005980:	193b      	adds	r3, r7, r4
 8005982:	2203      	movs	r2, #3
 8005984:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8005986:	193b      	adds	r3, r7, r4
 8005988:	2204      	movs	r2, #4
 800598a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800598c:	193b      	adds	r3, r7, r4
 800598e:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <I2C1_MspInit+0x98>)
 8005990:	0019      	movs	r1, r3
 8005992:	0010      	movs	r0, r2
 8005994:	f001 ff12 	bl	80077bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8005998:	0021      	movs	r1, r4
 800599a:	187b      	adds	r3, r7, r1
 800599c:	2280      	movs	r2, #128	; 0x80
 800599e:	0092      	lsls	r2, r2, #2
 80059a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	2212      	movs	r2, #18
 80059a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059a8:	187b      	adds	r3, r7, r1
 80059aa:	2201      	movs	r2, #1
 80059ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ae:	187b      	adds	r3, r7, r1
 80059b0:	2203      	movs	r2, #3
 80059b2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80059b4:	187b      	adds	r3, r7, r1
 80059b6:	2204      	movs	r2, #4
 80059b8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80059ba:	187b      	adds	r3, r7, r1
 80059bc:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <I2C1_MspInit+0x98>)
 80059be:	0019      	movs	r1, r3
 80059c0:	0010      	movs	r0, r2
 80059c2:	f001 fefb 	bl	80077bc <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <I2C1_MspInit+0x94>)
 80059c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ca:	4b04      	ldr	r3, [pc, #16]	; (80059dc <I2C1_MspInit+0x94>)
 80059cc:	2180      	movs	r1, #128	; 0x80
 80059ce:	0389      	lsls	r1, r1, #14
 80059d0:	430a      	orrs	r2, r1
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b009      	add	sp, #36	; 0x24
 80059da:	bd90      	pop	{r4, r7, pc}
 80059dc:	40021000 	.word	0x40021000
 80059e0:	50000400 	.word	0x50000400

080059e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059e4:	b590      	push	{r4, r7, lr}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	0002      	movs	r2, r0
 80059ec:	6039      	str	r1, [r7, #0]
 80059ee:	1dfb      	adds	r3, r7, #7
 80059f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80059f2:	1dfb      	adds	r3, r7, #7
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b7f      	cmp	r3, #127	; 0x7f
 80059f8:	d828      	bhi.n	8005a4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059fa:	4a2f      	ldr	r2, [pc, #188]	; (8005ab8 <__NVIC_SetPriority+0xd4>)
 80059fc:	1dfb      	adds	r3, r7, #7
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b25b      	sxtb	r3, r3
 8005a02:	089b      	lsrs	r3, r3, #2
 8005a04:	33c0      	adds	r3, #192	; 0xc0
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	589b      	ldr	r3, [r3, r2]
 8005a0a:	1dfa      	adds	r2, r7, #7
 8005a0c:	7812      	ldrb	r2, [r2, #0]
 8005a0e:	0011      	movs	r1, r2
 8005a10:	2203      	movs	r2, #3
 8005a12:	400a      	ands	r2, r1
 8005a14:	00d2      	lsls	r2, r2, #3
 8005a16:	21ff      	movs	r1, #255	; 0xff
 8005a18:	4091      	lsls	r1, r2
 8005a1a:	000a      	movs	r2, r1
 8005a1c:	43d2      	mvns	r2, r2
 8005a1e:	401a      	ands	r2, r3
 8005a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	019b      	lsls	r3, r3, #6
 8005a26:	22ff      	movs	r2, #255	; 0xff
 8005a28:	401a      	ands	r2, r3
 8005a2a:	1dfb      	adds	r3, r7, #7
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	0018      	movs	r0, r3
 8005a30:	2303      	movs	r3, #3
 8005a32:	4003      	ands	r3, r0
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a38:	481f      	ldr	r0, [pc, #124]	; (8005ab8 <__NVIC_SetPriority+0xd4>)
 8005a3a:	1dfb      	adds	r3, r7, #7
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	b25b      	sxtb	r3, r3
 8005a40:	089b      	lsrs	r3, r3, #2
 8005a42:	430a      	orrs	r2, r1
 8005a44:	33c0      	adds	r3, #192	; 0xc0
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005a4a:	e031      	b.n	8005ab0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <__NVIC_SetPriority+0xd8>)
 8005a4e:	1dfb      	adds	r3, r7, #7
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	0019      	movs	r1, r3
 8005a54:	230f      	movs	r3, #15
 8005a56:	400b      	ands	r3, r1
 8005a58:	3b08      	subs	r3, #8
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	3306      	adds	r3, #6
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	18d3      	adds	r3, r2, r3
 8005a62:	3304      	adds	r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	1dfa      	adds	r2, r7, #7
 8005a68:	7812      	ldrb	r2, [r2, #0]
 8005a6a:	0011      	movs	r1, r2
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	400a      	ands	r2, r1
 8005a70:	00d2      	lsls	r2, r2, #3
 8005a72:	21ff      	movs	r1, #255	; 0xff
 8005a74:	4091      	lsls	r1, r2
 8005a76:	000a      	movs	r2, r1
 8005a78:	43d2      	mvns	r2, r2
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	019b      	lsls	r3, r3, #6
 8005a82:	22ff      	movs	r2, #255	; 0xff
 8005a84:	401a      	ands	r2, r3
 8005a86:	1dfb      	adds	r3, r7, #7
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	4003      	ands	r3, r0
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a94:	4809      	ldr	r0, [pc, #36]	; (8005abc <__NVIC_SetPriority+0xd8>)
 8005a96:	1dfb      	adds	r3, r7, #7
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	001c      	movs	r4, r3
 8005a9c:	230f      	movs	r3, #15
 8005a9e:	4023      	ands	r3, r4
 8005aa0:	3b08      	subs	r3, #8
 8005aa2:	089b      	lsrs	r3, r3, #2
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	3306      	adds	r3, #6
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	18c3      	adds	r3, r0, r3
 8005aac:	3304      	adds	r3, #4
 8005aae:	601a      	str	r2, [r3, #0]
}
 8005ab0:	46c0      	nop			; (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b003      	add	sp, #12
 8005ab6:	bd90      	pop	{r4, r7, pc}
 8005ab8:	e000e100 	.word	0xe000e100
 8005abc:	e000ed00 	.word	0xe000ed00

08005ac0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08c      	sub	sp, #48	; 0x30
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	0002      	movs	r2, r0
 8005ac8:	1dfb      	adds	r3, r7, #7
 8005aca:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005acc:	1dfb      	adds	r3, r7, #7
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d02f      	beq.n	8005b34 <BSP_LED_Init+0x74>
 8005ad4:	dc3a      	bgt.n	8005b4c <BSP_LED_Init+0x8c>
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d01f      	beq.n	8005b1a <BSP_LED_Init+0x5a>
 8005ada:	dc37      	bgt.n	8005b4c <BSP_LED_Init+0x8c>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <BSP_LED_Init+0x26>
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d00d      	beq.n	8005b00 <BSP_LED_Init+0x40>
 8005ae4:	e032      	b.n	8005b4c <BSP_LED_Init+0x8c>
 8005ae6:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aea:	4b29      	ldr	r3, [pc, #164]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005aec:	2102      	movs	r1, #2
 8005aee:	430a      	orrs	r2, r1
 8005af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005af2:	4b27      	ldr	r3, [pc, #156]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	2202      	movs	r2, #2
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	e025      	b.n	8005b4c <BSP_LED_Init+0x8c>
 8005b00:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4b22      	ldr	r3, [pc, #136]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005b06:	2101      	movs	r1, #1
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b0c:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	2201      	movs	r2, #1
 8005b12:	4013      	ands	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	e018      	b.n	8005b4c <BSP_LED_Init+0x8c>
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005b20:	2102      	movs	r1, #2
 8005b22:	430a      	orrs	r2, r1
 8005b24:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b26:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	e00b      	b.n	8005b4c <BSP_LED_Init+0x8c>
 8005b34:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005b3a:	2102      	movs	r1, #2
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b40:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <BSP_LED_Init+0xd0>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	2202      	movs	r2, #2
 8005b46:	4013      	ands	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005b4e:	1dfb      	adds	r3, r7, #7
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <BSP_LED_Init+0xd4>)
 8005b54:	0052      	lsls	r2, r2, #1
 8005b56:	5ad3      	ldrh	r3, [r2, r3]
 8005b58:	001a      	movs	r2, r3
 8005b5a:	211c      	movs	r1, #28
 8005b5c:	187b      	adds	r3, r7, r1
 8005b5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b60:	187b      	adds	r3, r7, r1
 8005b62:	2201      	movs	r2, #1
 8005b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	2200      	movs	r2, #0
 8005b6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b6c:	187b      	adds	r3, r7, r1
 8005b6e:	2203      	movs	r2, #3
 8005b70:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005b72:	1dfb      	adds	r3, r7, #7
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <BSP_LED_Init+0xd8>)
 8005b78:	0092      	lsls	r2, r2, #2
 8005b7a:	58d3      	ldr	r3, [r2, r3]
 8005b7c:	187a      	adds	r2, r7, r1
 8005b7e:	0011      	movs	r1, r2
 8005b80:	0018      	movs	r0, r3
 8005b82:	f001 fe1b 	bl	80077bc <HAL_GPIO_Init>
}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	b00c      	add	sp, #48	; 0x30
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	40021000 	.word	0x40021000
 8005b94:	0801e4bc 	.word	0x0801e4bc
 8005b98:	2000004c 	.word	0x2000004c

08005b9c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	0002      	movs	r2, r0
 8005ba4:	1dfb      	adds	r3, r7, #7
 8005ba6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8005ba8:	1dfb      	adds	r3, r7, #7
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <BSP_LED_On+0x30>)
 8005bae:	0092      	lsls	r2, r2, #2
 8005bb0:	58d0      	ldr	r0, [r2, r3]
 8005bb2:	1dfb      	adds	r3, r7, #7
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <BSP_LED_On+0x34>)
 8005bb8:	0052      	lsls	r2, r2, #1
 8005bba:	5ad3      	ldrh	r3, [r2, r3]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	f002 f879 	bl	8007cb6 <HAL_GPIO_WritePin>
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	2000004c 	.word	0x2000004c
 8005bd0:	0801e4bc 	.word	0x0801e4bc

08005bd4 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	0002      	movs	r2, r0
 8005bdc:	1dfb      	adds	r3, r7, #7
 8005bde:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005be0:	1dfb      	adds	r3, r7, #7
 8005be2:	781a      	ldrb	r2, [r3, #0]
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <BSP_LED_Off+0x30>)
 8005be6:	0092      	lsls	r2, r2, #2
 8005be8:	58d0      	ldr	r0, [r2, r3]
 8005bea:	1dfb      	adds	r3, r7, #7
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <BSP_LED_Off+0x34>)
 8005bf0:	0052      	lsls	r2, r2, #1
 8005bf2:	5ad3      	ldrh	r3, [r2, r3]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	0019      	movs	r1, r3
 8005bf8:	f002 f85d 	bl	8007cb6 <HAL_GPIO_WritePin>
}
 8005bfc:	46c0      	nop			; (mov r8, r8)
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	b002      	add	sp, #8
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	2000004c 	.word	0x2000004c
 8005c08:	0801e4bc 	.word	0x0801e4bc

08005c0c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	0002      	movs	r2, r0
 8005c14:	1dfb      	adds	r3, r7, #7
 8005c16:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005c18:	1dfb      	adds	r3, r7, #7
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <BSP_LED_Toggle+0x30>)
 8005c1e:	0092      	lsls	r2, r2, #2
 8005c20:	58d0      	ldr	r0, [r2, r3]
 8005c22:	1dfb      	adds	r3, r7, #7
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <BSP_LED_Toggle+0x34>)
 8005c28:	0052      	lsls	r2, r2, #1
 8005c2a:	5ad3      	ldrh	r3, [r2, r3]
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	f002 f85f 	bl	8007cf0 <HAL_GPIO_TogglePin>
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b002      	add	sp, #8
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	2000004c 	.word	0x2000004c
 8005c40:	0801e4bc 	.word	0x0801e4bc

08005c44 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	1dfb      	adds	r3, r7, #7
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	1dbb      	adds	r3, r7, #6
 8005c52:	1c0a      	adds	r2, r1, #0
 8005c54:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005c56:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <BSP_PB_Init+0xc0>)
 8005c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5a:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <BSP_PB_Init+0xc0>)
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c62:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <BSP_PB_Init+0xc0>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	2202      	movs	r2, #2
 8005c68:	4013      	ands	r3, r2
 8005c6a:	60bb      	str	r3, [r7, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c6e:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <BSP_PB_Init+0xc0>)
 8005c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c72:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <BSP_PB_Init+0xc0>)
 8005c74:	2101      	movs	r1, #1
 8005c76:	430a      	orrs	r2, r1
 8005c78:	635a      	str	r2, [r3, #52]	; 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005c7a:	1dbb      	adds	r3, r7, #6
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d117      	bne.n	8005cb2 <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005c82:	2304      	movs	r3, #4
 8005c84:	001a      	movs	r2, r3
 8005c86:	210c      	movs	r1, #12
 8005c88:	187b      	adds	r3, r7, r1
 8005c8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c8c:	187b      	adds	r3, r7, r1
 8005c8e:	2200      	movs	r2, #0
 8005c90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005c92:	187b      	adds	r3, r7, r1
 8005c94:	2202      	movs	r2, #2
 8005c96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c98:	187b      	adds	r3, r7, r1
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005c9e:	1dfb      	adds	r3, r7, #7
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <BSP_PB_Init+0xc4>)
 8005ca4:	0092      	lsls	r2, r2, #2
 8005ca6:	58d3      	ldr	r3, [r2, r3]
 8005ca8:	187a      	adds	r2, r7, r1
 8005caa:	0011      	movs	r1, r2
 8005cac:	0018      	movs	r0, r3
 8005cae:	f001 fd85 	bl	80077bc <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8005cb2:	1dbb      	adds	r3, r7, #6
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d11f      	bne.n	8005cfa <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005cba:	2304      	movs	r3, #4
 8005cbc:	001a      	movs	r2, r3
 8005cbe:	210c      	movs	r1, #12
 8005cc0:	187b      	adds	r3, r7, r1
 8005cc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc4:	187b      	adds	r3, r7, r1
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	4a0f      	ldr	r2, [pc, #60]	; (8005d0c <BSP_PB_Init+0xc8>)
 8005cce:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005cd0:	1dfb      	adds	r3, r7, #7
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <BSP_PB_Init+0xc4>)
 8005cd6:	0092      	lsls	r2, r2, #2
 8005cd8:	58d3      	ldr	r3, [r2, r3]
 8005cda:	187a      	adds	r2, r7, r1
 8005cdc:	0011      	movs	r1, r2
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f001 fd6c 	bl	80077bc <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 8005ce4:	2306      	movs	r3, #6
 8005ce6:	b25b      	sxtb	r3, r3
 8005ce8:	2103      	movs	r1, #3
 8005cea:	0018      	movs	r0, r3
 8005cec:	f7ff fe7a 	bl	80059e4 <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005cf0:	2306      	movs	r3, #6
 8005cf2:	b25b      	sxtb	r3, r3
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f001 fa4a 	bl	800718e <HAL_NVIC_EnableIRQ>
  }
}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	b008      	add	sp, #32
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	40021000 	.word	0x40021000
 8005d08:	2000005c 	.word	0x2000005c
 8005d0c:	10110000 	.word	0x10110000

08005d10 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005d14:	2305      	movs	r3, #5
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	0002      	movs	r2, r0
 8005d24:	1dfb      	adds	r3, r7, #7
 8005d26:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 8005d28:	1dfb      	adds	r3, r7, #7
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d10b      	bne.n	8005d48 <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	0159      	lsls	r1, r3, #5
 8005d34:	23a0      	movs	r3, #160	; 0xa0
 8005d36:	05db      	lsls	r3, r3, #23
 8005d38:	2201      	movs	r2, #1
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f001 ffbb 	bl	8007cb6 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8005d40:	2005      	movs	r0, #5
 8005d42:	f7ff f9bc 	bl	80050be <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8005d46:	e007      	b.n	8005d58 <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	0159      	lsls	r1, r3, #5
 8005d4c:	23a0      	movs	r3, #160	; 0xa0
 8005d4e:	05db      	lsls	r3, r3, #23
 8005d50:	2200      	movs	r2, #0
 8005d52:	0018      	movs	r0, r3
 8005d54:	f001 ffaf 	bl	8007cb6 <HAL_GPIO_WritePin>
}
 8005d58:	46c0      	nop			; (mov r8, r8)
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b0a7      	sub	sp, #156	; 0x9c
 8005d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005d66:	2480      	movs	r4, #128	; 0x80
 8005d68:	193b      	adds	r3, r7, r4
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	2314      	movs	r3, #20
 8005d6e:	001a      	movs	r2, r3
 8005d70:	2100      	movs	r1, #0
 8005d72:	f018 f832 	bl	801ddda <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8005d76:	4b78      	ldr	r3, [pc, #480]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7a:	4b77      	ldr	r3, [pc, #476]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d7c:	2102      	movs	r1, #2
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d82:	4b75      	ldr	r3, [pc, #468]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	2202      	movs	r2, #2
 8005d88:	4013      	ands	r3, r2
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8005d8e:	4b72      	ldr	r3, [pc, #456]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d92:	4b71      	ldr	r3, [pc, #452]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d94:	2102      	movs	r1, #2
 8005d96:	430a      	orrs	r2, r1
 8005d98:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d9a:	4b6f      	ldr	r3, [pc, #444]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	2202      	movs	r2, #2
 8005da0:	4013      	ands	r3, r2
 8005da2:	623b      	str	r3, [r7, #32]
 8005da4:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8005da6:	4b6c      	ldr	r3, [pc, #432]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	4b6b      	ldr	r3, [pc, #428]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005dac:	2102      	movs	r1, #2
 8005dae:	430a      	orrs	r2, r1
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005db2:	4b69      	ldr	r3, [pc, #420]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	2202      	movs	r2, #2
 8005db8:	4013      	ands	r3, r2
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8005dbe:	4b66      	ldr	r3, [pc, #408]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc2:	4b65      	ldr	r3, [pc, #404]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005dc4:	2104      	movs	r1, #4
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005dca:	4b63      	ldr	r3, [pc, #396]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	2204      	movs	r2, #4
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 8005dd6:	193b      	adds	r3, r7, r4
 8005dd8:	2202      	movs	r2, #2
 8005dda:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005ddc:	193b      	adds	r3, r7, r4
 8005dde:	2203      	movs	r2, #3
 8005de0:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	2294      	movs	r2, #148	; 0x94
 8005de6:	18ba      	adds	r2, r7, r2
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e020      	b.n	8005e2e <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005dec:	4b5b      	ldr	r3, [pc, #364]	; (8005f5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 8005dee:	2194      	movs	r1, #148	; 0x94
 8005df0:	187a      	adds	r2, r7, r1
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	0092      	lsls	r2, r2, #2
 8005df6:	58d2      	ldr	r2, [r2, r3]
 8005df8:	2080      	movs	r0, #128	; 0x80
 8005dfa:	183b      	adds	r3, r7, r0
 8005dfc:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005dfe:	4b58      	ldr	r3, [pc, #352]	; (8005f60 <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 8005e00:	187a      	adds	r2, r7, r1
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	0052      	lsls	r2, r2, #1
 8005e06:	5ad3      	ldrh	r3, [r2, r3]
 8005e08:	001a      	movs	r2, r3
 8005e0a:	183b      	adds	r3, r7, r0
 8005e0c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005e0e:	4b55      	ldr	r3, [pc, #340]	; (8005f64 <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 8005e10:	000c      	movs	r4, r1
 8005e12:	187a      	adds	r2, r7, r1
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	0092      	lsls	r2, r2, #2
 8005e18:	58d3      	ldr	r3, [r2, r3]
 8005e1a:	183a      	adds	r2, r7, r0
 8005e1c:	0011      	movs	r1, r2
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f001 fccc 	bl	80077bc <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005e24:	193b      	adds	r3, r7, r4
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	193a      	adds	r2, r7, r4
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	2394      	movs	r3, #148	; 0x94
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d9d9      	bls.n	8005dec <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 8005e38:	2328      	movs	r3, #40	; 0x28
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 fa07 	bl	8006250 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 8005e42:	2480      	movs	r4, #128	; 0x80
 8005e44:	193b      	adds	r3, r7, r4
 8005e46:	2280      	movs	r2, #128	; 0x80
 8005e48:	0212      	lsls	r2, r2, #8
 8005e4a:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e4c:	193b      	adds	r3, r7, r4
 8005e4e:	2201      	movs	r2, #1
 8005e50:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 8005e52:	193b      	adds	r3, r7, r4
 8005e54:	2201      	movs	r2, #1
 8005e56:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 8005e58:	4b3f      	ldr	r3, [pc, #252]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4b3e      	ldr	r3, [pc, #248]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e5e:	2101      	movs	r1, #1
 8005e60:	430a      	orrs	r2, r1
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e64:	4b3c      	ldr	r3, [pc, #240]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	2201      	movs	r2, #1
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8005e70:	193a      	adds	r2, r7, r4
 8005e72:	23a0      	movs	r3, #160	; 0xa0
 8005e74:	05db      	lsls	r3, r3, #23
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f001 fc9f 	bl	80077bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	0219      	lsls	r1, r3, #8
 8005e82:	23a0      	movs	r3, #160	; 0xa0
 8005e84:	05db      	lsls	r3, r3, #23
 8005e86:	2201      	movs	r2, #1
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f001 ff14 	bl	8007cb6 <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 8005e8e:	4b32      	ldr	r3, [pc, #200]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e92:	4b31      	ldr	r3, [pc, #196]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e94:	2101      	movs	r1, #1
 8005e96:	430a      	orrs	r2, r1
 8005e98:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e9a:	4b2f      	ldr	r3, [pc, #188]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8005ea6:	4b2c      	ldr	r3, [pc, #176]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	4b2b      	ldr	r3, [pc, #172]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005eac:	2101      	movs	r1, #1
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005eb2:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8005ebe:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec2:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ec4:	2104      	movs	r1, #4
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005eca:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	2204      	movs	r2, #4
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8005ed6:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eda:	4b1f      	ldr	r3, [pc, #124]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005edc:	2104      	movs	r1, #4
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ee2:	4b1d      	ldr	r3, [pc, #116]	; (8005f58 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	2204      	movs	r2, #4
 8005ee8:	4013      	ands	r3, r2
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005eee:	193b      	adds	r3, r7, r4
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005ef4:	193b      	adds	r3, r7, r4
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005efa:	193b      	adds	r3, r7, r4
 8005efc:	2203      	movs	r2, #3
 8005efe:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8005f00:	193b      	adds	r3, r7, r4
 8005f02:	2280      	movs	r2, #128	; 0x80
 8005f04:	0152      	lsls	r2, r2, #5
 8005f06:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8005f08:	193a      	adds	r2, r7, r4
 8005f0a:	23a0      	movs	r3, #160	; 0xa0
 8005f0c:	05db      	lsls	r3, r3, #23
 8005f0e:	0011      	movs	r1, r2
 8005f10:	0018      	movs	r0, r3
 8005f12:	f001 fc53 	bl	80077bc <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8005f16:	193b      	adds	r3, r7, r4
 8005f18:	2202      	movs	r2, #2
 8005f1a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8005f1c:	193a      	adds	r2, r7, r4
 8005f1e:	23a0      	movs	r3, #160	; 0xa0
 8005f20:	05db      	lsls	r3, r3, #23
 8005f22:	0011      	movs	r1, r2
 8005f24:	0018      	movs	r0, r3
 8005f26:	f001 fc49 	bl	80077bc <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8005f2a:	193b      	adds	r3, r7, r4
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8005f30:	193b      	adds	r3, r7, r4
 8005f32:	4a0d      	ldr	r2, [pc, #52]	; (8005f68 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005f34:	0019      	movs	r1, r3
 8005f36:	0010      	movs	r0, r2
 8005f38:	f001 fc40 	bl	80077bc <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8005f3c:	193b      	adds	r3, r7, r4
 8005f3e:	2204      	movs	r2, #4
 8005f40:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8005f42:	193b      	adds	r3, r7, r4
 8005f44:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005f46:	0019      	movs	r1, r3
 8005f48:	0010      	movs	r0, r2
 8005f4a:	f001 fc37 	bl	80077bc <HAL_GPIO_Init>
}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b027      	add	sp, #156	; 0x9c
 8005f54:	bd90      	pop	{r4, r7, pc}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	0801e4f8 	.word	0x0801e4f8
 8005f60:	0801e4f0 	.word	0x0801e4f0
 8005f64:	20000060 	.word	0x20000060
 8005f68:	50000800 	.word	0x50000800

08005f6c <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005f72:	003b      	movs	r3, r7
 8005f74:	0018      	movs	r0, r3
 8005f76:	2314      	movs	r3, #20
 8005f78:	001a      	movs	r2, r3
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	f017 ff2d 	bl	801ddda <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 8005f80:	003b      	movs	r3, r7
 8005f82:	2202      	movs	r2, #2
 8005f84:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	e018      	b.n	8005fbe <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	0092      	lsls	r2, r2, #2
 8005f92:	58d2      	ldr	r2, [r2, r3]
 8005f94:	003b      	movs	r3, r7
 8005f96:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005f98:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	0052      	lsls	r2, r2, #1
 8005f9e:	5ad3      	ldrh	r3, [r2, r3]
 8005fa0:	001a      	movs	r2, r3
 8005fa2:	003b      	movs	r3, r7
 8005fa4:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	0092      	lsls	r2, r2, #2
 8005fac:	58d3      	ldr	r3, [r2, r3]
 8005fae:	003a      	movs	r2, r7
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f001 fc02 	bl	80077bc <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d9e3      	bls.n	8005f8c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 8005fc4:	f000 f9a4 	bl	8006310 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b006      	add	sp, #24
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	0801e4f8 	.word	0x0801e4f8
 8005fd4:	0801e4f0 	.word	0x0801e4f0
 8005fd8:	20000060 	.word	0x20000060

08005fdc <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fea:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 8005fec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fee:	b672      	cpsid	i
}
 8005ff0:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	e02f      	b.n	8006058 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	00da      	lsls	r2, r3, #3
 8005ffc:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005ffe:	18d0      	adds	r0, r2, r3
 8006000:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	0092      	lsls	r2, r2, #2
 8006006:	58d3      	ldr	r3, [r2, r3]
 8006008:	0019      	movs	r1, r3
 800600a:	f001 fba1 	bl	8007750 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	00da      	lsls	r2, r3, #3
 8006012:	4b18      	ldr	r3, [pc, #96]	; (8006074 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8006014:	18d0      	adds	r0, r2, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	18d3      	adds	r3, r2, r3
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	001a      	movs	r2, r3
 8006022:	2100      	movs	r1, #0
 8006024:	f001 fb73 	bl	800770e <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8006028:	4a14      	ldr	r2, [pc, #80]	; (800607c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	18d3      	adds	r3, r2, r3
 800602e:	2000      	movs	r0, #0
 8006030:	5618      	ldrsb	r0, [r3, r0]
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	0092      	lsls	r2, r2, #2
 8006038:	58d3      	ldr	r3, [r2, r3]
 800603a:	2200      	movs	r2, #0
 800603c:	0019      	movs	r1, r3
 800603e:	f001 f891 	bl	8007164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8006042:	4a0e      	ldr	r2, [pc, #56]	; (800607c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	18d3      	adds	r3, r2, r3
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	b25b      	sxtb	r3, r3
 800604c:	0018      	movs	r0, r3
 800604e:	f001 f89e 	bl	800718e <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	3301      	adds	r3, #1
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d9cc      	bls.n	8005ff8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f383 8810 	msr	PRIMASK, r3
}
 8006068:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b006      	add	sp, #24
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	20001668 	.word	0x20001668
 8006078:	0801e4cc 	.word	0x0801e4cc
 800607c:	0801e4ec 	.word	0x0801e4ec
 8006080:	0801e4dc 	.word	0x0801e4dc

08006084 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 800608c:	2300      	movs	r3, #0
}
 800608e:	0018      	movs	r0, r3
 8006090:	46bd      	mov	sp, r7
 8006092:	b002      	add	sp, #8
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	0002      	movs	r2, r0
 80060a0:	1dfb      	adds	r3, r7, #7
 80060a2:	701a      	strb	r2, [r3, #0]

  switch (state)
 80060a4:	1dfb      	adds	r3, r7, #7
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d82e      	bhi.n	800610a <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 80060ac:	009a      	lsls	r2, r3, #2
 80060ae:	4b23      	ldr	r3, [pc, #140]	; (800613c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 80060b0:	18d3      	adds	r3, r2, r3
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 80060b6:	23a0      	movs	r3, #160	; 0xa0
 80060b8:	05db      	lsls	r3, r3, #23
 80060ba:	2201      	movs	r2, #1
 80060bc:	2102      	movs	r1, #2
 80060be:	0018      	movs	r0, r3
 80060c0:	f001 fdf9 	bl	8007cb6 <HAL_GPIO_WritePin>
      break;
 80060c4:	e036      	b.n	8006134 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 80060c6:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	2104      	movs	r1, #4
 80060cc:	0018      	movs	r0, r3
 80060ce:	f001 fdf2 	bl	8007cb6 <HAL_GPIO_WritePin>
      break;
 80060d2:	e02f      	b.n	8006134 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 80060d4:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	2102      	movs	r1, #2
 80060da:	0018      	movs	r0, r3
 80060dc:	f001 fdeb 	bl	8007cb6 <HAL_GPIO_WritePin>
      break;
 80060e0:	e028      	b.n	8006134 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80060e2:	23a0      	movs	r3, #160	; 0xa0
 80060e4:	05db      	lsls	r3, r3, #23
 80060e6:	2200      	movs	r2, #0
 80060e8:	2102      	movs	r1, #2
 80060ea:	0018      	movs	r0, r3
 80060ec:	f001 fde3 	bl	8007cb6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80060f0:	4b13      	ldr	r3, [pc, #76]	; (8006140 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	2104      	movs	r1, #4
 80060f6:	0018      	movs	r0, r3
 80060f8:	f001 fddd 	bl	8007cb6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80060fc:	4b10      	ldr	r3, [pc, #64]	; (8006140 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80060fe:	2200      	movs	r2, #0
 8006100:	2102      	movs	r1, #2
 8006102:	0018      	movs	r0, r3
 8006104:	f001 fdd7 	bl	8007cb6 <HAL_GPIO_WritePin>
      break;
 8006108:	e014      	b.n	8006134 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 800610a:	23a0      	movs	r3, #160	; 0xa0
 800610c:	05db      	lsls	r3, r3, #23
 800610e:	2200      	movs	r2, #0
 8006110:	2102      	movs	r1, #2
 8006112:	0018      	movs	r0, r3
 8006114:	f001 fdcf 	bl	8007cb6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8006118:	4b09      	ldr	r3, [pc, #36]	; (8006140 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 800611a:	2200      	movs	r2, #0
 800611c:	2104      	movs	r1, #4
 800611e:	0018      	movs	r0, r3
 8006120:	f001 fdc9 	bl	8007cb6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8006126:	2200      	movs	r2, #0
 8006128:	2102      	movs	r1, #2
 800612a:	0018      	movs	r0, r3
 800612c:	f001 fdc3 	bl	8007cb6 <HAL_GPIO_WritePin>

      break;
 8006130:	e000      	b.n	8006134 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 8006132:	46c0      	nop			; (mov r8, r8)
  }
}
 8006134:	46c0      	nop			; (mov r8, r8)
 8006136:	46bd      	mov	sp, r7
 8006138:	b002      	add	sp, #8
 800613a:	bd80      	pop	{r7, pc}
 800613c:	0801e508 	.word	0x0801e508
 8006140:	50000800 	.word	0x50000800

08006144 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 800614c:	2301      	movs	r3, #1
}
 800614e:	0018      	movs	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	b002      	add	sp, #8
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	0018      	movs	r0, r3
 8006162:	2314      	movs	r3, #20
 8006164:	001a      	movs	r2, r3
 8006166:	2100      	movs	r1, #0
 8006168:	f017 fe37 	bl	801ddda <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	2201      	movs	r2, #1
 8006170:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8006172:	1d3b      	adds	r3, r7, #4
 8006174:	2200      	movs	r2, #0
 8006176:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006178:	1d3b      	adds	r3, r7, #4
 800617a:	2203      	movs	r2, #3
 800617c:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	2201      	movs	r2, #1
 8006182:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8006184:	1d3b      	adds	r3, r7, #4
 8006186:	4a0f      	ldr	r2, [pc, #60]	; (80061c4 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8006188:	0019      	movs	r1, r3
 800618a:	0010      	movs	r0, r2
 800618c:	f001 fb16 	bl	80077bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8006192:	2200      	movs	r2, #0
 8006194:	2101      	movs	r1, #1
 8006196:	0018      	movs	r0, r3
 8006198:	f001 fd8d 	bl	8007cb6 <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 800619c:	2001      	movs	r0, #1
 800619e:	f7fe ff8e 	bl	80050be <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	2200      	movs	r2, #0
 80061a6:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80061a8:	1d3b      	adds	r3, r7, #4
 80061aa:	4a06      	ldr	r2, [pc, #24]	; (80061c4 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 80061ac:	0019      	movs	r1, r3
 80061ae:	0010      	movs	r0, r2
 80061b0:	f001 fb04 	bl	80077bc <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 80061b4:	2006      	movs	r0, #6
 80061b6:	f7fe ff82 	bl	80050be <HAL_Delay>
}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	46bd      	mov	sp, r7
 80061be:	b006      	add	sp, #24
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	50000800 	.word	0x50000800

080061c8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 80061cc:	f7ff fa34 	bl	8005638 <BSP_SPI1_Init>
}
 80061d0:	46c0      	nop			; (mov r8, r8)
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 80061d6:	b590      	push	{r4, r7, lr}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	0002      	movs	r2, r0
 80061de:	1dbb      	adds	r3, r7, #6
 80061e0:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80061e2:	240e      	movs	r4, #14
 80061e4:	1939      	adds	r1, r7, r4
 80061e6:	1dbb      	adds	r3, r7, #6
 80061e8:	2201      	movs	r2, #1
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7ff fa48 	bl	8005680 <BSP_SPI1_SendRecv>

  return rxData;
 80061f0:	193b      	adds	r3, r7, r4
 80061f2:	881b      	ldrh	r3, [r3, #0]
}
 80061f4:	0018      	movs	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	b005      	add	sp, #20
 80061fa:	bd90      	pop	{r4, r7, pc}

080061fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  if (state == 0)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d108      	bne.n	800621c <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 800620a:	2380      	movs	r3, #128	; 0x80
 800620c:	0219      	lsls	r1, r3, #8
 800620e:	23a0      	movs	r3, #160	; 0xa0
 8006210:	05db      	lsls	r3, r3, #23
 8006212:	2200      	movs	r2, #0
 8006214:	0018      	movs	r0, r3
 8006216:	f001 fd4e 	bl	8007cb6 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 800621a:	e007      	b.n	800622c <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	0219      	lsls	r1, r3, #8
 8006220:	23a0      	movs	r3, #160	; 0xa0
 8006222:	05db      	lsls	r3, r3, #23
 8006224:	2201      	movs	r2, #1
 8006226:	0018      	movs	r0, r3
 8006228:	f001 fd45 	bl	8007cb6 <HAL_GPIO_WritePin>
}
 800622c:	46c0      	nop			; (mov r8, r8)
 800622e:	46bd      	mov	sp, r7
 8006230:	b002      	add	sp, #8
 8006232:	bd80      	pop	{r7, pc}

08006234 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 800623a:	2102      	movs	r1, #2
 800623c:	0018      	movs	r0, r3
 800623e:	f001 fd1d 	bl	8007c7c <HAL_GPIO_ReadPin>
 8006242:	0003      	movs	r3, r0
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	50000400 	.word	0x50000400

08006250 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b08b      	sub	sp, #44	; 0x2c
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8006258:	4b2b      	ldr	r3, [pc, #172]	; (8006308 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800625a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625c:	4b2a      	ldr	r3, [pc, #168]	; (8006308 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800625e:	2102      	movs	r1, #2
 8006260:	430a      	orrs	r2, r1
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c
 8006264:	4b28      	ldr	r3, [pc, #160]	; (8006308 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	2202      	movs	r2, #2
 800626a:	4013      	ands	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8006270:	4b25      	ldr	r3, [pc, #148]	; (8006308 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	4b24      	ldr	r3, [pc, #144]	; (8006308 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006276:	2101      	movs	r1, #1
 8006278:	430a      	orrs	r2, r1
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c
 800627c:	4b22      	ldr	r3, [pc, #136]	; (8006308 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	2201      	movs	r2, #1
 8006282:	4013      	ands	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8006288:	4b1f      	ldr	r3, [pc, #124]	; (8006308 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800628e:	2101      	movs	r1, #1
 8006290:	430a      	orrs	r2, r1
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c
 8006294:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	2201      	movs	r2, #1
 800629a:	4013      	ands	r3, r2
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a0:	2414      	movs	r4, #20
 80062a2:	193b      	adds	r3, r7, r4
 80062a4:	2202      	movs	r2, #2
 80062a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80062a8:	193b      	adds	r3, r7, r4
 80062aa:	2202      	movs	r2, #2
 80062ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ae:	193b      	adds	r3, r7, r4
 80062b0:	2203      	movs	r2, #3
 80062b2:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80062b4:	193b      	adds	r3, r7, r4
 80062b6:	2200      	movs	r2, #0
 80062b8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80062ba:	193b      	adds	r3, r7, r4
 80062bc:	2280      	movs	r2, #128	; 0x80
 80062be:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80062c0:	193a      	adds	r2, r7, r4
 80062c2:	23a0      	movs	r3, #160	; 0xa0
 80062c4:	05db      	lsls	r3, r3, #23
 80062c6:	0011      	movs	r1, r2
 80062c8:	0018      	movs	r0, r3
 80062ca:	f001 fa77 	bl	80077bc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80062ce:	193b      	adds	r3, r7, r4
 80062d0:	2200      	movs	r2, #0
 80062d2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80062d4:	193b      	adds	r3, r7, r4
 80062d6:	2240      	movs	r2, #64	; 0x40
 80062d8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80062da:	193a      	adds	r2, r7, r4
 80062dc:	23a0      	movs	r3, #160	; 0xa0
 80062de:	05db      	lsls	r3, r3, #23
 80062e0:	0011      	movs	r1, r2
 80062e2:	0018      	movs	r0, r3
 80062e4:	f001 fa6a 	bl	80077bc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80062e8:	193b      	adds	r3, r7, r4
 80062ea:	2200      	movs	r2, #0
 80062ec:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80062ee:	193b      	adds	r3, r7, r4
 80062f0:	2208      	movs	r2, #8
 80062f2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80062f4:	193b      	adds	r3, r7, r4
 80062f6:	4a05      	ldr	r2, [pc, #20]	; (800630c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 80062f8:	0019      	movs	r1, r3
 80062fa:	0010      	movs	r0, r2
 80062fc:	f001 fa5e 	bl	80077bc <HAL_GPIO_Init>
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	46bd      	mov	sp, r7
 8006304:	b00b      	add	sp, #44	; 0x2c
 8006306:	bd90      	pop	{r4, r7, pc}
 8006308:	40021000 	.word	0x40021000
 800630c:	50000400 	.word	0x50000400

08006310 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006316:	1d3b      	adds	r3, r7, #4
 8006318:	2201      	movs	r2, #1
 800631a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	2202      	movs	r2, #2
 8006320:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8006322:	1d3b      	adds	r3, r7, #4
 8006324:	2280      	movs	r2, #128	; 0x80
 8006326:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006328:	1d3a      	adds	r2, r7, #4
 800632a:	23a0      	movs	r3, #160	; 0xa0
 800632c:	05db      	lsls	r3, r3, #23
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f001 fa43 	bl	80077bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8006336:	1d3b      	adds	r3, r7, #4
 8006338:	2240      	movs	r2, #64	; 0x40
 800633a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800633c:	1d3a      	adds	r2, r7, #4
 800633e:	23a0      	movs	r3, #160	; 0xa0
 8006340:	05db      	lsls	r3, r3, #23
 8006342:	0011      	movs	r1, r2
 8006344:	0018      	movs	r0, r3
 8006346:	f001 fa39 	bl	80077bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800634a:	1d3b      	adds	r3, r7, #4
 800634c:	2208      	movs	r2, #8
 800634e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006350:	1d3b      	adds	r3, r7, #4
 8006352:	4a0e      	ldr	r2, [pc, #56]	; (800638c <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8006354:	0019      	movs	r1, r3
 8006356:	0010      	movs	r0, r2
 8006358:	f001 fa30 	bl	80077bc <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 800635c:	23a0      	movs	r3, #160	; 0xa0
 800635e:	05db      	lsls	r3, r3, #23
 8006360:	2200      	movs	r2, #0
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	0018      	movs	r0, r3
 8006366:	f001 fca6 	bl	8007cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 800636a:	23a0      	movs	r3, #160	; 0xa0
 800636c:	05db      	lsls	r3, r3, #23
 800636e:	2200      	movs	r2, #0
 8006370:	2140      	movs	r1, #64	; 0x40
 8006372:	0018      	movs	r0, r3
 8006374:	f001 fc9f 	bl	8007cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 800637a:	2200      	movs	r2, #0
 800637c:	2108      	movs	r1, #8
 800637e:	0018      	movs	r0, r3
 8006380:	f001 fc99 	bl	8007cb6 <HAL_GPIO_WritePin>

}
 8006384:	46c0      	nop			; (mov r8, r8)
 8006386:	46bd      	mov	sp, r7
 8006388:	b006      	add	sp, #24
 800638a:	bd80      	pop	{r7, pc}
 800638c:	50000400 	.word	0x50000400

08006390 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006394:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <SystemInit+0x64>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <SystemInit+0x64>)
 800639a:	2180      	movs	r1, #128	; 0x80
 800639c:	0049      	lsls	r1, r1, #1
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80063a2:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <SystemInit+0x64>)
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	4b13      	ldr	r3, [pc, #76]	; (80063f4 <SystemInit+0x64>)
 80063a8:	4913      	ldr	r1, [pc, #76]	; (80063f8 <SystemInit+0x68>)
 80063aa:	400a      	ands	r2, r1
 80063ac:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <SystemInit+0x64>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <SystemInit+0x64>)
 80063b4:	4911      	ldr	r1, [pc, #68]	; (80063fc <SystemInit+0x6c>)
 80063b6:	400a      	ands	r2, r1
 80063b8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80063ba:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <SystemInit+0x64>)
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <SystemInit+0x64>)
 80063c0:	2101      	movs	r1, #1
 80063c2:	438a      	bics	r2, r1
 80063c4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80063c6:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <SystemInit+0x64>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <SystemInit+0x64>)
 80063cc:	490c      	ldr	r1, [pc, #48]	; (8006400 <SystemInit+0x70>)
 80063ce:	400a      	ands	r2, r1
 80063d0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <SystemInit+0x64>)
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <SystemInit+0x64>)
 80063d8:	490a      	ldr	r1, [pc, #40]	; (8006404 <SystemInit+0x74>)
 80063da:	400a      	ands	r2, r1
 80063dc:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80063de:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <SystemInit+0x64>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063e4:	4b08      	ldr	r3, [pc, #32]	; (8006408 <SystemInit+0x78>)
 80063e6:	2280      	movs	r2, #128	; 0x80
 80063e8:	0512      	lsls	r2, r2, #20
 80063ea:	609a      	str	r2, [r3, #8]
#endif
}
 80063ec:	46c0      	nop			; (mov r8, r8)
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	40021000 	.word	0x40021000
 80063f8:	88ff400c 	.word	0x88ff400c
 80063fc:	fef6fff6 	.word	0xfef6fff6
 8006400:	fffbffff 	.word	0xfffbffff
 8006404:	ff02ffff 	.word	0xff02ffff
 8006408:	e000ed00 	.word	0xe000ed00

0800640c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006412:	1dfb      	adds	r3, r7, #7
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <HAL_Init+0x3c>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <HAL_Init+0x3c>)
 800641e:	2102      	movs	r1, #2
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006424:	2003      	movs	r0, #3
 8006426:	f7fe fe39 	bl	800509c <HAL_InitTick>
 800642a:	1e03      	subs	r3, r0, #0
 800642c:	d003      	beq.n	8006436 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800642e:	1dfb      	adds	r3, r7, #7
 8006430:	2201      	movs	r2, #1
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	e001      	b.n	800643a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006436:	f7fe fbf7 	bl	8004c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800643a:	1dfb      	adds	r3, r7, #7
 800643c:	781b      	ldrb	r3, [r3, #0]
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b002      	add	sp, #8
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	40022000 	.word	0x40022000

0800644c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <HAL_IncTick+0x1c>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	001a      	movs	r2, r3
 8006456:	4b05      	ldr	r3, [pc, #20]	; (800646c <HAL_IncTick+0x20>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	18d2      	adds	r2, r2, r3
 800645c:	4b03      	ldr	r3, [pc, #12]	; (800646c <HAL_IncTick+0x20>)
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	46c0      	nop			; (mov r8, r8)
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	20000078 	.word	0x20000078
 800646c:	20001688 	.word	0x20001688

08006470 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8006474:	4b02      	ldr	r3, [pc, #8]	; (8006480 <HAL_GetUIDw0+0x10>)
 8006476:	681b      	ldr	r3, [r3, #0]
}
 8006478:	0018      	movs	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	1ff80050 	.word	0x1ff80050

08006484 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8006488:	4b02      	ldr	r3, [pc, #8]	; (8006494 <HAL_GetUIDw1+0x10>)
 800648a:	681b      	ldr	r3, [r3, #0]
}
 800648c:	0018      	movs	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	1ff80054 	.word	0x1ff80054

08006498 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800649c:	4b02      	ldr	r3, [pc, #8]	; (80064a8 <HAL_GetUIDw2+0x10>)
 800649e:	681b      	ldr	r3, [r3, #0]
}
 80064a0:	0018      	movs	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	1ff80064 	.word	0x1ff80064

080064ac <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80064b6:	2101      	movs	r1, #1
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
}
 80064bc:	46c0      	nop			; (mov r8, r8)
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	40015800 	.word	0x40015800

080064c8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80064d2:	2102      	movs	r1, #2
 80064d4:	430a      	orrs	r2, r1
 80064d6:	605a      	str	r2, [r3, #4]
}
 80064d8:	46c0      	nop			; (mov r8, r8)
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	40015800 	.word	0x40015800

080064e4 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80064e8:	4b04      	ldr	r3, [pc, #16]	; (80064fc <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	4b03      	ldr	r3, [pc, #12]	; (80064fc <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80064ee:	2104      	movs	r1, #4
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
}
 80064f4:	46c0      	nop			; (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	40015800 	.word	0x40015800

08006500 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e159      	b.n	80067c6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2250      	movs	r2, #80	; 0x50
 8006524:	2100      	movs	r1, #0
 8006526:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	0018      	movs	r0, r3
 800652c:	f7fd f972 	bl	8003814 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	2210      	movs	r2, #16
 8006536:	4013      	ands	r3, r2
 8006538:	2b10      	cmp	r3, #16
 800653a:	d005      	beq.n	8006548 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2204      	movs	r2, #4
 8006544:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006546:	d00b      	beq.n	8006560 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654c:	2210      	movs	r2, #16
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2250      	movs	r2, #80	; 0x50
 8006558:	2100      	movs	r1, #0
 800655a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e132      	b.n	80067c6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	4a9a      	ldr	r2, [pc, #616]	; (80067d0 <HAL_ADC_Init+0x2d0>)
 8006566:	4013      	ands	r3, r2
 8006568:	2202      	movs	r2, #2
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	2203      	movs	r2, #3
 8006578:	4013      	ands	r3, r2
 800657a:	2b01      	cmp	r3, #1
 800657c:	d108      	bne.n	8006590 <HAL_ADC_Init+0x90>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	4013      	ands	r3, r2
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_ADC_Init+0x90>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_ADC_Init+0x92>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d149      	bne.n	800662a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	23c0      	movs	r3, #192	; 0xc0
 800659c:	061b      	lsls	r3, r3, #24
 800659e:	429a      	cmp	r2, r3
 80065a0:	d00b      	beq.n	80065ba <HAL_ADC_Init+0xba>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	2380      	movs	r3, #128	; 0x80
 80065a8:	05db      	lsls	r3, r3, #23
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d005      	beq.n	80065ba <HAL_ADC_Init+0xba>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d111      	bne.n	80065de <HAL_ADC_Init+0xde>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	0092      	lsls	r2, r2, #2
 80065c6:	0892      	lsrs	r2, r2, #2
 80065c8:	611a      	str	r2, [r3, #16]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6919      	ldr	r1, [r3, #16]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	611a      	str	r2, [r3, #16]
 80065dc:	e014      	b.n	8006608 <HAL_ADC_Init+0x108>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	0092      	lsls	r2, r2, #2
 80065ea:	0892      	lsrs	r2, r2, #2
 80065ec:	611a      	str	r2, [r3, #16]
 80065ee:	4b79      	ldr	r3, [pc, #484]	; (80067d4 <HAL_ADC_Init+0x2d4>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b78      	ldr	r3, [pc, #480]	; (80067d4 <HAL_ADC_Init+0x2d4>)
 80065f4:	4978      	ldr	r1, [pc, #480]	; (80067d8 <HAL_ADC_Init+0x2d8>)
 80065f6:	400a      	ands	r2, r1
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	4b76      	ldr	r3, [pc, #472]	; (80067d4 <HAL_ADC_Init+0x2d4>)
 80065fc:	6819      	ldr	r1, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	4b74      	ldr	r3, [pc, #464]	; (80067d4 <HAL_ADC_Init+0x2d4>)
 8006604:	430a      	orrs	r2, r1
 8006606:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2118      	movs	r1, #24
 8006614:	438a      	bics	r2, r1
 8006616:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68d9      	ldr	r1, [r3, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800662a:	4b6a      	ldr	r3, [pc, #424]	; (80067d4 <HAL_ADC_Init+0x2d4>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	4b69      	ldr	r3, [pc, #420]	; (80067d4 <HAL_ADC_Init+0x2d4>)
 8006630:	496a      	ldr	r1, [pc, #424]	; (80067dc <HAL_ADC_Init+0x2dc>)
 8006632:	400a      	ands	r2, r1
 8006634:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006636:	4b67      	ldr	r3, [pc, #412]	; (80067d4 <HAL_ADC_Init+0x2d4>)
 8006638:	6819      	ldr	r1, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	065a      	lsls	r2, r3, #25
 8006640:	4b64      	ldr	r3, [pc, #400]	; (80067d4 <HAL_ADC_Init+0x2d4>)
 8006642:	430a      	orrs	r2, r1
 8006644:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	055b      	lsls	r3, r3, #21
 8006650:	4013      	ands	r3, r2
 8006652:	d108      	bne.n	8006666 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2180      	movs	r1, #128	; 0x80
 8006660:	0549      	lsls	r1, r1, #21
 8006662:	430a      	orrs	r2, r1
 8006664:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	495b      	ldr	r1, [pc, #364]	; (80067e0 <HAL_ADC_Init+0x2e0>)
 8006672:	400a      	ands	r2, r1
 8006674:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68d9      	ldr	r1, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d101      	bne.n	800668c <HAL_ADC_Init+0x18c>
 8006688:	2304      	movs	r3, #4
 800668a:	e000      	b.n	800668e <HAL_ADC_Init+0x18e>
 800668c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800668e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2020      	movs	r0, #32
 8006694:	5c1b      	ldrb	r3, [r3, r0]
 8006696:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006698:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	202c      	movs	r0, #44	; 0x2c
 800669e:	5c1b      	ldrb	r3, [r3, r0]
 80066a0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80066a2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80066a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80066b0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80066b8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066c6:	23c2      	movs	r3, #194	; 0xc2
 80066c8:	33ff      	adds	r3, #255	; 0xff
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d00b      	beq.n	80066e6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68d9      	ldr	r1, [r3, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2221      	movs	r2, #33	; 0x21
 80066ea:	5c9b      	ldrb	r3, [r3, r2]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d11a      	bne.n	8006726 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	5c9b      	ldrb	r3, [r3, r2]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	0249      	lsls	r1, r1, #9
 8006708:	430a      	orrs	r2, r1
 800670a:	60da      	str	r2, [r3, #12]
 800670c:	e00b      	b.n	8006726 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	2220      	movs	r2, #32
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671e:	2201      	movs	r2, #1
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d11f      	bne.n	800676e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	492a      	ldr	r1, [pc, #168]	; (80067e4 <HAL_ADC_Init+0x2e4>)
 800673a:	400a      	ands	r2, r1
 800673c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6919      	ldr	r1, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800674c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006752:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2101      	movs	r1, #1
 8006768:	430a      	orrs	r2, r1
 800676a:	611a      	str	r2, [r3, #16]
 800676c:	e00e      	b.n	800678c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2201      	movs	r2, #1
 8006776:	4013      	ands	r3, r2
 8006778:	2b01      	cmp	r3, #1
 800677a:	d107      	bne.n	800678c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2101      	movs	r1, #1
 8006788:	438a      	bics	r2, r1
 800678a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2107      	movs	r1, #7
 8006798:	438a      	bics	r2, r1
 800679a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6959      	ldr	r1, [r3, #20]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b8:	2203      	movs	r2, #3
 80067ba:	4393      	bics	r3, r2
 80067bc:	2201      	movs	r2, #1
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	0018      	movs	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b002      	add	sp, #8
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	fffffefd 	.word	0xfffffefd
 80067d4:	40012708 	.word	0x40012708
 80067d8:	ffc3ffff 	.word	0xffc3ffff
 80067dc:	fdffffff 	.word	0xfdffffff
 80067e0:	fffe0219 	.word	0xfffe0219
 80067e4:	fffffc03 	.word	0xfffffc03

080067e8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80067e8:	b5b0      	push	{r4, r5, r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067f0:	230f      	movs	r3, #15
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e07d      	b.n	80068fe <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	2202      	movs	r2, #2
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800680e:	250f      	movs	r5, #15
 8006810:	197c      	adds	r4, r7, r5
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0018      	movs	r0, r3
 8006816:	f000 faff 	bl	8006e18 <ADC_ConversionStop>
 800681a:	0003      	movs	r3, r0
 800681c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800681e:	197b      	adds	r3, r7, r5
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10d      	bne.n	8006842 <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006826:	197c      	adds	r4, r7, r5
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0018      	movs	r0, r3
 800682c:	f000 fa94 	bl	8006d58 <ADC_Disable>
 8006830:	0003      	movs	r3, r0
 8006832:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8006834:	197b      	adds	r3, r7, r5
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d002      	beq.n	8006842 <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8006842:	230f      	movs	r3, #15
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d051      	beq.n	80068f0 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	492c      	ldr	r1, [pc, #176]	; (8006908 <HAL_ADC_DeInit+0x120>)
 8006858:	400a      	ands	r2, r1
 800685a:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a2a      	ldr	r2, [pc, #168]	; (800690c <HAL_ADC_DeInit+0x124>)
 8006862:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4928      	ldr	r1, [pc, #160]	; (8006910 <HAL_ADC_DeInit+0x128>)
 8006870:	400a      	ands	r2, r1
 8006872:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4925      	ldr	r1, [pc, #148]	; (8006914 <HAL_ADC_DeInit+0x12c>)
 8006880:	400a      	ands	r2, r1
 8006882:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4922      	ldr	r1, [pc, #136]	; (8006918 <HAL_ADC_DeInit+0x130>)
 8006890:	400a      	ands	r2, r1
 8006892:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2107      	movs	r1, #7
 80068a0:	438a      	bics	r2, r1
 80068a2:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	491b      	ldr	r1, [pc, #108]	; (800691c <HAL_ADC_DeInit+0x134>)
 80068b0:	400a      	ands	r2, r1
 80068b2:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	22b4      	movs	r2, #180	; 0xb4
 80068ba:	589a      	ldr	r2, [r3, r2]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	217f      	movs	r1, #127	; 0x7f
 80068c2:	438a      	bics	r2, r1
 80068c4:	21b4      	movs	r1, #180	; 0xb4
 80068c6:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	22b4      	movs	r2, #180	; 0xb4
 80068ce:	589a      	ldr	r2, [r3, r2]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	217f      	movs	r1, #127	; 0x7f
 80068d6:	438a      	bics	r2, r1
 80068d8:	21b4      	movs	r1, #180	; 0xb4
 80068da:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0018      	movs	r0, r3
 80068e0:	f7fc ffc8 	bl	8003874 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2250      	movs	r2, #80	; 0x50
 80068f4:	2100      	movs	r1, #0
 80068f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80068f8:	230f      	movs	r3, #15
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	781b      	ldrb	r3, [r3, #0]
}
 80068fe:	0018      	movs	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	b004      	add	sp, #16
 8006904:	bdb0      	pop	{r4, r5, r7, pc}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	fffff760 	.word	0xfffff760
 800690c:	0000089f 	.word	0x0000089f
 8006910:	efffffff 	.word	0xefffffff
 8006914:	833e0200 	.word	0x833e0200
 8006918:	3ffffc02 	.word	0x3ffffc02
 800691c:	f000f000 	.word	0xf000f000

08006920 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006928:	230f      	movs	r3, #15
 800692a:	18fb      	adds	r3, r7, r3
 800692c:	2200      	movs	r2, #0
 800692e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2204      	movs	r2, #4
 8006938:	4013      	ands	r3, r2
 800693a:	d138      	bne.n	80069ae <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2250      	movs	r2, #80	; 0x50
 8006940:	5c9b      	ldrb	r3, [r3, r2]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_ADC_Start+0x2a>
 8006946:	2302      	movs	r3, #2
 8006948:	e038      	b.n	80069bc <HAL_ADC_Start+0x9c>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2250      	movs	r2, #80	; 0x50
 800694e:	2101      	movs	r1, #1
 8006950:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d007      	beq.n	800696a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800695a:	230f      	movs	r3, #15
 800695c:	18fc      	adds	r4, r7, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	0018      	movs	r0, r3
 8006962:	f000 f999 	bl	8006c98 <ADC_Enable>
 8006966:	0003      	movs	r3, r0
 8006968:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800696a:	230f      	movs	r3, #15
 800696c:	18fb      	adds	r3, r7, r3
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d120      	bne.n	80069b6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <HAL_ADC_Start+0xa4>)
 800697a:	4013      	ands	r3, r2
 800697c:	2280      	movs	r2, #128	; 0x80
 800697e:	0052      	lsls	r2, r2, #1
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2250      	movs	r2, #80	; 0x50
 8006990:	2100      	movs	r1, #0
 8006992:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	221c      	movs	r2, #28
 800699a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2104      	movs	r1, #4
 80069a8:	430a      	orrs	r2, r1
 80069aa:	609a      	str	r2, [r3, #8]
 80069ac:	e003      	b.n	80069b6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80069ae:	230f      	movs	r3, #15
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	2202      	movs	r2, #2
 80069b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80069b6:	230f      	movs	r3, #15
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	781b      	ldrb	r3, [r3, #0]
}
 80069bc:	0018      	movs	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	b005      	add	sp, #20
 80069c2:	bd90      	pop	{r4, r7, pc}
 80069c4:	fffff0fe 	.word	0xfffff0fe

080069c8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80069c8:	b5b0      	push	{r4, r5, r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069d0:	230f      	movs	r3, #15
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	2200      	movs	r2, #0
 80069d6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2250      	movs	r2, #80	; 0x50
 80069dc:	5c9b      	ldrb	r3, [r3, r2]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_ADC_Stop+0x1e>
 80069e2:	2302      	movs	r3, #2
 80069e4:	e029      	b.n	8006a3a <HAL_ADC_Stop+0x72>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2250      	movs	r2, #80	; 0x50
 80069ea:	2101      	movs	r1, #1
 80069ec:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80069ee:	250f      	movs	r5, #15
 80069f0:	197c      	adds	r4, r7, r5
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	0018      	movs	r0, r3
 80069f6:	f000 fa0f 	bl	8006e18 <ADC_ConversionStop>
 80069fa:	0003      	movs	r3, r0
 80069fc:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80069fe:	197b      	adds	r3, r7, r5
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d112      	bne.n	8006a2c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006a06:	197c      	adds	r4, r7, r5
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f000 f9a4 	bl	8006d58 <ADC_Disable>
 8006a10:	0003      	movs	r3, r0
 8006a12:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006a14:	197b      	adds	r3, r7, r5
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d107      	bne.n	8006a2c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <HAL_ADC_Stop+0x7c>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	2201      	movs	r2, #1
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2250      	movs	r2, #80	; 0x50
 8006a30:	2100      	movs	r1, #0
 8006a32:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006a34:	230f      	movs	r3, #15
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	781b      	ldrb	r3, [r3, #0]
}
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b004      	add	sp, #16
 8006a40:	bdb0      	pop	{r4, r5, r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	fffffefe 	.word	0xfffffefe

08006a48 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d102      	bne.n	8006a68 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006a62:	2308      	movs	r3, #8
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e014      	b.n	8006a92 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10b      	bne.n	8006a8e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2250      	movs	r2, #80	; 0x50
 8006a86:	2100      	movs	r1, #0
 8006a88:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e06c      	b.n	8006b68 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006a8e:	230c      	movs	r3, #12
 8006a90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006a92:	f7fe fb0c 	bl	80050ae <HAL_GetTick>
 8006a96:	0003      	movs	r3, r0
 8006a98:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006a9a:	e019      	b.n	8006ad0 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	d016      	beq.n	8006ad0 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <HAL_ADC_PollForConversion+0x70>
 8006aa8:	f7fe fb01 	bl	80050ae <HAL_GetTick>
 8006aac:	0002      	movs	r2, r0
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d20b      	bcs.n	8006ad0 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abc:	2204      	movs	r2, #4
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2250      	movs	r2, #80	; 0x50
 8006ac8:	2100      	movs	r1, #0
 8006aca:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e04b      	b.n	8006b68 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d0df      	beq.n	8006a9c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	0092      	lsls	r2, r2, #2
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	23c0      	movs	r3, #192	; 0xc0
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	4013      	ands	r3, r2
 8006af6:	d12e      	bne.n	8006b56 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d129      	bne.n	8006b56 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2208      	movs	r2, #8
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d122      	bne.n	8006b56 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2204      	movs	r2, #4
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d110      	bne.n	8006b3e <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	210c      	movs	r1, #12
 8006b28:	438a      	bics	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b30:	4a0f      	ldr	r2, [pc, #60]	; (8006b70 <HAL_ADC_PollForConversion+0x128>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	2201      	movs	r2, #1
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	655a      	str	r2, [r3, #84]	; 0x54
 8006b3c:	e00b      	b.n	8006b56 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	2220      	movs	r2, #32
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	2201      	movs	r2, #1
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	220c      	movs	r2, #12
 8006b64:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	0018      	movs	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b004      	add	sp, #16
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	fffffefe 	.word	0xfffffefe

08006b74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006b82:	0018      	movs	r0, r3
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b002      	add	sp, #8
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2250      	movs	r2, #80	; 0x50
 8006b9a:	5c9b      	ldrb	r3, [r3, r2]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_ADC_ConfigChannel+0x18>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e06c      	b.n	8006c7e <HAL_ADC_ConfigChannel+0xf2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2250      	movs	r2, #80	; 0x50
 8006ba8:	2101      	movs	r1, #1
 8006baa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	2204      	movs	r2, #4
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	d00b      	beq.n	8006bd0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2250      	movs	r2, #80	; 0x50
 8006bc8:	2100      	movs	r1, #0
 8006bca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e056      	b.n	8006c7e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4a2c      	ldr	r2, [pc, #176]	; (8006c88 <HAL_ADC_ConfigChannel+0xfc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d028      	beq.n	8006c2c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	035b      	lsls	r3, r3, #13
 8006be6:	0b5a      	lsrs	r2, r3, #13
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	02db      	lsls	r3, r3, #11
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d009      	beq.n	8006c10 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006bfc:	4b23      	ldr	r3, [pc, #140]	; (8006c8c <HAL_ADC_ConfigChannel+0x100>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	4b22      	ldr	r3, [pc, #136]	; (8006c8c <HAL_ADC_ConfigChannel+0x100>)
 8006c02:	2180      	movs	r1, #128	; 0x80
 8006c04:	0409      	lsls	r1, r1, #16
 8006c06:	430a      	orrs	r2, r1
 8006c08:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006c0a:	200a      	movs	r0, #10
 8006c0c:	f000 f94a 	bl	8006ea4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	029b      	lsls	r3, r3, #10
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d02b      	beq.n	8006c74 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <HAL_ADC_ConfigChannel+0x100>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b1a      	ldr	r3, [pc, #104]	; (8006c8c <HAL_ADC_ConfigChannel+0x100>)
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	03c9      	lsls	r1, r1, #15
 8006c26:	430a      	orrs	r2, r1
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	e023      	b.n	8006c74 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	035b      	lsls	r3, r3, #13
 8006c38:	0b5b      	lsrs	r3, r3, #13
 8006c3a:	43d9      	mvns	r1, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	400a      	ands	r2, r1
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	02db      	lsls	r3, r3, #11
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d005      	beq.n	8006c5c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006c50:	4b0e      	ldr	r3, [pc, #56]	; (8006c8c <HAL_ADC_ConfigChannel+0x100>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <HAL_ADC_ConfigChannel+0x100>)
 8006c56:	490e      	ldr	r1, [pc, #56]	; (8006c90 <HAL_ADC_ConfigChannel+0x104>)
 8006c58:	400a      	ands	r2, r1
 8006c5a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	029b      	lsls	r3, r3, #10
 8006c64:	4013      	ands	r3, r2
 8006c66:	d005      	beq.n	8006c74 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006c68:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <HAL_ADC_ConfigChannel+0x100>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b07      	ldr	r3, [pc, #28]	; (8006c8c <HAL_ADC_ConfigChannel+0x100>)
 8006c6e:	4909      	ldr	r1, [pc, #36]	; (8006c94 <HAL_ADC_ConfigChannel+0x108>)
 8006c70:	400a      	ands	r2, r1
 8006c72:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2250      	movs	r2, #80	; 0x50
 8006c78:	2100      	movs	r1, #0
 8006c7a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	0018      	movs	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b002      	add	sp, #8
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	00001001 	.word	0x00001001
 8006c8c:	40012708 	.word	0x40012708
 8006c90:	ff7fffff 	.word	0xff7fffff
 8006c94:	ffbfffff 	.word	0xffbfffff

08006c98 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2203      	movs	r2, #3
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d108      	bne.n	8006cc4 <ADC_Enable+0x2c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <ADC_Enable+0x2c>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <ADC_Enable+0x2e>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d13f      	bne.n	8006d4a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	4a20      	ldr	r2, [pc, #128]	; (8006d54 <ADC_Enable+0xbc>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	d00d      	beq.n	8006cf2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cda:	2210      	movs	r2, #16
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e02c      	b.n	8006d4c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006d02:	2001      	movs	r0, #1
 8006d04:	f000 f8ce 	bl	8006ea4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d08:	f7fe f9d1 	bl	80050ae <HAL_GetTick>
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006d10:	e014      	b.n	8006d3c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006d12:	f7fe f9cc 	bl	80050ae <HAL_GetTick>
 8006d16:	0002      	movs	r2, r0
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b0a      	cmp	r3, #10
 8006d1e:	d90d      	bls.n	8006d3c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d24:	2210      	movs	r2, #16
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	2201      	movs	r2, #1
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e007      	b.n	8006d4c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2201      	movs	r2, #1
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d1e3      	bne.n	8006d12 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b004      	add	sp, #16
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	80000017 	.word	0x80000017

08006d58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d108      	bne.n	8006d84 <ADC_Disable+0x2c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <ADC_Disable+0x2c>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <ADC_Disable+0x2e>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d041      	beq.n	8006e0e <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2205      	movs	r2, #5
 8006d92:	4013      	ands	r3, r2
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d110      	bne.n	8006dba <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2102      	movs	r1, #2
 8006da4:	430a      	orrs	r2, r1
 8006da6:	609a      	str	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2203      	movs	r2, #3
 8006dae:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006db0:	f7fe f97d 	bl	80050ae <HAL_GetTick>
 8006db4:	0003      	movs	r3, r0
 8006db6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006db8:	e022      	b.n	8006e00 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbe:	2210      	movs	r2, #16
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dca:	2201      	movs	r2, #1
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e01c      	b.n	8006e10 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006dd6:	f7fe f96a 	bl	80050ae <HAL_GetTick>
 8006dda:	0002      	movs	r2, r0
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b0a      	cmp	r3, #10
 8006de2:	d90d      	bls.n	8006e00 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de8:	2210      	movs	r2, #16
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df4:	2201      	movs	r2, #1
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e007      	b.n	8006e10 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2201      	movs	r2, #1
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d0e3      	beq.n	8006dd6 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	0018      	movs	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b004      	add	sp, #16
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d034      	beq.n	8006e9a <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2204      	movs	r2, #4
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d10d      	bne.n	8006e5a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2202      	movs	r2, #2
 8006e46:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006e48:	d107      	bne.n	8006e5a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2110      	movs	r1, #16
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e5a:	f7fe f928 	bl	80050ae <HAL_GetTick>
 8006e5e:	0003      	movs	r3, r0
 8006e60:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006e62:	e014      	b.n	8006e8e <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006e64:	f7fe f923 	bl	80050ae <HAL_GetTick>
 8006e68:	0002      	movs	r2, r0
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b0a      	cmp	r3, #10
 8006e70:	d90d      	bls.n	8006e8e <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e76:	2210      	movs	r2, #16
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	2201      	movs	r2, #1
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e006      	b.n	8006e9c <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2204      	movs	r2, #4
 8006e96:	4013      	ands	r3, r2
 8006e98:	d1e4      	bne.n	8006e64 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b004      	add	sp, #16
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <ADC_DelayMicroSecond+0x38>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	490b      	ldr	r1, [pc, #44]	; (8006ee0 <ADC_DelayMicroSecond+0x3c>)
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7f9 f930 	bl	8000118 <__udivsi3>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	001a      	movs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4353      	muls	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006ec2:	e002      	b.n	8006eca <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1f9      	bne.n	8006ec4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006ed0:	46c0      	nop			; (mov r8, r8)
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	b004      	add	sp, #16
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	20000070 	.word	0x20000070
 8006ee0:	000f4240 	.word	0x000f4240

08006ee4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006eee:	2317      	movs	r3, #23
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2250      	movs	r2, #80	; 0x50
 8006f02:	5c9b      	ldrb	r3, [r3, r2]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_ADCEx_Calibration_Start+0x28>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e07a      	b.n	8007002 <HAL_ADCEx_Calibration_Start+0x11e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2250      	movs	r2, #80	; 0x50
 8006f10:	2101      	movs	r1, #1
 8006f12:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d108      	bne.n	8006f34 <HAL_ADCEx_Calibration_Start+0x50>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_ADCEx_Calibration_Start+0x50>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_ADCEx_Calibration_Start+0x52>
 8006f34:	2300      	movs	r3, #0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d152      	bne.n	8006fe0 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	4a33      	ldr	r2, [pc, #204]	; (800700c <HAL_ADCEx_Calibration_Start+0x128>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	2202      	movs	r2, #2
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	2203      	movs	r2, #3
 8006f52:	4013      	ands	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2103      	movs	r1, #3
 8006f62:	438a      	bics	r2, r1
 8006f64:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2180      	movs	r1, #128	; 0x80
 8006f72:	0609      	lsls	r1, r1, #24
 8006f74:	430a      	orrs	r2, r1
 8006f76:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006f78:	f7fe f899 	bl	80050ae <HAL_GetTick>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006f80:	e014      	b.n	8006fac <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006f82:	f7fe f894 	bl	80050ae <HAL_GetTick>
 8006f86:	0002      	movs	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b0a      	cmp	r3, #10
 8006f8e:	d90d      	bls.n	8006fac <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f94:	2212      	movs	r2, #18
 8006f96:	4393      	bics	r3, r2
 8006f98:	2210      	movs	r2, #16
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2250      	movs	r2, #80	; 0x50
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e02a      	b.n	8007002 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	0fdb      	lsrs	r3, r3, #31
 8006fb4:	07da      	lsls	r2, r3, #31
 8006fb6:	2380      	movs	r3, #128	; 0x80
 8006fb8:	061b      	lsls	r3, r3, #24
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d0e1      	beq.n	8006f82 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68d9      	ldr	r1, [r3, #12]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd2:	2203      	movs	r2, #3
 8006fd4:	4393      	bics	r3, r2
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	655a      	str	r2, [r3, #84]	; 0x54
 8006fde:	e009      	b.n	8006ff4 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006fec:	2317      	movs	r3, #23
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2250      	movs	r2, #80	; 0x50
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006ffc:	2317      	movs	r3, #23
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	781b      	ldrb	r3, [r3, #0]
}
 8007002:	0018      	movs	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	b006      	add	sp, #24
 8007008:	bd80      	pop	{r7, pc}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	fffffefd 	.word	0xfffffefd

08007010 <__NVIC_EnableIRQ>:
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	0002      	movs	r2, r0
 8007018:	1dfb      	adds	r3, r7, #7
 800701a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800701c:	1dfb      	adds	r3, r7, #7
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b7f      	cmp	r3, #127	; 0x7f
 8007022:	d809      	bhi.n	8007038 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007024:	1dfb      	adds	r3, r7, #7
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	001a      	movs	r2, r3
 800702a:	231f      	movs	r3, #31
 800702c:	401a      	ands	r2, r3
 800702e:	4b04      	ldr	r3, [pc, #16]	; (8007040 <__NVIC_EnableIRQ+0x30>)
 8007030:	2101      	movs	r1, #1
 8007032:	4091      	lsls	r1, r2
 8007034:	000a      	movs	r2, r1
 8007036:	601a      	str	r2, [r3, #0]
}
 8007038:	46c0      	nop			; (mov r8, r8)
 800703a:	46bd      	mov	sp, r7
 800703c:	b002      	add	sp, #8
 800703e:	bd80      	pop	{r7, pc}
 8007040:	e000e100 	.word	0xe000e100

08007044 <__NVIC_DisableIRQ>:
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	0002      	movs	r2, r0
 800704c:	1dfb      	adds	r3, r7, #7
 800704e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007050:	1dfb      	adds	r3, r7, #7
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b7f      	cmp	r3, #127	; 0x7f
 8007056:	d810      	bhi.n	800707a <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007058:	1dfb      	adds	r3, r7, #7
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	001a      	movs	r2, r3
 800705e:	231f      	movs	r3, #31
 8007060:	4013      	ands	r3, r2
 8007062:	4908      	ldr	r1, [pc, #32]	; (8007084 <__NVIC_DisableIRQ+0x40>)
 8007064:	2201      	movs	r2, #1
 8007066:	409a      	lsls	r2, r3
 8007068:	0013      	movs	r3, r2
 800706a:	2280      	movs	r2, #128	; 0x80
 800706c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800706e:	f3bf 8f4f 	dsb	sy
}
 8007072:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007074:	f3bf 8f6f 	isb	sy
}
 8007078:	46c0      	nop			; (mov r8, r8)
}
 800707a:	46c0      	nop			; (mov r8, r8)
 800707c:	46bd      	mov	sp, r7
 800707e:	b002      	add	sp, #8
 8007080:	bd80      	pop	{r7, pc}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	e000e100 	.word	0xe000e100

08007088 <__NVIC_SetPriority>:
{
 8007088:	b590      	push	{r4, r7, lr}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	0002      	movs	r2, r0
 8007090:	6039      	str	r1, [r7, #0]
 8007092:	1dfb      	adds	r3, r7, #7
 8007094:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007096:	1dfb      	adds	r3, r7, #7
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b7f      	cmp	r3, #127	; 0x7f
 800709c:	d828      	bhi.n	80070f0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800709e:	4a2f      	ldr	r2, [pc, #188]	; (800715c <__NVIC_SetPriority+0xd4>)
 80070a0:	1dfb      	adds	r3, r7, #7
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	b25b      	sxtb	r3, r3
 80070a6:	089b      	lsrs	r3, r3, #2
 80070a8:	33c0      	adds	r3, #192	; 0xc0
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	589b      	ldr	r3, [r3, r2]
 80070ae:	1dfa      	adds	r2, r7, #7
 80070b0:	7812      	ldrb	r2, [r2, #0]
 80070b2:	0011      	movs	r1, r2
 80070b4:	2203      	movs	r2, #3
 80070b6:	400a      	ands	r2, r1
 80070b8:	00d2      	lsls	r2, r2, #3
 80070ba:	21ff      	movs	r1, #255	; 0xff
 80070bc:	4091      	lsls	r1, r2
 80070be:	000a      	movs	r2, r1
 80070c0:	43d2      	mvns	r2, r2
 80070c2:	401a      	ands	r2, r3
 80070c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	019b      	lsls	r3, r3, #6
 80070ca:	22ff      	movs	r2, #255	; 0xff
 80070cc:	401a      	ands	r2, r3
 80070ce:	1dfb      	adds	r3, r7, #7
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	0018      	movs	r0, r3
 80070d4:	2303      	movs	r3, #3
 80070d6:	4003      	ands	r3, r0
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070dc:	481f      	ldr	r0, [pc, #124]	; (800715c <__NVIC_SetPriority+0xd4>)
 80070de:	1dfb      	adds	r3, r7, #7
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	b25b      	sxtb	r3, r3
 80070e4:	089b      	lsrs	r3, r3, #2
 80070e6:	430a      	orrs	r2, r1
 80070e8:	33c0      	adds	r3, #192	; 0xc0
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	501a      	str	r2, [r3, r0]
}
 80070ee:	e031      	b.n	8007154 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070f0:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <__NVIC_SetPriority+0xd8>)
 80070f2:	1dfb      	adds	r3, r7, #7
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	0019      	movs	r1, r3
 80070f8:	230f      	movs	r3, #15
 80070fa:	400b      	ands	r3, r1
 80070fc:	3b08      	subs	r3, #8
 80070fe:	089b      	lsrs	r3, r3, #2
 8007100:	3306      	adds	r3, #6
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	18d3      	adds	r3, r2, r3
 8007106:	3304      	adds	r3, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	1dfa      	adds	r2, r7, #7
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	0011      	movs	r1, r2
 8007110:	2203      	movs	r2, #3
 8007112:	400a      	ands	r2, r1
 8007114:	00d2      	lsls	r2, r2, #3
 8007116:	21ff      	movs	r1, #255	; 0xff
 8007118:	4091      	lsls	r1, r2
 800711a:	000a      	movs	r2, r1
 800711c:	43d2      	mvns	r2, r2
 800711e:	401a      	ands	r2, r3
 8007120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	019b      	lsls	r3, r3, #6
 8007126:	22ff      	movs	r2, #255	; 0xff
 8007128:	401a      	ands	r2, r3
 800712a:	1dfb      	adds	r3, r7, #7
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	0018      	movs	r0, r3
 8007130:	2303      	movs	r3, #3
 8007132:	4003      	ands	r3, r0
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007138:	4809      	ldr	r0, [pc, #36]	; (8007160 <__NVIC_SetPriority+0xd8>)
 800713a:	1dfb      	adds	r3, r7, #7
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	001c      	movs	r4, r3
 8007140:	230f      	movs	r3, #15
 8007142:	4023      	ands	r3, r4
 8007144:	3b08      	subs	r3, #8
 8007146:	089b      	lsrs	r3, r3, #2
 8007148:	430a      	orrs	r2, r1
 800714a:	3306      	adds	r3, #6
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	18c3      	adds	r3, r0, r3
 8007150:	3304      	adds	r3, #4
 8007152:	601a      	str	r2, [r3, #0]
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	46bd      	mov	sp, r7
 8007158:	b003      	add	sp, #12
 800715a:	bd90      	pop	{r4, r7, pc}
 800715c:	e000e100 	.word	0xe000e100
 8007160:	e000ed00 	.word	0xe000ed00

08007164 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	210f      	movs	r1, #15
 8007170:	187b      	adds	r3, r7, r1
 8007172:	1c02      	adds	r2, r0, #0
 8007174:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	187b      	adds	r3, r7, r1
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b25b      	sxtb	r3, r3
 800717e:	0011      	movs	r1, r2
 8007180:	0018      	movs	r0, r3
 8007182:	f7ff ff81 	bl	8007088 <__NVIC_SetPriority>
}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	46bd      	mov	sp, r7
 800718a:	b004      	add	sp, #16
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	0002      	movs	r2, r0
 8007196:	1dfb      	adds	r3, r7, #7
 8007198:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800719a:	1dfb      	adds	r3, r7, #7
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	b25b      	sxtb	r3, r3
 80071a0:	0018      	movs	r0, r3
 80071a2:	f7ff ff35 	bl	8007010 <__NVIC_EnableIRQ>
}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b002      	add	sp, #8
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	0002      	movs	r2, r0
 80071b6:	1dfb      	adds	r3, r7, #7
 80071b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80071ba:	1dfb      	adds	r3, r7, #7
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	b25b      	sxtb	r3, r3
 80071c0:	0018      	movs	r0, r3
 80071c2:	f7ff ff3f 	bl	8007044 <__NVIC_DisableIRQ>
}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	46bd      	mov	sp, r7
 80071ca:	b002      	add	sp, #8
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e061      	b.n	80072a6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a32      	ldr	r2, [pc, #200]	; (80072b0 <HAL_DMA_Init+0xe0>)
 80071e8:	4694      	mov	ip, r2
 80071ea:	4463      	add	r3, ip
 80071ec:	2114      	movs	r1, #20
 80071ee:	0018      	movs	r0, r3
 80071f0:	f7f8 ff92 	bl	8000118 <__udivsi3>
 80071f4:	0003      	movs	r3, r0
 80071f6:	009a      	lsls	r2, r3, #2
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a2d      	ldr	r2, [pc, #180]	; (80072b4 <HAL_DMA_Init+0xe4>)
 8007200:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2225      	movs	r2, #37	; 0x25
 8007206:	2102      	movs	r1, #2
 8007208:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a28      	ldr	r2, [pc, #160]	; (80072b8 <HAL_DMA_Init+0xe8>)
 8007216:	4013      	ands	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800722e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800723a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	2380      	movs	r3, #128	; 0x80
 8007256:	01db      	lsls	r3, r3, #7
 8007258:	429a      	cmp	r2, r3
 800725a:	d018      	beq.n	800728e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800725c:	4b17      	ldr	r3, [pc, #92]	; (80072bc <HAL_DMA_Init+0xec>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007264:	211c      	movs	r1, #28
 8007266:	400b      	ands	r3, r1
 8007268:	210f      	movs	r1, #15
 800726a:	4099      	lsls	r1, r3
 800726c:	000b      	movs	r3, r1
 800726e:	43d9      	mvns	r1, r3
 8007270:	4b12      	ldr	r3, [pc, #72]	; (80072bc <HAL_DMA_Init+0xec>)
 8007272:	400a      	ands	r2, r1
 8007274:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007276:	4b11      	ldr	r3, [pc, #68]	; (80072bc <HAL_DMA_Init+0xec>)
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	201c      	movs	r0, #28
 8007284:	4003      	ands	r3, r0
 8007286:	409a      	lsls	r2, r3
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <HAL_DMA_Init+0xec>)
 800728a:	430a      	orrs	r2, r1
 800728c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2225      	movs	r2, #37	; 0x25
 8007298:	2101      	movs	r1, #1
 800729a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2224      	movs	r2, #36	; 0x24
 80072a0:	2100      	movs	r1, #0
 80072a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	0018      	movs	r0, r3
 80072a8:	46bd      	mov	sp, r7
 80072aa:	b004      	add	sp, #16
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	bffdfff8 	.word	0xbffdfff8
 80072b4:	40020000 	.word	0x40020000
 80072b8:	ffff800f 	.word	0xffff800f
 80072bc:	400200a8 	.word	0x400200a8

080072c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e04a      	b.n	8007368 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2101      	movs	r1, #1
 80072de:	438a      	bics	r2, r1
 80072e0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a22      	ldr	r2, [pc, #136]	; (8007370 <HAL_DMA_DeInit+0xb0>)
 80072e8:	4694      	mov	ip, r2
 80072ea:	4463      	add	r3, ip
 80072ec:	2114      	movs	r1, #20
 80072ee:	0018      	movs	r0, r3
 80072f0:	f7f8 ff12 	bl	8000118 <__udivsi3>
 80072f4:	0003      	movs	r3, r0
 80072f6:	009a      	lsls	r2, r3, #2
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1d      	ldr	r2, [pc, #116]	; (8007374 <HAL_DMA_DeInit+0xb4>)
 8007300:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	221c      	movs	r2, #28
 8007310:	401a      	ands	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	2101      	movs	r1, #1
 8007318:	4091      	lsls	r1, r2
 800731a:	000a      	movs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800731e:	4b16      	ldr	r3, [pc, #88]	; (8007378 <HAL_DMA_DeInit+0xb8>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007326:	211c      	movs	r1, #28
 8007328:	400b      	ands	r3, r1
 800732a:	210f      	movs	r1, #15
 800732c:	4099      	lsls	r1, r3
 800732e:	000b      	movs	r3, r1
 8007330:	43d9      	mvns	r1, r3
 8007332:	4b11      	ldr	r3, [pc, #68]	; (8007378 <HAL_DMA_DeInit+0xb8>)
 8007334:	400a      	ands	r2, r1
 8007336:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2225      	movs	r2, #37	; 0x25
 800735a:	2100      	movs	r1, #0
 800735c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2224      	movs	r2, #36	; 0x24
 8007362:	2100      	movs	r1, #0
 8007364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	0018      	movs	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	b002      	add	sp, #8
 800736e:	bd80      	pop	{r7, pc}
 8007370:	bffdfff8 	.word	0xbffdfff8
 8007374:	40020000 	.word	0x40020000
 8007378:	400200a8 	.word	0x400200a8

0800737c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800738a:	2317      	movs	r3, #23
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	2200      	movs	r2, #0
 8007390:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2224      	movs	r2, #36	; 0x24
 8007396:	5c9b      	ldrb	r3, [r3, r2]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_DMA_Start_IT+0x24>
 800739c:	2302      	movs	r3, #2
 800739e:	e04f      	b.n	8007440 <HAL_DMA_Start_IT+0xc4>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2224      	movs	r2, #36	; 0x24
 80073a4:	2101      	movs	r1, #1
 80073a6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2225      	movs	r2, #37	; 0x25
 80073ac:	5c9b      	ldrb	r3, [r3, r2]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d13a      	bne.n	800742a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2225      	movs	r2, #37	; 0x25
 80073b8:	2102      	movs	r1, #2
 80073ba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2101      	movs	r1, #1
 80073ce:	438a      	bics	r2, r1
 80073d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f96a 	bl	80076b2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d008      	beq.n	80073f8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	210e      	movs	r1, #14
 80073f2:	430a      	orrs	r2, r1
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	e00f      	b.n	8007418 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2104      	movs	r1, #4
 8007404:	438a      	bics	r2, r1
 8007406:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	210a      	movs	r1, #10
 8007414:	430a      	orrs	r2, r1
 8007416:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2101      	movs	r1, #1
 8007424:	430a      	orrs	r2, r1
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	e007      	b.n	800743a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2224      	movs	r2, #36	; 0x24
 800742e:	2100      	movs	r1, #0
 8007430:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007432:	2317      	movs	r3, #23
 8007434:	18fb      	adds	r3, r7, r3
 8007436:	2202      	movs	r2, #2
 8007438:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800743a:	2317      	movs	r3, #23
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	781b      	ldrb	r3, [r3, #0]
}
 8007440:	0018      	movs	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	b006      	add	sp, #24
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007450:	230f      	movs	r3, #15
 8007452:	18fb      	adds	r3, r7, r3
 8007454:	2200      	movs	r2, #0
 8007456:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2225      	movs	r2, #37	; 0x25
 800745c:	5c9b      	ldrb	r3, [r3, r2]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d008      	beq.n	8007476 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2204      	movs	r2, #4
 8007468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2224      	movs	r2, #36	; 0x24
 800746e:	2100      	movs	r1, #0
 8007470:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e024      	b.n	80074c0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	210e      	movs	r1, #14
 8007482:	438a      	bics	r2, r1
 8007484:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2101      	movs	r1, #1
 8007492:	438a      	bics	r2, r1
 8007494:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	221c      	movs	r2, #28
 800749c:	401a      	ands	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	2101      	movs	r1, #1
 80074a4:	4091      	lsls	r1, r2
 80074a6:	000a      	movs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2225      	movs	r2, #37	; 0x25
 80074ae:	2101      	movs	r1, #1
 80074b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2224      	movs	r2, #36	; 0x24
 80074b6:	2100      	movs	r1, #0
 80074b8:	5499      	strb	r1, [r3, r2]

    return status;
 80074ba:	230f      	movs	r3, #15
 80074bc:	18fb      	adds	r3, r7, r3
 80074be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074c0:	0018      	movs	r0, r3
 80074c2:	46bd      	mov	sp, r7
 80074c4:	b004      	add	sp, #16
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074d0:	210f      	movs	r1, #15
 80074d2:	187b      	adds	r3, r7, r1
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2225      	movs	r2, #37	; 0x25
 80074dc:	5c9b      	ldrb	r3, [r3, r2]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d006      	beq.n	80074f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2204      	movs	r2, #4
 80074e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80074ea:	187b      	adds	r3, r7, r1
 80074ec:	2201      	movs	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e02a      	b.n	8007548 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	210e      	movs	r1, #14
 80074fe:	438a      	bics	r2, r1
 8007500:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2101      	movs	r1, #1
 800750e:	438a      	bics	r2, r1
 8007510:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	221c      	movs	r2, #28
 8007518:	401a      	ands	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	2101      	movs	r1, #1
 8007520:	4091      	lsls	r1, r2
 8007522:	000a      	movs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2225      	movs	r2, #37	; 0x25
 800752a:	2101      	movs	r1, #1
 800752c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2224      	movs	r2, #36	; 0x24
 8007532:	2100      	movs	r1, #0
 8007534:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	2b00      	cmp	r3, #0
 800753c:	d004      	beq.n	8007548 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	0010      	movs	r0, r2
 8007546:	4798      	blx	r3
    }
  }
  return status;
 8007548:	230f      	movs	r3, #15
 800754a:	18fb      	adds	r3, r7, r3
 800754c:	781b      	ldrb	r3, [r3, #0]
}
 800754e:	0018      	movs	r0, r3
 8007550:	46bd      	mov	sp, r7
 8007552:	b004      	add	sp, #16
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	221c      	movs	r2, #28
 8007574:	4013      	ands	r3, r2
 8007576:	2204      	movs	r2, #4
 8007578:	409a      	lsls	r2, r3
 800757a:	0013      	movs	r3, r2
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4013      	ands	r3, r2
 8007580:	d026      	beq.n	80075d0 <HAL_DMA_IRQHandler+0x7a>
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2204      	movs	r2, #4
 8007586:	4013      	ands	r3, r2
 8007588:	d022      	beq.n	80075d0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2220      	movs	r2, #32
 8007592:	4013      	ands	r3, r2
 8007594:	d107      	bne.n	80075a6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2104      	movs	r1, #4
 80075a2:	438a      	bics	r2, r1
 80075a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075aa:	221c      	movs	r2, #28
 80075ac:	401a      	ands	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	2104      	movs	r1, #4
 80075b4:	4091      	lsls	r1, r2
 80075b6:	000a      	movs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d100      	bne.n	80075c4 <HAL_DMA_IRQHandler+0x6e>
 80075c2:	e071      	b.n	80076a8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	0010      	movs	r0, r2
 80075cc:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80075ce:	e06b      	b.n	80076a8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d4:	221c      	movs	r2, #28
 80075d6:	4013      	ands	r3, r2
 80075d8:	2202      	movs	r2, #2
 80075da:	409a      	lsls	r2, r3
 80075dc:	0013      	movs	r3, r2
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4013      	ands	r3, r2
 80075e2:	d02d      	beq.n	8007640 <HAL_DMA_IRQHandler+0xea>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2202      	movs	r2, #2
 80075e8:	4013      	ands	r3, r2
 80075ea:	d029      	beq.n	8007640 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2220      	movs	r2, #32
 80075f4:	4013      	ands	r3, r2
 80075f6:	d10b      	bne.n	8007610 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	210a      	movs	r1, #10
 8007604:	438a      	bics	r2, r1
 8007606:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2225      	movs	r2, #37	; 0x25
 800760c:	2101      	movs	r1, #1
 800760e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007614:	221c      	movs	r2, #28
 8007616:	401a      	ands	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761c:	2102      	movs	r1, #2
 800761e:	4091      	lsls	r1, r2
 8007620:	000a      	movs	r2, r1
 8007622:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2224      	movs	r2, #36	; 0x24
 8007628:	2100      	movs	r1, #0
 800762a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d039      	beq.n	80076a8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	0010      	movs	r0, r2
 800763c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800763e:	e033      	b.n	80076a8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007644:	221c      	movs	r2, #28
 8007646:	4013      	ands	r3, r2
 8007648:	2208      	movs	r2, #8
 800764a:	409a      	lsls	r2, r3
 800764c:	0013      	movs	r3, r2
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4013      	ands	r3, r2
 8007652:	d02a      	beq.n	80076aa <HAL_DMA_IRQHandler+0x154>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2208      	movs	r2, #8
 8007658:	4013      	ands	r3, r2
 800765a:	d026      	beq.n	80076aa <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	210e      	movs	r1, #14
 8007668:	438a      	bics	r2, r1
 800766a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007670:	221c      	movs	r2, #28
 8007672:	401a      	ands	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	2101      	movs	r1, #1
 800767a:	4091      	lsls	r1, r2
 800767c:	000a      	movs	r2, r1
 800767e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2225      	movs	r2, #37	; 0x25
 800768a:	2101      	movs	r1, #1
 800768c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2224      	movs	r2, #36	; 0x24
 8007692:	2100      	movs	r1, #0
 8007694:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	0010      	movs	r0, r2
 80076a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80076a8:	46c0      	nop			; (mov r8, r8)
 80076aa:	46c0      	nop			; (mov r8, r8)
}
 80076ac:	46bd      	mov	sp, r7
 80076ae:	b004      	add	sp, #16
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
 80076be:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c4:	221c      	movs	r2, #28
 80076c6:	401a      	ands	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	2101      	movs	r1, #1
 80076ce:	4091      	lsls	r1, r2
 80076d0:	000a      	movs	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	2b10      	cmp	r3, #16
 80076e2:	d108      	bne.n	80076f6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80076f4:	e007      	b.n	8007706 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	60da      	str	r2, [r3, #12]
}
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	46bd      	mov	sp, r7
 800770a:	b004      	add	sp, #16
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	200b      	movs	r0, #11
 800771a:	183b      	adds	r3, r7, r0
 800771c:	1c0a      	adds	r2, r1, #0
 800771e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007720:	2317      	movs	r3, #23
 8007722:	18fb      	adds	r3, r7, r3
 8007724:	2200      	movs	r2, #0
 8007726:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8007728:	183b      	adds	r3, r7, r0
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d103      	bne.n	8007738 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	605a      	str	r2, [r3, #4]
      break;
 8007736:	e004      	b.n	8007742 <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 8007738:	2317      	movs	r3, #23
 800773a:	18fb      	adds	r3, r7, r3
 800773c:	2201      	movs	r2, #1
 800773e:	701a      	strb	r2, [r3, #0]
      break;
 8007740:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8007742:	2317      	movs	r3, #23
 8007744:	18fb      	adds	r3, r7, r3
 8007746:	781b      	ldrb	r3, [r3, #0]
}
 8007748:	0018      	movs	r0, r3
 800774a:	46bd      	mov	sp, r7
 800774c:	b006      	add	sp, #24
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e003      	b.n	800776c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800776a:	2300      	movs	r3, #0
  }
}
 800776c:	0018      	movs	r0, r3
 800776e:	46bd      	mov	sp, r7
 8007770:	b002      	add	sp, #8
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	221f      	movs	r2, #31
 8007782:	4013      	ands	r3, r2
 8007784:	2201      	movs	r2, #1
 8007786:	409a      	lsls	r2, r3
 8007788:	0013      	movs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <HAL_EXTI_IRQHandler+0x44>)
 800778e:	695a      	ldr	r2, [r3, #20]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4013      	ands	r3, r2
 8007794:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d009      	beq.n	80077b0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <HAL_EXTI_IRQHandler+0x44>)
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	4798      	blx	r3
    }
  }
}
 80077b0:	46c0      	nop			; (mov r8, r8)
 80077b2:	46bd      	mov	sp, r7
 80077b4:	b004      	add	sp, #16
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	40010400 	.word	0x40010400

080077bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80077d2:	e155      	b.n	8007a80 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2101      	movs	r1, #1
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4091      	lsls	r1, r2
 80077de:	000a      	movs	r2, r1
 80077e0:	4013      	ands	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d100      	bne.n	80077ec <HAL_GPIO_Init+0x30>
 80077ea:	e146      	b.n	8007a7a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d00b      	beq.n	800780c <HAL_GPIO_Init+0x50>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d007      	beq.n	800780c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007800:	2b11      	cmp	r3, #17
 8007802:	d003      	beq.n	800780c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2b12      	cmp	r3, #18
 800780a:	d130      	bne.n	800786e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	2203      	movs	r2, #3
 8007818:	409a      	lsls	r2, r3
 800781a:	0013      	movs	r3, r2
 800781c:	43da      	mvns	r2, r3
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	4013      	ands	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	409a      	lsls	r2, r3
 800782e:	0013      	movs	r3, r2
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007842:	2201      	movs	r2, #1
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	409a      	lsls	r2, r3
 8007848:	0013      	movs	r3, r2
 800784a:	43da      	mvns	r2, r3
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4013      	ands	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	2201      	movs	r2, #1
 800785a:	401a      	ands	r2, r3
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	409a      	lsls	r2, r3
 8007860:	0013      	movs	r3, r2
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	2203      	movs	r2, #3
 800787a:	409a      	lsls	r2, r3
 800787c:	0013      	movs	r3, r2
 800787e:	43da      	mvns	r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	4013      	ands	r3, r2
 8007884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	409a      	lsls	r2, r3
 8007890:	0013      	movs	r3, r2
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d003      	beq.n	80078ae <HAL_GPIO_Init+0xf2>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b12      	cmp	r3, #18
 80078ac:	d123      	bne.n	80078f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	08da      	lsrs	r2, r3, #3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3208      	adds	r2, #8
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	58d3      	ldr	r3, [r2, r3]
 80078ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2207      	movs	r2, #7
 80078c0:	4013      	ands	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	220f      	movs	r2, #15
 80078c6:	409a      	lsls	r2, r3
 80078c8:	0013      	movs	r3, r2
 80078ca:	43da      	mvns	r2, r3
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	4013      	ands	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2107      	movs	r1, #7
 80078da:	400b      	ands	r3, r1
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	409a      	lsls	r2, r3
 80078e0:	0013      	movs	r3, r2
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	08da      	lsrs	r2, r3, #3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3208      	adds	r2, #8
 80078f0:	0092      	lsls	r2, r2, #2
 80078f2:	6939      	ldr	r1, [r7, #16]
 80078f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	2203      	movs	r2, #3
 8007902:	409a      	lsls	r2, r3
 8007904:	0013      	movs	r3, r2
 8007906:	43da      	mvns	r2, r3
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4013      	ands	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2203      	movs	r2, #3
 8007914:	401a      	ands	r2, r3
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	409a      	lsls	r2, r3
 800791c:	0013      	movs	r3, r2
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	2380      	movs	r3, #128	; 0x80
 8007930:	055b      	lsls	r3, r3, #21
 8007932:	4013      	ands	r3, r2
 8007934:	d100      	bne.n	8007938 <HAL_GPIO_Init+0x17c>
 8007936:	e0a0      	b.n	8007a7a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007938:	4b57      	ldr	r3, [pc, #348]	; (8007a98 <HAL_GPIO_Init+0x2dc>)
 800793a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800793c:	4b56      	ldr	r3, [pc, #344]	; (8007a98 <HAL_GPIO_Init+0x2dc>)
 800793e:	2101      	movs	r1, #1
 8007940:	430a      	orrs	r2, r1
 8007942:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007944:	4a55      	ldr	r2, [pc, #340]	; (8007a9c <HAL_GPIO_Init+0x2e0>)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	089b      	lsrs	r3, r3, #2
 800794a:	3302      	adds	r3, #2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	589b      	ldr	r3, [r3, r2]
 8007950:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2203      	movs	r2, #3
 8007956:	4013      	ands	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	220f      	movs	r2, #15
 800795c:	409a      	lsls	r2, r3
 800795e:	0013      	movs	r3, r2
 8007960:	43da      	mvns	r2, r3
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	4013      	ands	r3, r2
 8007966:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	23a0      	movs	r3, #160	; 0xa0
 800796c:	05db      	lsls	r3, r3, #23
 800796e:	429a      	cmp	r2, r3
 8007970:	d01f      	beq.n	80079b2 <HAL_GPIO_Init+0x1f6>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a4a      	ldr	r2, [pc, #296]	; (8007aa0 <HAL_GPIO_Init+0x2e4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d019      	beq.n	80079ae <HAL_GPIO_Init+0x1f2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a49      	ldr	r2, [pc, #292]	; (8007aa4 <HAL_GPIO_Init+0x2e8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d013      	beq.n	80079aa <HAL_GPIO_Init+0x1ee>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a48      	ldr	r2, [pc, #288]	; (8007aa8 <HAL_GPIO_Init+0x2ec>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00d      	beq.n	80079a6 <HAL_GPIO_Init+0x1ea>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a47      	ldr	r2, [pc, #284]	; (8007aac <HAL_GPIO_Init+0x2f0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d007      	beq.n	80079a2 <HAL_GPIO_Init+0x1e6>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a46      	ldr	r2, [pc, #280]	; (8007ab0 <HAL_GPIO_Init+0x2f4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d101      	bne.n	800799e <HAL_GPIO_Init+0x1e2>
 800799a:	2305      	movs	r3, #5
 800799c:	e00a      	b.n	80079b4 <HAL_GPIO_Init+0x1f8>
 800799e:	2306      	movs	r3, #6
 80079a0:	e008      	b.n	80079b4 <HAL_GPIO_Init+0x1f8>
 80079a2:	2304      	movs	r3, #4
 80079a4:	e006      	b.n	80079b4 <HAL_GPIO_Init+0x1f8>
 80079a6:	2303      	movs	r3, #3
 80079a8:	e004      	b.n	80079b4 <HAL_GPIO_Init+0x1f8>
 80079aa:	2302      	movs	r3, #2
 80079ac:	e002      	b.n	80079b4 <HAL_GPIO_Init+0x1f8>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_GPIO_Init+0x1f8>
 80079b2:	2300      	movs	r3, #0
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	2103      	movs	r1, #3
 80079b8:	400a      	ands	r2, r1
 80079ba:	0092      	lsls	r2, r2, #2
 80079bc:	4093      	lsls	r3, r2
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079c4:	4935      	ldr	r1, [pc, #212]	; (8007a9c <HAL_GPIO_Init+0x2e0>)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	089b      	lsrs	r3, r3, #2
 80079ca:	3302      	adds	r3, #2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079d2:	4b38      	ldr	r3, [pc, #224]	; (8007ab4 <HAL_GPIO_Init+0x2f8>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	43da      	mvns	r2, r3
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	4013      	ands	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	2380      	movs	r3, #128	; 0x80
 80079e8:	025b      	lsls	r3, r3, #9
 80079ea:	4013      	ands	r3, r2
 80079ec:	d003      	beq.n	80079f6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80079f6:	4b2f      	ldr	r3, [pc, #188]	; (8007ab4 <HAL_GPIO_Init+0x2f8>)
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80079fc:	4b2d      	ldr	r3, [pc, #180]	; (8007ab4 <HAL_GPIO_Init+0x2f8>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	43da      	mvns	r2, r3
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	2380      	movs	r3, #128	; 0x80
 8007a12:	029b      	lsls	r3, r3, #10
 8007a14:	4013      	ands	r3, r2
 8007a16:	d003      	beq.n	8007a20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007a20:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <HAL_GPIO_Init+0x2f8>)
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a26:	4b23      	ldr	r3, [pc, #140]	; (8007ab4 <HAL_GPIO_Init+0x2f8>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	43da      	mvns	r2, r3
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4013      	ands	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	2380      	movs	r3, #128	; 0x80
 8007a3c:	035b      	lsls	r3, r3, #13
 8007a3e:	4013      	ands	r3, r2
 8007a40:	d003      	beq.n	8007a4a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007a4a:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <HAL_GPIO_Init+0x2f8>)
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007a50:	4b18      	ldr	r3, [pc, #96]	; (8007ab4 <HAL_GPIO_Init+0x2f8>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	43da      	mvns	r2, r3
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	2380      	movs	r3, #128	; 0x80
 8007a66:	039b      	lsls	r3, r3, #14
 8007a68:	4013      	ands	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <HAL_GPIO_Init+0x2f8>)
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	40da      	lsrs	r2, r3
 8007a88:	1e13      	subs	r3, r2, #0
 8007a8a:	d000      	beq.n	8007a8e <HAL_GPIO_Init+0x2d2>
 8007a8c:	e6a2      	b.n	80077d4 <HAL_GPIO_Init+0x18>
  }
}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	46c0      	nop			; (mov r8, r8)
 8007a92:	46bd      	mov	sp, r7
 8007a94:	b006      	add	sp, #24
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	40021000 	.word	0x40021000
 8007a9c:	40010000 	.word	0x40010000
 8007aa0:	50000400 	.word	0x50000400
 8007aa4:	50000800 	.word	0x50000800
 8007aa8:	50000c00 	.word	0x50000c00
 8007aac:	50001000 	.word	0x50001000
 8007ab0:	50001c00 	.word	0x50001c00
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8007ace:	e0bc      	b.n	8007c4a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	409a      	lsls	r2, r3
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d100      	bne.n	8007ae4 <HAL_GPIO_DeInit+0x2c>
 8007ae2:	e0af      	b.n	8007c44 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8007ae4:	4a5e      	ldr	r2, [pc, #376]	; (8007c60 <HAL_GPIO_DeInit+0x1a8>)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	089b      	lsrs	r3, r3, #2
 8007aea:	3302      	adds	r3, #2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	589b      	ldr	r3, [r3, r2]
 8007af0:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2203      	movs	r2, #3
 8007af6:	4013      	ands	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	220f      	movs	r2, #15
 8007afc:	409a      	lsls	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4013      	ands	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	23a0      	movs	r3, #160	; 0xa0
 8007b08:	05db      	lsls	r3, r3, #23
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d01f      	beq.n	8007b4e <HAL_GPIO_DeInit+0x96>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a54      	ldr	r2, [pc, #336]	; (8007c64 <HAL_GPIO_DeInit+0x1ac>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d019      	beq.n	8007b4a <HAL_GPIO_DeInit+0x92>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a53      	ldr	r2, [pc, #332]	; (8007c68 <HAL_GPIO_DeInit+0x1b0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_GPIO_DeInit+0x8e>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a52      	ldr	r2, [pc, #328]	; (8007c6c <HAL_GPIO_DeInit+0x1b4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00d      	beq.n	8007b42 <HAL_GPIO_DeInit+0x8a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a51      	ldr	r2, [pc, #324]	; (8007c70 <HAL_GPIO_DeInit+0x1b8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d007      	beq.n	8007b3e <HAL_GPIO_DeInit+0x86>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a50      	ldr	r2, [pc, #320]	; (8007c74 <HAL_GPIO_DeInit+0x1bc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d101      	bne.n	8007b3a <HAL_GPIO_DeInit+0x82>
 8007b36:	2305      	movs	r3, #5
 8007b38:	e00a      	b.n	8007b50 <HAL_GPIO_DeInit+0x98>
 8007b3a:	2306      	movs	r3, #6
 8007b3c:	e008      	b.n	8007b50 <HAL_GPIO_DeInit+0x98>
 8007b3e:	2304      	movs	r3, #4
 8007b40:	e006      	b.n	8007b50 <HAL_GPIO_DeInit+0x98>
 8007b42:	2303      	movs	r3, #3
 8007b44:	e004      	b.n	8007b50 <HAL_GPIO_DeInit+0x98>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e002      	b.n	8007b50 <HAL_GPIO_DeInit+0x98>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <HAL_GPIO_DeInit+0x98>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	2103      	movs	r1, #3
 8007b54:	400a      	ands	r2, r1
 8007b56:	0092      	lsls	r2, r2, #2
 8007b58:	4093      	lsls	r3, r2
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d132      	bne.n	8007bc6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b60:	4b45      	ldr	r3, [pc, #276]	; (8007c78 <HAL_GPIO_DeInit+0x1c0>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	43d9      	mvns	r1, r3
 8007b68:	4b43      	ldr	r3, [pc, #268]	; (8007c78 <HAL_GPIO_DeInit+0x1c0>)
 8007b6a:	400a      	ands	r2, r1
 8007b6c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b6e:	4b42      	ldr	r3, [pc, #264]	; (8007c78 <HAL_GPIO_DeInit+0x1c0>)
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	43d9      	mvns	r1, r3
 8007b76:	4b40      	ldr	r3, [pc, #256]	; (8007c78 <HAL_GPIO_DeInit+0x1c0>)
 8007b78:	400a      	ands	r2, r1
 8007b7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b7c:	4b3e      	ldr	r3, [pc, #248]	; (8007c78 <HAL_GPIO_DeInit+0x1c0>)
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	43d9      	mvns	r1, r3
 8007b84:	4b3c      	ldr	r3, [pc, #240]	; (8007c78 <HAL_GPIO_DeInit+0x1c0>)
 8007b86:	400a      	ands	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b8a:	4b3b      	ldr	r3, [pc, #236]	; (8007c78 <HAL_GPIO_DeInit+0x1c0>)
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	43d9      	mvns	r1, r3
 8007b92:	4b39      	ldr	r3, [pc, #228]	; (8007c78 <HAL_GPIO_DeInit+0x1c0>)
 8007b94:	400a      	ands	r2, r1
 8007b96:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	220f      	movs	r2, #15
 8007ba2:	409a      	lsls	r2, r3
 8007ba4:	0013      	movs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007ba8:	4a2d      	ldr	r2, [pc, #180]	; (8007c60 <HAL_GPIO_DeInit+0x1a8>)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	089b      	lsrs	r3, r3, #2
 8007bae:	3302      	adds	r3, #2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	589a      	ldr	r2, [r3, r2]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	43d9      	mvns	r1, r3
 8007bb8:	4829      	ldr	r0, [pc, #164]	; (8007c60 <HAL_GPIO_DeInit+0x1a8>)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	089b      	lsrs	r3, r3, #2
 8007bbe:	400a      	ands	r2, r1
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	2103      	movs	r1, #3
 8007bd0:	4099      	lsls	r1, r3
 8007bd2:	000b      	movs	r3, r1
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	08da      	lsrs	r2, r3, #3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3208      	adds	r2, #8
 8007be2:	0092      	lsls	r2, r2, #2
 8007be4:	58d3      	ldr	r3, [r2, r3]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	2107      	movs	r1, #7
 8007bea:	400a      	ands	r2, r1
 8007bec:	0092      	lsls	r2, r2, #2
 8007bee:	210f      	movs	r1, #15
 8007bf0:	4091      	lsls	r1, r2
 8007bf2:	000a      	movs	r2, r1
 8007bf4:	43d1      	mvns	r1, r2
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	08d2      	lsrs	r2, r2, #3
 8007bfa:	4019      	ands	r1, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3208      	adds	r2, #8
 8007c00:	0092      	lsls	r2, r2, #2
 8007c02:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	0052      	lsls	r2, r2, #1
 8007c0c:	2103      	movs	r1, #3
 8007c0e:	4091      	lsls	r1, r2
 8007c10:	000a      	movs	r2, r1
 8007c12:	43d2      	mvns	r2, r2
 8007c14:	401a      	ands	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2101      	movs	r1, #1
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	4091      	lsls	r1, r2
 8007c24:	000a      	movs	r2, r1
 8007c26:	43d2      	mvns	r2, r2
 8007c28:	401a      	ands	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	0052      	lsls	r2, r2, #1
 8007c36:	2103      	movs	r1, #3
 8007c38:	4091      	lsls	r1, r2
 8007c3a:	000a      	movs	r2, r1
 8007c3c:	43d2      	mvns	r2, r2
 8007c3e:	401a      	ands	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	609a      	str	r2, [r3, #8]
    }
    position++;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	3301      	adds	r3, #1
 8007c48:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	40da      	lsrs	r2, r3
 8007c50:	1e13      	subs	r3, r2, #0
 8007c52:	d000      	beq.n	8007c56 <HAL_GPIO_DeInit+0x19e>
 8007c54:	e73c      	b.n	8007ad0 <HAL_GPIO_DeInit+0x18>
  }
}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	46c0      	nop			; (mov r8, r8)
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b006      	add	sp, #24
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	40010000 	.word	0x40010000
 8007c64:	50000400 	.word	0x50000400
 8007c68:	50000800 	.word	0x50000800
 8007c6c:	50000c00 	.word	0x50000c00
 8007c70:	50001000 	.word	0x50001000
 8007c74:	50001c00 	.word	0x50001c00
 8007c78:	40010400 	.word	0x40010400

08007c7c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	000a      	movs	r2, r1
 8007c86:	1cbb      	adds	r3, r7, #2
 8007c88:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	1cba      	adds	r2, r7, #2
 8007c90:	8812      	ldrh	r2, [r2, #0]
 8007c92:	4013      	ands	r3, r2
 8007c94:	d004      	beq.n	8007ca0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007c96:	230f      	movs	r3, #15
 8007c98:	18fb      	adds	r3, r7, r3
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e003      	b.n	8007ca8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ca0:	230f      	movs	r3, #15
 8007ca2:	18fb      	adds	r3, r7, r3
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007ca8:	230f      	movs	r3, #15
 8007caa:	18fb      	adds	r3, r7, r3
 8007cac:	781b      	ldrb	r3, [r3, #0]
}
 8007cae:	0018      	movs	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b004      	add	sp, #16
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	0008      	movs	r0, r1
 8007cc0:	0011      	movs	r1, r2
 8007cc2:	1cbb      	adds	r3, r7, #2
 8007cc4:	1c02      	adds	r2, r0, #0
 8007cc6:	801a      	strh	r2, [r3, #0]
 8007cc8:	1c7b      	adds	r3, r7, #1
 8007cca:	1c0a      	adds	r2, r1, #0
 8007ccc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cce:	1c7b      	adds	r3, r7, #1
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cd6:	1cbb      	adds	r3, r7, #2
 8007cd8:	881a      	ldrh	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007cde:	e003      	b.n	8007ce8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007ce0:	1cbb      	adds	r3, r7, #2
 8007ce2:	881a      	ldrh	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ce8:	46c0      	nop			; (mov r8, r8)
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b002      	add	sp, #8
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	000a      	movs	r2, r1
 8007cfa:	1cbb      	adds	r3, r7, #2
 8007cfc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d04:	1cbb      	adds	r3, r7, #2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	041a      	lsls	r2, r3, #16
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	1cb9      	adds	r1, r7, #2
 8007d14:	8809      	ldrh	r1, [r1, #0]
 8007d16:	400b      	ands	r3, r1
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	619a      	str	r2, [r3, #24]
}
 8007d1e:	46c0      	nop			; (mov r8, r8)
 8007d20:	46bd      	mov	sp, r7
 8007d22:	b004      	add	sp, #16
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e082      	b.n	8007e40 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2241      	movs	r2, #65	; 0x41
 8007d3e:	5c9b      	ldrb	r3, [r3, r2]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d107      	bne.n	8007d56 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2240      	movs	r2, #64	; 0x40
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	0018      	movs	r0, r3
 8007d52:	f000 f87f 	bl	8007e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2241      	movs	r2, #65	; 0x41
 8007d5a:	2124      	movs	r1, #36	; 0x24
 8007d5c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2101      	movs	r1, #1
 8007d6a:	438a      	bics	r2, r1
 8007d6c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4934      	ldr	r1, [pc, #208]	; (8007e48 <HAL_I2C_Init+0x120>)
 8007d78:	400a      	ands	r2, r1
 8007d7a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4931      	ldr	r1, [pc, #196]	; (8007e4c <HAL_I2C_Init+0x124>)
 8007d88:	400a      	ands	r2, r1
 8007d8a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d108      	bne.n	8007da6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2180      	movs	r1, #128	; 0x80
 8007d9e:	0209      	lsls	r1, r1, #8
 8007da0:	430a      	orrs	r2, r1
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	e007      	b.n	8007db6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2184      	movs	r1, #132	; 0x84
 8007db0:	0209      	lsls	r1, r1, #8
 8007db2:	430a      	orrs	r2, r1
 8007db4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d104      	bne.n	8007dc8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2280      	movs	r2, #128	; 0x80
 8007dc4:	0112      	lsls	r2, r2, #4
 8007dc6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	491f      	ldr	r1, [pc, #124]	; (8007e50 <HAL_I2C_Init+0x128>)
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	491a      	ldr	r1, [pc, #104]	; (8007e4c <HAL_I2C_Init+0x124>)
 8007de4:	400a      	ands	r2, r1
 8007de6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	431a      	orrs	r2, r3
 8007df2:	0011      	movs	r1, r2
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	021a      	lsls	r2, r3, #8
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69d9      	ldr	r1, [r3, #28]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1a      	ldr	r2, [r3, #32]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2241      	movs	r2, #65	; 0x41
 8007e2c:	2120      	movs	r1, #32
 8007e2e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2242      	movs	r2, #66	; 0x42
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	0018      	movs	r0, r3
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b002      	add	sp, #8
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	f0ffffff 	.word	0xf0ffffff
 8007e4c:	ffff7fff 	.word	0xffff7fff
 8007e50:	02008000 	.word	0x02008000

08007e54 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007e5c:	46c0      	nop			; (mov r8, r8)
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	b002      	add	sp, #8
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b089      	sub	sp, #36	; 0x24
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	000c      	movs	r4, r1
 8007e6e:	0010      	movs	r0, r2
 8007e70:	0019      	movs	r1, r3
 8007e72:	230a      	movs	r3, #10
 8007e74:	18fb      	adds	r3, r7, r3
 8007e76:	1c22      	adds	r2, r4, #0
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	2308      	movs	r3, #8
 8007e7c:	18fb      	adds	r3, r7, r3
 8007e7e:	1c02      	adds	r2, r0, #0
 8007e80:	801a      	strh	r2, [r3, #0]
 8007e82:	1dbb      	adds	r3, r7, #6
 8007e84:	1c0a      	adds	r2, r1, #0
 8007e86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2241      	movs	r2, #65	; 0x41
 8007e8c:	5c9b      	ldrb	r3, [r3, r2]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d000      	beq.n	8007e96 <HAL_I2C_Mem_Write+0x32>
 8007e94:	e10c      	b.n	80080b0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d004      	beq.n	8007ea6 <HAL_I2C_Mem_Write+0x42>
 8007e9c:	232c      	movs	r3, #44	; 0x2c
 8007e9e:	18fb      	adds	r3, r7, r3
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d105      	bne.n	8007eb2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2280      	movs	r2, #128	; 0x80
 8007eaa:	0092      	lsls	r2, r2, #2
 8007eac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e0ff      	b.n	80080b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2240      	movs	r2, #64	; 0x40
 8007eb6:	5c9b      	ldrb	r3, [r3, r2]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_I2C_Mem_Write+0x5c>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e0f8      	b.n	80080b2 <HAL_I2C_Mem_Write+0x24e>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2240      	movs	r2, #64	; 0x40
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ec8:	f7fd f8f1 	bl	80050ae <HAL_GetTick>
 8007ecc:	0003      	movs	r3, r0
 8007ece:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ed0:	2380      	movs	r3, #128	; 0x80
 8007ed2:	0219      	lsls	r1, r3, #8
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	2319      	movs	r3, #25
 8007edc:	2201      	movs	r2, #1
 8007ede:	f000 fb17 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 8007ee2:	1e03      	subs	r3, r0, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e0e3      	b.n	80080b2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2241      	movs	r2, #65	; 0x41
 8007eee:	2121      	movs	r1, #33	; 0x21
 8007ef0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2242      	movs	r2, #66	; 0x42
 8007ef6:	2140      	movs	r1, #64	; 0x40
 8007ef8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	222c      	movs	r2, #44	; 0x2c
 8007f0a:	18ba      	adds	r2, r7, r2
 8007f0c:	8812      	ldrh	r2, [r2, #0]
 8007f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f16:	1dbb      	adds	r3, r7, #6
 8007f18:	881c      	ldrh	r4, [r3, #0]
 8007f1a:	2308      	movs	r3, #8
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	881a      	ldrh	r2, [r3, #0]
 8007f20:	230a      	movs	r3, #10
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	8819      	ldrh	r1, [r3, #0]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	9301      	str	r3, [sp, #4]
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	0023      	movs	r3, r4
 8007f32:	f000 fa05 	bl	8008340 <I2C_RequestMemoryWrite>
 8007f36:	1e03      	subs	r3, r0, #0
 8007f38:	d005      	beq.n	8007f46 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2240      	movs	r2, #64	; 0x40
 8007f3e:	2100      	movs	r1, #0
 8007f40:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e0b5      	b.n	80080b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2bff      	cmp	r3, #255	; 0xff
 8007f4e:	d911      	bls.n	8007f74 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	22ff      	movs	r2, #255	; 0xff
 8007f54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	2380      	movs	r3, #128	; 0x80
 8007f5e:	045c      	lsls	r4, r3, #17
 8007f60:	230a      	movs	r3, #10
 8007f62:	18fb      	adds	r3, r7, r3
 8007f64:	8819      	ldrh	r1, [r3, #0]
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	0023      	movs	r3, r4
 8007f6e:	f000 fbef 	bl	8008750 <I2C_TransferConfig>
 8007f72:	e012      	b.n	8007f9a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	049c      	lsls	r4, r3, #18
 8007f88:	230a      	movs	r3, #10
 8007f8a:	18fb      	adds	r3, r7, r3
 8007f8c:	8819      	ldrh	r1, [r3, #0]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	2300      	movs	r3, #0
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	0023      	movs	r3, r4
 8007f96:	f000 fbdb 	bl	8008750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f000 faf4 	bl	800858e <I2C_WaitOnTXISFlagUntilTimeout>
 8007fa6:	1e03      	subs	r3, r0, #0
 8007fa8:	d001      	beq.n	8007fae <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e081      	b.n	80080b2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d03a      	beq.n	800805e <HAL_I2C_Mem_Write+0x1fa>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d136      	bne.n	800805e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	0013      	movs	r3, r2
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2180      	movs	r1, #128	; 0x80
 8007ffe:	f000 fa87 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 8008002:	1e03      	subs	r3, r0, #0
 8008004:	d001      	beq.n	800800a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e053      	b.n	80080b2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800e:	b29b      	uxth	r3, r3
 8008010:	2bff      	cmp	r3, #255	; 0xff
 8008012:	d911      	bls.n	8008038 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	22ff      	movs	r2, #255	; 0xff
 8008018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800801e:	b2da      	uxtb	r2, r3
 8008020:	2380      	movs	r3, #128	; 0x80
 8008022:	045c      	lsls	r4, r3, #17
 8008024:	230a      	movs	r3, #10
 8008026:	18fb      	adds	r3, r7, r3
 8008028:	8819      	ldrh	r1, [r3, #0]
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	2300      	movs	r3, #0
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	0023      	movs	r3, r4
 8008032:	f000 fb8d 	bl	8008750 <I2C_TransferConfig>
 8008036:	e012      	b.n	800805e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008046:	b2da      	uxtb	r2, r3
 8008048:	2380      	movs	r3, #128	; 0x80
 800804a:	049c      	lsls	r4, r3, #18
 800804c:	230a      	movs	r3, #10
 800804e:	18fb      	adds	r3, r7, r3
 8008050:	8819      	ldrh	r1, [r3, #0]
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	2300      	movs	r3, #0
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	0023      	movs	r3, r4
 800805a:	f000 fb79 	bl	8008750 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008062:	b29b      	uxth	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	d198      	bne.n	8007f9a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	0018      	movs	r0, r3
 8008070:	f000 facc 	bl	800860c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008074:	1e03      	subs	r3, r0, #0
 8008076:	d001      	beq.n	800807c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e01a      	b.n	80080b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2220      	movs	r2, #32
 8008082:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	490b      	ldr	r1, [pc, #44]	; (80080bc <HAL_I2C_Mem_Write+0x258>)
 8008090:	400a      	ands	r2, r1
 8008092:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2241      	movs	r2, #65	; 0x41
 8008098:	2120      	movs	r1, #32
 800809a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2242      	movs	r2, #66	; 0x42
 80080a0:	2100      	movs	r1, #0
 80080a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2240      	movs	r2, #64	; 0x40
 80080a8:	2100      	movs	r1, #0
 80080aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	e000      	b.n	80080b2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80080b0:	2302      	movs	r3, #2
  }
}
 80080b2:	0018      	movs	r0, r3
 80080b4:	46bd      	mov	sp, r7
 80080b6:	b007      	add	sp, #28
 80080b8:	bd90      	pop	{r4, r7, pc}
 80080ba:	46c0      	nop			; (mov r8, r8)
 80080bc:	fe00e800 	.word	0xfe00e800

080080c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c0:	b590      	push	{r4, r7, lr}
 80080c2:	b089      	sub	sp, #36	; 0x24
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	000c      	movs	r4, r1
 80080ca:	0010      	movs	r0, r2
 80080cc:	0019      	movs	r1, r3
 80080ce:	230a      	movs	r3, #10
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	1c22      	adds	r2, r4, #0
 80080d4:	801a      	strh	r2, [r3, #0]
 80080d6:	2308      	movs	r3, #8
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	1c02      	adds	r2, r0, #0
 80080dc:	801a      	strh	r2, [r3, #0]
 80080de:	1dbb      	adds	r3, r7, #6
 80080e0:	1c0a      	adds	r2, r1, #0
 80080e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2241      	movs	r2, #65	; 0x41
 80080e8:	5c9b      	ldrb	r3, [r3, r2]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	d000      	beq.n	80080f2 <HAL_I2C_Mem_Read+0x32>
 80080f0:	e110      	b.n	8008314 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <HAL_I2C_Mem_Read+0x42>
 80080f8:	232c      	movs	r3, #44	; 0x2c
 80080fa:	18fb      	adds	r3, r7, r3
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2280      	movs	r2, #128	; 0x80
 8008106:	0092      	lsls	r2, r2, #2
 8008108:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e103      	b.n	8008316 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2240      	movs	r2, #64	; 0x40
 8008112:	5c9b      	ldrb	r3, [r3, r2]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_I2C_Mem_Read+0x5c>
 8008118:	2302      	movs	r3, #2
 800811a:	e0fc      	b.n	8008316 <HAL_I2C_Mem_Read+0x256>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2240      	movs	r2, #64	; 0x40
 8008120:	2101      	movs	r1, #1
 8008122:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008124:	f7fc ffc3 	bl	80050ae <HAL_GetTick>
 8008128:	0003      	movs	r3, r0
 800812a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800812c:	2380      	movs	r3, #128	; 0x80
 800812e:	0219      	lsls	r1, r3, #8
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	2319      	movs	r3, #25
 8008138:	2201      	movs	r2, #1
 800813a:	f000 f9e9 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 800813e:	1e03      	subs	r3, r0, #0
 8008140:	d001      	beq.n	8008146 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e0e7      	b.n	8008316 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2241      	movs	r2, #65	; 0x41
 800814a:	2122      	movs	r1, #34	; 0x22
 800814c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2242      	movs	r2, #66	; 0x42
 8008152:	2140      	movs	r1, #64	; 0x40
 8008154:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008160:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	222c      	movs	r2, #44	; 0x2c
 8008166:	18ba      	adds	r2, r7, r2
 8008168:	8812      	ldrh	r2, [r2, #0]
 800816a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008172:	1dbb      	adds	r3, r7, #6
 8008174:	881c      	ldrh	r4, [r3, #0]
 8008176:	2308      	movs	r3, #8
 8008178:	18fb      	adds	r3, r7, r3
 800817a:	881a      	ldrh	r2, [r3, #0]
 800817c:	230a      	movs	r3, #10
 800817e:	18fb      	adds	r3, r7, r3
 8008180:	8819      	ldrh	r1, [r3, #0]
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	0023      	movs	r3, r4
 800818e:	f000 f93b 	bl	8008408 <I2C_RequestMemoryRead>
 8008192:	1e03      	subs	r3, r0, #0
 8008194:	d005      	beq.n	80081a2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2240      	movs	r2, #64	; 0x40
 800819a:	2100      	movs	r1, #0
 800819c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e0b9      	b.n	8008316 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2bff      	cmp	r3, #255	; 0xff
 80081aa:	d911      	bls.n	80081d0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	22ff      	movs	r2, #255	; 0xff
 80081b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	045c      	lsls	r4, r3, #17
 80081bc:	230a      	movs	r3, #10
 80081be:	18fb      	adds	r3, r7, r3
 80081c0:	8819      	ldrh	r1, [r3, #0]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	4b56      	ldr	r3, [pc, #344]	; (8008320 <HAL_I2C_Mem_Read+0x260>)
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	0023      	movs	r3, r4
 80081ca:	f000 fac1 	bl	8008750 <I2C_TransferConfig>
 80081ce:	e012      	b.n	80081f6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	2380      	movs	r3, #128	; 0x80
 80081e2:	049c      	lsls	r4, r3, #18
 80081e4:	230a      	movs	r3, #10
 80081e6:	18fb      	adds	r3, r7, r3
 80081e8:	8819      	ldrh	r1, [r3, #0]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	4b4c      	ldr	r3, [pc, #304]	; (8008320 <HAL_I2C_Mem_Read+0x260>)
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	0023      	movs	r3, r4
 80081f2:	f000 faad 	bl	8008750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80081f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	0013      	movs	r3, r2
 8008200:	2200      	movs	r2, #0
 8008202:	2104      	movs	r1, #4
 8008204:	f000 f984 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 8008208:	1e03      	subs	r3, r0, #0
 800820a:	d001      	beq.n	8008210 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e082      	b.n	8008316 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822c:	3b01      	subs	r3, #1
 800822e:	b29a      	uxth	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b01      	subs	r3, #1
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008246:	b29b      	uxth	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d03a      	beq.n	80082c2 <HAL_I2C_Mem_Read+0x202>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008250:	2b00      	cmp	r3, #0
 8008252:	d136      	bne.n	80082c2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	0013      	movs	r3, r2
 800825e:	2200      	movs	r2, #0
 8008260:	2180      	movs	r1, #128	; 0x80
 8008262:	f000 f955 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 8008266:	1e03      	subs	r3, r0, #0
 8008268:	d001      	beq.n	800826e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e053      	b.n	8008316 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008272:	b29b      	uxth	r3, r3
 8008274:	2bff      	cmp	r3, #255	; 0xff
 8008276:	d911      	bls.n	800829c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	22ff      	movs	r2, #255	; 0xff
 800827c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008282:	b2da      	uxtb	r2, r3
 8008284:	2380      	movs	r3, #128	; 0x80
 8008286:	045c      	lsls	r4, r3, #17
 8008288:	230a      	movs	r3, #10
 800828a:	18fb      	adds	r3, r7, r3
 800828c:	8819      	ldrh	r1, [r3, #0]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	2300      	movs	r3, #0
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	0023      	movs	r3, r4
 8008296:	f000 fa5b 	bl	8008750 <I2C_TransferConfig>
 800829a:	e012      	b.n	80082c2 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	2380      	movs	r3, #128	; 0x80
 80082ae:	049c      	lsls	r4, r3, #18
 80082b0:	230a      	movs	r3, #10
 80082b2:	18fb      	adds	r3, r7, r3
 80082b4:	8819      	ldrh	r1, [r3, #0]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	2300      	movs	r3, #0
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	0023      	movs	r3, r4
 80082be:	f000 fa47 	bl	8008750 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d194      	bne.n	80081f6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	0018      	movs	r0, r3
 80082d4:	f000 f99a 	bl	800860c <I2C_WaitOnSTOPFlagUntilTimeout>
 80082d8:	1e03      	subs	r3, r0, #0
 80082da:	d001      	beq.n	80082e0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e01a      	b.n	8008316 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2220      	movs	r2, #32
 80082e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	490c      	ldr	r1, [pc, #48]	; (8008324 <HAL_I2C_Mem_Read+0x264>)
 80082f4:	400a      	ands	r2, r1
 80082f6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2241      	movs	r2, #65	; 0x41
 80082fc:	2120      	movs	r1, #32
 80082fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2242      	movs	r2, #66	; 0x42
 8008304:	2100      	movs	r1, #0
 8008306:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2240      	movs	r2, #64	; 0x40
 800830c:	2100      	movs	r1, #0
 800830e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	e000      	b.n	8008316 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8008314:	2302      	movs	r3, #2
  }
}
 8008316:	0018      	movs	r0, r3
 8008318:	46bd      	mov	sp, r7
 800831a:	b007      	add	sp, #28
 800831c:	bd90      	pop	{r4, r7, pc}
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	80002400 	.word	0x80002400
 8008324:	fe00e800 	.word	0xfe00e800

08008328 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2241      	movs	r2, #65	; 0x41
 8008334:	5c9b      	ldrb	r3, [r3, r2]
 8008336:	b2db      	uxtb	r3, r3
}
 8008338:	0018      	movs	r0, r3
 800833a:	46bd      	mov	sp, r7
 800833c:	b002      	add	sp, #8
 800833e:	bd80      	pop	{r7, pc}

08008340 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008340:	b5b0      	push	{r4, r5, r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	000c      	movs	r4, r1
 800834a:	0010      	movs	r0, r2
 800834c:	0019      	movs	r1, r3
 800834e:	250a      	movs	r5, #10
 8008350:	197b      	adds	r3, r7, r5
 8008352:	1c22      	adds	r2, r4, #0
 8008354:	801a      	strh	r2, [r3, #0]
 8008356:	2308      	movs	r3, #8
 8008358:	18fb      	adds	r3, r7, r3
 800835a:	1c02      	adds	r2, r0, #0
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	1dbb      	adds	r3, r7, #6
 8008360:	1c0a      	adds	r2, r1, #0
 8008362:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008364:	1dbb      	adds	r3, r7, #6
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b2da      	uxtb	r2, r3
 800836a:	2380      	movs	r3, #128	; 0x80
 800836c:	045c      	lsls	r4, r3, #17
 800836e:	197b      	adds	r3, r7, r5
 8008370:	8819      	ldrh	r1, [r3, #0]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	4b23      	ldr	r3, [pc, #140]	; (8008404 <I2C_RequestMemoryWrite+0xc4>)
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	0023      	movs	r3, r4
 800837a:	f000 f9e9 	bl	8008750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800837e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008380:	6a39      	ldr	r1, [r7, #32]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	0018      	movs	r0, r3
 8008386:	f000 f902 	bl	800858e <I2C_WaitOnTXISFlagUntilTimeout>
 800838a:	1e03      	subs	r3, r0, #0
 800838c:	d001      	beq.n	8008392 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e033      	b.n	80083fa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008392:	1dbb      	adds	r3, r7, #6
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d107      	bne.n	80083aa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800839a:	2308      	movs	r3, #8
 800839c:	18fb      	adds	r3, r7, r3
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	629a      	str	r2, [r3, #40]	; 0x28
 80083a8:	e019      	b.n	80083de <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083aa:	2308      	movs	r3, #8
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	0a1b      	lsrs	r3, r3, #8
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083be:	6a39      	ldr	r1, [r7, #32]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	0018      	movs	r0, r3
 80083c4:	f000 f8e3 	bl	800858e <I2C_WaitOnTXISFlagUntilTimeout>
 80083c8:	1e03      	subs	r3, r0, #0
 80083ca:	d001      	beq.n	80083d0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e014      	b.n	80083fa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083d0:	2308      	movs	r3, #8
 80083d2:	18fb      	adds	r3, r7, r3
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80083de:	6a3a      	ldr	r2, [r7, #32]
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	0013      	movs	r3, r2
 80083e8:	2200      	movs	r2, #0
 80083ea:	2180      	movs	r1, #128	; 0x80
 80083ec:	f000 f890 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 80083f0:	1e03      	subs	r3, r0, #0
 80083f2:	d001      	beq.n	80083f8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e000      	b.n	80083fa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	0018      	movs	r0, r3
 80083fc:	46bd      	mov	sp, r7
 80083fe:	b004      	add	sp, #16
 8008400:	bdb0      	pop	{r4, r5, r7, pc}
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	80002000 	.word	0x80002000

08008408 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008408:	b5b0      	push	{r4, r5, r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af02      	add	r7, sp, #8
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	000c      	movs	r4, r1
 8008412:	0010      	movs	r0, r2
 8008414:	0019      	movs	r1, r3
 8008416:	250a      	movs	r5, #10
 8008418:	197b      	adds	r3, r7, r5
 800841a:	1c22      	adds	r2, r4, #0
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	2308      	movs	r3, #8
 8008420:	18fb      	adds	r3, r7, r3
 8008422:	1c02      	adds	r2, r0, #0
 8008424:	801a      	strh	r2, [r3, #0]
 8008426:	1dbb      	adds	r3, r7, #6
 8008428:	1c0a      	adds	r2, r1, #0
 800842a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800842c:	1dbb      	adds	r3, r7, #6
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b2da      	uxtb	r2, r3
 8008432:	197b      	adds	r3, r7, r5
 8008434:	8819      	ldrh	r1, [r3, #0]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	4b23      	ldr	r3, [pc, #140]	; (80084c8 <I2C_RequestMemoryRead+0xc0>)
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	2300      	movs	r3, #0
 800843e:	f000 f987 	bl	8008750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008444:	6a39      	ldr	r1, [r7, #32]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	0018      	movs	r0, r3
 800844a:	f000 f8a0 	bl	800858e <I2C_WaitOnTXISFlagUntilTimeout>
 800844e:	1e03      	subs	r3, r0, #0
 8008450:	d001      	beq.n	8008456 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e033      	b.n	80084be <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008456:	1dbb      	adds	r3, r7, #6
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d107      	bne.n	800846e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800845e:	2308      	movs	r3, #8
 8008460:	18fb      	adds	r3, r7, r3
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b2da      	uxtb	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	629a      	str	r2, [r3, #40]	; 0x28
 800846c:	e019      	b.n	80084a2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800846e:	2308      	movs	r3, #8
 8008470:	18fb      	adds	r3, r7, r3
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	0a1b      	lsrs	r3, r3, #8
 8008476:	b29b      	uxth	r3, r3
 8008478:	b2da      	uxtb	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	6a39      	ldr	r1, [r7, #32]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	0018      	movs	r0, r3
 8008488:	f000 f881 	bl	800858e <I2C_WaitOnTXISFlagUntilTimeout>
 800848c:	1e03      	subs	r3, r0, #0
 800848e:	d001      	beq.n	8008494 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e014      	b.n	80084be <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008494:	2308      	movs	r3, #8
 8008496:	18fb      	adds	r3, r7, r3
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b2da      	uxtb	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80084a2:	6a3a      	ldr	r2, [r7, #32]
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	0013      	movs	r3, r2
 80084ac:	2200      	movs	r2, #0
 80084ae:	2140      	movs	r1, #64	; 0x40
 80084b0:	f000 f82e 	bl	8008510 <I2C_WaitOnFlagUntilTimeout>
 80084b4:	1e03      	subs	r3, r0, #0
 80084b6:	d001      	beq.n	80084bc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	0018      	movs	r0, r3
 80084c0:	46bd      	mov	sp, r7
 80084c2:	b004      	add	sp, #16
 80084c4:	bdb0      	pop	{r4, r5, r7, pc}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	80002000 	.word	0x80002000

080084cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	2202      	movs	r2, #2
 80084dc:	4013      	ands	r3, r2
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d103      	bne.n	80084ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2200      	movs	r2, #0
 80084e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	2201      	movs	r2, #1
 80084f2:	4013      	ands	r3, r2
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d007      	beq.n	8008508 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2101      	movs	r1, #1
 8008504:	430a      	orrs	r2, r1
 8008506:	619a      	str	r2, [r3, #24]
  }
}
 8008508:	46c0      	nop			; (mov r8, r8)
 800850a:	46bd      	mov	sp, r7
 800850c:	b002      	add	sp, #8
 800850e:	bd80      	pop	{r7, pc}

08008510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	1dfb      	adds	r3, r7, #7
 800851e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008520:	e021      	b.n	8008566 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	d01e      	beq.n	8008566 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008528:	f7fc fdc1 	bl	80050ae <HAL_GetTick>
 800852c:	0002      	movs	r2, r0
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d302      	bcc.n	800853e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d113      	bne.n	8008566 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008542:	2220      	movs	r2, #32
 8008544:	431a      	orrs	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2241      	movs	r2, #65	; 0x41
 800854e:	2120      	movs	r1, #32
 8008550:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2242      	movs	r2, #66	; 0x42
 8008556:	2100      	movs	r1, #0
 8008558:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2240      	movs	r2, #64	; 0x40
 800855e:	2100      	movs	r1, #0
 8008560:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e00f      	b.n	8008586 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	4013      	ands	r3, r2
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	425a      	negs	r2, r3
 8008576:	4153      	adcs	r3, r2
 8008578:	b2db      	uxtb	r3, r3
 800857a:	001a      	movs	r2, r3
 800857c:	1dfb      	adds	r3, r7, #7
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d0ce      	beq.n	8008522 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	0018      	movs	r0, r3
 8008588:	46bd      	mov	sp, r7
 800858a:	b004      	add	sp, #16
 800858c:	bd80      	pop	{r7, pc}

0800858e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800859a:	e02b      	b.n	80085f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	0018      	movs	r0, r3
 80085a4:	f000 f86e 	bl	8008684 <I2C_IsAcknowledgeFailed>
 80085a8:	1e03      	subs	r3, r0, #0
 80085aa:	d001      	beq.n	80085b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e029      	b.n	8008604 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	3301      	adds	r3, #1
 80085b4:	d01e      	beq.n	80085f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b6:	f7fc fd7a 	bl	80050ae <HAL_GetTick>
 80085ba:	0002      	movs	r2, r0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d302      	bcc.n	80085cc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d113      	bne.n	80085f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d0:	2220      	movs	r2, #32
 80085d2:	431a      	orrs	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2241      	movs	r2, #65	; 0x41
 80085dc:	2120      	movs	r1, #32
 80085de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2242      	movs	r2, #66	; 0x42
 80085e4:	2100      	movs	r1, #0
 80085e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2240      	movs	r2, #64	; 0x40
 80085ec:	2100      	movs	r1, #0
 80085ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e007      	b.n	8008604 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	2202      	movs	r2, #2
 80085fc:	4013      	ands	r3, r2
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d1cc      	bne.n	800859c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	0018      	movs	r0, r3
 8008606:	46bd      	mov	sp, r7
 8008608:	b004      	add	sp, #16
 800860a:	bd80      	pop	{r7, pc}

0800860c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008618:	e028      	b.n	800866c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	0018      	movs	r0, r3
 8008622:	f000 f82f 	bl	8008684 <I2C_IsAcknowledgeFailed>
 8008626:	1e03      	subs	r3, r0, #0
 8008628:	d001      	beq.n	800862e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e026      	b.n	800867c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800862e:	f7fc fd3e 	bl	80050ae <HAL_GetTick>
 8008632:	0002      	movs	r2, r0
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	429a      	cmp	r2, r3
 800863c:	d302      	bcc.n	8008644 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d113      	bne.n	800866c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008648:	2220      	movs	r2, #32
 800864a:	431a      	orrs	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2241      	movs	r2, #65	; 0x41
 8008654:	2120      	movs	r1, #32
 8008656:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2242      	movs	r2, #66	; 0x42
 800865c:	2100      	movs	r1, #0
 800865e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2240      	movs	r2, #64	; 0x40
 8008664:	2100      	movs	r1, #0
 8008666:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e007      	b.n	800867c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	2220      	movs	r2, #32
 8008674:	4013      	ands	r3, r2
 8008676:	2b20      	cmp	r3, #32
 8008678:	d1cf      	bne.n	800861a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	0018      	movs	r0, r3
 800867e:	46bd      	mov	sp, r7
 8008680:	b004      	add	sp, #16
 8008682:	bd80      	pop	{r7, pc}

08008684 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	2210      	movs	r2, #16
 8008698:	4013      	ands	r3, r2
 800869a:	2b10      	cmp	r3, #16
 800869c:	d151      	bne.n	8008742 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800869e:	e021      	b.n	80086e4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	3301      	adds	r3, #1
 80086a4:	d01e      	beq.n	80086e4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a6:	f7fc fd02 	bl	80050ae <HAL_GetTick>
 80086aa:	0002      	movs	r2, r0
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d302      	bcc.n	80086bc <I2C_IsAcknowledgeFailed+0x38>
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d113      	bne.n	80086e4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c0:	2220      	movs	r2, #32
 80086c2:	431a      	orrs	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2241      	movs	r2, #65	; 0x41
 80086cc:	2120      	movs	r1, #32
 80086ce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2242      	movs	r2, #66	; 0x42
 80086d4:	2100      	movs	r1, #0
 80086d6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2240      	movs	r2, #64	; 0x40
 80086dc:	2100      	movs	r1, #0
 80086de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e02f      	b.n	8008744 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	2220      	movs	r2, #32
 80086ec:	4013      	ands	r3, r2
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	d1d6      	bne.n	80086a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2210      	movs	r2, #16
 80086f8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2220      	movs	r2, #32
 8008700:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	0018      	movs	r0, r3
 8008706:	f7ff fee1 	bl	80084cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	490d      	ldr	r1, [pc, #52]	; (800874c <I2C_IsAcknowledgeFailed+0xc8>)
 8008716:	400a      	ands	r2, r1
 8008718:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871e:	2204      	movs	r2, #4
 8008720:	431a      	orrs	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2241      	movs	r2, #65	; 0x41
 800872a:	2120      	movs	r1, #32
 800872c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2242      	movs	r2, #66	; 0x42
 8008732:	2100      	movs	r1, #0
 8008734:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2240      	movs	r2, #64	; 0x40
 800873a:	2100      	movs	r1, #0
 800873c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e000      	b.n	8008744 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	0018      	movs	r0, r3
 8008746:	46bd      	mov	sp, r7
 8008748:	b004      	add	sp, #16
 800874a:	bd80      	pop	{r7, pc}
 800874c:	fe00e800 	.word	0xfe00e800

08008750 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008750:	b590      	push	{r4, r7, lr}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	0008      	movs	r0, r1
 800875a:	0011      	movs	r1, r2
 800875c:	607b      	str	r3, [r7, #4]
 800875e:	240a      	movs	r4, #10
 8008760:	193b      	adds	r3, r7, r4
 8008762:	1c02      	adds	r2, r0, #0
 8008764:	801a      	strh	r2, [r3, #0]
 8008766:	2009      	movs	r0, #9
 8008768:	183b      	adds	r3, r7, r0
 800876a:	1c0a      	adds	r2, r1, #0
 800876c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	6a3a      	ldr	r2, [r7, #32]
 8008776:	0d51      	lsrs	r1, r2, #21
 8008778:	2280      	movs	r2, #128	; 0x80
 800877a:	00d2      	lsls	r2, r2, #3
 800877c:	400a      	ands	r2, r1
 800877e:	490e      	ldr	r1, [pc, #56]	; (80087b8 <I2C_TransferConfig+0x68>)
 8008780:	430a      	orrs	r2, r1
 8008782:	43d2      	mvns	r2, r2
 8008784:	401a      	ands	r2, r3
 8008786:	0011      	movs	r1, r2
 8008788:	193b      	adds	r3, r7, r4
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	059b      	lsls	r3, r3, #22
 800878e:	0d9a      	lsrs	r2, r3, #22
 8008790:	183b      	adds	r3, r7, r0
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	0418      	lsls	r0, r3, #16
 8008796:	23ff      	movs	r3, #255	; 0xff
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	4003      	ands	r3, r0
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	431a      	orrs	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	46bd      	mov	sp, r7
 80087b2:	b005      	add	sp, #20
 80087b4:	bd90      	pop	{r4, r7, pc}
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	03ff63ff 	.word	0x03ff63ff

080087bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2241      	movs	r2, #65	; 0x41
 80087ca:	5c9b      	ldrb	r3, [r3, r2]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d138      	bne.n	8008844 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2240      	movs	r2, #64	; 0x40
 80087d6:	5c9b      	ldrb	r3, [r3, r2]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d101      	bne.n	80087e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80087dc:	2302      	movs	r3, #2
 80087de:	e032      	b.n	8008846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2240      	movs	r2, #64	; 0x40
 80087e4:	2101      	movs	r1, #1
 80087e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2241      	movs	r2, #65	; 0x41
 80087ec:	2124      	movs	r1, #36	; 0x24
 80087ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2101      	movs	r1, #1
 80087fc:	438a      	bics	r2, r1
 80087fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4911      	ldr	r1, [pc, #68]	; (8008850 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800880c:	400a      	ands	r2, r1
 800880e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6819      	ldr	r1, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2101      	movs	r1, #1
 800882c:	430a      	orrs	r2, r1
 800882e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2241      	movs	r2, #65	; 0x41
 8008834:	2120      	movs	r1, #32
 8008836:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2240      	movs	r2, #64	; 0x40
 800883c:	2100      	movs	r1, #0
 800883e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	e000      	b.n	8008846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008844:	2302      	movs	r3, #2
  }
}
 8008846:	0018      	movs	r0, r3
 8008848:	46bd      	mov	sp, r7
 800884a:	b002      	add	sp, #8
 800884c:	bd80      	pop	{r7, pc}
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	ffffefff 	.word	0xffffefff

08008854 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2241      	movs	r2, #65	; 0x41
 8008862:	5c9b      	ldrb	r3, [r3, r2]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b20      	cmp	r3, #32
 8008868:	d139      	bne.n	80088de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2240      	movs	r2, #64	; 0x40
 800886e:	5c9b      	ldrb	r3, [r3, r2]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008874:	2302      	movs	r3, #2
 8008876:	e033      	b.n	80088e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2240      	movs	r2, #64	; 0x40
 800887c:	2101      	movs	r1, #1
 800887e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2241      	movs	r2, #65	; 0x41
 8008884:	2124      	movs	r1, #36	; 0x24
 8008886:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2101      	movs	r1, #1
 8008894:	438a      	bics	r2, r1
 8008896:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4a11      	ldr	r2, [pc, #68]	; (80088e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80088a4:	4013      	ands	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	021b      	lsls	r3, r3, #8
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2101      	movs	r1, #1
 80088c6:	430a      	orrs	r2, r1
 80088c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2241      	movs	r2, #65	; 0x41
 80088ce:	2120      	movs	r1, #32
 80088d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2240      	movs	r2, #64	; 0x40
 80088d6:	2100      	movs	r1, #0
 80088d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	e000      	b.n	80088e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80088de:	2302      	movs	r3, #2
  }
}
 80088e0:	0018      	movs	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	b004      	add	sp, #16
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	fffff0ff 	.word	0xfffff0ff

080088ec <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80088f0:	4b04      	ldr	r3, [pc, #16]	; (8008904 <HAL_PWR_DisablePVD+0x18>)
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	4b03      	ldr	r3, [pc, #12]	; (8008904 <HAL_PWR_DisablePVD+0x18>)
 80088f6:	2110      	movs	r1, #16
 80088f8:	438a      	bics	r2, r1
 80088fa:	601a      	str	r2, [r3, #0]
}
 80088fc:	46c0      	nop			; (mov r8, r8)
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	40007000 	.word	0x40007000

08008908 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	000a      	movs	r2, r1
 8008912:	1cfb      	adds	r3, r7, #3
 8008914:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800891a:	4b23      	ldr	r3, [pc, #140]	; (80089a8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	2380      	movs	r3, #128	; 0x80
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4013      	ands	r3, r2
 8008924:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008926:	4b21      	ldr	r3, [pc, #132]	; (80089ac <HAL_PWR_EnterSLEEPMode+0xa4>)
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	2201      	movs	r2, #1
 800892c:	4013      	ands	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d008      	beq.n	8008948 <HAL_PWR_EnterSLEEPMode+0x40>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 800893c:	4b1a      	ldr	r3, [pc, #104]	; (80089a8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	4b19      	ldr	r3, [pc, #100]	; (80089a8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008942:	491b      	ldr	r1, [pc, #108]	; (80089b0 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8008944:	400a      	ands	r2, r1
 8008946:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008948:	4b17      	ldr	r3, [pc, #92]	; (80089a8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2203      	movs	r2, #3
 8008952:	4393      	bics	r3, r2
 8008954:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4313      	orrs	r3, r2
 800895c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800895e:	4b12      	ldr	r3, [pc, #72]	; (80089a8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008964:	4b13      	ldr	r3, [pc, #76]	; (80089b4 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008966:	691a      	ldr	r2, [r3, #16]
 8008968:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <HAL_PWR_EnterSLEEPMode+0xac>)
 800896a:	2104      	movs	r1, #4
 800896c:	438a      	bics	r2, r1
 800896e:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008970:	1cfb      	adds	r3, r7, #3
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d101      	bne.n	800897c <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008978:	bf30      	wfi
 800897a:	e002      	b.n	8008982 <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800897c:	bf40      	sev
    __WFE();
 800897e:	bf20      	wfe
    __WFE();
 8008980:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d009      	beq.n	800899c <HAL_PWR_EnterSLEEPMode+0x94>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d006      	beq.n	800899c <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800898e:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008994:	2180      	movs	r1, #128	; 0x80
 8008996:	0089      	lsls	r1, r1, #2
 8008998:	430a      	orrs	r2, r1
 800899a:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 800899c:	46c0      	nop			; (mov r8, r8)

}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	46bd      	mov	sp, r7
 80089a2:	b006      	add	sp, #24
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	40007000 	.word	0x40007000
 80089ac:	40010000 	.word	0x40010000
 80089b0:	fffffdff 	.word	0xfffffdff
 80089b4:	e000ed00 	.word	0xe000ed00

080089b8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	000a      	movs	r2, r1
 80089c2:	1cfb      	adds	r3, r7, #3
 80089c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80089ca:	4b25      	ldr	r3, [pc, #148]	; (8008a60 <HAL_PWR_EnterSTOPMode+0xa8>)
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	2380      	movs	r3, #128	; 0x80
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4013      	ands	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80089d6:	4b23      	ldr	r3, [pc, #140]	; (8008a64 <HAL_PWR_EnterSTOPMode+0xac>)
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	2201      	movs	r2, #1
 80089dc:	4013      	ands	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d008      	beq.n	80089f8 <HAL_PWR_EnterSTOPMode+0x40>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d005      	beq.n	80089f8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80089ec:	4b1c      	ldr	r3, [pc, #112]	; (8008a60 <HAL_PWR_EnterSTOPMode+0xa8>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <HAL_PWR_EnterSTOPMode+0xa8>)
 80089f2:	491d      	ldr	r1, [pc, #116]	; (8008a68 <HAL_PWR_EnterSTOPMode+0xb0>)
 80089f4:	400a      	ands	r2, r1
 80089f6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80089f8:	4b19      	ldr	r3, [pc, #100]	; (8008a60 <HAL_PWR_EnterSTOPMode+0xa8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2203      	movs	r2, #3
 8008a02:	4393      	bics	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008a0e:	4b14      	ldr	r3, [pc, #80]	; (8008a60 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008a14:	4b15      	ldr	r3, [pc, #84]	; (8008a6c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008a16:	691a      	ldr	r2, [r3, #16]
 8008a18:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008a1a:	2104      	movs	r1, #4
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008a20:	1cfb      	adds	r3, r7, #3
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008a28:	bf30      	wfi
 8008a2a:	e002      	b.n	8008a32 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008a2c:	bf40      	sev
    __WFE();
 8008a2e:	bf20      	wfe
    __WFE();
 8008a30:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008a32:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008a34:	691a      	ldr	r2, [r3, #16]
 8008a36:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <HAL_PWR_EnterSTOPMode+0xb4>)
 8008a38:	2104      	movs	r1, #4
 8008a3a:	438a      	bics	r2, r1
 8008a3c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <HAL_PWR_EnterSTOPMode+0xa0>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d006      	beq.n	8008a58 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008a50:	2180      	movs	r1, #128	; 0x80
 8008a52:	0089      	lsls	r1, r1, #2
 8008a54:	430a      	orrs	r2, r1
 8008a56:	601a      	str	r2, [r3, #0]
  }
}
 8008a58:	46c0      	nop			; (mov r8, r8)
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	b006      	add	sp, #24
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	40007000 	.word	0x40007000
 8008a64:	40010000 	.word	0x40010000
 8008a68:	fffffdff 	.word	0xfffffdff
 8008a6c:	e000ed00 	.word	0xe000ed00

08008a70 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008a74:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008a7a:	2180      	movs	r1, #128	; 0x80
 8008a7c:	00c9      	lsls	r1, r1, #3
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	601a      	str	r2, [r3, #0]
}
 8008a82:	46c0      	nop			; (mov r8, r8)
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40007000 	.word	0x40007000

08008a8c <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008a90:	4b04      	ldr	r3, [pc, #16]	; (8008aa4 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008a96:	2180      	movs	r1, #128	; 0x80
 8008a98:	0089      	lsls	r1, r1, #2
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	601a      	str	r2, [r3, #0]
}
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	40007000 	.word	0x40007000

08008aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008aa8:	b5b0      	push	{r4, r5, r7, lr}
 8008aaa:	b08a      	sub	sp, #40	; 0x28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d102      	bne.n	8008abc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f000 fbbf 	bl	800923a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008abc:	4bc9      	ldr	r3, [pc, #804]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	220c      	movs	r2, #12
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ac6:	4bc7      	ldr	r3, [pc, #796]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	2380      	movs	r3, #128	; 0x80
 8008acc:	025b      	lsls	r3, r3, #9
 8008ace:	4013      	ands	r3, r2
 8008ad0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4013      	ands	r3, r2
 8008ada:	d100      	bne.n	8008ade <HAL_RCC_OscConfig+0x36>
 8008adc:	e07e      	b.n	8008bdc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d007      	beq.n	8008af4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	2b0c      	cmp	r3, #12
 8008ae8:	d112      	bne.n	8008b10 <HAL_RCC_OscConfig+0x68>
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	025b      	lsls	r3, r3, #9
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d10d      	bne.n	8008b10 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af4:	4bbb      	ldr	r3, [pc, #748]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	2380      	movs	r3, #128	; 0x80
 8008afa:	029b      	lsls	r3, r3, #10
 8008afc:	4013      	ands	r3, r2
 8008afe:	d100      	bne.n	8008b02 <HAL_RCC_OscConfig+0x5a>
 8008b00:	e06b      	b.n	8008bda <HAL_RCC_OscConfig+0x132>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d167      	bne.n	8008bda <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f000 fb95 	bl	800923a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	2380      	movs	r3, #128	; 0x80
 8008b16:	025b      	lsls	r3, r3, #9
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d107      	bne.n	8008b2c <HAL_RCC_OscConfig+0x84>
 8008b1c:	4bb1      	ldr	r3, [pc, #708]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	4bb0      	ldr	r3, [pc, #704]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b22:	2180      	movs	r1, #128	; 0x80
 8008b24:	0249      	lsls	r1, r1, #9
 8008b26:	430a      	orrs	r2, r1
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	e027      	b.n	8008b7c <HAL_RCC_OscConfig+0xd4>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	23a0      	movs	r3, #160	; 0xa0
 8008b32:	02db      	lsls	r3, r3, #11
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d10e      	bne.n	8008b56 <HAL_RCC_OscConfig+0xae>
 8008b38:	4baa      	ldr	r3, [pc, #680]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4ba9      	ldr	r3, [pc, #676]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b3e:	2180      	movs	r1, #128	; 0x80
 8008b40:	02c9      	lsls	r1, r1, #11
 8008b42:	430a      	orrs	r2, r1
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	4ba7      	ldr	r3, [pc, #668]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4ba6      	ldr	r3, [pc, #664]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b4c:	2180      	movs	r1, #128	; 0x80
 8008b4e:	0249      	lsls	r1, r1, #9
 8008b50:	430a      	orrs	r2, r1
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	e012      	b.n	8008b7c <HAL_RCC_OscConfig+0xd4>
 8008b56:	4ba3      	ldr	r3, [pc, #652]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4ba2      	ldr	r3, [pc, #648]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b5c:	49a2      	ldr	r1, [pc, #648]	; (8008de8 <HAL_RCC_OscConfig+0x340>)
 8008b5e:	400a      	ands	r2, r1
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	4ba0      	ldr	r3, [pc, #640]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	2380      	movs	r3, #128	; 0x80
 8008b68:	025b      	lsls	r3, r3, #9
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4b9c      	ldr	r3, [pc, #624]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	4b9b      	ldr	r3, [pc, #620]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008b76:	499d      	ldr	r1, [pc, #628]	; (8008dec <HAL_RCC_OscConfig+0x344>)
 8008b78:	400a      	ands	r2, r1
 8008b7a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d015      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b84:	f7fc fa93 	bl	80050ae <HAL_GetTick>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b8c:	e009      	b.n	8008ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b8e:	f7fc fa8e 	bl	80050ae <HAL_GetTick>
 8008b92:	0002      	movs	r2, r0
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b64      	cmp	r3, #100	; 0x64
 8008b9a:	d902      	bls.n	8008ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	f000 fb4c 	bl	800923a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ba2:	4b90      	ldr	r3, [pc, #576]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	2380      	movs	r3, #128	; 0x80
 8008ba8:	029b      	lsls	r3, r3, #10
 8008baa:	4013      	ands	r3, r2
 8008bac:	d0ef      	beq.n	8008b8e <HAL_RCC_OscConfig+0xe6>
 8008bae:	e015      	b.n	8008bdc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb0:	f7fc fa7d 	bl	80050ae <HAL_GetTick>
 8008bb4:	0003      	movs	r3, r0
 8008bb6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bb8:	e008      	b.n	8008bcc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bba:	f7fc fa78 	bl	80050ae <HAL_GetTick>
 8008bbe:	0002      	movs	r2, r0
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b64      	cmp	r3, #100	; 0x64
 8008bc6:	d901      	bls.n	8008bcc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e336      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bcc:	4b85      	ldr	r3, [pc, #532]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	2380      	movs	r3, #128	; 0x80
 8008bd2:	029b      	lsls	r3, r3, #10
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	d1f0      	bne.n	8008bba <HAL_RCC_OscConfig+0x112>
 8008bd8:	e000      	b.n	8008bdc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2202      	movs	r2, #2
 8008be2:	4013      	ands	r3, r2
 8008be4:	d100      	bne.n	8008be8 <HAL_RCC_OscConfig+0x140>
 8008be6:	e099      	b.n	8008d1c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	d009      	beq.n	8008c0a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008bf6:	4b7b      	ldr	r3, [pc, #492]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	4b7a      	ldr	r3, [pc, #488]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008bfc:	2120      	movs	r1, #32
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	2220      	movs	r2, #32
 8008c06:	4393      	bics	r3, r2
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d005      	beq.n	8008c1c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	2b0c      	cmp	r3, #12
 8008c14:	d13e      	bne.n	8008c94 <HAL_RCC_OscConfig+0x1ec>
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d13b      	bne.n	8008c94 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008c1c:	4b71      	ldr	r3, [pc, #452]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2204      	movs	r2, #4
 8008c22:	4013      	ands	r3, r2
 8008c24:	d004      	beq.n	8008c30 <HAL_RCC_OscConfig+0x188>
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e304      	b.n	800923a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c30:	4b6c      	ldr	r3, [pc, #432]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	4a6e      	ldr	r2, [pc, #440]	; (8008df0 <HAL_RCC_OscConfig+0x348>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	0019      	movs	r1, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	021a      	lsls	r2, r3, #8
 8008c40:	4b68      	ldr	r3, [pc, #416]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008c46:	4b67      	ldr	r3, [pc, #412]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2209      	movs	r2, #9
 8008c4c:	4393      	bics	r3, r2
 8008c4e:	0019      	movs	r1, r3
 8008c50:	4b64      	ldr	r3, [pc, #400]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c54:	430a      	orrs	r2, r1
 8008c56:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c58:	f000 fc42 	bl	80094e0 <HAL_RCC_GetSysClockFreq>
 8008c5c:	0001      	movs	r1, r0
 8008c5e:	4b61      	ldr	r3, [pc, #388]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	091b      	lsrs	r3, r3, #4
 8008c64:	220f      	movs	r2, #15
 8008c66:	4013      	ands	r3, r2
 8008c68:	4a62      	ldr	r2, [pc, #392]	; (8008df4 <HAL_RCC_OscConfig+0x34c>)
 8008c6a:	5cd3      	ldrb	r3, [r2, r3]
 8008c6c:	000a      	movs	r2, r1
 8008c6e:	40da      	lsrs	r2, r3
 8008c70:	4b61      	ldr	r3, [pc, #388]	; (8008df8 <HAL_RCC_OscConfig+0x350>)
 8008c72:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008c74:	4b61      	ldr	r3, [pc, #388]	; (8008dfc <HAL_RCC_OscConfig+0x354>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2513      	movs	r5, #19
 8008c7a:	197c      	adds	r4, r7, r5
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f7fc fa0d 	bl	800509c <HAL_InitTick>
 8008c82:	0003      	movs	r3, r0
 8008c84:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008c86:	197b      	adds	r3, r7, r5
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d046      	beq.n	8008d1c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8008c8e:	197b      	adds	r3, r7, r5
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	e2d2      	b.n	800923a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d027      	beq.n	8008cea <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008c9a:	4b52      	ldr	r3, [pc, #328]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2209      	movs	r2, #9
 8008ca0:	4393      	bics	r3, r2
 8008ca2:	0019      	movs	r1, r3
 8008ca4:	4b4f      	ldr	r3, [pc, #316]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cac:	f7fc f9ff 	bl	80050ae <HAL_GetTick>
 8008cb0:	0003      	movs	r3, r0
 8008cb2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cb6:	f7fc f9fa 	bl	80050ae <HAL_GetTick>
 8008cba:	0002      	movs	r2, r0
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e2b8      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cc8:	4b46      	ldr	r3, [pc, #280]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2204      	movs	r2, #4
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d0f1      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cd2:	4b44      	ldr	r3, [pc, #272]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	4a46      	ldr	r2, [pc, #280]	; (8008df0 <HAL_RCC_OscConfig+0x348>)
 8008cd8:	4013      	ands	r3, r2
 8008cda:	0019      	movs	r1, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	021a      	lsls	r2, r3, #8
 8008ce2:	4b40      	ldr	r3, [pc, #256]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	605a      	str	r2, [r3, #4]
 8008ce8:	e018      	b.n	8008d1c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cea:	4b3e      	ldr	r3, [pc, #248]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	4b3d      	ldr	r3, [pc, #244]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	438a      	bics	r2, r1
 8008cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cf6:	f7fc f9da 	bl	80050ae <HAL_GetTick>
 8008cfa:	0003      	movs	r3, r0
 8008cfc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008cfe:	e008      	b.n	8008d12 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d00:	f7fc f9d5 	bl	80050ae <HAL_GetTick>
 8008d04:	0002      	movs	r2, r0
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d901      	bls.n	8008d12 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e293      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d12:	4b34      	ldr	r3, [pc, #208]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2204      	movs	r2, #4
 8008d18:	4013      	ands	r3, r2
 8008d1a:	d1f1      	bne.n	8008d00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2210      	movs	r2, #16
 8008d22:	4013      	ands	r3, r2
 8008d24:	d100      	bne.n	8008d28 <HAL_RCC_OscConfig+0x280>
 8008d26:	e0a2      	b.n	8008e6e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d140      	bne.n	8008db0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008d2e:	4b2d      	ldr	r3, [pc, #180]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	2380      	movs	r3, #128	; 0x80
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4013      	ands	r3, r2
 8008d38:	d005      	beq.n	8008d46 <HAL_RCC_OscConfig+0x29e>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e279      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d46:	4b27      	ldr	r3, [pc, #156]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	4a2d      	ldr	r2, [pc, #180]	; (8008e00 <HAL_RCC_OscConfig+0x358>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	0019      	movs	r1, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d54:	4b23      	ldr	r3, [pc, #140]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008d56:	430a      	orrs	r2, r1
 8008d58:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d5a:	4b22      	ldr	r3, [pc, #136]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	021b      	lsls	r3, r3, #8
 8008d60:	0a19      	lsrs	r1, r3, #8
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	061a      	lsls	r2, r3, #24
 8008d68:	4b1e      	ldr	r3, [pc, #120]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d72:	0b5b      	lsrs	r3, r3, #13
 8008d74:	3301      	adds	r3, #1
 8008d76:	2280      	movs	r2, #128	; 0x80
 8008d78:	0212      	lsls	r2, r2, #8
 8008d7a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008d7c:	4b19      	ldr	r3, [pc, #100]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	091b      	lsrs	r3, r3, #4
 8008d82:	210f      	movs	r1, #15
 8008d84:	400b      	ands	r3, r1
 8008d86:	491b      	ldr	r1, [pc, #108]	; (8008df4 <HAL_RCC_OscConfig+0x34c>)
 8008d88:	5ccb      	ldrb	r3, [r1, r3]
 8008d8a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <HAL_RCC_OscConfig+0x350>)
 8008d8e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008d90:	4b1a      	ldr	r3, [pc, #104]	; (8008dfc <HAL_RCC_OscConfig+0x354>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2513      	movs	r5, #19
 8008d96:	197c      	adds	r4, r7, r5
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f7fc f97f 	bl	800509c <HAL_InitTick>
 8008d9e:	0003      	movs	r3, r0
 8008da0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008da2:	197b      	adds	r3, r7, r5
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d061      	beq.n	8008e6e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008daa:	197b      	adds	r3, r7, r5
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	e244      	b.n	800923a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d040      	beq.n	8008e3a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <HAL_RCC_OscConfig+0x33c>)
 8008dbe:	2180      	movs	r1, #128	; 0x80
 8008dc0:	0049      	lsls	r1, r1, #1
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dc6:	f7fc f972 	bl	80050ae <HAL_GetTick>
 8008dca:	0003      	movs	r3, r0
 8008dcc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008dce:	e019      	b.n	8008e04 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008dd0:	f7fc f96d 	bl	80050ae <HAL_GetTick>
 8008dd4:	0002      	movs	r2, r0
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d912      	bls.n	8008e04 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e22b      	b.n	800923a <HAL_RCC_OscConfig+0x792>
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	40021000 	.word	0x40021000
 8008de8:	fffeffff 	.word	0xfffeffff
 8008dec:	fffbffff 	.word	0xfffbffff
 8008df0:	ffffe0ff 	.word	0xffffe0ff
 8008df4:	0801e51c 	.word	0x0801e51c
 8008df8:	20000070 	.word	0x20000070
 8008dfc:	20000074 	.word	0x20000074
 8008e00:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008e04:	4bca      	ldr	r3, [pc, #808]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	2380      	movs	r3, #128	; 0x80
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	d0df      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e10:	4bc7      	ldr	r3, [pc, #796]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	4ac7      	ldr	r2, [pc, #796]	; (8009134 <HAL_RCC_OscConfig+0x68c>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	0019      	movs	r1, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e1e:	4bc4      	ldr	r3, [pc, #784]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e20:	430a      	orrs	r2, r1
 8008e22:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e24:	4bc2      	ldr	r3, [pc, #776]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	021b      	lsls	r3, r3, #8
 8008e2a:	0a19      	lsrs	r1, r3, #8
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	061a      	lsls	r2, r3, #24
 8008e32:	4bbf      	ldr	r3, [pc, #764]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e34:	430a      	orrs	r2, r1
 8008e36:	605a      	str	r2, [r3, #4]
 8008e38:	e019      	b.n	8008e6e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008e3a:	4bbd      	ldr	r3, [pc, #756]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	4bbc      	ldr	r3, [pc, #752]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e40:	49bd      	ldr	r1, [pc, #756]	; (8009138 <HAL_RCC_OscConfig+0x690>)
 8008e42:	400a      	ands	r2, r1
 8008e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e46:	f7fc f932 	bl	80050ae <HAL_GetTick>
 8008e4a:	0003      	movs	r3, r0
 8008e4c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008e4e:	e008      	b.n	8008e62 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e50:	f7fc f92d 	bl	80050ae <HAL_GetTick>
 8008e54:	0002      	movs	r2, r0
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d901      	bls.n	8008e62 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e1eb      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008e62:	4bb3      	ldr	r3, [pc, #716]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	2380      	movs	r3, #128	; 0x80
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	d1f0      	bne.n	8008e50 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2208      	movs	r2, #8
 8008e74:	4013      	ands	r3, r2
 8008e76:	d036      	beq.n	8008ee6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d019      	beq.n	8008eb4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e80:	4bab      	ldr	r3, [pc, #684]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e84:	4baa      	ldr	r3, [pc, #680]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008e86:	2101      	movs	r1, #1
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e8c:	f7fc f90f 	bl	80050ae <HAL_GetTick>
 8008e90:	0003      	movs	r3, r0
 8008e92:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e94:	e008      	b.n	8008ea8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e96:	f7fc f90a 	bl	80050ae <HAL_GetTick>
 8008e9a:	0002      	movs	r2, r0
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d901      	bls.n	8008ea8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e1c8      	b.n	800923a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ea8:	4ba1      	ldr	r3, [pc, #644]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eac:	2202      	movs	r2, #2
 8008eae:	4013      	ands	r3, r2
 8008eb0:	d0f1      	beq.n	8008e96 <HAL_RCC_OscConfig+0x3ee>
 8008eb2:	e018      	b.n	8008ee6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008eb4:	4b9e      	ldr	r3, [pc, #632]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008eb8:	4b9d      	ldr	r3, [pc, #628]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008eba:	2101      	movs	r1, #1
 8008ebc:	438a      	bics	r2, r1
 8008ebe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ec0:	f7fc f8f5 	bl	80050ae <HAL_GetTick>
 8008ec4:	0003      	movs	r3, r0
 8008ec6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ec8:	e008      	b.n	8008edc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008eca:	f7fc f8f0 	bl	80050ae <HAL_GetTick>
 8008ece:	0002      	movs	r2, r0
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d901      	bls.n	8008edc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e1ae      	b.n	800923a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008edc:	4b94      	ldr	r3, [pc, #592]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	d1f1      	bne.n	8008eca <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2204      	movs	r2, #4
 8008eec:	4013      	ands	r3, r2
 8008eee:	d100      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x44a>
 8008ef0:	e0ae      	b.n	8009050 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ef2:	2023      	movs	r0, #35	; 0x23
 8008ef4:	183b      	adds	r3, r7, r0
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008efa:	4b8d      	ldr	r3, [pc, #564]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008efe:	2380      	movs	r3, #128	; 0x80
 8008f00:	055b      	lsls	r3, r3, #21
 8008f02:	4013      	ands	r3, r2
 8008f04:	d109      	bne.n	8008f1a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f06:	4b8a      	ldr	r3, [pc, #552]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f0a:	4b89      	ldr	r3, [pc, #548]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008f0c:	2180      	movs	r1, #128	; 0x80
 8008f0e:	0549      	lsls	r1, r1, #21
 8008f10:	430a      	orrs	r2, r1
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008f14:	183b      	adds	r3, r7, r0
 8008f16:	2201      	movs	r2, #1
 8008f18:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f1a:	4b88      	ldr	r3, [pc, #544]	; (800913c <HAL_RCC_OscConfig+0x694>)
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	2380      	movs	r3, #128	; 0x80
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	4013      	ands	r3, r2
 8008f24:	d11a      	bne.n	8008f5c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f26:	4b85      	ldr	r3, [pc, #532]	; (800913c <HAL_RCC_OscConfig+0x694>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b84      	ldr	r3, [pc, #528]	; (800913c <HAL_RCC_OscConfig+0x694>)
 8008f2c:	2180      	movs	r1, #128	; 0x80
 8008f2e:	0049      	lsls	r1, r1, #1
 8008f30:	430a      	orrs	r2, r1
 8008f32:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f34:	f7fc f8bb 	bl	80050ae <HAL_GetTick>
 8008f38:	0003      	movs	r3, r0
 8008f3a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f3c:	e008      	b.n	8008f50 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f3e:	f7fc f8b6 	bl	80050ae <HAL_GetTick>
 8008f42:	0002      	movs	r2, r0
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b64      	cmp	r3, #100	; 0x64
 8008f4a:	d901      	bls.n	8008f50 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e174      	b.n	800923a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f50:	4b7a      	ldr	r3, [pc, #488]	; (800913c <HAL_RCC_OscConfig+0x694>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	2380      	movs	r3, #128	; 0x80
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	4013      	ands	r3, r2
 8008f5a:	d0f0      	beq.n	8008f3e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	2380      	movs	r3, #128	; 0x80
 8008f62:	005b      	lsls	r3, r3, #1
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d107      	bne.n	8008f78 <HAL_RCC_OscConfig+0x4d0>
 8008f68:	4b71      	ldr	r3, [pc, #452]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008f6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f6c:	4b70      	ldr	r3, [pc, #448]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008f6e:	2180      	movs	r1, #128	; 0x80
 8008f70:	0049      	lsls	r1, r1, #1
 8008f72:	430a      	orrs	r2, r1
 8008f74:	651a      	str	r2, [r3, #80]	; 0x50
 8008f76:	e031      	b.n	8008fdc <HAL_RCC_OscConfig+0x534>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10c      	bne.n	8008f9a <HAL_RCC_OscConfig+0x4f2>
 8008f80:	4b6b      	ldr	r3, [pc, #428]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008f82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f84:	4b6a      	ldr	r3, [pc, #424]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008f86:	496c      	ldr	r1, [pc, #432]	; (8009138 <HAL_RCC_OscConfig+0x690>)
 8008f88:	400a      	ands	r2, r1
 8008f8a:	651a      	str	r2, [r3, #80]	; 0x50
 8008f8c:	4b68      	ldr	r3, [pc, #416]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f90:	4b67      	ldr	r3, [pc, #412]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008f92:	496b      	ldr	r1, [pc, #428]	; (8009140 <HAL_RCC_OscConfig+0x698>)
 8008f94:	400a      	ands	r2, r1
 8008f96:	651a      	str	r2, [r3, #80]	; 0x50
 8008f98:	e020      	b.n	8008fdc <HAL_RCC_OscConfig+0x534>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	23a0      	movs	r3, #160	; 0xa0
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d10e      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x51c>
 8008fa6:	4b62      	ldr	r3, [pc, #392]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008faa:	4b61      	ldr	r3, [pc, #388]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008fac:	2180      	movs	r1, #128	; 0x80
 8008fae:	00c9      	lsls	r1, r1, #3
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	651a      	str	r2, [r3, #80]	; 0x50
 8008fb4:	4b5e      	ldr	r3, [pc, #376]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008fb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fb8:	4b5d      	ldr	r3, [pc, #372]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008fba:	2180      	movs	r1, #128	; 0x80
 8008fbc:	0049      	lsls	r1, r1, #1
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	651a      	str	r2, [r3, #80]	; 0x50
 8008fc2:	e00b      	b.n	8008fdc <HAL_RCC_OscConfig+0x534>
 8008fc4:	4b5a      	ldr	r3, [pc, #360]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008fc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fc8:	4b59      	ldr	r3, [pc, #356]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008fca:	495b      	ldr	r1, [pc, #364]	; (8009138 <HAL_RCC_OscConfig+0x690>)
 8008fcc:	400a      	ands	r2, r1
 8008fce:	651a      	str	r2, [r3, #80]	; 0x50
 8008fd0:	4b57      	ldr	r3, [pc, #348]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fd4:	4b56      	ldr	r3, [pc, #344]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8008fd6:	495a      	ldr	r1, [pc, #360]	; (8009140 <HAL_RCC_OscConfig+0x698>)
 8008fd8:	400a      	ands	r2, r1
 8008fda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d015      	beq.n	8009010 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fe4:	f7fc f863 	bl	80050ae <HAL_GetTick>
 8008fe8:	0003      	movs	r3, r0
 8008fea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fec:	e009      	b.n	8009002 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fee:	f7fc f85e 	bl	80050ae <HAL_GetTick>
 8008ff2:	0002      	movs	r2, r0
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	4a52      	ldr	r2, [pc, #328]	; (8009144 <HAL_RCC_OscConfig+0x69c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d901      	bls.n	8009002 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e11b      	b.n	800923a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009002:	4b4b      	ldr	r3, [pc, #300]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8009004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009006:	2380      	movs	r3, #128	; 0x80
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4013      	ands	r3, r2
 800900c:	d0ef      	beq.n	8008fee <HAL_RCC_OscConfig+0x546>
 800900e:	e014      	b.n	800903a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009010:	f7fc f84d 	bl	80050ae <HAL_GetTick>
 8009014:	0003      	movs	r3, r0
 8009016:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009018:	e009      	b.n	800902e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800901a:	f7fc f848 	bl	80050ae <HAL_GetTick>
 800901e:	0002      	movs	r2, r0
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	4a47      	ldr	r2, [pc, #284]	; (8009144 <HAL_RCC_OscConfig+0x69c>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d901      	bls.n	800902e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e105      	b.n	800923a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800902e:	4b40      	ldr	r3, [pc, #256]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8009030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009032:	2380      	movs	r3, #128	; 0x80
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4013      	ands	r3, r2
 8009038:	d1ef      	bne.n	800901a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800903a:	2323      	movs	r3, #35	; 0x23
 800903c:	18fb      	adds	r3, r7, r3
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d105      	bne.n	8009050 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009044:	4b3a      	ldr	r3, [pc, #232]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8009046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009048:	4b39      	ldr	r3, [pc, #228]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 800904a:	493f      	ldr	r1, [pc, #252]	; (8009148 <HAL_RCC_OscConfig+0x6a0>)
 800904c:	400a      	ands	r2, r1
 800904e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2220      	movs	r2, #32
 8009056:	4013      	ands	r3, r2
 8009058:	d049      	beq.n	80090ee <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d026      	beq.n	80090b0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8009062:	4b33      	ldr	r3, [pc, #204]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	4b32      	ldr	r3, [pc, #200]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8009068:	2101      	movs	r1, #1
 800906a:	430a      	orrs	r2, r1
 800906c:	609a      	str	r2, [r3, #8]
 800906e:	4b30      	ldr	r3, [pc, #192]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8009070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009072:	4b2f      	ldr	r3, [pc, #188]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 8009074:	2101      	movs	r1, #1
 8009076:	430a      	orrs	r2, r1
 8009078:	635a      	str	r2, [r3, #52]	; 0x34
 800907a:	4b34      	ldr	r3, [pc, #208]	; (800914c <HAL_RCC_OscConfig+0x6a4>)
 800907c:	6a1a      	ldr	r2, [r3, #32]
 800907e:	4b33      	ldr	r3, [pc, #204]	; (800914c <HAL_RCC_OscConfig+0x6a4>)
 8009080:	2180      	movs	r1, #128	; 0x80
 8009082:	0189      	lsls	r1, r1, #6
 8009084:	430a      	orrs	r2, r1
 8009086:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009088:	f7fc f811 	bl	80050ae <HAL_GetTick>
 800908c:	0003      	movs	r3, r0
 800908e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009090:	e008      	b.n	80090a4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009092:	f7fc f80c 	bl	80050ae <HAL_GetTick>
 8009096:	0002      	movs	r2, r0
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	2b02      	cmp	r3, #2
 800909e:	d901      	bls.n	80090a4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e0ca      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80090a4:	4b22      	ldr	r3, [pc, #136]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	2202      	movs	r2, #2
 80090aa:	4013      	ands	r3, r2
 80090ac:	d0f1      	beq.n	8009092 <HAL_RCC_OscConfig+0x5ea>
 80090ae:	e01e      	b.n	80090ee <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80090b0:	4b1f      	ldr	r3, [pc, #124]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	4b1e      	ldr	r3, [pc, #120]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 80090b6:	2101      	movs	r1, #1
 80090b8:	438a      	bics	r2, r1
 80090ba:	609a      	str	r2, [r3, #8]
 80090bc:	4b23      	ldr	r3, [pc, #140]	; (800914c <HAL_RCC_OscConfig+0x6a4>)
 80090be:	6a1a      	ldr	r2, [r3, #32]
 80090c0:	4b22      	ldr	r3, [pc, #136]	; (800914c <HAL_RCC_OscConfig+0x6a4>)
 80090c2:	4923      	ldr	r1, [pc, #140]	; (8009150 <HAL_RCC_OscConfig+0x6a8>)
 80090c4:	400a      	ands	r2, r1
 80090c6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c8:	f7fb fff1 	bl	80050ae <HAL_GetTick>
 80090cc:	0003      	movs	r3, r0
 80090ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090d0:	e008      	b.n	80090e4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090d2:	f7fb ffec 	bl	80050ae <HAL_GetTick>
 80090d6:	0002      	movs	r2, r0
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e0aa      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090e4:	4b12      	ldr	r3, [pc, #72]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	2202      	movs	r2, #2
 80090ea:	4013      	ands	r3, r2
 80090ec:	d1f1      	bne.n	80090d2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d100      	bne.n	80090f8 <HAL_RCC_OscConfig+0x650>
 80090f6:	e09f      	b.n	8009238 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	2b0c      	cmp	r3, #12
 80090fc:	d100      	bne.n	8009100 <HAL_RCC_OscConfig+0x658>
 80090fe:	e078      	b.n	80091f2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009104:	2b02      	cmp	r3, #2
 8009106:	d159      	bne.n	80091bc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009108:	4b09      	ldr	r3, [pc, #36]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	4b08      	ldr	r3, [pc, #32]	; (8009130 <HAL_RCC_OscConfig+0x688>)
 800910e:	4911      	ldr	r1, [pc, #68]	; (8009154 <HAL_RCC_OscConfig+0x6ac>)
 8009110:	400a      	ands	r2, r1
 8009112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009114:	f7fb ffcb 	bl	80050ae <HAL_GetTick>
 8009118:	0003      	movs	r3, r0
 800911a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800911c:	e01c      	b.n	8009158 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800911e:	f7fb ffc6 	bl	80050ae <HAL_GetTick>
 8009122:	0002      	movs	r2, r0
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b02      	cmp	r3, #2
 800912a:	d915      	bls.n	8009158 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e084      	b.n	800923a <HAL_RCC_OscConfig+0x792>
 8009130:	40021000 	.word	0x40021000
 8009134:	ffff1fff 	.word	0xffff1fff
 8009138:	fffffeff 	.word	0xfffffeff
 800913c:	40007000 	.word	0x40007000
 8009140:	fffffbff 	.word	0xfffffbff
 8009144:	00001388 	.word	0x00001388
 8009148:	efffffff 	.word	0xefffffff
 800914c:	40010000 	.word	0x40010000
 8009150:	ffffdfff 	.word	0xffffdfff
 8009154:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009158:	4b3a      	ldr	r3, [pc, #232]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	2380      	movs	r3, #128	; 0x80
 800915e:	049b      	lsls	r3, r3, #18
 8009160:	4013      	ands	r3, r2
 8009162:	d1dc      	bne.n	800911e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009164:	4b37      	ldr	r3, [pc, #220]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	4a37      	ldr	r2, [pc, #220]	; (8009248 <HAL_RCC_OscConfig+0x7a0>)
 800916a:	4013      	ands	r3, r2
 800916c:	0019      	movs	r1, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	431a      	orrs	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917c:	431a      	orrs	r2, r3
 800917e:	4b31      	ldr	r3, [pc, #196]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 8009180:	430a      	orrs	r2, r1
 8009182:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009184:	4b2f      	ldr	r3, [pc, #188]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4b2e      	ldr	r3, [pc, #184]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 800918a:	2180      	movs	r1, #128	; 0x80
 800918c:	0449      	lsls	r1, r1, #17
 800918e:	430a      	orrs	r2, r1
 8009190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009192:	f7fb ff8c 	bl	80050ae <HAL_GetTick>
 8009196:	0003      	movs	r3, r0
 8009198:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800919a:	e008      	b.n	80091ae <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800919c:	f7fb ff87 	bl	80050ae <HAL_GetTick>
 80091a0:	0002      	movs	r2, r0
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e045      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80091ae:	4b25      	ldr	r3, [pc, #148]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	2380      	movs	r3, #128	; 0x80
 80091b4:	049b      	lsls	r3, r3, #18
 80091b6:	4013      	ands	r3, r2
 80091b8:	d0f0      	beq.n	800919c <HAL_RCC_OscConfig+0x6f4>
 80091ba:	e03d      	b.n	8009238 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091bc:	4b21      	ldr	r3, [pc, #132]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b20      	ldr	r3, [pc, #128]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 80091c2:	4922      	ldr	r1, [pc, #136]	; (800924c <HAL_RCC_OscConfig+0x7a4>)
 80091c4:	400a      	ands	r2, r1
 80091c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c8:	f7fb ff71 	bl	80050ae <HAL_GetTick>
 80091cc:	0003      	movs	r3, r0
 80091ce:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80091d0:	e008      	b.n	80091e4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091d2:	f7fb ff6c 	bl	80050ae <HAL_GetTick>
 80091d6:	0002      	movs	r2, r0
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d901      	bls.n	80091e4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e02a      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80091e4:	4b17      	ldr	r3, [pc, #92]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	2380      	movs	r3, #128	; 0x80
 80091ea:	049b      	lsls	r3, r3, #18
 80091ec:	4013      	ands	r3, r2
 80091ee:	d1f0      	bne.n	80091d2 <HAL_RCC_OscConfig+0x72a>
 80091f0:	e022      	b.n	8009238 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e01d      	b.n	800923a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80091fe:	4b11      	ldr	r3, [pc, #68]	; (8009244 <HAL_RCC_OscConfig+0x79c>)
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	2380      	movs	r3, #128	; 0x80
 8009208:	025b      	lsls	r3, r3, #9
 800920a:	401a      	ands	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	429a      	cmp	r2, r3
 8009212:	d10f      	bne.n	8009234 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	23f0      	movs	r3, #240	; 0xf0
 8009218:	039b      	lsls	r3, r3, #14
 800921a:	401a      	ands	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009220:	429a      	cmp	r2, r3
 8009222:	d107      	bne.n	8009234 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	23c0      	movs	r3, #192	; 0xc0
 8009228:	041b      	lsls	r3, r3, #16
 800922a:	401a      	ands	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009230:	429a      	cmp	r2, r3
 8009232:	d001      	beq.n	8009238 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e000      	b.n	800923a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	0018      	movs	r0, r3
 800923c:	46bd      	mov	sp, r7
 800923e:	b00a      	add	sp, #40	; 0x28
 8009240:	bdb0      	pop	{r4, r5, r7, pc}
 8009242:	46c0      	nop			; (mov r8, r8)
 8009244:	40021000 	.word	0x40021000
 8009248:	ff02ffff 	.word	0xff02ffff
 800924c:	feffffff 	.word	0xfeffffff

08009250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009250:	b5b0      	push	{r4, r5, r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e128      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009264:	4b96      	ldr	r3, [pc, #600]	; (80094c0 <HAL_RCC_ClockConfig+0x270>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2201      	movs	r2, #1
 800926a:	4013      	ands	r3, r2
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d91e      	bls.n	80092b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009272:	4b93      	ldr	r3, [pc, #588]	; (80094c0 <HAL_RCC_ClockConfig+0x270>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2201      	movs	r2, #1
 8009278:	4393      	bics	r3, r2
 800927a:	0019      	movs	r1, r3
 800927c:	4b90      	ldr	r3, [pc, #576]	; (80094c0 <HAL_RCC_ClockConfig+0x270>)
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009284:	f7fb ff13 	bl	80050ae <HAL_GetTick>
 8009288:	0003      	movs	r3, r0
 800928a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800928c:	e009      	b.n	80092a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800928e:	f7fb ff0e 	bl	80050ae <HAL_GetTick>
 8009292:	0002      	movs	r2, r0
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	4a8a      	ldr	r2, [pc, #552]	; (80094c4 <HAL_RCC_ClockConfig+0x274>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d901      	bls.n	80092a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e109      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092a2:	4b87      	ldr	r3, [pc, #540]	; (80094c0 <HAL_RCC_ClockConfig+0x270>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2201      	movs	r2, #1
 80092a8:	4013      	ands	r3, r2
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d1ee      	bne.n	800928e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2202      	movs	r2, #2
 80092b6:	4013      	ands	r3, r2
 80092b8:	d009      	beq.n	80092ce <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092ba:	4b83      	ldr	r3, [pc, #524]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	22f0      	movs	r2, #240	; 0xf0
 80092c0:	4393      	bics	r3, r2
 80092c2:	0019      	movs	r1, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	4b7f      	ldr	r3, [pc, #508]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 80092ca:	430a      	orrs	r2, r1
 80092cc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2201      	movs	r2, #1
 80092d4:	4013      	ands	r3, r2
 80092d6:	d100      	bne.n	80092da <HAL_RCC_ClockConfig+0x8a>
 80092d8:	e089      	b.n	80093ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d107      	bne.n	80092f2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092e2:	4b79      	ldr	r3, [pc, #484]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	2380      	movs	r3, #128	; 0x80
 80092e8:	029b      	lsls	r3, r3, #10
 80092ea:	4013      	ands	r3, r2
 80092ec:	d120      	bne.n	8009330 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e0e1      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d107      	bne.n	800930a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092fa:	4b73      	ldr	r3, [pc, #460]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	2380      	movs	r3, #128	; 0x80
 8009300:	049b      	lsls	r3, r3, #18
 8009302:	4013      	ands	r3, r2
 8009304:	d114      	bne.n	8009330 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e0d5      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d106      	bne.n	8009320 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009312:	4b6d      	ldr	r3, [pc, #436]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2204      	movs	r2, #4
 8009318:	4013      	ands	r3, r2
 800931a:	d109      	bne.n	8009330 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e0ca      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009320:	4b69      	ldr	r3, [pc, #420]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	2380      	movs	r3, #128	; 0x80
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4013      	ands	r3, r2
 800932a:	d101      	bne.n	8009330 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e0c2      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009330:	4b65      	ldr	r3, [pc, #404]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	2203      	movs	r2, #3
 8009336:	4393      	bics	r3, r2
 8009338:	0019      	movs	r1, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	4b62      	ldr	r3, [pc, #392]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009340:	430a      	orrs	r2, r1
 8009342:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009344:	f7fb feb3 	bl	80050ae <HAL_GetTick>
 8009348:	0003      	movs	r3, r0
 800934a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d111      	bne.n	8009378 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009354:	e009      	b.n	800936a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009356:	f7fb feaa 	bl	80050ae <HAL_GetTick>
 800935a:	0002      	movs	r2, r0
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	4a58      	ldr	r2, [pc, #352]	; (80094c4 <HAL_RCC_ClockConfig+0x274>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d901      	bls.n	800936a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e0a5      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800936a:	4b57      	ldr	r3, [pc, #348]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	220c      	movs	r2, #12
 8009370:	4013      	ands	r3, r2
 8009372:	2b08      	cmp	r3, #8
 8009374:	d1ef      	bne.n	8009356 <HAL_RCC_ClockConfig+0x106>
 8009376:	e03a      	b.n	80093ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	2b03      	cmp	r3, #3
 800937e:	d111      	bne.n	80093a4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009380:	e009      	b.n	8009396 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009382:	f7fb fe94 	bl	80050ae <HAL_GetTick>
 8009386:	0002      	movs	r2, r0
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	4a4d      	ldr	r2, [pc, #308]	; (80094c4 <HAL_RCC_ClockConfig+0x274>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d901      	bls.n	8009396 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e08f      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009396:	4b4c      	ldr	r3, [pc, #304]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	220c      	movs	r2, #12
 800939c:	4013      	ands	r3, r2
 800939e:	2b0c      	cmp	r3, #12
 80093a0:	d1ef      	bne.n	8009382 <HAL_RCC_ClockConfig+0x132>
 80093a2:	e024      	b.n	80093ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d11b      	bne.n	80093e4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80093ac:	e009      	b.n	80093c2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093ae:	f7fb fe7e 	bl	80050ae <HAL_GetTick>
 80093b2:	0002      	movs	r2, r0
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	4a42      	ldr	r2, [pc, #264]	; (80094c4 <HAL_RCC_ClockConfig+0x274>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d901      	bls.n	80093c2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e079      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80093c2:	4b41      	ldr	r3, [pc, #260]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	220c      	movs	r2, #12
 80093c8:	4013      	ands	r3, r2
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d1ef      	bne.n	80093ae <HAL_RCC_ClockConfig+0x15e>
 80093ce:	e00e      	b.n	80093ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093d0:	f7fb fe6d 	bl	80050ae <HAL_GetTick>
 80093d4:	0002      	movs	r2, r0
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	4a3a      	ldr	r2, [pc, #232]	; (80094c4 <HAL_RCC_ClockConfig+0x274>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d901      	bls.n	80093e4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e068      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80093e4:	4b38      	ldr	r3, [pc, #224]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	220c      	movs	r2, #12
 80093ea:	4013      	ands	r3, r2
 80093ec:	d1f0      	bne.n	80093d0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093ee:	4b34      	ldr	r3, [pc, #208]	; (80094c0 <HAL_RCC_ClockConfig+0x270>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2201      	movs	r2, #1
 80093f4:	4013      	ands	r3, r2
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d21e      	bcs.n	800943a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093fc:	4b30      	ldr	r3, [pc, #192]	; (80094c0 <HAL_RCC_ClockConfig+0x270>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2201      	movs	r2, #1
 8009402:	4393      	bics	r3, r2
 8009404:	0019      	movs	r1, r3
 8009406:	4b2e      	ldr	r3, [pc, #184]	; (80094c0 <HAL_RCC_ClockConfig+0x270>)
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800940e:	f7fb fe4e 	bl	80050ae <HAL_GetTick>
 8009412:	0003      	movs	r3, r0
 8009414:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009416:	e009      	b.n	800942c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009418:	f7fb fe49 	bl	80050ae <HAL_GetTick>
 800941c:	0002      	movs	r2, r0
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	4a28      	ldr	r2, [pc, #160]	; (80094c4 <HAL_RCC_ClockConfig+0x274>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d901      	bls.n	800942c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e044      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800942c:	4b24      	ldr	r3, [pc, #144]	; (80094c0 <HAL_RCC_ClockConfig+0x270>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2201      	movs	r2, #1
 8009432:	4013      	ands	r3, r2
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d1ee      	bne.n	8009418 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2204      	movs	r2, #4
 8009440:	4013      	ands	r3, r2
 8009442:	d009      	beq.n	8009458 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009444:	4b20      	ldr	r3, [pc, #128]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	4a20      	ldr	r2, [pc, #128]	; (80094cc <HAL_RCC_ClockConfig+0x27c>)
 800944a:	4013      	ands	r3, r2
 800944c:	0019      	movs	r1, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	4b1d      	ldr	r3, [pc, #116]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009454:	430a      	orrs	r2, r1
 8009456:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2208      	movs	r2, #8
 800945e:	4013      	ands	r3, r2
 8009460:	d00a      	beq.n	8009478 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009462:	4b19      	ldr	r3, [pc, #100]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	4a1a      	ldr	r2, [pc, #104]	; (80094d0 <HAL_RCC_ClockConfig+0x280>)
 8009468:	4013      	ands	r3, r2
 800946a:	0019      	movs	r1, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	00da      	lsls	r2, r3, #3
 8009472:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009474:	430a      	orrs	r2, r1
 8009476:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009478:	f000 f832 	bl	80094e0 <HAL_RCC_GetSysClockFreq>
 800947c:	0001      	movs	r1, r0
 800947e:	4b12      	ldr	r3, [pc, #72]	; (80094c8 <HAL_RCC_ClockConfig+0x278>)
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	091b      	lsrs	r3, r3, #4
 8009484:	220f      	movs	r2, #15
 8009486:	4013      	ands	r3, r2
 8009488:	4a12      	ldr	r2, [pc, #72]	; (80094d4 <HAL_RCC_ClockConfig+0x284>)
 800948a:	5cd3      	ldrb	r3, [r2, r3]
 800948c:	000a      	movs	r2, r1
 800948e:	40da      	lsrs	r2, r3
 8009490:	4b11      	ldr	r3, [pc, #68]	; (80094d8 <HAL_RCC_ClockConfig+0x288>)
 8009492:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009494:	4b11      	ldr	r3, [pc, #68]	; (80094dc <HAL_RCC_ClockConfig+0x28c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	250b      	movs	r5, #11
 800949a:	197c      	adds	r4, r7, r5
 800949c:	0018      	movs	r0, r3
 800949e:	f7fb fdfd 	bl	800509c <HAL_InitTick>
 80094a2:	0003      	movs	r3, r0
 80094a4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80094a6:	197b      	adds	r3, r7, r5
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d002      	beq.n	80094b4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80094ae:	197b      	adds	r3, r7, r5
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	e000      	b.n	80094b6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	0018      	movs	r0, r3
 80094b8:	46bd      	mov	sp, r7
 80094ba:	b004      	add	sp, #16
 80094bc:	bdb0      	pop	{r4, r5, r7, pc}
 80094be:	46c0      	nop			; (mov r8, r8)
 80094c0:	40022000 	.word	0x40022000
 80094c4:	00001388 	.word	0x00001388
 80094c8:	40021000 	.word	0x40021000
 80094cc:	fffff8ff 	.word	0xfffff8ff
 80094d0:	ffffc7ff 	.word	0xffffc7ff
 80094d4:	0801e51c 	.word	0x0801e51c
 80094d8:	20000070 	.word	0x20000070
 80094dc:	20000074 	.word	0x20000074

080094e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094e0:	b5b0      	push	{r4, r5, r7, lr}
 80094e2:	b08e      	sub	sp, #56	; 0x38
 80094e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80094e6:	4b4c      	ldr	r3, [pc, #304]	; (8009618 <HAL_RCC_GetSysClockFreq+0x138>)
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80094ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ee:	230c      	movs	r3, #12
 80094f0:	4013      	ands	r3, r2
 80094f2:	2b0c      	cmp	r3, #12
 80094f4:	d014      	beq.n	8009520 <HAL_RCC_GetSysClockFreq+0x40>
 80094f6:	d900      	bls.n	80094fa <HAL_RCC_GetSysClockFreq+0x1a>
 80094f8:	e07b      	b.n	80095f2 <HAL_RCC_GetSysClockFreq+0x112>
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	d002      	beq.n	8009504 <HAL_RCC_GetSysClockFreq+0x24>
 80094fe:	2b08      	cmp	r3, #8
 8009500:	d00b      	beq.n	800951a <HAL_RCC_GetSysClockFreq+0x3a>
 8009502:	e076      	b.n	80095f2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009504:	4b44      	ldr	r3, [pc, #272]	; (8009618 <HAL_RCC_GetSysClockFreq+0x138>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2210      	movs	r2, #16
 800950a:	4013      	ands	r3, r2
 800950c:	d002      	beq.n	8009514 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800950e:	4b43      	ldr	r3, [pc, #268]	; (800961c <HAL_RCC_GetSysClockFreq+0x13c>)
 8009510:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8009512:	e07c      	b.n	800960e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8009514:	4b42      	ldr	r3, [pc, #264]	; (8009620 <HAL_RCC_GetSysClockFreq+0x140>)
 8009516:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009518:	e079      	b.n	800960e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800951a:	4b42      	ldr	r3, [pc, #264]	; (8009624 <HAL_RCC_GetSysClockFreq+0x144>)
 800951c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800951e:	e076      	b.n	800960e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009522:	0c9a      	lsrs	r2, r3, #18
 8009524:	230f      	movs	r3, #15
 8009526:	401a      	ands	r2, r3
 8009528:	4b3f      	ldr	r3, [pc, #252]	; (8009628 <HAL_RCC_GetSysClockFreq+0x148>)
 800952a:	5c9b      	ldrb	r3, [r3, r2]
 800952c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	0d9a      	lsrs	r2, r3, #22
 8009532:	2303      	movs	r3, #3
 8009534:	4013      	ands	r3, r2
 8009536:	3301      	adds	r3, #1
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800953a:	4b37      	ldr	r3, [pc, #220]	; (8009618 <HAL_RCC_GetSysClockFreq+0x138>)
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	2380      	movs	r3, #128	; 0x80
 8009540:	025b      	lsls	r3, r3, #9
 8009542:	4013      	ands	r3, r2
 8009544:	d01a      	beq.n	800957c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	61bb      	str	r3, [r7, #24]
 800954a:	2300      	movs	r3, #0
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	4a35      	ldr	r2, [pc, #212]	; (8009624 <HAL_RCC_GetSysClockFreq+0x144>)
 8009550:	2300      	movs	r3, #0
 8009552:	69b8      	ldr	r0, [r7, #24]
 8009554:	69f9      	ldr	r1, [r7, #28]
 8009556:	f7f7 f811 	bl	800057c <__aeabi_lmul>
 800955a:	0002      	movs	r2, r0
 800955c:	000b      	movs	r3, r1
 800955e:	0010      	movs	r0, r2
 8009560:	0019      	movs	r1, r3
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	613b      	str	r3, [r7, #16]
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f7f6 ffe5 	bl	800053c <__aeabi_uldivmod>
 8009572:	0002      	movs	r2, r0
 8009574:	000b      	movs	r3, r1
 8009576:	0013      	movs	r3, r2
 8009578:	637b      	str	r3, [r7, #52]	; 0x34
 800957a:	e037      	b.n	80095ec <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800957c:	4b26      	ldr	r3, [pc, #152]	; (8009618 <HAL_RCC_GetSysClockFreq+0x138>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2210      	movs	r2, #16
 8009582:	4013      	ands	r3, r2
 8009584:	d01a      	beq.n	80095bc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	60bb      	str	r3, [r7, #8]
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	4a23      	ldr	r2, [pc, #140]	; (800961c <HAL_RCC_GetSysClockFreq+0x13c>)
 8009590:	2300      	movs	r3, #0
 8009592:	68b8      	ldr	r0, [r7, #8]
 8009594:	68f9      	ldr	r1, [r7, #12]
 8009596:	f7f6 fff1 	bl	800057c <__aeabi_lmul>
 800959a:	0002      	movs	r2, r0
 800959c:	000b      	movs	r3, r1
 800959e:	0010      	movs	r0, r2
 80095a0:	0019      	movs	r1, r3
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	603b      	str	r3, [r7, #0]
 80095a6:	2300      	movs	r3, #0
 80095a8:	607b      	str	r3, [r7, #4]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f7f6 ffc5 	bl	800053c <__aeabi_uldivmod>
 80095b2:	0002      	movs	r2, r0
 80095b4:	000b      	movs	r3, r1
 80095b6:	0013      	movs	r3, r2
 80095b8:	637b      	str	r3, [r7, #52]	; 0x34
 80095ba:	e017      	b.n	80095ec <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	0018      	movs	r0, r3
 80095c0:	2300      	movs	r3, #0
 80095c2:	0019      	movs	r1, r3
 80095c4:	4a16      	ldr	r2, [pc, #88]	; (8009620 <HAL_RCC_GetSysClockFreq+0x140>)
 80095c6:	2300      	movs	r3, #0
 80095c8:	f7f6 ffd8 	bl	800057c <__aeabi_lmul>
 80095cc:	0002      	movs	r2, r0
 80095ce:	000b      	movs	r3, r1
 80095d0:	0010      	movs	r0, r2
 80095d2:	0019      	movs	r1, r3
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	001c      	movs	r4, r3
 80095d8:	2300      	movs	r3, #0
 80095da:	001d      	movs	r5, r3
 80095dc:	0022      	movs	r2, r4
 80095de:	002b      	movs	r3, r5
 80095e0:	f7f6 ffac 	bl	800053c <__aeabi_uldivmod>
 80095e4:	0002      	movs	r2, r0
 80095e6:	000b      	movs	r3, r1
 80095e8:	0013      	movs	r3, r2
 80095ea:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80095ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80095f0:	e00d      	b.n	800960e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80095f2:	4b09      	ldr	r3, [pc, #36]	; (8009618 <HAL_RCC_GetSysClockFreq+0x138>)
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	0b5b      	lsrs	r3, r3, #13
 80095f8:	2207      	movs	r2, #7
 80095fa:	4013      	ands	r3, r2
 80095fc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	3301      	adds	r3, #1
 8009602:	2280      	movs	r2, #128	; 0x80
 8009604:	0212      	lsls	r2, r2, #8
 8009606:	409a      	lsls	r2, r3
 8009608:	0013      	movs	r3, r2
 800960a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800960c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8009610:	0018      	movs	r0, r3
 8009612:	46bd      	mov	sp, r7
 8009614:	b00e      	add	sp, #56	; 0x38
 8009616:	bdb0      	pop	{r4, r5, r7, pc}
 8009618:	40021000 	.word	0x40021000
 800961c:	003d0900 	.word	0x003d0900
 8009620:	00f42400 	.word	0x00f42400
 8009624:	007a1200 	.word	0x007a1200
 8009628:	0801e534 	.word	0x0801e534

0800962c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009630:	4b02      	ldr	r3, [pc, #8]	; (800963c <HAL_RCC_GetHCLKFreq+0x10>)
 8009632:	681b      	ldr	r3, [r3, #0]
}
 8009634:	0018      	movs	r0, r3
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	20000070 	.word	0x20000070

08009640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009644:	f7ff fff2 	bl	800962c <HAL_RCC_GetHCLKFreq>
 8009648:	0001      	movs	r1, r0
 800964a:	4b06      	ldr	r3, [pc, #24]	; (8009664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	2207      	movs	r2, #7
 8009652:	4013      	ands	r3, r2
 8009654:	4a04      	ldr	r2, [pc, #16]	; (8009668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009656:	5cd3      	ldrb	r3, [r2, r3]
 8009658:	40d9      	lsrs	r1, r3
 800965a:	000b      	movs	r3, r1
}
 800965c:	0018      	movs	r0, r3
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	40021000 	.word	0x40021000
 8009668:	0801e52c 	.word	0x0801e52c

0800966c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009670:	f7ff ffdc 	bl	800962c <HAL_RCC_GetHCLKFreq>
 8009674:	0001      	movs	r1, r0
 8009676:	4b06      	ldr	r3, [pc, #24]	; (8009690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	0adb      	lsrs	r3, r3, #11
 800967c:	2207      	movs	r2, #7
 800967e:	4013      	ands	r3, r2
 8009680:	4a04      	ldr	r2, [pc, #16]	; (8009694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009682:	5cd3      	ldrb	r3, [r2, r3]
 8009684:	40d9      	lsrs	r1, r3
 8009686:	000b      	movs	r3, r1
}
 8009688:	0018      	movs	r0, r3
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	46c0      	nop			; (mov r8, r8)
 8009690:	40021000 	.word	0x40021000
 8009694:	0801e52c 	.word	0x0801e52c

08009698 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80096a0:	2017      	movs	r0, #23
 80096a2:	183b      	adds	r3, r7, r0
 80096a4:	2200      	movs	r2, #0
 80096a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2220      	movs	r2, #32
 80096ae:	4013      	ands	r3, r2
 80096b0:	d100      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80096b2:	e0c2      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096b4:	4b98      	ldr	r3, [pc, #608]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80096b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b8:	2380      	movs	r3, #128	; 0x80
 80096ba:	055b      	lsls	r3, r3, #21
 80096bc:	4013      	ands	r3, r2
 80096be:	d109      	bne.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096c0:	4b95      	ldr	r3, [pc, #596]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80096c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c4:	4b94      	ldr	r3, [pc, #592]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80096c6:	2180      	movs	r1, #128	; 0x80
 80096c8:	0549      	lsls	r1, r1, #21
 80096ca:	430a      	orrs	r2, r1
 80096cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80096ce:	183b      	adds	r3, r7, r0
 80096d0:	2201      	movs	r2, #1
 80096d2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096d4:	4b91      	ldr	r3, [pc, #580]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	2380      	movs	r3, #128	; 0x80
 80096da:	005b      	lsls	r3, r3, #1
 80096dc:	4013      	ands	r3, r2
 80096de:	d11a      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096e0:	4b8e      	ldr	r3, [pc, #568]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4b8d      	ldr	r3, [pc, #564]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80096e6:	2180      	movs	r1, #128	; 0x80
 80096e8:	0049      	lsls	r1, r1, #1
 80096ea:	430a      	orrs	r2, r1
 80096ec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096ee:	f7fb fcde 	bl	80050ae <HAL_GetTick>
 80096f2:	0003      	movs	r3, r0
 80096f4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096f6:	e008      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096f8:	f7fb fcd9 	bl	80050ae <HAL_GetTick>
 80096fc:	0002      	movs	r2, r0
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	2b64      	cmp	r3, #100	; 0x64
 8009704:	d901      	bls.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e102      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800970a:	4b84      	ldr	r3, [pc, #528]	; (800991c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	2380      	movs	r3, #128	; 0x80
 8009710:	005b      	lsls	r3, r3, #1
 8009712:	4013      	ands	r3, r2
 8009714:	d0f0      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8009716:	4b80      	ldr	r3, [pc, #512]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	23c0      	movs	r3, #192	; 0xc0
 800971c:	039b      	lsls	r3, r3, #14
 800971e:	4013      	ands	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	23c0      	movs	r3, #192	; 0xc0
 8009728:	039b      	lsls	r3, r3, #14
 800972a:	4013      	ands	r3, r2
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	429a      	cmp	r2, r3
 8009730:	d013      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	23c0      	movs	r3, #192	; 0xc0
 8009738:	029b      	lsls	r3, r3, #10
 800973a:	401a      	ands	r2, r3
 800973c:	23c0      	movs	r3, #192	; 0xc0
 800973e:	029b      	lsls	r3, r3, #10
 8009740:	429a      	cmp	r2, r3
 8009742:	d10a      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009744:	4b74      	ldr	r3, [pc, #464]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	2380      	movs	r3, #128	; 0x80
 800974a:	029b      	lsls	r3, r3, #10
 800974c:	401a      	ands	r2, r3
 800974e:	2380      	movs	r3, #128	; 0x80
 8009750:	029b      	lsls	r3, r3, #10
 8009752:	429a      	cmp	r2, r3
 8009754:	d101      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e0da      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800975a:	4b6f      	ldr	r3, [pc, #444]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800975c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800975e:	23c0      	movs	r3, #192	; 0xc0
 8009760:	029b      	lsls	r3, r3, #10
 8009762:	4013      	ands	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d03b      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	23c0      	movs	r3, #192	; 0xc0
 8009772:	029b      	lsls	r3, r3, #10
 8009774:	4013      	ands	r3, r2
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	429a      	cmp	r2, r3
 800977a:	d033      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2220      	movs	r2, #32
 8009782:	4013      	ands	r3, r2
 8009784:	d02e      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8009786:	4b64      	ldr	r3, [pc, #400]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800978a:	4a65      	ldr	r2, [pc, #404]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800978c:	4013      	ands	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009790:	4b61      	ldr	r3, [pc, #388]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009794:	4b60      	ldr	r3, [pc, #384]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009796:	2180      	movs	r1, #128	; 0x80
 8009798:	0309      	lsls	r1, r1, #12
 800979a:	430a      	orrs	r2, r1
 800979c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800979e:	4b5e      	ldr	r3, [pc, #376]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097a2:	4b5d      	ldr	r3, [pc, #372]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097a4:	495f      	ldr	r1, [pc, #380]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80097a6:	400a      	ands	r2, r1
 80097a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80097aa:	4b5b      	ldr	r3, [pc, #364]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	2380      	movs	r3, #128	; 0x80
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	4013      	ands	r3, r2
 80097b8:	d014      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097ba:	f7fb fc78 	bl	80050ae <HAL_GetTick>
 80097be:	0003      	movs	r3, r0
 80097c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097c2:	e009      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097c4:	f7fb fc73 	bl	80050ae <HAL_GetTick>
 80097c8:	0002      	movs	r2, r0
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	4a56      	ldr	r2, [pc, #344]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e09b      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097d8:	4b4f      	ldr	r3, [pc, #316]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097dc:	2380      	movs	r3, #128	; 0x80
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4013      	ands	r3, r2
 80097e2:	d0ef      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	23c0      	movs	r3, #192	; 0xc0
 80097ea:	029b      	lsls	r3, r3, #10
 80097ec:	401a      	ands	r2, r3
 80097ee:	23c0      	movs	r3, #192	; 0xc0
 80097f0:	029b      	lsls	r3, r3, #10
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d10c      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80097f6:	4b48      	ldr	r3, [pc, #288]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a4c      	ldr	r2, [pc, #304]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80097fc:	4013      	ands	r3, r2
 80097fe:	0019      	movs	r1, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	23c0      	movs	r3, #192	; 0xc0
 8009806:	039b      	lsls	r3, r3, #14
 8009808:	401a      	ands	r2, r3
 800980a:	4b43      	ldr	r3, [pc, #268]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800980c:	430a      	orrs	r2, r1
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	4b41      	ldr	r3, [pc, #260]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009812:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	23c0      	movs	r3, #192	; 0xc0
 800981a:	029b      	lsls	r3, r3, #10
 800981c:	401a      	ands	r2, r3
 800981e:	4b3e      	ldr	r3, [pc, #248]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009820:	430a      	orrs	r2, r1
 8009822:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009824:	2317      	movs	r3, #23
 8009826:	18fb      	adds	r3, r7, r3
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d105      	bne.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800982e:	4b3a      	ldr	r3, [pc, #232]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009832:	4b39      	ldr	r3, [pc, #228]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009834:	493e      	ldr	r1, [pc, #248]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8009836:	400a      	ands	r2, r1
 8009838:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2201      	movs	r2, #1
 8009840:	4013      	ands	r3, r2
 8009842:	d009      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009844:	4b34      	ldr	r3, [pc, #208]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009848:	2203      	movs	r2, #3
 800984a:	4393      	bics	r3, r2
 800984c:	0019      	movs	r1, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	4b31      	ldr	r3, [pc, #196]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009854:	430a      	orrs	r2, r1
 8009856:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2202      	movs	r2, #2
 800985e:	4013      	ands	r3, r2
 8009860:	d009      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009862:	4b2d      	ldr	r3, [pc, #180]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009866:	220c      	movs	r2, #12
 8009868:	4393      	bics	r3, r2
 800986a:	0019      	movs	r1, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	4b29      	ldr	r3, [pc, #164]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009872:	430a      	orrs	r2, r1
 8009874:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2204      	movs	r2, #4
 800987c:	4013      	ands	r3, r2
 800987e:	d009      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009880:	4b25      	ldr	r3, [pc, #148]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009884:	4a2b      	ldr	r2, [pc, #172]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009886:	4013      	ands	r3, r2
 8009888:	0019      	movs	r1, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691a      	ldr	r2, [r3, #16]
 800988e:	4b22      	ldr	r3, [pc, #136]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009890:	430a      	orrs	r2, r1
 8009892:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2208      	movs	r2, #8
 800989a:	4013      	ands	r3, r2
 800989c:	d009      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800989e:	4b1e      	ldr	r3, [pc, #120]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a2:	4a25      	ldr	r2, [pc, #148]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	0019      	movs	r1, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	695a      	ldr	r2, [r3, #20]
 80098ac:	4b1a      	ldr	r3, [pc, #104]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098ae:	430a      	orrs	r2, r1
 80098b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	2380      	movs	r3, #128	; 0x80
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	4013      	ands	r3, r2
 80098bc:	d009      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80098be:	4b16      	ldr	r3, [pc, #88]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c2:	4a17      	ldr	r2, [pc, #92]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80098c4:	4013      	ands	r3, r2
 80098c6:	0019      	movs	r1, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	699a      	ldr	r2, [r3, #24]
 80098cc:	4b12      	ldr	r3, [pc, #72]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098ce:	430a      	orrs	r2, r1
 80098d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2240      	movs	r2, #64	; 0x40
 80098d8:	4013      	ands	r3, r2
 80098da:	d009      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098dc:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e0:	4a16      	ldr	r2, [pc, #88]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	0019      	movs	r1, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1a      	ldr	r2, [r3, #32]
 80098ea:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098ec:	430a      	orrs	r2, r1
 80098ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2280      	movs	r2, #128	; 0x80
 80098f6:	4013      	ands	r3, r2
 80098f8:	d009      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80098fa:	4b07      	ldr	r3, [pc, #28]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098fe:	4a10      	ldr	r2, [pc, #64]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009900:	4013      	ands	r3, r2
 8009902:	0019      	movs	r1, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	69da      	ldr	r2, [r3, #28]
 8009908:	4b03      	ldr	r3, [pc, #12]	; (8009918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800990a:	430a      	orrs	r2, r1
 800990c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	0018      	movs	r0, r3
 8009912:	46bd      	mov	sp, r7
 8009914:	b006      	add	sp, #24
 8009916:	bd80      	pop	{r7, pc}
 8009918:	40021000 	.word	0x40021000
 800991c:	40007000 	.word	0x40007000
 8009920:	fffcffff 	.word	0xfffcffff
 8009924:	fff7ffff 	.word	0xfff7ffff
 8009928:	00001388 	.word	0x00001388
 800992c:	ffcfffff 	.word	0xffcfffff
 8009930:	efffffff 	.word	0xefffffff
 8009934:	fffff3ff 	.word	0xfffff3ff
 8009938:	ffffcfff 	.word	0xffffcfff
 800993c:	fbffffff 	.word	0xfbffffff
 8009940:	fff3ffff 	.word	0xfff3ffff

08009944 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e08e      	b.n	8009a74 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2221      	movs	r2, #33	; 0x21
 800995a:	5c9b      	ldrb	r3, [r3, r2]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d107      	bne.n	8009972 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	2100      	movs	r1, #0
 8009968:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	0018      	movs	r0, r3
 800996e:	f7fa fa09 	bl	8003d84 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2221      	movs	r2, #33	; 0x21
 8009976:	2102      	movs	r1, #2
 8009978:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	22ca      	movs	r2, #202	; 0xca
 8009980:	625a      	str	r2, [r3, #36]	; 0x24
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2253      	movs	r2, #83	; 0x53
 8009988:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	0018      	movs	r0, r3
 800998e:	f000 fcf4 	bl	800a37a <RTC_EnterInitMode>
 8009992:	1e03      	subs	r3, r0, #0
 8009994:	d009      	beq.n	80099aa <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	22ff      	movs	r2, #255	; 0xff
 800999c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2221      	movs	r2, #33	; 0x21
 80099a2:	2104      	movs	r1, #4
 80099a4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e064      	b.n	8009a74 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4931      	ldr	r1, [pc, #196]	; (8009a7c <HAL_RTC_Init+0x138>)
 80099b6:	400a      	ands	r2, r1
 80099b8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6899      	ldr	r1, [r3, #8]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	431a      	orrs	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	430a      	orrs	r2, r1
 80099d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	68d2      	ldr	r2, [r2, #12]
 80099e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6919      	ldr	r1, [r3, #16]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	041a      	lsls	r2, r3, #16
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68da      	ldr	r2, [r3, #12]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2180      	movs	r1, #128	; 0x80
 8009a02:	438a      	bics	r2, r1
 8009a04:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2103      	movs	r1, #3
 8009a12:	438a      	bics	r2, r1
 8009a14:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	431a      	orrs	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	2220      	movs	r2, #32
 8009a36:	4013      	ands	r3, r2
 8009a38:	d113      	bne.n	8009a62 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	f000 fc75 	bl	800a32c <HAL_RTC_WaitForSynchro>
 8009a42:	1e03      	subs	r3, r0, #0
 8009a44:	d00d      	beq.n	8009a62 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	22ff      	movs	r2, #255	; 0xff
 8009a4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2221      	movs	r2, #33	; 0x21
 8009a52:	2104      	movs	r1, #4
 8009a54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2220      	movs	r2, #32
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e008      	b.n	8009a74 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	22ff      	movs	r2, #255	; 0xff
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2221      	movs	r2, #33	; 0x21
 8009a6e:	2101      	movs	r1, #1
 8009a70:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009a72:	2300      	movs	r3, #0
  }
}
 8009a74:	0018      	movs	r0, r3
 8009a76:	46bd      	mov	sp, r7
 8009a78:	b002      	add	sp, #8
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	ff8fffbf 	.word	0xff8fffbf

08009a80 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009a80:	b590      	push	{r4, r7, lr}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	5c9b      	ldrb	r3, [r3, r2]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_RTC_SetTime+0x1a>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e0ad      	b.n	8009bf6 <HAL_RTC_SetTime+0x176>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2221      	movs	r2, #33	; 0x21
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d125      	bne.n	8009afc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	2240      	movs	r2, #64	; 0x40
 8009ab8:	4013      	ands	r3, r2
 8009aba:	d102      	bne.n	8009ac2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f000 fc81 	bl	800a3ce <RTC_ByteToBcd2>
 8009acc:	0003      	movs	r3, r0
 8009ace:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f000 fc7a 	bl	800a3ce <RTC_ByteToBcd2>
 8009ada:	0003      	movs	r3, r0
 8009adc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009ade:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	789b      	ldrb	r3, [r3, #2]
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f000 fc72 	bl	800a3ce <RTC_ByteToBcd2>
 8009aea:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009aec:	0022      	movs	r2, r4
 8009aee:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	78db      	ldrb	r3, [r3, #3]
 8009af4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009af6:	4313      	orrs	r3, r2
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	e017      	b.n	8009b2c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	2240      	movs	r2, #64	; 0x40
 8009b04:	4013      	ands	r3, r2
 8009b06:	d102      	bne.n	8009b0e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	785b      	ldrb	r3, [r3, #1]
 8009b18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009b1a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009b20:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	78db      	ldrb	r3, [r3, #3]
 8009b26:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	22ca      	movs	r2, #202	; 0xca
 8009b32:	625a      	str	r2, [r3, #36]	; 0x24
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2253      	movs	r2, #83	; 0x53
 8009b3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f000 fc1b 	bl	800a37a <RTC_EnterInitMode>
 8009b44:	1e03      	subs	r3, r0, #0
 8009b46:	d00d      	beq.n	8009b64 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	22ff      	movs	r2, #255	; 0xff
 8009b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2221      	movs	r2, #33	; 0x21
 8009b54:	2104      	movs	r1, #4
 8009b56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e048      	b.n	8009bf6 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	4925      	ldr	r1, [pc, #148]	; (8009c00 <HAL_RTC_SetTime+0x180>)
 8009b6c:	400a      	ands	r2, r1
 8009b6e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4922      	ldr	r1, [pc, #136]	; (8009c04 <HAL_RTC_SetTime+0x184>)
 8009b7c:	400a      	ands	r2, r1
 8009b7e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6899      	ldr	r1, [r3, #8]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	430a      	orrs	r2, r1
 8009b96:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68da      	ldr	r2, [r3, #12]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2180      	movs	r1, #128	; 0x80
 8009ba4:	438a      	bics	r2, r1
 8009ba6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	d113      	bne.n	8009bdc <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	0018      	movs	r0, r3
 8009bb8:	f000 fbb8 	bl	800a32c <HAL_RTC_WaitForSynchro>
 8009bbc:	1e03      	subs	r3, r0, #0
 8009bbe:	d00d      	beq.n	8009bdc <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	22ff      	movs	r2, #255	; 0xff
 8009bc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2221      	movs	r2, #33	; 0x21
 8009bcc:	2104      	movs	r1, #4
 8009bce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e00c      	b.n	8009bf6 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	22ff      	movs	r2, #255	; 0xff
 8009be2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2221      	movs	r2, #33	; 0x21
 8009be8:	2101      	movs	r1, #1
 8009bea:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
  }
}
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	b007      	add	sp, #28
 8009bfc:	bd90      	pop	{r4, r7, pc}
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	007f7f7f 	.word	0x007f7f7f
 8009c04:	fffbffff 	.word	0xfffbffff

08009c08 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	045b      	lsls	r3, r3, #17
 8009c26:	0c5a      	lsrs	r2, r3, #17
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a22      	ldr	r2, [pc, #136]	; (8009cbc <HAL_RTC_GetTime+0xb4>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	0c1b      	lsrs	r3, r3, #16
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	223f      	movs	r2, #63	; 0x3f
 8009c40:	4013      	ands	r3, r2
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	0a1b      	lsrs	r3, r3, #8
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	227f      	movs	r2, #127	; 0x7f
 8009c50:	4013      	ands	r3, r2
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	227f      	movs	r2, #127	; 0x7f
 8009c5e:	4013      	ands	r3, r2
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	0c1b      	lsrs	r3, r3, #16
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2240      	movs	r2, #64	; 0x40
 8009c6e:	4013      	ands	r3, r2
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d11a      	bne.n	8009cb2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	0018      	movs	r0, r3
 8009c82:	f000 fbcc 	bl	800a41e <RTC_Bcd2ToByte>
 8009c86:	0003      	movs	r3, r0
 8009c88:	001a      	movs	r2, r3
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	0018      	movs	r0, r3
 8009c94:	f000 fbc3 	bl	800a41e <RTC_Bcd2ToByte>
 8009c98:	0003      	movs	r3, r0
 8009c9a:	001a      	movs	r2, r3
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	789b      	ldrb	r3, [r3, #2]
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	f000 fbba 	bl	800a41e <RTC_Bcd2ToByte>
 8009caa:	0003      	movs	r3, r0
 8009cac:	001a      	movs	r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	b006      	add	sp, #24
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	007f7f7f 	.word	0x007f7f7f

08009cc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009cc0:	b590      	push	{r4, r7, lr}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	5c9b      	ldrb	r3, [r3, r2]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d101      	bne.n	8009cda <HAL_RTC_SetDate+0x1a>
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	e099      	b.n	8009e0e <HAL_RTC_SetDate+0x14e>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	2101      	movs	r1, #1
 8009ce0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2221      	movs	r2, #33	; 0x21
 8009ce6:	2102      	movs	r1, #2
 8009ce8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10e      	bne.n	8009d0e <HAL_RTC_SetDate+0x4e>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	001a      	movs	r2, r3
 8009cf6:	2310      	movs	r3, #16
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	d008      	beq.n	8009d0e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	2210      	movs	r2, #16
 8009d02:	4393      	bics	r3, r2
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	330a      	adds	r3, #10
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d11c      	bne.n	8009d4e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	78db      	ldrb	r3, [r3, #3]
 8009d18:	0018      	movs	r0, r3
 8009d1a:	f000 fb58 	bl	800a3ce <RTC_ByteToBcd2>
 8009d1e:	0003      	movs	r3, r0
 8009d20:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	0018      	movs	r0, r3
 8009d28:	f000 fb51 	bl	800a3ce <RTC_ByteToBcd2>
 8009d2c:	0003      	movs	r3, r0
 8009d2e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009d30:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	789b      	ldrb	r3, [r3, #2]
 8009d36:	0018      	movs	r0, r3
 8009d38:	f000 fb49 	bl	800a3ce <RTC_ByteToBcd2>
 8009d3c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009d3e:	0022      	movs	r2, r4
 8009d40:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	e00e      	b.n	8009d6c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	78db      	ldrb	r3, [r3, #3]
 8009d52:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	785b      	ldrb	r3, [r3, #1]
 8009d58:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009d5a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009d60:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	22ca      	movs	r2, #202	; 0xca
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2253      	movs	r2, #83	; 0x53
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	0018      	movs	r0, r3
 8009d80:	f000 fafb 	bl	800a37a <RTC_EnterInitMode>
 8009d84:	1e03      	subs	r3, r0, #0
 8009d86:	d00d      	beq.n	8009da4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	22ff      	movs	r2, #255	; 0xff
 8009d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2221      	movs	r2, #33	; 0x21
 8009d94:	2104      	movs	r1, #4
 8009d96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e034      	b.n	8009e0e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	491b      	ldr	r1, [pc, #108]	; (8009e18 <HAL_RTC_SetDate+0x158>)
 8009dac:	400a      	ands	r2, r1
 8009dae:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2180      	movs	r1, #128	; 0x80
 8009dbc:	438a      	bics	r2, r1
 8009dbe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	4013      	ands	r3, r2
 8009dca:	d113      	bne.n	8009df4 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	0018      	movs	r0, r3
 8009dd0:	f000 faac 	bl	800a32c <HAL_RTC_WaitForSynchro>
 8009dd4:	1e03      	subs	r3, r0, #0
 8009dd6:	d00d      	beq.n	8009df4 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	22ff      	movs	r2, #255	; 0xff
 8009dde:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2221      	movs	r2, #33	; 0x21
 8009de4:	2104      	movs	r1, #4
 8009de6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2220      	movs	r2, #32
 8009dec:	2100      	movs	r1, #0
 8009dee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e00c      	b.n	8009e0e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	22ff      	movs	r2, #255	; 0xff
 8009dfa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2221      	movs	r2, #33	; 0x21
 8009e00:	2101      	movs	r1, #1
 8009e02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2220      	movs	r2, #32
 8009e08:	2100      	movs	r1, #0
 8009e0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
  }
}
 8009e0e:	0018      	movs	r0, r3
 8009e10:	46bd      	mov	sp, r7
 8009e12:	b007      	add	sp, #28
 8009e14:	bd90      	pop	{r4, r7, pc}
 8009e16:	46c0      	nop			; (mov r8, r8)
 8009e18:	00ffff3f 	.word	0x00ffff3f

08009e1c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	4a21      	ldr	r2, [pc, #132]	; (8009eb4 <HAL_RTC_GetDate+0x98>)
 8009e30:	4013      	ands	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	0c1b      	lsrs	r3, r3, #16
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	0a1b      	lsrs	r3, r3, #8
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	221f      	movs	r2, #31
 8009e46:	4013      	ands	r3, r2
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	223f      	movs	r2, #63	; 0x3f
 8009e54:	4013      	ands	r3, r2
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	0b5b      	lsrs	r3, r3, #13
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2207      	movs	r2, #7
 8009e64:	4013      	ands	r3, r2
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d11a      	bne.n	8009ea8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	78db      	ldrb	r3, [r3, #3]
 8009e76:	0018      	movs	r0, r3
 8009e78:	f000 fad1 	bl	800a41e <RTC_Bcd2ToByte>
 8009e7c:	0003      	movs	r3, r0
 8009e7e:	001a      	movs	r2, r3
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	785b      	ldrb	r3, [r3, #1]
 8009e88:	0018      	movs	r0, r3
 8009e8a:	f000 fac8 	bl	800a41e <RTC_Bcd2ToByte>
 8009e8e:	0003      	movs	r3, r0
 8009e90:	001a      	movs	r2, r3
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	789b      	ldrb	r3, [r3, #2]
 8009e9a:	0018      	movs	r0, r3
 8009e9c:	f000 fabf 	bl	800a41e <RTC_Bcd2ToByte>
 8009ea0:	0003      	movs	r3, r0
 8009ea2:	001a      	movs	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	0018      	movs	r0, r3
 8009eac:	46bd      	mov	sp, r7
 8009eae:	b006      	add	sp, #24
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	00ffff3f 	.word	0x00ffff3f

08009eb8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b089      	sub	sp, #36	; 0x24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	5c9b      	ldrb	r3, [r3, r2]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d101      	bne.n	8009ed2 <HAL_RTC_SetAlarm_IT+0x1a>
 8009ece:	2302      	movs	r3, #2
 8009ed0:	e130      	b.n	800a134 <HAL_RTC_SetAlarm_IT+0x27c>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2221      	movs	r2, #33	; 0x21
 8009ede:	2102      	movs	r1, #2
 8009ee0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d136      	bne.n	8009f56 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	2240      	movs	r2, #64	; 0x40
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	d102      	bne.n	8009efa <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	0018      	movs	r0, r3
 8009f00:	f000 fa65 	bl	800a3ce <RTC_ByteToBcd2>
 8009f04:	0003      	movs	r3, r0
 8009f06:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	785b      	ldrb	r3, [r3, #1]
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	f000 fa5e 	bl	800a3ce <RTC_ByteToBcd2>
 8009f12:	0003      	movs	r3, r0
 8009f14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f16:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	789b      	ldrb	r3, [r3, #2]
 8009f1c:	0018      	movs	r0, r3
 8009f1e:	f000 fa56 	bl	800a3ce <RTC_ByteToBcd2>
 8009f22:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009f24:	0022      	movs	r2, r4
 8009f26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	78db      	ldrb	r3, [r3, #3]
 8009f2c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2220      	movs	r2, #32
 8009f36:	5c9b      	ldrb	r3, [r3, r2]
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f000 fa48 	bl	800a3ce <RTC_ByteToBcd2>
 8009f3e:	0003      	movs	r3, r0
 8009f40:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009f42:	0022      	movs	r2, r4
 8009f44:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009f4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f50:	4313      	orrs	r3, r2
 8009f52:	61fb      	str	r3, [r7, #28]
 8009f54:	e022      	b.n	8009f9c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	2240      	movs	r2, #64	; 0x40
 8009f5e:	4013      	ands	r3, r2
 8009f60:	d102      	bne.n	8009f68 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2200      	movs	r2, #0
 8009f66:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f74:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009f7a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	78db      	ldrb	r3, [r3, #3]
 8009f80:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009f82:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2120      	movs	r1, #32
 8009f88:	5c5b      	ldrb	r3, [r3, r1]
 8009f8a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009f8c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009f92:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	22ca      	movs	r2, #202	; 0xca
 8009fae:	625a      	str	r2, [r3, #36]	; 0x24
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2253      	movs	r2, #83	; 0x53
 8009fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fbc:	2380      	movs	r3, #128	; 0x80
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d14e      	bne.n	800a062 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	495b      	ldr	r1, [pc, #364]	; (800a13c <HAL_RTC_SetAlarm_IT+0x284>)
 8009fd0:	400a      	ands	r2, r1
 8009fd2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	22ff      	movs	r2, #255	; 0xff
 8009fdc:	401a      	ands	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4957      	ldr	r1, [pc, #348]	; (800a140 <HAL_RTC_SetAlarm_IT+0x288>)
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009fe8:	f7fb f861 	bl	80050ae <HAL_GetTick>
 8009fec:	0003      	movs	r3, r0
 8009fee:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009ff0:	e016      	b.n	800a020 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ff2:	f7fb f85c 	bl	80050ae <HAL_GetTick>
 8009ff6:	0002      	movs	r2, r0
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	1ad2      	subs	r2, r2, r3
 8009ffc:	23fa      	movs	r3, #250	; 0xfa
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	429a      	cmp	r2, r3
 800a002:	d90d      	bls.n	800a020 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	22ff      	movs	r2, #255	; 0xff
 800a00a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2221      	movs	r2, #33	; 0x21
 800a010:	2103      	movs	r1, #3
 800a012:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2220      	movs	r2, #32
 800a018:	2100      	movs	r1, #0
 800a01a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e089      	b.n	800a134 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	2201      	movs	r2, #1
 800a028:	4013      	ands	r3, r2
 800a02a:	d0e2      	beq.n	8009ff2 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	69fa      	ldr	r2, [r7, #28]
 800a032:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2180      	movs	r1, #128	; 0x80
 800a048:	0049      	lsls	r1, r1, #1
 800a04a:	430a      	orrs	r2, r1
 800a04c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2180      	movs	r1, #128	; 0x80
 800a05a:	0149      	lsls	r1, r1, #5
 800a05c:	430a      	orrs	r2, r1
 800a05e:	609a      	str	r2, [r3, #8]
 800a060:	e04d      	b.n	800a0fe <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4935      	ldr	r1, [pc, #212]	; (800a144 <HAL_RTC_SetAlarm_IT+0x28c>)
 800a06e:	400a      	ands	r2, r1
 800a070:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	22ff      	movs	r2, #255	; 0xff
 800a07a:	401a      	ands	r2, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4931      	ldr	r1, [pc, #196]	; (800a148 <HAL_RTC_SetAlarm_IT+0x290>)
 800a082:	430a      	orrs	r2, r1
 800a084:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a086:	f7fb f812 	bl	80050ae <HAL_GetTick>
 800a08a:	0003      	movs	r3, r0
 800a08c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a08e:	e016      	b.n	800a0be <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a090:	f7fb f80d 	bl	80050ae <HAL_GetTick>
 800a094:	0002      	movs	r2, r0
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	1ad2      	subs	r2, r2, r3
 800a09a:	23fa      	movs	r3, #250	; 0xfa
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d90d      	bls.n	800a0be <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	22ff      	movs	r2, #255	; 0xff
 800a0a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2221      	movs	r2, #33	; 0x21
 800a0ae:	2103      	movs	r1, #3
 800a0b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e03a      	b.n	800a134 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	d0e2      	beq.n	800a090 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	69fa      	ldr	r2, [r7, #28]
 800a0d0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2180      	movs	r1, #128	; 0x80
 800a0e6:	0089      	lsls	r1, r1, #2
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689a      	ldr	r2, [r3, #8]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2180      	movs	r1, #128	; 0x80
 800a0f8:	0189      	lsls	r1, r1, #6
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a0fe:	4b13      	ldr	r3, [pc, #76]	; (800a14c <HAL_RTC_SetAlarm_IT+0x294>)
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4b12      	ldr	r3, [pc, #72]	; (800a14c <HAL_RTC_SetAlarm_IT+0x294>)
 800a104:	2180      	movs	r1, #128	; 0x80
 800a106:	0289      	lsls	r1, r1, #10
 800a108:	430a      	orrs	r2, r1
 800a10a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a10c:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <HAL_RTC_SetAlarm_IT+0x294>)
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	4b0e      	ldr	r3, [pc, #56]	; (800a14c <HAL_RTC_SetAlarm_IT+0x294>)
 800a112:	2180      	movs	r1, #128	; 0x80
 800a114:	0289      	lsls	r1, r1, #10
 800a116:	430a      	orrs	r2, r1
 800a118:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	22ff      	movs	r2, #255	; 0xff
 800a120:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2221      	movs	r2, #33	; 0x21
 800a126:	2101      	movs	r1, #1
 800a128:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2220      	movs	r2, #32
 800a12e:	2100      	movs	r1, #0
 800a130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	0018      	movs	r0, r3
 800a136:	46bd      	mov	sp, r7
 800a138:	b009      	add	sp, #36	; 0x24
 800a13a:	bd90      	pop	{r4, r7, pc}
 800a13c:	fffffeff 	.word	0xfffffeff
 800a140:	fffffe7f 	.word	0xfffffe7f
 800a144:	fffffdff 	.word	0xfffffdff
 800a148:	fffffd7f 	.word	0xfffffd7f
 800a14c:	40010400 	.word	0x40010400

0800a150 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2220      	movs	r2, #32
 800a15e:	5c9b      	ldrb	r3, [r3, r2]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d101      	bne.n	800a168 <HAL_RTC_DeactivateAlarm+0x18>
 800a164:	2302      	movs	r3, #2
 800a166:	e086      	b.n	800a276 <HAL_RTC_DeactivateAlarm+0x126>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2220      	movs	r2, #32
 800a16c:	2101      	movs	r1, #1
 800a16e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2221      	movs	r2, #33	; 0x21
 800a174:	2102      	movs	r1, #2
 800a176:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	22ca      	movs	r2, #202	; 0xca
 800a17e:	625a      	str	r2, [r3, #36]	; 0x24
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2253      	movs	r2, #83	; 0x53
 800a186:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	2380      	movs	r3, #128	; 0x80
 800a18c:	005b      	lsls	r3, r3, #1
 800a18e:	429a      	cmp	r2, r3
 800a190:	d132      	bne.n	800a1f8 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4938      	ldr	r1, [pc, #224]	; (800a280 <HAL_RTC_DeactivateAlarm+0x130>)
 800a19e:	400a      	ands	r2, r1
 800a1a0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4935      	ldr	r1, [pc, #212]	; (800a284 <HAL_RTC_DeactivateAlarm+0x134>)
 800a1ae:	400a      	ands	r2, r1
 800a1b0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a1b2:	f7fa ff7c 	bl	80050ae <HAL_GetTick>
 800a1b6:	0003      	movs	r3, r0
 800a1b8:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a1ba:	e016      	b.n	800a1ea <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a1bc:	f7fa ff77 	bl	80050ae <HAL_GetTick>
 800a1c0:	0002      	movs	r2, r0
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	1ad2      	subs	r2, r2, r3
 800a1c6:	23fa      	movs	r3, #250	; 0xfa
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d90d      	bls.n	800a1ea <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	22ff      	movs	r2, #255	; 0xff
 800a1d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2221      	movs	r2, #33	; 0x21
 800a1da:	2103      	movs	r1, #3
 800a1dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e045      	b.n	800a276 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	d0e2      	beq.n	800a1bc <HAL_RTC_DeactivateAlarm+0x6c>
 800a1f6:	e031      	b.n	800a25c <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689a      	ldr	r2, [r3, #8]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4921      	ldr	r1, [pc, #132]	; (800a288 <HAL_RTC_DeactivateAlarm+0x138>)
 800a204:	400a      	ands	r2, r1
 800a206:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	491e      	ldr	r1, [pc, #120]	; (800a28c <HAL_RTC_DeactivateAlarm+0x13c>)
 800a214:	400a      	ands	r2, r1
 800a216:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a218:	f7fa ff49 	bl	80050ae <HAL_GetTick>
 800a21c:	0003      	movs	r3, r0
 800a21e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a220:	e016      	b.n	800a250 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a222:	f7fa ff44 	bl	80050ae <HAL_GetTick>
 800a226:	0002      	movs	r2, r0
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	1ad2      	subs	r2, r2, r3
 800a22c:	23fa      	movs	r3, #250	; 0xfa
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	429a      	cmp	r2, r3
 800a232:	d90d      	bls.n	800a250 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	22ff      	movs	r2, #255	; 0xff
 800a23a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2221      	movs	r2, #33	; 0x21
 800a240:	2103      	movs	r1, #3
 800a242:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2220      	movs	r2, #32
 800a248:	2100      	movs	r1, #0
 800a24a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e012      	b.n	800a276 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	2202      	movs	r2, #2
 800a258:	4013      	ands	r3, r2
 800a25a:	d0e2      	beq.n	800a222 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	22ff      	movs	r2, #255	; 0xff
 800a262:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2221      	movs	r2, #33	; 0x21
 800a268:	2101      	movs	r1, #1
 800a26a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2220      	movs	r2, #32
 800a270:	2100      	movs	r1, #0
 800a272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	0018      	movs	r0, r3
 800a278:	46bd      	mov	sp, r7
 800a27a:	b004      	add	sp, #16
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	46c0      	nop			; (mov r8, r8)
 800a280:	fffffeff 	.word	0xfffffeff
 800a284:	ffffefff 	.word	0xffffefff
 800a288:	fffffdff 	.word	0xfffffdff
 800a28c:	ffffdfff 	.word	0xffffdfff

0800a290 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689a      	ldr	r2, [r3, #8]
 800a29e:	2380      	movs	r3, #128	; 0x80
 800a2a0:	015b      	lsls	r3, r3, #5
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	d014      	beq.n	800a2d0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68da      	ldr	r2, [r3, #12]
 800a2ac:	2380      	movs	r3, #128	; 0x80
 800a2ae:	005b      	lsls	r3, r3, #1
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	d00d      	beq.n	800a2d0 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	f7f9 fef5 	bl	80040a6 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	22ff      	movs	r2, #255	; 0xff
 800a2c4:	401a      	ands	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4915      	ldr	r1, [pc, #84]	; (800a320 <HAL_RTC_AlarmIRQHandler+0x90>)
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	689a      	ldr	r2, [r3, #8]
 800a2d6:	2380      	movs	r3, #128	; 0x80
 800a2d8:	019b      	lsls	r3, r3, #6
 800a2da:	4013      	ands	r3, r2
 800a2dc:	d014      	beq.n	800a308 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	2380      	movs	r3, #128	; 0x80
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	d00d      	beq.n	800a308 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f000 f910 	bl	800a514 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	22ff      	movs	r2, #255	; 0xff
 800a2fc:	401a      	ands	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4908      	ldr	r1, [pc, #32]	; (800a324 <HAL_RTC_AlarmIRQHandler+0x94>)
 800a304:	430a      	orrs	r2, r1
 800a306:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a308:	4b07      	ldr	r3, [pc, #28]	; (800a328 <HAL_RTC_AlarmIRQHandler+0x98>)
 800a30a:	2280      	movs	r2, #128	; 0x80
 800a30c:	0292      	lsls	r2, r2, #10
 800a30e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2221      	movs	r2, #33	; 0x21
 800a314:	2101      	movs	r1, #1
 800a316:	5499      	strb	r1, [r3, r2]
}
 800a318:	46c0      	nop			; (mov r8, r8)
 800a31a:	46bd      	mov	sp, r7
 800a31c:	b002      	add	sp, #8
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	fffffe7f 	.word	0xfffffe7f
 800a324:	fffffd7f 	.word	0xfffffd7f
 800a328:	40010400 	.word	0x40010400

0800a32c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	21a0      	movs	r1, #160	; 0xa0
 800a340:	438a      	bics	r2, r1
 800a342:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a344:	f7fa feb3 	bl	80050ae <HAL_GetTick>
 800a348:	0003      	movs	r3, r0
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a34c:	e00a      	b.n	800a364 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a34e:	f7fa feae 	bl	80050ae <HAL_GetTick>
 800a352:	0002      	movs	r2, r0
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	1ad2      	subs	r2, r2, r3
 800a358:	23fa      	movs	r3, #250	; 0xfa
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d901      	bls.n	800a364 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	e006      	b.n	800a372 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	2220      	movs	r2, #32
 800a36c:	4013      	ands	r3, r2
 800a36e:	d0ee      	beq.n	800a34e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	0018      	movs	r0, r3
 800a374:	46bd      	mov	sp, r7
 800a376:	b004      	add	sp, #16
 800a378:	bd80      	pop	{r7, pc}

0800a37a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	2240      	movs	r2, #64	; 0x40
 800a38a:	4013      	ands	r3, r2
 800a38c:	d11a      	bne.n	800a3c4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2201      	movs	r2, #1
 800a394:	4252      	negs	r2, r2
 800a396:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a398:	f7fa fe89 	bl	80050ae <HAL_GetTick>
 800a39c:	0003      	movs	r3, r0
 800a39e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a3a0:	e00a      	b.n	800a3b8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a3a2:	f7fa fe84 	bl	80050ae <HAL_GetTick>
 800a3a6:	0002      	movs	r2, r0
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	1ad2      	subs	r2, r2, r3
 800a3ac:	23fa      	movs	r3, #250	; 0xfa
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d901      	bls.n	800a3b8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e006      	b.n	800a3c6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	2240      	movs	r2, #64	; 0x40
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	d0ee      	beq.n	800a3a2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	b004      	add	sp, #16
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	0002      	movs	r2, r0
 800a3d6:	1dfb      	adds	r3, r7, #7
 800a3d8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a3de:	230b      	movs	r3, #11
 800a3e0:	18fb      	adds	r3, r7, r3
 800a3e2:	1dfa      	adds	r2, r7, #7
 800a3e4:	7812      	ldrb	r2, [r2, #0]
 800a3e6:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800a3e8:	e008      	b.n	800a3fc <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a3f0:	220b      	movs	r2, #11
 800a3f2:	18bb      	adds	r3, r7, r2
 800a3f4:	18ba      	adds	r2, r7, r2
 800a3f6:	7812      	ldrb	r2, [r2, #0]
 800a3f8:	3a0a      	subs	r2, #10
 800a3fa:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800a3fc:	210b      	movs	r1, #11
 800a3fe:	187b      	adds	r3, r7, r1
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b09      	cmp	r3, #9
 800a404:	d8f1      	bhi.n	800a3ea <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	011b      	lsls	r3, r3, #4
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	187b      	adds	r3, r7, r1
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	4313      	orrs	r3, r2
 800a414:	b2db      	uxtb	r3, r3
}
 800a416:	0018      	movs	r0, r3
 800a418:	46bd      	mov	sp, r7
 800a41a:	b004      	add	sp, #16
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	0002      	movs	r2, r0
 800a426:	1dfb      	adds	r3, r7, #7
 800a428:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800a42a:	1dfb      	adds	r3, r7, #7
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	091b      	lsrs	r3, r3, #4
 800a430:	b2db      	uxtb	r3, r3
 800a432:	001a      	movs	r2, r3
 800a434:	0013      	movs	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	189b      	adds	r3, r3, r2
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	b2da      	uxtb	r2, r3
 800a442:	1dfb      	adds	r3, r7, #7
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	210f      	movs	r1, #15
 800a448:	400b      	ands	r3, r1
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	18d3      	adds	r3, r2, r3
 800a44e:	b2db      	uxtb	r3, r3
}
 800a450:	0018      	movs	r0, r3
 800a452:	46bd      	mov	sp, r7
 800a454:	b004      	add	sp, #16
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	3350      	adds	r3, #80	; 0x50
 800a46a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	18d3      	adds	r3, r2, r3
 800a474:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	601a      	str	r2, [r3, #0]
}
 800a47c:	46c0      	nop			; (mov r8, r8)
 800a47e:	46bd      	mov	sp, r7
 800a480:	b006      	add	sp, #24
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3350      	adds	r3, #80	; 0x50
 800a494:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	18d3      	adds	r3, r2, r3
 800a49e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
}
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	b004      	add	sp, #16
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	5c9b      	ldrb	r3, [r3, r2]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <HAL_RTCEx_EnableBypassShadow+0x16>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	e024      	b.n	800a50c <HAL_RTCEx_EnableBypassShadow+0x60>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2220      	movs	r2, #32
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2221      	movs	r2, #33	; 0x21
 800a4ce:	2102      	movs	r1, #2
 800a4d0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	22ca      	movs	r2, #202	; 0xca
 800a4d8:	625a      	str	r2, [r3, #36]	; 0x24
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2253      	movs	r2, #83	; 0x53
 800a4e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2120      	movs	r1, #32
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	22ff      	movs	r2, #255	; 0xff
 800a4f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2221      	movs	r2, #33	; 0x21
 800a4fe:	2101      	movs	r1, #1
 800a500:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2220      	movs	r2, #32
 800a506:	2100      	movs	r1, #0
 800a508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	0018      	movs	r0, r3
 800a50e:	46bd      	mov	sp, r7
 800a510:	b002      	add	sp, #8
 800a512:	bd80      	pop	{r7, pc}

0800a514 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a51c:	46c0      	nop			; (mov r8, r8)
 800a51e:	46bd      	mov	sp, r7
 800a520:	b002      	add	sp, #8
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e083      	b.n	800a63e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d109      	bne.n	800a552 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	2382      	movs	r3, #130	; 0x82
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	429a      	cmp	r2, r3
 800a548:	d009      	beq.n	800a55e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	61da      	str	r2, [r3, #28]
 800a550:	e005      	b.n	800a55e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2251      	movs	r2, #81	; 0x51
 800a568:	5c9b      	ldrb	r3, [r3, r2]
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d107      	bne.n	800a580 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2250      	movs	r2, #80	; 0x50
 800a574:	2100      	movs	r1, #0
 800a576:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	0018      	movs	r0, r3
 800a57c:	f000 f866 	bl	800a64c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2251      	movs	r2, #81	; 0x51
 800a584:	2102      	movs	r1, #2
 800a586:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2140      	movs	r1, #64	; 0x40
 800a594:	438a      	bics	r2, r1
 800a596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	2382      	movs	r3, #130	; 0x82
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	401a      	ands	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6899      	ldr	r1, [r3, #8]
 800a5a6:	2384      	movs	r3, #132	; 0x84
 800a5a8:	021b      	lsls	r3, r3, #8
 800a5aa:	400b      	ands	r3, r1
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68d9      	ldr	r1, [r3, #12]
 800a5b2:	2380      	movs	r3, #128	; 0x80
 800a5b4:	011b      	lsls	r3, r3, #4
 800a5b6:	400b      	ands	r3, r1
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	2102      	movs	r1, #2
 800a5c0:	400b      	ands	r3, r1
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	400b      	ands	r3, r1
 800a5cc:	431a      	orrs	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6999      	ldr	r1, [r3, #24]
 800a5d2:	2380      	movs	r3, #128	; 0x80
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	400b      	ands	r3, r1
 800a5d8:	431a      	orrs	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	2138      	movs	r1, #56	; 0x38
 800a5e0:	400b      	ands	r3, r1
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a1b      	ldr	r3, [r3, #32]
 800a5e8:	2180      	movs	r1, #128	; 0x80
 800a5ea:	400b      	ands	r3, r1
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	0011      	movs	r1, r2
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5f4:	2380      	movs	r3, #128	; 0x80
 800a5f6:	019b      	lsls	r3, r3, #6
 800a5f8:	401a      	ands	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	0c1b      	lsrs	r3, r3, #16
 800a608:	2204      	movs	r2, #4
 800a60a:	4013      	ands	r3, r2
 800a60c:	0019      	movs	r1, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	2210      	movs	r2, #16
 800a614:	401a      	ands	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69da      	ldr	r2, [r3, #28]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4907      	ldr	r1, [pc, #28]	; (800a648 <HAL_SPI_Init+0x124>)
 800a62a:	400a      	ands	r2, r1
 800a62c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2251      	movs	r2, #81	; 0x51
 800a638:	2101      	movs	r1, #1
 800a63a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	0018      	movs	r0, r3
 800a640:	46bd      	mov	sp, r7
 800a642:	b002      	add	sp, #8
 800a644:	bd80      	pop	{r7, pc}
 800a646:	46c0      	nop			; (mov r8, r8)
 800a648:	fffff7ff 	.word	0xfffff7ff

0800a64c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a654:	46c0      	nop			; (mov r8, r8)
 800a656:	46bd      	mov	sp, r7
 800a658:	b002      	add	sp, #8
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08c      	sub	sp, #48	; 0x30
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	001a      	movs	r2, r3
 800a66a:	1cbb      	adds	r3, r7, #2
 800a66c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a66e:	2301      	movs	r3, #1
 800a670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a672:	232b      	movs	r3, #43	; 0x2b
 800a674:	18fb      	adds	r3, r7, r3
 800a676:	2200      	movs	r2, #0
 800a678:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2250      	movs	r2, #80	; 0x50
 800a67e:	5c9b      	ldrb	r3, [r3, r2]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d101      	bne.n	800a688 <HAL_SPI_TransmitReceive+0x2c>
 800a684:	2302      	movs	r3, #2
 800a686:	e1a0      	b.n	800a9ca <HAL_SPI_TransmitReceive+0x36e>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2250      	movs	r2, #80	; 0x50
 800a68c:	2101      	movs	r1, #1
 800a68e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a690:	f7fa fd0d 	bl	80050ae <HAL_GetTick>
 800a694:	0003      	movs	r3, r0
 800a696:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a698:	2023      	movs	r0, #35	; 0x23
 800a69a:	183b      	adds	r3, r7, r0
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	2151      	movs	r1, #81	; 0x51
 800a6a0:	5c52      	ldrb	r2, [r2, r1]
 800a6a2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a6aa:	231a      	movs	r3, #26
 800a6ac:	18fb      	adds	r3, r7, r3
 800a6ae:	1cba      	adds	r2, r7, #2
 800a6b0:	8812      	ldrh	r2, [r2, #0]
 800a6b2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a6b4:	183b      	adds	r3, r7, r0
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d011      	beq.n	800a6e0 <HAL_SPI_TransmitReceive+0x84>
 800a6bc:	69fa      	ldr	r2, [r7, #28]
 800a6be:	2382      	movs	r3, #130	; 0x82
 800a6c0:	005b      	lsls	r3, r3, #1
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d107      	bne.n	800a6d6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d103      	bne.n	800a6d6 <HAL_SPI_TransmitReceive+0x7a>
 800a6ce:	183b      	adds	r3, r7, r0
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d004      	beq.n	800a6e0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a6d6:	232b      	movs	r3, #43	; 0x2b
 800a6d8:	18fb      	adds	r3, r7, r3
 800a6da:	2202      	movs	r2, #2
 800a6dc:	701a      	strb	r2, [r3, #0]
    goto error;
 800a6de:	e169      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d006      	beq.n	800a6f4 <HAL_SPI_TransmitReceive+0x98>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <HAL_SPI_TransmitReceive+0x98>
 800a6ec:	1cbb      	adds	r3, r7, #2
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d104      	bne.n	800a6fe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a6f4:	232b      	movs	r3, #43	; 0x2b
 800a6f6:	18fb      	adds	r3, r7, r3
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	701a      	strb	r2, [r3, #0]
    goto error;
 800a6fc:	e15a      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2251      	movs	r2, #81	; 0x51
 800a702:	5c9b      	ldrb	r3, [r3, r2]
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b04      	cmp	r3, #4
 800a708:	d003      	beq.n	800a712 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2251      	movs	r2, #81	; 0x51
 800a70e:	2105      	movs	r1, #5
 800a710:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	1cba      	adds	r2, r7, #2
 800a722:	8812      	ldrh	r2, [r2, #0]
 800a724:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	1cba      	adds	r2, r7, #2
 800a72a:	8812      	ldrh	r2, [r2, #0]
 800a72c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	1cba      	adds	r2, r7, #2
 800a738:	8812      	ldrh	r2, [r2, #0]
 800a73a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	1cba      	adds	r2, r7, #2
 800a740:	8812      	ldrh	r2, [r2, #0]
 800a742:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2240      	movs	r2, #64	; 0x40
 800a758:	4013      	ands	r3, r2
 800a75a:	2b40      	cmp	r3, #64	; 0x40
 800a75c:	d007      	beq.n	800a76e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2140      	movs	r1, #64	; 0x40
 800a76a:	430a      	orrs	r2, r1
 800a76c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	68da      	ldr	r2, [r3, #12]
 800a772:	2380      	movs	r3, #128	; 0x80
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	429a      	cmp	r2, r3
 800a778:	d000      	beq.n	800a77c <HAL_SPI_TransmitReceive+0x120>
 800a77a:	e07a      	b.n	800a872 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d004      	beq.n	800a78e <HAL_SPI_TransmitReceive+0x132>
 800a784:	231a      	movs	r3, #26
 800a786:	18fb      	adds	r3, r7, r3
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d166      	bne.n	800a85c <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	881a      	ldrh	r2, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79e:	1c9a      	adds	r2, r3, #2
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7b2:	e053      	b.n	800a85c <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	4013      	ands	r3, r2
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d11b      	bne.n	800a7fa <HAL_SPI_TransmitReceive+0x19e>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d016      	beq.n	800a7fa <HAL_SPI_TransmitReceive+0x19e>
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d113      	bne.n	800a7fa <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d6:	881a      	ldrh	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e2:	1c9a      	adds	r2, r3, #2
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	2201      	movs	r2, #1
 800a802:	4013      	ands	r3, r2
 800a804:	2b01      	cmp	r3, #1
 800a806:	d119      	bne.n	800a83c <HAL_SPI_TransmitReceive+0x1e0>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d014      	beq.n	800a83c <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81c:	b292      	uxth	r2, r2
 800a81e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a824:	1c9a      	adds	r2, r3, #2
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a82e:	b29b      	uxth	r3, r3
 800a830:	3b01      	subs	r3, #1
 800a832:	b29a      	uxth	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a838:	2301      	movs	r3, #1
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a83c:	f7fa fc37 	bl	80050ae <HAL_GetTick>
 800a840:	0002      	movs	r2, r0
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a848:	429a      	cmp	r2, r3
 800a84a:	d807      	bhi.n	800a85c <HAL_SPI_TransmitReceive+0x200>
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	3301      	adds	r3, #1
 800a850:	d004      	beq.n	800a85c <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800a852:	232b      	movs	r3, #43	; 0x2b
 800a854:	18fb      	adds	r3, r7, r3
 800a856:	2203      	movs	r2, #3
 800a858:	701a      	strb	r2, [r3, #0]
        goto error;
 800a85a:	e0ab      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a860:	b29b      	uxth	r3, r3
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1a6      	bne.n	800a7b4 <HAL_SPI_TransmitReceive+0x158>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1a1      	bne.n	800a7b4 <HAL_SPI_TransmitReceive+0x158>
 800a870:	e07f      	b.n	800a972 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d005      	beq.n	800a886 <HAL_SPI_TransmitReceive+0x22a>
 800a87a:	231a      	movs	r3, #26
 800a87c:	18fb      	adds	r3, r7, r3
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d000      	beq.n	800a886 <HAL_SPI_TransmitReceive+0x22a>
 800a884:	e06b      	b.n	800a95e <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	330c      	adds	r3, #12
 800a890:	7812      	ldrb	r2, [r2, #0]
 800a892:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8ac:	e057      	b.n	800a95e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d11c      	bne.n	800a8f6 <HAL_SPI_TransmitReceive+0x29a>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d017      	beq.n	800a8f6 <HAL_SPI_TransmitReceive+0x29a>
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d114      	bne.n	800a8f6 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	330c      	adds	r3, #12
 800a8d6:	7812      	ldrb	r2, [r2, #0]
 800a8d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	4013      	ands	r3, r2
 800a900:	2b01      	cmp	r3, #1
 800a902:	d119      	bne.n	800a938 <HAL_SPI_TransmitReceive+0x2dc>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a908:	b29b      	uxth	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d014      	beq.n	800a938 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68da      	ldr	r2, [r3, #12]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	3b01      	subs	r3, #1
 800a92e:	b29a      	uxth	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a934:	2301      	movs	r3, #1
 800a936:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a938:	f7fa fbb9 	bl	80050ae <HAL_GetTick>
 800a93c:	0002      	movs	r2, r0
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a944:	429a      	cmp	r2, r3
 800a946:	d802      	bhi.n	800a94e <HAL_SPI_TransmitReceive+0x2f2>
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	3301      	adds	r3, #1
 800a94c:	d102      	bne.n	800a954 <HAL_SPI_TransmitReceive+0x2f8>
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	2b00      	cmp	r3, #0
 800a952:	d104      	bne.n	800a95e <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800a954:	232b      	movs	r3, #43	; 0x2b
 800a956:	18fb      	adds	r3, r7, r3
 800a958:	2203      	movs	r2, #3
 800a95a:	701a      	strb	r2, [r3, #0]
        goto error;
 800a95c:	e02a      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a962:	b29b      	uxth	r3, r3
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1a2      	bne.n	800a8ae <HAL_SPI_TransmitReceive+0x252>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d19d      	bne.n	800a8ae <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	0018      	movs	r0, r3
 800a97a:	f000 f8c5 	bl	800ab08 <SPI_EndRxTxTransaction>
 800a97e:	1e03      	subs	r3, r0, #0
 800a980:	d007      	beq.n	800a992 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800a982:	232b      	movs	r3, #43	; 0x2b
 800a984:	18fb      	adds	r3, r7, r3
 800a986:	2201      	movs	r2, #1
 800a988:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2220      	movs	r2, #32
 800a98e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a990:	e010      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10b      	bne.n	800a9b2 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	617b      	str	r3, [r7, #20]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	617b      	str	r3, [r7, #20]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	e000      	b.n	800a9b4 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800a9b2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2251      	movs	r2, #81	; 0x51
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2250      	movs	r2, #80	; 0x50
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a9c4:	232b      	movs	r3, #43	; 0x2b
 800a9c6:	18fb      	adds	r3, r7, r3
 800a9c8:	781b      	ldrb	r3, [r3, #0]
}
 800a9ca:	0018      	movs	r0, r3
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	b00c      	add	sp, #48	; 0x30
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2251      	movs	r2, #81	; 0x51
 800a9de:	5c9b      	ldrb	r3, [r3, r2]
 800a9e0:	b2db      	uxtb	r3, r3
}
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	b002      	add	sp, #8
 800a9e8:	bd80      	pop	{r7, pc}
	...

0800a9ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	1dfb      	adds	r3, r7, #7
 800a9fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a9fc:	f7fa fb57 	bl	80050ae <HAL_GetTick>
 800aa00:	0002      	movs	r2, r0
 800aa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa04:	1a9b      	subs	r3, r3, r2
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	18d3      	adds	r3, r2, r3
 800aa0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aa0c:	f7fa fb4f 	bl	80050ae <HAL_GetTick>
 800aa10:	0003      	movs	r3, r0
 800aa12:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aa14:	4b3a      	ldr	r3, [pc, #232]	; (800ab00 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	015b      	lsls	r3, r3, #5
 800aa1a:	0d1b      	lsrs	r3, r3, #20
 800aa1c:	69fa      	ldr	r2, [r7, #28]
 800aa1e:	4353      	muls	r3, r2
 800aa20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa22:	e058      	b.n	800aad6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	d055      	beq.n	800aad6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aa2a:	f7fa fb40 	bl	80050ae <HAL_GetTick>
 800aa2e:	0002      	movs	r2, r0
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	69fa      	ldr	r2, [r7, #28]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d902      	bls.n	800aa40 <SPI_WaitFlagStateUntilTimeout+0x54>
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d142      	bne.n	800aac6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	21e0      	movs	r1, #224	; 0xe0
 800aa4c:	438a      	bics	r2, r1
 800aa4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	2382      	movs	r3, #130	; 0x82
 800aa56:	005b      	lsls	r3, r3, #1
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d113      	bne.n	800aa84 <SPI_WaitFlagStateUntilTimeout+0x98>
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	2380      	movs	r3, #128	; 0x80
 800aa62:	021b      	lsls	r3, r3, #8
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d005      	beq.n	800aa74 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	2380      	movs	r3, #128	; 0x80
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d107      	bne.n	800aa84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2140      	movs	r1, #64	; 0x40
 800aa80:	438a      	bics	r2, r1
 800aa82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa88:	2380      	movs	r3, #128	; 0x80
 800aa8a:	019b      	lsls	r3, r3, #6
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d110      	bne.n	800aab2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	491a      	ldr	r1, [pc, #104]	; (800ab04 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800aa9c:	400a      	ands	r2, r1
 800aa9e:	601a      	str	r2, [r3, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2180      	movs	r1, #128	; 0x80
 800aaac:	0189      	lsls	r1, r1, #6
 800aaae:	430a      	orrs	r2, r1
 800aab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2251      	movs	r2, #81	; 0x51
 800aab6:	2101      	movs	r1, #1
 800aab8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2250      	movs	r2, #80	; 0x50
 800aabe:	2100      	movs	r1, #0
 800aac0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e017      	b.n	800aaf6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800aacc:	2300      	movs	r3, #0
 800aace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	4013      	ands	r3, r2
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	425a      	negs	r2, r3
 800aae6:	4153      	adcs	r3, r2
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	001a      	movs	r2, r3
 800aaec:	1dfb      	adds	r3, r7, #7
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d197      	bne.n	800aa24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	0018      	movs	r0, r3
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	b008      	add	sp, #32
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	20000070 	.word	0x20000070
 800ab04:	ffffdfff 	.word	0xffffdfff

0800ab08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af02      	add	r7, sp, #8
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ab14:	4b1d      	ldr	r3, [pc, #116]	; (800ab8c <SPI_EndRxTxTransaction+0x84>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	491d      	ldr	r1, [pc, #116]	; (800ab90 <SPI_EndRxTxTransaction+0x88>)
 800ab1a:	0018      	movs	r0, r3
 800ab1c:	f7f5 fafc 	bl	8000118 <__udivsi3>
 800ab20:	0003      	movs	r3, r0
 800ab22:	001a      	movs	r2, r3
 800ab24:	0013      	movs	r3, r2
 800ab26:	015b      	lsls	r3, r3, #5
 800ab28:	1a9b      	subs	r3, r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	189b      	adds	r3, r3, r2
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	2382      	movs	r3, #130	; 0x82
 800ab38:	005b      	lsls	r3, r3, #1
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d112      	bne.n	800ab64 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	0013      	movs	r3, r2
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2180      	movs	r1, #128	; 0x80
 800ab4c:	f7ff ff4e 	bl	800a9ec <SPI_WaitFlagStateUntilTimeout>
 800ab50:	1e03      	subs	r3, r0, #0
 800ab52:	d016      	beq.n	800ab82 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab58:	2220      	movs	r2, #32
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e00f      	b.n	800ab84 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	2280      	movs	r2, #128	; 0x80
 800ab78:	4013      	ands	r3, r2
 800ab7a:	2b80      	cmp	r3, #128	; 0x80
 800ab7c:	d0f2      	beq.n	800ab64 <SPI_EndRxTxTransaction+0x5c>
 800ab7e:	e000      	b.n	800ab82 <SPI_EndRxTxTransaction+0x7a>
        break;
 800ab80:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	0018      	movs	r0, r3
 800ab86:	46bd      	mov	sp, r7
 800ab88:	b006      	add	sp, #24
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20000070 	.word	0x20000070
 800ab90:	016e3600 	.word	0x016e3600

0800ab94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e044      	b.n	800ac30 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d107      	bne.n	800abbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2274      	movs	r2, #116	; 0x74
 800abb2:	2100      	movs	r1, #0
 800abb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	0018      	movs	r0, r3
 800abba:	f7fa fb5f 	bl	800527c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2224      	movs	r2, #36	; 0x24
 800abc2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2101      	movs	r1, #1
 800abd0:	438a      	bics	r2, r1
 800abd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	0018      	movs	r0, r3
 800abd8:	f000 fb3a 	bl	800b250 <UART_SetConfig>
 800abdc:	0003      	movs	r3, r0
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d101      	bne.n	800abe6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e024      	b.n	800ac30 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abea:	2b00      	cmp	r3, #0
 800abec:	d003      	beq.n	800abf6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	0018      	movs	r0, r3
 800abf2:	f000 fdeb 	bl	800b7cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	490d      	ldr	r1, [pc, #52]	; (800ac38 <HAL_UART_Init+0xa4>)
 800ac02:	400a      	ands	r2, r1
 800ac04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689a      	ldr	r2, [r3, #8]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	212a      	movs	r1, #42	; 0x2a
 800ac12:	438a      	bics	r2, r1
 800ac14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2101      	movs	r1, #1
 800ac22:	430a      	orrs	r2, r1
 800ac24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f000 fe83 	bl	800b934 <UART_CheckIdleState>
 800ac2e:	0003      	movs	r3, r0
}
 800ac30:	0018      	movs	r0, r3
 800ac32:	46bd      	mov	sp, r7
 800ac34:	b002      	add	sp, #8
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	ffffb7ff 	.word	0xffffb7ff

0800ac3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	1dbb      	adds	r3, r7, #6
 800ac48:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d144      	bne.n	800acdc <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d003      	beq.n	800ac60 <HAL_UART_Receive_IT+0x24>
 800ac58:	1dbb      	adds	r3, r7, #6
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e03c      	b.n	800acde <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	689a      	ldr	r2, [r3, #8]
 800ac68:	2380      	movs	r3, #128	; 0x80
 800ac6a:	015b      	lsls	r3, r3, #5
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d109      	bne.n	800ac84 <HAL_UART_Receive_IT+0x48>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d105      	bne.n	800ac84 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	d001      	beq.n	800ac84 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e02c      	b.n	800acde <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2274      	movs	r2, #116	; 0x74
 800ac88:	5c9b      	ldrb	r3, [r3, r2]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d101      	bne.n	800ac92 <HAL_UART_Receive_IT+0x56>
 800ac8e:	2302      	movs	r3, #2
 800ac90:	e025      	b.n	800acde <HAL_UART_Receive_IT+0xa2>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2274      	movs	r2, #116	; 0x74
 800ac96:	2101      	movs	r1, #1
 800ac98:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a10      	ldr	r2, [pc, #64]	; (800ace8 <HAL_UART_Receive_IT+0xac>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d00f      	beq.n	800acca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	2380      	movs	r3, #128	; 0x80
 800acb2:	041b      	lsls	r3, r3, #16
 800acb4:	4013      	ands	r3, r2
 800acb6:	d008      	beq.n	800acca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2180      	movs	r1, #128	; 0x80
 800acc4:	04c9      	lsls	r1, r1, #19
 800acc6:	430a      	orrs	r2, r1
 800acc8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800acca:	1dbb      	adds	r3, r7, #6
 800accc:	881a      	ldrh	r2, [r3, #0]
 800acce:	68b9      	ldr	r1, [r7, #8]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	0018      	movs	r0, r3
 800acd4:	f000 fef4 	bl	800bac0 <UART_Start_Receive_IT>
 800acd8:	0003      	movs	r3, r0
 800acda:	e000      	b.n	800acde <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800acdc:	2302      	movs	r3, #2
  }
}
 800acde:	0018      	movs	r0, r3
 800ace0:	46bd      	mov	sp, r7
 800ace2:	b004      	add	sp, #16
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	40004800 	.word	0x40004800

0800acec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	1dbb      	adds	r3, r7, #6
 800acf8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acfe:	2b20      	cmp	r3, #32
 800ad00:	d000      	beq.n	800ad04 <HAL_UART_Transmit_DMA+0x18>
 800ad02:	e079      	b.n	800adf8 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d003      	beq.n	800ad12 <HAL_UART_Transmit_DMA+0x26>
 800ad0a:	1dbb      	adds	r3, r7, #6
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e071      	b.n	800adfa <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	2380      	movs	r3, #128	; 0x80
 800ad1c:	015b      	lsls	r3, r3, #5
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d109      	bne.n	800ad36 <HAL_UART_Transmit_DMA+0x4a>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d105      	bne.n	800ad36 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	4013      	ands	r3, r2
 800ad30:	d001      	beq.n	800ad36 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e061      	b.n	800adfa <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2274      	movs	r2, #116	; 0x74
 800ad3a:	5c9b      	ldrb	r3, [r3, r2]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d101      	bne.n	800ad44 <HAL_UART_Transmit_DMA+0x58>
 800ad40:	2302      	movs	r3, #2
 800ad42:	e05a      	b.n	800adfa <HAL_UART_Transmit_DMA+0x10e>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2274      	movs	r2, #116	; 0x74
 800ad48:	2101      	movs	r1, #1
 800ad4a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	1dba      	adds	r2, r7, #6
 800ad56:	2150      	movs	r1, #80	; 0x50
 800ad58:	8812      	ldrh	r2, [r2, #0]
 800ad5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	1dba      	adds	r2, r7, #6
 800ad60:	2152      	movs	r1, #82	; 0x52
 800ad62:	8812      	ldrh	r2, [r2, #0]
 800ad64:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2280      	movs	r2, #128	; 0x80
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2221      	movs	r2, #33	; 0x21
 800ad72:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d02b      	beq.n	800add4 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad80:	4a20      	ldr	r2, [pc, #128]	; (800ae04 <HAL_UART_Transmit_DMA+0x118>)
 800ad82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad88:	4a1f      	ldr	r2, [pc, #124]	; (800ae08 <HAL_UART_Transmit_DMA+0x11c>)
 800ad8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad90:	4a1e      	ldr	r2, [pc, #120]	; (800ae0c <HAL_UART_Transmit_DMA+0x120>)
 800ad92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad98:	2200      	movs	r2, #0
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ada4:	0019      	movs	r1, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3328      	adds	r3, #40	; 0x28
 800adac:	001a      	movs	r2, r3
 800adae:	1dbb      	adds	r3, r7, #6
 800adb0:	881b      	ldrh	r3, [r3, #0]
 800adb2:	f7fc fae3 	bl	800737c <HAL_DMA_Start_IT>
 800adb6:	1e03      	subs	r3, r0, #0
 800adb8:	d00c      	beq.n	800add4 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2280      	movs	r2, #128	; 0x80
 800adbe:	2110      	movs	r1, #16
 800adc0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2274      	movs	r2, #116	; 0x74
 800adc6:	2100      	movs	r1, #0
 800adc8:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2220      	movs	r2, #32
 800adce:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e012      	b.n	800adfa <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2240      	movs	r2, #64	; 0x40
 800adda:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2274      	movs	r2, #116	; 0x74
 800ade0:	2100      	movs	r1, #0
 800ade2:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	689a      	ldr	r2, [r3, #8]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2180      	movs	r1, #128	; 0x80
 800adf0:	430a      	orrs	r2, r1
 800adf2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	e000      	b.n	800adfa <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800adf8:	2302      	movs	r3, #2
  }
}
 800adfa:	0018      	movs	r0, r3
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b004      	add	sp, #16
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	0800bc65 	.word	0x0800bc65
 800ae08:	0800bcb9 	.word	0x0800bcb9
 800ae0c:	0800bcd7 	.word	0x0800bcd7

0800ae10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b088      	sub	sp, #32
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	4ab5      	ldr	r2, [pc, #724]	; (800b108 <HAL_UART_IRQHandler+0x2f8>)
 800ae34:	4013      	ands	r3, r2
 800ae36:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d112      	bne.n	800ae64 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	2220      	movs	r2, #32
 800ae42:	4013      	ands	r3, r2
 800ae44:	d00e      	beq.n	800ae64 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	d00a      	beq.n	800ae64 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d100      	bne.n	800ae58 <HAL_UART_IRQHandler+0x48>
 800ae56:	e1d1      	b.n	800b1fc <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	0010      	movs	r0, r2
 800ae60:	4798      	blx	r3
      }
      return;
 800ae62:	e1cb      	b.n	800b1fc <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d100      	bne.n	800ae6c <HAL_UART_IRQHandler+0x5c>
 800ae6a:	e0d9      	b.n	800b020 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	4013      	ands	r3, r2
 800ae72:	d104      	bne.n	800ae7e <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	4aa5      	ldr	r2, [pc, #660]	; (800b10c <HAL_UART_IRQHandler+0x2fc>)
 800ae78:	4013      	ands	r3, r2
 800ae7a:	d100      	bne.n	800ae7e <HAL_UART_IRQHandler+0x6e>
 800ae7c:	e0d0      	b.n	800b020 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	2201      	movs	r2, #1
 800ae82:	4013      	ands	r3, r2
 800ae84:	d010      	beq.n	800aea8 <HAL_UART_IRQHandler+0x98>
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	2380      	movs	r3, #128	; 0x80
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	d00b      	beq.n	800aea8 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2201      	movs	r2, #1
 800ae96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2280      	movs	r2, #128	; 0x80
 800ae9c:	589b      	ldr	r3, [r3, r2]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	431a      	orrs	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2180      	movs	r1, #128	; 0x80
 800aea6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	4013      	ands	r3, r2
 800aeae:	d00f      	beq.n	800aed0 <HAL_UART_IRQHandler+0xc0>
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	d00b      	beq.n	800aed0 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2202      	movs	r2, #2
 800aebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2280      	movs	r2, #128	; 0x80
 800aec4:	589b      	ldr	r3, [r3, r2]
 800aec6:	2204      	movs	r2, #4
 800aec8:	431a      	orrs	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2180      	movs	r1, #128	; 0x80
 800aece:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	2204      	movs	r2, #4
 800aed4:	4013      	ands	r3, r2
 800aed6:	d00f      	beq.n	800aef8 <HAL_UART_IRQHandler+0xe8>
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2201      	movs	r2, #1
 800aedc:	4013      	ands	r3, r2
 800aede:	d00b      	beq.n	800aef8 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2204      	movs	r2, #4
 800aee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2280      	movs	r2, #128	; 0x80
 800aeec:	589b      	ldr	r3, [r3, r2]
 800aeee:	2202      	movs	r2, #2
 800aef0:	431a      	orrs	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2180      	movs	r1, #128	; 0x80
 800aef6:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	2208      	movs	r2, #8
 800aefc:	4013      	ands	r3, r2
 800aefe:	d013      	beq.n	800af28 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	2220      	movs	r2, #32
 800af04:	4013      	ands	r3, r2
 800af06:	d103      	bne.n	800af10 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2201      	movs	r2, #1
 800af0c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af0e:	d00b      	beq.n	800af28 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2208      	movs	r2, #8
 800af16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2280      	movs	r2, #128	; 0x80
 800af1c:	589b      	ldr	r3, [r3, r2]
 800af1e:	2208      	movs	r2, #8
 800af20:	431a      	orrs	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2180      	movs	r1, #128	; 0x80
 800af26:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af28:	69fa      	ldr	r2, [r7, #28]
 800af2a:	2380      	movs	r3, #128	; 0x80
 800af2c:	011b      	lsls	r3, r3, #4
 800af2e:	4013      	ands	r3, r2
 800af30:	d011      	beq.n	800af56 <HAL_UART_IRQHandler+0x146>
 800af32:	69ba      	ldr	r2, [r7, #24]
 800af34:	2380      	movs	r3, #128	; 0x80
 800af36:	04db      	lsls	r3, r3, #19
 800af38:	4013      	ands	r3, r2
 800af3a:	d00c      	beq.n	800af56 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2280      	movs	r2, #128	; 0x80
 800af42:	0112      	lsls	r2, r2, #4
 800af44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2280      	movs	r2, #128	; 0x80
 800af4a:	589b      	ldr	r3, [r3, r2]
 800af4c:	2220      	movs	r2, #32
 800af4e:	431a      	orrs	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2180      	movs	r1, #128	; 0x80
 800af54:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2280      	movs	r2, #128	; 0x80
 800af5a:	589b      	ldr	r3, [r3, r2]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d100      	bne.n	800af62 <HAL_UART_IRQHandler+0x152>
 800af60:	e14e      	b.n	800b200 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	2220      	movs	r2, #32
 800af66:	4013      	ands	r3, r2
 800af68:	d00c      	beq.n	800af84 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	2220      	movs	r2, #32
 800af6e:	4013      	ands	r3, r2
 800af70:	d008      	beq.n	800af84 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af76:	2b00      	cmp	r3, #0
 800af78:	d004      	beq.n	800af84 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	0010      	movs	r0, r2
 800af82:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2280      	movs	r2, #128	; 0x80
 800af88:	589b      	ldr	r3, [r3, r2]
 800af8a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	2240      	movs	r2, #64	; 0x40
 800af94:	4013      	ands	r3, r2
 800af96:	2b40      	cmp	r3, #64	; 0x40
 800af98:	d003      	beq.n	800afa2 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2228      	movs	r2, #40	; 0x28
 800af9e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afa0:	d033      	beq.n	800b00a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	0018      	movs	r0, r3
 800afa6:	f000 fe2d 	bl	800bc04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	2240      	movs	r2, #64	; 0x40
 800afb2:	4013      	ands	r3, r2
 800afb4:	2b40      	cmp	r3, #64	; 0x40
 800afb6:	d123      	bne.n	800b000 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689a      	ldr	r2, [r3, #8]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2140      	movs	r1, #64	; 0x40
 800afc4:	438a      	bics	r2, r1
 800afc6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d012      	beq.n	800aff6 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd4:	4a4e      	ldr	r2, [pc, #312]	; (800b110 <HAL_UART_IRQHandler+0x300>)
 800afd6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afdc:	0018      	movs	r0, r3
 800afde:	f7fc fa73 	bl	80074c8 <HAL_DMA_Abort_IT>
 800afe2:	1e03      	subs	r3, r0, #0
 800afe4:	d01a      	beq.n	800b01c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff0:	0018      	movs	r0, r3
 800aff2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff4:	e012      	b.n	800b01c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	0018      	movs	r0, r3
 800affa:	f000 f915 	bl	800b228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affe:	e00d      	b.n	800b01c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	0018      	movs	r0, r3
 800b004:	f000 f910 	bl	800b228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b008:	e008      	b.n	800b01c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	0018      	movs	r0, r3
 800b00e:	f000 f90b 	bl	800b228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2280      	movs	r2, #128	; 0x80
 800b016:	2100      	movs	r1, #0
 800b018:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b01a:	e0f1      	b.n	800b200 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b01c:	46c0      	nop			; (mov r8, r8)
    return;
 800b01e:	e0ef      	b.n	800b200 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b024:	2b01      	cmp	r3, #1
 800b026:	d000      	beq.n	800b02a <HAL_UART_IRQHandler+0x21a>
 800b028:	e0b5      	b.n	800b196 <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	2210      	movs	r2, #16
 800b02e:	4013      	ands	r3, r2
 800b030:	d100      	bne.n	800b034 <HAL_UART_IRQHandler+0x224>
 800b032:	e0b0      	b.n	800b196 <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	2210      	movs	r2, #16
 800b038:	4013      	ands	r3, r2
 800b03a:	d100      	bne.n	800b03e <HAL_UART_IRQHandler+0x22e>
 800b03c:	e0ab      	b.n	800b196 <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2210      	movs	r2, #16
 800b044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	2240      	movs	r2, #64	; 0x40
 800b04e:	4013      	ands	r3, r2
 800b050:	2b40      	cmp	r3, #64	; 0x40
 800b052:	d161      	bne.n	800b118 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	2108      	movs	r1, #8
 800b05e:	187b      	adds	r3, r7, r1
 800b060:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800b062:	187b      	adds	r3, r7, r1
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d100      	bne.n	800b06c <HAL_UART_IRQHandler+0x25c>
 800b06a:	e0cb      	b.n	800b204 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2258      	movs	r2, #88	; 0x58
 800b070:	5a9b      	ldrh	r3, [r3, r2]
 800b072:	187a      	adds	r2, r7, r1
 800b074:	8812      	ldrh	r2, [r2, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d300      	bcc.n	800b07c <HAL_UART_IRQHandler+0x26c>
 800b07a:	e0c3      	b.n	800b204 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	187a      	adds	r2, r7, r1
 800b080:	215a      	movs	r1, #90	; 0x5a
 800b082:	8812      	ldrh	r2, [r2, #0]
 800b084:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2220      	movs	r2, #32
 800b090:	4013      	ands	r3, r2
 800b092:	d12a      	bne.n	800b0ea <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	491d      	ldr	r1, [pc, #116]	; (800b114 <HAL_UART_IRQHandler+0x304>)
 800b0a0:	400a      	ands	r2, r1
 800b0a2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	689a      	ldr	r2, [r3, #8]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	438a      	bics	r2, r1
 800b0b2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689a      	ldr	r2, [r3, #8]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2140      	movs	r1, #64	; 0x40
 800b0c0:	438a      	bics	r2, r1
 800b0c2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2110      	movs	r1, #16
 800b0dc:	438a      	bics	r2, r1
 800b0de:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f7fc f9af 	bl	8007448 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2258      	movs	r2, #88	; 0x58
 800b0ee:	5a9a      	ldrh	r2, [r3, r2]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	215a      	movs	r1, #90	; 0x5a
 800b0f4:	5a5b      	ldrh	r3, [r3, r1]
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	0011      	movs	r1, r2
 800b100:	0018      	movs	r0, r3
 800b102:	f000 f899 	bl	800b238 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b106:	e07d      	b.n	800b204 <HAL_UART_IRQHandler+0x3f4>
 800b108:	0000080f 	.word	0x0000080f
 800b10c:	04000120 	.word	0x04000120
 800b110:	0800bd59 	.word	0x0800bd59
 800b114:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2258      	movs	r2, #88	; 0x58
 800b11c:	5a99      	ldrh	r1, [r3, r2]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	225a      	movs	r2, #90	; 0x5a
 800b122:	5a9b      	ldrh	r3, [r3, r2]
 800b124:	b29a      	uxth	r2, r3
 800b126:	200a      	movs	r0, #10
 800b128:	183b      	adds	r3, r7, r0
 800b12a:	1a8a      	subs	r2, r1, r2
 800b12c:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	225a      	movs	r2, #90	; 0x5a
 800b132:	5a9b      	ldrh	r3, [r3, r2]
 800b134:	b29b      	uxth	r3, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d100      	bne.n	800b13c <HAL_UART_IRQHandler+0x32c>
 800b13a:	e065      	b.n	800b208 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800b13c:	183b      	adds	r3, r7, r0
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d061      	beq.n	800b208 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4931      	ldr	r1, [pc, #196]	; (800b214 <HAL_UART_IRQHandler+0x404>)
 800b150:	400a      	ands	r2, r1
 800b152:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689a      	ldr	r2, [r3, #8]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2101      	movs	r1, #1
 800b160:	438a      	bics	r2, r1
 800b162:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2220      	movs	r2, #32
 800b168:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2110      	movs	r1, #16
 800b182:	438a      	bics	r2, r1
 800b184:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b186:	183b      	adds	r3, r7, r0
 800b188:	881a      	ldrh	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	0011      	movs	r1, r2
 800b18e:	0018      	movs	r0, r3
 800b190:	f000 f852 	bl	800b238 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b194:	e038      	b.n	800b208 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b196:	69fa      	ldr	r2, [r7, #28]
 800b198:	2380      	movs	r3, #128	; 0x80
 800b19a:	035b      	lsls	r3, r3, #13
 800b19c:	4013      	ands	r3, r2
 800b19e:	d00e      	beq.n	800b1be <HAL_UART_IRQHandler+0x3ae>
 800b1a0:	697a      	ldr	r2, [r7, #20]
 800b1a2:	2380      	movs	r3, #128	; 0x80
 800b1a4:	03db      	lsls	r3, r3, #15
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	d009      	beq.n	800b1be <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2280      	movs	r2, #128	; 0x80
 800b1b0:	0352      	lsls	r2, r2, #13
 800b1b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	0018      	movs	r0, r3
 800b1b8:	f000 fee8 	bl	800bf8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1bc:	e027      	b.n	800b20e <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	2280      	movs	r2, #128	; 0x80
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	d00d      	beq.n	800b1e2 <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	2280      	movs	r2, #128	; 0x80
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	d009      	beq.n	800b1e2 <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d01a      	beq.n	800b20c <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	0010      	movs	r0, r2
 800b1de:	4798      	blx	r3
    }
    return;
 800b1e0:	e014      	b.n	800b20c <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	2240      	movs	r2, #64	; 0x40
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	d011      	beq.n	800b20e <HAL_UART_IRQHandler+0x3fe>
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2240      	movs	r2, #64	; 0x40
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	d00d      	beq.n	800b20e <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f000 fdc6 	bl	800bd86 <UART_EndTransmit_IT>
    return;
 800b1fa:	e008      	b.n	800b20e <HAL_UART_IRQHandler+0x3fe>
      return;
 800b1fc:	46c0      	nop			; (mov r8, r8)
 800b1fe:	e006      	b.n	800b20e <HAL_UART_IRQHandler+0x3fe>
    return;
 800b200:	46c0      	nop			; (mov r8, r8)
 800b202:	e004      	b.n	800b20e <HAL_UART_IRQHandler+0x3fe>
      return;
 800b204:	46c0      	nop			; (mov r8, r8)
 800b206:	e002      	b.n	800b20e <HAL_UART_IRQHandler+0x3fe>
      return;
 800b208:	46c0      	nop			; (mov r8, r8)
 800b20a:	e000      	b.n	800b20e <HAL_UART_IRQHandler+0x3fe>
    return;
 800b20c:	46c0      	nop			; (mov r8, r8)
  }

}
 800b20e:	46bd      	mov	sp, r7
 800b210:	b008      	add	sp, #32
 800b212:	bd80      	pop	{r7, pc}
 800b214:	fffffedf 	.word	0xfffffedf

0800b218 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b220:	46c0      	nop			; (mov r8, r8)
 800b222:	46bd      	mov	sp, r7
 800b224:	b002      	add	sp, #8
 800b226:	bd80      	pop	{r7, pc}

0800b228 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b230:	46c0      	nop			; (mov r8, r8)
 800b232:	46bd      	mov	sp, r7
 800b234:	b002      	add	sp, #8
 800b236:	bd80      	pop	{r7, pc}

0800b238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	000a      	movs	r2, r1
 800b242:	1cbb      	adds	r3, r7, #2
 800b244:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b246:	46c0      	nop			; (mov r8, r8)
 800b248:	46bd      	mov	sp, r7
 800b24a:	b002      	add	sp, #8
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b250:	b5b0      	push	{r4, r5, r7, lr}
 800b252:	b08e      	sub	sp, #56	; 0x38
 800b254:	af00      	add	r7, sp, #0
 800b256:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b258:	231a      	movs	r3, #26
 800b25a:	2218      	movs	r2, #24
 800b25c:	4694      	mov	ip, r2
 800b25e:	44bc      	add	ip, r7
 800b260:	4463      	add	r3, ip
 800b262:	2200      	movs	r2, #0
 800b264:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	689a      	ldr	r2, [r3, #8]
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	431a      	orrs	r2, r3
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	431a      	orrs	r2, r3
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4ab0      	ldr	r2, [pc, #704]	; (800b548 <UART_SetConfig+0x2f8>)
 800b286:	4013      	ands	r3, r2
 800b288:	0019      	movs	r1, r3
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b290:	430a      	orrs	r2, r1
 800b292:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	4aac      	ldr	r2, [pc, #688]	; (800b54c <UART_SetConfig+0x2fc>)
 800b29c:	4013      	ands	r3, r2
 800b29e:	0019      	movs	r1, r3
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	68da      	ldr	r2, [r3, #12]
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4aa6      	ldr	r2, [pc, #664]	; (800b550 <UART_SetConfig+0x300>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d004      	beq.n	800b2c6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	4aa1      	ldr	r2, [pc, #644]	; (800b554 <UART_SetConfig+0x304>)
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	0019      	movs	r1, r3
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2d8:	430a      	orrs	r2, r1
 800b2da:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a9d      	ldr	r2, [pc, #628]	; (800b558 <UART_SetConfig+0x308>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d136      	bne.n	800b354 <UART_SetConfig+0x104>
 800b2e6:	4b9d      	ldr	r3, [pc, #628]	; (800b55c <UART_SetConfig+0x30c>)
 800b2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ea:	2203      	movs	r2, #3
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d020      	beq.n	800b334 <UART_SetConfig+0xe4>
 800b2f2:	d827      	bhi.n	800b344 <UART_SetConfig+0xf4>
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d00d      	beq.n	800b314 <UART_SetConfig+0xc4>
 800b2f8:	d824      	bhi.n	800b344 <UART_SetConfig+0xf4>
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <UART_SetConfig+0xb4>
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d010      	beq.n	800b324 <UART_SetConfig+0xd4>
 800b302:	e01f      	b.n	800b344 <UART_SetConfig+0xf4>
 800b304:	231b      	movs	r3, #27
 800b306:	2218      	movs	r2, #24
 800b308:	4694      	mov	ip, r2
 800b30a:	44bc      	add	ip, r7
 800b30c:	4463      	add	r3, ip
 800b30e:	2201      	movs	r2, #1
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	e0c5      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b314:	231b      	movs	r3, #27
 800b316:	2218      	movs	r2, #24
 800b318:	4694      	mov	ip, r2
 800b31a:	44bc      	add	ip, r7
 800b31c:	4463      	add	r3, ip
 800b31e:	2202      	movs	r2, #2
 800b320:	701a      	strb	r2, [r3, #0]
 800b322:	e0bd      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b324:	231b      	movs	r3, #27
 800b326:	2218      	movs	r2, #24
 800b328:	4694      	mov	ip, r2
 800b32a:	44bc      	add	ip, r7
 800b32c:	4463      	add	r3, ip
 800b32e:	2204      	movs	r2, #4
 800b330:	701a      	strb	r2, [r3, #0]
 800b332:	e0b5      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b334:	231b      	movs	r3, #27
 800b336:	2218      	movs	r2, #24
 800b338:	4694      	mov	ip, r2
 800b33a:	44bc      	add	ip, r7
 800b33c:	4463      	add	r3, ip
 800b33e:	2208      	movs	r2, #8
 800b340:	701a      	strb	r2, [r3, #0]
 800b342:	e0ad      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b344:	231b      	movs	r3, #27
 800b346:	2218      	movs	r2, #24
 800b348:	4694      	mov	ip, r2
 800b34a:	44bc      	add	ip, r7
 800b34c:	4463      	add	r3, ip
 800b34e:	2210      	movs	r2, #16
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e0a5      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a81      	ldr	r2, [pc, #516]	; (800b560 <UART_SetConfig+0x310>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d136      	bne.n	800b3cc <UART_SetConfig+0x17c>
 800b35e:	4b7f      	ldr	r3, [pc, #508]	; (800b55c <UART_SetConfig+0x30c>)
 800b360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b362:	220c      	movs	r2, #12
 800b364:	4013      	ands	r3, r2
 800b366:	2b0c      	cmp	r3, #12
 800b368:	d020      	beq.n	800b3ac <UART_SetConfig+0x15c>
 800b36a:	d827      	bhi.n	800b3bc <UART_SetConfig+0x16c>
 800b36c:	2b08      	cmp	r3, #8
 800b36e:	d00d      	beq.n	800b38c <UART_SetConfig+0x13c>
 800b370:	d824      	bhi.n	800b3bc <UART_SetConfig+0x16c>
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <UART_SetConfig+0x12c>
 800b376:	2b04      	cmp	r3, #4
 800b378:	d010      	beq.n	800b39c <UART_SetConfig+0x14c>
 800b37a:	e01f      	b.n	800b3bc <UART_SetConfig+0x16c>
 800b37c:	231b      	movs	r3, #27
 800b37e:	2218      	movs	r2, #24
 800b380:	4694      	mov	ip, r2
 800b382:	44bc      	add	ip, r7
 800b384:	4463      	add	r3, ip
 800b386:	2200      	movs	r2, #0
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	e089      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b38c:	231b      	movs	r3, #27
 800b38e:	2218      	movs	r2, #24
 800b390:	4694      	mov	ip, r2
 800b392:	44bc      	add	ip, r7
 800b394:	4463      	add	r3, ip
 800b396:	2202      	movs	r2, #2
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	e081      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b39c:	231b      	movs	r3, #27
 800b39e:	2218      	movs	r2, #24
 800b3a0:	4694      	mov	ip, r2
 800b3a2:	44bc      	add	ip, r7
 800b3a4:	4463      	add	r3, ip
 800b3a6:	2204      	movs	r2, #4
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	e079      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b3ac:	231b      	movs	r3, #27
 800b3ae:	2218      	movs	r2, #24
 800b3b0:	4694      	mov	ip, r2
 800b3b2:	44bc      	add	ip, r7
 800b3b4:	4463      	add	r3, ip
 800b3b6:	2208      	movs	r2, #8
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	e071      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b3bc:	231b      	movs	r3, #27
 800b3be:	2218      	movs	r2, #24
 800b3c0:	4694      	mov	ip, r2
 800b3c2:	44bc      	add	ip, r7
 800b3c4:	4463      	add	r3, ip
 800b3c6:	2210      	movs	r2, #16
 800b3c8:	701a      	strb	r2, [r3, #0]
 800b3ca:	e069      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a64      	ldr	r2, [pc, #400]	; (800b564 <UART_SetConfig+0x314>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d107      	bne.n	800b3e6 <UART_SetConfig+0x196>
 800b3d6:	231b      	movs	r3, #27
 800b3d8:	2218      	movs	r2, #24
 800b3da:	4694      	mov	ip, r2
 800b3dc:	44bc      	add	ip, r7
 800b3de:	4463      	add	r3, ip
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	701a      	strb	r2, [r3, #0]
 800b3e4:	e05c      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a5f      	ldr	r2, [pc, #380]	; (800b568 <UART_SetConfig+0x318>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d107      	bne.n	800b400 <UART_SetConfig+0x1b0>
 800b3f0:	231b      	movs	r3, #27
 800b3f2:	2218      	movs	r2, #24
 800b3f4:	4694      	mov	ip, r2
 800b3f6:	44bc      	add	ip, r7
 800b3f8:	4463      	add	r3, ip
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	e04f      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a52      	ldr	r2, [pc, #328]	; (800b550 <UART_SetConfig+0x300>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d143      	bne.n	800b492 <UART_SetConfig+0x242>
 800b40a:	4b54      	ldr	r3, [pc, #336]	; (800b55c <UART_SetConfig+0x30c>)
 800b40c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b40e:	23c0      	movs	r3, #192	; 0xc0
 800b410:	011b      	lsls	r3, r3, #4
 800b412:	4013      	ands	r3, r2
 800b414:	22c0      	movs	r2, #192	; 0xc0
 800b416:	0112      	lsls	r2, r2, #4
 800b418:	4293      	cmp	r3, r2
 800b41a:	d02a      	beq.n	800b472 <UART_SetConfig+0x222>
 800b41c:	22c0      	movs	r2, #192	; 0xc0
 800b41e:	0112      	lsls	r2, r2, #4
 800b420:	4293      	cmp	r3, r2
 800b422:	d82e      	bhi.n	800b482 <UART_SetConfig+0x232>
 800b424:	2280      	movs	r2, #128	; 0x80
 800b426:	0112      	lsls	r2, r2, #4
 800b428:	4293      	cmp	r3, r2
 800b42a:	d012      	beq.n	800b452 <UART_SetConfig+0x202>
 800b42c:	2280      	movs	r2, #128	; 0x80
 800b42e:	0112      	lsls	r2, r2, #4
 800b430:	4293      	cmp	r3, r2
 800b432:	d826      	bhi.n	800b482 <UART_SetConfig+0x232>
 800b434:	2b00      	cmp	r3, #0
 800b436:	d004      	beq.n	800b442 <UART_SetConfig+0x1f2>
 800b438:	2280      	movs	r2, #128	; 0x80
 800b43a:	00d2      	lsls	r2, r2, #3
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d010      	beq.n	800b462 <UART_SetConfig+0x212>
 800b440:	e01f      	b.n	800b482 <UART_SetConfig+0x232>
 800b442:	231b      	movs	r3, #27
 800b444:	2218      	movs	r2, #24
 800b446:	4694      	mov	ip, r2
 800b448:	44bc      	add	ip, r7
 800b44a:	4463      	add	r3, ip
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]
 800b450:	e026      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b452:	231b      	movs	r3, #27
 800b454:	2218      	movs	r2, #24
 800b456:	4694      	mov	ip, r2
 800b458:	44bc      	add	ip, r7
 800b45a:	4463      	add	r3, ip
 800b45c:	2202      	movs	r2, #2
 800b45e:	701a      	strb	r2, [r3, #0]
 800b460:	e01e      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b462:	231b      	movs	r3, #27
 800b464:	2218      	movs	r2, #24
 800b466:	4694      	mov	ip, r2
 800b468:	44bc      	add	ip, r7
 800b46a:	4463      	add	r3, ip
 800b46c:	2204      	movs	r2, #4
 800b46e:	701a      	strb	r2, [r3, #0]
 800b470:	e016      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b472:	231b      	movs	r3, #27
 800b474:	2218      	movs	r2, #24
 800b476:	4694      	mov	ip, r2
 800b478:	44bc      	add	ip, r7
 800b47a:	4463      	add	r3, ip
 800b47c:	2208      	movs	r2, #8
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	e00e      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b482:	231b      	movs	r3, #27
 800b484:	2218      	movs	r2, #24
 800b486:	4694      	mov	ip, r2
 800b488:	44bc      	add	ip, r7
 800b48a:	4463      	add	r3, ip
 800b48c:	2210      	movs	r2, #16
 800b48e:	701a      	strb	r2, [r3, #0]
 800b490:	e006      	b.n	800b4a0 <UART_SetConfig+0x250>
 800b492:	231b      	movs	r3, #27
 800b494:	2218      	movs	r2, #24
 800b496:	4694      	mov	ip, r2
 800b498:	44bc      	add	ip, r7
 800b49a:	4463      	add	r3, ip
 800b49c:	2210      	movs	r2, #16
 800b49e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a2a      	ldr	r2, [pc, #168]	; (800b550 <UART_SetConfig+0x300>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d000      	beq.n	800b4ac <UART_SetConfig+0x25c>
 800b4aa:	e09e      	b.n	800b5ea <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4ac:	231b      	movs	r3, #27
 800b4ae:	2218      	movs	r2, #24
 800b4b0:	4694      	mov	ip, r2
 800b4b2:	44bc      	add	ip, r7
 800b4b4:	4463      	add	r3, ip
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b08      	cmp	r3, #8
 800b4ba:	d01d      	beq.n	800b4f8 <UART_SetConfig+0x2a8>
 800b4bc:	dc20      	bgt.n	800b500 <UART_SetConfig+0x2b0>
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d015      	beq.n	800b4ee <UART_SetConfig+0x29e>
 800b4c2:	dc1d      	bgt.n	800b500 <UART_SetConfig+0x2b0>
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <UART_SetConfig+0x27e>
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d005      	beq.n	800b4d8 <UART_SetConfig+0x288>
 800b4cc:	e018      	b.n	800b500 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4ce:	f7fe f8b7 	bl	8009640 <HAL_RCC_GetPCLK1Freq>
 800b4d2:	0003      	movs	r3, r0
 800b4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4d6:	e01d      	b.n	800b514 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4d8:	4b20      	ldr	r3, [pc, #128]	; (800b55c <UART_SetConfig+0x30c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2210      	movs	r2, #16
 800b4de:	4013      	ands	r3, r2
 800b4e0:	d002      	beq.n	800b4e8 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b4e2:	4b22      	ldr	r3, [pc, #136]	; (800b56c <UART_SetConfig+0x31c>)
 800b4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4e6:	e015      	b.n	800b514 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800b4e8:	4b21      	ldr	r3, [pc, #132]	; (800b570 <UART_SetConfig+0x320>)
 800b4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ec:	e012      	b.n	800b514 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4ee:	f7fd fff7 	bl	80094e0 <HAL_RCC_GetSysClockFreq>
 800b4f2:	0003      	movs	r3, r0
 800b4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4f6:	e00d      	b.n	800b514 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4f8:	2380      	movs	r3, #128	; 0x80
 800b4fa:	021b      	lsls	r3, r3, #8
 800b4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4fe:	e009      	b.n	800b514 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800b500:	2300      	movs	r3, #0
 800b502:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b504:	231a      	movs	r3, #26
 800b506:	2218      	movs	r2, #24
 800b508:	4694      	mov	ip, r2
 800b50a:	44bc      	add	ip, r7
 800b50c:	4463      	add	r3, ip
 800b50e:	2201      	movs	r2, #1
 800b510:	701a      	strb	r2, [r3, #0]
        break;
 800b512:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	2b00      	cmp	r3, #0
 800b518:	d100      	bne.n	800b51c <UART_SetConfig+0x2cc>
 800b51a:	e13c      	b.n	800b796 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	0013      	movs	r3, r2
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	189b      	adds	r3, r3, r2
 800b526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b528:	429a      	cmp	r2, r3
 800b52a:	d305      	bcc.n	800b538 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b534:	429a      	cmp	r2, r3
 800b536:	d91d      	bls.n	800b574 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800b538:	231a      	movs	r3, #26
 800b53a:	2218      	movs	r2, #24
 800b53c:	4694      	mov	ip, r2
 800b53e:	44bc      	add	ip, r7
 800b540:	4463      	add	r3, ip
 800b542:	2201      	movs	r2, #1
 800b544:	701a      	strb	r2, [r3, #0]
 800b546:	e126      	b.n	800b796 <UART_SetConfig+0x546>
 800b548:	efff69f3 	.word	0xefff69f3
 800b54c:	ffffcfff 	.word	0xffffcfff
 800b550:	40004800 	.word	0x40004800
 800b554:	fffff4ff 	.word	0xfffff4ff
 800b558:	40013800 	.word	0x40013800
 800b55c:	40021000 	.word	0x40021000
 800b560:	40004400 	.word	0x40004400
 800b564:	40004c00 	.word	0x40004c00
 800b568:	40005000 	.word	0x40005000
 800b56c:	003d0900 	.word	0x003d0900
 800b570:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b576:	613b      	str	r3, [r7, #16]
 800b578:	2300      	movs	r3, #0
 800b57a:	617b      	str	r3, [r7, #20]
 800b57c:	6939      	ldr	r1, [r7, #16]
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	000b      	movs	r3, r1
 800b582:	0e1b      	lsrs	r3, r3, #24
 800b584:	0010      	movs	r0, r2
 800b586:	0205      	lsls	r5, r0, #8
 800b588:	431d      	orrs	r5, r3
 800b58a:	000b      	movs	r3, r1
 800b58c:	021c      	lsls	r4, r3, #8
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	085b      	lsrs	r3, r3, #1
 800b594:	60bb      	str	r3, [r7, #8]
 800b596:	2300      	movs	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	68b8      	ldr	r0, [r7, #8]
 800b59c:	68f9      	ldr	r1, [r7, #12]
 800b59e:	1900      	adds	r0, r0, r4
 800b5a0:	4169      	adcs	r1, r5
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	603b      	str	r3, [r7, #0]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	607b      	str	r3, [r7, #4]
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f7f4 ffc4 	bl	800053c <__aeabi_uldivmod>
 800b5b4:	0002      	movs	r2, r0
 800b5b6:	000b      	movs	r3, r1
 800b5b8:	0013      	movs	r3, r2
 800b5ba:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5be:	23c0      	movs	r3, #192	; 0xc0
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d309      	bcc.n	800b5da <UART_SetConfig+0x38a>
 800b5c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5c8:	2380      	movs	r3, #128	; 0x80
 800b5ca:	035b      	lsls	r3, r3, #13
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d204      	bcs.n	800b5da <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5d6:	60da      	str	r2, [r3, #12]
 800b5d8:	e0dd      	b.n	800b796 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800b5da:	231a      	movs	r3, #26
 800b5dc:	2218      	movs	r2, #24
 800b5de:	4694      	mov	ip, r2
 800b5e0:	44bc      	add	ip, r7
 800b5e2:	4463      	add	r3, ip
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	701a      	strb	r2, [r3, #0]
 800b5e8:	e0d5      	b.n	800b796 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	69da      	ldr	r2, [r3, #28]
 800b5ee:	2380      	movs	r3, #128	; 0x80
 800b5f0:	021b      	lsls	r3, r3, #8
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d000      	beq.n	800b5f8 <UART_SetConfig+0x3a8>
 800b5f6:	e074      	b.n	800b6e2 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800b5f8:	231b      	movs	r3, #27
 800b5fa:	2218      	movs	r2, #24
 800b5fc:	4694      	mov	ip, r2
 800b5fe:	44bc      	add	ip, r7
 800b600:	4463      	add	r3, ip
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	2b08      	cmp	r3, #8
 800b606:	d822      	bhi.n	800b64e <UART_SetConfig+0x3fe>
 800b608:	009a      	lsls	r2, r3, #2
 800b60a:	4b6b      	ldr	r3, [pc, #428]	; (800b7b8 <UART_SetConfig+0x568>)
 800b60c:	18d3      	adds	r3, r2, r3
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b612:	f7fe f815 	bl	8009640 <HAL_RCC_GetPCLK1Freq>
 800b616:	0003      	movs	r3, r0
 800b618:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b61a:	e022      	b.n	800b662 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b61c:	f7fe f826 	bl	800966c <HAL_RCC_GetPCLK2Freq>
 800b620:	0003      	movs	r3, r0
 800b622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b624:	e01d      	b.n	800b662 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b626:	4b65      	ldr	r3, [pc, #404]	; (800b7bc <UART_SetConfig+0x56c>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2210      	movs	r2, #16
 800b62c:	4013      	ands	r3, r2
 800b62e:	d002      	beq.n	800b636 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b630:	4b63      	ldr	r3, [pc, #396]	; (800b7c0 <UART_SetConfig+0x570>)
 800b632:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b634:	e015      	b.n	800b662 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800b636:	4b63      	ldr	r3, [pc, #396]	; (800b7c4 <UART_SetConfig+0x574>)
 800b638:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b63a:	e012      	b.n	800b662 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b63c:	f7fd ff50 	bl	80094e0 <HAL_RCC_GetSysClockFreq>
 800b640:	0003      	movs	r3, r0
 800b642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b644:	e00d      	b.n	800b662 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b646:	2380      	movs	r3, #128	; 0x80
 800b648:	021b      	lsls	r3, r3, #8
 800b64a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b64c:	e009      	b.n	800b662 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800b64e:	2300      	movs	r3, #0
 800b650:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b652:	231a      	movs	r3, #26
 800b654:	2218      	movs	r2, #24
 800b656:	4694      	mov	ip, r2
 800b658:	44bc      	add	ip, r7
 800b65a:	4463      	add	r3, ip
 800b65c:	2201      	movs	r2, #1
 800b65e:	701a      	strb	r2, [r3, #0]
        break;
 800b660:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b664:	2b00      	cmp	r3, #0
 800b666:	d100      	bne.n	800b66a <UART_SetConfig+0x41a>
 800b668:	e095      	b.n	800b796 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	005a      	lsls	r2, r3, #1
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	085b      	lsrs	r3, r3, #1
 800b674:	18d2      	adds	r2, r2, r3
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	0019      	movs	r1, r3
 800b67c:	0010      	movs	r0, r2
 800b67e:	f7f4 fd4b 	bl	8000118 <__udivsi3>
 800b682:	0003      	movs	r3, r0
 800b684:	b29b      	uxth	r3, r3
 800b686:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	2b0f      	cmp	r3, #15
 800b68c:	d921      	bls.n	800b6d2 <UART_SetConfig+0x482>
 800b68e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b690:	2380      	movs	r3, #128	; 0x80
 800b692:	025b      	lsls	r3, r3, #9
 800b694:	429a      	cmp	r2, r3
 800b696:	d21c      	bcs.n	800b6d2 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	200e      	movs	r0, #14
 800b69e:	2418      	movs	r4, #24
 800b6a0:	193b      	adds	r3, r7, r4
 800b6a2:	181b      	adds	r3, r3, r0
 800b6a4:	210f      	movs	r1, #15
 800b6a6:	438a      	bics	r2, r1
 800b6a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	085b      	lsrs	r3, r3, #1
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	2207      	movs	r2, #7
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	b299      	uxth	r1, r3
 800b6b6:	193b      	adds	r3, r7, r4
 800b6b8:	181b      	adds	r3, r3, r0
 800b6ba:	193a      	adds	r2, r7, r4
 800b6bc:	1812      	adds	r2, r2, r0
 800b6be:	8812      	ldrh	r2, [r2, #0]
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	193a      	adds	r2, r7, r4
 800b6ca:	1812      	adds	r2, r2, r0
 800b6cc:	8812      	ldrh	r2, [r2, #0]
 800b6ce:	60da      	str	r2, [r3, #12]
 800b6d0:	e061      	b.n	800b796 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b6d2:	231a      	movs	r3, #26
 800b6d4:	2218      	movs	r2, #24
 800b6d6:	4694      	mov	ip, r2
 800b6d8:	44bc      	add	ip, r7
 800b6da:	4463      	add	r3, ip
 800b6dc:	2201      	movs	r2, #1
 800b6de:	701a      	strb	r2, [r3, #0]
 800b6e0:	e059      	b.n	800b796 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6e2:	231b      	movs	r3, #27
 800b6e4:	2218      	movs	r2, #24
 800b6e6:	4694      	mov	ip, r2
 800b6e8:	44bc      	add	ip, r7
 800b6ea:	4463      	add	r3, ip
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2b08      	cmp	r3, #8
 800b6f0:	d822      	bhi.n	800b738 <UART_SetConfig+0x4e8>
 800b6f2:	009a      	lsls	r2, r3, #2
 800b6f4:	4b34      	ldr	r3, [pc, #208]	; (800b7c8 <UART_SetConfig+0x578>)
 800b6f6:	18d3      	adds	r3, r2, r3
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6fc:	f7fd ffa0 	bl	8009640 <HAL_RCC_GetPCLK1Freq>
 800b700:	0003      	movs	r3, r0
 800b702:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b704:	e022      	b.n	800b74c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b706:	f7fd ffb1 	bl	800966c <HAL_RCC_GetPCLK2Freq>
 800b70a:	0003      	movs	r3, r0
 800b70c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b70e:	e01d      	b.n	800b74c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b710:	4b2a      	ldr	r3, [pc, #168]	; (800b7bc <UART_SetConfig+0x56c>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2210      	movs	r2, #16
 800b716:	4013      	ands	r3, r2
 800b718:	d002      	beq.n	800b720 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b71a:	4b29      	ldr	r3, [pc, #164]	; (800b7c0 <UART_SetConfig+0x570>)
 800b71c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b71e:	e015      	b.n	800b74c <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800b720:	4b28      	ldr	r3, [pc, #160]	; (800b7c4 <UART_SetConfig+0x574>)
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b724:	e012      	b.n	800b74c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b726:	f7fd fedb 	bl	80094e0 <HAL_RCC_GetSysClockFreq>
 800b72a:	0003      	movs	r3, r0
 800b72c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b72e:	e00d      	b.n	800b74c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b730:	2380      	movs	r3, #128	; 0x80
 800b732:	021b      	lsls	r3, r3, #8
 800b734:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b736:	e009      	b.n	800b74c <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800b738:	2300      	movs	r3, #0
 800b73a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b73c:	231a      	movs	r3, #26
 800b73e:	2218      	movs	r2, #24
 800b740:	4694      	mov	ip, r2
 800b742:	44bc      	add	ip, r7
 800b744:	4463      	add	r3, ip
 800b746:	2201      	movs	r2, #1
 800b748:	701a      	strb	r2, [r3, #0]
        break;
 800b74a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d021      	beq.n	800b796 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	085a      	lsrs	r2, r3, #1
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	18d2      	adds	r2, r2, r3
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	0019      	movs	r1, r3
 800b762:	0010      	movs	r0, r2
 800b764:	f7f4 fcd8 	bl	8000118 <__udivsi3>
 800b768:	0003      	movs	r3, r0
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b770:	2b0f      	cmp	r3, #15
 800b772:	d909      	bls.n	800b788 <UART_SetConfig+0x538>
 800b774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b776:	2380      	movs	r3, #128	; 0x80
 800b778:	025b      	lsls	r3, r3, #9
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d204      	bcs.n	800b788 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b784:	60da      	str	r2, [r3, #12]
 800b786:	e006      	b.n	800b796 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b788:	231a      	movs	r3, #26
 800b78a:	2218      	movs	r2, #24
 800b78c:	4694      	mov	ip, r2
 800b78e:	44bc      	add	ip, r7
 800b790:	4463      	add	r3, ip
 800b792:	2201      	movs	r2, #1
 800b794:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	2200      	movs	r2, #0
 800b79a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b7a2:	231a      	movs	r3, #26
 800b7a4:	2218      	movs	r2, #24
 800b7a6:	4694      	mov	ip, r2
 800b7a8:	44bc      	add	ip, r7
 800b7aa:	4463      	add	r3, ip
 800b7ac:	781b      	ldrb	r3, [r3, #0]
}
 800b7ae:	0018      	movs	r0, r3
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	b00e      	add	sp, #56	; 0x38
 800b7b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b7b6:	46c0      	nop			; (mov r8, r8)
 800b7b8:	0801e540 	.word	0x0801e540
 800b7bc:	40021000 	.word	0x40021000
 800b7c0:	003d0900 	.word	0x003d0900
 800b7c4:	00f42400 	.word	0x00f42400
 800b7c8:	0801e564 	.word	0x0801e564

0800b7cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d8:	2201      	movs	r2, #1
 800b7da:	4013      	ands	r3, r2
 800b7dc:	d00b      	beq.n	800b7f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	4a4a      	ldr	r2, [pc, #296]	; (800b910 <UART_AdvFeatureConfig+0x144>)
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	0019      	movs	r1, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	430a      	orrs	r2, r1
 800b7f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	d00b      	beq.n	800b818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	4a43      	ldr	r2, [pc, #268]	; (800b914 <UART_AdvFeatureConfig+0x148>)
 800b808:	4013      	ands	r3, r2
 800b80a:	0019      	movs	r1, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	430a      	orrs	r2, r1
 800b816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	2204      	movs	r2, #4
 800b81e:	4013      	ands	r3, r2
 800b820:	d00b      	beq.n	800b83a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	4a3b      	ldr	r2, [pc, #236]	; (800b918 <UART_AdvFeatureConfig+0x14c>)
 800b82a:	4013      	ands	r3, r2
 800b82c:	0019      	movs	r1, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	430a      	orrs	r2, r1
 800b838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	2208      	movs	r2, #8
 800b840:	4013      	ands	r3, r2
 800b842:	d00b      	beq.n	800b85c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	4a34      	ldr	r2, [pc, #208]	; (800b91c <UART_AdvFeatureConfig+0x150>)
 800b84c:	4013      	ands	r3, r2
 800b84e:	0019      	movs	r1, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	430a      	orrs	r2, r1
 800b85a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b860:	2210      	movs	r2, #16
 800b862:	4013      	ands	r3, r2
 800b864:	d00b      	beq.n	800b87e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	4a2c      	ldr	r2, [pc, #176]	; (800b920 <UART_AdvFeatureConfig+0x154>)
 800b86e:	4013      	ands	r3, r2
 800b870:	0019      	movs	r1, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	430a      	orrs	r2, r1
 800b87c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	2220      	movs	r2, #32
 800b884:	4013      	ands	r3, r2
 800b886:	d00b      	beq.n	800b8a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	4a25      	ldr	r2, [pc, #148]	; (800b924 <UART_AdvFeatureConfig+0x158>)
 800b890:	4013      	ands	r3, r2
 800b892:	0019      	movs	r1, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	430a      	orrs	r2, r1
 800b89e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	2240      	movs	r2, #64	; 0x40
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	d01d      	beq.n	800b8e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	4a1d      	ldr	r2, [pc, #116]	; (800b928 <UART_AdvFeatureConfig+0x15c>)
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	0019      	movs	r1, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8c6:	2380      	movs	r3, #128	; 0x80
 800b8c8:	035b      	lsls	r3, r3, #13
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d10b      	bne.n	800b8e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	4a15      	ldr	r2, [pc, #84]	; (800b92c <UART_AdvFeatureConfig+0x160>)
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	0019      	movs	r1, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	2280      	movs	r2, #128	; 0x80
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	d00b      	beq.n	800b908 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	4a0e      	ldr	r2, [pc, #56]	; (800b930 <UART_AdvFeatureConfig+0x164>)
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	0019      	movs	r1, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	605a      	str	r2, [r3, #4]
  }
}
 800b908:	46c0      	nop			; (mov r8, r8)
 800b90a:	46bd      	mov	sp, r7
 800b90c:	b002      	add	sp, #8
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	fffdffff 	.word	0xfffdffff
 800b914:	fffeffff 	.word	0xfffeffff
 800b918:	fffbffff 	.word	0xfffbffff
 800b91c:	ffff7fff 	.word	0xffff7fff
 800b920:	ffffefff 	.word	0xffffefff
 800b924:	ffffdfff 	.word	0xffffdfff
 800b928:	ffefffff 	.word	0xffefffff
 800b92c:	ff9fffff 	.word	0xff9fffff
 800b930:	fff7ffff 	.word	0xfff7ffff

0800b934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b086      	sub	sp, #24
 800b938:	af02      	add	r7, sp, #8
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2280      	movs	r2, #128	; 0x80
 800b940:	2100      	movs	r1, #0
 800b942:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b944:	f7f9 fbb3 	bl	80050ae <HAL_GetTick>
 800b948:	0003      	movs	r3, r0
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2208      	movs	r2, #8
 800b954:	4013      	ands	r3, r2
 800b956:	2b08      	cmp	r3, #8
 800b958:	d10c      	bne.n	800b974 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2280      	movs	r2, #128	; 0x80
 800b95e:	0391      	lsls	r1, r2, #14
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4a17      	ldr	r2, [pc, #92]	; (800b9c0 <UART_CheckIdleState+0x8c>)
 800b964:	9200      	str	r2, [sp, #0]
 800b966:	2200      	movs	r2, #0
 800b968:	f000 f82c 	bl	800b9c4 <UART_WaitOnFlagUntilTimeout>
 800b96c:	1e03      	subs	r3, r0, #0
 800b96e:	d001      	beq.n	800b974 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e021      	b.n	800b9b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2204      	movs	r2, #4
 800b97c:	4013      	ands	r3, r2
 800b97e:	2b04      	cmp	r3, #4
 800b980:	d10c      	bne.n	800b99c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2280      	movs	r2, #128	; 0x80
 800b986:	03d1      	lsls	r1, r2, #15
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	4a0d      	ldr	r2, [pc, #52]	; (800b9c0 <UART_CheckIdleState+0x8c>)
 800b98c:	9200      	str	r2, [sp, #0]
 800b98e:	2200      	movs	r2, #0
 800b990:	f000 f818 	bl	800b9c4 <UART_WaitOnFlagUntilTimeout>
 800b994:	1e03      	subs	r3, r0, #0
 800b996:	d001      	beq.n	800b99c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b998:	2303      	movs	r3, #3
 800b99a:	e00d      	b.n	800b9b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2220      	movs	r2, #32
 800b9a0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2220      	movs	r2, #32
 800b9a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2274      	movs	r2, #116	; 0x74
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	0018      	movs	r0, r3
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	b004      	add	sp, #16
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	01ffffff 	.word	0x01ffffff

0800b9c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	1dfb      	adds	r3, r7, #7
 800b9d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9d4:	e05e      	b.n	800ba94 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	d05b      	beq.n	800ba94 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9dc:	f7f9 fb67 	bl	80050ae <HAL_GetTick>
 800b9e0:	0002      	movs	r2, r0
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	69ba      	ldr	r2, [r7, #24]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d302      	bcc.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d11b      	bne.n	800ba2a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	492f      	ldr	r1, [pc, #188]	; (800babc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800b9fe:	400a      	ands	r2, r1
 800ba00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	689a      	ldr	r2, [r3, #8]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	438a      	bics	r2, r1
 800ba10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2220      	movs	r2, #32
 800ba16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2274      	movs	r2, #116	; 0x74
 800ba22:	2100      	movs	r1, #0
 800ba24:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e044      	b.n	800bab4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2204      	movs	r2, #4
 800ba32:	4013      	ands	r3, r2
 800ba34:	d02e      	beq.n	800ba94 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	69da      	ldr	r2, [r3, #28]
 800ba3c:	2380      	movs	r3, #128	; 0x80
 800ba3e:	011b      	lsls	r3, r3, #4
 800ba40:	401a      	ands	r2, r3
 800ba42:	2380      	movs	r3, #128	; 0x80
 800ba44:	011b      	lsls	r3, r3, #4
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d124      	bne.n	800ba94 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2280      	movs	r2, #128	; 0x80
 800ba50:	0112      	lsls	r2, r2, #4
 800ba52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4917      	ldr	r1, [pc, #92]	; (800babc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800ba60:	400a      	ands	r2, r1
 800ba62:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	689a      	ldr	r2, [r3, #8]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2101      	movs	r1, #1
 800ba70:	438a      	bics	r2, r1
 800ba72:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2220      	movs	r2, #32
 800ba78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2280      	movs	r2, #128	; 0x80
 800ba84:	2120      	movs	r1, #32
 800ba86:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2274      	movs	r2, #116	; 0x74
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e00f      	b.n	800bab4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	69db      	ldr	r3, [r3, #28]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	425a      	negs	r2, r3
 800baa4:	4153      	adcs	r3, r2
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	001a      	movs	r2, r3
 800baaa:	1dfb      	adds	r3, r7, #7
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d091      	beq.n	800b9d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	0018      	movs	r0, r3
 800bab6:	46bd      	mov	sp, r7
 800bab8:	b004      	add	sp, #16
 800baba:	bd80      	pop	{r7, pc}
 800babc:	fffffe5f 	.word	0xfffffe5f

0800bac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	1dbb      	adds	r3, r7, #6
 800bacc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	1dba      	adds	r2, r7, #6
 800bad8:	2158      	movs	r1, #88	; 0x58
 800bada:	8812      	ldrh	r2, [r2, #0]
 800badc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	1dba      	adds	r2, r7, #6
 800bae2:	215a      	movs	r1, #90	; 0x5a
 800bae4:	8812      	ldrh	r2, [r2, #0]
 800bae6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	689a      	ldr	r2, [r3, #8]
 800baf2:	2380      	movs	r3, #128	; 0x80
 800baf4:	015b      	lsls	r3, r3, #5
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d10d      	bne.n	800bb16 <UART_Start_Receive_IT+0x56>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d104      	bne.n	800bb0c <UART_Start_Receive_IT+0x4c>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	225c      	movs	r2, #92	; 0x5c
 800bb06:	4932      	ldr	r1, [pc, #200]	; (800bbd0 <UART_Start_Receive_IT+0x110>)
 800bb08:	5299      	strh	r1, [r3, r2]
 800bb0a:	e02e      	b.n	800bb6a <UART_Start_Receive_IT+0xaa>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	225c      	movs	r2, #92	; 0x5c
 800bb10:	21ff      	movs	r1, #255	; 0xff
 800bb12:	5299      	strh	r1, [r3, r2]
 800bb14:	e029      	b.n	800bb6a <UART_Start_Receive_IT+0xaa>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10d      	bne.n	800bb3a <UART_Start_Receive_IT+0x7a>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d104      	bne.n	800bb30 <UART_Start_Receive_IT+0x70>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	225c      	movs	r2, #92	; 0x5c
 800bb2a:	21ff      	movs	r1, #255	; 0xff
 800bb2c:	5299      	strh	r1, [r3, r2]
 800bb2e:	e01c      	b.n	800bb6a <UART_Start_Receive_IT+0xaa>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	225c      	movs	r2, #92	; 0x5c
 800bb34:	217f      	movs	r1, #127	; 0x7f
 800bb36:	5299      	strh	r1, [r3, r2]
 800bb38:	e017      	b.n	800bb6a <UART_Start_Receive_IT+0xaa>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689a      	ldr	r2, [r3, #8]
 800bb3e:	2380      	movs	r3, #128	; 0x80
 800bb40:	055b      	lsls	r3, r3, #21
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d10d      	bne.n	800bb62 <UART_Start_Receive_IT+0xa2>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d104      	bne.n	800bb58 <UART_Start_Receive_IT+0x98>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	225c      	movs	r2, #92	; 0x5c
 800bb52:	217f      	movs	r1, #127	; 0x7f
 800bb54:	5299      	strh	r1, [r3, r2]
 800bb56:	e008      	b.n	800bb6a <UART_Start_Receive_IT+0xaa>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	225c      	movs	r2, #92	; 0x5c
 800bb5c:	213f      	movs	r1, #63	; 0x3f
 800bb5e:	5299      	strh	r1, [r3, r2]
 800bb60:	e003      	b.n	800bb6a <UART_Start_Receive_IT+0xaa>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	225c      	movs	r2, #92	; 0x5c
 800bb66:	2100      	movs	r1, #0
 800bb68:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2280      	movs	r2, #128	; 0x80
 800bb6e:	2100      	movs	r1, #0
 800bb70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2222      	movs	r2, #34	; 0x22
 800bb76:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	689a      	ldr	r2, [r3, #8]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2101      	movs	r1, #1
 800bb84:	430a      	orrs	r2, r1
 800bb86:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	689a      	ldr	r2, [r3, #8]
 800bb8c:	2380      	movs	r3, #128	; 0x80
 800bb8e:	015b      	lsls	r3, r3, #5
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d107      	bne.n	800bba4 <UART_Start_Receive_IT+0xe4>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d103      	bne.n	800bba4 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	4a0d      	ldr	r2, [pc, #52]	; (800bbd4 <UART_Start_Receive_IT+0x114>)
 800bba0:	665a      	str	r2, [r3, #100]	; 0x64
 800bba2:	e002      	b.n	800bbaa <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4a0c      	ldr	r2, [pc, #48]	; (800bbd8 <UART_Start_Receive_IT+0x118>)
 800bba8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2274      	movs	r2, #116	; 0x74
 800bbae:	2100      	movs	r1, #0
 800bbb0:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2190      	movs	r1, #144	; 0x90
 800bbbe:	0049      	lsls	r1, r1, #1
 800bbc0:	430a      	orrs	r2, r1
 800bbc2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	0018      	movs	r0, r3
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	b004      	add	sp, #16
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	46c0      	nop			; (mov r8, r8)
 800bbd0:	000001ff 	.word	0x000001ff
 800bbd4:	0800bea5 	.word	0x0800bea5
 800bbd8:	0800bdbd 	.word	0x0800bdbd

0800bbdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	21c0      	movs	r1, #192	; 0xc0
 800bbf0:	438a      	bics	r2, r1
 800bbf2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	679a      	str	r2, [r3, #120]	; 0x78
}
 800bbfa:	46c0      	nop			; (mov r8, r8)
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	b002      	add	sp, #8
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4912      	ldr	r1, [pc, #72]	; (800bc60 <UART_EndRxTransfer+0x5c>)
 800bc18:	400a      	ands	r2, r1
 800bc1a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689a      	ldr	r2, [r3, #8]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2101      	movs	r1, #1
 800bc28:	438a      	bics	r2, r1
 800bc2a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d107      	bne.n	800bc44 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2110      	movs	r1, #16
 800bc40:	438a      	bics	r2, r1
 800bc42:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2220      	movs	r2, #32
 800bc48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	b002      	add	sp, #8
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	fffffedf 	.word	0xfffffedf

0800bc64 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc70:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2220      	movs	r2, #32
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	d114      	bne.n	800bca8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2252      	movs	r2, #82	; 0x52
 800bc82:	2100      	movs	r1, #0
 800bc84:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	689a      	ldr	r2, [r3, #8]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2180      	movs	r1, #128	; 0x80
 800bc92:	438a      	bics	r2, r1
 800bc94:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2140      	movs	r1, #64	; 0x40
 800bca2:	430a      	orrs	r2, r1
 800bca4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bca6:	e003      	b.n	800bcb0 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	0018      	movs	r0, r3
 800bcac:	f7f9 fc6a 	bl	8005584 <HAL_UART_TxCpltCallback>
}
 800bcb0:	46c0      	nop			; (mov r8, r8)
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	b004      	add	sp, #16
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	0018      	movs	r0, r3
 800bcca:	f7ff faa5 	bl	800b218 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcce:	46c0      	nop			; (mov r8, r8)
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	b004      	add	sp, #16
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b086      	sub	sp, #24
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bce8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	2280      	movs	r2, #128	; 0x80
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	2b80      	cmp	r3, #128	; 0x80
 800bcfc:	d10a      	bne.n	800bd14 <UART_DMAError+0x3e>
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	2b21      	cmp	r3, #33	; 0x21
 800bd02:	d107      	bne.n	800bd14 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	2252      	movs	r2, #82	; 0x52
 800bd08:	2100      	movs	r1, #0
 800bd0a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	0018      	movs	r0, r3
 800bd10:	f7ff ff64 	bl	800bbdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	2240      	movs	r2, #64	; 0x40
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	2b40      	cmp	r3, #64	; 0x40
 800bd20:	d10a      	bne.n	800bd38 <UART_DMAError+0x62>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b22      	cmp	r3, #34	; 0x22
 800bd26:	d107      	bne.n	800bd38 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	225a      	movs	r2, #90	; 0x5a
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	0018      	movs	r0, r3
 800bd34:	f7ff ff66 	bl	800bc04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	2280      	movs	r2, #128	; 0x80
 800bd3c:	589b      	ldr	r3, [r3, r2]
 800bd3e:	2210      	movs	r2, #16
 800bd40:	431a      	orrs	r2, r3
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2180      	movs	r1, #128	; 0x80
 800bd46:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	0018      	movs	r0, r3
 800bd4c:	f7ff fa6c 	bl	800b228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd50:	46c0      	nop			; (mov r8, r8)
 800bd52:	46bd      	mov	sp, r7
 800bd54:	b006      	add	sp, #24
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	225a      	movs	r2, #90	; 0x5a
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2252      	movs	r2, #82	; 0x52
 800bd72:	2100      	movs	r1, #0
 800bd74:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	0018      	movs	r0, r3
 800bd7a:	f7ff fa55 	bl	800b228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd7e:	46c0      	nop			; (mov r8, r8)
 800bd80:	46bd      	mov	sp, r7
 800bd82:	b004      	add	sp, #16
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2140      	movs	r1, #64	; 0x40
 800bd9a:	438a      	bics	r2, r1
 800bd9c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2220      	movs	r2, #32
 800bda2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	0018      	movs	r0, r3
 800bdae:	f7f9 fbe9 	bl	8005584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdb2:	46c0      	nop			; (mov r8, r8)
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	b002      	add	sp, #8
 800bdb8:	bd80      	pop	{r7, pc}
	...

0800bdbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bdc4:	200e      	movs	r0, #14
 800bdc6:	183b      	adds	r3, r7, r0
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	215c      	movs	r1, #92	; 0x5c
 800bdcc:	5a52      	ldrh	r2, [r2, r1]
 800bdce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdd4:	2b22      	cmp	r3, #34	; 0x22
 800bdd6:	d157      	bne.n	800be88 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdde:	210c      	movs	r1, #12
 800bde0:	187b      	adds	r3, r7, r1
 800bde2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bde4:	187b      	adds	r3, r7, r1
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	183b      	adds	r3, r7, r0
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	b2d9      	uxtb	r1, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf4:	400a      	ands	r2, r1
 800bdf6:	b2d2      	uxtb	r2, r2
 800bdf8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdfe:	1c5a      	adds	r2, r3, #1
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	225a      	movs	r2, #90	; 0x5a
 800be08:	5a9b      	ldrh	r3, [r3, r2]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	3b01      	subs	r3, #1
 800be0e:	b299      	uxth	r1, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	225a      	movs	r2, #90	; 0x5a
 800be14:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	225a      	movs	r2, #90	; 0x5a
 800be1a:	5a9b      	ldrh	r3, [r3, r2]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d13a      	bne.n	800be98 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	491c      	ldr	r1, [pc, #112]	; (800bea0 <UART_RxISR_8BIT+0xe4>)
 800be2e:	400a      	ands	r2, r1
 800be30:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689a      	ldr	r2, [r3, #8]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2101      	movs	r1, #1
 800be3e:	438a      	bics	r2, r1
 800be40:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2220      	movs	r2, #32
 800be46:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be52:	2b01      	cmp	r3, #1
 800be54:	d110      	bne.n	800be78 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2110      	movs	r1, #16
 800be62:	438a      	bics	r2, r1
 800be64:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2258      	movs	r2, #88	; 0x58
 800be6a:	5a9a      	ldrh	r2, [r3, r2]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	0011      	movs	r1, r2
 800be70:	0018      	movs	r0, r3
 800be72:	f7ff f9e1 	bl	800b238 <HAL_UARTEx_RxEventCallback>
 800be76:	e003      	b.n	800be80 <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	0018      	movs	r0, r3
 800be7c:	f7f9 fb90 	bl	80055a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be86:	e007      	b.n	800be98 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	699a      	ldr	r2, [r3, #24]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2108      	movs	r1, #8
 800be94:	430a      	orrs	r2, r1
 800be96:	619a      	str	r2, [r3, #24]
}
 800be98:	46c0      	nop			; (mov r8, r8)
 800be9a:	46bd      	mov	sp, r7
 800be9c:	b004      	add	sp, #16
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	fffffedf 	.word	0xfffffedf

0800bea4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800beac:	200e      	movs	r0, #14
 800beae:	183b      	adds	r3, r7, r0
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	215c      	movs	r1, #92	; 0x5c
 800beb4:	5a52      	ldrh	r2, [r2, r1]
 800beb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bebc:	2b22      	cmp	r3, #34	; 0x22
 800bebe:	d157      	bne.n	800bf70 <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bec6:	210c      	movs	r1, #12
 800bec8:	187b      	adds	r3, r7, r1
 800beca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800bed2:	187b      	adds	r3, r7, r1
 800bed4:	183a      	adds	r2, r7, r0
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	8812      	ldrh	r2, [r2, #0]
 800beda:	4013      	ands	r3, r2
 800bedc:	b29a      	uxth	r2, r3
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee6:	1c9a      	adds	r2, r3, #2
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	225a      	movs	r2, #90	; 0x5a
 800bef0:	5a9b      	ldrh	r3, [r3, r2]
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	3b01      	subs	r3, #1
 800bef6:	b299      	uxth	r1, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	225a      	movs	r2, #90	; 0x5a
 800befc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	225a      	movs	r2, #90	; 0x5a
 800bf02:	5a9b      	ldrh	r3, [r3, r2]
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d13a      	bne.n	800bf80 <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	491c      	ldr	r1, [pc, #112]	; (800bf88 <UART_RxISR_16BIT+0xe4>)
 800bf16:	400a      	ands	r2, r1
 800bf18:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	689a      	ldr	r2, [r3, #8]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2101      	movs	r1, #1
 800bf26:	438a      	bics	r2, r1
 800bf28:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2220      	movs	r2, #32
 800bf2e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d110      	bne.n	800bf60 <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2110      	movs	r1, #16
 800bf4a:	438a      	bics	r2, r1
 800bf4c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2258      	movs	r2, #88	; 0x58
 800bf52:	5a9a      	ldrh	r2, [r3, r2]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	0011      	movs	r1, r2
 800bf58:	0018      	movs	r0, r3
 800bf5a:	f7ff f96d 	bl	800b238 <HAL_UARTEx_RxEventCallback>
 800bf5e:	e003      	b.n	800bf68 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	0018      	movs	r0, r3
 800bf64:	f7f9 fb1c 	bl	80055a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf6e:	e007      	b.n	800bf80 <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	699a      	ldr	r2, [r3, #24]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2108      	movs	r1, #8
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	619a      	str	r2, [r3, #24]
}
 800bf80:	46c0      	nop			; (mov r8, r8)
 800bf82:	46bd      	mov	sp, r7
 800bf84:	b004      	add	sp, #16
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	fffffedf 	.word	0xfffffedf

0800bf8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf94:	46c0      	nop			; (mov r8, r8)
 800bf96:	46bd      	mov	sp, r7
 800bf98:	b002      	add	sp, #8
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af02      	add	r7, sp, #8
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	1d3b      	adds	r3, r7, #4
 800bfa6:	6019      	str	r1, [r3, #0]
 800bfa8:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfaa:	2317      	movs	r3, #23
 800bfac:	18fb      	adds	r3, r7, r3
 800bfae:	2200      	movs	r2, #0
 800bfb0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2274      	movs	r2, #116	; 0x74
 800bfb6:	5c9b      	ldrb	r3, [r3, r2]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d101      	bne.n	800bfc0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	e04a      	b.n	800c056 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2274      	movs	r2, #116	; 0x74
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2224      	movs	r2, #36	; 0x24
 800bfcc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2101      	movs	r1, #1
 800bfda:	438a      	bics	r2, r1
 800bfdc:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	4a1e      	ldr	r2, [pc, #120]	; (800c060 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800bfe6:	4013      	ands	r3, r2
 800bfe8:	0019      	movs	r1, r3
 800bfea:	1d3b      	adds	r3, r7, #4
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	430a      	orrs	r2, r1
 800bff4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800bff6:	1d3b      	adds	r3, r7, #4
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d105      	bne.n	800c00a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800bffe:	1d3b      	adds	r3, r7, #4
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	6819      	ldr	r1, [r3, #0]
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	f000 f84f 	bl	800c0a8 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2101      	movs	r1, #1
 800c016:	430a      	orrs	r2, r1
 800c018:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c01a:	f7f9 f848 	bl	80050ae <HAL_GetTick>
 800c01e:	0003      	movs	r3, r0
 800c020:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2280      	movs	r2, #128	; 0x80
 800c026:	03d1      	lsls	r1, r2, #15
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	4a0e      	ldr	r2, [pc, #56]	; (800c064 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800c02c:	9200      	str	r2, [sp, #0]
 800c02e:	2200      	movs	r2, #0
 800c030:	f7ff fcc8 	bl	800b9c4 <UART_WaitOnFlagUntilTimeout>
 800c034:	1e03      	subs	r3, r0, #0
 800c036:	d004      	beq.n	800c042 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800c038:	2317      	movs	r3, #23
 800c03a:	18fb      	adds	r3, r7, r3
 800c03c:	2203      	movs	r2, #3
 800c03e:	701a      	strb	r2, [r3, #0]
 800c040:	e002      	b.n	800c048 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2220      	movs	r2, #32
 800c046:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2274      	movs	r2, #116	; 0x74
 800c04c:	2100      	movs	r1, #0
 800c04e:	5499      	strb	r1, [r3, r2]

  return status;
 800c050:	2317      	movs	r3, #23
 800c052:	18fb      	adds	r3, r7, r3
 800c054:	781b      	ldrb	r3, [r3, #0]
}
 800c056:	0018      	movs	r0, r3
 800c058:	46bd      	mov	sp, r7
 800c05a:	b006      	add	sp, #24
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	ffcfffff 	.word	0xffcfffff
 800c064:	01ffffff 	.word	0x01ffffff

0800c068 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2274      	movs	r2, #116	; 0x74
 800c074:	5c9b      	ldrb	r3, [r3, r2]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d101      	bne.n	800c07e <HAL_UARTEx_EnableStopMode+0x16>
 800c07a:	2302      	movs	r3, #2
 800c07c:	e010      	b.n	800c0a0 <HAL_UARTEx_EnableStopMode+0x38>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2274      	movs	r2, #116	; 0x74
 800c082:	2101      	movs	r1, #1
 800c084:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2102      	movs	r1, #2
 800c092:	430a      	orrs	r2, r1
 800c094:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2274      	movs	r2, #116	; 0x74
 800c09a:	2100      	movs	r1, #0
 800c09c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	0018      	movs	r0, r3
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	b002      	add	sp, #8
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	1d3b      	adds	r3, r7, #4
 800c0b2:	6019      	str	r1, [r3, #0]
 800c0b4:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	2210      	movs	r2, #16
 800c0be:	4393      	bics	r3, r2
 800c0c0:	001a      	movs	r2, r3
 800c0c2:	1d3b      	adds	r3, r7, #4
 800c0c4:	889b      	ldrh	r3, [r3, #4]
 800c0c6:	0019      	movs	r1, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	430a      	orrs	r2, r1
 800c0ce:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	021b      	lsls	r3, r3, #8
 800c0d8:	0a19      	lsrs	r1, r3, #8
 800c0da:	1d3b      	adds	r3, r7, #4
 800c0dc:	799b      	ldrb	r3, [r3, #6]
 800c0de:	061a      	lsls	r2, r3, #24
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	430a      	orrs	r2, r1
 800c0e6:	605a      	str	r2, [r3, #4]
}
 800c0e8:	46c0      	nop			; (mov r8, r8)
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	b004      	add	sp, #16
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	33f1      	adds	r3, #241	; 0xf1
 800c0fc:	2210      	movs	r2, #16
 800c0fe:	2100      	movs	r1, #0
 800c100:	0018      	movs	r0, r3
 800c102:	f00d f951 	bl	80193a8 <memset1>
    ctx->M_n = 0;
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	238a      	movs	r3, #138	; 0x8a
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	2100      	movs	r1, #0
 800c10e:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	22f0      	movs	r2, #240	; 0xf0
 800c114:	2100      	movs	r1, #0
 800c116:	0018      	movs	r0, r3
 800c118:	f00d f946 	bl	80193a8 <memset1>
}
 800c11c:	46c0      	nop			; (mov r8, r8)
 800c11e:	46bd      	mov	sp, r7
 800c120:	b002      	add	sp, #8
 800c122:	bd80      	pop	{r7, pc}

0800c124 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2110      	movs	r1, #16
 800c134:	0018      	movs	r0, r3
 800c136:	f000 feaf 	bl	800ce98 <lorawan_aes_set_key>
}
 800c13a:	46c0      	nop			; (mov r8, r8)
 800c13c:	46bd      	mov	sp, r7
 800c13e:	b002      	add	sp, #8
 800c140:	bd80      	pop	{r7, pc}

0800c142 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c142:	b590      	push	{r4, r7, lr}
 800c144:	b08d      	sub	sp, #52	; 0x34
 800c146:	af00      	add	r7, sp, #0
 800c148:	60f8      	str	r0, [r7, #12]
 800c14a:	60b9      	str	r1, [r7, #8]
 800c14c:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	238a      	movs	r3, #138	; 0x8a
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	58d3      	ldr	r3, [r2, r3]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d100      	bne.n	800c15c <AES_CMAC_Update+0x1a>
 800c15a:	e0a4      	b.n	800c2a6 <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	238a      	movs	r3, #138	; 0x8a
 800c160:	005b      	lsls	r3, r3, #1
 800c162:	58d3      	ldr	r3, [r2, r3]
 800c164:	2210      	movs	r2, #16
 800c166:	1ad2      	subs	r2, r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d900      	bls.n	800c170 <AES_CMAC_Update+0x2e>
 800c16e:	0013      	movs	r3, r2
 800c170:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	1c9a      	adds	r2, r3, #2
 800c176:	32ff      	adds	r2, #255	; 0xff
 800c178:	68f9      	ldr	r1, [r7, #12]
 800c17a:	238a      	movs	r3, #138	; 0x8a
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	58cb      	ldr	r3, [r1, r3]
 800c180:	18d3      	adds	r3, r2, r3
 800c182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c184:	b292      	uxth	r2, r2
 800c186:	68b9      	ldr	r1, [r7, #8]
 800c188:	0018      	movs	r0, r3
 800c18a:	f00d f8cf 	bl	801932c <memcpy1>
        ctx->M_n += mlen;
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	238a      	movs	r3, #138	; 0x8a
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	58d2      	ldr	r2, [r2, r3]
 800c196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c198:	18d1      	adds	r1, r2, r3
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	238a      	movs	r3, #138	; 0x8a
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	238a      	movs	r3, #138	; 0x8a
 800c1a6:	005b      	lsls	r3, r3, #1
 800c1a8:	58d3      	ldr	r3, [r2, r3]
 800c1aa:	2b0f      	cmp	r3, #15
 800c1ac:	d800      	bhi.n	800c1b0 <AES_CMAC_Update+0x6e>
 800c1ae:	e08c      	b.n	800c2ca <AES_CMAC_Update+0x188>
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d100      	bne.n	800c1ba <AES_CMAC_Update+0x78>
 800c1b8:	e087      	b.n	800c2ca <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1be:	e018      	b.n	800c1f2 <AES_CMAC_Update+0xb0>
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	21f1      	movs	r1, #241	; 0xf1
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	18d3      	adds	r3, r2, r3
 800c1c8:	185b      	adds	r3, r3, r1
 800c1ca:	781a      	ldrb	r2, [r3, #0]
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	33ff      	adds	r3, #255	; 0xff
 800c1d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1d4:	1841      	adds	r1, r0, r1
 800c1d6:	18cb      	adds	r3, r1, r3
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	4053      	eors	r3, r2
 800c1dc:	b2d8      	uxtb	r0, r3
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	21f1      	movs	r1, #241	; 0xf1
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	18d3      	adds	r3, r2, r3
 800c1e6:	185b      	adds	r3, r3, r1
 800c1e8:	1c02      	adds	r2, r0, #0
 800c1ea:	701a      	strb	r2, [r3, #0]
 800c1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f4:	2b0f      	cmp	r3, #15
 800c1f6:	dde3      	ble.n	800c1c0 <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	33f1      	adds	r3, #241	; 0xf1
 800c1fc:	0019      	movs	r1, r3
 800c1fe:	2414      	movs	r4, #20
 800c200:	193b      	adds	r3, r7, r4
 800c202:	2210      	movs	r2, #16
 800c204:	0018      	movs	r0, r3
 800c206:	f00d f891 	bl	801932c <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	1939      	adds	r1, r7, r4
 800c20e:	193b      	adds	r3, r7, r4
 800c210:	0018      	movs	r0, r3
 800c212:	f000 ff7d 	bl	800d110 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	33f1      	adds	r3, #241	; 0xf1
 800c21a:	1939      	adds	r1, r7, r4
 800c21c:	2210      	movs	r2, #16
 800c21e:	0018      	movs	r0, r3
 800c220:	f00d f884 	bl	801932c <memcpy1>

        data += mlen;
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	18d3      	adds	r3, r2, r3
 800c22a:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c234:	e037      	b.n	800c2a6 <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800c236:	2300      	movs	r3, #0
 800c238:	62bb      	str	r3, [r7, #40]	; 0x28
 800c23a:	e015      	b.n	800c268 <AES_CMAC_Update+0x126>
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	21f1      	movs	r1, #241	; 0xf1
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	18d3      	adds	r3, r2, r3
 800c244:	185b      	adds	r3, r3, r1
 800c246:	781a      	ldrb	r2, [r3, #0]
 800c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24a:	68b9      	ldr	r1, [r7, #8]
 800c24c:	18cb      	adds	r3, r1, r3
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	4053      	eors	r3, r2
 800c252:	b2d8      	uxtb	r0, r3
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	21f1      	movs	r1, #241	; 0xf1
 800c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25a:	18d3      	adds	r3, r2, r3
 800c25c:	185b      	adds	r3, r3, r1
 800c25e:	1c02      	adds	r2, r0, #0
 800c260:	701a      	strb	r2, [r3, #0]
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	3301      	adds	r3, #1
 800c266:	62bb      	str	r3, [r7, #40]	; 0x28
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	2b0f      	cmp	r3, #15
 800c26c:	dde6      	ble.n	800c23c <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	33f1      	adds	r3, #241	; 0xf1
 800c272:	0019      	movs	r1, r3
 800c274:	2414      	movs	r4, #20
 800c276:	193b      	adds	r3, r7, r4
 800c278:	2210      	movs	r2, #16
 800c27a:	0018      	movs	r0, r3
 800c27c:	f00d f856 	bl	801932c <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	1939      	adds	r1, r7, r4
 800c284:	193b      	adds	r3, r7, r4
 800c286:	0018      	movs	r0, r3
 800c288:	f000 ff42 	bl	800d110 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	33f1      	adds	r3, #241	; 0xf1
 800c290:	1939      	adds	r1, r7, r4
 800c292:	2210      	movs	r2, #16
 800c294:	0018      	movs	r0, r3
 800c296:	f00d f849 	bl	801932c <memcpy1>

        data += 16;
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	3310      	adds	r3, #16
 800c29e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	3b10      	subs	r3, #16
 800c2a4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b10      	cmp	r3, #16
 800c2aa:	d8c4      	bhi.n	800c236 <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3302      	adds	r3, #2
 800c2b0:	33ff      	adds	r3, #255	; 0xff
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	b292      	uxth	r2, r2
 800c2b6:	68b9      	ldr	r1, [r7, #8]
 800c2b8:	0018      	movs	r0, r3
 800c2ba:	f00d f837 	bl	801932c <memcpy1>
    ctx->M_n = len;
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	238a      	movs	r3, #138	; 0x8a
 800c2c2:	005b      	lsls	r3, r3, #1
 800c2c4:	6879      	ldr	r1, [r7, #4]
 800c2c6:	50d1      	str	r1, [r2, r3]
 800c2c8:	e000      	b.n	800c2cc <AES_CMAC_Update+0x18a>
            return;
 800c2ca:	46c0      	nop			; (mov r8, r8)
}
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	b00d      	add	sp, #52	; 0x34
 800c2d0:	bd90      	pop	{r4, r7, pc}

0800c2d2 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c2d2:	b590      	push	{r4, r7, lr}
 800c2d4:	b093      	sub	sp, #76	; 0x4c
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c2dc:	241c      	movs	r4, #28
 800c2de:	193b      	adds	r3, r7, r4
 800c2e0:	2210      	movs	r2, #16
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	0018      	movs	r0, r3
 800c2e6:	f00d f85f 	bl	80193a8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	1939      	adds	r1, r7, r4
 800c2ee:	193b      	adds	r3, r7, r4
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	f000 ff0d 	bl	800d110 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c2f6:	193b      	adds	r3, r7, r4
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	b25b      	sxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	da2e      	bge.n	800c35e <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800c300:	2300      	movs	r3, #0
 800c302:	647b      	str	r3, [r7, #68]	; 0x44
 800c304:	e018      	b.n	800c338 <AES_CMAC_Final+0x66>
 800c306:	201c      	movs	r0, #28
 800c308:	183a      	adds	r2, r7, r0
 800c30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c30c:	18d3      	adds	r3, r2, r3
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	b25a      	sxtb	r2, r3
 800c314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c316:	3301      	adds	r3, #1
 800c318:	1839      	adds	r1, r7, r0
 800c31a:	5ccb      	ldrb	r3, [r1, r3]
 800c31c:	09db      	lsrs	r3, r3, #7
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	b25b      	sxtb	r3, r3
 800c322:	4313      	orrs	r3, r2
 800c324:	b25b      	sxtb	r3, r3
 800c326:	b2d9      	uxtb	r1, r3
 800c328:	183a      	adds	r2, r7, r0
 800c32a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c32c:	18d3      	adds	r3, r2, r3
 800c32e:	1c0a      	adds	r2, r1, #0
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c334:	3301      	adds	r3, #1
 800c336:	647b      	str	r3, [r7, #68]	; 0x44
 800c338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c33a:	2b0e      	cmp	r3, #14
 800c33c:	dde3      	ble.n	800c306 <AES_CMAC_Final+0x34>
 800c33e:	211c      	movs	r1, #28
 800c340:	187b      	adds	r3, r7, r1
 800c342:	7bdb      	ldrb	r3, [r3, #15]
 800c344:	18db      	adds	r3, r3, r3
 800c346:	b2da      	uxtb	r2, r3
 800c348:	187b      	adds	r3, r7, r1
 800c34a:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800c34c:	187b      	adds	r3, r7, r1
 800c34e:	7bdb      	ldrb	r3, [r3, #15]
 800c350:	2279      	movs	r2, #121	; 0x79
 800c352:	4252      	negs	r2, r2
 800c354:	4053      	eors	r3, r2
 800c356:	b2da      	uxtb	r2, r3
 800c358:	187b      	adds	r3, r7, r1
 800c35a:	73da      	strb	r2, [r3, #15]
 800c35c:	e025      	b.n	800c3aa <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800c35e:	2300      	movs	r3, #0
 800c360:	643b      	str	r3, [r7, #64]	; 0x40
 800c362:	e018      	b.n	800c396 <AES_CMAC_Final+0xc4>
 800c364:	201c      	movs	r0, #28
 800c366:	183a      	adds	r2, r7, r0
 800c368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c36a:	18d3      	adds	r3, r2, r3
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	b25a      	sxtb	r2, r3
 800c372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c374:	3301      	adds	r3, #1
 800c376:	1839      	adds	r1, r7, r0
 800c378:	5ccb      	ldrb	r3, [r1, r3]
 800c37a:	09db      	lsrs	r3, r3, #7
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	b25b      	sxtb	r3, r3
 800c380:	4313      	orrs	r3, r2
 800c382:	b25b      	sxtb	r3, r3
 800c384:	b2d9      	uxtb	r1, r3
 800c386:	183a      	adds	r2, r7, r0
 800c388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c38a:	18d3      	adds	r3, r2, r3
 800c38c:	1c0a      	adds	r2, r1, #0
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c392:	3301      	adds	r3, #1
 800c394:	643b      	str	r3, [r7, #64]	; 0x40
 800c396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c398:	2b0e      	cmp	r3, #14
 800c39a:	dde3      	ble.n	800c364 <AES_CMAC_Final+0x92>
 800c39c:	211c      	movs	r1, #28
 800c39e:	187b      	adds	r3, r7, r1
 800c3a0:	7bdb      	ldrb	r3, [r3, #15]
 800c3a2:	18db      	adds	r3, r3, r3
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	187b      	adds	r3, r7, r1
 800c3a8:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	238a      	movs	r3, #138	; 0x8a
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	58d3      	ldr	r3, [r2, r3]
 800c3b2:	2b10      	cmp	r3, #16
 800c3b4:	d11f      	bne.n	800c3f6 <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ba:	e018      	b.n	800c3ee <AES_CMAC_Final+0x11c>
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	2302      	movs	r3, #2
 800c3c0:	33ff      	adds	r3, #255	; 0xff
 800c3c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3c4:	188a      	adds	r2, r1, r2
 800c3c6:	18d3      	adds	r3, r2, r3
 800c3c8:	781a      	ldrb	r2, [r3, #0]
 800c3ca:	231c      	movs	r3, #28
 800c3cc:	18f9      	adds	r1, r7, r3
 800c3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d0:	18cb      	adds	r3, r1, r3
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	4053      	eors	r3, r2
 800c3d6:	b2d8      	uxtb	r0, r3
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	2302      	movs	r3, #2
 800c3dc:	33ff      	adds	r3, #255	; 0xff
 800c3de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3e0:	188a      	adds	r2, r1, r2
 800c3e2:	18d3      	adds	r3, r2, r3
 800c3e4:	1c02      	adds	r2, r0, #0
 800c3e6:	701a      	strb	r2, [r3, #0]
 800c3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f0:	2b0f      	cmp	r3, #15
 800c3f2:	dde3      	ble.n	800c3bc <AES_CMAC_Final+0xea>
 800c3f4:	e09f      	b.n	800c536 <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c3f6:	231c      	movs	r3, #28
 800c3f8:	18fb      	adds	r3, r7, r3
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	b25b      	sxtb	r3, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	da2e      	bge.n	800c460 <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800c402:	2300      	movs	r3, #0
 800c404:	63bb      	str	r3, [r7, #56]	; 0x38
 800c406:	e018      	b.n	800c43a <AES_CMAC_Final+0x168>
 800c408:	201c      	movs	r0, #28
 800c40a:	183a      	adds	r2, r7, r0
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	18d3      	adds	r3, r2, r3
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	b25a      	sxtb	r2, r3
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	3301      	adds	r3, #1
 800c41a:	1839      	adds	r1, r7, r0
 800c41c:	5ccb      	ldrb	r3, [r1, r3]
 800c41e:	09db      	lsrs	r3, r3, #7
 800c420:	b2db      	uxtb	r3, r3
 800c422:	b25b      	sxtb	r3, r3
 800c424:	4313      	orrs	r3, r2
 800c426:	b25b      	sxtb	r3, r3
 800c428:	b2d9      	uxtb	r1, r3
 800c42a:	183a      	adds	r2, r7, r0
 800c42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42e:	18d3      	adds	r3, r2, r3
 800c430:	1c0a      	adds	r2, r1, #0
 800c432:	701a      	strb	r2, [r3, #0]
 800c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c436:	3301      	adds	r3, #1
 800c438:	63bb      	str	r3, [r7, #56]	; 0x38
 800c43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43c:	2b0e      	cmp	r3, #14
 800c43e:	dde3      	ble.n	800c408 <AES_CMAC_Final+0x136>
 800c440:	211c      	movs	r1, #28
 800c442:	187b      	adds	r3, r7, r1
 800c444:	7bdb      	ldrb	r3, [r3, #15]
 800c446:	18db      	adds	r3, r3, r3
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	187b      	adds	r3, r7, r1
 800c44c:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800c44e:	187b      	adds	r3, r7, r1
 800c450:	7bdb      	ldrb	r3, [r3, #15]
 800c452:	2279      	movs	r2, #121	; 0x79
 800c454:	4252      	negs	r2, r2
 800c456:	4053      	eors	r3, r2
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	187b      	adds	r3, r7, r1
 800c45c:	73da      	strb	r2, [r3, #15]
 800c45e:	e025      	b.n	800c4ac <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800c460:	2300      	movs	r3, #0
 800c462:	637b      	str	r3, [r7, #52]	; 0x34
 800c464:	e018      	b.n	800c498 <AES_CMAC_Final+0x1c6>
 800c466:	201c      	movs	r0, #28
 800c468:	183a      	adds	r2, r7, r0
 800c46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46c:	18d3      	adds	r3, r2, r3
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	b25a      	sxtb	r2, r3
 800c474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c476:	3301      	adds	r3, #1
 800c478:	1839      	adds	r1, r7, r0
 800c47a:	5ccb      	ldrb	r3, [r1, r3]
 800c47c:	09db      	lsrs	r3, r3, #7
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	b25b      	sxtb	r3, r3
 800c482:	4313      	orrs	r3, r2
 800c484:	b25b      	sxtb	r3, r3
 800c486:	b2d9      	uxtb	r1, r3
 800c488:	183a      	adds	r2, r7, r0
 800c48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48c:	18d3      	adds	r3, r2, r3
 800c48e:	1c0a      	adds	r2, r1, #0
 800c490:	701a      	strb	r2, [r3, #0]
 800c492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c494:	3301      	adds	r3, #1
 800c496:	637b      	str	r3, [r7, #52]	; 0x34
 800c498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49a:	2b0e      	cmp	r3, #14
 800c49c:	dde3      	ble.n	800c466 <AES_CMAC_Final+0x194>
 800c49e:	211c      	movs	r1, #28
 800c4a0:	187b      	adds	r3, r7, r1
 800c4a2:	7bdb      	ldrb	r3, [r3, #15]
 800c4a4:	18db      	adds	r3, r3, r3
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	187b      	adds	r3, r7, r1
 800c4aa:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	238a      	movs	r3, #138	; 0x8a
 800c4b0:	005b      	lsls	r3, r3, #1
 800c4b2:	58d2      	ldr	r2, [r2, r3]
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	33ff      	adds	r3, #255	; 0xff
 800c4ba:	188a      	adds	r2, r1, r2
 800c4bc:	18d3      	adds	r3, r2, r3
 800c4be:	2280      	movs	r2, #128	; 0x80
 800c4c0:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c4c2:	e00a      	b.n	800c4da <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	238a      	movs	r3, #138	; 0x8a
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	58d2      	ldr	r2, [r2, r3]
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	2302      	movs	r3, #2
 800c4d0:	33ff      	adds	r3, #255	; 0xff
 800c4d2:	188a      	adds	r2, r1, r2
 800c4d4:	18d3      	adds	r3, r2, r3
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	238a      	movs	r3, #138	; 0x8a
 800c4de:	005b      	lsls	r3, r3, #1
 800c4e0:	58d3      	ldr	r3, [r2, r3]
 800c4e2:	1c59      	adds	r1, r3, #1
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	238a      	movs	r3, #138	; 0x8a
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	50d1      	str	r1, [r2, r3]
 800c4ec:	683a      	ldr	r2, [r7, #0]
 800c4ee:	238a      	movs	r3, #138	; 0x8a
 800c4f0:	005b      	lsls	r3, r3, #1
 800c4f2:	58d3      	ldr	r3, [r2, r3]
 800c4f4:	2b0f      	cmp	r3, #15
 800c4f6:	d9e5      	bls.n	800c4c4 <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	633b      	str	r3, [r7, #48]	; 0x30
 800c4fc:	e018      	b.n	800c530 <AES_CMAC_Final+0x25e>
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	2302      	movs	r3, #2
 800c502:	33ff      	adds	r3, #255	; 0xff
 800c504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c506:	188a      	adds	r2, r1, r2
 800c508:	18d3      	adds	r3, r2, r3
 800c50a:	781a      	ldrb	r2, [r3, #0]
 800c50c:	231c      	movs	r3, #28
 800c50e:	18f9      	adds	r1, r7, r3
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	18cb      	adds	r3, r1, r3
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	4053      	eors	r3, r2
 800c518:	b2d8      	uxtb	r0, r3
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	2302      	movs	r3, #2
 800c51e:	33ff      	adds	r3, #255	; 0xff
 800c520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c522:	188a      	adds	r2, r1, r2
 800c524:	18d3      	adds	r3, r2, r3
 800c526:	1c02      	adds	r2, r0, #0
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	3301      	adds	r3, #1
 800c52e:	633b      	str	r3, [r7, #48]	; 0x30
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	2b0f      	cmp	r3, #15
 800c534:	dde3      	ble.n	800c4fe <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800c536:	2300      	movs	r3, #0
 800c538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c53a:	e018      	b.n	800c56e <AES_CMAC_Final+0x29c>
 800c53c:	683a      	ldr	r2, [r7, #0]
 800c53e:	21f1      	movs	r1, #241	; 0xf1
 800c540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c542:	18d3      	adds	r3, r2, r3
 800c544:	185b      	adds	r3, r3, r1
 800c546:	781a      	ldrb	r2, [r3, #0]
 800c548:	6838      	ldr	r0, [r7, #0]
 800c54a:	2302      	movs	r3, #2
 800c54c:	33ff      	adds	r3, #255	; 0xff
 800c54e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c550:	1841      	adds	r1, r0, r1
 800c552:	18cb      	adds	r3, r1, r3
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	4053      	eors	r3, r2
 800c558:	b2d8      	uxtb	r0, r3
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	21f1      	movs	r1, #241	; 0xf1
 800c55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c560:	18d3      	adds	r3, r2, r3
 800c562:	185b      	adds	r3, r3, r1
 800c564:	1c02      	adds	r2, r0, #0
 800c566:	701a      	strb	r2, [r3, #0]
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56a:	3301      	adds	r3, #1
 800c56c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c570:	2b0f      	cmp	r3, #15
 800c572:	dde3      	ble.n	800c53c <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	33f1      	adds	r3, #241	; 0xf1
 800c578:	0019      	movs	r1, r3
 800c57a:	240c      	movs	r4, #12
 800c57c:	193b      	adds	r3, r7, r4
 800c57e:	2210      	movs	r2, #16
 800c580:	0018      	movs	r0, r3
 800c582:	f00c fed3 	bl	801932c <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	6879      	ldr	r1, [r7, #4]
 800c58a:	193b      	adds	r3, r7, r4
 800c58c:	0018      	movs	r0, r3
 800c58e:	f000 fdbf 	bl	800d110 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c592:	231c      	movs	r3, #28
 800c594:	18fb      	adds	r3, r7, r3
 800c596:	2210      	movs	r2, #16
 800c598:	2100      	movs	r1, #0
 800c59a:	0018      	movs	r0, r3
 800c59c:	f00c ff04 	bl	80193a8 <memset1>
}
 800c5a0:	46c0      	nop			; (mov r8, r8)
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	b013      	add	sp, #76	; 0x4c
 800c5a6:	bd90      	pop	{r4, r7, pc}

0800c5a8 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781a      	ldrb	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	7852      	ldrb	r2, [r2, #1]
 800c5c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	3302      	adds	r3, #2
 800c5c8:	683a      	ldr	r2, [r7, #0]
 800c5ca:	7892      	ldrb	r2, [r2, #2]
 800c5cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	3303      	adds	r3, #3
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	78d2      	ldrb	r2, [r2, #3]
 800c5d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	7912      	ldrb	r2, [r2, #4]
 800c5e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	3305      	adds	r3, #5
 800c5e6:	683a      	ldr	r2, [r7, #0]
 800c5e8:	7952      	ldrb	r2, [r2, #5]
 800c5ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	3306      	adds	r3, #6
 800c5f0:	683a      	ldr	r2, [r7, #0]
 800c5f2:	7992      	ldrb	r2, [r2, #6]
 800c5f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3307      	adds	r3, #7
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	79d2      	ldrb	r2, [r2, #7]
 800c5fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	3308      	adds	r3, #8
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	7a12      	ldrb	r2, [r2, #8]
 800c608:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	3309      	adds	r3, #9
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	7a52      	ldrb	r2, [r2, #9]
 800c612:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	330a      	adds	r3, #10
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	7a92      	ldrb	r2, [r2, #10]
 800c61c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	330b      	adds	r3, #11
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	7ad2      	ldrb	r2, [r2, #11]
 800c626:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	330c      	adds	r3, #12
 800c62c:	683a      	ldr	r2, [r7, #0]
 800c62e:	7b12      	ldrb	r2, [r2, #12]
 800c630:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	330d      	adds	r3, #13
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	7b52      	ldrb	r2, [r2, #13]
 800c63a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	330e      	adds	r3, #14
 800c640:	683a      	ldr	r2, [r7, #0]
 800c642:	7b92      	ldrb	r2, [r2, #14]
 800c644:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	330f      	adds	r3, #15
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	7bd2      	ldrb	r2, [r2, #15]
 800c64e:	701a      	strb	r2, [r3, #0]
#endif
}
 800c650:	46c0      	nop			; (mov r8, r8)
 800c652:	46bd      	mov	sp, r7
 800c654:	b002      	add	sp, #8
 800c656:	bd80      	pop	{r7, pc}

0800c658 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	1dfb      	adds	r3, r7, #7
 800c664:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c666:	e007      	b.n	800c678 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	1c53      	adds	r3, r2, #1
 800c66c:	60bb      	str	r3, [r7, #8]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	1c59      	adds	r1, r3, #1
 800c672:	60f9      	str	r1, [r7, #12]
 800c674:	7812      	ldrb	r2, [r2, #0]
 800c676:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c678:	1dfb      	adds	r3, r7, #7
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	1dfa      	adds	r2, r7, #7
 800c67e:	1e59      	subs	r1, r3, #1
 800c680:	7011      	strb	r1, [r2, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1f0      	bne.n	800c668 <copy_block_nn+0x10>
}
 800c686:	46c0      	nop			; (mov r8, r8)
 800c688:	46c0      	nop			; (mov r8, r8)
 800c68a:	46bd      	mov	sp, r7
 800c68c:	b004      	add	sp, #16
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	781a      	ldrb	r2, [r3, #0]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	4053      	eors	r3, r2
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	7819      	ldrb	r1, [r3, #0]
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	781a      	ldrb	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	404a      	eors	r2, r1
 800c6bc:	b2d2      	uxtb	r2, r2
 800c6be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	3302      	adds	r3, #2
 800c6c4:	7819      	ldrb	r1, [r3, #0]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	3302      	adds	r3, #2
 800c6ca:	781a      	ldrb	r2, [r3, #0]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	3302      	adds	r3, #2
 800c6d0:	404a      	eors	r2, r1
 800c6d2:	b2d2      	uxtb	r2, r2
 800c6d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3303      	adds	r3, #3
 800c6da:	7819      	ldrb	r1, [r3, #0]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	3303      	adds	r3, #3
 800c6e0:	781a      	ldrb	r2, [r3, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3303      	adds	r3, #3
 800c6e6:	404a      	eors	r2, r1
 800c6e8:	b2d2      	uxtb	r2, r2
 800c6ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	7819      	ldrb	r1, [r3, #0]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	781a      	ldrb	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	3304      	adds	r3, #4
 800c6fc:	404a      	eors	r2, r1
 800c6fe:	b2d2      	uxtb	r2, r2
 800c700:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3305      	adds	r3, #5
 800c706:	7819      	ldrb	r1, [r3, #0]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	3305      	adds	r3, #5
 800c70c:	781a      	ldrb	r2, [r3, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	3305      	adds	r3, #5
 800c712:	404a      	eors	r2, r1
 800c714:	b2d2      	uxtb	r2, r2
 800c716:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	3306      	adds	r3, #6
 800c71c:	7819      	ldrb	r1, [r3, #0]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	3306      	adds	r3, #6
 800c722:	781a      	ldrb	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	3306      	adds	r3, #6
 800c728:	404a      	eors	r2, r1
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3307      	adds	r3, #7
 800c732:	7819      	ldrb	r1, [r3, #0]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	3307      	adds	r3, #7
 800c738:	781a      	ldrb	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3307      	adds	r3, #7
 800c73e:	404a      	eors	r2, r1
 800c740:	b2d2      	uxtb	r2, r2
 800c742:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3308      	adds	r3, #8
 800c748:	7819      	ldrb	r1, [r3, #0]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	3308      	adds	r3, #8
 800c74e:	781a      	ldrb	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	3308      	adds	r3, #8
 800c754:	404a      	eors	r2, r1
 800c756:	b2d2      	uxtb	r2, r2
 800c758:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	3309      	adds	r3, #9
 800c75e:	7819      	ldrb	r1, [r3, #0]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	3309      	adds	r3, #9
 800c764:	781a      	ldrb	r2, [r3, #0]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	3309      	adds	r3, #9
 800c76a:	404a      	eors	r2, r1
 800c76c:	b2d2      	uxtb	r2, r2
 800c76e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	330a      	adds	r3, #10
 800c774:	7819      	ldrb	r1, [r3, #0]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	330a      	adds	r3, #10
 800c77a:	781a      	ldrb	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	330a      	adds	r3, #10
 800c780:	404a      	eors	r2, r1
 800c782:	b2d2      	uxtb	r2, r2
 800c784:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	330b      	adds	r3, #11
 800c78a:	7819      	ldrb	r1, [r3, #0]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	330b      	adds	r3, #11
 800c790:	781a      	ldrb	r2, [r3, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	330b      	adds	r3, #11
 800c796:	404a      	eors	r2, r1
 800c798:	b2d2      	uxtb	r2, r2
 800c79a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	330c      	adds	r3, #12
 800c7a0:	7819      	ldrb	r1, [r3, #0]
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	330c      	adds	r3, #12
 800c7a6:	781a      	ldrb	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	330c      	adds	r3, #12
 800c7ac:	404a      	eors	r2, r1
 800c7ae:	b2d2      	uxtb	r2, r2
 800c7b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	330d      	adds	r3, #13
 800c7b6:	7819      	ldrb	r1, [r3, #0]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	330d      	adds	r3, #13
 800c7bc:	781a      	ldrb	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	330d      	adds	r3, #13
 800c7c2:	404a      	eors	r2, r1
 800c7c4:	b2d2      	uxtb	r2, r2
 800c7c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	330e      	adds	r3, #14
 800c7cc:	7819      	ldrb	r1, [r3, #0]
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	330e      	adds	r3, #14
 800c7d2:	781a      	ldrb	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	330e      	adds	r3, #14
 800c7d8:	404a      	eors	r2, r1
 800c7da:	b2d2      	uxtb	r2, r2
 800c7dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	330f      	adds	r3, #15
 800c7e2:	7819      	ldrb	r1, [r3, #0]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	330f      	adds	r3, #15
 800c7e8:	781a      	ldrb	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	330f      	adds	r3, #15
 800c7ee:	404a      	eors	r2, r1
 800c7f0:	b2d2      	uxtb	r2, r2
 800c7f2:	701a      	strb	r2, [r3, #0]
#endif
}
 800c7f4:	46c0      	nop			; (mov r8, r8)
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	b002      	add	sp, #8
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	781a      	ldrb	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	4053      	eors	r3, r2
 800c812:	b2da      	uxtb	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	3301      	adds	r3, #1
 800c81c:	7819      	ldrb	r1, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3301      	adds	r3, #1
 800c822:	781a      	ldrb	r2, [r3, #0]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3301      	adds	r3, #1
 800c828:	404a      	eors	r2, r1
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	3302      	adds	r3, #2
 800c832:	7819      	ldrb	r1, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3302      	adds	r3, #2
 800c838:	781a      	ldrb	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3302      	adds	r3, #2
 800c83e:	404a      	eors	r2, r1
 800c840:	b2d2      	uxtb	r2, r2
 800c842:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	3303      	adds	r3, #3
 800c848:	7819      	ldrb	r1, [r3, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3303      	adds	r3, #3
 800c84e:	781a      	ldrb	r2, [r3, #0]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	3303      	adds	r3, #3
 800c854:	404a      	eors	r2, r1
 800c856:	b2d2      	uxtb	r2, r2
 800c858:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	3304      	adds	r3, #4
 800c85e:	7819      	ldrb	r1, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	3304      	adds	r3, #4
 800c864:	781a      	ldrb	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3304      	adds	r3, #4
 800c86a:	404a      	eors	r2, r1
 800c86c:	b2d2      	uxtb	r2, r2
 800c86e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	3305      	adds	r3, #5
 800c874:	7819      	ldrb	r1, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3305      	adds	r3, #5
 800c87a:	781a      	ldrb	r2, [r3, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3305      	adds	r3, #5
 800c880:	404a      	eors	r2, r1
 800c882:	b2d2      	uxtb	r2, r2
 800c884:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	3306      	adds	r3, #6
 800c88a:	7819      	ldrb	r1, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	3306      	adds	r3, #6
 800c890:	781a      	ldrb	r2, [r3, #0]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	3306      	adds	r3, #6
 800c896:	404a      	eors	r2, r1
 800c898:	b2d2      	uxtb	r2, r2
 800c89a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	3307      	adds	r3, #7
 800c8a0:	7819      	ldrb	r1, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3307      	adds	r3, #7
 800c8a6:	781a      	ldrb	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3307      	adds	r3, #7
 800c8ac:	404a      	eors	r2, r1
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	7819      	ldrb	r1, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	3308      	adds	r3, #8
 800c8bc:	781a      	ldrb	r2, [r3, #0]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3308      	adds	r3, #8
 800c8c2:	404a      	eors	r2, r1
 800c8c4:	b2d2      	uxtb	r2, r2
 800c8c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	3309      	adds	r3, #9
 800c8cc:	7819      	ldrb	r1, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	3309      	adds	r3, #9
 800c8d2:	781a      	ldrb	r2, [r3, #0]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3309      	adds	r3, #9
 800c8d8:	404a      	eors	r2, r1
 800c8da:	b2d2      	uxtb	r2, r2
 800c8dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	330a      	adds	r3, #10
 800c8e2:	7819      	ldrb	r1, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	330a      	adds	r3, #10
 800c8e8:	781a      	ldrb	r2, [r3, #0]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	330a      	adds	r3, #10
 800c8ee:	404a      	eors	r2, r1
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	330b      	adds	r3, #11
 800c8f8:	7819      	ldrb	r1, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	330b      	adds	r3, #11
 800c8fe:	781a      	ldrb	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	330b      	adds	r3, #11
 800c904:	404a      	eors	r2, r1
 800c906:	b2d2      	uxtb	r2, r2
 800c908:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	330c      	adds	r3, #12
 800c90e:	7819      	ldrb	r1, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	330c      	adds	r3, #12
 800c914:	781a      	ldrb	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	330c      	adds	r3, #12
 800c91a:	404a      	eors	r2, r1
 800c91c:	b2d2      	uxtb	r2, r2
 800c91e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	330d      	adds	r3, #13
 800c924:	7819      	ldrb	r1, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	330d      	adds	r3, #13
 800c92a:	781a      	ldrb	r2, [r3, #0]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	330d      	adds	r3, #13
 800c930:	404a      	eors	r2, r1
 800c932:	b2d2      	uxtb	r2, r2
 800c934:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	330e      	adds	r3, #14
 800c93a:	7819      	ldrb	r1, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	330e      	adds	r3, #14
 800c940:	781a      	ldrb	r2, [r3, #0]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	330e      	adds	r3, #14
 800c946:	404a      	eors	r2, r1
 800c948:	b2d2      	uxtb	r2, r2
 800c94a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	330f      	adds	r3, #15
 800c950:	7819      	ldrb	r1, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	330f      	adds	r3, #15
 800c956:	781a      	ldrb	r2, [r3, #0]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	330f      	adds	r3, #15
 800c95c:	404a      	eors	r2, r1
 800c95e:	b2d2      	uxtb	r2, r2
 800c960:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c962:	46c0      	nop			; (mov r8, r8)
 800c964:	46bd      	mov	sp, r7
 800c966:	b004      	add	sp, #16
 800c968:	bd80      	pop	{r7, pc}

0800c96a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b082      	sub	sp, #8
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	0011      	movs	r1, r2
 800c97a:	0018      	movs	r0, r3
 800c97c:	f7ff fe88 	bl	800c690 <xor_block>
}
 800c980:	46c0      	nop			; (mov r8, r8)
 800c982:	46bd      	mov	sp, r7
 800c984:	b002      	add	sp, #8
 800c986:	bd80      	pop	{r7, pc}

0800c988 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	001a      	movs	r2, r3
 800c996:	4b4c      	ldr	r3, [pc, #304]	; (800cac8 <shift_sub_rows+0x140>)
 800c998:	5c9a      	ldrb	r2, [r3, r2]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	0019      	movs	r1, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	4a47      	ldr	r2, [pc, #284]	; (800cac8 <shift_sub_rows+0x140>)
 800c9ac:	5c52      	ldrb	r2, [r2, r1]
 800c9ae:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	0019      	movs	r1, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	3308      	adds	r3, #8
 800c9bc:	4a42      	ldr	r2, [pc, #264]	; (800cac8 <shift_sub_rows+0x140>)
 800c9be:	5c52      	ldrb	r2, [r2, r1]
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	330c      	adds	r3, #12
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	0019      	movs	r1, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	330c      	adds	r3, #12
 800c9ce:	4a3e      	ldr	r2, [pc, #248]	; (800cac8 <shift_sub_rows+0x140>)
 800c9d0:	5c52      	ldrb	r2, [r2, r1]
 800c9d2:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c9d4:	200f      	movs	r0, #15
 800c9d6:	183b      	adds	r3, r7, r0
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	7852      	ldrb	r2, [r2, #1]
 800c9dc:	701a      	strb	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3305      	adds	r3, #5
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	0019      	movs	r1, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	4a37      	ldr	r2, [pc, #220]	; (800cac8 <shift_sub_rows+0x140>)
 800c9ec:	5c52      	ldrb	r2, [r2, r1]
 800c9ee:	701a      	strb	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	3309      	adds	r3, #9
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	0019      	movs	r1, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3305      	adds	r3, #5
 800c9fc:	4a32      	ldr	r2, [pc, #200]	; (800cac8 <shift_sub_rows+0x140>)
 800c9fe:	5c52      	ldrb	r2, [r2, r1]
 800ca00:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	330d      	adds	r3, #13
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	0019      	movs	r1, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	3309      	adds	r3, #9
 800ca0e:	4a2e      	ldr	r2, [pc, #184]	; (800cac8 <shift_sub_rows+0x140>)
 800ca10:	5c52      	ldrb	r2, [r2, r1]
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	183b      	adds	r3, r7, r0
 800ca16:	781a      	ldrb	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	330d      	adds	r3, #13
 800ca1c:	492a      	ldr	r1, [pc, #168]	; (800cac8 <shift_sub_rows+0x140>)
 800ca1e:	5c8a      	ldrb	r2, [r1, r2]
 800ca20:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ca22:	183b      	adds	r3, r7, r0
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	7892      	ldrb	r2, [r2, #2]
 800ca28:	701a      	strb	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	330a      	adds	r3, #10
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	0019      	movs	r1, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3302      	adds	r3, #2
 800ca36:	4a24      	ldr	r2, [pc, #144]	; (800cac8 <shift_sub_rows+0x140>)
 800ca38:	5c52      	ldrb	r2, [r2, r1]
 800ca3a:	701a      	strb	r2, [r3, #0]
 800ca3c:	183b      	adds	r3, r7, r0
 800ca3e:	781a      	ldrb	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	330a      	adds	r3, #10
 800ca44:	4920      	ldr	r1, [pc, #128]	; (800cac8 <shift_sub_rows+0x140>)
 800ca46:	5c8a      	ldrb	r2, [r1, r2]
 800ca48:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ca4a:	183b      	adds	r3, r7, r0
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	7992      	ldrb	r2, [r2, #6]
 800ca50:	701a      	strb	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	330e      	adds	r3, #14
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	0019      	movs	r1, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	3306      	adds	r3, #6
 800ca5e:	4a1a      	ldr	r2, [pc, #104]	; (800cac8 <shift_sub_rows+0x140>)
 800ca60:	5c52      	ldrb	r2, [r2, r1]
 800ca62:	701a      	strb	r2, [r3, #0]
 800ca64:	183b      	adds	r3, r7, r0
 800ca66:	781a      	ldrb	r2, [r3, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	330e      	adds	r3, #14
 800ca6c:	4916      	ldr	r1, [pc, #88]	; (800cac8 <shift_sub_rows+0x140>)
 800ca6e:	5c8a      	ldrb	r2, [r1, r2]
 800ca70:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ca72:	183b      	adds	r3, r7, r0
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	7bd2      	ldrb	r2, [r2, #15]
 800ca78:	701a      	strb	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	330b      	adds	r3, #11
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	0019      	movs	r1, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	330f      	adds	r3, #15
 800ca86:	4a10      	ldr	r2, [pc, #64]	; (800cac8 <shift_sub_rows+0x140>)
 800ca88:	5c52      	ldrb	r2, [r2, r1]
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	3307      	adds	r3, #7
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	0019      	movs	r1, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	330b      	adds	r3, #11
 800ca98:	4a0b      	ldr	r2, [pc, #44]	; (800cac8 <shift_sub_rows+0x140>)
 800ca9a:	5c52      	ldrb	r2, [r2, r1]
 800ca9c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	3303      	adds	r3, #3
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	0019      	movs	r1, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3307      	adds	r3, #7
 800caaa:	4a07      	ldr	r2, [pc, #28]	; (800cac8 <shift_sub_rows+0x140>)
 800caac:	5c52      	ldrb	r2, [r2, r1]
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	183b      	adds	r3, r7, r0
 800cab2:	781a      	ldrb	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3303      	adds	r3, #3
 800cab8:	4903      	ldr	r1, [pc, #12]	; (800cac8 <shift_sub_rows+0x140>)
 800caba:	5c8a      	ldrb	r2, [r1, r2]
 800cabc:	701a      	strb	r2, [r3, #0]
}
 800cabe:	46c0      	nop			; (mov r8, r8)
 800cac0:	46bd      	mov	sp, r7
 800cac2:	b004      	add	sp, #16
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	46c0      	nop			; (mov r8, r8)
 800cac8:	0801e588 	.word	0x0801e588

0800cacc <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800cacc:	b590      	push	{r4, r7, lr}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	2408      	movs	r4, #8
 800cad8:	193b      	adds	r3, r7, r4
 800cada:	0011      	movs	r1, r2
 800cadc:	0018      	movs	r0, r3
 800cade:	f7ff fd63 	bl	800c5a8 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800cae2:	0020      	movs	r0, r4
 800cae4:	183b      	adds	r3, r7, r0
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	001a      	movs	r2, r3
 800caea:	4be8      	ldr	r3, [pc, #928]	; (800ce8c <mix_sub_columns+0x3c0>)
 800caec:	5c9a      	ldrb	r2, [r3, r2]
 800caee:	183b      	adds	r3, r7, r0
 800caf0:	795b      	ldrb	r3, [r3, #5]
 800caf2:	0019      	movs	r1, r3
 800caf4:	4be6      	ldr	r3, [pc, #920]	; (800ce90 <mix_sub_columns+0x3c4>)
 800caf6:	5c5b      	ldrb	r3, [r3, r1]
 800caf8:	4053      	eors	r3, r2
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	183b      	adds	r3, r7, r0
 800cafe:	7a9b      	ldrb	r3, [r3, #10]
 800cb00:	0019      	movs	r1, r3
 800cb02:	4be4      	ldr	r3, [pc, #912]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cb04:	5c5b      	ldrb	r3, [r3, r1]
 800cb06:	4053      	eors	r3, r2
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	183b      	adds	r3, r7, r0
 800cb0c:	7bdb      	ldrb	r3, [r3, #15]
 800cb0e:	0019      	movs	r1, r3
 800cb10:	4be0      	ldr	r3, [pc, #896]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cb12:	5c5b      	ldrb	r3, [r3, r1]
 800cb14:	4053      	eors	r3, r2
 800cb16:	b2da      	uxtb	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cb1c:	183b      	adds	r3, r7, r0
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	001a      	movs	r2, r3
 800cb22:	4bdc      	ldr	r3, [pc, #880]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cb24:	5c9a      	ldrb	r2, [r3, r2]
 800cb26:	183b      	adds	r3, r7, r0
 800cb28:	795b      	ldrb	r3, [r3, #5]
 800cb2a:	0019      	movs	r1, r3
 800cb2c:	4bd7      	ldr	r3, [pc, #860]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cb2e:	5c5b      	ldrb	r3, [r3, r1]
 800cb30:	4053      	eors	r3, r2
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	183b      	adds	r3, r7, r0
 800cb36:	7a9b      	ldrb	r3, [r3, #10]
 800cb38:	0019      	movs	r1, r3
 800cb3a:	4bd5      	ldr	r3, [pc, #852]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cb3c:	5c5b      	ldrb	r3, [r3, r1]
 800cb3e:	4053      	eors	r3, r2
 800cb40:	b2d9      	uxtb	r1, r3
 800cb42:	183b      	adds	r3, r7, r0
 800cb44:	7bdb      	ldrb	r3, [r3, #15]
 800cb46:	001a      	movs	r2, r3
 800cb48:	4bd2      	ldr	r3, [pc, #840]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cb4a:	5c9a      	ldrb	r2, [r3, r2]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	404a      	eors	r2, r1
 800cb52:	b2d2      	uxtb	r2, r2
 800cb54:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cb56:	183b      	adds	r3, r7, r0
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	001a      	movs	r2, r3
 800cb5c:	4bcd      	ldr	r3, [pc, #820]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cb5e:	5c9a      	ldrb	r2, [r3, r2]
 800cb60:	183b      	adds	r3, r7, r0
 800cb62:	795b      	ldrb	r3, [r3, #5]
 800cb64:	0019      	movs	r1, r3
 800cb66:	4bcb      	ldr	r3, [pc, #812]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cb68:	5c5b      	ldrb	r3, [r3, r1]
 800cb6a:	4053      	eors	r3, r2
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	183b      	adds	r3, r7, r0
 800cb70:	7a9b      	ldrb	r3, [r3, #10]
 800cb72:	0019      	movs	r1, r3
 800cb74:	4bc5      	ldr	r3, [pc, #788]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cb76:	5c5b      	ldrb	r3, [r3, r1]
 800cb78:	4053      	eors	r3, r2
 800cb7a:	b2d9      	uxtb	r1, r3
 800cb7c:	183b      	adds	r3, r7, r0
 800cb7e:	7bdb      	ldrb	r3, [r3, #15]
 800cb80:	001a      	movs	r2, r3
 800cb82:	4bc3      	ldr	r3, [pc, #780]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cb84:	5c9a      	ldrb	r2, [r3, r2]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	3302      	adds	r3, #2
 800cb8a:	404a      	eors	r2, r1
 800cb8c:	b2d2      	uxtb	r2, r2
 800cb8e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cb90:	183b      	adds	r3, r7, r0
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	001a      	movs	r2, r3
 800cb96:	4bbe      	ldr	r3, [pc, #760]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cb98:	5c9a      	ldrb	r2, [r3, r2]
 800cb9a:	183b      	adds	r3, r7, r0
 800cb9c:	795b      	ldrb	r3, [r3, #5]
 800cb9e:	0019      	movs	r1, r3
 800cba0:	4bbc      	ldr	r3, [pc, #752]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cba2:	5c5b      	ldrb	r3, [r3, r1]
 800cba4:	4053      	eors	r3, r2
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	183b      	adds	r3, r7, r0
 800cbaa:	7a9b      	ldrb	r3, [r3, #10]
 800cbac:	0019      	movs	r1, r3
 800cbae:	4bb9      	ldr	r3, [pc, #740]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cbb0:	5c5b      	ldrb	r3, [r3, r1]
 800cbb2:	4053      	eors	r3, r2
 800cbb4:	b2d9      	uxtb	r1, r3
 800cbb6:	183b      	adds	r3, r7, r0
 800cbb8:	7bdb      	ldrb	r3, [r3, #15]
 800cbba:	001a      	movs	r2, r3
 800cbbc:	4bb3      	ldr	r3, [pc, #716]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cbbe:	5c9a      	ldrb	r2, [r3, r2]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	3303      	adds	r3, #3
 800cbc4:	404a      	eors	r2, r1
 800cbc6:	b2d2      	uxtb	r2, r2
 800cbc8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cbca:	183b      	adds	r3, r7, r0
 800cbcc:	791b      	ldrb	r3, [r3, #4]
 800cbce:	001a      	movs	r2, r3
 800cbd0:	4bae      	ldr	r3, [pc, #696]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cbd2:	5c9a      	ldrb	r2, [r3, r2]
 800cbd4:	183b      	adds	r3, r7, r0
 800cbd6:	7a5b      	ldrb	r3, [r3, #9]
 800cbd8:	0019      	movs	r1, r3
 800cbda:	4bad      	ldr	r3, [pc, #692]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cbdc:	5c5b      	ldrb	r3, [r3, r1]
 800cbde:	4053      	eors	r3, r2
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	183b      	adds	r3, r7, r0
 800cbe4:	7b9b      	ldrb	r3, [r3, #14]
 800cbe6:	0019      	movs	r1, r3
 800cbe8:	4baa      	ldr	r3, [pc, #680]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cbea:	5c5b      	ldrb	r3, [r3, r1]
 800cbec:	4053      	eors	r3, r2
 800cbee:	b2d9      	uxtb	r1, r3
 800cbf0:	183b      	adds	r3, r7, r0
 800cbf2:	78db      	ldrb	r3, [r3, #3]
 800cbf4:	001a      	movs	r2, r3
 800cbf6:	4ba7      	ldr	r3, [pc, #668]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cbf8:	5c9a      	ldrb	r2, [r3, r2]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	404a      	eors	r2, r1
 800cc00:	b2d2      	uxtb	r2, r2
 800cc02:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cc04:	183b      	adds	r3, r7, r0
 800cc06:	791b      	ldrb	r3, [r3, #4]
 800cc08:	001a      	movs	r2, r3
 800cc0a:	4ba2      	ldr	r3, [pc, #648]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cc0c:	5c9a      	ldrb	r2, [r3, r2]
 800cc0e:	183b      	adds	r3, r7, r0
 800cc10:	7a5b      	ldrb	r3, [r3, #9]
 800cc12:	0019      	movs	r1, r3
 800cc14:	4b9d      	ldr	r3, [pc, #628]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cc16:	5c5b      	ldrb	r3, [r3, r1]
 800cc18:	4053      	eors	r3, r2
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	183b      	adds	r3, r7, r0
 800cc1e:	7b9b      	ldrb	r3, [r3, #14]
 800cc20:	0019      	movs	r1, r3
 800cc22:	4b9b      	ldr	r3, [pc, #620]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cc24:	5c5b      	ldrb	r3, [r3, r1]
 800cc26:	4053      	eors	r3, r2
 800cc28:	b2d9      	uxtb	r1, r3
 800cc2a:	183b      	adds	r3, r7, r0
 800cc2c:	78db      	ldrb	r3, [r3, #3]
 800cc2e:	001a      	movs	r2, r3
 800cc30:	4b98      	ldr	r3, [pc, #608]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cc32:	5c9a      	ldrb	r2, [r3, r2]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	3305      	adds	r3, #5
 800cc38:	404a      	eors	r2, r1
 800cc3a:	b2d2      	uxtb	r2, r2
 800cc3c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800cc3e:	183b      	adds	r3, r7, r0
 800cc40:	791b      	ldrb	r3, [r3, #4]
 800cc42:	001a      	movs	r2, r3
 800cc44:	4b93      	ldr	r3, [pc, #588]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cc46:	5c9a      	ldrb	r2, [r3, r2]
 800cc48:	183b      	adds	r3, r7, r0
 800cc4a:	7a5b      	ldrb	r3, [r3, #9]
 800cc4c:	0019      	movs	r1, r3
 800cc4e:	4b91      	ldr	r3, [pc, #580]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cc50:	5c5b      	ldrb	r3, [r3, r1]
 800cc52:	4053      	eors	r3, r2
 800cc54:	b2da      	uxtb	r2, r3
 800cc56:	183b      	adds	r3, r7, r0
 800cc58:	7b9b      	ldrb	r3, [r3, #14]
 800cc5a:	0019      	movs	r1, r3
 800cc5c:	4b8b      	ldr	r3, [pc, #556]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cc5e:	5c5b      	ldrb	r3, [r3, r1]
 800cc60:	4053      	eors	r3, r2
 800cc62:	b2d9      	uxtb	r1, r3
 800cc64:	183b      	adds	r3, r7, r0
 800cc66:	78db      	ldrb	r3, [r3, #3]
 800cc68:	001a      	movs	r2, r3
 800cc6a:	4b89      	ldr	r3, [pc, #548]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cc6c:	5c9a      	ldrb	r2, [r3, r2]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3306      	adds	r3, #6
 800cc72:	404a      	eors	r2, r1
 800cc74:	b2d2      	uxtb	r2, r2
 800cc76:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800cc78:	183b      	adds	r3, r7, r0
 800cc7a:	791b      	ldrb	r3, [r3, #4]
 800cc7c:	001a      	movs	r2, r3
 800cc7e:	4b84      	ldr	r3, [pc, #528]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cc80:	5c9a      	ldrb	r2, [r3, r2]
 800cc82:	183b      	adds	r3, r7, r0
 800cc84:	7a5b      	ldrb	r3, [r3, #9]
 800cc86:	0019      	movs	r1, r3
 800cc88:	4b82      	ldr	r3, [pc, #520]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cc8a:	5c5b      	ldrb	r3, [r3, r1]
 800cc8c:	4053      	eors	r3, r2
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	183b      	adds	r3, r7, r0
 800cc92:	7b9b      	ldrb	r3, [r3, #14]
 800cc94:	0019      	movs	r1, r3
 800cc96:	4b7f      	ldr	r3, [pc, #508]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cc98:	5c5b      	ldrb	r3, [r3, r1]
 800cc9a:	4053      	eors	r3, r2
 800cc9c:	b2d9      	uxtb	r1, r3
 800cc9e:	183b      	adds	r3, r7, r0
 800cca0:	78db      	ldrb	r3, [r3, #3]
 800cca2:	001a      	movs	r2, r3
 800cca4:	4b79      	ldr	r3, [pc, #484]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cca6:	5c9a      	ldrb	r2, [r3, r2]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	3307      	adds	r3, #7
 800ccac:	404a      	eors	r2, r1
 800ccae:	b2d2      	uxtb	r2, r2
 800ccb0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ccb2:	183b      	adds	r3, r7, r0
 800ccb4:	7a1b      	ldrb	r3, [r3, #8]
 800ccb6:	001a      	movs	r2, r3
 800ccb8:	4b74      	ldr	r3, [pc, #464]	; (800ce8c <mix_sub_columns+0x3c0>)
 800ccba:	5c9a      	ldrb	r2, [r3, r2]
 800ccbc:	183b      	adds	r3, r7, r0
 800ccbe:	7b5b      	ldrb	r3, [r3, #13]
 800ccc0:	0019      	movs	r1, r3
 800ccc2:	4b73      	ldr	r3, [pc, #460]	; (800ce90 <mix_sub_columns+0x3c4>)
 800ccc4:	5c5b      	ldrb	r3, [r3, r1]
 800ccc6:	4053      	eors	r3, r2
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	183b      	adds	r3, r7, r0
 800cccc:	789b      	ldrb	r3, [r3, #2]
 800ccce:	0019      	movs	r1, r3
 800ccd0:	4b70      	ldr	r3, [pc, #448]	; (800ce94 <mix_sub_columns+0x3c8>)
 800ccd2:	5c5b      	ldrb	r3, [r3, r1]
 800ccd4:	4053      	eors	r3, r2
 800ccd6:	b2d9      	uxtb	r1, r3
 800ccd8:	183b      	adds	r3, r7, r0
 800ccda:	79db      	ldrb	r3, [r3, #7]
 800ccdc:	001a      	movs	r2, r3
 800ccde:	4b6d      	ldr	r3, [pc, #436]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cce0:	5c9a      	ldrb	r2, [r3, r2]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	3308      	adds	r3, #8
 800cce6:	404a      	eors	r2, r1
 800cce8:	b2d2      	uxtb	r2, r2
 800ccea:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ccec:	183b      	adds	r3, r7, r0
 800ccee:	7a1b      	ldrb	r3, [r3, #8]
 800ccf0:	001a      	movs	r2, r3
 800ccf2:	4b68      	ldr	r3, [pc, #416]	; (800ce94 <mix_sub_columns+0x3c8>)
 800ccf4:	5c9a      	ldrb	r2, [r3, r2]
 800ccf6:	183b      	adds	r3, r7, r0
 800ccf8:	7b5b      	ldrb	r3, [r3, #13]
 800ccfa:	0019      	movs	r1, r3
 800ccfc:	4b63      	ldr	r3, [pc, #396]	; (800ce8c <mix_sub_columns+0x3c0>)
 800ccfe:	5c5b      	ldrb	r3, [r3, r1]
 800cd00:	4053      	eors	r3, r2
 800cd02:	b2da      	uxtb	r2, r3
 800cd04:	183b      	adds	r3, r7, r0
 800cd06:	789b      	ldrb	r3, [r3, #2]
 800cd08:	0019      	movs	r1, r3
 800cd0a:	4b61      	ldr	r3, [pc, #388]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cd0c:	5c5b      	ldrb	r3, [r3, r1]
 800cd0e:	4053      	eors	r3, r2
 800cd10:	b2d9      	uxtb	r1, r3
 800cd12:	183b      	adds	r3, r7, r0
 800cd14:	79db      	ldrb	r3, [r3, #7]
 800cd16:	001a      	movs	r2, r3
 800cd18:	4b5e      	ldr	r3, [pc, #376]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cd1a:	5c9a      	ldrb	r2, [r3, r2]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	3309      	adds	r3, #9
 800cd20:	404a      	eors	r2, r1
 800cd22:	b2d2      	uxtb	r2, r2
 800cd24:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800cd26:	183b      	adds	r3, r7, r0
 800cd28:	7a1b      	ldrb	r3, [r3, #8]
 800cd2a:	001a      	movs	r2, r3
 800cd2c:	4b59      	ldr	r3, [pc, #356]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cd2e:	5c9a      	ldrb	r2, [r3, r2]
 800cd30:	183b      	adds	r3, r7, r0
 800cd32:	7b5b      	ldrb	r3, [r3, #13]
 800cd34:	0019      	movs	r1, r3
 800cd36:	4b57      	ldr	r3, [pc, #348]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cd38:	5c5b      	ldrb	r3, [r3, r1]
 800cd3a:	4053      	eors	r3, r2
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	183b      	adds	r3, r7, r0
 800cd40:	789b      	ldrb	r3, [r3, #2]
 800cd42:	0019      	movs	r1, r3
 800cd44:	4b51      	ldr	r3, [pc, #324]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cd46:	5c5b      	ldrb	r3, [r3, r1]
 800cd48:	4053      	eors	r3, r2
 800cd4a:	b2d9      	uxtb	r1, r3
 800cd4c:	183b      	adds	r3, r7, r0
 800cd4e:	79db      	ldrb	r3, [r3, #7]
 800cd50:	001a      	movs	r2, r3
 800cd52:	4b4f      	ldr	r3, [pc, #316]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cd54:	5c9a      	ldrb	r2, [r3, r2]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	330a      	adds	r3, #10
 800cd5a:	404a      	eors	r2, r1
 800cd5c:	b2d2      	uxtb	r2, r2
 800cd5e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800cd60:	183b      	adds	r3, r7, r0
 800cd62:	7a1b      	ldrb	r3, [r3, #8]
 800cd64:	001a      	movs	r2, r3
 800cd66:	4b4a      	ldr	r3, [pc, #296]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cd68:	5c9a      	ldrb	r2, [r3, r2]
 800cd6a:	183b      	adds	r3, r7, r0
 800cd6c:	7b5b      	ldrb	r3, [r3, #13]
 800cd6e:	0019      	movs	r1, r3
 800cd70:	4b48      	ldr	r3, [pc, #288]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cd72:	5c5b      	ldrb	r3, [r3, r1]
 800cd74:	4053      	eors	r3, r2
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	183b      	adds	r3, r7, r0
 800cd7a:	789b      	ldrb	r3, [r3, #2]
 800cd7c:	0019      	movs	r1, r3
 800cd7e:	4b45      	ldr	r3, [pc, #276]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cd80:	5c5b      	ldrb	r3, [r3, r1]
 800cd82:	4053      	eors	r3, r2
 800cd84:	b2d9      	uxtb	r1, r3
 800cd86:	183b      	adds	r3, r7, r0
 800cd88:	79db      	ldrb	r3, [r3, #7]
 800cd8a:	001a      	movs	r2, r3
 800cd8c:	4b3f      	ldr	r3, [pc, #252]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cd8e:	5c9a      	ldrb	r2, [r3, r2]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	330b      	adds	r3, #11
 800cd94:	404a      	eors	r2, r1
 800cd96:	b2d2      	uxtb	r2, r2
 800cd98:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cd9a:	183b      	adds	r3, r7, r0
 800cd9c:	7b1b      	ldrb	r3, [r3, #12]
 800cd9e:	001a      	movs	r2, r3
 800cda0:	4b3a      	ldr	r3, [pc, #232]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cda2:	5c9a      	ldrb	r2, [r3, r2]
 800cda4:	183b      	adds	r3, r7, r0
 800cda6:	785b      	ldrb	r3, [r3, #1]
 800cda8:	0019      	movs	r1, r3
 800cdaa:	4b39      	ldr	r3, [pc, #228]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cdac:	5c5b      	ldrb	r3, [r3, r1]
 800cdae:	4053      	eors	r3, r2
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	183b      	adds	r3, r7, r0
 800cdb4:	799b      	ldrb	r3, [r3, #6]
 800cdb6:	0019      	movs	r1, r3
 800cdb8:	4b36      	ldr	r3, [pc, #216]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cdba:	5c5b      	ldrb	r3, [r3, r1]
 800cdbc:	4053      	eors	r3, r2
 800cdbe:	b2d9      	uxtb	r1, r3
 800cdc0:	183b      	adds	r3, r7, r0
 800cdc2:	7adb      	ldrb	r3, [r3, #11]
 800cdc4:	001a      	movs	r2, r3
 800cdc6:	4b33      	ldr	r3, [pc, #204]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cdc8:	5c9a      	ldrb	r2, [r3, r2]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	330c      	adds	r3, #12
 800cdce:	404a      	eors	r2, r1
 800cdd0:	b2d2      	uxtb	r2, r2
 800cdd2:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800cdd4:	183b      	adds	r3, r7, r0
 800cdd6:	7b1b      	ldrb	r3, [r3, #12]
 800cdd8:	001a      	movs	r2, r3
 800cdda:	4b2e      	ldr	r3, [pc, #184]	; (800ce94 <mix_sub_columns+0x3c8>)
 800cddc:	5c9a      	ldrb	r2, [r3, r2]
 800cdde:	183b      	adds	r3, r7, r0
 800cde0:	785b      	ldrb	r3, [r3, #1]
 800cde2:	0019      	movs	r1, r3
 800cde4:	4b29      	ldr	r3, [pc, #164]	; (800ce8c <mix_sub_columns+0x3c0>)
 800cde6:	5c5b      	ldrb	r3, [r3, r1]
 800cde8:	4053      	eors	r3, r2
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	183b      	adds	r3, r7, r0
 800cdee:	799b      	ldrb	r3, [r3, #6]
 800cdf0:	0019      	movs	r1, r3
 800cdf2:	4b27      	ldr	r3, [pc, #156]	; (800ce90 <mix_sub_columns+0x3c4>)
 800cdf4:	5c5b      	ldrb	r3, [r3, r1]
 800cdf6:	4053      	eors	r3, r2
 800cdf8:	b2d9      	uxtb	r1, r3
 800cdfa:	183b      	adds	r3, r7, r0
 800cdfc:	7adb      	ldrb	r3, [r3, #11]
 800cdfe:	001a      	movs	r2, r3
 800ce00:	4b24      	ldr	r3, [pc, #144]	; (800ce94 <mix_sub_columns+0x3c8>)
 800ce02:	5c9a      	ldrb	r2, [r3, r2]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	330d      	adds	r3, #13
 800ce08:	404a      	eors	r2, r1
 800ce0a:	b2d2      	uxtb	r2, r2
 800ce0c:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ce0e:	183b      	adds	r3, r7, r0
 800ce10:	7b1b      	ldrb	r3, [r3, #12]
 800ce12:	001a      	movs	r2, r3
 800ce14:	4b1f      	ldr	r3, [pc, #124]	; (800ce94 <mix_sub_columns+0x3c8>)
 800ce16:	5c9a      	ldrb	r2, [r3, r2]
 800ce18:	183b      	adds	r3, r7, r0
 800ce1a:	785b      	ldrb	r3, [r3, #1]
 800ce1c:	0019      	movs	r1, r3
 800ce1e:	4b1d      	ldr	r3, [pc, #116]	; (800ce94 <mix_sub_columns+0x3c8>)
 800ce20:	5c5b      	ldrb	r3, [r3, r1]
 800ce22:	4053      	eors	r3, r2
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	183b      	adds	r3, r7, r0
 800ce28:	799b      	ldrb	r3, [r3, #6]
 800ce2a:	0019      	movs	r1, r3
 800ce2c:	4b17      	ldr	r3, [pc, #92]	; (800ce8c <mix_sub_columns+0x3c0>)
 800ce2e:	5c5b      	ldrb	r3, [r3, r1]
 800ce30:	4053      	eors	r3, r2
 800ce32:	b2d9      	uxtb	r1, r3
 800ce34:	183b      	adds	r3, r7, r0
 800ce36:	7adb      	ldrb	r3, [r3, #11]
 800ce38:	001a      	movs	r2, r3
 800ce3a:	4b15      	ldr	r3, [pc, #84]	; (800ce90 <mix_sub_columns+0x3c4>)
 800ce3c:	5c9a      	ldrb	r2, [r3, r2]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	330e      	adds	r3, #14
 800ce42:	404a      	eors	r2, r1
 800ce44:	b2d2      	uxtb	r2, r2
 800ce46:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ce48:	183b      	adds	r3, r7, r0
 800ce4a:	7b1b      	ldrb	r3, [r3, #12]
 800ce4c:	001a      	movs	r2, r3
 800ce4e:	4b10      	ldr	r3, [pc, #64]	; (800ce90 <mix_sub_columns+0x3c4>)
 800ce50:	5c9a      	ldrb	r2, [r3, r2]
 800ce52:	183b      	adds	r3, r7, r0
 800ce54:	785b      	ldrb	r3, [r3, #1]
 800ce56:	0019      	movs	r1, r3
 800ce58:	4b0e      	ldr	r3, [pc, #56]	; (800ce94 <mix_sub_columns+0x3c8>)
 800ce5a:	5c5b      	ldrb	r3, [r3, r1]
 800ce5c:	4053      	eors	r3, r2
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	183b      	adds	r3, r7, r0
 800ce62:	799b      	ldrb	r3, [r3, #6]
 800ce64:	0019      	movs	r1, r3
 800ce66:	4b0b      	ldr	r3, [pc, #44]	; (800ce94 <mix_sub_columns+0x3c8>)
 800ce68:	5c5b      	ldrb	r3, [r3, r1]
 800ce6a:	4053      	eors	r3, r2
 800ce6c:	b2d9      	uxtb	r1, r3
 800ce6e:	183b      	adds	r3, r7, r0
 800ce70:	7adb      	ldrb	r3, [r3, #11]
 800ce72:	001a      	movs	r2, r3
 800ce74:	4b05      	ldr	r3, [pc, #20]	; (800ce8c <mix_sub_columns+0x3c0>)
 800ce76:	5c9a      	ldrb	r2, [r3, r2]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	330f      	adds	r3, #15
 800ce7c:	404a      	eors	r2, r1
 800ce7e:	b2d2      	uxtb	r2, r2
 800ce80:	701a      	strb	r2, [r3, #0]
  }
 800ce82:	46c0      	nop			; (mov r8, r8)
 800ce84:	46bd      	mov	sp, r7
 800ce86:	b007      	add	sp, #28
 800ce88:	bd90      	pop	{r4, r7, pc}
 800ce8a:	46c0      	nop			; (mov r8, r8)
 800ce8c:	0801e688 	.word	0x0801e688
 800ce90:	0801e788 	.word	0x0801e788
 800ce94:	0801e588 	.word	0x0801e588

0800ce98 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ce98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	607a      	str	r2, [r7, #4]
 800cea2:	200b      	movs	r0, #11
 800cea4:	183b      	adds	r3, r7, r0
 800cea6:	1c0a      	adds	r2, r1, #0
 800cea8:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ceaa:	183b      	adds	r3, r7, r0
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	3b10      	subs	r3, #16
 800ceb0:	2210      	movs	r2, #16
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	4192      	sbcs	r2, r2
 800ceb6:	4252      	negs	r2, r2
 800ceb8:	b2d2      	uxtb	r2, r2
 800ceba:	2a00      	cmp	r2, #0
 800cebc:	d109      	bne.n	800ced2 <lorawan_aes_set_key+0x3a>
 800cebe:	2201      	movs	r2, #1
 800cec0:	409a      	lsls	r2, r3
 800cec2:	0013      	movs	r3, r2
 800cec4:	4a90      	ldr	r2, [pc, #576]	; (800d108 <lorawan_aes_set_key+0x270>)
 800cec6:	4013      	ands	r3, r2
 800cec8:	1e5a      	subs	r2, r3, #1
 800ceca:	4193      	sbcs	r3, r2
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d105      	bne.n	800cede <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	22f0      	movs	r2, #240	; 0xf0
 800ced6:	2100      	movs	r1, #0
 800ced8:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800ceda:	23ff      	movs	r3, #255	; 0xff
 800cedc:	e10f      	b.n	800d0fe <lorawan_aes_set_key+0x266>
        break;
 800cede:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	240b      	movs	r4, #11
 800cee4:	193b      	adds	r3, r7, r4
 800cee6:	781a      	ldrb	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	0019      	movs	r1, r3
 800ceec:	f7ff fbb4 	bl	800c658 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800cef0:	0020      	movs	r0, r4
 800cef2:	183b      	adds	r3, r7, r0
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	331c      	adds	r3, #28
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	2111      	movs	r1, #17
 800cefc:	187b      	adds	r3, r7, r1
 800cefe:	0092      	lsls	r2, r2, #2
 800cf00:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800cf02:	187b      	adds	r3, r7, r1
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	091b      	lsrs	r3, r3, #4
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	b2d9      	uxtb	r1, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	22f0      	movs	r2, #240	; 0xf0
 800cf12:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cf14:	2317      	movs	r3, #23
 800cf16:	18fb      	adds	r3, r7, r3
 800cf18:	183a      	adds	r2, r7, r0
 800cf1a:	7812      	ldrb	r2, [r2, #0]
 800cf1c:	701a      	strb	r2, [r3, #0]
 800cf1e:	2316      	movs	r3, #22
 800cf20:	18fb      	adds	r3, r7, r3
 800cf22:	2201      	movs	r2, #1
 800cf24:	701a      	strb	r2, [r3, #0]
 800cf26:	e0e0      	b.n	800d0ea <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800cf28:	2017      	movs	r0, #23
 800cf2a:	183b      	adds	r3, r7, r0
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	1f1a      	subs	r2, r3, #4
 800cf30:	2415      	movs	r4, #21
 800cf32:	193b      	adds	r3, r7, r4
 800cf34:	6879      	ldr	r1, [r7, #4]
 800cf36:	5c8a      	ldrb	r2, [r1, r2]
 800cf38:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800cf3a:	183b      	adds	r3, r7, r0
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	1eda      	subs	r2, r3, #3
 800cf40:	2514      	movs	r5, #20
 800cf42:	197b      	adds	r3, r7, r5
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	5c8a      	ldrb	r2, [r1, r2]
 800cf48:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800cf4a:	183b      	adds	r3, r7, r0
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	1e9a      	subs	r2, r3, #2
 800cf50:	2613      	movs	r6, #19
 800cf52:	19bb      	adds	r3, r7, r6
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	5c8a      	ldrb	r2, [r1, r2]
 800cf58:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800cf5a:	183b      	adds	r3, r7, r0
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	1e5a      	subs	r2, r3, #1
 800cf60:	2312      	movs	r3, #18
 800cf62:	18fb      	adds	r3, r7, r3
 800cf64:	6879      	ldr	r1, [r7, #4]
 800cf66:	5c8a      	ldrb	r2, [r1, r2]
 800cf68:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800cf6a:	183a      	adds	r2, r7, r0
 800cf6c:	210b      	movs	r1, #11
 800cf6e:	187b      	adds	r3, r7, r1
 800cf70:	7812      	ldrb	r2, [r2, #0]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	0019      	movs	r1, r3
 800cf76:	0010      	movs	r0, r2
 800cf78:	f7f3 f954 	bl	8000224 <__aeabi_uidivmod>
 800cf7c:	000b      	movs	r3, r1
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d13b      	bne.n	800cffc <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800cf84:	2210      	movs	r2, #16
 800cf86:	18bb      	adds	r3, r7, r2
 800cf88:	193a      	adds	r2, r7, r4
 800cf8a:	7812      	ldrb	r2, [r2, #0]
 800cf8c:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800cf8e:	197b      	adds	r3, r7, r5
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	4a5e      	ldr	r2, [pc, #376]	; (800d10c <lorawan_aes_set_key+0x274>)
 800cf94:	5cd1      	ldrb	r1, [r2, r3]
 800cf96:	193b      	adds	r3, r7, r4
 800cf98:	2016      	movs	r0, #22
 800cf9a:	183a      	adds	r2, r7, r0
 800cf9c:	7812      	ldrb	r2, [r2, #0]
 800cf9e:	404a      	eors	r2, r1
 800cfa0:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800cfa2:	19bb      	adds	r3, r7, r6
 800cfa4:	781a      	ldrb	r2, [r3, #0]
 800cfa6:	197b      	adds	r3, r7, r5
 800cfa8:	4958      	ldr	r1, [pc, #352]	; (800d10c <lorawan_aes_set_key+0x274>)
 800cfaa:	5c8a      	ldrb	r2, [r1, r2]
 800cfac:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800cfae:	2412      	movs	r4, #18
 800cfb0:	193b      	adds	r3, r7, r4
 800cfb2:	781a      	ldrb	r2, [r3, #0]
 800cfb4:	19bb      	adds	r3, r7, r6
 800cfb6:	4955      	ldr	r1, [pc, #340]	; (800d10c <lorawan_aes_set_key+0x274>)
 800cfb8:	5c8a      	ldrb	r2, [r1, r2]
 800cfba:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800cfbc:	2210      	movs	r2, #16
 800cfbe:	18bb      	adds	r3, r7, r2
 800cfc0:	781a      	ldrb	r2, [r3, #0]
 800cfc2:	193b      	adds	r3, r7, r4
 800cfc4:	4951      	ldr	r1, [pc, #324]	; (800d10c <lorawan_aes_set_key+0x274>)
 800cfc6:	5c8a      	ldrb	r2, [r1, r2]
 800cfc8:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800cfca:	183b      	adds	r3, r7, r0
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	b25a      	sxtb	r2, r3
 800cfd2:	0004      	movs	r4, r0
 800cfd4:	183b      	adds	r3, r7, r0
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	09db      	lsrs	r3, r3, #7
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	1c19      	adds	r1, r3, #0
 800cfde:	1c0b      	adds	r3, r1, #0
 800cfe0:	18db      	adds	r3, r3, r3
 800cfe2:	185b      	adds	r3, r3, r1
 800cfe4:	1c19      	adds	r1, r3, #0
 800cfe6:	00c8      	lsls	r0, r1, #3
 800cfe8:	1c19      	adds	r1, r3, #0
 800cfea:	1c03      	adds	r3, r0, #0
 800cfec:	18cb      	adds	r3, r1, r3
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	b25b      	sxtb	r3, r3
 800cff2:	4053      	eors	r3, r2
 800cff4:	b25a      	sxtb	r2, r3
 800cff6:	193b      	adds	r3, r7, r4
 800cff8:	701a      	strb	r2, [r3, #0]
 800cffa:	e02d      	b.n	800d058 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800cffc:	210b      	movs	r1, #11
 800cffe:	187b      	adds	r3, r7, r1
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	2b18      	cmp	r3, #24
 800d004:	d928      	bls.n	800d058 <lorawan_aes_set_key+0x1c0>
 800d006:	2317      	movs	r3, #23
 800d008:	18fa      	adds	r2, r7, r3
 800d00a:	187b      	adds	r3, r7, r1
 800d00c:	7812      	ldrb	r2, [r2, #0]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	0019      	movs	r1, r3
 800d012:	0010      	movs	r0, r2
 800d014:	f7f3 f906 	bl	8000224 <__aeabi_uidivmod>
 800d018:	000b      	movs	r3, r1
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	2b10      	cmp	r3, #16
 800d01e:	d11b      	bne.n	800d058 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800d020:	2115      	movs	r1, #21
 800d022:	187b      	adds	r3, r7, r1
 800d024:	781a      	ldrb	r2, [r3, #0]
 800d026:	187b      	adds	r3, r7, r1
 800d028:	4938      	ldr	r1, [pc, #224]	; (800d10c <lorawan_aes_set_key+0x274>)
 800d02a:	5c8a      	ldrb	r2, [r1, r2]
 800d02c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800d02e:	2114      	movs	r1, #20
 800d030:	187b      	adds	r3, r7, r1
 800d032:	781a      	ldrb	r2, [r3, #0]
 800d034:	187b      	adds	r3, r7, r1
 800d036:	4935      	ldr	r1, [pc, #212]	; (800d10c <lorawan_aes_set_key+0x274>)
 800d038:	5c8a      	ldrb	r2, [r1, r2]
 800d03a:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800d03c:	2113      	movs	r1, #19
 800d03e:	187b      	adds	r3, r7, r1
 800d040:	781a      	ldrb	r2, [r3, #0]
 800d042:	187b      	adds	r3, r7, r1
 800d044:	4931      	ldr	r1, [pc, #196]	; (800d10c <lorawan_aes_set_key+0x274>)
 800d046:	5c8a      	ldrb	r2, [r1, r2]
 800d048:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800d04a:	2112      	movs	r1, #18
 800d04c:	187b      	adds	r3, r7, r1
 800d04e:	781a      	ldrb	r2, [r3, #0]
 800d050:	187b      	adds	r3, r7, r1
 800d052:	492e      	ldr	r1, [pc, #184]	; (800d10c <lorawan_aes_set_key+0x274>)
 800d054:	5c8a      	ldrb	r2, [r1, r2]
 800d056:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800d058:	2410      	movs	r4, #16
 800d05a:	193b      	adds	r3, r7, r4
 800d05c:	2017      	movs	r0, #23
 800d05e:	1839      	adds	r1, r7, r0
 800d060:	220b      	movs	r2, #11
 800d062:	18ba      	adds	r2, r7, r2
 800d064:	7809      	ldrb	r1, [r1, #0]
 800d066:	7812      	ldrb	r2, [r2, #0]
 800d068:	1a8a      	subs	r2, r1, r2
 800d06a:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d06c:	193b      	adds	r3, r7, r4
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	5cd1      	ldrb	r1, [r2, r3]
 800d074:	183b      	adds	r3, r7, r0
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	2215      	movs	r2, #21
 800d07a:	18ba      	adds	r2, r7, r2
 800d07c:	7812      	ldrb	r2, [r2, #0]
 800d07e:	404a      	eors	r2, r1
 800d080:	b2d1      	uxtb	r1, r2
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d086:	193b      	adds	r3, r7, r4
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	3301      	adds	r3, #1
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	5cd1      	ldrb	r1, [r2, r3]
 800d090:	183b      	adds	r3, r7, r0
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	3301      	adds	r3, #1
 800d096:	2214      	movs	r2, #20
 800d098:	18ba      	adds	r2, r7, r2
 800d09a:	7812      	ldrb	r2, [r2, #0]
 800d09c:	404a      	eors	r2, r1
 800d09e:	b2d1      	uxtb	r1, r2
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d0a4:	193b      	adds	r3, r7, r4
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	3302      	adds	r3, #2
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	5cd1      	ldrb	r1, [r2, r3]
 800d0ae:	183b      	adds	r3, r7, r0
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	3302      	adds	r3, #2
 800d0b4:	2213      	movs	r2, #19
 800d0b6:	18ba      	adds	r2, r7, r2
 800d0b8:	7812      	ldrb	r2, [r2, #0]
 800d0ba:	404a      	eors	r2, r1
 800d0bc:	b2d1      	uxtb	r1, r2
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d0c2:	193b      	adds	r3, r7, r4
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	3303      	adds	r3, #3
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	5cd1      	ldrb	r1, [r2, r3]
 800d0cc:	183b      	adds	r3, r7, r0
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	3303      	adds	r3, #3
 800d0d2:	2212      	movs	r2, #18
 800d0d4:	18ba      	adds	r2, r7, r2
 800d0d6:	7812      	ldrb	r2, [r2, #0]
 800d0d8:	404a      	eors	r2, r1
 800d0da:	b2d1      	uxtb	r1, r2
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d0e0:	183b      	adds	r3, r7, r0
 800d0e2:	183a      	adds	r2, r7, r0
 800d0e4:	7812      	ldrb	r2, [r2, #0]
 800d0e6:	3204      	adds	r2, #4
 800d0e8:	701a      	strb	r2, [r3, #0]
 800d0ea:	2317      	movs	r3, #23
 800d0ec:	18fa      	adds	r2, r7, r3
 800d0ee:	2311      	movs	r3, #17
 800d0f0:	18fb      	adds	r3, r7, r3
 800d0f2:	7812      	ldrb	r2, [r2, #0]
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d200      	bcs.n	800d0fc <lorawan_aes_set_key+0x264>
 800d0fa:	e715      	b.n	800cf28 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	0018      	movs	r0, r3
 800d100:	46bd      	mov	sp, r7
 800d102:	b007      	add	sp, #28
 800d104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d106:	46c0      	nop			; (mov r8, r8)
 800d108:	00010101 	.word	0x00010101
 800d10c:	0801e588 	.word	0x0801e588

0800d110 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d110:	b5b0      	push	{r4, r5, r7, lr}
 800d112:	b08a      	sub	sp, #40	; 0x28
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	22f0      	movs	r2, #240	; 0xf0
 800d120:	5c9b      	ldrb	r3, [r3, r2]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d039      	beq.n	800d19a <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	68f9      	ldr	r1, [r7, #12]
 800d12a:	2314      	movs	r3, #20
 800d12c:	18fb      	adds	r3, r7, r3
 800d12e:	0018      	movs	r0, r3
 800d130:	f7ff fb64 	bl	800c7fc <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d134:	2327      	movs	r3, #39	; 0x27
 800d136:	18fb      	adds	r3, r7, r3
 800d138:	2201      	movs	r2, #1
 800d13a:	701a      	strb	r2, [r3, #0]
 800d13c:	e014      	b.n	800d168 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d13e:	2514      	movs	r5, #20
 800d140:	197b      	adds	r3, r7, r5
 800d142:	0018      	movs	r0, r3
 800d144:	f7ff fcc2 	bl	800cacc <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2427      	movs	r4, #39	; 0x27
 800d14c:	193a      	adds	r2, r7, r4
 800d14e:	7812      	ldrb	r2, [r2, #0]
 800d150:	0112      	lsls	r2, r2, #4
 800d152:	189a      	adds	r2, r3, r2
 800d154:	197b      	adds	r3, r7, r5
 800d156:	0011      	movs	r1, r2
 800d158:	0018      	movs	r0, r3
 800d15a:	f7ff fc06 	bl	800c96a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d15e:	193b      	adds	r3, r7, r4
 800d160:	193a      	adds	r2, r7, r4
 800d162:	7812      	ldrb	r2, [r2, #0]
 800d164:	3201      	adds	r2, #1
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	22f0      	movs	r2, #240	; 0xf0
 800d16c:	5c9b      	ldrb	r3, [r3, r2]
 800d16e:	2427      	movs	r4, #39	; 0x27
 800d170:	193a      	adds	r2, r7, r4
 800d172:	7812      	ldrb	r2, [r2, #0]
 800d174:	429a      	cmp	r2, r3
 800d176:	d3e2      	bcc.n	800d13e <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d178:	2514      	movs	r5, #20
 800d17a:	197b      	adds	r3, r7, r5
 800d17c:	0018      	movs	r0, r3
 800d17e:	f7ff fc03 	bl	800c988 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	193a      	adds	r2, r7, r4
 800d186:	7812      	ldrb	r2, [r2, #0]
 800d188:	0112      	lsls	r2, r2, #4
 800d18a:	189a      	adds	r2, r3, r2
 800d18c:	1979      	adds	r1, r7, r5
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	0018      	movs	r0, r3
 800d192:	f7ff fb33 	bl	800c7fc <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d196:	2300      	movs	r3, #0
 800d198:	e000      	b.n	800d19c <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800d19a:	23ff      	movs	r3, #255	; 0xff
}
 800d19c:	0018      	movs	r0, r3
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	b00a      	add	sp, #40	; 0x28
 800d1a2:	bdb0      	pop	{r4, r5, r7, pc}

0800d1a4 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	0002      	movs	r2, r0
 800d1ac:	6039      	str	r1, [r7, #0]
 800d1ae:	1dfb      	adds	r3, r7, #7
 800d1b0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d1b2:	230f      	movs	r3, #15
 800d1b4:	18fb      	adds	r3, r7, r3
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	701a      	strb	r2, [r3, #0]
 800d1ba:	e020      	b.n	800d1fe <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d1bc:	200f      	movs	r0, #15
 800d1be:	183b      	adds	r3, r7, r0
 800d1c0:	781a      	ldrb	r2, [r3, #0]
 800d1c2:	4914      	ldr	r1, [pc, #80]	; (800d214 <GetKeyByID+0x70>)
 800d1c4:	0013      	movs	r3, r2
 800d1c6:	011b      	lsls	r3, r3, #4
 800d1c8:	189b      	adds	r3, r3, r2
 800d1ca:	18cb      	adds	r3, r1, r3
 800d1cc:	3310      	adds	r3, #16
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	1dfa      	adds	r2, r7, #7
 800d1d2:	7812      	ldrb	r2, [r2, #0]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d10c      	bne.n	800d1f2 <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800d1d8:	183b      	adds	r3, r7, r0
 800d1da:	781a      	ldrb	r2, [r3, #0]
 800d1dc:	0013      	movs	r3, r2
 800d1de:	011b      	lsls	r3, r3, #4
 800d1e0:	189b      	adds	r3, r3, r2
 800d1e2:	3310      	adds	r3, #16
 800d1e4:	001a      	movs	r2, r3
 800d1e6:	4b0b      	ldr	r3, [pc, #44]	; (800d214 <GetKeyByID+0x70>)
 800d1e8:	18d2      	adds	r2, r2, r3
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	e00b      	b.n	800d20a <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d1f2:	210f      	movs	r1, #15
 800d1f4:	187b      	adds	r3, r7, r1
 800d1f6:	781a      	ldrb	r2, [r3, #0]
 800d1f8:	187b      	adds	r3, r7, r1
 800d1fa:	3201      	adds	r2, #1
 800d1fc:	701a      	strb	r2, [r3, #0]
 800d1fe:	230f      	movs	r3, #15
 800d200:	18fb      	adds	r3, r7, r3
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2b09      	cmp	r3, #9
 800d206:	d9d9      	bls.n	800d1bc <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d208:	2303      	movs	r3, #3
}
 800d20a:	0018      	movs	r0, r3
 800d20c:	46bd      	mov	sp, r7
 800d20e:	b004      	add	sp, #16
 800d210:	bd80      	pop	{r7, pc}
 800d212:	46c0      	nop			; (mov r8, r8)
 800d214:	2000007c 	.word	0x2000007c

0800d218 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
  return;
 800d21c:	46c0      	nop			; (mov r8, r8)
}
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
	...

0800d224 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800d224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d226:	b0d1      	sub	sp, #324	; 0x144
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	0019      	movs	r1, r3
 800d230:	4b40      	ldr	r3, [pc, #256]	; (800d334 <ComputeCmac+0x110>)
 800d232:	20a0      	movs	r0, #160	; 0xa0
 800d234:	0040      	lsls	r0, r0, #1
 800d236:	4684      	mov	ip, r0
 800d238:	44bc      	add	ip, r7
 800d23a:	4463      	add	r3, ip
 800d23c:	801a      	strh	r2, [r3, #0]
 800d23e:	4b3e      	ldr	r3, [pc, #248]	; (800d338 <ComputeCmac+0x114>)
 800d240:	22a0      	movs	r2, #160	; 0xa0
 800d242:	0052      	lsls	r2, r2, #1
 800d244:	4694      	mov	ip, r2
 800d246:	44bc      	add	ip, r7
 800d248:	4463      	add	r3, ip
 800d24a:	1c0a      	adds	r2, r1, #0
 800d24c:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d24e:	2340      	movs	r3, #64	; 0x40
 800d250:	33ff      	adds	r3, #255	; 0xff
 800d252:	18fb      	adds	r3, r7, r3
 800d254:	2206      	movs	r2, #6
 800d256:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d008      	beq.n	800d270 <ComputeCmac+0x4c>
 800d25e:	23a8      	movs	r3, #168	; 0xa8
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	2208      	movs	r2, #8
 800d264:	4694      	mov	ip, r2
 800d266:	44bc      	add	ip, r7
 800d268:	4463      	add	r3, ip
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <ComputeCmac+0x50>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d270:	2302      	movs	r3, #2
 800d272:	e05a      	b.n	800d32a <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800d274:	2514      	movs	r5, #20
 800d276:	197b      	adds	r3, r7, r5
 800d278:	0018      	movs	r0, r3
 800d27a:	f7fe ff39 	bl	800c0f0 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800d27e:	2640      	movs	r6, #64	; 0x40
 800d280:	36ff      	adds	r6, #255	; 0xff
 800d282:	19bc      	adds	r4, r7, r6
 800d284:	2310      	movs	r3, #16
 800d286:	18fa      	adds	r2, r7, r3
 800d288:	4b2b      	ldr	r3, [pc, #172]	; (800d338 <ComputeCmac+0x114>)
 800d28a:	21a0      	movs	r1, #160	; 0xa0
 800d28c:	0049      	lsls	r1, r1, #1
 800d28e:	468c      	mov	ip, r1
 800d290:	44bc      	add	ip, r7
 800d292:	4463      	add	r3, ip
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	0011      	movs	r1, r2
 800d298:	0018      	movs	r0, r3
 800d29a:	f7ff ff83 	bl	800d1a4 <GetKeyByID>
 800d29e:	0003      	movs	r3, r0
 800d2a0:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d2a2:	19bb      	adds	r3, r7, r6
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d13b      	bne.n	800d322 <ComputeCmac+0xfe>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	197b      	adds	r3, r7, r5
 800d2b0:	0011      	movs	r1, r2
 800d2b2:	0018      	movs	r0, r3
 800d2b4:	f7fe ff36 	bl	800c124 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d005      	beq.n	800d2ca <ComputeCmac+0xa6>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800d2be:	68f9      	ldr	r1, [r7, #12]
 800d2c0:	197b      	adds	r3, r7, r5
 800d2c2:	2210      	movs	r2, #16
 800d2c4:	0018      	movs	r0, r3
 800d2c6:	f7fe ff3c 	bl	800c142 <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800d2ca:	4b1a      	ldr	r3, [pc, #104]	; (800d334 <ComputeCmac+0x110>)
 800d2cc:	22a0      	movs	r2, #160	; 0xa0
 800d2ce:	0052      	lsls	r2, r2, #1
 800d2d0:	4694      	mov	ip, r2
 800d2d2:	44bc      	add	ip, r7
 800d2d4:	4463      	add	r3, ip
 800d2d6:	881a      	ldrh	r2, [r3, #0]
 800d2d8:	68b9      	ldr	r1, [r7, #8]
 800d2da:	2414      	movs	r4, #20
 800d2dc:	193b      	adds	r3, r7, r4
 800d2de:	0018      	movs	r0, r3
 800d2e0:	f7fe ff2f 	bl	800c142 <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800d2e4:	193a      	adds	r2, r7, r4
 800d2e6:	2496      	movs	r4, #150	; 0x96
 800d2e8:	0064      	lsls	r4, r4, #1
 800d2ea:	193b      	adds	r3, r7, r4
 800d2ec:	0011      	movs	r1, r2
 800d2ee:	0018      	movs	r0, r3
 800d2f0:	f7fe ffef 	bl	800c2d2 <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d2f4:	0021      	movs	r1, r4
 800d2f6:	187b      	adds	r3, r7, r1
 800d2f8:	78db      	ldrb	r3, [r3, #3]
 800d2fa:	061a      	lsls	r2, r3, #24
 800d2fc:	187b      	adds	r3, r7, r1
 800d2fe:	789b      	ldrb	r3, [r3, #2]
 800d300:	041b      	lsls	r3, r3, #16
 800d302:	431a      	orrs	r2, r3
 800d304:	187b      	adds	r3, r7, r1
 800d306:	785b      	ldrb	r3, [r3, #1]
 800d308:	021b      	lsls	r3, r3, #8
 800d30a:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800d30c:	187a      	adds	r2, r7, r1
 800d30e:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d310:	431a      	orrs	r2, r3
 800d312:	23a8      	movs	r3, #168	; 0xa8
 800d314:	005b      	lsls	r3, r3, #1
 800d316:	2108      	movs	r1, #8
 800d318:	468c      	mov	ip, r1
 800d31a:	44bc      	add	ip, r7
 800d31c:	4463      	add	r3, ip
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d322:	2340      	movs	r3, #64	; 0x40
 800d324:	33ff      	adds	r3, #255	; 0xff
 800d326:	18fb      	adds	r3, r7, r3
 800d328:	781b      	ldrb	r3, [r3, #0]
}
 800d32a:	0018      	movs	r0, r3
 800d32c:	46bd      	mov	sp, r7
 800d32e:	b051      	add	sp, #324	; 0x144
 800d330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d332:	46c0      	nop			; (mov r8, r8)
 800d334:	fffffec6 	.word	0xfffffec6
 800d338:	fffffec5 	.word	0xfffffec5

0800d33c <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800d33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d33e:	46de      	mov	lr, fp
 800d340:	4657      	mov	r7, sl
 800d342:	464e      	mov	r6, r9
 800d344:	4645      	mov	r5, r8
 800d346:	b5e0      	push	{r5, r6, r7, lr}
 800d348:	b099      	sub	sp, #100	; 0x64
 800d34a:	af10      	add	r7, sp, #64	; 0x40
 800d34c:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d34e:	250f      	movs	r5, #15
 800d350:	2610      	movs	r6, #16
 800d352:	19bb      	adds	r3, r7, r6
 800d354:	195b      	adds	r3, r3, r5
 800d356:	2206      	movs	r2, #6
 800d358:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800d35a:	49dd      	ldr	r1, [pc, #884]	; (800d6d0 <SecureElementInit+0x394>)
 800d35c:	4bdd      	ldr	r3, [pc, #884]	; (800d6d4 <SecureElementInit+0x398>)
 800d35e:	22aa      	movs	r2, #170	; 0xaa
 800d360:	0018      	movs	r0, r3
 800d362:	f00b ffe3 	bl	801932c <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800d366:	19bb      	adds	r3, r7, r6
 800d368:	195c      	adds	r4, r3, r5
 800d36a:	2308      	movs	r3, #8
 800d36c:	2210      	movs	r2, #16
 800d36e:	4694      	mov	ip, r2
 800d370:	44bc      	add	ip, r7
 800d372:	4463      	add	r3, ip
 800d374:	0019      	movs	r1, r3
 800d376:	2000      	movs	r0, #0
 800d378:	f7ff ff14 	bl	800d1a4 <GetKeyByID>
 800d37c:	0003      	movs	r3, r0
 800d37e:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d380:	4bd5      	ldr	r3, [pc, #852]	; (800d6d8 <SecureElementInit+0x39c>)
 800d382:	2200      	movs	r2, #0
 800d384:	2100      	movs	r1, #0
 800d386:	2002      	movs	r0, #2
 800d388:	f00e fc44 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d38c:	19bb      	adds	r3, r7, r6
 800d38e:	195b      	adds	r3, r3, r5
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d14f      	bne.n	800d436 <SecureElementInit+0xfa>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	785b      	ldrb	r3, [r3, #1]
 800d39a:	001d      	movs	r5, r3
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	789b      	ldrb	r3, [r3, #2]
 800d3a0:	001e      	movs	r6, r3
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	78db      	ldrb	r3, [r3, #3]
 800d3a6:	469c      	mov	ip, r3
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	791b      	ldrb	r3, [r3, #4]
 800d3ac:	4698      	mov	r8, r3
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	795b      	ldrb	r3, [r3, #5]
 800d3b2:	4699      	mov	r9, r3
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	799b      	ldrb	r3, [r3, #6]
 800d3b8:	469a      	mov	sl, r3
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	79db      	ldrb	r3, [r3, #7]
 800d3be:	469b      	mov	fp, r3
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	7a1b      	ldrb	r3, [r3, #8]
 800d3c4:	613b      	str	r3, [r7, #16]
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	7a5b      	ldrb	r3, [r3, #9]
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	7a9b      	ldrb	r3, [r3, #10]
 800d3d0:	60bb      	str	r3, [r7, #8]
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	7adb      	ldrb	r3, [r3, #11]
 800d3d6:	607b      	str	r3, [r7, #4]
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	7b1b      	ldrb	r3, [r3, #12]
 800d3dc:	603b      	str	r3, [r7, #0]
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	7b5b      	ldrb	r3, [r3, #13]
 800d3e2:	001c      	movs	r4, r3
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	7b9b      	ldrb	r3, [r3, #14]
 800d3e8:	0018      	movs	r0, r3
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	7bdb      	ldrb	r3, [r3, #15]
 800d3ee:	0019      	movs	r1, r3
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	7c1b      	ldrb	r3, [r3, #16]
 800d3f4:	4ab9      	ldr	r2, [pc, #740]	; (800d6dc <SecureElementInit+0x3a0>)
 800d3f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3f8:	910e      	str	r1, [sp, #56]	; 0x38
 800d3fa:	900d      	str	r0, [sp, #52]	; 0x34
 800d3fc:	940c      	str	r4, [sp, #48]	; 0x30
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	910b      	str	r1, [sp, #44]	; 0x2c
 800d402:	6879      	ldr	r1, [r7, #4]
 800d404:	910a      	str	r1, [sp, #40]	; 0x28
 800d406:	68b9      	ldr	r1, [r7, #8]
 800d408:	9109      	str	r1, [sp, #36]	; 0x24
 800d40a:	68f9      	ldr	r1, [r7, #12]
 800d40c:	9108      	str	r1, [sp, #32]
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	9307      	str	r3, [sp, #28]
 800d412:	465b      	mov	r3, fp
 800d414:	9306      	str	r3, [sp, #24]
 800d416:	4653      	mov	r3, sl
 800d418:	9305      	str	r3, [sp, #20]
 800d41a:	464b      	mov	r3, r9
 800d41c:	9304      	str	r3, [sp, #16]
 800d41e:	4643      	mov	r3, r8
 800d420:	9303      	str	r3, [sp, #12]
 800d422:	4663      	mov	r3, ip
 800d424:	9302      	str	r3, [sp, #8]
 800d426:	9601      	str	r6, [sp, #4]
 800d428:	9500      	str	r5, [sp, #0]
 800d42a:	0013      	movs	r3, r2
 800d42c:	2200      	movs	r2, #0
 800d42e:	2100      	movs	r1, #0
 800d430:	2002      	movs	r0, #2
 800d432:	f00e fbef 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800d436:	250f      	movs	r5, #15
 800d438:	2610      	movs	r6, #16
 800d43a:	19bb      	adds	r3, r7, r6
 800d43c:	195c      	adds	r4, r3, r5
 800d43e:	2308      	movs	r3, #8
 800d440:	2210      	movs	r2, #16
 800d442:	4694      	mov	ip, r2
 800d444:	44bc      	add	ip, r7
 800d446:	4463      	add	r3, ip
 800d448:	0019      	movs	r1, r3
 800d44a:	2001      	movs	r0, #1
 800d44c:	f7ff feaa 	bl	800d1a4 <GetKeyByID>
 800d450:	0003      	movs	r3, r0
 800d452:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d454:	19bb      	adds	r3, r7, r6
 800d456:	195b      	adds	r3, r3, r5
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d14f      	bne.n	800d4fe <SecureElementInit+0x1c2>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	785b      	ldrb	r3, [r3, #1]
 800d462:	001d      	movs	r5, r3
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	789b      	ldrb	r3, [r3, #2]
 800d468:	001e      	movs	r6, r3
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	78db      	ldrb	r3, [r3, #3]
 800d46e:	469c      	mov	ip, r3
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	791b      	ldrb	r3, [r3, #4]
 800d474:	4698      	mov	r8, r3
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	795b      	ldrb	r3, [r3, #5]
 800d47a:	4699      	mov	r9, r3
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	799b      	ldrb	r3, [r3, #6]
 800d480:	469a      	mov	sl, r3
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	79db      	ldrb	r3, [r3, #7]
 800d486:	469b      	mov	fp, r3
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	7a1b      	ldrb	r3, [r3, #8]
 800d48c:	613b      	str	r3, [r7, #16]
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	7a5b      	ldrb	r3, [r3, #9]
 800d492:	60fb      	str	r3, [r7, #12]
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	7a9b      	ldrb	r3, [r3, #10]
 800d498:	60bb      	str	r3, [r7, #8]
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	7adb      	ldrb	r3, [r3, #11]
 800d49e:	607b      	str	r3, [r7, #4]
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	7b1b      	ldrb	r3, [r3, #12]
 800d4a4:	603b      	str	r3, [r7, #0]
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	7b5b      	ldrb	r3, [r3, #13]
 800d4aa:	001c      	movs	r4, r3
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	7b9b      	ldrb	r3, [r3, #14]
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	7bdb      	ldrb	r3, [r3, #15]
 800d4b6:	0019      	movs	r1, r3
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	7c1b      	ldrb	r3, [r3, #16]
 800d4bc:	4a88      	ldr	r2, [pc, #544]	; (800d6e0 <SecureElementInit+0x3a4>)
 800d4be:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4c0:	910e      	str	r1, [sp, #56]	; 0x38
 800d4c2:	900d      	str	r0, [sp, #52]	; 0x34
 800d4c4:	940c      	str	r4, [sp, #48]	; 0x30
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	910b      	str	r1, [sp, #44]	; 0x2c
 800d4ca:	6879      	ldr	r1, [r7, #4]
 800d4cc:	910a      	str	r1, [sp, #40]	; 0x28
 800d4ce:	68b9      	ldr	r1, [r7, #8]
 800d4d0:	9109      	str	r1, [sp, #36]	; 0x24
 800d4d2:	68f9      	ldr	r1, [r7, #12]
 800d4d4:	9108      	str	r1, [sp, #32]
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	9307      	str	r3, [sp, #28]
 800d4da:	465b      	mov	r3, fp
 800d4dc:	9306      	str	r3, [sp, #24]
 800d4de:	4653      	mov	r3, sl
 800d4e0:	9305      	str	r3, [sp, #20]
 800d4e2:	464b      	mov	r3, r9
 800d4e4:	9304      	str	r3, [sp, #16]
 800d4e6:	4643      	mov	r3, r8
 800d4e8:	9303      	str	r3, [sp, #12]
 800d4ea:	4663      	mov	r3, ip
 800d4ec:	9302      	str	r3, [sp, #8]
 800d4ee:	9601      	str	r6, [sp, #4]
 800d4f0:	9500      	str	r5, [sp, #0]
 800d4f2:	0013      	movs	r3, r2
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	2002      	movs	r0, #2
 800d4fa:	f00e fb8b 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d4fe:	4b79      	ldr	r3, [pc, #484]	; (800d6e4 <SecureElementInit+0x3a8>)
 800d500:	2200      	movs	r2, #0
 800d502:	2100      	movs	r1, #0
 800d504:	2002      	movs	r0, #2
 800d506:	f00e fb85 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800d50a:	250f      	movs	r5, #15
 800d50c:	2610      	movs	r6, #16
 800d50e:	19bb      	adds	r3, r7, r6
 800d510:	195c      	adds	r4, r3, r5
 800d512:	2308      	movs	r3, #8
 800d514:	2210      	movs	r2, #16
 800d516:	4694      	mov	ip, r2
 800d518:	44bc      	add	ip, r7
 800d51a:	4463      	add	r3, ip
 800d51c:	0019      	movs	r1, r3
 800d51e:	2003      	movs	r0, #3
 800d520:	f7ff fe40 	bl	800d1a4 <GetKeyByID>
 800d524:	0003      	movs	r3, r0
 800d526:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d528:	19bb      	adds	r3, r7, r6
 800d52a:	195b      	adds	r3, r3, r5
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d14f      	bne.n	800d5d2 <SecureElementInit+0x296>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	785b      	ldrb	r3, [r3, #1]
 800d536:	001d      	movs	r5, r3
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	789b      	ldrb	r3, [r3, #2]
 800d53c:	001e      	movs	r6, r3
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	78db      	ldrb	r3, [r3, #3]
 800d542:	469c      	mov	ip, r3
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	791b      	ldrb	r3, [r3, #4]
 800d548:	4698      	mov	r8, r3
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	795b      	ldrb	r3, [r3, #5]
 800d54e:	4699      	mov	r9, r3
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	799b      	ldrb	r3, [r3, #6]
 800d554:	469a      	mov	sl, r3
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	79db      	ldrb	r3, [r3, #7]
 800d55a:	469b      	mov	fp, r3
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	7a1b      	ldrb	r3, [r3, #8]
 800d560:	613b      	str	r3, [r7, #16]
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	7a5b      	ldrb	r3, [r3, #9]
 800d566:	60fb      	str	r3, [r7, #12]
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	7a9b      	ldrb	r3, [r3, #10]
 800d56c:	60bb      	str	r3, [r7, #8]
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	7adb      	ldrb	r3, [r3, #11]
 800d572:	607b      	str	r3, [r7, #4]
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	7b1b      	ldrb	r3, [r3, #12]
 800d578:	603b      	str	r3, [r7, #0]
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	7b5b      	ldrb	r3, [r3, #13]
 800d57e:	001c      	movs	r4, r3
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	7b9b      	ldrb	r3, [r3, #14]
 800d584:	0018      	movs	r0, r3
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	7bdb      	ldrb	r3, [r3, #15]
 800d58a:	0019      	movs	r1, r3
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	7c1b      	ldrb	r3, [r3, #16]
 800d590:	4a55      	ldr	r2, [pc, #340]	; (800d6e8 <SecureElementInit+0x3ac>)
 800d592:	930f      	str	r3, [sp, #60]	; 0x3c
 800d594:	910e      	str	r1, [sp, #56]	; 0x38
 800d596:	900d      	str	r0, [sp, #52]	; 0x34
 800d598:	940c      	str	r4, [sp, #48]	; 0x30
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d59e:	6879      	ldr	r1, [r7, #4]
 800d5a0:	910a      	str	r1, [sp, #40]	; 0x28
 800d5a2:	68b9      	ldr	r1, [r7, #8]
 800d5a4:	9109      	str	r1, [sp, #36]	; 0x24
 800d5a6:	68f9      	ldr	r1, [r7, #12]
 800d5a8:	9108      	str	r1, [sp, #32]
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	9307      	str	r3, [sp, #28]
 800d5ae:	465b      	mov	r3, fp
 800d5b0:	9306      	str	r3, [sp, #24]
 800d5b2:	4653      	mov	r3, sl
 800d5b4:	9305      	str	r3, [sp, #20]
 800d5b6:	464b      	mov	r3, r9
 800d5b8:	9304      	str	r3, [sp, #16]
 800d5ba:	4643      	mov	r3, r8
 800d5bc:	9303      	str	r3, [sp, #12]
 800d5be:	4663      	mov	r3, ip
 800d5c0:	9302      	str	r3, [sp, #8]
 800d5c2:	9601      	str	r6, [sp, #4]
 800d5c4:	9500      	str	r5, [sp, #0]
 800d5c6:	0013      	movs	r3, r2
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	2002      	movs	r0, #2
 800d5ce:	f00e fb21 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800d5d2:	250f      	movs	r5, #15
 800d5d4:	2610      	movs	r6, #16
 800d5d6:	19bb      	adds	r3, r7, r6
 800d5d8:	195c      	adds	r4, r3, r5
 800d5da:	2308      	movs	r3, #8
 800d5dc:	2210      	movs	r2, #16
 800d5de:	4694      	mov	ip, r2
 800d5e0:	44bc      	add	ip, r7
 800d5e2:	4463      	add	r3, ip
 800d5e4:	0019      	movs	r1, r3
 800d5e6:	2002      	movs	r0, #2
 800d5e8:	f7ff fddc 	bl	800d1a4 <GetKeyByID>
 800d5ec:	0003      	movs	r3, r0
 800d5ee:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d5f0:	19bb      	adds	r3, r7, r6
 800d5f2:	195b      	adds	r3, r3, r5
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d14f      	bne.n	800d69a <SecureElementInit+0x35e>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	785b      	ldrb	r3, [r3, #1]
 800d5fe:	001d      	movs	r5, r3
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	789b      	ldrb	r3, [r3, #2]
 800d604:	001e      	movs	r6, r3
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	78db      	ldrb	r3, [r3, #3]
 800d60a:	469c      	mov	ip, r3
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	791b      	ldrb	r3, [r3, #4]
 800d610:	4698      	mov	r8, r3
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	795b      	ldrb	r3, [r3, #5]
 800d616:	4699      	mov	r9, r3
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	799b      	ldrb	r3, [r3, #6]
 800d61c:	469a      	mov	sl, r3
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	79db      	ldrb	r3, [r3, #7]
 800d622:	469b      	mov	fp, r3
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	7a1b      	ldrb	r3, [r3, #8]
 800d628:	613b      	str	r3, [r7, #16]
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	7a5b      	ldrb	r3, [r3, #9]
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	7a9b      	ldrb	r3, [r3, #10]
 800d634:	60bb      	str	r3, [r7, #8]
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	7adb      	ldrb	r3, [r3, #11]
 800d63a:	607b      	str	r3, [r7, #4]
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	7b1b      	ldrb	r3, [r3, #12]
 800d640:	603b      	str	r3, [r7, #0]
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	7b5b      	ldrb	r3, [r3, #13]
 800d646:	001c      	movs	r4, r3
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	7b9b      	ldrb	r3, [r3, #14]
 800d64c:	0018      	movs	r0, r3
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	7bdb      	ldrb	r3, [r3, #15]
 800d652:	0019      	movs	r1, r3
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	7c1b      	ldrb	r3, [r3, #16]
 800d658:	4a24      	ldr	r2, [pc, #144]	; (800d6ec <SecureElementInit+0x3b0>)
 800d65a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d65c:	910e      	str	r1, [sp, #56]	; 0x38
 800d65e:	900d      	str	r0, [sp, #52]	; 0x34
 800d660:	940c      	str	r4, [sp, #48]	; 0x30
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	910b      	str	r1, [sp, #44]	; 0x2c
 800d666:	6879      	ldr	r1, [r7, #4]
 800d668:	910a      	str	r1, [sp, #40]	; 0x28
 800d66a:	68b9      	ldr	r1, [r7, #8]
 800d66c:	9109      	str	r1, [sp, #36]	; 0x24
 800d66e:	68f9      	ldr	r1, [r7, #12]
 800d670:	9108      	str	r1, [sp, #32]
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	9307      	str	r3, [sp, #28]
 800d676:	465b      	mov	r3, fp
 800d678:	9306      	str	r3, [sp, #24]
 800d67a:	4653      	mov	r3, sl
 800d67c:	9305      	str	r3, [sp, #20]
 800d67e:	464b      	mov	r3, r9
 800d680:	9304      	str	r3, [sp, #16]
 800d682:	4643      	mov	r3, r8
 800d684:	9303      	str	r3, [sp, #12]
 800d686:	4663      	mov	r3, ip
 800d688:	9302      	str	r3, [sp, #8]
 800d68a:	9601      	str	r6, [sp, #4]
 800d68c:	9500      	str	r5, [sp, #0]
 800d68e:	0013      	movs	r3, r2
 800d690:	2200      	movs	r2, #0
 800d692:	2100      	movs	r1, #0
 800d694:	2002      	movs	r0, #2
 800d696:	f00e fabd 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d003      	beq.n	800d6a8 <SecureElementInit+0x36c>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800d6a0:	4b13      	ldr	r3, [pc, #76]	; (800d6f0 <SecureElementInit+0x3b4>)
 800d6a2:	697a      	ldr	r2, [r7, #20]
 800d6a4:	601a      	str	r2, [r3, #0]
 800d6a6:	e002      	b.n	800d6ae <SecureElementInit+0x372>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800d6a8:	4b11      	ldr	r3, [pc, #68]	; (800d6f0 <SecureElementInit+0x3b4>)
 800d6aa:	4a12      	ldr	r2, [pc, #72]	; (800d6f4 <SecureElementInit+0x3b8>)
 800d6ac:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800d6ae:	4b12      	ldr	r3, [pc, #72]	; (800d6f8 <SecureElementInit+0x3bc>)
 800d6b0:	0018      	movs	r0, r3
 800d6b2:	f7f7 fbcc 	bl	8004e4e <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800d6b6:	4b0e      	ldr	r3, [pc, #56]	; (800d6f0 <SecureElementInit+0x3b4>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800d6bc:	2300      	movs	r3, #0
}
 800d6be:	0018      	movs	r0, r3
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	b009      	add	sp, #36	; 0x24
 800d6c4:	bcf0      	pop	{r4, r5, r6, r7}
 800d6c6:	46bb      	mov	fp, r7
 800d6c8:	46b2      	mov	sl, r6
 800d6ca:	46a9      	mov	r9, r5
 800d6cc:	46a0      	mov	r8, r4
 800d6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6d0:	0801e888 	.word	0x0801e888
 800d6d4:	2000008c 	.word	0x2000008c
 800d6d8:	0801e934 	.word	0x0801e934
 800d6dc:	0801e94c 	.word	0x0801e94c
 800d6e0:	0801e9b0 	.word	0x0801e9b0
 800d6e4:	0801ea14 	.word	0x0801ea14
 800d6e8:	0801ea2c 	.word	0x0801ea2c
 800d6ec:	0801ea90 	.word	0x0801ea90
 800d6f0:	200003b0 	.word	0x200003b0
 800d6f4:	0800d219 	.word	0x0800d219
 800d6f8:	2000007c 	.word	0x2000007c

0800d6fc <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d007      	beq.n	800d71a <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800d70a:	6879      	ldr	r1, [r7, #4]
 800d70c:	4b05      	ldr	r3, [pc, #20]	; (800d724 <SecureElementRestoreNvmCtx+0x28>)
 800d70e:	22ba      	movs	r2, #186	; 0xba
 800d710:	0018      	movs	r0, r3
 800d712:	f00b fe0b 	bl	801932c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d716:	2300      	movs	r3, #0
 800d718:	e000      	b.n	800d71c <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d71a:	2302      	movs	r3, #2
  }
}
 800d71c:	0018      	movs	r0, r3
 800d71e:	46bd      	mov	sp, r7
 800d720:	b002      	add	sp, #8
 800d722:	bd80      	pop	{r7, pc}
 800d724:	2000007c 	.word	0x2000007c

0800d728 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	22ba      	movs	r2, #186	; 0xba
 800d734:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800d736:	4b02      	ldr	r3, [pc, #8]	; (800d740 <SecureElementGetNvmCtx+0x18>)
}
 800d738:	0018      	movs	r0, r3
 800d73a:	46bd      	mov	sp, r7
 800d73c:	b002      	add	sp, #8
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	2000007c 	.word	0x2000007c

0800d744 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800d744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d746:	b089      	sub	sp, #36	; 0x24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	0002      	movs	r2, r0
 800d74c:	6039      	str	r1, [r7, #0]
 800d74e:	1dfb      	adds	r3, r7, #7
 800d750:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d101      	bne.n	800d75c <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d758:	2302      	movs	r3, #2
 800d75a:	e064      	b.n	800d826 <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d75c:	231f      	movs	r3, #31
 800d75e:	18fb      	adds	r3, r7, r3
 800d760:	2200      	movs	r2, #0
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	e059      	b.n	800d81a <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d766:	231f      	movs	r3, #31
 800d768:	18fb      	adds	r3, r7, r3
 800d76a:	781a      	ldrb	r2, [r3, #0]
 800d76c:	4930      	ldr	r1, [pc, #192]	; (800d830 <SecureElementSetKey+0xec>)
 800d76e:	0013      	movs	r3, r2
 800d770:	011b      	lsls	r3, r3, #4
 800d772:	189b      	adds	r3, r3, r2
 800d774:	18cb      	adds	r3, r1, r3
 800d776:	3310      	adds	r3, #16
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	1dfa      	adds	r2, r7, #7
 800d77c:	7812      	ldrb	r2, [r2, #0]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d145      	bne.n	800d80e <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800d782:	1dfb      	adds	r3, r7, #7
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	2b80      	cmp	r3, #128	; 0x80
 800d788:	d12c      	bne.n	800d7e4 <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d78a:	251e      	movs	r5, #30
 800d78c:	197b      	adds	r3, r7, r5
 800d78e:	2206      	movs	r2, #6
 800d790:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800d792:	260c      	movs	r6, #12
 800d794:	19bb      	adds	r3, r7, r6
 800d796:	2200      	movs	r2, #0
 800d798:	601a      	str	r2, [r3, #0]
 800d79a:	3304      	adds	r3, #4
 800d79c:	220c      	movs	r2, #12
 800d79e:	2100      	movs	r1, #0
 800d7a0:	0018      	movs	r0, r3
 800d7a2:	f010 fb1a 	bl	801ddda <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800d7a6:	197c      	adds	r4, r7, r5
 800d7a8:	19bb      	adds	r3, r7, r6
 800d7aa:	6838      	ldr	r0, [r7, #0]
 800d7ac:	227f      	movs	r2, #127	; 0x7f
 800d7ae:	2110      	movs	r1, #16
 800d7b0:	f000 f8a5 	bl	800d8fe <SecureElementAesEncrypt>
 800d7b4:	0003      	movs	r3, r0
 800d7b6:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800d7b8:	231f      	movs	r3, #31
 800d7ba:	18fb      	adds	r3, r7, r3
 800d7bc:	781a      	ldrb	r2, [r3, #0]
 800d7be:	0013      	movs	r3, r2
 800d7c0:	011b      	lsls	r3, r3, #4
 800d7c2:	189b      	adds	r3, r3, r2
 800d7c4:	3310      	adds	r3, #16
 800d7c6:	001a      	movs	r2, r3
 800d7c8:	4b19      	ldr	r3, [pc, #100]	; (800d830 <SecureElementSetKey+0xec>)
 800d7ca:	18d3      	adds	r3, r2, r3
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	19b9      	adds	r1, r7, r6
 800d7d0:	2210      	movs	r2, #16
 800d7d2:	0018      	movs	r0, r3
 800d7d4:	f00b fdaa 	bl	801932c <memcpy1>
        SeNvmCtxChanged();
 800d7d8:	4b16      	ldr	r3, [pc, #88]	; (800d834 <SecureElementSetKey+0xf0>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4798      	blx	r3

        return retval;
 800d7de:	197b      	adds	r3, r7, r5
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	e020      	b.n	800d826 <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800d7e4:	231f      	movs	r3, #31
 800d7e6:	18fb      	adds	r3, r7, r3
 800d7e8:	781a      	ldrb	r2, [r3, #0]
 800d7ea:	0013      	movs	r3, r2
 800d7ec:	011b      	lsls	r3, r3, #4
 800d7ee:	189b      	adds	r3, r3, r2
 800d7f0:	3310      	adds	r3, #16
 800d7f2:	001a      	movs	r2, r3
 800d7f4:	4b0e      	ldr	r3, [pc, #56]	; (800d830 <SecureElementSetKey+0xec>)
 800d7f6:	18d3      	adds	r3, r2, r3
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	2210      	movs	r2, #16
 800d7fe:	0018      	movs	r0, r3
 800d800:	f00b fd94 	bl	801932c <memcpy1>
        SeNvmCtxChanged();
 800d804:	4b0b      	ldr	r3, [pc, #44]	; (800d834 <SecureElementSetKey+0xf0>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800d80a:	2300      	movs	r3, #0
 800d80c:	e00b      	b.n	800d826 <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d80e:	211f      	movs	r1, #31
 800d810:	187b      	adds	r3, r7, r1
 800d812:	781a      	ldrb	r2, [r3, #0]
 800d814:	187b      	adds	r3, r7, r1
 800d816:	3201      	adds	r2, #1
 800d818:	701a      	strb	r2, [r3, #0]
 800d81a:	231f      	movs	r3, #31
 800d81c:	18fb      	adds	r3, r7, r3
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b09      	cmp	r3, #9
 800d822:	d9a0      	bls.n	800d766 <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d824:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800d826:	0018      	movs	r0, r3
 800d828:	46bd      	mov	sp, r7
 800d82a:	b009      	add	sp, #36	; 0x24
 800d82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d82e:	46c0      	nop			; (mov r8, r8)
 800d830:	2000007c 	.word	0x2000007c
 800d834:	200003b0 	.word	0x200003b0

0800d838 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800d838:	b590      	push	{r4, r7, lr}
 800d83a:	b087      	sub	sp, #28
 800d83c:	af02      	add	r7, sp, #8
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	0019      	movs	r1, r3
 800d844:	1dbb      	adds	r3, r7, #6
 800d846:	801a      	strh	r2, [r3, #0]
 800d848:	1d7b      	adds	r3, r7, #5
 800d84a:	1c0a      	adds	r2, r1, #0
 800d84c:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800d84e:	1d7b      	adds	r3, r7, #5
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	2b7e      	cmp	r3, #126	; 0x7e
 800d854:	d901      	bls.n	800d85a <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d856:	2303      	movs	r3, #3
 800d858:	e00b      	b.n	800d872 <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800d85a:	1d7b      	adds	r3, r7, #5
 800d85c:	781c      	ldrb	r4, [r3, #0]
 800d85e:	1dbb      	adds	r3, r7, #6
 800d860:	881a      	ldrh	r2, [r3, #0]
 800d862:	68b9      	ldr	r1, [r7, #8]
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	6a3b      	ldr	r3, [r7, #32]
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	0023      	movs	r3, r4
 800d86c:	f7ff fcda 	bl	800d224 <ComputeCmac>
 800d870:	0003      	movs	r3, r0
}
 800d872:	0018      	movs	r0, r3
 800d874:	46bd      	mov	sp, r7
 800d876:	b005      	add	sp, #20
 800d878:	bd90      	pop	{r4, r7, pc}

0800d87a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800d87a:	b5b0      	push	{r4, r5, r7, lr}
 800d87c:	b088      	sub	sp, #32
 800d87e:	af02      	add	r7, sp, #8
 800d880:	60f8      	str	r0, [r7, #12]
 800d882:	0008      	movs	r0, r1
 800d884:	607a      	str	r2, [r7, #4]
 800d886:	0019      	movs	r1, r3
 800d888:	230a      	movs	r3, #10
 800d88a:	18fb      	adds	r3, r7, r3
 800d88c:	1c02      	adds	r2, r0, #0
 800d88e:	801a      	strh	r2, [r3, #0]
 800d890:	2309      	movs	r3, #9
 800d892:	18fb      	adds	r3, r7, r3
 800d894:	1c0a      	adds	r2, r1, #0
 800d896:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d898:	2317      	movs	r3, #23
 800d89a:	18fb      	adds	r3, r7, r3
 800d89c:	2206      	movs	r2, #6
 800d89e:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d8a6:	2302      	movs	r3, #2
 800d8a8:	e025      	b.n	800d8f6 <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800d8ae:	2517      	movs	r5, #23
 800d8b0:	197c      	adds	r4, r7, r5
 800d8b2:	2309      	movs	r3, #9
 800d8b4:	18fb      	adds	r3, r7, r3
 800d8b6:	7818      	ldrb	r0, [r3, #0]
 800d8b8:	230a      	movs	r3, #10
 800d8ba:	18fb      	adds	r3, r7, r3
 800d8bc:	881a      	ldrh	r2, [r3, #0]
 800d8be:	68f9      	ldr	r1, [r7, #12]
 800d8c0:	2310      	movs	r3, #16
 800d8c2:	18fb      	adds	r3, r7, r3
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	0003      	movs	r3, r0
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	f7ff fcab 	bl	800d224 <ComputeCmac>
 800d8ce:	0003      	movs	r3, r0
 800d8d0:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d8d2:	197b      	adds	r3, r7, r5
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d002      	beq.n	800d8e0 <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800d8da:	197b      	adds	r3, r7, r5
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	e00a      	b.n	800d8f6 <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d003      	beq.n	800d8f0 <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800d8e8:	2317      	movs	r3, #23
 800d8ea:	18fb      	adds	r3, r7, r3
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800d8f0:	2317      	movs	r3, #23
 800d8f2:	18fb      	adds	r3, r7, r3
 800d8f4:	781b      	ldrb	r3, [r3, #0]
}
 800d8f6:	0018      	movs	r0, r3
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	b006      	add	sp, #24
 800d8fc:	bdb0      	pop	{r4, r5, r7, pc}

0800d8fe <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800d8fe:	b5b0      	push	{r4, r5, r7, lr}
 800d900:	b0c2      	sub	sp, #264	; 0x108
 800d902:	af00      	add	r7, sp, #0
 800d904:	60f8      	str	r0, [r7, #12]
 800d906:	0008      	movs	r0, r1
 800d908:	0011      	movs	r1, r2
 800d90a:	607b      	str	r3, [r7, #4]
 800d90c:	230a      	movs	r3, #10
 800d90e:	18fb      	adds	r3, r7, r3
 800d910:	1c02      	adds	r2, r0, #0
 800d912:	801a      	strh	r2, [r3, #0]
 800d914:	2309      	movs	r3, #9
 800d916:	18fb      	adds	r3, r7, r3
 800d918:	1c0a      	adds	r2, r1, #0
 800d91a:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d91c:	1dfb      	adds	r3, r7, #7
 800d91e:	33ff      	adds	r3, #255	; 0xff
 800d920:	2206      	movs	r2, #6
 800d922:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d002      	beq.n	800d930 <SecureElementAesEncrypt+0x32>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d101      	bne.n	800d934 <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d930:	2302      	movs	r3, #2
 800d932:	e051      	b.n	800d9d8 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800d934:	230a      	movs	r3, #10
 800d936:	18fb      	adds	r3, r7, r3
 800d938:	881b      	ldrh	r3, [r3, #0]
 800d93a:	220f      	movs	r2, #15
 800d93c:	4013      	ands	r3, r2
 800d93e:	b29b      	uxth	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d001      	beq.n	800d948 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d944:	2305      	movs	r3, #5
 800d946:	e047      	b.n	800d9d8 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800d948:	2514      	movs	r5, #20
 800d94a:	197b      	adds	r3, r7, r5
 800d94c:	22f0      	movs	r2, #240	; 0xf0
 800d94e:	2100      	movs	r1, #0
 800d950:	0018      	movs	r0, r3
 800d952:	f00b fd29 	bl	80193a8 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800d956:	1dfc      	adds	r4, r7, #7
 800d958:	34ff      	adds	r4, #255	; 0xff
 800d95a:	2310      	movs	r3, #16
 800d95c:	18fa      	adds	r2, r7, r3
 800d95e:	2309      	movs	r3, #9
 800d960:	18fb      	adds	r3, r7, r3
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	0011      	movs	r1, r2
 800d966:	0018      	movs	r0, r3
 800d968:	f7ff fc1c 	bl	800d1a4 <GetKeyByID>
 800d96c:	0003      	movs	r3, r0
 800d96e:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d970:	1dfb      	adds	r3, r7, #7
 800d972:	33ff      	adds	r3, #255	; 0xff
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d12b      	bne.n	800d9d2 <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	3301      	adds	r3, #1
 800d97e:	197a      	adds	r2, r7, r5
 800d980:	2110      	movs	r1, #16
 800d982:	0018      	movs	r0, r3
 800d984:	f7ff fa88 	bl	800ce98 <lorawan_aes_set_key>

    uint8_t block = 0;
 800d988:	2308      	movs	r3, #8
 800d98a:	33ff      	adds	r3, #255	; 0xff
 800d98c:	18fb      	adds	r3, r7, r3
 800d98e:	2200      	movs	r2, #0
 800d990:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800d992:	e019      	b.n	800d9c8 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d994:	2408      	movs	r4, #8
 800d996:	34ff      	adds	r4, #255	; 0xff
 800d998:	193b      	adds	r3, r7, r4
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	18d0      	adds	r0, r2, r3
 800d9a0:	193b      	adds	r3, r7, r4
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	18d3      	adds	r3, r2, r3
 800d9a8:	2214      	movs	r2, #20
 800d9aa:	18ba      	adds	r2, r7, r2
 800d9ac:	0019      	movs	r1, r3
 800d9ae:	f7ff fbaf 	bl	800d110 <lorawan_aes_encrypt>
      block = block + 16;
 800d9b2:	193b      	adds	r3, r7, r4
 800d9b4:	193a      	adds	r2, r7, r4
 800d9b6:	7812      	ldrb	r2, [r2, #0]
 800d9b8:	3210      	adds	r2, #16
 800d9ba:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800d9bc:	220a      	movs	r2, #10
 800d9be:	18bb      	adds	r3, r7, r2
 800d9c0:	18ba      	adds	r2, r7, r2
 800d9c2:	8812      	ldrh	r2, [r2, #0]
 800d9c4:	3a10      	subs	r2, #16
 800d9c6:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800d9c8:	230a      	movs	r3, #10
 800d9ca:	18fb      	adds	r3, r7, r3
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1e0      	bne.n	800d994 <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d9d2:	1dfb      	adds	r3, r7, #7
 800d9d4:	33ff      	adds	r3, #255	; 0xff
 800d9d6:	781b      	ldrb	r3, [r3, #0]
}
 800d9d8:	0018      	movs	r0, r3
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	b042      	add	sp, #264	; 0x108
 800d9de:	bdb0      	pop	{r4, r5, r7, pc}

0800d9e0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800d9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9e2:	b08b      	sub	sp, #44	; 0x2c
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	0019      	movs	r1, r3
 800d9ec:	1dfb      	adds	r3, r7, #7
 800d9ee:	701a      	strb	r2, [r3, #0]
 800d9f0:	1dbb      	adds	r3, r7, #6
 800d9f2:	1c0a      	adds	r2, r1, #0
 800d9f4:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d9f6:	2327      	movs	r3, #39	; 0x27
 800d9f8:	18fb      	adds	r3, r7, r3
 800d9fa:	2206      	movs	r2, #6
 800d9fc:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800da04:	2302      	movs	r3, #2
 800da06:	e03c      	b.n	800da82 <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800da08:	1dbb      	adds	r3, r7, #6
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	2b7f      	cmp	r3, #127	; 0x7f
 800da0e:	d105      	bne.n	800da1c <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800da10:	1dfb      	adds	r3, r7, #7
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b04      	cmp	r3, #4
 800da16:	d001      	beq.n	800da1c <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800da18:	2303      	movs	r3, #3
 800da1a:	e032      	b.n	800da82 <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800da1c:	2614      	movs	r6, #20
 800da1e:	19bb      	adds	r3, r7, r6
 800da20:	2200      	movs	r2, #0
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	3304      	adds	r3, #4
 800da26:	220c      	movs	r2, #12
 800da28:	2100      	movs	r1, #0
 800da2a:	0018      	movs	r0, r3
 800da2c:	f010 f9d5 	bl	801ddda <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800da30:	2527      	movs	r5, #39	; 0x27
 800da32:	197c      	adds	r4, r7, r5
 800da34:	19b9      	adds	r1, r7, r6
 800da36:	1dfb      	adds	r3, r7, #7
 800da38:	781a      	ldrb	r2, [r3, #0]
 800da3a:	68b8      	ldr	r0, [r7, #8]
 800da3c:	000b      	movs	r3, r1
 800da3e:	2110      	movs	r1, #16
 800da40:	f7ff ff5d 	bl	800d8fe <SecureElementAesEncrypt>
 800da44:	0003      	movs	r3, r0
 800da46:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800da48:	197b      	adds	r3, r7, r5
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800da50:	197b      	adds	r3, r7, r5
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	e015      	b.n	800da82 <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800da56:	2527      	movs	r5, #39	; 0x27
 800da58:	197c      	adds	r4, r7, r5
 800da5a:	2314      	movs	r3, #20
 800da5c:	18fa      	adds	r2, r7, r3
 800da5e:	1dbb      	adds	r3, r7, #6
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	0011      	movs	r1, r2
 800da64:	0018      	movs	r0, r3
 800da66:	f7ff fe6d 	bl	800d744 <SecureElementSetKey>
 800da6a:	0003      	movs	r3, r0
 800da6c:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800da6e:	197b      	adds	r3, r7, r5
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d002      	beq.n	800da7c <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800da76:	197b      	adds	r3, r7, r5
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	e002      	b.n	800da82 <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800da7c:	2327      	movs	r3, #39	; 0x27
 800da7e:	18fb      	adds	r3, r7, r3
 800da80:	781b      	ldrb	r3, [r3, #0]
}
 800da82:	0018      	movs	r0, r3
 800da84:	46bd      	mov	sp, r7
 800da86:	b00b      	add	sp, #44	; 0x2c
 800da88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da8a <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800da8a:	b5b0      	push	{r4, r5, r7, lr}
 800da8c:	b086      	sub	sp, #24
 800da8e:	af00      	add	r7, sp, #0
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	0011      	movs	r1, r2
 800da94:	607b      	str	r3, [r7, #4]
 800da96:	230f      	movs	r3, #15
 800da98:	18fb      	adds	r3, r7, r3
 800da9a:	1c02      	adds	r2, r0, #0
 800da9c:	701a      	strb	r2, [r3, #0]
 800da9e:	230c      	movs	r3, #12
 800daa0:	18fb      	adds	r3, r7, r3
 800daa2:	1c0a      	adds	r2, r1, #0
 800daa4:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d005      	beq.n	800dab8 <SecureElementProcessJoinAccept+0x2e>
 800daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d002      	beq.n	800dab8 <SecureElementProcessJoinAccept+0x2e>
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d101      	bne.n	800dabc <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dab8:	2302      	movs	r3, #2
 800daba:	e069      	b.n	800db90 <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800dabc:	2328      	movs	r3, #40	; 0x28
 800dabe:	18fb      	adds	r3, r7, r3
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2b21      	cmp	r3, #33	; 0x21
 800dac4:	d901      	bls.n	800daca <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dac6:	2305      	movs	r3, #5
 800dac8:	e062      	b.n	800db90 <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800daca:	2517      	movs	r5, #23
 800dacc:	197b      	adds	r3, r7, r5
 800dace:	2201      	movs	r2, #1
 800dad0:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800dad2:	2428      	movs	r4, #40	; 0x28
 800dad4:	193b      	adds	r3, r7, r4
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	b29a      	uxth	r2, r3
 800dada:	6879      	ldr	r1, [r7, #4]
 800dadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dade:	0018      	movs	r0, r3
 800dae0:	f00b fc24 	bl	801932c <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	1c58      	adds	r0, r3, #1
 800dae8:	193b      	adds	r3, r7, r4
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	b29b      	uxth	r3, r3
 800daee:	3b01      	subs	r3, #1
 800daf0:	b299      	uxth	r1, r3
 800daf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf4:	1c5c      	adds	r4, r3, #1
 800daf6:	197b      	adds	r3, r7, r5
 800daf8:	781a      	ldrb	r2, [r3, #0]
 800dafa:	0023      	movs	r3, r4
 800dafc:	f7ff feff 	bl	800d8fe <SecureElementAesEncrypt>
 800db00:	1e03      	subs	r3, r0, #0
 800db02:	d001      	beq.n	800db08 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800db04:	2307      	movs	r3, #7
 800db06:	e043      	b.n	800db90 <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	330b      	adds	r3, #11
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	09db      	lsrs	r3, r3, #7
 800db10:	b2da      	uxtb	r2, r3
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800db1a:	2128      	movs	r1, #40	; 0x28
 800db1c:	187b      	adds	r3, r7, r1
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	3b04      	subs	r3, #4
 800db22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db24:	18d3      	adds	r3, r2, r3
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800db2a:	187b      	adds	r3, r7, r1
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	3b03      	subs	r3, #3
 800db30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db32:	18d3      	adds	r3, r2, r3
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	021b      	lsls	r3, r3, #8
 800db38:	693a      	ldr	r2, [r7, #16]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800db3e:	187b      	adds	r3, r7, r1
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	3b02      	subs	r3, #2
 800db44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db46:	18d3      	adds	r3, r2, r3
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	041b      	lsls	r3, r3, #16
 800db4c:	693a      	ldr	r2, [r7, #16]
 800db4e:	4313      	orrs	r3, r2
 800db50:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800db52:	187b      	adds	r3, r7, r1
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	3b01      	subs	r3, #1
 800db58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db5a:	18d3      	adds	r3, r2, r3
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	061b      	lsls	r3, r3, #24
 800db60:	693a      	ldr	r2, [r7, #16]
 800db62:	4313      	orrs	r3, r2
 800db64:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10d      	bne.n	800db8a <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800db6e:	187b      	adds	r3, r7, r1
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	b29b      	uxth	r3, r3
 800db74:	3b04      	subs	r3, #4
 800db76:	b299      	uxth	r1, r3
 800db78:	693a      	ldr	r2, [r7, #16]
 800db7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db7c:	2301      	movs	r3, #1
 800db7e:	f7ff fe7c 	bl	800d87a <SecureElementVerifyAesCmac>
 800db82:	1e03      	subs	r3, r0, #0
 800db84:	d003      	beq.n	800db8e <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800db86:	2301      	movs	r3, #1
 800db88:	e002      	b.n	800db90 <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800db8a:	2304      	movs	r3, #4
 800db8c:	e000      	b.n	800db90 <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	0018      	movs	r0, r3
 800db92:	46bd      	mov	sp, r7
 800db94:	b006      	add	sp, #24
 800db96:	bdb0      	pop	{r4, r5, r7, pc}

0800db98 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dba6:	2302      	movs	r3, #2
 800dba8:	e006      	b.n	800dbb8 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800dbaa:	4b05      	ldr	r3, [pc, #20]	; (800dbc0 <SecureElementRandomNumber+0x28>)
 800dbac:	695b      	ldr	r3, [r3, #20]
 800dbae:	4798      	blx	r3
 800dbb0:	0002      	movs	r2, r0
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	0018      	movs	r0, r3
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	b002      	add	sp, #8
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	0801f0bc 	.word	0x0801f0bc

0800dbc4 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d101      	bne.n	800dbd6 <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	e009      	b.n	800dbea <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800dbd6:	6879      	ldr	r1, [r7, #4]
 800dbd8:	4b06      	ldr	r3, [pc, #24]	; (800dbf4 <SecureElementSetDevEui+0x30>)
 800dbda:	2208      	movs	r2, #8
 800dbdc:	0018      	movs	r0, r3
 800dbde:	f00b fba5 	bl	801932c <memcpy1>
  SeNvmCtxChanged();
 800dbe2:	4b05      	ldr	r3, [pc, #20]	; (800dbf8 <SecureElementSetDevEui+0x34>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	0018      	movs	r0, r3
 800dbec:	46bd      	mov	sp, r7
 800dbee:	b002      	add	sp, #8
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	46c0      	nop			; (mov r8, r8)
 800dbf4:	2000007c 	.word	0x2000007c
 800dbf8:	200003b0 	.word	0x200003b0

0800dbfc <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800dc00:	4b01      	ldr	r3, [pc, #4]	; (800dc08 <SecureElementGetDevEui+0xc>)
}
 800dc02:	0018      	movs	r0, r3
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	2000007c 	.word	0x2000007c

0800dc0c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	e009      	b.n	800dc32 <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800dc1e:	6879      	ldr	r1, [r7, #4]
 800dc20:	4b06      	ldr	r3, [pc, #24]	; (800dc3c <SecureElementSetJoinEui+0x30>)
 800dc22:	2208      	movs	r2, #8
 800dc24:	0018      	movs	r0, r3
 800dc26:	f00b fb81 	bl	801932c <memcpy1>
  SeNvmCtxChanged();
 800dc2a:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <SecureElementSetJoinEui+0x34>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	0018      	movs	r0, r3
 800dc34:	46bd      	mov	sp, r7
 800dc36:	b002      	add	sp, #8
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	46c0      	nop			; (mov r8, r8)
 800dc3c:	20000084 	.word	0x20000084
 800dc40:	200003b0 	.word	0x200003b0

0800dc44 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800dc48:	4b01      	ldr	r3, [pc, #4]	; (800dc50 <SecureElementGetJoinEui+0xc>)
}
 800dc4a:	0018      	movs	r0, r3
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	20000084 	.word	0x20000084

0800dc54 <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	4b17      	ldr	r3, [pc, #92]	; (800dcbc <LmHandlerInit+0x68>)
 800dc60:	2220      	movs	r2, #32
 800dc62:	0018      	movs	r0, r3
 800dc64:	f00e fb56 	bl	801c314 <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dc68:	4b15      	ldr	r3, [pc, #84]	; (800dcc0 <LmHandlerInit+0x6c>)
 800dc6a:	4a16      	ldr	r2, [pc, #88]	; (800dcc4 <LmHandlerInit+0x70>)
 800dc6c:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800dc6e:	4b14      	ldr	r3, [pc, #80]	; (800dcc0 <LmHandlerInit+0x6c>)
 800dc70:	4a15      	ldr	r2, [pc, #84]	; (800dcc8 <LmHandlerInit+0x74>)
 800dc72:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800dc74:	4b12      	ldr	r3, [pc, #72]	; (800dcc0 <LmHandlerInit+0x6c>)
 800dc76:	4a15      	ldr	r2, [pc, #84]	; (800dccc <LmHandlerInit+0x78>)
 800dc78:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800dc7a:	4b11      	ldr	r3, [pc, #68]	; (800dcc0 <LmHandlerInit+0x6c>)
 800dc7c:	4a14      	ldr	r2, [pc, #80]	; (800dcd0 <LmHandlerInit+0x7c>)
 800dc7e:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800dc80:	4b0e      	ldr	r3, [pc, #56]	; (800dcbc <LmHandlerInit+0x68>)
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	4b13      	ldr	r3, [pc, #76]	; (800dcd4 <LmHandlerInit+0x80>)
 800dc86:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800dc88:	4b0c      	ldr	r3, [pc, #48]	; (800dcbc <LmHandlerInit+0x68>)
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	4b11      	ldr	r3, [pc, #68]	; (800dcd4 <LmHandlerInit+0x80>)
 800dc8e:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800dc90:	4b10      	ldr	r3, [pc, #64]	; (800dcd4 <LmHandlerInit+0x80>)
 800dc92:	4a11      	ldr	r2, [pc, #68]	; (800dcd8 <LmHandlerInit+0x84>)
 800dc94:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800dc96:	4b09      	ldr	r3, [pc, #36]	; (800dcbc <LmHandlerInit+0x68>)
 800dc98:	689a      	ldr	r2, [r3, #8]
 800dc9a:	4b0e      	ldr	r3, [pc, #56]	; (800dcd4 <LmHandlerInit+0x80>)
 800dc9c:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800dc9e:	4b0f      	ldr	r3, [pc, #60]	; (800dcdc <LmHandlerInit+0x88>)
 800dca0:	0019      	movs	r1, r3
 800dca2:	2000      	movs	r0, #0
 800dca4:	f000 fb18 	bl	800e2d8 <LmHandlerPackageRegister>
 800dca8:	1e03      	subs	r3, r0, #0
 800dcaa:	d002      	beq.n	800dcb2 <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800dcac:	2301      	movs	r3, #1
 800dcae:	425b      	negs	r3, r3
 800dcb0:	e000      	b.n	800dcb4 <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	0018      	movs	r0, r3
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	b002      	add	sp, #8
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	200003d0 	.word	0x200003d0
 800dcc0:	200003f0 	.word	0x200003f0
 800dcc4:	0800e445 	.word	0x0800e445
 800dcc8:	0800e4b1 	.word	0x0800e4b1
 800dccc:	0800e59d 	.word	0x0800e59d
 800dcd0:	0800e645 	.word	0x0800e645
 800dcd4:	20000400 	.word	0x20000400
 800dcd8:	0800ede3 	.word	0x0800ede3
 800dcdc:	20000150 	.word	0x20000150

0800dce0 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800dce0:	b590      	push	{r4, r7, lr}
 800dce2:	b091      	sub	sp, #68	; 0x44
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800dce8:	6879      	ldr	r1, [r7, #4]
 800dcea:	4b50      	ldr	r3, [pc, #320]	; (800de2c <LmHandlerConfigure+0x14c>)
 800dcec:	2206      	movs	r2, #6
 800dcee:	0018      	movs	r0, r3
 800dcf0:	f00e fb10 	bl	801c314 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800dcf4:	f7f5 fd3a 	bl	800376c <LoraInfo_GetPtr>
 800dcf8:	0003      	movs	r3, r0
 800dcfa:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800dcfc:	4b4b      	ldr	r3, [pc, #300]	; (800de2c <LmHandlerConfigure+0x14c>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	001a      	movs	r2, r3
 800dd02:	2301      	movs	r3, #1
 800dd04:	4093      	lsls	r3, r2
 800dd06:	001a      	movs	r2, r3
 800dd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	4013      	ands	r3, r2
 800dd0e:	d00b      	beq.n	800dd28 <LmHandlerConfigure+0x48>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800dd10:	4b46      	ldr	r3, [pc, #280]	; (800de2c <LmHandlerConfigure+0x14c>)
 800dd12:	781a      	ldrb	r2, [r3, #0]
 800dd14:	4946      	ldr	r1, [pc, #280]	; (800de30 <LmHandlerConfigure+0x150>)
 800dd16:	4b47      	ldr	r3, [pc, #284]	; (800de34 <LmHandlerConfigure+0x154>)
 800dd18:	0018      	movs	r0, r3
 800dd1a:	f004 ff87 	bl	8012c2c <LoRaMacInitialization>
 800dd1e:	1e03      	subs	r3, r0, #0
 800dd20:	d009      	beq.n	800dd36 <LmHandlerConfigure+0x56>
    {
      return LORAMAC_HANDLER_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	425b      	negs	r3, r3
 800dd26:	e07d      	b.n	800de24 <LmHandlerConfigure+0x144>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800dd28:	4b43      	ldr	r3, [pc, #268]	; (800de38 <LmHandlerConfigure+0x158>)
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	2000      	movs	r0, #0
 800dd30:	f00d ff70 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800dd34:	e7fe      	b.n	800dd34 <LmHandlerConfigure+0x54>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800dd36:	f001 f864 	bl	800ee02 <NvmCtxMgmtRestore>
 800dd3a:	1e03      	subs	r3, r0, #0
 800dd3c:	d103      	bne.n	800dd46 <LmHandlerConfigure+0x66>
  {
    CtxRestoreDone = true;
 800dd3e:	4b3f      	ldr	r3, [pc, #252]	; (800de3c <LmHandlerConfigure+0x15c>)
 800dd40:	2201      	movs	r2, #1
 800dd42:	701a      	strb	r2, [r3, #0]
 800dd44:	e021      	b.n	800dd8a <LmHandlerConfigure+0xaa>
  }
  else
  {
    CtxRestoreDone = false;
 800dd46:	4b3d      	ldr	r3, [pc, #244]	; (800de3c <LmHandlerConfigure+0x15c>)
 800dd48:	2200      	movs	r2, #0
 800dd4a:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800dd4c:	2418      	movs	r4, #24
 800dd4e:	193b      	adds	r3, r7, r4
 800dd50:	2202      	movs	r2, #2
 800dd52:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800dd54:	193b      	adds	r3, r7, r4
 800dd56:	0018      	movs	r0, r3
 800dd58:	f005 fbca 	bl	80134f0 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800dd5c:	193b      	adds	r3, r7, r4
 800dd5e:	6859      	ldr	r1, [r3, #4]
 800dd60:	4b37      	ldr	r3, [pc, #220]	; (800de40 <LmHandlerConfigure+0x160>)
 800dd62:	2208      	movs	r2, #8
 800dd64:	0018      	movs	r0, r3
 800dd66:	f00b fae1 	bl	801932c <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800dd6a:	0021      	movs	r1, r4
 800dd6c:	187b      	adds	r3, r7, r1
 800dd6e:	2203      	movs	r2, #3
 800dd70:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800dd72:	000c      	movs	r4, r1
 800dd74:	187b      	adds	r3, r7, r1
 800dd76:	0018      	movs	r0, r3
 800dd78:	f005 fbba 	bl	80134f0 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800dd7c:	193b      	adds	r3, r7, r4
 800dd7e:	6859      	ldr	r1, [r3, #4]
 800dd80:	4b30      	ldr	r3, [pc, #192]	; (800de44 <LmHandlerConfigure+0x164>)
 800dd82:	2208      	movs	r2, #8
 800dd84:	0018      	movs	r0, r3
 800dd86:	f00b fad1 	bl	801932c <memcpy1>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800dd8a:	2118      	movs	r1, #24
 800dd8c:	187b      	adds	r3, r7, r1
 800dd8e:	220f      	movs	r2, #15
 800dd90:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800dd92:	187b      	adds	r3, r7, r1
 800dd94:	2201      	movs	r2, #1
 800dd96:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800dd98:	000c      	movs	r4, r1
 800dd9a:	187b      	adds	r3, r7, r1
 800dd9c:	0018      	movs	r0, r3
 800dd9e:	f005 fd05 	bl	80137ac <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800dda2:	0021      	movs	r1, r4
 800dda4:	187b      	adds	r3, r7, r1
 800dda6:	2210      	movs	r2, #16
 800dda8:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ddaa:	187b      	adds	r3, r7, r1
 800ddac:	2200      	movs	r2, #0
 800ddae:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800ddb0:	000c      	movs	r4, r1
 800ddb2:	187b      	adds	r3, r7, r1
 800ddb4:	0018      	movs	r0, r3
 800ddb6:	f005 fcf9 	bl	80137ac <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800ddba:	0021      	movs	r1, r4
 800ddbc:	187b      	adds	r3, r7, r1
 800ddbe:	2204      	movs	r2, #4
 800ddc0:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ddc2:	4b1a      	ldr	r3, [pc, #104]	; (800de2c <LmHandlerConfigure+0x14c>)
 800ddc4:	789a      	ldrb	r2, [r3, #2]
 800ddc6:	187b      	adds	r3, r7, r1
 800ddc8:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800ddca:	000c      	movs	r4, r1
 800ddcc:	187b      	adds	r3, r7, r1
 800ddce:	0018      	movs	r0, r3
 800ddd0:	f005 fcec 	bl	80137ac <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ddd4:	0021      	movs	r1, r4
 800ddd6:	187b      	adds	r3, r7, r1
 800ddd8:	2222      	movs	r2, #34	; 0x22
 800ddda:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800dddc:	187b      	adds	r3, r7, r1
 800ddde:	2214      	movs	r2, #20
 800dde0:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800dde2:	187b      	adds	r3, r7, r1
 800dde4:	0018      	movs	r0, r3
 800dde6:	f005 fce1 	bl	80137ac <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800ddea:	2110      	movs	r1, #16
 800ddec:	187b      	adds	r3, r7, r1
 800ddee:	220f      	movs	r2, #15
 800ddf0:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800ddf2:	4b0e      	ldr	r3, [pc, #56]	; (800de2c <LmHandlerConfigure+0x14c>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	187a      	adds	r2, r7, r1
 800ddf8:	0011      	movs	r1, r2
 800ddfa:	0018      	movs	r0, r3
 800ddfc:	f008 fe17 	bl	8016a2e <RegionGetPhyParam>
 800de00:	0003      	movs	r3, r0
 800de02:	001a      	movs	r2, r3
 800de04:	210c      	movs	r1, #12
 800de06:	187b      	adds	r3, r7, r1
 800de08:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800de0a:	187b      	adds	r3, r7, r1
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	1e5a      	subs	r2, r3, #1
 800de10:	4193      	sbcs	r3, r2
 800de12:	b2da      	uxtb	r2, r3
 800de14:	4b05      	ldr	r3, [pc, #20]	; (800de2c <LmHandlerConfigure+0x14c>)
 800de16:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800de18:	4b04      	ldr	r3, [pc, #16]	; (800de2c <LmHandlerConfigure+0x14c>)
 800de1a:	791b      	ldrb	r3, [r3, #4]
 800de1c:	0018      	movs	r0, r3
 800de1e:	f006 faf1 	bl	8014404 <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800de22:	2300      	movs	r3, #0
}
 800de24:	0018      	movs	r0, r3
 800de26:	46bd      	mov	sp, r7
 800de28:	b011      	add	sp, #68	; 0x44
 800de2a:	bd90      	pop	{r4, r7, pc}
 800de2c:	200003c8 	.word	0x200003c8
 800de30:	20000400 	.word	0x20000400
 800de34:	200003f0 	.word	0x200003f0
 800de38:	0801eb04 	.word	0x0801eb04
 800de3c:	2000051a 	.word	0x2000051a
 800de40:	20000138 	.word	0x20000138
 800de44:	20000140 	.word	0x20000140

0800de48 <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800de4e:	f004 fea7 	bl	8012ba0 <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800de52:	1dfb      	adds	r3, r7, #7
 800de54:	2200      	movs	r2, #0
 800de56:	701a      	strb	r2, [r3, #0]
 800de58:	e027      	b.n	800deaa <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800de5a:	1dfb      	adds	r3, r7, #7
 800de5c:	2200      	movs	r2, #0
 800de5e:	569a      	ldrsb	r2, [r3, r2]
 800de60:	4b17      	ldr	r3, [pc, #92]	; (800dec0 <LmHandlerProcess+0x78>)
 800de62:	0092      	lsls	r2, r2, #2
 800de64:	58d3      	ldr	r3, [r2, r3]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d017      	beq.n	800de9a <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800de6a:	1dfb      	adds	r3, r7, #7
 800de6c:	2200      	movs	r2, #0
 800de6e:	569a      	ldrsb	r2, [r3, r2]
 800de70:	4b13      	ldr	r3, [pc, #76]	; (800dec0 <LmHandlerProcess+0x78>)
 800de72:	0092      	lsls	r2, r2, #2
 800de74:	58d3      	ldr	r3, [r2, r3]
 800de76:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00e      	beq.n	800de9a <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800de7c:	1dfb      	adds	r3, r7, #7
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	0018      	movs	r0, r3
 800de82:	f000 fbf1 	bl	800e668 <LmHandlerPackageIsInitialized>
 800de86:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800de88:	d007      	beq.n	800de9a <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800de8a:	1dfb      	adds	r3, r7, #7
 800de8c:	2200      	movs	r2, #0
 800de8e:	569a      	ldrsb	r2, [r3, r2]
 800de90:	4b0b      	ldr	r3, [pc, #44]	; (800dec0 <LmHandlerProcess+0x78>)
 800de92:	0092      	lsls	r2, r2, #2
 800de94:	58d3      	ldr	r3, [r2, r3]
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800de9a:	1dfb      	adds	r3, r7, #7
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	b25b      	sxtb	r3, r3
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	3301      	adds	r3, #1
 800dea4:	b2da      	uxtb	r2, r3
 800dea6:	1dfb      	adds	r3, r7, #7
 800dea8:	701a      	strb	r2, [r3, #0]
 800deaa:	1dfb      	adds	r3, r7, #7
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	b25b      	sxtb	r3, r3
 800deb0:	2b04      	cmp	r3, #4
 800deb2:	ddd2      	ble.n	800de5a <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800deb4:	f000 ff9f 	bl	800edf6 <NvmCtxMgmtStore>
}
 800deb8:	46c0      	nop			; (mov r8, r8)
 800deba:	46bd      	mov	sp, r7
 800debc:	b002      	add	sp, #8
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	200003b4 	.word	0x200003b4

0800dec4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800dec4:	b5b0      	push	{r4, r5, r7, lr}
 800dec6:	b08a      	sub	sp, #40	; 0x28
 800dec8:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800deca:	003b      	movs	r3, r7
 800decc:	2201      	movs	r2, #1
 800dece:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800ded0:	2527      	movs	r5, #39	; 0x27
 800ded2:	197c      	adds	r4, r7, r5
 800ded4:	003b      	movs	r3, r7
 800ded6:	0018      	movs	r0, r3
 800ded8:	f005 fb0a 	bl	80134f0 <LoRaMacMibGetRequestConfirm>
 800dedc:	0003      	movs	r3, r0
 800dede:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800dee0:	197b      	adds	r3, r7, r5
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d107      	bne.n	800def8 <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800dee8:	003b      	movs	r3, r7
 800deea:	791b      	ldrb	r3, [r3, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d101      	bne.n	800def4 <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800def0:	2300      	movs	r3, #0
 800def2:	e002      	b.n	800defa <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800def4:	2301      	movs	r3, #1
 800def6:	e000      	b.n	800defa <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800def8:	2300      	movs	r3, #0
  }
}
 800defa:	0018      	movs	r0, r3
 800defc:	46bd      	mov	sp, r7
 800defe:	b00a      	add	sp, #40	; 0x28
 800df00:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800df04 <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800df04:	b590      	push	{r4, r7, lr}
 800df06:	b093      	sub	sp, #76	; 0x4c
 800df08:	af02      	add	r7, sp, #8
 800df0a:	0002      	movs	r2, r0
 800df0c:	1dfb      	adds	r3, r7, #7
 800df0e:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800df10:	1dfb      	adds	r3, r7, #7
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b02      	cmp	r3, #2
 800df16:	d113      	bne.n	800df40 <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800df18:	4b37      	ldr	r3, [pc, #220]	; (800dff8 <LmHandlerJoin+0xf4>)
 800df1a:	2202      	movs	r2, #2
 800df1c:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800df1e:	f005 fa2d 	bl	801337c <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800df22:	2108      	movs	r1, #8
 800df24:	187b      	adds	r3, r7, r1
 800df26:	2201      	movs	r2, #1
 800df28:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800df2a:	4b34      	ldr	r3, [pc, #208]	; (800dffc <LmHandlerJoin+0xf8>)
 800df2c:	78db      	ldrb	r3, [r3, #3]
 800df2e:	b25b      	sxtb	r3, r3
 800df30:	b2da      	uxtb	r2, r3
 800df32:	187b      	adds	r3, r7, r1
 800df34:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800df36:	187b      	adds	r3, r7, r1
 800df38:	0018      	movs	r0, r3
 800df3a:	f005 ffbd 	bl	8013eb8 <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800df3e:	e057      	b.n	800dff0 <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800df40:	4b2d      	ldr	r3, [pc, #180]	; (800dff8 <LmHandlerJoin+0xf4>)
 800df42:	2201      	movs	r2, #1
 800df44:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800df46:	4b2c      	ldr	r3, [pc, #176]	; (800dff8 <LmHandlerJoin+0xf4>)
 800df48:	2200      	movs	r2, #0
 800df4a:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800df4c:	4b2c      	ldr	r3, [pc, #176]	; (800e000 <LmHandlerJoin+0xfc>)
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	2201      	movs	r2, #1
 800df52:	4053      	eors	r3, r2
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	d033      	beq.n	800dfc2 <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800df5a:	211c      	movs	r1, #28
 800df5c:	187b      	adds	r3, r7, r1
 800df5e:	2227      	movs	r2, #39	; 0x27
 800df60:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800df62:	187b      	adds	r3, r7, r1
 800df64:	4a27      	ldr	r2, [pc, #156]	; (800e004 <LmHandlerJoin+0x100>)
 800df66:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800df68:	000c      	movs	r4, r1
 800df6a:	187b      	adds	r3, r7, r1
 800df6c:	0018      	movs	r0, r3
 800df6e:	f005 fc1d 	bl	80137ac <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800df72:	0021      	movs	r1, r4
 800df74:	187b      	adds	r3, r7, r1
 800df76:	2205      	movs	r2, #5
 800df78:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800df7a:	4b23      	ldr	r3, [pc, #140]	; (800e008 <LmHandlerJoin+0x104>)
 800df7c:	691a      	ldr	r2, [r3, #16]
 800df7e:	187b      	adds	r3, r7, r1
 800df80:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800df82:	000c      	movs	r4, r1
 800df84:	187b      	adds	r3, r7, r1
 800df86:	0018      	movs	r0, r3
 800df88:	f005 fc10 	bl	80137ac <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800df8c:	f7f6 ffa0 	bl	8004ed0 <GetDevAddr>
 800df90:	0002      	movs	r2, r0
 800df92:	4b1d      	ldr	r3, [pc, #116]	; (800e008 <LmHandlerJoin+0x104>)
 800df94:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800df96:	0021      	movs	r1, r4
 800df98:	187b      	adds	r3, r7, r1
 800df9a:	2206      	movs	r2, #6
 800df9c:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800df9e:	4b1a      	ldr	r3, [pc, #104]	; (800e008 <LmHandlerJoin+0x104>)
 800dfa0:	695a      	ldr	r2, [r3, #20]
 800dfa2:	187b      	adds	r3, r7, r1
 800dfa4:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800dfa6:	187b      	adds	r3, r7, r1
 800dfa8:	0018      	movs	r0, r3
 800dfaa:	f005 fbff 	bl	80137ac <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800dfae:	4b16      	ldr	r3, [pc, #88]	; (800e008 <LmHandlerJoin+0x104>)
 800dfb0:	695b      	ldr	r3, [r3, #20]
 800dfb2:	4a16      	ldr	r2, [pc, #88]	; (800e00c <LmHandlerJoin+0x108>)
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	0013      	movs	r3, r2
 800dfb8:	2200      	movs	r2, #0
 800dfba:	2100      	movs	r1, #0
 800dfbc:	2002      	movs	r0, #2
 800dfbe:	f00d fe29 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800dfc2:	f005 f9db 	bl	801337c <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dfc6:	211c      	movs	r1, #28
 800dfc8:	187b      	adds	r3, r7, r1
 800dfca:	2201      	movs	r2, #1
 800dfcc:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800dfce:	187b      	adds	r3, r7, r1
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800dfd4:	187b      	adds	r3, r7, r1
 800dfd6:	0018      	movs	r0, r3
 800dfd8:	f005 fbe8 	bl	80137ac <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800dfdc:	4b0c      	ldr	r3, [pc, #48]	; (800e010 <LmHandlerJoin+0x10c>)
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	4a05      	ldr	r2, [pc, #20]	; (800dff8 <LmHandlerJoin+0xf4>)
 800dfe2:	0010      	movs	r0, r2
 800dfe4:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800dfe6:	4b05      	ldr	r3, [pc, #20]	; (800dffc <LmHandlerJoin+0xf8>)
 800dfe8:	785b      	ldrb	r3, [r3, #1]
 800dfea:	0018      	movs	r0, r3
 800dfec:	f000 f8e4 	bl	800e1b8 <LmHandlerRequestClass>
}
 800dff0:	46c0      	nop			; (mov r8, r8)
 800dff2:	46bd      	mov	sp, r7
 800dff4:	b011      	add	sp, #68	; 0x44
 800dff6:	bd90      	pop	{r4, r7, pc}
 800dff8:	2000015c 	.word	0x2000015c
 800dffc:	200003c8 	.word	0x200003c8
 800e000:	2000051a 	.word	0x2000051a
 800e004:	01000300 	.word	0x01000300
 800e008:	20000138 	.word	0x20000138
 800e00c:	0801eb50 	.word	0x0801eb50
 800e010:	200003d0 	.word	0x200003d0

0800e014 <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800e014:	b5b0      	push	{r4, r5, r7, lr}
 800e016:	b08c      	sub	sp, #48	; 0x30
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	0008      	movs	r0, r1
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	0019      	movs	r1, r3
 800e022:	230b      	movs	r3, #11
 800e024:	18fb      	adds	r3, r7, r3
 800e026:	1c02      	adds	r2, r0, #0
 800e028:	701a      	strb	r2, [r3, #0]
 800e02a:	230a      	movs	r3, #10
 800e02c:	18fb      	adds	r3, r7, r3
 800e02e:	1c0a      	adds	r2, r1, #0
 800e030:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e032:	232f      	movs	r3, #47	; 0x2f
 800e034:	18fb      	adds	r3, r7, r3
 800e036:	22ff      	movs	r2, #255	; 0xff
 800e038:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800e03a:	f004 fd99 	bl	8012b70 <LoRaMacIsBusy>
 800e03e:	1e03      	subs	r3, r0, #0
 800e040:	d002      	beq.n	800e048 <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800e042:	2302      	movs	r3, #2
 800e044:	425b      	negs	r3, r3
 800e046:	e0a9      	b.n	800e19c <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e048:	f7ff ff3c 	bl	800dec4 <LmHandlerJoinStatus>
 800e04c:	0003      	movs	r3, r0
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d007      	beq.n	800e062 <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800e052:	4b54      	ldr	r3, [pc, #336]	; (800e1a4 <LmHandlerSend+0x190>)
 800e054:	789b      	ldrb	r3, [r3, #2]
 800e056:	0018      	movs	r0, r3
 800e058:	f7ff ff54 	bl	800df04 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e05c:	2303      	movs	r3, #3
 800e05e:	425b      	negs	r3, r3
 800e060:	e09c      	b.n	800e19c <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800e062:	4b51      	ldr	r3, [pc, #324]	; (800e1a8 <LmHandlerSend+0x194>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	4798      	blx	r3
 800e06a:	1e03      	subs	r3, r0, #0
 800e06c:	d00d      	beq.n	800e08a <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	781a      	ldrb	r2, [r3, #0]
 800e072:	4b4d      	ldr	r3, [pc, #308]	; (800e1a8 <LmHandlerSend+0x194>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d006      	beq.n	800e08a <LmHandlerSend+0x76>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e084:	2304      	movs	r3, #4
 800e086:	425b      	negs	r3, r3
 800e088:	e088      	b.n	800e19c <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e08a:	4b48      	ldr	r3, [pc, #288]	; (800e1ac <LmHandlerSend+0x198>)
 800e08c:	2203      	movs	r2, #3
 800e08e:	569a      	ldrsb	r2, [r3, r2]
 800e090:	2418      	movs	r4, #24
 800e092:	193b      	adds	r3, r7, r4
 800e094:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	785b      	ldrb	r3, [r3, #1]
 800e09a:	2214      	movs	r2, #20
 800e09c:	18ba      	adds	r2, r7, r2
 800e09e:	0011      	movs	r1, r2
 800e0a0:	0018      	movs	r0, r3
 800e0a2:	f005 f979 	bl	8013398 <LoRaMacQueryTxPossible>
 800e0a6:	1e03      	subs	r3, r0, #0
 800e0a8:	d00c      	beq.n	800e0c4 <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e0aa:	4b41      	ldr	r3, [pc, #260]	; (800e1b0 <LmHandlerSend+0x19c>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800e0b0:	193b      	adds	r3, r7, r4
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e0b6:	193b      	adds	r3, r7, r4
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e0bc:	193b      	adds	r3, r7, r4
 800e0be:	2200      	movs	r2, #0
 800e0c0:	819a      	strh	r2, [r3, #12]
 800e0c2:	e021      	b.n	800e108 <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800e0c4:	4b3a      	ldr	r3, [pc, #232]	; (800e1b0 <LmHandlerSend+0x19c>)
 800e0c6:	200b      	movs	r0, #11
 800e0c8:	183a      	adds	r2, r7, r0
 800e0ca:	7812      	ldrb	r2, [r2, #0]
 800e0cc:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	781a      	ldrb	r2, [r3, #0]
 800e0d2:	2118      	movs	r1, #24
 800e0d4:	187b      	adds	r3, r7, r1
 800e0d6:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	785b      	ldrb	r3, [r3, #1]
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	187b      	adds	r3, r7, r1
 800e0e0:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	685a      	ldr	r2, [r3, #4]
 800e0e6:	187b      	adds	r3, r7, r1
 800e0e8:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800e0ea:	183b      	adds	r3, r7, r0
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d103      	bne.n	800e0fa <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800e0f2:	187b      	adds	r3, r7, r1
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	701a      	strb	r2, [r3, #0]
 800e0f8:	e006      	b.n	800e108 <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800e0fa:	2118      	movs	r1, #24
 800e0fc:	187b      	adds	r3, r7, r1
 800e0fe:	2201      	movs	r2, #1
 800e100:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800e102:	187b      	adds	r3, r7, r1
 800e104:	2208      	movs	r2, #8
 800e106:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800e108:	4b29      	ldr	r3, [pc, #164]	; (800e1b0 <LmHandlerSend+0x19c>)
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	330c      	adds	r3, #12
 800e10e:	ca03      	ldmia	r2!, {r0, r1}
 800e110:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e112:	4b26      	ldr	r3, [pc, #152]	; (800e1ac <LmHandlerSend+0x198>)
 800e114:	2203      	movs	r2, #3
 800e116:	569a      	ldrsb	r2, [r3, r2]
 800e118:	4b25      	ldr	r3, [pc, #148]	; (800e1b0 <LmHandlerSend+0x19c>)
 800e11a:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e11c:	232e      	movs	r3, #46	; 0x2e
 800e11e:	18fc      	adds	r4, r7, r3
 800e120:	230a      	movs	r3, #10
 800e122:	18fb      	adds	r3, r7, r3
 800e124:	781a      	ldrb	r2, [r3, #0]
 800e126:	2518      	movs	r5, #24
 800e128:	197b      	adds	r3, r7, r5
 800e12a:	0011      	movs	r1, r2
 800e12c:	0018      	movs	r0, r3
 800e12e:	f006 f81b 	bl	8014168 <LoRaMacMcpsRequest>
 800e132:	0003      	movs	r3, r0
 800e134:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d003      	beq.n	800e144 <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e13c:	197b      	adds	r3, r7, r5
 800e13e:	691a      	ldr	r2, [r3, #16]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800e144:	232e      	movs	r3, #46	; 0x2e
 800e146:	18fb      	adds	r3, r7, r3
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b11      	cmp	r3, #17
 800e14c:	d81d      	bhi.n	800e18a <LmHandlerSend+0x176>
 800e14e:	009a      	lsls	r2, r3, #2
 800e150:	4b18      	ldr	r3, [pc, #96]	; (800e1b4 <LmHandlerSend+0x1a0>)
 800e152:	18d3      	adds	r3, r2, r3
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e158:	232f      	movs	r3, #47	; 0x2f
 800e15a:	18fb      	adds	r3, r7, r3
 800e15c:	2200      	movs	r2, #0
 800e15e:	701a      	strb	r2, [r3, #0]
    break;
 800e160:	e018      	b.n	800e194 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e162:	232f      	movs	r3, #47	; 0x2f
 800e164:	18fb      	adds	r3, r7, r3
 800e166:	22fe      	movs	r2, #254	; 0xfe
 800e168:	701a      	strb	r2, [r3, #0]
    break;
 800e16a:	e013      	b.n	800e194 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e16c:	232f      	movs	r3, #47	; 0x2f
 800e16e:	18fb      	adds	r3, r7, r3
 800e170:	22fd      	movs	r2, #253	; 0xfd
 800e172:	701a      	strb	r2, [r3, #0]
    break;
 800e174:	e00e      	b.n	800e194 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e176:	232f      	movs	r3, #47	; 0x2f
 800e178:	18fb      	adds	r3, r7, r3
 800e17a:	22fb      	movs	r2, #251	; 0xfb
 800e17c:	701a      	strb	r2, [r3, #0]
    break;
 800e17e:	e009      	b.n	800e194 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e180:	232f      	movs	r3, #47	; 0x2f
 800e182:	18fb      	adds	r3, r7, r3
 800e184:	22fa      	movs	r2, #250	; 0xfa
 800e186:	701a      	strb	r2, [r3, #0]
    break;
 800e188:	e004      	b.n	800e194 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800e18a:	232f      	movs	r3, #47	; 0x2f
 800e18c:	18fb      	adds	r3, r7, r3
 800e18e:	22ff      	movs	r2, #255	; 0xff
 800e190:	701a      	strb	r2, [r3, #0]
    break;
 800e192:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800e194:	232f      	movs	r3, #47	; 0x2f
 800e196:	18fb      	adds	r3, r7, r3
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	b25b      	sxtb	r3, r3
}
 800e19c:	0018      	movs	r0, r3
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	b00c      	add	sp, #48	; 0x30
 800e1a2:	bdb0      	pop	{r4, r5, r7, pc}
 800e1a4:	2000015c 	.word	0x2000015c
 800e1a8:	200003b4 	.word	0x200003b4
 800e1ac:	200003c8 	.word	0x200003c8
 800e1b0:	20000410 	.word	0x20000410
 800e1b4:	0801eb6c 	.word	0x0801eb6c

0800e1b8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08c      	sub	sp, #48	; 0x30
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	0002      	movs	r2, r0
 800e1c0:	1dfb      	adds	r3, r7, #7
 800e1c2:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e1c4:	232f      	movs	r3, #47	; 0x2f
 800e1c6:	18fb      	adds	r3, r7, r3
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e1cc:	f7ff fe7a 	bl	800dec4 <LmHandlerJoinStatus>
 800e1d0:	0003      	movs	r3, r0
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d002      	beq.n	800e1dc <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	425b      	negs	r3, r3
 800e1da:	e077      	b.n	800e2cc <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e1dc:	2108      	movs	r1, #8
 800e1de:	187b      	adds	r3, r7, r1
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e1e4:	187b      	adds	r3, r7, r1
 800e1e6:	0018      	movs	r0, r3
 800e1e8:	f005 f982 	bl	80134f0 <LoRaMacMibGetRequestConfirm>
 800e1ec:	1e03      	subs	r3, r0, #0
 800e1ee:	d002      	beq.n	800e1f6 <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	425b      	negs	r3, r3
 800e1f4:	e06a      	b.n	800e2cc <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800e1f6:	212e      	movs	r1, #46	; 0x2e
 800e1f8:	187b      	adds	r3, r7, r1
 800e1fa:	2208      	movs	r2, #8
 800e1fc:	18ba      	adds	r2, r7, r2
 800e1fe:	7912      	ldrb	r2, [r2, #4]
 800e200:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800e202:	187a      	adds	r2, r7, r1
 800e204:	1dfb      	adds	r3, r7, #7
 800e206:	7812      	ldrb	r2, [r2, #0]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d053      	beq.n	800e2b6 <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800e20e:	1dfb      	adds	r3, r7, #7
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	2b02      	cmp	r3, #2
 800e214:	d02a      	beq.n	800e26c <LmHandlerRequestClass+0xb4>
 800e216:	dc50      	bgt.n	800e2ba <LmHandlerRequestClass+0x102>
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <LmHandlerRequestClass+0x6a>
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d020      	beq.n	800e262 <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800e220:	e04b      	b.n	800e2ba <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800e222:	232e      	movs	r3, #46	; 0x2e
 800e224:	18fb      	adds	r3, r7, r3
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d048      	beq.n	800e2be <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800e22c:	2108      	movs	r1, #8
 800e22e:	187b      	adds	r3, r7, r1
 800e230:	2200      	movs	r2, #0
 800e232:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e234:	187b      	adds	r3, r7, r1
 800e236:	0018      	movs	r0, r3
 800e238:	f005 fab8 	bl	80137ac <LoRaMacMibSetRequestConfirm>
 800e23c:	1e03      	subs	r3, r0, #0
 800e23e:	d10b      	bne.n	800e258 <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800e240:	2000      	movs	r0, #0
 800e242:	f000 fac9 	bl	800e7d8 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e246:	4b23      	ldr	r3, [pc, #140]	; (800e2d4 <LmHandlerRequestClass+0x11c>)
 800e248:	699b      	ldr	r3, [r3, #24]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d037      	beq.n	800e2be <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800e24e:	4b21      	ldr	r3, [pc, #132]	; (800e2d4 <LmHandlerRequestClass+0x11c>)
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	2000      	movs	r0, #0
 800e254:	4798      	blx	r3
      break;
 800e256:	e032      	b.n	800e2be <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e258:	232f      	movs	r3, #47	; 0x2f
 800e25a:	18fb      	adds	r3, r7, r3
 800e25c:	22ff      	movs	r2, #255	; 0xff
 800e25e:	701a      	strb	r2, [r3, #0]
      break;
 800e260:	e02d      	b.n	800e2be <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800e262:	232f      	movs	r3, #47	; 0x2f
 800e264:	18fb      	adds	r3, r7, r3
 800e266:	22ff      	movs	r2, #255	; 0xff
 800e268:	701a      	strb	r2, [r3, #0]
      break;
 800e26a:	e02b      	b.n	800e2c4 <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800e26c:	232e      	movs	r3, #46	; 0x2e
 800e26e:	18fb      	adds	r3, r7, r3
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d004      	beq.n	800e280 <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800e276:	232f      	movs	r3, #47	; 0x2f
 800e278:	18fb      	adds	r3, r7, r3
 800e27a:	22ff      	movs	r2, #255	; 0xff
 800e27c:	701a      	strb	r2, [r3, #0]
      break;
 800e27e:	e020      	b.n	800e2c2 <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800e280:	2108      	movs	r1, #8
 800e282:	187b      	adds	r3, r7, r1
 800e284:	2202      	movs	r2, #2
 800e286:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e288:	187b      	adds	r3, r7, r1
 800e28a:	0018      	movs	r0, r3
 800e28c:	f005 fa8e 	bl	80137ac <LoRaMacMibSetRequestConfirm>
 800e290:	1e03      	subs	r3, r0, #0
 800e292:	d10b      	bne.n	800e2ac <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800e294:	2002      	movs	r0, #2
 800e296:	f000 fa9f 	bl	800e7d8 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e29a:	4b0e      	ldr	r3, [pc, #56]	; (800e2d4 <LmHandlerRequestClass+0x11c>)
 800e29c:	699b      	ldr	r3, [r3, #24]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00f      	beq.n	800e2c2 <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800e2a2:	4b0c      	ldr	r3, [pc, #48]	; (800e2d4 <LmHandlerRequestClass+0x11c>)
 800e2a4:	699b      	ldr	r3, [r3, #24]
 800e2a6:	2002      	movs	r0, #2
 800e2a8:	4798      	blx	r3
      break;
 800e2aa:	e00a      	b.n	800e2c2 <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e2ac:	232f      	movs	r3, #47	; 0x2f
 800e2ae:	18fb      	adds	r3, r7, r3
 800e2b0:	22ff      	movs	r2, #255	; 0xff
 800e2b2:	701a      	strb	r2, [r3, #0]
      break;
 800e2b4:	e005      	b.n	800e2c2 <LmHandlerRequestClass+0x10a>
    }
  }
 800e2b6:	46c0      	nop			; (mov r8, r8)
 800e2b8:	e004      	b.n	800e2c4 <LmHandlerRequestClass+0x10c>
        break;
 800e2ba:	46c0      	nop			; (mov r8, r8)
 800e2bc:	e002      	b.n	800e2c4 <LmHandlerRequestClass+0x10c>
      break;
 800e2be:	46c0      	nop			; (mov r8, r8)
 800e2c0:	e000      	b.n	800e2c4 <LmHandlerRequestClass+0x10c>
      break;
 800e2c2:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800e2c4:	232f      	movs	r3, #47	; 0x2f
 800e2c6:	18fb      	adds	r3, r7, r3
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	b25b      	sxtb	r3, r3
}
 800e2cc:	0018      	movs	r0, r3
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	b00c      	add	sp, #48	; 0x30
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	200003d0 	.word	0x200003d0

0800e2d8 <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800e2d8:	b590      	push	{r4, r7, lr}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	0002      	movs	r2, r0
 800e2e0:	6039      	str	r1, [r7, #0]
 800e2e2:	1dfb      	adds	r3, r7, #7
 800e2e4:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	60fb      	str	r3, [r7, #12]
  switch (id)
 800e2ea:	1dfb      	adds	r3, r7, #7
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d104      	bne.n	800e2fc <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800e2f2:	f000 fa8b 	bl	800e80c <LmphCompliancePackageFactory>
 800e2f6:	0003      	movs	r3, r0
 800e2f8:	60fb      	str	r3, [r7, #12]
      break;
 800e2fa:	e000      	b.n	800e2fe <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800e2fc:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d028      	beq.n	800e356 <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800e304:	1dfb      	adds	r3, r7, #7
 800e306:	781a      	ldrb	r2, [r3, #0]
 800e308:	4b16      	ldr	r3, [pc, #88]	; (800e364 <LmHandlerPackageRegister+0x8c>)
 800e30a:	0092      	lsls	r2, r2, #2
 800e30c:	68f9      	ldr	r1, [r7, #12]
 800e30e:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e310:	1dfb      	adds	r3, r7, #7
 800e312:	781a      	ldrb	r2, [r3, #0]
 800e314:	4b13      	ldr	r3, [pc, #76]	; (800e364 <LmHandlerPackageRegister+0x8c>)
 800e316:	0092      	lsls	r2, r2, #2
 800e318:	58d3      	ldr	r3, [r2, r3]
 800e31a:	4a13      	ldr	r2, [pc, #76]	; (800e368 <LmHandlerPackageRegister+0x90>)
 800e31c:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e31e:	1dfb      	adds	r3, r7, #7
 800e320:	781a      	ldrb	r2, [r3, #0]
 800e322:	4b10      	ldr	r3, [pc, #64]	; (800e364 <LmHandlerPackageRegister+0x8c>)
 800e324:	0092      	lsls	r2, r2, #2
 800e326:	58d3      	ldr	r3, [r2, r3]
 800e328:	4a10      	ldr	r2, [pc, #64]	; (800e36c <LmHandlerPackageRegister+0x94>)
 800e32a:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e32c:	1dfb      	adds	r3, r7, #7
 800e32e:	781a      	ldrb	r2, [r3, #0]
 800e330:	4b0c      	ldr	r3, [pc, #48]	; (800e364 <LmHandlerPackageRegister+0x8c>)
 800e332:	0092      	lsls	r2, r2, #2
 800e334:	58d3      	ldr	r3, [r2, r3]
 800e336:	4a0e      	ldr	r2, [pc, #56]	; (800e370 <LmHandlerPackageRegister+0x98>)
 800e338:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800e33a:	1dfb      	adds	r3, r7, #7
 800e33c:	781a      	ldrb	r2, [r3, #0]
 800e33e:	4b09      	ldr	r3, [pc, #36]	; (800e364 <LmHandlerPackageRegister+0x8c>)
 800e340:	0092      	lsls	r2, r2, #2
 800e342:	58d3      	ldr	r3, [r2, r3]
 800e344:	685c      	ldr	r4, [r3, #4]
 800e346:	4b0b      	ldr	r3, [pc, #44]	; (800e374 <LmHandlerPackageRegister+0x9c>)
 800e348:	6859      	ldr	r1, [r3, #4]
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	22f2      	movs	r2, #242	; 0xf2
 800e34e:	0018      	movs	r0, r3
 800e350:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800e352:	2300      	movs	r3, #0
 800e354:	e001      	b.n	800e35a <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	425b      	negs	r3, r3
  }
}
 800e35a:	0018      	movs	r0, r3
 800e35c:	46bd      	mov	sp, r7
 800e35e:	b005      	add	sp, #20
 800e360:	bd90      	pop	{r4, r7, pc}
 800e362:	46c0      	nop			; (mov r8, r8)
 800e364:	200003b4 	.word	0x200003b4
 800e368:	0800df05 	.word	0x0800df05
 800e36c:	0800e015 	.word	0x0800e015
 800e370:	0800e411 	.word	0x0800e411
 800e374:	20000170 	.word	0x20000170

0800e378 <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b08c      	sub	sp, #48	; 0x30
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d102      	bne.n	800e38c <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e386:	2301      	movs	r3, #1
 800e388:	425b      	negs	r3, r3
 800e38a:	e012      	b.n	800e3b2 <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e38c:	210c      	movs	r1, #12
 800e38e:	187b      	adds	r3, r7, r1
 800e390:	2200      	movs	r2, #0
 800e392:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e394:	187b      	adds	r3, r7, r1
 800e396:	0018      	movs	r0, r3
 800e398:	f005 f8aa 	bl	80134f0 <LoRaMacMibGetRequestConfirm>
 800e39c:	1e03      	subs	r3, r0, #0
 800e39e:	d002      	beq.n	800e3a6 <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	425b      	negs	r3, r3
 800e3a4:	e005      	b.n	800e3b2 <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800e3a6:	230c      	movs	r3, #12
 800e3a8:	18fb      	adds	r3, r7, r3
 800e3aa:	791a      	ldrb	r2, [r3, #4]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	0018      	movs	r0, r3
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	b00c      	add	sp, #48	; 0x30
 800e3b8:	bd80      	pop	{r7, pc}
	...

0800e3bc <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b08c      	sub	sp, #48	; 0x30
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d102      	bne.n	800e3d0 <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	425b      	negs	r3, r3
 800e3ce:	e018      	b.n	800e402 <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800e3d0:	210c      	movs	r1, #12
 800e3d2:	187b      	adds	r3, r7, r1
 800e3d4:	221f      	movs	r2, #31
 800e3d6:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800e3d8:	187b      	adds	r3, r7, r1
 800e3da:	0018      	movs	r0, r3
 800e3dc:	f005 f888 	bl	80134f0 <LoRaMacMibGetRequestConfirm>
 800e3e0:	1e03      	subs	r3, r0, #0
 800e3e2:	d002      	beq.n	800e3ea <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	425b      	negs	r3, r3
 800e3e8:	e00b      	b.n	800e402 <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800e3ea:	210c      	movs	r1, #12
 800e3ec:	187b      	adds	r3, r7, r1
 800e3ee:	2204      	movs	r2, #4
 800e3f0:	569a      	ldrsb	r2, [r3, r2]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800e3f6:	187b      	adds	r3, r7, r1
 800e3f8:	2204      	movs	r2, #4
 800e3fa:	569a      	ldrsb	r2, [r3, r2]
 800e3fc:	4b03      	ldr	r3, [pc, #12]	; (800e40c <LmHandlerGetTxDatarate+0x50>)
 800e3fe:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800e400:	2300      	movs	r3, #0
}
 800e402:	0018      	movs	r0, r3
 800e404:	46bd      	mov	sp, r7
 800e406:	b00c      	add	sp, #48	; 0x30
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	46c0      	nop			; (mov r8, r8)
 800e40c:	200003c8 	.word	0x200003c8

0800e410 <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800e410:	b5b0      	push	{r4, r5, r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800e416:	003b      	movs	r3, r7
 800e418:	220a      	movs	r2, #10
 800e41a:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800e41c:	2517      	movs	r5, #23
 800e41e:	197c      	adds	r4, r7, r5
 800e420:	003b      	movs	r3, r7
 800e422:	0018      	movs	r0, r3
 800e424:	f005 fd48 	bl	8013eb8 <LoRaMacMlmeRequest>
 800e428:	0003      	movs	r3, r0
 800e42a:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e42c:	197b      	adds	r3, r7, r5
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d101      	bne.n	800e438 <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800e434:	2300      	movs	r3, #0
 800e436:	e001      	b.n	800e43c <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e438:	2301      	movs	r3, #1
 800e43a:	425b      	negs	r3, r3
  }
}
 800e43c:	0018      	movs	r0, r3
 800e43e:	46bd      	mov	sp, r7
 800e440:	b006      	add	sp, #24
 800e442:	bdb0      	pop	{r4, r5, r7, pc}

0800e444 <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1; // Здесь выставляется будет ли подтверждение или нет
 800e44c:	4b16      	ldr	r3, [pc, #88]	; (800e4a8 <McpsConfirm+0x64>)
 800e44e:	2201      	movs	r2, #1
 800e450:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	785a      	ldrb	r2, [r3, #1]
 800e456:	4b14      	ldr	r3, [pc, #80]	; (800e4a8 <McpsConfirm+0x64>)
 800e458:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	789b      	ldrb	r3, [r3, #2]
 800e45e:	b25a      	sxtb	r2, r3
 800e460:	4b11      	ldr	r3, [pc, #68]	; (800e4a8 <McpsConfirm+0x64>)
 800e462:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	68da      	ldr	r2, [r3, #12]
 800e468:	4b0f      	ldr	r3, [pc, #60]	; (800e4a8 <McpsConfirm+0x64>)
 800e46a:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2203      	movs	r2, #3
 800e470:	569a      	ldrsb	r2, [r3, r2]
 800e472:	4b0d      	ldr	r3, [pc, #52]	; (800e4a8 <McpsConfirm+0x64>)
 800e474:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	691b      	ldr	r3, [r3, #16]
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <McpsConfirm+0x64>)
 800e47e:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	791b      	ldrb	r3, [r3, #4]
 800e484:	001a      	movs	r2, r3
 800e486:	4b08      	ldr	r3, [pc, #32]	; (800e4a8 <McpsConfirm+0x64>)
 800e488:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800e48a:	4b08      	ldr	r3, [pc, #32]	; (800e4ac <McpsConfirm+0x68>)
 800e48c:	691b      	ldr	r3, [r3, #16]
 800e48e:	4a06      	ldr	r2, [pc, #24]	; (800e4a8 <McpsConfirm+0x64>)
 800e490:	0010      	movs	r0, r2
 800e492:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	0019      	movs	r1, r3
 800e498:	2000      	movs	r0, #0
 800e49a:	f000 f907 	bl	800e6ac <LmHandlerPackagesNotify>
}
 800e49e:	46c0      	nop			; (mov r8, r8)
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	b002      	add	sp, #8
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	46c0      	nop			; (mov r8, r8)
 800e4a8:	20000410 	.word	0x20000410
 800e4ac:	200003d0 	.word	0x200003d0

0800e4b0 <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800e4b0:	b590      	push	{r4, r7, lr}
 800e4b2:	b089      	sub	sp, #36	; 0x24
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800e4b8:	4b36      	ldr	r3, [pc, #216]	; (800e594 <McpsIndication+0xe4>)
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	785a      	ldrb	r2, [r3, #1]
 800e4c2:	4b34      	ldr	r3, [pc, #208]	; (800e594 <McpsIndication+0xe4>)
 800e4c4:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800e4c6:	4b33      	ldr	r3, [pc, #204]	; (800e594 <McpsIndication+0xe4>)
 800e4c8:	785b      	ldrb	r3, [r3, #1]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d15e      	bne.n	800e58c <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	7b1b      	ldrb	r3, [r3, #12]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d02c      	beq.n	800e530 <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	791b      	ldrb	r3, [r3, #4]
 800e4da:	b25a      	sxtb	r2, r3
 800e4dc:	4b2d      	ldr	r3, [pc, #180]	; (800e594 <McpsIndication+0xe4>)
 800e4de:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	220e      	movs	r2, #14
 800e4e4:	5e9b      	ldrsh	r3, [r3, r2]
 800e4e6:	b25a      	sxtb	r2, r3
 800e4e8:	4b2a      	ldr	r3, [pc, #168]	; (800e594 <McpsIndication+0xe4>)
 800e4ea:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2210      	movs	r2, #16
 800e4f0:	569a      	ldrsb	r2, [r3, r2]
 800e4f2:	4b28      	ldr	r3, [pc, #160]	; (800e594 <McpsIndication+0xe4>)
 800e4f4:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	695a      	ldr	r2, [r3, #20]
 800e4fa:	4b26      	ldr	r3, [pc, #152]	; (800e594 <McpsIndication+0xe4>)
 800e4fc:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	7c5b      	ldrb	r3, [r3, #17]
 800e502:	b25a      	sxtb	r2, r3
 800e504:	4b23      	ldr	r3, [pc, #140]	; (800e594 <McpsIndication+0xe4>)
 800e506:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	78da      	ldrb	r2, [r3, #3]
 800e50c:	2118      	movs	r1, #24
 800e50e:	187b      	adds	r3, r7, r1
 800e510:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	7b1a      	ldrb	r2, [r3, #12]
 800e516:	187b      	adds	r3, r7, r1
 800e518:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	689a      	ldr	r2, [r3, #8]
 800e51e:	0008      	movs	r0, r1
 800e520:	187b      	adds	r3, r7, r1
 800e522:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800e524:	4b1c      	ldr	r3, [pc, #112]	; (800e598 <McpsIndication+0xe8>)
 800e526:	695b      	ldr	r3, [r3, #20]
 800e528:	491a      	ldr	r1, [pc, #104]	; (800e594 <McpsIndication+0xe4>)
 800e52a:	183a      	adds	r2, r7, r0
 800e52c:	0010      	movs	r0, r2
 800e52e:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	7f1b      	ldrb	r3, [r3, #28]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d006      	beq.n	800e546 <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800e538:	4b17      	ldr	r3, [pc, #92]	; (800e598 <McpsIndication+0xe8>)
 800e53a:	69db      	ldr	r3, [r3, #28]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800e540:	4b15      	ldr	r3, [pc, #84]	; (800e598 <McpsIndication+0xe8>)
 800e542:	69db      	ldr	r3, [r3, #28]
 800e544:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	0019      	movs	r1, r3
 800e54a:	2001      	movs	r0, #1
 800e54c:	f000 f8ae 	bl	800e6ac <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800e550:	2417      	movs	r4, #23
 800e552:	193b      	adds	r3, r7, r4
 800e554:	0018      	movs	r0, r3
 800e556:	f7ff ff0f 	bl	800e378 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	795b      	ldrb	r3, [r3, #5]
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d115      	bne.n	800e58e <McpsIndication+0xde>
 800e562:	193b      	adds	r3, r7, r4
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d111      	bne.n	800e58e <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800e56a:	210c      	movs	r1, #12
 800e56c:	187b      	adds	r3, r7, r1
 800e56e:	2200      	movs	r2, #0
 800e570:	701a      	strb	r2, [r3, #0]
 800e572:	187b      	adds	r3, r7, r1
 800e574:	2200      	movs	r2, #0
 800e576:	705a      	strb	r2, [r3, #1]
 800e578:	187b      	adds	r3, r7, r1
 800e57a:	2200      	movs	r2, #0
 800e57c:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800e57e:	1878      	adds	r0, r7, r1
 800e580:	2301      	movs	r3, #1
 800e582:	2200      	movs	r2, #0
 800e584:	2100      	movs	r1, #0
 800e586:	f7ff fd45 	bl	800e014 <LmHandlerSend>
 800e58a:	e000      	b.n	800e58e <McpsIndication+0xde>
    return;
 800e58c:	46c0      	nop			; (mov r8, r8)
  }
}
 800e58e:	46bd      	mov	sp, r7
 800e590:	b009      	add	sp, #36	; 0x24
 800e592:	bd90      	pop	{r4, r7, pc}
 800e594:	20000160 	.word	0x20000160
 800e598:	200003d0 	.word	0x200003d0

0800e59c <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e59c:	b590      	push	{r4, r7, lr}
 800e59e:	b08d      	sub	sp, #52	; 0x34
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800e5a4:	4b22      	ldr	r3, [pc, #136]	; (800e630 <MlmeConfirm+0x94>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	785a      	ldrb	r2, [r3, #1]
 800e5ae:	4b20      	ldr	r3, [pc, #128]	; (800e630 <MlmeConfirm+0x94>)
 800e5b0:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	0019      	movs	r1, r3
 800e5b6:	2002      	movs	r0, #2
 800e5b8:	f000 f878 	bl	800e6ac <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	2b0a      	cmp	r3, #10
 800e5c2:	d02c      	beq.n	800e61e <MlmeConfirm+0x82>
 800e5c4:	dc2d      	bgt.n	800e622 <MlmeConfirm+0x86>
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d002      	beq.n	800e5d0 <MlmeConfirm+0x34>
 800e5ca:	2b04      	cmp	r3, #4
 800e5cc:	d02b      	beq.n	800e626 <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e5ce:	e028      	b.n	800e622 <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800e5d0:	210c      	movs	r1, #12
 800e5d2:	187b      	adds	r3, r7, r1
 800e5d4:	2206      	movs	r2, #6
 800e5d6:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800e5d8:	000c      	movs	r4, r1
 800e5da:	187b      	adds	r3, r7, r1
 800e5dc:	0018      	movs	r0, r3
 800e5de:	f004 ff87 	bl	80134f0 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e5e2:	193b      	adds	r3, r7, r4
 800e5e4:	685a      	ldr	r2, [r3, #4]
 800e5e6:	4b13      	ldr	r3, [pc, #76]	; (800e634 <MlmeConfirm+0x98>)
 800e5e8:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800e5ea:	4b13      	ldr	r3, [pc, #76]	; (800e638 <MlmeConfirm+0x9c>)
 800e5ec:	0018      	movs	r0, r3
 800e5ee:	f7ff fee5 	bl	800e3bc <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	785b      	ldrb	r3, [r3, #1]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d108      	bne.n	800e60c <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e5fa:	4b0f      	ldr	r3, [pc, #60]	; (800e638 <MlmeConfirm+0x9c>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e600:	4b0e      	ldr	r3, [pc, #56]	; (800e63c <MlmeConfirm+0xa0>)
 800e602:	785b      	ldrb	r3, [r3, #1]
 800e604:	0018      	movs	r0, r3
 800e606:	f7ff fdd7 	bl	800e1b8 <LmHandlerRequestClass>
 800e60a:	e002      	b.n	800e612 <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e60c:	4b0a      	ldr	r3, [pc, #40]	; (800e638 <MlmeConfirm+0x9c>)
 800e60e:	22ff      	movs	r2, #255	; 0xff
 800e610:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e612:	4b0b      	ldr	r3, [pc, #44]	; (800e640 <MlmeConfirm+0xa4>)
 800e614:	68db      	ldr	r3, [r3, #12]
 800e616:	4a08      	ldr	r2, [pc, #32]	; (800e638 <MlmeConfirm+0x9c>)
 800e618:	0010      	movs	r0, r2
 800e61a:	4798      	blx	r3
    break;
 800e61c:	e004      	b.n	800e628 <MlmeConfirm+0x8c>
    break;
 800e61e:	46c0      	nop			; (mov r8, r8)
 800e620:	e002      	b.n	800e628 <MlmeConfirm+0x8c>
      break;
 800e622:	46c0      	nop			; (mov r8, r8)
 800e624:	e000      	b.n	800e628 <MlmeConfirm+0x8c>
    break;
 800e626:	46c0      	nop			; (mov r8, r8)
  }
}
 800e628:	46c0      	nop			; (mov r8, r8)
 800e62a:	46bd      	mov	sp, r7
 800e62c:	b00d      	add	sp, #52	; 0x34
 800e62e:	bd90      	pop	{r4, r7, pc}
 800e630:	20000410 	.word	0x20000410
 800e634:	20000138 	.word	0x20000138
 800e638:	2000015c 	.word	0x2000015c
 800e63c:	200003c8 	.word	0x200003c8
 800e640:	200003d0 	.word	0x200003d0

0800e644 <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800e64c:	4b05      	ldr	r3, [pc, #20]	; (800e664 <MlmeIndication+0x20>)
 800e64e:	2200      	movs	r2, #0
 800e650:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	785a      	ldrb	r2, [r3, #1]
 800e656:	4b03      	ldr	r3, [pc, #12]	; (800e664 <MlmeIndication+0x20>)
 800e658:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e65a:	46c0      	nop			; (mov r8, r8)
  }
}
 800e65c:	46c0      	nop			; (mov r8, r8)
 800e65e:	46bd      	mov	sp, r7
 800e660:	b002      	add	sp, #8
 800e662:	bd80      	pop	{r7, pc}
 800e664:	20000160 	.word	0x20000160

0800e668 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	0002      	movs	r2, r0
 800e670:	1dfb      	adds	r3, r7, #7
 800e672:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800e674:	1dfb      	adds	r3, r7, #7
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	2b04      	cmp	r3, #4
 800e67a:	d810      	bhi.n	800e69e <LmHandlerPackageIsInitialized+0x36>
 800e67c:	1dfb      	adds	r3, r7, #7
 800e67e:	781a      	ldrb	r2, [r3, #0]
 800e680:	4b09      	ldr	r3, [pc, #36]	; (800e6a8 <LmHandlerPackageIsInitialized+0x40>)
 800e682:	0092      	lsls	r2, r2, #2
 800e684:	58d3      	ldr	r3, [r2, r3]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d008      	beq.n	800e69e <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800e68c:	1dfb      	adds	r3, r7, #7
 800e68e:	781a      	ldrb	r2, [r3, #0]
 800e690:	4b05      	ldr	r3, [pc, #20]	; (800e6a8 <LmHandlerPackageIsInitialized+0x40>)
 800e692:	0092      	lsls	r2, r2, #2
 800e694:	58d3      	ldr	r3, [r2, r3]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	4798      	blx	r3
 800e69a:	0003      	movs	r3, r0
 800e69c:	e000      	b.n	800e6a0 <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800e69e:	2300      	movs	r3, #0
  }
}
 800e6a0:	0018      	movs	r0, r3
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	b002      	add	sp, #8
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	200003b4 	.word	0x200003b4

0800e6ac <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	0002      	movs	r2, r0
 800e6b4:	6039      	str	r1, [r7, #0]
 800e6b6:	1dfb      	adds	r3, r7, #7
 800e6b8:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e6ba:	230f      	movs	r3, #15
 800e6bc:	18fb      	adds	r3, r7, r3
 800e6be:	2200      	movs	r2, #0
 800e6c0:	701a      	strb	r2, [r3, #0]
 800e6c2:	e07b      	b.n	800e7bc <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800e6c4:	230f      	movs	r3, #15
 800e6c6:	18fb      	adds	r3, r7, r3
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	569a      	ldrsb	r2, [r3, r2]
 800e6cc:	4b41      	ldr	r3, [pc, #260]	; (800e7d4 <LmHandlerPackagesNotify+0x128>)
 800e6ce:	0092      	lsls	r2, r2, #2
 800e6d0:	58d3      	ldr	r3, [r2, r3]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d100      	bne.n	800e6d8 <LmHandlerPackagesNotify+0x2c>
 800e6d6:	e05f      	b.n	800e798 <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800e6d8:	1dfb      	adds	r3, r7, #7
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d046      	beq.n	800e76e <LmHandlerPackagesNotify+0xc2>
 800e6e0:	dc5c      	bgt.n	800e79c <LmHandlerPackagesNotify+0xf0>
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d002      	beq.n	800e6ec <LmHandlerPackagesNotify+0x40>
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d015      	beq.n	800e716 <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800e6ea:	e057      	b.n	800e79c <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800e6ec:	210f      	movs	r1, #15
 800e6ee:	187b      	adds	r3, r7, r1
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	569a      	ldrsb	r2, [r3, r2]
 800e6f4:	4b37      	ldr	r3, [pc, #220]	; (800e7d4 <LmHandlerPackagesNotify+0x128>)
 800e6f6:	0092      	lsls	r2, r2, #2
 800e6f8:	58d3      	ldr	r3, [r2, r3]
 800e6fa:	695b      	ldr	r3, [r3, #20]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d04f      	beq.n	800e7a0 <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800e700:	187b      	adds	r3, r7, r1
 800e702:	2200      	movs	r2, #0
 800e704:	569a      	ldrsb	r2, [r3, r2]
 800e706:	4b33      	ldr	r3, [pc, #204]	; (800e7d4 <LmHandlerPackagesNotify+0x128>)
 800e708:	0092      	lsls	r2, r2, #2
 800e70a:	58d3      	ldr	r3, [r2, r3]
 800e70c:	695b      	ldr	r3, [r3, #20]
 800e70e:	683a      	ldr	r2, [r7, #0]
 800e710:	0010      	movs	r0, r2
 800e712:	4798      	blx	r3
          break;
 800e714:	e044      	b.n	800e7a0 <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e716:	210f      	movs	r1, #15
 800e718:	187b      	adds	r3, r7, r1
 800e71a:	2200      	movs	r2, #0
 800e71c:	569a      	ldrsb	r2, [r3, r2]
 800e71e:	4b2d      	ldr	r3, [pc, #180]	; (800e7d4 <LmHandlerPackagesNotify+0x128>)
 800e720:	0092      	lsls	r2, r2, #2
 800e722:	58d3      	ldr	r3, [r2, r3]
 800e724:	699b      	ldr	r3, [r3, #24]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d03c      	beq.n	800e7a4 <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e72a:	187b      	adds	r3, r7, r1
 800e72c:	2200      	movs	r2, #0
 800e72e:	569a      	ldrsb	r2, [r3, r2]
 800e730:	4b28      	ldr	r3, [pc, #160]	; (800e7d4 <LmHandlerPackagesNotify+0x128>)
 800e732:	0092      	lsls	r2, r2, #2
 800e734:	58d3      	ldr	r3, [r2, r3]
 800e736:	781a      	ldrb	r2, [r3, #0]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d00a      	beq.n	800e756 <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e740:	187b      	adds	r3, r7, r1
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	b25b      	sxtb	r3, r3
 800e746:	2b00      	cmp	r3, #0
 800e748:	d12c      	bne.n	800e7a4 <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800e74a:	4b22      	ldr	r3, [pc, #136]	; (800e7d4 <LmHandlerPackagesNotify+0x128>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	4798      	blx	r3
 800e752:	1e03      	subs	r3, r0, #0
 800e754:	d026      	beq.n	800e7a4 <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800e756:	230f      	movs	r3, #15
 800e758:	18fb      	adds	r3, r7, r3
 800e75a:	2200      	movs	r2, #0
 800e75c:	569a      	ldrsb	r2, [r3, r2]
 800e75e:	4b1d      	ldr	r3, [pc, #116]	; (800e7d4 <LmHandlerPackagesNotify+0x128>)
 800e760:	0092      	lsls	r2, r2, #2
 800e762:	58d3      	ldr	r3, [r2, r3]
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	0010      	movs	r0, r2
 800e76a:	4798      	blx	r3
          break;
 800e76c:	e01a      	b.n	800e7a4 <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800e76e:	210f      	movs	r1, #15
 800e770:	187b      	adds	r3, r7, r1
 800e772:	2200      	movs	r2, #0
 800e774:	569a      	ldrsb	r2, [r3, r2]
 800e776:	4b17      	ldr	r3, [pc, #92]	; (800e7d4 <LmHandlerPackagesNotify+0x128>)
 800e778:	0092      	lsls	r2, r2, #2
 800e77a:	58d3      	ldr	r3, [r2, r3]
 800e77c:	69db      	ldr	r3, [r3, #28]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d012      	beq.n	800e7a8 <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800e782:	187b      	adds	r3, r7, r1
 800e784:	2200      	movs	r2, #0
 800e786:	569a      	ldrsb	r2, [r3, r2]
 800e788:	4b12      	ldr	r3, [pc, #72]	; (800e7d4 <LmHandlerPackagesNotify+0x128>)
 800e78a:	0092      	lsls	r2, r2, #2
 800e78c:	58d3      	ldr	r3, [r2, r3]
 800e78e:	69db      	ldr	r3, [r3, #28]
 800e790:	683a      	ldr	r2, [r7, #0]
 800e792:	0010      	movs	r0, r2
 800e794:	4798      	blx	r3
          break;
 800e796:	e007      	b.n	800e7a8 <LmHandlerPackagesNotify+0xfc>
      }
    }
 800e798:	46c0      	nop			; (mov r8, r8)
 800e79a:	e006      	b.n	800e7aa <LmHandlerPackagesNotify+0xfe>
          break;
 800e79c:	46c0      	nop			; (mov r8, r8)
 800e79e:	e004      	b.n	800e7aa <LmHandlerPackagesNotify+0xfe>
          break;
 800e7a0:	46c0      	nop			; (mov r8, r8)
 800e7a2:	e002      	b.n	800e7aa <LmHandlerPackagesNotify+0xfe>
          break;
 800e7a4:	46c0      	nop			; (mov r8, r8)
 800e7a6:	e000      	b.n	800e7aa <LmHandlerPackagesNotify+0xfe>
          break;
 800e7a8:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e7aa:	210f      	movs	r1, #15
 800e7ac:	187b      	adds	r3, r7, r1
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	b25b      	sxtb	r3, r3
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	b2da      	uxtb	r2, r3
 800e7b8:	187b      	adds	r3, r7, r1
 800e7ba:	701a      	strb	r2, [r3, #0]
 800e7bc:	230f      	movs	r3, #15
 800e7be:	18fb      	adds	r3, r7, r3
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	b25b      	sxtb	r3, r3
 800e7c4:	2b04      	cmp	r3, #4
 800e7c6:	dc00      	bgt.n	800e7ca <LmHandlerPackagesNotify+0x11e>
 800e7c8:	e77c      	b.n	800e6c4 <LmHandlerPackagesNotify+0x18>
  }
}
 800e7ca:	46c0      	nop			; (mov r8, r8)
 800e7cc:	46c0      	nop			; (mov r8, r8)
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	b004      	add	sp, #16
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	200003b4 	.word	0x200003b4

0800e7d8 <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af02      	add	r7, sp, #8
 800e7de:	0002      	movs	r2, r0
 800e7e0:	1dfb      	adds	r3, r7, #7
 800e7e2:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e7e4:	1dfb      	adds	r3, r7, #7
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	4a06      	ldr	r2, [pc, #24]	; (800e804 <DisplayClassUpdate+0x2c>)
 800e7ea:	5cd3      	ldrb	r3, [r2, r3]
 800e7ec:	001a      	movs	r2, r3
 800e7ee:	4b06      	ldr	r3, [pc, #24]	; (800e808 <DisplayClassUpdate+0x30>)
 800e7f0:	9200      	str	r2, [sp, #0]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	2002      	movs	r0, #2
 800e7f8:	f00d fa0c 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
}
 800e7fc:	46c0      	nop			; (mov r8, r8)
 800e7fe:	46bd      	mov	sp, r7
 800e800:	b002      	add	sp, #8
 800e802:	bd80      	pop	{r7, pc}
 800e804:	0801ebd0 	.word	0x0801ebd0
 800e808:	0801ebb4 	.word	0x0801ebb4

0800e80c <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800e810:	4b01      	ldr	r3, [pc, #4]	; (800e818 <LmphCompliancePackageFactory+0xc>)
}
 800e812:	0018      	movs	r0, r3
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	20000178 	.word	0x20000178

0800e81c <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	1dfb      	adds	r3, r7, #7
 800e828:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d010      	beq.n	800e852 <LmhpComplianceInit+0x36>
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00d      	beq.n	800e852 <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800e836:	4b0c      	ldr	r3, [pc, #48]	; (800e868 <LmhpComplianceInit+0x4c>)
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800e83c:	4b0b      	ldr	r3, [pc, #44]	; (800e86c <LmhpComplianceInit+0x50>)
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e842:	4b0a      	ldr	r3, [pc, #40]	; (800e86c <LmhpComplianceInit+0x50>)
 800e844:	1dfa      	adds	r2, r7, #7
 800e846:	7812      	ldrb	r2, [r2, #0]
 800e848:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800e84a:	4b08      	ldr	r3, [pc, #32]	; (800e86c <LmhpComplianceInit+0x50>)
 800e84c:	2201      	movs	r2, #1
 800e84e:	701a      	strb	r2, [r3, #0]
 800e850:	e006      	b.n	800e860 <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800e852:	4b05      	ldr	r3, [pc, #20]	; (800e868 <LmhpComplianceInit+0x4c>)
 800e854:	2200      	movs	r2, #0
 800e856:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800e858:	4b04      	ldr	r3, [pc, #16]	; (800e86c <LmhpComplianceInit+0x50>)
 800e85a:	2200      	movs	r2, #0
 800e85c:	701a      	strb	r2, [r3, #0]
  }
}
 800e85e:	46c0      	nop			; (mov r8, r8)
 800e860:	46c0      	nop			; (mov r8, r8)
 800e862:	46bd      	mov	sp, r7
 800e864:	b004      	add	sp, #16
 800e866:	bd80      	pop	{r7, pc}
 800e868:	20000548 	.word	0x20000548
 800e86c:	20000534 	.word	0x20000534

0800e870 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800e874:	4b02      	ldr	r3, [pc, #8]	; (800e880 <LmhpComplianceIsInitialized+0x10>)
 800e876:	781b      	ldrb	r3, [r3, #0]
}
 800e878:	0018      	movs	r0, r3
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	46c0      	nop			; (mov r8, r8)
 800e880:	20000534 	.word	0x20000534

0800e884 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800e888:	4b06      	ldr	r3, [pc, #24]	; (800e8a4 <LmhpComplianceIsRunning+0x20>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	2201      	movs	r2, #1
 800e88e:	4053      	eors	r3, r2
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d001      	beq.n	800e89a <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800e896:	2300      	movs	r3, #0
 800e898:	e001      	b.n	800e89e <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800e89a:	4b02      	ldr	r3, [pc, #8]	; (800e8a4 <LmhpComplianceIsRunning+0x20>)
 800e89c:	785b      	ldrb	r3, [r3, #1]
}
 800e89e:	0018      	movs	r0, r3
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	20000534 	.word	0x20000534

0800e8a8 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e8b0:	4b0e      	ldr	r3, [pc, #56]	; (800e8ec <LmhpComplianceOnMcpsConfirm+0x44>)
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	4053      	eors	r3, r2
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d112      	bne.n	800e8e4 <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800e8be:	4b0b      	ldr	r3, [pc, #44]	; (800e8ec <LmhpComplianceOnMcpsConfirm+0x44>)
 800e8c0:	785b      	ldrb	r3, [r3, #1]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d00f      	beq.n	800e8e6 <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d10b      	bne.n	800e8e6 <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d007      	beq.n	800e8e6 <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800e8d6:	4b05      	ldr	r3, [pc, #20]	; (800e8ec <LmhpComplianceOnMcpsConfirm+0x44>)
 800e8d8:	899b      	ldrh	r3, [r3, #12]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	4b03      	ldr	r3, [pc, #12]	; (800e8ec <LmhpComplianceOnMcpsConfirm+0x44>)
 800e8e0:	819a      	strh	r2, [r3, #12]
 800e8e2:	e000      	b.n	800e8e6 <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800e8e4:	46c0      	nop			; (mov r8, r8)
  }
}
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	b002      	add	sp, #8
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	20000534 	.word	0x20000534

0800e8f0 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e8f8:	4b0d      	ldr	r3, [pc, #52]	; (800e930 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	4053      	eors	r3, r2
 800e900:	b2db      	uxtb	r3, r3
 800e902:	2b00      	cmp	r3, #0
 800e904:	d10f      	bne.n	800e926 <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	2b04      	cmp	r3, #4
 800e90c:	d10c      	bne.n	800e928 <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800e90e:	4b08      	ldr	r3, [pc, #32]	; (800e930 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e910:	2201      	movs	r2, #1
 800e912:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	7a1a      	ldrb	r2, [r3, #8]
 800e918:	4b05      	ldr	r3, [pc, #20]	; (800e930 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e91a:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	7a5a      	ldrb	r2, [r3, #9]
 800e920:	4b03      	ldr	r3, [pc, #12]	; (800e930 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e922:	741a      	strb	r2, [r3, #16]
 800e924:	e000      	b.n	800e928 <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800e926:	46c0      	nop			; (mov r8, r8)
  }
}
 800e928:	46bd      	mov	sp, r7
 800e92a:	b002      	add	sp, #8
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	46c0      	nop			; (mov r8, r8)
 800e930:	20000534 	.word	0x20000534

0800e934 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800e934:	b5b0      	push	{r4, r5, r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800e93a:	4b32      	ldr	r3, [pc, #200]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2201      	movs	r2, #1
 800e940:	4053      	eors	r3, r2
 800e942:	b2db      	uxtb	r3, r3
 800e944:	2b00      	cmp	r3, #0
 800e946:	d002      	beq.n	800e94e <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800e948:	2301      	movs	r3, #1
 800e94a:	425b      	negs	r3, r3
 800e94c:	e056      	b.n	800e9fc <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800e94e:	4b2d      	ldr	r3, [pc, #180]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e950:	7b9b      	ldrb	r3, [r3, #14]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d019      	beq.n	800e98a <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800e956:	4b2b      	ldr	r3, [pc, #172]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e958:	2200      	movs	r2, #0
 800e95a:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800e95c:	4b29      	ldr	r3, [pc, #164]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e95e:	2203      	movs	r2, #3
 800e960:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800e962:	4b28      	ldr	r3, [pc, #160]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e964:	689b      	ldr	r3, [r3, #8]
 800e966:	2205      	movs	r2, #5
 800e968:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800e96a:	4b26      	ldr	r3, [pc, #152]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	3301      	adds	r3, #1
 800e970:	4a24      	ldr	r2, [pc, #144]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e972:	7bd2      	ldrb	r2, [r2, #15]
 800e974:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800e976:	4b23      	ldr	r3, [pc, #140]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	3302      	adds	r3, #2
 800e97c:	4a21      	ldr	r2, [pc, #132]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e97e:	7c12      	ldrb	r2, [r2, #16]
 800e980:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800e982:	4b20      	ldr	r3, [pc, #128]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e984:	2201      	movs	r2, #1
 800e986:	709a      	strb	r2, [r3, #2]
 800e988:	e01c      	b.n	800e9c4 <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800e98a:	4b1e      	ldr	r3, [pc, #120]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e98c:	789b      	ldrb	r3, [r3, #2]
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d005      	beq.n	800e99e <LmhpComplianceTxProcess+0x6a>
 800e992:	2b04      	cmp	r3, #4
 800e994:	d116      	bne.n	800e9c4 <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800e996:	4b1b      	ldr	r3, [pc, #108]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e998:	2201      	movs	r2, #1
 800e99a:	709a      	strb	r2, [r3, #2]
        break;
 800e99c:	e012      	b.n	800e9c4 <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800e99e:	4b19      	ldr	r3, [pc, #100]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e9a0:	2202      	movs	r2, #2
 800e9a2:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800e9a4:	4b17      	ldr	r3, [pc, #92]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e9a6:	899b      	ldrh	r3, [r3, #12]
 800e9a8:	0a1b      	lsrs	r3, r3, #8
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	4b15      	ldr	r3, [pc, #84]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	b2d2      	uxtb	r2, r2
 800e9b2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800e9b4:	4b13      	ldr	r3, [pc, #76]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e9b6:	899a      	ldrh	r2, [r3, #12]
 800e9b8:	4b12      	ldr	r3, [pc, #72]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	b2d2      	uxtb	r2, r2
 800e9c0:	701a      	strb	r2, [r3, #0]
        break;
 800e9c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800e9c4:	2508      	movs	r5, #8
 800e9c6:	197b      	adds	r3, r7, r5
 800e9c8:	22e0      	movs	r2, #224	; 0xe0
 800e9ca:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800e9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e9ce:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800e9d0:	197b      	adds	r3, r7, r5
 800e9d2:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800e9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e9d6:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800e9d8:	197b      	adds	r3, r7, r5
 800e9da:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800e9e0:	4b09      	ldr	r3, [pc, #36]	; (800ea08 <LmhpComplianceTxProcess+0xd4>)
 800e9e2:	0018      	movs	r0, r3
 800e9e4:	f00d ffe2 	bl	801c9ac <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800e9e8:	4b08      	ldr	r3, [pc, #32]	; (800ea0c <LmhpComplianceTxProcess+0xd8>)
 800e9ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e9ec:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <LmhpComplianceTxProcess+0xd0>)
 800e9ee:	791b      	ldrb	r3, [r3, #4]
 800e9f0:	0019      	movs	r1, r3
 800e9f2:	1d3a      	adds	r2, r7, #4
 800e9f4:	1978      	adds	r0, r7, r5
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	47a0      	blx	r4
 800e9fa:	0003      	movs	r3, r0
                                             true);
}
 800e9fc:	0018      	movs	r0, r3
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	b004      	add	sp, #16
 800ea02:	bdb0      	pop	{r4, r5, r7, pc}
 800ea04:	20000534 	.word	0x20000534
 800ea08:	2000051c 	.word	0x2000051c
 800ea0c:	20000178 	.word	0x20000178

0800ea10 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b0a2      	sub	sp, #136	; 0x88
 800ea14:	af02      	add	r7, sp, #8
 800ea16:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800ea18:	4be1      	ldr	r3, [pc, #900]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	4053      	eors	r3, r2
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d000      	beq.n	800ea28 <LmhpComplianceOnMcpsIndication+0x18>
 800ea26:	e1b2      	b.n	800ed8e <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	7b5b      	ldrb	r3, [r3, #13]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	4053      	eors	r3, r2
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d000      	beq.n	800ea38 <LmhpComplianceOnMcpsIndication+0x28>
 800ea36:	e1ac      	b.n	800ed92 <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800ea38:	4bd9      	ldr	r3, [pc, #868]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea3a:	785b      	ldrb	r3, [r3, #1]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00c      	beq.n	800ea5a <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	7c9b      	ldrb	r3, [r3, #18]
 800ea44:	2201      	movs	r2, #1
 800ea46:	4053      	eors	r3, r2
 800ea48:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d005      	beq.n	800ea5a <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800ea4e:	4bd4      	ldr	r3, [pc, #848]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea50:	899b      	ldrh	r3, [r3, #12]
 800ea52:	3301      	adds	r3, #1
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	4bd2      	ldr	r3, [pc, #840]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea58:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	78db      	ldrb	r3, [r3, #3]
 800ea5e:	2be0      	cmp	r3, #224	; 0xe0
 800ea60:	d000      	beq.n	800ea64 <LmhpComplianceOnMcpsIndication+0x54>
 800ea62:	e198      	b.n	800ed96 <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800ea64:	4bce      	ldr	r3, [pc, #824]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea66:	785b      	ldrb	r3, [r3, #1]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	4053      	eors	r3, r2
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d063      	beq.n	800eb3a <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	7b1b      	ldrb	r3, [r3, #12]
 800ea76:	2b04      	cmp	r3, #4
 800ea78:	d000      	beq.n	800ea7c <LmhpComplianceOnMcpsIndication+0x6c>
 800ea7a:	e1a0      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d000      	beq.n	800ea88 <LmhpComplianceOnMcpsIndication+0x78>
 800ea86:	e19a      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d000      	beq.n	800ea96 <LmhpComplianceOnMcpsIndication+0x86>
 800ea94:	e193      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	3302      	adds	r3, #2
 800ea9c:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d000      	beq.n	800eaa4 <LmhpComplianceOnMcpsIndication+0x94>
 800eaa2:	e18c      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	3303      	adds	r3, #3
 800eaaa:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d000      	beq.n	800eab2 <LmhpComplianceOnMcpsIndication+0xa2>
 800eab0:	e185      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800eab2:	4bbb      	ldr	r3, [pc, #748]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800eab8:	4bb9      	ldr	r3, [pc, #740]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eaba:	22e0      	movs	r2, #224	; 0xe0
 800eabc:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800eabe:	4bb8      	ldr	r3, [pc, #736]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eac0:	2202      	movs	r2, #2
 800eac2:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800eac4:	4bb6      	ldr	r3, [pc, #728]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eac6:	2200      	movs	r2, #0
 800eac8:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800eaca:	4bb5      	ldr	r3, [pc, #724]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eacc:	2200      	movs	r2, #0
 800eace:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800ead0:	4bb3      	ldr	r3, [pc, #716]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800ead6:	4bb2      	ldr	r3, [pc, #712]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ead8:	2200      	movs	r2, #0
 800eada:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800eadc:	4bb0      	ldr	r3, [pc, #704]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eade:	2201      	movs	r2, #1
 800eae0:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800eae2:	4baf      	ldr	r3, [pc, #700]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eae4:	2201      	movs	r2, #1
 800eae6:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800eae8:	2108      	movs	r1, #8
 800eaea:	187b      	adds	r3, r7, r1
 800eaec:	2204      	movs	r2, #4
 800eaee:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800eaf0:	187b      	adds	r3, r7, r1
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800eaf6:	187b      	adds	r3, r7, r1
 800eaf8:	0018      	movs	r0, r3
 800eafa:	f004 fe57 	bl	80137ac <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800eafe:	2000      	movs	r0, #0
 800eb00:	f005 fc80 	bl	8014404 <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800eb04:	4ba7      	ldr	r3, [pc, #668]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800eb0e:	4ba5      	ldr	r3, [pc, #660]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800eb16:	4ba4      	ldr	r3, [pc, #656]	; (800eda8 <LmhpComplianceOnMcpsIndication+0x398>)
 800eb18:	2201      	movs	r2, #1
 800eb1a:	4251      	negs	r1, r2
 800eb1c:	48a3      	ldr	r0, [pc, #652]	; (800edac <LmhpComplianceOnMcpsIndication+0x39c>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	9200      	str	r2, [sp, #0]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f00d ff0a 	bl	801c93c <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800eb28:	4aa1      	ldr	r2, [pc, #644]	; (800edb0 <LmhpComplianceOnMcpsIndication+0x3a0>)
 800eb2a:	4ba0      	ldr	r3, [pc, #640]	; (800edac <LmhpComplianceOnMcpsIndication+0x39c>)
 800eb2c:	0011      	movs	r1, r2
 800eb2e:	0018      	movs	r0, r3
 800eb30:	f00e f82c 	bl	801cb8c <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800eb34:	f7ff fefe 	bl	800e934 <LmhpComplianceTxProcess>
 800eb38:	e141      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	689b      	ldr	r3, [r3, #8]
 800eb3e:	781a      	ldrb	r2, [r3, #0]
 800eb40:	4b97      	ldr	r3, [pc, #604]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb42:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800eb44:	4b96      	ldr	r3, [pc, #600]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb46:	789b      	ldrb	r3, [r3, #2]
 800eb48:	2b0a      	cmp	r3, #10
 800eb4a:	d900      	bls.n	800eb4e <LmhpComplianceOnMcpsIndication+0x13e>
 800eb4c:	e125      	b.n	800ed9a <LmhpComplianceOnMcpsIndication+0x38a>
 800eb4e:	009a      	lsls	r2, r3, #2
 800eb50:	4b98      	ldr	r3, [pc, #608]	; (800edb4 <LmhpComplianceOnMcpsIndication+0x3a4>)
 800eb52:	18d3      	adds	r3, r2, r3
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800eb58:	4b94      	ldr	r3, [pc, #592]	; (800edac <LmhpComplianceOnMcpsIndication+0x39c>)
 800eb5a:	0018      	movs	r0, r3
 800eb5c:	f00d ff9e 	bl	801ca9c <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800eb60:	4b8f      	ldr	r3, [pc, #572]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800eb66:	4b8e      	ldr	r3, [pc, #568]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb68:	2200      	movs	r2, #0
 800eb6a:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800eb6c:	2108      	movs	r1, #8
 800eb6e:	187b      	adds	r3, r7, r1
 800eb70:	2204      	movs	r2, #4
 800eb72:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800eb74:	4b8b      	ldr	r3, [pc, #556]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	781a      	ldrb	r2, [r3, #0]
 800eb7a:	187b      	adds	r3, r7, r1
 800eb7c:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800eb7e:	187b      	adds	r3, r7, r1
 800eb80:	0018      	movs	r0, r3
 800eb82:	f004 fe13 	bl	80137ac <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800eb86:	4b87      	ldr	r3, [pc, #540]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	785b      	ldrb	r3, [r3, #1]
 800eb8c:	0018      	movs	r0, r3
 800eb8e:	f005 fc39 	bl	8014404 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800eb92:	4b84      	ldr	r3, [pc, #528]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d100      	bne.n	800eb9e <LmhpComplianceOnMcpsIndication+0x18e>
 800eb9c:	e10e      	b.n	800edbc <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800eb9e:	4b81      	ldr	r3, [pc, #516]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	4798      	blx	r3
        }
      }
      break;
 800eba6:	e109      	b.n	800edbc <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800eba8:	4b7d      	ldr	r3, [pc, #500]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebaa:	2202      	movs	r2, #2
 800ebac:	71da      	strb	r2, [r3, #7]
        break;
 800ebae:	e106      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800ebb0:	4b7b      	ldr	r3, [pc, #492]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800ebb6:	4b7a      	ldr	r3, [pc, #488]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebb8:	2201      	movs	r2, #1
 800ebba:	709a      	strb	r2, [r3, #2]
        break;
 800ebbc:	e0ff      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800ebbe:	4b78      	ldr	r3, [pc, #480]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800ebc4:	4b76      	ldr	r3, [pc, #472]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	709a      	strb	r2, [r3, #2]
        break;
 800ebca:	e0f8      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	7b1a      	ldrb	r2, [r3, #12]
 800ebd0:	4b73      	ldr	r3, [pc, #460]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebd2:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800ebd4:	4b72      	ldr	r3, [pc, #456]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	2204      	movs	r2, #4
 800ebda:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800ebdc:	237f      	movs	r3, #127	; 0x7f
 800ebde:	18fb      	adds	r3, r7, r3
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	701a      	strb	r2, [r3, #0]
 800ebe4:	e013      	b.n	800ec0e <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	689a      	ldr	r2, [r3, #8]
 800ebea:	207f      	movs	r0, #127	; 0x7f
 800ebec:	183b      	adds	r3, r7, r0
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	18d3      	adds	r3, r2, r3
 800ebf2:	781a      	ldrb	r2, [r3, #0]
 800ebf4:	4b6a      	ldr	r3, [pc, #424]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebf6:	6899      	ldr	r1, [r3, #8]
 800ebf8:	183b      	adds	r3, r7, r0
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	18cb      	adds	r3, r1, r3
 800ebfe:	3201      	adds	r2, #1
 800ec00:	b2d2      	uxtb	r2, r2
 800ec02:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800ec04:	183b      	adds	r3, r7, r0
 800ec06:	781a      	ldrb	r2, [r3, #0]
 800ec08:	183b      	adds	r3, r7, r0
 800ec0a:	3201      	adds	r2, #1
 800ec0c:	701a      	strb	r2, [r3, #0]
 800ec0e:	4b64      	ldr	r3, [pc, #400]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec10:	799a      	ldrb	r2, [r3, #6]
 800ec12:	4b63      	ldr	r3, [pc, #396]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec14:	79db      	ldrb	r3, [r3, #7]
 800ec16:	1c18      	adds	r0, r3, #0
 800ec18:	1c11      	adds	r1, r2, #0
 800ec1a:	b2ca      	uxtb	r2, r1
 800ec1c:	b2c3      	uxtb	r3, r0
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d900      	bls.n	800ec24 <LmhpComplianceOnMcpsIndication+0x214>
 800ec22:	1c01      	adds	r1, r0, #0
 800ec24:	b2cb      	uxtb	r3, r1
 800ec26:	227f      	movs	r2, #127	; 0x7f
 800ec28:	18ba      	adds	r2, r7, r2
 800ec2a:	7812      	ldrb	r2, [r2, #0]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d3da      	bcc.n	800ebe6 <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800ec30:	e0c5      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800ec32:	2168      	movs	r1, #104	; 0x68
 800ec34:	187b      	adds	r3, r7, r1
 800ec36:	2204      	movs	r2, #4
 800ec38:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800ec3a:	187b      	adds	r3, r7, r1
 800ec3c:	0018      	movs	r0, r3
 800ec3e:	f005 f93b 	bl	8013eb8 <LoRaMacMlmeRequest>
      }
      break;
 800ec42:	e0bc      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800ec44:	4b59      	ldr	r3, [pc, #356]	; (800edac <LmhpComplianceOnMcpsIndication+0x39c>)
 800ec46:	0018      	movs	r0, r3
 800ec48:	f00d ff28 	bl	801ca9c <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800ec4c:	4b54      	ldr	r3, [pc, #336]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800ec52:	4b53      	ldr	r3, [pc, #332]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800ec58:	2108      	movs	r1, #8
 800ec5a:	187b      	adds	r3, r7, r1
 800ec5c:	2204      	movs	r2, #4
 800ec5e:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ec60:	4b50      	ldr	r3, [pc, #320]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	781a      	ldrb	r2, [r3, #0]
 800ec66:	187b      	adds	r3, r7, r1
 800ec68:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ec6a:	187b      	adds	r3, r7, r1
 800ec6c:	0018      	movs	r0, r3
 800ec6e:	f004 fd9d 	bl	80137ac <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800ec72:	4b4c      	ldr	r3, [pc, #304]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	785b      	ldrb	r3, [r3, #1]
 800ec78:	0018      	movs	r0, r3
 800ec7a:	f005 fbc3 	bl	8014404 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800ec7e:	4b49      	ldr	r3, [pc, #292]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d003      	beq.n	800ec90 <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800ec88:	4b46      	ldr	r3, [pc, #280]	; (800eda4 <LmhpComplianceOnMcpsIndication+0x394>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	689b      	ldr	r3, [r3, #8]
 800ec8e:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800ec90:	4b49      	ldr	r3, [pc, #292]	; (800edb8 <LmhpComplianceOnMcpsIndication+0x3a8>)
 800ec92:	6a1b      	ldr	r3, [r3, #32]
 800ec94:	2002      	movs	r0, #2
 800ec96:	4798      	blx	r3
      }
      break;
 800ec98:	e091      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	7b1b      	ldrb	r3, [r3, #12]
 800ec9e:	2b03      	cmp	r3, #3
 800eca0:	d114      	bne.n	800eccc <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800eca2:	2154      	movs	r1, #84	; 0x54
 800eca4:	187b      	adds	r3, r7, r1
 800eca6:	2205      	movs	r2, #5
 800eca8:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	021b      	lsls	r3, r3, #8
 800ecb4:	b21a      	sxth	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	689b      	ldr	r3, [r3, #8]
 800ecba:	3302      	adds	r3, #2
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	b21b      	sxth	r3, r3
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	b21b      	sxth	r3, r3
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	187b      	adds	r3, r7, r1
 800ecc8:	809a      	strh	r2, [r3, #4]
 800ecca:	e031      	b.n	800ed30 <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	7b1b      	ldrb	r3, [r3, #12]
 800ecd0:	2b07      	cmp	r3, #7
 800ecd2:	d12d      	bne.n	800ed30 <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800ecd4:	2154      	movs	r1, #84	; 0x54
 800ecd6:	187b      	adds	r3, r7, r1
 800ecd8:	2206      	movs	r2, #6
 800ecda:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	3301      	adds	r3, #1
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	021b      	lsls	r3, r3, #8
 800ece6:	b21a      	sxth	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	3302      	adds	r3, #2
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	b21b      	sxth	r3, r3
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	b21b      	sxth	r3, r3
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	187b      	adds	r3, r7, r1
 800ecfa:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	3303      	adds	r3, #3
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	041a      	lsls	r2, r3, #16
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	3304      	adds	r3, #4
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	021b      	lsls	r3, r3, #8
 800ed10:	431a      	orrs	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	3305      	adds	r3, #5
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	001a      	movs	r2, r3
 800ed1e:	2364      	movs	r3, #100	; 0x64
 800ed20:	435a      	muls	r2, r3
 800ed22:	187b      	adds	r3, r7, r1
 800ed24:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	799a      	ldrb	r2, [r3, #6]
 800ed2c:	187b      	adds	r3, r7, r1
 800ed2e:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800ed30:	2354      	movs	r3, #84	; 0x54
 800ed32:	18fb      	adds	r3, r7, r3
 800ed34:	0018      	movs	r0, r3
 800ed36:	f005 f8bf 	bl	8013eb8 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800ed3a:	4b19      	ldr	r3, [pc, #100]	; (800eda0 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	709a      	strb	r2, [r3, #2]
      }
      break;
 800ed40:	e03d      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800ed42:	2140      	movs	r1, #64	; 0x40
 800ed44:	187b      	adds	r3, r7, r1
 800ed46:	220a      	movs	r2, #10
 800ed48:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800ed4a:	187b      	adds	r3, r7, r1
 800ed4c:	0018      	movs	r0, r3
 800ed4e:	f005 f8b3 	bl	8013eb8 <LoRaMacMlmeRequest>
      }
      break;
 800ed52:	e034      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800ed54:	2108      	movs	r1, #8
 800ed56:	187b      	adds	r3, r7, r1
 800ed58:	2200      	movs	r2, #0
 800ed5a:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	3301      	adds	r3, #1
 800ed62:	781a      	ldrb	r2, [r3, #0]
 800ed64:	187b      	adds	r3, r7, r1
 800ed66:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ed68:	187b      	adds	r3, r7, r1
 800ed6a:	0018      	movs	r0, r3
 800ed6c:	f004 fd1e 	bl	80137ac <LoRaMacMibSetRequestConfirm>
      }
      break;
 800ed70:	e025      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800ed72:	212c      	movs	r1, #44	; 0x2c
 800ed74:	187b      	adds	r3, r7, r1
 800ed76:	220d      	movs	r2, #13
 800ed78:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	785a      	ldrb	r2, [r3, #1]
 800ed80:	187b      	adds	r3, r7, r1
 800ed82:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800ed84:	187b      	adds	r3, r7, r1
 800ed86:	0018      	movs	r0, r3
 800ed88:	f005 f896 	bl	8013eb8 <LoRaMacMlmeRequest>
      }
      break;
 800ed8c:	e017      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ed8e:	46c0      	nop			; (mov r8, r8)
 800ed90:	e015      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ed92:	46c0      	nop			; (mov r8, r8)
 800ed94:	e013      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ed96:	46c0      	nop			; (mov r8, r8)
 800ed98:	e011      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800ed9a:	46c0      	nop			; (mov r8, r8)
 800ed9c:	e00f      	b.n	800edbe <LmhpComplianceOnMcpsIndication+0x3ae>
 800ed9e:	46c0      	nop			; (mov r8, r8)
 800eda0:	20000534 	.word	0x20000534
 800eda4:	20000548 	.word	0x20000548
 800eda8:	0800edcf 	.word	0x0800edcf
 800edac:	2000051c 	.word	0x2000051c
 800edb0:	00004e20 	.word	0x00004e20
 800edb4:	0801ebe4 	.word	0x0801ebe4
 800edb8:	20000178 	.word	0x20000178
      break;
 800edbc:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800edbe:	46bd      	mov	sp, r7
 800edc0:	b020      	add	sp, #128	; 0x80
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800edc8:	46c0      	nop			; (mov r8, r8)
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b082      	sub	sp, #8
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800edd6:	f7ff fdad 	bl	800e934 <LmhpComplianceTxProcess>
}
 800edda:	46c0      	nop			; (mov r8, r8)
 800eddc:	46bd      	mov	sp, r7
 800edde:	b002      	add	sp, #8
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b082      	sub	sp, #8
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	0002      	movs	r2, r0
 800edea:	1dfb      	adds	r3, r7, #7
 800edec:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800edee:	46c0      	nop			; (mov r8, r8)
 800edf0:	46bd      	mov	sp, r7
 800edf2:	b002      	add	sp, #8
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800edfa:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800edfc:	0018      	movs	r0, r3
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800ee06:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ee08:	0018      	movs	r0, r3
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
	...

0800ee10 <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800ee10:	b5b0      	push	{r4, r5, r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ee16:	f00d ff71 	bl	801ccfc <UTIL_TIMER_GetCurrentTime>
 800ee1a:	0002      	movs	r2, r0
 800ee1c:	4b14      	ldr	r3, [pc, #80]	; (800ee70 <OnRadioTxDone+0x60>)
 800ee1e:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ee20:	4d14      	ldr	r5, [pc, #80]	; (800ee74 <OnRadioTxDone+0x64>)
 800ee22:	23ce      	movs	r3, #206	; 0xce
 800ee24:	009c      	lsls	r4, r3, #2
 800ee26:	003b      	movs	r3, r7
 800ee28:	0018      	movs	r0, r3
 800ee2a:	f00d fd15 	bl	801c858 <SysTimeGet>
 800ee2e:	003a      	movs	r2, r7
 800ee30:	192b      	adds	r3, r5, r4
 800ee32:	ca03      	ldmia	r2!, {r0, r1}
 800ee34:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800ee36:	4b10      	ldr	r3, [pc, #64]	; (800ee78 <OnRadioTxDone+0x68>)
 800ee38:	781a      	ldrb	r2, [r3, #0]
 800ee3a:	2110      	movs	r1, #16
 800ee3c:	430a      	orrs	r2, r1
 800ee3e:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ee40:	4a0c      	ldr	r2, [pc, #48]	; (800ee74 <OnRadioTxDone+0x64>)
 800ee42:	23d2      	movs	r3, #210	; 0xd2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	58d3      	ldr	r3, [r2, r3]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00c      	beq.n	800ee66 <OnRadioTxDone+0x56>
 800ee4c:	4a09      	ldr	r2, [pc, #36]	; (800ee74 <OnRadioTxDone+0x64>)
 800ee4e:	23d2      	movs	r3, #210	; 0xd2
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	58d3      	ldr	r3, [r2, r3]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d005      	beq.n	800ee66 <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ee5a:	4a06      	ldr	r2, [pc, #24]	; (800ee74 <OnRadioTxDone+0x64>)
 800ee5c:	23d2      	movs	r3, #210	; 0xd2
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	58d3      	ldr	r3, [r2, r3]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800ee66:	46c0      	nop			; (mov r8, r8)
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	b002      	add	sp, #8
 800ee6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee6e:	46c0      	nop			; (mov r8, r8)
 800ee70:	2000168c 	.word	0x2000168c
 800ee74:	2000054c 	.word	0x2000054c
 800ee78:	20000b7c 	.word	0x20000b7c

0800ee7c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ee7c:	b5b0      	push	{r4, r5, r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	000c      	movs	r4, r1
 800ee86:	0010      	movs	r0, r2
 800ee88:	0019      	movs	r1, r3
 800ee8a:	250a      	movs	r5, #10
 800ee8c:	197b      	adds	r3, r7, r5
 800ee8e:	1c22      	adds	r2, r4, #0
 800ee90:	801a      	strh	r2, [r3, #0]
 800ee92:	2408      	movs	r4, #8
 800ee94:	193b      	adds	r3, r7, r4
 800ee96:	1c02      	adds	r2, r0, #0
 800ee98:	801a      	strh	r2, [r3, #0]
 800ee9a:	1dfb      	adds	r3, r7, #7
 800ee9c:	1c0a      	adds	r2, r1, #0
 800ee9e:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800eea0:	f00d ff2c 	bl	801ccfc <UTIL_TIMER_GetCurrentTime>
 800eea4:	0002      	movs	r2, r0
 800eea6:	4b16      	ldr	r3, [pc, #88]	; (800ef00 <OnRadioRxDone+0x84>)
 800eea8:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800eeaa:	4b15      	ldr	r3, [pc, #84]	; (800ef00 <OnRadioRxDone+0x84>)
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800eeb0:	4b13      	ldr	r3, [pc, #76]	; (800ef00 <OnRadioRxDone+0x84>)
 800eeb2:	197a      	adds	r2, r7, r5
 800eeb4:	8812      	ldrh	r2, [r2, #0]
 800eeb6:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800eeb8:	4b11      	ldr	r3, [pc, #68]	; (800ef00 <OnRadioRxDone+0x84>)
 800eeba:	193a      	adds	r2, r7, r4
 800eebc:	8812      	ldrh	r2, [r2, #0]
 800eebe:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800eec0:	4b0f      	ldr	r3, [pc, #60]	; (800ef00 <OnRadioRxDone+0x84>)
 800eec2:	1dfa      	adds	r2, r7, #7
 800eec4:	7812      	ldrb	r2, [r2, #0]
 800eec6:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800eec8:	4b0e      	ldr	r3, [pc, #56]	; (800ef04 <OnRadioRxDone+0x88>)
 800eeca:	781a      	ldrb	r2, [r3, #0]
 800eecc:	2108      	movs	r1, #8
 800eece:	430a      	orrs	r2, r1
 800eed0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eed2:	4a0d      	ldr	r2, [pc, #52]	; (800ef08 <OnRadioRxDone+0x8c>)
 800eed4:	23d2      	movs	r3, #210	; 0xd2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	58d3      	ldr	r3, [r2, r3]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00c      	beq.n	800eef8 <OnRadioRxDone+0x7c>
 800eede:	4a0a      	ldr	r2, [pc, #40]	; (800ef08 <OnRadioRxDone+0x8c>)
 800eee0:	23d2      	movs	r3, #210	; 0xd2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	58d3      	ldr	r3, [r2, r3]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d005      	beq.n	800eef8 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eeec:	4a06      	ldr	r2, [pc, #24]	; (800ef08 <OnRadioRxDone+0x8c>)
 800eeee:	23d2      	movs	r3, #210	; 0xd2
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	58d3      	ldr	r3, [r2, r3]
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800eef8:	46c0      	nop			; (mov r8, r8)
 800eefa:	46bd      	mov	sp, r7
 800eefc:	b004      	add	sp, #16
 800eefe:	bdb0      	pop	{r4, r5, r7, pc}
 800ef00:	20001690 	.word	0x20001690
 800ef04:	20000b7c 	.word	0x20000b7c
 800ef08:	2000054c 	.word	0x2000054c

0800ef0c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800ef10:	4b0d      	ldr	r3, [pc, #52]	; (800ef48 <OnRadioTxTimeout+0x3c>)
 800ef12:	781a      	ldrb	r2, [r3, #0]
 800ef14:	2104      	movs	r1, #4
 800ef16:	430a      	orrs	r2, r1
 800ef18:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ef1a:	4a0c      	ldr	r2, [pc, #48]	; (800ef4c <OnRadioTxTimeout+0x40>)
 800ef1c:	23d2      	movs	r3, #210	; 0xd2
 800ef1e:	009b      	lsls	r3, r3, #2
 800ef20:	58d3      	ldr	r3, [r2, r3]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00c      	beq.n	800ef40 <OnRadioTxTimeout+0x34>
 800ef26:	4a09      	ldr	r2, [pc, #36]	; (800ef4c <OnRadioTxTimeout+0x40>)
 800ef28:	23d2      	movs	r3, #210	; 0xd2
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	58d3      	ldr	r3, [r2, r3]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d005      	beq.n	800ef40 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef34:	4a05      	ldr	r2, [pc, #20]	; (800ef4c <OnRadioTxTimeout+0x40>)
 800ef36:	23d2      	movs	r3, #210	; 0xd2
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	58d3      	ldr	r3, [r2, r3]
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800ef40:	46c0      	nop			; (mov r8, r8)
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	46c0      	nop			; (mov r8, r8)
 800ef48:	20000b7c 	.word	0x20000b7c
 800ef4c:	2000054c 	.word	0x2000054c

0800ef50 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ef54:	4b0d      	ldr	r3, [pc, #52]	; (800ef8c <OnRadioRxError+0x3c>)
 800ef56:	781a      	ldrb	r2, [r3, #0]
 800ef58:	2102      	movs	r1, #2
 800ef5a:	430a      	orrs	r2, r1
 800ef5c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ef5e:	4a0c      	ldr	r2, [pc, #48]	; (800ef90 <OnRadioRxError+0x40>)
 800ef60:	23d2      	movs	r3, #210	; 0xd2
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	58d3      	ldr	r3, [r2, r3]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00c      	beq.n	800ef84 <OnRadioRxError+0x34>
 800ef6a:	4a09      	ldr	r2, [pc, #36]	; (800ef90 <OnRadioRxError+0x40>)
 800ef6c:	23d2      	movs	r3, #210	; 0xd2
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	58d3      	ldr	r3, [r2, r3]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d005      	beq.n	800ef84 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef78:	4a05      	ldr	r2, [pc, #20]	; (800ef90 <OnRadioRxError+0x40>)
 800ef7a:	23d2      	movs	r3, #210	; 0xd2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	58d3      	ldr	r3, [r2, r3]
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	4798      	blx	r3
    }
}
 800ef84:	46c0      	nop			; (mov r8, r8)
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	46c0      	nop			; (mov r8, r8)
 800ef8c:	20000b7c 	.word	0x20000b7c
 800ef90:	2000054c 	.word	0x2000054c

0800ef94 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ef98:	4b0d      	ldr	r3, [pc, #52]	; (800efd0 <OnRadioRxTimeout+0x3c>)
 800ef9a:	781a      	ldrb	r2, [r3, #0]
 800ef9c:	2101      	movs	r1, #1
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800efa2:	4a0c      	ldr	r2, [pc, #48]	; (800efd4 <OnRadioRxTimeout+0x40>)
 800efa4:	23d2      	movs	r3, #210	; 0xd2
 800efa6:	009b      	lsls	r3, r3, #2
 800efa8:	58d3      	ldr	r3, [r2, r3]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00c      	beq.n	800efc8 <OnRadioRxTimeout+0x34>
 800efae:	4a09      	ldr	r2, [pc, #36]	; (800efd4 <OnRadioRxTimeout+0x40>)
 800efb0:	23d2      	movs	r3, #210	; 0xd2
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	58d3      	ldr	r3, [r2, r3]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d005      	beq.n	800efc8 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800efbc:	4a05      	ldr	r2, [pc, #20]	; (800efd4 <OnRadioRxTimeout+0x40>)
 800efbe:	23d2      	movs	r3, #210	; 0xd2
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	58d3      	ldr	r3, [r2, r3]
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800efc8:	46c0      	nop			; (mov r8, r8)
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	46c0      	nop			; (mov r8, r8)
 800efd0:	20000b7c 	.word	0x20000b7c
 800efd4:	2000054c 	.word	0x2000054c

0800efd8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800efdc:	4b0a      	ldr	r3, [pc, #40]	; (800f008 <UpdateRxSlotIdleState+0x30>)
 800efde:	4a0b      	ldr	r2, [pc, #44]	; (800f00c <UpdateRxSlotIdleState+0x34>)
 800efe0:	589b      	ldr	r3, [r3, r2]
 800efe2:	227c      	movs	r2, #124	; 0x7c
 800efe4:	5c9b      	ldrb	r3, [r3, r2]
 800efe6:	2b02      	cmp	r3, #2
 800efe8:	d005      	beq.n	800eff6 <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800efea:	4a07      	ldr	r2, [pc, #28]	; (800f008 <UpdateRxSlotIdleState+0x30>)
 800efec:	2390      	movs	r3, #144	; 0x90
 800efee:	00db      	lsls	r3, r3, #3
 800eff0:	2106      	movs	r1, #6
 800eff2:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800eff4:	e004      	b.n	800f000 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800eff6:	4a04      	ldr	r2, [pc, #16]	; (800f008 <UpdateRxSlotIdleState+0x30>)
 800eff8:	2390      	movs	r3, #144	; 0x90
 800effa:	00db      	lsls	r3, r3, #3
 800effc:	2102      	movs	r1, #2
 800effe:	54d1      	strb	r1, [r2, r3]
}
 800f000:	46c0      	nop			; (mov r8, r8)
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	46c0      	nop			; (mov r8, r8)
 800f008:	2000054c 	.word	0x2000054c
 800f00c:	00000484 	.word	0x00000484

0800f010 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f012:	b08f      	sub	sp, #60	; 0x3c
 800f014:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f016:	4b59      	ldr	r3, [pc, #356]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f018:	4a59      	ldr	r2, [pc, #356]	; (800f180 <ProcessRadioTxDone+0x170>)
 800f01a:	589b      	ldr	r3, [r3, r2]
 800f01c:	227c      	movs	r2, #124	; 0x7c
 800f01e:	5c9b      	ldrb	r3, [r3, r2]
 800f020:	2b02      	cmp	r3, #2
 800f022:	d002      	beq.n	800f02a <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800f024:	4b57      	ldr	r3, [pc, #348]	; (800f184 <ProcessRadioTxDone+0x174>)
 800f026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f028:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f02a:	4a54      	ldr	r2, [pc, #336]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f02c:	23ec      	movs	r3, #236	; 0xec
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	58d2      	ldr	r2, [r2, r3]
 800f032:	4b55      	ldr	r3, [pc, #340]	; (800f188 <ProcessRadioTxDone+0x178>)
 800f034:	0011      	movs	r1, r2
 800f036:	0018      	movs	r0, r3
 800f038:	f00d fda8 	bl	801cb8c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f03c:	4b52      	ldr	r3, [pc, #328]	; (800f188 <ProcessRadioTxDone+0x178>)
 800f03e:	0018      	movs	r0, r3
 800f040:	f00d fcb4 	bl	801c9ac <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f044:	4a4d      	ldr	r2, [pc, #308]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f046:	23ed      	movs	r3, #237	; 0xed
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	58d2      	ldr	r2, [r2, r3]
 800f04c:	4b4f      	ldr	r3, [pc, #316]	; (800f18c <ProcessRadioTxDone+0x17c>)
 800f04e:	0011      	movs	r1, r2
 800f050:	0018      	movs	r0, r3
 800f052:	f00d fd9b 	bl	801cb8c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f056:	4b4d      	ldr	r3, [pc, #308]	; (800f18c <ProcessRadioTxDone+0x17c>)
 800f058:	0018      	movs	r0, r3
 800f05a:	f00d fca7 	bl	801c9ac <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f05e:	4b47      	ldr	r3, [pc, #284]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f060:	4a47      	ldr	r2, [pc, #284]	; (800f180 <ProcessRadioTxDone+0x170>)
 800f062:	589b      	ldr	r3, [r3, r2]
 800f064:	227c      	movs	r2, #124	; 0x7c
 800f066:	5c9b      	ldrb	r3, [r3, r2]
 800f068:	2b02      	cmp	r3, #2
 800f06a:	d004      	beq.n	800f076 <ProcessRadioTxDone+0x66>
 800f06c:	4b43      	ldr	r3, [pc, #268]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f06e:	4a48      	ldr	r2, [pc, #288]	; (800f190 <ProcessRadioTxDone+0x180>)
 800f070:	5c9b      	ldrb	r3, [r3, r2]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d021      	beq.n	800f0ba <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f076:	2120      	movs	r1, #32
 800f078:	187b      	adds	r3, r7, r1
 800f07a:	2216      	movs	r2, #22
 800f07c:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f07e:	4b3f      	ldr	r3, [pc, #252]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f080:	4a3f      	ldr	r2, [pc, #252]	; (800f180 <ProcessRadioTxDone+0x170>)
 800f082:	589b      	ldr	r3, [r3, r2]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	187a      	adds	r2, r7, r1
 800f088:	0011      	movs	r1, r2
 800f08a:	0018      	movs	r0, r3
 800f08c:	f007 fccf 	bl	8016a2e <RegionGetPhyParam>
 800f090:	0003      	movs	r3, r0
 800f092:	001a      	movs	r2, r3
 800f094:	211c      	movs	r1, #28
 800f096:	187b      	adds	r3, r7, r1
 800f098:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f09a:	4a38      	ldr	r2, [pc, #224]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f09c:	23ed      	movs	r3, #237	; 0xed
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	58d2      	ldr	r2, [r2, r3]
 800f0a2:	187b      	adds	r3, r7, r1
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	18d2      	adds	r2, r2, r3
 800f0a8:	4b3a      	ldr	r3, [pc, #232]	; (800f194 <ProcessRadioTxDone+0x184>)
 800f0aa:	0011      	movs	r1, r2
 800f0ac:	0018      	movs	r0, r3
 800f0ae:	f00d fd6d 	bl	801cb8c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f0b2:	4b38      	ldr	r3, [pc, #224]	; (800f194 <ProcessRadioTxDone+0x184>)
 800f0b4:	0018      	movs	r0, r3
 800f0b6:	f00d fc79 	bl	801c9ac <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800f0ba:	4b30      	ldr	r3, [pc, #192]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f0bc:	4a30      	ldr	r2, [pc, #192]	; (800f180 <ProcessRadioTxDone+0x170>)
 800f0be:	589a      	ldr	r2, [r3, r2]
 800f0c0:	4b35      	ldr	r3, [pc, #212]	; (800f198 <ProcessRadioTxDone+0x188>)
 800f0c2:	6819      	ldr	r1, [r3, #0]
 800f0c4:	23a8      	movs	r3, #168	; 0xa8
 800f0c6:	005b      	lsls	r3, r3, #1
 800f0c8:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f0ca:	4b2c      	ldr	r3, [pc, #176]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f0cc:	4a33      	ldr	r2, [pc, #204]	; (800f19c <ProcessRadioTxDone+0x18c>)
 800f0ce:	5c9a      	ldrb	r2, [r3, r2]
 800f0d0:	2408      	movs	r4, #8
 800f0d2:	193b      	adds	r3, r7, r4
 800f0d4:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f0d6:	4b30      	ldr	r3, [pc, #192]	; (800f198 <ProcessRadioTxDone+0x188>)
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	193b      	adds	r3, r7, r4
 800f0dc:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800f0de:	2328      	movs	r3, #40	; 0x28
 800f0e0:	18fb      	adds	r3, r7, r3
 800f0e2:	0018      	movs	r0, r3
 800f0e4:	f00d fbfa 	bl	801c8dc <SysTimeGetMcuTime>
 800f0e8:	4b24      	ldr	r3, [pc, #144]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f0ea:	4a25      	ldr	r2, [pc, #148]	; (800f180 <ProcessRadioTxDone+0x170>)
 800f0ec:	5898      	ldr	r0, [r3, r2]
 800f0ee:	193d      	adds	r5, r7, r4
 800f0f0:	003e      	movs	r6, r7
 800f0f2:	23ac      	movs	r3, #172	; 0xac
 800f0f4:	0059      	lsls	r1, r3, #1
 800f0f6:	2328      	movs	r3, #40	; 0x28
 800f0f8:	18fa      	adds	r2, r7, r3
 800f0fa:	2404      	movs	r4, #4
 800f0fc:	1843      	adds	r3, r0, r1
 800f0fe:	191c      	adds	r4, r3, r4
 800f100:	466b      	mov	r3, sp
 800f102:	6824      	ldr	r4, [r4, #0]
 800f104:	601c      	str	r4, [r3, #0]
 800f106:	5843      	ldr	r3, [r0, r1]
 800f108:	6811      	ldr	r1, [r2, #0]
 800f10a:	6852      	ldr	r2, [r2, #4]
 800f10c:	0030      	movs	r0, r6
 800f10e:	f00d fb17 	bl	801c740 <SysTimeSub>
 800f112:	003a      	movs	r2, r7
 800f114:	002b      	movs	r3, r5
 800f116:	330c      	adds	r3, #12
 800f118:	ca21      	ldmia	r2!, {r0, r5}
 800f11a:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f11c:	4a17      	ldr	r2, [pc, #92]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f11e:	2383      	movs	r3, #131	; 0x83
 800f120:	00db      	lsls	r3, r3, #3
 800f122:	58d2      	ldr	r2, [r2, r3]
 800f124:	2108      	movs	r1, #8
 800f126:	187b      	adds	r3, r7, r1
 800f128:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800f12a:	187b      	adds	r3, r7, r1
 800f12c:	2201      	movs	r2, #1
 800f12e:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800f130:	4b12      	ldr	r3, [pc, #72]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f132:	4a13      	ldr	r2, [pc, #76]	; (800f180 <ProcessRadioTxDone+0x170>)
 800f134:	589a      	ldr	r2, [r3, r2]
 800f136:	23b2      	movs	r3, #178	; 0xb2
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	5cd3      	ldrb	r3, [r2, r3]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800f140:	187b      	adds	r3, r7, r1
 800f142:	2200      	movs	r2, #0
 800f144:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800f146:	4b0d      	ldr	r3, [pc, #52]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f148:	4a0d      	ldr	r2, [pc, #52]	; (800f180 <ProcessRadioTxDone+0x170>)
 800f14a:	589b      	ldr	r3, [r3, r2]
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	2208      	movs	r2, #8
 800f150:	18ba      	adds	r2, r7, r2
 800f152:	0011      	movs	r1, r2
 800f154:	0018      	movs	r0, r3
 800f156:	f007 fc92 	bl	8016a7e <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800f15a:	4b08      	ldr	r3, [pc, #32]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f15c:	4a0c      	ldr	r2, [pc, #48]	; (800f190 <ProcessRadioTxDone+0x180>)
 800f15e:	5c9b      	ldrb	r3, [r3, r2]
 800f160:	2201      	movs	r2, #1
 800f162:	4053      	eors	r3, r2
 800f164:	b2db      	uxtb	r3, r3
 800f166:	2b00      	cmp	r3, #0
 800f168:	d003      	beq.n	800f172 <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f16a:	4b04      	ldr	r3, [pc, #16]	; (800f17c <ProcessRadioTxDone+0x16c>)
 800f16c:	4a0c      	ldr	r2, [pc, #48]	; (800f1a0 <ProcessRadioTxDone+0x190>)
 800f16e:	2100      	movs	r1, #0
 800f170:	5499      	strb	r1, [r3, r2]
    }
}
 800f172:	46c0      	nop			; (mov r8, r8)
 800f174:	46bd      	mov	sp, r7
 800f176:	b00d      	add	sp, #52	; 0x34
 800f178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f17a:	46c0      	nop			; (mov r8, r8)
 800f17c:	2000054c 	.word	0x2000054c
 800f180:	00000484 	.word	0x00000484
 800f184:	0801f0bc 	.word	0x0801f0bc
 800f188:	200008cc 	.word	0x200008cc
 800f18c:	200008e4 	.word	0x200008e4
 800f190:	00000414 	.word	0x00000414
 800f194:	20000944 	.word	0x20000944
 800f198:	2000168c 	.word	0x2000168c
 800f19c:	00000415 	.word	0x00000415
 800f1a0:	0000043d 	.word	0x0000043d

0800f1a4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f1a8:	4a11      	ldr	r2, [pc, #68]	; (800f1f0 <PrepareRxDoneAbort+0x4c>)
 800f1aa:	23d0      	movs	r3, #208	; 0xd0
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	58d3      	ldr	r3, [r2, r3]
 800f1b0:	2280      	movs	r2, #128	; 0x80
 800f1b2:	431a      	orrs	r2, r3
 800f1b4:	0011      	movs	r1, r2
 800f1b6:	4a0e      	ldr	r2, [pc, #56]	; (800f1f0 <PrepareRxDoneAbort+0x4c>)
 800f1b8:	23d0      	movs	r3, #208	; 0xd0
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800f1be:	4b0c      	ldr	r3, [pc, #48]	; (800f1f0 <PrepareRxDoneAbort+0x4c>)
 800f1c0:	4a0c      	ldr	r2, [pc, #48]	; (800f1f4 <PrepareRxDoneAbort+0x50>)
 800f1c2:	5c9b      	ldrb	r3, [r3, r2]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d002      	beq.n	800f1ce <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	f001 f98d 	bl	80104e8 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f1ce:	4b08      	ldr	r3, [pc, #32]	; (800f1f0 <PrepareRxDoneAbort+0x4c>)
 800f1d0:	4a09      	ldr	r2, [pc, #36]	; (800f1f8 <PrepareRxDoneAbort+0x54>)
 800f1d2:	5c99      	ldrb	r1, [r3, r2]
 800f1d4:	2002      	movs	r0, #2
 800f1d6:	4301      	orrs	r1, r0
 800f1d8:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f1da:	4b05      	ldr	r3, [pc, #20]	; (800f1f0 <PrepareRxDoneAbort+0x4c>)
 800f1dc:	4a06      	ldr	r2, [pc, #24]	; (800f1f8 <PrepareRxDoneAbort+0x54>)
 800f1de:	5c99      	ldrb	r1, [r3, r2]
 800f1e0:	2020      	movs	r0, #32
 800f1e2:	4301      	orrs	r1, r0
 800f1e4:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f1e6:	f7ff fef7 	bl	800efd8 <UpdateRxSlotIdleState>
}
 800f1ea:	46c0      	nop			; (mov r8, r8)
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	2000054c 	.word	0x2000054c
 800f1f4:	00000414 	.word	0x00000414
 800f1f8:	00000481 	.word	0x00000481

0800f1fc <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1fe:	b0a7      	sub	sp, #156	; 0x9c
 800f200:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f202:	2380      	movs	r3, #128	; 0x80
 800f204:	18fb      	adds	r3, r7, r3
 800f206:	2213      	movs	r2, #19
 800f208:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f20a:	4bdf      	ldr	r3, [pc, #892]	; (800f588 <ProcessRadioRxDone+0x38c>)
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f210:	267a      	movs	r6, #122	; 0x7a
 800f212:	19bb      	adds	r3, r7, r6
 800f214:	4adc      	ldr	r2, [pc, #880]	; (800f588 <ProcessRadioRxDone+0x38c>)
 800f216:	8912      	ldrh	r2, [r2, #8]
 800f218:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800f21a:	2478      	movs	r4, #120	; 0x78
 800f21c:	193b      	adds	r3, r7, r4
 800f21e:	4ada      	ldr	r2, [pc, #872]	; (800f588 <ProcessRadioRxDone+0x38c>)
 800f220:	8952      	ldrh	r2, [r2, #10]
 800f222:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800f224:	2577      	movs	r5, #119	; 0x77
 800f226:	197b      	adds	r3, r7, r5
 800f228:	4ad7      	ldr	r2, [pc, #860]	; (800f588 <ProcessRadioRxDone+0x38c>)
 800f22a:	7b12      	ldrb	r2, [r2, #12]
 800f22c:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800f22e:	2376      	movs	r3, #118	; 0x76
 800f230:	18fb      	adds	r3, r7, r3
 800f232:	2200      	movs	r2, #0
 800f234:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800f236:	2300      	movs	r3, #0
 800f238:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800f23a:	4bd4      	ldr	r3, [pc, #848]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f23c:	4ad4      	ldr	r2, [pc, #848]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f23e:	589b      	ldr	r3, [r3, r2]
 800f240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f242:	2284      	movs	r2, #132	; 0x84
 800f244:	18ba      	adds	r2, r7, r2
 800f246:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800f248:	2383      	movs	r3, #131	; 0x83
 800f24a:	18fb      	adds	r3, r7, r3
 800f24c:	2200      	movs	r2, #0
 800f24e:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f250:	2382      	movs	r3, #130	; 0x82
 800f252:	18fb      	adds	r3, r7, r3
 800f254:	2201      	movs	r2, #1
 800f256:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800f258:	4acc      	ldr	r2, [pc, #816]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f25a:	2388      	movs	r3, #136	; 0x88
 800f25c:	00db      	lsls	r3, r3, #3
 800f25e:	2100      	movs	r1, #0
 800f260:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800f262:	4bca      	ldr	r3, [pc, #808]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f264:	193a      	adds	r2, r7, r4
 800f266:	49cb      	ldr	r1, [pc, #812]	; (800f594 <ProcessRadioRxDone+0x398>)
 800f268:	8812      	ldrh	r2, [r2, #0]
 800f26a:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800f26c:	4bc7      	ldr	r3, [pc, #796]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f26e:	197a      	adds	r2, r7, r5
 800f270:	49c9      	ldr	r1, [pc, #804]	; (800f598 <ProcessRadioRxDone+0x39c>)
 800f272:	7812      	ldrb	r2, [r2, #0]
 800f274:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800f276:	4ac5      	ldr	r2, [pc, #788]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f278:	2390      	movs	r3, #144	; 0x90
 800f27a:	00db      	lsls	r3, r3, #3
 800f27c:	5cd1      	ldrb	r1, [r2, r3]
 800f27e:	4bc3      	ldr	r3, [pc, #780]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f280:	4ac6      	ldr	r2, [pc, #792]	; (800f59c <ProcessRadioRxDone+0x3a0>)
 800f282:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800f284:	4bc1      	ldr	r3, [pc, #772]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f286:	4ac6      	ldr	r2, [pc, #792]	; (800f5a0 <ProcessRadioRxDone+0x3a4>)
 800f288:	2100      	movs	r1, #0
 800f28a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800f28c:	4bbf      	ldr	r3, [pc, #764]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f28e:	4ac5      	ldr	r2, [pc, #788]	; (800f5a4 <ProcessRadioRxDone+0x3a8>)
 800f290:	2100      	movs	r1, #0
 800f292:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800f294:	4bbd      	ldr	r3, [pc, #756]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f296:	4ac4      	ldr	r2, [pc, #784]	; (800f5a8 <ProcessRadioRxDone+0x3ac>)
 800f298:	2100      	movs	r1, #0
 800f29a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800f29c:	4bbb      	ldr	r3, [pc, #748]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f29e:	4ac3      	ldr	r2, [pc, #780]	; (800f5ac <ProcessRadioRxDone+0x3b0>)
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800f2a4:	4ab9      	ldr	r2, [pc, #740]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f2a6:	2385      	movs	r3, #133	; 0x85
 800f2a8:	00db      	lsls	r3, r3, #3
 800f2aa:	2100      	movs	r1, #0
 800f2ac:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800f2ae:	4bb7      	ldr	r3, [pc, #732]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f2b0:	4abf      	ldr	r2, [pc, #764]	; (800f5b0 <ProcessRadioRxDone+0x3b4>)
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800f2b6:	4bb5      	ldr	r3, [pc, #724]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f2b8:	4abe      	ldr	r2, [pc, #760]	; (800f5b4 <ProcessRadioRxDone+0x3b8>)
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f2be:	4ab3      	ldr	r2, [pc, #716]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f2c0:	2386      	movs	r3, #134	; 0x86
 800f2c2:	00db      	lsls	r3, r3, #3
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f2c8:	4bb0      	ldr	r3, [pc, #704]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f2ca:	4abb      	ldr	r2, [pc, #748]	; (800f5b8 <ProcessRadioRxDone+0x3bc>)
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800f2d0:	4bae      	ldr	r3, [pc, #696]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f2d2:	4aba      	ldr	r2, [pc, #744]	; (800f5bc <ProcessRadioRxDone+0x3c0>)
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f2d8:	4aac      	ldr	r2, [pc, #688]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f2da:	2387      	movs	r3, #135	; 0x87
 800f2dc:	00db      	lsls	r3, r3, #3
 800f2de:	2100      	movs	r1, #0
 800f2e0:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800f2e2:	4bb7      	ldr	r3, [pc, #732]	; (800f5c0 <ProcessRadioRxDone+0x3c4>)
 800f2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e6:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f2e8:	4bb6      	ldr	r3, [pc, #728]	; (800f5c4 <ProcessRadioRxDone+0x3c8>)
 800f2ea:	0018      	movs	r0, r3
 800f2ec:	f00d fbd6 	bl	801ca9c <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f2f0:	19bb      	adds	r3, r7, r6
 800f2f2:	881a      	ldrh	r2, [r3, #0]
 800f2f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2f6:	0011      	movs	r1, r2
 800f2f8:	0018      	movs	r0, r3
 800f2fa:	f005 f9f1 	bl	80146e0 <LoRaMacClassBRxBeacon>
 800f2fe:	1e03      	subs	r3, r0, #0
 800f300:	d00c      	beq.n	800f31c <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f302:	4ba2      	ldr	r3, [pc, #648]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f304:	193a      	adds	r2, r7, r4
 800f306:	49b0      	ldr	r1, [pc, #704]	; (800f5c8 <ProcessRadioRxDone+0x3cc>)
 800f308:	8812      	ldrh	r2, [r2, #0]
 800f30a:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f30c:	4a9f      	ldr	r2, [pc, #636]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f30e:	1979      	adds	r1, r7, r5
 800f310:	238f      	movs	r3, #143	; 0x8f
 800f312:	00db      	lsls	r3, r3, #3
 800f314:	7809      	ldrb	r1, [r1, #0]
 800f316:	54d1      	strb	r1, [r2, r3]
        return;
 800f318:	f000 fc9e 	bl	800fc58 <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f31c:	4b9b      	ldr	r3, [pc, #620]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f31e:	4a9c      	ldr	r2, [pc, #624]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f320:	589b      	ldr	r3, [r3, r2]
 800f322:	227c      	movs	r2, #124	; 0x7c
 800f324:	5c9b      	ldrb	r3, [r3, r2]
 800f326:	2b01      	cmp	r3, #1
 800f328:	d11c      	bne.n	800f364 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f32a:	f005 f9eb 	bl	8014704 <LoRaMacClassBIsPingExpected>
 800f32e:	1e03      	subs	r3, r0, #0
 800f330:	d00a      	beq.n	800f348 <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f332:	2000      	movs	r0, #0
 800f334:	f005 f9a2 	bl	801467c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f338:	2000      	movs	r0, #0
 800f33a:	f005 f9c1 	bl	80146c0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f33e:	4b93      	ldr	r3, [pc, #588]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f340:	4a96      	ldr	r2, [pc, #600]	; (800f59c <ProcessRadioRxDone+0x3a0>)
 800f342:	2104      	movs	r1, #4
 800f344:	5499      	strb	r1, [r3, r2]
 800f346:	e00d      	b.n	800f364 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f348:	f005 f9e2 	bl	8014710 <LoRaMacClassBIsMulticastExpected>
 800f34c:	1e03      	subs	r3, r0, #0
 800f34e:	d009      	beq.n	800f364 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f350:	2000      	movs	r0, #0
 800f352:	f005 f99d 	bl	8014690 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f356:	2000      	movs	r0, #0
 800f358:	f005 f9ba 	bl	80146d0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f35c:	4b8b      	ldr	r3, [pc, #556]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f35e:	4a8f      	ldr	r2, [pc, #572]	; (800f59c <ProcessRadioRxDone+0x3a0>)
 800f360:	2105      	movs	r1, #5
 800f362:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f364:	2276      	movs	r2, #118	; 0x76
 800f366:	18bb      	adds	r3, r7, r2
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	18ba      	adds	r2, r7, r2
 800f36c:	1c59      	adds	r1, r3, #1
 800f36e:	7011      	strb	r1, [r2, #0]
 800f370:	001a      	movs	r2, r3
 800f372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f374:	189b      	adds	r3, r3, r2
 800f376:	781a      	ldrb	r2, [r3, #0]
 800f378:	2174      	movs	r1, #116	; 0x74
 800f37a:	187b      	adds	r3, r7, r1
 800f37c:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800f37e:	187b      	adds	r3, r7, r1
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	061b      	lsls	r3, r3, #24
 800f384:	0f5b      	lsrs	r3, r3, #29
 800f386:	b2db      	uxtb	r3, r3
 800f388:	2b07      	cmp	r3, #7
 800f38a:	d101      	bne.n	800f390 <ProcessRadioRxDone+0x194>
 800f38c:	f000 fc0c 	bl	800fba8 <ProcessRadioRxDone+0x9ac>
 800f390:	dd01      	ble.n	800f396 <ProcessRadioRxDone+0x19a>
 800f392:	f000 fc38 	bl	800fc06 <ProcessRadioRxDone+0xa0a>
 800f396:	2b05      	cmp	r3, #5
 800f398:	d100      	bne.n	800f39c <ProcessRadioRxDone+0x1a0>
 800f39a:	e119      	b.n	800f5d0 <ProcessRadioRxDone+0x3d4>
 800f39c:	dd01      	ble.n	800f3a2 <ProcessRadioRxDone+0x1a6>
 800f39e:	f000 fc32 	bl	800fc06 <ProcessRadioRxDone+0xa0a>
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	d004      	beq.n	800f3b0 <ProcessRadioRxDone+0x1b4>
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d100      	bne.n	800f3ac <ProcessRadioRxDone+0x1b0>
 800f3aa:	e115      	b.n	800f5d8 <ProcessRadioRxDone+0x3dc>
 800f3ac:	f000 fc2b 	bl	800fc06 <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f3b0:	237a      	movs	r3, #122	; 0x7a
 800f3b2:	18fb      	adds	r3, r7, r3
 800f3b4:	881b      	ldrh	r3, [r3, #0]
 800f3b6:	2b10      	cmp	r3, #16
 800f3b8:	d807      	bhi.n	800f3ca <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f3ba:	4b74      	ldr	r3, [pc, #464]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f3bc:	4a83      	ldr	r2, [pc, #524]	; (800f5cc <ProcessRadioRxDone+0x3d0>)
 800f3be:	2101      	movs	r1, #1
 800f3c0:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f3c2:	f7ff feef 	bl	800f1a4 <PrepareRxDoneAbort>
                return;
 800f3c6:	f000 fc47 	bl	800fc58 <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800f3ca:	2108      	movs	r1, #8
 800f3cc:	187b      	adds	r3, r7, r1
 800f3ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f3d0:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800f3d2:	237a      	movs	r3, #122	; 0x7a
 800f3d4:	18fb      	adds	r3, r7, r3
 800f3d6:	881b      	ldrh	r3, [r3, #0]
 800f3d8:	b2da      	uxtb	r2, r3
 800f3da:	187b      	adds	r3, r7, r1
 800f3dc:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800f3de:	4b6b      	ldr	r3, [pc, #428]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f3e0:	4a6b      	ldr	r2, [pc, #428]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f3e2:	589a      	ldr	r2, [r3, r2]
 800f3e4:	23b2      	movs	r3, #178	; 0xb2
 800f3e6:	005b      	lsls	r3, r3, #1
 800f3e8:	5cd3      	ldrb	r3, [r2, r3]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d007      	beq.n	800f3fe <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f3ee:	4b67      	ldr	r3, [pc, #412]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f3f0:	4a76      	ldr	r2, [pc, #472]	; (800f5cc <ProcessRadioRxDone+0x3d0>)
 800f3f2:	2101      	movs	r1, #1
 800f3f4:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f3f6:	f7ff fed5 	bl	800f1a4 <PrepareRxDoneAbort>
                return;
 800f3fa:	f000 fc2d 	bl	800fc58 <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f3fe:	f7fe fc21 	bl	800dc44 <SecureElementGetJoinEui>
 800f402:	0001      	movs	r1, r0
 800f404:	2680      	movs	r6, #128	; 0x80
 800f406:	19bc      	adds	r4, r7, r6
 800f408:	2508      	movs	r5, #8
 800f40a:	197b      	adds	r3, r7, r5
 800f40c:	001a      	movs	r2, r3
 800f40e:	20ff      	movs	r0, #255	; 0xff
 800f410:	f006 fcba 	bl	8015d88 <LoRaMacCryptoHandleJoinAccept>
 800f414:	0003      	movs	r3, r0
 800f416:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f418:	19bb      	adds	r3, r7, r6
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d000      	beq.n	800f422 <ProcessRadioRxDone+0x226>
 800f420:	e0a7      	b.n	800f572 <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f422:	002c      	movs	r4, r5
 800f424:	193b      	adds	r3, r7, r4
 800f426:	7a59      	ldrb	r1, [r3, #9]
 800f428:	4b58      	ldr	r3, [pc, #352]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f42a:	4a59      	ldr	r2, [pc, #356]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f42c:	589b      	ldr	r3, [r3, r2]
 800f42e:	000a      	movs	r2, r1
 800f430:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f432:	4b56      	ldr	r3, [pc, #344]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f434:	4a56      	ldr	r2, [pc, #344]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f436:	589b      	ldr	r3, [r3, r2]
 800f438:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f43a:	193b      	adds	r3, r7, r4
 800f43c:	7a9b      	ldrb	r3, [r3, #10]
 800f43e:	021a      	lsls	r2, r3, #8
 800f440:	4b52      	ldr	r3, [pc, #328]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f442:	4853      	ldr	r0, [pc, #332]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f444:	581b      	ldr	r3, [r3, r0]
 800f446:	430a      	orrs	r2, r1
 800f448:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f44a:	4b50      	ldr	r3, [pc, #320]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f44c:	4a50      	ldr	r2, [pc, #320]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f44e:	589b      	ldr	r3, [r3, r2]
 800f450:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f452:	193b      	adds	r3, r7, r4
 800f454:	7adb      	ldrb	r3, [r3, #11]
 800f456:	041a      	lsls	r2, r3, #16
 800f458:	4b4c      	ldr	r3, [pc, #304]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f45a:	484d      	ldr	r0, [pc, #308]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f45c:	581b      	ldr	r3, [r3, r0]
 800f45e:	430a      	orrs	r2, r1
 800f460:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800f462:	4b4a      	ldr	r3, [pc, #296]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f464:	4a4a      	ldr	r2, [pc, #296]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f466:	589b      	ldr	r3, [r3, r2]
 800f468:	0020      	movs	r0, r4
 800f46a:	183a      	adds	r2, r7, r0
 800f46c:	68d2      	ldr	r2, [r2, #12]
 800f46e:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f470:	183b      	adds	r3, r7, r0
 800f472:	7c1b      	ldrb	r3, [r3, #16]
 800f474:	065b      	lsls	r3, r3, #25
 800f476:	0f5b      	lsrs	r3, r3, #29
 800f478:	b2d9      	uxtb	r1, r3
 800f47a:	4b44      	ldr	r3, [pc, #272]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f47c:	4a44      	ldr	r2, [pc, #272]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f47e:	589b      	ldr	r3, [r3, r2]
 800f480:	22a5      	movs	r2, #165	; 0xa5
 800f482:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f484:	183b      	adds	r3, r7, r0
 800f486:	7c1b      	ldrb	r3, [r3, #16]
 800f488:	071b      	lsls	r3, r3, #28
 800f48a:	0f1b      	lsrs	r3, r3, #28
 800f48c:	b2d9      	uxtb	r1, r3
 800f48e:	4b3f      	ldr	r3, [pc, #252]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f490:	4a3f      	ldr	r2, [pc, #252]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f492:	589b      	ldr	r3, [r3, r2]
 800f494:	22ac      	movs	r2, #172	; 0xac
 800f496:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f498:	183b      	adds	r3, r7, r0
 800f49a:	7c1b      	ldrb	r3, [r3, #16]
 800f49c:	071b      	lsls	r3, r3, #28
 800f49e:	0f1b      	lsrs	r3, r3, #28
 800f4a0:	b2d9      	uxtb	r1, r3
 800f4a2:	4b3a      	ldr	r3, [pc, #232]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f4a4:	4a3a      	ldr	r2, [pc, #232]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f4a6:	589b      	ldr	r3, [r3, r2]
 800f4a8:	22b4      	movs	r2, #180	; 0xb4
 800f4aa:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f4ac:	183b      	adds	r3, r7, r0
 800f4ae:	7c59      	ldrb	r1, [r3, #17]
 800f4b0:	4b36      	ldr	r3, [pc, #216]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f4b2:	4a37      	ldr	r2, [pc, #220]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f4b4:	589b      	ldr	r3, [r3, r2]
 800f4b6:	2294      	movs	r2, #148	; 0x94
 800f4b8:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800f4ba:	4b34      	ldr	r3, [pc, #208]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f4bc:	4a34      	ldr	r2, [pc, #208]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f4be:	589b      	ldr	r3, [r3, r2]
 800f4c0:	2294      	movs	r2, #148	; 0x94
 800f4c2:	589b      	ldr	r3, [r3, r2]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d105      	bne.n	800f4d4 <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800f4c8:	4b30      	ldr	r3, [pc, #192]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f4ca:	4a31      	ldr	r2, [pc, #196]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f4cc:	589b      	ldr	r3, [r3, r2]
 800f4ce:	2294      	movs	r2, #148	; 0x94
 800f4d0:	2101      	movs	r1, #1
 800f4d2:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800f4d4:	4b2d      	ldr	r3, [pc, #180]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f4d6:	4a2e      	ldr	r2, [pc, #184]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f4d8:	589b      	ldr	r3, [r3, r2]
 800f4da:	2294      	movs	r2, #148	; 0x94
 800f4dc:	589a      	ldr	r2, [r3, r2]
 800f4de:	4b2b      	ldr	r3, [pc, #172]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f4e0:	492b      	ldr	r1, [pc, #172]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f4e2:	5859      	ldr	r1, [r3, r1]
 800f4e4:	0013      	movs	r3, r2
 800f4e6:	015b      	lsls	r3, r3, #5
 800f4e8:	1a9b      	subs	r3, r3, r2
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	189b      	adds	r3, r3, r2
 800f4ee:	00db      	lsls	r3, r3, #3
 800f4f0:	001a      	movs	r2, r3
 800f4f2:	2394      	movs	r3, #148	; 0x94
 800f4f4:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800f4f6:	4b25      	ldr	r3, [pc, #148]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f4f8:	4a25      	ldr	r2, [pc, #148]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f4fa:	589b      	ldr	r3, [r3, r2]
 800f4fc:	2294      	movs	r2, #148	; 0x94
 800f4fe:	589b      	ldr	r3, [r3, r2]
 800f500:	4a22      	ldr	r2, [pc, #136]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f502:	4923      	ldr	r1, [pc, #140]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f504:	5852      	ldr	r2, [r2, r1]
 800f506:	21fa      	movs	r1, #250	; 0xfa
 800f508:	0089      	lsls	r1, r1, #2
 800f50a:	468c      	mov	ip, r1
 800f50c:	4463      	add	r3, ip
 800f50e:	2198      	movs	r1, #152	; 0x98
 800f510:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800f512:	4b1e      	ldr	r3, [pc, #120]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f514:	4a1e      	ldr	r2, [pc, #120]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f516:	589a      	ldr	r2, [r3, r2]
 800f518:	23b1      	movs	r3, #177	; 0xb1
 800f51a:	005b      	lsls	r3, r3, #1
 800f51c:	2100      	movs	r1, #0
 800f51e:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f520:	216c      	movs	r1, #108	; 0x6c
 800f522:	187b      	adds	r3, r7, r1
 800f524:	2208      	movs	r2, #8
 800f526:	18ba      	adds	r2, r7, r2
 800f528:	3212      	adds	r2, #18
 800f52a:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f52c:	237a      	movs	r3, #122	; 0x7a
 800f52e:	18fb      	adds	r3, r7, r3
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	b2db      	uxtb	r3, r3
 800f534:	3b11      	subs	r3, #17
 800f536:	b2da      	uxtb	r2, r3
 800f538:	187b      	adds	r3, r7, r1
 800f53a:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800f53c:	4b13      	ldr	r3, [pc, #76]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f53e:	4a14      	ldr	r2, [pc, #80]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f540:	589b      	ldr	r3, [r3, r2]
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	187a      	adds	r2, r7, r1
 800f546:	0011      	movs	r1, r2
 800f548:	0018      	movs	r0, r3
 800f54a:	f007 faf4 	bl	8016b36 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f54e:	4b0f      	ldr	r3, [pc, #60]	; (800f58c <ProcessRadioRxDone+0x390>)
 800f550:	4a0f      	ldr	r2, [pc, #60]	; (800f590 <ProcessRadioRxDone+0x394>)
 800f552:	589a      	ldr	r2, [r3, r2]
 800f554:	23b2      	movs	r3, #178	; 0xb2
 800f556:	005b      	lsls	r3, r3, #1
 800f558:	2102      	movs	r1, #2
 800f55a:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f55c:	2001      	movs	r0, #1
 800f55e:	f005 fe49 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 800f562:	1e03      	subs	r3, r0, #0
 800f564:	d100      	bne.n	800f568 <ProcessRadioRxDone+0x36c>
 800f566:	e355      	b.n	800fc14 <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f568:	2101      	movs	r1, #1
 800f56a:	2000      	movs	r0, #0
 800f56c:	f005 fda6 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800f570:	e350      	b.n	800fc14 <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f572:	2001      	movs	r0, #1
 800f574:	f005 fe3e 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 800f578:	1e03      	subs	r3, r0, #0
 800f57a:	d100      	bne.n	800f57e <ProcessRadioRxDone+0x382>
 800f57c:	e34a      	b.n	800fc14 <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f57e:	2101      	movs	r1, #1
 800f580:	2007      	movs	r0, #7
 800f582:	f005 fd9b 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
            break;
 800f586:	e345      	b.n	800fc14 <ProcessRadioRxDone+0xa18>
 800f588:	20001690 	.word	0x20001690
 800f58c:	2000054c 	.word	0x2000054c
 800f590:	00000484 	.word	0x00000484
 800f594:	0000042a 	.word	0x0000042a
 800f598:	0000042c 	.word	0x0000042c
 800f59c:	0000042d 	.word	0x0000042d
 800f5a0:	0000041f 	.word	0x0000041f
 800f5a4:	0000041e 	.word	0x0000041e
 800f5a8:	00000421 	.word	0x00000421
 800f5ac:	00000424 	.word	0x00000424
 800f5b0:	00000429 	.word	0x00000429
 800f5b4:	0000042e 	.word	0x0000042e
 800f5b8:	0000041c 	.word	0x0000041c
 800f5bc:	00000434 	.word	0x00000434
 800f5c0:	0801f0bc 	.word	0x0801f0bc
 800f5c4:	200008e4 	.word	0x200008e4
 800f5c8:	00000476 	.word	0x00000476
 800f5cc:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f5d0:	4bd5      	ldr	r3, [pc, #852]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f5d2:	4ad6      	ldr	r2, [pc, #856]	; (800f92c <ProcessRadioRxDone+0x730>)
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f5d8:	4bd3      	ldr	r3, [pc, #844]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f5da:	4ad5      	ldr	r2, [pc, #852]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f5dc:	589b      	ldr	r3, [r3, r2]
 800f5de:	22b9      	movs	r2, #185	; 0xb9
 800f5e0:	5c9a      	ldrb	r2, [r3, r2]
 800f5e2:	2164      	movs	r1, #100	; 0x64
 800f5e4:	187b      	adds	r3, r7, r1
 800f5e6:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f5e8:	4acf      	ldr	r2, [pc, #828]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f5ea:	2384      	movs	r3, #132	; 0x84
 800f5ec:	00db      	lsls	r3, r3, #3
 800f5ee:	5cd3      	ldrb	r3, [r2, r3]
 800f5f0:	b25a      	sxtb	r2, r3
 800f5f2:	187b      	adds	r3, r7, r1
 800f5f4:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f5f6:	187b      	adds	r3, r7, r1
 800f5f8:	220d      	movs	r2, #13
 800f5fa:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800f5fc:	4bca      	ldr	r3, [pc, #808]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f5fe:	4acc      	ldr	r2, [pc, #816]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f600:	589b      	ldr	r3, [r3, r2]
 800f602:	22ca      	movs	r2, #202	; 0xca
 800f604:	5c9b      	ldrb	r3, [r3, r2]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d002      	beq.n	800f610 <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f60a:	187b      	adds	r3, r7, r1
 800f60c:	220e      	movs	r2, #14
 800f60e:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f610:	4bc5      	ldr	r3, [pc, #788]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f612:	4ac7      	ldr	r2, [pc, #796]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f614:	589b      	ldr	r3, [r3, r2]
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2264      	movs	r2, #100	; 0x64
 800f61a:	18ba      	adds	r2, r7, r2
 800f61c:	0011      	movs	r1, r2
 800f61e:	0018      	movs	r0, r3
 800f620:	f007 fa05 	bl	8016a2e <RegionGetPhyParam>
 800f624:	0003      	movs	r3, r0
 800f626:	001a      	movs	r2, r3
 800f628:	2360      	movs	r3, #96	; 0x60
 800f62a:	18fb      	adds	r3, r7, r3
 800f62c:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f62e:	237a      	movs	r3, #122	; 0x7a
 800f630:	18fb      	adds	r3, r7, r3
 800f632:	881b      	ldrh	r3, [r3, #0]
 800f634:	3b0d      	subs	r3, #13
 800f636:	b29b      	uxth	r3, r3
 800f638:	b21b      	sxth	r3, r3
 800f63a:	1c1a      	adds	r2, r3, #0
 800f63c:	b213      	sxth	r3, r2
 800f63e:	2b00      	cmp	r3, #0
 800f640:	da01      	bge.n	800f646 <ProcessRadioRxDone+0x44a>
 800f642:	2300      	movs	r3, #0
 800f644:	1c1a      	adds	r2, r3, #0
 800f646:	b212      	sxth	r2, r2
 800f648:	2360      	movs	r3, #96	; 0x60
 800f64a:	18fb      	adds	r3, r7, r3
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	b21b      	sxth	r3, r3
 800f650:	429a      	cmp	r2, r3
 800f652:	dc04      	bgt.n	800f65e <ProcessRadioRxDone+0x462>
 800f654:	237a      	movs	r3, #122	; 0x7a
 800f656:	18fb      	adds	r3, r7, r3
 800f658:	881b      	ldrh	r3, [r3, #0]
 800f65a:	2b0b      	cmp	r3, #11
 800f65c:	d806      	bhi.n	800f66c <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f65e:	4bb2      	ldr	r3, [pc, #712]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f660:	4ab4      	ldr	r2, [pc, #720]	; (800f934 <ProcessRadioRxDone+0x738>)
 800f662:	2101      	movs	r1, #1
 800f664:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f666:	f7ff fd9d 	bl	800f1a4 <PrepareRxDoneAbort>
                return;
 800f66a:	e2f5      	b.n	800fc58 <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800f66c:	2130      	movs	r1, #48	; 0x30
 800f66e:	187b      	adds	r3, r7, r1
 800f670:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f672:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800f674:	237a      	movs	r3, #122	; 0x7a
 800f676:	18fb      	adds	r3, r7, r3
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	b2da      	uxtb	r2, r3
 800f67c:	187b      	adds	r3, r7, r1
 800f67e:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f680:	187b      	adds	r3, r7, r1
 800f682:	4aad      	ldr	r2, [pc, #692]	; (800f938 <ProcessRadioRxDone+0x73c>)
 800f684:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f686:	0008      	movs	r0, r1
 800f688:	187b      	adds	r3, r7, r1
 800f68a:	2228      	movs	r2, #40	; 0x28
 800f68c:	21ff      	movs	r1, #255	; 0xff
 800f68e:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f690:	183b      	adds	r3, r7, r0
 800f692:	0018      	movs	r0, r3
 800f694:	f006 fee4 	bl	8016460 <LoRaMacParserData>
 800f698:	1e03      	subs	r3, r0, #0
 800f69a:	d006      	beq.n	800f6aa <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f69c:	4ba2      	ldr	r3, [pc, #648]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f69e:	4aa5      	ldr	r2, [pc, #660]	; (800f934 <ProcessRadioRxDone+0x738>)
 800f6a0:	2101      	movs	r1, #1
 800f6a2:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f6a4:	f7ff fd7e 	bl	800f1a4 <PrepareRxDoneAbort>
                return;
 800f6a8:	e2d6      	b.n	800fc58 <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f6aa:	2030      	movs	r0, #48	; 0x30
 800f6ac:	183b      	adds	r3, r7, r0
 800f6ae:	689a      	ldr	r2, [r3, #8]
 800f6b0:	4b9d      	ldr	r3, [pc, #628]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f6b2:	49a2      	ldr	r1, [pc, #648]	; (800f93c <ProcessRadioRxDone+0x740>)
 800f6b4:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f6b6:	1cba      	adds	r2, r7, #2
 800f6b8:	183b      	adds	r3, r7, r0
 800f6ba:	0011      	movs	r1, r2
 800f6bc:	0018      	movs	r0, r3
 800f6be:	f003 f861 	bl	8012784 <DetermineFrameType>
 800f6c2:	1e03      	subs	r3, r0, #0
 800f6c4:	d006      	beq.n	800f6d4 <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f6c6:	4b98      	ldr	r3, [pc, #608]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f6c8:	4a9a      	ldr	r2, [pc, #616]	; (800f934 <ProcessRadioRxDone+0x738>)
 800f6ca:	2101      	movs	r1, #1
 800f6cc:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f6ce:	f7ff fd69 	bl	800f1a4 <PrepareRxDoneAbort>
                return;
 800f6d2:	e2c1      	b.n	800fc58 <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f6d4:	2383      	movs	r3, #131	; 0x83
 800f6d6:	18fb      	adds	r3, r7, r3
 800f6d8:	2200      	movs	r2, #0
 800f6da:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f6e0:	2381      	movs	r3, #129	; 0x81
 800f6e2:	18fb      	adds	r3, r7, r3
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	701a      	strb	r2, [r3, #0]
 800f6e8:	e05b      	b.n	800f7a2 <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f6ea:	4b8f      	ldr	r3, [pc, #572]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f6ec:	4a90      	ldr	r2, [pc, #576]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f6ee:	589a      	ldr	r2, [r3, r2]
 800f6f0:	2481      	movs	r4, #129	; 0x81
 800f6f2:	193b      	adds	r3, r7, r4
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	212c      	movs	r1, #44	; 0x2c
 800f6f8:	434b      	muls	r3, r1
 800f6fa:	18d3      	adds	r3, r2, r3
 800f6fc:	3354      	adds	r3, #84	; 0x54
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	2330      	movs	r3, #48	; 0x30
 800f702:	18fb      	adds	r3, r7, r3
 800f704:	689b      	ldr	r3, [r3, #8]
 800f706:	429a      	cmp	r2, r3
 800f708:	d145      	bne.n	800f796 <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f70a:	4b87      	ldr	r3, [pc, #540]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f70c:	4a88      	ldr	r2, [pc, #544]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f70e:	589a      	ldr	r2, [r3, r2]
 800f710:	193b      	adds	r3, r7, r4
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2152      	movs	r1, #82	; 0x52
 800f716:	202c      	movs	r0, #44	; 0x2c
 800f718:	4343      	muls	r3, r0
 800f71a:	18d3      	adds	r3, r2, r3
 800f71c:	185b      	adds	r3, r3, r1
 800f71e:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f720:	2b00      	cmp	r3, #0
 800f722:	d038      	beq.n	800f796 <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800f724:	2383      	movs	r3, #131	; 0x83
 800f726:	18fb      	adds	r3, r7, r3
 800f728:	2201      	movs	r2, #1
 800f72a:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800f72c:	4b7e      	ldr	r3, [pc, #504]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f72e:	4a80      	ldr	r2, [pc, #512]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f730:	5899      	ldr	r1, [r3, r2]
 800f732:	0025      	movs	r5, r4
 800f734:	193b      	adds	r3, r7, r4
 800f736:	781a      	ldrb	r2, [r3, #0]
 800f738:	2382      	movs	r3, #130	; 0x82
 800f73a:	18fb      	adds	r3, r7, r3
 800f73c:	2053      	movs	r0, #83	; 0x53
 800f73e:	242c      	movs	r4, #44	; 0x2c
 800f740:	4362      	muls	r2, r4
 800f742:	188a      	adds	r2, r1, r2
 800f744:	1812      	adds	r2, r2, r0
 800f746:	7812      	ldrb	r2, [r2, #0]
 800f748:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800f74a:	4b77      	ldr	r3, [pc, #476]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f74c:	4a78      	ldr	r2, [pc, #480]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f74e:	589a      	ldr	r2, [r3, r2]
 800f750:	002c      	movs	r4, r5
 800f752:	193b      	adds	r3, r7, r4
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	212c      	movs	r1, #44	; 0x2c
 800f758:	434b      	muls	r3, r1
 800f75a:	18d3      	adds	r3, r2, r3
 800f75c:	3370      	adds	r3, #112	; 0x70
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800f764:	4b70      	ldr	r3, [pc, #448]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f766:	4a72      	ldr	r2, [pc, #456]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f768:	589a      	ldr	r2, [r3, r2]
 800f76a:	193b      	adds	r3, r7, r4
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	212c      	movs	r1, #44	; 0x2c
 800f770:	434b      	muls	r3, r1
 800f772:	18d3      	adds	r3, r2, r3
 800f774:	3354      	adds	r3, #84	; 0x54
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2284      	movs	r2, #132	; 0x84
 800f77a:	18ba      	adds	r2, r7, r2
 800f77c:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f77e:	4b6a      	ldr	r3, [pc, #424]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f780:	4a6b      	ldr	r2, [pc, #428]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f782:	589b      	ldr	r3, [r3, r2]
 800f784:	227c      	movs	r2, #124	; 0x7c
 800f786:	5c9b      	ldrb	r3, [r3, r2]
 800f788:	2b02      	cmp	r3, #2
 800f78a:	d110      	bne.n	800f7ae <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f78c:	4b66      	ldr	r3, [pc, #408]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f78e:	4a6c      	ldr	r2, [pc, #432]	; (800f940 <ProcessRadioRxDone+0x744>)
 800f790:	2103      	movs	r1, #3
 800f792:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800f794:	e00b      	b.n	800f7ae <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f796:	2181      	movs	r1, #129	; 0x81
 800f798:	187b      	adds	r3, r7, r1
 800f79a:	781a      	ldrb	r2, [r3, #0]
 800f79c:	187b      	adds	r3, r7, r1
 800f79e:	3201      	adds	r2, #1
 800f7a0:	701a      	strb	r2, [r3, #0]
 800f7a2:	2381      	movs	r3, #129	; 0x81
 800f7a4:	18fb      	adds	r3, r7, r3
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d09e      	beq.n	800f6ea <ProcessRadioRxDone+0x4ee>
 800f7ac:	e000      	b.n	800f7b0 <ProcessRadioRxDone+0x5b4>
                    break;
 800f7ae:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f7b0:	2383      	movs	r3, #131	; 0x83
 800f7b2:	18fb      	adds	r3, r7, r3
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d119      	bne.n	800f7ee <ProcessRadioRxDone+0x5f2>
 800f7ba:	1cbb      	adds	r3, r7, #2
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	2b03      	cmp	r3, #3
 800f7c0:	d10e      	bne.n	800f7e0 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f7c2:	2130      	movs	r1, #48	; 0x30
 800f7c4:	187b      	adds	r3, r7, r1
 800f7c6:	7b1b      	ldrb	r3, [r3, #12]
 800f7c8:	2220      	movs	r2, #32
 800f7ca:	4013      	ands	r3, r2
 800f7cc:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d106      	bne.n	800f7e0 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f7d2:	187b      	adds	r3, r7, r1
 800f7d4:	7b1b      	ldrb	r3, [r3, #12]
 800f7d6:	2240      	movs	r2, #64	; 0x40
 800f7d8:	4013      	ands	r3, r2
 800f7da:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d006      	beq.n	800f7ee <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f7e0:	4b51      	ldr	r3, [pc, #324]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f7e2:	4a54      	ldr	r2, [pc, #336]	; (800f934 <ProcessRadioRxDone+0x738>)
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f7e8:	f7ff fcdc 	bl	800f1a4 <PrepareRxDoneAbort>
                return;
 800f7ec:	e234      	b.n	800fc58 <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800f7ee:	2164      	movs	r1, #100	; 0x64
 800f7f0:	187b      	adds	r3, r7, r1
 800f7f2:	2215      	movs	r2, #21
 800f7f4:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f7f6:	4b4c      	ldr	r3, [pc, #304]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f7f8:	4a4d      	ldr	r2, [pc, #308]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f7fa:	589b      	ldr	r3, [r3, r2]
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	187a      	adds	r2, r7, r1
 800f800:	0011      	movs	r1, r2
 800f802:	0018      	movs	r0, r3
 800f804:	f007 f913 	bl	8016a2e <RegionGetPhyParam>
 800f808:	0003      	movs	r3, r0
 800f80a:	001a      	movs	r2, r3
 800f80c:	2060      	movs	r0, #96	; 0x60
 800f80e:	183b      	adds	r3, r7, r0
 800f810:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800f812:	1cbb      	adds	r3, r7, #2
 800f814:	781d      	ldrb	r5, [r3, #0]
 800f816:	4b44      	ldr	r3, [pc, #272]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f818:	4a45      	ldr	r2, [pc, #276]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f81a:	5899      	ldr	r1, [r3, r2]
 800f81c:	183b      	adds	r3, r7, r0
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	b29b      	uxth	r3, r3
 800f822:	2280      	movs	r2, #128	; 0x80
 800f824:	18bc      	adds	r4, r7, r2
 800f826:	22b0      	movs	r2, #176	; 0xb0
 800f828:	0052      	lsls	r2, r2, #1
 800f82a:	588e      	ldr	r6, [r1, r2]
 800f82c:	2130      	movs	r1, #48	; 0x30
 800f82e:	1879      	adds	r1, r7, r1
 800f830:	2082      	movs	r0, #130	; 0x82
 800f832:	183a      	adds	r2, r7, r0
 800f834:	7810      	ldrb	r0, [r2, #0]
 800f836:	1d3a      	adds	r2, r7, #4
 800f838:	9202      	str	r2, [sp, #8]
 800f83a:	1cfa      	adds	r2, r7, #3
 800f83c:	9201      	str	r2, [sp, #4]
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	0033      	movs	r3, r6
 800f842:	000a      	movs	r2, r1
 800f844:	0029      	movs	r1, r5
 800f846:	f000 fe91 	bl	801056c <GetFCntDown>
 800f84a:	0003      	movs	r3, r0
 800f84c:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f84e:	2280      	movs	r2, #128	; 0x80
 800f850:	18bb      	adds	r3, r7, r2
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d040      	beq.n	800f8da <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f858:	18bb      	adds	r3, r7, r2
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	2b07      	cmp	r3, #7
 800f85e:	d126      	bne.n	800f8ae <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f860:	4b31      	ldr	r3, [pc, #196]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f862:	4a34      	ldr	r2, [pc, #208]	; (800f934 <ProcessRadioRxDone+0x738>)
 800f864:	2108      	movs	r1, #8
 800f866:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800f868:	4b2f      	ldr	r3, [pc, #188]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f86a:	4a31      	ldr	r2, [pc, #196]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f86c:	589a      	ldr	r2, [r3, r2]
 800f86e:	23b1      	movs	r3, #177	; 0xb1
 800f870:	005b      	lsls	r3, r3, #1
 800f872:	5cd3      	ldrb	r3, [r2, r3]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d128      	bne.n	800f8ca <ProcessRadioRxDone+0x6ce>
 800f878:	2374      	movs	r3, #116	; 0x74
 800f87a:	18fb      	adds	r3, r7, r3
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	221f      	movs	r2, #31
 800f880:	4393      	bics	r3, r2
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2ba0      	cmp	r3, #160	; 0xa0
 800f886:	d120      	bne.n	800f8ca <ProcessRadioRxDone+0x6ce>
 800f888:	4b27      	ldr	r3, [pc, #156]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f88a:	4a29      	ldr	r2, [pc, #164]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f88c:	589a      	ldr	r2, [r3, r2]
 800f88e:	23b4      	movs	r3, #180	; 0xb4
 800f890:	005b      	lsls	r3, r3, #1
 800f892:	58d2      	ldr	r2, [r2, r3]
 800f894:	2130      	movs	r1, #48	; 0x30
 800f896:	187b      	adds	r3, r7, r1
 800f898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d115      	bne.n	800f8ca <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800f89e:	4b22      	ldr	r3, [pc, #136]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f8a0:	4a23      	ldr	r2, [pc, #140]	; (800f930 <ProcessRadioRxDone+0x734>)
 800f8a2:	589a      	ldr	r2, [r3, r2]
 800f8a4:	234c      	movs	r3, #76	; 0x4c
 800f8a6:	33ff      	adds	r3, #255	; 0xff
 800f8a8:	2101      	movs	r1, #1
 800f8aa:	54d1      	strb	r1, [r2, r3]
 800f8ac:	e00d      	b.n	800f8ca <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800f8ae:	2380      	movs	r3, #128	; 0x80
 800f8b0:	18fb      	adds	r3, r7, r3
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	2b08      	cmp	r3, #8
 800f8b6:	d104      	bne.n	800f8c2 <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800f8b8:	4b1b      	ldr	r3, [pc, #108]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f8ba:	4a1e      	ldr	r2, [pc, #120]	; (800f934 <ProcessRadioRxDone+0x738>)
 800f8bc:	210a      	movs	r1, #10
 800f8be:	5499      	strb	r1, [r3, r2]
 800f8c0:	e003      	b.n	800f8ca <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f8c2:	4b19      	ldr	r3, [pc, #100]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f8c4:	4a1b      	ldr	r2, [pc, #108]	; (800f934 <ProcessRadioRxDone+0x738>)
 800f8c6:	2101      	movs	r1, #1
 800f8c8:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f8ca:	6879      	ldr	r1, [r7, #4]
 800f8cc:	4a16      	ldr	r2, [pc, #88]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f8ce:	2386      	movs	r3, #134	; 0x86
 800f8d0:	00db      	lsls	r3, r3, #3
 800f8d2:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800f8d4:	f7ff fc66 	bl	800f1a4 <PrepareRxDoneAbort>
                return;
 800f8d8:	e1be      	b.n	800fc58 <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f8da:	1cfb      	adds	r3, r7, #3
 800f8dc:	781a      	ldrb	r2, [r3, #0]
 800f8de:	687d      	ldr	r5, [r7, #4]
 800f8e0:	2680      	movs	r6, #128	; 0x80
 800f8e2:	19bc      	adds	r4, r7, r6
 800f8e4:	2384      	movs	r3, #132	; 0x84
 800f8e6:	18fb      	adds	r3, r7, r3
 800f8e8:	6819      	ldr	r1, [r3, #0]
 800f8ea:	2382      	movs	r3, #130	; 0x82
 800f8ec:	18fb      	adds	r3, r7, r3
 800f8ee:	7818      	ldrb	r0, [r3, #0]
 800f8f0:	2330      	movs	r3, #48	; 0x30
 800f8f2:	18fb      	adds	r3, r7, r3
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	002b      	movs	r3, r5
 800f8f8:	f006 fb9c 	bl	8016034 <LoRaMacCryptoUnsecureMessage>
 800f8fc:	0003      	movs	r3, r0
 800f8fe:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f900:	19bb      	adds	r3, r7, r6
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d01d      	beq.n	800f944 <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f908:	19bb      	adds	r3, r7, r6
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	2b02      	cmp	r3, #2
 800f90e:	d104      	bne.n	800f91a <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f910:	4b05      	ldr	r3, [pc, #20]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f912:	4a08      	ldr	r2, [pc, #32]	; (800f934 <ProcessRadioRxDone+0x738>)
 800f914:	210b      	movs	r1, #11
 800f916:	5499      	strb	r1, [r3, r2]
 800f918:	e003      	b.n	800f922 <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f91a:	4b03      	ldr	r3, [pc, #12]	; (800f928 <ProcessRadioRxDone+0x72c>)
 800f91c:	4a05      	ldr	r2, [pc, #20]	; (800f934 <ProcessRadioRxDone+0x738>)
 800f91e:	210c      	movs	r1, #12
 800f920:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800f922:	f7ff fc3f 	bl	800f1a4 <PrepareRxDoneAbort>
                return;
 800f926:	e197      	b.n	800fc58 <ProcessRadioRxDone+0xa5c>
 800f928:	2000054c 	.word	0x2000054c
 800f92c:	0000041c 	.word	0x0000041c
 800f930:	00000484 	.word	0x00000484
 800f934:	0000041d 	.word	0x0000041d
 800f938:	20000784 	.word	0x20000784
 800f93c:	00000434 	.word	0x00000434
 800f940:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f944:	4bc6      	ldr	r3, [pc, #792]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f946:	4ac7      	ldr	r2, [pc, #796]	; (800fc64 <ProcessRadioRxDone+0xa68>)
 800f948:	2100      	movs	r1, #0
 800f94a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800f94c:	4bc4      	ldr	r3, [pc, #784]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f94e:	2283      	movs	r2, #131	; 0x83
 800f950:	18ba      	adds	r2, r7, r2
 800f952:	49c5      	ldr	r1, [pc, #788]	; (800fc68 <ProcessRadioRxDone+0xa6c>)
 800f954:	7812      	ldrb	r2, [r2, #0]
 800f956:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f958:	2030      	movs	r0, #48	; 0x30
 800f95a:	183b      	adds	r3, r7, r0
 800f95c:	7b1b      	ldrb	r3, [r3, #12]
 800f95e:	06db      	lsls	r3, r3, #27
 800f960:	0fdb      	lsrs	r3, r3, #31
 800f962:	b2db      	uxtb	r3, r3
 800f964:	0019      	movs	r1, r3
 800f966:	4bbe      	ldr	r3, [pc, #760]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f968:	4ac0      	ldr	r2, [pc, #768]	; (800fc6c <ProcessRadioRxDone+0xa70>)
 800f96a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800f96c:	4bbc      	ldr	r3, [pc, #752]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f96e:	4ac0      	ldr	r2, [pc, #768]	; (800fc70 <ProcessRadioRxDone+0xa74>)
 800f970:	2100      	movs	r1, #0
 800f972:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800f974:	4aba      	ldr	r2, [pc, #744]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f976:	2385      	movs	r3, #133	; 0x85
 800f978:	00db      	lsls	r3, r3, #3
 800f97a:	2100      	movs	r1, #0
 800f97c:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f97e:	6879      	ldr	r1, [r7, #4]
 800f980:	4ab7      	ldr	r2, [pc, #732]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f982:	2386      	movs	r3, #134	; 0x86
 800f984:	00db      	lsls	r3, r3, #3
 800f986:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f988:	183b      	adds	r3, r7, r0
 800f98a:	7b1b      	ldrb	r3, [r3, #12]
 800f98c:	069b      	lsls	r3, r3, #26
 800f98e:	0fdb      	lsrs	r3, r3, #31
 800f990:	b2db      	uxtb	r3, r3
 800f992:	1e5a      	subs	r2, r3, #1
 800f994:	4193      	sbcs	r3, r2
 800f996:	b2d9      	uxtb	r1, r3
 800f998:	4bb1      	ldr	r3, [pc, #708]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f99a:	4ab6      	ldr	r2, [pc, #728]	; (800fc74 <ProcessRadioRxDone+0xa78>)
 800f99c:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f99e:	4bb0      	ldr	r3, [pc, #704]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f9a0:	4ab5      	ldr	r2, [pc, #724]	; (800fc78 <ProcessRadioRxDone+0xa7c>)
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f9a6:	183b      	adds	r3, r7, r0
 800f9a8:	7b1b      	ldrb	r3, [r3, #12]
 800f9aa:	069b      	lsls	r3, r3, #26
 800f9ac:	0fdb      	lsrs	r3, r3, #31
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	1e5a      	subs	r2, r3, #1
 800f9b2:	4193      	sbcs	r3, r2
 800f9b4:	b2d9      	uxtb	r1, r3
 800f9b6:	4aaa      	ldr	r2, [pc, #680]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f9b8:	2388      	movs	r3, #136	; 0x88
 800f9ba:	00db      	lsls	r3, r3, #3
 800f9bc:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800f9be:	4ba8      	ldr	r3, [pc, #672]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f9c0:	4aae      	ldr	r2, [pc, #696]	; (800fc7c <ProcessRadioRxDone+0xa80>)
 800f9c2:	5c9b      	ldrb	r3, [r3, r2]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d004      	beq.n	800f9d2 <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800f9c8:	4ba5      	ldr	r3, [pc, #660]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f9ca:	4aac      	ldr	r2, [pc, #688]	; (800fc7c <ProcessRadioRxDone+0xa80>)
 800f9cc:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d105      	bne.n	800f9de <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800f9d2:	4ba3      	ldr	r3, [pc, #652]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f9d4:	4aaa      	ldr	r2, [pc, #680]	; (800fc80 <ProcessRadioRxDone+0xa84>)
 800f9d6:	589b      	ldr	r3, [r3, r2]
 800f9d8:	2280      	movs	r2, #128	; 0x80
 800f9da:	2100      	movs	r1, #0
 800f9dc:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f9de:	2383      	movs	r3, #131	; 0x83
 800f9e0:	18fb      	adds	r3, r7, r3
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d104      	bne.n	800f9f2 <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f9e8:	4b9d      	ldr	r3, [pc, #628]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800f9ea:	4aa6      	ldr	r2, [pc, #664]	; (800fc84 <ProcessRadioRxDone+0xa88>)
 800f9ec:	2102      	movs	r1, #2
 800f9ee:	5499      	strb	r1, [r3, r2]
 800f9f0:	e02f      	b.n	800fa52 <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f9f2:	2374      	movs	r3, #116	; 0x74
 800f9f4:	18fb      	adds	r3, r7, r3
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	221f      	movs	r2, #31
 800f9fa:	4393      	bics	r3, r2
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2ba0      	cmp	r3, #160	; 0xa0
 800fa00:	d11c      	bne.n	800fa3c <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800fa02:	4b97      	ldr	r3, [pc, #604]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fa04:	4a9e      	ldr	r2, [pc, #632]	; (800fc80 <ProcessRadioRxDone+0xa84>)
 800fa06:	589a      	ldr	r2, [r3, r2]
 800fa08:	234c      	movs	r3, #76	; 0x4c
 800fa0a:	33ff      	adds	r3, #255	; 0xff
 800fa0c:	2101      	movs	r1, #1
 800fa0e:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800fa10:	4b93      	ldr	r3, [pc, #588]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fa12:	4a9b      	ldr	r2, [pc, #620]	; (800fc80 <ProcessRadioRxDone+0xa84>)
 800fa14:	589a      	ldr	r2, [r3, r2]
 800fa16:	23b1      	movs	r3, #177	; 0xb1
 800fa18:	005b      	lsls	r3, r3, #1
 800fa1a:	5cd3      	ldrb	r3, [r2, r3]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d108      	bne.n	800fa32 <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800fa20:	4b8f      	ldr	r3, [pc, #572]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fa22:	4a97      	ldr	r2, [pc, #604]	; (800fc80 <ProcessRadioRxDone+0xa84>)
 800fa24:	589a      	ldr	r2, [r3, r2]
 800fa26:	2330      	movs	r3, #48	; 0x30
 800fa28:	18fb      	adds	r3, r7, r3
 800fa2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fa2c:	23b4      	movs	r3, #180	; 0xb4
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fa32:	4b8b      	ldr	r3, [pc, #556]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fa34:	4a93      	ldr	r2, [pc, #588]	; (800fc84 <ProcessRadioRxDone+0xa88>)
 800fa36:	2101      	movs	r1, #1
 800fa38:	5499      	strb	r1, [r3, r2]
 800fa3a:	e00a      	b.n	800fa52 <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800fa3c:	4b88      	ldr	r3, [pc, #544]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fa3e:	4a90      	ldr	r2, [pc, #576]	; (800fc80 <ProcessRadioRxDone+0xa84>)
 800fa40:	589a      	ldr	r2, [r3, r2]
 800fa42:	234c      	movs	r3, #76	; 0x4c
 800fa44:	33ff      	adds	r3, #255	; 0xff
 800fa46:	2100      	movs	r1, #0
 800fa48:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fa4a:	4b85      	ldr	r3, [pc, #532]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fa4c:	4a8d      	ldr	r2, [pc, #564]	; (800fc84 <ProcessRadioRxDone+0xa88>)
 800fa4e:	2100      	movs	r1, #0
 800fa50:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fa52:	4b83      	ldr	r3, [pc, #524]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fa54:	4a89      	ldr	r2, [pc, #548]	; (800fc7c <ProcessRadioRxDone+0xa80>)
 800fa56:	5c98      	ldrb	r0, [r3, r2]
 800fa58:	4b81      	ldr	r3, [pc, #516]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fa5a:	4a8b      	ldr	r2, [pc, #556]	; (800fc88 <ProcessRadioRxDone+0xa8c>)
 800fa5c:	5c9a      	ldrb	r2, [r3, r2]
 800fa5e:	2330      	movs	r3, #48	; 0x30
 800fa60:	18fb      	adds	r3, r7, r3
 800fa62:	7b1b      	ldrb	r3, [r3, #12]
 800fa64:	1c19      	adds	r1, r3, #0
 800fa66:	f002 f94f 	bl	8011d08 <RemoveMacCommands>

            switch( fType )
 800fa6a:	1cbb      	adds	r3, r7, #2
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	2b03      	cmp	r3, #3
 800fa70:	d100      	bne.n	800fa74 <ProcessRadioRxDone+0x878>
 800fa72:	e073      	b.n	800fb5c <ProcessRadioRxDone+0x960>
 800fa74:	dd00      	ble.n	800fa78 <ProcessRadioRxDone+0x87c>
 800fa76:	e089      	b.n	800fb8c <ProcessRadioRxDone+0x990>
 800fa78:	2b02      	cmp	r3, #2
 800fa7a:	d055      	beq.n	800fb28 <ProcessRadioRxDone+0x92c>
 800fa7c:	dd00      	ble.n	800fa80 <ProcessRadioRxDone+0x884>
 800fa7e:	e085      	b.n	800fb8c <ProcessRadioRxDone+0x990>
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <ProcessRadioRxDone+0x88e>
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d030      	beq.n	800faea <ProcessRadioRxDone+0x8ee>
 800fa88:	e080      	b.n	800fb8c <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fa8a:	2030      	movs	r0, #48	; 0x30
 800fa8c:	183b      	adds	r3, r7, r0
 800fa8e:	7b1b      	ldrb	r3, [r3, #12]
 800fa90:	071b      	lsls	r3, r3, #28
 800fa92:	0f1b      	lsrs	r3, r3, #28
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	001c      	movs	r4, r3
 800fa98:	4b71      	ldr	r3, [pc, #452]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fa9a:	4a78      	ldr	r2, [pc, #480]	; (800fc7c <ProcessRadioRxDone+0xa80>)
 800fa9c:	5c9b      	ldrb	r3, [r3, r2]
 800fa9e:	2277      	movs	r2, #119	; 0x77
 800faa0:	18ba      	adds	r2, r7, r2
 800faa2:	2100      	movs	r1, #0
 800faa4:	5651      	ldrsb	r1, [r2, r1]
 800faa6:	0005      	movs	r5, r0
 800faa8:	183a      	adds	r2, r7, r0
 800faaa:	3210      	adds	r2, #16
 800faac:	0010      	movs	r0, r2
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	000b      	movs	r3, r1
 800fab2:	0022      	movs	r2, r4
 800fab4:	2100      	movs	r1, #0
 800fab6:	f000 ff4f 	bl	8010958 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800faba:	0028      	movs	r0, r5
 800fabc:	183b      	adds	r3, r7, r0
 800fabe:	2220      	movs	r2, #32
 800fac0:	5c99      	ldrb	r1, [r3, r2]
 800fac2:	4b67      	ldr	r3, [pc, #412]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fac4:	4a71      	ldr	r2, [pc, #452]	; (800fc8c <ProcessRadioRxDone+0xa90>)
 800fac6:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fac8:	183b      	adds	r3, r7, r0
 800faca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800facc:	4b64      	ldr	r3, [pc, #400]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800face:	4968      	ldr	r1, [pc, #416]	; (800fc70 <ProcessRadioRxDone+0xa74>)
 800fad0:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fad2:	183b      	adds	r3, r7, r0
 800fad4:	2228      	movs	r2, #40	; 0x28
 800fad6:	5c99      	ldrb	r1, [r3, r2]
 800fad8:	4a61      	ldr	r2, [pc, #388]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fada:	2385      	movs	r3, #133	; 0x85
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fae0:	4b5f      	ldr	r3, [pc, #380]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fae2:	4a6b      	ldr	r2, [pc, #428]	; (800fc90 <ProcessRadioRxDone+0xa94>)
 800fae4:	2101      	movs	r1, #1
 800fae6:	5499      	strb	r1, [r3, r2]
                    break;
 800fae8:	e057      	b.n	800fb9a <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800faea:	2030      	movs	r0, #48	; 0x30
 800faec:	183b      	adds	r3, r7, r0
 800faee:	7b1b      	ldrb	r3, [r3, #12]
 800faf0:	071b      	lsls	r3, r3, #28
 800faf2:	0f1b      	lsrs	r3, r3, #28
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	001c      	movs	r4, r3
 800faf8:	4b59      	ldr	r3, [pc, #356]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fafa:	4a60      	ldr	r2, [pc, #384]	; (800fc7c <ProcessRadioRxDone+0xa80>)
 800fafc:	5c9b      	ldrb	r3, [r3, r2]
 800fafe:	2277      	movs	r2, #119	; 0x77
 800fb00:	18ba      	adds	r2, r7, r2
 800fb02:	2100      	movs	r1, #0
 800fb04:	5651      	ldrsb	r1, [r2, r1]
 800fb06:	0005      	movs	r5, r0
 800fb08:	183a      	adds	r2, r7, r0
 800fb0a:	3210      	adds	r2, #16
 800fb0c:	0010      	movs	r0, r2
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	000b      	movs	r3, r1
 800fb12:	0022      	movs	r2, r4
 800fb14:	2100      	movs	r1, #0
 800fb16:	f000 ff1f 	bl	8010958 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fb1a:	197b      	adds	r3, r7, r5
 800fb1c:	2220      	movs	r2, #32
 800fb1e:	5c99      	ldrb	r1, [r3, r2]
 800fb20:	4b4f      	ldr	r3, [pc, #316]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fb22:	4a5a      	ldr	r2, [pc, #360]	; (800fc8c <ProcessRadioRxDone+0xa90>)
 800fb24:	5499      	strb	r1, [r3, r2]
                    break;
 800fb26:	e038      	b.n	800fb9a <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800fb28:	2430      	movs	r4, #48	; 0x30
 800fb2a:	193b      	adds	r3, r7, r4
 800fb2c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fb2e:	193b      	adds	r3, r7, r4
 800fb30:	2228      	movs	r2, #40	; 0x28
 800fb32:	5c99      	ldrb	r1, [r3, r2]
 800fb34:	4b4a      	ldr	r3, [pc, #296]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fb36:	4a51      	ldr	r2, [pc, #324]	; (800fc7c <ProcessRadioRxDone+0xa80>)
 800fb38:	5c9b      	ldrb	r3, [r3, r2]
 800fb3a:	2277      	movs	r2, #119	; 0x77
 800fb3c:	18ba      	adds	r2, r7, r2
 800fb3e:	7812      	ldrb	r2, [r2, #0]
 800fb40:	b252      	sxtb	r2, r2
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	0013      	movs	r3, r2
 800fb46:	000a      	movs	r2, r1
 800fb48:	2100      	movs	r1, #0
 800fb4a:	f000 ff05 	bl	8010958 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fb4e:	193b      	adds	r3, r7, r4
 800fb50:	2220      	movs	r2, #32
 800fb52:	5c99      	ldrb	r1, [r3, r2]
 800fb54:	4b42      	ldr	r3, [pc, #264]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fb56:	4a4d      	ldr	r2, [pc, #308]	; (800fc8c <ProcessRadioRxDone+0xa90>)
 800fb58:	5499      	strb	r1, [r3, r2]
                    break;
 800fb5a:	e01e      	b.n	800fb9a <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fb5c:	2030      	movs	r0, #48	; 0x30
 800fb5e:	183b      	adds	r3, r7, r0
 800fb60:	2220      	movs	r2, #32
 800fb62:	5c99      	ldrb	r1, [r3, r2]
 800fb64:	4b3e      	ldr	r3, [pc, #248]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fb66:	4a49      	ldr	r2, [pc, #292]	; (800fc8c <ProcessRadioRxDone+0xa90>)
 800fb68:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fb6a:	183b      	adds	r3, r7, r0
 800fb6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb6e:	4b3c      	ldr	r3, [pc, #240]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fb70:	493f      	ldr	r1, [pc, #252]	; (800fc70 <ProcessRadioRxDone+0xa74>)
 800fb72:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fb74:	183b      	adds	r3, r7, r0
 800fb76:	2228      	movs	r2, #40	; 0x28
 800fb78:	5c99      	ldrb	r1, [r3, r2]
 800fb7a:	4a39      	ldr	r2, [pc, #228]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fb7c:	2385      	movs	r3, #133	; 0x85
 800fb7e:	00db      	lsls	r3, r3, #3
 800fb80:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fb82:	4b37      	ldr	r3, [pc, #220]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fb84:	4a42      	ldr	r2, [pc, #264]	; (800fc90 <ProcessRadioRxDone+0xa94>)
 800fb86:	2101      	movs	r1, #1
 800fb88:	5499      	strb	r1, [r3, r2]
                    break;
 800fb8a:	e006      	b.n	800fb9a <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb8c:	4b34      	ldr	r3, [pc, #208]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fb8e:	4a35      	ldr	r2, [pc, #212]	; (800fc64 <ProcessRadioRxDone+0xa68>)
 800fb90:	2101      	movs	r1, #1
 800fb92:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800fb94:	f7ff fb06 	bl	800f1a4 <PrepareRxDoneAbort>
                    break;
 800fb98:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fb9a:	4b31      	ldr	r3, [pc, #196]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fb9c:	4a3d      	ldr	r2, [pc, #244]	; (800fc94 <ProcessRadioRxDone+0xa98>)
 800fb9e:	5c99      	ldrb	r1, [r3, r2]
 800fba0:	2002      	movs	r0, #2
 800fba2:	4301      	orrs	r1, r0
 800fba4:	5499      	strb	r1, [r3, r2]

            break;
 800fba6:	e036      	b.n	800fc16 <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fba8:	2476      	movs	r4, #118	; 0x76
 800fbaa:	193b      	adds	r3, r7, r4
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fbb0:	18d1      	adds	r1, r2, r3
 800fbb2:	193b      	adds	r3, r7, r4
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	257a      	movs	r5, #122	; 0x7a
 800fbba:	197a      	adds	r2, r7, r5
 800fbbc:	8812      	ldrh	r2, [r2, #0]
 800fbbe:	1ad3      	subs	r3, r2, r3
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	4b35      	ldr	r3, [pc, #212]	; (800fc98 <ProcessRadioRxDone+0xa9c>)
 800fbc4:	0018      	movs	r0, r3
 800fbc6:	f009 fbb1 	bl	801932c <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fbca:	4b25      	ldr	r3, [pc, #148]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fbcc:	4a2d      	ldr	r2, [pc, #180]	; (800fc84 <ProcessRadioRxDone+0xa88>)
 800fbce:	2103      	movs	r1, #3
 800fbd0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fbd2:	4b23      	ldr	r3, [pc, #140]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fbd4:	4a23      	ldr	r2, [pc, #140]	; (800fc64 <ProcessRadioRxDone+0xa68>)
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fbda:	4b21      	ldr	r3, [pc, #132]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fbdc:	4924      	ldr	r1, [pc, #144]	; (800fc70 <ProcessRadioRxDone+0xa74>)
 800fbde:	4a2e      	ldr	r2, [pc, #184]	; (800fc98 <ProcessRadioRxDone+0xa9c>)
 800fbe0:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fbe2:	197b      	adds	r3, r7, r5
 800fbe4:	881b      	ldrh	r3, [r3, #0]
 800fbe6:	b2da      	uxtb	r2, r3
 800fbe8:	193b      	adds	r3, r7, r4
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	1ad3      	subs	r3, r2, r3
 800fbee:	b2d9      	uxtb	r1, r3
 800fbf0:	4a1b      	ldr	r2, [pc, #108]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fbf2:	2385      	movs	r3, #133	; 0x85
 800fbf4:	00db      	lsls	r3, r3, #3
 800fbf6:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fbf8:	4b19      	ldr	r3, [pc, #100]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fbfa:	4a26      	ldr	r2, [pc, #152]	; (800fc94 <ProcessRadioRxDone+0xa98>)
 800fbfc:	5c99      	ldrb	r1, [r3, r2]
 800fbfe:	2002      	movs	r0, #2
 800fc00:	4301      	orrs	r1, r0
 800fc02:	5499      	strb	r1, [r3, r2]
            break;
 800fc04:	e007      	b.n	800fc16 <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc06:	4b16      	ldr	r3, [pc, #88]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fc08:	4a16      	ldr	r2, [pc, #88]	; (800fc64 <ProcessRadioRxDone+0xa68>)
 800fc0a:	2101      	movs	r1, #1
 800fc0c:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800fc0e:	f7ff fac9 	bl	800f1a4 <PrepareRxDoneAbort>
            break;
 800fc12:	e000      	b.n	800fc16 <ProcessRadioRxDone+0xa1a>
            break;
 800fc14:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800fc16:	4b12      	ldr	r3, [pc, #72]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fc18:	4a20      	ldr	r2, [pc, #128]	; (800fc9c <ProcessRadioRxDone+0xaa0>)
 800fc1a:	5c9b      	ldrb	r3, [r3, r2]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d009      	beq.n	800fc34 <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fc20:	4a0f      	ldr	r2, [pc, #60]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fc22:	2388      	movs	r3, #136	; 0x88
 800fc24:	00db      	lsls	r3, r3, #3
 800fc26:	5cd3      	ldrb	r3, [r2, r3]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00d      	beq.n	800fc48 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	f000 fc5b 	bl	80104e8 <OnAckTimeoutTimerEvent>
 800fc32:	e009      	b.n	800fc48 <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fc34:	4b0a      	ldr	r3, [pc, #40]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fc36:	4a12      	ldr	r2, [pc, #72]	; (800fc80 <ProcessRadioRxDone+0xa84>)
 800fc38:	589b      	ldr	r3, [r3, r2]
 800fc3a:	227c      	movs	r2, #124	; 0x7c
 800fc3c:	5c9b      	ldrb	r3, [r3, r2]
 800fc3e:	2b02      	cmp	r3, #2
 800fc40:	d102      	bne.n	800fc48 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fc42:	2000      	movs	r0, #0
 800fc44:	f000 fc50 	bl	80104e8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <ProcessRadioRxDone+0xa64>)
 800fc4a:	4a12      	ldr	r2, [pc, #72]	; (800fc94 <ProcessRadioRxDone+0xa98>)
 800fc4c:	5c99      	ldrb	r1, [r3, r2]
 800fc4e:	2020      	movs	r0, #32
 800fc50:	4301      	orrs	r1, r0
 800fc52:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800fc54:	f7ff f9c0 	bl	800efd8 <UpdateRxSlotIdleState>
}
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	b023      	add	sp, #140	; 0x8c
 800fc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc5e:	46c0      	nop			; (mov r8, r8)
 800fc60:	2000054c 	.word	0x2000054c
 800fc64:	0000041d 	.word	0x0000041d
 800fc68:	0000041e 	.word	0x0000041e
 800fc6c:	00000421 	.word	0x00000421
 800fc70:	00000424 	.word	0x00000424
 800fc74:	0000042e 	.word	0x0000042e
 800fc78:	0000043d 	.word	0x0000043d
 800fc7c:	0000042d 	.word	0x0000042d
 800fc80:	00000484 	.word	0x00000484
 800fc84:	0000041c 	.word	0x0000041c
 800fc88:	0000043c 	.word	0x0000043c
 800fc8c:	0000041f 	.word	0x0000041f
 800fc90:	00000429 	.word	0x00000429
 800fc94:	00000481 	.word	0x00000481
 800fc98:	20000784 	.word	0x20000784
 800fc9c:	00000414 	.word	0x00000414

0800fca0 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fca4:	4b12      	ldr	r3, [pc, #72]	; (800fcf0 <ProcessRadioTxTimeout+0x50>)
 800fca6:	4a13      	ldr	r2, [pc, #76]	; (800fcf4 <ProcessRadioTxTimeout+0x54>)
 800fca8:	589b      	ldr	r3, [r3, r2]
 800fcaa:	227c      	movs	r2, #124	; 0x7c
 800fcac:	5c9b      	ldrb	r3, [r3, r2]
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d002      	beq.n	800fcb8 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800fcb2:	4b11      	ldr	r3, [pc, #68]	; (800fcf8 <ProcessRadioTxTimeout+0x58>)
 800fcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800fcb8:	f7ff f98e 	bl	800efd8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800fcbc:	4b0c      	ldr	r3, [pc, #48]	; (800fcf0 <ProcessRadioTxTimeout+0x50>)
 800fcbe:	4a0f      	ldr	r2, [pc, #60]	; (800fcfc <ProcessRadioTxTimeout+0x5c>)
 800fcc0:	2102      	movs	r1, #2
 800fcc2:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800fcc4:	2002      	movs	r0, #2
 800fcc6:	f005 fa5b 	bl	8015180 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fcca:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <ProcessRadioTxTimeout+0x50>)
 800fccc:	4a0c      	ldr	r2, [pc, #48]	; (800fd00 <ProcessRadioTxTimeout+0x60>)
 800fcce:	5c9b      	ldrb	r3, [r3, r2]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d003      	beq.n	800fcdc <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800fcd4:	4b06      	ldr	r3, [pc, #24]	; (800fcf0 <ProcessRadioTxTimeout+0x50>)
 800fcd6:	4a0b      	ldr	r2, [pc, #44]	; (800fd04 <ProcessRadioTxTimeout+0x64>)
 800fcd8:	2101      	movs	r1, #1
 800fcda:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fcdc:	4b04      	ldr	r3, [pc, #16]	; (800fcf0 <ProcessRadioTxTimeout+0x50>)
 800fcde:	4a0a      	ldr	r2, [pc, #40]	; (800fd08 <ProcessRadioTxTimeout+0x68>)
 800fce0:	5c99      	ldrb	r1, [r3, r2]
 800fce2:	2020      	movs	r0, #32
 800fce4:	4301      	orrs	r1, r0
 800fce6:	5499      	strb	r1, [r3, r2]
}
 800fce8:	46c0      	nop			; (mov r8, r8)
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	46c0      	nop			; (mov r8, r8)
 800fcf0:	2000054c 	.word	0x2000054c
 800fcf4:	00000484 	.word	0x00000484
 800fcf8:	0801f0bc 	.word	0x0801f0bc
 800fcfc:	0000043d 	.word	0x0000043d
 800fd00:	00000414 	.word	0x00000414
 800fd04:	00000413 	.word	0x00000413
 800fd08:	00000481 	.word	0x00000481

0800fd0c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	0002      	movs	r2, r0
 800fd14:	1dfb      	adds	r3, r7, #7
 800fd16:	701a      	strb	r2, [r3, #0]
 800fd18:	1dbb      	adds	r3, r7, #6
 800fd1a:	1c0a      	adds	r2, r1, #0
 800fd1c:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800fd1e:	230f      	movs	r3, #15
 800fd20:	18fb      	adds	r3, r7, r3
 800fd22:	2200      	movs	r2, #0
 800fd24:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fd26:	4b4a      	ldr	r3, [pc, #296]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fd28:	4a4a      	ldr	r2, [pc, #296]	; (800fe54 <HandleRadioRxErrorTimeout+0x148>)
 800fd2a:	589b      	ldr	r3, [r3, r2]
 800fd2c:	227c      	movs	r2, #124	; 0x7c
 800fd2e:	5c9b      	ldrb	r3, [r3, r2]
 800fd30:	2b02      	cmp	r3, #2
 800fd32:	d002      	beq.n	800fd3a <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800fd34:	4b48      	ldr	r3, [pc, #288]	; (800fe58 <HandleRadioRxErrorTimeout+0x14c>)
 800fd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd38:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fd3a:	f004 fcdd 	bl	80146f8 <LoRaMacClassBIsBeaconExpected>
 800fd3e:	1e03      	subs	r3, r0, #0
 800fd40:	d009      	beq.n	800fd56 <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800fd42:	2002      	movs	r0, #2
 800fd44:	f004 fc90 	bl	8014668 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800fd48:	2000      	movs	r0, #0
 800fd4a:	f004 fcb1 	bl	80146b0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800fd4e:	230f      	movs	r3, #15
 800fd50:	18fb      	adds	r3, r7, r3
 800fd52:	2201      	movs	r2, #1
 800fd54:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800fd56:	4b3e      	ldr	r3, [pc, #248]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fd58:	4a3e      	ldr	r2, [pc, #248]	; (800fe54 <HandleRadioRxErrorTimeout+0x148>)
 800fd5a:	589b      	ldr	r3, [r3, r2]
 800fd5c:	227c      	movs	r2, #124	; 0x7c
 800fd5e:	5c9b      	ldrb	r3, [r3, r2]
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d11b      	bne.n	800fd9c <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fd64:	f004 fcce 	bl	8014704 <LoRaMacClassBIsPingExpected>
 800fd68:	1e03      	subs	r3, r0, #0
 800fd6a:	d009      	beq.n	800fd80 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	f004 fc85 	bl	801467c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fd72:	2000      	movs	r0, #0
 800fd74:	f004 fca4 	bl	80146c0 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800fd78:	230f      	movs	r3, #15
 800fd7a:	18fb      	adds	r3, r7, r3
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fd80:	f004 fcc6 	bl	8014710 <LoRaMacClassBIsMulticastExpected>
 800fd84:	1e03      	subs	r3, r0, #0
 800fd86:	d009      	beq.n	800fd9c <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fd88:	2000      	movs	r0, #0
 800fd8a:	f004 fc81 	bl	8014690 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fd8e:	2000      	movs	r0, #0
 800fd90:	f004 fc9e 	bl	80146d0 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fd94:	230f      	movs	r3, #15
 800fd96:	18fb      	adds	r3, r7, r3
 800fd98:	2201      	movs	r2, #1
 800fd9a:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800fd9c:	230f      	movs	r3, #15
 800fd9e:	18fb      	adds	r3, r7, r3
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	2201      	movs	r2, #1
 800fda4:	4053      	eors	r3, r2
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d04b      	beq.n	800fe44 <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fdac:	4a28      	ldr	r2, [pc, #160]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fdae:	2390      	movs	r3, #144	; 0x90
 800fdb0:	00db      	lsls	r3, r3, #3
 800fdb2:	5cd3      	ldrb	r3, [r2, r3]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d129      	bne.n	800fe0c <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 800fdb8:	4b25      	ldr	r3, [pc, #148]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fdba:	4a28      	ldr	r2, [pc, #160]	; (800fe5c <HandleRadioRxErrorTimeout+0x150>)
 800fdbc:	5c9b      	ldrb	r3, [r3, r2]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d004      	beq.n	800fdcc <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800fdc2:	4b23      	ldr	r3, [pc, #140]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fdc4:	1dfa      	adds	r2, r7, #7
 800fdc6:	4926      	ldr	r1, [pc, #152]	; (800fe60 <HandleRadioRxErrorTimeout+0x154>)
 800fdc8:	7812      	ldrb	r2, [r2, #0]
 800fdca:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800fdcc:	1dfb      	adds	r3, r7, #7
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	0018      	movs	r0, r3
 800fdd2:	f005 f9d5 	bl	8015180 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800fdd6:	4b1e      	ldr	r3, [pc, #120]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fdd8:	4a1e      	ldr	r2, [pc, #120]	; (800fe54 <HandleRadioRxErrorTimeout+0x148>)
 800fdda:	589a      	ldr	r2, [r3, r2]
 800fddc:	23a8      	movs	r3, #168	; 0xa8
 800fdde:	005b      	lsls	r3, r3, #1
 800fde0:	58d3      	ldr	r3, [r2, r3]
 800fde2:	0018      	movs	r0, r3
 800fde4:	f00c ff9e 	bl	801cd24 <UTIL_TIMER_GetElapsedTime>
 800fde8:	0001      	movs	r1, r0
 800fdea:	4a19      	ldr	r2, [pc, #100]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fdec:	23ed      	movs	r3, #237	; 0xed
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	58d3      	ldr	r3, [r2, r3]
 800fdf2:	4299      	cmp	r1, r3
 800fdf4:	d326      	bcc.n	800fe44 <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800fdf6:	4b1b      	ldr	r3, [pc, #108]	; (800fe64 <HandleRadioRxErrorTimeout+0x158>)
 800fdf8:	0018      	movs	r0, r3
 800fdfa:	f00c fe4f 	bl	801ca9c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fdfe:	4b14      	ldr	r3, [pc, #80]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fe00:	4a19      	ldr	r2, [pc, #100]	; (800fe68 <HandleRadioRxErrorTimeout+0x15c>)
 800fe02:	5c99      	ldrb	r1, [r3, r2]
 800fe04:	2020      	movs	r0, #32
 800fe06:	4301      	orrs	r1, r0
 800fe08:	5499      	strb	r1, [r3, r2]
 800fe0a:	e01b      	b.n	800fe44 <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800fe0c:	4b10      	ldr	r3, [pc, #64]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fe0e:	4a13      	ldr	r2, [pc, #76]	; (800fe5c <HandleRadioRxErrorTimeout+0x150>)
 800fe10:	5c9b      	ldrb	r3, [r3, r2]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d004      	beq.n	800fe20 <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800fe16:	4b0e      	ldr	r3, [pc, #56]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fe18:	1dba      	adds	r2, r7, #6
 800fe1a:	4911      	ldr	r1, [pc, #68]	; (800fe60 <HandleRadioRxErrorTimeout+0x154>)
 800fe1c:	7812      	ldrb	r2, [r2, #0]
 800fe1e:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800fe20:	1dbb      	adds	r3, r7, #6
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	0018      	movs	r0, r3
 800fe26:	f005 f9ab 	bl	8015180 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fe2a:	4b09      	ldr	r3, [pc, #36]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fe2c:	4a09      	ldr	r2, [pc, #36]	; (800fe54 <HandleRadioRxErrorTimeout+0x148>)
 800fe2e:	589b      	ldr	r3, [r3, r2]
 800fe30:	227c      	movs	r2, #124	; 0x7c
 800fe32:	5c9b      	ldrb	r3, [r3, r2]
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	d005      	beq.n	800fe44 <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fe38:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <HandleRadioRxErrorTimeout+0x144>)
 800fe3a:	4a0b      	ldr	r2, [pc, #44]	; (800fe68 <HandleRadioRxErrorTimeout+0x15c>)
 800fe3c:	5c99      	ldrb	r1, [r3, r2]
 800fe3e:	2020      	movs	r0, #32
 800fe40:	4301      	orrs	r1, r0
 800fe42:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 800fe44:	f7ff f8c8 	bl	800efd8 <UpdateRxSlotIdleState>
}
 800fe48:	46c0      	nop			; (mov r8, r8)
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	b004      	add	sp, #16
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	2000054c 	.word	0x2000054c
 800fe54:	00000484 	.word	0x00000484
 800fe58:	0801f0bc 	.word	0x0801f0bc
 800fe5c:	00000414 	.word	0x00000414
 800fe60:	0000043d 	.word	0x0000043d
 800fe64:	200008e4 	.word	0x200008e4
 800fe68:	00000481 	.word	0x00000481

0800fe6c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800fe70:	2106      	movs	r1, #6
 800fe72:	2005      	movs	r0, #5
 800fe74:	f7ff ff4a 	bl	800fd0c <HandleRadioRxErrorTimeout>
}
 800fe78:	46c0      	nop			; (mov r8, r8)
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800fe82:	2104      	movs	r1, #4
 800fe84:	2003      	movs	r0, #3
 800fe86:	f7ff ff41 	bl	800fd0c <HandleRadioRxErrorTimeout>
}
 800fe8a:	46c0      	nop			; (mov r8, r8)
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe96:	f3ef 8310 	mrs	r3, PRIMASK
 800fe9a:	607b      	str	r3, [r7, #4]
  return(result);
 800fe9c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800fe9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fea0:	b672      	cpsid	i
}
 800fea2:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 800fea4:	4b1f      	ldr	r3, [pc, #124]	; (800ff24 <LoRaMacHandleIrqEvents+0x94>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800feaa:	4b1e      	ldr	r3, [pc, #120]	; (800ff24 <LoRaMacHandleIrqEvents+0x94>)
 800feac:	2200      	movs	r2, #0
 800feae:	601a      	str	r2, [r3, #0]
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	f383 8810 	msr	PRIMASK, r3
}
 800feba:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d02c      	beq.n	800ff1c <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 800fec2:	003b      	movs	r3, r7
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	2210      	movs	r2, #16
 800fec8:	4013      	ands	r3, r2
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 800fed0:	f7ff f89e 	bl	800f010 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800fed4:	003b      	movs	r3, r7
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	2208      	movs	r2, #8
 800feda:	4013      	ands	r3, r2
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d001      	beq.n	800fee6 <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 800fee2:	f7ff f98b 	bl	800f1fc <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800fee6:	003b      	movs	r3, r7
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	2204      	movs	r2, #4
 800feec:	4013      	ands	r3, r2
 800feee:	b2db      	uxtb	r3, r3
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 800fef4:	f7ff fed4 	bl	800fca0 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800fef8:	003b      	movs	r3, r7
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	2202      	movs	r2, #2
 800fefe:	4013      	ands	r3, r2
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d001      	beq.n	800ff0a <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 800ff06:	f7ff ffb1 	bl	800fe6c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ff0a:	003b      	movs	r3, r7
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	2201      	movs	r2, #1
 800ff10:	4013      	ands	r3, r2
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d001      	beq.n	800ff1c <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 800ff18:	f7ff ffb1 	bl	800fe7e <ProcessRadioRxTimeout>
        }
    }
}
 800ff1c:	46c0      	nop			; (mov r8, r8)
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	b004      	add	sp, #16
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	20000b7c 	.word	0x20000b7c

0800ff28 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	0002      	movs	r2, r0
 800ff30:	1dfb      	adds	r3, r7, #7
 800ff32:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800ff34:	4b04      	ldr	r3, [pc, #16]	; (800ff48 <LoRaMacEnableRequests+0x20>)
 800ff36:	1dfa      	adds	r2, r7, #7
 800ff38:	4904      	ldr	r1, [pc, #16]	; (800ff4c <LoRaMacEnableRequests+0x24>)
 800ff3a:	7812      	ldrb	r2, [r2, #0]
 800ff3c:	545a      	strb	r2, [r3, r1]
}
 800ff3e:	46c0      	nop			; (mov r8, r8)
 800ff40:	46bd      	mov	sp, r7
 800ff42:	b002      	add	sp, #8
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	46c0      	nop			; (mov r8, r8)
 800ff48:	2000054c 	.word	0x2000054c
 800ff4c:	00000482 	.word	0x00000482

0800ff50 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ff56:	1d3b      	adds	r3, r7, #4
 800ff58:	4a2c      	ldr	r2, [pc, #176]	; (801000c <LoRaMacHandleRequestEvents+0xbc>)
 800ff5a:	492d      	ldr	r1, [pc, #180]	; (8010010 <LoRaMacHandleRequestEvents+0xc0>)
 800ff5c:	5c52      	ldrb	r2, [r2, r1]
 800ff5e:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ff60:	4a2a      	ldr	r2, [pc, #168]	; (801000c <LoRaMacHandleRequestEvents+0xbc>)
 800ff62:	23d0      	movs	r3, #208	; 0xd0
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	58d3      	ldr	r3, [r2, r3]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d14a      	bne.n	8010002 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ff6c:	4b27      	ldr	r3, [pc, #156]	; (801000c <LoRaMacHandleRequestEvents+0xbc>)
 800ff6e:	4a28      	ldr	r2, [pc, #160]	; (8010010 <LoRaMacHandleRequestEvents+0xc0>)
 800ff70:	5c9b      	ldrb	r3, [r3, r2]
 800ff72:	2201      	movs	r2, #1
 800ff74:	4013      	ands	r3, r2
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d005      	beq.n	800ff88 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ff7c:	4b23      	ldr	r3, [pc, #140]	; (801000c <LoRaMacHandleRequestEvents+0xbc>)
 800ff7e:	4a24      	ldr	r2, [pc, #144]	; (8010010 <LoRaMacHandleRequestEvents+0xc0>)
 800ff80:	5c99      	ldrb	r1, [r3, r2]
 800ff82:	2001      	movs	r0, #1
 800ff84:	4381      	bics	r1, r0
 800ff86:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ff88:	4b20      	ldr	r3, [pc, #128]	; (801000c <LoRaMacHandleRequestEvents+0xbc>)
 800ff8a:	4a21      	ldr	r2, [pc, #132]	; (8010010 <LoRaMacHandleRequestEvents+0xc0>)
 800ff8c:	5c9b      	ldrb	r3, [r3, r2]
 800ff8e:	2204      	movs	r2, #4
 800ff90:	4013      	ands	r3, r2
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d005      	beq.n	800ffa4 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ff98:	4b1c      	ldr	r3, [pc, #112]	; (801000c <LoRaMacHandleRequestEvents+0xbc>)
 800ff9a:	4a1d      	ldr	r2, [pc, #116]	; (8010010 <LoRaMacHandleRequestEvents+0xc0>)
 800ff9c:	5c99      	ldrb	r1, [r3, r2]
 800ff9e:	2004      	movs	r0, #4
 800ffa0:	4381      	bics	r1, r0
 800ffa2:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ffa4:	2001      	movs	r0, #1
 800ffa6:	f7ff ffbf 	bl	800ff28 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ffaa:	1d3b      	adds	r3, r7, #4
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	4013      	ands	r3, r2
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d007      	beq.n	800ffc8 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ffb8:	4a14      	ldr	r2, [pc, #80]	; (801000c <LoRaMacHandleRequestEvents+0xbc>)
 800ffba:	23d1      	movs	r3, #209	; 0xd1
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	58d3      	ldr	r3, [r2, r3]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4a14      	ldr	r2, [pc, #80]	; (8010014 <LoRaMacHandleRequestEvents+0xc4>)
 800ffc4:	0010      	movs	r0, r2
 800ffc6:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ffc8:	1d3b      	adds	r3, r7, #4
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	2204      	movs	r2, #4
 800ffce:	4013      	ands	r3, r2
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00d      	beq.n	800fff2 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ffd6:	4b10      	ldr	r3, [pc, #64]	; (8010018 <LoRaMacHandleRequestEvents+0xc8>)
 800ffd8:	0018      	movs	r0, r3
 800ffda:	f005 f925 	bl	8015228 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ffde:	f005 f985 	bl	80152ec <LoRaMacConfirmQueueGetCnt>
 800ffe2:	1e03      	subs	r3, r0, #0
 800ffe4:	d005      	beq.n	800fff2 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ffe6:	4b09      	ldr	r3, [pc, #36]	; (801000c <LoRaMacHandleRequestEvents+0xbc>)
 800ffe8:	4a09      	ldr	r2, [pc, #36]	; (8010010 <LoRaMacHandleRequestEvents+0xc0>)
 800ffea:	5c99      	ldrb	r1, [r3, r2]
 800ffec:	2004      	movs	r0, #4
 800ffee:	4301      	orrs	r1, r0
 800fff0:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800fff2:	f004 fba8 	bl	8014746 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800fff6:	4b05      	ldr	r3, [pc, #20]	; (801000c <LoRaMacHandleRequestEvents+0xbc>)
 800fff8:	4a05      	ldr	r2, [pc, #20]	; (8010010 <LoRaMacHandleRequestEvents+0xc0>)
 800fffa:	5c99      	ldrb	r1, [r3, r2]
 800fffc:	2020      	movs	r0, #32
 800fffe:	4381      	bics	r1, r0
 8010000:	5499      	strb	r1, [r3, r2]
    }
}
 8010002:	46c0      	nop			; (mov r8, r8)
 8010004:	46bd      	mov	sp, r7
 8010006:	b002      	add	sp, #8
 8010008:	bd80      	pop	{r7, pc}
 801000a:	46c0      	nop			; (mov r8, r8)
 801000c:	2000054c 	.word	0x2000054c
 8010010:	00000481 	.word	0x00000481
 8010014:	20000988 	.word	0x20000988
 8010018:	2000099c 	.word	0x2000099c

0801001c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 8010022:	4a0b      	ldr	r2, [pc, #44]	; (8010050 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 8010024:	23d0      	movs	r3, #208	; 0xd0
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	58d3      	ldr	r3, [r2, r3]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d10c      	bne.n	8010048 <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 801002e:	1dfb      	adds	r3, r7, #7
 8010030:	2200      	movs	r2, #0
 8010032:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8010034:	1dfb      	adds	r3, r7, #7
 8010036:	0018      	movs	r0, r3
 8010038:	f004 fe94 	bl	8014d64 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 801003c:	1dfb      	adds	r3, r7, #7
 801003e:	781b      	ldrb	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d001      	beq.n	8010048 <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 8010044:	f000 fc78 	bl	8010938 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 8010048:	46c0      	nop			; (mov r8, r8)
 801004a:	46bd      	mov	sp, r7
 801004c:	b002      	add	sp, #8
 801004e:	bd80      	pop	{r7, pc}
 8010050:	2000054c 	.word	0x2000054c

08010054 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b088      	sub	sp, #32
 8010058:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 801005a:	4b26      	ldr	r3, [pc, #152]	; (80100f4 <LoRaMacHandleIndicationEvents+0xa0>)
 801005c:	4a26      	ldr	r2, [pc, #152]	; (80100f8 <LoRaMacHandleIndicationEvents+0xa4>)
 801005e:	5c9b      	ldrb	r3, [r3, r2]
 8010060:	2208      	movs	r2, #8
 8010062:	4013      	ands	r3, r2
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d00d      	beq.n	8010086 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 801006a:	4b22      	ldr	r3, [pc, #136]	; (80100f4 <LoRaMacHandleIndicationEvents+0xa0>)
 801006c:	4a22      	ldr	r2, [pc, #136]	; (80100f8 <LoRaMacHandleIndicationEvents+0xa4>)
 801006e:	5c99      	ldrb	r1, [r3, r2]
 8010070:	2008      	movs	r0, #8
 8010072:	4381      	bics	r1, r0
 8010074:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8010076:	4a1f      	ldr	r2, [pc, #124]	; (80100f4 <LoRaMacHandleIndicationEvents+0xa0>)
 8010078:	23d1      	movs	r3, #209	; 0xd1
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	58d3      	ldr	r3, [r2, r3]
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	4a1e      	ldr	r2, [pc, #120]	; (80100fc <LoRaMacHandleIndicationEvents+0xa8>)
 8010082:	0010      	movs	r0, r2
 8010084:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8010086:	4b1b      	ldr	r3, [pc, #108]	; (80100f4 <LoRaMacHandleIndicationEvents+0xa0>)
 8010088:	4a1b      	ldr	r2, [pc, #108]	; (80100f8 <LoRaMacHandleIndicationEvents+0xa4>)
 801008a:	5c9b      	ldrb	r3, [r3, r2]
 801008c:	2210      	movs	r2, #16
 801008e:	4013      	ands	r3, r2
 8010090:	b2db      	uxtb	r3, r3
 8010092:	2b00      	cmp	r3, #0
 8010094:	d013      	beq.n	80100be <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8010096:	1d3b      	adds	r3, r7, #4
 8010098:	2207      	movs	r2, #7
 801009a:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801009c:	1d3b      	adds	r3, r7, #4
 801009e:	2200      	movs	r2, #0
 80100a0:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 80100a2:	4a14      	ldr	r2, [pc, #80]	; (80100f4 <LoRaMacHandleIndicationEvents+0xa0>)
 80100a4:	23d1      	movs	r3, #209	; 0xd1
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	58d3      	ldr	r3, [r2, r3]
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	1d3a      	adds	r2, r7, #4
 80100ae:	0010      	movs	r0, r2
 80100b0:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 80100b2:	4b10      	ldr	r3, [pc, #64]	; (80100f4 <LoRaMacHandleIndicationEvents+0xa0>)
 80100b4:	4a10      	ldr	r2, [pc, #64]	; (80100f8 <LoRaMacHandleIndicationEvents+0xa4>)
 80100b6:	5c99      	ldrb	r1, [r3, r2]
 80100b8:	2010      	movs	r0, #16
 80100ba:	4381      	bics	r1, r0
 80100bc:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80100be:	4b0d      	ldr	r3, [pc, #52]	; (80100f4 <LoRaMacHandleIndicationEvents+0xa0>)
 80100c0:	4a0d      	ldr	r2, [pc, #52]	; (80100f8 <LoRaMacHandleIndicationEvents+0xa4>)
 80100c2:	5c9b      	ldrb	r3, [r3, r2]
 80100c4:	2202      	movs	r2, #2
 80100c6:	4013      	ands	r3, r2
 80100c8:	b2db      	uxtb	r3, r3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00d      	beq.n	80100ea <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80100ce:	4b09      	ldr	r3, [pc, #36]	; (80100f4 <LoRaMacHandleIndicationEvents+0xa0>)
 80100d0:	4a09      	ldr	r2, [pc, #36]	; (80100f8 <LoRaMacHandleIndicationEvents+0xa4>)
 80100d2:	5c99      	ldrb	r1, [r3, r2]
 80100d4:	2002      	movs	r0, #2
 80100d6:	4381      	bics	r1, r0
 80100d8:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80100da:	4a06      	ldr	r2, [pc, #24]	; (80100f4 <LoRaMacHandleIndicationEvents+0xa0>)
 80100dc:	23d1      	movs	r3, #209	; 0xd1
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	58d3      	ldr	r3, [r2, r3]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	4a06      	ldr	r2, [pc, #24]	; (8010100 <LoRaMacHandleIndicationEvents+0xac>)
 80100e6:	0010      	movs	r0, r2
 80100e8:	4798      	blx	r3
    }
}
 80100ea:	46c0      	nop			; (mov r8, r8)
 80100ec:	46bd      	mov	sp, r7
 80100ee:	b008      	add	sp, #32
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	46c0      	nop			; (mov r8, r8)
 80100f4:	2000054c 	.word	0x2000054c
 80100f8:	00000481 	.word	0x00000481
 80100fc:	200009b0 	.word	0x200009b0
 8010100:	20000968 	.word	0x20000968

08010104 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8010104:	b590      	push	{r4, r7, lr}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801010a:	4b39      	ldr	r3, [pc, #228]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 801010c:	4a39      	ldr	r2, [pc, #228]	; (80101f4 <LoRaMacHandleMcpsRequest+0xf0>)
 801010e:	5c9b      	ldrb	r3, [r3, r2]
 8010110:	2201      	movs	r2, #1
 8010112:	4013      	ands	r3, r2
 8010114:	b2db      	uxtb	r3, r3
 8010116:	2b00      	cmp	r3, #0
 8010118:	d066      	beq.n	80101e8 <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 801011a:	1dfb      	adds	r3, r7, #7
 801011c:	2200      	movs	r2, #0
 801011e:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 8010120:	1dbb      	adds	r3, r7, #6
 8010122:	2200      	movs	r2, #0
 8010124:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010126:	4b32      	ldr	r3, [pc, #200]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 8010128:	4a33      	ldr	r2, [pc, #204]	; (80101f8 <LoRaMacHandleMcpsRequest+0xf4>)
 801012a:	5c9b      	ldrb	r3, [r3, r2]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d004      	beq.n	801013a <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010130:	4b2f      	ldr	r3, [pc, #188]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 8010132:	4a31      	ldr	r2, [pc, #196]	; (80101f8 <LoRaMacHandleMcpsRequest+0xf4>)
 8010134:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010136:	2b03      	cmp	r3, #3
 8010138:	d105      	bne.n	8010146 <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801013a:	1dfc      	adds	r4, r7, #7
 801013c:	f002 fb70 	bl	8012820 <CheckRetransUnconfirmedUplink>
 8010140:	0003      	movs	r3, r0
 8010142:	7023      	strb	r3, [r4, #0]
 8010144:	e026      	b.n	8010194 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010146:	4b2a      	ldr	r3, [pc, #168]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 8010148:	4a2b      	ldr	r2, [pc, #172]	; (80101f8 <LoRaMacHandleMcpsRequest+0xf4>)
 801014a:	5c9b      	ldrb	r3, [r3, r2]
 801014c:	2b01      	cmp	r3, #1
 801014e:	d121      	bne.n	8010194 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 8010150:	4b27      	ldr	r3, [pc, #156]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 8010152:	4a2a      	ldr	r2, [pc, #168]	; (80101fc <LoRaMacHandleMcpsRequest+0xf8>)
 8010154:	5c9b      	ldrb	r3, [r3, r2]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d019      	beq.n	801018e <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 801015a:	1dfc      	adds	r4, r7, #7
 801015c:	f002 fb94 	bl	8012888 <CheckRetransConfirmedUplink>
 8010160:	0003      	movs	r3, r0
 8010162:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8010164:	4b22      	ldr	r3, [pc, #136]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 8010166:	4a26      	ldr	r2, [pc, #152]	; (8010200 <LoRaMacHandleMcpsRequest+0xfc>)
 8010168:	589a      	ldr	r2, [r3, r2]
 801016a:	23b1      	movs	r3, #177	; 0xb1
 801016c:	005b      	lsls	r3, r3, #1
 801016e:	5cd3      	ldrb	r3, [r2, r3]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d10f      	bne.n	8010194 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 8010174:	1dfb      	adds	r3, r7, #7
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	2201      	movs	r2, #1
 801017a:	4053      	eors	r3, r2
 801017c:	b2db      	uxtb	r3, r3
 801017e:	2b00      	cmp	r3, #0
 8010180:	d002      	beq.n	8010188 <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 8010182:	f002 fbf5 	bl	8012970 <AckTimeoutRetriesProcess>
 8010186:	e005      	b.n	8010194 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8010188:	f002 fc40 	bl	8012a0c <AckTimeoutRetriesFinalize>
 801018c:	e002      	b.n	8010194 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 801018e:	1dbb      	adds	r3, r7, #6
 8010190:	2201      	movs	r2, #1
 8010192:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 8010194:	1dfb      	adds	r3, r7, #7
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d011      	beq.n	80101c0 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 801019c:	4b19      	ldr	r3, [pc, #100]	; (8010204 <LoRaMacHandleMcpsRequest+0x100>)
 801019e:	0018      	movs	r0, r3
 80101a0:	f00c fc7c 	bl	801ca9c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80101a4:	4a12      	ldr	r2, [pc, #72]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 80101a6:	23d0      	movs	r3, #208	; 0xd0
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	58d3      	ldr	r3, [r2, r3]
 80101ac:	2220      	movs	r2, #32
 80101ae:	4393      	bics	r3, r2
 80101b0:	0019      	movs	r1, r3
 80101b2:	4a0f      	ldr	r2, [pc, #60]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 80101b4:	23d0      	movs	r3, #208	; 0xd0
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 80101ba:	f002 fb8d 	bl	80128d8 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80101be:	e013      	b.n	80101e8 <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 80101c0:	1dbb      	adds	r3, r7, #6
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2201      	movs	r2, #1
 80101c6:	4053      	eors	r3, r2
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00c      	beq.n	80101e8 <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80101ce:	4b08      	ldr	r3, [pc, #32]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 80101d0:	4a08      	ldr	r2, [pc, #32]	; (80101f4 <LoRaMacHandleMcpsRequest+0xf0>)
 80101d2:	5c99      	ldrb	r1, [r3, r2]
 80101d4:	2020      	movs	r0, #32
 80101d6:	4381      	bics	r1, r0
 80101d8:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 80101da:	4b05      	ldr	r3, [pc, #20]	; (80101f0 <LoRaMacHandleMcpsRequest+0xec>)
 80101dc:	4a07      	ldr	r2, [pc, #28]	; (80101fc <LoRaMacHandleMcpsRequest+0xf8>)
 80101de:	2100      	movs	r1, #0
 80101e0:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 80101e2:	2000      	movs	r0, #0
 80101e4:	f000 f8a2 	bl	801032c <OnTxDelayedTimerEvent>
}
 80101e8:	46c0      	nop			; (mov r8, r8)
 80101ea:	46bd      	mov	sp, r7
 80101ec:	b003      	add	sp, #12
 80101ee:	bd90      	pop	{r4, r7, pc}
 80101f0:	2000054c 	.word	0x2000054c
 80101f4:	00000481 	.word	0x00000481
 80101f8:	0000043c 	.word	0x0000043c
 80101fc:	00000413 	.word	0x00000413
 8010200:	00000484 	.word	0x00000484
 8010204:	200008b4 	.word	0x200008b4

08010208 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801020c:	4b1d      	ldr	r3, [pc, #116]	; (8010284 <LoRaMacHandleMlmeRequest+0x7c>)
 801020e:	4a1e      	ldr	r2, [pc, #120]	; (8010288 <LoRaMacHandleMlmeRequest+0x80>)
 8010210:	5c9b      	ldrb	r3, [r3, r2]
 8010212:	2204      	movs	r2, #4
 8010214:	4013      	ands	r3, r2
 8010216:	b2db      	uxtb	r3, r3
 8010218:	2b00      	cmp	r3, #0
 801021a:	d02f      	beq.n	801027c <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801021c:	2001      	movs	r0, #1
 801021e:	f004 ffe9 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 8010222:	1e03      	subs	r3, r0, #0
 8010224:	d015      	beq.n	8010252 <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010226:	2001      	movs	r0, #1
 8010228:	f004 ff7c 	bl	8015124 <LoRaMacConfirmQueueGetStatus>
 801022c:	1e03      	subs	r3, r0, #0
 801022e:	d104      	bne.n	801023a <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010230:	4a14      	ldr	r2, [pc, #80]	; (8010284 <LoRaMacHandleMlmeRequest+0x7c>)
 8010232:	2382      	movs	r3, #130	; 0x82
 8010234:	00db      	lsls	r3, r3, #3
 8010236:	2100      	movs	r1, #0
 8010238:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801023a:	4a12      	ldr	r2, [pc, #72]	; (8010284 <LoRaMacHandleMlmeRequest+0x7c>)
 801023c:	23d0      	movs	r3, #208	; 0xd0
 801023e:	009b      	lsls	r3, r3, #2
 8010240:	58d3      	ldr	r3, [r2, r3]
 8010242:	2202      	movs	r2, #2
 8010244:	4393      	bics	r3, r2
 8010246:	0019      	movs	r1, r3
 8010248:	4a0e      	ldr	r2, [pc, #56]	; (8010284 <LoRaMacHandleMlmeRequest+0x7c>)
 801024a:	23d0      	movs	r3, #208	; 0xd0
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 8010250:	e014      	b.n	801027c <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010252:	2005      	movs	r0, #5
 8010254:	f004 ffce 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 8010258:	1e03      	subs	r3, r0, #0
 801025a:	d104      	bne.n	8010266 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 801025c:	2006      	movs	r0, #6
 801025e:	f004 ffc9 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 8010262:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010264:	d00a      	beq.n	801027c <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010266:	4a07      	ldr	r2, [pc, #28]	; (8010284 <LoRaMacHandleMlmeRequest+0x7c>)
 8010268:	23d0      	movs	r3, #208	; 0xd0
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	58d3      	ldr	r3, [r2, r3]
 801026e:	2202      	movs	r2, #2
 8010270:	4393      	bics	r3, r2
 8010272:	0019      	movs	r1, r3
 8010274:	4a03      	ldr	r2, [pc, #12]	; (8010284 <LoRaMacHandleMlmeRequest+0x7c>)
 8010276:	23d0      	movs	r3, #208	; 0xd0
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	50d1      	str	r1, [r2, r3]
}
 801027c:	46c0      	nop			; (mov r8, r8)
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	46c0      	nop			; (mov r8, r8)
 8010284:	2000054c 	.word	0x2000054c
 8010288:	00000481 	.word	0x00000481

0801028c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010290:	200c      	movs	r0, #12
 8010292:	f004 ffaf 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 8010296:	1e03      	subs	r3, r0, #0
 8010298:	d01c      	beq.n	80102d4 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 801029a:	4b10      	ldr	r3, [pc, #64]	; (80102dc <LoRaMacCheckForBeaconAcquisition+0x50>)
 801029c:	4a10      	ldr	r2, [pc, #64]	; (80102e0 <LoRaMacCheckForBeaconAcquisition+0x54>)
 801029e:	5c9b      	ldrb	r3, [r3, r2]
 80102a0:	2201      	movs	r2, #1
 80102a2:	4013      	ands	r3, r2
 80102a4:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d114      	bne.n	80102d4 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80102aa:	4b0c      	ldr	r3, [pc, #48]	; (80102dc <LoRaMacCheckForBeaconAcquisition+0x50>)
 80102ac:	4a0c      	ldr	r2, [pc, #48]	; (80102e0 <LoRaMacCheckForBeaconAcquisition+0x54>)
 80102ae:	5c9b      	ldrb	r3, [r3, r2]
 80102b0:	2204      	movs	r2, #4
 80102b2:	4013      	ands	r3, r2
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00c      	beq.n	80102d4 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80102ba:	4a08      	ldr	r2, [pc, #32]	; (80102dc <LoRaMacCheckForBeaconAcquisition+0x50>)
 80102bc:	23d0      	movs	r3, #208	; 0xd0
 80102be:	009b      	lsls	r3, r3, #2
 80102c0:	58d3      	ldr	r3, [r2, r3]
 80102c2:	2202      	movs	r2, #2
 80102c4:	4393      	bics	r3, r2
 80102c6:	0019      	movs	r1, r3
 80102c8:	4a04      	ldr	r2, [pc, #16]	; (80102dc <LoRaMacCheckForBeaconAcquisition+0x50>)
 80102ca:	23d0      	movs	r3, #208	; 0xd0
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	50d1      	str	r1, [r2, r3]
            return 0x01;
 80102d0:	2301      	movs	r3, #1
 80102d2:	e000      	b.n	80102d6 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	0018      	movs	r0, r3
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	2000054c 	.word	0x2000054c
 80102e0:	00000481 	.word	0x00000481

080102e4 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80102e8:	4a0f      	ldr	r2, [pc, #60]	; (8010328 <LoRaMacCheckForRxAbort+0x44>)
 80102ea:	23d0      	movs	r3, #208	; 0xd0
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	58d3      	ldr	r3, [r2, r3]
 80102f0:	2280      	movs	r2, #128	; 0x80
 80102f2:	4013      	ands	r3, r2
 80102f4:	d015      	beq.n	8010322 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80102f6:	4a0c      	ldr	r2, [pc, #48]	; (8010328 <LoRaMacCheckForRxAbort+0x44>)
 80102f8:	23d0      	movs	r3, #208	; 0xd0
 80102fa:	009b      	lsls	r3, r3, #2
 80102fc:	58d3      	ldr	r3, [r2, r3]
 80102fe:	2280      	movs	r2, #128	; 0x80
 8010300:	4393      	bics	r3, r2
 8010302:	0019      	movs	r1, r3
 8010304:	4a08      	ldr	r2, [pc, #32]	; (8010328 <LoRaMacCheckForRxAbort+0x44>)
 8010306:	23d0      	movs	r3, #208	; 0xd0
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801030c:	4a06      	ldr	r2, [pc, #24]	; (8010328 <LoRaMacCheckForRxAbort+0x44>)
 801030e:	23d0      	movs	r3, #208	; 0xd0
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	58d3      	ldr	r3, [r2, r3]
 8010314:	2202      	movs	r2, #2
 8010316:	4393      	bics	r3, r2
 8010318:	0019      	movs	r1, r3
 801031a:	4a03      	ldr	r2, [pc, #12]	; (8010328 <LoRaMacCheckForRxAbort+0x44>)
 801031c:	23d0      	movs	r3, #208	; 0xd0
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	50d1      	str	r1, [r2, r3]
    }
}
 8010322:	46c0      	nop			; (mov r8, r8)
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	2000054c 	.word	0x2000054c

0801032c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010334:	4b19      	ldr	r3, [pc, #100]	; (801039c <OnTxDelayedTimerEvent+0x70>)
 8010336:	0018      	movs	r0, r3
 8010338:	f00c fbb0 	bl	801ca9c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801033c:	4a18      	ldr	r2, [pc, #96]	; (80103a0 <OnTxDelayedTimerEvent+0x74>)
 801033e:	23d0      	movs	r3, #208	; 0xd0
 8010340:	009b      	lsls	r3, r3, #2
 8010342:	58d3      	ldr	r3, [r2, r3]
 8010344:	2220      	movs	r2, #32
 8010346:	4393      	bics	r3, r2
 8010348:	0019      	movs	r1, r3
 801034a:	4a15      	ldr	r2, [pc, #84]	; (80103a0 <OnTxDelayedTimerEvent+0x74>)
 801034c:	23d0      	movs	r3, #208	; 0xd0
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010352:	2001      	movs	r0, #1
 8010354:	f001 fb5a 	bl	8011a0c <ScheduleTx>
 8010358:	1e03      	subs	r3, r0, #0
 801035a:	d01a      	beq.n	8010392 <OnTxDelayedTimerEvent+0x66>
 801035c:	2b0b      	cmp	r3, #11
 801035e:	d018      	beq.n	8010392 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010360:	4b0f      	ldr	r3, [pc, #60]	; (80103a0 <OnTxDelayedTimerEvent+0x74>)
 8010362:	4a10      	ldr	r2, [pc, #64]	; (80103a4 <OnTxDelayedTimerEvent+0x78>)
 8010364:	589b      	ldr	r3, [r3, r2]
 8010366:	2285      	movs	r2, #133	; 0x85
 8010368:	569b      	ldrsb	r3, [r3, r2]
 801036a:	b2d9      	uxtb	r1, r3
 801036c:	4b0c      	ldr	r3, [pc, #48]	; (80103a0 <OnTxDelayedTimerEvent+0x74>)
 801036e:	4a0e      	ldr	r2, [pc, #56]	; (80103a8 <OnTxDelayedTimerEvent+0x7c>)
 8010370:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010372:	4b0b      	ldr	r3, [pc, #44]	; (80103a0 <OnTxDelayedTimerEvent+0x74>)
 8010374:	4a0d      	ldr	r2, [pc, #52]	; (80103ac <OnTxDelayedTimerEvent+0x80>)
 8010376:	5c99      	ldrb	r1, [r3, r2]
 8010378:	4b09      	ldr	r3, [pc, #36]	; (80103a0 <OnTxDelayedTimerEvent+0x74>)
 801037a:	4a0d      	ldr	r2, [pc, #52]	; (80103b0 <OnTxDelayedTimerEvent+0x84>)
 801037c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 801037e:	4b08      	ldr	r3, [pc, #32]	; (80103a0 <OnTxDelayedTimerEvent+0x74>)
 8010380:	4a0c      	ldr	r2, [pc, #48]	; (80103b4 <OnTxDelayedTimerEvent+0x88>)
 8010382:	2109      	movs	r1, #9
 8010384:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010386:	2009      	movs	r0, #9
 8010388:	f004 fefa 	bl	8015180 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 801038c:	f002 faa4 	bl	80128d8 <StopRetransmission>
            break;
 8010390:	e000      	b.n	8010394 <OnTxDelayedTimerEvent+0x68>
            break;
 8010392:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8010394:	46c0      	nop			; (mov r8, r8)
 8010396:	46bd      	mov	sp, r7
 8010398:	b002      	add	sp, #8
 801039a:	bd80      	pop	{r7, pc}
 801039c:	200008b4 	.word	0x200008b4
 80103a0:	2000054c 	.word	0x2000054c
 80103a4:	00000484 	.word	0x00000484
 80103a8:	0000043e 	.word	0x0000043e
 80103ac:	00000412 	.word	0x00000412
 80103b0:	00000441 	.word	0x00000441
 80103b4:	0000043d 	.word	0x0000043d

080103b8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80103c0:	4b19      	ldr	r3, [pc, #100]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 80103c2:	4a1a      	ldr	r2, [pc, #104]	; (801042c <OnRxWindow1TimerEvent+0x74>)
 80103c4:	5c99      	ldrb	r1, [r3, r2]
 80103c6:	4a18      	ldr	r2, [pc, #96]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 80103c8:	23ee      	movs	r3, #238	; 0xee
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80103ce:	4b16      	ldr	r3, [pc, #88]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 80103d0:	4a17      	ldr	r2, [pc, #92]	; (8010430 <OnRxWindow1TimerEvent+0x78>)
 80103d2:	589b      	ldr	r3, [r3, r2]
 80103d4:	22a5      	movs	r2, #165	; 0xa5
 80103d6:	5c9b      	ldrb	r3, [r3, r2]
 80103d8:	b259      	sxtb	r1, r3
 80103da:	4b13      	ldr	r3, [pc, #76]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 80103dc:	4a15      	ldr	r2, [pc, #84]	; (8010434 <OnRxWindow1TimerEvent+0x7c>)
 80103de:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80103e0:	4b11      	ldr	r3, [pc, #68]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 80103e2:	4a13      	ldr	r2, [pc, #76]	; (8010430 <OnRxWindow1TimerEvent+0x78>)
 80103e4:	589b      	ldr	r3, [r3, r2]
 80103e6:	22b9      	movs	r2, #185	; 0xb9
 80103e8:	5c99      	ldrb	r1, [r3, r2]
 80103ea:	4a0f      	ldr	r2, [pc, #60]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 80103ec:	23f2      	movs	r3, #242	; 0xf2
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80103f2:	4b0d      	ldr	r3, [pc, #52]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 80103f4:	4a0e      	ldr	r2, [pc, #56]	; (8010430 <OnRxWindow1TimerEvent+0x78>)
 80103f6:	589b      	ldr	r3, [r3, r2]
 80103f8:	22ca      	movs	r2, #202	; 0xca
 80103fa:	5c99      	ldrb	r1, [r3, r2]
 80103fc:	4b0a      	ldr	r3, [pc, #40]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 80103fe:	4a0e      	ldr	r2, [pc, #56]	; (8010438 <OnRxWindow1TimerEvent+0x80>)
 8010400:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010402:	4b09      	ldr	r3, [pc, #36]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 8010404:	4a0d      	ldr	r2, [pc, #52]	; (801043c <OnRxWindow1TimerEvent+0x84>)
 8010406:	2100      	movs	r1, #0
 8010408:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801040a:	4b07      	ldr	r3, [pc, #28]	; (8010428 <OnRxWindow1TimerEvent+0x70>)
 801040c:	4a0c      	ldr	r2, [pc, #48]	; (8010440 <OnRxWindow1TimerEvent+0x88>)
 801040e:	2100      	movs	r1, #0
 8010410:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010412:	4a0c      	ldr	r2, [pc, #48]	; (8010444 <OnRxWindow1TimerEvent+0x8c>)
 8010414:	4b0c      	ldr	r3, [pc, #48]	; (8010448 <OnRxWindow1TimerEvent+0x90>)
 8010416:	0011      	movs	r1, r2
 8010418:	0018      	movs	r0, r3
 801041a:	f001 fd9d 	bl	8011f58 <RxWindowSetup>
}
 801041e:	46c0      	nop			; (mov r8, r8)
 8010420:	46bd      	mov	sp, r7
 8010422:	b002      	add	sp, #8
 8010424:	bd80      	pop	{r7, pc}
 8010426:	46c0      	nop			; (mov r8, r8)
 8010428:	2000054c 	.word	0x2000054c
 801042c:	00000415 	.word	0x00000415
 8010430:	00000484 	.word	0x00000484
 8010434:	000003bb 	.word	0x000003bb
 8010438:	000003c9 	.word	0x000003c9
 801043c:	000003ca 	.word	0x000003ca
 8010440:	000003cb 	.word	0x000003cb
 8010444:	20000904 	.word	0x20000904
 8010448:	200008cc 	.word	0x200008cc

0801044c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010454:	4a1c      	ldr	r2, [pc, #112]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 8010456:	2390      	movs	r3, #144	; 0x90
 8010458:	00db      	lsls	r3, r3, #3
 801045a:	5cd3      	ldrb	r3, [r2, r3]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d02f      	beq.n	80104c0 <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010460:	4b19      	ldr	r3, [pc, #100]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 8010462:	4a1a      	ldr	r2, [pc, #104]	; (80104cc <OnRxWindow2TimerEvent+0x80>)
 8010464:	5c99      	ldrb	r1, [r3, r2]
 8010466:	4a18      	ldr	r2, [pc, #96]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 8010468:	23f3      	movs	r3, #243	; 0xf3
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 801046e:	4b16      	ldr	r3, [pc, #88]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 8010470:	4a17      	ldr	r2, [pc, #92]	; (80104d0 <OnRxWindow2TimerEvent+0x84>)
 8010472:	589b      	ldr	r3, [r3, r2]
 8010474:	22a8      	movs	r2, #168	; 0xa8
 8010476:	5899      	ldr	r1, [r3, r2]
 8010478:	4a13      	ldr	r2, [pc, #76]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 801047a:	23f4      	movs	r3, #244	; 0xf4
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010480:	4b11      	ldr	r3, [pc, #68]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 8010482:	4a13      	ldr	r2, [pc, #76]	; (80104d0 <OnRxWindow2TimerEvent+0x84>)
 8010484:	589b      	ldr	r3, [r3, r2]
 8010486:	22b9      	movs	r2, #185	; 0xb9
 8010488:	5c99      	ldrb	r1, [r3, r2]
 801048a:	4a0f      	ldr	r2, [pc, #60]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 801048c:	23f7      	movs	r3, #247	; 0xf7
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010492:	4b0d      	ldr	r3, [pc, #52]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 8010494:	4a0e      	ldr	r2, [pc, #56]	; (80104d0 <OnRxWindow2TimerEvent+0x84>)
 8010496:	589b      	ldr	r3, [r3, r2]
 8010498:	22ca      	movs	r2, #202	; 0xca
 801049a:	5c99      	ldrb	r1, [r3, r2]
 801049c:	4b0a      	ldr	r3, [pc, #40]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 801049e:	4a0d      	ldr	r2, [pc, #52]	; (80104d4 <OnRxWindow2TimerEvent+0x88>)
 80104a0:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80104a2:	4b09      	ldr	r3, [pc, #36]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 80104a4:	4a0c      	ldr	r2, [pc, #48]	; (80104d8 <OnRxWindow2TimerEvent+0x8c>)
 80104a6:	2100      	movs	r1, #0
 80104a8:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80104aa:	4b07      	ldr	r3, [pc, #28]	; (80104c8 <OnRxWindow2TimerEvent+0x7c>)
 80104ac:	4a0b      	ldr	r2, [pc, #44]	; (80104dc <OnRxWindow2TimerEvent+0x90>)
 80104ae:	2101      	movs	r1, #1
 80104b0:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80104b2:	4a0b      	ldr	r2, [pc, #44]	; (80104e0 <OnRxWindow2TimerEvent+0x94>)
 80104b4:	4b0b      	ldr	r3, [pc, #44]	; (80104e4 <OnRxWindow2TimerEvent+0x98>)
 80104b6:	0011      	movs	r1, r2
 80104b8:	0018      	movs	r0, r3
 80104ba:	f001 fd4d 	bl	8011f58 <RxWindowSetup>
 80104be:	e000      	b.n	80104c2 <OnRxWindow2TimerEvent+0x76>
        return;
 80104c0:	46c0      	nop			; (mov r8, r8)
}
 80104c2:	46bd      	mov	sp, r7
 80104c4:	b002      	add	sp, #8
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	2000054c 	.word	0x2000054c
 80104cc:	00000415 	.word	0x00000415
 80104d0:	00000484 	.word	0x00000484
 80104d4:	000003dd 	.word	0x000003dd
 80104d8:	000003de 	.word	0x000003de
 80104dc:	000003df 	.word	0x000003df
 80104e0:	20000918 	.word	0x20000918
 80104e4:	200008e4 	.word	0x200008e4

080104e8 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80104f0:	4b18      	ldr	r3, [pc, #96]	; (8010554 <OnAckTimeoutTimerEvent+0x6c>)
 80104f2:	0018      	movs	r0, r3
 80104f4:	f00c fad2 	bl	801ca9c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80104f8:	4b17      	ldr	r3, [pc, #92]	; (8010558 <OnAckTimeoutTimerEvent+0x70>)
 80104fa:	4a18      	ldr	r2, [pc, #96]	; (801055c <OnAckTimeoutTimerEvent+0x74>)
 80104fc:	5c9b      	ldrb	r3, [r3, r2]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d003      	beq.n	801050a <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 8010502:	4b15      	ldr	r3, [pc, #84]	; (8010558 <OnAckTimeoutTimerEvent+0x70>)
 8010504:	4a16      	ldr	r2, [pc, #88]	; (8010560 <OnAckTimeoutTimerEvent+0x78>)
 8010506:	2101      	movs	r1, #1
 8010508:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 801050a:	4b13      	ldr	r3, [pc, #76]	; (8010558 <OnAckTimeoutTimerEvent+0x70>)
 801050c:	4a15      	ldr	r2, [pc, #84]	; (8010564 <OnAckTimeoutTimerEvent+0x7c>)
 801050e:	589b      	ldr	r3, [r3, r2]
 8010510:	227c      	movs	r2, #124	; 0x7c
 8010512:	5c9b      	ldrb	r3, [r3, r2]
 8010514:	2b02      	cmp	r3, #2
 8010516:	d105      	bne.n	8010524 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010518:	4b0f      	ldr	r3, [pc, #60]	; (8010558 <OnAckTimeoutTimerEvent+0x70>)
 801051a:	4a13      	ldr	r2, [pc, #76]	; (8010568 <OnAckTimeoutTimerEvent+0x80>)
 801051c:	5c99      	ldrb	r1, [r3, r2]
 801051e:	2020      	movs	r0, #32
 8010520:	4301      	orrs	r1, r0
 8010522:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010524:	4a0c      	ldr	r2, [pc, #48]	; (8010558 <OnAckTimeoutTimerEvent+0x70>)
 8010526:	23d2      	movs	r3, #210	; 0xd2
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	58d3      	ldr	r3, [r2, r3]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00c      	beq.n	801054a <OnAckTimeoutTimerEvent+0x62>
 8010530:	4a09      	ldr	r2, [pc, #36]	; (8010558 <OnAckTimeoutTimerEvent+0x70>)
 8010532:	23d2      	movs	r3, #210	; 0xd2
 8010534:	009b      	lsls	r3, r3, #2
 8010536:	58d3      	ldr	r3, [r2, r3]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d005      	beq.n	801054a <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801053e:	4a06      	ldr	r2, [pc, #24]	; (8010558 <OnAckTimeoutTimerEvent+0x70>)
 8010540:	23d2      	movs	r3, #210	; 0xd2
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	58d3      	ldr	r3, [r2, r3]
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	4798      	blx	r3
    }
}
 801054a:	46c0      	nop			; (mov r8, r8)
 801054c:	46bd      	mov	sp, r7
 801054e:	b002      	add	sp, #8
 8010550:	bd80      	pop	{r7, pc}
 8010552:	46c0      	nop			; (mov r8, r8)
 8010554:	20000944 	.word	0x20000944
 8010558:	2000054c 	.word	0x2000054c
 801055c:	00000414 	.word	0x00000414
 8010560:	00000413 	.word	0x00000413
 8010564:	00000484 	.word	0x00000484
 8010568:	00000481 	.word	0x00000481

0801056c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 801056c:	b590      	push	{r4, r7, lr}
 801056e:	b085      	sub	sp, #20
 8010570:	af00      	add	r7, sp, #0
 8010572:	60ba      	str	r2, [r7, #8]
 8010574:	607b      	str	r3, [r7, #4]
 8010576:	230f      	movs	r3, #15
 8010578:	18fb      	adds	r3, r7, r3
 801057a:	1c02      	adds	r2, r0, #0
 801057c:	701a      	strb	r2, [r3, #0]
 801057e:	230e      	movs	r3, #14
 8010580:	18fb      	adds	r3, r7, r3
 8010582:	1c0a      	adds	r2, r1, #0
 8010584:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d005      	beq.n	8010598 <GetFCntDown+0x2c>
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	2b00      	cmp	r3, #0
 8010590:	d002      	beq.n	8010598 <GetFCntDown+0x2c>
 8010592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010594:	2b00      	cmp	r3, #0
 8010596:	d101      	bne.n	801059c <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010598:	230a      	movs	r3, #10
 801059a:	e033      	b.n	8010604 <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 801059c:	230f      	movs	r3, #15
 801059e:	18fb      	adds	r3, r7, r3
 80105a0:	781b      	ldrb	r3, [r3, #0]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d01a      	beq.n	80105dc <GetFCntDown+0x70>
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	d11c      	bne.n	80105e4 <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80105aa:	1d3b      	adds	r3, r7, #4
 80105ac:	789b      	ldrb	r3, [r3, #2]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d110      	bne.n	80105d4 <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80105b2:	220e      	movs	r2, #14
 80105b4:	18bb      	adds	r3, r7, r2
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d003      	beq.n	80105c4 <GetFCntDown+0x58>
 80105bc:	18bb      	adds	r3, r7, r2
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2b03      	cmp	r3, #3
 80105c2:	d103      	bne.n	80105cc <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	2202      	movs	r2, #2
 80105c8:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80105ca:	e00d      	b.n	80105e8 <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	2201      	movs	r2, #1
 80105d0:	701a      	strb	r2, [r3, #0]
            break;
 80105d2:	e009      	b.n	80105e8 <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 80105d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d6:	2203      	movs	r2, #3
 80105d8:	701a      	strb	r2, [r3, #0]
            break;
 80105da:	e005      	b.n	80105e8 <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	2204      	movs	r2, #4
 80105e0:	701a      	strb	r2, [r3, #0]
            break;
 80105e2:	e001      	b.n	80105e8 <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80105e4:	2305      	movs	r3, #5
 80105e6:	e00d      	b.n	8010604 <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	7818      	ldrb	r0, [r3, #0]
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	89db      	ldrh	r3, [r3, #14]
 80105f0:	001c      	movs	r4, r3
 80105f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105f4:	2320      	movs	r3, #32
 80105f6:	18fb      	adds	r3, r7, r3
 80105f8:	8819      	ldrh	r1, [r3, #0]
 80105fa:	0013      	movs	r3, r2
 80105fc:	0022      	movs	r2, r4
 80105fe:	f005 faa1 	bl	8015b44 <LoRaMacCryptoGetFCntDown>
 8010602:	0003      	movs	r3, r0
}
 8010604:	0018      	movs	r0, r3
 8010606:	46bd      	mov	sp, r7
 8010608:	b005      	add	sp, #20
 801060a:	bd90      	pop	{r4, r7, pc}

0801060c <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 801060c:	b5b0      	push	{r4, r5, r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	0002      	movs	r2, r0
 8010614:	1dfb      	adds	r3, r7, #7
 8010616:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010618:	230f      	movs	r3, #15
 801061a:	18fb      	adds	r3, r7, r3
 801061c:	2203      	movs	r2, #3
 801061e:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 8010620:	4b82      	ldr	r3, [pc, #520]	; (801082c <SwitchClass+0x220>)
 8010622:	4a83      	ldr	r2, [pc, #524]	; (8010830 <SwitchClass+0x224>)
 8010624:	589b      	ldr	r3, [r3, r2]
 8010626:	227c      	movs	r2, #124	; 0x7c
 8010628:	5c9b      	ldrb	r3, [r3, r2]
 801062a:	2b02      	cmp	r3, #2
 801062c:	d100      	bne.n	8010630 <SwitchClass+0x24>
 801062e:	e0de      	b.n	80107ee <SwitchClass+0x1e2>
 8010630:	dd00      	ble.n	8010634 <SwitchClass+0x28>
 8010632:	e0f4      	b.n	801081e <SwitchClass+0x212>
 8010634:	2b00      	cmp	r3, #0
 8010636:	d003      	beq.n	8010640 <SwitchClass+0x34>
 8010638:	2b01      	cmp	r3, #1
 801063a:	d100      	bne.n	801063e <SwitchClass+0x32>
 801063c:	e0c2      	b.n	80107c4 <SwitchClass+0x1b8>
 801063e:	e0ee      	b.n	801081e <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010640:	1dfb      	adds	r3, r7, #7
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d10b      	bne.n	8010660 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8010648:	4b78      	ldr	r3, [pc, #480]	; (801082c <SwitchClass+0x220>)
 801064a:	4a79      	ldr	r2, [pc, #484]	; (8010830 <SwitchClass+0x224>)
 801064c:	589a      	ldr	r2, [r3, r2]
 801064e:	4b77      	ldr	r3, [pc, #476]	; (801082c <SwitchClass+0x220>)
 8010650:	4977      	ldr	r1, [pc, #476]	; (8010830 <SwitchClass+0x224>)
 8010652:	585b      	ldr	r3, [r3, r1]
 8010654:	20b0      	movs	r0, #176	; 0xb0
 8010656:	21a8      	movs	r1, #168	; 0xa8
 8010658:	181b      	adds	r3, r3, r0
 801065a:	1852      	adds	r2, r2, r1
 801065c:	ca03      	ldmia	r2!, {r0, r1}
 801065e:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8010660:	1dfb      	adds	r3, r7, #7
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	2b01      	cmp	r3, #1
 8010666:	d113      	bne.n	8010690 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010668:	250f      	movs	r5, #15
 801066a:	197c      	adds	r4, r7, r5
 801066c:	1dfb      	adds	r3, r7, #7
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	0018      	movs	r0, r3
 8010672:	f004 f86d 	bl	8014750 <LoRaMacClassBSwitchClass>
 8010676:	0003      	movs	r3, r0
 8010678:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 801067a:	197b      	adds	r3, r7, r5
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d106      	bne.n	8010690 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010682:	4b6a      	ldr	r3, [pc, #424]	; (801082c <SwitchClass+0x220>)
 8010684:	4a6a      	ldr	r2, [pc, #424]	; (8010830 <SwitchClass+0x224>)
 8010686:	589b      	ldr	r3, [r3, r2]
 8010688:	1dfa      	adds	r2, r7, #7
 801068a:	217c      	movs	r1, #124	; 0x7c
 801068c:	7812      	ldrb	r2, [r2, #0]
 801068e:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 8010690:	1dfb      	adds	r3, r7, #7
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	2b02      	cmp	r3, #2
 8010696:	d000      	beq.n	801069a <SwitchClass+0x8e>
 8010698:	e0bc      	b.n	8010814 <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 801069a:	4b64      	ldr	r3, [pc, #400]	; (801082c <SwitchClass+0x220>)
 801069c:	4a64      	ldr	r2, [pc, #400]	; (8010830 <SwitchClass+0x224>)
 801069e:	589b      	ldr	r3, [r3, r2]
 80106a0:	1dfa      	adds	r2, r7, #7
 80106a2:	217c      	movs	r1, #124	; 0x7c
 80106a4:	7812      	ldrb	r2, [r2, #0]
 80106a6:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80106a8:	4860      	ldr	r0, [pc, #384]	; (801082c <SwitchClass+0x220>)
 80106aa:	23f8      	movs	r3, #248	; 0xf8
 80106ac:	009b      	lsls	r3, r3, #2
 80106ae:	495f      	ldr	r1, [pc, #380]	; (801082c <SwitchClass+0x220>)
 80106b0:	22f3      	movs	r2, #243	; 0xf3
 80106b2:	0092      	lsls	r2, r2, #2
 80106b4:	18c3      	adds	r3, r0, r3
 80106b6:	188a      	adds	r2, r1, r2
 80106b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80106ba:	c313      	stmia	r3!, {r0, r1, r4}
 80106bc:	ca03      	ldmia	r2!, {r0, r1}
 80106be:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80106c0:	4b5a      	ldr	r3, [pc, #360]	; (801082c <SwitchClass+0x220>)
 80106c2:	4a5c      	ldr	r2, [pc, #368]	; (8010834 <SwitchClass+0x228>)
 80106c4:	2102      	movs	r1, #2
 80106c6:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80106c8:	230e      	movs	r3, #14
 80106ca:	18fb      	adds	r3, r7, r3
 80106cc:	2200      	movs	r2, #0
 80106ce:	701a      	strb	r2, [r3, #0]
 80106d0:	e064      	b.n	801079c <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80106d2:	4b56      	ldr	r3, [pc, #344]	; (801082c <SwitchClass+0x220>)
 80106d4:	4a56      	ldr	r2, [pc, #344]	; (8010830 <SwitchClass+0x224>)
 80106d6:	589a      	ldr	r2, [r3, r2]
 80106d8:	240e      	movs	r4, #14
 80106da:	193b      	adds	r3, r7, r4
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	b25b      	sxtb	r3, r3
 80106e0:	2152      	movs	r1, #82	; 0x52
 80106e2:	202c      	movs	r0, #44	; 0x2c
 80106e4:	4343      	muls	r3, r0
 80106e6:	18d3      	adds	r3, r2, r3
 80106e8:	185b      	adds	r3, r3, r1
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d04c      	beq.n	801078a <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80106f0:	4b4e      	ldr	r3, [pc, #312]	; (801082c <SwitchClass+0x220>)
 80106f2:	4a4f      	ldr	r2, [pc, #316]	; (8010830 <SwitchClass+0x224>)
 80106f4:	5899      	ldr	r1, [r3, r2]
 80106f6:	193b      	adds	r3, r7, r4
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	b25b      	sxtb	r3, r3
 80106fc:	4a4b      	ldr	r2, [pc, #300]	; (801082c <SwitchClass+0x220>)
 80106fe:	484c      	ldr	r0, [pc, #304]	; (8010830 <SwitchClass+0x224>)
 8010700:	5812      	ldr	r2, [r2, r0]
 8010702:	202c      	movs	r0, #44	; 0x2c
 8010704:	4343      	muls	r3, r0
 8010706:	18cb      	adds	r3, r1, r3
 8010708:	3368      	adds	r3, #104	; 0x68
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	21b0      	movs	r1, #176	; 0xb0
 801070e:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010710:	4b46      	ldr	r3, [pc, #280]	; (801082c <SwitchClass+0x220>)
 8010712:	4a47      	ldr	r2, [pc, #284]	; (8010830 <SwitchClass+0x224>)
 8010714:	589a      	ldr	r2, [r3, r2]
 8010716:	193b      	adds	r3, r7, r4
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	b25b      	sxtb	r3, r3
 801071c:	216c      	movs	r1, #108	; 0x6c
 801071e:	202c      	movs	r0, #44	; 0x2c
 8010720:	4343      	muls	r3, r0
 8010722:	18d3      	adds	r3, r2, r3
 8010724:	185b      	adds	r3, r3, r1
 8010726:	2100      	movs	r1, #0
 8010728:	5659      	ldrsb	r1, [r3, r1]
 801072a:	4b40      	ldr	r3, [pc, #256]	; (801082c <SwitchClass+0x220>)
 801072c:	4a40      	ldr	r2, [pc, #256]	; (8010830 <SwitchClass+0x224>)
 801072e:	589b      	ldr	r3, [r3, r2]
 8010730:	b2c9      	uxtb	r1, r1
 8010732:	22b4      	movs	r2, #180	; 0xb4
 8010734:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010736:	4b3d      	ldr	r3, [pc, #244]	; (801082c <SwitchClass+0x220>)
 8010738:	4a3f      	ldr	r2, [pc, #252]	; (8010838 <SwitchClass+0x22c>)
 801073a:	5c99      	ldrb	r1, [r3, r2]
 801073c:	4a3b      	ldr	r2, [pc, #236]	; (801082c <SwitchClass+0x220>)
 801073e:	23f8      	movs	r3, #248	; 0xf8
 8010740:	009b      	lsls	r3, r3, #2
 8010742:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8010744:	4b39      	ldr	r3, [pc, #228]	; (801082c <SwitchClass+0x220>)
 8010746:	4a3a      	ldr	r2, [pc, #232]	; (8010830 <SwitchClass+0x224>)
 8010748:	589b      	ldr	r3, [r3, r2]
 801074a:	22b0      	movs	r2, #176	; 0xb0
 801074c:	5899      	ldr	r1, [r3, r2]
 801074e:	4a37      	ldr	r2, [pc, #220]	; (801082c <SwitchClass+0x220>)
 8010750:	23f9      	movs	r3, #249	; 0xf9
 8010752:	009b      	lsls	r3, r3, #2
 8010754:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010756:	4b35      	ldr	r3, [pc, #212]	; (801082c <SwitchClass+0x220>)
 8010758:	4a35      	ldr	r2, [pc, #212]	; (8010830 <SwitchClass+0x224>)
 801075a:	589b      	ldr	r3, [r3, r2]
 801075c:	22b9      	movs	r2, #185	; 0xb9
 801075e:	5c99      	ldrb	r1, [r3, r2]
 8010760:	4a32      	ldr	r2, [pc, #200]	; (801082c <SwitchClass+0x220>)
 8010762:	23fc      	movs	r3, #252	; 0xfc
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010768:	4b30      	ldr	r3, [pc, #192]	; (801082c <SwitchClass+0x220>)
 801076a:	4a31      	ldr	r2, [pc, #196]	; (8010830 <SwitchClass+0x224>)
 801076c:	589b      	ldr	r3, [r3, r2]
 801076e:	22ca      	movs	r2, #202	; 0xca
 8010770:	5c99      	ldrb	r1, [r3, r2]
 8010772:	4b2e      	ldr	r3, [pc, #184]	; (801082c <SwitchClass+0x220>)
 8010774:	4a31      	ldr	r2, [pc, #196]	; (801083c <SwitchClass+0x230>)
 8010776:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010778:	4b2c      	ldr	r3, [pc, #176]	; (801082c <SwitchClass+0x220>)
 801077a:	4a2e      	ldr	r2, [pc, #184]	; (8010834 <SwitchClass+0x228>)
 801077c:	2103      	movs	r1, #3
 801077e:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010780:	4b2a      	ldr	r3, [pc, #168]	; (801082c <SwitchClass+0x220>)
 8010782:	4a2f      	ldr	r2, [pc, #188]	; (8010840 <SwitchClass+0x234>)
 8010784:	2101      	movs	r1, #1
 8010786:	5499      	strb	r1, [r3, r2]
                        break;
 8010788:	e00e      	b.n	80107a8 <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801078a:	210e      	movs	r1, #14
 801078c:	187b      	adds	r3, r7, r1
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	b25b      	sxtb	r3, r3
 8010792:	b2db      	uxtb	r3, r3
 8010794:	3301      	adds	r3, #1
 8010796:	b2da      	uxtb	r2, r3
 8010798:	187b      	adds	r3, r7, r1
 801079a:	701a      	strb	r2, [r3, #0]
 801079c:	230e      	movs	r3, #14
 801079e:	18fb      	adds	r3, r7, r3
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	b25b      	sxtb	r3, r3
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	dd94      	ble.n	80106d2 <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80107a8:	4b20      	ldr	r3, [pc, #128]	; (801082c <SwitchClass+0x220>)
 80107aa:	4a26      	ldr	r2, [pc, #152]	; (8010844 <SwitchClass+0x238>)
 80107ac:	2100      	movs	r1, #0
 80107ae:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80107b0:	4b25      	ldr	r3, [pc, #148]	; (8010848 <SwitchClass+0x23c>)
 80107b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80107b6:	f001 fc01 	bl	8011fbc <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 80107ba:	230f      	movs	r3, #15
 80107bc:	18fb      	adds	r3, r7, r3
 80107be:	2200      	movs	r2, #0
 80107c0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80107c2:	e027      	b.n	8010814 <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80107c4:	250f      	movs	r5, #15
 80107c6:	197c      	adds	r4, r7, r5
 80107c8:	1dfb      	adds	r3, r7, #7
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	0018      	movs	r0, r3
 80107ce:	f003 ffbf 	bl	8014750 <LoRaMacClassBSwitchClass>
 80107d2:	0003      	movs	r3, r0
 80107d4:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 80107d6:	197b      	adds	r3, r7, r5
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d11c      	bne.n	8010818 <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80107de:	4b13      	ldr	r3, [pc, #76]	; (801082c <SwitchClass+0x220>)
 80107e0:	4a13      	ldr	r2, [pc, #76]	; (8010830 <SwitchClass+0x224>)
 80107e2:	589b      	ldr	r3, [r3, r2]
 80107e4:	1dfa      	adds	r2, r7, #7
 80107e6:	217c      	movs	r1, #124	; 0x7c
 80107e8:	7812      	ldrb	r2, [r2, #0]
 80107ea:	545a      	strb	r2, [r3, r1]
            }
            break;
 80107ec:	e014      	b.n	8010818 <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80107ee:	1dfb      	adds	r3, r7, #7
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d112      	bne.n	801081c <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80107f6:	4b0d      	ldr	r3, [pc, #52]	; (801082c <SwitchClass+0x220>)
 80107f8:	4a0d      	ldr	r2, [pc, #52]	; (8010830 <SwitchClass+0x224>)
 80107fa:	589b      	ldr	r3, [r3, r2]
 80107fc:	1dfa      	adds	r2, r7, #7
 80107fe:	217c      	movs	r1, #124	; 0x7c
 8010800:	7812      	ldrb	r2, [r2, #0]
 8010802:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010804:	4b10      	ldr	r3, [pc, #64]	; (8010848 <SwitchClass+0x23c>)
 8010806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010808:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 801080a:	230f      	movs	r3, #15
 801080c:	18fb      	adds	r3, r7, r3
 801080e:	2200      	movs	r2, #0
 8010810:	701a      	strb	r2, [r3, #0]
            }
            break;
 8010812:	e003      	b.n	801081c <SwitchClass+0x210>
            break;
 8010814:	46c0      	nop			; (mov r8, r8)
 8010816:	e002      	b.n	801081e <SwitchClass+0x212>
            break;
 8010818:	46c0      	nop			; (mov r8, r8)
 801081a:	e000      	b.n	801081e <SwitchClass+0x212>
            break;
 801081c:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 801081e:	230f      	movs	r3, #15
 8010820:	18fb      	adds	r3, r7, r3
 8010822:	781b      	ldrb	r3, [r3, #0]
}
 8010824:	0018      	movs	r0, r3
 8010826:	46bd      	mov	sp, r7
 8010828:	b004      	add	sp, #16
 801082a:	bdb0      	pop	{r4, r5, r7, pc}
 801082c:	2000054c 	.word	0x2000054c
 8010830:	00000484 	.word	0x00000484
 8010834:	000003f3 	.word	0x000003f3
 8010838:	00000415 	.word	0x00000415
 801083c:	000003f1 	.word	0x000003f1
 8010840:	000003f2 	.word	0x000003f2
 8010844:	00000414 	.word	0x00000414
 8010848:	0801f0bc 	.word	0x0801f0bc

0801084c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b086      	sub	sp, #24
 8010850:	af00      	add	r7, sp, #0
 8010852:	0002      	movs	r2, r0
 8010854:	1dfb      	adds	r3, r7, #7
 8010856:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010858:	4b17      	ldr	r3, [pc, #92]	; (80108b8 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 801085a:	4a18      	ldr	r2, [pc, #96]	; (80108bc <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 801085c:	589b      	ldr	r3, [r3, r2]
 801085e:	22b8      	movs	r2, #184	; 0xb8
 8010860:	5c9a      	ldrb	r2, [r3, r2]
 8010862:	2110      	movs	r1, #16
 8010864:	187b      	adds	r3, r7, r1
 8010866:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 8010868:	187b      	adds	r3, r7, r1
 801086a:	1dfa      	adds	r2, r7, #7
 801086c:	7812      	ldrb	r2, [r2, #0]
 801086e:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010870:	187b      	adds	r3, r7, r1
 8010872:	220d      	movs	r2, #13
 8010874:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8010876:	4b10      	ldr	r3, [pc, #64]	; (80108b8 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010878:	4a10      	ldr	r2, [pc, #64]	; (80108bc <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 801087a:	589b      	ldr	r3, [r3, r2]
 801087c:	22ca      	movs	r2, #202	; 0xca
 801087e:	5c9b      	ldrb	r3, [r3, r2]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d002      	beq.n	801088a <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010884:	187b      	adds	r3, r7, r1
 8010886:	220e      	movs	r2, #14
 8010888:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801088a:	4b0b      	ldr	r3, [pc, #44]	; (80108b8 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 801088c:	4a0b      	ldr	r2, [pc, #44]	; (80108bc <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 801088e:	589b      	ldr	r3, [r3, r2]
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	2210      	movs	r2, #16
 8010894:	18ba      	adds	r2, r7, r2
 8010896:	0011      	movs	r1, r2
 8010898:	0018      	movs	r0, r3
 801089a:	f006 f8c8 	bl	8016a2e <RegionGetPhyParam>
 801089e:	0003      	movs	r3, r0
 80108a0:	001a      	movs	r2, r3
 80108a2:	210c      	movs	r1, #12
 80108a4:	187b      	adds	r3, r7, r1
 80108a6:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 80108a8:	187b      	adds	r3, r7, r1
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	b2db      	uxtb	r3, r3
}
 80108ae:	0018      	movs	r0, r3
 80108b0:	46bd      	mov	sp, r7
 80108b2:	b006      	add	sp, #24
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	46c0      	nop			; (mov r8, r8)
 80108b8:	2000054c 	.word	0x2000054c
 80108bc:	00000484 	.word	0x00000484

080108c0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80108c0:	b5b0      	push	{r4, r5, r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	0004      	movs	r4, r0
 80108c8:	0008      	movs	r0, r1
 80108ca:	0011      	movs	r1, r2
 80108cc:	1dfb      	adds	r3, r7, #7
 80108ce:	1c22      	adds	r2, r4, #0
 80108d0:	701a      	strb	r2, [r3, #0]
 80108d2:	1dbb      	adds	r3, r7, #6
 80108d4:	1c02      	adds	r2, r0, #0
 80108d6:	701a      	strb	r2, [r3, #0]
 80108d8:	1d7b      	adds	r3, r7, #5
 80108da:	1c0a      	adds	r2, r1, #0
 80108dc:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 80108de:	250e      	movs	r5, #14
 80108e0:	197b      	adds	r3, r7, r5
 80108e2:	2200      	movs	r2, #0
 80108e4:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 80108e6:	240c      	movs	r4, #12
 80108e8:	193b      	adds	r3, r7, r4
 80108ea:	2200      	movs	r2, #0
 80108ec:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80108ee:	1dbb      	adds	r3, r7, #6
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	b25b      	sxtb	r3, r3
 80108f4:	0018      	movs	r0, r3
 80108f6:	f7ff ffa9 	bl	801084c <GetMaxAppPayloadWithoutFOptsLength>
 80108fa:	0003      	movs	r3, r0
 80108fc:	001a      	movs	r2, r3
 80108fe:	0028      	movs	r0, r5
 8010900:	183b      	adds	r3, r7, r0
 8010902:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010904:	1dfb      	adds	r3, r7, #7
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	b299      	uxth	r1, r3
 801090a:	1d7b      	adds	r3, r7, #5
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	b29a      	uxth	r2, r3
 8010910:	193b      	adds	r3, r7, r4
 8010912:	188a      	adds	r2, r1, r2
 8010914:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010916:	193a      	adds	r2, r7, r4
 8010918:	183b      	adds	r3, r7, r0
 801091a:	8812      	ldrh	r2, [r2, #0]
 801091c:	881b      	ldrh	r3, [r3, #0]
 801091e:	429a      	cmp	r2, r3
 8010920:	d805      	bhi.n	801092e <ValidatePayloadLength+0x6e>
 8010922:	193b      	adds	r3, r7, r4
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	2bff      	cmp	r3, #255	; 0xff
 8010928:	d801      	bhi.n	801092e <ValidatePayloadLength+0x6e>
    {
        return true;
 801092a:	2301      	movs	r3, #1
 801092c:	e000      	b.n	8010930 <ValidatePayloadLength+0x70>
    }
    return false;
 801092e:	2300      	movs	r3, #0
}
 8010930:	0018      	movs	r0, r3
 8010932:	46bd      	mov	sp, r7
 8010934:	b004      	add	sp, #16
 8010936:	bdb0      	pop	{r4, r5, r7, pc}

08010938 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 801093c:	4b04      	ldr	r3, [pc, #16]	; (8010950 <SetMlmeScheduleUplinkIndication+0x18>)
 801093e:	4a05      	ldr	r2, [pc, #20]	; (8010954 <SetMlmeScheduleUplinkIndication+0x1c>)
 8010940:	5c99      	ldrb	r1, [r3, r2]
 8010942:	2010      	movs	r0, #16
 8010944:	4301      	orrs	r1, r0
 8010946:	5499      	strb	r1, [r3, r2]
}
 8010948:	46c0      	nop			; (mov r8, r8)
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	46c0      	nop			; (mov r8, r8)
 8010950:	2000054c 	.word	0x2000054c
 8010954:	00000481 	.word	0x00000481

08010958 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801095a:	b0a5      	sub	sp, #148	; 0x94
 801095c:	af02      	add	r7, sp, #8
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	000c      	movs	r4, r1
 8010962:	0010      	movs	r0, r2
 8010964:	0019      	movs	r1, r3
 8010966:	1cfb      	adds	r3, r7, #3
 8010968:	1c22      	adds	r2, r4, #0
 801096a:	701a      	strb	r2, [r3, #0]
 801096c:	1cbb      	adds	r3, r7, #2
 801096e:	1c02      	adds	r2, r0, #0
 8010970:	701a      	strb	r2, [r3, #0]
 8010972:	1c7b      	adds	r3, r7, #1
 8010974:	1c0a      	adds	r2, r1, #0
 8010976:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 8010978:	236b      	movs	r3, #107	; 0x6b
 801097a:	18fb      	adds	r3, r7, r3
 801097c:	2200      	movs	r2, #0
 801097e:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8010980:	2387      	movs	r3, #135	; 0x87
 8010982:	18fb      	adds	r3, r7, r3
 8010984:	2200      	movs	r2, #0
 8010986:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010988:	2368      	movs	r3, #104	; 0x68
 801098a:	18fb      	adds	r3, r7, r3
 801098c:	2200      	movs	r2, #0
 801098e:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 8010990:	f000 fd58 	bl	8011444 <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010994:	1cfb      	adds	r3, r7, #3
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	18d3      	adds	r3, r2, r3
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	0018      	movs	r0, r3
 80109a0:	f004 fa06 	bl	8014db0 <LoRaMacCommandsGetCmdSize>
 80109a4:	0003      	movs	r3, r0
 80109a6:	001a      	movs	r2, r3
 80109a8:	1cfb      	adds	r3, r7, #3
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	18d2      	adds	r2, r2, r3
 80109ae:	1cbb      	adds	r3, r7, #2
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	dd01      	ble.n	80109ba <ProcessMacCommands+0x62>
 80109b6:	f000 fd4e 	bl	8011456 <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80109ba:	1cfb      	adds	r3, r7, #3
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	1cfa      	adds	r2, r7, #3
 80109c0:	1c59      	adds	r1, r3, #1
 80109c2:	7011      	strb	r1, [r2, #0]
 80109c4:	001a      	movs	r2, r3
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	189b      	adds	r3, r3, r2
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	2b13      	cmp	r3, #19
 80109ce:	d901      	bls.n	80109d4 <ProcessMacCommands+0x7c>
 80109d0:	f000 fd43 	bl	801145a <ProcessMacCommands+0xb02>
 80109d4:	009a      	lsls	r2, r3, #2
 80109d6:	4bee      	ldr	r3, [pc, #952]	; (8010d90 <ProcessMacCommands+0x438>)
 80109d8:	18d3      	adds	r3, r2, r3
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80109de:	2004      	movs	r0, #4
 80109e0:	f004 fc08 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 80109e4:	1e03      	subs	r3, r0, #0
 80109e6:	d101      	bne.n	80109ec <ProcessMacCommands+0x94>
 80109e8:	f000 fd2c 	bl	8011444 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80109ec:	2104      	movs	r1, #4
 80109ee:	2000      	movs	r0, #0
 80109f0:	f004 fb64 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80109f4:	1cfb      	adds	r3, r7, #3
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	1cfa      	adds	r2, r7, #3
 80109fa:	1c59      	adds	r1, r3, #1
 80109fc:	7011      	strb	r1, [r2, #0]
 80109fe:	001a      	movs	r2, r3
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	189b      	adds	r3, r3, r2
 8010a04:	7819      	ldrb	r1, [r3, #0]
 8010a06:	4ae3      	ldr	r2, [pc, #908]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010a08:	238b      	movs	r3, #139	; 0x8b
 8010a0a:	00db      	lsls	r3, r3, #3
 8010a0c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010a0e:	1cfb      	adds	r3, r7, #3
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	1cfa      	adds	r2, r7, #3
 8010a14:	1c59      	adds	r1, r3, #1
 8010a16:	7011      	strb	r1, [r2, #0]
 8010a18:	001a      	movs	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	189b      	adds	r3, r3, r2
 8010a1e:	7819      	ldrb	r1, [r3, #0]
 8010a20:	4bdc      	ldr	r3, [pc, #880]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010a22:	4add      	ldr	r2, [pc, #884]	; (8010d98 <ProcessMacCommands+0x440>)
 8010a24:	5499      	strb	r1, [r3, r2]
                }
                break;
 8010a26:	f000 fd0d 	bl	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010a2a:	2657      	movs	r6, #87	; 0x57
 8010a2c:	19bb      	adds	r3, r7, r6
 8010a2e:	2200      	movs	r2, #0
 8010a30:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 8010a32:	2456      	movs	r4, #86	; 0x56
 8010a34:	193b      	adds	r3, r7, r4
 8010a36:	2200      	movs	r2, #0
 8010a38:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 8010a3a:	2555      	movs	r5, #85	; 0x55
 8010a3c:	197b      	adds	r3, r7, r5
 8010a3e:	2200      	movs	r2, #0
 8010a40:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8010a42:	2354      	movs	r3, #84	; 0x54
 8010a44:	18fb      	adds	r3, r7, r3
 8010a46:	2200      	movs	r2, #0
 8010a48:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 8010a4a:	2187      	movs	r1, #135	; 0x87
 8010a4c:	187b      	adds	r3, r7, r1
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	2201      	movs	r2, #1
 8010a52:	4053      	eors	r3, r2
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d100      	bne.n	8010a5c <ProcessMacCommands+0x104>
 8010a5a:	e09d      	b.n	8010b98 <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 8010a5c:	187b      	adds	r3, r7, r1
 8010a5e:	2201      	movs	r2, #1
 8010a60:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010a62:	1cfb      	adds	r3, r7, #3
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	18d2      	adds	r2, r2, r3
 8010a6c:	2158      	movs	r1, #88	; 0x58
 8010a6e:	187b      	adds	r3, r7, r1
 8010a70:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010a72:	1cba      	adds	r2, r7, #2
 8010a74:	1cfb      	adds	r3, r7, #3
 8010a76:	7812      	ldrb	r2, [r2, #0]
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	b2db      	uxtb	r3, r3
 8010a7e:	3301      	adds	r3, #1
 8010a80:	b2da      	uxtb	r2, r3
 8010a82:	000d      	movs	r5, r1
 8010a84:	197b      	adds	r3, r7, r5
 8010a86:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8010a88:	4bc2      	ldr	r3, [pc, #776]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010a8a:	4ac4      	ldr	r2, [pc, #784]	; (8010d9c <ProcessMacCommands+0x444>)
 8010a8c:	589b      	ldr	r3, [r3, r2]
 8010a8e:	227e      	movs	r2, #126	; 0x7e
 8010a90:	5c9a      	ldrb	r2, [r3, r2]
 8010a92:	197b      	adds	r3, r7, r5
 8010a94:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010a96:	4bbf      	ldr	r3, [pc, #764]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010a98:	4ac0      	ldr	r2, [pc, #768]	; (8010d9c <ProcessMacCommands+0x444>)
 8010a9a:	589b      	ldr	r3, [r3, r2]
 8010a9c:	22b8      	movs	r2, #184	; 0xb8
 8010a9e:	5c9a      	ldrb	r2, [r3, r2]
 8010aa0:	197b      	adds	r3, r7, r5
 8010aa2:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010aa4:	4bbb      	ldr	r3, [pc, #748]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010aa6:	4abd      	ldr	r2, [pc, #756]	; (8010d9c <ProcessMacCommands+0x444>)
 8010aa8:	589b      	ldr	r3, [r3, r2]
 8010aaa:	2285      	movs	r2, #133	; 0x85
 8010aac:	569a      	ldrsb	r2, [r3, r2]
 8010aae:	197b      	adds	r3, r7, r5
 8010ab0:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010ab2:	4bb8      	ldr	r3, [pc, #736]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010ab4:	4ab9      	ldr	r2, [pc, #740]	; (8010d9c <ProcessMacCommands+0x444>)
 8010ab6:	589b      	ldr	r3, [r3, r2]
 8010ab8:	2284      	movs	r2, #132	; 0x84
 8010aba:	569a      	ldrsb	r2, [r3, r2]
 8010abc:	197b      	adds	r3, r7, r5
 8010abe:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010ac0:	4bb4      	ldr	r3, [pc, #720]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010ac2:	4ab6      	ldr	r2, [pc, #728]	; (8010d9c <ProcessMacCommands+0x444>)
 8010ac4:	589b      	ldr	r3, [r3, r2]
 8010ac6:	22a4      	movs	r2, #164	; 0xa4
 8010ac8:	5c9a      	ldrb	r2, [r3, r2]
 8010aca:	197b      	adds	r3, r7, r5
 8010acc:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010ace:	4bb1      	ldr	r3, [pc, #708]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010ad0:	4ab2      	ldr	r2, [pc, #712]	; (8010d9c <ProcessMacCommands+0x444>)
 8010ad2:	5899      	ldr	r1, [r3, r2]
 8010ad4:	197b      	adds	r3, r7, r5
 8010ad6:	22b0      	movs	r2, #176	; 0xb0
 8010ad8:	0052      	lsls	r2, r2, #1
 8010ada:	588a      	ldr	r2, [r1, r2]
 8010adc:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010ade:	4bad      	ldr	r3, [pc, #692]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010ae0:	4aae      	ldr	r2, [pc, #696]	; (8010d9c <ProcessMacCommands+0x444>)
 8010ae2:	589b      	ldr	r3, [r3, r2]
 8010ae4:	7818      	ldrb	r0, [r3, #0]
 8010ae6:	193c      	adds	r4, r7, r4
 8010ae8:	19ba      	adds	r2, r7, r6
 8010aea:	1979      	adds	r1, r7, r5
 8010aec:	2354      	movs	r3, #84	; 0x54
 8010aee:	18fb      	adds	r3, r7, r3
 8010af0:	9301      	str	r3, [sp, #4]
 8010af2:	2555      	movs	r5, #85	; 0x55
 8010af4:	197b      	adds	r3, r7, r5
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	0023      	movs	r3, r4
 8010afa:	f006 f8a0 	bl	8016c3e <RegionLinkAdrReq>
 8010afe:	0003      	movs	r3, r0
 8010b00:	001a      	movs	r2, r3
 8010b02:	216b      	movs	r1, #107	; 0x6b
 8010b04:	187b      	adds	r3, r7, r1
 8010b06:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010b08:	187b      	adds	r3, r7, r1
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	001a      	movs	r2, r3
 8010b0e:	2307      	movs	r3, #7
 8010b10:	4013      	ands	r3, r2
 8010b12:	2b07      	cmp	r3, #7
 8010b14:	d117      	bne.n	8010b46 <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8010b16:	4b9f      	ldr	r3, [pc, #636]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010b18:	4aa0      	ldr	r2, [pc, #640]	; (8010d9c <ProcessMacCommands+0x444>)
 8010b1a:	589b      	ldr	r3, [r3, r2]
 8010b1c:	19ba      	adds	r2, r7, r6
 8010b1e:	2100      	movs	r1, #0
 8010b20:	5651      	ldrsb	r1, [r2, r1]
 8010b22:	2285      	movs	r2, #133	; 0x85
 8010b24:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8010b26:	4b9b      	ldr	r3, [pc, #620]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010b28:	4a9c      	ldr	r2, [pc, #624]	; (8010d9c <ProcessMacCommands+0x444>)
 8010b2a:	589b      	ldr	r3, [r3, r2]
 8010b2c:	2456      	movs	r4, #86	; 0x56
 8010b2e:	193a      	adds	r2, r7, r4
 8010b30:	2100      	movs	r1, #0
 8010b32:	5651      	ldrsb	r1, [r2, r1]
 8010b34:	2284      	movs	r2, #132	; 0x84
 8010b36:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010b38:	4b96      	ldr	r3, [pc, #600]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010b3a:	4a98      	ldr	r2, [pc, #608]	; (8010d9c <ProcessMacCommands+0x444>)
 8010b3c:	589b      	ldr	r3, [r3, r2]
 8010b3e:	197a      	adds	r2, r7, r5
 8010b40:	7811      	ldrb	r1, [r2, #0]
 8010b42:	22a4      	movs	r2, #164	; 0xa4
 8010b44:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010b46:	2386      	movs	r3, #134	; 0x86
 8010b48:	18fb      	adds	r3, r7, r3
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	701a      	strb	r2, [r3, #0]
 8010b4e:	e00c      	b.n	8010b6a <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010b50:	236b      	movs	r3, #107	; 0x6b
 8010b52:	18fb      	adds	r3, r7, r3
 8010b54:	2201      	movs	r2, #1
 8010b56:	0019      	movs	r1, r3
 8010b58:	2003      	movs	r0, #3
 8010b5a:	f003 ffb9 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010b5e:	2186      	movs	r1, #134	; 0x86
 8010b60:	187b      	adds	r3, r7, r1
 8010b62:	781a      	ldrb	r2, [r3, #0]
 8010b64:	187b      	adds	r3, r7, r1
 8010b66:	3201      	adds	r2, #1
 8010b68:	701a      	strb	r2, [r3, #0]
 8010b6a:	2454      	movs	r4, #84	; 0x54
 8010b6c:	193b      	adds	r3, r7, r4
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2105      	movs	r1, #5
 8010b72:	0018      	movs	r0, r3
 8010b74:	f7ef fad0 	bl	8000118 <__udivsi3>
 8010b78:	0003      	movs	r3, r0
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	2286      	movs	r2, #134	; 0x86
 8010b7e:	18ba      	adds	r2, r7, r2
 8010b80:	7812      	ldrb	r2, [r2, #0]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d3e4      	bcc.n	8010b50 <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010b86:	193b      	adds	r3, r7, r4
 8010b88:	781a      	ldrb	r2, [r3, #0]
 8010b8a:	1cfb      	adds	r3, r7, #3
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	18d3      	adds	r3, r2, r3
 8010b90:	b2da      	uxtb	r2, r3
 8010b92:	1cfb      	adds	r3, r7, #3
 8010b94:	3a01      	subs	r2, #1
 8010b96:	701a      	strb	r2, [r3, #0]
                }
                break;
 8010b98:	46c0      	nop			; (mov r8, r8)
 8010b9a:	f000 fc53 	bl	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8010b9e:	1cfb      	adds	r3, r7, #3
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	1cfa      	adds	r2, r7, #3
 8010ba4:	1c59      	adds	r1, r3, #1
 8010ba6:	7011      	strb	r1, [r2, #0]
 8010ba8:	001a      	movs	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	189b      	adds	r3, r3, r2
 8010bae:	781a      	ldrb	r2, [r3, #0]
 8010bb0:	4b78      	ldr	r3, [pc, #480]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010bb2:	497a      	ldr	r1, [pc, #488]	; (8010d9c <ProcessMacCommands+0x444>)
 8010bb4:	585b      	ldr	r3, [r3, r1]
 8010bb6:	210f      	movs	r1, #15
 8010bb8:	400a      	ands	r2, r1
 8010bba:	b2d1      	uxtb	r1, r2
 8010bbc:	22c8      	movs	r2, #200	; 0xc8
 8010bbe:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8010bc0:	4b74      	ldr	r3, [pc, #464]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010bc2:	4a76      	ldr	r2, [pc, #472]	; (8010d9c <ProcessMacCommands+0x444>)
 8010bc4:	589b      	ldr	r3, [r3, r2]
 8010bc6:	22c8      	movs	r2, #200	; 0xc8
 8010bc8:	5c9b      	ldrb	r3, [r3, r2]
 8010bca:	001a      	movs	r2, r3
 8010bcc:	2301      	movs	r3, #1
 8010bce:	4093      	lsls	r3, r2
 8010bd0:	0019      	movs	r1, r3
 8010bd2:	4b70      	ldr	r3, [pc, #448]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010bd4:	4a71      	ldr	r2, [pc, #452]	; (8010d9c <ProcessMacCommands+0x444>)
 8010bd6:	589a      	ldr	r2, [r3, r2]
 8010bd8:	b289      	uxth	r1, r1
 8010bda:	23a6      	movs	r3, #166	; 0xa6
 8010bdc:	005b      	lsls	r3, r3, #1
 8010bde:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010be0:	2368      	movs	r3, #104	; 0x68
 8010be2:	18fb      	adds	r3, r7, r3
 8010be4:	2200      	movs	r2, #0
 8010be6:	0019      	movs	r1, r3
 8010be8:	2004      	movs	r0, #4
 8010bea:	f003 ff71 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                break;
 8010bee:	f000 fc29 	bl	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010bf2:	256b      	movs	r5, #107	; 0x6b
 8010bf4:	197b      	adds	r3, r7, r5
 8010bf6:	2207      	movs	r2, #7
 8010bf8:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010bfa:	1cfb      	adds	r3, r7, #3
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	18d3      	adds	r3, r2, r3
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	091b      	lsrs	r3, r3, #4
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	b25b      	sxtb	r3, r3
 8010c0a:	2207      	movs	r2, #7
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	b25a      	sxtb	r2, r3
 8010c10:	204c      	movs	r0, #76	; 0x4c
 8010c12:	183b      	adds	r3, r7, r0
 8010c14:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010c16:	1cfb      	adds	r3, r7, #3
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	18d3      	adds	r3, r2, r3
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	b25b      	sxtb	r3, r3
 8010c22:	220f      	movs	r2, #15
 8010c24:	4013      	ands	r3, r2
 8010c26:	b25a      	sxtb	r2, r3
 8010c28:	183b      	adds	r3, r7, r0
 8010c2a:	701a      	strb	r2, [r3, #0]
                macIndex++;
 8010c2c:	1cfb      	adds	r3, r7, #3
 8010c2e:	781a      	ldrb	r2, [r3, #0]
 8010c30:	1cfb      	adds	r3, r7, #3
 8010c32:	3201      	adds	r2, #1
 8010c34:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010c36:	1cfb      	adds	r3, r7, #3
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	1cfa      	adds	r2, r7, #3
 8010c3c:	1c59      	adds	r1, r3, #1
 8010c3e:	7011      	strb	r1, [r2, #0]
 8010c40:	001a      	movs	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	189b      	adds	r3, r3, r2
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	001a      	movs	r2, r3
 8010c4a:	183b      	adds	r3, r7, r0
 8010c4c:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010c4e:	1cfb      	adds	r3, r7, #3
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	1cfa      	adds	r2, r7, #3
 8010c54:	1c59      	adds	r1, r3, #1
 8010c56:	7011      	strb	r1, [r2, #0]
 8010c58:	001a      	movs	r2, r3
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	189b      	adds	r3, r3, r2
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	021a      	lsls	r2, r3, #8
 8010c62:	183b      	adds	r3, r7, r0
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	431a      	orrs	r2, r3
 8010c68:	183b      	adds	r3, r7, r0
 8010c6a:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010c6c:	1cfb      	adds	r3, r7, #3
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	1cfa      	adds	r2, r7, #3
 8010c72:	1c59      	adds	r1, r3, #1
 8010c74:	7011      	strb	r1, [r2, #0]
 8010c76:	001a      	movs	r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	189b      	adds	r3, r3, r2
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	041a      	lsls	r2, r3, #16
 8010c80:	183b      	adds	r3, r7, r0
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	431a      	orrs	r2, r3
 8010c86:	0004      	movs	r4, r0
 8010c88:	193b      	adds	r3, r7, r4
 8010c8a:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 8010c8c:	193b      	adds	r3, r7, r4
 8010c8e:	685b      	ldr	r3, [r3, #4]
 8010c90:	2264      	movs	r2, #100	; 0x64
 8010c92:	435a      	muls	r2, r3
 8010c94:	193b      	adds	r3, r7, r4
 8010c96:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8010c98:	4b3e      	ldr	r3, [pc, #248]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010c9a:	4a40      	ldr	r2, [pc, #256]	; (8010d9c <ProcessMacCommands+0x444>)
 8010c9c:	589b      	ldr	r3, [r3, r2]
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	193a      	adds	r2, r7, r4
 8010ca2:	0011      	movs	r1, r2
 8010ca4:	0018      	movs	r0, r3
 8010ca6:	f005 ffe8 	bl	8016c7a <RegionRxParamSetupReq>
 8010caa:	0003      	movs	r3, r0
 8010cac:	001a      	movs	r2, r3
 8010cae:	197b      	adds	r3, r7, r5
 8010cb0:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8010cb2:	197b      	adds	r3, r7, r5
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	001a      	movs	r2, r3
 8010cb8:	2307      	movs	r3, #7
 8010cba:	4013      	ands	r3, r2
 8010cbc:	2b07      	cmp	r3, #7
 8010cbe:	d128      	bne.n	8010d12 <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010cc0:	193b      	adds	r3, r7, r4
 8010cc2:	2100      	movs	r1, #0
 8010cc4:	5659      	ldrsb	r1, [r3, r1]
 8010cc6:	4b33      	ldr	r3, [pc, #204]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010cc8:	4a34      	ldr	r2, [pc, #208]	; (8010d9c <ProcessMacCommands+0x444>)
 8010cca:	589b      	ldr	r3, [r3, r2]
 8010ccc:	b2c9      	uxtb	r1, r1
 8010cce:	22ac      	movs	r2, #172	; 0xac
 8010cd0:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010cd2:	193b      	adds	r3, r7, r4
 8010cd4:	2100      	movs	r1, #0
 8010cd6:	5659      	ldrsb	r1, [r3, r1]
 8010cd8:	4b2e      	ldr	r3, [pc, #184]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010cda:	4a30      	ldr	r2, [pc, #192]	; (8010d9c <ProcessMacCommands+0x444>)
 8010cdc:	589b      	ldr	r3, [r3, r2]
 8010cde:	b2c9      	uxtb	r1, r1
 8010ce0:	22b4      	movs	r2, #180	; 0xb4
 8010ce2:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010ce4:	4b2b      	ldr	r3, [pc, #172]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010ce6:	4a2d      	ldr	r2, [pc, #180]	; (8010d9c <ProcessMacCommands+0x444>)
 8010ce8:	589a      	ldr	r2, [r3, r2]
 8010cea:	193b      	adds	r3, r7, r4
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	21a8      	movs	r1, #168	; 0xa8
 8010cf0:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010cf2:	4b28      	ldr	r3, [pc, #160]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010cf4:	4a29      	ldr	r2, [pc, #164]	; (8010d9c <ProcessMacCommands+0x444>)
 8010cf6:	589a      	ldr	r2, [r3, r2]
 8010cf8:	193b      	adds	r3, r7, r4
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	21b0      	movs	r1, #176	; 0xb0
 8010cfe:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010d00:	193b      	adds	r3, r7, r4
 8010d02:	2101      	movs	r1, #1
 8010d04:	5659      	ldrsb	r1, [r3, r1]
 8010d06:	4b23      	ldr	r3, [pc, #140]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010d08:	4a24      	ldr	r2, [pc, #144]	; (8010d9c <ProcessMacCommands+0x444>)
 8010d0a:	589b      	ldr	r3, [r3, r2]
 8010d0c:	b2c9      	uxtb	r1, r1
 8010d0e:	22a5      	movs	r2, #165	; 0xa5
 8010d10:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 8010d12:	236b      	movs	r3, #107	; 0x6b
 8010d14:	18fb      	adds	r3, r7, r3
 8010d16:	781a      	ldrb	r2, [r3, #0]
 8010d18:	2168      	movs	r1, #104	; 0x68
 8010d1a:	187b      	adds	r3, r7, r1
 8010d1c:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010d1e:	187b      	adds	r3, r7, r1
 8010d20:	2201      	movs	r2, #1
 8010d22:	0019      	movs	r1, r3
 8010d24:	2005      	movs	r0, #5
 8010d26:	f003 fed3 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010d2a:	f7ff fe05 	bl	8010938 <SetMlmeScheduleUplinkIndication>
                break;
 8010d2e:	46c0      	nop			; (mov r8, r8)
 8010d30:	e388      	b.n	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010d32:	2185      	movs	r1, #133	; 0x85
 8010d34:	187b      	adds	r3, r7, r1
 8010d36:	22ff      	movs	r2, #255	; 0xff
 8010d38:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010d3a:	4a16      	ldr	r2, [pc, #88]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010d3c:	23d2      	movs	r3, #210	; 0xd2
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	58d3      	ldr	r3, [r2, r3]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d00f      	beq.n	8010d66 <ProcessMacCommands+0x40e>
 8010d46:	4a13      	ldr	r2, [pc, #76]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010d48:	23d2      	movs	r3, #210	; 0xd2
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	58d3      	ldr	r3, [r2, r3]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d008      	beq.n	8010d66 <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010d54:	4a0f      	ldr	r2, [pc, #60]	; (8010d94 <ProcessMacCommands+0x43c>)
 8010d56:	23d2      	movs	r3, #210	; 0xd2
 8010d58:	009b      	lsls	r3, r3, #2
 8010d5a:	58d3      	ldr	r3, [r2, r3]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	187c      	adds	r4, r7, r1
 8010d60:	4798      	blx	r3
 8010d62:	0003      	movs	r3, r0
 8010d64:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 8010d66:	2168      	movs	r1, #104	; 0x68
 8010d68:	187b      	adds	r3, r7, r1
 8010d6a:	2285      	movs	r2, #133	; 0x85
 8010d6c:	18ba      	adds	r2, r7, r2
 8010d6e:	7812      	ldrb	r2, [r2, #0]
 8010d70:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010d72:	1c7b      	adds	r3, r7, #1
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	223f      	movs	r2, #63	; 0x3f
 8010d78:	4013      	ands	r3, r2
 8010d7a:	b2da      	uxtb	r2, r3
 8010d7c:	187b      	adds	r3, r7, r1
 8010d7e:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010d80:	187b      	adds	r3, r7, r1
 8010d82:	2202      	movs	r2, #2
 8010d84:	0019      	movs	r1, r3
 8010d86:	2006      	movs	r0, #6
 8010d88:	f003 fea2 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                break;
 8010d8c:	e35a      	b.n	8011444 <ProcessMacCommands+0xaec>
 8010d8e:	46c0      	nop			; (mov r8, r8)
 8010d90:	0801ec20 	.word	0x0801ec20
 8010d94:	2000054c 	.word	0x2000054c
 8010d98:	00000459 	.word	0x00000459
 8010d9c:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010da0:	246b      	movs	r4, #107	; 0x6b
 8010da2:	193b      	adds	r3, r7, r4
 8010da4:	2203      	movs	r2, #3
 8010da6:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 8010da8:	1cfb      	adds	r3, r7, #3
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	1cfa      	adds	r2, r7, #3
 8010dae:	1c59      	adds	r1, r3, #1
 8010db0:	7011      	strb	r1, [r2, #0]
 8010db2:	001a      	movs	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	189b      	adds	r3, r3, r2
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	b25a      	sxtb	r2, r3
 8010dbc:	2544      	movs	r5, #68	; 0x44
 8010dbe:	197b      	adds	r3, r7, r5
 8010dc0:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 8010dc2:	197b      	adds	r3, r7, r5
 8010dc4:	2038      	movs	r0, #56	; 0x38
 8010dc6:	183a      	adds	r2, r7, r0
 8010dc8:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010dca:	1cfb      	adds	r3, r7, #3
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	1cfa      	adds	r2, r7, #3
 8010dd0:	1c59      	adds	r1, r3, #1
 8010dd2:	7011      	strb	r1, [r2, #0]
 8010dd4:	001a      	movs	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	189b      	adds	r3, r3, r2
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	001a      	movs	r2, r3
 8010dde:	183b      	adds	r3, r7, r0
 8010de0:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010de2:	1cfb      	adds	r3, r7, #3
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	1cfa      	adds	r2, r7, #3
 8010de8:	1c59      	adds	r1, r3, #1
 8010dea:	7011      	strb	r1, [r2, #0]
 8010dec:	001a      	movs	r2, r3
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	189b      	adds	r3, r3, r2
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	021a      	lsls	r2, r3, #8
 8010df6:	183b      	adds	r3, r7, r0
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	431a      	orrs	r2, r3
 8010dfc:	183b      	adds	r3, r7, r0
 8010dfe:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010e00:	1cfb      	adds	r3, r7, #3
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	1cfa      	adds	r2, r7, #3
 8010e06:	1c59      	adds	r1, r3, #1
 8010e08:	7011      	strb	r1, [r2, #0]
 8010e0a:	001a      	movs	r2, r3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	189b      	adds	r3, r3, r2
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	041a      	lsls	r2, r3, #16
 8010e14:	183b      	adds	r3, r7, r0
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	431a      	orrs	r2, r3
 8010e1a:	183b      	adds	r3, r7, r0
 8010e1c:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 8010e1e:	183b      	adds	r3, r7, r0
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2264      	movs	r2, #100	; 0x64
 8010e24:	435a      	muls	r2, r3
 8010e26:	183b      	adds	r3, r7, r0
 8010e28:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 8010e2a:	183b      	adds	r3, r7, r0
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 8010e30:	1cfb      	adds	r3, r7, #3
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	1cfa      	adds	r2, r7, #3
 8010e36:	1c59      	adds	r1, r3, #1
 8010e38:	7011      	strb	r1, [r2, #0]
 8010e3a:	001a      	movs	r2, r3
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	189b      	adds	r3, r3, r2
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	b25a      	sxtb	r2, r3
 8010e44:	183b      	adds	r3, r7, r0
 8010e46:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8010e48:	4ba0      	ldr	r3, [pc, #640]	; (80110cc <ProcessMacCommands+0x774>)
 8010e4a:	4aa1      	ldr	r2, [pc, #644]	; (80110d0 <ProcessMacCommands+0x778>)
 8010e4c:	589b      	ldr	r3, [r3, r2]
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	197a      	adds	r2, r7, r5
 8010e52:	0011      	movs	r1, r2
 8010e54:	0018      	movs	r0, r3
 8010e56:	f005 ff26 	bl	8016ca6 <RegionNewChannelReq>
 8010e5a:	0003      	movs	r3, r0
 8010e5c:	001a      	movs	r2, r3
 8010e5e:	193b      	adds	r3, r7, r4
 8010e60:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 8010e62:	193b      	adds	r3, r7, r4
 8010e64:	781a      	ldrb	r2, [r3, #0]
 8010e66:	2168      	movs	r1, #104	; 0x68
 8010e68:	187b      	adds	r3, r7, r1
 8010e6a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010e6c:	187b      	adds	r3, r7, r1
 8010e6e:	2201      	movs	r2, #1
 8010e70:	0019      	movs	r1, r3
 8010e72:	2007      	movs	r0, #7
 8010e74:	f003 fe2c 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                break;
 8010e78:	46c0      	nop			; (mov r8, r8)
 8010e7a:	e2e3      	b.n	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010e7c:	1cfb      	adds	r3, r7, #3
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	1cfa      	adds	r2, r7, #3
 8010e82:	1c59      	adds	r1, r3, #1
 8010e84:	7011      	strb	r1, [r2, #0]
 8010e86:	001a      	movs	r2, r3
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	189b      	adds	r3, r3, r2
 8010e8c:	781a      	ldrb	r2, [r3, #0]
 8010e8e:	2084      	movs	r0, #132	; 0x84
 8010e90:	183b      	adds	r3, r7, r0
 8010e92:	210f      	movs	r1, #15
 8010e94:	400a      	ands	r2, r1
 8010e96:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 8010e98:	183b      	adds	r3, r7, r0
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d104      	bne.n	8010eaa <ProcessMacCommands+0x552>
                {
                    delay++;
 8010ea0:	183b      	adds	r3, r7, r0
 8010ea2:	781a      	ldrb	r2, [r3, #0]
 8010ea4:	183b      	adds	r3, r7, r0
 8010ea6:	3201      	adds	r2, #1
 8010ea8:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8010eaa:	2384      	movs	r3, #132	; 0x84
 8010eac:	18fb      	adds	r3, r7, r3
 8010eae:	781a      	ldrb	r2, [r3, #0]
 8010eb0:	0013      	movs	r3, r2
 8010eb2:	015b      	lsls	r3, r3, #5
 8010eb4:	1a9b      	subs	r3, r3, r2
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	189b      	adds	r3, r3, r2
 8010eba:	00db      	lsls	r3, r3, #3
 8010ebc:	0019      	movs	r1, r3
 8010ebe:	4b83      	ldr	r3, [pc, #524]	; (80110cc <ProcessMacCommands+0x774>)
 8010ec0:	4a83      	ldr	r2, [pc, #524]	; (80110d0 <ProcessMacCommands+0x778>)
 8010ec2:	589b      	ldr	r3, [r3, r2]
 8010ec4:	2294      	movs	r2, #148	; 0x94
 8010ec6:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8010ec8:	4b80      	ldr	r3, [pc, #512]	; (80110cc <ProcessMacCommands+0x774>)
 8010eca:	4a81      	ldr	r2, [pc, #516]	; (80110d0 <ProcessMacCommands+0x778>)
 8010ecc:	589b      	ldr	r3, [r3, r2]
 8010ece:	2294      	movs	r2, #148	; 0x94
 8010ed0:	589b      	ldr	r3, [r3, r2]
 8010ed2:	4a7e      	ldr	r2, [pc, #504]	; (80110cc <ProcessMacCommands+0x774>)
 8010ed4:	497e      	ldr	r1, [pc, #504]	; (80110d0 <ProcessMacCommands+0x778>)
 8010ed6:	5852      	ldr	r2, [r2, r1]
 8010ed8:	21fa      	movs	r1, #250	; 0xfa
 8010eda:	0089      	lsls	r1, r1, #2
 8010edc:	468c      	mov	ip, r1
 8010ede:	4463      	add	r3, ip
 8010ee0:	2198      	movs	r1, #152	; 0x98
 8010ee2:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010ee4:	2368      	movs	r3, #104	; 0x68
 8010ee6:	18fb      	adds	r3, r7, r3
 8010ee8:	2200      	movs	r2, #0
 8010eea:	0019      	movs	r1, r3
 8010eec:	2008      	movs	r0, #8
 8010eee:	f003 fdef 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010ef2:	f7ff fd21 	bl	8010938 <SetMlmeScheduleUplinkIndication>
                break;
 8010ef6:	e2a5      	b.n	8011444 <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010ef8:	1cfb      	adds	r3, r7, #3
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	1cfa      	adds	r2, r7, #3
 8010efe:	1c59      	adds	r1, r3, #1
 8010f00:	7011      	strb	r1, [r2, #0]
 8010f02:	001a      	movs	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	189a      	adds	r2, r3, r2
 8010f08:	2076      	movs	r0, #118	; 0x76
 8010f0a:	183b      	adds	r3, r7, r0
 8010f0c:	7812      	ldrb	r2, [r2, #0]
 8010f0e:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 8010f10:	2134      	movs	r1, #52	; 0x34
 8010f12:	187b      	adds	r3, r7, r1
 8010f14:	2200      	movs	r2, #0
 8010f16:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 8010f18:	187b      	adds	r3, r7, r1
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010f1e:	183b      	adds	r3, r7, r0
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	2220      	movs	r2, #32
 8010f24:	4013      	ands	r3, r2
 8010f26:	d002      	beq.n	8010f2e <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010f28:	187b      	adds	r3, r7, r1
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010f2e:	2376      	movs	r3, #118	; 0x76
 8010f30:	18fb      	adds	r3, r7, r3
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	2210      	movs	r2, #16
 8010f36:	4013      	ands	r3, r2
 8010f38:	d003      	beq.n	8010f42 <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010f3a:	2334      	movs	r3, #52	; 0x34
 8010f3c:	18fb      	adds	r3, r7, r3
 8010f3e:	2201      	movs	r2, #1
 8010f40:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010f42:	2376      	movs	r3, #118	; 0x76
 8010f44:	18fb      	adds	r3, r7, r3
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	220f      	movs	r2, #15
 8010f4a:	4013      	ands	r3, r2
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	2434      	movs	r4, #52	; 0x34
 8010f50:	193b      	adds	r3, r7, r4
 8010f52:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8010f54:	4b5d      	ldr	r3, [pc, #372]	; (80110cc <ProcessMacCommands+0x774>)
 8010f56:	4a5e      	ldr	r2, [pc, #376]	; (80110d0 <ProcessMacCommands+0x778>)
 8010f58:	589b      	ldr	r3, [r3, r2]
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	193a      	adds	r2, r7, r4
 8010f5e:	0011      	movs	r1, r2
 8010f60:	0018      	movs	r0, r3
 8010f62:	f005 feb6 	bl	8016cd2 <RegionTxParamSetupReq>
 8010f66:	0003      	movs	r3, r0
 8010f68:	3301      	adds	r3, #1
 8010f6a:	d050      	beq.n	801100e <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010f6c:	4b57      	ldr	r3, [pc, #348]	; (80110cc <ProcessMacCommands+0x774>)
 8010f6e:	4a58      	ldr	r2, [pc, #352]	; (80110d0 <ProcessMacCommands+0x778>)
 8010f70:	589b      	ldr	r3, [r3, r2]
 8010f72:	193a      	adds	r2, r7, r4
 8010f74:	7811      	ldrb	r1, [r2, #0]
 8010f76:	22b8      	movs	r2, #184	; 0xb8
 8010f78:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010f7a:	4b54      	ldr	r3, [pc, #336]	; (80110cc <ProcessMacCommands+0x774>)
 8010f7c:	4a54      	ldr	r2, [pc, #336]	; (80110d0 <ProcessMacCommands+0x778>)
 8010f7e:	589b      	ldr	r3, [r3, r2]
 8010f80:	193a      	adds	r2, r7, r4
 8010f82:	7851      	ldrb	r1, [r2, #1]
 8010f84:	22b9      	movs	r2, #185	; 0xb9
 8010f86:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010f88:	193b      	adds	r3, r7, r4
 8010f8a:	789b      	ldrb	r3, [r3, #2]
 8010f8c:	001a      	movs	r2, r3
 8010f8e:	4b51      	ldr	r3, [pc, #324]	; (80110d4 <ProcessMacCommands+0x77c>)
 8010f90:	5c9a      	ldrb	r2, [r3, r2]
 8010f92:	4b4e      	ldr	r3, [pc, #312]	; (80110cc <ProcessMacCommands+0x774>)
 8010f94:	494e      	ldr	r1, [pc, #312]	; (80110d0 <ProcessMacCommands+0x778>)
 8010f96:	585c      	ldr	r4, [r3, r1]
 8010f98:	0010      	movs	r0, r2
 8010f9a:	f7f0 f82f 	bl	8000ffc <__aeabi_ui2f>
 8010f9e:	1c03      	adds	r3, r0, #0
 8010fa0:	22bc      	movs	r2, #188	; 0xbc
 8010fa2:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010fa4:	212c      	movs	r1, #44	; 0x2c
 8010fa6:	187b      	adds	r3, r7, r1
 8010fa8:	2202      	movs	r2, #2
 8010faa:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010fac:	4b47      	ldr	r3, [pc, #284]	; (80110cc <ProcessMacCommands+0x774>)
 8010fae:	4a48      	ldr	r2, [pc, #288]	; (80110d0 <ProcessMacCommands+0x778>)
 8010fb0:	589b      	ldr	r3, [r3, r2]
 8010fb2:	22b8      	movs	r2, #184	; 0xb8
 8010fb4:	5c9a      	ldrb	r2, [r3, r2]
 8010fb6:	187b      	adds	r3, r7, r1
 8010fb8:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010fba:	4b44      	ldr	r3, [pc, #272]	; (80110cc <ProcessMacCommands+0x774>)
 8010fbc:	4a44      	ldr	r2, [pc, #272]	; (80110d0 <ProcessMacCommands+0x778>)
 8010fbe:	589b      	ldr	r3, [r3, r2]
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	187a      	adds	r2, r7, r1
 8010fc4:	0011      	movs	r1, r2
 8010fc6:	0018      	movs	r0, r3
 8010fc8:	f005 fd31 	bl	8016a2e <RegionGetPhyParam>
 8010fcc:	0003      	movs	r3, r0
 8010fce:	001a      	movs	r2, r3
 8010fd0:	2128      	movs	r1, #40	; 0x28
 8010fd2:	187b      	adds	r3, r7, r1
 8010fd4:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010fd6:	187b      	adds	r3, r7, r1
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	b259      	sxtb	r1, r3
 8010fdc:	4b3b      	ldr	r3, [pc, #236]	; (80110cc <ProcessMacCommands+0x774>)
 8010fde:	4a3c      	ldr	r2, [pc, #240]	; (80110d0 <ProcessMacCommands+0x778>)
 8010fe0:	589b      	ldr	r3, [r3, r2]
 8010fe2:	2285      	movs	r2, #133	; 0x85
 8010fe4:	5698      	ldrsb	r0, [r3, r2]
 8010fe6:	4b39      	ldr	r3, [pc, #228]	; (80110cc <ProcessMacCommands+0x774>)
 8010fe8:	4a39      	ldr	r2, [pc, #228]	; (80110d0 <ProcessMacCommands+0x778>)
 8010fea:	589b      	ldr	r3, [r3, r2]
 8010fec:	1c04      	adds	r4, r0, #0
 8010fee:	1c08      	adds	r0, r1, #0
 8010ff0:	b241      	sxtb	r1, r0
 8010ff2:	b262      	sxtb	r2, r4
 8010ff4:	4291      	cmp	r1, r2
 8010ff6:	da00      	bge.n	8010ffa <ProcessMacCommands+0x6a2>
 8010ff8:	1c20      	adds	r0, r4, #0
 8010ffa:	b241      	sxtb	r1, r0
 8010ffc:	2285      	movs	r2, #133	; 0x85
 8010ffe:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011000:	2368      	movs	r3, #104	; 0x68
 8011002:	18fb      	adds	r3, r7, r3
 8011004:	2200      	movs	r2, #0
 8011006:	0019      	movs	r1, r3
 8011008:	2009      	movs	r0, #9
 801100a:	f003 fd61 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                }
                break;
 801100e:	46c0      	nop			; (mov r8, r8)
 8011010:	e218      	b.n	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011012:	246b      	movs	r4, #107	; 0x6b
 8011014:	193b      	adds	r3, r7, r4
 8011016:	2203      	movs	r2, #3
 8011018:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 801101a:	1cfb      	adds	r3, r7, #3
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	1cfa      	adds	r2, r7, #3
 8011020:	1c59      	adds	r1, r3, #1
 8011022:	7011      	strb	r1, [r2, #0]
 8011024:	001a      	movs	r2, r3
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	189b      	adds	r3, r3, r2
 801102a:	781a      	ldrb	r2, [r3, #0]
 801102c:	2020      	movs	r0, #32
 801102e:	183b      	adds	r3, r7, r0
 8011030:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011032:	1cfb      	adds	r3, r7, #3
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	1cfa      	adds	r2, r7, #3
 8011038:	1c59      	adds	r1, r3, #1
 801103a:	7011      	strb	r1, [r2, #0]
 801103c:	001a      	movs	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	189b      	adds	r3, r3, r2
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	001a      	movs	r2, r3
 8011046:	183b      	adds	r3, r7, r0
 8011048:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801104a:	1cfb      	adds	r3, r7, #3
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	1cfa      	adds	r2, r7, #3
 8011050:	1c59      	adds	r1, r3, #1
 8011052:	7011      	strb	r1, [r2, #0]
 8011054:	001a      	movs	r2, r3
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	189b      	adds	r3, r3, r2
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	021a      	lsls	r2, r3, #8
 801105e:	183b      	adds	r3, r7, r0
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	431a      	orrs	r2, r3
 8011064:	183b      	adds	r3, r7, r0
 8011066:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011068:	1cfb      	adds	r3, r7, #3
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	1cfa      	adds	r2, r7, #3
 801106e:	1c59      	adds	r1, r3, #1
 8011070:	7011      	strb	r1, [r2, #0]
 8011072:	001a      	movs	r2, r3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	189b      	adds	r3, r3, r2
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	041a      	lsls	r2, r3, #16
 801107c:	183b      	adds	r3, r7, r0
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	431a      	orrs	r2, r3
 8011082:	0001      	movs	r1, r0
 8011084:	187b      	adds	r3, r7, r1
 8011086:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 8011088:	187b      	adds	r3, r7, r1
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	2264      	movs	r2, #100	; 0x64
 801108e:	435a      	muls	r2, r3
 8011090:	187b      	adds	r3, r7, r1
 8011092:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8011094:	4b0d      	ldr	r3, [pc, #52]	; (80110cc <ProcessMacCommands+0x774>)
 8011096:	4a0e      	ldr	r2, [pc, #56]	; (80110d0 <ProcessMacCommands+0x778>)
 8011098:	589b      	ldr	r3, [r3, r2]
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	187a      	adds	r2, r7, r1
 801109e:	0011      	movs	r1, r2
 80110a0:	0018      	movs	r0, r3
 80110a2:	f005 fe2c 	bl	8016cfe <RegionDlChannelReq>
 80110a6:	0003      	movs	r3, r0
 80110a8:	001a      	movs	r2, r3
 80110aa:	193b      	adds	r3, r7, r4
 80110ac:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 80110ae:	193b      	adds	r3, r7, r4
 80110b0:	781a      	ldrb	r2, [r3, #0]
 80110b2:	2168      	movs	r1, #104	; 0x68
 80110b4:	187b      	adds	r3, r7, r1
 80110b6:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80110b8:	187b      	adds	r3, r7, r1
 80110ba:	2201      	movs	r2, #1
 80110bc:	0019      	movs	r1, r3
 80110be:	200a      	movs	r0, #10
 80110c0:	f003 fd06 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80110c4:	f7ff fc38 	bl	8010938 <SetMlmeScheduleUplinkIndication>
                break;
 80110c8:	46c0      	nop			; (mov r8, r8)
 80110ca:	e1bb      	b.n	8011444 <ProcessMacCommands+0xaec>
 80110cc:	2000054c 	.word	0x2000054c
 80110d0:	00000484 	.word	0x00000484
 80110d4:	0801ec10 	.word	0x0801ec10
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80110d8:	200a      	movs	r0, #10
 80110da:	f004 f88b 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 80110de:	1e03      	subs	r3, r0, #0
 80110e0:	d100      	bne.n	80110e4 <ProcessMacCommands+0x78c>
 80110e2:	e1af      	b.n	8011444 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80110e4:	210a      	movs	r1, #10
 80110e6:	2000      	movs	r0, #0
 80110e8:	f003 ffe8 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80110ec:	2418      	movs	r4, #24
 80110ee:	193b      	adds	r3, r7, r4
 80110f0:	0018      	movs	r0, r3
 80110f2:	2308      	movs	r3, #8
 80110f4:	001a      	movs	r2, r3
 80110f6:	2100      	movs	r1, #0
 80110f8:	f00c fe6f 	bl	801ddda <memset>
                    SysTime_t sysTime = { 0 };
 80110fc:	2510      	movs	r5, #16
 80110fe:	197b      	adds	r3, r7, r5
 8011100:	0018      	movs	r0, r3
 8011102:	2308      	movs	r3, #8
 8011104:	001a      	movs	r2, r3
 8011106:	2100      	movs	r1, #0
 8011108:	f00c fe67 	bl	801ddda <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 801110c:	2608      	movs	r6, #8
 801110e:	19bb      	adds	r3, r7, r6
 8011110:	0018      	movs	r0, r3
 8011112:	2308      	movs	r3, #8
 8011114:	001a      	movs	r2, r3
 8011116:	2100      	movs	r1, #0
 8011118:	f00c fe5f 	bl	801ddda <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 801111c:	1cfb      	adds	r3, r7, #3
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	1cfa      	adds	r2, r7, #3
 8011122:	1c59      	adds	r1, r3, #1
 8011124:	7011      	strb	r1, [r2, #0]
 8011126:	001a      	movs	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	189b      	adds	r3, r3, r2
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	001a      	movs	r2, r3
 8011130:	193b      	adds	r3, r7, r4
 8011132:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011134:	1cfb      	adds	r3, r7, #3
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	1cfa      	adds	r2, r7, #3
 801113a:	1c59      	adds	r1, r3, #1
 801113c:	7011      	strb	r1, [r2, #0]
 801113e:	001a      	movs	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	189b      	adds	r3, r3, r2
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	021a      	lsls	r2, r3, #8
 8011148:	193b      	adds	r3, r7, r4
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	431a      	orrs	r2, r3
 801114e:	0020      	movs	r0, r4
 8011150:	193b      	adds	r3, r7, r4
 8011152:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011154:	1cfb      	adds	r3, r7, #3
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	1cfa      	adds	r2, r7, #3
 801115a:	1c59      	adds	r1, r3, #1
 801115c:	7011      	strb	r1, [r2, #0]
 801115e:	001a      	movs	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	189b      	adds	r3, r3, r2
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	041a      	lsls	r2, r3, #16
 8011168:	183b      	adds	r3, r7, r0
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	431a      	orrs	r2, r3
 801116e:	183b      	adds	r3, r7, r0
 8011170:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011172:	1cfb      	adds	r3, r7, #3
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	1cfa      	adds	r2, r7, #3
 8011178:	1c59      	adds	r1, r3, #1
 801117a:	7011      	strb	r1, [r2, #0]
 801117c:	001a      	movs	r2, r3
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	189b      	adds	r3, r3, r2
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	061a      	lsls	r2, r3, #24
 8011186:	183b      	adds	r3, r7, r0
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	431a      	orrs	r2, r3
 801118c:	183b      	adds	r3, r7, r0
 801118e:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011190:	1cfb      	adds	r3, r7, #3
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	1cfa      	adds	r2, r7, #3
 8011196:	1c59      	adds	r1, r3, #1
 8011198:	7011      	strb	r1, [r2, #0]
 801119a:	001a      	movs	r2, r3
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	189b      	adds	r3, r3, r2
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	b21a      	sxth	r2, r3
 80111a4:	183b      	adds	r3, r7, r0
 80111a6:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80111a8:	0001      	movs	r1, r0
 80111aa:	183b      	adds	r3, r7, r0
 80111ac:	2204      	movs	r2, #4
 80111ae:	5e9b      	ldrsh	r3, [r3, r2]
 80111b0:	001a      	movs	r2, r3
 80111b2:	0013      	movs	r3, r2
 80111b4:	015b      	lsls	r3, r3, #5
 80111b6:	1a9b      	subs	r3, r3, r2
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	189b      	adds	r3, r3, r2
 80111bc:	00db      	lsls	r3, r3, #3
 80111be:	121b      	asrs	r3, r3, #8
 80111c0:	b21a      	sxth	r2, r3
 80111c2:	187b      	adds	r3, r7, r1
 80111c4:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80111c6:	197a      	adds	r2, r7, r5
 80111c8:	187b      	adds	r3, r7, r1
 80111ca:	0010      	movs	r0, r2
 80111cc:	0019      	movs	r1, r3
 80111ce:	2308      	movs	r3, #8
 80111d0:	001a      	movs	r2, r3
 80111d2:	f00c fdf9 	bl	801ddc8 <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80111d6:	197b      	adds	r3, r7, r5
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4aa2      	ldr	r2, [pc, #648]	; (8011464 <ProcessMacCommands+0xb0c>)
 80111dc:	189a      	adds	r2, r3, r2
 80111de:	002c      	movs	r4, r5
 80111e0:	197b      	adds	r3, r7, r5
 80111e2:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80111e4:	19bb      	adds	r3, r7, r6
 80111e6:	0018      	movs	r0, r3
 80111e8:	f00b fb36 	bl	801c858 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80111ec:	236c      	movs	r3, #108	; 0x6c
 80111ee:	18fd      	adds	r5, r7, r3
 80111f0:	489d      	ldr	r0, [pc, #628]	; (8011468 <ProcessMacCommands+0xb10>)
 80111f2:	23ce      	movs	r3, #206	; 0xce
 80111f4:	0099      	lsls	r1, r3, #2
 80111f6:	0026      	movs	r6, r4
 80111f8:	193a      	adds	r2, r7, r4
 80111fa:	2404      	movs	r4, #4
 80111fc:	1843      	adds	r3, r0, r1
 80111fe:	191c      	adds	r4, r3, r4
 8011200:	466b      	mov	r3, sp
 8011202:	6824      	ldr	r4, [r4, #0]
 8011204:	601c      	str	r4, [r3, #0]
 8011206:	5843      	ldr	r3, [r0, r1]
 8011208:	6811      	ldr	r1, [r2, #0]
 801120a:	6852      	ldr	r2, [r2, #4]
 801120c:	0028      	movs	r0, r5
 801120e:	f00b fa97 	bl	801c740 <SysTimeSub>
 8011212:	0035      	movs	r5, r6
 8011214:	197c      	adds	r4, r7, r5
 8011216:	236c      	movs	r3, #108	; 0x6c
 8011218:	18fb      	adds	r3, r7, r3
 801121a:	2608      	movs	r6, #8
 801121c:	19ba      	adds	r2, r7, r6
 801121e:	4669      	mov	r1, sp
 8011220:	6858      	ldr	r0, [r3, #4]
 8011222:	6008      	str	r0, [r1, #0]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	6811      	ldr	r1, [r2, #0]
 8011228:	6852      	ldr	r2, [r2, #4]
 801122a:	0020      	movs	r0, r4
 801122c:	f00b fa32 	bl	801c694 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011230:	197b      	adds	r3, r7, r5
 8011232:	6818      	ldr	r0, [r3, #0]
 8011234:	6859      	ldr	r1, [r3, #4]
 8011236:	f00b fad7 	bl	801c7e8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801123a:	f003 fac5 	bl	80147c8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 801123e:	4a8a      	ldr	r2, [pc, #552]	; (8011468 <ProcessMacCommands+0xb10>)
 8011240:	2387      	movs	r3, #135	; 0x87
 8011242:	00db      	lsls	r3, r3, #3
 8011244:	2101      	movs	r1, #1
 8011246:	54d1      	strb	r1, [r2, r3]
                }
                break;
 8011248:	e0fc      	b.n	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801124a:	200d      	movs	r0, #13
 801124c:	f003 ffd2 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 8011250:	1e03      	subs	r3, r0, #0
 8011252:	d100      	bne.n	8011256 <ProcessMacCommands+0x8fe>
 8011254:	e0f6      	b.n	8011444 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011256:	210d      	movs	r1, #13
 8011258:	2000      	movs	r0, #0
 801125a:	f003 ff2f 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801125e:	4a82      	ldr	r2, [pc, #520]	; (8011468 <ProcessMacCommands+0xb10>)
 8011260:	2390      	movs	r3, #144	; 0x90
 8011262:	00db      	lsls	r3, r3, #3
 8011264:	5cd3      	ldrb	r3, [r2, r3]
 8011266:	2b04      	cmp	r3, #4
 8011268:	d100      	bne.n	801126c <ProcessMacCommands+0x914>
 801126a:	e0eb      	b.n	8011444 <ProcessMacCommands+0xaec>
 801126c:	4a7e      	ldr	r2, [pc, #504]	; (8011468 <ProcessMacCommands+0xb10>)
 801126e:	2390      	movs	r3, #144	; 0x90
 8011270:	00db      	lsls	r3, r3, #3
 8011272:	5cd3      	ldrb	r3, [r2, r3]
 8011274:	2b05      	cmp	r3, #5
 8011276:	d100      	bne.n	801127a <ProcessMacCommands+0x922>
 8011278:	e0e4      	b.n	8011444 <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801127a:	f003 fa86 	bl	801478a <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801127e:	e0e1      	b.n	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011280:	207c      	movs	r0, #124	; 0x7c
 8011282:	183b      	adds	r3, r7, r0
 8011284:	2203      	movs	r2, #3
 8011286:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8011288:	2300      	movs	r3, #0
 801128a:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801128c:	1cfb      	adds	r3, r7, #3
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	1cfa      	adds	r2, r7, #3
 8011292:	1c59      	adds	r1, r3, #1
 8011294:	7011      	strb	r1, [r2, #0]
 8011296:	001a      	movs	r2, r3
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	189b      	adds	r3, r3, r2
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80112a0:	1cfb      	adds	r3, r7, #3
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	1cfa      	adds	r2, r7, #3
 80112a6:	1c59      	adds	r1, r3, #1
 80112a8:	7011      	strb	r1, [r2, #0]
 80112aa:	001a      	movs	r2, r3
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	189b      	adds	r3, r3, r2
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	021b      	lsls	r3, r3, #8
 80112b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80112b6:	4313      	orrs	r3, r2
 80112b8:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80112ba:	1cfb      	adds	r3, r7, #3
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	1cfa      	adds	r2, r7, #3
 80112c0:	1c59      	adds	r1, r3, #1
 80112c2:	7011      	strb	r1, [r2, #0]
 80112c4:	001a      	movs	r2, r3
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	189b      	adds	r3, r3, r2
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	041b      	lsls	r3, r3, #16
 80112ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80112d0:	4313      	orrs	r3, r2
 80112d2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80112d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112d6:	2264      	movs	r2, #100	; 0x64
 80112d8:	4353      	muls	r3, r2
 80112da:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80112dc:	1cfb      	adds	r3, r7, #3
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	1cfa      	adds	r2, r7, #3
 80112e2:	1c59      	adds	r1, r3, #1
 80112e4:	7011      	strb	r1, [r2, #0]
 80112e6:	001a      	movs	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	189b      	adds	r3, r3, r2
 80112ec:	781a      	ldrb	r2, [r3, #0]
 80112ee:	2677      	movs	r6, #119	; 0x77
 80112f0:	19bb      	adds	r3, r7, r6
 80112f2:	210f      	movs	r1, #15
 80112f4:	400a      	ands	r2, r1
 80112f6:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80112f8:	0005      	movs	r5, r0
 80112fa:	183c      	adds	r4, r7, r0
 80112fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80112fe:	19bb      	adds	r3, r7, r6
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	0011      	movs	r1, r2
 8011304:	0018      	movs	r0, r3
 8011306:	f003 fa45 	bl	8014794 <LoRaMacClassBPingSlotChannelReq>
 801130a:	0003      	movs	r3, r0
 801130c:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 801130e:	2168      	movs	r1, #104	; 0x68
 8011310:	187b      	adds	r3, r7, r1
 8011312:	197a      	adds	r2, r7, r5
 8011314:	7812      	ldrb	r2, [r2, #0]
 8011316:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8011318:	187b      	adds	r3, r7, r1
 801131a:	2201      	movs	r2, #1
 801131c:	0019      	movs	r1, r3
 801131e:	2011      	movs	r0, #17
 8011320:	f003 fbd6 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                break;
 8011324:	e08e      	b.n	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8011326:	200e      	movs	r0, #14
 8011328:	f003 ff64 	bl	80151f4 <LoRaMacConfirmQueueIsCmdActive>
 801132c:	1e03      	subs	r3, r0, #0
 801132e:	d100      	bne.n	8011332 <ProcessMacCommands+0x9da>
 8011330:	e088      	b.n	8011444 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011332:	210e      	movs	r1, #14
 8011334:	2000      	movs	r0, #0
 8011336:	f003 fec1 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801133a:	207e      	movs	r0, #126	; 0x7e
 801133c:	183b      	adds	r3, r7, r0
 801133e:	2200      	movs	r2, #0
 8011340:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 8011342:	247d      	movs	r4, #125	; 0x7d
 8011344:	193b      	adds	r3, r7, r4
 8011346:	2200      	movs	r2, #0
 8011348:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801134a:	1cfb      	adds	r3, r7, #3
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	1cfa      	adds	r2, r7, #3
 8011350:	1c59      	adds	r1, r3, #1
 8011352:	7011      	strb	r1, [r2, #0]
 8011354:	001a      	movs	r2, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	189b      	adds	r3, r3, r2
 801135a:	781a      	ldrb	r2, [r3, #0]
 801135c:	183b      	adds	r3, r7, r0
 801135e:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011360:	1cfb      	adds	r3, r7, #3
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	1cfa      	adds	r2, r7, #3
 8011366:	1c59      	adds	r1, r3, #1
 8011368:	7011      	strb	r1, [r2, #0]
 801136a:	001a      	movs	r2, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	189b      	adds	r3, r3, r2
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	021b      	lsls	r3, r3, #8
 8011374:	b21a      	sxth	r2, r3
 8011376:	183b      	adds	r3, r7, r0
 8011378:	2100      	movs	r1, #0
 801137a:	5e5b      	ldrsh	r3, [r3, r1]
 801137c:	4313      	orrs	r3, r2
 801137e:	b21a      	sxth	r2, r3
 8011380:	183b      	adds	r3, r7, r0
 8011382:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 8011384:	1cfb      	adds	r3, r7, #3
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	1cfa      	adds	r2, r7, #3
 801138a:	1c59      	adds	r1, r3, #1
 801138c:	7011      	strb	r1, [r2, #0]
 801138e:	001a      	movs	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	189a      	adds	r2, r3, r2
 8011394:	193b      	adds	r3, r7, r4
 8011396:	7812      	ldrb	r2, [r2, #0]
 8011398:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 801139a:	4b34      	ldr	r3, [pc, #208]	; (801146c <ProcessMacCommands+0xb14>)
 801139c:	681a      	ldr	r2, [r3, #0]
 801139e:	193b      	adds	r3, r7, r4
 80113a0:	7819      	ldrb	r1, [r3, #0]
 80113a2:	183b      	adds	r3, r7, r0
 80113a4:	881b      	ldrh	r3, [r3, #0]
 80113a6:	0018      	movs	r0, r3
 80113a8:	f003 fa00 	bl	80147ac <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80113ac:	e04a      	b.n	8011444 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80113ae:	2300      	movs	r3, #0
 80113b0:	2080      	movs	r0, #128	; 0x80
 80113b2:	183a      	adds	r2, r7, r0
 80113b4:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 80113b6:	1cfb      	adds	r3, r7, #3
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	1cfa      	adds	r2, r7, #3
 80113bc:	1c59      	adds	r1, r3, #1
 80113be:	7011      	strb	r1, [r2, #0]
 80113c0:	001a      	movs	r2, r3
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	189b      	adds	r3, r3, r2
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	183a      	adds	r2, r7, r0
 80113ca:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80113cc:	1cfb      	adds	r3, r7, #3
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	1cfa      	adds	r2, r7, #3
 80113d2:	1c59      	adds	r1, r3, #1
 80113d4:	7011      	strb	r1, [r2, #0]
 80113d6:	001a      	movs	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	189b      	adds	r3, r3, r2
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	021b      	lsls	r3, r3, #8
 80113e0:	183a      	adds	r2, r7, r0
 80113e2:	6812      	ldr	r2, [r2, #0]
 80113e4:	4313      	orrs	r3, r2
 80113e6:	183a      	adds	r2, r7, r0
 80113e8:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80113ea:	1cfb      	adds	r3, r7, #3
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	1cfa      	adds	r2, r7, #3
 80113f0:	1c59      	adds	r1, r3, #1
 80113f2:	7011      	strb	r1, [r2, #0]
 80113f4:	001a      	movs	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	189b      	adds	r3, r3, r2
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	041b      	lsls	r3, r3, #16
 80113fe:	183a      	adds	r2, r7, r0
 8011400:	6812      	ldr	r2, [r2, #0]
 8011402:	4313      	orrs	r3, r2
 8011404:	183a      	adds	r2, r7, r0
 8011406:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 8011408:	183b      	adds	r3, r7, r0
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2264      	movs	r2, #100	; 0x64
 801140e:	4353      	muls	r3, r2
 8011410:	183a      	adds	r2, r7, r0
 8011412:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011414:	183b      	adds	r3, r7, r0
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	0018      	movs	r0, r3
 801141a:	f003 f9da 	bl	80147d2 <LoRaMacClassBBeaconFreqReq>
 801141e:	1e03      	subs	r3, r0, #0
 8011420:	d004      	beq.n	801142c <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 8011422:	2368      	movs	r3, #104	; 0x68
 8011424:	18fb      	adds	r3, r7, r3
 8011426:	2201      	movs	r2, #1
 8011428:	701a      	strb	r2, [r3, #0]
 801142a:	e003      	b.n	8011434 <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801142c:	2368      	movs	r3, #104	; 0x68
 801142e:	18fb      	adds	r3, r7, r3
 8011430:	2200      	movs	r2, #0
 8011432:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011434:	2368      	movs	r3, #104	; 0x68
 8011436:	18fb      	adds	r3, r7, r3
 8011438:	2201      	movs	r2, #1
 801143a:	0019      	movs	r1, r3
 801143c:	2013      	movs	r0, #19
 801143e:	f003 fb47 	bl	8014ad0 <LoRaMacCommandsAddCmd>
                }
                break;
 8011442:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 8011444:	1cfa      	adds	r2, r7, #3
 8011446:	1cbb      	adds	r3, r7, #2
 8011448:	7812      	ldrb	r2, [r2, #0]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	429a      	cmp	r2, r3
 801144e:	d201      	bcs.n	8011454 <ProcessMacCommands+0xafc>
 8011450:	f7ff faa0 	bl	8010994 <ProcessMacCommands+0x3c>
 8011454:	e002      	b.n	801145c <ProcessMacCommands+0xb04>
            return;
 8011456:	46c0      	nop			; (mov r8, r8)
 8011458:	e000      	b.n	801145c <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801145a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801145c:	46bd      	mov	sp, r7
 801145e:	b023      	add	sp, #140	; 0x8c
 8011460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011462:	46c0      	nop			; (mov r8, r8)
 8011464:	12d53d80 	.word	0x12d53d80
 8011468:	2000054c 	.word	0x2000054c
 801146c:	20001690 	.word	0x20001690

08011470 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011472:	b08f      	sub	sp, #60	; 0x3c
 8011474:	af02      	add	r7, sp, #8
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	0008      	movs	r0, r1
 801147a:	607a      	str	r2, [r7, #4]
 801147c:	0019      	movs	r1, r3
 801147e:	230b      	movs	r3, #11
 8011480:	18fb      	adds	r3, r7, r3
 8011482:	1c02      	adds	r2, r0, #0
 8011484:	701a      	strb	r2, [r3, #0]
 8011486:	2308      	movs	r3, #8
 8011488:	18fb      	adds	r3, r7, r3
 801148a:	1c0a      	adds	r2, r1, #0
 801148c:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801148e:	232f      	movs	r3, #47	; 0x2f
 8011490:	18fb      	adds	r3, r7, r3
 8011492:	2203      	movs	r2, #3
 8011494:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011496:	4b90      	ldr	r3, [pc, #576]	; (80116d8 <Send+0x268>)
 8011498:	4a90      	ldr	r2, [pc, #576]	; (80116dc <Send+0x26c>)
 801149a:	589a      	ldr	r2, [r3, r2]
 801149c:	232e      	movs	r3, #46	; 0x2e
 801149e:	18fb      	adds	r3, r7, r3
 80114a0:	2185      	movs	r1, #133	; 0x85
 80114a2:	5c52      	ldrb	r2, [r2, r1]
 80114a4:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80114a6:	4b8c      	ldr	r3, [pc, #560]	; (80116d8 <Send+0x268>)
 80114a8:	4a8c      	ldr	r2, [pc, #560]	; (80116dc <Send+0x26c>)
 80114aa:	589a      	ldr	r2, [r3, r2]
 80114ac:	232d      	movs	r3, #45	; 0x2d
 80114ae:	18fb      	adds	r3, r7, r3
 80114b0:	2184      	movs	r1, #132	; 0x84
 80114b2:	5c52      	ldrb	r2, [r2, r1]
 80114b4:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80114b6:	4b88      	ldr	r3, [pc, #544]	; (80116d8 <Send+0x268>)
 80114b8:	4a88      	ldr	r2, [pc, #544]	; (80116dc <Send+0x26c>)
 80114ba:	589b      	ldr	r3, [r3, r2]
 80114bc:	2280      	movs	r2, #128	; 0x80
 80114be:	589b      	ldr	r3, [r3, r2]
 80114c0:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80114c2:	4b85      	ldr	r3, [pc, #532]	; (80116d8 <Send+0x268>)
 80114c4:	4a85      	ldr	r2, [pc, #532]	; (80116dc <Send+0x26c>)
 80114c6:	589a      	ldr	r2, [r3, r2]
 80114c8:	23b2      	movs	r3, #178	; 0xb2
 80114ca:	005b      	lsls	r3, r3, #1
 80114cc:	5cd3      	ldrb	r3, [r2, r3]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d101      	bne.n	80114d6 <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80114d2:	2307      	movs	r3, #7
 80114d4:	e0fb      	b.n	80116ce <Send+0x25e>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 80114d6:	4b80      	ldr	r3, [pc, #512]	; (80116d8 <Send+0x268>)
 80114d8:	4a80      	ldr	r2, [pc, #512]	; (80116dc <Send+0x26c>)
 80114da:	589b      	ldr	r3, [r3, r2]
 80114dc:	22c8      	movs	r2, #200	; 0xc8
 80114de:	5c9b      	ldrb	r3, [r3, r2]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d106      	bne.n	80114f2 <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80114e4:	4b7c      	ldr	r3, [pc, #496]	; (80116d8 <Send+0x268>)
 80114e6:	4a7d      	ldr	r2, [pc, #500]	; (80116dc <Send+0x26c>)
 80114e8:	589a      	ldr	r2, [r3, r2]
 80114ea:	23aa      	movs	r3, #170	; 0xaa
 80114ec:	005b      	lsls	r3, r3, #1
 80114ee:	2100      	movs	r1, #0
 80114f0:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 80114f2:	242c      	movs	r4, #44	; 0x2c
 80114f4:	193b      	adds	r3, r7, r4
 80114f6:	2200      	movs	r2, #0
 80114f8:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 80114fa:	193b      	adds	r3, r7, r4
 80114fc:	781a      	ldrb	r2, [r3, #0]
 80114fe:	210f      	movs	r1, #15
 8011500:	438a      	bics	r2, r1
 8011502:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8011504:	4b74      	ldr	r3, [pc, #464]	; (80116d8 <Send+0x268>)
 8011506:	4a75      	ldr	r2, [pc, #468]	; (80116dc <Send+0x26c>)
 8011508:	589b      	ldr	r3, [r3, r2]
 801150a:	227e      	movs	r2, #126	; 0x7e
 801150c:	5c9a      	ldrb	r2, [r3, r2]
 801150e:	193b      	adds	r3, r7, r4
 8011510:	01d0      	lsls	r0, r2, #7
 8011512:	781a      	ldrb	r2, [r3, #0]
 8011514:	217f      	movs	r1, #127	; 0x7f
 8011516:	400a      	ands	r2, r1
 8011518:	1c11      	adds	r1, r2, #0
 801151a:	1c02      	adds	r2, r0, #0
 801151c:	430a      	orrs	r2, r1
 801151e:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011520:	4b6d      	ldr	r3, [pc, #436]	; (80116d8 <Send+0x268>)
 8011522:	4a6e      	ldr	r2, [pc, #440]	; (80116dc <Send+0x26c>)
 8011524:	589b      	ldr	r3, [r3, r2]
 8011526:	227c      	movs	r2, #124	; 0x7c
 8011528:	5c9b      	ldrb	r3, [r3, r2]
 801152a:	2b01      	cmp	r3, #1
 801152c:	d105      	bne.n	801153a <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 801152e:	193b      	adds	r3, r7, r4
 8011530:	781a      	ldrb	r2, [r3, #0]
 8011532:	2110      	movs	r1, #16
 8011534:	430a      	orrs	r2, r1
 8011536:	701a      	strb	r2, [r3, #0]
 8011538:	e005      	b.n	8011546 <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801153a:	232c      	movs	r3, #44	; 0x2c
 801153c:	18fb      	adds	r3, r7, r3
 801153e:	781a      	ldrb	r2, [r3, #0]
 8011540:	2110      	movs	r1, #16
 8011542:	438a      	bics	r2, r1
 8011544:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8011546:	4b64      	ldr	r3, [pc, #400]	; (80116d8 <Send+0x268>)
 8011548:	4a64      	ldr	r2, [pc, #400]	; (80116dc <Send+0x26c>)
 801154a:	589a      	ldr	r2, [r3, r2]
 801154c:	234c      	movs	r3, #76	; 0x4c
 801154e:	33ff      	adds	r3, #255	; 0xff
 8011550:	5cd3      	ldrb	r3, [r2, r3]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d005      	beq.n	8011562 <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 8011556:	232c      	movs	r3, #44	; 0x2c
 8011558:	18fb      	adds	r3, r7, r3
 801155a:	781a      	ldrb	r2, [r3, #0]
 801155c:	2120      	movs	r1, #32
 801155e:	430a      	orrs	r2, r1
 8011560:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8011562:	4b5d      	ldr	r3, [pc, #372]	; (80116d8 <Send+0x268>)
 8011564:	4a5d      	ldr	r2, [pc, #372]	; (80116dc <Send+0x26c>)
 8011566:	5899      	ldr	r1, [r3, r2]
 8011568:	2014      	movs	r0, #20
 801156a:	183b      	adds	r3, r7, r0
 801156c:	22b0      	movs	r2, #176	; 0xb0
 801156e:	0052      	lsls	r2, r2, #1
 8011570:	588a      	ldr	r2, [r1, r2]
 8011572:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 8011574:	0001      	movs	r1, r0
 8011576:	187b      	adds	r3, r7, r1
 8011578:	2201      	movs	r2, #1
 801157a:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 801157c:	242c      	movs	r4, #44	; 0x2c
 801157e:	193b      	adds	r3, r7, r4
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	061b      	lsls	r3, r3, #24
 8011584:	0fdb      	lsrs	r3, r3, #31
 8011586:	b2db      	uxtb	r3, r3
 8011588:	1e5a      	subs	r2, r3, #1
 801158a:	4193      	sbcs	r3, r2
 801158c:	b2da      	uxtb	r2, r3
 801158e:	187b      	adds	r3, r7, r1
 8011590:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8011592:	4b51      	ldr	r3, [pc, #324]	; (80116d8 <Send+0x268>)
 8011594:	4a51      	ldr	r2, [pc, #324]	; (80116dc <Send+0x26c>)
 8011596:	589b      	ldr	r3, [r3, r2]
 8011598:	2280      	movs	r2, #128	; 0x80
 801159a:	589a      	ldr	r2, [r3, r2]
 801159c:	0008      	movs	r0, r1
 801159e:	183b      	adds	r3, r7, r0
 80115a0:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80115a2:	4a4d      	ldr	r2, [pc, #308]	; (80116d8 <Send+0x268>)
 80115a4:	23fd      	movs	r3, #253	; 0xfd
 80115a6:	009b      	lsls	r3, r3, #2
 80115a8:	5ad2      	ldrh	r2, [r2, r3]
 80115aa:	183b      	adds	r3, r7, r0
 80115ac:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80115ae:	4b4a      	ldr	r3, [pc, #296]	; (80116d8 <Send+0x268>)
 80115b0:	4a4b      	ldr	r2, [pc, #300]	; (80116e0 <Send+0x270>)
 80115b2:	5a9a      	ldrh	r2, [r3, r2]
 80115b4:	183b      	adds	r3, r7, r0
 80115b6:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80115b8:	4b47      	ldr	r3, [pc, #284]	; (80116d8 <Send+0x268>)
 80115ba:	4a48      	ldr	r2, [pc, #288]	; (80116dc <Send+0x26c>)
 80115bc:	589b      	ldr	r3, [r3, r2]
 80115be:	2285      	movs	r2, #133	; 0x85
 80115c0:	569a      	ldrsb	r2, [r3, r2]
 80115c2:	183b      	adds	r3, r7, r0
 80115c4:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80115c6:	4b44      	ldr	r3, [pc, #272]	; (80116d8 <Send+0x268>)
 80115c8:	4a44      	ldr	r2, [pc, #272]	; (80116dc <Send+0x26c>)
 80115ca:	589b      	ldr	r3, [r3, r2]
 80115cc:	2284      	movs	r2, #132	; 0x84
 80115ce:	569a      	ldrsb	r2, [r3, r2]
 80115d0:	183b      	adds	r3, r7, r0
 80115d2:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80115d4:	4b40      	ldr	r3, [pc, #256]	; (80116d8 <Send+0x268>)
 80115d6:	4a41      	ldr	r2, [pc, #260]	; (80116dc <Send+0x26c>)
 80115d8:	589b      	ldr	r3, [r3, r2]
 80115da:	22b8      	movs	r2, #184	; 0xb8
 80115dc:	5c9a      	ldrb	r2, [r3, r2]
 80115de:	183b      	adds	r3, r7, r0
 80115e0:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 80115e2:	4b3d      	ldr	r3, [pc, #244]	; (80116d8 <Send+0x268>)
 80115e4:	4a3d      	ldr	r2, [pc, #244]	; (80116dc <Send+0x26c>)
 80115e6:	589b      	ldr	r3, [r3, r2]
 80115e8:	781a      	ldrb	r2, [r3, #0]
 80115ea:	183b      	adds	r3, r7, r0
 80115ec:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80115ee:	4b3a      	ldr	r3, [pc, #232]	; (80116d8 <Send+0x268>)
 80115f0:	4a3a      	ldr	r2, [pc, #232]	; (80116dc <Send+0x26c>)
 80115f2:	589b      	ldr	r3, [r3, r2]
 80115f4:	3385      	adds	r3, #133	; 0x85
 80115f6:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 80115f8:	4b37      	ldr	r3, [pc, #220]	; (80116d8 <Send+0x268>)
 80115fa:	4a38      	ldr	r2, [pc, #224]	; (80116dc <Send+0x26c>)
 80115fc:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80115fe:	3384      	adds	r3, #132	; 0x84
 8011600:	001a      	movs	r2, r3
 8011602:	2328      	movs	r3, #40	; 0x28
 8011604:	18fb      	adds	r3, r7, r3
 8011606:	1838      	adds	r0, r7, r0
 8011608:	f002 fff7 	bl	80145fa <LoRaMacAdrCalcNext>
 801160c:	0003      	movs	r3, r0
 801160e:	0019      	movs	r1, r3
 8011610:	0026      	movs	r6, r4
 8011612:	193b      	adds	r3, r7, r4
 8011614:	2201      	movs	r2, #1
 8011616:	400a      	ands	r2, r1
 8011618:	0190      	lsls	r0, r2, #6
 801161a:	781a      	ldrb	r2, [r3, #0]
 801161c:	2140      	movs	r1, #64	; 0x40
 801161e:	438a      	bics	r2, r1
 8011620:	1c11      	adds	r1, r2, #0
 8011622:	1c02      	adds	r2, r0, #0
 8011624:	430a      	orrs	r2, r1
 8011626:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011628:	222f      	movs	r2, #47	; 0x2f
 801162a:	18bc      	adds	r4, r7, r2
 801162c:	687d      	ldr	r5, [r7, #4]
 801162e:	230b      	movs	r3, #11
 8011630:	18fb      	adds	r3, r7, r3
 8011632:	781a      	ldrb	r2, [r3, #0]
 8011634:	19b9      	adds	r1, r7, r6
 8011636:	68f8      	ldr	r0, [r7, #12]
 8011638:	2308      	movs	r3, #8
 801163a:	18fb      	adds	r3, r7, r3
 801163c:	881b      	ldrh	r3, [r3, #0]
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	002b      	movs	r3, r5
 8011642:	f000 fd07 	bl	8012054 <PrepareFrame>
 8011646:	0003      	movs	r3, r0
 8011648:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801164a:	222f      	movs	r2, #47	; 0x2f
 801164c:	18bb      	adds	r3, r7, r2
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d003      	beq.n	801165c <Send+0x1ec>
 8011654:	18bb      	adds	r3, r7, r2
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	2b0a      	cmp	r3, #10
 801165a:	d10c      	bne.n	8011676 <Send+0x206>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 801165c:	232f      	movs	r3, #47	; 0x2f
 801165e:	18fc      	adds	r4, r7, r3
 8011660:	2340      	movs	r3, #64	; 0x40
 8011662:	2208      	movs	r2, #8
 8011664:	4694      	mov	ip, r2
 8011666:	44bc      	add	ip, r7
 8011668:	4463      	add	r3, ip
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	0018      	movs	r0, r3
 801166e:	f000 f9cd 	bl	8011a0c <ScheduleTx>
 8011672:	0003      	movs	r3, r0
 8011674:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011676:	232f      	movs	r3, #47	; 0x2f
 8011678:	18fb      	adds	r3, r7, r3
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d010      	beq.n	80116a2 <Send+0x232>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8011680:	4b15      	ldr	r3, [pc, #84]	; (80116d8 <Send+0x268>)
 8011682:	4a16      	ldr	r2, [pc, #88]	; (80116dc <Send+0x26c>)
 8011684:	589b      	ldr	r3, [r3, r2]
 8011686:	222e      	movs	r2, #46	; 0x2e
 8011688:	18ba      	adds	r2, r7, r2
 801168a:	2185      	movs	r1, #133	; 0x85
 801168c:	7812      	ldrb	r2, [r2, #0]
 801168e:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8011690:	4b11      	ldr	r3, [pc, #68]	; (80116d8 <Send+0x268>)
 8011692:	4a12      	ldr	r2, [pc, #72]	; (80116dc <Send+0x26c>)
 8011694:	589b      	ldr	r3, [r3, r2]
 8011696:	222d      	movs	r2, #45	; 0x2d
 8011698:	18ba      	adds	r2, r7, r2
 801169a:	2184      	movs	r1, #132	; 0x84
 801169c:	7812      	ldrb	r2, [r2, #0]
 801169e:	545a      	strb	r2, [r3, r1]
 80116a0:	e012      	b.n	80116c8 <Send+0x258>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 80116a2:	4b0d      	ldr	r3, [pc, #52]	; (80116d8 <Send+0x268>)
 80116a4:	4a0d      	ldr	r2, [pc, #52]	; (80116dc <Send+0x26c>)
 80116a6:	589a      	ldr	r2, [r3, r2]
 80116a8:	234c      	movs	r3, #76	; 0x4c
 80116aa:	33ff      	adds	r3, #255	; 0xff
 80116ac:	2100      	movs	r1, #0
 80116ae:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 80116b0:	4b09      	ldr	r3, [pc, #36]	; (80116d8 <Send+0x268>)
 80116b2:	4a0a      	ldr	r2, [pc, #40]	; (80116dc <Send+0x26c>)
 80116b4:	589b      	ldr	r3, [r3, r2]
 80116b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116b8:	2180      	movs	r1, #128	; 0x80
 80116ba:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80116bc:	f003 fa92 	bl	8014be4 <LoRaMacCommandsRemoveNoneStickyCmds>
 80116c0:	1e03      	subs	r3, r0, #0
 80116c2:	d001      	beq.n	80116c8 <Send+0x258>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80116c4:	2313      	movs	r3, #19
 80116c6:	e002      	b.n	80116ce <Send+0x25e>
        }
    }
    return status;
 80116c8:	232f      	movs	r3, #47	; 0x2f
 80116ca:	18fb      	adds	r3, r7, r3
 80116cc:	781b      	ldrb	r3, [r3, #0]
}
 80116ce:	0018      	movs	r0, r3
 80116d0:	46bd      	mov	sp, r7
 80116d2:	b00d      	add	sp, #52	; 0x34
 80116d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116d6:	46c0      	nop			; (mov r8, r8)
 80116d8:	2000054c 	.word	0x2000054c
 80116dc:	00000484 	.word	0x00000484
 80116e0:	000003f6 	.word	0x000003f6

080116e4 <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 80116e4:	b5b0      	push	{r4, r5, r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	0002      	movs	r2, r0
 80116ec:	1dfb      	adds	r3, r7, #7
 80116ee:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80116f0:	230e      	movs	r3, #14
 80116f2:	18fb      	adds	r3, r7, r3
 80116f4:	2200      	movs	r2, #0
 80116f6:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 80116f8:	240c      	movs	r4, #12
 80116fa:	193b      	adds	r3, r7, r4
 80116fc:	2200      	movs	r2, #0
 80116fe:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 8011700:	250f      	movs	r5, #15
 8011702:	197b      	adds	r3, r7, r5
 8011704:	2201      	movs	r2, #1
 8011706:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 8011708:	1dfb      	adds	r3, r7, #7
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	2bff      	cmp	r3, #255	; 0xff
 801170e:	d130      	bne.n	8011772 <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011710:	2000      	movs	r0, #0
 8011712:	f7fe ff7b 	bl	801060c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011716:	4a21      	ldr	r2, [pc, #132]	; (801179c <SendReJoinReq+0xb8>)
 8011718:	2382      	movs	r3, #130	; 0x82
 801171a:	005b      	lsls	r3, r3, #1
 801171c:	2100      	movs	r1, #0
 801171e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011720:	4a1e      	ldr	r2, [pc, #120]	; (801179c <SendReJoinReq+0xb8>)
 8011722:	2384      	movs	r3, #132	; 0x84
 8011724:	005b      	lsls	r3, r3, #1
 8011726:	491e      	ldr	r1, [pc, #120]	; (80117a0 <SendReJoinReq+0xbc>)
 8011728:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801172a:	4a1c      	ldr	r2, [pc, #112]	; (801179c <SendReJoinReq+0xb8>)
 801172c:	2386      	movs	r3, #134	; 0x86
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	21ff      	movs	r1, #255	; 0xff
 8011732:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011734:	193b      	adds	r3, r7, r4
 8011736:	781a      	ldrb	r2, [r3, #0]
 8011738:	211f      	movs	r1, #31
 801173a:	400a      	ands	r2, r1
 801173c:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801173e:	193b      	adds	r3, r7, r4
 8011740:	7819      	ldrb	r1, [r3, #0]
 8011742:	4a16      	ldr	r2, [pc, #88]	; (801179c <SendReJoinReq+0xb8>)
 8011744:	230e      	movs	r3, #14
 8011746:	33ff      	adds	r3, #255	; 0xff
 8011748:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 801174a:	f7fc fa7b 	bl	800dc44 <SecureElementGetJoinEui>
 801174e:	0001      	movs	r1, r0
 8011750:	4b14      	ldr	r3, [pc, #80]	; (80117a4 <SendReJoinReq+0xc0>)
 8011752:	2208      	movs	r2, #8
 8011754:	0018      	movs	r0, r3
 8011756:	f007 fde9 	bl	801932c <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 801175a:	f7fc fa4f 	bl	800dbfc <SecureElementGetDevEui>
 801175e:	0001      	movs	r1, r0
 8011760:	4b11      	ldr	r3, [pc, #68]	; (80117a8 <SendReJoinReq+0xc4>)
 8011762:	2208      	movs	r2, #8
 8011764:	0018      	movs	r0, r3
 8011766:	f007 fde1 	bl	801932c <memcpy1>

            allowDelayedTx = false;
 801176a:	197b      	adds	r3, r7, r5
 801176c:	2200      	movs	r2, #0
 801176e:	701a      	strb	r2, [r3, #0]

            break;
 8011770:	e004      	b.n	801177c <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011772:	230e      	movs	r3, #14
 8011774:	18fb      	adds	r3, r7, r3
 8011776:	2202      	movs	r2, #2
 8011778:	701a      	strb	r2, [r3, #0]
            break;
 801177a:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801177c:	250e      	movs	r5, #14
 801177e:	197c      	adds	r4, r7, r5
 8011780:	230f      	movs	r3, #15
 8011782:	18fb      	adds	r3, r7, r3
 8011784:	781b      	ldrb	r3, [r3, #0]
 8011786:	0018      	movs	r0, r3
 8011788:	f000 f940 	bl	8011a0c <ScheduleTx>
 801178c:	0003      	movs	r3, r0
 801178e:	7023      	strb	r3, [r4, #0]
    return status;
 8011790:	197b      	adds	r3, r7, r5
 8011792:	781b      	ldrb	r3, [r3, #0]
}
 8011794:	0018      	movs	r0, r3
 8011796:	46bd      	mov	sp, r7
 8011798:	b004      	add	sp, #16
 801179a:	bdb0      	pop	{r4, r5, r7, pc}
 801179c:	2000054c 	.word	0x2000054c
 80117a0:	2000054e 	.word	0x2000054e
 80117a4:	2000065a 	.word	0x2000065a
 80117a8:	20000662 	.word	0x20000662

080117ac <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80117b0:	f002 ffa2 	bl	80146f8 <LoRaMacClassBIsBeaconExpected>
 80117b4:	1e03      	subs	r3, r0, #0
 80117b6:	d001      	beq.n	80117bc <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80117b8:	230e      	movs	r3, #14
 80117ba:	e013      	b.n	80117e4 <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80117bc:	4b0b      	ldr	r3, [pc, #44]	; (80117ec <CheckForClassBCollision+0x40>)
 80117be:	4a0c      	ldr	r2, [pc, #48]	; (80117f0 <CheckForClassBCollision+0x44>)
 80117c0:	589b      	ldr	r3, [r3, r2]
 80117c2:	227c      	movs	r2, #124	; 0x7c
 80117c4:	5c9b      	ldrb	r3, [r3, r2]
 80117c6:	2b01      	cmp	r3, #1
 80117c8:	d10b      	bne.n	80117e2 <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80117ca:	f002 ff9b 	bl	8014704 <LoRaMacClassBIsPingExpected>
 80117ce:	1e03      	subs	r3, r0, #0
 80117d0:	d001      	beq.n	80117d6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80117d2:	230f      	movs	r3, #15
 80117d4:	e006      	b.n	80117e4 <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80117d6:	f002 ff9b 	bl	8014710 <LoRaMacClassBIsMulticastExpected>
 80117da:	1e03      	subs	r3, r0, #0
 80117dc:	d001      	beq.n	80117e2 <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80117de:	230f      	movs	r3, #15
 80117e0:	e000      	b.n	80117e4 <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 80117e2:	2300      	movs	r3, #0
}
 80117e4:	0018      	movs	r0, r3
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	46c0      	nop			; (mov r8, r8)
 80117ec:	2000054c 	.word	0x2000054c
 80117f0:	00000484 	.word	0x00000484

080117f4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80117f4:	b5b0      	push	{r4, r5, r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80117fa:	4b44      	ldr	r3, [pc, #272]	; (801190c <ComputeRxWindowParameters+0x118>)
 80117fc:	4a44      	ldr	r2, [pc, #272]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 80117fe:	589b      	ldr	r3, [r3, r2]
 8011800:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011802:	4b42      	ldr	r3, [pc, #264]	; (801190c <ComputeRxWindowParameters+0x118>)
 8011804:	4a42      	ldr	r2, [pc, #264]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 8011806:	589b      	ldr	r3, [r3, r2]
 8011808:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 801180a:	4b40      	ldr	r3, [pc, #256]	; (801190c <ComputeRxWindowParameters+0x118>)
 801180c:	4a40      	ldr	r2, [pc, #256]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 801180e:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011810:	22b9      	movs	r2, #185	; 0xb9
 8011812:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011814:	4b3d      	ldr	r3, [pc, #244]	; (801190c <ComputeRxWindowParameters+0x118>)
 8011816:	4a3e      	ldr	r2, [pc, #248]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 8011818:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 801181a:	2285      	movs	r2, #133	; 0x85
 801181c:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 801181e:	4b3b      	ldr	r3, [pc, #236]	; (801190c <ComputeRxWindowParameters+0x118>)
 8011820:	4d3b      	ldr	r5, [pc, #236]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 8011822:	595b      	ldr	r3, [r3, r5]
 8011824:	25a5      	movs	r5, #165	; 0xa5
 8011826:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011828:	b25b      	sxtb	r3, r3
 801182a:	f005 fad1 	bl	8016dd0 <RegionApplyDrOffset>
 801182e:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011830:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011832:	4b36      	ldr	r3, [pc, #216]	; (801190c <ComputeRxWindowParameters+0x118>)
 8011834:	4a36      	ldr	r2, [pc, #216]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 8011836:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011838:	228c      	movs	r2, #140	; 0x8c
 801183a:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 801183c:	4b33      	ldr	r3, [pc, #204]	; (801190c <ComputeRxWindowParameters+0x118>)
 801183e:	4834      	ldr	r0, [pc, #208]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 8011840:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011842:	2088      	movs	r0, #136	; 0x88
 8011844:	5818      	ldr	r0, [r3, r0]
 8011846:	4b33      	ldr	r3, [pc, #204]	; (8011914 <ComputeRxWindowParameters+0x120>)
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	0003      	movs	r3, r0
 801184c:	0020      	movs	r0, r4
 801184e:	f005 f99d 	bl	8016b8c <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011852:	4b2e      	ldr	r3, [pc, #184]	; (801190c <ComputeRxWindowParameters+0x118>)
 8011854:	4a2e      	ldr	r2, [pc, #184]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 8011856:	589b      	ldr	r3, [r3, r2]
 8011858:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 801185a:	4b2c      	ldr	r3, [pc, #176]	; (801190c <ComputeRxWindowParameters+0x118>)
 801185c:	4a2c      	ldr	r2, [pc, #176]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 801185e:	589b      	ldr	r3, [r3, r2]
 8011860:	22ac      	movs	r2, #172	; 0xac
 8011862:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011864:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011866:	4b29      	ldr	r3, [pc, #164]	; (801190c <ComputeRxWindowParameters+0x118>)
 8011868:	4a29      	ldr	r2, [pc, #164]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 801186a:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801186c:	228c      	movs	r2, #140	; 0x8c
 801186e:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011870:	4b26      	ldr	r3, [pc, #152]	; (801190c <ComputeRxWindowParameters+0x118>)
 8011872:	4c27      	ldr	r4, [pc, #156]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 8011874:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011876:	2488      	movs	r4, #136	; 0x88
 8011878:	591c      	ldr	r4, [r3, r4]
 801187a:	4b27      	ldr	r3, [pc, #156]	; (8011918 <ComputeRxWindowParameters+0x124>)
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	0023      	movs	r3, r4
 8011880:	f005 f984 	bl	8016b8c <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011884:	4b21      	ldr	r3, [pc, #132]	; (801190c <ComputeRxWindowParameters+0x118>)
 8011886:	4a22      	ldr	r2, [pc, #136]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 8011888:	589b      	ldr	r3, [r3, r2]
 801188a:	2294      	movs	r2, #148	; 0x94
 801188c:	589b      	ldr	r3, [r3, r2]
 801188e:	491f      	ldr	r1, [pc, #124]	; (801190c <ComputeRxWindowParameters+0x118>)
 8011890:	22f1      	movs	r2, #241	; 0xf1
 8011892:	0092      	lsls	r2, r2, #2
 8011894:	588a      	ldr	r2, [r1, r2]
 8011896:	1899      	adds	r1, r3, r2
 8011898:	4a1c      	ldr	r2, [pc, #112]	; (801190c <ComputeRxWindowParameters+0x118>)
 801189a:	23ec      	movs	r3, #236	; 0xec
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80118a0:	4b1a      	ldr	r3, [pc, #104]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118a2:	4a1b      	ldr	r2, [pc, #108]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 80118a4:	589b      	ldr	r3, [r3, r2]
 80118a6:	2298      	movs	r2, #152	; 0x98
 80118a8:	589b      	ldr	r3, [r3, r2]
 80118aa:	4918      	ldr	r1, [pc, #96]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118ac:	22f6      	movs	r2, #246	; 0xf6
 80118ae:	0092      	lsls	r2, r2, #2
 80118b0:	588a      	ldr	r2, [r1, r2]
 80118b2:	1899      	adds	r1, r3, r2
 80118b4:	4a15      	ldr	r2, [pc, #84]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118b6:	23ed      	movs	r3, #237	; 0xed
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80118bc:	4b13      	ldr	r3, [pc, #76]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118be:	4a14      	ldr	r2, [pc, #80]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 80118c0:	589a      	ldr	r2, [r3, r2]
 80118c2:	23b2      	movs	r3, #178	; 0xb2
 80118c4:	005b      	lsls	r3, r3, #1
 80118c6:	5cd3      	ldrb	r3, [r2, r3]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d11b      	bne.n	8011904 <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80118cc:	4b0f      	ldr	r3, [pc, #60]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118ce:	4a10      	ldr	r2, [pc, #64]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 80118d0:	589b      	ldr	r3, [r3, r2]
 80118d2:	229c      	movs	r2, #156	; 0x9c
 80118d4:	589b      	ldr	r3, [r3, r2]
 80118d6:	490d      	ldr	r1, [pc, #52]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118d8:	22f1      	movs	r2, #241	; 0xf1
 80118da:	0092      	lsls	r2, r2, #2
 80118dc:	588a      	ldr	r2, [r1, r2]
 80118de:	1899      	adds	r1, r3, r2
 80118e0:	4a0a      	ldr	r2, [pc, #40]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118e2:	23ec      	movs	r3, #236	; 0xec
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80118e8:	4b08      	ldr	r3, [pc, #32]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118ea:	4a09      	ldr	r2, [pc, #36]	; (8011910 <ComputeRxWindowParameters+0x11c>)
 80118ec:	589b      	ldr	r3, [r3, r2]
 80118ee:	22a0      	movs	r2, #160	; 0xa0
 80118f0:	589b      	ldr	r3, [r3, r2]
 80118f2:	4906      	ldr	r1, [pc, #24]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118f4:	22f6      	movs	r2, #246	; 0xf6
 80118f6:	0092      	lsls	r2, r2, #2
 80118f8:	588a      	ldr	r2, [r1, r2]
 80118fa:	1899      	adds	r1, r3, r2
 80118fc:	4a03      	ldr	r2, [pc, #12]	; (801190c <ComputeRxWindowParameters+0x118>)
 80118fe:	23ed      	movs	r3, #237	; 0xed
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	50d1      	str	r1, [r2, r3]
    }
}
 8011904:	46c0      	nop			; (mov r8, r8)
 8011906:	46bd      	mov	sp, r7
 8011908:	bdb0      	pop	{r4, r5, r7, pc}
 801190a:	46c0      	nop			; (mov r8, r8)
 801190c:	2000054c 	.word	0x2000054c
 8011910:	00000484 	.word	0x00000484
 8011914:	20000904 	.word	0x20000904
 8011918:	20000918 	.word	0x20000918

0801191c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011922:	2300      	movs	r3, #0
 8011924:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8011926:	4b15      	ldr	r3, [pc, #84]	; (801197c <VerifyTxFrame+0x60>)
 8011928:	4a15      	ldr	r2, [pc, #84]	; (8011980 <VerifyTxFrame+0x64>)
 801192a:	589a      	ldr	r2, [r3, r2]
 801192c:	23b2      	movs	r3, #178	; 0xb2
 801192e:	005b      	lsls	r3, r3, #1
 8011930:	5cd3      	ldrb	r3, [r2, r3]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d01d      	beq.n	8011972 <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011936:	1d3b      	adds	r3, r7, #4
 8011938:	0018      	movs	r0, r3
 801193a:	f003 f99f 	bl	8014c7c <LoRaMacCommandsGetSizeSerializedCmds>
 801193e:	1e03      	subs	r3, r0, #0
 8011940:	d001      	beq.n	8011946 <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011942:	2313      	movs	r3, #19
 8011944:	e016      	b.n	8011974 <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8011946:	4b0d      	ldr	r3, [pc, #52]	; (801197c <VerifyTxFrame+0x60>)
 8011948:	4a0e      	ldr	r2, [pc, #56]	; (8011984 <VerifyTxFrame+0x68>)
 801194a:	5c98      	ldrb	r0, [r3, r2]
 801194c:	4b0b      	ldr	r3, [pc, #44]	; (801197c <VerifyTxFrame+0x60>)
 801194e:	4a0c      	ldr	r2, [pc, #48]	; (8011980 <VerifyTxFrame+0x64>)
 8011950:	589b      	ldr	r3, [r3, r2]
 8011952:	2285      	movs	r2, #133	; 0x85
 8011954:	569b      	ldrsb	r3, [r3, r2]
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	b2d2      	uxtb	r2, r2
 801195a:	0019      	movs	r1, r3
 801195c:	f7fe ffb0 	bl	80108c0 <ValidatePayloadLength>
 8011960:	0003      	movs	r3, r0
 8011962:	001a      	movs	r2, r3
 8011964:	2301      	movs	r3, #1
 8011966:	4053      	eors	r3, r2
 8011968:	b2db      	uxtb	r3, r3
 801196a:	2b00      	cmp	r3, #0
 801196c:	d001      	beq.n	8011972 <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 801196e:	2308      	movs	r3, #8
 8011970:	e000      	b.n	8011974 <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 8011972:	2300      	movs	r3, #0
}
 8011974:	0018      	movs	r0, r3
 8011976:	46bd      	mov	sp, r7
 8011978:	b002      	add	sp, #8
 801197a:	bd80      	pop	{r7, pc}
 801197c:	2000054c 	.word	0x2000054c
 8011980:	00000484 	.word	0x00000484
 8011984:	00000237 	.word	0x00000237

08011988 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011988:	b590      	push	{r4, r7, lr}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801198e:	4a1d      	ldr	r2, [pc, #116]	; (8011a04 <SerializeTxFrame+0x7c>)
 8011990:	2382      	movs	r3, #130	; 0x82
 8011992:	005b      	lsls	r3, r3, #1
 8011994:	5cd3      	ldrb	r3, [r2, r3]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d002      	beq.n	80119a0 <SerializeTxFrame+0x18>
 801199a:	2b04      	cmp	r3, #4
 801199c:	d015      	beq.n	80119ca <SerializeTxFrame+0x42>
 801199e:	e029      	b.n	80119f4 <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80119a0:	1dfc      	adds	r4, r7, #7
 80119a2:	4b19      	ldr	r3, [pc, #100]	; (8011a08 <SerializeTxFrame+0x80>)
 80119a4:	0018      	movs	r0, r3
 80119a6:	f004 fe6b 	bl	8016680 <LoRaMacSerializerJoinRequest>
 80119aa:	0003      	movs	r3, r0
 80119ac:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80119ae:	1dfb      	adds	r3, r7, #7
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d001      	beq.n	80119ba <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80119b6:	2311      	movs	r3, #17
 80119b8:	e01f      	b.n	80119fa <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80119ba:	4a12      	ldr	r2, [pc, #72]	; (8011a04 <SerializeTxFrame+0x7c>)
 80119bc:	2386      	movs	r3, #134	; 0x86
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	5cd3      	ldrb	r3, [r2, r3]
 80119c2:	b29a      	uxth	r2, r3
 80119c4:	4b0f      	ldr	r3, [pc, #60]	; (8011a04 <SerializeTxFrame+0x7c>)
 80119c6:	801a      	strh	r2, [r3, #0]
            break;
 80119c8:	e016      	b.n	80119f8 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80119ca:	1dfc      	adds	r4, r7, #7
 80119cc:	4b0e      	ldr	r3, [pc, #56]	; (8011a08 <SerializeTxFrame+0x80>)
 80119ce:	0018      	movs	r0, r3
 80119d0:	f004 fef1 	bl	80167b6 <LoRaMacSerializerData>
 80119d4:	0003      	movs	r3, r0
 80119d6:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80119d8:	1dfb      	adds	r3, r7, #7
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d001      	beq.n	80119e4 <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80119e0:	2311      	movs	r3, #17
 80119e2:	e00a      	b.n	80119fa <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80119e4:	4a07      	ldr	r2, [pc, #28]	; (8011a04 <SerializeTxFrame+0x7c>)
 80119e6:	2386      	movs	r3, #134	; 0x86
 80119e8:	005b      	lsls	r3, r3, #1
 80119ea:	5cd3      	ldrb	r3, [r2, r3]
 80119ec:	b29a      	uxth	r2, r3
 80119ee:	4b05      	ldr	r3, [pc, #20]	; (8011a04 <SerializeTxFrame+0x7c>)
 80119f0:	801a      	strh	r2, [r3, #0]
            break;
 80119f2:	e001      	b.n	80119f8 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80119f4:	2303      	movs	r3, #3
 80119f6:	e000      	b.n	80119fa <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 80119f8:	2300      	movs	r3, #0
}
 80119fa:	0018      	movs	r0, r3
 80119fc:	46bd      	mov	sp, r7
 80119fe:	b003      	add	sp, #12
 8011a00:	bd90      	pop	{r4, r7, pc}
 8011a02:	46c0      	nop			; (mov r8, r8)
 8011a04:	2000054c 	.word	0x2000054c
 8011a08:	20000654 	.word	0x20000654

08011a0c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a0e:	b091      	sub	sp, #68	; 0x44
 8011a10:	af02      	add	r7, sp, #8
 8011a12:	0002      	movs	r2, r0
 8011a14:	230f      	movs	r3, #15
 8011a16:	18fb      	adds	r3, r7, r3
 8011a18:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a1a:	2537      	movs	r5, #55	; 0x37
 8011a1c:	197b      	adds	r3, r7, r5
 8011a1e:	2203      	movs	r2, #3
 8011a20:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011a22:	197c      	adds	r4, r7, r5
 8011a24:	f7ff fec2 	bl	80117ac <CheckForClassBCollision>
 8011a28:	0003      	movs	r3, r0
 8011a2a:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011a2c:	002a      	movs	r2, r5
 8011a2e:	18bb      	adds	r3, r7, r2
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d002      	beq.n	8011a3c <ScheduleTx+0x30>
    {
        return status;
 8011a36:	18bb      	adds	r3, r7, r2
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	e0c3      	b.n	8011bc4 <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 8011a3c:	f000 f940 	bl	8011cc0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011a40:	2537      	movs	r5, #55	; 0x37
 8011a42:	197c      	adds	r4, r7, r5
 8011a44:	f7ff ffa0 	bl	8011988 <SerializeTxFrame>
 8011a48:	0003      	movs	r3, r0
 8011a4a:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011a4c:	002a      	movs	r2, r5
 8011a4e:	18bb      	adds	r3, r7, r2
 8011a50:	781b      	ldrb	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d002      	beq.n	8011a5c <ScheduleTx+0x50>
    {
        return status;
 8011a56:	18bb      	adds	r3, r7, r2
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	e0b3      	b.n	8011bc4 <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8011a5c:	4b5b      	ldr	r3, [pc, #364]	; (8011bcc <ScheduleTx+0x1c0>)
 8011a5e:	4a5c      	ldr	r2, [pc, #368]	; (8011bd0 <ScheduleTx+0x1c4>)
 8011a60:	589a      	ldr	r2, [r3, r2]
 8011a62:	23aa      	movs	r3, #170	; 0xaa
 8011a64:	005b      	lsls	r3, r3, #1
 8011a66:	58d2      	ldr	r2, [r2, r3]
 8011a68:	2414      	movs	r4, #20
 8011a6a:	193b      	adds	r3, r7, r4
 8011a6c:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011a6e:	4b57      	ldr	r3, [pc, #348]	; (8011bcc <ScheduleTx+0x1c0>)
 8011a70:	4a57      	ldr	r2, [pc, #348]	; (8011bd0 <ScheduleTx+0x1c4>)
 8011a72:	589b      	ldr	r3, [r3, r2]
 8011a74:	2285      	movs	r2, #133	; 0x85
 8011a76:	569a      	ldrsb	r2, [r3, r2]
 8011a78:	193b      	adds	r3, r7, r4
 8011a7a:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8011a7c:	4b53      	ldr	r3, [pc, #332]	; (8011bcc <ScheduleTx+0x1c0>)
 8011a7e:	4a54      	ldr	r2, [pc, #336]	; (8011bd0 <ScheduleTx+0x1c4>)
 8011a80:	589b      	ldr	r3, [r3, r2]
 8011a82:	22c9      	movs	r2, #201	; 0xc9
 8011a84:	5c9a      	ldrb	r2, [r3, r2]
 8011a86:	193b      	adds	r3, r7, r4
 8011a88:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8011a8a:	232c      	movs	r3, #44	; 0x2c
 8011a8c:	18fb      	adds	r3, r7, r3
 8011a8e:	0018      	movs	r0, r3
 8011a90:	f00a ff24 	bl	801c8dc <SysTimeGetMcuTime>
 8011a94:	4b4d      	ldr	r3, [pc, #308]	; (8011bcc <ScheduleTx+0x1c0>)
 8011a96:	4a4e      	ldr	r2, [pc, #312]	; (8011bd0 <ScheduleTx+0x1c4>)
 8011a98:	5898      	ldr	r0, [r3, r2]
 8011a9a:	193d      	adds	r5, r7, r4
 8011a9c:	003e      	movs	r6, r7
 8011a9e:	23ac      	movs	r3, #172	; 0xac
 8011aa0:	0059      	lsls	r1, r3, #1
 8011aa2:	232c      	movs	r3, #44	; 0x2c
 8011aa4:	18fa      	adds	r2, r7, r3
 8011aa6:	2404      	movs	r4, #4
 8011aa8:	1843      	adds	r3, r0, r1
 8011aaa:	191c      	adds	r4, r3, r4
 8011aac:	466b      	mov	r3, sp
 8011aae:	6824      	ldr	r4, [r4, #0]
 8011ab0:	601c      	str	r4, [r3, #0]
 8011ab2:	5843      	ldr	r3, [r0, r1]
 8011ab4:	6811      	ldr	r1, [r2, #0]
 8011ab6:	6852      	ldr	r2, [r2, #4]
 8011ab8:	0030      	movs	r0, r6
 8011aba:	f00a fe41 	bl	801c740 <SysTimeSub>
 8011abe:	003a      	movs	r2, r7
 8011ac0:	002b      	movs	r3, r5
 8011ac2:	330c      	adds	r3, #12
 8011ac4:	ca21      	ldmia	r2!, {r0, r5}
 8011ac6:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8011ac8:	4b40      	ldr	r3, [pc, #256]	; (8011bcc <ScheduleTx+0x1c0>)
 8011aca:	4a41      	ldr	r2, [pc, #260]	; (8011bd0 <ScheduleTx+0x1c4>)
 8011acc:	589a      	ldr	r2, [r3, r2]
 8011ace:	23a8      	movs	r3, #168	; 0xa8
 8011ad0:	005b      	lsls	r3, r3, #1
 8011ad2:	58d2      	ldr	r2, [r2, r3]
 8011ad4:	2114      	movs	r1, #20
 8011ad6:	187b      	adds	r3, r7, r1
 8011ad8:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 8011ada:	187b      	adds	r3, r7, r1
 8011adc:	2200      	movs	r2, #0
 8011ade:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011ae0:	187b      	adds	r3, r7, r1
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011ae6:	4b39      	ldr	r3, [pc, #228]	; (8011bcc <ScheduleTx+0x1c0>)
 8011ae8:	881a      	ldrh	r2, [r3, #0]
 8011aea:	187b      	adds	r3, r7, r1
 8011aec:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011aee:	4b37      	ldr	r3, [pc, #220]	; (8011bcc <ScheduleTx+0x1c0>)
 8011af0:	4a37      	ldr	r2, [pc, #220]	; (8011bd0 <ScheduleTx+0x1c4>)
 8011af2:	589a      	ldr	r2, [r3, r2]
 8011af4:	23b2      	movs	r3, #178	; 0xb2
 8011af6:	005b      	lsls	r3, r3, #1
 8011af8:	5cd3      	ldrb	r3, [r2, r3]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d105      	bne.n	8011b0a <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011afe:	187b      	adds	r3, r7, r1
 8011b00:	2201      	movs	r2, #1
 8011b02:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 8011b04:	187b      	adds	r3, r7, r1
 8011b06:	2200      	movs	r2, #0
 8011b08:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8011b0a:	4b30      	ldr	r3, [pc, #192]	; (8011bcc <ScheduleTx+0x1c0>)
 8011b0c:	4a30      	ldr	r2, [pc, #192]	; (8011bd0 <ScheduleTx+0x1c4>)
 8011b0e:	589b      	ldr	r3, [r3, r2]
 8011b10:	7818      	ldrb	r0, [r3, #0]
 8011b12:	4b2e      	ldr	r3, [pc, #184]	; (8011bcc <ScheduleTx+0x1c0>)
 8011b14:	4a2e      	ldr	r2, [pc, #184]	; (8011bd0 <ScheduleTx+0x1c4>)
 8011b16:	589b      	ldr	r3, [r3, r2]
 8011b18:	3355      	adds	r3, #85	; 0x55
 8011b1a:	33ff      	adds	r3, #255	; 0xff
 8011b1c:	2637      	movs	r6, #55	; 0x37
 8011b1e:	19bc      	adds	r4, r7, r6
 8011b20:	4d2c      	ldr	r5, [pc, #176]	; (8011bd4 <ScheduleTx+0x1c8>)
 8011b22:	4a2d      	ldr	r2, [pc, #180]	; (8011bd8 <ScheduleTx+0x1cc>)
 8011b24:	2114      	movs	r1, #20
 8011b26:	1879      	adds	r1, r7, r1
 8011b28:	9300      	str	r3, [sp, #0]
 8011b2a:	002b      	movs	r3, r5
 8011b2c:	f005 f920 	bl	8016d70 <RegionNextChannel>
 8011b30:	0003      	movs	r3, r0
 8011b32:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8011b34:	19bb      	adds	r3, r7, r6
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d02c      	beq.n	8011b96 <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011b3c:	19bb      	adds	r3, r7, r6
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	2b0b      	cmp	r3, #11
 8011b42:	d124      	bne.n	8011b8e <ScheduleTx+0x182>
 8011b44:	230f      	movs	r3, #15
 8011b46:	18fb      	adds	r3, r7, r3
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d01f      	beq.n	8011b8e <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011b4e:	4a1f      	ldr	r2, [pc, #124]	; (8011bcc <ScheduleTx+0x1c0>)
 8011b50:	2391      	movs	r3, #145	; 0x91
 8011b52:	00db      	lsls	r3, r3, #3
 8011b54:	58d3      	ldr	r3, [r2, r3]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d017      	beq.n	8011b8a <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011b5a:	4a1c      	ldr	r2, [pc, #112]	; (8011bcc <ScheduleTx+0x1c0>)
 8011b5c:	23d0      	movs	r3, #208	; 0xd0
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	58d3      	ldr	r3, [r2, r3]
 8011b62:	2220      	movs	r2, #32
 8011b64:	431a      	orrs	r2, r3
 8011b66:	0011      	movs	r1, r2
 8011b68:	4a18      	ldr	r2, [pc, #96]	; (8011bcc <ScheduleTx+0x1c0>)
 8011b6a:	23d0      	movs	r3, #208	; 0xd0
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011b70:	4a16      	ldr	r2, [pc, #88]	; (8011bcc <ScheduleTx+0x1c0>)
 8011b72:	2391      	movs	r3, #145	; 0x91
 8011b74:	00db      	lsls	r3, r3, #3
 8011b76:	58d2      	ldr	r2, [r2, r3]
 8011b78:	4b18      	ldr	r3, [pc, #96]	; (8011bdc <ScheduleTx+0x1d0>)
 8011b7a:	0011      	movs	r1, r2
 8011b7c:	0018      	movs	r0, r3
 8011b7e:	f00b f805 	bl	801cb8c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011b82:	4b16      	ldr	r3, [pc, #88]	; (8011bdc <ScheduleTx+0x1d0>)
 8011b84:	0018      	movs	r0, r3
 8011b86:	f00a ff11 	bl	801c9ac <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	e01a      	b.n	8011bc4 <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011b8e:	2337      	movs	r3, #55	; 0x37
 8011b90:	18fb      	adds	r3, r7, r3
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	e016      	b.n	8011bc4 <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011b96:	f7ff fe2d 	bl	80117f4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011b9a:	2537      	movs	r5, #55	; 0x37
 8011b9c:	197c      	adds	r4, r7, r5
 8011b9e:	f7ff febd 	bl	801191c <VerifyTxFrame>
 8011ba2:	0003      	movs	r3, r0
 8011ba4:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011ba6:	002a      	movs	r2, r5
 8011ba8:	18bb      	adds	r3, r7, r2
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d002      	beq.n	8011bb6 <ScheduleTx+0x1aa>
    {
        return status;
 8011bb0:	18bb      	adds	r3, r7, r2
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	e006      	b.n	8011bc4 <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011bb6:	4b05      	ldr	r3, [pc, #20]	; (8011bcc <ScheduleTx+0x1c0>)
 8011bb8:	4a09      	ldr	r2, [pc, #36]	; (8011be0 <ScheduleTx+0x1d4>)
 8011bba:	5c9b      	ldrb	r3, [r3, r2]
 8011bbc:	0018      	movs	r0, r3
 8011bbe:	f000 fb99 	bl	80122f4 <SendFrameOnChannel>
 8011bc2:	0003      	movs	r3, r0
}
 8011bc4:	0018      	movs	r0, r3
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	b00f      	add	sp, #60	; 0x3c
 8011bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bcc:	2000054c 	.word	0x2000054c
 8011bd0:	00000484 	.word	0x00000484
 8011bd4:	200009d4 	.word	0x200009d4
 8011bd8:	20000961 	.word	0x20000961
 8011bdc:	200008b4 	.word	0x200008b4
 8011be0:	00000415 	.word	0x00000415

08011be4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011be6:	b085      	sub	sp, #20
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	0002      	movs	r2, r0
 8011bec:	1dfb      	adds	r3, r7, #7
 8011bee:	701a      	strb	r2, [r3, #0]
 8011bf0:	1dbb      	adds	r3, r7, #6
 8011bf2:	1c0a      	adds	r2, r1, #0
 8011bf4:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011bf6:	230f      	movs	r3, #15
 8011bf8:	18fb      	adds	r3, r7, r3
 8011bfa:	2213      	movs	r2, #19
 8011bfc:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011c02:	4a2c      	ldr	r2, [pc, #176]	; (8011cb4 <SecureFrame+0xd0>)
 8011c04:	2382      	movs	r3, #130	; 0x82
 8011c06:	005b      	lsls	r3, r3, #1
 8011c08:	5cd3      	ldrb	r3, [r2, r3]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d002      	beq.n	8011c14 <SecureFrame+0x30>
 8011c0e:	2b04      	cmp	r3, #4
 8011c10:	d016      	beq.n	8011c40 <SecureFrame+0x5c>
 8011c12:	e047      	b.n	8011ca4 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011c14:	250f      	movs	r5, #15
 8011c16:	197c      	adds	r4, r7, r5
 8011c18:	4b27      	ldr	r3, [pc, #156]	; (8011cb8 <SecureFrame+0xd4>)
 8011c1a:	0018      	movs	r0, r3
 8011c1c:	f004 f86a 	bl	8015cf4 <LoRaMacCryptoPrepareJoinRequest>
 8011c20:	0003      	movs	r3, r0
 8011c22:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011c24:	197b      	adds	r3, r7, r5
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011c2c:	2311      	movs	r3, #17
 8011c2e:	e03c      	b.n	8011caa <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011c30:	4a20      	ldr	r2, [pc, #128]	; (8011cb4 <SecureFrame+0xd0>)
 8011c32:	2386      	movs	r3, #134	; 0x86
 8011c34:	005b      	lsls	r3, r3, #1
 8011c36:	5cd3      	ldrb	r3, [r2, r3]
 8011c38:	b29a      	uxth	r2, r3
 8011c3a:	4b1e      	ldr	r3, [pc, #120]	; (8011cb4 <SecureFrame+0xd0>)
 8011c3c:	801a      	strh	r2, [r3, #0]
            break;
 8011c3e:	e033      	b.n	8011ca8 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011c40:	2308      	movs	r3, #8
 8011c42:	18fb      	adds	r3, r7, r3
 8011c44:	0018      	movs	r0, r3
 8011c46:	f003 ff67 	bl	8015b18 <LoRaMacCryptoGetFCntUp>
 8011c4a:	1e03      	subs	r3, r0, #0
 8011c4c:	d001      	beq.n	8011c52 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011c4e:	2312      	movs	r3, #18
 8011c50:	e02b      	b.n	8011caa <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011c52:	4a18      	ldr	r2, [pc, #96]	; (8011cb4 <SecureFrame+0xd0>)
 8011c54:	2382      	movs	r3, #130	; 0x82
 8011c56:	00db      	lsls	r3, r3, #3
 8011c58:	5cd3      	ldrb	r3, [r2, r3]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d104      	bne.n	8011c68 <SecureFrame+0x84>
 8011c5e:	4b15      	ldr	r3, [pc, #84]	; (8011cb4 <SecureFrame+0xd0>)
 8011c60:	4a16      	ldr	r2, [pc, #88]	; (8011cbc <SecureFrame+0xd8>)
 8011c62:	5c9b      	ldrb	r3, [r3, r2]
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d902      	bls.n	8011c6e <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011c6e:	68b8      	ldr	r0, [r7, #8]
 8011c70:	260f      	movs	r6, #15
 8011c72:	19bc      	adds	r4, r7, r6
 8011c74:	4d10      	ldr	r5, [pc, #64]	; (8011cb8 <SecureFrame+0xd4>)
 8011c76:	1dbb      	adds	r3, r7, #6
 8011c78:	781a      	ldrb	r2, [r3, #0]
 8011c7a:	1dfb      	adds	r3, r7, #7
 8011c7c:	7819      	ldrb	r1, [r3, #0]
 8011c7e:	002b      	movs	r3, r5
 8011c80:	f004 f942 	bl	8015f08 <LoRaMacCryptoSecureMessage>
 8011c84:	0003      	movs	r3, r0
 8011c86:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011c88:	19bb      	adds	r3, r7, r6
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d001      	beq.n	8011c94 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011c90:	2311      	movs	r3, #17
 8011c92:	e00a      	b.n	8011caa <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011c94:	4a07      	ldr	r2, [pc, #28]	; (8011cb4 <SecureFrame+0xd0>)
 8011c96:	2386      	movs	r3, #134	; 0x86
 8011c98:	005b      	lsls	r3, r3, #1
 8011c9a:	5cd3      	ldrb	r3, [r2, r3]
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	4b05      	ldr	r3, [pc, #20]	; (8011cb4 <SecureFrame+0xd0>)
 8011ca0:	801a      	strh	r2, [r3, #0]
            break;
 8011ca2:	e001      	b.n	8011ca8 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ca4:	2303      	movs	r3, #3
 8011ca6:	e000      	b.n	8011caa <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8011ca8:	2300      	movs	r3, #0
}
 8011caa:	0018      	movs	r0, r3
 8011cac:	46bd      	mov	sp, r7
 8011cae:	b005      	add	sp, #20
 8011cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cb2:	46c0      	nop			; (mov r8, r8)
 8011cb4:	2000054c 	.word	0x2000054c
 8011cb8:	20000654 	.word	0x20000654
 8011cbc:	00000412 	.word	0x00000412

08011cc0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8011cc4:	4b0e      	ldr	r3, [pc, #56]	; (8011d00 <CalculateBackOff+0x40>)
 8011cc6:	4a0f      	ldr	r2, [pc, #60]	; (8011d04 <CalculateBackOff+0x44>)
 8011cc8:	589a      	ldr	r2, [r3, r2]
 8011cca:	23aa      	movs	r3, #170	; 0xaa
 8011ccc:	005b      	lsls	r3, r3, #1
 8011cce:	58d3      	ldr	r3, [r2, r3]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d111      	bne.n	8011cf8 <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011cd4:	4b0a      	ldr	r3, [pc, #40]	; (8011d00 <CalculateBackOff+0x40>)
 8011cd6:	4a0b      	ldr	r2, [pc, #44]	; (8011d04 <CalculateBackOff+0x44>)
 8011cd8:	589a      	ldr	r2, [r3, r2]
 8011cda:	23a6      	movs	r3, #166	; 0xa6
 8011cdc:	005b      	lsls	r3, r3, #1
 8011cde:	5ad3      	ldrh	r3, [r2, r3]
 8011ce0:	3b01      	subs	r3, #1
 8011ce2:	4907      	ldr	r1, [pc, #28]	; (8011d00 <CalculateBackOff+0x40>)
 8011ce4:	2283      	movs	r2, #131	; 0x83
 8011ce6:	00d2      	lsls	r2, r2, #3
 8011ce8:	5889      	ldr	r1, [r1, r2]
 8011cea:	4a05      	ldr	r2, [pc, #20]	; (8011d00 <CalculateBackOff+0x40>)
 8011cec:	4805      	ldr	r0, [pc, #20]	; (8011d04 <CalculateBackOff+0x44>)
 8011cee:	5812      	ldr	r2, [r2, r0]
 8011cf0:	4359      	muls	r1, r3
 8011cf2:	23aa      	movs	r3, #170	; 0xaa
 8011cf4:	005b      	lsls	r3, r3, #1
 8011cf6:	50d1      	str	r1, [r2, r3]
    }
}
 8011cf8:	46c0      	nop			; (mov r8, r8)
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	46c0      	nop			; (mov r8, r8)
 8011d00:	2000054c 	.word	0x2000054c
 8011d04:	00000484 	.word	0x00000484

08011d08 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	1d3b      	adds	r3, r7, #4
 8011d10:	7019      	strb	r1, [r3, #0]
 8011d12:	0011      	movs	r1, r2
 8011d14:	1dfb      	adds	r3, r7, #7
 8011d16:	1c02      	adds	r2, r0, #0
 8011d18:	701a      	strb	r2, [r3, #0]
 8011d1a:	1dbb      	adds	r3, r7, #6
 8011d1c:	1c0a      	adds	r2, r1, #0
 8011d1e:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011d20:	1dfb      	adds	r3, r7, #7
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d003      	beq.n	8011d30 <RemoveMacCommands+0x28>
 8011d28:	1dfb      	adds	r3, r7, #7
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d10f      	bne.n	8011d50 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011d30:	1dbb      	adds	r3, r7, #6
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	2b01      	cmp	r3, #1
 8011d36:	d109      	bne.n	8011d4c <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011d38:	1d3b      	adds	r3, r7, #4
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	2220      	movs	r2, #32
 8011d3e:	4013      	ands	r3, r2
 8011d40:	b2db      	uxtb	r3, r3
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d004      	beq.n	8011d50 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011d46:	f002 ff75 	bl	8014c34 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011d4a:	e001      	b.n	8011d50 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011d4c:	f002 ff72 	bl	8014c34 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011d50:	46c0      	nop			; (mov r8, r8)
 8011d52:	46bd      	mov	sp, r7
 8011d54:	b002      	add	sp, #8
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011d58:	b590      	push	{r4, r7, lr}
 8011d5a:	b083      	sub	sp, #12
 8011d5c:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8011d5e:	4b72      	ldr	r3, [pc, #456]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011d60:	4a72      	ldr	r2, [pc, #456]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011d62:	589a      	ldr	r2, [r3, r2]
 8011d64:	23b2      	movs	r3, #178	; 0xb2
 8011d66:	005b      	lsls	r3, r3, #1
 8011d68:	2100      	movs	r1, #0
 8011d6a:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8011d6c:	4b6e      	ldr	r3, [pc, #440]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011d6e:	4a6f      	ldr	r2, [pc, #444]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011d70:	589b      	ldr	r3, [r3, r2]
 8011d72:	2280      	movs	r2, #128	; 0x80
 8011d74:	2100      	movs	r1, #0
 8011d76:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8011d78:	4a6b      	ldr	r2, [pc, #428]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011d7a:	2382      	movs	r3, #130	; 0x82
 8011d7c:	00db      	lsls	r3, r3, #3
 8011d7e:	2100      	movs	r1, #0
 8011d80:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 8011d82:	4b69      	ldr	r3, [pc, #420]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011d84:	4a6a      	ldr	r2, [pc, #424]	; (8011f30 <ResetMacParameters+0x1d8>)
 8011d86:	2101      	movs	r1, #1
 8011d88:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 8011d8a:	4b67      	ldr	r3, [pc, #412]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011d8c:	4a69      	ldr	r2, [pc, #420]	; (8011f34 <ResetMacParameters+0x1dc>)
 8011d8e:	2101      	movs	r1, #1
 8011d90:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8011d92:	4b65      	ldr	r3, [pc, #404]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011d94:	4a68      	ldr	r2, [pc, #416]	; (8011f38 <ResetMacParameters+0x1e0>)
 8011d96:	2100      	movs	r1, #0
 8011d98:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 8011d9a:	4b63      	ldr	r3, [pc, #396]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011d9c:	4a63      	ldr	r2, [pc, #396]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011d9e:	589b      	ldr	r3, [r3, r2]
 8011da0:	22c8      	movs	r2, #200	; 0xc8
 8011da2:	2100      	movs	r1, #0
 8011da4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8011da6:	4b60      	ldr	r3, [pc, #384]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011da8:	4a60      	ldr	r2, [pc, #384]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011daa:	589a      	ldr	r2, [r3, r2]
 8011dac:	23a6      	movs	r3, #166	; 0xa6
 8011dae:	005b      	lsls	r3, r3, #1
 8011db0:	2101      	movs	r1, #1
 8011db2:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8011db4:	4b5c      	ldr	r3, [pc, #368]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011db6:	4a5d      	ldr	r2, [pc, #372]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011db8:	589a      	ldr	r2, [r3, r2]
 8011dba:	4b5b      	ldr	r3, [pc, #364]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011dbc:	495b      	ldr	r1, [pc, #364]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011dbe:	585b      	ldr	r3, [r3, r1]
 8011dc0:	2104      	movs	r1, #4
 8011dc2:	5651      	ldrsb	r1, [r2, r1]
 8011dc4:	2284      	movs	r2, #132	; 0x84
 8011dc6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8011dc8:	4b57      	ldr	r3, [pc, #348]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011dca:	4a58      	ldr	r2, [pc, #352]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011dcc:	589a      	ldr	r2, [r3, r2]
 8011dce:	4b56      	ldr	r3, [pc, #344]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011dd0:	4956      	ldr	r1, [pc, #344]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011dd2:	585b      	ldr	r3, [r3, r1]
 8011dd4:	2105      	movs	r1, #5
 8011dd6:	5651      	ldrsb	r1, [r2, r1]
 8011dd8:	2285      	movs	r2, #133	; 0x85
 8011dda:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8011ddc:	4b52      	ldr	r3, [pc, #328]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011dde:	4a53      	ldr	r2, [pc, #332]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011de0:	589a      	ldr	r2, [r3, r2]
 8011de2:	4b51      	ldr	r3, [pc, #324]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011de4:	4951      	ldr	r1, [pc, #324]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011de6:	585b      	ldr	r3, [r3, r1]
 8011de8:	2125      	movs	r1, #37	; 0x25
 8011dea:	5c51      	ldrb	r1, [r2, r1]
 8011dec:	22a5      	movs	r2, #165	; 0xa5
 8011dee:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8011df0:	4b4d      	ldr	r3, [pc, #308]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011df2:	4a4e      	ldr	r2, [pc, #312]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011df4:	589a      	ldr	r2, [r3, r2]
 8011df6:	4b4c      	ldr	r3, [pc, #304]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011df8:	494c      	ldr	r1, [pc, #304]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011dfa:	585b      	ldr	r3, [r3, r1]
 8011dfc:	21a8      	movs	r1, #168	; 0xa8
 8011dfe:	185b      	adds	r3, r3, r1
 8011e00:	3228      	adds	r2, #40	; 0x28
 8011e02:	ca03      	ldmia	r2!, {r0, r1}
 8011e04:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8011e06:	4b48      	ldr	r3, [pc, #288]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e08:	4a48      	ldr	r2, [pc, #288]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e0a:	589a      	ldr	r2, [r3, r2]
 8011e0c:	4b46      	ldr	r3, [pc, #280]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e0e:	4947      	ldr	r1, [pc, #284]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e10:	585b      	ldr	r3, [r3, r1]
 8011e12:	21b0      	movs	r1, #176	; 0xb0
 8011e14:	185b      	adds	r3, r3, r1
 8011e16:	3230      	adds	r2, #48	; 0x30
 8011e18:	ca03      	ldmia	r2!, {r0, r1}
 8011e1a:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8011e1c:	4b42      	ldr	r3, [pc, #264]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e1e:	4a43      	ldr	r2, [pc, #268]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e20:	589a      	ldr	r2, [r3, r2]
 8011e22:	4b41      	ldr	r3, [pc, #260]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e24:	4941      	ldr	r1, [pc, #260]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e26:	585b      	ldr	r3, [r3, r1]
 8011e28:	2138      	movs	r1, #56	; 0x38
 8011e2a:	5c51      	ldrb	r1, [r2, r1]
 8011e2c:	22b8      	movs	r2, #184	; 0xb8
 8011e2e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8011e30:	4b3d      	ldr	r3, [pc, #244]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e32:	4a3e      	ldr	r2, [pc, #248]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e34:	589a      	ldr	r2, [r3, r2]
 8011e36:	4b3c      	ldr	r3, [pc, #240]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e38:	493c      	ldr	r1, [pc, #240]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e3a:	585b      	ldr	r3, [r3, r1]
 8011e3c:	2139      	movs	r1, #57	; 0x39
 8011e3e:	5c51      	ldrb	r1, [r2, r1]
 8011e40:	22b9      	movs	r2, #185	; 0xb9
 8011e42:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8011e44:	4b38      	ldr	r3, [pc, #224]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e46:	4a39      	ldr	r2, [pc, #228]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e48:	589b      	ldr	r3, [r3, r2]
 8011e4a:	4a37      	ldr	r2, [pc, #220]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e4c:	4937      	ldr	r1, [pc, #220]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e4e:	5852      	ldr	r2, [r2, r1]
 8011e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e52:	21bc      	movs	r1, #188	; 0xbc
 8011e54:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8011e56:	4b34      	ldr	r3, [pc, #208]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e58:	4a34      	ldr	r2, [pc, #208]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e5a:	589b      	ldr	r3, [r3, r2]
 8011e5c:	4a32      	ldr	r2, [pc, #200]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e5e:	4933      	ldr	r1, [pc, #204]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e60:	5852      	ldr	r2, [r2, r1]
 8011e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e64:	21c0      	movs	r1, #192	; 0xc0
 8011e66:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 8011e68:	4b2f      	ldr	r3, [pc, #188]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e6a:	4a34      	ldr	r2, [pc, #208]	; (8011f3c <ResetMacParameters+0x1e4>)
 8011e6c:	2100      	movs	r1, #0
 8011e6e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8011e70:	4b2d      	ldr	r3, [pc, #180]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e72:	4a2e      	ldr	r2, [pc, #184]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e74:	589a      	ldr	r2, [r3, r2]
 8011e76:	234c      	movs	r3, #76	; 0x4c
 8011e78:	33ff      	adds	r3, #255	; 0xff
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011e7e:	003b      	movs	r3, r7
 8011e80:	2201      	movs	r2, #1
 8011e82:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8011e84:	003b      	movs	r3, r7
 8011e86:	2200      	movs	r2, #0
 8011e88:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011e8a:	4b27      	ldr	r3, [pc, #156]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e8c:	4a27      	ldr	r2, [pc, #156]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011e8e:	589b      	ldr	r3, [r3, r2]
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	003a      	movs	r2, r7
 8011e94:	0011      	movs	r1, r2
 8011e96:	0018      	movs	r0, r3
 8011e98:	f004 fe05 	bl	8016aa6 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011e9c:	4b22      	ldr	r3, [pc, #136]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011e9e:	4a28      	ldr	r2, [pc, #160]	; (8011f40 <ResetMacParameters+0x1e8>)
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011ea4:	4b20      	ldr	r3, [pc, #128]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011ea6:	4a26      	ldr	r2, [pc, #152]	; (8011f40 <ResetMacParameters+0x1e8>)
 8011ea8:	5c99      	ldrb	r1, [r3, r2]
 8011eaa:	4a1f      	ldr	r2, [pc, #124]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011eac:	23f3      	movs	r3, #243	; 0xf3
 8011eae:	009b      	lsls	r3, r3, #2
 8011eb0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8011eb2:	4b1d      	ldr	r3, [pc, #116]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011eb4:	4a1d      	ldr	r2, [pc, #116]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011eb6:	589b      	ldr	r3, [r3, r2]
 8011eb8:	22a8      	movs	r2, #168	; 0xa8
 8011eba:	5899      	ldr	r1, [r3, r2]
 8011ebc:	4a1a      	ldr	r2, [pc, #104]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011ebe:	23f4      	movs	r3, #244	; 0xf4
 8011ec0:	009b      	lsls	r3, r3, #2
 8011ec2:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8011ec4:	4b18      	ldr	r3, [pc, #96]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011ec6:	4a19      	ldr	r2, [pc, #100]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011ec8:	589b      	ldr	r3, [r3, r2]
 8011eca:	22b9      	movs	r2, #185	; 0xb9
 8011ecc:	5c99      	ldrb	r1, [r3, r2]
 8011ece:	4a16      	ldr	r2, [pc, #88]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011ed0:	23f7      	movs	r3, #247	; 0xf7
 8011ed2:	009b      	lsls	r3, r3, #2
 8011ed4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8011ed6:	4b14      	ldr	r3, [pc, #80]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011ed8:	4a14      	ldr	r2, [pc, #80]	; (8011f2c <ResetMacParameters+0x1d4>)
 8011eda:	589b      	ldr	r3, [r3, r2]
 8011edc:	22ca      	movs	r2, #202	; 0xca
 8011ede:	5c99      	ldrb	r1, [r3, r2]
 8011ee0:	4b11      	ldr	r3, [pc, #68]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011ee2:	4a18      	ldr	r2, [pc, #96]	; (8011f44 <ResetMacParameters+0x1ec>)
 8011ee4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011ee6:	4b10      	ldr	r3, [pc, #64]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011ee8:	4a17      	ldr	r2, [pc, #92]	; (8011f48 <ResetMacParameters+0x1f0>)
 8011eea:	2100      	movs	r1, #0
 8011eec:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011eee:	4b0e      	ldr	r3, [pc, #56]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011ef0:	4a16      	ldr	r2, [pc, #88]	; (8011f4c <ResetMacParameters+0x1f4>)
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011ef6:	480c      	ldr	r0, [pc, #48]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011ef8:	23f8      	movs	r3, #248	; 0xf8
 8011efa:	009b      	lsls	r3, r3, #2
 8011efc:	490a      	ldr	r1, [pc, #40]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011efe:	22f3      	movs	r2, #243	; 0xf3
 8011f00:	0092      	lsls	r2, r2, #2
 8011f02:	18c3      	adds	r3, r0, r3
 8011f04:	188a      	adds	r2, r1, r2
 8011f06:	ca13      	ldmia	r2!, {r0, r1, r4}
 8011f08:	c313      	stmia	r3!, {r0, r1, r4}
 8011f0a:	ca03      	ldmia	r2!, {r0, r1}
 8011f0c:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011f0e:	4b06      	ldr	r3, [pc, #24]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011f10:	4a0f      	ldr	r2, [pc, #60]	; (8011f50 <ResetMacParameters+0x1f8>)
 8011f12:	2101      	movs	r1, #1
 8011f14:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011f16:	4b04      	ldr	r3, [pc, #16]	; (8011f28 <ResetMacParameters+0x1d0>)
 8011f18:	4a0e      	ldr	r2, [pc, #56]	; (8011f54 <ResetMacParameters+0x1fc>)
 8011f1a:	2102      	movs	r1, #2
 8011f1c:	5499      	strb	r1, [r3, r2]

}
 8011f1e:	46c0      	nop			; (mov r8, r8)
 8011f20:	46bd      	mov	sp, r7
 8011f22:	b003      	add	sp, #12
 8011f24:	bd90      	pop	{r4, r7, pc}
 8011f26:	46c0      	nop			; (mov r8, r8)
 8011f28:	2000054c 	.word	0x2000054c
 8011f2c:	00000484 	.word	0x00000484
 8011f30:	00000411 	.word	0x00000411
 8011f34:	00000412 	.word	0x00000412
 8011f38:	00000413 	.word	0x00000413
 8011f3c:	00000414 	.word	0x00000414
 8011f40:	00000415 	.word	0x00000415
 8011f44:	000003dd 	.word	0x000003dd
 8011f48:	000003de 	.word	0x000003de
 8011f4c:	000003df 	.word	0x000003df
 8011f50:	000003f2 	.word	0x000003f2
 8011f54:	000003f3 	.word	0x000003f3

08011f58 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	0018      	movs	r0, r3
 8011f66:	f00a fd99 	bl	801ca9c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011f6a:	4b10      	ldr	r3, [pc, #64]	; (8011fac <RxWindowSetup+0x54>)
 8011f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f6e:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011f70:	4b0f      	ldr	r3, [pc, #60]	; (8011fb0 <RxWindowSetup+0x58>)
 8011f72:	4a10      	ldr	r2, [pc, #64]	; (8011fb4 <RxWindowSetup+0x5c>)
 8011f74:	589b      	ldr	r3, [r3, r2]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	4a0f      	ldr	r2, [pc, #60]	; (8011fb8 <RxWindowSetup+0x60>)
 8011f7a:	6839      	ldr	r1, [r7, #0]
 8011f7c:	0018      	movs	r0, r3
 8011f7e:	f004 fe29 	bl	8016bd4 <RegionRxConfig>
 8011f82:	1e03      	subs	r3, r0, #0
 8011f84:	d00e      	beq.n	8011fa4 <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8011f86:	4b09      	ldr	r3, [pc, #36]	; (8011fac <RxWindowSetup+0x54>)
 8011f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f8a:	4a09      	ldr	r2, [pc, #36]	; (8011fb0 <RxWindowSetup+0x58>)
 8011f8c:	4909      	ldr	r1, [pc, #36]	; (8011fb4 <RxWindowSetup+0x5c>)
 8011f8e:	5852      	ldr	r2, [r2, r1]
 8011f90:	2190      	movs	r1, #144	; 0x90
 8011f92:	5852      	ldr	r2, [r2, r1]
 8011f94:	0010      	movs	r0, r2
 8011f96:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	7cd9      	ldrb	r1, [r3, #19]
 8011f9c:	4a04      	ldr	r2, [pc, #16]	; (8011fb0 <RxWindowSetup+0x58>)
 8011f9e:	2390      	movs	r3, #144	; 0x90
 8011fa0:	00db      	lsls	r3, r3, #3
 8011fa2:	54d1      	strb	r1, [r2, r3]
    }
}
 8011fa4:	46c0      	nop			; (mov r8, r8)
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	b002      	add	sp, #8
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	0801f0bc 	.word	0x0801f0bc
 8011fb0:	2000054c 	.word	0x2000054c
 8011fb4:	00000484 	.word	0x00000484
 8011fb8:	2000096c 	.word	0x2000096c

08011fbc <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011fbc:	b590      	push	{r4, r7, lr}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011fc2:	4b1d      	ldr	r3, [pc, #116]	; (8012038 <OpenContinuousRxCWindow+0x7c>)
 8011fc4:	4a1d      	ldr	r2, [pc, #116]	; (801203c <OpenContinuousRxCWindow+0x80>)
 8011fc6:	589b      	ldr	r3, [r3, r2]
 8011fc8:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8011fca:	4b1b      	ldr	r3, [pc, #108]	; (8012038 <OpenContinuousRxCWindow+0x7c>)
 8011fcc:	4a1b      	ldr	r2, [pc, #108]	; (801203c <OpenContinuousRxCWindow+0x80>)
 8011fce:	589b      	ldr	r3, [r3, r2]
 8011fd0:	22b4      	movs	r2, #180	; 0xb4
 8011fd2:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011fd4:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011fd6:	4b18      	ldr	r3, [pc, #96]	; (8012038 <OpenContinuousRxCWindow+0x7c>)
 8011fd8:	4a18      	ldr	r2, [pc, #96]	; (801203c <OpenContinuousRxCWindow+0x80>)
 8011fda:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011fdc:	228c      	movs	r2, #140	; 0x8c
 8011fde:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011fe0:	4b15      	ldr	r3, [pc, #84]	; (8012038 <OpenContinuousRxCWindow+0x7c>)
 8011fe2:	4c16      	ldr	r4, [pc, #88]	; (801203c <OpenContinuousRxCWindow+0x80>)
 8011fe4:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011fe6:	2488      	movs	r4, #136	; 0x88
 8011fe8:	591c      	ldr	r4, [r3, r4]
 8011fea:	4b15      	ldr	r3, [pc, #84]	; (8012040 <OpenContinuousRxCWindow+0x84>)
 8011fec:	9300      	str	r3, [sp, #0]
 8011fee:	0023      	movs	r3, r4
 8011ff0:	f004 fdcc 	bl	8016b8c <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011ff4:	4b10      	ldr	r3, [pc, #64]	; (8012038 <OpenContinuousRxCWindow+0x7c>)
 8011ff6:	4a13      	ldr	r2, [pc, #76]	; (8012044 <OpenContinuousRxCWindow+0x88>)
 8011ff8:	2102      	movs	r1, #2
 8011ffa:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011ffc:	4b0e      	ldr	r3, [pc, #56]	; (8012038 <OpenContinuousRxCWindow+0x7c>)
 8011ffe:	4a12      	ldr	r2, [pc, #72]	; (8012048 <OpenContinuousRxCWindow+0x8c>)
 8012000:	2101      	movs	r1, #1
 8012002:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012004:	4b0c      	ldr	r3, [pc, #48]	; (8012038 <OpenContinuousRxCWindow+0x7c>)
 8012006:	4a0d      	ldr	r2, [pc, #52]	; (801203c <OpenContinuousRxCWindow+0x80>)
 8012008:	589b      	ldr	r3, [r3, r2]
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	4a0f      	ldr	r2, [pc, #60]	; (801204c <OpenContinuousRxCWindow+0x90>)
 801200e:	490c      	ldr	r1, [pc, #48]	; (8012040 <OpenContinuousRxCWindow+0x84>)
 8012010:	0018      	movs	r0, r3
 8012012:	f004 fddf 	bl	8016bd4 <RegionRxConfig>
 8012016:	1e03      	subs	r3, r0, #0
 8012018:	d00a      	beq.n	8012030 <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 801201a:	4b0d      	ldr	r3, [pc, #52]	; (8012050 <OpenContinuousRxCWindow+0x94>)
 801201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801201e:	2000      	movs	r0, #0
 8012020:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8012022:	4b05      	ldr	r3, [pc, #20]	; (8012038 <OpenContinuousRxCWindow+0x7c>)
 8012024:	4a07      	ldr	r2, [pc, #28]	; (8012044 <OpenContinuousRxCWindow+0x88>)
 8012026:	5c99      	ldrb	r1, [r3, r2]
 8012028:	4a03      	ldr	r2, [pc, #12]	; (8012038 <OpenContinuousRxCWindow+0x7c>)
 801202a:	2390      	movs	r3, #144	; 0x90
 801202c:	00db      	lsls	r3, r3, #3
 801202e:	54d1      	strb	r1, [r2, r3]
    }
}
 8012030:	46c0      	nop			; (mov r8, r8)
 8012032:	46bd      	mov	sp, r7
 8012034:	b001      	add	sp, #4
 8012036:	bd90      	pop	{r4, r7, pc}
 8012038:	2000054c 	.word	0x2000054c
 801203c:	00000484 	.word	0x00000484
 8012040:	2000092c 	.word	0x2000092c
 8012044:	000003f3 	.word	0x000003f3
 8012048:	000003f2 	.word	0x000003f2
 801204c:	2000096c 	.word	0x2000096c
 8012050:	0801f0bc 	.word	0x0801f0bc

08012054 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012054:	b590      	push	{r4, r7, lr}
 8012056:	b089      	sub	sp, #36	; 0x24
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	603b      	str	r3, [r7, #0]
 8012060:	1dfb      	adds	r3, r7, #7
 8012062:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 8012064:	4b9a      	ldr	r3, [pc, #616]	; (80122d0 <PrepareFrame+0x27c>)
 8012066:	2200      	movs	r2, #0
 8012068:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801206a:	4b99      	ldr	r3, [pc, #612]	; (80122d0 <PrepareFrame+0x27c>)
 801206c:	4a99      	ldr	r2, [pc, #612]	; (80122d4 <PrepareFrame+0x280>)
 801206e:	2100      	movs	r1, #0
 8012070:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 8012072:	2300      	movs	r3, #0
 8012074:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012076:	2300      	movs	r3, #0
 8012078:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801207a:	231f      	movs	r3, #31
 801207c:	18fb      	adds	r3, r7, r3
 801207e:	2200      	movs	r2, #0
 8012080:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d103      	bne.n	8012090 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8012088:	2330      	movs	r3, #48	; 0x30
 801208a:	18fb      	adds	r3, r7, r3
 801208c:	2200      	movs	r2, #0
 801208e:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012090:	2430      	movs	r4, #48	; 0x30
 8012092:	193b      	adds	r3, r7, r4
 8012094:	881a      	ldrh	r2, [r3, #0]
 8012096:	6839      	ldr	r1, [r7, #0]
 8012098:	4b8f      	ldr	r3, [pc, #572]	; (80122d8 <PrepareFrame+0x284>)
 801209a:	0018      	movs	r0, r3
 801209c:	f007 f946 	bl	801932c <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80120a0:	193b      	adds	r3, r7, r4
 80120a2:	881b      	ldrh	r3, [r3, #0]
 80120a4:	b2d9      	uxtb	r1, r3
 80120a6:	4b8a      	ldr	r3, [pc, #552]	; (80122d0 <PrepareFrame+0x27c>)
 80120a8:	4a8c      	ldr	r2, [pc, #560]	; (80122dc <PrepareFrame+0x288>)
 80120aa:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	781a      	ldrb	r2, [r3, #0]
 80120b0:	4b87      	ldr	r3, [pc, #540]	; (80122d0 <PrepareFrame+0x27c>)
 80120b2:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	061b      	lsls	r3, r3, #24
 80120ba:	0f5b      	lsrs	r3, r3, #29
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	2b07      	cmp	r3, #7
 80120c0:	d100      	bne.n	80120c4 <PrepareFrame+0x70>
 80120c2:	e0e0      	b.n	8012286 <PrepareFrame+0x232>
 80120c4:	dd00      	ble.n	80120c8 <PrepareFrame+0x74>
 80120c6:	e0f8      	b.n	80122ba <PrepareFrame+0x266>
 80120c8:	2b02      	cmp	r3, #2
 80120ca:	d006      	beq.n	80120da <PrepareFrame+0x86>
 80120cc:	2b04      	cmp	r3, #4
 80120ce:	d000      	beq.n	80120d2 <PrepareFrame+0x7e>
 80120d0:	e0f3      	b.n	80122ba <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80120d2:	4b7f      	ldr	r3, [pc, #508]	; (80122d0 <PrepareFrame+0x27c>)
 80120d4:	4a7f      	ldr	r2, [pc, #508]	; (80122d4 <PrepareFrame+0x280>)
 80120d6:	2101      	movs	r1, #1
 80120d8:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80120da:	4a7d      	ldr	r2, [pc, #500]	; (80122d0 <PrepareFrame+0x27c>)
 80120dc:	2382      	movs	r3, #130	; 0x82
 80120de:	005b      	lsls	r3, r3, #1
 80120e0:	2104      	movs	r1, #4
 80120e2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80120e4:	4a7a      	ldr	r2, [pc, #488]	; (80122d0 <PrepareFrame+0x27c>)
 80120e6:	2384      	movs	r3, #132	; 0x84
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	497d      	ldr	r1, [pc, #500]	; (80122e0 <PrepareFrame+0x28c>)
 80120ec:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80120ee:	4a78      	ldr	r2, [pc, #480]	; (80122d0 <PrepareFrame+0x27c>)
 80120f0:	2386      	movs	r3, #134	; 0x86
 80120f2:	005b      	lsls	r3, r3, #1
 80120f4:	21ff      	movs	r1, #255	; 0xff
 80120f6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	7819      	ldrb	r1, [r3, #0]
 80120fc:	4a74      	ldr	r2, [pc, #464]	; (80122d0 <PrepareFrame+0x27c>)
 80120fe:	230e      	movs	r3, #14
 8012100:	33ff      	adds	r3, #255	; 0xff
 8012102:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012104:	4a72      	ldr	r2, [pc, #456]	; (80122d0 <PrepareFrame+0x27c>)
 8012106:	1df9      	adds	r1, r7, #7
 8012108:	2394      	movs	r3, #148	; 0x94
 801210a:	005b      	lsls	r3, r3, #1
 801210c:	7809      	ldrb	r1, [r1, #0]
 801210e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8012110:	4b6f      	ldr	r3, [pc, #444]	; (80122d0 <PrepareFrame+0x27c>)
 8012112:	4a74      	ldr	r2, [pc, #464]	; (80122e4 <PrepareFrame+0x290>)
 8012114:	589b      	ldr	r3, [r3, r2]
 8012116:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012118:	4a6d      	ldr	r2, [pc, #436]	; (80122d0 <PrepareFrame+0x27c>)
 801211a:	2388      	movs	r3, #136	; 0x88
 801211c:	005b      	lsls	r3, r3, #1
 801211e:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	7819      	ldrb	r1, [r3, #0]
 8012124:	4a6a      	ldr	r2, [pc, #424]	; (80122d0 <PrepareFrame+0x27c>)
 8012126:	238a      	movs	r3, #138	; 0x8a
 8012128:	005b      	lsls	r3, r3, #1
 801212a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801212c:	4b68      	ldr	r3, [pc, #416]	; (80122d0 <PrepareFrame+0x27c>)
 801212e:	4a6b      	ldr	r2, [pc, #428]	; (80122dc <PrepareFrame+0x288>)
 8012130:	5c99      	ldrb	r1, [r3, r2]
 8012132:	4a67      	ldr	r2, [pc, #412]	; (80122d0 <PrepareFrame+0x27c>)
 8012134:	2398      	movs	r3, #152	; 0x98
 8012136:	005b      	lsls	r3, r3, #1
 8012138:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801213a:	4a65      	ldr	r2, [pc, #404]	; (80122d0 <PrepareFrame+0x27c>)
 801213c:	2396      	movs	r3, #150	; 0x96
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	4965      	ldr	r1, [pc, #404]	; (80122d8 <PrepareFrame+0x284>)
 8012142:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012144:	2318      	movs	r3, #24
 8012146:	18fb      	adds	r3, r7, r3
 8012148:	0018      	movs	r0, r3
 801214a:	f003 fce5 	bl	8015b18 <LoRaMacCryptoGetFCntUp>
 801214e:	1e03      	subs	r3, r0, #0
 8012150:	d001      	beq.n	8012156 <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012152:	2312      	movs	r3, #18
 8012154:	e0b7      	b.n	80122c6 <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	b299      	uxth	r1, r3
 801215a:	4a5d      	ldr	r2, [pc, #372]	; (80122d0 <PrepareFrame+0x27c>)
 801215c:	238b      	movs	r3, #139	; 0x8b
 801215e:	005b      	lsls	r3, r3, #1
 8012160:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8012162:	4b5b      	ldr	r3, [pc, #364]	; (80122d0 <PrepareFrame+0x27c>)
 8012164:	4a60      	ldr	r2, [pc, #384]	; (80122e8 <PrepareFrame+0x294>)
 8012166:	2100      	movs	r1, #0
 8012168:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 801216a:	4a59      	ldr	r2, [pc, #356]	; (80122d0 <PrepareFrame+0x27c>)
 801216c:	2388      	movs	r3, #136	; 0x88
 801216e:	00db      	lsls	r3, r3, #3
 8012170:	2100      	movs	r1, #0
 8012172:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012174:	69b9      	ldr	r1, [r7, #24]
 8012176:	4a56      	ldr	r2, [pc, #344]	; (80122d0 <PrepareFrame+0x27c>)
 8012178:	2389      	movs	r3, #137	; 0x89
 801217a:	00db      	lsls	r3, r3, #3
 801217c:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801217e:	2314      	movs	r3, #20
 8012180:	18fb      	adds	r3, r7, r3
 8012182:	0018      	movs	r0, r3
 8012184:	f002 fd7a 	bl	8014c7c <LoRaMacCommandsGetSizeSerializedCmds>
 8012188:	1e03      	subs	r3, r0, #0
 801218a:	d001      	beq.n	8012190 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801218c:	2313      	movs	r3, #19
 801218e:	e09a      	b.n	80122c6 <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d100      	bne.n	8012198 <PrepareFrame+0x144>
 8012196:	e092      	b.n	80122be <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8012198:	4b4d      	ldr	r3, [pc, #308]	; (80122d0 <PrepareFrame+0x27c>)
 801219a:	4a52      	ldr	r2, [pc, #328]	; (80122e4 <PrepareFrame+0x290>)
 801219c:	589b      	ldr	r3, [r3, r2]
 801219e:	2285      	movs	r2, #133	; 0x85
 80121a0:	569b      	ldrsb	r3, [r3, r2]
 80121a2:	221f      	movs	r2, #31
 80121a4:	18bc      	adds	r4, r7, r2
 80121a6:	0018      	movs	r0, r3
 80121a8:	f7fe fb50 	bl	801084c <GetMaxAppPayloadWithoutFOptsLength>
 80121ac:	0003      	movs	r3, r0
 80121ae:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80121b0:	4b47      	ldr	r3, [pc, #284]	; (80122d0 <PrepareFrame+0x27c>)
 80121b2:	4a4a      	ldr	r2, [pc, #296]	; (80122dc <PrepareFrame+0x288>)
 80121b4:	5c9b      	ldrb	r3, [r3, r2]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d024      	beq.n	8012204 <PrepareFrame+0x1b0>
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	2b0f      	cmp	r3, #15
 80121be:	d821      	bhi.n	8012204 <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80121c0:	4a4a      	ldr	r2, [pc, #296]	; (80122ec <PrepareFrame+0x298>)
 80121c2:	2314      	movs	r3, #20
 80121c4:	18fb      	adds	r3, r7, r3
 80121c6:	0019      	movs	r1, r3
 80121c8:	200f      	movs	r0, #15
 80121ca:	f002 fd6d 	bl	8014ca8 <LoRaMacCommandsSerializeCmds>
 80121ce:	1e03      	subs	r3, r0, #0
 80121d0:	d001      	beq.n	80121d6 <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80121d2:	2313      	movs	r3, #19
 80121d4:	e077      	b.n	80122c6 <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	1c1a      	adds	r2, r3, #0
 80121da:	230f      	movs	r3, #15
 80121dc:	4013      	ands	r3, r2
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	210f      	movs	r1, #15
 80121e4:	400a      	ands	r2, r1
 80121e6:	0010      	movs	r0, r2
 80121e8:	781a      	ldrb	r2, [r3, #0]
 80121ea:	210f      	movs	r1, #15
 80121ec:	438a      	bics	r2, r1
 80121ee:	1c11      	adds	r1, r2, #0
 80121f0:	1c02      	adds	r2, r0, #0
 80121f2:	430a      	orrs	r2, r1
 80121f4:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	7819      	ldrb	r1, [r3, #0]
 80121fa:	4a35      	ldr	r2, [pc, #212]	; (80122d0 <PrepareFrame+0x27c>)
 80121fc:	238a      	movs	r3, #138	; 0x8a
 80121fe:	005b      	lsls	r3, r3, #1
 8012200:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8012202:	e05c      	b.n	80122be <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012204:	4b32      	ldr	r3, [pc, #200]	; (80122d0 <PrepareFrame+0x27c>)
 8012206:	4a35      	ldr	r2, [pc, #212]	; (80122dc <PrepareFrame+0x288>)
 8012208:	5c9b      	ldrb	r3, [r3, r2]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d015      	beq.n	801223a <PrepareFrame+0x1e6>
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	2b0f      	cmp	r3, #15
 8012212:	d912      	bls.n	801223a <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012214:	231f      	movs	r3, #31
 8012216:	18fb      	adds	r3, r7, r3
 8012218:	7818      	ldrb	r0, [r3, #0]
 801221a:	4b2d      	ldr	r3, [pc, #180]	; (80122d0 <PrepareFrame+0x27c>)
 801221c:	4a31      	ldr	r2, [pc, #196]	; (80122e4 <PrepareFrame+0x290>)
 801221e:	589b      	ldr	r3, [r3, r2]
 8012220:	33cb      	adds	r3, #203	; 0xcb
 8012222:	001a      	movs	r2, r3
 8012224:	2314      	movs	r3, #20
 8012226:	18fb      	adds	r3, r7, r3
 8012228:	0019      	movs	r1, r3
 801222a:	f002 fd3d 	bl	8014ca8 <LoRaMacCommandsSerializeCmds>
 801222e:	1e03      	subs	r3, r0, #0
 8012230:	d001      	beq.n	8012236 <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012232:	2313      	movs	r3, #19
 8012234:	e047      	b.n	80122c6 <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012236:	230a      	movs	r3, #10
 8012238:	e045      	b.n	80122c6 <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801223a:	231f      	movs	r3, #31
 801223c:	18fb      	adds	r3, r7, r3
 801223e:	7818      	ldrb	r0, [r3, #0]
 8012240:	4b23      	ldr	r3, [pc, #140]	; (80122d0 <PrepareFrame+0x27c>)
 8012242:	4a28      	ldr	r2, [pc, #160]	; (80122e4 <PrepareFrame+0x290>)
 8012244:	589b      	ldr	r3, [r3, r2]
 8012246:	33cb      	adds	r3, #203	; 0xcb
 8012248:	001a      	movs	r2, r3
 801224a:	2314      	movs	r3, #20
 801224c:	18fb      	adds	r3, r7, r3
 801224e:	0019      	movs	r1, r3
 8012250:	f002 fd2a 	bl	8014ca8 <LoRaMacCommandsSerializeCmds>
 8012254:	1e03      	subs	r3, r0, #0
 8012256:	d001      	beq.n	801225c <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012258:	2313      	movs	r3, #19
 801225a:	e034      	b.n	80122c6 <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801225c:	4a1c      	ldr	r2, [pc, #112]	; (80122d0 <PrepareFrame+0x27c>)
 801225e:	2394      	movs	r3, #148	; 0x94
 8012260:	005b      	lsls	r3, r3, #1
 8012262:	2100      	movs	r1, #0
 8012264:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8012266:	4b1a      	ldr	r3, [pc, #104]	; (80122d0 <PrepareFrame+0x27c>)
 8012268:	4a1e      	ldr	r2, [pc, #120]	; (80122e4 <PrepareFrame+0x290>)
 801226a:	589b      	ldr	r3, [r3, r2]
 801226c:	33cb      	adds	r3, #203	; 0xcb
 801226e:	0019      	movs	r1, r3
 8012270:	4a17      	ldr	r2, [pc, #92]	; (80122d0 <PrepareFrame+0x27c>)
 8012272:	2396      	movs	r3, #150	; 0x96
 8012274:	005b      	lsls	r3, r3, #1
 8012276:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	b2d9      	uxtb	r1, r3
 801227c:	4a14      	ldr	r2, [pc, #80]	; (80122d0 <PrepareFrame+0x27c>)
 801227e:	2398      	movs	r3, #152	; 0x98
 8012280:	005b      	lsls	r3, r3, #1
 8012282:	54d1      	strb	r1, [r2, r3]
            break;
 8012284:	e01b      	b.n	80122be <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d01a      	beq.n	80122c2 <PrepareFrame+0x26e>
 801228c:	4b10      	ldr	r3, [pc, #64]	; (80122d0 <PrepareFrame+0x27c>)
 801228e:	4a13      	ldr	r2, [pc, #76]	; (80122dc <PrepareFrame+0x288>)
 8012290:	5c9b      	ldrb	r3, [r3, r2]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d015      	beq.n	80122c2 <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012296:	4816      	ldr	r0, [pc, #88]	; (80122f0 <PrepareFrame+0x29c>)
 8012298:	4b0d      	ldr	r3, [pc, #52]	; (80122d0 <PrepareFrame+0x27c>)
 801229a:	4a10      	ldr	r2, [pc, #64]	; (80122dc <PrepareFrame+0x288>)
 801229c:	5c9b      	ldrb	r3, [r3, r2]
 801229e:	b29a      	uxth	r2, r3
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	0019      	movs	r1, r3
 80122a4:	f007 f842 	bl	801932c <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80122a8:	4b09      	ldr	r3, [pc, #36]	; (80122d0 <PrepareFrame+0x27c>)
 80122aa:	4a0c      	ldr	r2, [pc, #48]	; (80122dc <PrepareFrame+0x288>)
 80122ac:	5c9b      	ldrb	r3, [r3, r2]
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	3301      	adds	r3, #1
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	4b06      	ldr	r3, [pc, #24]	; (80122d0 <PrepareFrame+0x27c>)
 80122b6:	801a      	strh	r2, [r3, #0]
            }
            break;
 80122b8:	e003      	b.n	80122c2 <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80122ba:	2302      	movs	r3, #2
 80122bc:	e003      	b.n	80122c6 <PrepareFrame+0x272>
            break;
 80122be:	46c0      	nop			; (mov r8, r8)
 80122c0:	e000      	b.n	80122c4 <PrepareFrame+0x270>
            break;
 80122c2:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 80122c4:	2300      	movs	r3, #0
}
 80122c6:	0018      	movs	r0, r3
 80122c8:	46bd      	mov	sp, r7
 80122ca:	b009      	add	sp, #36	; 0x24
 80122cc:	bd90      	pop	{r4, r7, pc}
 80122ce:	46c0      	nop			; (mov r8, r8)
 80122d0:	2000054c 	.word	0x2000054c
 80122d4:	00000414 	.word	0x00000414
 80122d8:	20000684 	.word	0x20000684
 80122dc:	00000237 	.word	0x00000237
 80122e0:	2000054e 	.word	0x2000054e
 80122e4:	00000484 	.word	0x00000484
 80122e8:	00000441 	.word	0x00000441
 80122ec:	20000664 	.word	0x20000664
 80122f0:	2000054f 	.word	0x2000054f

080122f4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80122f4:	b5b0      	push	{r4, r5, r7, lr}
 80122f6:	b08a      	sub	sp, #40	; 0x28
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	0002      	movs	r2, r0
 80122fc:	1dfb      	adds	r3, r7, #7
 80122fe:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012300:	2327      	movs	r3, #39	; 0x27
 8012302:	18fb      	adds	r3, r7, r3
 8012304:	2203      	movs	r2, #3
 8012306:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 10;
 8012308:	240f      	movs	r4, #15
 801230a:	193b      	adds	r3, r7, r4
 801230c:	220a      	movs	r2, #10
 801230e:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8012310:	2110      	movs	r1, #16
 8012312:	187b      	adds	r3, r7, r1
 8012314:	1dfa      	adds	r2, r7, #7
 8012316:	7812      	ldrb	r2, [r2, #0]
 8012318:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801231a:	4b57      	ldr	r3, [pc, #348]	; (8012478 <SendFrameOnChannel+0x184>)
 801231c:	4a57      	ldr	r2, [pc, #348]	; (801247c <SendFrameOnChannel+0x188>)
 801231e:	589b      	ldr	r3, [r3, r2]
 8012320:	2285      	movs	r2, #133	; 0x85
 8012322:	569a      	ldrsb	r2, [r3, r2]
 8012324:	187b      	adds	r3, r7, r1
 8012326:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012328:	4b53      	ldr	r3, [pc, #332]	; (8012478 <SendFrameOnChannel+0x184>)
 801232a:	4a54      	ldr	r2, [pc, #336]	; (801247c <SendFrameOnChannel+0x188>)
 801232c:	589b      	ldr	r3, [r3, r2]
 801232e:	2284      	movs	r2, #132	; 0x84
 8012330:	569a      	ldrsb	r2, [r3, r2]
 8012332:	187b      	adds	r3, r7, r1
 8012334:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012336:	4b50      	ldr	r3, [pc, #320]	; (8012478 <SendFrameOnChannel+0x184>)
 8012338:	4a50      	ldr	r2, [pc, #320]	; (801247c <SendFrameOnChannel+0x188>)
 801233a:	589b      	ldr	r3, [r3, r2]
 801233c:	22bc      	movs	r2, #188	; 0xbc
 801233e:	589a      	ldr	r2, [r3, r2]
 8012340:	187b      	adds	r3, r7, r1
 8012342:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012344:	4b4c      	ldr	r3, [pc, #304]	; (8012478 <SendFrameOnChannel+0x184>)
 8012346:	4a4d      	ldr	r2, [pc, #308]	; (801247c <SendFrameOnChannel+0x188>)
 8012348:	589b      	ldr	r3, [r3, r2]
 801234a:	22c0      	movs	r2, #192	; 0xc0
 801234c:	589a      	ldr	r2, [r3, r2]
 801234e:	187b      	adds	r3, r7, r1
 8012350:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012352:	4b49      	ldr	r3, [pc, #292]	; (8012478 <SendFrameOnChannel+0x184>)
 8012354:	881a      	ldrh	r2, [r3, #0]
 8012356:	187b      	adds	r3, r7, r1
 8012358:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801235a:	4b47      	ldr	r3, [pc, #284]	; (8012478 <SendFrameOnChannel+0x184>)
 801235c:	4a47      	ldr	r2, [pc, #284]	; (801247c <SendFrameOnChannel+0x188>)
 801235e:	589b      	ldr	r3, [r3, r2]
 8012360:	7818      	ldrb	r0, [r3, #0]
 8012362:	4b47      	ldr	r3, [pc, #284]	; (8012480 <SendFrameOnChannel+0x18c>)
 8012364:	193a      	adds	r2, r7, r4
 8012366:	1879      	adds	r1, r7, r1
 8012368:	f004 fc4e 	bl	8016c08 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801236c:	4b42      	ldr	r3, [pc, #264]	; (8012478 <SendFrameOnChannel+0x184>)
 801236e:	4a45      	ldr	r2, [pc, #276]	; (8012484 <SendFrameOnChannel+0x190>)
 8012370:	2101      	movs	r1, #1
 8012372:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012374:	4b40      	ldr	r3, [pc, #256]	; (8012478 <SendFrameOnChannel+0x184>)
 8012376:	4a41      	ldr	r2, [pc, #260]	; (801247c <SendFrameOnChannel+0x188>)
 8012378:	589b      	ldr	r3, [r3, r2]
 801237a:	2285      	movs	r2, #133	; 0x85
 801237c:	569b      	ldrsb	r3, [r3, r2]
 801237e:	b2d9      	uxtb	r1, r3
 8012380:	4b3d      	ldr	r3, [pc, #244]	; (8012478 <SendFrameOnChannel+0x184>)
 8012382:	4a41      	ldr	r2, [pc, #260]	; (8012488 <SendFrameOnChannel+0x194>)
 8012384:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 8012386:	193b      	adds	r3, r7, r4
 8012388:	2100      	movs	r1, #0
 801238a:	5659      	ldrsb	r1, [r3, r1]
 801238c:	4b3a      	ldr	r3, [pc, #232]	; (8012478 <SendFrameOnChannel+0x184>)
 801238e:	4a3f      	ldr	r2, [pc, #252]	; (801248c <SendFrameOnChannel+0x198>)
 8012390:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 8012392:	1dfb      	adds	r3, r7, #7
 8012394:	781a      	ldrb	r2, [r3, #0]
 8012396:	4b38      	ldr	r3, [pc, #224]	; (8012478 <SendFrameOnChannel+0x184>)
 8012398:	493d      	ldr	r1, [pc, #244]	; (8012490 <SendFrameOnChannel+0x19c>)
 801239a:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801239c:	4a36      	ldr	r2, [pc, #216]	; (8012478 <SendFrameOnChannel+0x184>)
 801239e:	2383      	movs	r3, #131	; 0x83
 80123a0:	00db      	lsls	r3, r3, #3
 80123a2:	58d2      	ldr	r2, [r2, r3]
 80123a4:	4b34      	ldr	r3, [pc, #208]	; (8012478 <SendFrameOnChannel+0x184>)
 80123a6:	493b      	ldr	r1, [pc, #236]	; (8012494 <SendFrameOnChannel+0x1a0>)
 80123a8:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80123aa:	4a33      	ldr	r2, [pc, #204]	; (8012478 <SendFrameOnChannel+0x184>)
 80123ac:	2383      	movs	r3, #131	; 0x83
 80123ae:	00db      	lsls	r3, r3, #3
 80123b0:	58d2      	ldr	r2, [r2, r3]
 80123b2:	4b31      	ldr	r3, [pc, #196]	; (8012478 <SendFrameOnChannel+0x184>)
 80123b4:	4938      	ldr	r1, [pc, #224]	; (8012498 <SendFrameOnChannel+0x1a4>)
 80123b6:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80123b8:	f002 f9b0 	bl	801471c <LoRaMacClassBIsBeaconModeActive>
 80123bc:	1e03      	subs	r3, r0, #0
 80123be:	d00d      	beq.n	80123dc <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80123c0:	4a2d      	ldr	r2, [pc, #180]	; (8012478 <SendFrameOnChannel+0x184>)
 80123c2:	2383      	movs	r3, #131	; 0x83
 80123c4:	00db      	lsls	r3, r3, #3
 80123c6:	58d3      	ldr	r3, [r2, r3]
 80123c8:	0018      	movs	r0, r3
 80123ca:	f002 fa0b 	bl	80147e4 <LoRaMacClassBIsUplinkCollision>
 80123ce:	0003      	movs	r3, r0
 80123d0:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 80123d2:	6a3b      	ldr	r3, [r7, #32]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d001      	beq.n	80123dc <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80123d8:	2310      	movs	r3, #16
 80123da:	e048      	b.n	801246e <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80123dc:	4b26      	ldr	r3, [pc, #152]	; (8012478 <SendFrameOnChannel+0x184>)
 80123de:	4a27      	ldr	r2, [pc, #156]	; (801247c <SendFrameOnChannel+0x188>)
 80123e0:	589b      	ldr	r3, [r3, r2]
 80123e2:	227c      	movs	r2, #124	; 0x7c
 80123e4:	5c9b      	ldrb	r3, [r3, r2]
 80123e6:	2b01      	cmp	r3, #1
 80123e8:	d101      	bne.n	80123ee <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80123ea:	f002 fa04 	bl	80147f6 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80123ee:	f002 f9a5 	bl	801473c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80123f2:	4b21      	ldr	r3, [pc, #132]	; (8012478 <SendFrameOnChannel+0x184>)
 80123f4:	4a21      	ldr	r2, [pc, #132]	; (801247c <SendFrameOnChannel+0x188>)
 80123f6:	589b      	ldr	r3, [r3, r2]
 80123f8:	2285      	movs	r2, #133	; 0x85
 80123fa:	569b      	ldrsb	r3, [r3, r2]
 80123fc:	b2da      	uxtb	r2, r3
 80123fe:	4b1e      	ldr	r3, [pc, #120]	; (8012478 <SendFrameOnChannel+0x184>)
 8012400:	4926      	ldr	r1, [pc, #152]	; (801249c <SendFrameOnChannel+0x1a8>)
 8012402:	5c5b      	ldrb	r3, [r3, r1]
 8012404:	2527      	movs	r5, #39	; 0x27
 8012406:	197c      	adds	r4, r7, r5
 8012408:	0019      	movs	r1, r3
 801240a:	0010      	movs	r0, r2
 801240c:	f7ff fbea 	bl	8011be4 <SecureFrame>
 8012410:	0003      	movs	r3, r0
 8012412:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8012414:	197b      	adds	r3, r7, r5
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d002      	beq.n	8012422 <SendFrameOnChannel+0x12e>
    {
        return status;
 801241c:	197b      	adds	r3, r7, r5
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	e025      	b.n	801246e <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012422:	4a15      	ldr	r2, [pc, #84]	; (8012478 <SendFrameOnChannel+0x184>)
 8012424:	23d0      	movs	r3, #208	; 0xd0
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	58d3      	ldr	r3, [r2, r3]
 801242a:	2202      	movs	r2, #2
 801242c:	431a      	orrs	r2, r3
 801242e:	0011      	movs	r1, r2
 8012430:	4a11      	ldr	r2, [pc, #68]	; (8012478 <SendFrameOnChannel+0x184>)
 8012432:	23d0      	movs	r3, #208	; 0xd0
 8012434:	009b      	lsls	r3, r3, #2
 8012436:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8012438:	4b0f      	ldr	r3, [pc, #60]	; (8012478 <SendFrameOnChannel+0x184>)
 801243a:	4a19      	ldr	r2, [pc, #100]	; (80124a0 <SendFrameOnChannel+0x1ac>)
 801243c:	5c9b      	ldrb	r3, [r3, r2]
 801243e:	2201      	movs	r2, #1
 8012440:	4053      	eors	r3, r2
 8012442:	b2db      	uxtb	r3, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	d009      	beq.n	801245c <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012448:	4a0b      	ldr	r2, [pc, #44]	; (8012478 <SendFrameOnChannel+0x184>)
 801244a:	2382      	movs	r3, #130	; 0x82
 801244c:	00db      	lsls	r3, r3, #3
 801244e:	5cd3      	ldrb	r3, [r2, r3]
 8012450:	3301      	adds	r3, #1
 8012452:	b2d9      	uxtb	r1, r3
 8012454:	4a08      	ldr	r2, [pc, #32]	; (8012478 <SendFrameOnChannel+0x184>)
 8012456:	2382      	movs	r3, #130	; 0x82
 8012458:	00db      	lsls	r3, r3, #3
 801245a:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 801245c:	4b11      	ldr	r3, [pc, #68]	; (80124a4 <SendFrameOnChannel+0x1b0>)
 801245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012460:	4a05      	ldr	r2, [pc, #20]	; (8012478 <SendFrameOnChannel+0x184>)
 8012462:	8812      	ldrh	r2, [r2, #0]
 8012464:	b2d1      	uxtb	r1, r2
 8012466:	4a10      	ldr	r2, [pc, #64]	; (80124a8 <SendFrameOnChannel+0x1b4>)
 8012468:	0010      	movs	r0, r2
 801246a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 801246c:	2300      	movs	r3, #0
}
 801246e:	0018      	movs	r0, r3
 8012470:	46bd      	mov	sp, r7
 8012472:	b00a      	add	sp, #40	; 0x28
 8012474:	bdb0      	pop	{r4, r5, r7, pc}
 8012476:	46c0      	nop			; (mov r8, r8)
 8012478:	2000054c 	.word	0x2000054c
 801247c:	00000484 	.word	0x00000484
 8012480:	20000964 	.word	0x20000964
 8012484:	0000043d 	.word	0x0000043d
 8012488:	0000043e 	.word	0x0000043e
 801248c:	0000043f 	.word	0x0000043f
 8012490:	0000044c 	.word	0x0000044c
 8012494:	00000444 	.word	0x00000444
 8012498:	00000454 	.word	0x00000454
 801249c:	00000415 	.word	0x00000415
 80124a0:	00000414 	.word	0x00000414
 80124a4:	0801f0bc 	.word	0x0801f0bc
 80124a8:	2000054e 	.word	0x2000054e

080124ac <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b086      	sub	sp, #24
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	0002      	movs	r2, r0
 80124b4:	1dbb      	adds	r3, r7, #6
 80124b6:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80124b8:	4b1f      	ldr	r3, [pc, #124]	; (8012538 <SetTxContinuousWave+0x8c>)
 80124ba:	4a20      	ldr	r2, [pc, #128]	; (801253c <SetTxContinuousWave+0x90>)
 80124bc:	5c9a      	ldrb	r2, [r3, r2]
 80124be:	2108      	movs	r1, #8
 80124c0:	187b      	adds	r3, r7, r1
 80124c2:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80124c4:	4b1c      	ldr	r3, [pc, #112]	; (8012538 <SetTxContinuousWave+0x8c>)
 80124c6:	4a1e      	ldr	r2, [pc, #120]	; (8012540 <SetTxContinuousWave+0x94>)
 80124c8:	589b      	ldr	r3, [r3, r2]
 80124ca:	2285      	movs	r2, #133	; 0x85
 80124cc:	569a      	ldrsb	r2, [r3, r2]
 80124ce:	187b      	adds	r3, r7, r1
 80124d0:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80124d2:	4b19      	ldr	r3, [pc, #100]	; (8012538 <SetTxContinuousWave+0x8c>)
 80124d4:	4a1a      	ldr	r2, [pc, #104]	; (8012540 <SetTxContinuousWave+0x94>)
 80124d6:	589b      	ldr	r3, [r3, r2]
 80124d8:	2284      	movs	r2, #132	; 0x84
 80124da:	569a      	ldrsb	r2, [r3, r2]
 80124dc:	187b      	adds	r3, r7, r1
 80124de:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80124e0:	4b15      	ldr	r3, [pc, #84]	; (8012538 <SetTxContinuousWave+0x8c>)
 80124e2:	4a17      	ldr	r2, [pc, #92]	; (8012540 <SetTxContinuousWave+0x94>)
 80124e4:	589b      	ldr	r3, [r3, r2]
 80124e6:	22bc      	movs	r2, #188	; 0xbc
 80124e8:	589a      	ldr	r2, [r3, r2]
 80124ea:	187b      	adds	r3, r7, r1
 80124ec:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80124ee:	4b12      	ldr	r3, [pc, #72]	; (8012538 <SetTxContinuousWave+0x8c>)
 80124f0:	4a13      	ldr	r2, [pc, #76]	; (8012540 <SetTxContinuousWave+0x94>)
 80124f2:	589b      	ldr	r3, [r3, r2]
 80124f4:	22c0      	movs	r2, #192	; 0xc0
 80124f6:	589a      	ldr	r2, [r3, r2]
 80124f8:	187b      	adds	r3, r7, r1
 80124fa:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 80124fc:	187b      	adds	r3, r7, r1
 80124fe:	1dba      	adds	r2, r7, #6
 8012500:	8812      	ldrh	r2, [r2, #0]
 8012502:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8012504:	4b0c      	ldr	r3, [pc, #48]	; (8012538 <SetTxContinuousWave+0x8c>)
 8012506:	4a0e      	ldr	r2, [pc, #56]	; (8012540 <SetTxContinuousWave+0x94>)
 8012508:	589b      	ldr	r3, [r3, r2]
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	187a      	adds	r2, r7, r1
 801250e:	0011      	movs	r1, r2
 8012510:	0018      	movs	r0, r3
 8012512:	f004 fc48 	bl	8016da6 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012516:	4a08      	ldr	r2, [pc, #32]	; (8012538 <SetTxContinuousWave+0x8c>)
 8012518:	23d0      	movs	r3, #208	; 0xd0
 801251a:	009b      	lsls	r3, r3, #2
 801251c:	58d3      	ldr	r3, [r2, r3]
 801251e:	2202      	movs	r2, #2
 8012520:	431a      	orrs	r2, r3
 8012522:	0011      	movs	r1, r2
 8012524:	4a04      	ldr	r2, [pc, #16]	; (8012538 <SetTxContinuousWave+0x8c>)
 8012526:	23d0      	movs	r3, #208	; 0xd0
 8012528:	009b      	lsls	r3, r3, #2
 801252a:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 801252c:	2300      	movs	r3, #0
}
 801252e:	0018      	movs	r0, r3
 8012530:	46bd      	mov	sp, r7
 8012532:	b006      	add	sp, #24
 8012534:	bd80      	pop	{r7, pc}
 8012536:	46c0      	nop			; (mov r8, r8)
 8012538:	2000054c 	.word	0x2000054c
 801253c:	00000415 	.word	0x00000415
 8012540:	00000484 	.word	0x00000484

08012544 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b082      	sub	sp, #8
 8012548:	af00      	add	r7, sp, #0
 801254a:	6039      	str	r1, [r7, #0]
 801254c:	0011      	movs	r1, r2
 801254e:	1dbb      	adds	r3, r7, #6
 8012550:	1c02      	adds	r2, r0, #0
 8012552:	801a      	strh	r2, [r3, #0]
 8012554:	1d7b      	adds	r3, r7, #5
 8012556:	1c0a      	adds	r2, r1, #0
 8012558:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801255a:	4b0c      	ldr	r3, [pc, #48]	; (801258c <SetTxContinuousWave1+0x48>)
 801255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801255e:	1d7a      	adds	r2, r7, #5
 8012560:	2100      	movs	r1, #0
 8012562:	5651      	ldrsb	r1, [r2, r1]
 8012564:	1dba      	adds	r2, r7, #6
 8012566:	8812      	ldrh	r2, [r2, #0]
 8012568:	6838      	ldr	r0, [r7, #0]
 801256a:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801256c:	4a08      	ldr	r2, [pc, #32]	; (8012590 <SetTxContinuousWave1+0x4c>)
 801256e:	23d0      	movs	r3, #208	; 0xd0
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	58d3      	ldr	r3, [r2, r3]
 8012574:	2202      	movs	r2, #2
 8012576:	431a      	orrs	r2, r3
 8012578:	0011      	movs	r1, r2
 801257a:	4a05      	ldr	r2, [pc, #20]	; (8012590 <SetTxContinuousWave1+0x4c>)
 801257c:	23d0      	movs	r3, #208	; 0xd0
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8012582:	2300      	movs	r3, #0
}
 8012584:	0018      	movs	r0, r3
 8012586:	46bd      	mov	sp, r7
 8012588:	b002      	add	sp, #8
 801258a:	bd80      	pop	{r7, pc}
 801258c:	0801f0bc 	.word	0x0801f0bc
 8012590:	2000054c 	.word	0x2000054c

08012594 <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 801259a:	4b20      	ldr	r3, [pc, #128]	; (801261c <GetCtxs+0x88>)
 801259c:	4a20      	ldr	r2, [pc, #128]	; (8012620 <GetCtxs+0x8c>)
 801259e:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 80125a0:	4b1e      	ldr	r3, [pc, #120]	; (801261c <GetCtxs+0x88>)
 80125a2:	22b6      	movs	r2, #182	; 0xb6
 80125a4:	0052      	lsls	r2, r2, #1
 80125a6:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 80125a8:	4b1e      	ldr	r3, [pc, #120]	; (8012624 <GetCtxs+0x90>)
 80125aa:	0018      	movs	r0, r3
 80125ac:	f003 faa6 	bl	8015afc <LoRaMacCryptoGetNvmCtx>
 80125b0:	0002      	movs	r2, r0
 80125b2:	4b1a      	ldr	r3, [pc, #104]	; (801261c <GetCtxs+0x88>)
 80125b4:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 80125b6:	2300      	movs	r3, #0
 80125b8:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 80125ba:	4b1b      	ldr	r3, [pc, #108]	; (8012628 <GetCtxs+0x94>)
 80125bc:	4a1b      	ldr	r2, [pc, #108]	; (801262c <GetCtxs+0x98>)
 80125be:	589b      	ldr	r3, [r3, r2]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	1d3a      	adds	r2, r7, #4
 80125c4:	0011      	movs	r1, r2
 80125c6:	0018      	movs	r0, r3
 80125c8:	f004 fa82 	bl	8016ad0 <RegionGetNvmCtx>
 80125cc:	0002      	movs	r2, r0
 80125ce:	4b13      	ldr	r3, [pc, #76]	; (801261c <GetCtxs+0x88>)
 80125d0:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	4b11      	ldr	r3, [pc, #68]	; (801261c <GetCtxs+0x88>)
 80125d6:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 80125d8:	4b15      	ldr	r3, [pc, #84]	; (8012630 <GetCtxs+0x9c>)
 80125da:	0018      	movs	r0, r3
 80125dc:	f7fb f8a4 	bl	800d728 <SecureElementGetNvmCtx>
 80125e0:	0002      	movs	r2, r0
 80125e2:	4b0e      	ldr	r3, [pc, #56]	; (801261c <GetCtxs+0x88>)
 80125e4:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 80125e6:	4b13      	ldr	r3, [pc, #76]	; (8012634 <GetCtxs+0xa0>)
 80125e8:	0018      	movs	r0, r3
 80125ea:	f002 fa63 	bl	8014ab4 <LoRaMacCommandsGetNvmCtx>
 80125ee:	0002      	movs	r2, r0
 80125f0:	4b0a      	ldr	r3, [pc, #40]	; (801261c <GetCtxs+0x88>)
 80125f2:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 80125f4:	4b10      	ldr	r3, [pc, #64]	; (8012638 <GetCtxs+0xa4>)
 80125f6:	0018      	movs	r0, r3
 80125f8:	f002 f82a 	bl	8014650 <LoRaMacClassBGetNvmCtx>
 80125fc:	0002      	movs	r2, r0
 80125fe:	4b07      	ldr	r3, [pc, #28]	; (801261c <GetCtxs+0x88>)
 8012600:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8012602:	4b0e      	ldr	r3, [pc, #56]	; (801263c <GetCtxs+0xa8>)
 8012604:	0018      	movs	r0, r3
 8012606:	f002 fcf5 	bl	8014ff4 <LoRaMacConfirmQueueGetNvmCtx>
 801260a:	0002      	movs	r2, r0
 801260c:	4b03      	ldr	r3, [pc, #12]	; (801261c <GetCtxs+0x88>)
 801260e:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 8012610:	4b02      	ldr	r3, [pc, #8]	; (801261c <GetCtxs+0x88>)
}
 8012612:	0018      	movs	r0, r3
 8012614:	46bd      	mov	sp, r7
 8012616:	b002      	add	sp, #8
 8012618:	bd80      	pop	{r7, pc}
 801261a:	46c0      	nop			; (mov r8, r8)
 801261c:	20000b44 	.word	0x20000b44
 8012620:	200009d8 	.word	0x200009d8
 8012624:	20000b58 	.word	0x20000b58
 8012628:	2000054c 	.word	0x2000054c
 801262c:	00000484 	.word	0x00000484
 8012630:	20000b60 	.word	0x20000b60
 8012634:	20000b68 	.word	0x20000b68
 8012638:	20000b70 	.word	0x20000b70
 801263c:	20000b78 	.word	0x20000b78

08012640 <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d101      	bne.n	8012652 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801264e:	2303      	movs	r3, #3
 8012650:	e086      	b.n	8012760 <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012652:	4a45      	ldr	r2, [pc, #276]	; (8012768 <RestoreCtxs+0x128>)
 8012654:	23d0      	movs	r3, #208	; 0xd0
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	58d3      	ldr	r3, [r2, r3]
 801265a:	2b01      	cmp	r3, #1
 801265c:	d001      	beq.n	8012662 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 801265e:	2301      	movs	r3, #1
 8012660:	e07e      	b.n	8012760 <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d008      	beq.n	801267c <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6819      	ldr	r1, [r3, #0]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	b29a      	uxth	r2, r3
 8012674:	4b3d      	ldr	r3, [pc, #244]	; (801276c <RestoreCtxs+0x12c>)
 8012676:	0018      	movs	r0, r3
 8012678:	f006 fe58 	bl	801932c <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 801267c:	2108      	movs	r1, #8
 801267e:	187b      	adds	r3, r7, r1
 8012680:	2203      	movs	r2, #3
 8012682:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	689a      	ldr	r2, [r3, #8]
 8012688:	187b      	adds	r3, r7, r1
 801268a:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 801268c:	4b36      	ldr	r3, [pc, #216]	; (8012768 <RestoreCtxs+0x128>)
 801268e:	4a38      	ldr	r2, [pc, #224]	; (8012770 <RestoreCtxs+0x130>)
 8012690:	589b      	ldr	r3, [r3, r2]
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	187a      	adds	r2, r7, r1
 8012696:	0011      	movs	r1, r2
 8012698:	0018      	movs	r0, r3
 801269a:	f004 fa04 	bl	8016aa6 <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801269e:	4b32      	ldr	r3, [pc, #200]	; (8012768 <RestoreCtxs+0x128>)
 80126a0:	4a34      	ldr	r2, [pc, #208]	; (8012774 <RestoreCtxs+0x134>)
 80126a2:	5c99      	ldrb	r1, [r3, r2]
 80126a4:	4a30      	ldr	r2, [pc, #192]	; (8012768 <RestoreCtxs+0x128>)
 80126a6:	23f8      	movs	r3, #248	; 0xf8
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80126ac:	4b2e      	ldr	r3, [pc, #184]	; (8012768 <RestoreCtxs+0x128>)
 80126ae:	4a30      	ldr	r2, [pc, #192]	; (8012770 <RestoreCtxs+0x130>)
 80126b0:	589b      	ldr	r3, [r3, r2]
 80126b2:	22b0      	movs	r2, #176	; 0xb0
 80126b4:	5899      	ldr	r1, [r3, r2]
 80126b6:	4a2c      	ldr	r2, [pc, #176]	; (8012768 <RestoreCtxs+0x128>)
 80126b8:	23f9      	movs	r3, #249	; 0xf9
 80126ba:	009b      	lsls	r3, r3, #2
 80126bc:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80126be:	4b2a      	ldr	r3, [pc, #168]	; (8012768 <RestoreCtxs+0x128>)
 80126c0:	4a2b      	ldr	r2, [pc, #172]	; (8012770 <RestoreCtxs+0x130>)
 80126c2:	589b      	ldr	r3, [r3, r2]
 80126c4:	22b9      	movs	r2, #185	; 0xb9
 80126c6:	5c99      	ldrb	r1, [r3, r2]
 80126c8:	4a27      	ldr	r2, [pc, #156]	; (8012768 <RestoreCtxs+0x128>)
 80126ca:	23fc      	movs	r3, #252	; 0xfc
 80126cc:	009b      	lsls	r3, r3, #2
 80126ce:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80126d0:	4b25      	ldr	r3, [pc, #148]	; (8012768 <RestoreCtxs+0x128>)
 80126d2:	4a27      	ldr	r2, [pc, #156]	; (8012770 <RestoreCtxs+0x130>)
 80126d4:	589b      	ldr	r3, [r3, r2]
 80126d6:	22ca      	movs	r2, #202	; 0xca
 80126d8:	5c99      	ldrb	r1, [r3, r2]
 80126da:	4b23      	ldr	r3, [pc, #140]	; (8012768 <RestoreCtxs+0x128>)
 80126dc:	4a26      	ldr	r2, [pc, #152]	; (8012778 <RestoreCtxs+0x138>)
 80126de:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80126e0:	4b21      	ldr	r3, [pc, #132]	; (8012768 <RestoreCtxs+0x128>)
 80126e2:	4a26      	ldr	r2, [pc, #152]	; (801277c <RestoreCtxs+0x13c>)
 80126e4:	2101      	movs	r1, #1
 80126e6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80126e8:	4b1f      	ldr	r3, [pc, #124]	; (8012768 <RestoreCtxs+0x128>)
 80126ea:	4a25      	ldr	r2, [pc, #148]	; (8012780 <RestoreCtxs+0x140>)
 80126ec:	2102      	movs	r1, #2
 80126ee:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	699b      	ldr	r3, [r3, #24]
 80126f4:	0018      	movs	r0, r3
 80126f6:	f7fb f801 	bl	800d6fc <SecureElementRestoreNvmCtx>
 80126fa:	1e03      	subs	r3, r0, #0
 80126fc:	d001      	beq.n	8012702 <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80126fe:	2311      	movs	r3, #17
 8012700:	e02e      	b.n	8012760 <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	691b      	ldr	r3, [r3, #16]
 8012706:	0018      	movs	r0, r3
 8012708:	f003 f9e2 	bl	8015ad0 <LoRaMacCryptoRestoreNvmCtx>
 801270c:	1e03      	subs	r3, r0, #0
 801270e:	d001      	beq.n	8012714 <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012710:	2311      	movs	r3, #17
 8012712:	e025      	b.n	8012760 <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6a1b      	ldr	r3, [r3, #32]
 8012718:	0018      	movs	r0, r3
 801271a:	f002 f9b5 	bl	8014a88 <LoRaMacCommandsRestoreNvmCtx>
 801271e:	1e03      	subs	r3, r0, #0
 8012720:	d001      	beq.n	8012726 <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012722:	2313      	movs	r3, #19
 8012724:	e01c      	b.n	8012760 <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801272a:	0018      	movs	r0, r3
 801272c:	f001 ff87 	bl	801463e <LoRaMacClassBRestoreNvmCtx>
 8012730:	0003      	movs	r3, r0
 8012732:	001a      	movs	r2, r3
 8012734:	2301      	movs	r3, #1
 8012736:	4053      	eors	r3, r2
 8012738:	b2db      	uxtb	r3, r3
 801273a:	2b00      	cmp	r3, #0
 801273c:	d001      	beq.n	8012742 <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 801273e:	2314      	movs	r3, #20
 8012740:	e00e      	b.n	8012760 <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012746:	0018      	movs	r0, r3
 8012748:	f002 fc3e 	bl	8014fc8 <LoRaMacConfirmQueueRestoreNvmCtx>
 801274c:	0003      	movs	r3, r0
 801274e:	001a      	movs	r2, r3
 8012750:	2301      	movs	r3, #1
 8012752:	4053      	eors	r3, r2
 8012754:	b2db      	uxtb	r3, r3
 8012756:	2b00      	cmp	r3, #0
 8012758:	d001      	beq.n	801275e <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 801275a:	2315      	movs	r3, #21
 801275c:	e000      	b.n	8012760 <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 801275e:	2300      	movs	r3, #0
}
 8012760:	0018      	movs	r0, r3
 8012762:	46bd      	mov	sp, r7
 8012764:	b004      	add	sp, #16
 8012766:	bd80      	pop	{r7, pc}
 8012768:	2000054c 	.word	0x2000054c
 801276c:	200009d8 	.word	0x200009d8
 8012770:	00000484 	.word	0x00000484
 8012774:	00000415 	.word	0x00000415
 8012778:	000003f1 	.word	0x000003f1
 801277c:	000003f2 	.word	0x000003f2
 8012780:	000003f3 	.word	0x000003f3

08012784 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d002      	beq.n	801279a <DetermineFrameType+0x16>
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d101      	bne.n	801279e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801279a:	2303      	movs	r3, #3
 801279c:	e03b      	b.n	8012816 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	7b1b      	ldrb	r3, [r3, #12]
 80127a2:	220f      	movs	r2, #15
 80127a4:	4013      	ands	r3, r2
 80127a6:	b2db      	uxtb	r3, r3
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d008      	beq.n	80127be <DetermineFrameType+0x3a>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2220      	movs	r2, #32
 80127b0:	5c9b      	ldrb	r3, [r3, r2]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d003      	beq.n	80127be <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	2200      	movs	r2, #0
 80127ba:	701a      	strb	r2, [r3, #0]
 80127bc:	e02a      	b.n	8012814 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2228      	movs	r2, #40	; 0x28
 80127c2:	5c9b      	ldrb	r3, [r3, r2]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d103      	bne.n	80127d0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	2201      	movs	r2, #1
 80127cc:	701a      	strb	r2, [r3, #0]
 80127ce:	e021      	b.n	8012814 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	7b1b      	ldrb	r3, [r3, #12]
 80127d4:	220f      	movs	r2, #15
 80127d6:	4013      	ands	r3, r2
 80127d8:	b2db      	uxtb	r3, r3
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d108      	bne.n	80127f0 <DetermineFrameType+0x6c>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2220      	movs	r2, #32
 80127e2:	5c9b      	ldrb	r3, [r3, r2]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d103      	bne.n	80127f0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	2202      	movs	r2, #2
 80127ec:	701a      	strb	r2, [r3, #0]
 80127ee:	e011      	b.n	8012814 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	7b1b      	ldrb	r3, [r3, #12]
 80127f4:	220f      	movs	r2, #15
 80127f6:	4013      	ands	r3, r2
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d108      	bne.n	8012810 <DetermineFrameType+0x8c>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2220      	movs	r2, #32
 8012802:	5c9b      	ldrb	r3, [r3, r2]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d003      	beq.n	8012810 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	2203      	movs	r2, #3
 801280c:	701a      	strb	r2, [r3, #0]
 801280e:	e001      	b.n	8012814 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012810:	2317      	movs	r3, #23
 8012812:	e000      	b.n	8012816 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012814:	2300      	movs	r3, #0
}
 8012816:	0018      	movs	r0, r3
 8012818:	46bd      	mov	sp, r7
 801281a:	b002      	add	sp, #8
 801281c:	bd80      	pop	{r7, pc}
	...

08012820 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012820:	b580      	push	{r7, lr}
 8012822:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8012824:	4a14      	ldr	r2, [pc, #80]	; (8012878 <CheckRetransUnconfirmedUplink+0x58>)
 8012826:	2382      	movs	r3, #130	; 0x82
 8012828:	00db      	lsls	r3, r3, #3
 801282a:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 801282c:	4b12      	ldr	r3, [pc, #72]	; (8012878 <CheckRetransUnconfirmedUplink+0x58>)
 801282e:	4913      	ldr	r1, [pc, #76]	; (801287c <CheckRetransUnconfirmedUplink+0x5c>)
 8012830:	585b      	ldr	r3, [r3, r1]
 8012832:	21a4      	movs	r1, #164	; 0xa4
 8012834:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 8012836:	429a      	cmp	r2, r3
 8012838:	d301      	bcc.n	801283e <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 801283a:	2301      	movs	r3, #1
 801283c:	e018      	b.n	8012870 <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801283e:	4b0e      	ldr	r3, [pc, #56]	; (8012878 <CheckRetransUnconfirmedUplink+0x58>)
 8012840:	4a0f      	ldr	r2, [pc, #60]	; (8012880 <CheckRetransUnconfirmedUplink+0x60>)
 8012842:	5c9b      	ldrb	r3, [r3, r2]
 8012844:	2202      	movs	r2, #2
 8012846:	4013      	ands	r3, r2
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b00      	cmp	r3, #0
 801284c:	d00f      	beq.n	801286e <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 801284e:	4b0a      	ldr	r3, [pc, #40]	; (8012878 <CheckRetransUnconfirmedUplink+0x58>)
 8012850:	4a0a      	ldr	r2, [pc, #40]	; (801287c <CheckRetransUnconfirmedUplink+0x5c>)
 8012852:	589b      	ldr	r3, [r3, r2]
 8012854:	227c      	movs	r2, #124	; 0x7c
 8012856:	5c9b      	ldrb	r3, [r3, r2]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d101      	bne.n	8012860 <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 801285c:	2301      	movs	r3, #1
 801285e:	e007      	b.n	8012870 <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8012860:	4b05      	ldr	r3, [pc, #20]	; (8012878 <CheckRetransUnconfirmedUplink+0x58>)
 8012862:	4a08      	ldr	r2, [pc, #32]	; (8012884 <CheckRetransUnconfirmedUplink+0x64>)
 8012864:	5c9b      	ldrb	r3, [r3, r2]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d101      	bne.n	801286e <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 801286a:	2301      	movs	r3, #1
 801286c:	e000      	b.n	8012870 <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 801286e:	2300      	movs	r3, #0
}
 8012870:	0018      	movs	r0, r3
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
 8012876:	46c0      	nop			; (mov r8, r8)
 8012878:	2000054c 	.word	0x2000054c
 801287c:	00000484 	.word	0x00000484
 8012880:	00000481 	.word	0x00000481
 8012884:	0000042d 	.word	0x0000042d

08012888 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012888:	b580      	push	{r7, lr}
 801288a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 801288c:	4b0e      	ldr	r3, [pc, #56]	; (80128c8 <CheckRetransConfirmedUplink+0x40>)
 801288e:	4a0f      	ldr	r2, [pc, #60]	; (80128cc <CheckRetransConfirmedUplink+0x44>)
 8012890:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8012892:	4b0d      	ldr	r3, [pc, #52]	; (80128c8 <CheckRetransConfirmedUplink+0x40>)
 8012894:	490e      	ldr	r1, [pc, #56]	; (80128d0 <CheckRetransConfirmedUplink+0x48>)
 8012896:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012898:	429a      	cmp	r2, r3
 801289a:	d301      	bcc.n	80128a0 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 801289c:	2301      	movs	r3, #1
 801289e:	e010      	b.n	80128c2 <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80128a0:	4b09      	ldr	r3, [pc, #36]	; (80128c8 <CheckRetransConfirmedUplink+0x40>)
 80128a2:	4a0c      	ldr	r2, [pc, #48]	; (80128d4 <CheckRetransConfirmedUplink+0x4c>)
 80128a4:	5c9b      	ldrb	r3, [r3, r2]
 80128a6:	2202      	movs	r2, #2
 80128a8:	4013      	ands	r3, r2
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d007      	beq.n	80128c0 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80128b0:	4a05      	ldr	r2, [pc, #20]	; (80128c8 <CheckRetransConfirmedUplink+0x40>)
 80128b2:	2388      	movs	r3, #136	; 0x88
 80128b4:	00db      	lsls	r3, r3, #3
 80128b6:	5cd3      	ldrb	r3, [r2, r3]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d001      	beq.n	80128c0 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 80128bc:	2301      	movs	r3, #1
 80128be:	e000      	b.n	80128c2 <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 80128c0:	2300      	movs	r3, #0
}
 80128c2:	0018      	movs	r0, r3
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	2000054c 	.word	0x2000054c
 80128cc:	00000412 	.word	0x00000412
 80128d0:	00000411 	.word	0x00000411
 80128d4:	00000481 	.word	0x00000481

080128d8 <StopRetransmission>:

static bool StopRetransmission( void )
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80128dc:	4b1e      	ldr	r3, [pc, #120]	; (8012958 <StopRetransmission+0x80>)
 80128de:	4a1f      	ldr	r2, [pc, #124]	; (801295c <StopRetransmission+0x84>)
 80128e0:	5c9b      	ldrb	r3, [r3, r2]
 80128e2:	2202      	movs	r2, #2
 80128e4:	4013      	ands	r3, r2
 80128e6:	b2db      	uxtb	r3, r3
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d009      	beq.n	8012900 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 80128ec:	4b1a      	ldr	r3, [pc, #104]	; (8012958 <StopRetransmission+0x80>)
 80128ee:	4a1c      	ldr	r2, [pc, #112]	; (8012960 <StopRetransmission+0x88>)
 80128f0:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d013      	beq.n	801291e <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 80128f6:	4b18      	ldr	r3, [pc, #96]	; (8012958 <StopRetransmission+0x80>)
 80128f8:	4a19      	ldr	r2, [pc, #100]	; (8012960 <StopRetransmission+0x88>)
 80128fa:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 80128fc:	2b01      	cmp	r3, #1
 80128fe:	d00e      	beq.n	801291e <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8012900:	4b15      	ldr	r3, [pc, #84]	; (8012958 <StopRetransmission+0x80>)
 8012902:	4a18      	ldr	r2, [pc, #96]	; (8012964 <StopRetransmission+0x8c>)
 8012904:	589b      	ldr	r3, [r3, r2]
 8012906:	227e      	movs	r2, #126	; 0x7e
 8012908:	5c9b      	ldrb	r3, [r3, r2]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d007      	beq.n	801291e <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 801290e:	4b12      	ldr	r3, [pc, #72]	; (8012958 <StopRetransmission+0x80>)
 8012910:	4a14      	ldr	r2, [pc, #80]	; (8012964 <StopRetransmission+0x8c>)
 8012912:	589b      	ldr	r3, [r3, r2]
 8012914:	2280      	movs	r2, #128	; 0x80
 8012916:	589a      	ldr	r2, [r3, r2]
 8012918:	3201      	adds	r2, #1
 801291a:	2180      	movs	r1, #128	; 0x80
 801291c:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801291e:	4a0e      	ldr	r2, [pc, #56]	; (8012958 <StopRetransmission+0x80>)
 8012920:	2382      	movs	r3, #130	; 0x82
 8012922:	00db      	lsls	r3, r3, #3
 8012924:	2100      	movs	r1, #0
 8012926:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8012928:	4b0b      	ldr	r3, [pc, #44]	; (8012958 <StopRetransmission+0x80>)
 801292a:	4a0f      	ldr	r2, [pc, #60]	; (8012968 <StopRetransmission+0x90>)
 801292c:	2100      	movs	r1, #0
 801292e:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8012930:	4b09      	ldr	r3, [pc, #36]	; (8012958 <StopRetransmission+0x80>)
 8012932:	4a0e      	ldr	r2, [pc, #56]	; (801296c <StopRetransmission+0x94>)
 8012934:	2100      	movs	r1, #0
 8012936:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012938:	4a07      	ldr	r2, [pc, #28]	; (8012958 <StopRetransmission+0x80>)
 801293a:	23d0      	movs	r3, #208	; 0xd0
 801293c:	009b      	lsls	r3, r3, #2
 801293e:	58d3      	ldr	r3, [r2, r3]
 8012940:	2202      	movs	r2, #2
 8012942:	4393      	bics	r3, r2
 8012944:	0019      	movs	r1, r3
 8012946:	4a04      	ldr	r2, [pc, #16]	; (8012958 <StopRetransmission+0x80>)
 8012948:	23d0      	movs	r3, #208	; 0xd0
 801294a:	009b      	lsls	r3, r3, #2
 801294c:	50d1      	str	r1, [r2, r3]

    return true;
 801294e:	2301      	movs	r3, #1
}
 8012950:	0018      	movs	r0, r3
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}
 8012956:	46c0      	nop			; (mov r8, r8)
 8012958:	2000054c 	.word	0x2000054c
 801295c:	00000481 	.word	0x00000481
 8012960:	0000042d 	.word	0x0000042d
 8012964:	00000484 	.word	0x00000484
 8012968:	00000414 	.word	0x00000414
 801296c:	00000413 	.word	0x00000413

08012970 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8012976:	4b21      	ldr	r3, [pc, #132]	; (80129fc <AckTimeoutRetriesProcess+0x8c>)
 8012978:	4a21      	ldr	r2, [pc, #132]	; (8012a00 <AckTimeoutRetriesProcess+0x90>)
 801297a:	5c9a      	ldrb	r2, [r3, r2]
 801297c:	4b1f      	ldr	r3, [pc, #124]	; (80129fc <AckTimeoutRetriesProcess+0x8c>)
 801297e:	4921      	ldr	r1, [pc, #132]	; (8012a04 <AckTimeoutRetriesProcess+0x94>)
 8012980:	5c5b      	ldrb	r3, [r3, r1]
 8012982:	429a      	cmp	r2, r3
 8012984:	d236      	bcs.n	80129f4 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8012986:	4b1d      	ldr	r3, [pc, #116]	; (80129fc <AckTimeoutRetriesProcess+0x8c>)
 8012988:	4a1d      	ldr	r2, [pc, #116]	; (8012a00 <AckTimeoutRetriesProcess+0x90>)
 801298a:	5c9b      	ldrb	r3, [r3, r2]
 801298c:	3301      	adds	r3, #1
 801298e:	b2d9      	uxtb	r1, r3
 8012990:	4b1a      	ldr	r3, [pc, #104]	; (80129fc <AckTimeoutRetriesProcess+0x8c>)
 8012992:	4a1b      	ldr	r2, [pc, #108]	; (8012a00 <AckTimeoutRetriesProcess+0x90>)
 8012994:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8012996:	4b19      	ldr	r3, [pc, #100]	; (80129fc <AckTimeoutRetriesProcess+0x8c>)
 8012998:	4a19      	ldr	r2, [pc, #100]	; (8012a00 <AckTimeoutRetriesProcess+0x90>)
 801299a:	5c9b      	ldrb	r3, [r3, r2]
 801299c:	2201      	movs	r2, #1
 801299e:	4013      	ands	r3, r2
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d026      	beq.n	80129f4 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80129a6:	2108      	movs	r1, #8
 80129a8:	187b      	adds	r3, r7, r1
 80129aa:	2222      	movs	r2, #34	; 0x22
 80129ac:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80129ae:	4b13      	ldr	r3, [pc, #76]	; (80129fc <AckTimeoutRetriesProcess+0x8c>)
 80129b0:	4a15      	ldr	r2, [pc, #84]	; (8012a08 <AckTimeoutRetriesProcess+0x98>)
 80129b2:	589b      	ldr	r3, [r3, r2]
 80129b4:	22b8      	movs	r2, #184	; 0xb8
 80129b6:	5c9a      	ldrb	r2, [r3, r2]
 80129b8:	187b      	adds	r3, r7, r1
 80129ba:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80129bc:	4b0f      	ldr	r3, [pc, #60]	; (80129fc <AckTimeoutRetriesProcess+0x8c>)
 80129be:	4a12      	ldr	r2, [pc, #72]	; (8012a08 <AckTimeoutRetriesProcess+0x98>)
 80129c0:	589b      	ldr	r3, [r3, r2]
 80129c2:	2285      	movs	r2, #133	; 0x85
 80129c4:	569a      	ldrsb	r2, [r3, r2]
 80129c6:	187b      	adds	r3, r7, r1
 80129c8:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80129ca:	4b0c      	ldr	r3, [pc, #48]	; (80129fc <AckTimeoutRetriesProcess+0x8c>)
 80129cc:	4a0e      	ldr	r2, [pc, #56]	; (8012a08 <AckTimeoutRetriesProcess+0x98>)
 80129ce:	589b      	ldr	r3, [r3, r2]
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	187a      	adds	r2, r7, r1
 80129d4:	0011      	movs	r1, r2
 80129d6:	0018      	movs	r0, r3
 80129d8:	f004 f829 	bl	8016a2e <RegionGetPhyParam>
 80129dc:	0003      	movs	r3, r0
 80129de:	001a      	movs	r2, r3
 80129e0:	1d3b      	adds	r3, r7, #4
 80129e2:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 80129e4:	1d3b      	adds	r3, r7, #4
 80129e6:	6819      	ldr	r1, [r3, #0]
 80129e8:	4b04      	ldr	r3, [pc, #16]	; (80129fc <AckTimeoutRetriesProcess+0x8c>)
 80129ea:	4a07      	ldr	r2, [pc, #28]	; (8012a08 <AckTimeoutRetriesProcess+0x98>)
 80129ec:	589b      	ldr	r3, [r3, r2]
 80129ee:	b249      	sxtb	r1, r1
 80129f0:	2285      	movs	r2, #133	; 0x85
 80129f2:	5499      	strb	r1, [r3, r2]
        }
    }
}
 80129f4:	46c0      	nop			; (mov r8, r8)
 80129f6:	46bd      	mov	sp, r7
 80129f8:	b004      	add	sp, #16
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	2000054c 	.word	0x2000054c
 8012a00:	00000412 	.word	0x00000412
 8012a04:	00000411 	.word	0x00000411
 8012a08:	00000484 	.word	0x00000484

08012a0c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012a12:	4a16      	ldr	r2, [pc, #88]	; (8012a6c <AckTimeoutRetriesFinalize+0x60>)
 8012a14:	2388      	movs	r3, #136	; 0x88
 8012a16:	00db      	lsls	r3, r3, #3
 8012a18:	5cd3      	ldrb	r3, [r2, r3]
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	4053      	eors	r3, r2
 8012a1e:	b2db      	uxtb	r3, r3
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d018      	beq.n	8012a56 <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012a24:	003b      	movs	r3, r7
 8012a26:	2202      	movs	r2, #2
 8012a28:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8012a2a:	4b11      	ldr	r3, [pc, #68]	; (8012a70 <AckTimeoutRetriesFinalize+0x64>)
 8012a2c:	689a      	ldr	r2, [r3, #8]
 8012a2e:	003b      	movs	r3, r7
 8012a30:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012a32:	4b0e      	ldr	r3, [pc, #56]	; (8012a6c <AckTimeoutRetriesFinalize+0x60>)
 8012a34:	4a0f      	ldr	r2, [pc, #60]	; (8012a74 <AckTimeoutRetriesFinalize+0x68>)
 8012a36:	589b      	ldr	r3, [r3, r2]
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	003a      	movs	r2, r7
 8012a3c:	0011      	movs	r1, r2
 8012a3e:	0018      	movs	r0, r3
 8012a40:	f004 f831 	bl	8016aa6 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012a44:	4b09      	ldr	r3, [pc, #36]	; (8012a6c <AckTimeoutRetriesFinalize+0x60>)
 8012a46:	4a0c      	ldr	r2, [pc, #48]	; (8012a78 <AckTimeoutRetriesFinalize+0x6c>)
 8012a48:	2100      	movs	r1, #0
 8012a4a:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 8012a4c:	4a07      	ldr	r2, [pc, #28]	; (8012a6c <AckTimeoutRetriesFinalize+0x60>)
 8012a4e:	2388      	movs	r3, #136	; 0x88
 8012a50:	00db      	lsls	r3, r3, #3
 8012a52:	2100      	movs	r1, #0
 8012a54:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012a56:	4b05      	ldr	r3, [pc, #20]	; (8012a6c <AckTimeoutRetriesFinalize+0x60>)
 8012a58:	4a08      	ldr	r2, [pc, #32]	; (8012a7c <AckTimeoutRetriesFinalize+0x70>)
 8012a5a:	5c99      	ldrb	r1, [r3, r2]
 8012a5c:	4b03      	ldr	r3, [pc, #12]	; (8012a6c <AckTimeoutRetriesFinalize+0x60>)
 8012a5e:	4a08      	ldr	r2, [pc, #32]	; (8012a80 <AckTimeoutRetriesFinalize+0x74>)
 8012a60:	5499      	strb	r1, [r3, r2]
}
 8012a62:	46c0      	nop			; (mov r8, r8)
 8012a64:	46bd      	mov	sp, r7
 8012a66:	b002      	add	sp, #8
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	46c0      	nop			; (mov r8, r8)
 8012a6c:	2000054c 	.word	0x2000054c
 8012a70:	20000b44 	.word	0x20000b44
 8012a74:	00000484 	.word	0x00000484
 8012a78:	00000414 	.word	0x00000414
 8012a7c:	00000412 	.word	0x00000412
 8012a80:	00000441 	.word	0x00000441

08012a84 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b082      	sub	sp, #8
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	0002      	movs	r2, r0
 8012a8c:	1dfb      	adds	r3, r7, #7
 8012a8e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8012a90:	4a0c      	ldr	r2, [pc, #48]	; (8012ac4 <CallNvmCtxCallback+0x40>)
 8012a92:	23d2      	movs	r3, #210	; 0xd2
 8012a94:	009b      	lsls	r3, r3, #2
 8012a96:	58d3      	ldr	r3, [r2, r3]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d00f      	beq.n	8012abc <CallNvmCtxCallback+0x38>
 8012a9c:	4a09      	ldr	r2, [pc, #36]	; (8012ac4 <CallNvmCtxCallback+0x40>)
 8012a9e:	23d2      	movs	r3, #210	; 0xd2
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	58d3      	ldr	r3, [r2, r3]
 8012aa4:	689b      	ldr	r3, [r3, #8]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d008      	beq.n	8012abc <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8012aaa:	4a06      	ldr	r2, [pc, #24]	; (8012ac4 <CallNvmCtxCallback+0x40>)
 8012aac:	23d2      	movs	r3, #210	; 0xd2
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	58d3      	ldr	r3, [r2, r3]
 8012ab2:	689b      	ldr	r3, [r3, #8]
 8012ab4:	1dfa      	adds	r2, r7, #7
 8012ab6:	7812      	ldrb	r2, [r2, #0]
 8012ab8:	0010      	movs	r0, r2
 8012aba:	4798      	blx	r3
    }
}
 8012abc:	46c0      	nop			; (mov r8, r8)
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	b002      	add	sp, #8
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	2000054c 	.word	0x2000054c

08012ac8 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8012acc:	2000      	movs	r0, #0
 8012ace:	f7ff ffd9 	bl	8012a84 <CallNvmCtxCallback>
}
 8012ad2:	46c0      	nop			; (mov r8, r8)
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8012adc:	2001      	movs	r0, #1
 8012ade:	f7ff ffd1 	bl	8012a84 <CallNvmCtxCallback>
}
 8012ae2:	46c0      	nop			; (mov r8, r8)
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8012aec:	2002      	movs	r0, #2
 8012aee:	f7ff ffc9 	bl	8012a84 <CallNvmCtxCallback>
}
 8012af2:	46c0      	nop			; (mov r8, r8)
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8012afc:	2003      	movs	r0, #3
 8012afe:	f7ff ffc1 	bl	8012a84 <CallNvmCtxCallback>
}
 8012b02:	46c0      	nop			; (mov r8, r8)
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8012b0c:	2004      	movs	r0, #4
 8012b0e:	f7ff ffb9 	bl	8012a84 <CallNvmCtxCallback>
}
 8012b12:	46c0      	nop			; (mov r8, r8)
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8012b1c:	2005      	movs	r0, #5
 8012b1e:	f7ff ffb1 	bl	8012a84 <CallNvmCtxCallback>
}
 8012b22:	46c0      	nop			; (mov r8, r8)
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8012b2c:	2006      	movs	r0, #6
 8012b2e:	f7ff ffa9 	bl	8012a84 <CallNvmCtxCallback>
}
 8012b32:	46c0      	nop			; (mov r8, r8)
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012b3c:	4b0a      	ldr	r3, [pc, #40]	; (8012b68 <IsRequestPending+0x30>)
 8012b3e:	4a0b      	ldr	r2, [pc, #44]	; (8012b6c <IsRequestPending+0x34>)
 8012b40:	5c9b      	ldrb	r3, [r3, r2]
 8012b42:	2204      	movs	r2, #4
 8012b44:	4013      	ands	r3, r2
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d107      	bne.n	8012b5c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012b4c:	4b06      	ldr	r3, [pc, #24]	; (8012b68 <IsRequestPending+0x30>)
 8012b4e:	4a07      	ldr	r2, [pc, #28]	; (8012b6c <IsRequestPending+0x34>)
 8012b50:	5c9b      	ldrb	r3, [r3, r2]
 8012b52:	2201      	movs	r2, #1
 8012b54:	4013      	ands	r3, r2
 8012b56:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d001      	beq.n	8012b60 <IsRequestPending+0x28>
    {
        return 1;
 8012b5c:	2301      	movs	r3, #1
 8012b5e:	e000      	b.n	8012b62 <IsRequestPending+0x2a>
    }
    return 0;
 8012b60:	2300      	movs	r3, #0
}
 8012b62:	0018      	movs	r0, r3
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	2000054c 	.word	0x2000054c
 8012b6c:	00000481 	.word	0x00000481

08012b70 <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012b74:	4a08      	ldr	r2, [pc, #32]	; (8012b98 <LoRaMacIsBusy+0x28>)
 8012b76:	23d0      	movs	r3, #208	; 0xd0
 8012b78:	009b      	lsls	r3, r3, #2
 8012b7a:	58d3      	ldr	r3, [r2, r3]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d106      	bne.n	8012b8e <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8012b80:	4b05      	ldr	r3, [pc, #20]	; (8012b98 <LoRaMacIsBusy+0x28>)
 8012b82:	4a06      	ldr	r2, [pc, #24]	; (8012b9c <LoRaMacIsBusy+0x2c>)
 8012b84:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012b86:	2b01      	cmp	r3, #1
 8012b88:	d101      	bne.n	8012b8e <LoRaMacIsBusy+0x1e>
    {
        return false;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	e000      	b.n	8012b90 <LoRaMacIsBusy+0x20>
    }
    return true;
 8012b8e:	2301      	movs	r3, #1
}
 8012b90:	0018      	movs	r0, r3
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	46c0      	nop			; (mov r8, r8)
 8012b98:	2000054c 	.word	0x2000054c
 8012b9c:	00000482 	.word	0x00000482

08012ba0 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 8012ba6:	1dfb      	adds	r3, r7, #7
 8012ba8:	2200      	movs	r2, #0
 8012baa:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8012bac:	f7fd f970 	bl	800fe90 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012bb0:	f001 fe26 	bl	8014800 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012bb4:	4b1b      	ldr	r3, [pc, #108]	; (8012c24 <LoRaMacProcess+0x84>)
 8012bb6:	4a1c      	ldr	r2, [pc, #112]	; (8012c28 <LoRaMacProcess+0x88>)
 8012bb8:	5c9b      	ldrb	r3, [r3, r2]
 8012bba:	2220      	movs	r2, #32
 8012bbc:	4013      	ands	r3, r2
 8012bbe:	b2db      	uxtb	r3, r3
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d020      	beq.n	8012c06 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012bc4:	2000      	movs	r0, #0
 8012bc6:	f7fd f9af 	bl	800ff28 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8012bca:	f7fd fb8b 	bl	80102e4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012bce:	f7ff ffb3 	bl	8012b38 <IsRequestPending>
 8012bd2:	1e03      	subs	r3, r0, #0
 8012bd4:	d008      	beq.n	8012be8 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012bd6:	f7fd fb59 	bl	801028c <LoRaMacCheckForBeaconAcquisition>
 8012bda:	0003      	movs	r3, r0
 8012bdc:	0019      	movs	r1, r3
 8012bde:	1dfb      	adds	r3, r7, #7
 8012be0:	1dfa      	adds	r2, r7, #7
 8012be2:	7812      	ldrb	r2, [r2, #0]
 8012be4:	430a      	orrs	r2, r1
 8012be6:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8012be8:	1dfb      	adds	r3, r7, #7
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d103      	bne.n	8012bf8 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012bf0:	f7fd fb0a 	bl	8010208 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012bf4:	f7fd fa86 	bl	8010104 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012bf8:	f7fd f9aa 	bl	800ff50 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8012bfc:	f7fd fa0e 	bl	801001c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012c00:	2001      	movs	r0, #1
 8012c02:	f7fd f991 	bl	800ff28 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8012c06:	f7fd fa25 	bl	8010054 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012c0a:	4a06      	ldr	r2, [pc, #24]	; (8012c24 <LoRaMacProcess+0x84>)
 8012c0c:	2390      	movs	r3, #144	; 0x90
 8012c0e:	00db      	lsls	r3, r3, #3
 8012c10:	5cd3      	ldrb	r3, [r2, r3]
 8012c12:	2b02      	cmp	r3, #2
 8012c14:	d101      	bne.n	8012c1a <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8012c16:	f7ff f9d1 	bl	8011fbc <OpenContinuousRxCWindow>
    }
}
 8012c1a:	46c0      	nop			; (mov r8, r8)
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	b002      	add	sp, #8
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	46c0      	nop			; (mov r8, r8)
 8012c24:	2000054c 	.word	0x2000054c
 8012c28:	00000481 	.word	0x00000481

08012c2c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012c2c:	b5b0      	push	{r4, r5, r7, lr}
 8012c2e:	b098      	sub	sp, #96	; 0x60
 8012c30:	af02      	add	r7, sp, #8
 8012c32:	6178      	str	r0, [r7, #20]
 8012c34:	6139      	str	r1, [r7, #16]
 8012c36:	230f      	movs	r3, #15
 8012c38:	18fb      	adds	r3, r7, r3
 8012c3a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d002      	beq.n	8012c48 <LoRaMacInitialization+0x1c>
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d101      	bne.n	8012c4c <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c48:	2303      	movs	r3, #3
 8012c4a:	e35e      	b.n	801330a <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d00b      	beq.n	8012c6c <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d007      	beq.n	8012c6c <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d003      	beq.n	8012c6c <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d101      	bne.n	8012c70 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c6c:	2303      	movs	r3, #3
 8012c6e:	e34c      	b.n	801330a <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012c70:	230f      	movs	r3, #15
 8012c72:	18fb      	adds	r3, r7, r3
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	0018      	movs	r0, r3
 8012c78:	f003 fec8 	bl	8016a0c <RegionIsActive>
 8012c7c:	0003      	movs	r3, r0
 8012c7e:	001a      	movs	r2, r3
 8012c80:	2301      	movs	r3, #1
 8012c82:	4053      	eors	r3, r2
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d001      	beq.n	8012c8e <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012c8a:	2309      	movs	r3, #9
 8012c8c:	e33d      	b.n	801330a <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8012c8e:	4afd      	ldr	r2, [pc, #1012]	; (8013084 <LoRaMacInitialization+0x458>)
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	0011      	movs	r1, r2
 8012c94:	0018      	movs	r0, r3
 8012c96:	f002 f967 	bl	8014f68 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8012c9a:	23b6      	movs	r3, #182	; 0xb6
 8012c9c:	005a      	lsls	r2, r3, #1
 8012c9e:	4bfa      	ldr	r3, [pc, #1000]	; (8013088 <LoRaMacInitialization+0x45c>)
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	0018      	movs	r0, r3
 8012ca4:	f006 fb80 	bl	80193a8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012ca8:	4af8      	ldr	r2, [pc, #992]	; (801308c <LoRaMacInitialization+0x460>)
 8012caa:	4bf9      	ldr	r3, [pc, #996]	; (8013090 <LoRaMacInitialization+0x464>)
 8012cac:	2100      	movs	r1, #0
 8012cae:	0018      	movs	r0, r3
 8012cb0:	f006 fb7a 	bl	80193a8 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 8012cb4:	4bf6      	ldr	r3, [pc, #984]	; (8013090 <LoRaMacInitialization+0x464>)
 8012cb6:	49f7      	ldr	r1, [pc, #988]	; (8013094 <LoRaMacInitialization+0x468>)
 8012cb8:	4af3      	ldr	r2, [pc, #972]	; (8013088 <LoRaMacInitialization+0x45c>)
 8012cba:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012cbc:	4bf4      	ldr	r3, [pc, #976]	; (8013090 <LoRaMacInitialization+0x464>)
 8012cbe:	4af6      	ldr	r2, [pc, #984]	; (8013098 <LoRaMacInitialization+0x46c>)
 8012cc0:	2101      	movs	r1, #1
 8012cc2:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 8012cc4:	4bf2      	ldr	r3, [pc, #968]	; (8013090 <LoRaMacInitialization+0x464>)
 8012cc6:	4af5      	ldr	r2, [pc, #980]	; (801309c <LoRaMacInitialization+0x470>)
 8012cc8:	2101      	movs	r1, #1
 8012cca:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8012ccc:	4bf0      	ldr	r3, [pc, #960]	; (8013090 <LoRaMacInitialization+0x464>)
 8012cce:	4af1      	ldr	r2, [pc, #964]	; (8013094 <LoRaMacInitialization+0x468>)
 8012cd0:	589b      	ldr	r3, [r3, r2]
 8012cd2:	220f      	movs	r2, #15
 8012cd4:	18ba      	adds	r2, r7, r2
 8012cd6:	7812      	ldrb	r2, [r2, #0]
 8012cd8:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8012cda:	4bed      	ldr	r3, [pc, #948]	; (8013090 <LoRaMacInitialization+0x464>)
 8012cdc:	4aed      	ldr	r2, [pc, #948]	; (8013094 <LoRaMacInitialization+0x468>)
 8012cde:	589b      	ldr	r3, [r3, r2]
 8012ce0:	227c      	movs	r2, #124	; 0x7c
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8012ce6:	4bea      	ldr	r3, [pc, #936]	; (8013090 <LoRaMacInitialization+0x464>)
 8012ce8:	4aea      	ldr	r2, [pc, #936]	; (8013094 <LoRaMacInitialization+0x468>)
 8012cea:	589b      	ldr	r3, [r3, r2]
 8012cec:	22ca      	movs	r2, #202	; 0xca
 8012cee:	2100      	movs	r1, #0
 8012cf0:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8012cf2:	4be7      	ldr	r3, [pc, #924]	; (8013090 <LoRaMacInitialization+0x464>)
 8012cf4:	4ae7      	ldr	r2, [pc, #924]	; (8013094 <LoRaMacInitialization+0x468>)
 8012cf6:	589a      	ldr	r2, [r3, r2]
 8012cf8:	23b0      	movs	r3, #176	; 0xb0
 8012cfa:	005b      	lsls	r3, r3, #1
 8012cfc:	49e8      	ldr	r1, [pc, #928]	; (80130a0 <LoRaMacInitialization+0x474>)
 8012cfe:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012d00:	2550      	movs	r5, #80	; 0x50
 8012d02:	197b      	adds	r3, r7, r5
 8012d04:	220f      	movs	r2, #15
 8012d06:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012d08:	4be1      	ldr	r3, [pc, #900]	; (8013090 <LoRaMacInitialization+0x464>)
 8012d0a:	4ae2      	ldr	r2, [pc, #904]	; (8013094 <LoRaMacInitialization+0x468>)
 8012d0c:	589b      	ldr	r3, [r3, r2]
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	197a      	adds	r2, r7, r5
 8012d12:	0011      	movs	r1, r2
 8012d14:	0018      	movs	r0, r3
 8012d16:	f003 fe8a 	bl	8016a2e <RegionGetPhyParam>
 8012d1a:	0003      	movs	r3, r0
 8012d1c:	001a      	movs	r2, r3
 8012d1e:	244c      	movs	r4, #76	; 0x4c
 8012d20:	193b      	adds	r3, r7, r4
 8012d22:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8012d24:	193b      	adds	r3, r7, r4
 8012d26:	681a      	ldr	r2, [r3, #0]
 8012d28:	4bd9      	ldr	r3, [pc, #868]	; (8013090 <LoRaMacInitialization+0x464>)
 8012d2a:	49da      	ldr	r1, [pc, #872]	; (8013094 <LoRaMacInitialization+0x468>)
 8012d2c:	585b      	ldr	r3, [r3, r1]
 8012d2e:	1e51      	subs	r1, r2, #1
 8012d30:	418a      	sbcs	r2, r1
 8012d32:	b2d1      	uxtb	r1, r2
 8012d34:	22c9      	movs	r2, #201	; 0xc9
 8012d36:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012d38:	197b      	adds	r3, r7, r5
 8012d3a:	220a      	movs	r2, #10
 8012d3c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012d3e:	4bd4      	ldr	r3, [pc, #848]	; (8013090 <LoRaMacInitialization+0x464>)
 8012d40:	4ad4      	ldr	r2, [pc, #848]	; (8013094 <LoRaMacInitialization+0x468>)
 8012d42:	589b      	ldr	r3, [r3, r2]
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	197a      	adds	r2, r7, r5
 8012d48:	0011      	movs	r1, r2
 8012d4a:	0018      	movs	r0, r3
 8012d4c:	f003 fe6f 	bl	8016a2e <RegionGetPhyParam>
 8012d50:	0003      	movs	r3, r0
 8012d52:	001a      	movs	r2, r3
 8012d54:	193b      	adds	r3, r7, r4
 8012d56:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8012d58:	193b      	adds	r3, r7, r4
 8012d5a:	6819      	ldr	r1, [r3, #0]
 8012d5c:	4bcc      	ldr	r3, [pc, #816]	; (8013090 <LoRaMacInitialization+0x464>)
 8012d5e:	4acd      	ldr	r2, [pc, #820]	; (8013094 <LoRaMacInitialization+0x468>)
 8012d60:	589b      	ldr	r3, [r3, r2]
 8012d62:	b24a      	sxtb	r2, r1
 8012d64:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012d66:	197b      	adds	r3, r7, r5
 8012d68:	2206      	movs	r2, #6
 8012d6a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012d6c:	4bc8      	ldr	r3, [pc, #800]	; (8013090 <LoRaMacInitialization+0x464>)
 8012d6e:	4ac9      	ldr	r2, [pc, #804]	; (8013094 <LoRaMacInitialization+0x468>)
 8012d70:	589b      	ldr	r3, [r3, r2]
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	197a      	adds	r2, r7, r5
 8012d76:	0011      	movs	r1, r2
 8012d78:	0018      	movs	r0, r3
 8012d7a:	f003 fe58 	bl	8016a2e <RegionGetPhyParam>
 8012d7e:	0003      	movs	r3, r0
 8012d80:	001a      	movs	r2, r3
 8012d82:	193b      	adds	r3, r7, r4
 8012d84:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8012d86:	193b      	adds	r3, r7, r4
 8012d88:	6819      	ldr	r1, [r3, #0]
 8012d8a:	4bc1      	ldr	r3, [pc, #772]	; (8013090 <LoRaMacInitialization+0x464>)
 8012d8c:	4ac1      	ldr	r2, [pc, #772]	; (8013094 <LoRaMacInitialization+0x468>)
 8012d8e:	589b      	ldr	r3, [r3, r2]
 8012d90:	b24a      	sxtb	r2, r1
 8012d92:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012d94:	197b      	adds	r3, r7, r5
 8012d96:	2210      	movs	r2, #16
 8012d98:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012d9a:	4bbd      	ldr	r3, [pc, #756]	; (8013090 <LoRaMacInitialization+0x464>)
 8012d9c:	4abd      	ldr	r2, [pc, #756]	; (8013094 <LoRaMacInitialization+0x468>)
 8012d9e:	589b      	ldr	r3, [r3, r2]
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	197a      	adds	r2, r7, r5
 8012da4:	0011      	movs	r1, r2
 8012da6:	0018      	movs	r0, r3
 8012da8:	f003 fe41 	bl	8016a2e <RegionGetPhyParam>
 8012dac:	0003      	movs	r3, r0
 8012dae:	001a      	movs	r2, r3
 8012db0:	193b      	adds	r3, r7, r4
 8012db2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012db4:	4bb6      	ldr	r3, [pc, #728]	; (8013090 <LoRaMacInitialization+0x464>)
 8012db6:	4ab7      	ldr	r2, [pc, #732]	; (8013094 <LoRaMacInitialization+0x468>)
 8012db8:	589b      	ldr	r3, [r3, r2]
 8012dba:	193a      	adds	r2, r7, r4
 8012dbc:	6812      	ldr	r2, [r2, #0]
 8012dbe:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012dc0:	197b      	adds	r3, r7, r5
 8012dc2:	2211      	movs	r2, #17
 8012dc4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012dc6:	4bb2      	ldr	r3, [pc, #712]	; (8013090 <LoRaMacInitialization+0x464>)
 8012dc8:	4ab2      	ldr	r2, [pc, #712]	; (8013094 <LoRaMacInitialization+0x468>)
 8012dca:	589b      	ldr	r3, [r3, r2]
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	197a      	adds	r2, r7, r5
 8012dd0:	0011      	movs	r1, r2
 8012dd2:	0018      	movs	r0, r3
 8012dd4:	f003 fe2b 	bl	8016a2e <RegionGetPhyParam>
 8012dd8:	0003      	movs	r3, r0
 8012dda:	001a      	movs	r2, r3
 8012ddc:	193b      	adds	r3, r7, r4
 8012dde:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012de0:	4bab      	ldr	r3, [pc, #684]	; (8013090 <LoRaMacInitialization+0x464>)
 8012de2:	4aac      	ldr	r2, [pc, #688]	; (8013094 <LoRaMacInitialization+0x468>)
 8012de4:	589b      	ldr	r3, [r3, r2]
 8012de6:	193a      	adds	r2, r7, r4
 8012de8:	6812      	ldr	r2, [r2, #0]
 8012dea:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012dec:	197b      	adds	r3, r7, r5
 8012dee:	2212      	movs	r2, #18
 8012df0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012df2:	4ba7      	ldr	r3, [pc, #668]	; (8013090 <LoRaMacInitialization+0x464>)
 8012df4:	4aa7      	ldr	r2, [pc, #668]	; (8013094 <LoRaMacInitialization+0x468>)
 8012df6:	589b      	ldr	r3, [r3, r2]
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	197a      	adds	r2, r7, r5
 8012dfc:	0011      	movs	r1, r2
 8012dfe:	0018      	movs	r0, r3
 8012e00:	f003 fe15 	bl	8016a2e <RegionGetPhyParam>
 8012e04:	0003      	movs	r3, r0
 8012e06:	001a      	movs	r2, r3
 8012e08:	193b      	adds	r3, r7, r4
 8012e0a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012e0c:	4ba0      	ldr	r3, [pc, #640]	; (8013090 <LoRaMacInitialization+0x464>)
 8012e0e:	4aa1      	ldr	r2, [pc, #644]	; (8013094 <LoRaMacInitialization+0x468>)
 8012e10:	589b      	ldr	r3, [r3, r2]
 8012e12:	193a      	adds	r2, r7, r4
 8012e14:	6812      	ldr	r2, [r2, #0]
 8012e16:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012e18:	197b      	adds	r3, r7, r5
 8012e1a:	2213      	movs	r2, #19
 8012e1c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012e1e:	4b9c      	ldr	r3, [pc, #624]	; (8013090 <LoRaMacInitialization+0x464>)
 8012e20:	4a9c      	ldr	r2, [pc, #624]	; (8013094 <LoRaMacInitialization+0x468>)
 8012e22:	589b      	ldr	r3, [r3, r2]
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	197a      	adds	r2, r7, r5
 8012e28:	0011      	movs	r1, r2
 8012e2a:	0018      	movs	r0, r3
 8012e2c:	f003 fdff 	bl	8016a2e <RegionGetPhyParam>
 8012e30:	0003      	movs	r3, r0
 8012e32:	001a      	movs	r2, r3
 8012e34:	193b      	adds	r3, r7, r4
 8012e36:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012e38:	4b95      	ldr	r3, [pc, #596]	; (8013090 <LoRaMacInitialization+0x464>)
 8012e3a:	4a96      	ldr	r2, [pc, #600]	; (8013094 <LoRaMacInitialization+0x468>)
 8012e3c:	589b      	ldr	r3, [r3, r2]
 8012e3e:	193a      	adds	r2, r7, r4
 8012e40:	6812      	ldr	r2, [r2, #0]
 8012e42:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012e44:	197b      	adds	r3, r7, r5
 8012e46:	2214      	movs	r2, #20
 8012e48:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012e4a:	4b91      	ldr	r3, [pc, #580]	; (8013090 <LoRaMacInitialization+0x464>)
 8012e4c:	4a91      	ldr	r2, [pc, #580]	; (8013094 <LoRaMacInitialization+0x468>)
 8012e4e:	589b      	ldr	r3, [r3, r2]
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	197a      	adds	r2, r7, r5
 8012e54:	0011      	movs	r1, r2
 8012e56:	0018      	movs	r0, r3
 8012e58:	f003 fde9 	bl	8016a2e <RegionGetPhyParam>
 8012e5c:	0003      	movs	r3, r0
 8012e5e:	001a      	movs	r2, r3
 8012e60:	193b      	adds	r3, r7, r4
 8012e62:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012e64:	4b8a      	ldr	r3, [pc, #552]	; (8013090 <LoRaMacInitialization+0x464>)
 8012e66:	4a8b      	ldr	r2, [pc, #556]	; (8013094 <LoRaMacInitialization+0x468>)
 8012e68:	589b      	ldr	r3, [r3, r2]
 8012e6a:	193a      	adds	r2, r7, r4
 8012e6c:	6812      	ldr	r2, [r2, #0]
 8012e6e:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012e70:	197b      	adds	r3, r7, r5
 8012e72:	2217      	movs	r2, #23
 8012e74:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012e76:	4b86      	ldr	r3, [pc, #536]	; (8013090 <LoRaMacInitialization+0x464>)
 8012e78:	4a86      	ldr	r2, [pc, #536]	; (8013094 <LoRaMacInitialization+0x468>)
 8012e7a:	589b      	ldr	r3, [r3, r2]
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	197a      	adds	r2, r7, r5
 8012e80:	0011      	movs	r1, r2
 8012e82:	0018      	movs	r0, r3
 8012e84:	f003 fdd3 	bl	8016a2e <RegionGetPhyParam>
 8012e88:	0003      	movs	r3, r0
 8012e8a:	001a      	movs	r2, r3
 8012e8c:	193b      	adds	r3, r7, r4
 8012e8e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012e90:	193b      	adds	r3, r7, r4
 8012e92:	6819      	ldr	r1, [r3, #0]
 8012e94:	4b7e      	ldr	r3, [pc, #504]	; (8013090 <LoRaMacInitialization+0x464>)
 8012e96:	4a7f      	ldr	r2, [pc, #508]	; (8013094 <LoRaMacInitialization+0x468>)
 8012e98:	589b      	ldr	r3, [r3, r2]
 8012e9a:	b2c9      	uxtb	r1, r1
 8012e9c:	2225      	movs	r2, #37	; 0x25
 8012e9e:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012ea0:	197b      	adds	r3, r7, r5
 8012ea2:	2218      	movs	r2, #24
 8012ea4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012ea6:	4b7a      	ldr	r3, [pc, #488]	; (8013090 <LoRaMacInitialization+0x464>)
 8012ea8:	4a7a      	ldr	r2, [pc, #488]	; (8013094 <LoRaMacInitialization+0x468>)
 8012eaa:	589b      	ldr	r3, [r3, r2]
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	197a      	adds	r2, r7, r5
 8012eb0:	0011      	movs	r1, r2
 8012eb2:	0018      	movs	r0, r3
 8012eb4:	f003 fdbb 	bl	8016a2e <RegionGetPhyParam>
 8012eb8:	0003      	movs	r3, r0
 8012eba:	001a      	movs	r2, r3
 8012ebc:	193b      	adds	r3, r7, r4
 8012ebe:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012ec0:	4b73      	ldr	r3, [pc, #460]	; (8013090 <LoRaMacInitialization+0x464>)
 8012ec2:	4a74      	ldr	r2, [pc, #464]	; (8013094 <LoRaMacInitialization+0x468>)
 8012ec4:	589b      	ldr	r3, [r3, r2]
 8012ec6:	193a      	adds	r2, r7, r4
 8012ec8:	6812      	ldr	r2, [r2, #0]
 8012eca:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012ecc:	4b70      	ldr	r3, [pc, #448]	; (8013090 <LoRaMacInitialization+0x464>)
 8012ece:	4a71      	ldr	r2, [pc, #452]	; (8013094 <LoRaMacInitialization+0x468>)
 8012ed0:	589b      	ldr	r3, [r3, r2]
 8012ed2:	193a      	adds	r2, r7, r4
 8012ed4:	6812      	ldr	r2, [r2, #0]
 8012ed6:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012ed8:	197b      	adds	r3, r7, r5
 8012eda:	2219      	movs	r2, #25
 8012edc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012ede:	4b6c      	ldr	r3, [pc, #432]	; (8013090 <LoRaMacInitialization+0x464>)
 8012ee0:	4a6c      	ldr	r2, [pc, #432]	; (8013094 <LoRaMacInitialization+0x468>)
 8012ee2:	589b      	ldr	r3, [r3, r2]
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	197a      	adds	r2, r7, r5
 8012ee8:	0011      	movs	r1, r2
 8012eea:	0018      	movs	r0, r3
 8012eec:	f003 fd9f 	bl	8016a2e <RegionGetPhyParam>
 8012ef0:	0003      	movs	r3, r0
 8012ef2:	001a      	movs	r2, r3
 8012ef4:	193b      	adds	r3, r7, r4
 8012ef6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012ef8:	193b      	adds	r3, r7, r4
 8012efa:	6819      	ldr	r1, [r3, #0]
 8012efc:	4b64      	ldr	r3, [pc, #400]	; (8013090 <LoRaMacInitialization+0x464>)
 8012efe:	4a65      	ldr	r2, [pc, #404]	; (8013094 <LoRaMacInitialization+0x468>)
 8012f00:	589b      	ldr	r3, [r3, r2]
 8012f02:	b2c9      	uxtb	r1, r1
 8012f04:	222c      	movs	r2, #44	; 0x2c
 8012f06:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012f08:	193b      	adds	r3, r7, r4
 8012f0a:	6819      	ldr	r1, [r3, #0]
 8012f0c:	4b60      	ldr	r3, [pc, #384]	; (8013090 <LoRaMacInitialization+0x464>)
 8012f0e:	4a61      	ldr	r2, [pc, #388]	; (8013094 <LoRaMacInitialization+0x468>)
 8012f10:	589b      	ldr	r3, [r3, r2]
 8012f12:	b2c9      	uxtb	r1, r1
 8012f14:	2234      	movs	r2, #52	; 0x34
 8012f16:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012f18:	197b      	adds	r3, r7, r5
 8012f1a:	221e      	movs	r2, #30
 8012f1c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f1e:	4b5c      	ldr	r3, [pc, #368]	; (8013090 <LoRaMacInitialization+0x464>)
 8012f20:	4a5c      	ldr	r2, [pc, #368]	; (8013094 <LoRaMacInitialization+0x468>)
 8012f22:	589b      	ldr	r3, [r3, r2]
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	197a      	adds	r2, r7, r5
 8012f28:	0011      	movs	r1, r2
 8012f2a:	0018      	movs	r0, r3
 8012f2c:	f003 fd7f 	bl	8016a2e <RegionGetPhyParam>
 8012f30:	0003      	movs	r3, r0
 8012f32:	001a      	movs	r2, r3
 8012f34:	193b      	adds	r3, r7, r4
 8012f36:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012f38:	193b      	adds	r3, r7, r4
 8012f3a:	6819      	ldr	r1, [r3, #0]
 8012f3c:	4b54      	ldr	r3, [pc, #336]	; (8013090 <LoRaMacInitialization+0x464>)
 8012f3e:	4a55      	ldr	r2, [pc, #340]	; (8013094 <LoRaMacInitialization+0x468>)
 8012f40:	589b      	ldr	r3, [r3, r2]
 8012f42:	b2c9      	uxtb	r1, r1
 8012f44:	2238      	movs	r2, #56	; 0x38
 8012f46:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012f48:	197b      	adds	r3, r7, r5
 8012f4a:	221f      	movs	r2, #31
 8012f4c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f4e:	4b50      	ldr	r3, [pc, #320]	; (8013090 <LoRaMacInitialization+0x464>)
 8012f50:	4a50      	ldr	r2, [pc, #320]	; (8013094 <LoRaMacInitialization+0x468>)
 8012f52:	589b      	ldr	r3, [r3, r2]
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	197a      	adds	r2, r7, r5
 8012f58:	0011      	movs	r1, r2
 8012f5a:	0018      	movs	r0, r3
 8012f5c:	f003 fd67 	bl	8016a2e <RegionGetPhyParam>
 8012f60:	0003      	movs	r3, r0
 8012f62:	001a      	movs	r2, r3
 8012f64:	193b      	adds	r3, r7, r4
 8012f66:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012f68:	193b      	adds	r3, r7, r4
 8012f6a:	6819      	ldr	r1, [r3, #0]
 8012f6c:	4b48      	ldr	r3, [pc, #288]	; (8013090 <LoRaMacInitialization+0x464>)
 8012f6e:	4a49      	ldr	r2, [pc, #292]	; (8013094 <LoRaMacInitialization+0x468>)
 8012f70:	589b      	ldr	r3, [r3, r2]
 8012f72:	b2c9      	uxtb	r1, r1
 8012f74:	2239      	movs	r2, #57	; 0x39
 8012f76:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012f78:	197b      	adds	r3, r7, r5
 8012f7a:	2220      	movs	r2, #32
 8012f7c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f7e:	4b44      	ldr	r3, [pc, #272]	; (8013090 <LoRaMacInitialization+0x464>)
 8012f80:	4a44      	ldr	r2, [pc, #272]	; (8013094 <LoRaMacInitialization+0x468>)
 8012f82:	589b      	ldr	r3, [r3, r2]
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	197a      	adds	r2, r7, r5
 8012f88:	0011      	movs	r1, r2
 8012f8a:	0018      	movs	r0, r3
 8012f8c:	f003 fd4f 	bl	8016a2e <RegionGetPhyParam>
 8012f90:	0003      	movs	r3, r0
 8012f92:	001a      	movs	r2, r3
 8012f94:	193b      	adds	r3, r7, r4
 8012f96:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012f98:	4b3d      	ldr	r3, [pc, #244]	; (8013090 <LoRaMacInitialization+0x464>)
 8012f9a:	4a3e      	ldr	r2, [pc, #248]	; (8013094 <LoRaMacInitialization+0x468>)
 8012f9c:	589b      	ldr	r3, [r3, r2]
 8012f9e:	193a      	adds	r2, r7, r4
 8012fa0:	6812      	ldr	r2, [r2, #0]
 8012fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012fa4:	197b      	adds	r3, r7, r5
 8012fa6:	2221      	movs	r2, #33	; 0x21
 8012fa8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012faa:	4b39      	ldr	r3, [pc, #228]	; (8013090 <LoRaMacInitialization+0x464>)
 8012fac:	4a39      	ldr	r2, [pc, #228]	; (8013094 <LoRaMacInitialization+0x468>)
 8012fae:	589b      	ldr	r3, [r3, r2]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	197a      	adds	r2, r7, r5
 8012fb4:	0011      	movs	r1, r2
 8012fb6:	0018      	movs	r0, r3
 8012fb8:	f003 fd39 	bl	8016a2e <RegionGetPhyParam>
 8012fbc:	0003      	movs	r3, r0
 8012fbe:	001a      	movs	r2, r3
 8012fc0:	193b      	adds	r3, r7, r4
 8012fc2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012fc4:	4b32      	ldr	r3, [pc, #200]	; (8013090 <LoRaMacInitialization+0x464>)
 8012fc6:	4a33      	ldr	r2, [pc, #204]	; (8013094 <LoRaMacInitialization+0x468>)
 8012fc8:	589b      	ldr	r3, [r3, r2]
 8012fca:	193a      	adds	r2, r7, r4
 8012fcc:	6812      	ldr	r2, [r2, #0]
 8012fce:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012fd0:	197b      	adds	r3, r7, r5
 8012fd2:	220b      	movs	r2, #11
 8012fd4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012fd6:	4b2e      	ldr	r3, [pc, #184]	; (8013090 <LoRaMacInitialization+0x464>)
 8012fd8:	4a2e      	ldr	r2, [pc, #184]	; (8013094 <LoRaMacInitialization+0x468>)
 8012fda:	589b      	ldr	r3, [r3, r2]
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	197a      	adds	r2, r7, r5
 8012fe0:	0011      	movs	r1, r2
 8012fe2:	0018      	movs	r0, r3
 8012fe4:	f003 fd23 	bl	8016a2e <RegionGetPhyParam>
 8012fe8:	0003      	movs	r3, r0
 8012fea:	001a      	movs	r2, r3
 8012fec:	193b      	adds	r3, r7, r4
 8012fee:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 8012ff0:	193b      	adds	r3, r7, r4
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	b299      	uxth	r1, r3
 8012ff6:	4a26      	ldr	r2, [pc, #152]	; (8013090 <LoRaMacInitialization+0x464>)
 8012ff8:	23fd      	movs	r3, #253	; 0xfd
 8012ffa:	009b      	lsls	r3, r3, #2
 8012ffc:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012ffe:	197b      	adds	r3, r7, r5
 8013000:	220c      	movs	r2, #12
 8013002:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013004:	4b22      	ldr	r3, [pc, #136]	; (8013090 <LoRaMacInitialization+0x464>)
 8013006:	4a23      	ldr	r2, [pc, #140]	; (8013094 <LoRaMacInitialization+0x468>)
 8013008:	589b      	ldr	r3, [r3, r2]
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	197a      	adds	r2, r7, r5
 801300e:	0011      	movs	r1, r2
 8013010:	0018      	movs	r0, r3
 8013012:	f003 fd0c 	bl	8016a2e <RegionGetPhyParam>
 8013016:	0003      	movs	r3, r0
 8013018:	001a      	movs	r2, r3
 801301a:	193b      	adds	r3, r7, r4
 801301c:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 801301e:	193b      	adds	r3, r7, r4
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	b299      	uxth	r1, r3
 8013024:	4b1a      	ldr	r3, [pc, #104]	; (8013090 <LoRaMacInitialization+0x464>)
 8013026:	4a1f      	ldr	r2, [pc, #124]	; (80130a4 <LoRaMacInitialization+0x478>)
 8013028:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 801302a:	4b19      	ldr	r3, [pc, #100]	; (8013090 <LoRaMacInitialization+0x464>)
 801302c:	4a19      	ldr	r2, [pc, #100]	; (8013094 <LoRaMacInitialization+0x468>)
 801302e:	589b      	ldr	r3, [r3, r2]
 8013030:	2224      	movs	r2, #36	; 0x24
 8013032:	2101      	movs	r1, #1
 8013034:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8013036:	4b16      	ldr	r3, [pc, #88]	; (8013090 <LoRaMacInitialization+0x464>)
 8013038:	4a16      	ldr	r2, [pc, #88]	; (8013094 <LoRaMacInitialization+0x468>)
 801303a:	589b      	ldr	r3, [r3, r2]
 801303c:	220a      	movs	r2, #10
 801303e:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8013040:	4b13      	ldr	r3, [pc, #76]	; (8013090 <LoRaMacInitialization+0x464>)
 8013042:	4a14      	ldr	r2, [pc, #80]	; (8013094 <LoRaMacInitialization+0x468>)
 8013044:	589b      	ldr	r3, [r3, r2]
 8013046:	2206      	movs	r2, #6
 8013048:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 801304a:	4b11      	ldr	r3, [pc, #68]	; (8013090 <LoRaMacInitialization+0x464>)
 801304c:	4a11      	ldr	r2, [pc, #68]	; (8013094 <LoRaMacInitialization+0x468>)
 801304e:	589b      	ldr	r3, [r3, r2]
 8013050:	4a0f      	ldr	r2, [pc, #60]	; (8013090 <LoRaMacInitialization+0x464>)
 8013052:	4910      	ldr	r1, [pc, #64]	; (8013094 <LoRaMacInitialization+0x468>)
 8013054:	5852      	ldr	r2, [r2, r1]
 8013056:	689b      	ldr	r3, [r3, #8]
 8013058:	2188      	movs	r1, #136	; 0x88
 801305a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 801305c:	4b0c      	ldr	r3, [pc, #48]	; (8013090 <LoRaMacInitialization+0x464>)
 801305e:	4a0d      	ldr	r2, [pc, #52]	; (8013094 <LoRaMacInitialization+0x468>)
 8013060:	589a      	ldr	r2, [r3, r2]
 8013062:	4b0b      	ldr	r3, [pc, #44]	; (8013090 <LoRaMacInitialization+0x464>)
 8013064:	490b      	ldr	r1, [pc, #44]	; (8013094 <LoRaMacInitialization+0x468>)
 8013066:	585b      	ldr	r3, [r3, r1]
 8013068:	7b11      	ldrb	r1, [r2, #12]
 801306a:	228c      	movs	r2, #140	; 0x8c
 801306c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 801306e:	4b08      	ldr	r3, [pc, #32]	; (8013090 <LoRaMacInitialization+0x464>)
 8013070:	4a08      	ldr	r2, [pc, #32]	; (8013094 <LoRaMacInitialization+0x468>)
 8013072:	589b      	ldr	r3, [r3, r2]
 8013074:	4a06      	ldr	r2, [pc, #24]	; (8013090 <LoRaMacInitialization+0x464>)
 8013076:	4907      	ldr	r1, [pc, #28]	; (8013094 <LoRaMacInitialization+0x468>)
 8013078:	5852      	ldr	r2, [r2, r1]
 801307a:	691b      	ldr	r3, [r3, #16]
 801307c:	2190      	movs	r1, #144	; 0x90
 801307e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8013080:	4b03      	ldr	r3, [pc, #12]	; (8013090 <LoRaMacInitialization+0x464>)
 8013082:	e011      	b.n	80130a8 <LoRaMacInitialization+0x47c>
 8013084:	08012b29 	.word	0x08012b29
 8013088:	200009d8 	.word	0x200009d8
 801308c:	0000048c 	.word	0x0000048c
 8013090:	2000054c 	.word	0x2000054c
 8013094:	00000484 	.word	0x00000484
 8013098:	00000412 	.word	0x00000412
 801309c:	00000411 	.word	0x00000411
 80130a0:	01000300 	.word	0x01000300
 80130a4:	000003f6 	.word	0x000003f6
 80130a8:	4a9a      	ldr	r2, [pc, #616]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130aa:	589b      	ldr	r3, [r3, r2]
 80130ac:	4a9a      	ldr	r2, [pc, #616]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80130ae:	4999      	ldr	r1, [pc, #612]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130b0:	5852      	ldr	r2, [r2, r1]
 80130b2:	695b      	ldr	r3, [r3, #20]
 80130b4:	2194      	movs	r1, #148	; 0x94
 80130b6:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 80130b8:	4b97      	ldr	r3, [pc, #604]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80130ba:	4a96      	ldr	r2, [pc, #600]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130bc:	589b      	ldr	r3, [r3, r2]
 80130be:	4a96      	ldr	r2, [pc, #600]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80130c0:	4994      	ldr	r1, [pc, #592]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130c2:	5852      	ldr	r2, [r2, r1]
 80130c4:	699b      	ldr	r3, [r3, #24]
 80130c6:	2198      	movs	r1, #152	; 0x98
 80130c8:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 80130ca:	4b93      	ldr	r3, [pc, #588]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80130cc:	4a91      	ldr	r2, [pc, #580]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130ce:	589b      	ldr	r3, [r3, r2]
 80130d0:	4a91      	ldr	r2, [pc, #580]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80130d2:	4990      	ldr	r1, [pc, #576]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130d4:	5852      	ldr	r2, [r2, r1]
 80130d6:	69db      	ldr	r3, [r3, #28]
 80130d8:	219c      	movs	r1, #156	; 0x9c
 80130da:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 80130dc:	4b8e      	ldr	r3, [pc, #568]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80130de:	4a8d      	ldr	r2, [pc, #564]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130e0:	589b      	ldr	r3, [r3, r2]
 80130e2:	4a8d      	ldr	r2, [pc, #564]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80130e4:	498b      	ldr	r1, [pc, #556]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130e6:	5852      	ldr	r2, [r2, r1]
 80130e8:	6a1b      	ldr	r3, [r3, #32]
 80130ea:	21a0      	movs	r1, #160	; 0xa0
 80130ec:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 80130ee:	4b8a      	ldr	r3, [pc, #552]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80130f0:	4a88      	ldr	r2, [pc, #544]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130f2:	589a      	ldr	r2, [r3, r2]
 80130f4:	4b88      	ldr	r3, [pc, #544]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80130f6:	4987      	ldr	r1, [pc, #540]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80130f8:	585b      	ldr	r3, [r3, r1]
 80130fa:	2124      	movs	r1, #36	; 0x24
 80130fc:	5c51      	ldrb	r1, [r2, r1]
 80130fe:	22a4      	movs	r2, #164	; 0xa4
 8013100:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013102:	211c      	movs	r1, #28
 8013104:	187b      	adds	r3, r7, r1
 8013106:	2200      	movs	r2, #0
 8013108:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 801310a:	187b      	adds	r3, r7, r1
 801310c:	2200      	movs	r2, #0
 801310e:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8013110:	4b81      	ldr	r3, [pc, #516]	; (8013318 <LoRaMacInitialization+0x6ec>)
 8013112:	4a80      	ldr	r2, [pc, #512]	; (8013314 <LoRaMacInitialization+0x6e8>)
 8013114:	589b      	ldr	r3, [r3, r2]
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	187a      	adds	r2, r7, r1
 801311a:	0011      	movs	r1, r2
 801311c:	0018      	movs	r0, r3
 801311e:	f003 fcc2 	bl	8016aa6 <RegionInitDefaults>

    ResetMacParameters( );
 8013122:	f7fe fe19 	bl	8011d58 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8013126:	4b7c      	ldr	r3, [pc, #496]	; (8013318 <LoRaMacInitialization+0x6ec>)
 8013128:	4a7a      	ldr	r2, [pc, #488]	; (8013314 <LoRaMacInitialization+0x6e8>)
 801312a:	589b      	ldr	r3, [r3, r2]
 801312c:	227d      	movs	r2, #125	; 0x7d
 801312e:	2101      	movs	r1, #1
 8013130:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 8013132:	4a79      	ldr	r2, [pc, #484]	; (8013318 <LoRaMacInitialization+0x6ec>)
 8013134:	23d1      	movs	r3, #209	; 0xd1
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	6979      	ldr	r1, [r7, #20]
 801313a:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 801313c:	4a76      	ldr	r2, [pc, #472]	; (8013318 <LoRaMacInitialization+0x6ec>)
 801313e:	23d2      	movs	r3, #210	; 0xd2
 8013140:	009b      	lsls	r3, r3, #2
 8013142:	6939      	ldr	r1, [r7, #16]
 8013144:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 8013146:	4b74      	ldr	r3, [pc, #464]	; (8013318 <LoRaMacInitialization+0x6ec>)
 8013148:	4a74      	ldr	r2, [pc, #464]	; (801331c <LoRaMacInitialization+0x6f0>)
 801314a:	2100      	movs	r1, #0
 801314c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 801314e:	4a72      	ldr	r2, [pc, #456]	; (8013318 <LoRaMacInitialization+0x6ec>)
 8013150:	23d0      	movs	r3, #208	; 0xd0
 8013152:	009b      	lsls	r3, r3, #2
 8013154:	2101      	movs	r1, #1
 8013156:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8013158:	4b6f      	ldr	r3, [pc, #444]	; (8013318 <LoRaMacInitialization+0x6ec>)
 801315a:	4a6e      	ldr	r2, [pc, #440]	; (8013314 <LoRaMacInitialization+0x6e8>)
 801315c:	589a      	ldr	r2, [r3, r2]
 801315e:	23a8      	movs	r3, #168	; 0xa8
 8013160:	005b      	lsls	r3, r3, #1
 8013162:	2100      	movs	r1, #0
 8013164:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8013166:	4b6c      	ldr	r3, [pc, #432]	; (8013318 <LoRaMacInitialization+0x6ec>)
 8013168:	4a6a      	ldr	r2, [pc, #424]	; (8013314 <LoRaMacInitialization+0x6e8>)
 801316a:	589a      	ldr	r2, [r3, r2]
 801316c:	23aa      	movs	r3, #170	; 0xaa
 801316e:	005b      	lsls	r3, r3, #1
 8013170:	2100      	movs	r1, #0
 8013172:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013174:	4b6a      	ldr	r3, [pc, #424]	; (8013320 <LoRaMacInitialization+0x6f4>)
 8013176:	2201      	movs	r2, #1
 8013178:	4251      	negs	r1, r2
 801317a:	486a      	ldr	r0, [pc, #424]	; (8013324 <LoRaMacInitialization+0x6f8>)
 801317c:	2200      	movs	r2, #0
 801317e:	9200      	str	r2, [sp, #0]
 8013180:	2200      	movs	r2, #0
 8013182:	f009 fbdb 	bl	801c93c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013186:	4b68      	ldr	r3, [pc, #416]	; (8013328 <LoRaMacInitialization+0x6fc>)
 8013188:	2201      	movs	r2, #1
 801318a:	4251      	negs	r1, r2
 801318c:	4867      	ldr	r0, [pc, #412]	; (801332c <LoRaMacInitialization+0x700>)
 801318e:	2200      	movs	r2, #0
 8013190:	9200      	str	r2, [sp, #0]
 8013192:	2200      	movs	r2, #0
 8013194:	f009 fbd2 	bl	801c93c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013198:	4b65      	ldr	r3, [pc, #404]	; (8013330 <LoRaMacInitialization+0x704>)
 801319a:	2201      	movs	r2, #1
 801319c:	4251      	negs	r1, r2
 801319e:	4865      	ldr	r0, [pc, #404]	; (8013334 <LoRaMacInitialization+0x708>)
 80131a0:	2200      	movs	r2, #0
 80131a2:	9200      	str	r2, [sp, #0]
 80131a4:	2200      	movs	r2, #0
 80131a6:	f009 fbc9 	bl	801c93c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80131aa:	4b63      	ldr	r3, [pc, #396]	; (8013338 <LoRaMacInitialization+0x70c>)
 80131ac:	2201      	movs	r2, #1
 80131ae:	4251      	negs	r1, r2
 80131b0:	4862      	ldr	r0, [pc, #392]	; (801333c <LoRaMacInitialization+0x710>)
 80131b2:	2200      	movs	r2, #0
 80131b4:	9200      	str	r2, [sp, #0]
 80131b6:	2200      	movs	r2, #0
 80131b8:	f009 fbc0 	bl	801c93c <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 80131bc:	4b56      	ldr	r3, [pc, #344]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80131be:	4a55      	ldr	r2, [pc, #340]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80131c0:	589d      	ldr	r5, [r3, r2]
 80131c2:	23ac      	movs	r3, #172	; 0xac
 80131c4:	005c      	lsls	r4, r3, #1
 80131c6:	003b      	movs	r3, r7
 80131c8:	0018      	movs	r0, r3
 80131ca:	f009 fb87 	bl	801c8dc <SysTimeGetMcuTime>
 80131ce:	003a      	movs	r2, r7
 80131d0:	192b      	adds	r3, r5, r4
 80131d2:	ca03      	ldmia	r2!, {r0, r1}
 80131d4:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80131d6:	4a50      	ldr	r2, [pc, #320]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80131d8:	23d3      	movs	r3, #211	; 0xd3
 80131da:	009b      	lsls	r3, r3, #2
 80131dc:	4958      	ldr	r1, [pc, #352]	; (8013340 <LoRaMacInitialization+0x714>)
 80131de:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80131e0:	4a4d      	ldr	r2, [pc, #308]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80131e2:	23d5      	movs	r3, #213	; 0xd5
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	4957      	ldr	r1, [pc, #348]	; (8013344 <LoRaMacInitialization+0x718>)
 80131e8:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80131ea:	4a4b      	ldr	r2, [pc, #300]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80131ec:	23d7      	movs	r3, #215	; 0xd7
 80131ee:	009b      	lsls	r3, r3, #2
 80131f0:	4955      	ldr	r1, [pc, #340]	; (8013348 <LoRaMacInitialization+0x71c>)
 80131f2:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80131f4:	4a48      	ldr	r2, [pc, #288]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80131f6:	23d4      	movs	r3, #212	; 0xd4
 80131f8:	009b      	lsls	r3, r3, #2
 80131fa:	4954      	ldr	r1, [pc, #336]	; (801334c <LoRaMacInitialization+0x720>)
 80131fc:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80131fe:	4a46      	ldr	r2, [pc, #280]	; (8013318 <LoRaMacInitialization+0x6ec>)
 8013200:	23d6      	movs	r3, #214	; 0xd6
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	4952      	ldr	r1, [pc, #328]	; (8013350 <LoRaMacInitialization+0x724>)
 8013206:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8013208:	4b52      	ldr	r3, [pc, #328]	; (8013354 <LoRaMacInitialization+0x728>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	4a52      	ldr	r2, [pc, #328]	; (8013358 <LoRaMacInitialization+0x72c>)
 801320e:	0010      	movs	r0, r2
 8013210:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8013212:	4b52      	ldr	r3, [pc, #328]	; (801335c <LoRaMacInitialization+0x730>)
 8013214:	0018      	movs	r0, r3
 8013216:	f7fa f891 	bl	800d33c <SecureElementInit>
 801321a:	1e03      	subs	r3, r0, #0
 801321c:	d001      	beq.n	8013222 <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801321e:	2311      	movs	r3, #17
 8013220:	e073      	b.n	801330a <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8013222:	4b4f      	ldr	r3, [pc, #316]	; (8013360 <LoRaMacInitialization+0x734>)
 8013224:	0018      	movs	r0, r3
 8013226:	f002 fc0d 	bl	8015a44 <LoRaMacCryptoInit>
 801322a:	1e03      	subs	r3, r0, #0
 801322c:	d001      	beq.n	8013232 <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801322e:	2311      	movs	r3, #17
 8013230:	e06b      	b.n	801330a <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8013232:	4b4c      	ldr	r3, [pc, #304]	; (8013364 <LoRaMacInitialization+0x738>)
 8013234:	0018      	movs	r0, r3
 8013236:	f001 fc0d 	bl	8014a54 <LoRaMacCommandsInit>
 801323a:	1e03      	subs	r3, r0, #0
 801323c:	d001      	beq.n	8013242 <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801323e:	2313      	movs	r3, #19
 8013240:	e063      	b.n	801330a <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8013242:	4b35      	ldr	r3, [pc, #212]	; (8013318 <LoRaMacInitialization+0x6ec>)
 8013244:	4a33      	ldr	r2, [pc, #204]	; (8013314 <LoRaMacInitialization+0x6e8>)
 8013246:	589b      	ldr	r3, [r3, r2]
 8013248:	3350      	adds	r3, #80	; 0x50
 801324a:	0018      	movs	r0, r3
 801324c:	f002 fd10 	bl	8015c70 <LoRaMacCryptoSetMulticastReference>
 8013250:	1e03      	subs	r3, r0, #0
 8013252:	d001      	beq.n	8013258 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013254:	2311      	movs	r3, #17
 8013256:	e058      	b.n	801330a <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013258:	4b3e      	ldr	r3, [pc, #248]	; (8013354 <LoRaMacInitialization+0x728>)
 801325a:	695b      	ldr	r3, [r3, #20]
 801325c:	4798      	blx	r3
 801325e:	0003      	movs	r3, r0
 8013260:	0018      	movs	r0, r3
 8013262:	f006 f83f 	bl	80192e4 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013266:	4b3b      	ldr	r3, [pc, #236]	; (8013354 <LoRaMacInitialization+0x728>)
 8013268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801326a:	4a2b      	ldr	r2, [pc, #172]	; (8013318 <LoRaMacInitialization+0x6ec>)
 801326c:	4929      	ldr	r1, [pc, #164]	; (8013314 <LoRaMacInitialization+0x6e8>)
 801326e:	5852      	ldr	r2, [r2, r1]
 8013270:	217d      	movs	r1, #125	; 0x7d
 8013272:	5c52      	ldrb	r2, [r2, r1]
 8013274:	0010      	movs	r0, r2
 8013276:	4798      	blx	r3
    Radio.Sleep( );
 8013278:	4b36      	ldr	r3, [pc, #216]	; (8013354 <LoRaMacInitialization+0x728>)
 801327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801327c:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801327e:	2144      	movs	r1, #68	; 0x44
 8013280:	187b      	adds	r3, r7, r1
 8013282:	2200      	movs	r2, #0
 8013284:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 8013286:	187b      	adds	r3, r7, r1
 8013288:	2200      	movs	r2, #0
 801328a:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d007      	beq.n	80132a2 <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	685a      	ldr	r2, [r3, #4]
 8013296:	187b      	adds	r3, r7, r1
 8013298:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	68da      	ldr	r2, [r3, #12]
 801329e:	187b      	adds	r3, r7, r1
 80132a0:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80132a2:	2124      	movs	r1, #36	; 0x24
 80132a4:	187b      	adds	r3, r7, r1
 80132a6:	4a30      	ldr	r2, [pc, #192]	; (8013368 <LoRaMacInitialization+0x73c>)
 80132a8:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80132aa:	187b      	adds	r3, r7, r1
 80132ac:	4a2f      	ldr	r2, [pc, #188]	; (801336c <LoRaMacInitialization+0x740>)
 80132ae:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80132b0:	187b      	adds	r3, r7, r1
 80132b2:	4a2f      	ldr	r2, [pc, #188]	; (8013370 <LoRaMacInitialization+0x744>)
 80132b4:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80132b6:	187b      	adds	r3, r7, r1
 80132b8:	4a2e      	ldr	r2, [pc, #184]	; (8013374 <LoRaMacInitialization+0x748>)
 80132ba:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 80132bc:	4b16      	ldr	r3, [pc, #88]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80132be:	4a15      	ldr	r2, [pc, #84]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80132c0:	589b      	ldr	r3, [r3, r2]
 80132c2:	334c      	adds	r3, #76	; 0x4c
 80132c4:	001a      	movs	r2, r3
 80132c6:	187b      	adds	r3, r7, r1
 80132c8:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 80132ca:	4b13      	ldr	r3, [pc, #76]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80132cc:	4a11      	ldr	r2, [pc, #68]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80132ce:	589b      	ldr	r3, [r3, r2]
 80132d0:	001a      	movs	r2, r3
 80132d2:	187b      	adds	r3, r7, r1
 80132d4:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 80132d6:	4b10      	ldr	r3, [pc, #64]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80132d8:	4a0e      	ldr	r2, [pc, #56]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80132da:	589b      	ldr	r3, [r3, r2]
 80132dc:	3384      	adds	r3, #132	; 0x84
 80132de:	001a      	movs	r2, r3
 80132e0:	187b      	adds	r3, r7, r1
 80132e2:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80132e4:	4b0c      	ldr	r3, [pc, #48]	; (8013318 <LoRaMacInitialization+0x6ec>)
 80132e6:	4a0b      	ldr	r2, [pc, #44]	; (8013314 <LoRaMacInitialization+0x6e8>)
 80132e8:	589b      	ldr	r3, [r3, r2]
 80132ea:	3350      	adds	r3, #80	; 0x50
 80132ec:	001a      	movs	r2, r3
 80132ee:	0008      	movs	r0, r1
 80132f0:	187b      	adds	r3, r7, r1
 80132f2:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80132f4:	4a20      	ldr	r2, [pc, #128]	; (8013378 <LoRaMacInitialization+0x74c>)
 80132f6:	2344      	movs	r3, #68	; 0x44
 80132f8:	18f9      	adds	r1, r7, r3
 80132fa:	183b      	adds	r3, r7, r0
 80132fc:	0018      	movs	r0, r3
 80132fe:	f001 f994 	bl	801462a <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013302:	2001      	movs	r0, #1
 8013304:	f7fc fe10 	bl	800ff28 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8013308:	2300      	movs	r3, #0
}
 801330a:	0018      	movs	r0, r3
 801330c:	46bd      	mov	sp, r7
 801330e:	b016      	add	sp, #88	; 0x58
 8013310:	bdb0      	pop	{r4, r5, r7, pc}
 8013312:	46c0      	nop			; (mov r8, r8)
 8013314:	00000484 	.word	0x00000484
 8013318:	2000054c 	.word	0x2000054c
 801331c:	00000481 	.word	0x00000481
 8013320:	0801032d 	.word	0x0801032d
 8013324:	200008b4 	.word	0x200008b4
 8013328:	080103b9 	.word	0x080103b9
 801332c:	200008cc 	.word	0x200008cc
 8013330:	0801044d 	.word	0x0801044d
 8013334:	200008e4 	.word	0x200008e4
 8013338:	080104e9 	.word	0x080104e9
 801333c:	20000944 	.word	0x20000944
 8013340:	0800ee11 	.word	0x0800ee11
 8013344:	0800ee7d 	.word	0x0800ee7d
 8013348:	0800ef51 	.word	0x0800ef51
 801334c:	0800ef0d 	.word	0x0800ef0d
 8013350:	0800ef95 	.word	0x0800ef95
 8013354:	0801f0bc 	.word	0x0801f0bc
 8013358:	20000898 	.word	0x20000898
 801335c:	08012af9 	.word	0x08012af9
 8013360:	08012ae9 	.word	0x08012ae9
 8013364:	08012b09 	.word	0x08012b09
 8013368:	200009b0 	.word	0x200009b0
 801336c:	20000968 	.word	0x20000968
 8013370:	2000099c 	.word	0x2000099c
 8013374:	200009cd 	.word	0x200009cd
 8013378:	08012b19 	.word	0x08012b19

0801337c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801337c:	b580      	push	{r7, lr}
 801337e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013380:	4a04      	ldr	r2, [pc, #16]	; (8013394 <LoRaMacStart+0x18>)
 8013382:	23d0      	movs	r3, #208	; 0xd0
 8013384:	009b      	lsls	r3, r3, #2
 8013386:	2100      	movs	r1, #0
 8013388:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 801338a:	2300      	movs	r3, #0
}
 801338c:	0018      	movs	r0, r3
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	46c0      	nop			; (mov r8, r8)
 8013394:	2000054c 	.word	0x2000054c

08013398 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013398:	b590      	push	{r4, r7, lr}
 801339a:	b08b      	sub	sp, #44	; 0x2c
 801339c:	af00      	add	r7, sp, #0
 801339e:	0002      	movs	r2, r0
 80133a0:	6039      	str	r1, [r7, #0]
 80133a2:	1dfb      	adds	r3, r7, #7
 80133a4:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80133a6:	4b4f      	ldr	r3, [pc, #316]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 80133a8:	4a4f      	ldr	r2, [pc, #316]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 80133aa:	589b      	ldr	r3, [r3, r2]
 80133ac:	2280      	movs	r2, #128	; 0x80
 80133ae:	589b      	ldr	r3, [r3, r2]
 80133b0:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80133b2:	4b4c      	ldr	r3, [pc, #304]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 80133b4:	4a4c      	ldr	r2, [pc, #304]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 80133b6:	589b      	ldr	r3, [r3, r2]
 80133b8:	2205      	movs	r2, #5
 80133ba:	569a      	ldrsb	r2, [r3, r2]
 80133bc:	230f      	movs	r3, #15
 80133be:	18fb      	adds	r3, r7, r3
 80133c0:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80133c2:	4b48      	ldr	r3, [pc, #288]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 80133c4:	4a48      	ldr	r2, [pc, #288]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 80133c6:	589b      	ldr	r3, [r3, r2]
 80133c8:	2204      	movs	r2, #4
 80133ca:	569a      	ldrsb	r2, [r3, r2]
 80133cc:	230e      	movs	r3, #14
 80133ce:	18fb      	adds	r3, r7, r3
 80133d0:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 80133d2:	2300      	movs	r3, #0
 80133d4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d101      	bne.n	80133e0 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80133dc:	2303      	movs	r3, #3
 80133de:	e07d      	b.n	80134dc <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80133e0:	4b40      	ldr	r3, [pc, #256]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 80133e2:	4a41      	ldr	r2, [pc, #260]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 80133e4:	5899      	ldr	r1, [r3, r2]
 80133e6:	2014      	movs	r0, #20
 80133e8:	183b      	adds	r3, r7, r0
 80133ea:	22b0      	movs	r2, #176	; 0xb0
 80133ec:	0052      	lsls	r2, r2, #1
 80133ee:	588a      	ldr	r2, [r1, r2]
 80133f0:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 80133f2:	183b      	adds	r3, r7, r0
 80133f4:	2200      	movs	r2, #0
 80133f6:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80133f8:	4b3a      	ldr	r3, [pc, #232]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 80133fa:	4a3b      	ldr	r2, [pc, #236]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 80133fc:	589b      	ldr	r3, [r3, r2]
 80133fe:	227e      	movs	r2, #126	; 0x7e
 8013400:	5c9a      	ldrb	r2, [r3, r2]
 8013402:	183b      	adds	r3, r7, r0
 8013404:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8013406:	4b37      	ldr	r3, [pc, #220]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 8013408:	4a37      	ldr	r2, [pc, #220]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 801340a:	589b      	ldr	r3, [r3, r2]
 801340c:	2280      	movs	r2, #128	; 0x80
 801340e:	589a      	ldr	r2, [r3, r2]
 8013410:	183b      	adds	r3, r7, r0
 8013412:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8013414:	4a33      	ldr	r2, [pc, #204]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 8013416:	23fd      	movs	r3, #253	; 0xfd
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	5ad2      	ldrh	r2, [r2, r3]
 801341c:	183b      	adds	r3, r7, r0
 801341e:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8013420:	4b30      	ldr	r3, [pc, #192]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 8013422:	4a32      	ldr	r2, [pc, #200]	; (80134ec <LoRaMacQueryTxPossible+0x154>)
 8013424:	5a9a      	ldrh	r2, [r3, r2]
 8013426:	183b      	adds	r3, r7, r0
 8013428:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801342a:	4b2e      	ldr	r3, [pc, #184]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 801342c:	4a2e      	ldr	r2, [pc, #184]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 801342e:	589b      	ldr	r3, [r3, r2]
 8013430:	2285      	movs	r2, #133	; 0x85
 8013432:	569a      	ldrsb	r2, [r3, r2]
 8013434:	183b      	adds	r3, r7, r0
 8013436:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013438:	4b2a      	ldr	r3, [pc, #168]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 801343a:	4a2b      	ldr	r2, [pc, #172]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 801343c:	589b      	ldr	r3, [r3, r2]
 801343e:	2284      	movs	r2, #132	; 0x84
 8013440:	569a      	ldrsb	r2, [r3, r2]
 8013442:	183b      	adds	r3, r7, r0
 8013444:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013446:	4b27      	ldr	r3, [pc, #156]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 8013448:	4a27      	ldr	r2, [pc, #156]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 801344a:	589b      	ldr	r3, [r3, r2]
 801344c:	22b8      	movs	r2, #184	; 0xb8
 801344e:	5c9a      	ldrb	r2, [r3, r2]
 8013450:	183b      	adds	r3, r7, r0
 8013452:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8013454:	4b23      	ldr	r3, [pc, #140]	; (80134e4 <LoRaMacQueryTxPossible+0x14c>)
 8013456:	4a24      	ldr	r2, [pc, #144]	; (80134e8 <LoRaMacQueryTxPossible+0x150>)
 8013458:	589b      	ldr	r3, [r3, r2]
 801345a:	781a      	ldrb	r2, [r3, #0]
 801345c:	183b      	adds	r3, r7, r0
 801345e:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8013460:	2310      	movs	r3, #16
 8013462:	18fb      	adds	r3, r7, r3
 8013464:	220e      	movs	r2, #14
 8013466:	18ba      	adds	r2, r7, r2
 8013468:	240f      	movs	r4, #15
 801346a:	1939      	adds	r1, r7, r4
 801346c:	1838      	adds	r0, r7, r0
 801346e:	f001 f8c4 	bl	80145fa <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013472:	193b      	adds	r3, r7, r4
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	b25b      	sxtb	r3, r3
 8013478:	0018      	movs	r0, r3
 801347a:	f7fd f9e7 	bl	801084c <GetMaxAppPayloadWithoutFOptsLength>
 801347e:	0003      	movs	r3, r0
 8013480:	001a      	movs	r2, r3
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013486:	2308      	movs	r3, #8
 8013488:	18fb      	adds	r3, r7, r3
 801348a:	0018      	movs	r0, r3
 801348c:	f001 fbf6 	bl	8014c7c <LoRaMacCommandsGetSizeSerializedCmds>
 8013490:	1e03      	subs	r3, r0, #0
 8013492:	d001      	beq.n	8013498 <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013494:	2313      	movs	r3, #19
 8013496:	e021      	b.n	80134dc <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	2b0f      	cmp	r3, #15
 801349c:	d81a      	bhi.n	80134d4 <LoRaMacQueryTxPossible+0x13c>
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	785b      	ldrb	r3, [r3, #1]
 80134a2:	001a      	movs	r2, r3
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d314      	bcc.n	80134d4 <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	785a      	ldrb	r2, [r3, #1]
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	1ad3      	subs	r3, r2, r3
 80134b4:	b2da      	uxtb	r2, r3
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	785b      	ldrb	r3, [r3, #1]
 80134be:	0019      	movs	r1, r3
 80134c0:	1dfb      	adds	r3, r7, #7
 80134c2:	781a      	ldrb	r2, [r3, #0]
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	18d3      	adds	r3, r2, r3
 80134c8:	4299      	cmp	r1, r3
 80134ca:	d301      	bcc.n	80134d0 <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 80134cc:	2300      	movs	r3, #0
 80134ce:	e005      	b.n	80134dc <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80134d0:	2308      	movs	r3, #8
 80134d2:	e003      	b.n	80134dc <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	2200      	movs	r2, #0
 80134d8:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80134da:	2308      	movs	r3, #8
    }
}
 80134dc:	0018      	movs	r0, r3
 80134de:	46bd      	mov	sp, r7
 80134e0:	b00b      	add	sp, #44	; 0x2c
 80134e2:	bd90      	pop	{r4, r7, pc}
 80134e4:	2000054c 	.word	0x2000054c
 80134e8:	00000484 	.word	0x00000484
 80134ec:	000003f6 	.word	0x000003f6

080134f0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80134f0:	b590      	push	{r4, r7, lr}
 80134f2:	b087      	sub	sp, #28
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80134f8:	2317      	movs	r3, #23
 80134fa:	18fb      	adds	r3, r7, r3
 80134fc:	2200      	movs	r2, #0
 80134fe:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d101      	bne.n	801350a <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013506:	2303      	movs	r3, #3
 8013508:	e146      	b.n	8013798 <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	2b28      	cmp	r3, #40	; 0x28
 8013510:	d900      	bls.n	8013514 <LoRaMacMibGetRequestConfirm+0x24>
 8013512:	e135      	b.n	8013780 <LoRaMacMibGetRequestConfirm+0x290>
 8013514:	009a      	lsls	r2, r3, #2
 8013516:	4ba2      	ldr	r3, [pc, #648]	; (80137a0 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013518:	18d3      	adds	r3, r2, r3
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 801351e:	4ba1      	ldr	r3, [pc, #644]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013520:	4aa1      	ldr	r2, [pc, #644]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013522:	589b      	ldr	r3, [r3, r2]
 8013524:	227c      	movs	r2, #124	; 0x7c
 8013526:	5c9a      	ldrb	r2, [r3, r2]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	711a      	strb	r2, [r3, #4]
            break;
 801352c:	e131      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 801352e:	4b9d      	ldr	r3, [pc, #628]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013530:	4a9d      	ldr	r2, [pc, #628]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013532:	589a      	ldr	r2, [r3, r2]
 8013534:	23b2      	movs	r3, #178	; 0xb2
 8013536:	005b      	lsls	r3, r3, #1
 8013538:	5cd2      	ldrb	r2, [r2, r3]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	711a      	strb	r2, [r3, #4]
            break;
 801353e:	e128      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8013540:	f7fa fb5c 	bl	800dbfc <SecureElementGetDevEui>
 8013544:	0002      	movs	r2, r0
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	605a      	str	r2, [r3, #4]
            break;
 801354a:	e122      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 801354c:	f7fa fb7a 	bl	800dc44 <SecureElementGetJoinEui>
 8013550:	0002      	movs	r2, r0
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	605a      	str	r2, [r3, #4]
            break;
 8013556:	e11c      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8013558:	4b92      	ldr	r3, [pc, #584]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801355a:	4a93      	ldr	r2, [pc, #588]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801355c:	589b      	ldr	r3, [r3, r2]
 801355e:	227e      	movs	r2, #126	; 0x7e
 8013560:	5c9a      	ldrb	r2, [r3, r2]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	711a      	strb	r2, [r3, #4]
            break;
 8013566:	e114      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8013568:	4b8e      	ldr	r3, [pc, #568]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801356a:	4a8f      	ldr	r2, [pc, #572]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801356c:	589b      	ldr	r3, [r3, r2]
 801356e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	605a      	str	r2, [r3, #4]
            break;
 8013574:	e10d      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8013576:	4b8b      	ldr	r3, [pc, #556]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013578:	4a8b      	ldr	r2, [pc, #556]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801357a:	589b      	ldr	r3, [r3, r2]
 801357c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	605a      	str	r2, [r3, #4]
            break;
 8013582:	e106      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8013584:	4b87      	ldr	r3, [pc, #540]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013586:	4a88      	ldr	r2, [pc, #544]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013588:	589b      	ldr	r3, [r3, r2]
 801358a:	227d      	movs	r2, #125	; 0x7d
 801358c:	5c9a      	ldrb	r2, [r3, r2]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	711a      	strb	r2, [r3, #4]
            break;
 8013592:	e0fe      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8013594:	4b83      	ldr	r3, [pc, #524]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013596:	4a84      	ldr	r2, [pc, #528]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013598:	589b      	ldr	r3, [r3, r2]
 801359a:	22ca      	movs	r2, #202	; 0xca
 801359c:	5c9a      	ldrb	r2, [r3, r2]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	711a      	strb	r2, [r3, #4]
            break;
 80135a2:	e0f6      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80135a4:	2110      	movs	r1, #16
 80135a6:	187b      	adds	r3, r7, r1
 80135a8:	221d      	movs	r2, #29
 80135aa:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80135ac:	4b7d      	ldr	r3, [pc, #500]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80135ae:	4a7e      	ldr	r2, [pc, #504]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80135b0:	589b      	ldr	r3, [r3, r2]
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	187a      	adds	r2, r7, r1
 80135b6:	0011      	movs	r1, r2
 80135b8:	0018      	movs	r0, r3
 80135ba:	f003 fa38 	bl	8016a2e <RegionGetPhyParam>
 80135be:	0003      	movs	r3, r0
 80135c0:	001a      	movs	r2, r3
 80135c2:	210c      	movs	r1, #12
 80135c4:	187b      	adds	r3, r7, r1
 80135c6:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 80135c8:	187b      	adds	r3, r7, r1
 80135ca:	681a      	ldr	r2, [r3, #0]
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	605a      	str	r2, [r3, #4]
            break;
 80135d0:	e0df      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80135d2:	4b74      	ldr	r3, [pc, #464]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80135d4:	4a74      	ldr	r2, [pc, #464]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80135d6:	589a      	ldr	r2, [r3, r2]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	21a8      	movs	r1, #168	; 0xa8
 80135dc:	3304      	adds	r3, #4
 80135de:	1852      	adds	r2, r2, r1
 80135e0:	ca03      	ldmia	r2!, {r0, r1}
 80135e2:	c303      	stmia	r3!, {r0, r1}
            break;
 80135e4:	e0d5      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80135e6:	4b6f      	ldr	r3, [pc, #444]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80135e8:	4a6f      	ldr	r2, [pc, #444]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80135ea:	589a      	ldr	r2, [r3, r2]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	3304      	adds	r3, #4
 80135f0:	3228      	adds	r2, #40	; 0x28
 80135f2:	ca03      	ldmia	r2!, {r0, r1}
 80135f4:	c303      	stmia	r3!, {r0, r1}
            break;
 80135f6:	e0cc      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 80135f8:	4b6a      	ldr	r3, [pc, #424]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80135fa:	4a6b      	ldr	r2, [pc, #428]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80135fc:	589a      	ldr	r2, [r3, r2]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	21b0      	movs	r1, #176	; 0xb0
 8013602:	3304      	adds	r3, #4
 8013604:	1852      	adds	r2, r2, r1
 8013606:	ca03      	ldmia	r2!, {r0, r1}
 8013608:	c303      	stmia	r3!, {r0, r1}
            break;
 801360a:	e0c2      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 801360c:	4b65      	ldr	r3, [pc, #404]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801360e:	4a66      	ldr	r2, [pc, #408]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013610:	589a      	ldr	r2, [r3, r2]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	3304      	adds	r3, #4
 8013616:	3230      	adds	r2, #48	; 0x30
 8013618:	ca03      	ldmia	r2!, {r0, r1}
 801361a:	c303      	stmia	r3!, {r0, r1}
            break;
 801361c:	e0b9      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801361e:	2110      	movs	r1, #16
 8013620:	187b      	adds	r3, r7, r1
 8013622:	221b      	movs	r2, #27
 8013624:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013626:	4b5f      	ldr	r3, [pc, #380]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013628:	4a5f      	ldr	r2, [pc, #380]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801362a:	589b      	ldr	r3, [r3, r2]
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	187a      	adds	r2, r7, r1
 8013630:	0011      	movs	r1, r2
 8013632:	0018      	movs	r0, r3
 8013634:	f003 f9fb 	bl	8016a2e <RegionGetPhyParam>
 8013638:	0003      	movs	r3, r0
 801363a:	001a      	movs	r2, r3
 801363c:	210c      	movs	r1, #12
 801363e:	187b      	adds	r3, r7, r1
 8013640:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013642:	187b      	adds	r3, r7, r1
 8013644:	681a      	ldr	r2, [r3, #0]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	605a      	str	r2, [r3, #4]
            break;
 801364a:	e0a2      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801364c:	2110      	movs	r1, #16
 801364e:	187b      	adds	r3, r7, r1
 8013650:	221a      	movs	r2, #26
 8013652:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013654:	4b53      	ldr	r3, [pc, #332]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013656:	4a54      	ldr	r2, [pc, #336]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013658:	589b      	ldr	r3, [r3, r2]
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	187a      	adds	r2, r7, r1
 801365e:	0011      	movs	r1, r2
 8013660:	0018      	movs	r0, r3
 8013662:	f003 f9e4 	bl	8016a2e <RegionGetPhyParam>
 8013666:	0003      	movs	r3, r0
 8013668:	001a      	movs	r2, r3
 801366a:	210c      	movs	r1, #12
 801366c:	187b      	adds	r3, r7, r1
 801366e:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8013670:	187b      	adds	r3, r7, r1
 8013672:	681a      	ldr	r2, [r3, #0]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	605a      	str	r2, [r3, #4]
            break;
 8013678:	e08b      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 801367a:	4b4a      	ldr	r3, [pc, #296]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801367c:	4a4a      	ldr	r2, [pc, #296]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801367e:	589b      	ldr	r3, [r3, r2]
 8013680:	22a4      	movs	r2, #164	; 0xa4
 8013682:	5c9a      	ldrb	r2, [r3, r2]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	711a      	strb	r2, [r3, #4]
            break;
 8013688:	e083      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 801368a:	4b46      	ldr	r3, [pc, #280]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801368c:	4a46      	ldr	r2, [pc, #280]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801368e:	589b      	ldr	r3, [r3, r2]
 8013690:	2290      	movs	r2, #144	; 0x90
 8013692:	589a      	ldr	r2, [r3, r2]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	605a      	str	r2, [r3, #4]
            break;
 8013698:	e07b      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 801369a:	4b42      	ldr	r3, [pc, #264]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801369c:	4a42      	ldr	r2, [pc, #264]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801369e:	589b      	ldr	r3, [r3, r2]
 80136a0:	2294      	movs	r2, #148	; 0x94
 80136a2:	589a      	ldr	r2, [r3, r2]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	605a      	str	r2, [r3, #4]
            break;
 80136a8:	e073      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 80136aa:	4b3e      	ldr	r3, [pc, #248]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136ac:	4a3e      	ldr	r2, [pc, #248]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136ae:	589b      	ldr	r3, [r3, r2]
 80136b0:	2298      	movs	r2, #152	; 0x98
 80136b2:	589a      	ldr	r2, [r3, r2]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	605a      	str	r2, [r3, #4]
            break;
 80136b8:	e06b      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 80136ba:	4b3a      	ldr	r3, [pc, #232]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136bc:	4a3a      	ldr	r2, [pc, #232]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136be:	589b      	ldr	r3, [r3, r2]
 80136c0:	229c      	movs	r2, #156	; 0x9c
 80136c2:	589a      	ldr	r2, [r3, r2]
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	605a      	str	r2, [r3, #4]
            break;
 80136c8:	e063      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 80136ca:	4b36      	ldr	r3, [pc, #216]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136cc:	4a36      	ldr	r2, [pc, #216]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136ce:	589b      	ldr	r3, [r3, r2]
 80136d0:	22a0      	movs	r2, #160	; 0xa0
 80136d2:	589a      	ldr	r2, [r3, r2]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	605a      	str	r2, [r3, #4]
            break;
 80136d8:	e05b      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80136da:	4b32      	ldr	r3, [pc, #200]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136dc:	4a32      	ldr	r2, [pc, #200]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136de:	589b      	ldr	r3, [r3, r2]
 80136e0:	2205      	movs	r2, #5
 80136e2:	569a      	ldrsb	r2, [r3, r2]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	711a      	strb	r2, [r3, #4]
            break;
 80136e8:	e053      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80136ea:	4b2e      	ldr	r3, [pc, #184]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136ec:	4a2e      	ldr	r2, [pc, #184]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136ee:	589b      	ldr	r3, [r3, r2]
 80136f0:	2285      	movs	r2, #133	; 0x85
 80136f2:	569a      	ldrsb	r2, [r3, r2]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	711a      	strb	r2, [r3, #4]
            break;
 80136f8:	e04b      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80136fa:	4b2a      	ldr	r3, [pc, #168]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136fc:	4a2a      	ldr	r2, [pc, #168]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136fe:	589b      	ldr	r3, [r3, r2]
 8013700:	2204      	movs	r2, #4
 8013702:	569a      	ldrsb	r2, [r3, r2]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	711a      	strb	r2, [r3, #4]
            break;
 8013708:	e043      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801370a:	4b26      	ldr	r3, [pc, #152]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801370c:	4a26      	ldr	r2, [pc, #152]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801370e:	589b      	ldr	r3, [r3, r2]
 8013710:	2284      	movs	r2, #132	; 0x84
 8013712:	569a      	ldrsb	r2, [r3, r2]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	711a      	strb	r2, [r3, #4]
            break;
 8013718:	e03b      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 801371a:	4b22      	ldr	r3, [pc, #136]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801371c:	4a22      	ldr	r2, [pc, #136]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801371e:	589b      	ldr	r3, [r3, r2]
 8013720:	2288      	movs	r2, #136	; 0x88
 8013722:	589a      	ldr	r2, [r3, r2]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	605a      	str	r2, [r3, #4]
            break;
 8013728:	e033      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 801372a:	4b1e      	ldr	r3, [pc, #120]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801372c:	4a1e      	ldr	r2, [pc, #120]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801372e:	589b      	ldr	r3, [r3, r2]
 8013730:	228c      	movs	r2, #140	; 0x8c
 8013732:	5c9a      	ldrb	r2, [r3, r2]
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	711a      	strb	r2, [r3, #4]
            break;
 8013738:	e02b      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 801373a:	4b1a      	ldr	r3, [pc, #104]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801373c:	4a1a      	ldr	r2, [pc, #104]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801373e:	589b      	ldr	r3, [r3, r2]
 8013740:	22c0      	movs	r2, #192	; 0xc0
 8013742:	589a      	ldr	r2, [r3, r2]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	605a      	str	r2, [r3, #4]
            break;
 8013748:	e023      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 801374a:	f7fe ff23 	bl	8012594 <GetCtxs>
 801374e:	0002      	movs	r2, r0
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	605a      	str	r2, [r3, #4]
            break;
 8013754:	e01d      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8013756:	4b13      	ldr	r3, [pc, #76]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013758:	4a13      	ldr	r2, [pc, #76]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801375a:	589b      	ldr	r3, [r3, r2]
 801375c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	605a      	str	r2, [r3, #4]
            break;
 8013762:	e016      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 8013764:	4b0f      	ldr	r3, [pc, #60]	; (80137a4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013766:	4a10      	ldr	r2, [pc, #64]	; (80137a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013768:	5899      	ldr	r1, [r3, r2]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	22b0      	movs	r2, #176	; 0xb0
 801376e:	0052      	lsls	r2, r2, #1
 8013770:	588a      	ldr	r2, [r1, r2]
 8013772:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013774:	687c      	ldr	r4, [r7, #4]
 8013776:	f003 fb55 	bl	8016e24 <RegionGetVersion>
 801377a:	0003      	movs	r3, r0
 801377c:	60a3      	str	r3, [r4, #8]
            break;
 801377e:	e008      	b.n	8013792 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013780:	2317      	movs	r3, #23
 8013782:	18fc      	adds	r4, r7, r3
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	0018      	movs	r0, r3
 8013788:	f000 ffed 	bl	8014766 <LoRaMacClassBMibGetRequestConfirm>
 801378c:	0003      	movs	r3, r0
 801378e:	7023      	strb	r3, [r4, #0]
            break;
 8013790:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 8013792:	2317      	movs	r3, #23
 8013794:	18fb      	adds	r3, r7, r3
 8013796:	781b      	ldrb	r3, [r3, #0]
}
 8013798:	0018      	movs	r0, r3
 801379a:	46bd      	mov	sp, r7
 801379c:	b007      	add	sp, #28
 801379e:	bd90      	pop	{r4, r7, pc}
 80137a0:	0801ec70 	.word	0x0801ec70
 80137a4:	2000054c 	.word	0x2000054c
 80137a8:	00000484 	.word	0x00000484

080137ac <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80137ac:	b590      	push	{r4, r7, lr}
 80137ae:	b087      	sub	sp, #28
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80137b4:	2317      	movs	r3, #23
 80137b6:	18fb      	adds	r3, r7, r3
 80137b8:	2200      	movs	r2, #0
 80137ba:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d102      	bne.n	80137c8 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80137c2:	2303      	movs	r3, #3
 80137c4:	f000 fb74 	bl	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80137c8:	4ac3      	ldr	r2, [pc, #780]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 80137ca:	23d0      	movs	r3, #208	; 0xd0
 80137cc:	009b      	lsls	r3, r3, #2
 80137ce:	58d3      	ldr	r3, [r2, r3]
 80137d0:	2202      	movs	r2, #2
 80137d2:	4013      	ands	r3, r2
 80137d4:	d002      	beq.n	80137dc <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80137d6:	2301      	movs	r3, #1
 80137d8:	f000 fb6a 	bl	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	2b27      	cmp	r3, #39	; 0x27
 80137e2:	d900      	bls.n	80137e6 <LoRaMacMibSetRequestConfirm+0x3a>
 80137e4:	e333      	b.n	8013e4e <LoRaMacMibSetRequestConfirm+0x6a2>
 80137e6:	009a      	lsls	r2, r3, #2
 80137e8:	4bbc      	ldr	r3, [pc, #752]	; (8013adc <LoRaMacMibSetRequestConfirm+0x330>)
 80137ea:	18d3      	adds	r3, r2, r3
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	791b      	ldrb	r3, [r3, #4]
 80137f4:	2217      	movs	r2, #23
 80137f6:	18bc      	adds	r4, r7, r2
 80137f8:	0018      	movs	r0, r3
 80137fa:	f7fc ff07 	bl	801060c <SwitchClass>
 80137fe:	0003      	movs	r3, r0
 8013800:	7023      	strb	r3, [r4, #0]
            break;
 8013802:	e34e      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	791b      	ldrb	r3, [r3, #4]
 8013808:	2b02      	cmp	r3, #2
 801380a:	d008      	beq.n	801381e <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 801380c:	4bb2      	ldr	r3, [pc, #712]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 801380e:	4ab4      	ldr	r2, [pc, #720]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013810:	589a      	ldr	r2, [r3, r2]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	7919      	ldrb	r1, [r3, #4]
 8013816:	23b2      	movs	r3, #178	; 0xb2
 8013818:	005b      	lsls	r3, r3, #1
 801381a:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801381c:	e341      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801381e:	2317      	movs	r3, #23
 8013820:	18fb      	adds	r3, r7, r3
 8013822:	2203      	movs	r2, #3
 8013824:	701a      	strb	r2, [r3, #0]
            break;
 8013826:	e33c      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	0018      	movs	r0, r3
 801382e:	f7fa f9c9 	bl	800dbc4 <SecureElementSetDevEui>
 8013832:	1e03      	subs	r3, r0, #0
 8013834:	d100      	bne.n	8013838 <LoRaMacMibSetRequestConfirm+0x8c>
 8013836:	e319      	b.n	8013e6c <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013838:	2317      	movs	r3, #23
 801383a:	18fb      	adds	r3, r7, r3
 801383c:	2203      	movs	r2, #3
 801383e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013840:	e314      	b.n	8013e6c <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	0018      	movs	r0, r3
 8013848:	f7fa f9e0 	bl	800dc0c <SecureElementSetJoinEui>
 801384c:	1e03      	subs	r3, r0, #0
 801384e:	d100      	bne.n	8013852 <LoRaMacMibSetRequestConfirm+0xa6>
 8013850:	e30e      	b.n	8013e70 <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013852:	2317      	movs	r3, #23
 8013854:	18fb      	adds	r3, r7, r3
 8013856:	2203      	movs	r2, #3
 8013858:	701a      	strb	r2, [r3, #0]
            }
            break;
 801385a:	e309      	b.n	8013e70 <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 801385c:	4b9e      	ldr	r3, [pc, #632]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 801385e:	4aa0      	ldr	r2, [pc, #640]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013860:	589b      	ldr	r3, [r3, r2]
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	7911      	ldrb	r1, [r2, #4]
 8013866:	227e      	movs	r2, #126	; 0x7e
 8013868:	5499      	strb	r1, [r3, r2]
            break;
 801386a:	e31a      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 801386c:	4b9a      	ldr	r3, [pc, #616]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 801386e:	4a9c      	ldr	r2, [pc, #624]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013870:	589b      	ldr	r3, [r3, r2]
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	6852      	ldr	r2, [r2, #4]
 8013876:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8013878:	e313      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 801387a:	4b97      	ldr	r3, [pc, #604]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 801387c:	4a98      	ldr	r2, [pc, #608]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 801387e:	589b      	ldr	r3, [r3, r2]
 8013880:	687a      	ldr	r2, [r7, #4]
 8013882:	6852      	ldr	r2, [r2, #4]
 8013884:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8013886:	e30c      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00a      	beq.n	80138a6 <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	0019      	movs	r1, r3
 8013896:	2000      	movs	r0, #0
 8013898:	f002 fa00 	bl	8015c9c <LoRaMacCryptoSetKey>
 801389c:	1e03      	subs	r3, r0, #0
 801389e:	d100      	bne.n	80138a2 <LoRaMacMibSetRequestConfirm+0xf6>
 80138a0:	e2e8      	b.n	8013e74 <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138a2:	2311      	movs	r3, #17
 80138a4:	e304      	b.n	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138a6:	2317      	movs	r3, #23
 80138a8:	18fb      	adds	r3, r7, r3
 80138aa:	2203      	movs	r2, #3
 80138ac:	701a      	strb	r2, [r3, #0]
            }
            break;
 80138ae:	e2e1      	b.n	8013e74 <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	685b      	ldr	r3, [r3, #4]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d00a      	beq.n	80138ce <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	0019      	movs	r1, r3
 80138be:	2001      	movs	r0, #1
 80138c0:	f002 f9ec 	bl	8015c9c <LoRaMacCryptoSetKey>
 80138c4:	1e03      	subs	r3, r0, #0
 80138c6:	d100      	bne.n	80138ca <LoRaMacMibSetRequestConfirm+0x11e>
 80138c8:	e2d6      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138ca:	2311      	movs	r3, #17
 80138cc:	e2f0      	b.n	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138ce:	2317      	movs	r3, #23
 80138d0:	18fb      	adds	r3, r7, r3
 80138d2:	2203      	movs	r2, #3
 80138d4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80138d6:	e2cf      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	685b      	ldr	r3, [r3, #4]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00a      	beq.n	80138f6 <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	0019      	movs	r1, r3
 80138e6:	2002      	movs	r0, #2
 80138e8:	f002 f9d8 	bl	8015c9c <LoRaMacCryptoSetKey>
 80138ec:	1e03      	subs	r3, r0, #0
 80138ee:	d100      	bne.n	80138f2 <LoRaMacMibSetRequestConfirm+0x146>
 80138f0:	e2c4      	b.n	8013e7c <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138f2:	2311      	movs	r3, #17
 80138f4:	e2dc      	b.n	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138f6:	2317      	movs	r3, #23
 80138f8:	18fb      	adds	r3, r7, r3
 80138fa:	2203      	movs	r2, #3
 80138fc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80138fe:	e2bd      	b.n	8013e7c <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	685b      	ldr	r3, [r3, #4]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d00a      	beq.n	801391e <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	685b      	ldr	r3, [r3, #4]
 801390c:	0019      	movs	r1, r3
 801390e:	2003      	movs	r0, #3
 8013910:	f002 f9c4 	bl	8015c9c <LoRaMacCryptoSetKey>
 8013914:	1e03      	subs	r3, r0, #0
 8013916:	d100      	bne.n	801391a <LoRaMacMibSetRequestConfirm+0x16e>
 8013918:	e2b2      	b.n	8013e80 <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801391a:	2311      	movs	r3, #17
 801391c:	e2c8      	b.n	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801391e:	2317      	movs	r3, #23
 8013920:	18fb      	adds	r3, r7, r3
 8013922:	2203      	movs	r2, #3
 8013924:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013926:	e2ab      	b.n	8013e80 <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	685b      	ldr	r3, [r3, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d00a      	beq.n	8013946 <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	0019      	movs	r1, r3
 8013936:	207f      	movs	r0, #127	; 0x7f
 8013938:	f002 f9b0 	bl	8015c9c <LoRaMacCryptoSetKey>
 801393c:	1e03      	subs	r3, r0, #0
 801393e:	d100      	bne.n	8013942 <LoRaMacMibSetRequestConfirm+0x196>
 8013940:	e2a0      	b.n	8013e84 <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013942:	2311      	movs	r3, #17
 8013944:	e2b4      	b.n	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013946:	2317      	movs	r3, #23
 8013948:	18fb      	adds	r3, r7, r3
 801394a:	2203      	movs	r2, #3
 801394c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801394e:	e299      	b.n	8013e84 <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d00a      	beq.n	801396e <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	685b      	ldr	r3, [r3, #4]
 801395c:	0019      	movs	r1, r3
 801395e:	2080      	movs	r0, #128	; 0x80
 8013960:	f002 f99c 	bl	8015c9c <LoRaMacCryptoSetKey>
 8013964:	1e03      	subs	r3, r0, #0
 8013966:	d100      	bne.n	801396a <LoRaMacMibSetRequestConfirm+0x1be>
 8013968:	e28e      	b.n	8013e88 <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801396a:	2311      	movs	r3, #17
 801396c:	e2a0      	b.n	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801396e:	2317      	movs	r3, #23
 8013970:	18fb      	adds	r3, r7, r3
 8013972:	2203      	movs	r2, #3
 8013974:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013976:	e287      	b.n	8013e88 <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00a      	beq.n	8013996 <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	0019      	movs	r1, r3
 8013986:	2081      	movs	r0, #129	; 0x81
 8013988:	f002 f988 	bl	8015c9c <LoRaMacCryptoSetKey>
 801398c:	1e03      	subs	r3, r0, #0
 801398e:	d100      	bne.n	8013992 <LoRaMacMibSetRequestConfirm+0x1e6>
 8013990:	e27c      	b.n	8013e8c <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013992:	2311      	movs	r3, #17
 8013994:	e28c      	b.n	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013996:	2317      	movs	r3, #23
 8013998:	18fb      	adds	r3, r7, r3
 801399a:	2203      	movs	r2, #3
 801399c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801399e:	e275      	b.n	8013e8c <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d00a      	beq.n	80139be <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	685b      	ldr	r3, [r3, #4]
 80139ac:	0019      	movs	r1, r3
 80139ae:	2082      	movs	r0, #130	; 0x82
 80139b0:	f002 f974 	bl	8015c9c <LoRaMacCryptoSetKey>
 80139b4:	1e03      	subs	r3, r0, #0
 80139b6:	d100      	bne.n	80139ba <LoRaMacMibSetRequestConfirm+0x20e>
 80139b8:	e26a      	b.n	8013e90 <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80139ba:	2311      	movs	r3, #17
 80139bc:	e278      	b.n	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139be:	2317      	movs	r3, #23
 80139c0:	18fb      	adds	r3, r7, r3
 80139c2:	2203      	movs	r2, #3
 80139c4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80139c6:	e263      	b.n	8013e90 <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80139c8:	4b43      	ldr	r3, [pc, #268]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 80139ca:	4a45      	ldr	r2, [pc, #276]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 80139cc:	589b      	ldr	r3, [r3, r2]
 80139ce:	687a      	ldr	r2, [r7, #4]
 80139d0:	7911      	ldrb	r1, [r2, #4]
 80139d2:	227d      	movs	r2, #125	; 0x7d
 80139d4:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 80139d6:	4b43      	ldr	r3, [pc, #268]	; (8013ae4 <LoRaMacMibSetRequestConfirm+0x338>)
 80139d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139da:	4a3f      	ldr	r2, [pc, #252]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 80139dc:	4940      	ldr	r1, [pc, #256]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 80139de:	5852      	ldr	r2, [r2, r1]
 80139e0:	217d      	movs	r1, #125	; 0x7d
 80139e2:	5c52      	ldrb	r2, [r2, r1]
 80139e4:	0010      	movs	r0, r2
 80139e6:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80139e8:	4b3e      	ldr	r3, [pc, #248]	; (8013ae4 <LoRaMacMibSetRequestConfirm+0x338>)
 80139ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ec:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80139ee:	e258      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80139f0:	4b39      	ldr	r3, [pc, #228]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 80139f2:	4a3b      	ldr	r2, [pc, #236]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 80139f4:	589b      	ldr	r3, [r3, r2]
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	7911      	ldrb	r1, [r2, #4]
 80139fa:	22ca      	movs	r2, #202	; 0xca
 80139fc:	5499      	strb	r1, [r3, r2]
            break;
 80139fe:	e250      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	7a1b      	ldrb	r3, [r3, #8]
 8013a04:	b25a      	sxtb	r2, r3
 8013a06:	2108      	movs	r1, #8
 8013a08:	187b      	adds	r3, r7, r1
 8013a0a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013a0c:	4b32      	ldr	r3, [pc, #200]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a0e:	4a34      	ldr	r2, [pc, #208]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a10:	589b      	ldr	r3, [r3, r2]
 8013a12:	22b9      	movs	r2, #185	; 0xb9
 8013a14:	5c9a      	ldrb	r2, [r3, r2]
 8013a16:	187b      	adds	r3, r7, r1
 8013a18:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 8013a1a:	4b2f      	ldr	r3, [pc, #188]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a1c:	4a30      	ldr	r2, [pc, #192]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a1e:	589b      	ldr	r3, [r3, r2]
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	1879      	adds	r1, r7, r1
 8013a24:	2207      	movs	r2, #7
 8013a26:	0018      	movs	r0, r3
 8013a28:	f003 f868 	bl	8016afc <RegionVerify>
 8013a2c:	0003      	movs	r3, r0
 8013a2e:	001a      	movs	r2, r3
 8013a30:	2301      	movs	r3, #1
 8013a32:	4053      	eors	r3, r2
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d004      	beq.n	8013a44 <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a3a:	2317      	movs	r3, #23
 8013a3c:	18fb      	adds	r3, r7, r3
 8013a3e:	2203      	movs	r2, #3
 8013a40:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8013a42:	e22e      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	685a      	ldr	r2, [r3, #4]
 8013a48:	2108      	movs	r1, #8
 8013a4a:	187b      	adds	r3, r7, r1
 8013a4c:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 8013a4e:	4b22      	ldr	r3, [pc, #136]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a50:	4a23      	ldr	r2, [pc, #140]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a52:	589b      	ldr	r3, [r3, r2]
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	1879      	adds	r1, r7, r1
 8013a58:	2200      	movs	r2, #0
 8013a5a:	0018      	movs	r0, r3
 8013a5c:	f003 f84e 	bl	8016afc <RegionVerify>
 8013a60:	0003      	movs	r3, r0
 8013a62:	001a      	movs	r2, r3
 8013a64:	2301      	movs	r3, #1
 8013a66:	4053      	eors	r3, r2
 8013a68:	b2db      	uxtb	r3, r3
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d004      	beq.n	8013a78 <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a6e:	2317      	movs	r3, #23
 8013a70:	18fb      	adds	r3, r7, r3
 8013a72:	2203      	movs	r2, #3
 8013a74:	701a      	strb	r2, [r3, #0]
            break;
 8013a76:	e214      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013a78:	4b17      	ldr	r3, [pc, #92]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a7a:	4a19      	ldr	r2, [pc, #100]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a7c:	589b      	ldr	r3, [r3, r2]
 8013a7e:	21a8      	movs	r1, #168	; 0xa8
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	185b      	adds	r3, r3, r1
 8013a84:	3204      	adds	r2, #4
 8013a86:	ca03      	ldmia	r2!, {r0, r1}
 8013a88:	c303      	stmia	r3!, {r0, r1}
            break;
 8013a8a:	e20a      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	7a1b      	ldrb	r3, [r3, #8]
 8013a90:	b25a      	sxtb	r2, r3
 8013a92:	2108      	movs	r1, #8
 8013a94:	187b      	adds	r3, r7, r1
 8013a96:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013a98:	4b0f      	ldr	r3, [pc, #60]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a9a:	4a11      	ldr	r2, [pc, #68]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a9c:	589b      	ldr	r3, [r3, r2]
 8013a9e:	22b9      	movs	r2, #185	; 0xb9
 8013aa0:	5c9a      	ldrb	r2, [r3, r2]
 8013aa2:	187b      	adds	r3, r7, r1
 8013aa4:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013aa6:	4b0c      	ldr	r3, [pc, #48]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013aa8:	4a0d      	ldr	r2, [pc, #52]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013aaa:	589b      	ldr	r3, [r3, r2]
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	1879      	adds	r1, r7, r1
 8013ab0:	2207      	movs	r2, #7
 8013ab2:	0018      	movs	r0, r3
 8013ab4:	f003 f822 	bl	8016afc <RegionVerify>
 8013ab8:	1e03      	subs	r3, r0, #0
 8013aba:	d008      	beq.n	8013ace <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013abc:	4b06      	ldr	r3, [pc, #24]	; (8013ad8 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013abe:	4a08      	ldr	r2, [pc, #32]	; (8013ae0 <LoRaMacMibSetRequestConfirm+0x334>)
 8013ac0:	589b      	ldr	r3, [r3, r2]
 8013ac2:	687a      	ldr	r2, [r7, #4]
 8013ac4:	3328      	adds	r3, #40	; 0x28
 8013ac6:	3204      	adds	r2, #4
 8013ac8:	ca03      	ldmia	r2!, {r0, r1}
 8013aca:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013acc:	e1e9      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ace:	2317      	movs	r3, #23
 8013ad0:	18fb      	adds	r3, r7, r3
 8013ad2:	2203      	movs	r2, #3
 8013ad4:	701a      	strb	r2, [r3, #0]
            break;
 8013ad6:	e1e4      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
 8013ad8:	2000054c 	.word	0x2000054c
 8013adc:	0801ed14 	.word	0x0801ed14
 8013ae0:	00000484 	.word	0x00000484
 8013ae4:	0801f0bc 	.word	0x0801f0bc
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	7a1b      	ldrb	r3, [r3, #8]
 8013aec:	b25a      	sxtb	r2, r3
 8013aee:	2108      	movs	r1, #8
 8013af0:	187b      	adds	r3, r7, r1
 8013af2:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013af4:	4bda      	ldr	r3, [pc, #872]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013af6:	4adb      	ldr	r2, [pc, #876]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013af8:	589b      	ldr	r3, [r3, r2]
 8013afa:	22b9      	movs	r2, #185	; 0xb9
 8013afc:	5c9a      	ldrb	r2, [r3, r2]
 8013afe:	187b      	adds	r3, r7, r1
 8013b00:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013b02:	4bd7      	ldr	r3, [pc, #860]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b04:	4ad7      	ldr	r2, [pc, #860]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b06:	589b      	ldr	r3, [r3, r2]
 8013b08:	781b      	ldrb	r3, [r3, #0]
 8013b0a:	1879      	adds	r1, r7, r1
 8013b0c:	2207      	movs	r2, #7
 8013b0e:	0018      	movs	r0, r3
 8013b10:	f002 fff4 	bl	8016afc <RegionVerify>
 8013b14:	1e03      	subs	r3, r0, #0
 8013b16:	d01f      	beq.n	8013b58 <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013b18:	4bd1      	ldr	r3, [pc, #836]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b1a:	4ad2      	ldr	r2, [pc, #840]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b1c:	589b      	ldr	r3, [r3, r2]
 8013b1e:	21b0      	movs	r1, #176	; 0xb0
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	185b      	adds	r3, r3, r1
 8013b24:	3204      	adds	r2, #4
 8013b26:	ca03      	ldmia	r2!, {r0, r1}
 8013b28:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013b2a:	4bcd      	ldr	r3, [pc, #820]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b2c:	4acd      	ldr	r2, [pc, #820]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b2e:	589b      	ldr	r3, [r3, r2]
 8013b30:	227c      	movs	r2, #124	; 0x7c
 8013b32:	5c9b      	ldrb	r3, [r3, r2]
 8013b34:	2b02      	cmp	r3, #2
 8013b36:	d000      	beq.n	8013b3a <LoRaMacMibSetRequestConfirm+0x38e>
 8013b38:	e1ac      	b.n	8013e94 <LoRaMacMibSetRequestConfirm+0x6e8>
 8013b3a:	4bc9      	ldr	r3, [pc, #804]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b3c:	4ac9      	ldr	r2, [pc, #804]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b3e:	589a      	ldr	r2, [r3, r2]
 8013b40:	23b2      	movs	r3, #178	; 0xb2
 8013b42:	005b      	lsls	r3, r3, #1
 8013b44:	5cd3      	ldrb	r3, [r2, r3]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d100      	bne.n	8013b4c <LoRaMacMibSetRequestConfirm+0x3a0>
 8013b4a:	e1a3      	b.n	8013e94 <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013b4c:	4bc6      	ldr	r3, [pc, #792]	; (8013e68 <LoRaMacMibSetRequestConfirm+0x6bc>)
 8013b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b50:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013b52:	f7fe fa33 	bl	8011fbc <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b56:	e19d      	b.n	8013e94 <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b58:	2317      	movs	r3, #23
 8013b5a:	18fb      	adds	r3, r7, r3
 8013b5c:	2203      	movs	r2, #3
 8013b5e:	701a      	strb	r2, [r3, #0]
            break;
 8013b60:	e198      	b.n	8013e94 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	7a1b      	ldrb	r3, [r3, #8]
 8013b66:	b25a      	sxtb	r2, r3
 8013b68:	2108      	movs	r1, #8
 8013b6a:	187b      	adds	r3, r7, r1
 8013b6c:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013b6e:	4bbc      	ldr	r3, [pc, #752]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b70:	4abc      	ldr	r2, [pc, #752]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b72:	589b      	ldr	r3, [r3, r2]
 8013b74:	22b9      	movs	r2, #185	; 0xb9
 8013b76:	5c9a      	ldrb	r2, [r3, r2]
 8013b78:	187b      	adds	r3, r7, r1
 8013b7a:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013b7c:	4bb8      	ldr	r3, [pc, #736]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b7e:	4ab9      	ldr	r2, [pc, #740]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b80:	589b      	ldr	r3, [r3, r2]
 8013b82:	781b      	ldrb	r3, [r3, #0]
 8013b84:	1879      	adds	r1, r7, r1
 8013b86:	2207      	movs	r2, #7
 8013b88:	0018      	movs	r0, r3
 8013b8a:	f002 ffb7 	bl	8016afc <RegionVerify>
 8013b8e:	1e03      	subs	r3, r0, #0
 8013b90:	d008      	beq.n	8013ba4 <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013b92:	4bb3      	ldr	r3, [pc, #716]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b94:	4ab3      	ldr	r2, [pc, #716]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b96:	589b      	ldr	r3, [r3, r2]
 8013b98:	687a      	ldr	r2, [r7, #4]
 8013b9a:	3330      	adds	r3, #48	; 0x30
 8013b9c:	3204      	adds	r2, #4
 8013b9e:	ca03      	ldmia	r2!, {r0, r1}
 8013ba0:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ba2:	e17e      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ba4:	2317      	movs	r3, #23
 8013ba6:	18fb      	adds	r3, r7, r3
 8013ba8:	2203      	movs	r2, #3
 8013baa:	701a      	strb	r2, [r3, #0]
            break;
 8013bac:	e179      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	685a      	ldr	r2, [r3, #4]
 8013bb2:	210c      	movs	r1, #12
 8013bb4:	187b      	adds	r3, r7, r1
 8013bb6:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013bb8:	187b      	adds	r3, r7, r1
 8013bba:	2201      	movs	r2, #1
 8013bbc:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013bbe:	4ba8      	ldr	r3, [pc, #672]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013bc0:	4aa8      	ldr	r2, [pc, #672]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013bc2:	589b      	ldr	r3, [r3, r2]
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	187a      	adds	r2, r7, r1
 8013bc8:	0011      	movs	r1, r2
 8013bca:	0018      	movs	r0, r3
 8013bcc:	f002 ffc8 	bl	8016b60 <RegionChanMaskSet>
 8013bd0:	0003      	movs	r3, r0
 8013bd2:	001a      	movs	r2, r3
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	4053      	eors	r3, r2
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d100      	bne.n	8013be0 <LoRaMacMibSetRequestConfirm+0x434>
 8013bde:	e15b      	b.n	8013e98 <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013be0:	2317      	movs	r3, #23
 8013be2:	18fb      	adds	r3, r7, r3
 8013be4:	2203      	movs	r2, #3
 8013be6:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013be8:	e156      	b.n	8013e98 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	685a      	ldr	r2, [r3, #4]
 8013bee:	210c      	movs	r1, #12
 8013bf0:	187b      	adds	r3, r7, r1
 8013bf2:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013bf4:	187b      	adds	r3, r7, r1
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013bfa:	4b99      	ldr	r3, [pc, #612]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013bfc:	4a99      	ldr	r2, [pc, #612]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013bfe:	589b      	ldr	r3, [r3, r2]
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	187a      	adds	r2, r7, r1
 8013c04:	0011      	movs	r1, r2
 8013c06:	0018      	movs	r0, r3
 8013c08:	f002 ffaa 	bl	8016b60 <RegionChanMaskSet>
 8013c0c:	0003      	movs	r3, r0
 8013c0e:	001a      	movs	r2, r3
 8013c10:	2301      	movs	r3, #1
 8013c12:	4053      	eors	r3, r2
 8013c14:	b2db      	uxtb	r3, r3
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d100      	bne.n	8013c1c <LoRaMacMibSetRequestConfirm+0x470>
 8013c1a:	e13f      	b.n	8013e9c <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c1c:	2317      	movs	r3, #23
 8013c1e:	18fb      	adds	r3, r7, r3
 8013c20:	2203      	movs	r2, #3
 8013c22:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013c24:	e13a      	b.n	8013e9c <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	791b      	ldrb	r3, [r3, #4]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d00b      	beq.n	8013c46 <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013c32:	2b0f      	cmp	r3, #15
 8013c34:	d807      	bhi.n	8013c46 <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013c36:	4b8a      	ldr	r3, [pc, #552]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c38:	4a8a      	ldr	r2, [pc, #552]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c3a:	589b      	ldr	r3, [r3, r2]
 8013c3c:	687a      	ldr	r2, [r7, #4]
 8013c3e:	7911      	ldrb	r1, [r2, #4]
 8013c40:	22a4      	movs	r2, #164	; 0xa4
 8013c42:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c44:	e12d      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c46:	2317      	movs	r3, #23
 8013c48:	18fb      	adds	r3, r7, r3
 8013c4a:	2203      	movs	r2, #3
 8013c4c:	701a      	strb	r2, [r3, #0]
            break;
 8013c4e:	e128      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013c50:	4b83      	ldr	r3, [pc, #524]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c52:	4a84      	ldr	r2, [pc, #528]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c54:	589a      	ldr	r2, [r3, r2]
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	685b      	ldr	r3, [r3, #4]
 8013c5a:	2190      	movs	r1, #144	; 0x90
 8013c5c:	5053      	str	r3, [r2, r1]
            break;
 8013c5e:	e120      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013c60:	4b7f      	ldr	r3, [pc, #508]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c62:	4a80      	ldr	r2, [pc, #512]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c64:	589a      	ldr	r2, [r3, r2]
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	2194      	movs	r1, #148	; 0x94
 8013c6c:	5053      	str	r3, [r2, r1]
            break;
 8013c6e:	e118      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013c70:	4b7b      	ldr	r3, [pc, #492]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c72:	4a7c      	ldr	r2, [pc, #496]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c74:	589a      	ldr	r2, [r3, r2]
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	685b      	ldr	r3, [r3, #4]
 8013c7a:	2198      	movs	r1, #152	; 0x98
 8013c7c:	5053      	str	r3, [r2, r1]
            break;
 8013c7e:	e110      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013c80:	4b77      	ldr	r3, [pc, #476]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c82:	4a78      	ldr	r2, [pc, #480]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c84:	589a      	ldr	r2, [r3, r2]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	219c      	movs	r1, #156	; 0x9c
 8013c8c:	5053      	str	r3, [r2, r1]
            break;
 8013c8e:	e108      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013c90:	4b73      	ldr	r3, [pc, #460]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c92:	4a74      	ldr	r2, [pc, #464]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c94:	589a      	ldr	r2, [r3, r2]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	21a0      	movs	r1, #160	; 0xa0
 8013c9c:	5053      	str	r3, [r2, r1]
            break;
 8013c9e:	e100      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2204      	movs	r2, #4
 8013ca4:	569a      	ldrsb	r2, [r3, r2]
 8013ca6:	2408      	movs	r4, #8
 8013ca8:	193b      	adds	r3, r7, r4
 8013caa:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8013cac:	4b6c      	ldr	r3, [pc, #432]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cae:	4a6d      	ldr	r2, [pc, #436]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cb0:	589b      	ldr	r3, [r3, r2]
 8013cb2:	781b      	ldrb	r3, [r3, #0]
 8013cb4:	1939      	adds	r1, r7, r4
 8013cb6:	2206      	movs	r2, #6
 8013cb8:	0018      	movs	r0, r3
 8013cba:	f002 ff1f 	bl	8016afc <RegionVerify>
 8013cbe:	1e03      	subs	r3, r0, #0
 8013cc0:	d007      	beq.n	8013cd2 <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013cc2:	4b67      	ldr	r3, [pc, #412]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cc4:	4a67      	ldr	r2, [pc, #412]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cc6:	589b      	ldr	r3, [r3, r2]
 8013cc8:	193a      	adds	r2, r7, r4
 8013cca:	7812      	ldrb	r2, [r2, #0]
 8013ccc:	b252      	sxtb	r2, r2
 8013cce:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013cd0:	e0e7      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cd2:	2317      	movs	r3, #23
 8013cd4:	18fb      	adds	r3, r7, r3
 8013cd6:	2203      	movs	r2, #3
 8013cd8:	701a      	strb	r2, [r3, #0]
            break;
 8013cda:	e0e2      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2204      	movs	r2, #4
 8013ce0:	569a      	ldrsb	r2, [r3, r2]
 8013ce2:	2408      	movs	r4, #8
 8013ce4:	193b      	adds	r3, r7, r4
 8013ce6:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013ce8:	4b5d      	ldr	r3, [pc, #372]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cea:	4a5e      	ldr	r2, [pc, #376]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cec:	589b      	ldr	r3, [r3, r2]
 8013cee:	22b8      	movs	r2, #184	; 0xb8
 8013cf0:	5c9a      	ldrb	r2, [r3, r2]
 8013cf2:	193b      	adds	r3, r7, r4
 8013cf4:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013cf6:	4b5a      	ldr	r3, [pc, #360]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cf8:	4a5a      	ldr	r2, [pc, #360]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cfa:	589b      	ldr	r3, [r3, r2]
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	1939      	adds	r1, r7, r4
 8013d00:	2205      	movs	r2, #5
 8013d02:	0018      	movs	r0, r3
 8013d04:	f002 fefa 	bl	8016afc <RegionVerify>
 8013d08:	1e03      	subs	r3, r0, #0
 8013d0a:	d008      	beq.n	8013d1e <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013d0c:	4b54      	ldr	r3, [pc, #336]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d0e:	4a55      	ldr	r2, [pc, #340]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d10:	589b      	ldr	r3, [r3, r2]
 8013d12:	193a      	adds	r2, r7, r4
 8013d14:	2100      	movs	r1, #0
 8013d16:	5651      	ldrsb	r1, [r2, r1]
 8013d18:	2285      	movs	r2, #133	; 0x85
 8013d1a:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d1c:	e0c1      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d1e:	2317      	movs	r3, #23
 8013d20:	18fb      	adds	r3, r7, r3
 8013d22:	2203      	movs	r2, #3
 8013d24:	701a      	strb	r2, [r3, #0]
            break;
 8013d26:	e0bc      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2204      	movs	r2, #4
 8013d2c:	569a      	ldrsb	r2, [r3, r2]
 8013d2e:	2408      	movs	r4, #8
 8013d30:	193b      	adds	r3, r7, r4
 8013d32:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013d34:	4b4a      	ldr	r3, [pc, #296]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d36:	4a4b      	ldr	r2, [pc, #300]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d38:	589b      	ldr	r3, [r3, r2]
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	1939      	adds	r1, r7, r4
 8013d3e:	220a      	movs	r2, #10
 8013d40:	0018      	movs	r0, r3
 8013d42:	f002 fedb 	bl	8016afc <RegionVerify>
 8013d46:	1e03      	subs	r3, r0, #0
 8013d48:	d007      	beq.n	8013d5a <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8013d4a:	4b45      	ldr	r3, [pc, #276]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d4c:	4a45      	ldr	r2, [pc, #276]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d4e:	589b      	ldr	r3, [r3, r2]
 8013d50:	193a      	adds	r2, r7, r4
 8013d52:	7812      	ldrb	r2, [r2, #0]
 8013d54:	b252      	sxtb	r2, r2
 8013d56:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d58:	e0a3      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d5a:	2317      	movs	r3, #23
 8013d5c:	18fb      	adds	r3, r7, r3
 8013d5e:	2203      	movs	r2, #3
 8013d60:	701a      	strb	r2, [r3, #0]
            break;
 8013d62:	e09e      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2204      	movs	r2, #4
 8013d68:	569a      	ldrsb	r2, [r3, r2]
 8013d6a:	2408      	movs	r4, #8
 8013d6c:	193b      	adds	r3, r7, r4
 8013d6e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8013d70:	4b3b      	ldr	r3, [pc, #236]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d72:	4a3c      	ldr	r2, [pc, #240]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d74:	589b      	ldr	r3, [r3, r2]
 8013d76:	781b      	ldrb	r3, [r3, #0]
 8013d78:	1939      	adds	r1, r7, r4
 8013d7a:	2209      	movs	r2, #9
 8013d7c:	0018      	movs	r0, r3
 8013d7e:	f002 febd 	bl	8016afc <RegionVerify>
 8013d82:	1e03      	subs	r3, r0, #0
 8013d84:	d008      	beq.n	8013d98 <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8013d86:	4b36      	ldr	r3, [pc, #216]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d88:	4a36      	ldr	r2, [pc, #216]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d8a:	589b      	ldr	r3, [r3, r2]
 8013d8c:	193a      	adds	r2, r7, r4
 8013d8e:	2100      	movs	r1, #0
 8013d90:	5651      	ldrsb	r1, [r2, r1]
 8013d92:	2284      	movs	r2, #132	; 0x84
 8013d94:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d96:	e084      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d98:	2317      	movs	r3, #23
 8013d9a:	18fb      	adds	r3, r7, r3
 8013d9c:	2203      	movs	r2, #3
 8013d9e:	701a      	strb	r2, [r3, #0]
            break;
 8013da0:	e07f      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013da2:	4b2f      	ldr	r3, [pc, #188]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013da4:	4a2f      	ldr	r2, [pc, #188]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013da6:	589b      	ldr	r3, [r3, r2]
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	6852      	ldr	r2, [r2, #4]
 8013dac:	609a      	str	r2, [r3, #8]
 8013dae:	4a2c      	ldr	r2, [pc, #176]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013db0:	492c      	ldr	r1, [pc, #176]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013db2:	5852      	ldr	r2, [r2, r1]
 8013db4:	689b      	ldr	r3, [r3, #8]
 8013db6:	2188      	movs	r1, #136	; 0x88
 8013db8:	5053      	str	r3, [r2, r1]
            break;
 8013dba:	e072      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013dbc:	4b28      	ldr	r3, [pc, #160]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013dbe:	4a29      	ldr	r2, [pc, #164]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013dc0:	589b      	ldr	r3, [r3, r2]
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	7912      	ldrb	r2, [r2, #4]
 8013dc6:	731a      	strb	r2, [r3, #12]
 8013dc8:	4a25      	ldr	r2, [pc, #148]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013dca:	4926      	ldr	r1, [pc, #152]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013dcc:	5852      	ldr	r2, [r2, r1]
 8013dce:	7b19      	ldrb	r1, [r3, #12]
 8013dd0:	238c      	movs	r3, #140	; 0x8c
 8013dd2:	54d1      	strb	r1, [r2, r3]
            break;
 8013dd4:	e065      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013dd6:	4b22      	ldr	r3, [pc, #136]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013dd8:	4a22      	ldr	r2, [pc, #136]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013dda:	589a      	ldr	r2, [r3, r2]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	21c0      	movs	r1, #192	; 0xc0
 8013de2:	5053      	str	r3, [r2, r1]
            break;
 8013de4:	e05d      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013de6:	4b1e      	ldr	r3, [pc, #120]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013de8:	4a1e      	ldr	r2, [pc, #120]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013dea:	589b      	ldr	r3, [r3, r2]
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	6852      	ldr	r2, [r2, #4]
 8013df0:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 8013df2:	e056      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d009      	beq.n	8013e10 <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	2217      	movs	r2, #23
 8013e02:	18bc      	adds	r4, r7, r2
 8013e04:	0018      	movs	r0, r3
 8013e06:	f7fe fc1b 	bl	8012640 <RestoreCtxs>
 8013e0a:	0003      	movs	r3, r0
 8013e0c:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e0e:	e048      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e10:	2317      	movs	r3, #23
 8013e12:	18fb      	adds	r3, r7, r3
 8013e14:	2203      	movs	r2, #3
 8013e16:	701a      	strb	r2, [r3, #0]
            break;
 8013e18:	e043      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	799b      	ldrb	r3, [r3, #6]
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d810      	bhi.n	8013e44 <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8013e22:	4b0f      	ldr	r3, [pc, #60]	; (8013e60 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e24:	4a0f      	ldr	r2, [pc, #60]	; (8013e64 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e26:	5899      	ldr	r1, [r3, r2]
 8013e28:	23b0      	movs	r3, #176	; 0xb0
 8013e2a:	005a      	lsls	r2, r3, #1
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	0018      	movs	r0, r3
 8013e38:	f001 fe3a 	bl	8015ab0 <LoRaMacCryptoSetLrWanVersion>
 8013e3c:	1e03      	subs	r3, r0, #0
 8013e3e:	d02f      	beq.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013e40:	2311      	movs	r3, #17
 8013e42:	e035      	b.n	8013eb0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e44:	2317      	movs	r3, #23
 8013e46:	18fb      	adds	r3, r7, r3
 8013e48:	2203      	movs	r2, #3
 8013e4a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013e4c:	e028      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013e4e:	2317      	movs	r3, #23
 8013e50:	18fc      	adds	r4, r7, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	0018      	movs	r0, r3
 8013e56:	f000 fc8f 	bl	8014778 <LoRaMacMibClassBSetRequestConfirm>
 8013e5a:	0003      	movs	r3, r0
 8013e5c:	7023      	strb	r3, [r4, #0]
            break;
 8013e5e:	e020      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
 8013e60:	2000054c 	.word	0x2000054c
 8013e64:	00000484 	.word	0x00000484
 8013e68:	0801f0bc 	.word	0x0801f0bc
            break;
 8013e6c:	46c0      	nop			; (mov r8, r8)
 8013e6e:	e018      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e70:	46c0      	nop			; (mov r8, r8)
 8013e72:	e016      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e74:	46c0      	nop			; (mov r8, r8)
 8013e76:	e014      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e78:	46c0      	nop			; (mov r8, r8)
 8013e7a:	e012      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e7c:	46c0      	nop			; (mov r8, r8)
 8013e7e:	e010      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e80:	46c0      	nop			; (mov r8, r8)
 8013e82:	e00e      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e84:	46c0      	nop			; (mov r8, r8)
 8013e86:	e00c      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e88:	46c0      	nop			; (mov r8, r8)
 8013e8a:	e00a      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e8c:	46c0      	nop			; (mov r8, r8)
 8013e8e:	e008      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e90:	46c0      	nop			; (mov r8, r8)
 8013e92:	e006      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e94:	46c0      	nop			; (mov r8, r8)
 8013e96:	e004      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e98:	46c0      	nop			; (mov r8, r8)
 8013e9a:	e002      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e9c:	46c0      	nop			; (mov r8, r8)
 8013e9e:	e000      	b.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013ea0:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 8013ea2:	f7fe fe19 	bl	8012ad8 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8013ea6:	f7fe fe0f 	bl	8012ac8 <EventMacNvmCtxChanged>
    return status;
 8013eaa:	2317      	movs	r3, #23
 8013eac:	18fb      	adds	r3, r7, r3
 8013eae:	781b      	ldrb	r3, [r3, #0]
}
 8013eb0:	0018      	movs	r0, r3
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	b007      	add	sp, #28
 8013eb6:	bd90      	pop	{r4, r7, pc}

08013eb8 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013eb8:	b5b0      	push	{r4, r5, r7, lr}
 8013eba:	b086      	sub	sp, #24
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013ec0:	2317      	movs	r3, #23
 8013ec2:	18fb      	adds	r3, r7, r3
 8013ec4:	2202      	movs	r2, #2
 8013ec6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013ec8:	230c      	movs	r3, #12
 8013eca:	18fb      	adds	r3, r7, r3
 8013ecc:	2200      	movs	r2, #0
 8013ece:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d101      	bne.n	8013eda <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ed6:	2303      	movs	r3, #3
 8013ed8:	e133      	b.n	8014142 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 8013eda:	f7fe fe49 	bl	8012b70 <LoRaMacIsBusy>
 8013ede:	1e03      	subs	r3, r0, #0
 8013ee0:	d001      	beq.n	8013ee6 <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	e12d      	b.n	8014142 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013ee6:	f001 fa0b 	bl	8015300 <LoRaMacConfirmQueueIsFull>
 8013eea:	1e03      	subs	r3, r0, #0
 8013eec:	d001      	beq.n	8013ef2 <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e127      	b.n	8014142 <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013ef2:	f001 f9fb 	bl	80152ec <LoRaMacConfirmQueueGetCnt>
 8013ef6:	1e03      	subs	r3, r0, #0
 8013ef8:	d105      	bne.n	8013f06 <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013efa:	4b94      	ldr	r3, [pc, #592]	; (801414c <LoRaMacMlmeRequest+0x294>)
 8013efc:	2214      	movs	r2, #20
 8013efe:	2100      	movs	r1, #0
 8013f00:	0018      	movs	r0, r3
 8013f02:	f005 fa51 	bl	80193a8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013f06:	4b92      	ldr	r3, [pc, #584]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 8013f08:	4a92      	ldr	r2, [pc, #584]	; (8014154 <LoRaMacMlmeRequest+0x29c>)
 8013f0a:	2101      	movs	r1, #1
 8013f0c:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013f0e:	4b90      	ldr	r3, [pc, #576]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 8013f10:	4a91      	ldr	r2, [pc, #580]	; (8014158 <LoRaMacMlmeRequest+0x2a0>)
 8013f12:	5c99      	ldrb	r1, [r3, r2]
 8013f14:	2004      	movs	r0, #4
 8013f16:	4301      	orrs	r1, r0
 8013f18:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	781a      	ldrb	r2, [r3, #0]
 8013f1e:	2110      	movs	r1, #16
 8013f20:	187b      	adds	r3, r7, r1
 8013f22:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013f24:	187b      	adds	r3, r7, r1
 8013f26:	2201      	movs	r2, #1
 8013f28:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8013f2a:	187b      	adds	r3, r7, r1
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	2b0e      	cmp	r3, #14
 8013f36:	d900      	bls.n	8013f3a <LoRaMacMlmeRequest+0x82>
 8013f38:	e0d4      	b.n	80140e4 <LoRaMacMlmeRequest+0x22c>
 8013f3a:	009a      	lsls	r2, r3, #2
 8013f3c:	4b87      	ldr	r3, [pc, #540]	; (801415c <LoRaMacMlmeRequest+0x2a4>)
 8013f3e:	18d3      	adds	r3, r2, r3
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013f44:	4a82      	ldr	r2, [pc, #520]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 8013f46:	23d0      	movs	r3, #208	; 0xd0
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	58d3      	ldr	r3, [r2, r3]
 8013f4c:	2220      	movs	r2, #32
 8013f4e:	4013      	ands	r3, r2
 8013f50:	d001      	beq.n	8013f56 <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 8013f52:	2301      	movs	r3, #1
 8013f54:	e0f5      	b.n	8014142 <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 8013f56:	f7fd feff 	bl	8011d58 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013f5a:	4b7d      	ldr	r3, [pc, #500]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 8013f5c:	4a80      	ldr	r2, [pc, #512]	; (8014160 <LoRaMacMlmeRequest+0x2a8>)
 8013f5e:	589b      	ldr	r3, [r3, r2]
 8013f60:	7818      	ldrb	r0, [r3, #0]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	791b      	ldrb	r3, [r3, #4]
 8013f66:	b259      	sxtb	r1, r3
 8013f68:	4b79      	ldr	r3, [pc, #484]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 8013f6a:	4a7d      	ldr	r2, [pc, #500]	; (8014160 <LoRaMacMlmeRequest+0x2a8>)
 8013f6c:	589c      	ldr	r4, [r3, r2]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f002 fedb 	bl	8016d2a <RegionAlternateDr>
 8013f74:	0003      	movs	r3, r0
 8013f76:	001a      	movs	r2, r3
 8013f78:	2385      	movs	r3, #133	; 0x85
 8013f7a:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013f7c:	2310      	movs	r3, #16
 8013f7e:	18fb      	adds	r3, r7, r3
 8013f80:	2207      	movs	r2, #7
 8013f82:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 8013f84:	2517      	movs	r5, #23
 8013f86:	197c      	adds	r4, r7, r5
 8013f88:	20ff      	movs	r0, #255	; 0xff
 8013f8a:	f7fd fbab 	bl	80116e4 <SendReJoinReq>
 8013f8e:	0003      	movs	r3, r0
 8013f90:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 8013f92:	197b      	adds	r3, r7, r5
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d100      	bne.n	8013f9c <LoRaMacMlmeRequest+0xe4>
 8013f9a:	e0a5      	b.n	80140e8 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013f9c:	4b6c      	ldr	r3, [pc, #432]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 8013f9e:	4a70      	ldr	r2, [pc, #448]	; (8014160 <LoRaMacMlmeRequest+0x2a8>)
 8013fa0:	589b      	ldr	r3, [r3, r2]
 8013fa2:	7818      	ldrb	r0, [r3, #0]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	791b      	ldrb	r3, [r3, #4]
 8013fa8:	b259      	sxtb	r1, r3
 8013faa:	4b69      	ldr	r3, [pc, #420]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 8013fac:	4a6c      	ldr	r2, [pc, #432]	; (8014160 <LoRaMacMlmeRequest+0x2a8>)
 8013fae:	589c      	ldr	r4, [r3, r2]
 8013fb0:	2201      	movs	r2, #1
 8013fb2:	f002 feba 	bl	8016d2a <RegionAlternateDr>
 8013fb6:	0003      	movs	r3, r0
 8013fb8:	001a      	movs	r2, r3
 8013fba:	2385      	movs	r3, #133	; 0x85
 8013fbc:	54e2      	strb	r2, [r4, r3]
            }
            break;
 8013fbe:	e093      	b.n	80140e8 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013fc0:	2417      	movs	r4, #23
 8013fc2:	193b      	adds	r3, r7, r4
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013fc8:	230c      	movs	r3, #12
 8013fca:	18fb      	adds	r3, r7, r3
 8013fcc:	2200      	movs	r2, #0
 8013fce:	0019      	movs	r1, r3
 8013fd0:	2002      	movs	r0, #2
 8013fd2:	f000 fd7d 	bl	8014ad0 <LoRaMacCommandsAddCmd>
 8013fd6:	1e03      	subs	r3, r0, #0
 8013fd8:	d100      	bne.n	8013fdc <LoRaMacMlmeRequest+0x124>
 8013fda:	e087      	b.n	80140ec <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013fdc:	193b      	adds	r3, r7, r4
 8013fde:	2213      	movs	r2, #19
 8013fe0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013fe2:	e083      	b.n	80140ec <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	889b      	ldrh	r3, [r3, #4]
 8013fe8:	2217      	movs	r2, #23
 8013fea:	18bc      	adds	r4, r7, r2
 8013fec:	0018      	movs	r0, r3
 8013fee:	f7fe fa5d 	bl	80124ac <SetTxContinuousWave>
 8013ff2:	0003      	movs	r3, r0
 8013ff4:	7023      	strb	r3, [r4, #0]
            break;
 8013ff6:	e080      	b.n	80140fa <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	8898      	ldrh	r0, [r3, #4]
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6899      	ldr	r1, [r3, #8]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	7b1b      	ldrb	r3, [r3, #12]
 8014004:	2217      	movs	r2, #23
 8014006:	18bc      	adds	r4, r7, r2
 8014008:	001a      	movs	r2, r3
 801400a:	f7fe fa9b 	bl	8012544 <SetTxContinuousWave1>
 801400e:	0003      	movs	r3, r0
 8014010:	7023      	strb	r3, [r4, #0]
            break;
 8014012:	e072      	b.n	80140fa <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014014:	2417      	movs	r4, #23
 8014016:	193b      	adds	r3, r7, r4
 8014018:	2200      	movs	r2, #0
 801401a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801401c:	230c      	movs	r3, #12
 801401e:	18fb      	adds	r3, r7, r3
 8014020:	2200      	movs	r2, #0
 8014022:	0019      	movs	r1, r3
 8014024:	200d      	movs	r0, #13
 8014026:	f000 fd53 	bl	8014ad0 <LoRaMacCommandsAddCmd>
 801402a:	1e03      	subs	r3, r0, #0
 801402c:	d060      	beq.n	80140f0 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801402e:	193b      	adds	r3, r7, r4
 8014030:	2213      	movs	r2, #19
 8014032:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014034:	e05c      	b.n	80140f0 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8014036:	4b46      	ldr	r3, [pc, #280]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 8014038:	4a49      	ldr	r2, [pc, #292]	; (8014160 <LoRaMacMlmeRequest+0x2a8>)
 801403a:	589b      	ldr	r3, [r3, r2]
 801403c:	227c      	movs	r2, #124	; 0x7c
 801403e:	5c9b      	ldrb	r3, [r3, r2]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d157      	bne.n	80140f4 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014044:	2416      	movs	r4, #22
 8014046:	193b      	adds	r3, r7, r4
 8014048:	687a      	ldr	r2, [r7, #4]
 801404a:	7912      	ldrb	r2, [r2, #4]
 801404c:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	791b      	ldrb	r3, [r3, #4]
 8014052:	075b      	lsls	r3, r3, #29
 8014054:	0f5b      	lsrs	r3, r3, #29
 8014056:	b2db      	uxtb	r3, r3
 8014058:	0018      	movs	r0, r3
 801405a:	f000 fb65 	bl	8014728 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801405e:	210c      	movs	r1, #12
 8014060:	187b      	adds	r3, r7, r1
 8014062:	193a      	adds	r2, r7, r4
 8014064:	7812      	ldrb	r2, [r2, #0]
 8014066:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8014068:	2417      	movs	r4, #23
 801406a:	193b      	adds	r3, r7, r4
 801406c:	2200      	movs	r2, #0
 801406e:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014070:	187b      	adds	r3, r7, r1
 8014072:	2201      	movs	r2, #1
 8014074:	0019      	movs	r1, r3
 8014076:	2010      	movs	r0, #16
 8014078:	f000 fd2a 	bl	8014ad0 <LoRaMacCommandsAddCmd>
 801407c:	1e03      	subs	r3, r0, #0
 801407e:	d039      	beq.n	80140f4 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014080:	193b      	adds	r3, r7, r4
 8014082:	2213      	movs	r2, #19
 8014084:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8014086:	e035      	b.n	80140f4 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014088:	2417      	movs	r4, #23
 801408a:	193b      	adds	r3, r7, r4
 801408c:	2200      	movs	r2, #0
 801408e:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014090:	230c      	movs	r3, #12
 8014092:	18fb      	adds	r3, r7, r3
 8014094:	2200      	movs	r2, #0
 8014096:	0019      	movs	r1, r3
 8014098:	2012      	movs	r0, #18
 801409a:	f000 fd19 	bl	8014ad0 <LoRaMacCommandsAddCmd>
 801409e:	1e03      	subs	r3, r0, #0
 80140a0:	d02a      	beq.n	80140f8 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80140a2:	193b      	adds	r3, r7, r4
 80140a4:	2213      	movs	r2, #19
 80140a6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80140a8:	e026      	b.n	80140f8 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80140aa:	2310      	movs	r3, #16
 80140ac:	18fb      	adds	r3, r7, r3
 80140ae:	2201      	movs	r2, #1
 80140b0:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80140b2:	f000 faf7 	bl	80146a4 <LoRaMacClassBIsAcquisitionInProgress>
 80140b6:	0003      	movs	r3, r0
 80140b8:	001a      	movs	r2, r3
 80140ba:	2301      	movs	r3, #1
 80140bc:	4053      	eors	r3, r2
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d00a      	beq.n	80140da <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80140c4:	2000      	movs	r0, #0
 80140c6:	f000 facf 	bl	8014668 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80140ca:	2000      	movs	r0, #0
 80140cc:	f000 faf0 	bl	80146b0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80140d0:	2317      	movs	r3, #23
 80140d2:	18fb      	adds	r3, r7, r3
 80140d4:	2200      	movs	r2, #0
 80140d6:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80140d8:	e00f      	b.n	80140fa <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 80140da:	2317      	movs	r3, #23
 80140dc:	18fb      	adds	r3, r7, r3
 80140de:	2201      	movs	r2, #1
 80140e0:	701a      	strb	r2, [r3, #0]
            break;
 80140e2:	e00a      	b.n	80140fa <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 80140e4:	46c0      	nop			; (mov r8, r8)
 80140e6:	e008      	b.n	80140fa <LoRaMacMlmeRequest+0x242>
            break;
 80140e8:	46c0      	nop			; (mov r8, r8)
 80140ea:	e006      	b.n	80140fa <LoRaMacMlmeRequest+0x242>
            break;
 80140ec:	46c0      	nop			; (mov r8, r8)
 80140ee:	e004      	b.n	80140fa <LoRaMacMlmeRequest+0x242>
            break;
 80140f0:	46c0      	nop			; (mov r8, r8)
 80140f2:	e002      	b.n	80140fa <LoRaMacMlmeRequest+0x242>
            break;
 80140f4:	46c0      	nop			; (mov r8, r8)
 80140f6:	e000      	b.n	80140fa <LoRaMacMlmeRequest+0x242>
            break;
 80140f8:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80140fa:	4a15      	ldr	r2, [pc, #84]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 80140fc:	2391      	movs	r3, #145	; 0x91
 80140fe:	00db      	lsls	r3, r3, #3
 8014100:	58d2      	ldr	r2, [r2, r3]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014106:	2317      	movs	r3, #23
 8014108:	18fb      	adds	r3, r7, r3
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d00e      	beq.n	801412e <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014110:	f001 f8ec 	bl	80152ec <LoRaMacConfirmQueueGetCnt>
 8014114:	1e03      	subs	r3, r0, #0
 8014116:	d111      	bne.n	801413c <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 8014118:	4b0d      	ldr	r3, [pc, #52]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 801411a:	4a12      	ldr	r2, [pc, #72]	; (8014164 <LoRaMacMlmeRequest+0x2ac>)
 801411c:	2100      	movs	r1, #0
 801411e:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014120:	4b0b      	ldr	r3, [pc, #44]	; (8014150 <LoRaMacMlmeRequest+0x298>)
 8014122:	4a0d      	ldr	r2, [pc, #52]	; (8014158 <LoRaMacMlmeRequest+0x2a0>)
 8014124:	5c99      	ldrb	r1, [r3, r2]
 8014126:	2004      	movs	r0, #4
 8014128:	4381      	bics	r1, r0
 801412a:	5499      	strb	r1, [r3, r2]
 801412c:	e006      	b.n	801413c <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801412e:	2310      	movs	r3, #16
 8014130:	18fb      	adds	r3, r7, r3
 8014132:	0018      	movs	r0, r3
 8014134:	f000 ff6c 	bl	8015010 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8014138:	f7fe fcc6 	bl	8012ac8 <EventMacNvmCtxChanged>
    }
    return status;
 801413c:	2317      	movs	r3, #23
 801413e:	18fb      	adds	r3, r7, r3
 8014140:	781b      	ldrb	r3, [r3, #0]
}
 8014142:	0018      	movs	r0, r3
 8014144:	46bd      	mov	sp, r7
 8014146:	b006      	add	sp, #24
 8014148:	bdb0      	pop	{r4, r5, r7, pc}
 801414a:	46c0      	nop			; (mov r8, r8)
 801414c:	2000099c 	.word	0x2000099c
 8014150:	2000054c 	.word	0x2000054c
 8014154:	00000451 	.word	0x00000451
 8014158:	00000481 	.word	0x00000481
 801415c:	0801edb4 	.word	0x0801edb4
 8014160:	00000484 	.word	0x00000484
 8014164:	00000414 	.word	0x00000414

08014168 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801416a:	b08d      	sub	sp, #52	; 0x34
 801416c:	af02      	add	r7, sp, #8
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	000a      	movs	r2, r1
 8014172:	1cfb      	adds	r3, r7, #3
 8014174:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014176:	2327      	movs	r3, #39	; 0x27
 8014178:	18fb      	adds	r3, r7, r3
 801417a:	2202      	movs	r2, #2
 801417c:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801417e:	2326      	movs	r3, #38	; 0x26
 8014180:	18fb      	adds	r3, r7, r3
 8014182:	2200      	movs	r2, #0
 8014184:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014186:	231d      	movs	r3, #29
 8014188:	18fb      	adds	r3, r7, r3
 801418a:	2200      	movs	r2, #0
 801418c:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 801418e:	231c      	movs	r3, #28
 8014190:	18fb      	adds	r3, r7, r3
 8014192:	2200      	movs	r2, #0
 8014194:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d101      	bne.n	80141a0 <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801419c:	2303      	movs	r3, #3
 801419e:	e11b      	b.n	80143d8 <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 80141a0:	f7fe fce6 	bl	8012b70 <LoRaMacIsBusy>
 80141a4:	1e03      	subs	r3, r0, #0
 80141a6:	d001      	beq.n	80141ac <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 80141a8:	2301      	movs	r3, #1
 80141aa:	e115      	b.n	80143d8 <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 80141ac:	230c      	movs	r3, #12
 80141ae:	18fb      	adds	r3, r7, r3
 80141b0:	2200      	movs	r2, #0
 80141b2:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80141b4:	4b8a      	ldr	r3, [pc, #552]	; (80143e0 <LoRaMacMcpsRequest+0x278>)
 80141b6:	2214      	movs	r2, #20
 80141b8:	2100      	movs	r1, #0
 80141ba:	0018      	movs	r0, r3
 80141bc:	f005 f8f4 	bl	80193a8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80141c0:	4b88      	ldr	r3, [pc, #544]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 80141c2:	4a89      	ldr	r2, [pc, #548]	; (80143e8 <LoRaMacMcpsRequest+0x280>)
 80141c4:	2101      	movs	r1, #1
 80141c6:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80141c8:	4b86      	ldr	r3, [pc, #536]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 80141ca:	4a88      	ldr	r2, [pc, #544]	; (80143ec <LoRaMacMcpsRequest+0x284>)
 80141cc:	2101      	movs	r1, #1
 80141ce:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	781b      	ldrb	r3, [r3, #0]
 80141d4:	2b03      	cmp	r3, #3
 80141d6:	d056      	beq.n	8014286 <LoRaMacMcpsRequest+0x11e>
 80141d8:	dc72      	bgt.n	80142c0 <LoRaMacMcpsRequest+0x158>
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d002      	beq.n	80141e4 <LoRaMacMcpsRequest+0x7c>
 80141de:	2b01      	cmp	r3, #1
 80141e0:	d024      	beq.n	801422c <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80141e2:	e06d      	b.n	80142c0 <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 80141e4:	231c      	movs	r3, #28
 80141e6:	18fb      	adds	r3, r7, r3
 80141e8:	2201      	movs	r2, #1
 80141ea:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 80141ec:	4b7d      	ldr	r3, [pc, #500]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 80141ee:	4a80      	ldr	r2, [pc, #512]	; (80143f0 <LoRaMacMcpsRequest+0x288>)
 80141f0:	2101      	movs	r1, #1
 80141f2:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80141f4:	230c      	movs	r3, #12
 80141f6:	18fb      	adds	r3, r7, r3
 80141f8:	781a      	ldrb	r2, [r3, #0]
 80141fa:	211f      	movs	r1, #31
 80141fc:	400a      	ands	r2, r1
 80141fe:	1c11      	adds	r1, r2, #0
 8014200:	2240      	movs	r2, #64	; 0x40
 8014202:	430a      	orrs	r2, r1
 8014204:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8014206:	2326      	movs	r3, #38	; 0x26
 8014208:	18fb      	adds	r3, r7, r3
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	7912      	ldrb	r2, [r2, #4]
 801420e:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8014216:	231e      	movs	r3, #30
 8014218:	18fb      	adds	r3, r7, r3
 801421a:	687a      	ldr	r2, [r7, #4]
 801421c:	8992      	ldrh	r2, [r2, #12]
 801421e:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014220:	231d      	movs	r3, #29
 8014222:	18fb      	adds	r3, r7, r3
 8014224:	687a      	ldr	r2, [r7, #4]
 8014226:	7b92      	ldrb	r2, [r2, #14]
 8014228:	701a      	strb	r2, [r3, #0]
            break;
 801422a:	e04a      	b.n	80142c2 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 801422c:	231c      	movs	r3, #28
 801422e:	18fb      	adds	r3, r7, r3
 8014230:	2201      	movs	r2, #1
 8014232:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	7bdb      	ldrb	r3, [r3, #15]
 8014238:	1c1a      	adds	r2, r3, #0
 801423a:	b2d3      	uxtb	r3, r2
 801423c:	2b08      	cmp	r3, #8
 801423e:	d901      	bls.n	8014244 <LoRaMacMcpsRequest+0xdc>
 8014240:	2308      	movs	r3, #8
 8014242:	1c1a      	adds	r2, r3, #0
 8014244:	b2d1      	uxtb	r1, r2
 8014246:	4b67      	ldr	r3, [pc, #412]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 8014248:	4a69      	ldr	r2, [pc, #420]	; (80143f0 <LoRaMacMcpsRequest+0x288>)
 801424a:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801424c:	230c      	movs	r3, #12
 801424e:	18fb      	adds	r3, r7, r3
 8014250:	781a      	ldrb	r2, [r3, #0]
 8014252:	211f      	movs	r1, #31
 8014254:	400a      	ands	r2, r1
 8014256:	1c11      	adds	r1, r2, #0
 8014258:	2280      	movs	r2, #128	; 0x80
 801425a:	4252      	negs	r2, r2
 801425c:	430a      	orrs	r2, r1
 801425e:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8014260:	2326      	movs	r3, #38	; 0x26
 8014262:	18fb      	adds	r3, r7, r3
 8014264:	687a      	ldr	r2, [r7, #4]
 8014266:	7912      	ldrb	r2, [r2, #4]
 8014268:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	689b      	ldr	r3, [r3, #8]
 801426e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014270:	231e      	movs	r3, #30
 8014272:	18fb      	adds	r3, r7, r3
 8014274:	687a      	ldr	r2, [r7, #4]
 8014276:	8992      	ldrh	r2, [r2, #12]
 8014278:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 801427a:	231d      	movs	r3, #29
 801427c:	18fb      	adds	r3, r7, r3
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	7b92      	ldrb	r2, [r2, #14]
 8014282:	701a      	strb	r2, [r3, #0]
            break;
 8014284:	e01d      	b.n	80142c2 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8014286:	231c      	movs	r3, #28
 8014288:	18fb      	adds	r3, r7, r3
 801428a:	2201      	movs	r2, #1
 801428c:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 801428e:	4b55      	ldr	r3, [pc, #340]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 8014290:	4a57      	ldr	r2, [pc, #348]	; (80143f0 <LoRaMacMcpsRequest+0x288>)
 8014292:	2101      	movs	r1, #1
 8014294:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014296:	230c      	movs	r3, #12
 8014298:	18fb      	adds	r3, r7, r3
 801429a:	781a      	ldrb	r2, [r3, #0]
 801429c:	2120      	movs	r1, #32
 801429e:	4249      	negs	r1, r1
 80142a0:	430a      	orrs	r2, r1
 80142a2:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	685b      	ldr	r3, [r3, #4]
 80142a8:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80142aa:	231e      	movs	r3, #30
 80142ac:	18fb      	adds	r3, r7, r3
 80142ae:	687a      	ldr	r2, [r7, #4]
 80142b0:	8912      	ldrh	r2, [r2, #8]
 80142b2:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80142b4:	231d      	movs	r3, #29
 80142b6:	18fb      	adds	r3, r7, r3
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	7a92      	ldrb	r2, [r2, #10]
 80142bc:	701a      	strb	r2, [r3, #0]
            break;
 80142be:	e000      	b.n	80142c2 <LoRaMacMcpsRequest+0x15a>
            break;
 80142c0:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80142c2:	2114      	movs	r1, #20
 80142c4:	187b      	adds	r3, r7, r1
 80142c6:	2202      	movs	r2, #2
 80142c8:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80142ca:	4b46      	ldr	r3, [pc, #280]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 80142cc:	4a49      	ldr	r2, [pc, #292]	; (80143f4 <LoRaMacMcpsRequest+0x28c>)
 80142ce:	589b      	ldr	r3, [r3, r2]
 80142d0:	22b8      	movs	r2, #184	; 0xb8
 80142d2:	5c9a      	ldrb	r2, [r3, r2]
 80142d4:	187b      	adds	r3, r7, r1
 80142d6:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80142d8:	4b42      	ldr	r3, [pc, #264]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 80142da:	4a46      	ldr	r2, [pc, #280]	; (80143f4 <LoRaMacMcpsRequest+0x28c>)
 80142dc:	589b      	ldr	r3, [r3, r2]
 80142de:	781b      	ldrb	r3, [r3, #0]
 80142e0:	187a      	adds	r2, r7, r1
 80142e2:	0011      	movs	r1, r2
 80142e4:	0018      	movs	r0, r3
 80142e6:	f002 fba2 	bl	8016a2e <RegionGetPhyParam>
 80142ea:	0003      	movs	r3, r0
 80142ec:	001a      	movs	r2, r3
 80142ee:	2110      	movs	r1, #16
 80142f0:	187b      	adds	r3, r7, r1
 80142f2:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80142f4:	187b      	adds	r3, r7, r1
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	b259      	sxtb	r1, r3
 80142fa:	231d      	movs	r3, #29
 80142fc:	18fa      	adds	r2, r7, r3
 80142fe:	18fb      	adds	r3, r7, r3
 8014300:	1c0c      	adds	r4, r1, #0
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	b258      	sxtb	r0, r3
 8014306:	b261      	sxtb	r1, r4
 8014308:	4288      	cmp	r0, r1
 801430a:	da00      	bge.n	801430e <LoRaMacMcpsRequest+0x1a6>
 801430c:	1c23      	adds	r3, r4, #0
 801430e:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8014310:	231c      	movs	r3, #28
 8014312:	18fb      	adds	r3, r7, r3
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d055      	beq.n	80143c6 <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 801431a:	4b32      	ldr	r3, [pc, #200]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 801431c:	4a35      	ldr	r2, [pc, #212]	; (80143f4 <LoRaMacMcpsRequest+0x28c>)
 801431e:	589b      	ldr	r3, [r3, r2]
 8014320:	227e      	movs	r2, #126	; 0x7e
 8014322:	5c9b      	ldrb	r3, [r3, r2]
 8014324:	2201      	movs	r2, #1
 8014326:	4053      	eors	r3, r2
 8014328:	b2db      	uxtb	r3, r3
 801432a:	2b00      	cmp	r3, #0
 801432c:	d022      	beq.n	8014374 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 801432e:	2408      	movs	r4, #8
 8014330:	193b      	adds	r3, r7, r4
 8014332:	221d      	movs	r2, #29
 8014334:	18ba      	adds	r2, r7, r2
 8014336:	7812      	ldrb	r2, [r2, #0]
 8014338:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801433a:	4b2a      	ldr	r3, [pc, #168]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 801433c:	4a2d      	ldr	r2, [pc, #180]	; (80143f4 <LoRaMacMcpsRequest+0x28c>)
 801433e:	589b      	ldr	r3, [r3, r2]
 8014340:	22b8      	movs	r2, #184	; 0xb8
 8014342:	5c9a      	ldrb	r2, [r3, r2]
 8014344:	193b      	adds	r3, r7, r4
 8014346:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8014348:	4b26      	ldr	r3, [pc, #152]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 801434a:	4a2a      	ldr	r2, [pc, #168]	; (80143f4 <LoRaMacMcpsRequest+0x28c>)
 801434c:	589b      	ldr	r3, [r3, r2]
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	1939      	adds	r1, r7, r4
 8014352:	2205      	movs	r2, #5
 8014354:	0018      	movs	r0, r3
 8014356:	f002 fbd1 	bl	8016afc <RegionVerify>
 801435a:	1e03      	subs	r3, r0, #0
 801435c:	d008      	beq.n	8014370 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 801435e:	4b21      	ldr	r3, [pc, #132]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 8014360:	4a24      	ldr	r2, [pc, #144]	; (80143f4 <LoRaMacMcpsRequest+0x28c>)
 8014362:	589b      	ldr	r3, [r3, r2]
 8014364:	193a      	adds	r2, r7, r4
 8014366:	2100      	movs	r1, #0
 8014368:	5651      	ldrsb	r1, [r2, r1]
 801436a:	2285      	movs	r2, #133	; 0x85
 801436c:	5499      	strb	r1, [r3, r2]
 801436e:	e001      	b.n	8014374 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014370:	2303      	movs	r3, #3
 8014372:	e031      	b.n	80143d8 <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014374:	2627      	movs	r6, #39	; 0x27
 8014376:	19bc      	adds	r4, r7, r6
 8014378:	231e      	movs	r3, #30
 801437a:	18fb      	adds	r3, r7, r3
 801437c:	881d      	ldrh	r5, [r3, #0]
 801437e:	6a3a      	ldr	r2, [r7, #32]
 8014380:	2326      	movs	r3, #38	; 0x26
 8014382:	18fb      	adds	r3, r7, r3
 8014384:	7819      	ldrb	r1, [r3, #0]
 8014386:	230c      	movs	r3, #12
 8014388:	18f8      	adds	r0, r7, r3
 801438a:	1cfb      	adds	r3, r7, #3
 801438c:	781b      	ldrb	r3, [r3, #0]
 801438e:	9300      	str	r3, [sp, #0]
 8014390:	002b      	movs	r3, r5
 8014392:	f7fd f86d 	bl	8011470 <Send>
 8014396:	0003      	movs	r3, r0
 8014398:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 801439a:	19bb      	adds	r3, r7, r6
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d10d      	bne.n	80143be <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	7819      	ldrb	r1, [r3, #0]
 80143a6:	4b0f      	ldr	r3, [pc, #60]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 80143a8:	4a13      	ldr	r2, [pc, #76]	; (80143f8 <LoRaMacMcpsRequest+0x290>)
 80143aa:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80143ac:	4b0d      	ldr	r3, [pc, #52]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 80143ae:	4a13      	ldr	r2, [pc, #76]	; (80143fc <LoRaMacMcpsRequest+0x294>)
 80143b0:	5c99      	ldrb	r1, [r3, r2]
 80143b2:	2001      	movs	r0, #1
 80143b4:	4301      	orrs	r1, r0
 80143b6:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 80143b8:	f7fe fb86 	bl	8012ac8 <EventMacNvmCtxChanged>
 80143bc:	e003      	b.n	80143c6 <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80143be:	4b09      	ldr	r3, [pc, #36]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 80143c0:	4a0f      	ldr	r2, [pc, #60]	; (8014400 <LoRaMacMcpsRequest+0x298>)
 80143c2:	2100      	movs	r1, #0
 80143c4:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80143c6:	4a07      	ldr	r2, [pc, #28]	; (80143e4 <LoRaMacMcpsRequest+0x27c>)
 80143c8:	2391      	movs	r3, #145	; 0x91
 80143ca:	00db      	lsls	r3, r3, #3
 80143cc:	58d2      	ldr	r2, [r2, r3]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	611a      	str	r2, [r3, #16]

    return status;
 80143d2:	2327      	movs	r3, #39	; 0x27
 80143d4:	18fb      	adds	r3, r7, r3
 80143d6:	781b      	ldrb	r3, [r3, #0]
}
 80143d8:	0018      	movs	r0, r3
 80143da:	46bd      	mov	sp, r7
 80143dc:	b00b      	add	sp, #44	; 0x2c
 80143de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143e0:	20000988 	.word	0x20000988
 80143e4:	2000054c 	.word	0x2000054c
 80143e8:	0000043d 	.word	0x0000043d
 80143ec:	00000412 	.word	0x00000412
 80143f0:	00000411 	.word	0x00000411
 80143f4:	00000484 	.word	0x00000484
 80143f8:	0000043c 	.word	0x0000043c
 80143fc:	00000481 	.word	0x00000481
 8014400:	00000414 	.word	0x00000414

08014404 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b084      	sub	sp, #16
 8014408:	af00      	add	r7, sp, #0
 801440a:	0002      	movs	r2, r0
 801440c:	1dfb      	adds	r3, r7, #7
 801440e:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8014410:	210c      	movs	r1, #12
 8014412:	187b      	adds	r3, r7, r1
 8014414:	1dfa      	adds	r2, r7, #7
 8014416:	7812      	ldrb	r2, [r2, #0]
 8014418:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 801441a:	4b0b      	ldr	r3, [pc, #44]	; (8014448 <LoRaMacTestSetDutyCycleOn+0x44>)
 801441c:	4a0b      	ldr	r2, [pc, #44]	; (801444c <LoRaMacTestSetDutyCycleOn+0x48>)
 801441e:	589b      	ldr	r3, [r3, r2]
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	1879      	adds	r1, r7, r1
 8014424:	220f      	movs	r2, #15
 8014426:	0018      	movs	r0, r3
 8014428:	f002 fb68 	bl	8016afc <RegionVerify>
 801442c:	1e03      	subs	r3, r0, #0
 801442e:	d006      	beq.n	801443e <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8014430:	4b05      	ldr	r3, [pc, #20]	; (8014448 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014432:	4a06      	ldr	r2, [pc, #24]	; (801444c <LoRaMacTestSetDutyCycleOn+0x48>)
 8014434:	589b      	ldr	r3, [r3, r2]
 8014436:	1dfa      	adds	r2, r7, #7
 8014438:	21c9      	movs	r1, #201	; 0xc9
 801443a:	7812      	ldrb	r2, [r2, #0]
 801443c:	545a      	strb	r2, [r3, r1]
    }
}
 801443e:	46c0      	nop			; (mov r8, r8)
 8014440:	46bd      	mov	sp, r7
 8014442:	b004      	add	sp, #16
 8014444:	bd80      	pop	{r7, pc}
 8014446:	46c0      	nop			; (mov r8, r8)
 8014448:	2000054c 	.word	0x2000054c
 801444c:	00000484 	.word	0x00000484

08014450 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014452:	b08b      	sub	sp, #44	; 0x2c
 8014454:	af00      	add	r7, sp, #0
 8014456:	60f8      	str	r0, [r7, #12]
 8014458:	60b9      	str	r1, [r7, #8]
 801445a:	607a      	str	r2, [r7, #4]
 801445c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801445e:	2327      	movs	r3, #39	; 0x27
 8014460:	18fb      	adds	r3, r7, r3
 8014462:	2200      	movs	r2, #0
 8014464:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8014466:	2426      	movs	r4, #38	; 0x26
 8014468:	193b      	adds	r3, r7, r4
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	7c12      	ldrb	r2, [r2, #16]
 801446e:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8014470:	2325      	movs	r3, #37	; 0x25
 8014472:	18fb      	adds	r3, r7, r3
 8014474:	68fa      	ldr	r2, [r7, #12]
 8014476:	7c52      	ldrb	r2, [r2, #17]
 8014478:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	689a      	ldr	r2, [r3, #8]
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	795b      	ldrb	r3, [r3, #5]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d100      	bne.n	801448c <CalcNextV10X+0x3c>
 801448a:	e0a5      	b.n	80145d8 <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801448c:	211c      	movs	r1, #28
 801448e:	187b      	adds	r3, r7, r1
 8014490:	2202      	movs	r2, #2
 8014492:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	7c9a      	ldrb	r2, [r3, #18]
 8014498:	187b      	adds	r3, r7, r1
 801449a:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	7cdb      	ldrb	r3, [r3, #19]
 80144a0:	187a      	adds	r2, r7, r1
 80144a2:	0011      	movs	r1, r2
 80144a4:	0018      	movs	r0, r3
 80144a6:	f002 fac2 	bl	8016a2e <RegionGetPhyParam>
 80144aa:	0003      	movs	r3, r0
 80144ac:	001a      	movs	r2, r3
 80144ae:	2118      	movs	r1, #24
 80144b0:	187b      	adds	r3, r7, r1
 80144b2:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 80144b4:	187b      	adds	r3, r7, r1
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	2124      	movs	r1, #36	; 0x24
 80144ba:	187b      	adds	r3, r7, r1
 80144bc:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 80144be:	193a      	adds	r2, r7, r4
 80144c0:	187b      	adds	r3, r7, r1
 80144c2:	1939      	adds	r1, r7, r4
 80144c4:	780c      	ldrb	r4, [r1, #0]
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	b258      	sxtb	r0, r3
 80144ca:	b261      	sxtb	r1, r4
 80144cc:	4288      	cmp	r0, r1
 80144ce:	da00      	bge.n	80144d2 <CalcNextV10X+0x82>
 80144d0:	1c23      	adds	r3, r4, #0
 80144d2:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 80144d4:	2326      	movs	r3, #38	; 0x26
 80144d6:	18fa      	adds	r2, r7, r3
 80144d8:	2324      	movs	r3, #36	; 0x24
 80144da:	18fb      	adds	r3, r7, r3
 80144dc:	7812      	ldrb	r2, [r2, #0]
 80144de:	b252      	sxtb	r2, r2
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	b25b      	sxtb	r3, r3
 80144e4:	429a      	cmp	r2, r3
 80144e6:	d107      	bne.n	80144f8 <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	2200      	movs	r2, #0
 80144ec:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80144ee:	2327      	movs	r3, #39	; 0x27
 80144f0:	18fb      	adds	r3, r7, r3
 80144f2:	2200      	movs	r2, #0
 80144f4:	701a      	strb	r2, [r3, #0]
 80144f6:	e06f      	b.n	80145d8 <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	689b      	ldr	r3, [r3, #8]
 80144fc:	68fa      	ldr	r2, [r7, #12]
 80144fe:	8992      	ldrh	r2, [r2, #12]
 8014500:	4293      	cmp	r3, r2
 8014502:	d304      	bcc.n	801450e <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 8014504:	2327      	movs	r3, #39	; 0x27
 8014506:	18fb      	adds	r3, r7, r3
 8014508:	2201      	movs	r2, #1
 801450a:	701a      	strb	r2, [r3, #0]
 801450c:	e003      	b.n	8014516 <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 801450e:	2327      	movs	r3, #39	; 0x27
 8014510:	18fb      	adds	r3, r7, r3
 8014512:	2200      	movs	r2, #0
 8014514:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	689b      	ldr	r3, [r3, #8]
 801451a:	68fa      	ldr	r2, [r7, #12]
 801451c:	8992      	ldrh	r2, [r2, #12]
 801451e:	0011      	movs	r1, r2
 8014520:	68fa      	ldr	r2, [r7, #12]
 8014522:	89d2      	ldrh	r2, [r2, #14]
 8014524:	188a      	adds	r2, r1, r2
 8014526:	4293      	cmp	r3, r2
 8014528:	d356      	bcc.n	80145d8 <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 801452a:	241c      	movs	r4, #28
 801452c:	193b      	adds	r3, r7, r4
 801452e:	2208      	movs	r2, #8
 8014530:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	7cdb      	ldrb	r3, [r3, #19]
 8014536:	193a      	adds	r2, r7, r4
 8014538:	0011      	movs	r1, r2
 801453a:	0018      	movs	r0, r3
 801453c:	f002 fa77 	bl	8016a2e <RegionGetPhyParam>
 8014540:	0003      	movs	r3, r0
 8014542:	001a      	movs	r2, r3
 8014544:	2518      	movs	r5, #24
 8014546:	197b      	adds	r3, r7, r5
 8014548:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 801454a:	197b      	adds	r3, r7, r5
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	2325      	movs	r3, #37	; 0x25
 8014550:	18fb      	adds	r3, r7, r3
 8014552:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	689a      	ldr	r2, [r3, #8]
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	89db      	ldrh	r3, [r3, #14]
 801455c:	0019      	movs	r1, r3
 801455e:	0010      	movs	r0, r2
 8014560:	f7eb fe60 	bl	8000224 <__aeabi_uidivmod>
 8014564:	000b      	movs	r3, r1
 8014566:	2b01      	cmp	r3, #1
 8014568:	d136      	bne.n	80145d8 <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801456a:	193b      	adds	r3, r7, r4
 801456c:	2222      	movs	r2, #34	; 0x22
 801456e:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8014570:	193b      	adds	r3, r7, r4
 8014572:	2626      	movs	r6, #38	; 0x26
 8014574:	19ba      	adds	r2, r7, r6
 8014576:	7812      	ldrb	r2, [r2, #0]
 8014578:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	7c9a      	ldrb	r2, [r3, #18]
 801457e:	193b      	adds	r3, r7, r4
 8014580:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	7cdb      	ldrb	r3, [r3, #19]
 8014586:	193a      	adds	r2, r7, r4
 8014588:	0011      	movs	r1, r2
 801458a:	0018      	movs	r0, r3
 801458c:	f002 fa4f 	bl	8016a2e <RegionGetPhyParam>
 8014590:	0003      	movs	r3, r0
 8014592:	001a      	movs	r2, r3
 8014594:	197b      	adds	r3, r7, r5
 8014596:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8014598:	197b      	adds	r3, r7, r5
 801459a:	681a      	ldr	r2, [r3, #0]
 801459c:	19bb      	adds	r3, r7, r6
 801459e:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 80145a0:	19ba      	adds	r2, r7, r6
 80145a2:	2324      	movs	r3, #36	; 0x24
 80145a4:	18fb      	adds	r3, r7, r3
 80145a6:	7812      	ldrb	r2, [r2, #0]
 80145a8:	b252      	sxtb	r2, r2
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	b25b      	sxtb	r3, r3
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d112      	bne.n	80145d8 <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80145b2:	2327      	movs	r3, #39	; 0x27
 80145b4:	18fb      	adds	r3, r7, r3
 80145b6:	2200      	movs	r2, #0
 80145b8:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	791b      	ldrb	r3, [r3, #4]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d00a      	beq.n	80145d8 <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80145c2:	2110      	movs	r1, #16
 80145c4:	187b      	adds	r3, r7, r1
 80145c6:	2202      	movs	r2, #2
 80145c8:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	7cdb      	ldrb	r3, [r3, #19]
 80145ce:	187a      	adds	r2, r7, r1
 80145d0:	0011      	movs	r1, r2
 80145d2:	0018      	movs	r0, r3
 80145d4:	f002 fa67 	bl	8016aa6 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	2226      	movs	r2, #38	; 0x26
 80145dc:	18ba      	adds	r2, r7, r2
 80145de:	7812      	ldrb	r2, [r2, #0]
 80145e0:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2225      	movs	r2, #37	; 0x25
 80145e6:	18ba      	adds	r2, r7, r2
 80145e8:	7812      	ldrb	r2, [r2, #0]
 80145ea:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80145ec:	2327      	movs	r3, #39	; 0x27
 80145ee:	18fb      	adds	r3, r7, r3
 80145f0:	781b      	ldrb	r3, [r3, #0]
}
 80145f2:	0018      	movs	r0, r3
 80145f4:	46bd      	mov	sp, r7
 80145f6:	b00b      	add	sp, #44	; 0x2c
 80145f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080145fa <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80145fa:	b580      	push	{r7, lr}
 80145fc:	b084      	sub	sp, #16
 80145fe:	af00      	add	r7, sp, #0
 8014600:	60f8      	str	r0, [r7, #12]
 8014602:	60b9      	str	r1, [r7, #8]
 8014604:	607a      	str	r2, [r7, #4]
 8014606:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	789b      	ldrb	r3, [r3, #2]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d107      	bne.n	8014620 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	687a      	ldr	r2, [r7, #4]
 8014614:	68b9      	ldr	r1, [r7, #8]
 8014616:	68f8      	ldr	r0, [r7, #12]
 8014618:	f7ff ff1a 	bl	8014450 <CalcNextV10X>
 801461c:	0003      	movs	r3, r0
 801461e:	e000      	b.n	8014622 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8014620:	2300      	movs	r3, #0
}
 8014622:	0018      	movs	r0, r3
 8014624:	46bd      	mov	sp, r7
 8014626:	b004      	add	sp, #16
 8014628:	bd80      	pop	{r7, pc}

0801462a <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 801462a:	b580      	push	{r7, lr}
 801462c:	b084      	sub	sp, #16
 801462e:	af00      	add	r7, sp, #0
 8014630:	60f8      	str	r0, [r7, #12]
 8014632:	60b9      	str	r1, [r7, #8]
 8014634:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014636:	46c0      	nop			; (mov r8, r8)
 8014638:	46bd      	mov	sp, r7
 801463a:	b004      	add	sp, #16
 801463c:	bd80      	pop	{r7, pc}

0801463e <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 801463e:	b580      	push	{r7, lr}
 8014640:	b082      	sub	sp, #8
 8014642:	af00      	add	r7, sp, #0
 8014644:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 8014646:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8014648:	0018      	movs	r0, r3
 801464a:	46bd      	mov	sp, r7
 801464c:	b002      	add	sp, #8
 801464e:	bd80      	pop	{r7, pc}

08014650 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2200      	movs	r2, #0
 801465c:	601a      	str	r2, [r3, #0]
    return NULL;
 801465e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014660:	0018      	movs	r0, r3
 8014662:	46bd      	mov	sp, r7
 8014664:	b002      	add	sp, #8
 8014666:	bd80      	pop	{r7, pc}

08014668 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	0002      	movs	r2, r0
 8014670:	1dfb      	adds	r3, r7, #7
 8014672:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014674:	46c0      	nop			; (mov r8, r8)
 8014676:	46bd      	mov	sp, r7
 8014678:	b002      	add	sp, #8
 801467a:	bd80      	pop	{r7, pc}

0801467c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
 8014682:	0002      	movs	r2, r0
 8014684:	1dfb      	adds	r3, r7, #7
 8014686:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014688:	46c0      	nop			; (mov r8, r8)
 801468a:	46bd      	mov	sp, r7
 801468c:	b002      	add	sp, #8
 801468e:	bd80      	pop	{r7, pc}

08014690 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b082      	sub	sp, #8
 8014694:	af00      	add	r7, sp, #0
 8014696:	0002      	movs	r2, r0
 8014698:	1dfb      	adds	r3, r7, #7
 801469a:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 801469c:	46c0      	nop			; (mov r8, r8)
 801469e:	46bd      	mov	sp, r7
 80146a0:	b002      	add	sp, #8
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80146a8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80146aa:	0018      	movs	r0, r3
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}

080146b0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80146b8:	46c0      	nop			; (mov r8, r8)
 80146ba:	46bd      	mov	sp, r7
 80146bc:	b002      	add	sp, #8
 80146be:	bd80      	pop	{r7, pc}

080146c0 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b082      	sub	sp, #8
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80146c8:	46c0      	nop			; (mov r8, r8)
 80146ca:	46bd      	mov	sp, r7
 80146cc:	b002      	add	sp, #8
 80146ce:	bd80      	pop	{r7, pc}

080146d0 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b082      	sub	sp, #8
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80146d8:	46c0      	nop			; (mov r8, r8)
 80146da:	46bd      	mov	sp, r7
 80146dc:	b002      	add	sp, #8
 80146de:	bd80      	pop	{r7, pc}

080146e0 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	000a      	movs	r2, r1
 80146ea:	1cbb      	adds	r3, r7, #2
 80146ec:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80146ee:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80146f0:	0018      	movs	r0, r3
 80146f2:	46bd      	mov	sp, r7
 80146f4:	b002      	add	sp, #8
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80146fc:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80146fe:	0018      	movs	r0, r3
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}

08014704 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8014704:	b580      	push	{r7, lr}
 8014706:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014708:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801470a:	0018      	movs	r0, r3
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}

08014710 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014714:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014716:	0018      	movs	r0, r3
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}

0801471c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801471c:	b580      	push	{r7, lr}
 801471e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014720:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014722:	0018      	movs	r0, r3
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}

08014728 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
 801472e:	0002      	movs	r2, r0
 8014730:	1dfb      	adds	r3, r7, #7
 8014732:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014734:	46c0      	nop			; (mov r8, r8)
 8014736:	46bd      	mov	sp, r7
 8014738:	b002      	add	sp, #8
 801473a:	bd80      	pop	{r7, pc}

0801473c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801473c:	b580      	push	{r7, lr}
 801473e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014740:	46c0      	nop			; (mov r8, r8)
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}

08014746 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014746:	b580      	push	{r7, lr}
 8014748:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801474a:	46c0      	nop			; (mov r8, r8)
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	0002      	movs	r2, r0
 8014758:	1dfb      	adds	r3, r7, #7
 801475a:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801475c:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 801475e:	0018      	movs	r0, r3
 8014760:	46bd      	mov	sp, r7
 8014762:	b002      	add	sp, #8
 8014764:	bd80      	pop	{r7, pc}

08014766 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b082      	sub	sp, #8
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801476e:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014770:	0018      	movs	r0, r3
 8014772:	46bd      	mov	sp, r7
 8014774:	b002      	add	sp, #8
 8014776:	bd80      	pop	{r7, pc}

08014778 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b082      	sub	sp, #8
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014780:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014782:	0018      	movs	r0, r3
 8014784:	46bd      	mov	sp, r7
 8014786:	b002      	add	sp, #8
 8014788:	bd80      	pop	{r7, pc}

0801478a <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801478a:	b580      	push	{r7, lr}
 801478c:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801478e:	46c0      	nop			; (mov r8, r8)
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}

08014794 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b082      	sub	sp, #8
 8014798:	af00      	add	r7, sp, #0
 801479a:	0002      	movs	r2, r0
 801479c:	6039      	str	r1, [r7, #0]
 801479e:	1dfb      	adds	r3, r7, #7
 80147a0:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 80147a2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80147a4:	0018      	movs	r0, r3
 80147a6:	46bd      	mov	sp, r7
 80147a8:	b002      	add	sp, #8
 80147aa:	bd80      	pop	{r7, pc}

080147ac <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	603a      	str	r2, [r7, #0]
 80147b4:	1dbb      	adds	r3, r7, #6
 80147b6:	1c02      	adds	r2, r0, #0
 80147b8:	801a      	strh	r2, [r3, #0]
 80147ba:	1d7b      	adds	r3, r7, #5
 80147bc:	1c0a      	adds	r2, r1, #0
 80147be:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80147c0:	46c0      	nop			; (mov r8, r8)
 80147c2:	46bd      	mov	sp, r7
 80147c4:	b002      	add	sp, #8
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80147cc:	46c0      	nop			; (mov r8, r8)
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b082      	sub	sp, #8
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 80147da:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80147dc:	0018      	movs	r0, r3
 80147de:	46bd      	mov	sp, r7
 80147e0:	b002      	add	sp, #8
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80147ec:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80147ee:	0018      	movs	r0, r3
 80147f0:	46bd      	mov	sp, r7
 80147f2:	b002      	add	sp, #8
 80147f4:	bd80      	pop	{r7, pc}

080147f6 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80147f6:	b580      	push	{r7, lr}
 80147f8:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80147fa:	46c0      	nop			; (mov r8, r8)
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}

08014800 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 8014800:	b580      	push	{r7, lr}
 8014802:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014804:	46c0      	nop			; (mov r8, r8)
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}

0801480a <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801480a:	b580      	push	{r7, lr}
 801480c:	b084      	sub	sp, #16
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014816:	230e      	movs	r3, #14
 8014818:	18fb      	adds	r3, r7, r3
 801481a:	2200      	movs	r2, #0
 801481c:	801a      	strh	r2, [r3, #0]
 801481e:	e00f      	b.n	8014840 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 8014820:	230e      	movs	r3, #14
 8014822:	18fb      	adds	r3, r7, r3
 8014824:	881b      	ldrh	r3, [r3, #0]
 8014826:	68ba      	ldr	r2, [r7, #8]
 8014828:	18d3      	adds	r3, r2, r3
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d001      	beq.n	8014834 <IsSlotFree+0x2a>
        {
            return false;
 8014830:	2300      	movs	r3, #0
 8014832:	e00b      	b.n	801484c <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014834:	210e      	movs	r1, #14
 8014836:	187b      	adds	r3, r7, r1
 8014838:	881a      	ldrh	r2, [r3, #0]
 801483a:	187b      	adds	r3, r7, r1
 801483c:	3201      	adds	r2, #1
 801483e:	801a      	strh	r2, [r3, #0]
 8014840:	230e      	movs	r3, #14
 8014842:	18fb      	adds	r3, r7, r3
 8014844:	881b      	ldrh	r3, [r3, #0]
 8014846:	2b0f      	cmp	r3, #15
 8014848:	d9ea      	bls.n	8014820 <IsSlotFree+0x16>
        }
    }
    return true;
 801484a:	2301      	movs	r3, #1
}
 801484c:	0018      	movs	r0, r3
 801484e:	46bd      	mov	sp, r7
 8014850:	b004      	add	sp, #16
 8014852:	bd80      	pop	{r7, pc}

08014854 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801485a:	1dfb      	adds	r3, r7, #7
 801485c:	2200      	movs	r2, #0
 801485e:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014860:	e00a      	b.n	8014878 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 8014862:	1dfb      	adds	r3, r7, #7
 8014864:	781a      	ldrb	r2, [r3, #0]
 8014866:	1dfb      	adds	r3, r7, #7
 8014868:	3201      	adds	r2, #1
 801486a:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 801486c:	1dfb      	adds	r3, r7, #7
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	2b0f      	cmp	r3, #15
 8014872:	d101      	bne.n	8014878 <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 8014874:	2300      	movs	r3, #0
 8014876:	e017      	b.n	80148a8 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014878:	1dfb      	adds	r3, r7, #7
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	011b      	lsls	r3, r3, #4
 801487e:	3308      	adds	r3, #8
 8014880:	001a      	movs	r2, r3
 8014882:	4b0b      	ldr	r3, [pc, #44]	; (80148b0 <MallocNewMacCommandSlot+0x5c>)
 8014884:	18d3      	adds	r3, r2, r3
 8014886:	0018      	movs	r0, r3
 8014888:	f7ff ffbf 	bl	801480a <IsSlotFree>
 801488c:	0003      	movs	r3, r0
 801488e:	001a      	movs	r2, r3
 8014890:	2301      	movs	r3, #1
 8014892:	4053      	eors	r3, r2
 8014894:	b2db      	uxtb	r3, r3
 8014896:	2b00      	cmp	r3, #0
 8014898:	d1e3      	bne.n	8014862 <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 801489a:	1dfb      	adds	r3, r7, #7
 801489c:	781b      	ldrb	r3, [r3, #0]
 801489e:	011b      	lsls	r3, r3, #4
 80148a0:	3308      	adds	r3, #8
 80148a2:	001a      	movs	r2, r3
 80148a4:	4b02      	ldr	r3, [pc, #8]	; (80148b0 <MallocNewMacCommandSlot+0x5c>)
 80148a6:	18d3      	adds	r3, r2, r3
}
 80148a8:	0018      	movs	r0, r3
 80148aa:	46bd      	mov	sp, r7
 80148ac:	b002      	add	sp, #8
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	20000b84 	.word	0x20000b84

080148b4 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d101      	bne.n	80148c6 <FreeMacCommandSlot+0x12>
    {
        return false;
 80148c2:	2300      	movs	r3, #0
 80148c4:	e006      	b.n	80148d4 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2210      	movs	r2, #16
 80148ca:	2100      	movs	r1, #0
 80148cc:	0018      	movs	r0, r3
 80148ce:	f004 fd6b 	bl	80193a8 <memset1>

    return true;
 80148d2:	2301      	movs	r3, #1
}
 80148d4:	0018      	movs	r0, r3
 80148d6:	46bd      	mov	sp, r7
 80148d8:	b002      	add	sp, #8
 80148da:	bd80      	pop	{r7, pc}

080148dc <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d101      	bne.n	80148ee <LinkedListInit+0x12>
    {
        return false;
 80148ea:	2300      	movs	r3, #0
 80148ec:	e006      	b.n	80148fc <LinkedListInit+0x20>
    }

    list->First = NULL;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2200      	movs	r2, #0
 80148f2:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2200      	movs	r2, #0
 80148f8:	605a      	str	r2, [r3, #4]

    return true;
 80148fa:	2301      	movs	r3, #1
}
 80148fc:	0018      	movs	r0, r3
 80148fe:	46bd      	mov	sp, r7
 8014900:	b002      	add	sp, #8
 8014902:	bd80      	pop	{r7, pc}

08014904 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b082      	sub	sp, #8
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
 801490c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d002      	beq.n	801491a <LinkedListAdd+0x16>
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d101      	bne.n	801491e <LinkedListAdd+0x1a>
    {
        return false;
 801491a:	2300      	movs	r3, #0
 801491c:	e015      	b.n	801494a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d102      	bne.n	801492c <LinkedListAdd+0x28>
    {
        list->First = element;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	683a      	ldr	r2, [r7, #0]
 801492a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d003      	beq.n	801493c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	683a      	ldr	r2, [r7, #0]
 801493a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	2200      	movs	r2, #0
 8014940:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	683a      	ldr	r2, [r7, #0]
 8014946:	605a      	str	r2, [r3, #4]

    return true;
 8014948:	2301      	movs	r3, #1
}
 801494a:	0018      	movs	r0, r3
 801494c:	46bd      	mov	sp, r7
 801494e:	b002      	add	sp, #8
 8014950:	bd80      	pop	{r7, pc}

08014952 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014952:	b580      	push	{r7, lr}
 8014954:	b084      	sub	sp, #16
 8014956:	af00      	add	r7, sp, #0
 8014958:	6078      	str	r0, [r7, #4]
 801495a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d002      	beq.n	8014968 <LinkedListGetPrevious+0x16>
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d101      	bne.n	801496c <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014968:	2300      	movs	r3, #0
 801496a:	e016      	b.n	801499a <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014972:	683a      	ldr	r2, [r7, #0]
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	429a      	cmp	r2, r3
 8014978:	d00c      	beq.n	8014994 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801497a:	e002      	b.n	8014982 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d007      	beq.n	8014998 <LinkedListGetPrevious+0x46>
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	683a      	ldr	r2, [r7, #0]
 801498e:	429a      	cmp	r2, r3
 8014990:	d1f4      	bne.n	801497c <LinkedListGetPrevious+0x2a>
 8014992:	e001      	b.n	8014998 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014994:	2300      	movs	r3, #0
 8014996:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014998:	68fb      	ldr	r3, [r7, #12]
}
 801499a:	0018      	movs	r0, r3
 801499c:	46bd      	mov	sp, r7
 801499e:	b004      	add	sp, #16
 80149a0:	bd80      	pop	{r7, pc}

080149a2 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80149a2:	b580      	push	{r7, lr}
 80149a4:	b084      	sub	sp, #16
 80149a6:	af00      	add	r7, sp, #0
 80149a8:	6078      	str	r0, [r7, #4]
 80149aa:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d002      	beq.n	80149b8 <LinkedListRemove+0x16>
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d101      	bne.n	80149bc <LinkedListRemove+0x1a>
    {
        return false;
 80149b8:	2300      	movs	r3, #0
 80149ba:	e023      	b.n	8014a04 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80149bc:	683a      	ldr	r2, [r7, #0]
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	0011      	movs	r1, r2
 80149c2:	0018      	movs	r0, r3
 80149c4:	f7ff ffc5 	bl	8014952 <LinkedListGetPrevious>
 80149c8:	0003      	movs	r3, r0
 80149ca:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	683a      	ldr	r2, [r7, #0]
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d103      	bne.n	80149de <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	681a      	ldr	r2, [r3, #0]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	683a      	ldr	r2, [r7, #0]
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d102      	bne.n	80149ee <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	68fa      	ldr	r2, [r7, #12]
 80149ec:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d003      	beq.n	80149fc <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	681a      	ldr	r2, [r3, #0]
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	2200      	movs	r2, #0
 8014a00:	601a      	str	r2, [r3, #0]

    return true;
 8014a02:	2301      	movs	r3, #1
}
 8014a04:	0018      	movs	r0, r3
 8014a06:	46bd      	mov	sp, r7
 8014a08:	b004      	add	sp, #16
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	0002      	movs	r2, r0
 8014a14:	1dfb      	adds	r3, r7, #7
 8014a16:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8014a18:	1dfb      	adds	r3, r7, #7
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	2b05      	cmp	r3, #5
 8014a1e:	d003      	beq.n	8014a28 <IsSticky+0x1c>
 8014a20:	db04      	blt.n	8014a2c <IsSticky+0x20>
 8014a22:	3b08      	subs	r3, #8
 8014a24:	2b02      	cmp	r3, #2
 8014a26:	d801      	bhi.n	8014a2c <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8014a28:	2301      	movs	r3, #1
 8014a2a:	e000      	b.n	8014a2e <IsSticky+0x22>
        default:
            return false;
 8014a2c:	2300      	movs	r3, #0
    }
}
 8014a2e:	0018      	movs	r0, r3
 8014a30:	46bd      	mov	sp, r7
 8014a32:	b002      	add	sp, #8
 8014a34:	bd80      	pop	{r7, pc}
	...

08014a38 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 8014a3c:	4b04      	ldr	r3, [pc, #16]	; (8014a50 <NvmCtxCallback+0x18>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8014a44:	4b02      	ldr	r3, [pc, #8]	; (8014a50 <NvmCtxCallback+0x18>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	4798      	blx	r3
    }
}
 8014a4a:	46c0      	nop			; (mov r8, r8)
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}
 8014a50:	20000b80 	.word	0x20000b80

08014a54 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8014a5c:	4b08      	ldr	r3, [pc, #32]	; (8014a80 <LoRaMacCommandsInit+0x2c>)
 8014a5e:	22fc      	movs	r2, #252	; 0xfc
 8014a60:	2100      	movs	r1, #0
 8014a62:	0018      	movs	r0, r3
 8014a64:	f004 fca0 	bl	80193a8 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8014a68:	4b05      	ldr	r3, [pc, #20]	; (8014a80 <LoRaMacCommandsInit+0x2c>)
 8014a6a:	0018      	movs	r0, r3
 8014a6c:	f7ff ff36 	bl	80148dc <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8014a70:	4b04      	ldr	r3, [pc, #16]	; (8014a84 <LoRaMacCommandsInit+0x30>)
 8014a72:	687a      	ldr	r2, [r7, #4]
 8014a74:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 8014a76:	2300      	movs	r3, #0
}
 8014a78:	0018      	movs	r0, r3
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	b002      	add	sp, #8
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	20000b84 	.word	0x20000b84
 8014a84:	20000b80 	.word	0x20000b80

08014a88 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d007      	beq.n	8014aa6 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8014a96:	6879      	ldr	r1, [r7, #4]
 8014a98:	4b05      	ldr	r3, [pc, #20]	; (8014ab0 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8014a9a:	22fc      	movs	r2, #252	; 0xfc
 8014a9c:	0018      	movs	r0, r3
 8014a9e:	f004 fc45 	bl	801932c <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	e000      	b.n	8014aa8 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014aa6:	2301      	movs	r3, #1
    }
}
 8014aa8:	0018      	movs	r0, r3
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	b002      	add	sp, #8
 8014aae:	bd80      	pop	{r7, pc}
 8014ab0:	20000b84 	.word	0x20000b84

08014ab4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	22fc      	movs	r2, #252	; 0xfc
 8014ac0:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8014ac2:	4b02      	ldr	r3, [pc, #8]	; (8014acc <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8014ac4:	0018      	movs	r0, r3
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	b002      	add	sp, #8
 8014aca:	bd80      	pop	{r7, pc}
 8014acc:	20000b84 	.word	0x20000b84

08014ad0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014ad0:	b590      	push	{r4, r7, lr}
 8014ad2:	b087      	sub	sp, #28
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60b9      	str	r1, [r7, #8]
 8014ad8:	607a      	str	r2, [r7, #4]
 8014ada:	230f      	movs	r3, #15
 8014adc:	18fb      	adds	r3, r7, r3
 8014ade:	1c02      	adds	r2, r0, #0
 8014ae0:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d101      	bne.n	8014aec <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e03c      	b.n	8014b66 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014aec:	f7ff feb2 	bl	8014854 <MallocNewMacCommandSlot>
 8014af0:	0003      	movs	r3, r0
 8014af2:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d101      	bne.n	8014afe <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014afa:	2302      	movs	r3, #2
 8014afc:	e033      	b.n	8014b66 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8014afe:	697a      	ldr	r2, [r7, #20]
 8014b00:	4b1b      	ldr	r3, [pc, #108]	; (8014b70 <LoRaMacCommandsAddCmd+0xa0>)
 8014b02:	0011      	movs	r1, r2
 8014b04:	0018      	movs	r0, r3
 8014b06:	f7ff fefd 	bl	8014904 <LinkedListAdd>
 8014b0a:	0003      	movs	r3, r0
 8014b0c:	001a      	movs	r2, r3
 8014b0e:	2301      	movs	r3, #1
 8014b10:	4053      	eors	r3, r2
 8014b12:	b2db      	uxtb	r3, r3
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d001      	beq.n	8014b1c <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014b18:	2305      	movs	r3, #5
 8014b1a:	e024      	b.n	8014b66 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	240f      	movs	r4, #15
 8014b20:	193a      	adds	r2, r7, r4
 8014b22:	7812      	ldrb	r2, [r2, #0]
 8014b24:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	687a      	ldr	r2, [r7, #4]
 8014b2a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	3305      	adds	r3, #5
 8014b30:	687a      	ldr	r2, [r7, #4]
 8014b32:	b292      	uxth	r2, r2
 8014b34:	68b9      	ldr	r1, [r7, #8]
 8014b36:	0018      	movs	r0, r3
 8014b38:	f004 fbf8 	bl	801932c <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014b3c:	193b      	adds	r3, r7, r4
 8014b3e:	781b      	ldrb	r3, [r3, #0]
 8014b40:	0018      	movs	r0, r3
 8014b42:	f7ff ff63 	bl	8014a0c <IsSticky>
 8014b46:	0003      	movs	r3, r0
 8014b48:	001a      	movs	r2, r3
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014b4e:	4b08      	ldr	r3, [pc, #32]	; (8014b70 <LoRaMacCommandsAddCmd+0xa0>)
 8014b50:	22f8      	movs	r2, #248	; 0xf8
 8014b52:	589a      	ldr	r2, [r3, r2]
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	18d3      	adds	r3, r2, r3
 8014b58:	1c5a      	adds	r2, r3, #1
 8014b5a:	4b05      	ldr	r3, [pc, #20]	; (8014b70 <LoRaMacCommandsAddCmd+0xa0>)
 8014b5c:	21f8      	movs	r1, #248	; 0xf8
 8014b5e:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8014b60:	f7ff ff6a 	bl	8014a38 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014b64:	2300      	movs	r3, #0
}
 8014b66:	0018      	movs	r0, r3
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	b007      	add	sp, #28
 8014b6c:	bd90      	pop	{r4, r7, pc}
 8014b6e:	46c0      	nop			; (mov r8, r8)
 8014b70:	20000b84 	.word	0x20000b84

08014b74 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b082      	sub	sp, #8
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d101      	bne.n	8014b86 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014b82:	2301      	movs	r3, #1
 8014b84:	e028      	b.n	8014bd8 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 8014b86:	687a      	ldr	r2, [r7, #4]
 8014b88:	4b15      	ldr	r3, [pc, #84]	; (8014be0 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014b8a:	0011      	movs	r1, r2
 8014b8c:	0018      	movs	r0, r3
 8014b8e:	f7ff ff08 	bl	80149a2 <LinkedListRemove>
 8014b92:	0003      	movs	r3, r0
 8014b94:	001a      	movs	r2, r3
 8014b96:	2301      	movs	r3, #1
 8014b98:	4053      	eors	r3, r2
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d001      	beq.n	8014ba4 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014ba0:	2303      	movs	r3, #3
 8014ba2:	e019      	b.n	8014bd8 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014ba4:	4b0e      	ldr	r3, [pc, #56]	; (8014be0 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014ba6:	22f8      	movs	r2, #248	; 0xf8
 8014ba8:	589a      	ldr	r2, [r3, r2]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	689b      	ldr	r3, [r3, #8]
 8014bae:	1ad3      	subs	r3, r2, r3
 8014bb0:	1e5a      	subs	r2, r3, #1
 8014bb2:	4b0b      	ldr	r3, [pc, #44]	; (8014be0 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014bb4:	21f8      	movs	r1, #248	; 0xf8
 8014bb6:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	0018      	movs	r0, r3
 8014bbc:	f7ff fe7a 	bl	80148b4 <FreeMacCommandSlot>
 8014bc0:	0003      	movs	r3, r0
 8014bc2:	001a      	movs	r2, r3
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	4053      	eors	r3, r2
 8014bc8:	b2db      	uxtb	r3, r3
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d001      	beq.n	8014bd2 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014bce:	2305      	movs	r3, #5
 8014bd0:	e002      	b.n	8014bd8 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8014bd2:	f7ff ff31 	bl	8014a38 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	0018      	movs	r0, r3
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	b002      	add	sp, #8
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	20000b84 	.word	0x20000b84

08014be4 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014bea:	4b11      	ldr	r3, [pc, #68]	; (8014c30 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014bf0:	e013      	b.n	8014c1a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	7b1b      	ldrb	r3, [r3, #12]
 8014bf6:	2201      	movs	r2, #1
 8014bf8:	4053      	eors	r3, r2
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d009      	beq.n	8014c14 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	0018      	movs	r0, r3
 8014c0a:	f7ff ffb3 	bl	8014b74 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	607b      	str	r3, [r7, #4]
 8014c12:	e002      	b.n	8014c1a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d1e8      	bne.n	8014bf2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8014c20:	f7ff ff0a 	bl	8014a38 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014c24:	2300      	movs	r3, #0
}
 8014c26:	0018      	movs	r0, r3
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	b002      	add	sp, #8
 8014c2c:	bd80      	pop	{r7, pc}
 8014c2e:	46c0      	nop			; (mov r8, r8)
 8014c30:	20000b84 	.word	0x20000b84

08014c34 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b082      	sub	sp, #8
 8014c38:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014c3a:	4b0f      	ldr	r3, [pc, #60]	; (8014c78 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014c40:	e00f      	b.n	8014c62 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	791b      	ldrb	r3, [r3, #4]
 8014c4c:	0018      	movs	r0, r3
 8014c4e:	f7ff fedd 	bl	8014a0c <IsSticky>
 8014c52:	1e03      	subs	r3, r0, #0
 8014c54:	d003      	beq.n	8014c5e <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	0018      	movs	r0, r3
 8014c5a:	f7ff ff8b 	bl	8014b74 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d1ec      	bne.n	8014c42 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 8014c68:	f7ff fee6 	bl	8014a38 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014c6c:	2300      	movs	r3, #0
}
 8014c6e:	0018      	movs	r0, r3
 8014c70:	46bd      	mov	sp, r7
 8014c72:	b002      	add	sp, #8
 8014c74:	bd80      	pop	{r7, pc}
 8014c76:	46c0      	nop			; (mov r8, r8)
 8014c78:	20000b84 	.word	0x20000b84

08014c7c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b082      	sub	sp, #8
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d101      	bne.n	8014c8e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	e005      	b.n	8014c9a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8014c8e:	4b05      	ldr	r3, [pc, #20]	; (8014ca4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014c90:	22f8      	movs	r2, #248	; 0xf8
 8014c92:	589a      	ldr	r2, [r3, r2]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014c98:	2300      	movs	r3, #0
}
 8014c9a:	0018      	movs	r0, r3
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	b002      	add	sp, #8
 8014ca0:	bd80      	pop	{r7, pc}
 8014ca2:	46c0      	nop			; (mov r8, r8)
 8014ca4:	20000b84 	.word	0x20000b84

08014ca8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014ca8:	b590      	push	{r4, r7, lr}
 8014caa:	b089      	sub	sp, #36	; 0x24
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	60f8      	str	r0, [r7, #12]
 8014cb0:	60b9      	str	r1, [r7, #8]
 8014cb2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 8014cb4:	4b2a      	ldr	r3, [pc, #168]	; (8014d60 <LoRaMacCommandsSerializeCmds+0xb8>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014cba:	231b      	movs	r3, #27
 8014cbc:	18fb      	adds	r3, r7, r3
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d002      	beq.n	8014cce <LoRaMacCommandsSerializeCmds+0x26>
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d12d      	bne.n	8014d2a <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014cce:	2301      	movs	r3, #1
 8014cd0:	e042      	b.n	8014d58 <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014cd2:	241b      	movs	r4, #27
 8014cd4:	193b      	adds	r3, r7, r4
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	68fa      	ldr	r2, [r7, #12]
 8014cda:	1ad2      	subs	r2, r2, r3
 8014cdc:	69fb      	ldr	r3, [r7, #28]
 8014cde:	689b      	ldr	r3, [r3, #8]
 8014ce0:	3301      	adds	r3, #1
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d325      	bcc.n	8014d32 <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 8014ce6:	193b      	adds	r3, r7, r4
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	193a      	adds	r2, r7, r4
 8014cec:	1c59      	adds	r1, r3, #1
 8014cee:	7011      	strb	r1, [r2, #0]
 8014cf0:	001a      	movs	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	189b      	adds	r3, r3, r2
 8014cf6:	69fa      	ldr	r2, [r7, #28]
 8014cf8:	7912      	ldrb	r2, [r2, #4]
 8014cfa:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014cfc:	193b      	adds	r3, r7, r4
 8014cfe:	781b      	ldrb	r3, [r3, #0]
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	18d0      	adds	r0, r2, r3
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	1d59      	adds	r1, r3, #5
 8014d08:	69fb      	ldr	r3, [r7, #28]
 8014d0a:	689b      	ldr	r3, [r3, #8]
 8014d0c:	b29b      	uxth	r3, r3
 8014d0e:	001a      	movs	r2, r3
 8014d10:	f004 fb0c 	bl	801932c <memcpy1>
            itr += curElement->PayloadSize;
 8014d14:	69fb      	ldr	r3, [r7, #28]
 8014d16:	689b      	ldr	r3, [r3, #8]
 8014d18:	b2d9      	uxtb	r1, r3
 8014d1a:	193b      	adds	r3, r7, r4
 8014d1c:	193a      	adds	r2, r7, r4
 8014d1e:	7812      	ldrb	r2, [r2, #0]
 8014d20:	188a      	adds	r2, r1, r2
 8014d22:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014d24:	69fb      	ldr	r3, [r7, #28]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d1d0      	bne.n	8014cd2 <LoRaMacCommandsSerializeCmds+0x2a>
 8014d30:	e00a      	b.n	8014d48 <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 8014d32:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014d34:	e008      	b.n	8014d48 <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014d36:	69fb      	ldr	r3, [r7, #28]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014d3c:	69fb      	ldr	r3, [r7, #28]
 8014d3e:	0018      	movs	r0, r3
 8014d40:	f7ff ff18 	bl	8014b74 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d1f3      	bne.n	8014d36 <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	0018      	movs	r0, r3
 8014d52:	f7ff ff93 	bl	8014c7c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014d56:	2300      	movs	r3, #0
}
 8014d58:	0018      	movs	r0, r3
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	b009      	add	sp, #36	; 0x24
 8014d5e:	bd90      	pop	{r4, r7, pc}
 8014d60:	20000b84 	.word	0x20000b84

08014d64 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d101      	bne.n	8014d76 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d72:	2301      	movs	r3, #1
 8014d74:	e016      	b.n	8014da4 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8014d76:	4b0d      	ldr	r3, [pc, #52]	; (8014dac <LoRaMacCommandsStickyCmdsPending+0x48>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8014d82:	e00b      	b.n	8014d9c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	7b1b      	ldrb	r3, [r3, #12]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d004      	beq.n	8014d96 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2201      	movs	r2, #1
 8014d90:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8014d92:	2300      	movs	r3, #0
 8014d94:	e006      	b.n	8014da4 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d1f0      	bne.n	8014d84 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014da2:	2300      	movs	r3, #0
}
 8014da4:	0018      	movs	r0, r3
 8014da6:	46bd      	mov	sp, r7
 8014da8:	b004      	add	sp, #16
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	20000b84 	.word	0x20000b84

08014db0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b084      	sub	sp, #16
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	0002      	movs	r2, r0
 8014db8:	1dfb      	adds	r3, r7, #7
 8014dba:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 8014dbc:	230f      	movs	r3, #15
 8014dbe:	18fb      	adds	r3, r7, r3
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 8014dc4:	1dfb      	adds	r3, r7, #7
 8014dc6:	781b      	ldrb	r3, [r3, #0]
 8014dc8:	2b13      	cmp	r3, #19
 8014dca:	d84a      	bhi.n	8014e62 <LoRaMacCommandsGetCmdSize+0xb2>
 8014dcc:	009a      	lsls	r2, r3, #2
 8014dce:	4b29      	ldr	r3, [pc, #164]	; (8014e74 <LoRaMacCommandsGetCmdSize+0xc4>)
 8014dd0:	18d3      	adds	r3, r2, r3
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014dd6:	230f      	movs	r3, #15
 8014dd8:	18fb      	adds	r3, r7, r3
 8014dda:	2203      	movs	r2, #3
 8014ddc:	701a      	strb	r2, [r3, #0]
            break;
 8014dde:	e041      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014de0:	230f      	movs	r3, #15
 8014de2:	18fb      	adds	r3, r7, r3
 8014de4:	2205      	movs	r2, #5
 8014de6:	701a      	strb	r2, [r3, #0]
            break;
 8014de8:	e03c      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014dea:	230f      	movs	r3, #15
 8014dec:	18fb      	adds	r3, r7, r3
 8014dee:	2202      	movs	r2, #2
 8014df0:	701a      	strb	r2, [r3, #0]
            break;
 8014df2:	e037      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014df4:	230f      	movs	r3, #15
 8014df6:	18fb      	adds	r3, r7, r3
 8014df8:	2205      	movs	r2, #5
 8014dfa:	701a      	strb	r2, [r3, #0]
            break;
 8014dfc:	e032      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014dfe:	230f      	movs	r3, #15
 8014e00:	18fb      	adds	r3, r7, r3
 8014e02:	2201      	movs	r2, #1
 8014e04:	701a      	strb	r2, [r3, #0]
            break;
 8014e06:	e02d      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014e08:	230f      	movs	r3, #15
 8014e0a:	18fb      	adds	r3, r7, r3
 8014e0c:	2206      	movs	r2, #6
 8014e0e:	701a      	strb	r2, [r3, #0]
            break;
 8014e10:	e028      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014e12:	230f      	movs	r3, #15
 8014e14:	18fb      	adds	r3, r7, r3
 8014e16:	2202      	movs	r2, #2
 8014e18:	701a      	strb	r2, [r3, #0]
            break;
 8014e1a:	e023      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014e1c:	230f      	movs	r3, #15
 8014e1e:	18fb      	adds	r3, r7, r3
 8014e20:	2202      	movs	r2, #2
 8014e22:	701a      	strb	r2, [r3, #0]
            break;
 8014e24:	e01e      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014e26:	230f      	movs	r3, #15
 8014e28:	18fb      	adds	r3, r7, r3
 8014e2a:	2205      	movs	r2, #5
 8014e2c:	701a      	strb	r2, [r3, #0]
            break;
 8014e2e:	e019      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014e30:	230f      	movs	r3, #15
 8014e32:	18fb      	adds	r3, r7, r3
 8014e34:	2206      	movs	r2, #6
 8014e36:	701a      	strb	r2, [r3, #0]
            break;
 8014e38:	e014      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014e3a:	230f      	movs	r3, #15
 8014e3c:	18fb      	adds	r3, r7, r3
 8014e3e:	2201      	movs	r2, #1
 8014e40:	701a      	strb	r2, [r3, #0]
            break;
 8014e42:	e00f      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014e44:	230f      	movs	r3, #15
 8014e46:	18fb      	adds	r3, r7, r3
 8014e48:	2205      	movs	r2, #5
 8014e4a:	701a      	strb	r2, [r3, #0]
            break;
 8014e4c:	e00a      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014e4e:	230f      	movs	r3, #15
 8014e50:	18fb      	adds	r3, r7, r3
 8014e52:	2204      	movs	r2, #4
 8014e54:	701a      	strb	r2, [r3, #0]
            break;
 8014e56:	e005      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014e58:	230f      	movs	r3, #15
 8014e5a:	18fb      	adds	r3, r7, r3
 8014e5c:	2204      	movs	r2, #4
 8014e5e:	701a      	strb	r2, [r3, #0]
            break;
 8014e60:	e000      	b.n	8014e64 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014e62:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 8014e64:	230f      	movs	r3, #15
 8014e66:	18fb      	adds	r3, r7, r3
 8014e68:	781b      	ldrb	r3, [r3, #0]
}
 8014e6a:	0018      	movs	r0, r3
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	b004      	add	sp, #16
 8014e70:	bd80      	pop	{r7, pc}
 8014e72:	46c0      	nop			; (mov r8, r8)
 8014e74:	0801ee00 	.word	0x0801ee00

08014e78 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014e80:	4b08      	ldr	r3, [pc, #32]	; (8014ea4 <IncreaseBufferPointer+0x2c>)
 8014e82:	691b      	ldr	r3, [r3, #16]
 8014e84:	3310      	adds	r3, #16
 8014e86:	687a      	ldr	r2, [r7, #4]
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d103      	bne.n	8014e94 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014e8c:	4b05      	ldr	r3, [pc, #20]	; (8014ea4 <IncreaseBufferPointer+0x2c>)
 8014e8e:	691b      	ldr	r3, [r3, #16]
 8014e90:	607b      	str	r3, [r7, #4]
 8014e92:	e002      	b.n	8014e9a <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	3304      	adds	r3, #4
 8014e98:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014e9a:	687b      	ldr	r3, [r7, #4]
}
 8014e9c:	0018      	movs	r0, r3
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	b002      	add	sp, #8
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	20000c98 	.word	0x20000c98

08014ea8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b082      	sub	sp, #8
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	0002      	movs	r2, r0
 8014eb0:	1dfb      	adds	r3, r7, #7
 8014eb2:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 8014eb4:	1dfb      	adds	r3, r7, #7
 8014eb6:	781b      	ldrb	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d101      	bne.n	8014ec0 <IsListEmpty+0x18>
    {
        return true;
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	e000      	b.n	8014ec2 <IsListEmpty+0x1a>
    }
    return false;
 8014ec0:	2300      	movs	r3, #0
}
 8014ec2:	0018      	movs	r0, r3
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	b002      	add	sp, #8
 8014ec8:	bd80      	pop	{r7, pc}

08014eca <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014eca:	b580      	push	{r7, lr}
 8014ecc:	b082      	sub	sp, #8
 8014ece:	af00      	add	r7, sp, #0
 8014ed0:	0002      	movs	r2, r0
 8014ed2:	1dfb      	adds	r3, r7, #7
 8014ed4:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014ed6:	1dfb      	adds	r3, r7, #7
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	2b04      	cmp	r3, #4
 8014edc:	d901      	bls.n	8014ee2 <IsListFull+0x18>
    {
        return true;
 8014ede:	2301      	movs	r3, #1
 8014ee0:	e000      	b.n	8014ee4 <IsListFull+0x1a>
    }
    return false;
 8014ee2:	2300      	movs	r3, #0
}
 8014ee4:	0018      	movs	r0, r3
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	b002      	add	sp, #8
 8014eea:	bd80      	pop	{r7, pc}

08014eec <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b086      	sub	sp, #24
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	60b9      	str	r1, [r7, #8]
 8014ef4:	607a      	str	r2, [r7, #4]
 8014ef6:	230f      	movs	r3, #15
 8014ef8:	18fb      	adds	r3, r7, r3
 8014efa:	1c02      	adds	r2, r0, #0
 8014efc:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014f02:	4b18      	ldr	r3, [pc, #96]	; (8014f64 <GetElement+0x78>)
 8014f04:	691b      	ldr	r3, [r3, #16]
 8014f06:	7d1b      	ldrb	r3, [r3, #20]
 8014f08:	0018      	movs	r0, r3
 8014f0a:	f7ff ffcd 	bl	8014ea8 <IsListEmpty>
 8014f0e:	1e03      	subs	r3, r0, #0
 8014f10:	d001      	beq.n	8014f16 <GetElement+0x2a>
    {
        return NULL;
 8014f12:	2300      	movs	r3, #0
 8014f14:	e022      	b.n	8014f5c <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8014f16:	2313      	movs	r3, #19
 8014f18:	18fb      	adds	r3, r7, r3
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	701a      	strb	r2, [r3, #0]
 8014f1e:	e014      	b.n	8014f4a <GetElement+0x5e>
    {
        if( element->Request == request )
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	781b      	ldrb	r3, [r3, #0]
 8014f24:	220f      	movs	r2, #15
 8014f26:	18ba      	adds	r2, r7, r2
 8014f28:	7812      	ldrb	r2, [r2, #0]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d101      	bne.n	8014f32 <GetElement+0x46>
        {
            // We have found the element
            return element;
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	e014      	b.n	8014f5c <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	0018      	movs	r0, r3
 8014f36:	f7ff ff9f 	bl	8014e78 <IncreaseBufferPointer>
 8014f3a:	0003      	movs	r3, r0
 8014f3c:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8014f3e:	2113      	movs	r1, #19
 8014f40:	187b      	adds	r3, r7, r1
 8014f42:	781a      	ldrb	r2, [r3, #0]
 8014f44:	187b      	adds	r3, r7, r1
 8014f46:	3201      	adds	r2, #1
 8014f48:	701a      	strb	r2, [r3, #0]
 8014f4a:	4b06      	ldr	r3, [pc, #24]	; (8014f64 <GetElement+0x78>)
 8014f4c:	691b      	ldr	r3, [r3, #16]
 8014f4e:	7d1b      	ldrb	r3, [r3, #20]
 8014f50:	2213      	movs	r2, #19
 8014f52:	18ba      	adds	r2, r7, r2
 8014f54:	7812      	ldrb	r2, [r2, #0]
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d3e2      	bcc.n	8014f20 <GetElement+0x34>
    }

    return NULL;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	0018      	movs	r0, r3
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	b006      	add	sp, #24
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	20000c98 	.word	0x20000c98

08014f68 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8014f72:	4b13      	ldr	r3, [pc, #76]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014f74:	687a      	ldr	r2, [r7, #4]
 8014f76:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8014f78:	4b11      	ldr	r3, [pc, #68]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014f7a:	4a12      	ldr	r2, [pc, #72]	; (8014fc4 <LoRaMacConfirmQueueInit+0x5c>)
 8014f7c:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8014f7e:	4b10      	ldr	r3, [pc, #64]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014f80:	691b      	ldr	r3, [r3, #16]
 8014f82:	2200      	movs	r2, #0
 8014f84:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014f86:	4b0e      	ldr	r3, [pc, #56]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014f88:	691b      	ldr	r3, [r3, #16]
 8014f8a:	001a      	movs	r2, r3
 8014f8c:	4b0c      	ldr	r3, [pc, #48]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014f8e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014f90:	4b0b      	ldr	r3, [pc, #44]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014f92:	691b      	ldr	r3, [r3, #16]
 8014f94:	001a      	movs	r2, r3
 8014f96:	4b0a      	ldr	r3, [pc, #40]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014f98:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8014f9a:	4b09      	ldr	r3, [pc, #36]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014f9c:	691b      	ldr	r3, [r3, #16]
 8014f9e:	2214      	movs	r2, #20
 8014fa0:	21ff      	movs	r1, #255	; 0xff
 8014fa2:	0018      	movs	r0, r3
 8014fa4:	f004 fa00 	bl	80193a8 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014fa8:	4b05      	ldr	r3, [pc, #20]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014faa:	691b      	ldr	r3, [r3, #16]
 8014fac:	2201      	movs	r2, #1
 8014fae:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8014fb0:	4b03      	ldr	r3, [pc, #12]	; (8014fc0 <LoRaMacConfirmQueueInit+0x58>)
 8014fb2:	683a      	ldr	r2, [r7, #0]
 8014fb4:	60da      	str	r2, [r3, #12]
}
 8014fb6:	46c0      	nop			; (mov r8, r8)
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	b002      	add	sp, #8
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	46c0      	nop			; (mov r8, r8)
 8014fc0:	20000c98 	.word	0x20000c98
 8014fc4:	20000c80 	.word	0x20000c80

08014fc8 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d007      	beq.n	8014fe6 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8014fd6:	6879      	ldr	r1, [r7, #4]
 8014fd8:	4b05      	ldr	r3, [pc, #20]	; (8014ff0 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 8014fda:	2216      	movs	r2, #22
 8014fdc:	0018      	movs	r0, r3
 8014fde:	f004 f9a5 	bl	801932c <memcpy1>
        return true;
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	e000      	b.n	8014fe8 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 8014fe6:	2300      	movs	r3, #0
    }
}
 8014fe8:	0018      	movs	r0, r3
 8014fea:	46bd      	mov	sp, r7
 8014fec:	b002      	add	sp, #8
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	20000c80 	.word	0x20000c80

08014ff4 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b082      	sub	sp, #8
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2216      	movs	r2, #22
 8015000:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8015002:	4b02      	ldr	r3, [pc, #8]	; (801500c <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8015004:	0018      	movs	r0, r3
 8015006:	46bd      	mov	sp, r7
 8015008:	b002      	add	sp, #8
 801500a:	bd80      	pop	{r7, pc}
 801500c:	20000c80 	.word	0x20000c80

08015010 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015018:	4b17      	ldr	r3, [pc, #92]	; (8015078 <LoRaMacConfirmQueueAdd+0x68>)
 801501a:	691b      	ldr	r3, [r3, #16]
 801501c:	7d1b      	ldrb	r3, [r3, #20]
 801501e:	0018      	movs	r0, r3
 8015020:	f7ff ff53 	bl	8014eca <IsListFull>
 8015024:	1e03      	subs	r3, r0, #0
 8015026:	d001      	beq.n	801502c <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 8015028:	2300      	movs	r3, #0
 801502a:	e021      	b.n	8015070 <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801502c:	4b12      	ldr	r3, [pc, #72]	; (8015078 <LoRaMacConfirmQueueAdd+0x68>)
 801502e:	689b      	ldr	r3, [r3, #8]
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	7812      	ldrb	r2, [r2, #0]
 8015034:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015036:	4b10      	ldr	r3, [pc, #64]	; (8015078 <LoRaMacConfirmQueueAdd+0x68>)
 8015038:	689b      	ldr	r3, [r3, #8]
 801503a:	687a      	ldr	r2, [r7, #4]
 801503c:	7852      	ldrb	r2, [r2, #1]
 801503e:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015040:	4b0d      	ldr	r3, [pc, #52]	; (8015078 <LoRaMacConfirmQueueAdd+0x68>)
 8015042:	689b      	ldr	r3, [r3, #8]
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	78d2      	ldrb	r2, [r2, #3]
 8015048:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 801504a:	4b0b      	ldr	r3, [pc, #44]	; (8015078 <LoRaMacConfirmQueueAdd+0x68>)
 801504c:	689b      	ldr	r3, [r3, #8]
 801504e:	2200      	movs	r2, #0
 8015050:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8015052:	4b09      	ldr	r3, [pc, #36]	; (8015078 <LoRaMacConfirmQueueAdd+0x68>)
 8015054:	691b      	ldr	r3, [r3, #16]
 8015056:	7d1a      	ldrb	r2, [r3, #20]
 8015058:	3201      	adds	r2, #1
 801505a:	b2d2      	uxtb	r2, r2
 801505c:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801505e:	4b06      	ldr	r3, [pc, #24]	; (8015078 <LoRaMacConfirmQueueAdd+0x68>)
 8015060:	689b      	ldr	r3, [r3, #8]
 8015062:	0018      	movs	r0, r3
 8015064:	f7ff ff08 	bl	8014e78 <IncreaseBufferPointer>
 8015068:	0002      	movs	r2, r0
 801506a:	4b03      	ldr	r3, [pc, #12]	; (8015078 <LoRaMacConfirmQueueAdd+0x68>)
 801506c:	609a      	str	r2, [r3, #8]

    return true;
 801506e:	2301      	movs	r3, #1
}
 8015070:	0018      	movs	r0, r3
 8015072:	46bd      	mov	sp, r7
 8015074:	b002      	add	sp, #8
 8015076:	bd80      	pop	{r7, pc}
 8015078:	20000c98 	.word	0x20000c98

0801507c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801507c:	b580      	push	{r7, lr}
 801507e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015080:	4b0d      	ldr	r3, [pc, #52]	; (80150b8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015082:	691b      	ldr	r3, [r3, #16]
 8015084:	7d1b      	ldrb	r3, [r3, #20]
 8015086:	0018      	movs	r0, r3
 8015088:	f7ff ff0e 	bl	8014ea8 <IsListEmpty>
 801508c:	1e03      	subs	r3, r0, #0
 801508e:	d001      	beq.n	8015094 <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 8015090:	2300      	movs	r3, #0
 8015092:	e00e      	b.n	80150b2 <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8015094:	4b08      	ldr	r3, [pc, #32]	; (80150b8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015096:	691b      	ldr	r3, [r3, #16]
 8015098:	7d1a      	ldrb	r2, [r3, #20]
 801509a:	3a01      	subs	r2, #1
 801509c:	b2d2      	uxtb	r2, r2
 801509e:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80150a0:	4b05      	ldr	r3, [pc, #20]	; (80150b8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	0018      	movs	r0, r3
 80150a6:	f7ff fee7 	bl	8014e78 <IncreaseBufferPointer>
 80150aa:	0002      	movs	r2, r0
 80150ac:	4b02      	ldr	r3, [pc, #8]	; (80150b8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80150ae:	605a      	str	r2, [r3, #4]

    return true;
 80150b0:	2301      	movs	r3, #1
}
 80150b2:	0018      	movs	r0, r3
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	20000c98 	.word	0x20000c98

080150bc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b084      	sub	sp, #16
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	0002      	movs	r2, r0
 80150c4:	1dfb      	adds	r3, r7, #7
 80150c6:	701a      	strb	r2, [r3, #0]
 80150c8:	1dbb      	adds	r3, r7, #6
 80150ca:	1c0a      	adds	r2, r1, #0
 80150cc:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80150ce:	2300      	movs	r3, #0
 80150d0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 80150d2:	4b13      	ldr	r3, [pc, #76]	; (8015120 <LoRaMacConfirmQueueSetStatus+0x64>)
 80150d4:	691b      	ldr	r3, [r3, #16]
 80150d6:	7d1b      	ldrb	r3, [r3, #20]
 80150d8:	0018      	movs	r0, r3
 80150da:	f7ff fee5 	bl	8014ea8 <IsListEmpty>
 80150de:	0003      	movs	r3, r0
 80150e0:	001a      	movs	r2, r3
 80150e2:	2301      	movs	r3, #1
 80150e4:	4053      	eors	r3, r2
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d014      	beq.n	8015116 <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80150ec:	4b0c      	ldr	r3, [pc, #48]	; (8015120 <LoRaMacConfirmQueueSetStatus+0x64>)
 80150ee:	6859      	ldr	r1, [r3, #4]
 80150f0:	4b0b      	ldr	r3, [pc, #44]	; (8015120 <LoRaMacConfirmQueueSetStatus+0x64>)
 80150f2:	689a      	ldr	r2, [r3, #8]
 80150f4:	1dbb      	adds	r3, r7, #6
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	0018      	movs	r0, r3
 80150fa:	f7ff fef7 	bl	8014eec <GetElement>
 80150fe:	0003      	movs	r3, r0
 8015100:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d006      	beq.n	8015116 <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	1dfa      	adds	r2, r7, #7
 801510c:	7812      	ldrb	r2, [r2, #0]
 801510e:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	2201      	movs	r2, #1
 8015114:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8015116:	46c0      	nop			; (mov r8, r8)
 8015118:	46bd      	mov	sp, r7
 801511a:	b004      	add	sp, #16
 801511c:	bd80      	pop	{r7, pc}
 801511e:	46c0      	nop			; (mov r8, r8)
 8015120:	20000c98 	.word	0x20000c98

08015124 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b084      	sub	sp, #16
 8015128:	af00      	add	r7, sp, #0
 801512a:	0002      	movs	r2, r0
 801512c:	1dfb      	adds	r3, r7, #7
 801512e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8015130:	2300      	movs	r3, #0
 8015132:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015134:	4b11      	ldr	r3, [pc, #68]	; (801517c <LoRaMacConfirmQueueGetStatus+0x58>)
 8015136:	691b      	ldr	r3, [r3, #16]
 8015138:	7d1b      	ldrb	r3, [r3, #20]
 801513a:	0018      	movs	r0, r3
 801513c:	f7ff feb4 	bl	8014ea8 <IsListEmpty>
 8015140:	0003      	movs	r3, r0
 8015142:	001a      	movs	r2, r3
 8015144:	2301      	movs	r3, #1
 8015146:	4053      	eors	r3, r2
 8015148:	b2db      	uxtb	r3, r3
 801514a:	2b00      	cmp	r3, #0
 801514c:	d010      	beq.n	8015170 <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801514e:	4b0b      	ldr	r3, [pc, #44]	; (801517c <LoRaMacConfirmQueueGetStatus+0x58>)
 8015150:	6859      	ldr	r1, [r3, #4]
 8015152:	4b0a      	ldr	r3, [pc, #40]	; (801517c <LoRaMacConfirmQueueGetStatus+0x58>)
 8015154:	689a      	ldr	r2, [r3, #8]
 8015156:	1dfb      	adds	r3, r7, #7
 8015158:	781b      	ldrb	r3, [r3, #0]
 801515a:	0018      	movs	r0, r3
 801515c:	f7ff fec6 	bl	8014eec <GetElement>
 8015160:	0003      	movs	r3, r0
 8015162:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d002      	beq.n	8015170 <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	785b      	ldrb	r3, [r3, #1]
 801516e:	e000      	b.n	8015172 <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015170:	2301      	movs	r3, #1
}
 8015172:	0018      	movs	r0, r3
 8015174:	46bd      	mov	sp, r7
 8015176:	b004      	add	sp, #16
 8015178:	bd80      	pop	{r7, pc}
 801517a:	46c0      	nop			; (mov r8, r8)
 801517c:	20000c98 	.word	0x20000c98

08015180 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af00      	add	r7, sp, #0
 8015186:	0002      	movs	r2, r0
 8015188:	1dfb      	adds	r3, r7, #7
 801518a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801518c:	4b18      	ldr	r3, [pc, #96]	; (80151f0 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 801518e:	685b      	ldr	r3, [r3, #4]
 8015190:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8015192:	4b17      	ldr	r3, [pc, #92]	; (80151f0 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015194:	691b      	ldr	r3, [r3, #16]
 8015196:	1dfa      	adds	r2, r7, #7
 8015198:	7812      	ldrb	r2, [r2, #0]
 801519a:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 801519c:	4b14      	ldr	r3, [pc, #80]	; (80151f0 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 801519e:	691b      	ldr	r3, [r3, #16]
 80151a0:	7d1b      	ldrb	r3, [r3, #20]
 80151a2:	0018      	movs	r0, r3
 80151a4:	f7ff fe80 	bl	8014ea8 <IsListEmpty>
 80151a8:	0003      	movs	r3, r0
 80151aa:	001a      	movs	r2, r3
 80151ac:	2301      	movs	r3, #1
 80151ae:	4053      	eors	r3, r2
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d018      	beq.n	80151e8 <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	1dfa      	adds	r2, r7, #7
 80151ba:	7812      	ldrb	r2, [r2, #0]
 80151bc:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	78db      	ldrb	r3, [r3, #3]
 80151c2:	2201      	movs	r2, #1
 80151c4:	4053      	eors	r3, r2
 80151c6:	b2db      	uxtb	r3, r3
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d002      	beq.n	80151d2 <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2201      	movs	r2, #1
 80151d0:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	0018      	movs	r0, r3
 80151d6:	f7ff fe4f 	bl	8014e78 <IncreaseBufferPointer>
 80151da:	0003      	movs	r3, r0
 80151dc:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80151de:	4b04      	ldr	r3, [pc, #16]	; (80151f0 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80151e0:	689b      	ldr	r3, [r3, #8]
 80151e2:	68fa      	ldr	r2, [r7, #12]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d1e6      	bne.n	80151b6 <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 80151e8:	46c0      	nop			; (mov r8, r8)
 80151ea:	46bd      	mov	sp, r7
 80151ec:	b004      	add	sp, #16
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	20000c98 	.word	0x20000c98

080151f4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b082      	sub	sp, #8
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	0002      	movs	r2, r0
 80151fc:	1dfb      	adds	r3, r7, #7
 80151fe:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8015200:	4b08      	ldr	r3, [pc, #32]	; (8015224 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015202:	6859      	ldr	r1, [r3, #4]
 8015204:	4b07      	ldr	r3, [pc, #28]	; (8015224 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015206:	689a      	ldr	r2, [r3, #8]
 8015208:	1dfb      	adds	r3, r7, #7
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	0018      	movs	r0, r3
 801520e:	f7ff fe6d 	bl	8014eec <GetElement>
 8015212:	1e03      	subs	r3, r0, #0
 8015214:	d001      	beq.n	801521a <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 8015216:	2301      	movs	r3, #1
 8015218:	e000      	b.n	801521c <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 801521a:	2300      	movs	r3, #0
}
 801521c:	0018      	movs	r0, r3
 801521e:	46bd      	mov	sp, r7
 8015220:	b002      	add	sp, #8
 8015222:	bd80      	pop	{r7, pc}
 8015224:	20000c98 	.word	0x20000c98

08015228 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8015230:	4b2d      	ldr	r3, [pc, #180]	; (80152e8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015232:	691a      	ldr	r2, [r3, #16]
 8015234:	230e      	movs	r3, #14
 8015236:	18fb      	adds	r3, r7, r3
 8015238:	7d12      	ldrb	r2, [r2, #20]
 801523a:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 801523c:	230d      	movs	r3, #13
 801523e:	18fb      	adds	r3, r7, r3
 8015240:	2200      	movs	r2, #0
 8015242:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8015244:	230f      	movs	r3, #15
 8015246:	18fb      	adds	r3, r7, r3
 8015248:	2200      	movs	r2, #0
 801524a:	701a      	strb	r2, [r3, #0]
 801524c:	e03f      	b.n	80152ce <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801524e:	4b26      	ldr	r3, [pc, #152]	; (80152e8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015250:	685b      	ldr	r3, [r3, #4]
 8015252:	781a      	ldrb	r2, [r3, #0]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015258:	4b23      	ldr	r3, [pc, #140]	; (80152e8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801525a:	685b      	ldr	r3, [r3, #4]
 801525c:	785a      	ldrb	r2, [r3, #1]
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015262:	4b21      	ldr	r3, [pc, #132]	; (80152e8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015264:	685a      	ldr	r2, [r3, #4]
 8015266:	210d      	movs	r1, #13
 8015268:	187b      	adds	r3, r7, r1
 801526a:	7892      	ldrb	r2, [r2, #2]
 801526c:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 801526e:	187b      	adds	r3, r7, r1
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d006      	beq.n	8015284 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015276:	4b1c      	ldr	r3, [pc, #112]	; (80152e8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	689b      	ldr	r3, [r3, #8]
 801527c:	687a      	ldr	r2, [r7, #4]
 801527e:	0010      	movs	r0, r2
 8015280:	4798      	blx	r3
 8015282:	e00f      	b.n	80152a4 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015284:	4b18      	ldr	r3, [pc, #96]	; (80152e8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	781a      	ldrb	r2, [r3, #0]
 801528a:	2108      	movs	r1, #8
 801528c:	187b      	adds	r3, r7, r1
 801528e:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015290:	4b15      	ldr	r3, [pc, #84]	; (80152e8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	785a      	ldrb	r2, [r3, #1]
 8015296:	187b      	adds	r3, r7, r1
 8015298:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801529a:	4b13      	ldr	r3, [pc, #76]	; (80152e8 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801529c:	685b      	ldr	r3, [r3, #4]
 801529e:	78da      	ldrb	r2, [r3, #3]
 80152a0:	187b      	adds	r3, r7, r1
 80152a2:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80152a4:	f7ff feea 	bl	801507c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80152a8:	230d      	movs	r3, #13
 80152aa:	18fb      	adds	r3, r7, r3
 80152ac:	781b      	ldrb	r3, [r3, #0]
 80152ae:	2201      	movs	r2, #1
 80152b0:	4053      	eors	r3, r2
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d004      	beq.n	80152c2 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80152b8:	2308      	movs	r3, #8
 80152ba:	18fb      	adds	r3, r7, r3
 80152bc:	0018      	movs	r0, r3
 80152be:	f7ff fea7 	bl	8015010 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80152c2:	210f      	movs	r1, #15
 80152c4:	187b      	adds	r3, r7, r1
 80152c6:	781a      	ldrb	r2, [r3, #0]
 80152c8:	187b      	adds	r3, r7, r1
 80152ca:	3201      	adds	r2, #1
 80152cc:	701a      	strb	r2, [r3, #0]
 80152ce:	230f      	movs	r3, #15
 80152d0:	18fa      	adds	r2, r7, r3
 80152d2:	230e      	movs	r3, #14
 80152d4:	18fb      	adds	r3, r7, r3
 80152d6:	7812      	ldrb	r2, [r2, #0]
 80152d8:	781b      	ldrb	r3, [r3, #0]
 80152da:	429a      	cmp	r2, r3
 80152dc:	d3b7      	bcc.n	801524e <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80152de:	46c0      	nop			; (mov r8, r8)
 80152e0:	46c0      	nop			; (mov r8, r8)
 80152e2:	46bd      	mov	sp, r7
 80152e4:	b004      	add	sp, #16
 80152e6:	bd80      	pop	{r7, pc}
 80152e8:	20000c98 	.word	0x20000c98

080152ec <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80152f0:	4b02      	ldr	r3, [pc, #8]	; (80152fc <LoRaMacConfirmQueueGetCnt+0x10>)
 80152f2:	691b      	ldr	r3, [r3, #16]
 80152f4:	7d1b      	ldrb	r3, [r3, #20]
}
 80152f6:	0018      	movs	r0, r3
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	20000c98 	.word	0x20000c98

08015300 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015300:	b580      	push	{r7, lr}
 8015302:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015304:	4b06      	ldr	r3, [pc, #24]	; (8015320 <LoRaMacConfirmQueueIsFull+0x20>)
 8015306:	691b      	ldr	r3, [r3, #16]
 8015308:	7d1b      	ldrb	r3, [r3, #20]
 801530a:	0018      	movs	r0, r3
 801530c:	f7ff fddd 	bl	8014eca <IsListFull>
 8015310:	1e03      	subs	r3, r0, #0
 8015312:	d001      	beq.n	8015318 <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 8015314:	2301      	movs	r3, #1
 8015316:	e000      	b.n	801531a <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 8015318:	2300      	movs	r3, #0
    }
}
 801531a:	0018      	movs	r0, r3
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	20000c98 	.word	0x20000c98

08015324 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015324:	b590      	push	{r4, r7, lr}
 8015326:	b08f      	sub	sp, #60	; 0x3c
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	0008      	movs	r0, r1
 801532e:	0011      	movs	r1, r2
 8015330:	607b      	str	r3, [r7, #4]
 8015332:	230a      	movs	r3, #10
 8015334:	18fb      	adds	r3, r7, r3
 8015336:	1c02      	adds	r2, r0, #0
 8015338:	801a      	strh	r2, [r3, #0]
 801533a:	2309      	movs	r3, #9
 801533c:	18fb      	adds	r3, r7, r3
 801533e:	1c0a      	adds	r2, r1, #0
 8015340:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d101      	bne.n	801534c <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015348:	230a      	movs	r3, #10
 801534a:	e0ae      	b.n	80154aa <PayloadEncrypt+0x186>
    }

    uint8_t bufferIndex = 0;
 801534c:	2337      	movs	r3, #55	; 0x37
 801534e:	18fb      	adds	r3, r7, r3
 8015350:	2200      	movs	r2, #0
 8015352:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8015354:	2334      	movs	r3, #52	; 0x34
 8015356:	18fb      	adds	r3, r7, r3
 8015358:	2201      	movs	r2, #1
 801535a:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 801535c:	2320      	movs	r3, #32
 801535e:	18fb      	adds	r3, r7, r3
 8015360:	2200      	movs	r2, #0
 8015362:	601a      	str	r2, [r3, #0]
 8015364:	3304      	adds	r3, #4
 8015366:	220c      	movs	r2, #12
 8015368:	2100      	movs	r1, #0
 801536a:	0018      	movs	r0, r3
 801536c:	f008 fd35 	bl	801ddda <memset>
    uint8_t aBlock[16] = { 0 };
 8015370:	2410      	movs	r4, #16
 8015372:	193b      	adds	r3, r7, r4
 8015374:	2200      	movs	r2, #0
 8015376:	601a      	str	r2, [r3, #0]
 8015378:	3304      	adds	r3, #4
 801537a:	220c      	movs	r2, #12
 801537c:	2100      	movs	r1, #0
 801537e:	0018      	movs	r0, r3
 8015380:	f008 fd2b 	bl	801ddda <memset>

    aBlock[0] = 0x01;
 8015384:	0021      	movs	r1, r4
 8015386:	187b      	adds	r3, r7, r1
 8015388:	2201      	movs	r2, #1
 801538a:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 801538c:	187a      	adds	r2, r7, r1
 801538e:	2340      	movs	r3, #64	; 0x40
 8015390:	2008      	movs	r0, #8
 8015392:	4684      	mov	ip, r0
 8015394:	44bc      	add	ip, r7
 8015396:	4463      	add	r3, ip
 8015398:	781b      	ldrb	r3, [r3, #0]
 801539a:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	b2da      	uxtb	r2, r3
 80153a0:	187b      	adds	r3, r7, r1
 80153a2:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	0a1b      	lsrs	r3, r3, #8
 80153a8:	b2da      	uxtb	r2, r3
 80153aa:	187b      	adds	r3, r7, r1
 80153ac:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	0c1b      	lsrs	r3, r3, #16
 80153b2:	b2da      	uxtb	r2, r3
 80153b4:	187b      	adds	r3, r7, r1
 80153b6:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	0e1b      	lsrs	r3, r3, #24
 80153bc:	b2da      	uxtb	r2, r3
 80153be:	187b      	adds	r3, r7, r1
 80153c0:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 80153c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153c4:	b2da      	uxtb	r2, r3
 80153c6:	187b      	adds	r3, r7, r1
 80153c8:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80153ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153cc:	0a1b      	lsrs	r3, r3, #8
 80153ce:	b2da      	uxtb	r2, r3
 80153d0:	187b      	adds	r3, r7, r1
 80153d2:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80153d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153d6:	0c1b      	lsrs	r3, r3, #16
 80153d8:	b2da      	uxtb	r2, r3
 80153da:	187b      	adds	r3, r7, r1
 80153dc:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80153de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153e0:	0e1b      	lsrs	r3, r3, #24
 80153e2:	b2da      	uxtb	r2, r3
 80153e4:	187b      	adds	r3, r7, r1
 80153e6:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 80153e8:	e058      	b.n	801549c <PayloadEncrypt+0x178>
    {
        aBlock[15] = ctr & 0xFF;
 80153ea:	2134      	movs	r1, #52	; 0x34
 80153ec:	187b      	adds	r3, r7, r1
 80153ee:	881b      	ldrh	r3, [r3, #0]
 80153f0:	b2da      	uxtb	r2, r3
 80153f2:	2010      	movs	r0, #16
 80153f4:	183b      	adds	r3, r7, r0
 80153f6:	73da      	strb	r2, [r3, #15]
        ctr++;
 80153f8:	187b      	adds	r3, r7, r1
 80153fa:	881a      	ldrh	r2, [r3, #0]
 80153fc:	187b      	adds	r3, r7, r1
 80153fe:	3201      	adds	r2, #1
 8015400:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015402:	2320      	movs	r3, #32
 8015404:	18f9      	adds	r1, r7, r3
 8015406:	2309      	movs	r3, #9
 8015408:	18fb      	adds	r3, r7, r3
 801540a:	781a      	ldrb	r2, [r3, #0]
 801540c:	1838      	adds	r0, r7, r0
 801540e:	000b      	movs	r3, r1
 8015410:	2110      	movs	r1, #16
 8015412:	f7f8 fa74 	bl	800d8fe <SecureElementAesEncrypt>
 8015416:	1e03      	subs	r3, r0, #0
 8015418:	d001      	beq.n	801541e <PayloadEncrypt+0xfa>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801541a:	230f      	movs	r3, #15
 801541c:	e045      	b.n	80154aa <PayloadEncrypt+0x186>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801541e:	2333      	movs	r3, #51	; 0x33
 8015420:	18fb      	adds	r3, r7, r3
 8015422:	2200      	movs	r2, #0
 8015424:	701a      	strb	r2, [r3, #0]
 8015426:	e01f      	b.n	8015468 <PayloadEncrypt+0x144>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015428:	2037      	movs	r0, #55	; 0x37
 801542a:	183b      	adds	r3, r7, r0
 801542c:	781a      	ldrb	r2, [r3, #0]
 801542e:	2433      	movs	r4, #51	; 0x33
 8015430:	193b      	adds	r3, r7, r4
 8015432:	781b      	ldrb	r3, [r3, #0]
 8015434:	18d3      	adds	r3, r2, r3
 8015436:	001a      	movs	r2, r3
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	189b      	adds	r3, r3, r2
 801543c:	7819      	ldrb	r1, [r3, #0]
 801543e:	193b      	adds	r3, r7, r4
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	2220      	movs	r2, #32
 8015444:	18ba      	adds	r2, r7, r2
 8015446:	5cd2      	ldrb	r2, [r2, r3]
 8015448:	183b      	adds	r3, r7, r0
 801544a:	7818      	ldrb	r0, [r3, #0]
 801544c:	193b      	adds	r3, r7, r4
 801544e:	781b      	ldrb	r3, [r3, #0]
 8015450:	18c3      	adds	r3, r0, r3
 8015452:	0018      	movs	r0, r3
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	181b      	adds	r3, r3, r0
 8015458:	404a      	eors	r2, r1
 801545a:	b2d2      	uxtb	r2, r2
 801545c:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801545e:	193b      	adds	r3, r7, r4
 8015460:	781a      	ldrb	r2, [r3, #0]
 8015462:	193b      	adds	r3, r7, r4
 8015464:	3201      	adds	r2, #1
 8015466:	701a      	strb	r2, [r3, #0]
 8015468:	2333      	movs	r3, #51	; 0x33
 801546a:	18fb      	adds	r3, r7, r3
 801546c:	781a      	ldrb	r2, [r3, #0]
 801546e:	230a      	movs	r3, #10
 8015470:	18fb      	adds	r3, r7, r3
 8015472:	881b      	ldrh	r3, [r3, #0]
 8015474:	b219      	sxth	r1, r3
 8015476:	2910      	cmp	r1, #16
 8015478:	dd00      	ble.n	801547c <PayloadEncrypt+0x158>
 801547a:	2310      	movs	r3, #16
 801547c:	b21b      	sxth	r3, r3
 801547e:	429a      	cmp	r2, r3
 8015480:	dbd2      	blt.n	8015428 <PayloadEncrypt+0x104>
        }
        size -= 16;
 8015482:	210a      	movs	r1, #10
 8015484:	187b      	adds	r3, r7, r1
 8015486:	881b      	ldrh	r3, [r3, #0]
 8015488:	3b10      	subs	r3, #16
 801548a:	b29a      	uxth	r2, r3
 801548c:	187b      	adds	r3, r7, r1
 801548e:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8015490:	2237      	movs	r2, #55	; 0x37
 8015492:	18bb      	adds	r3, r7, r2
 8015494:	18ba      	adds	r2, r7, r2
 8015496:	7812      	ldrb	r2, [r2, #0]
 8015498:	3210      	adds	r2, #16
 801549a:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 801549c:	230a      	movs	r3, #10
 801549e:	18fb      	adds	r3, r7, r3
 80154a0:	2200      	movs	r2, #0
 80154a2:	5e9b      	ldrsh	r3, [r3, r2]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	dca0      	bgt.n	80153ea <PayloadEncrypt+0xc6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80154a8:	2300      	movs	r3, #0
}
 80154aa:	0018      	movs	r0, r3
 80154ac:	46bd      	mov	sp, r7
 80154ae:	b00f      	add	sp, #60	; 0x3c
 80154b0:	bd90      	pop	{r4, r7, pc}

080154b2 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80154b2:	b5b0      	push	{r4, r5, r7, lr}
 80154b4:	b082      	sub	sp, #8
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	0005      	movs	r5, r0
 80154ba:	000c      	movs	r4, r1
 80154bc:	0010      	movs	r0, r2
 80154be:	0019      	movs	r1, r3
 80154c0:	1dbb      	adds	r3, r7, #6
 80154c2:	1c2a      	adds	r2, r5, #0
 80154c4:	801a      	strh	r2, [r3, #0]
 80154c6:	1d7b      	adds	r3, r7, #5
 80154c8:	1c22      	adds	r2, r4, #0
 80154ca:	701a      	strb	r2, [r3, #0]
 80154cc:	1d3b      	adds	r3, r7, #4
 80154ce:	1c02      	adds	r2, r0, #0
 80154d0:	701a      	strb	r2, [r3, #0]
 80154d2:	1cfb      	adds	r3, r7, #3
 80154d4:	1c0a      	adds	r2, r1, #0
 80154d6:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 80154d8:	6a3b      	ldr	r3, [r7, #32]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d101      	bne.n	80154e2 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80154de:	230a      	movs	r3, #10
 80154e0:	e050      	b.n	8015584 <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 80154e2:	6a3b      	ldr	r3, [r7, #32]
 80154e4:	2249      	movs	r2, #73	; 0x49
 80154e6:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80154e8:	6a3b      	ldr	r3, [r7, #32]
 80154ea:	3301      	adds	r3, #1
 80154ec:	2200      	movs	r2, #0
 80154ee:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80154f0:	6a3b      	ldr	r3, [r7, #32]
 80154f2:	3302      	adds	r3, #2
 80154f4:	2200      	movs	r2, #0
 80154f6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80154f8:	6a3b      	ldr	r3, [r7, #32]
 80154fa:	3303      	adds	r3, #3
 80154fc:	2200      	movs	r2, #0
 80154fe:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015500:	6a3b      	ldr	r3, [r7, #32]
 8015502:	3304      	adds	r3, #4
 8015504:	2200      	movs	r2, #0
 8015506:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015508:	6a3b      	ldr	r3, [r7, #32]
 801550a:	3305      	adds	r3, #5
 801550c:	1cfa      	adds	r2, r7, #3
 801550e:	7812      	ldrb	r2, [r2, #0]
 8015510:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015512:	6a3b      	ldr	r3, [r7, #32]
 8015514:	3306      	adds	r3, #6
 8015516:	69ba      	ldr	r2, [r7, #24]
 8015518:	b2d2      	uxtb	r2, r2
 801551a:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801551c:	69bb      	ldr	r3, [r7, #24]
 801551e:	0a1a      	lsrs	r2, r3, #8
 8015520:	6a3b      	ldr	r3, [r7, #32]
 8015522:	3307      	adds	r3, #7
 8015524:	b2d2      	uxtb	r2, r2
 8015526:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015528:	69bb      	ldr	r3, [r7, #24]
 801552a:	0c1a      	lsrs	r2, r3, #16
 801552c:	6a3b      	ldr	r3, [r7, #32]
 801552e:	3308      	adds	r3, #8
 8015530:	b2d2      	uxtb	r2, r2
 8015532:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015534:	69bb      	ldr	r3, [r7, #24]
 8015536:	0e1a      	lsrs	r2, r3, #24
 8015538:	6a3b      	ldr	r3, [r7, #32]
 801553a:	3309      	adds	r3, #9
 801553c:	b2d2      	uxtb	r2, r2
 801553e:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015540:	6a3b      	ldr	r3, [r7, #32]
 8015542:	330a      	adds	r3, #10
 8015544:	69fa      	ldr	r2, [r7, #28]
 8015546:	b2d2      	uxtb	r2, r2
 8015548:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801554a:	69fb      	ldr	r3, [r7, #28]
 801554c:	0a1a      	lsrs	r2, r3, #8
 801554e:	6a3b      	ldr	r3, [r7, #32]
 8015550:	330b      	adds	r3, #11
 8015552:	b2d2      	uxtb	r2, r2
 8015554:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015556:	69fb      	ldr	r3, [r7, #28]
 8015558:	0c1a      	lsrs	r2, r3, #16
 801555a:	6a3b      	ldr	r3, [r7, #32]
 801555c:	330c      	adds	r3, #12
 801555e:	b2d2      	uxtb	r2, r2
 8015560:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	0e1a      	lsrs	r2, r3, #24
 8015566:	6a3b      	ldr	r3, [r7, #32]
 8015568:	330d      	adds	r3, #13
 801556a:	b2d2      	uxtb	r2, r2
 801556c:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801556e:	6a3b      	ldr	r3, [r7, #32]
 8015570:	330e      	adds	r3, #14
 8015572:	2200      	movs	r2, #0
 8015574:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015576:	6a3b      	ldr	r3, [r7, #32]
 8015578:	330f      	adds	r3, #15
 801557a:	1dba      	adds	r2, r7, #6
 801557c:	8812      	ldrh	r2, [r2, #0]
 801557e:	b2d2      	uxtb	r2, r2
 8015580:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015582:	2300      	movs	r3, #0
}
 8015584:	0018      	movs	r0, r3
 8015586:	46bd      	mov	sp, r7
 8015588:	b002      	add	sp, #8
 801558a:	bdb0      	pop	{r4, r5, r7, pc}

0801558c <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801558c:	b5b0      	push	{r4, r5, r7, lr}
 801558e:	b08a      	sub	sp, #40	; 0x28
 8015590:	af04      	add	r7, sp, #16
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	000c      	movs	r4, r1
 8015596:	0010      	movs	r0, r2
 8015598:	0019      	movs	r1, r3
 801559a:	1cbb      	adds	r3, r7, #2
 801559c:	1c22      	adds	r2, r4, #0
 801559e:	801a      	strh	r2, [r3, #0]
 80155a0:	1c7b      	adds	r3, r7, #1
 80155a2:	1c02      	adds	r2, r0, #0
 80155a4:	701a      	strb	r2, [r3, #0]
 80155a6:	003b      	movs	r3, r7
 80155a8:	1c0a      	adds	r2, r1, #0
 80155aa:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d002      	beq.n	80155b8 <ComputeCmacB0+0x2c>
 80155b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d101      	bne.n	80155bc <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80155b8:	230a      	movs	r3, #10
 80155ba:	e02a      	b.n	8015612 <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80155bc:	1cbb      	adds	r3, r7, #2
 80155be:	881a      	ldrh	r2, [r3, #0]
 80155c0:	2380      	movs	r3, #128	; 0x80
 80155c2:	005b      	lsls	r3, r3, #1
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d901      	bls.n	80155cc <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80155c8:	230e      	movs	r3, #14
 80155ca:	e022      	b.n	8015612 <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80155cc:	2328      	movs	r3, #40	; 0x28
 80155ce:	18fb      	adds	r3, r7, r3
 80155d0:	781c      	ldrb	r4, [r3, #0]
 80155d2:	003b      	movs	r3, r7
 80155d4:	781a      	ldrb	r2, [r3, #0]
 80155d6:	1c7b      	adds	r3, r7, #1
 80155d8:	7819      	ldrb	r1, [r3, #0]
 80155da:	1cbb      	adds	r3, r7, #2
 80155dc:	8818      	ldrh	r0, [r3, #0]
 80155de:	2508      	movs	r5, #8
 80155e0:	197b      	adds	r3, r7, r5
 80155e2:	9302      	str	r3, [sp, #8]
 80155e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e6:	9301      	str	r3, [sp, #4]
 80155e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ea:	9300      	str	r3, [sp, #0]
 80155ec:	0023      	movs	r3, r4
 80155ee:	f7ff ff60 	bl	80154b2 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80155f2:	1c7b      	adds	r3, r7, #1
 80155f4:	781c      	ldrb	r4, [r3, #0]
 80155f6:	1cbb      	adds	r3, r7, #2
 80155f8:	881a      	ldrh	r2, [r3, #0]
 80155fa:	6879      	ldr	r1, [r7, #4]
 80155fc:	1978      	adds	r0, r7, r5
 80155fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015600:	9300      	str	r3, [sp, #0]
 8015602:	0023      	movs	r3, r4
 8015604:	f7f8 f918 	bl	800d838 <SecureElementComputeAesCmac>
 8015608:	1e03      	subs	r3, r0, #0
 801560a:	d001      	beq.n	8015610 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801560c:	230f      	movs	r3, #15
 801560e:	e000      	b.n	8015612 <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015610:	2300      	movs	r3, #0
}
 8015612:	0018      	movs	r0, r3
 8015614:	46bd      	mov	sp, r7
 8015616:	b006      	add	sp, #24
 8015618:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801561c <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801561c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801561e:	b0cd      	sub	sp, #308	; 0x134
 8015620:	af04      	add	r7, sp, #16
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	000c      	movs	r4, r1
 8015626:	0010      	movs	r0, r2
 8015628:	0019      	movs	r1, r3
 801562a:	4b52      	ldr	r3, [pc, #328]	; (8015774 <VerifyCmacB0+0x158>)
 801562c:	2290      	movs	r2, #144	; 0x90
 801562e:	0052      	lsls	r2, r2, #1
 8015630:	4694      	mov	ip, r2
 8015632:	44bc      	add	ip, r7
 8015634:	4463      	add	r3, ip
 8015636:	1c22      	adds	r2, r4, #0
 8015638:	801a      	strh	r2, [r3, #0]
 801563a:	4b4f      	ldr	r3, [pc, #316]	; (8015778 <VerifyCmacB0+0x15c>)
 801563c:	2290      	movs	r2, #144	; 0x90
 801563e:	0052      	lsls	r2, r2, #1
 8015640:	4694      	mov	ip, r2
 8015642:	44bc      	add	ip, r7
 8015644:	4463      	add	r3, ip
 8015646:	1c02      	adds	r2, r0, #0
 8015648:	701a      	strb	r2, [r3, #0]
 801564a:	4b4c      	ldr	r3, [pc, #304]	; (801577c <VerifyCmacB0+0x160>)
 801564c:	2290      	movs	r2, #144	; 0x90
 801564e:	0052      	lsls	r2, r2, #1
 8015650:	4694      	mov	ip, r2
 8015652:	44bc      	add	ip, r7
 8015654:	4463      	add	r3, ip
 8015656:	1c0a      	adds	r2, r1, #0
 8015658:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d101      	bne.n	8015664 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015660:	230a      	movs	r3, #10
 8015662:	e083      	b.n	801576c <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015664:	4b43      	ldr	r3, [pc, #268]	; (8015774 <VerifyCmacB0+0x158>)
 8015666:	2290      	movs	r2, #144	; 0x90
 8015668:	0052      	lsls	r2, r2, #1
 801566a:	4694      	mov	ip, r2
 801566c:	44bc      	add	ip, r7
 801566e:	4463      	add	r3, ip
 8015670:	881a      	ldrh	r2, [r3, #0]
 8015672:	2380      	movs	r3, #128	; 0x80
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	429a      	cmp	r2, r3
 8015678:	d901      	bls.n	801567e <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801567a:	230e      	movs	r3, #14
 801567c:	e076      	b.n	801576c <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801567e:	2388      	movs	r3, #136	; 0x88
 8015680:	005a      	lsls	r2, r3, #1
 8015682:	250c      	movs	r5, #12
 8015684:	197b      	adds	r3, r7, r5
 8015686:	2100      	movs	r1, #0
 8015688:	0018      	movs	r0, r3
 801568a:	f003 fe8d 	bl	80193a8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801568e:	2398      	movs	r3, #152	; 0x98
 8015690:	005b      	lsls	r3, r3, #1
 8015692:	2208      	movs	r2, #8
 8015694:	4694      	mov	ip, r2
 8015696:	44bc      	add	ip, r7
 8015698:	4463      	add	r3, ip
 801569a:	781c      	ldrb	r4, [r3, #0]
 801569c:	4b37      	ldr	r3, [pc, #220]	; (801577c <VerifyCmacB0+0x160>)
 801569e:	2290      	movs	r2, #144	; 0x90
 80156a0:	0052      	lsls	r2, r2, #1
 80156a2:	4694      	mov	ip, r2
 80156a4:	44bc      	add	ip, r7
 80156a6:	4463      	add	r3, ip
 80156a8:	781a      	ldrb	r2, [r3, #0]
 80156aa:	4b33      	ldr	r3, [pc, #204]	; (8015778 <VerifyCmacB0+0x15c>)
 80156ac:	2190      	movs	r1, #144	; 0x90
 80156ae:	0049      	lsls	r1, r1, #1
 80156b0:	468c      	mov	ip, r1
 80156b2:	44bc      	add	ip, r7
 80156b4:	4463      	add	r3, ip
 80156b6:	7819      	ldrb	r1, [r3, #0]
 80156b8:	4b2e      	ldr	r3, [pc, #184]	; (8015774 <VerifyCmacB0+0x158>)
 80156ba:	2090      	movs	r0, #144	; 0x90
 80156bc:	0040      	lsls	r0, r0, #1
 80156be:	4684      	mov	ip, r0
 80156c0:	44bc      	add	ip, r7
 80156c2:	4463      	add	r3, ip
 80156c4:	8818      	ldrh	r0, [r3, #0]
 80156c6:	197b      	adds	r3, r7, r5
 80156c8:	9302      	str	r3, [sp, #8]
 80156ca:	239c      	movs	r3, #156	; 0x9c
 80156cc:	005b      	lsls	r3, r3, #1
 80156ce:	2608      	movs	r6, #8
 80156d0:	46b4      	mov	ip, r6
 80156d2:	44bc      	add	ip, r7
 80156d4:	4463      	add	r3, ip
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	9301      	str	r3, [sp, #4]
 80156da:	239a      	movs	r3, #154	; 0x9a
 80156dc:	005b      	lsls	r3, r3, #1
 80156de:	2608      	movs	r6, #8
 80156e0:	46b4      	mov	ip, r6
 80156e2:	44bc      	add	ip, r7
 80156e4:	4463      	add	r3, ip
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	9300      	str	r3, [sp, #0]
 80156ea:	0023      	movs	r3, r4
 80156ec:	f7ff fee1 	bl	80154b2 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80156f0:	197b      	adds	r3, r7, r5
 80156f2:	3310      	adds	r3, #16
 80156f4:	4a1f      	ldr	r2, [pc, #124]	; (8015774 <VerifyCmacB0+0x158>)
 80156f6:	2190      	movs	r1, #144	; 0x90
 80156f8:	0049      	lsls	r1, r1, #1
 80156fa:	468c      	mov	ip, r1
 80156fc:	44bc      	add	ip, r7
 80156fe:	4462      	add	r2, ip
 8015700:	8812      	ldrh	r2, [r2, #0]
 8015702:	6879      	ldr	r1, [r7, #4]
 8015704:	0018      	movs	r0, r3
 8015706:	f003 fe11 	bl	801932c <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801570a:	2620      	movs	r6, #32
 801570c:	36ff      	adds	r6, #255	; 0xff
 801570e:	19bb      	adds	r3, r7, r6
 8015710:	2206      	movs	r2, #6
 8015712:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015714:	4b17      	ldr	r3, [pc, #92]	; (8015774 <VerifyCmacB0+0x158>)
 8015716:	2290      	movs	r2, #144	; 0x90
 8015718:	0052      	lsls	r2, r2, #1
 801571a:	4694      	mov	ip, r2
 801571c:	44bc      	add	ip, r7
 801571e:	4463      	add	r3, ip
 8015720:	881b      	ldrh	r3, [r3, #0]
 8015722:	3310      	adds	r3, #16
 8015724:	b299      	uxth	r1, r3
 8015726:	19bc      	adds	r4, r7, r6
 8015728:	4b13      	ldr	r3, [pc, #76]	; (8015778 <VerifyCmacB0+0x15c>)
 801572a:	2290      	movs	r2, #144	; 0x90
 801572c:	0052      	lsls	r2, r2, #1
 801572e:	4694      	mov	ip, r2
 8015730:	44bc      	add	ip, r7
 8015732:	4463      	add	r3, ip
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	229e      	movs	r2, #158	; 0x9e
 8015738:	0052      	lsls	r2, r2, #1
 801573a:	2008      	movs	r0, #8
 801573c:	4684      	mov	ip, r0
 801573e:	44bc      	add	ip, r7
 8015740:	4462      	add	r2, ip
 8015742:	6812      	ldr	r2, [r2, #0]
 8015744:	1978      	adds	r0, r7, r5
 8015746:	f7f8 f898 	bl	800d87a <SecureElementVerifyAesCmac>
 801574a:	0003      	movs	r3, r0
 801574c:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 801574e:	19bb      	adds	r3, r7, r6
 8015750:	781b      	ldrb	r3, [r3, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d101      	bne.n	801575a <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015756:	2300      	movs	r3, #0
 8015758:	e008      	b.n	801576c <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801575a:	2320      	movs	r3, #32
 801575c:	33ff      	adds	r3, #255	; 0xff
 801575e:	18fb      	adds	r3, r7, r3
 8015760:	781b      	ldrb	r3, [r3, #0]
 8015762:	2b01      	cmp	r3, #1
 8015764:	d101      	bne.n	801576a <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015766:	2301      	movs	r3, #1
 8015768:	e000      	b.n	801576c <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801576a:	230f      	movs	r3, #15
}
 801576c:	0018      	movs	r0, r3
 801576e:	46bd      	mov	sp, r7
 8015770:	b049      	add	sp, #292	; 0x124
 8015772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015774:	fffffee2 	.word	0xfffffee2
 8015778:	fffffee1 	.word	0xfffffee1
 801577c:	fffffee0 	.word	0xfffffee0

08015780 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b084      	sub	sp, #16
 8015784:	af00      	add	r7, sp, #0
 8015786:	0002      	movs	r2, r0
 8015788:	6039      	str	r1, [r7, #0]
 801578a:	1dfb      	adds	r3, r7, #7
 801578c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801578e:	230f      	movs	r3, #15
 8015790:	18fb      	adds	r3, r7, r3
 8015792:	2200      	movs	r2, #0
 8015794:	701a      	strb	r2, [r3, #0]
 8015796:	e018      	b.n	80157ca <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015798:	210f      	movs	r1, #15
 801579a:	187b      	adds	r3, r7, r1
 801579c:	781a      	ldrb	r2, [r3, #0]
 801579e:	4b10      	ldr	r3, [pc, #64]	; (80157e0 <GetKeyAddrItem+0x60>)
 80157a0:	0092      	lsls	r2, r2, #2
 80157a2:	5cd3      	ldrb	r3, [r2, r3]
 80157a4:	1dfa      	adds	r2, r7, #7
 80157a6:	7812      	ldrb	r2, [r2, #0]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d108      	bne.n	80157be <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 80157ac:	187b      	adds	r3, r7, r1
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	009a      	lsls	r2, r3, #2
 80157b2:	4b0b      	ldr	r3, [pc, #44]	; (80157e0 <GetKeyAddrItem+0x60>)
 80157b4:	18d2      	adds	r2, r2, r3
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80157ba:	2300      	movs	r3, #0
 80157bc:	e00b      	b.n	80157d6 <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80157be:	210f      	movs	r1, #15
 80157c0:	187b      	adds	r3, r7, r1
 80157c2:	781a      	ldrb	r2, [r3, #0]
 80157c4:	187b      	adds	r3, r7, r1
 80157c6:	3201      	adds	r2, #1
 80157c8:	701a      	strb	r2, [r3, #0]
 80157ca:	230f      	movs	r3, #15
 80157cc:	18fb      	adds	r3, r7, r3
 80157ce:	781b      	ldrb	r3, [r3, #0]
 80157d0:	2b01      	cmp	r3, #1
 80157d2:	d9e1      	bls.n	8015798 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80157d4:	230c      	movs	r3, #12
}
 80157d6:	0018      	movs	r0, r3
 80157d8:	46bd      	mov	sp, r7
 80157da:	b004      	add	sp, #16
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	46c0      	nop			; (mov r8, r8)
 80157e0:	200001a4 	.word	0x200001a4

080157e4 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 80157e4:	b590      	push	{r4, r7, lr}
 80157e6:	b089      	sub	sp, #36	; 0x24
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	60b9      	str	r1, [r7, #8]
 80157ec:	607a      	str	r2, [r7, #4]
 80157ee:	603b      	str	r3, [r7, #0]
 80157f0:	230f      	movs	r3, #15
 80157f2:	18fb      	adds	r3, r7, r3
 80157f4:	1c02      	adds	r2, r0, #0
 80157f6:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 80157f8:	68bb      	ldr	r3, [r7, #8]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d005      	beq.n	801580a <DeriveSessionKey10x+0x26>
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d002      	beq.n	801580a <DeriveSessionKey10x+0x26>
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d101      	bne.n	801580e <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801580a:	230a      	movs	r3, #10
 801580c:	e043      	b.n	8015896 <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 801580e:	2310      	movs	r3, #16
 8015810:	18fb      	adds	r3, r7, r3
 8015812:	2200      	movs	r2, #0
 8015814:	601a      	str	r2, [r3, #0]
 8015816:	3304      	adds	r3, #4
 8015818:	220c      	movs	r2, #12
 801581a:	2100      	movs	r1, #0
 801581c:	0018      	movs	r0, r3
 801581e:	f008 fadc 	bl	801ddda <memset>

    switch( keyID )
 8015822:	230f      	movs	r3, #15
 8015824:	18fb      	adds	r3, r7, r3
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	2b02      	cmp	r3, #2
 801582a:	d002      	beq.n	8015832 <DeriveSessionKey10x+0x4e>
 801582c:	2b03      	cmp	r3, #3
 801582e:	d005      	beq.n	801583c <DeriveSessionKey10x+0x58>
 8015830:	e009      	b.n	8015846 <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8015832:	2310      	movs	r3, #16
 8015834:	18fb      	adds	r3, r7, r3
 8015836:	2201      	movs	r2, #1
 8015838:	701a      	strb	r2, [r3, #0]
            break;
 801583a:	e006      	b.n	801584a <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801583c:	2310      	movs	r3, #16
 801583e:	18fb      	adds	r3, r7, r3
 8015840:	2202      	movs	r2, #2
 8015842:	701a      	strb	r2, [r3, #0]
            break;
 8015844:	e001      	b.n	801584a <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015846:	230b      	movs	r3, #11
 8015848:	e025      	b.n	8015896 <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 801584a:	2410      	movs	r4, #16
 801584c:	193b      	adds	r3, r7, r4
 801584e:	3301      	adds	r3, #1
 8015850:	68b9      	ldr	r1, [r7, #8]
 8015852:	2203      	movs	r2, #3
 8015854:	0018      	movs	r0, r3
 8015856:	f003 fd69 	bl	801932c <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 801585a:	193b      	adds	r3, r7, r4
 801585c:	3304      	adds	r3, #4
 801585e:	6879      	ldr	r1, [r7, #4]
 8015860:	2203      	movs	r2, #3
 8015862:	0018      	movs	r0, r3
 8015864:	f003 fd62 	bl	801932c <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8015868:	193b      	adds	r3, r7, r4
 801586a:	3307      	adds	r3, #7
 801586c:	6839      	ldr	r1, [r7, #0]
 801586e:	2202      	movs	r2, #2
 8015870:	0018      	movs	r0, r3
 8015872:	f003 fd5b 	bl	801932c <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015876:	4b0a      	ldr	r3, [pc, #40]	; (80158a0 <DeriveSessionKey10x+0xbc>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	220f      	movs	r2, #15
 801587c:	18ba      	adds	r2, r7, r2
 801587e:	7812      	ldrb	r2, [r2, #0]
 8015880:	1939      	adds	r1, r7, r4
 8015882:	6818      	ldr	r0, [r3, #0]
 8015884:	0013      	movs	r3, r2
 8015886:	2201      	movs	r2, #1
 8015888:	f7f8 f8aa 	bl	800d9e0 <SecureElementDeriveAndStoreKey>
 801588c:	1e03      	subs	r3, r0, #0
 801588e:	d001      	beq.n	8015894 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015890:	230f      	movs	r3, #15
 8015892:	e000      	b.n	8015896 <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015894:	2300      	movs	r3, #0
}
 8015896:	0018      	movs	r0, r3
 8015898:	46bd      	mov	sp, r7
 801589a:	b009      	add	sp, #36	; 0x24
 801589c:	bd90      	pop	{r4, r7, pc}
 801589e:	46c0      	nop			; (mov r8, r8)
 80158a0:	20000cac 	.word	0x20000cac

080158a4 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	0002      	movs	r2, r0
 80158ac:	6039      	str	r1, [r7, #0]
 80158ae:	1dfb      	adds	r3, r7, #7
 80158b0:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d101      	bne.n	80158bc <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80158b8:	230a      	movs	r3, #10
 80158ba:	e039      	b.n	8015930 <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 80158bc:	1dfb      	adds	r3, r7, #7
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	2b04      	cmp	r3, #4
 80158c2:	d02c      	beq.n	801591e <GetLastFcntDown+0x7a>
 80158c4:	dc31      	bgt.n	801592a <GetLastFcntDown+0x86>
 80158c6:	2b03      	cmp	r3, #3
 80158c8:	d01d      	beq.n	8015906 <GetLastFcntDown+0x62>
 80158ca:	dc2e      	bgt.n	801592a <GetLastFcntDown+0x86>
 80158cc:	2b01      	cmp	r3, #1
 80158ce:	d002      	beq.n	80158d6 <GetLastFcntDown+0x32>
 80158d0:	2b02      	cmp	r3, #2
 80158d2:	d00c      	beq.n	80158ee <GetLastFcntDown+0x4a>
 80158d4:	e029      	b.n	801592a <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80158d6:	4b18      	ldr	r3, [pc, #96]	; (8015938 <GetLastFcntDown+0x94>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	691a      	ldr	r2, [r3, #16]
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80158e0:	4b15      	ldr	r3, [pc, #84]	; (8015938 <GetLastFcntDown+0x94>)
 80158e2:	681a      	ldr	r2, [r3, #0]
 80158e4:	4b14      	ldr	r3, [pc, #80]	; (8015938 <GetLastFcntDown+0x94>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	3210      	adds	r2, #16
 80158ea:	621a      	str	r2, [r3, #32]
            break;
 80158ec:	e01f      	b.n	801592e <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80158ee:	4b12      	ldr	r3, [pc, #72]	; (8015938 <GetLastFcntDown+0x94>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	695a      	ldr	r2, [r3, #20]
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80158f8:	4b0f      	ldr	r3, [pc, #60]	; (8015938 <GetLastFcntDown+0x94>)
 80158fa:	681a      	ldr	r2, [r3, #0]
 80158fc:	4b0e      	ldr	r3, [pc, #56]	; (8015938 <GetLastFcntDown+0x94>)
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	3214      	adds	r2, #20
 8015902:	621a      	str	r2, [r3, #32]
            break;
 8015904:	e013      	b.n	801592e <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015906:	4b0c      	ldr	r3, [pc, #48]	; (8015938 <GetLastFcntDown+0x94>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	699a      	ldr	r2, [r3, #24]
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015910:	4b09      	ldr	r3, [pc, #36]	; (8015938 <GetLastFcntDown+0x94>)
 8015912:	681a      	ldr	r2, [r3, #0]
 8015914:	4b08      	ldr	r3, [pc, #32]	; (8015938 <GetLastFcntDown+0x94>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	3218      	adds	r2, #24
 801591a:	621a      	str	r2, [r3, #32]
            break;
 801591c:	e007      	b.n	801592e <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 801591e:	4b06      	ldr	r3, [pc, #24]	; (8015938 <GetLastFcntDown+0x94>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	69da      	ldr	r2, [r3, #28]
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	601a      	str	r2, [r3, #0]
            break;
 8015928:	e001      	b.n	801592e <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801592a:	2305      	movs	r3, #5
 801592c:	e000      	b.n	8015930 <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801592e:	2300      	movs	r3, #0
}
 8015930:	0018      	movs	r0, r3
 8015932:	46bd      	mov	sp, r7
 8015934:	b002      	add	sp, #8
 8015936:	bd80      	pop	{r7, pc}
 8015938:	20000cac 	.word	0x20000cac

0801593c <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b084      	sub	sp, #16
 8015940:	af00      	add	r7, sp, #0
 8015942:	0002      	movs	r2, r0
 8015944:	6039      	str	r1, [r7, #0]
 8015946:	1dfb      	adds	r3, r7, #7
 8015948:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 801594a:	2300      	movs	r3, #0
 801594c:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801594e:	230c      	movs	r3, #12
 8015950:	18fa      	adds	r2, r7, r3
 8015952:	1dfb      	adds	r3, r7, #7
 8015954:	781b      	ldrb	r3, [r3, #0]
 8015956:	0011      	movs	r1, r2
 8015958:	0018      	movs	r0, r3
 801595a:	f7ff ffa3 	bl	80158a4 <GetLastFcntDown>
 801595e:	1e03      	subs	r3, r0, #0
 8015960:	d001      	beq.n	8015966 <CheckFCntDown+0x2a>
    {
        return false;
 8015962:	2300      	movs	r3, #0
 8015964:	e009      	b.n	801597a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	683a      	ldr	r2, [r7, #0]
 801596a:	429a      	cmp	r2, r3
 801596c:	d802      	bhi.n	8015974 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 801596e:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015970:	3301      	adds	r3, #1
 8015972:	d101      	bne.n	8015978 <CheckFCntDown+0x3c>
    {
        return true;
 8015974:	2301      	movs	r3, #1
 8015976:	e000      	b.n	801597a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015978:	2300      	movs	r3, #0
    }
}
 801597a:	0018      	movs	r0, r3
 801597c:	46bd      	mov	sp, r7
 801597e:	b004      	add	sp, #16
 8015980:	bd80      	pop	{r7, pc}
	...

08015984 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	0002      	movs	r2, r0
 801598c:	6039      	str	r1, [r7, #0]
 801598e:	1dfb      	adds	r3, r7, #7
 8015990:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8015992:	1dfb      	adds	r3, r7, #7
 8015994:	781b      	ldrb	r3, [r3, #0]
 8015996:	2b04      	cmp	r3, #4
 8015998:	d017      	beq.n	80159ca <UpdateFCntDown+0x46>
 801599a:	dc1b      	bgt.n	80159d4 <UpdateFCntDown+0x50>
 801599c:	2b03      	cmp	r3, #3
 801599e:	d00f      	beq.n	80159c0 <UpdateFCntDown+0x3c>
 80159a0:	dc18      	bgt.n	80159d4 <UpdateFCntDown+0x50>
 80159a2:	2b01      	cmp	r3, #1
 80159a4:	d002      	beq.n	80159ac <UpdateFCntDown+0x28>
 80159a6:	2b02      	cmp	r3, #2
 80159a8:	d005      	beq.n	80159b6 <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 80159aa:	e013      	b.n	80159d4 <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 80159ac:	4b0d      	ldr	r3, [pc, #52]	; (80159e4 <UpdateFCntDown+0x60>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	683a      	ldr	r2, [r7, #0]
 80159b2:	611a      	str	r2, [r3, #16]
            break;
 80159b4:	e00f      	b.n	80159d6 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 80159b6:	4b0b      	ldr	r3, [pc, #44]	; (80159e4 <UpdateFCntDown+0x60>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	683a      	ldr	r2, [r7, #0]
 80159bc:	615a      	str	r2, [r3, #20]
            break;
 80159be:	e00a      	b.n	80159d6 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 80159c0:	4b08      	ldr	r3, [pc, #32]	; (80159e4 <UpdateFCntDown+0x60>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	683a      	ldr	r2, [r7, #0]
 80159c6:	619a      	str	r2, [r3, #24]
            break;
 80159c8:	e005      	b.n	80159d6 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 80159ca:	4b06      	ldr	r3, [pc, #24]	; (80159e4 <UpdateFCntDown+0x60>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	683a      	ldr	r2, [r7, #0]
 80159d0:	61da      	str	r2, [r3, #28]
            break;
 80159d2:	e000      	b.n	80159d6 <UpdateFCntDown+0x52>
            break;
 80159d4:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80159d6:	4b03      	ldr	r3, [pc, #12]	; (80159e4 <UpdateFCntDown+0x60>)
 80159d8:	685b      	ldr	r3, [r3, #4]
 80159da:	4798      	blx	r3
}
 80159dc:	46c0      	nop			; (mov r8, r8)
 80159de:	46bd      	mov	sp, r7
 80159e0:	b002      	add	sp, #8
 80159e2:	bd80      	pop	{r7, pc}
 80159e4:	20000cac 	.word	0x20000cac

080159e8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 80159ec:	4b11      	ldr	r3, [pc, #68]	; (8015a34 <ResetFCnts+0x4c>)
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	2200      	movs	r2, #0
 80159f2:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80159f4:	4b0f      	ldr	r3, [pc, #60]	; (8015a34 <ResetFCnts+0x4c>)
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	2201      	movs	r2, #1
 80159fa:	4252      	negs	r2, r2
 80159fc:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80159fe:	4b0d      	ldr	r3, [pc, #52]	; (8015a34 <ResetFCnts+0x4c>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	2201      	movs	r2, #1
 8015a04:	4252      	negs	r2, r2
 8015a06:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015a08:	4b0a      	ldr	r3, [pc, #40]	; (8015a34 <ResetFCnts+0x4c>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2201      	movs	r2, #1
 8015a0e:	4252      	negs	r2, r2
 8015a10:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015a12:	4b08      	ldr	r3, [pc, #32]	; (8015a34 <ResetFCnts+0x4c>)
 8015a14:	681a      	ldr	r2, [r3, #0]
 8015a16:	4b07      	ldr	r3, [pc, #28]	; (8015a34 <ResetFCnts+0x4c>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	3218      	adds	r2, #24
 8015a1c:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8015a1e:	4b05      	ldr	r3, [pc, #20]	; (8015a34 <ResetFCnts+0x4c>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2201      	movs	r2, #1
 8015a24:	4252      	negs	r2, r2
 8015a26:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015a28:	4b02      	ldr	r3, [pc, #8]	; (8015a34 <ResetFCnts+0x4c>)
 8015a2a:	685b      	ldr	r3, [r3, #4]
 8015a2c:	4798      	blx	r3
}
 8015a2e:	46c0      	nop			; (mov r8, r8)
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	20000cac 	.word	0x20000cac

08015a38 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	af00      	add	r7, sp, #0
    return;
 8015a3c:	46c0      	nop			; (mov r8, r8)
}
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
	...

08015a44 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b082      	sub	sp, #8
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8015a4c:	4b15      	ldr	r3, [pc, #84]	; (8015aa4 <LoRaMacCryptoInit+0x60>)
 8015a4e:	4a16      	ldr	r2, [pc, #88]	; (8015aa8 <LoRaMacCryptoInit+0x64>)
 8015a50:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d003      	beq.n	8015a60 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8015a58:	4b12      	ldr	r3, [pc, #72]	; (8015aa4 <LoRaMacCryptoInit+0x60>)
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	605a      	str	r2, [r3, #4]
 8015a5e:	e002      	b.n	8015a66 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8015a60:	4b10      	ldr	r3, [pc, #64]	; (8015aa4 <LoRaMacCryptoInit+0x60>)
 8015a62:	4a12      	ldr	r2, [pc, #72]	; (8015aac <LoRaMacCryptoInit+0x68>)
 8015a64:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8015a66:	4b0f      	ldr	r3, [pc, #60]	; (8015aa4 <LoRaMacCryptoInit+0x60>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	2224      	movs	r2, #36	; 0x24
 8015a6c:	2100      	movs	r1, #0
 8015a6e:	0018      	movs	r0, r3
 8015a70:	f003 fc9a 	bl	80193a8 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8015a74:	4b0b      	ldr	r3, [pc, #44]	; (8015aa4 <LoRaMacCryptoInit+0x60>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	2201      	movs	r2, #1
 8015a7a:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8015a7c:	4b09      	ldr	r3, [pc, #36]	; (8015aa4 <LoRaMacCryptoInit+0x60>)
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	2201      	movs	r2, #1
 8015a82:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 8015a84:	4b07      	ldr	r3, [pc, #28]	; (8015aa4 <LoRaMacCryptoInit+0x60>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	2201      	movs	r2, #1
 8015a8a:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 8015a8c:	4b05      	ldr	r3, [pc, #20]	; (8015aa4 <LoRaMacCryptoInit+0x60>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	2200      	movs	r2, #0
 8015a92:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015a94:	f7ff ffa8 	bl	80159e8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015a98:	2300      	movs	r3, #0
}
 8015a9a:	0018      	movs	r0, r3
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	b002      	add	sp, #8
 8015aa0:	bd80      	pop	{r7, pc}
 8015aa2:	46c0      	nop			; (mov r8, r8)
 8015aa4:	20000cac 	.word	0x20000cac
 8015aa8:	20000cb4 	.word	0x20000cb4
 8015aac:	08015a39 	.word	0x08015a39

08015ab0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b082      	sub	sp, #8
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8015ab8:	4b04      	ldr	r3, [pc, #16]	; (8015acc <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	687a      	ldr	r2, [r7, #4]
 8015abe:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015ac0:	2300      	movs	r3, #0
}
 8015ac2:	0018      	movs	r0, r3
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	b002      	add	sp, #8
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	46c0      	nop			; (mov r8, r8)
 8015acc:	20000cac 	.word	0x20000cac

08015ad0 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b082      	sub	sp, #8
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d007      	beq.n	8015aee <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8015ade:	6879      	ldr	r1, [r7, #4]
 8015ae0:	4b05      	ldr	r3, [pc, #20]	; (8015af8 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8015ae2:	2224      	movs	r2, #36	; 0x24
 8015ae4:	0018      	movs	r0, r3
 8015ae6:	f003 fc21 	bl	801932c <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8015aea:	2300      	movs	r3, #0
 8015aec:	e000      	b.n	8015af0 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015aee:	230a      	movs	r3, #10
    }
}
 8015af0:	0018      	movs	r0, r3
 8015af2:	46bd      	mov	sp, r7
 8015af4:	b002      	add	sp, #8
 8015af6:	bd80      	pop	{r7, pc}
 8015af8:	20000cb4 	.word	0x20000cb4

08015afc <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2224      	movs	r2, #36	; 0x24
 8015b08:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8015b0a:	4b02      	ldr	r3, [pc, #8]	; (8015b14 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8015b0c:	0018      	movs	r0, r3
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	b002      	add	sp, #8
 8015b12:	bd80      	pop	{r7, pc}
 8015b14:	20000cb4 	.word	0x20000cb4

08015b18 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b082      	sub	sp, #8
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d101      	bne.n	8015b2a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b26:	230a      	movs	r3, #10
 8015b28:	e006      	b.n	8015b38 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8015b2a:	4b05      	ldr	r3, [pc, #20]	; (8015b40 <LoRaMacCryptoGetFCntUp+0x28>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	68db      	ldr	r3, [r3, #12]
 8015b30:	1c5a      	adds	r2, r3, #1
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015b36:	2300      	movs	r3, #0
}
 8015b38:	0018      	movs	r0, r3
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	b002      	add	sp, #8
 8015b3e:	bd80      	pop	{r7, pc}
 8015b40:	20000cac 	.word	0x20000cac

08015b44 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b46:	b08d      	sub	sp, #52	; 0x34
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	61ba      	str	r2, [r7, #24]
 8015b4c:	617b      	str	r3, [r7, #20]
 8015b4e:	230f      	movs	r3, #15
 8015b50:	2210      	movs	r2, #16
 8015b52:	4694      	mov	ip, r2
 8015b54:	44bc      	add	ip, r7
 8015b56:	4463      	add	r3, ip
 8015b58:	1c02      	adds	r2, r0, #0
 8015b5a:	701a      	strb	r2, [r3, #0]
 8015b5c:	230c      	movs	r3, #12
 8015b5e:	2210      	movs	r2, #16
 8015b60:	4694      	mov	ip, r2
 8015b62:	44bc      	add	ip, r7
 8015b64:	4463      	add	r3, ip
 8015b66:	1c0a      	adds	r2, r1, #0
 8015b68:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015b72:	231b      	movs	r3, #27
 8015b74:	2210      	movs	r2, #16
 8015b76:	4694      	mov	ip, r2
 8015b78:	44bc      	add	ip, r7
 8015b7a:	4463      	add	r3, ip
 8015b7c:	2213      	movs	r2, #19
 8015b7e:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d101      	bne.n	8015b8a <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b86:	230a      	movs	r3, #10
 8015b88:	e06b      	b.n	8015c62 <LoRaMacCryptoGetFCntDown+0x11e>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015b8a:	221b      	movs	r2, #27
 8015b8c:	2110      	movs	r1, #16
 8015b8e:	187b      	adds	r3, r7, r1
 8015b90:	189e      	adds	r6, r3, r2
 8015b92:	2314      	movs	r3, #20
 8015b94:	187a      	adds	r2, r7, r1
 8015b96:	18d2      	adds	r2, r2, r3
 8015b98:	230f      	movs	r3, #15
 8015b9a:	2010      	movs	r0, #16
 8015b9c:	4684      	mov	ip, r0
 8015b9e:	44bc      	add	ip, r7
 8015ba0:	4463      	add	r3, ip
 8015ba2:	781b      	ldrb	r3, [r3, #0]
 8015ba4:	0011      	movs	r1, r2
 8015ba6:	0018      	movs	r0, r3
 8015ba8:	f7ff fe7c 	bl	80158a4 <GetLastFcntDown>
 8015bac:	0003      	movs	r3, r0
 8015bae:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015bb0:	221b      	movs	r2, #27
 8015bb2:	2110      	movs	r1, #16
 8015bb4:	187b      	adds	r3, r7, r1
 8015bb6:	189b      	adds	r3, r3, r2
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d003      	beq.n	8015bc6 <LoRaMacCryptoGetFCntDown+0x82>
    {
        return cryptoStatus;
 8015bbe:	187b      	adds	r3, r7, r1
 8015bc0:	189b      	adds	r3, r3, r2
 8015bc2:	781b      	ldrb	r3, [r3, #0]
 8015bc4:	e04d      	b.n	8015c62 <LoRaMacCryptoGetFCntDown+0x11e>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8015bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bc8:	3301      	adds	r3, #1
 8015bca:	d103      	bne.n	8015bd4 <LoRaMacCryptoGetFCntDown+0x90>
    {
        *currentDown = frameFcnt;
 8015bcc:	697b      	ldr	r3, [r7, #20]
 8015bce:	69ba      	ldr	r2, [r7, #24]
 8015bd0:	601a      	str	r2, [r3, #0]
 8015bd2:	e020      	b.n	8015c16 <LoRaMacCryptoGetFCntDown+0xd2>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd6:	041b      	lsls	r3, r3, #16
 8015bd8:	0c1b      	lsrs	r3, r3, #16
 8015bda:	69ba      	ldr	r2, [r7, #24]
 8015bdc:	1ad3      	subs	r3, r2, r3
 8015bde:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8015be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	dd05      	ble.n	8015bf2 <LoRaMacCryptoGetFCntDown+0xae>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bea:	18d2      	adds	r2, r2, r3
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	601a      	str	r2, [r3, #0]
 8015bf0:	e011      	b.n	8015c16 <LoRaMacCryptoGetFCntDown+0xd2>
        }
        else if( fCntDiff == 0 )
 8015bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d104      	bne.n	8015c02 <LoRaMacCryptoGetFCntDown+0xbe>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bfa:	697b      	ldr	r3, [r7, #20]
 8015bfc:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015bfe:	2307      	movs	r3, #7
 8015c00:	e02f      	b.n	8015c62 <LoRaMacCryptoGetFCntDown+0x11e>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c04:	0c1b      	lsrs	r3, r3, #16
 8015c06:	041a      	lsls	r2, r3, #16
 8015c08:	69bb      	ldr	r3, [r7, #24]
 8015c0a:	18d3      	adds	r3, r2, r3
 8015c0c:	2280      	movs	r2, #128	; 0x80
 8015c0e:	0252      	lsls	r2, r2, #9
 8015c10:	189a      	adds	r2, r3, r2
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015c16:	4b15      	ldr	r3, [pc, #84]	; (8015c6c <LoRaMacCryptoGetFCntDown+0x128>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	789b      	ldrb	r3, [r3, #2]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d11f      	bne.n	8015c60 <LoRaMacCryptoGetFCntDown+0x11c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	60bb      	str	r3, [r7, #8]
 8015c26:	2300      	movs	r3, #0
 8015c28:	60fb      	str	r3, [r7, #12]
 8015c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2c:	603b      	str	r3, [r7, #0]
 8015c2e:	2300      	movs	r3, #0
 8015c30:	607b      	str	r3, [r7, #4]
 8015c32:	68ba      	ldr	r2, [r7, #8]
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	6838      	ldr	r0, [r7, #0]
 8015c38:	6879      	ldr	r1, [r7, #4]
 8015c3a:	1a12      	subs	r2, r2, r0
 8015c3c:	418b      	sbcs	r3, r1
 8015c3e:	210c      	movs	r1, #12
 8015c40:	2010      	movs	r0, #16
 8015c42:	4684      	mov	ip, r0
 8015c44:	44bc      	add	ip, r7
 8015c46:	4461      	add	r1, ip
 8015c48:	8809      	ldrh	r1, [r1, #0]
 8015c4a:	b289      	uxth	r1, r1
 8015c4c:	000c      	movs	r4, r1
 8015c4e:	2100      	movs	r1, #0
 8015c50:	000d      	movs	r5, r1
 8015c52:	429d      	cmp	r5, r3
 8015c54:	dc04      	bgt.n	8015c60 <LoRaMacCryptoGetFCntDown+0x11c>
 8015c56:	d101      	bne.n	8015c5c <LoRaMacCryptoGetFCntDown+0x118>
 8015c58:	4294      	cmp	r4, r2
 8015c5a:	d801      	bhi.n	8015c60 <LoRaMacCryptoGetFCntDown+0x11c>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8015c5c:	2308      	movs	r3, #8
 8015c5e:	e000      	b.n	8015c62 <LoRaMacCryptoGetFCntDown+0x11e>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015c60:	2300      	movs	r3, #0
}
 8015c62:	0018      	movs	r0, r3
 8015c64:	46bd      	mov	sp, r7
 8015c66:	b00d      	add	sp, #52	; 0x34
 8015c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c6a:	46c0      	nop			; (mov r8, r8)
 8015c6c:	20000cac 	.word	0x20000cac

08015c70 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d101      	bne.n	8015c82 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015c7e:	230a      	movs	r3, #10
 8015c80:	e006      	b.n	8015c90 <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015c82:	4b05      	ldr	r3, [pc, #20]	; (8015c98 <LoRaMacCryptoSetMulticastReference+0x28>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	331c      	adds	r3, #28
 8015c88:	001a      	movs	r2, r3
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 8015c8e:	2300      	movs	r3, #0
}
 8015c90:	0018      	movs	r0, r3
 8015c92:	46bd      	mov	sp, r7
 8015c94:	b002      	add	sp, #8
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	20000cac 	.word	0x20000cac

08015c9c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b082      	sub	sp, #8
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	0002      	movs	r2, r0
 8015ca4:	6039      	str	r1, [r7, #0]
 8015ca6:	1dfb      	adds	r3, r7, #7
 8015ca8:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015caa:	683a      	ldr	r2, [r7, #0]
 8015cac:	1dfb      	adds	r3, r7, #7
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	0011      	movs	r1, r2
 8015cb2:	0018      	movs	r0, r3
 8015cb4:	f7f7 fd46 	bl	800d744 <SecureElementSetKey>
 8015cb8:	1e03      	subs	r3, r0, #0
 8015cba:	d001      	beq.n	8015cc0 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015cbc:	230f      	movs	r3, #15
 8015cbe:	e014      	b.n	8015cea <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 8015cc0:	1dfb      	adds	r3, r7, #7
 8015cc2:	781b      	ldrb	r3, [r3, #0]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d10f      	bne.n	8015ce8 <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015cc8:	1dfb      	adds	r3, r7, #7
 8015cca:	781b      	ldrb	r3, [r3, #0]
 8015ccc:	0018      	movs	r0, r3
 8015cce:	f000 fa79 	bl	80161c4 <LoRaMacCryptoDeriveMcRootKey>
 8015cd2:	1e03      	subs	r3, r0, #0
 8015cd4:	d001      	beq.n	8015cda <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015cd6:	230f      	movs	r3, #15
 8015cd8:	e007      	b.n	8015cea <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015cda:	2004      	movs	r0, #4
 8015cdc:	f000 faa6 	bl	801622c <LoRaMacCryptoDeriveMcKEKey>
 8015ce0:	1e03      	subs	r3, r0, #0
 8015ce2:	d001      	beq.n	8015ce8 <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ce4:	230f      	movs	r3, #15
 8015ce6:	e000      	b.n	8015cea <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015ce8:	2300      	movs	r3, #0
}
 8015cea:	0018      	movs	r0, r3
 8015cec:	46bd      	mov	sp, r7
 8015cee:	b002      	add	sp, #8
 8015cf0:	bd80      	pop	{r7, pc}
	...

08015cf4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b086      	sub	sp, #24
 8015cf8:	af02      	add	r7, sp, #8
 8015cfa:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d101      	bne.n	8015d06 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d02:	230a      	movs	r3, #10
 8015d04:	e039      	b.n	8015d7a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015d06:	230f      	movs	r3, #15
 8015d08:	18fb      	adds	r3, r7, r3
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8015d12:	2308      	movs	r3, #8
 8015d14:	18fb      	adds	r3, r7, r3
 8015d16:	0018      	movs	r0, r3
 8015d18:	f7f7 ff3e 	bl	800db98 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8015d1c:	68ba      	ldr	r2, [r7, #8]
 8015d1e:	4b19      	ldr	r3, [pc, #100]	; (8015d84 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	b292      	uxth	r2, r2
 8015d24:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015d26:	4b17      	ldr	r3, [pc, #92]	; (8015d84 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8015d2c:	4b15      	ldr	r3, [pc, #84]	; (8015d84 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	889a      	ldrh	r2, [r3, #4]
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	0018      	movs	r0, r3
 8015d3a:	f000 fca1 	bl	8016680 <LoRaMacSerializerJoinRequest>
 8015d3e:	1e03      	subs	r3, r0, #0
 8015d40:	d001      	beq.n	8015d46 <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015d42:	2311      	movs	r3, #17
 8015d44:	e019      	b.n	8015d7a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6819      	ldr	r1, [r3, #0]
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	3318      	adds	r3, #24
 8015d4e:	220f      	movs	r2, #15
 8015d50:	18ba      	adds	r2, r7, r2
 8015d52:	7812      	ldrb	r2, [r2, #0]
 8015d54:	9300      	str	r3, [sp, #0]
 8015d56:	0013      	movs	r3, r2
 8015d58:	2213      	movs	r2, #19
 8015d5a:	2000      	movs	r0, #0
 8015d5c:	f7f7 fd6c 	bl	800d838 <SecureElementComputeAesCmac>
 8015d60:	1e03      	subs	r3, r0, #0
 8015d62:	d001      	beq.n	8015d68 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015d64:	230f      	movs	r3, #15
 8015d66:	e008      	b.n	8015d7a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	0018      	movs	r0, r3
 8015d6c:	f000 fc88 	bl	8016680 <LoRaMacSerializerJoinRequest>
 8015d70:	1e03      	subs	r3, r0, #0
 8015d72:	d001      	beq.n	8015d78 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015d74:	2311      	movs	r3, #17
 8015d76:	e000      	b.n	8015d7a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015d78:	2300      	movs	r3, #0
}
 8015d7a:	0018      	movs	r0, r3
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	b004      	add	sp, #16
 8015d80:	bd80      	pop	{r7, pc}
 8015d82:	46c0      	nop			; (mov r8, r8)
 8015d84:	20000cac 	.word	0x20000cac

08015d88 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d8a:	b095      	sub	sp, #84	; 0x54
 8015d8c:	af04      	add	r7, sp, #16
 8015d8e:	60b9      	str	r1, [r7, #8]
 8015d90:	607a      	str	r2, [r7, #4]
 8015d92:	230f      	movs	r3, #15
 8015d94:	18fb      	adds	r3, r7, r3
 8015d96:	1c02      	adds	r2, r0, #0
 8015d98:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d002      	beq.n	8015da6 <LoRaMacCryptoHandleJoinAccept+0x1e>
 8015da0:	68bb      	ldr	r3, [r7, #8]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d101      	bne.n	8015daa <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015da6:	230a      	movs	r3, #10
 8015da8:	e0a7      	b.n	8015efa <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015daa:	233f      	movs	r3, #63	; 0x3f
 8015dac:	18fb      	adds	r3, r7, r3
 8015dae:	2213      	movs	r2, #19
 8015db0:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015db2:	2614      	movs	r6, #20
 8015db4:	19bb      	adds	r3, r7, r6
 8015db6:	2200      	movs	r2, #0
 8015db8:	601a      	str	r2, [r3, #0]
 8015dba:	3304      	adds	r3, #4
 8015dbc:	221d      	movs	r2, #29
 8015dbe:	2100      	movs	r1, #0
 8015dc0:	0018      	movs	r0, r3
 8015dc2:	f008 f80a 	bl	801ddda <memset>
    uint8_t versionMinor         = 0;
 8015dc6:	2313      	movs	r3, #19
 8015dc8:	18fb      	adds	r3, r7, r3
 8015dca:	2200      	movs	r2, #0
 8015dcc:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 8015dce:	4b4d      	ldr	r3, [pc, #308]	; (8015f04 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	3304      	adds	r3, #4
 8015dd4:	63bb      	str	r3, [r7, #56]	; 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 8015dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	b29c      	uxth	r4, r3
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681d      	ldr	r5, [r3, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	791b      	ldrb	r3, [r3, #4]
 8015de4:	68b9      	ldr	r1, [r7, #8]
 8015de6:	200f      	movs	r0, #15
 8015de8:	183a      	adds	r2, r7, r0
 8015dea:	7810      	ldrb	r0, [r2, #0]
 8015dec:	2213      	movs	r2, #19
 8015dee:	18ba      	adds	r2, r7, r2
 8015df0:	9202      	str	r2, [sp, #8]
 8015df2:	19ba      	adds	r2, r7, r6
 8015df4:	9201      	str	r2, [sp, #4]
 8015df6:	9300      	str	r3, [sp, #0]
 8015df8:	002b      	movs	r3, r5
 8015dfa:	0022      	movs	r2, r4
 8015dfc:	f7f7 fe45 	bl	800da8a <SecureElementProcessJoinAccept>
 8015e00:	1e03      	subs	r3, r0, #0
 8015e02:	d001      	beq.n	8015e08 <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015e04:	230f      	movs	r3, #15
 8015e06:	e078      	b.n	8015efa <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6818      	ldr	r0, [r3, #0]
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	791b      	ldrb	r3, [r3, #4]
 8015e10:	b29a      	uxth	r2, r3
 8015e12:	2314      	movs	r3, #20
 8015e14:	18fb      	adds	r3, r7, r3
 8015e16:	0019      	movs	r1, r3
 8015e18:	f003 fa88 	bl	801932c <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	0018      	movs	r0, r3
 8015e20:	f000 fa2e 	bl	8016280 <LoRaMacParserJoinAccept>
 8015e24:	1e03      	subs	r3, r0, #0
 8015e26:	d001      	beq.n	8015e2c <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015e28:	2310      	movs	r3, #16
 8015e2a:	e066      	b.n	8015efa <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 8015e2c:	253f      	movs	r5, #63	; 0x3f
 8015e2e:	197c      	adds	r4, r7, r5
 8015e30:	2000      	movs	r0, #0
 8015e32:	f000 f9c7 	bl	80161c4 <LoRaMacCryptoDeriveMcRootKey>
 8015e36:	0003      	movs	r3, r0
 8015e38:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e3a:	002a      	movs	r2, r5
 8015e3c:	18bb      	adds	r3, r7, r2
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d002      	beq.n	8015e4a <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 8015e44:	18bb      	adds	r3, r7, r2
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	e057      	b.n	8015efa <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8015e4a:	253f      	movs	r5, #63	; 0x3f
 8015e4c:	197c      	adds	r4, r7, r5
 8015e4e:	2004      	movs	r0, #4
 8015e50:	f000 f9ec 	bl	801622c <LoRaMacCryptoDeriveMcKEKey>
 8015e54:	0003      	movs	r3, r0
 8015e56:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e58:	002a      	movs	r2, r5
 8015e5a:	18bb      	adds	r3, r7, r2
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d002      	beq.n	8015e68 <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 8015e62:	18bb      	adds	r3, r7, r2
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	e048      	b.n	8015efa <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	1d99      	adds	r1, r3, #6
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	3309      	adds	r3, #9
 8015e70:	001a      	movs	r2, r3
 8015e72:	4b24      	ldr	r3, [pc, #144]	; (8015f04 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	3304      	adds	r3, #4
 8015e78:	253f      	movs	r5, #63	; 0x3f
 8015e7a:	197c      	adds	r4, r7, r5
 8015e7c:	2003      	movs	r0, #3
 8015e7e:	f7ff fcb1 	bl	80157e4 <DeriveSessionKey10x>
 8015e82:	0003      	movs	r3, r0
 8015e84:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e86:	197b      	adds	r3, r7, r5
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d002      	beq.n	8015e94 <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 8015e8e:	197b      	adds	r3, r7, r5
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	e032      	b.n	8015efa <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	1d99      	adds	r1, r3, #6
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	3309      	adds	r3, #9
 8015e9c:	001a      	movs	r2, r3
 8015e9e:	4b19      	ldr	r3, [pc, #100]	; (8015f04 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	3304      	adds	r3, #4
 8015ea4:	253f      	movs	r5, #63	; 0x3f
 8015ea6:	197c      	adds	r4, r7, r5
 8015ea8:	2002      	movs	r0, #2
 8015eaa:	f7ff fc9b 	bl	80157e4 <DeriveSessionKey10x>
 8015eae:	0003      	movs	r3, r0
 8015eb0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015eb2:	197b      	adds	r3, r7, r5
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d002      	beq.n	8015ec0 <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 8015eba:	197b      	adds	r3, r7, r5
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	e01c      	b.n	8015efa <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 8015ec0:	4b10      	ldr	r3, [pc, #64]	; (8015f04 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	2213      	movs	r2, #19
 8015ec6:	18ba      	adds	r2, r7, r2
 8015ec8:	7812      	ldrb	r2, [r2, #0]
 8015eca:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015ecc:	4b0d      	ldr	r3, [pc, #52]	; (8015f04 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015ed4:	4b0b      	ldr	r3, [pc, #44]	; (8015f04 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	2201      	movs	r2, #1
 8015eda:	4252      	negs	r2, r2
 8015edc:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015ede:	4b09      	ldr	r3, [pc, #36]	; (8015f04 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	2201      	movs	r2, #1
 8015ee4:	4252      	negs	r2, r2
 8015ee6:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015ee8:	4b06      	ldr	r3, [pc, #24]	; (8015f04 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	2201      	movs	r2, #1
 8015eee:	4252      	negs	r2, r2
 8015ef0:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015ef2:	4b04      	ldr	r3, [pc, #16]	; (8015f04 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015ef4:	685b      	ldr	r3, [r3, #4]
 8015ef6:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8015ef8:	2300      	movs	r3, #0
}
 8015efa:	0018      	movs	r0, r3
 8015efc:	46bd      	mov	sp, r7
 8015efe:	b011      	add	sp, #68	; 0x44
 8015f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f02:	46c0      	nop			; (mov r8, r8)
 8015f04:	20000cac 	.word	0x20000cac

08015f08 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f0a:	b08b      	sub	sp, #44	; 0x2c
 8015f0c:	af04      	add	r7, sp, #16
 8015f0e:	60f8      	str	r0, [r7, #12]
 8015f10:	0008      	movs	r0, r1
 8015f12:	0011      	movs	r1, r2
 8015f14:	607b      	str	r3, [r7, #4]
 8015f16:	230b      	movs	r3, #11
 8015f18:	18fb      	adds	r3, r7, r3
 8015f1a:	1c02      	adds	r2, r0, #0
 8015f1c:	701a      	strb	r2, [r3, #0]
 8015f1e:	230a      	movs	r3, #10
 8015f20:	18fb      	adds	r3, r7, r3
 8015f22:	1c0a      	adds	r2, r1, #0
 8015f24:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015f26:	2316      	movs	r3, #22
 8015f28:	18fb      	adds	r3, r7, r3
 8015f2a:	2213      	movs	r2, #19
 8015f2c:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015f2e:	2317      	movs	r3, #23
 8015f30:	18fb      	adds	r3, r7, r3
 8015f32:	2203      	movs	r2, #3
 8015f34:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d101      	bne.n	8015f40 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f3c:	230a      	movs	r3, #10
 8015f3e:	e072      	b.n	8016026 <LoRaMacCryptoSecureMessage+0x11e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8015f40:	4b3b      	ldr	r3, [pc, #236]	; (8016030 <LoRaMacCryptoSecureMessage+0x128>)
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	68db      	ldr	r3, [r3, #12]
 8015f46:	68fa      	ldr	r2, [r7, #12]
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	d201      	bcs.n	8015f50 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015f4c:	2306      	movs	r3, #6
 8015f4e:	e06a      	b.n	8016026 <LoRaMacCryptoSecureMessage+0x11e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2220      	movs	r2, #32
 8015f54:	5c9b      	ldrb	r3, [r3, r2]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d103      	bne.n	8015f62 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015f5a:	2317      	movs	r3, #23
 8015f5c:	18fb      	adds	r3, r7, r3
 8015f5e:	2202      	movs	r2, #2
 8015f60:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8015f62:	4b33      	ldr	r3, [pc, #204]	; (8016030 <LoRaMacCryptoSecureMessage+0x128>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	68db      	ldr	r3, [r3, #12]
 8015f68:	68fa      	ldr	r2, [r7, #12]
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	d91c      	bls.n	8015fa8 <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2228      	movs	r2, #40	; 0x28
 8015f76:	5c9b      	ldrb	r3, [r3, r2]
 8015f78:	b219      	sxth	r1, r3
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	689d      	ldr	r5, [r3, #8]
 8015f7e:	2616      	movs	r6, #22
 8015f80:	19bc      	adds	r4, r7, r6
 8015f82:	2317      	movs	r3, #23
 8015f84:	18fb      	adds	r3, r7, r3
 8015f86:	781a      	ldrb	r2, [r3, #0]
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	9301      	str	r3, [sp, #4]
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	9300      	str	r3, [sp, #0]
 8015f90:	002b      	movs	r3, r5
 8015f92:	f7ff f9c7 	bl	8015324 <PayloadEncrypt>
 8015f96:	0003      	movs	r3, r0
 8015f98:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015f9a:	19bb      	adds	r3, r7, r6
 8015f9c:	781b      	ldrb	r3, [r3, #0]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d002      	beq.n	8015fa8 <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 8015fa2:	19bb      	adds	r3, r7, r6
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	e03e      	b.n	8016026 <LoRaMacCryptoSecureMessage+0x11e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	0018      	movs	r0, r3
 8015fac:	f000 fc03 	bl	80167b6 <LoRaMacSerializerData>
 8015fb0:	1e03      	subs	r3, r0, #0
 8015fb2:	d001      	beq.n	8015fb8 <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015fb4:	2311      	movs	r3, #17
 8015fb6:	e036      	b.n	8016026 <LoRaMacCryptoSecureMessage+0x11e>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015fb8:	2117      	movs	r1, #23
 8015fba:	187b      	adds	r3, r7, r1
 8015fbc:	2202      	movs	r2, #2
 8015fbe:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6818      	ldr	r0, [r3, #0]
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	791b      	ldrb	r3, [r3, #4]
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	3b04      	subs	r3, #4
 8015fcc:	b29d      	uxth	r5, r3
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	689b      	ldr	r3, [r3, #8]
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	322c      	adds	r2, #44	; 0x2c
 8015fd6:	2616      	movs	r6, #22
 8015fd8:	19bc      	adds	r4, r7, r6
 8015fda:	1879      	adds	r1, r7, r1
 8015fdc:	7809      	ldrb	r1, [r1, #0]
 8015fde:	9203      	str	r2, [sp, #12]
 8015fe0:	68fa      	ldr	r2, [r7, #12]
 8015fe2:	9202      	str	r2, [sp, #8]
 8015fe4:	9301      	str	r3, [sp, #4]
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	9300      	str	r3, [sp, #0]
 8015fea:	2300      	movs	r3, #0
 8015fec:	000a      	movs	r2, r1
 8015fee:	0029      	movs	r1, r5
 8015ff0:	f7ff facc 	bl	801558c <ComputeCmacB0>
 8015ff4:	0003      	movs	r3, r0
 8015ff6:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015ff8:	19bb      	adds	r3, r7, r6
 8015ffa:	781b      	ldrb	r3, [r3, #0]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d002      	beq.n	8016006 <LoRaMacCryptoSecureMessage+0xfe>
        {
            return retval;
 8016000:	19bb      	adds	r3, r7, r6
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	e00f      	b.n	8016026 <LoRaMacCryptoSecureMessage+0x11e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	0018      	movs	r0, r3
 801600a:	f000 fbd4 	bl	80167b6 <LoRaMacSerializerData>
 801600e:	1e03      	subs	r3, r0, #0
 8016010:	d001      	beq.n	8016016 <LoRaMacCryptoSecureMessage+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016012:	2311      	movs	r3, #17
 8016014:	e007      	b.n	8016026 <LoRaMacCryptoSecureMessage+0x11e>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8016016:	4b06      	ldr	r3, [pc, #24]	; (8016030 <LoRaMacCryptoSecureMessage+0x128>)
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	68fa      	ldr	r2, [r7, #12]
 801601c:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801601e:	4b04      	ldr	r3, [pc, #16]	; (8016030 <LoRaMacCryptoSecureMessage+0x128>)
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8016024:	2300      	movs	r3, #0
}
 8016026:	0018      	movs	r0, r3
 8016028:	46bd      	mov	sp, r7
 801602a:	b007      	add	sp, #28
 801602c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801602e:	46c0      	nop			; (mov r8, r8)
 8016030:	20000cac 	.word	0x20000cac

08016034 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016036:	b08b      	sub	sp, #44	; 0x2c
 8016038:	af04      	add	r7, sp, #16
 801603a:	60b9      	str	r1, [r7, #8]
 801603c:	0011      	movs	r1, r2
 801603e:	607b      	str	r3, [r7, #4]
 8016040:	230f      	movs	r3, #15
 8016042:	18fb      	adds	r3, r7, r3
 8016044:	1c02      	adds	r2, r0, #0
 8016046:	701a      	strb	r2, [r3, #0]
 8016048:	230e      	movs	r3, #14
 801604a:	18fb      	adds	r3, r7, r3
 801604c:	1c0a      	adds	r2, r1, #0
 801604e:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8016050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016052:	2b00      	cmp	r3, #0
 8016054:	d101      	bne.n	801605a <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016056:	230a      	movs	r3, #10
 8016058:	e0ae      	b.n	80161b8 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801605a:	687a      	ldr	r2, [r7, #4]
 801605c:	230e      	movs	r3, #14
 801605e:	18fb      	adds	r3, r7, r3
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	0011      	movs	r1, r2
 8016064:	0018      	movs	r0, r3
 8016066:	f7ff fc69 	bl	801593c <CheckFCntDown>
 801606a:	0003      	movs	r3, r0
 801606c:	001a      	movs	r2, r3
 801606e:	2301      	movs	r3, #1
 8016070:	4053      	eors	r3, r2
 8016072:	b2db      	uxtb	r3, r3
 8016074:	2b00      	cmp	r3, #0
 8016076:	d001      	beq.n	801607c <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016078:	2306      	movs	r3, #6
 801607a:	e09d      	b.n	80161b8 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801607c:	2315      	movs	r3, #21
 801607e:	18fb      	adds	r3, r7, r3
 8016080:	2213      	movs	r2, #19
 8016082:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016084:	2317      	movs	r3, #23
 8016086:	18fb      	adds	r3, r7, r3
 8016088:	2203      	movs	r2, #3
 801608a:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801608c:	2314      	movs	r3, #20
 801608e:	18fb      	adds	r3, r7, r3
 8016090:	2202      	movs	r2, #2
 8016092:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016096:	0018      	movs	r0, r3
 8016098:	f000 f9e2 	bl	8016460 <LoRaMacParserData>
 801609c:	1e03      	subs	r3, r0, #0
 801609e:	d001      	beq.n	80160a4 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80160a0:	2310      	movs	r3, #16
 80160a2:	e089      	b.n	80161b8 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80160a4:	2515      	movs	r5, #21
 80160a6:	197c      	adds	r4, r7, r5
 80160a8:	2310      	movs	r3, #16
 80160aa:	18fa      	adds	r2, r7, r3
 80160ac:	230f      	movs	r3, #15
 80160ae:	18fb      	adds	r3, r7, r3
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	0011      	movs	r1, r2
 80160b4:	0018      	movs	r0, r3
 80160b6:	f7ff fb63 	bl	8015780 <GetKeyAddrItem>
 80160ba:	0003      	movs	r3, r0
 80160bc:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80160be:	197b      	adds	r3, r7, r5
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d002      	beq.n	80160cc <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 80160c6:	197b      	adds	r3, r7, r5
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	e075      	b.n	80161b8 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80160cc:	693a      	ldr	r2, [r7, #16]
 80160ce:	2317      	movs	r3, #23
 80160d0:	18fb      	adds	r3, r7, r3
 80160d2:	7852      	ldrb	r2, [r2, #1]
 80160d4:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 80160d6:	693a      	ldr	r2, [r7, #16]
 80160d8:	2314      	movs	r3, #20
 80160da:	18fb      	adds	r3, r7, r3
 80160dc:	7892      	ldrb	r2, [r2, #2]
 80160de:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80160e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e2:	689b      	ldr	r3, [r3, #8]
 80160e4:	68ba      	ldr	r2, [r7, #8]
 80160e6:	429a      	cmp	r2, r3
 80160e8:	d001      	beq.n	80160ee <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80160ea:	2302      	movs	r3, #2
 80160ec:	e064      	b.n	80161b8 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80160ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160f0:	7b1b      	ldrb	r3, [r3, #12]
 80160f2:	069b      	lsls	r3, r3, #26
 80160f4:	0fdb      	lsrs	r3, r3, #31
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	001a      	movs	r2, r3
 80160fa:	2016      	movs	r0, #22
 80160fc:	183b      	adds	r3, r7, r0
 80160fe:	1e51      	subs	r1, r2, #1
 8016100:	418a      	sbcs	r2, r1
 8016102:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8016104:	4b2e      	ldr	r3, [pc, #184]	; (80161c0 <LoRaMacCryptoUnsecureMessage+0x18c>)
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	789b      	ldrb	r3, [r3, #2]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d102      	bne.n	8016114 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801610e:	183b      	adds	r3, r7, r0
 8016110:	2200      	movs	r2, #0
 8016112:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016116:	6818      	ldr	r0, [r3, #0]
 8016118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801611a:	791b      	ldrb	r3, [r3, #4]
 801611c:	b29b      	uxth	r3, r3
 801611e:	3b04      	subs	r3, #4
 8016120:	b299      	uxth	r1, r3
 8016122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016126:	2615      	movs	r6, #21
 8016128:	19bc      	adds	r4, r7, r6
 801612a:	2216      	movs	r2, #22
 801612c:	18ba      	adds	r2, r7, r2
 801612e:	7815      	ldrb	r5, [r2, #0]
 8016130:	2214      	movs	r2, #20
 8016132:	18ba      	adds	r2, r7, r2
 8016134:	7812      	ldrb	r2, [r2, #0]
 8016136:	9303      	str	r3, [sp, #12]
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	9302      	str	r3, [sp, #8]
 801613c:	68bb      	ldr	r3, [r7, #8]
 801613e:	9301      	str	r3, [sp, #4]
 8016140:	2301      	movs	r3, #1
 8016142:	9300      	str	r3, [sp, #0]
 8016144:	002b      	movs	r3, r5
 8016146:	f7ff fa69 	bl	801561c <VerifyCmacB0>
 801614a:	0003      	movs	r3, r0
 801614c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801614e:	19bb      	adds	r3, r7, r6
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d002      	beq.n	801615c <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 8016156:	19bb      	adds	r3, r7, r6
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	e02d      	b.n	80161b8 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615e:	2220      	movs	r2, #32
 8016160:	5c9b      	ldrb	r3, [r3, r2]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d103      	bne.n	801616e <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016166:	2317      	movs	r3, #23
 8016168:	18fb      	adds	r3, r7, r3
 801616a:	2202      	movs	r2, #2
 801616c:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016170:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016174:	2228      	movs	r2, #40	; 0x28
 8016176:	5c9b      	ldrb	r3, [r3, r2]
 8016178:	b219      	sxth	r1, r3
 801617a:	2615      	movs	r6, #21
 801617c:	19bc      	adds	r4, r7, r6
 801617e:	68bd      	ldr	r5, [r7, #8]
 8016180:	2317      	movs	r3, #23
 8016182:	18fb      	adds	r3, r7, r3
 8016184:	781a      	ldrb	r2, [r3, #0]
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	9301      	str	r3, [sp, #4]
 801618a:	2301      	movs	r3, #1
 801618c:	9300      	str	r3, [sp, #0]
 801618e:	002b      	movs	r3, r5
 8016190:	f7ff f8c8 	bl	8015324 <PayloadEncrypt>
 8016194:	0003      	movs	r3, r0
 8016196:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016198:	19bb      	adds	r3, r7, r6
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d002      	beq.n	80161a6 <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 80161a0:	19bb      	adds	r3, r7, r6
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	e008      	b.n	80161b8 <LoRaMacCryptoUnsecureMessage+0x184>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80161a6:	687a      	ldr	r2, [r7, #4]
 80161a8:	230e      	movs	r3, #14
 80161aa:	18fb      	adds	r3, r7, r3
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	0011      	movs	r1, r2
 80161b0:	0018      	movs	r0, r3
 80161b2:	f7ff fbe7 	bl	8015984 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80161b6:	2300      	movs	r3, #0
}
 80161b8:	0018      	movs	r0, r3
 80161ba:	46bd      	mov	sp, r7
 80161bc:	b007      	add	sp, #28
 80161be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161c0:	20000cac 	.word	0x20000cac

080161c4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 80161c4:	b590      	push	{r4, r7, lr}
 80161c6:	b087      	sub	sp, #28
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	0002      	movs	r2, r0
 80161cc:	1dfb      	adds	r3, r7, #7
 80161ce:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80161d0:	1dfb      	adds	r3, r7, #7
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d001      	beq.n	80161dc <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80161d8:	230b      	movs	r3, #11
 80161da:	e020      	b.n	801621e <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 80161dc:	2408      	movs	r4, #8
 80161de:	193b      	adds	r3, r7, r4
 80161e0:	2200      	movs	r2, #0
 80161e2:	601a      	str	r2, [r3, #0]
 80161e4:	3304      	adds	r3, #4
 80161e6:	220c      	movs	r2, #12
 80161e8:	2100      	movs	r1, #0
 80161ea:	0018      	movs	r0, r3
 80161ec:	f007 fdf5 	bl	801ddda <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 80161f0:	4b0d      	ldr	r3, [pc, #52]	; (8016228 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	789b      	ldrb	r3, [r3, #2]
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	d102      	bne.n	8016200 <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 80161fa:	193b      	adds	r3, r7, r4
 80161fc:	2220      	movs	r2, #32
 80161fe:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016200:	4b09      	ldr	r3, [pc, #36]	; (8016228 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	1dfa      	adds	r2, r7, #7
 8016206:	7812      	ldrb	r2, [r2, #0]
 8016208:	2108      	movs	r1, #8
 801620a:	1879      	adds	r1, r7, r1
 801620c:	6818      	ldr	r0, [r3, #0]
 801620e:	2304      	movs	r3, #4
 8016210:	f7f7 fbe6 	bl	800d9e0 <SecureElementDeriveAndStoreKey>
 8016214:	1e03      	subs	r3, r0, #0
 8016216:	d001      	beq.n	801621c <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016218:	230f      	movs	r3, #15
 801621a:	e000      	b.n	801621e <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801621c:	2300      	movs	r3, #0
}
 801621e:	0018      	movs	r0, r3
 8016220:	46bd      	mov	sp, r7
 8016222:	b007      	add	sp, #28
 8016224:	bd90      	pop	{r4, r7, pc}
 8016226:	46c0      	nop			; (mov r8, r8)
 8016228:	20000cac 	.word	0x20000cac

0801622c <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801622c:	b590      	push	{r4, r7, lr}
 801622e:	b087      	sub	sp, #28
 8016230:	af00      	add	r7, sp, #0
 8016232:	0002      	movs	r2, r0
 8016234:	1dfb      	adds	r3, r7, #7
 8016236:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016238:	1dfb      	adds	r3, r7, #7
 801623a:	781b      	ldrb	r3, [r3, #0]
 801623c:	2b04      	cmp	r3, #4
 801623e:	d001      	beq.n	8016244 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016240:	230b      	movs	r3, #11
 8016242:	e017      	b.n	8016274 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8016244:	2408      	movs	r4, #8
 8016246:	193b      	adds	r3, r7, r4
 8016248:	2200      	movs	r2, #0
 801624a:	601a      	str	r2, [r3, #0]
 801624c:	3304      	adds	r3, #4
 801624e:	220c      	movs	r2, #12
 8016250:	2100      	movs	r1, #0
 8016252:	0018      	movs	r0, r3
 8016254:	f007 fdc1 	bl	801ddda <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016258:	4b08      	ldr	r3, [pc, #32]	; (801627c <LoRaMacCryptoDeriveMcKEKey+0x50>)
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	1dfa      	adds	r2, r7, #7
 801625e:	7812      	ldrb	r2, [r2, #0]
 8016260:	1939      	adds	r1, r7, r4
 8016262:	6818      	ldr	r0, [r3, #0]
 8016264:	237f      	movs	r3, #127	; 0x7f
 8016266:	f7f7 fbbb 	bl	800d9e0 <SecureElementDeriveAndStoreKey>
 801626a:	1e03      	subs	r3, r0, #0
 801626c:	d001      	beq.n	8016272 <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801626e:	230f      	movs	r3, #15
 8016270:	e000      	b.n	8016274 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016272:	2300      	movs	r3, #0
}
 8016274:	0018      	movs	r0, r3
 8016276:	46bd      	mov	sp, r7
 8016278:	b007      	add	sp, #28
 801627a:	bd90      	pop	{r4, r7, pc}
 801627c:	20000cac 	.word	0x20000cac

08016280 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016280:	b590      	push	{r4, r7, lr}
 8016282:	b085      	sub	sp, #20
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d003      	beq.n	8016296 <LoRaMacParserJoinAccept+0x16>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d101      	bne.n	801629a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016296:	2302      	movs	r3, #2
 8016298:	e0de      	b.n	8016458 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 801629a:	240e      	movs	r4, #14
 801629c:	193b      	adds	r3, r7, r4
 801629e:	2200      	movs	r2, #0
 80162a0:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	681a      	ldr	r2, [r3, #0]
 80162a6:	193b      	adds	r3, r7, r4
 80162a8:	881b      	ldrh	r3, [r3, #0]
 80162aa:	1939      	adds	r1, r7, r4
 80162ac:	1c58      	adds	r0, r3, #1
 80162ae:	8008      	strh	r0, [r1, #0]
 80162b0:	18d3      	adds	r3, r2, r3
 80162b2:	781a      	ldrb	r2, [r3, #0]
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	1d98      	adds	r0, r3, #6
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681a      	ldr	r2, [r3, #0]
 80162c0:	193b      	adds	r3, r7, r4
 80162c2:	881b      	ldrh	r3, [r3, #0]
 80162c4:	18d3      	adds	r3, r2, r3
 80162c6:	2203      	movs	r2, #3
 80162c8:	0019      	movs	r1, r3
 80162ca:	f003 f82f 	bl	801932c <memcpy1>
    bufItr = bufItr + 3;
 80162ce:	193b      	adds	r3, r7, r4
 80162d0:	193a      	adds	r2, r7, r4
 80162d2:	8812      	ldrh	r2, [r2, #0]
 80162d4:	3203      	adds	r2, #3
 80162d6:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	3309      	adds	r3, #9
 80162dc:	0018      	movs	r0, r3
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681a      	ldr	r2, [r3, #0]
 80162e2:	193b      	adds	r3, r7, r4
 80162e4:	881b      	ldrh	r3, [r3, #0]
 80162e6:	18d3      	adds	r3, r2, r3
 80162e8:	2203      	movs	r2, #3
 80162ea:	0019      	movs	r1, r3
 80162ec:	f003 f81e 	bl	801932c <memcpy1>
    bufItr = bufItr + 3;
 80162f0:	193b      	adds	r3, r7, r4
 80162f2:	193a      	adds	r2, r7, r4
 80162f4:	8812      	ldrh	r2, [r2, #0]
 80162f6:	3203      	adds	r2, #3
 80162f8:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	193b      	adds	r3, r7, r4
 8016300:	881b      	ldrh	r3, [r3, #0]
 8016302:	1939      	adds	r1, r7, r4
 8016304:	1c58      	adds	r0, r3, #1
 8016306:	8008      	strh	r0, [r1, #0]
 8016308:	18d3      	adds	r3, r2, r3
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	001a      	movs	r2, r3
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	193b      	adds	r3, r7, r4
 8016318:	881b      	ldrh	r3, [r3, #0]
 801631a:	1939      	adds	r1, r7, r4
 801631c:	1c58      	adds	r0, r3, #1
 801631e:	8008      	strh	r0, [r1, #0]
 8016320:	18d3      	adds	r3, r2, r3
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	021a      	lsls	r2, r3, #8
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	68db      	ldr	r3, [r3, #12]
 801632a:	431a      	orrs	r2, r3
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	193b      	adds	r3, r7, r4
 8016336:	881b      	ldrh	r3, [r3, #0]
 8016338:	1939      	adds	r1, r7, r4
 801633a:	1c58      	adds	r0, r3, #1
 801633c:	8008      	strh	r0, [r1, #0]
 801633e:	18d3      	adds	r3, r2, r3
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	041a      	lsls	r2, r3, #16
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	68db      	ldr	r3, [r3, #12]
 8016348:	431a      	orrs	r2, r3
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681a      	ldr	r2, [r3, #0]
 8016352:	193b      	adds	r3, r7, r4
 8016354:	881b      	ldrh	r3, [r3, #0]
 8016356:	1939      	adds	r1, r7, r4
 8016358:	1c58      	adds	r0, r3, #1
 801635a:	8008      	strh	r0, [r1, #0]
 801635c:	18d3      	adds	r3, r2, r3
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	061a      	lsls	r2, r3, #24
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	68db      	ldr	r3, [r3, #12]
 8016366:	431a      	orrs	r2, r3
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681a      	ldr	r2, [r3, #0]
 8016370:	193b      	adds	r3, r7, r4
 8016372:	881b      	ldrh	r3, [r3, #0]
 8016374:	1939      	adds	r1, r7, r4
 8016376:	1c58      	adds	r0, r3, #1
 8016378:	8008      	strh	r0, [r1, #0]
 801637a:	18d3      	adds	r3, r2, r3
 801637c:	781a      	ldrb	r2, [r3, #0]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681a      	ldr	r2, [r3, #0]
 8016386:	193b      	adds	r3, r7, r4
 8016388:	881b      	ldrh	r3, [r3, #0]
 801638a:	1939      	adds	r1, r7, r4
 801638c:	1c58      	adds	r0, r3, #1
 801638e:	8008      	strh	r0, [r1, #0]
 8016390:	18d3      	adds	r3, r2, r3
 8016392:	781a      	ldrb	r2, [r3, #0]
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	791b      	ldrb	r3, [r3, #4]
 801639c:	1f1a      	subs	r2, r3, #4
 801639e:	193b      	adds	r3, r7, r4
 80163a0:	881b      	ldrh	r3, [r3, #0]
 80163a2:	1ad3      	subs	r3, r2, r3
 80163a4:	2b10      	cmp	r3, #16
 80163a6:	d111      	bne.n	80163cc <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	3312      	adds	r3, #18
 80163ac:	0018      	movs	r0, r3
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	193b      	adds	r3, r7, r4
 80163b4:	881b      	ldrh	r3, [r3, #0]
 80163b6:	18d3      	adds	r3, r2, r3
 80163b8:	2210      	movs	r2, #16
 80163ba:	0019      	movs	r1, r3
 80163bc:	f002 ffb6 	bl	801932c <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80163c0:	193b      	adds	r3, r7, r4
 80163c2:	193a      	adds	r2, r7, r4
 80163c4:	8812      	ldrh	r2, [r2, #0]
 80163c6:	3210      	adds	r2, #16
 80163c8:	801a      	strh	r2, [r3, #0]
 80163ca:	e00a      	b.n	80163e2 <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	791b      	ldrb	r3, [r3, #4]
 80163d0:	1f1a      	subs	r2, r3, #4
 80163d2:	230e      	movs	r3, #14
 80163d4:	18fb      	adds	r3, r7, r3
 80163d6:	881b      	ldrh	r3, [r3, #0]
 80163d8:	1ad3      	subs	r3, r2, r3
 80163da:	2b00      	cmp	r3, #0
 80163dc:	dd01      	ble.n	80163e2 <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 80163de:	2301      	movs	r3, #1
 80163e0:	e03a      	b.n	8016458 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681a      	ldr	r2, [r3, #0]
 80163e6:	240e      	movs	r4, #14
 80163e8:	193b      	adds	r3, r7, r4
 80163ea:	881b      	ldrh	r3, [r3, #0]
 80163ec:	1939      	adds	r1, r7, r4
 80163ee:	1c58      	adds	r0, r3, #1
 80163f0:	8008      	strh	r0, [r1, #0]
 80163f2:	18d3      	adds	r3, r2, r3
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	001a      	movs	r2, r3
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	681a      	ldr	r2, [r3, #0]
 8016400:	193b      	adds	r3, r7, r4
 8016402:	881b      	ldrh	r3, [r3, #0]
 8016404:	1939      	adds	r1, r7, r4
 8016406:	1c58      	adds	r0, r3, #1
 8016408:	8008      	strh	r0, [r1, #0]
 801640a:	18d3      	adds	r3, r2, r3
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	021a      	lsls	r2, r3, #8
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016414:	431a      	orrs	r2, r3
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	681a      	ldr	r2, [r3, #0]
 801641e:	193b      	adds	r3, r7, r4
 8016420:	881b      	ldrh	r3, [r3, #0]
 8016422:	1939      	adds	r1, r7, r4
 8016424:	1c58      	adds	r0, r3, #1
 8016426:	8008      	strh	r0, [r1, #0]
 8016428:	18d3      	adds	r3, r2, r3
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	041a      	lsls	r2, r3, #16
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016432:	431a      	orrs	r2, r3
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681a      	ldr	r2, [r3, #0]
 801643c:	193b      	adds	r3, r7, r4
 801643e:	881b      	ldrh	r3, [r3, #0]
 8016440:	1939      	adds	r1, r7, r4
 8016442:	1c58      	adds	r0, r3, #1
 8016444:	8008      	strh	r0, [r1, #0]
 8016446:	18d3      	adds	r3, r2, r3
 8016448:	781b      	ldrb	r3, [r3, #0]
 801644a:	061a      	lsls	r2, r3, #24
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016450:	431a      	orrs	r2, r3
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016456:	2300      	movs	r3, #0
}
 8016458:	0018      	movs	r0, r3
 801645a:	46bd      	mov	sp, r7
 801645c:	b005      	add	sp, #20
 801645e:	bd90      	pop	{r4, r7, pc}

08016460 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016460:	b590      	push	{r4, r7, lr}
 8016462:	b085      	sub	sp, #20
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d003      	beq.n	8016476 <LoRaMacParserData+0x16>
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d101      	bne.n	801647a <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016476:	2302      	movs	r3, #2
 8016478:	e0fe      	b.n	8016678 <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 801647a:	240e      	movs	r4, #14
 801647c:	193b      	adds	r3, r7, r4
 801647e:	2200      	movs	r2, #0
 8016480:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681a      	ldr	r2, [r3, #0]
 8016486:	193b      	adds	r3, r7, r4
 8016488:	881b      	ldrh	r3, [r3, #0]
 801648a:	1939      	adds	r1, r7, r4
 801648c:	1c58      	adds	r0, r3, #1
 801648e:	8008      	strh	r0, [r1, #0]
 8016490:	18d3      	adds	r3, r2, r3
 8016492:	781a      	ldrb	r2, [r3, #0]
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	193b      	adds	r3, r7, r4
 801649e:	881b      	ldrh	r3, [r3, #0]
 80164a0:	1939      	adds	r1, r7, r4
 80164a2:	1c58      	adds	r0, r3, #1
 80164a4:	8008      	strh	r0, [r1, #0]
 80164a6:	18d3      	adds	r3, r2, r3
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	001a      	movs	r2, r3
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681a      	ldr	r2, [r3, #0]
 80164b4:	193b      	adds	r3, r7, r4
 80164b6:	881b      	ldrh	r3, [r3, #0]
 80164b8:	1939      	adds	r1, r7, r4
 80164ba:	1c58      	adds	r0, r3, #1
 80164bc:	8008      	strh	r0, [r1, #0]
 80164be:	18d3      	adds	r3, r2, r3
 80164c0:	781b      	ldrb	r3, [r3, #0]
 80164c2:	021a      	lsls	r2, r3, #8
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	689b      	ldr	r3, [r3, #8]
 80164c8:	431a      	orrs	r2, r3
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681a      	ldr	r2, [r3, #0]
 80164d2:	193b      	adds	r3, r7, r4
 80164d4:	881b      	ldrh	r3, [r3, #0]
 80164d6:	1939      	adds	r1, r7, r4
 80164d8:	1c58      	adds	r0, r3, #1
 80164da:	8008      	strh	r0, [r1, #0]
 80164dc:	18d3      	adds	r3, r2, r3
 80164de:	781b      	ldrb	r3, [r3, #0]
 80164e0:	041a      	lsls	r2, r3, #16
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	689b      	ldr	r3, [r3, #8]
 80164e6:	431a      	orrs	r2, r3
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681a      	ldr	r2, [r3, #0]
 80164f0:	193b      	adds	r3, r7, r4
 80164f2:	881b      	ldrh	r3, [r3, #0]
 80164f4:	1939      	adds	r1, r7, r4
 80164f6:	1c58      	adds	r0, r3, #1
 80164f8:	8008      	strh	r0, [r1, #0]
 80164fa:	18d3      	adds	r3, r2, r3
 80164fc:	781b      	ldrb	r3, [r3, #0]
 80164fe:	061a      	lsls	r2, r3, #24
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	689b      	ldr	r3, [r3, #8]
 8016504:	431a      	orrs	r2, r3
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	193b      	adds	r3, r7, r4
 8016510:	881b      	ldrh	r3, [r3, #0]
 8016512:	1939      	adds	r1, r7, r4
 8016514:	1c58      	adds	r0, r3, #1
 8016516:	8008      	strh	r0, [r1, #0]
 8016518:	18d3      	adds	r3, r2, r3
 801651a:	781a      	ldrb	r2, [r3, #0]
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681a      	ldr	r2, [r3, #0]
 8016524:	193b      	adds	r3, r7, r4
 8016526:	881b      	ldrh	r3, [r3, #0]
 8016528:	1939      	adds	r1, r7, r4
 801652a:	1c58      	adds	r0, r3, #1
 801652c:	8008      	strh	r0, [r1, #0]
 801652e:	18d3      	adds	r3, r2, r3
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	b29a      	uxth	r2, r3
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681a      	ldr	r2, [r3, #0]
 801653c:	193b      	adds	r3, r7, r4
 801653e:	881b      	ldrh	r3, [r3, #0]
 8016540:	1939      	adds	r1, r7, r4
 8016542:	1c58      	adds	r0, r3, #1
 8016544:	8008      	strh	r0, [r1, #0]
 8016546:	18d3      	adds	r3, r2, r3
 8016548:	781b      	ldrb	r3, [r3, #0]
 801654a:	0219      	lsls	r1, r3, #8
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	89db      	ldrh	r3, [r3, #14]
 8016550:	b21a      	sxth	r2, r3
 8016552:	b20b      	sxth	r3, r1
 8016554:	4313      	orrs	r3, r2
 8016556:	b21b      	sxth	r3, r3
 8016558:	b29a      	uxth	r2, r3
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	3310      	adds	r3, #16
 8016562:	0018      	movs	r0, r3
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681a      	ldr	r2, [r3, #0]
 8016568:	193b      	adds	r3, r7, r4
 801656a:	881b      	ldrh	r3, [r3, #0]
 801656c:	18d1      	adds	r1, r2, r3
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	7b1b      	ldrb	r3, [r3, #12]
 8016572:	071b      	lsls	r3, r3, #28
 8016574:	0f1b      	lsrs	r3, r3, #28
 8016576:	b2db      	uxtb	r3, r3
 8016578:	b29b      	uxth	r3, r3
 801657a:	001a      	movs	r2, r3
 801657c:	f002 fed6 	bl	801932c <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	7b1b      	ldrb	r3, [r3, #12]
 8016584:	071b      	lsls	r3, r3, #28
 8016586:	0f1b      	lsrs	r3, r3, #28
 8016588:	b2db      	uxtb	r3, r3
 801658a:	b299      	uxth	r1, r3
 801658c:	193b      	adds	r3, r7, r4
 801658e:	193a      	adds	r2, r7, r4
 8016590:	8812      	ldrh	r2, [r2, #0]
 8016592:	188a      	adds	r2, r1, r2
 8016594:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2220      	movs	r2, #32
 801659a:	2100      	movs	r1, #0
 801659c:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2228      	movs	r2, #40	; 0x28
 80165a2:	2100      	movs	r1, #0
 80165a4:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	791b      	ldrb	r3, [r3, #4]
 80165aa:	001a      	movs	r2, r3
 80165ac:	193b      	adds	r3, r7, r4
 80165ae:	881b      	ldrh	r3, [r3, #0]
 80165b0:	1ad3      	subs	r3, r2, r3
 80165b2:	2b04      	cmp	r3, #4
 80165b4:	dd2e      	ble.n	8016614 <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681a      	ldr	r2, [r3, #0]
 80165ba:	193b      	adds	r3, r7, r4
 80165bc:	881b      	ldrh	r3, [r3, #0]
 80165be:	1939      	adds	r1, r7, r4
 80165c0:	1c58      	adds	r0, r3, #1
 80165c2:	8008      	strh	r0, [r1, #0]
 80165c4:	18d3      	adds	r3, r2, r3
 80165c6:	7819      	ldrb	r1, [r3, #0]
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2220      	movs	r2, #32
 80165cc:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	791a      	ldrb	r2, [r3, #4]
 80165d2:	193b      	adds	r3, r7, r4
 80165d4:	881b      	ldrh	r3, [r3, #0]
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	1ad3      	subs	r3, r2, r3
 80165da:	b2db      	uxtb	r3, r3
 80165dc:	3b04      	subs	r3, #4
 80165de:	b2d9      	uxtb	r1, r3
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2228      	movs	r2, #40	; 0x28
 80165e4:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681a      	ldr	r2, [r3, #0]
 80165ee:	193b      	adds	r3, r7, r4
 80165f0:	881b      	ldrh	r3, [r3, #0]
 80165f2:	18d1      	adds	r1, r2, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2228      	movs	r2, #40	; 0x28
 80165f8:	5c9b      	ldrb	r3, [r3, r2]
 80165fa:	b29b      	uxth	r3, r3
 80165fc:	001a      	movs	r2, r3
 80165fe:	f002 fe95 	bl	801932c <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	2228      	movs	r2, #40	; 0x28
 8016606:	5c9b      	ldrb	r3, [r3, r2]
 8016608:	b299      	uxth	r1, r3
 801660a:	193b      	adds	r3, r7, r4
 801660c:	193a      	adds	r2, r7, r4
 801660e:	8812      	ldrh	r2, [r2, #0]
 8016610:	188a      	adds	r2, r1, r2
 8016612:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	681a      	ldr	r2, [r3, #0]
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	791b      	ldrb	r3, [r3, #4]
 801661c:	3b04      	subs	r3, #4
 801661e:	18d3      	adds	r3, r2, r3
 8016620:	781b      	ldrb	r3, [r3, #0]
 8016622:	001a      	movs	r2, r3
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	6819      	ldr	r1, [r3, #0]
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	791b      	ldrb	r3, [r3, #4]
 8016634:	3b03      	subs	r3, #3
 8016636:	18cb      	adds	r3, r1, r3
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	021b      	lsls	r3, r3, #8
 801663c:	431a      	orrs	r2, r3
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	6819      	ldr	r1, [r3, #0]
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	791b      	ldrb	r3, [r3, #4]
 801664e:	3b02      	subs	r3, #2
 8016650:	18cb      	adds	r3, r1, r3
 8016652:	781b      	ldrb	r3, [r3, #0]
 8016654:	041b      	lsls	r3, r3, #16
 8016656:	431a      	orrs	r2, r3
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	6819      	ldr	r1, [r3, #0]
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	791b      	ldrb	r3, [r3, #4]
 8016668:	3b01      	subs	r3, #1
 801666a:	18cb      	adds	r3, r1, r3
 801666c:	781b      	ldrb	r3, [r3, #0]
 801666e:	061b      	lsls	r3, r3, #24
 8016670:	431a      	orrs	r2, r3
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016676:	2300      	movs	r3, #0
}
 8016678:	0018      	movs	r0, r3
 801667a:	46bd      	mov	sp, r7
 801667c:	b005      	add	sp, #20
 801667e:	bd90      	pop	{r4, r7, pc}

08016680 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016680:	b5b0      	push	{r4, r5, r7, lr}
 8016682:	b084      	sub	sp, #16
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d003      	beq.n	8016696 <LoRaMacSerializerJoinRequest+0x16>
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d101      	bne.n	801669a <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016696:	2301      	movs	r3, #1
 8016698:	e089      	b.n	80167ae <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 801669a:	230e      	movs	r3, #14
 801669c:	18fb      	adds	r3, r7, r3
 801669e:	2200      	movs	r2, #0
 80166a0:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	791b      	ldrb	r3, [r3, #4]
 80166a6:	2b16      	cmp	r3, #22
 80166a8:	d801      	bhi.n	80166ae <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80166aa:	2302      	movs	r3, #2
 80166ac:	e07f      	b.n	80167ae <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	681a      	ldr	r2, [r3, #0]
 80166b2:	240e      	movs	r4, #14
 80166b4:	193b      	adds	r3, r7, r4
 80166b6:	881b      	ldrh	r3, [r3, #0]
 80166b8:	1939      	adds	r1, r7, r4
 80166ba:	1c58      	adds	r0, r3, #1
 80166bc:	8008      	strh	r0, [r1, #0]
 80166be:	18d3      	adds	r3, r2, r3
 80166c0:	687a      	ldr	r2, [r7, #4]
 80166c2:	7952      	ldrb	r2, [r2, #5]
 80166c4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681a      	ldr	r2, [r3, #0]
 80166ca:	193b      	adds	r3, r7, r4
 80166cc:	881b      	ldrh	r3, [r3, #0]
 80166ce:	18d0      	adds	r0, r2, r3
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	3306      	adds	r3, #6
 80166d4:	2208      	movs	r2, #8
 80166d6:	0019      	movs	r1, r3
 80166d8:	f002 fe44 	bl	8019364 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80166dc:	193b      	adds	r3, r7, r4
 80166de:	193a      	adds	r2, r7, r4
 80166e0:	8812      	ldrh	r2, [r2, #0]
 80166e2:	3208      	adds	r2, #8
 80166e4:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	193b      	adds	r3, r7, r4
 80166ec:	881b      	ldrh	r3, [r3, #0]
 80166ee:	18d0      	adds	r0, r2, r3
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	330e      	adds	r3, #14
 80166f4:	2208      	movs	r2, #8
 80166f6:	0019      	movs	r1, r3
 80166f8:	f002 fe34 	bl	8019364 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80166fc:	193b      	adds	r3, r7, r4
 80166fe:	0025      	movs	r5, r4
 8016700:	193a      	adds	r2, r7, r4
 8016702:	8812      	ldrh	r2, [r2, #0]
 8016704:	3208      	adds	r2, #8
 8016706:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	8ad8      	ldrh	r0, [r3, #22]
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681a      	ldr	r2, [r3, #0]
 8016710:	197b      	adds	r3, r7, r5
 8016712:	881b      	ldrh	r3, [r3, #0]
 8016714:	1979      	adds	r1, r7, r5
 8016716:	1c5c      	adds	r4, r3, #1
 8016718:	800c      	strh	r4, [r1, #0]
 801671a:	18d3      	adds	r3, r2, r3
 801671c:	b2c2      	uxtb	r2, r0
 801671e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	8adb      	ldrh	r3, [r3, #22]
 8016724:	0a1b      	lsrs	r3, r3, #8
 8016726:	b298      	uxth	r0, r3
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681a      	ldr	r2, [r3, #0]
 801672c:	197b      	adds	r3, r7, r5
 801672e:	881b      	ldrh	r3, [r3, #0]
 8016730:	1979      	adds	r1, r7, r5
 8016732:	1c5c      	adds	r4, r3, #1
 8016734:	800c      	strh	r4, [r1, #0]
 8016736:	18d3      	adds	r3, r2, r3
 8016738:	b2c2      	uxtb	r2, r0
 801673a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6998      	ldr	r0, [r3, #24]
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681a      	ldr	r2, [r3, #0]
 8016744:	197b      	adds	r3, r7, r5
 8016746:	881b      	ldrh	r3, [r3, #0]
 8016748:	1979      	adds	r1, r7, r5
 801674a:	1c5c      	adds	r4, r3, #1
 801674c:	800c      	strh	r4, [r1, #0]
 801674e:	18d3      	adds	r3, r2, r3
 8016750:	b2c2      	uxtb	r2, r0
 8016752:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	699b      	ldr	r3, [r3, #24]
 8016758:	0a18      	lsrs	r0, r3, #8
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681a      	ldr	r2, [r3, #0]
 801675e:	197b      	adds	r3, r7, r5
 8016760:	881b      	ldrh	r3, [r3, #0]
 8016762:	1979      	adds	r1, r7, r5
 8016764:	1c5c      	adds	r4, r3, #1
 8016766:	800c      	strh	r4, [r1, #0]
 8016768:	18d3      	adds	r3, r2, r3
 801676a:	b2c2      	uxtb	r2, r0
 801676c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	699b      	ldr	r3, [r3, #24]
 8016772:	0c18      	lsrs	r0, r3, #16
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	681a      	ldr	r2, [r3, #0]
 8016778:	197b      	adds	r3, r7, r5
 801677a:	881b      	ldrh	r3, [r3, #0]
 801677c:	1979      	adds	r1, r7, r5
 801677e:	1c5c      	adds	r4, r3, #1
 8016780:	800c      	strh	r4, [r1, #0]
 8016782:	18d3      	adds	r3, r2, r3
 8016784:	b2c2      	uxtb	r2, r0
 8016786:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	699b      	ldr	r3, [r3, #24]
 801678c:	0e18      	lsrs	r0, r3, #24
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681a      	ldr	r2, [r3, #0]
 8016792:	197b      	adds	r3, r7, r5
 8016794:	881b      	ldrh	r3, [r3, #0]
 8016796:	1979      	adds	r1, r7, r5
 8016798:	1c5c      	adds	r4, r3, #1
 801679a:	800c      	strh	r4, [r1, #0]
 801679c:	18d3      	adds	r3, r2, r3
 801679e:	b2c2      	uxtb	r2, r0
 80167a0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80167a2:	197b      	adds	r3, r7, r5
 80167a4:	881b      	ldrh	r3, [r3, #0]
 80167a6:	b2da      	uxtb	r2, r3
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80167ac:	2300      	movs	r3, #0
}
 80167ae:	0018      	movs	r0, r3
 80167b0:	46bd      	mov	sp, r7
 80167b2:	b004      	add	sp, #16
 80167b4:	bdb0      	pop	{r4, r5, r7, pc}

080167b6 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80167b6:	b5b0      	push	{r4, r5, r7, lr}
 80167b8:	b084      	sub	sp, #16
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d003      	beq.n	80167cc <LoRaMacSerializerData+0x16>
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d101      	bne.n	80167d0 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80167cc:	2301      	movs	r3, #1
 80167ce:	e119      	b.n	8016a04 <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 80167d0:	230e      	movs	r3, #14
 80167d2:	18fb      	adds	r3, r7, r3
 80167d4:	2200      	movs	r2, #0
 80167d6:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80167d8:	200c      	movs	r0, #12
 80167da:	183b      	adds	r3, r7, r0
 80167dc:	2208      	movs	r2, #8
 80167de:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	7b1b      	ldrb	r3, [r3, #12]
 80167e4:	071b      	lsls	r3, r3, #28
 80167e6:	0f1b      	lsrs	r3, r3, #28
 80167e8:	b2db      	uxtb	r3, r3
 80167ea:	b299      	uxth	r1, r3
 80167ec:	183b      	adds	r3, r7, r0
 80167ee:	183a      	adds	r2, r7, r0
 80167f0:	8812      	ldrh	r2, [r2, #0]
 80167f2:	188a      	adds	r2, r1, r2
 80167f4:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	2228      	movs	r2, #40	; 0x28
 80167fa:	5c9b      	ldrb	r3, [r3, r2]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d004      	beq.n	801680a <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016800:	183b      	adds	r3, r7, r0
 8016802:	183a      	adds	r2, r7, r0
 8016804:	8812      	ldrh	r2, [r2, #0]
 8016806:	3201      	adds	r2, #1
 8016808:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	2228      	movs	r2, #40	; 0x28
 801680e:	5c9b      	ldrb	r3, [r3, r2]
 8016810:	b299      	uxth	r1, r3
 8016812:	200c      	movs	r0, #12
 8016814:	183b      	adds	r3, r7, r0
 8016816:	183a      	adds	r2, r7, r0
 8016818:	8812      	ldrh	r2, [r2, #0]
 801681a:	188a      	adds	r2, r1, r2
 801681c:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801681e:	0001      	movs	r1, r0
 8016820:	187b      	adds	r3, r7, r1
 8016822:	187a      	adds	r2, r7, r1
 8016824:	8812      	ldrh	r2, [r2, #0]
 8016826:	3204      	adds	r2, #4
 8016828:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	791b      	ldrb	r3, [r3, #4]
 801682e:	b29b      	uxth	r3, r3
 8016830:	187a      	adds	r2, r7, r1
 8016832:	8812      	ldrh	r2, [r2, #0]
 8016834:	429a      	cmp	r2, r3
 8016836:	d901      	bls.n	801683c <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016838:	2302      	movs	r3, #2
 801683a:	e0e3      	b.n	8016a04 <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681a      	ldr	r2, [r3, #0]
 8016840:	250e      	movs	r5, #14
 8016842:	197b      	adds	r3, r7, r5
 8016844:	881b      	ldrh	r3, [r3, #0]
 8016846:	1979      	adds	r1, r7, r5
 8016848:	1c58      	adds	r0, r3, #1
 801684a:	8008      	strh	r0, [r1, #0]
 801684c:	18d3      	adds	r3, r2, r3
 801684e:	687a      	ldr	r2, [r7, #4]
 8016850:	7952      	ldrb	r2, [r2, #5]
 8016852:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	6898      	ldr	r0, [r3, #8]
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681a      	ldr	r2, [r3, #0]
 801685c:	197b      	adds	r3, r7, r5
 801685e:	881b      	ldrh	r3, [r3, #0]
 8016860:	1979      	adds	r1, r7, r5
 8016862:	1c5c      	adds	r4, r3, #1
 8016864:	800c      	strh	r4, [r1, #0]
 8016866:	18d3      	adds	r3, r2, r3
 8016868:	b2c2      	uxtb	r2, r0
 801686a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	689b      	ldr	r3, [r3, #8]
 8016870:	0a18      	lsrs	r0, r3, #8
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681a      	ldr	r2, [r3, #0]
 8016876:	197b      	adds	r3, r7, r5
 8016878:	881b      	ldrh	r3, [r3, #0]
 801687a:	1979      	adds	r1, r7, r5
 801687c:	1c5c      	adds	r4, r3, #1
 801687e:	800c      	strh	r4, [r1, #0]
 8016880:	18d3      	adds	r3, r2, r3
 8016882:	b2c2      	uxtb	r2, r0
 8016884:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	689b      	ldr	r3, [r3, #8]
 801688a:	0c18      	lsrs	r0, r3, #16
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681a      	ldr	r2, [r3, #0]
 8016890:	197b      	adds	r3, r7, r5
 8016892:	881b      	ldrh	r3, [r3, #0]
 8016894:	1979      	adds	r1, r7, r5
 8016896:	1c5c      	adds	r4, r3, #1
 8016898:	800c      	strh	r4, [r1, #0]
 801689a:	18d3      	adds	r3, r2, r3
 801689c:	b2c2      	uxtb	r2, r0
 801689e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	689b      	ldr	r3, [r3, #8]
 80168a4:	0e18      	lsrs	r0, r3, #24
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	197b      	adds	r3, r7, r5
 80168ac:	881b      	ldrh	r3, [r3, #0]
 80168ae:	1979      	adds	r1, r7, r5
 80168b0:	1c5c      	adds	r4, r3, #1
 80168b2:	800c      	strh	r4, [r1, #0]
 80168b4:	18d3      	adds	r3, r2, r3
 80168b6:	b2c2      	uxtb	r2, r0
 80168b8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681a      	ldr	r2, [r3, #0]
 80168be:	197b      	adds	r3, r7, r5
 80168c0:	881b      	ldrh	r3, [r3, #0]
 80168c2:	1979      	adds	r1, r7, r5
 80168c4:	1c58      	adds	r0, r3, #1
 80168c6:	8008      	strh	r0, [r1, #0]
 80168c8:	18d3      	adds	r3, r2, r3
 80168ca:	687a      	ldr	r2, [r7, #4]
 80168cc:	7b12      	ldrb	r2, [r2, #12]
 80168ce:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	89d8      	ldrh	r0, [r3, #14]
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	681a      	ldr	r2, [r3, #0]
 80168d8:	197b      	adds	r3, r7, r5
 80168da:	881b      	ldrh	r3, [r3, #0]
 80168dc:	1979      	adds	r1, r7, r5
 80168de:	1c5c      	adds	r4, r3, #1
 80168e0:	800c      	strh	r4, [r1, #0]
 80168e2:	18d3      	adds	r3, r2, r3
 80168e4:	b2c2      	uxtb	r2, r0
 80168e6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	89db      	ldrh	r3, [r3, #14]
 80168ec:	0a1b      	lsrs	r3, r3, #8
 80168ee:	b298      	uxth	r0, r3
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681a      	ldr	r2, [r3, #0]
 80168f4:	197b      	adds	r3, r7, r5
 80168f6:	881b      	ldrh	r3, [r3, #0]
 80168f8:	1979      	adds	r1, r7, r5
 80168fa:	1c5c      	adds	r4, r3, #1
 80168fc:	800c      	strh	r4, [r1, #0]
 80168fe:	18d3      	adds	r3, r2, r3
 8016900:	b2c2      	uxtb	r2, r0
 8016902:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681a      	ldr	r2, [r3, #0]
 8016908:	002c      	movs	r4, r5
 801690a:	197b      	adds	r3, r7, r5
 801690c:	881b      	ldrh	r3, [r3, #0]
 801690e:	18d0      	adds	r0, r2, r3
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	3310      	adds	r3, #16
 8016914:	0019      	movs	r1, r3
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	7b1b      	ldrb	r3, [r3, #12]
 801691a:	071b      	lsls	r3, r3, #28
 801691c:	0f1b      	lsrs	r3, r3, #28
 801691e:	b2db      	uxtb	r3, r3
 8016920:	b29b      	uxth	r3, r3
 8016922:	001a      	movs	r2, r3
 8016924:	f002 fd02 	bl	801932c <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	7b1b      	ldrb	r3, [r3, #12]
 801692c:	071b      	lsls	r3, r3, #28
 801692e:	0f1b      	lsrs	r3, r3, #28
 8016930:	b2db      	uxtb	r3, r3
 8016932:	b299      	uxth	r1, r3
 8016934:	193b      	adds	r3, r7, r4
 8016936:	193a      	adds	r2, r7, r4
 8016938:	8812      	ldrh	r2, [r2, #0]
 801693a:	188a      	adds	r2, r1, r2
 801693c:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2228      	movs	r2, #40	; 0x28
 8016942:	5c9b      	ldrb	r3, [r3, r2]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d00b      	beq.n	8016960 <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681a      	ldr	r2, [r3, #0]
 801694c:	193b      	adds	r3, r7, r4
 801694e:	881b      	ldrh	r3, [r3, #0]
 8016950:	1939      	adds	r1, r7, r4
 8016952:	1c58      	adds	r0, r3, #1
 8016954:	8008      	strh	r0, [r1, #0]
 8016956:	18d3      	adds	r3, r2, r3
 8016958:	687a      	ldr	r2, [r7, #4]
 801695a:	2120      	movs	r1, #32
 801695c:	5c52      	ldrb	r2, [r2, r1]
 801695e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681a      	ldr	r2, [r3, #0]
 8016964:	240e      	movs	r4, #14
 8016966:	193b      	adds	r3, r7, r4
 8016968:	881b      	ldrh	r3, [r3, #0]
 801696a:	18d0      	adds	r0, r2, r3
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2228      	movs	r2, #40	; 0x28
 8016974:	5c9b      	ldrb	r3, [r3, r2]
 8016976:	b29b      	uxth	r3, r3
 8016978:	001a      	movs	r2, r3
 801697a:	f002 fcd7 	bl	801932c <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2228      	movs	r2, #40	; 0x28
 8016982:	5c9b      	ldrb	r3, [r3, r2]
 8016984:	b299      	uxth	r1, r3
 8016986:	193b      	adds	r3, r7, r4
 8016988:	193a      	adds	r2, r7, r4
 801698a:	8812      	ldrh	r2, [r2, #0]
 801698c:	188a      	adds	r2, r1, r2
 801698e:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681a      	ldr	r2, [r3, #0]
 8016998:	193b      	adds	r3, r7, r4
 801699a:	881b      	ldrh	r3, [r3, #0]
 801699c:	0025      	movs	r5, r4
 801699e:	1939      	adds	r1, r7, r4
 80169a0:	1c5c      	adds	r4, r3, #1
 80169a2:	800c      	strh	r4, [r1, #0]
 80169a4:	18d3      	adds	r3, r2, r3
 80169a6:	b2c2      	uxtb	r2, r0
 80169a8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169ae:	0a18      	lsrs	r0, r3, #8
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681a      	ldr	r2, [r3, #0]
 80169b4:	197b      	adds	r3, r7, r5
 80169b6:	881b      	ldrh	r3, [r3, #0]
 80169b8:	1979      	adds	r1, r7, r5
 80169ba:	1c5c      	adds	r4, r3, #1
 80169bc:	800c      	strh	r4, [r1, #0]
 80169be:	18d3      	adds	r3, r2, r3
 80169c0:	b2c2      	uxtb	r2, r0
 80169c2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169c8:	0c18      	lsrs	r0, r3, #16
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	681a      	ldr	r2, [r3, #0]
 80169ce:	197b      	adds	r3, r7, r5
 80169d0:	881b      	ldrh	r3, [r3, #0]
 80169d2:	1979      	adds	r1, r7, r5
 80169d4:	1c5c      	adds	r4, r3, #1
 80169d6:	800c      	strh	r4, [r1, #0]
 80169d8:	18d3      	adds	r3, r2, r3
 80169da:	b2c2      	uxtb	r2, r0
 80169dc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169e2:	0e18      	lsrs	r0, r3, #24
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681a      	ldr	r2, [r3, #0]
 80169e8:	197b      	adds	r3, r7, r5
 80169ea:	881b      	ldrh	r3, [r3, #0]
 80169ec:	1979      	adds	r1, r7, r5
 80169ee:	1c5c      	adds	r4, r3, #1
 80169f0:	800c      	strh	r4, [r1, #0]
 80169f2:	18d3      	adds	r3, r2, r3
 80169f4:	b2c2      	uxtb	r2, r0
 80169f6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80169f8:	197b      	adds	r3, r7, r5
 80169fa:	881b      	ldrh	r3, [r3, #0]
 80169fc:	b2da      	uxtb	r2, r3
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016a02:	2300      	movs	r3, #0
}
 8016a04:	0018      	movs	r0, r3
 8016a06:	46bd      	mov	sp, r7
 8016a08:	b004      	add	sp, #16
 8016a0a:	bdb0      	pop	{r4, r5, r7, pc}

08016a0c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	0002      	movs	r2, r0
 8016a14:	1dfb      	adds	r3, r7, #7
 8016a16:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016a18:	1dfb      	adds	r3, r7, #7
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	2b05      	cmp	r3, #5
 8016a1e:	d101      	bne.n	8016a24 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016a20:	2301      	movs	r3, #1
 8016a22:	e000      	b.n	8016a26 <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016a24:	2300      	movs	r3, #0
        }
    }
}
 8016a26:	0018      	movs	r0, r3
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	b002      	add	sp, #8
 8016a2c:	bd80      	pop	{r7, pc}

08016a2e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016a2e:	b580      	push	{r7, lr}
 8016a30:	b084      	sub	sp, #16
 8016a32:	af00      	add	r7, sp, #0
 8016a34:	0002      	movs	r2, r0
 8016a36:	6039      	str	r1, [r7, #0]
 8016a38:	1dfb      	adds	r3, r7, #7
 8016a3a:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8016a3c:	2308      	movs	r3, #8
 8016a3e:	18fb      	adds	r3, r7, r3
 8016a40:	2200      	movs	r2, #0
 8016a42:	601a      	str	r2, [r3, #0]
    switch( region )
 8016a44:	1dfb      	adds	r3, r7, #7
 8016a46:	781b      	ldrb	r3, [r3, #0]
 8016a48:	2b05      	cmp	r3, #5
 8016a4a:	d109      	bne.n	8016a60 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	0018      	movs	r0, r3
 8016a50:	f001 fa4e 	bl	8017ef0 <RegionEU868GetPhyParam>
 8016a54:	0003      	movs	r3, r0
 8016a56:	001a      	movs	r2, r3
 8016a58:	230c      	movs	r3, #12
 8016a5a:	18fb      	adds	r3, r7, r3
 8016a5c:	601a      	str	r2, [r3, #0]
 8016a5e:	e005      	b.n	8016a6c <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016a60:	230c      	movs	r3, #12
 8016a62:	18fb      	adds	r3, r7, r3
 8016a64:	2208      	movs	r2, #8
 8016a66:	18ba      	adds	r2, r7, r2
 8016a68:	6812      	ldr	r2, [r2, #0]
 8016a6a:	601a      	str	r2, [r3, #0]
 8016a6c:	230c      	movs	r3, #12
 8016a6e:	18fb      	adds	r3, r7, r3
 8016a70:	2200      	movs	r2, #0
 8016a72:	681a      	ldr	r2, [r3, #0]
 8016a74:	0013      	movs	r3, r2
        }
    }
}
 8016a76:	0018      	movs	r0, r3
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	b004      	add	sp, #16
 8016a7c:	bd80      	pop	{r7, pc}

08016a7e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016a7e:	b580      	push	{r7, lr}
 8016a80:	b082      	sub	sp, #8
 8016a82:	af00      	add	r7, sp, #0
 8016a84:	0002      	movs	r2, r0
 8016a86:	6039      	str	r1, [r7, #0]
 8016a88:	1dfb      	adds	r3, r7, #7
 8016a8a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016a8c:	1dfb      	adds	r3, r7, #7
 8016a8e:	781b      	ldrb	r3, [r3, #0]
 8016a90:	2b05      	cmp	r3, #5
 8016a92:	d104      	bne.n	8016a9e <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	0018      	movs	r0, r3
 8016a98:	f001 fb4a 	bl	8018130 <RegionEU868SetBandTxDone>
 8016a9c:	e000      	b.n	8016aa0 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016a9e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	b002      	add	sp, #8
 8016aa4:	bd80      	pop	{r7, pc}

08016aa6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016aa6:	b580      	push	{r7, lr}
 8016aa8:	b082      	sub	sp, #8
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	0002      	movs	r2, r0
 8016aae:	6039      	str	r1, [r7, #0]
 8016ab0:	1dfb      	adds	r3, r7, #7
 8016ab2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016ab4:	1dfb      	adds	r3, r7, #7
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	2b05      	cmp	r3, #5
 8016aba:	d104      	bne.n	8016ac6 <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	0018      	movs	r0, r3
 8016ac0:	f001 fb62 	bl	8018188 <RegionEU868InitDefaults>
 8016ac4:	e000      	b.n	8016ac8 <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016ac6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016ac8:	46c0      	nop			; (mov r8, r8)
 8016aca:	46bd      	mov	sp, r7
 8016acc:	b002      	add	sp, #8
 8016ace:	bd80      	pop	{r7, pc}

08016ad0 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b082      	sub	sp, #8
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	0002      	movs	r2, r0
 8016ad8:	6039      	str	r1, [r7, #0]
 8016ada:	1dfb      	adds	r3, r7, #7
 8016adc:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016ade:	1dfb      	adds	r3, r7, #7
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	2b05      	cmp	r3, #5
 8016ae4:	d105      	bne.n	8016af2 <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	0018      	movs	r0, r3
 8016aea:	f001 fbe1 	bl	80182b0 <RegionEU868GetNvmCtx>
 8016aee:	0003      	movs	r3, r0
 8016af0:	e000      	b.n	8016af4 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8016af2:	2300      	movs	r3, #0
        }
    }
}
 8016af4:	0018      	movs	r0, r3
 8016af6:	46bd      	mov	sp, r7
 8016af8:	b002      	add	sp, #8
 8016afa:	bd80      	pop	{r7, pc}

08016afc <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b082      	sub	sp, #8
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6039      	str	r1, [r7, #0]
 8016b04:	0011      	movs	r1, r2
 8016b06:	1dfb      	adds	r3, r7, #7
 8016b08:	1c02      	adds	r2, r0, #0
 8016b0a:	701a      	strb	r2, [r3, #0]
 8016b0c:	1dbb      	adds	r3, r7, #6
 8016b0e:	1c0a      	adds	r2, r1, #0
 8016b10:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016b12:	1dfb      	adds	r3, r7, #7
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	2b05      	cmp	r3, #5
 8016b18:	d108      	bne.n	8016b2c <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016b1a:	1dbb      	adds	r3, r7, #6
 8016b1c:	781a      	ldrb	r2, [r3, #0]
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	0011      	movs	r1, r2
 8016b22:	0018      	movs	r0, r3
 8016b24:	f001 fbd4 	bl	80182d0 <RegionEU868Verify>
 8016b28:	0003      	movs	r3, r0
 8016b2a:	e000      	b.n	8016b2e <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016b2c:	2300      	movs	r3, #0
        }
    }
}
 8016b2e:	0018      	movs	r0, r3
 8016b30:	46bd      	mov	sp, r7
 8016b32:	b002      	add	sp, #8
 8016b34:	bd80      	pop	{r7, pc}

08016b36 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016b36:	b580      	push	{r7, lr}
 8016b38:	b082      	sub	sp, #8
 8016b3a:	af00      	add	r7, sp, #0
 8016b3c:	0002      	movs	r2, r0
 8016b3e:	6039      	str	r1, [r7, #0]
 8016b40:	1dfb      	adds	r3, r7, #7
 8016b42:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016b44:	1dfb      	adds	r3, r7, #7
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b05      	cmp	r3, #5
 8016b4a:	d104      	bne.n	8016b56 <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	0018      	movs	r0, r3
 8016b50:	f001 fc18 	bl	8018384 <RegionEU868ApplyCFList>
 8016b54:	e000      	b.n	8016b58 <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016b56:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016b58:	46c0      	nop			; (mov r8, r8)
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	b002      	add	sp, #8
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	0002      	movs	r2, r0
 8016b68:	6039      	str	r1, [r7, #0]
 8016b6a:	1dfb      	adds	r3, r7, #7
 8016b6c:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016b6e:	1dfb      	adds	r3, r7, #7
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	2b05      	cmp	r3, #5
 8016b74:	d105      	bne.n	8016b82 <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	0018      	movs	r0, r3
 8016b7a:	f001 fc93 	bl	80184a4 <RegionEU868ChanMaskSet>
 8016b7e:	0003      	movs	r3, r0
 8016b80:	e000      	b.n	8016b84 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016b82:	2300      	movs	r3, #0
        }
    }
}
 8016b84:	0018      	movs	r0, r3
 8016b86:	46bd      	mov	sp, r7
 8016b88:	b002      	add	sp, #8
 8016b8a:	bd80      	pop	{r7, pc}

08016b8c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016b8c:	b590      	push	{r4, r7, lr}
 8016b8e:	b083      	sub	sp, #12
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	0004      	movs	r4, r0
 8016b94:	0008      	movs	r0, r1
 8016b96:	0011      	movs	r1, r2
 8016b98:	603b      	str	r3, [r7, #0]
 8016b9a:	1dfb      	adds	r3, r7, #7
 8016b9c:	1c22      	adds	r2, r4, #0
 8016b9e:	701a      	strb	r2, [r3, #0]
 8016ba0:	1dbb      	adds	r3, r7, #6
 8016ba2:	1c02      	adds	r2, r0, #0
 8016ba4:	701a      	strb	r2, [r3, #0]
 8016ba6:	1d7b      	adds	r3, r7, #5
 8016ba8:	1c0a      	adds	r2, r1, #0
 8016baa:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016bac:	1dfb      	adds	r3, r7, #7
 8016bae:	781b      	ldrb	r3, [r3, #0]
 8016bb0:	2b05      	cmp	r3, #5
 8016bb2:	d10a      	bne.n	8016bca <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016bb4:	69bc      	ldr	r4, [r7, #24]
 8016bb6:	683a      	ldr	r2, [r7, #0]
 8016bb8:	1d7b      	adds	r3, r7, #5
 8016bba:	7819      	ldrb	r1, [r3, #0]
 8016bbc:	1dbb      	adds	r3, r7, #6
 8016bbe:	2000      	movs	r0, #0
 8016bc0:	5618      	ldrsb	r0, [r3, r0]
 8016bc2:	0023      	movs	r3, r4
 8016bc4:	f001 fc94 	bl	80184f0 <RegionEU868ComputeRxWindowParameters>
 8016bc8:	e000      	b.n	8016bcc <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016bca:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016bcc:	46c0      	nop			; (mov r8, r8)
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	b003      	add	sp, #12
 8016bd2:	bd90      	pop	{r4, r7, pc}

08016bd4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b084      	sub	sp, #16
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	60b9      	str	r1, [r7, #8]
 8016bdc:	607a      	str	r2, [r7, #4]
 8016bde:	210f      	movs	r1, #15
 8016be0:	187b      	adds	r3, r7, r1
 8016be2:	1c02      	adds	r2, r0, #0
 8016be4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016be6:	187b      	adds	r3, r7, r1
 8016be8:	781b      	ldrb	r3, [r3, #0]
 8016bea:	2b05      	cmp	r3, #5
 8016bec:	d107      	bne.n	8016bfe <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016bee:	687a      	ldr	r2, [r7, #4]
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	0011      	movs	r1, r2
 8016bf4:	0018      	movs	r0, r3
 8016bf6:	f001 fcdd 	bl	80185b4 <RegionEU868RxConfig>
 8016bfa:	0003      	movs	r3, r0
 8016bfc:	e000      	b.n	8016c00 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016bfe:	2300      	movs	r3, #0
        }
    }
}
 8016c00:	0018      	movs	r0, r3
 8016c02:	46bd      	mov	sp, r7
 8016c04:	b004      	add	sp, #16
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b084      	sub	sp, #16
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	60b9      	str	r1, [r7, #8]
 8016c10:	607a      	str	r2, [r7, #4]
 8016c12:	603b      	str	r3, [r7, #0]
 8016c14:	210f      	movs	r1, #15
 8016c16:	187b      	adds	r3, r7, r1
 8016c18:	1c02      	adds	r2, r0, #0
 8016c1a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c1c:	187b      	adds	r3, r7, r1
 8016c1e:	781b      	ldrb	r3, [r3, #0]
 8016c20:	2b05      	cmp	r3, #5
 8016c22:	d107      	bne.n	8016c34 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016c24:	683a      	ldr	r2, [r7, #0]
 8016c26:	6879      	ldr	r1, [r7, #4]
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	0018      	movs	r0, r3
 8016c2c:	f001 fdb6 	bl	801879c <RegionEU868TxConfig>
 8016c30:	0003      	movs	r3, r0
 8016c32:	e000      	b.n	8016c36 <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016c34:	2300      	movs	r3, #0
        }
    }
}
 8016c36:	0018      	movs	r0, r3
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	b004      	add	sp, #16
 8016c3c:	bd80      	pop	{r7, pc}

08016c3e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016c3e:	b590      	push	{r4, r7, lr}
 8016c40:	b087      	sub	sp, #28
 8016c42:	af02      	add	r7, sp, #8
 8016c44:	60b9      	str	r1, [r7, #8]
 8016c46:	607a      	str	r2, [r7, #4]
 8016c48:	603b      	str	r3, [r7, #0]
 8016c4a:	210f      	movs	r1, #15
 8016c4c:	187b      	adds	r3, r7, r1
 8016c4e:	1c02      	adds	r2, r0, #0
 8016c50:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c52:	187b      	adds	r3, r7, r1
 8016c54:	781b      	ldrb	r3, [r3, #0]
 8016c56:	2b05      	cmp	r3, #5
 8016c58:	d10a      	bne.n	8016c70 <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016c5a:	6a3c      	ldr	r4, [r7, #32]
 8016c5c:	683a      	ldr	r2, [r7, #0]
 8016c5e:	6879      	ldr	r1, [r7, #4]
 8016c60:	68b8      	ldr	r0, [r7, #8]
 8016c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c64:	9300      	str	r3, [sp, #0]
 8016c66:	0023      	movs	r3, r4
 8016c68:	f001 fe84 	bl	8018974 <RegionEU868LinkAdrReq>
 8016c6c:	0003      	movs	r3, r0
 8016c6e:	e000      	b.n	8016c72 <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016c70:	2300      	movs	r3, #0
        }
    }
}
 8016c72:	0018      	movs	r0, r3
 8016c74:	46bd      	mov	sp, r7
 8016c76:	b005      	add	sp, #20
 8016c78:	bd90      	pop	{r4, r7, pc}

08016c7a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016c7a:	b580      	push	{r7, lr}
 8016c7c:	b082      	sub	sp, #8
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	0002      	movs	r2, r0
 8016c82:	6039      	str	r1, [r7, #0]
 8016c84:	1dfb      	adds	r3, r7, #7
 8016c86:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c88:	1dfb      	adds	r3, r7, #7
 8016c8a:	781b      	ldrb	r3, [r3, #0]
 8016c8c:	2b05      	cmp	r3, #5
 8016c8e:	d105      	bne.n	8016c9c <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	0018      	movs	r0, r3
 8016c94:	f001 ffc6 	bl	8018c24 <RegionEU868RxParamSetupReq>
 8016c98:	0003      	movs	r3, r0
 8016c9a:	e000      	b.n	8016c9e <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016c9c:	2300      	movs	r3, #0
        }
    }
}
 8016c9e:	0018      	movs	r0, r3
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	b002      	add	sp, #8
 8016ca4:	bd80      	pop	{r7, pc}

08016ca6 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016ca6:	b580      	push	{r7, lr}
 8016ca8:	b082      	sub	sp, #8
 8016caa:	af00      	add	r7, sp, #0
 8016cac:	0002      	movs	r2, r0
 8016cae:	6039      	str	r1, [r7, #0]
 8016cb0:	1dfb      	adds	r3, r7, #7
 8016cb2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016cb4:	1dfb      	adds	r3, r7, #7
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	2b05      	cmp	r3, #5
 8016cba:	d105      	bne.n	8016cc8 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016cbc:	683b      	ldr	r3, [r7, #0]
 8016cbe:	0018      	movs	r0, r3
 8016cc0:	f001 fff9 	bl	8018cb6 <RegionEU868NewChannelReq>
 8016cc4:	0003      	movs	r3, r0
 8016cc6:	e000      	b.n	8016cca <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016cc8:	2300      	movs	r3, #0
        }
    }
}
 8016cca:	0018      	movs	r0, r3
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	b002      	add	sp, #8
 8016cd0:	bd80      	pop	{r7, pc}

08016cd2 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016cd2:	b580      	push	{r7, lr}
 8016cd4:	b082      	sub	sp, #8
 8016cd6:	af00      	add	r7, sp, #0
 8016cd8:	0002      	movs	r2, r0
 8016cda:	6039      	str	r1, [r7, #0]
 8016cdc:	1dfb      	adds	r3, r7, #7
 8016cde:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016ce0:	1dfb      	adds	r3, r7, #7
 8016ce2:	781b      	ldrb	r3, [r3, #0]
 8016ce4:	2b05      	cmp	r3, #5
 8016ce6:	d105      	bne.n	8016cf4 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016ce8:	683b      	ldr	r3, [r7, #0]
 8016cea:	0018      	movs	r0, r3
 8016cec:	f002 f84b 	bl	8018d86 <RegionEU868TxParamSetupReq>
 8016cf0:	0003      	movs	r3, r0
 8016cf2:	e000      	b.n	8016cf6 <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016cf4:	2300      	movs	r3, #0
        }
    }
}
 8016cf6:	0018      	movs	r0, r3
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	b002      	add	sp, #8
 8016cfc:	bd80      	pop	{r7, pc}

08016cfe <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016cfe:	b580      	push	{r7, lr}
 8016d00:	b082      	sub	sp, #8
 8016d02:	af00      	add	r7, sp, #0
 8016d04:	0002      	movs	r2, r0
 8016d06:	6039      	str	r1, [r7, #0]
 8016d08:	1dfb      	adds	r3, r7, #7
 8016d0a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d0c:	1dfb      	adds	r3, r7, #7
 8016d0e:	781b      	ldrb	r3, [r3, #0]
 8016d10:	2b05      	cmp	r3, #5
 8016d12:	d105      	bne.n	8016d20 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016d14:	683b      	ldr	r3, [r7, #0]
 8016d16:	0018      	movs	r0, r3
 8016d18:	f002 f840 	bl	8018d9c <RegionEU868DlChannelReq>
 8016d1c:	0003      	movs	r3, r0
 8016d1e:	e000      	b.n	8016d22 <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016d20:	2300      	movs	r3, #0
        }
    }
}
 8016d22:	0018      	movs	r0, r3
 8016d24:	46bd      	mov	sp, r7
 8016d26:	b002      	add	sp, #8
 8016d28:	bd80      	pop	{r7, pc}

08016d2a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016d2a:	b590      	push	{r4, r7, lr}
 8016d2c:	b083      	sub	sp, #12
 8016d2e:	af00      	add	r7, sp, #0
 8016d30:	0004      	movs	r4, r0
 8016d32:	0008      	movs	r0, r1
 8016d34:	0011      	movs	r1, r2
 8016d36:	1dfb      	adds	r3, r7, #7
 8016d38:	1c22      	adds	r2, r4, #0
 8016d3a:	701a      	strb	r2, [r3, #0]
 8016d3c:	1dbb      	adds	r3, r7, #6
 8016d3e:	1c02      	adds	r2, r0, #0
 8016d40:	701a      	strb	r2, [r3, #0]
 8016d42:	1d7b      	adds	r3, r7, #5
 8016d44:	1c0a      	adds	r2, r1, #0
 8016d46:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d48:	1dfb      	adds	r3, r7, #7
 8016d4a:	781b      	ldrb	r3, [r3, #0]
 8016d4c:	2b05      	cmp	r3, #5
 8016d4e:	d10a      	bne.n	8016d66 <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016d50:	1d7b      	adds	r3, r7, #5
 8016d52:	781a      	ldrb	r2, [r3, #0]
 8016d54:	1dbb      	adds	r3, r7, #6
 8016d56:	781b      	ldrb	r3, [r3, #0]
 8016d58:	b25b      	sxtb	r3, r3
 8016d5a:	0011      	movs	r1, r2
 8016d5c:	0018      	movs	r0, r3
 8016d5e:	f002 f86b 	bl	8018e38 <RegionEU868AlternateDr>
 8016d62:	0003      	movs	r3, r0
 8016d64:	e000      	b.n	8016d68 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016d66:	2300      	movs	r3, #0
        }
    }
}
 8016d68:	0018      	movs	r0, r3
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	b003      	add	sp, #12
 8016d6e:	bd90      	pop	{r4, r7, pc}

08016d70 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b084      	sub	sp, #16
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	60b9      	str	r1, [r7, #8]
 8016d78:	607a      	str	r2, [r7, #4]
 8016d7a:	603b      	str	r3, [r7, #0]
 8016d7c:	210f      	movs	r1, #15
 8016d7e:	187b      	adds	r3, r7, r1
 8016d80:	1c02      	adds	r2, r0, #0
 8016d82:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d84:	187b      	adds	r3, r7, r1
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	2b05      	cmp	r3, #5
 8016d8a:	d107      	bne.n	8016d9c <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016d8c:	69bb      	ldr	r3, [r7, #24]
 8016d8e:	683a      	ldr	r2, [r7, #0]
 8016d90:	6879      	ldr	r1, [r7, #4]
 8016d92:	68b8      	ldr	r0, [r7, #8]
 8016d94:	f002 f860 	bl	8018e58 <RegionEU868NextChannel>
 8016d98:	0003      	movs	r3, r0
 8016d9a:	e000      	b.n	8016d9e <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016d9c:	2309      	movs	r3, #9
        }
    }
}
 8016d9e:	0018      	movs	r0, r3
 8016da0:	46bd      	mov	sp, r7
 8016da2:	b004      	add	sp, #16
 8016da4:	bd80      	pop	{r7, pc}

08016da6 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8016da6:	b580      	push	{r7, lr}
 8016da8:	b082      	sub	sp, #8
 8016daa:	af00      	add	r7, sp, #0
 8016dac:	0002      	movs	r2, r0
 8016dae:	6039      	str	r1, [r7, #0]
 8016db0:	1dfb      	adds	r3, r7, #7
 8016db2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016db4:	1dfb      	adds	r3, r7, #7
 8016db6:	781b      	ldrb	r3, [r3, #0]
 8016db8:	2b05      	cmp	r3, #5
 8016dba:	d104      	bne.n	8016dc6 <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	0018      	movs	r0, r3
 8016dc0:	f002 f9f4 	bl	80191ac <RegionEU868SetContinuousWave>
 8016dc4:	e000      	b.n	8016dc8 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8016dc6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016dc8:	46c0      	nop			; (mov r8, r8)
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	b002      	add	sp, #8
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016dd0:	b5b0      	push	{r4, r5, r7, lr}
 8016dd2:	b082      	sub	sp, #8
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	0005      	movs	r5, r0
 8016dd8:	000c      	movs	r4, r1
 8016dda:	0010      	movs	r0, r2
 8016ddc:	0019      	movs	r1, r3
 8016dde:	1dfb      	adds	r3, r7, #7
 8016de0:	1c2a      	adds	r2, r5, #0
 8016de2:	701a      	strb	r2, [r3, #0]
 8016de4:	1dbb      	adds	r3, r7, #6
 8016de6:	1c22      	adds	r2, r4, #0
 8016de8:	701a      	strb	r2, [r3, #0]
 8016dea:	1d7b      	adds	r3, r7, #5
 8016dec:	1c02      	adds	r2, r0, #0
 8016dee:	701a      	strb	r2, [r3, #0]
 8016df0:	1d3b      	adds	r3, r7, #4
 8016df2:	1c0a      	adds	r2, r1, #0
 8016df4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016df6:	1dfb      	adds	r3, r7, #7
 8016df8:	781b      	ldrb	r3, [r3, #0]
 8016dfa:	2b05      	cmp	r3, #5
 8016dfc:	d10c      	bne.n	8016e18 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016dfe:	1d3b      	adds	r3, r7, #4
 8016e00:	2200      	movs	r2, #0
 8016e02:	569a      	ldrsb	r2, [r3, r2]
 8016e04:	1d7b      	adds	r3, r7, #5
 8016e06:	2100      	movs	r1, #0
 8016e08:	5659      	ldrsb	r1, [r3, r1]
 8016e0a:	1dbb      	adds	r3, r7, #6
 8016e0c:	781b      	ldrb	r3, [r3, #0]
 8016e0e:	0018      	movs	r0, r3
 8016e10:	f002 fa24 	bl	801925c <RegionEU868ApplyDrOffset>
 8016e14:	0003      	movs	r3, r0
 8016e16:	e001      	b.n	8016e1c <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016e18:	1d7b      	adds	r3, r7, #5
 8016e1a:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8016e1c:	0018      	movs	r0, r3
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	b002      	add	sp, #8
 8016e22:	bdb0      	pop	{r4, r5, r7, pc}

08016e24 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b082      	sub	sp, #8
 8016e28:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016e2a:	4b03      	ldr	r3, [pc, #12]	; (8016e38 <RegionGetVersion+0x14>)
 8016e2c:	607b      	str	r3, [r7, #4]

    return version;
 8016e2e:	687b      	ldr	r3, [r7, #4]
}
 8016e30:	0018      	movs	r0, r3
 8016e32:	46bd      	mov	sp, r7
 8016e34:	b002      	add	sp, #8
 8016e36:	bd80      	pop	{r7, pc}
 8016e38:	01000300 	.word	0x01000300

08016e3c <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e3e:	b087      	sub	sp, #28
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	60f8      	str	r0, [r7, #12]
 8016e44:	0008      	movs	r0, r1
 8016e46:	0039      	movs	r1, r7
 8016e48:	600a      	str	r2, [r1, #0]
 8016e4a:	604b      	str	r3, [r1, #4]
 8016e4c:	230b      	movs	r3, #11
 8016e4e:	18fb      	adds	r3, r7, r3
 8016e50:	1c02      	adds	r2, r0, #0
 8016e52:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8016e54:	2514      	movs	r5, #20
 8016e56:	197c      	adds	r4, r7, r5
 8016e58:	003b      	movs	r3, r7
 8016e5a:	6818      	ldr	r0, [r3, #0]
 8016e5c:	6859      	ldr	r1, [r3, #4]
 8016e5e:	f000 f91b 	bl	8017098 <RegionCommonGetJoinDc>
 8016e62:	0003      	movs	r3, r0
 8016e64:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 8016e66:	2616      	movs	r6, #22
 8016e68:	19bb      	adds	r3, r7, r6
 8016e6a:	68fa      	ldr	r2, [r7, #12]
 8016e6c:	8812      	ldrh	r2, [r2, #0]
 8016e6e:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 8016e70:	230b      	movs	r3, #11
 8016e72:	18fb      	adds	r3, r7, r3
 8016e74:	781b      	ldrb	r3, [r3, #0]
 8016e76:	2201      	movs	r2, #1
 8016e78:	4053      	eors	r3, r2
 8016e7a:	b2db      	uxtb	r3, r3
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d012      	beq.n	8016ea6 <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8016e80:	197c      	adds	r4, r7, r5
 8016e82:	003b      	movs	r3, r7
 8016e84:	6818      	ldr	r0, [r3, #0]
 8016e86:	6859      	ldr	r1, [r3, #4]
 8016e88:	f000 f906 	bl	8017098 <RegionCommonGetJoinDc>
 8016e8c:	0003      	movs	r3, r0
 8016e8e:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016e90:	19ba      	adds	r2, r7, r6
 8016e92:	197b      	adds	r3, r7, r5
 8016e94:	19b9      	adds	r1, r7, r6
 8016e96:	880c      	ldrh	r4, [r1, #0]
 8016e98:	881b      	ldrh	r3, [r3, #0]
 8016e9a:	b298      	uxth	r0, r3
 8016e9c:	b2a1      	uxth	r1, r4
 8016e9e:	4288      	cmp	r0, r1
 8016ea0:	d200      	bcs.n	8016ea4 <GetDutyCycle+0x68>
 8016ea2:	1c23      	adds	r3, r4, #0
 8016ea4:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016ea6:	2216      	movs	r2, #22
 8016ea8:	18bb      	adds	r3, r7, r2
 8016eaa:	881b      	ldrh	r3, [r3, #0]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d102      	bne.n	8016eb6 <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 8016eb0:	18bb      	adds	r3, r7, r2
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 8016eb6:	2316      	movs	r3, #22
 8016eb8:	18fb      	adds	r3, r7, r3
 8016eba:	881b      	ldrh	r3, [r3, #0]
}
 8016ebc:	0018      	movs	r0, r3
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	b007      	add	sp, #28
 8016ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ec4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ec6:	b087      	sub	sp, #28
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	60f8      	str	r0, [r7, #12]
 8016ecc:	0008      	movs	r0, r1
 8016ece:	0039      	movs	r1, r7
 8016ed0:	600a      	str	r2, [r1, #0]
 8016ed2:	604b      	str	r3, [r1, #4]
 8016ed4:	210b      	movs	r1, #11
 8016ed6:	187b      	adds	r3, r7, r1
 8016ed8:	1c02      	adds	r2, r0, #0
 8016eda:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 8016edc:	2614      	movs	r6, #20
 8016ede:	19bb      	adds	r3, r7, r6
 8016ee0:	68fa      	ldr	r2, [r7, #12]
 8016ee2:	8812      	ldrh	r2, [r2, #0]
 8016ee4:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 8016ee6:	2317      	movs	r3, #23
 8016ee8:	18fb      	adds	r3, r7, r3
 8016eea:	2201      	movs	r2, #1
 8016eec:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016eee:	19bc      	adds	r4, r7, r6
 8016ef0:	003b      	movs	r3, r7
 8016ef2:	000d      	movs	r5, r1
 8016ef4:	187a      	adds	r2, r7, r1
 8016ef6:	7811      	ldrb	r1, [r2, #0]
 8016ef8:	68f8      	ldr	r0, [r7, #12]
 8016efa:	681a      	ldr	r2, [r3, #0]
 8016efc:	685b      	ldr	r3, [r3, #4]
 8016efe:	f7ff ff9d 	bl	8016e3c <GetDutyCycle>
 8016f02:	0003      	movs	r3, r0
 8016f04:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8016f06:	197b      	adds	r3, r7, r5
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	2201      	movs	r2, #1
 8016f0c:	4053      	eors	r3, r2
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d00a      	beq.n	8016f2a <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 8016f14:	19bb      	adds	r3, r7, r6
 8016f16:	881b      	ldrh	r3, [r3, #0]
 8016f18:	2164      	movs	r1, #100	; 0x64
 8016f1a:	0018      	movs	r0, r3
 8016f1c:	f7e9 f8fc 	bl	8000118 <__udivsi3>
 8016f20:	0003      	movs	r3, r0
 8016f22:	b29a      	uxth	r2, r3
 8016f24:	2317      	movs	r3, #23
 8016f26:	18fb      	adds	r3, r7, r3
 8016f28:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 8016f2a:	2317      	movs	r3, #23
 8016f2c:	18fb      	adds	r3, r7, r3
 8016f2e:	781b      	ldrb	r3, [r3, #0]
 8016f30:	4a09      	ldr	r2, [pc, #36]	; (8016f58 <SetMaxTimeCredits+0x94>)
 8016f32:	4353      	muls	r3, r2
 8016f34:	001a      	movs	r2, r3
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d103      	bne.n	8016f4a <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	68da      	ldr	r2, [r3, #12]
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 8016f4a:	2314      	movs	r3, #20
 8016f4c:	18fb      	adds	r3, r7, r3
 8016f4e:	881b      	ldrh	r3, [r3, #0]
}
 8016f50:	0018      	movs	r0, r3
 8016f52:	46bd      	mov	sp, r7
 8016f54:	b007      	add	sp, #28
 8016f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f58:	0036ee80 	.word	0x0036ee80

08016f5c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016f5c:	b590      	push	{r4, r7, lr}
 8016f5e:	b085      	sub	sp, #20
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
 8016f64:	000c      	movs	r4, r1
 8016f66:	0010      	movs	r0, r2
 8016f68:	0019      	movs	r1, r3
 8016f6a:	1cfb      	adds	r3, r7, #3
 8016f6c:	1c22      	adds	r2, r4, #0
 8016f6e:	701a      	strb	r2, [r3, #0]
 8016f70:	1cbb      	adds	r3, r7, #2
 8016f72:	1c02      	adds	r2, r0, #0
 8016f74:	701a      	strb	r2, [r3, #0]
 8016f76:	1c7b      	adds	r3, r7, #1
 8016f78:	1c0a      	adds	r2, r1, #0
 8016f7a:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 8016f7c:	230e      	movs	r3, #14
 8016f7e:	18fc      	adds	r4, r7, r3
 8016f80:	2320      	movs	r3, #32
 8016f82:	18fb      	adds	r3, r7, r3
 8016f84:	1cfa      	adds	r2, r7, #3
 8016f86:	7811      	ldrb	r1, [r2, #0]
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	681a      	ldr	r2, [r3, #0]
 8016f8c:	685b      	ldr	r3, [r3, #4]
 8016f8e:	f7ff ff99 	bl	8016ec4 <SetMaxTimeCredits>
 8016f92:	0003      	movs	r3, r0
 8016f94:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8016f96:	1cfb      	adds	r3, r7, #3
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	2201      	movs	r2, #1
 8016f9c:	4053      	eors	r3, r2
 8016f9e:	b2db      	uxtb	r3, r3
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d012      	beq.n	8016fca <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 8016fa4:	1cbb      	adds	r3, r7, #2
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	2201      	movs	r2, #1
 8016faa:	4053      	eors	r3, r2
 8016fac:	b2db      	uxtb	r3, r3
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d016      	beq.n	8016fe0 <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 8016fb2:	1c7b      	adds	r3, r7, #1
 8016fb4:	781b      	ldrb	r3, [r3, #0]
 8016fb6:	2201      	movs	r2, #1
 8016fb8:	4053      	eors	r3, r2
 8016fba:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d00f      	beq.n	8016fe0 <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	68da      	ldr	r2, [r3, #12]
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	609a      	str	r2, [r3, #8]
 8016fc8:	e00a      	b.n	8016fe0 <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016fca:	1cbb      	adds	r3, r7, #2
 8016fcc:	781b      	ldrb	r3, [r3, #0]
 8016fce:	2201      	movs	r2, #1
 8016fd0:	4053      	eors	r3, r2
 8016fd2:	b2db      	uxtb	r3, r3
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d003      	beq.n	8016fe0 <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	68da      	ldr	r2, [r3, #12]
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	685b      	ldr	r3, [r3, #4]
 8016fe4:	0018      	movs	r0, r3
 8016fe6:	f005 fe9d 	bl	801cd24 <UTIL_TIMER_GetElapsedTime>
 8016fea:	0002      	movs	r2, r0
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	689b      	ldr	r3, [r3, #8]
 8016ff0:	18d2      	adds	r2, r2, r3
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	689a      	ldr	r2, [r3, #8]
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	68db      	ldr	r3, [r3, #12]
 8016ffe:	429a      	cmp	r2, r3
 8017000:	d903      	bls.n	801700a <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	68da      	ldr	r2, [r3, #12]
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801700e:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017010:	230e      	movs	r3, #14
 8017012:	18fb      	adds	r3, r7, r3
 8017014:	881b      	ldrh	r3, [r3, #0]
}
 8017016:	0018      	movs	r0, r3
 8017018:	46bd      	mov	sp, r7
 801701a:	b005      	add	sp, #20
 801701c:	bd90      	pop	{r4, r7, pc}

0801701e <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801701e:	b580      	push	{r7, lr}
 8017020:	b084      	sub	sp, #16
 8017022:	af00      	add	r7, sp, #0
 8017024:	0002      	movs	r2, r0
 8017026:	1dbb      	adds	r3, r7, #6
 8017028:	801a      	strh	r2, [r3, #0]
 801702a:	1d7b      	adds	r3, r7, #5
 801702c:	1c0a      	adds	r2, r1, #0
 801702e:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8017030:	230f      	movs	r3, #15
 8017032:	18fb      	adds	r3, r7, r3
 8017034:	2200      	movs	r2, #0
 8017036:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017038:	230e      	movs	r3, #14
 801703a:	18fb      	adds	r3, r7, r3
 801703c:	2200      	movs	r2, #0
 801703e:	701a      	strb	r2, [r3, #0]
 8017040:	e01b      	b.n	801707a <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017042:	1dbb      	adds	r3, r7, #6
 8017044:	881b      	ldrh	r3, [r3, #0]
 8017046:	200e      	movs	r0, #14
 8017048:	183a      	adds	r2, r7, r0
 801704a:	7812      	ldrb	r2, [r2, #0]
 801704c:	2101      	movs	r1, #1
 801704e:	4091      	lsls	r1, r2
 8017050:	000a      	movs	r2, r1
 8017052:	401a      	ands	r2, r3
 8017054:	183b      	adds	r3, r7, r0
 8017056:	781b      	ldrb	r3, [r3, #0]
 8017058:	2101      	movs	r1, #1
 801705a:	4099      	lsls	r1, r3
 801705c:	000b      	movs	r3, r1
 801705e:	429a      	cmp	r2, r3
 8017060:	d105      	bne.n	801706e <CountChannels+0x50>
        {
            nbActiveBits++;
 8017062:	210f      	movs	r1, #15
 8017064:	187b      	adds	r3, r7, r1
 8017066:	781a      	ldrb	r2, [r3, #0]
 8017068:	187b      	adds	r3, r7, r1
 801706a:	3201      	adds	r2, #1
 801706c:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 801706e:	210e      	movs	r1, #14
 8017070:	187b      	adds	r3, r7, r1
 8017072:	781a      	ldrb	r2, [r3, #0]
 8017074:	187b      	adds	r3, r7, r1
 8017076:	3201      	adds	r2, #1
 8017078:	701a      	strb	r2, [r3, #0]
 801707a:	230e      	movs	r3, #14
 801707c:	18fa      	adds	r2, r7, r3
 801707e:	1d7b      	adds	r3, r7, #5
 8017080:	7812      	ldrb	r2, [r2, #0]
 8017082:	781b      	ldrb	r3, [r3, #0]
 8017084:	429a      	cmp	r2, r3
 8017086:	d3dc      	bcc.n	8017042 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8017088:	230f      	movs	r3, #15
 801708a:	18fb      	adds	r3, r7, r3
 801708c:	781b      	ldrb	r3, [r3, #0]
}
 801708e:	0018      	movs	r0, r3
 8017090:	46bd      	mov	sp, r7
 8017092:	b004      	add	sp, #16
 8017094:	bd80      	pop	{r7, pc}
	...

08017098 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b084      	sub	sp, #16
 801709c:	af00      	add	r7, sp, #0
 801709e:	003b      	movs	r3, r7
 80170a0:	6018      	str	r0, [r3, #0]
 80170a2:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 80170a4:	210e      	movs	r1, #14
 80170a6:	187b      	adds	r3, r7, r1
 80170a8:	2200      	movs	r2, #0
 80170aa:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 80170ac:	003b      	movs	r3, r7
 80170ae:	681a      	ldr	r2, [r3, #0]
 80170b0:	23e1      	movs	r3, #225	; 0xe1
 80170b2:	011b      	lsls	r3, r3, #4
 80170b4:	429a      	cmp	r2, r3
 80170b6:	d203      	bcs.n	80170c0 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 80170b8:	187b      	adds	r3, r7, r1
 80170ba:	2264      	movs	r2, #100	; 0x64
 80170bc:	801a      	strh	r2, [r3, #0]
 80170be:	e00e      	b.n	80170de <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 80170c0:	003b      	movs	r3, r7
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	4a09      	ldr	r2, [pc, #36]	; (80170ec <RegionCommonGetJoinDc+0x54>)
 80170c6:	4293      	cmp	r3, r2
 80170c8:	d805      	bhi.n	80170d6 <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 80170ca:	230e      	movs	r3, #14
 80170cc:	18fb      	adds	r3, r7, r3
 80170ce:	22fa      	movs	r2, #250	; 0xfa
 80170d0:	0092      	lsls	r2, r2, #2
 80170d2:	801a      	strh	r2, [r3, #0]
 80170d4:	e003      	b.n	80170de <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 80170d6:	230e      	movs	r3, #14
 80170d8:	18fb      	adds	r3, r7, r3
 80170da:	4a05      	ldr	r2, [pc, #20]	; (80170f0 <RegionCommonGetJoinDc+0x58>)
 80170dc:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 80170de:	230e      	movs	r3, #14
 80170e0:	18fb      	adds	r3, r7, r3
 80170e2:	881b      	ldrh	r3, [r3, #0]
}
 80170e4:	0018      	movs	r0, r3
 80170e6:	46bd      	mov	sp, r7
 80170e8:	b004      	add	sp, #16
 80170ea:	bd80      	pop	{r7, pc}
 80170ec:	00009aaf 	.word	0x00009aaf
 80170f0:	00002710 	.word	0x00002710

080170f4 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80170f4:	b590      	push	{r4, r7, lr}
 80170f6:	b085      	sub	sp, #20
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	0004      	movs	r4, r0
 80170fc:	6039      	str	r1, [r7, #0]
 80170fe:	0010      	movs	r0, r2
 8017100:	0019      	movs	r1, r3
 8017102:	1dfb      	adds	r3, r7, #7
 8017104:	1c22      	adds	r2, r4, #0
 8017106:	701a      	strb	r2, [r3, #0]
 8017108:	1dbb      	adds	r3, r7, #6
 801710a:	1c02      	adds	r2, r0, #0
 801710c:	701a      	strb	r2, [r3, #0]
 801710e:	1d7b      	adds	r3, r7, #5
 8017110:	1c0a      	adds	r2, r1, #0
 8017112:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017114:	2320      	movs	r3, #32
 8017116:	18fb      	adds	r3, r7, r3
 8017118:	2200      	movs	r2, #0
 801711a:	569a      	ldrsb	r2, [r3, r2]
 801711c:	1d7b      	adds	r3, r7, #5
 801711e:	2100      	movs	r1, #0
 8017120:	5659      	ldrsb	r1, [r3, r1]
 8017122:	1dbb      	adds	r3, r7, #6
 8017124:	781b      	ldrb	r3, [r3, #0]
 8017126:	b25b      	sxtb	r3, r3
 8017128:	0018      	movs	r0, r3
 801712a:	f000 f87c 	bl	8017226 <RegionCommonValueInRange>
 801712e:	1e03      	subs	r3, r0, #0
 8017130:	d101      	bne.n	8017136 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8017132:	2300      	movs	r3, #0
 8017134:	e073      	b.n	801721e <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017136:	230f      	movs	r3, #15
 8017138:	18fb      	adds	r3, r7, r3
 801713a:	2200      	movs	r2, #0
 801713c:	701a      	strb	r2, [r3, #0]
 801713e:	230e      	movs	r3, #14
 8017140:	18fb      	adds	r3, r7, r3
 8017142:	2200      	movs	r2, #0
 8017144:	701a      	strb	r2, [r3, #0]
 8017146:	e062      	b.n	801720e <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017148:	230d      	movs	r3, #13
 801714a:	18fb      	adds	r3, r7, r3
 801714c:	2200      	movs	r2, #0
 801714e:	701a      	strb	r2, [r3, #0]
 8017150:	e04c      	b.n	80171ec <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017152:	230e      	movs	r3, #14
 8017154:	18fb      	adds	r3, r7, r3
 8017156:	781b      	ldrb	r3, [r3, #0]
 8017158:	005b      	lsls	r3, r3, #1
 801715a:	683a      	ldr	r2, [r7, #0]
 801715c:	18d3      	adds	r3, r2, r3
 801715e:	881b      	ldrh	r3, [r3, #0]
 8017160:	001a      	movs	r2, r3
 8017162:	200d      	movs	r0, #13
 8017164:	183b      	adds	r3, r7, r0
 8017166:	781b      	ldrb	r3, [r3, #0]
 8017168:	411a      	asrs	r2, r3
 801716a:	0013      	movs	r3, r2
 801716c:	2201      	movs	r2, #1
 801716e:	4013      	ands	r3, r2
 8017170:	d036      	beq.n	80171e0 <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017172:	240f      	movs	r4, #15
 8017174:	193b      	adds	r3, r7, r4
 8017176:	781a      	ldrb	r2, [r3, #0]
 8017178:	183b      	adds	r3, r7, r0
 801717a:	781b      	ldrb	r3, [r3, #0]
 801717c:	18d3      	adds	r3, r2, r3
 801717e:	001a      	movs	r2, r3
 8017180:	0013      	movs	r3, r2
 8017182:	005b      	lsls	r3, r3, #1
 8017184:	189b      	adds	r3, r3, r2
 8017186:	009b      	lsls	r3, r3, #2
 8017188:	001a      	movs	r2, r3
 801718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718c:	189b      	adds	r3, r3, r2
 801718e:	7a1b      	ldrb	r3, [r3, #8]
 8017190:	011b      	lsls	r3, r3, #4
 8017192:	b25b      	sxtb	r3, r3
 8017194:	111b      	asrs	r3, r3, #4
 8017196:	b25b      	sxtb	r3, r3
 8017198:	001a      	movs	r2, r3
 801719a:	230f      	movs	r3, #15
 801719c:	4013      	ands	r3, r2
 801719e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80171a0:	193b      	adds	r3, r7, r4
 80171a2:	781a      	ldrb	r2, [r3, #0]
 80171a4:	183b      	adds	r3, r7, r0
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	18d3      	adds	r3, r2, r3
 80171aa:	001a      	movs	r2, r3
 80171ac:	0013      	movs	r3, r2
 80171ae:	005b      	lsls	r3, r3, #1
 80171b0:	189b      	adds	r3, r3, r2
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	001a      	movs	r2, r3
 80171b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171b8:	189b      	adds	r3, r3, r2
 80171ba:	7a1b      	ldrb	r3, [r3, #8]
 80171bc:	b25b      	sxtb	r3, r3
 80171be:	111b      	asrs	r3, r3, #4
 80171c0:	b25b      	sxtb	r3, r3
 80171c2:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80171c4:	230f      	movs	r3, #15
 80171c6:	4013      	ands	r3, r2
 80171c8:	b25a      	sxtb	r2, r3
 80171ca:	1dbb      	adds	r3, r7, #6
 80171cc:	781b      	ldrb	r3, [r3, #0]
 80171ce:	b25b      	sxtb	r3, r3
 80171d0:	0018      	movs	r0, r3
 80171d2:	f000 f828 	bl	8017226 <RegionCommonValueInRange>
 80171d6:	0003      	movs	r3, r0
 80171d8:	2b01      	cmp	r3, #1
 80171da:	d101      	bne.n	80171e0 <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80171dc:	2301      	movs	r3, #1
 80171de:	e01e      	b.n	801721e <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 80171e0:	210d      	movs	r1, #13
 80171e2:	187b      	adds	r3, r7, r1
 80171e4:	781a      	ldrb	r2, [r3, #0]
 80171e6:	187b      	adds	r3, r7, r1
 80171e8:	3201      	adds	r2, #1
 80171ea:	701a      	strb	r2, [r3, #0]
 80171ec:	230d      	movs	r3, #13
 80171ee:	18fb      	adds	r3, r7, r3
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	2b0f      	cmp	r3, #15
 80171f4:	d9ad      	bls.n	8017152 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80171f6:	220f      	movs	r2, #15
 80171f8:	18bb      	adds	r3, r7, r2
 80171fa:	18ba      	adds	r2, r7, r2
 80171fc:	7812      	ldrb	r2, [r2, #0]
 80171fe:	3210      	adds	r2, #16
 8017200:	701a      	strb	r2, [r3, #0]
 8017202:	210e      	movs	r1, #14
 8017204:	187b      	adds	r3, r7, r1
 8017206:	781a      	ldrb	r2, [r3, #0]
 8017208:	187b      	adds	r3, r7, r1
 801720a:	3201      	adds	r2, #1
 801720c:	701a      	strb	r2, [r3, #0]
 801720e:	230f      	movs	r3, #15
 8017210:	18fa      	adds	r2, r7, r3
 8017212:	1dfb      	adds	r3, r7, #7
 8017214:	7812      	ldrb	r2, [r2, #0]
 8017216:	781b      	ldrb	r3, [r3, #0]
 8017218:	429a      	cmp	r2, r3
 801721a:	d395      	bcc.n	8017148 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 801721c:	2300      	movs	r3, #0
}
 801721e:	0018      	movs	r0, r3
 8017220:	46bd      	mov	sp, r7
 8017222:	b005      	add	sp, #20
 8017224:	bd90      	pop	{r4, r7, pc}

08017226 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017226:	b590      	push	{r4, r7, lr}
 8017228:	b083      	sub	sp, #12
 801722a:	af00      	add	r7, sp, #0
 801722c:	0004      	movs	r4, r0
 801722e:	0008      	movs	r0, r1
 8017230:	0011      	movs	r1, r2
 8017232:	1dfb      	adds	r3, r7, #7
 8017234:	1c22      	adds	r2, r4, #0
 8017236:	701a      	strb	r2, [r3, #0]
 8017238:	1dbb      	adds	r3, r7, #6
 801723a:	1c02      	adds	r2, r0, #0
 801723c:	701a      	strb	r2, [r3, #0]
 801723e:	1d7b      	adds	r3, r7, #5
 8017240:	1c0a      	adds	r2, r1, #0
 8017242:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8017244:	1dfa      	adds	r2, r7, #7
 8017246:	1dbb      	adds	r3, r7, #6
 8017248:	7812      	ldrb	r2, [r2, #0]
 801724a:	b252      	sxtb	r2, r2
 801724c:	781b      	ldrb	r3, [r3, #0]
 801724e:	b25b      	sxtb	r3, r3
 8017250:	429a      	cmp	r2, r3
 8017252:	db09      	blt.n	8017268 <RegionCommonValueInRange+0x42>
 8017254:	1dfa      	adds	r2, r7, #7
 8017256:	1d7b      	adds	r3, r7, #5
 8017258:	7812      	ldrb	r2, [r2, #0]
 801725a:	b252      	sxtb	r2, r2
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	b25b      	sxtb	r3, r3
 8017260:	429a      	cmp	r2, r3
 8017262:	dc01      	bgt.n	8017268 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8017264:	2301      	movs	r3, #1
 8017266:	e000      	b.n	801726a <RegionCommonValueInRange+0x44>
    }
    return 0;
 8017268:	2300      	movs	r3, #0
}
 801726a:	0018      	movs	r0, r3
 801726c:	46bd      	mov	sp, r7
 801726e:	b003      	add	sp, #12
 8017270:	bd90      	pop	{r4, r7, pc}

08017272 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017272:	b580      	push	{r7, lr}
 8017274:	b084      	sub	sp, #16
 8017276:	af00      	add	r7, sp, #0
 8017278:	6078      	str	r0, [r7, #4]
 801727a:	0008      	movs	r0, r1
 801727c:	0011      	movs	r1, r2
 801727e:	1cfb      	adds	r3, r7, #3
 8017280:	1c02      	adds	r2, r0, #0
 8017282:	701a      	strb	r2, [r3, #0]
 8017284:	1cbb      	adds	r3, r7, #2
 8017286:	1c0a      	adds	r2, r1, #0
 8017288:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 801728a:	210f      	movs	r1, #15
 801728c:	187b      	adds	r3, r7, r1
 801728e:	1cfa      	adds	r2, r7, #3
 8017290:	7812      	ldrb	r2, [r2, #0]
 8017292:	0912      	lsrs	r2, r2, #4
 8017294:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017296:	1cbb      	adds	r3, r7, #2
 8017298:	781b      	ldrb	r3, [r3, #0]
 801729a:	091b      	lsrs	r3, r3, #4
 801729c:	b2db      	uxtb	r3, r3
 801729e:	187a      	adds	r2, r7, r1
 80172a0:	7812      	ldrb	r2, [r2, #0]
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d805      	bhi.n	80172b2 <RegionCommonChanDisable+0x40>
 80172a6:	1cfa      	adds	r2, r7, #3
 80172a8:	1cbb      	adds	r3, r7, #2
 80172aa:	7812      	ldrb	r2, [r2, #0]
 80172ac:	781b      	ldrb	r3, [r3, #0]
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d301      	bcc.n	80172b6 <RegionCommonChanDisable+0x44>
    {
        return false;
 80172b2:	2300      	movs	r3, #0
 80172b4:	e01b      	b.n	80172ee <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80172b6:	200f      	movs	r0, #15
 80172b8:	183b      	adds	r3, r7, r0
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	005b      	lsls	r3, r3, #1
 80172be:	687a      	ldr	r2, [r7, #4]
 80172c0:	18d3      	adds	r3, r2, r3
 80172c2:	881b      	ldrh	r3, [r3, #0]
 80172c4:	b21b      	sxth	r3, r3
 80172c6:	1cfa      	adds	r2, r7, #3
 80172c8:	7812      	ldrb	r2, [r2, #0]
 80172ca:	210f      	movs	r1, #15
 80172cc:	400a      	ands	r2, r1
 80172ce:	2101      	movs	r1, #1
 80172d0:	4091      	lsls	r1, r2
 80172d2:	000a      	movs	r2, r1
 80172d4:	b212      	sxth	r2, r2
 80172d6:	43d2      	mvns	r2, r2
 80172d8:	b212      	sxth	r2, r2
 80172da:	4013      	ands	r3, r2
 80172dc:	b219      	sxth	r1, r3
 80172de:	183b      	adds	r3, r7, r0
 80172e0:	781b      	ldrb	r3, [r3, #0]
 80172e2:	005b      	lsls	r3, r3, #1
 80172e4:	687a      	ldr	r2, [r7, #4]
 80172e6:	18d3      	adds	r3, r2, r3
 80172e8:	b28a      	uxth	r2, r1
 80172ea:	801a      	strh	r2, [r3, #0]

    return true;
 80172ec:	2301      	movs	r3, #1
}
 80172ee:	0018      	movs	r0, r3
 80172f0:	46bd      	mov	sp, r7
 80172f2:	b004      	add	sp, #16
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80172f6:	b590      	push	{r4, r7, lr}
 80172f8:	b085      	sub	sp, #20
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	6078      	str	r0, [r7, #4]
 80172fe:	0008      	movs	r0, r1
 8017300:	0011      	movs	r1, r2
 8017302:	1cfb      	adds	r3, r7, #3
 8017304:	1c02      	adds	r2, r0, #0
 8017306:	701a      	strb	r2, [r3, #0]
 8017308:	1cbb      	adds	r3, r7, #2
 801730a:	1c0a      	adds	r2, r1, #0
 801730c:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 801730e:	230f      	movs	r3, #15
 8017310:	18fb      	adds	r3, r7, r3
 8017312:	2200      	movs	r2, #0
 8017314:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d101      	bne.n	8017320 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 801731c:	2300      	movs	r3, #0
 801731e:	e027      	b.n	8017370 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017320:	230e      	movs	r3, #14
 8017322:	18fb      	adds	r3, r7, r3
 8017324:	1cfa      	adds	r2, r7, #3
 8017326:	7812      	ldrb	r2, [r2, #0]
 8017328:	701a      	strb	r2, [r3, #0]
 801732a:	e017      	b.n	801735c <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801732c:	240e      	movs	r4, #14
 801732e:	193b      	adds	r3, r7, r4
 8017330:	781b      	ldrb	r3, [r3, #0]
 8017332:	005b      	lsls	r3, r3, #1
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	18d3      	adds	r3, r2, r3
 8017338:	881b      	ldrh	r3, [r3, #0]
 801733a:	2110      	movs	r1, #16
 801733c:	0018      	movs	r0, r3
 801733e:	f7ff fe6e 	bl	801701e <CountChannels>
 8017342:	0003      	movs	r3, r0
 8017344:	0019      	movs	r1, r3
 8017346:	220f      	movs	r2, #15
 8017348:	18bb      	adds	r3, r7, r2
 801734a:	18ba      	adds	r2, r7, r2
 801734c:	7812      	ldrb	r2, [r2, #0]
 801734e:	188a      	adds	r2, r1, r2
 8017350:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017352:	193b      	adds	r3, r7, r4
 8017354:	781a      	ldrb	r2, [r3, #0]
 8017356:	193b      	adds	r3, r7, r4
 8017358:	3201      	adds	r2, #1
 801735a:	701a      	strb	r2, [r3, #0]
 801735c:	230e      	movs	r3, #14
 801735e:	18fa      	adds	r2, r7, r3
 8017360:	1cbb      	adds	r3, r7, #2
 8017362:	7812      	ldrb	r2, [r2, #0]
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	429a      	cmp	r2, r3
 8017368:	d3e0      	bcc.n	801732c <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 801736a:	230f      	movs	r3, #15
 801736c:	18fb      	adds	r3, r7, r3
 801736e:	781b      	ldrb	r3, [r3, #0]
}
 8017370:	0018      	movs	r0, r3
 8017372:	46bd      	mov	sp, r7
 8017374:	b005      	add	sp, #20
 8017376:	bd90      	pop	{r4, r7, pc}

08017378 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b086      	sub	sp, #24
 801737c:	af00      	add	r7, sp, #0
 801737e:	60f8      	str	r0, [r7, #12]
 8017380:	60b9      	str	r1, [r7, #8]
 8017382:	1dfb      	adds	r3, r7, #7
 8017384:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d020      	beq.n	80173ce <RegionCommonChanMaskCopy+0x56>
 801738c:	68bb      	ldr	r3, [r7, #8]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d01d      	beq.n	80173ce <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017392:	2317      	movs	r3, #23
 8017394:	18fb      	adds	r3, r7, r3
 8017396:	2200      	movs	r2, #0
 8017398:	701a      	strb	r2, [r3, #0]
 801739a:	e011      	b.n	80173c0 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801739c:	2017      	movs	r0, #23
 801739e:	183b      	adds	r3, r7, r0
 80173a0:	781b      	ldrb	r3, [r3, #0]
 80173a2:	005b      	lsls	r3, r3, #1
 80173a4:	68ba      	ldr	r2, [r7, #8]
 80173a6:	18d2      	adds	r2, r2, r3
 80173a8:	183b      	adds	r3, r7, r0
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	005b      	lsls	r3, r3, #1
 80173ae:	68f9      	ldr	r1, [r7, #12]
 80173b0:	18cb      	adds	r3, r1, r3
 80173b2:	8812      	ldrh	r2, [r2, #0]
 80173b4:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80173b6:	183b      	adds	r3, r7, r0
 80173b8:	781a      	ldrb	r2, [r3, #0]
 80173ba:	183b      	adds	r3, r7, r0
 80173bc:	3201      	adds	r2, #1
 80173be:	701a      	strb	r2, [r3, #0]
 80173c0:	2317      	movs	r3, #23
 80173c2:	18fa      	adds	r2, r7, r3
 80173c4:	1dfb      	adds	r3, r7, #7
 80173c6:	7812      	ldrb	r2, [r2, #0]
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	429a      	cmp	r2, r3
 80173cc:	d3e6      	bcc.n	801739c <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 80173ce:	46c0      	nop			; (mov r8, r8)
 80173d0:	46bd      	mov	sp, r7
 80173d2:	b006      	add	sp, #24
 80173d4:	bd80      	pop	{r7, pc}

080173d6 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80173d6:	b082      	sub	sp, #8
 80173d8:	b5b0      	push	{r4, r5, r7, lr}
 80173da:	b086      	sub	sp, #24
 80173dc:	af00      	add	r7, sp, #0
 80173de:	60f8      	str	r0, [r7, #12]
 80173e0:	60b9      	str	r1, [r7, #8]
 80173e2:	0011      	movs	r1, r2
 80173e4:	2204      	movs	r2, #4
 80173e6:	2028      	movs	r0, #40	; 0x28
 80173e8:	4684      	mov	ip, r0
 80173ea:	44bc      	add	ip, r7
 80173ec:	4462      	add	r2, ip
 80173ee:	6013      	str	r3, [r2, #0]
 80173f0:	1dfb      	adds	r3, r7, #7
 80173f2:	1c0a      	adds	r2, r1, #0
 80173f4:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80173f6:	2516      	movs	r5, #22
 80173f8:	197c      	adds	r4, r7, r5
 80173fa:	2304      	movs	r3, #4
 80173fc:	2228      	movs	r2, #40	; 0x28
 80173fe:	4694      	mov	ip, r2
 8017400:	44bc      	add	ip, r7
 8017402:	4463      	add	r3, ip
 8017404:	1dfa      	adds	r2, r7, #7
 8017406:	7811      	ldrb	r1, [r2, #0]
 8017408:	68f8      	ldr	r0, [r7, #12]
 801740a:	681a      	ldr	r2, [r3, #0]
 801740c:	685b      	ldr	r3, [r3, #4]
 801740e:	f7ff fd15 	bl	8016e3c <GetDutyCycle>
 8017412:	0003      	movs	r3, r0
 8017414:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	689a      	ldr	r2, [r3, #8]
 801741a:	197b      	adds	r3, r7, r5
 801741c:	881b      	ldrh	r3, [r3, #0]
 801741e:	68b9      	ldr	r1, [r7, #8]
 8017420:	434b      	muls	r3, r1
 8017422:	429a      	cmp	r2, r3
 8017424:	d909      	bls.n	801743a <RegionCommonSetBandTxDone+0x64>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	689a      	ldr	r2, [r3, #8]
 801742a:	197b      	adds	r3, r7, r5
 801742c:	881b      	ldrh	r3, [r3, #0]
 801742e:	68b9      	ldr	r1, [r7, #8]
 8017430:	434b      	muls	r3, r1
 8017432:	1ad2      	subs	r2, r2, r3
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017438:	e002      	b.n	8017440 <RegionCommonSetBandTxDone+0x6a>
        band->TimeCredits = 0;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	2200      	movs	r2, #0
 801743e:	609a      	str	r2, [r3, #8]
}
 8017440:	46c0      	nop			; (mov r8, r8)
 8017442:	46bd      	mov	sp, r7
 8017444:	b006      	add	sp, #24
 8017446:	bcb0      	pop	{r4, r5, r7}
 8017448:	bc08      	pop	{r3}
 801744a:	b002      	add	sp, #8
 801744c:	4718      	bx	r3

0801744e <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801744e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017450:	46c6      	mov	lr, r8
 8017452:	b500      	push	{lr}
 8017454:	b08c      	sub	sp, #48	; 0x30
 8017456:	af04      	add	r7, sp, #16
 8017458:	0004      	movs	r4, r0
 801745a:	6039      	str	r1, [r7, #0]
 801745c:	0010      	movs	r0, r2
 801745e:	0019      	movs	r1, r3
 8017460:	1dfb      	adds	r3, r7, #7
 8017462:	1c22      	adds	r2, r4, #0
 8017464:	701a      	strb	r2, [r3, #0]
 8017466:	1dbb      	adds	r3, r7, #6
 8017468:	1c02      	adds	r2, r0, #0
 801746a:	701a      	strb	r2, [r3, #0]
 801746c:	1d7b      	adds	r3, r7, #5
 801746e:	1c0a      	adds	r2, r1, #0
 8017470:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017472:	2301      	movs	r3, #1
 8017474:	425b      	negs	r3, r3
 8017476:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017478:	f005 fc40 	bl	801ccfc <UTIL_TIMER_GetCurrentTime>
 801747c:	0003      	movs	r3, r0
 801747e:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 8017480:	2300      	movs	r3, #0
 8017482:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 8017484:	230e      	movs	r3, #14
 8017486:	18fb      	adds	r3, r7, r3
 8017488:	2201      	movs	r2, #1
 801748a:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 801748c:	231b      	movs	r3, #27
 801748e:	18fb      	adds	r3, r7, r3
 8017490:	2200      	movs	r2, #0
 8017492:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 8017494:	231a      	movs	r3, #26
 8017496:	18fb      	adds	r3, r7, r3
 8017498:	2200      	movs	r2, #0
 801749a:	701a      	strb	r2, [r3, #0]
 801749c:	e089      	b.n	80175b2 <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801749e:	231a      	movs	r3, #26
 80174a0:	18fb      	adds	r3, r7, r3
 80174a2:	781a      	ldrb	r2, [r3, #0]
 80174a4:	0013      	movs	r3, r2
 80174a6:	009b      	lsls	r3, r3, #2
 80174a8:	189b      	adds	r3, r3, r2
 80174aa:	009b      	lsls	r3, r3, #2
 80174ac:	001a      	movs	r2, r3
 80174ae:	683b      	ldr	r3, [r7, #0]
 80174b0:	469c      	mov	ip, r3
 80174b2:	4494      	add	ip, r2
 80174b4:	220e      	movs	r2, #14
 80174b6:	18bc      	adds	r4, r7, r2
 80174b8:	2138      	movs	r1, #56	; 0x38
 80174ba:	000a      	movs	r2, r1
 80174bc:	187b      	adds	r3, r7, r1
 80174be:	781e      	ldrb	r6, [r3, #0]
 80174c0:	1d7b      	adds	r3, r7, #5
 80174c2:	781d      	ldrb	r5, [r3, #0]
 80174c4:	1dfb      	adds	r3, r7, #7
 80174c6:	781b      	ldrb	r3, [r3, #0]
 80174c8:	4698      	mov	r8, r3
 80174ca:	697b      	ldr	r3, [r7, #20]
 80174cc:	9302      	str	r3, [sp, #8]
 80174ce:	2304      	movs	r3, #4
 80174d0:	18ba      	adds	r2, r7, r2
 80174d2:	18d2      	adds	r2, r2, r3
 80174d4:	466b      	mov	r3, sp
 80174d6:	ca03      	ldmia	r2!, {r0, r1}
 80174d8:	c303      	stmia	r3!, {r0, r1}
 80174da:	0033      	movs	r3, r6
 80174dc:	002a      	movs	r2, r5
 80174de:	4641      	mov	r1, r8
 80174e0:	4660      	mov	r0, ip
 80174e2:	f7ff fd3b 	bl	8016f5c <UpdateTimeCredits>
 80174e6:	0003      	movs	r3, r0
 80174e8:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80174ea:	220e      	movs	r2, #14
 80174ec:	18bb      	adds	r3, r7, r2
 80174ee:	881a      	ldrh	r2, [r3, #0]
 80174f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174f2:	4353      	muls	r3, r2
 80174f4:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80174f6:	231a      	movs	r3, #26
 80174f8:	18fb      	adds	r3, r7, r3
 80174fa:	781a      	ldrb	r2, [r3, #0]
 80174fc:	0013      	movs	r3, r2
 80174fe:	009b      	lsls	r3, r3, #2
 8017500:	189b      	adds	r3, r3, r2
 8017502:	009b      	lsls	r3, r3, #2
 8017504:	001a      	movs	r2, r3
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	189b      	adds	r3, r3, r2
 801750a:	689b      	ldr	r3, [r3, #8]
 801750c:	693a      	ldr	r2, [r7, #16]
 801750e:	429a      	cmp	r2, r3
 8017510:	d306      	bcc.n	8017520 <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 8017512:	1d7b      	adds	r3, r7, #5
 8017514:	781b      	ldrb	r3, [r3, #0]
 8017516:	2201      	movs	r2, #1
 8017518:	4053      	eors	r3, r2
 801751a:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801751c:	2b00      	cmp	r3, #0
 801751e:	d012      	beq.n	8017546 <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 8017520:	231a      	movs	r3, #26
 8017522:	18fb      	adds	r3, r7, r3
 8017524:	781a      	ldrb	r2, [r3, #0]
 8017526:	0013      	movs	r3, r2
 8017528:	009b      	lsls	r3, r3, #2
 801752a:	189b      	adds	r3, r3, r2
 801752c:	009b      	lsls	r3, r3, #2
 801752e:	001a      	movs	r2, r3
 8017530:	683b      	ldr	r3, [r7, #0]
 8017532:	189b      	adds	r3, r3, r2
 8017534:	2201      	movs	r2, #1
 8017536:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017538:	211b      	movs	r1, #27
 801753a:	187b      	adds	r3, r7, r1
 801753c:	781a      	ldrb	r2, [r3, #0]
 801753e:	187b      	adds	r3, r7, r1
 8017540:	3201      	adds	r2, #1
 8017542:	701a      	strb	r2, [r3, #0]
 8017544:	e02f      	b.n	80175a6 <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017546:	211a      	movs	r1, #26
 8017548:	187b      	adds	r3, r7, r1
 801754a:	781a      	ldrb	r2, [r3, #0]
 801754c:	0013      	movs	r3, r2
 801754e:	009b      	lsls	r3, r3, #2
 8017550:	189b      	adds	r3, r3, r2
 8017552:	009b      	lsls	r3, r3, #2
 8017554:	001a      	movs	r2, r3
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	189b      	adds	r3, r3, r2
 801755a:	2200      	movs	r2, #0
 801755c:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 801755e:	187b      	adds	r3, r7, r1
 8017560:	781a      	ldrb	r2, [r3, #0]
 8017562:	0013      	movs	r3, r2
 8017564:	009b      	lsls	r3, r3, #2
 8017566:	189b      	adds	r3, r3, r2
 8017568:	009b      	lsls	r3, r3, #2
 801756a:	001a      	movs	r2, r3
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	189b      	adds	r3, r3, r2
 8017570:	68db      	ldr	r3, [r3, #12]
 8017572:	693a      	ldr	r2, [r7, #16]
 8017574:	429a      	cmp	r2, r3
 8017576:	d216      	bcs.n	80175a6 <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017578:	187b      	adds	r3, r7, r1
 801757a:	781a      	ldrb	r2, [r3, #0]
 801757c:	0013      	movs	r3, r2
 801757e:	009b      	lsls	r3, r3, #2
 8017580:	189b      	adds	r3, r3, r2
 8017582:	009b      	lsls	r3, r3, #2
 8017584:	001a      	movs	r2, r3
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	189b      	adds	r3, r3, r2
 801758a:	689b      	ldr	r3, [r3, #8]
 801758c:	693a      	ldr	r2, [r7, #16]
 801758e:	1ad2      	subs	r2, r2, r3
 8017590:	69fb      	ldr	r3, [r7, #28]
 8017592:	4293      	cmp	r3, r2
 8017594:	d900      	bls.n	8017598 <RegionCommonUpdateBandTimeOff+0x14a>
 8017596:	0013      	movs	r3, r2
 8017598:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801759a:	211b      	movs	r1, #27
 801759c:	187b      	adds	r3, r7, r1
 801759e:	781a      	ldrb	r2, [r3, #0]
 80175a0:	187b      	adds	r3, r7, r1
 80175a2:	3201      	adds	r2, #1
 80175a4:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 80175a6:	211a      	movs	r1, #26
 80175a8:	187b      	adds	r3, r7, r1
 80175aa:	781a      	ldrb	r2, [r3, #0]
 80175ac:	187b      	adds	r3, r7, r1
 80175ae:	3201      	adds	r2, #1
 80175b0:	701a      	strb	r2, [r3, #0]
 80175b2:	231a      	movs	r3, #26
 80175b4:	18fa      	adds	r2, r7, r3
 80175b6:	1dbb      	adds	r3, r7, #6
 80175b8:	7812      	ldrb	r2, [r2, #0]
 80175ba:	781b      	ldrb	r3, [r3, #0]
 80175bc:	429a      	cmp	r2, r3
 80175be:	d200      	bcs.n	80175c2 <RegionCommonUpdateBandTimeOff+0x174>
 80175c0:	e76d      	b.n	801749e <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 80175c2:	231b      	movs	r3, #27
 80175c4:	18fb      	adds	r3, r7, r3
 80175c6:	781b      	ldrb	r3, [r3, #0]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d102      	bne.n	80175d2 <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80175cc:	2301      	movs	r3, #1
 80175ce:	425b      	negs	r3, r3
 80175d0:	e000      	b.n	80175d4 <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 80175d2:	69fb      	ldr	r3, [r7, #28]
}
 80175d4:	0018      	movs	r0, r3
 80175d6:	46bd      	mov	sp, r7
 80175d8:	b008      	add	sp, #32
 80175da:	bc80      	pop	{r7}
 80175dc:	46b8      	mov	r8, r7
 80175de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175e0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b084      	sub	sp, #16
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
 80175e8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80175ea:	210f      	movs	r1, #15
 80175ec:	187b      	adds	r3, r7, r1
 80175ee:	2200      	movs	r2, #0
 80175f0:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	781b      	ldrb	r3, [r3, #0]
 80175f6:	2b03      	cmp	r3, #3
 80175f8:	d140      	bne.n	801767c <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	3301      	adds	r3, #1
 80175fe:	781b      	ldrb	r3, [r3, #0]
 8017600:	b25a      	sxtb	r2, r3
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	785b      	ldrb	r3, [r3, #1]
 801760a:	b25b      	sxtb	r3, r3
 801760c:	220f      	movs	r2, #15
 801760e:	4013      	ands	r3, r2
 8017610:	b25a      	sxtb	r2, r3
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017616:	683b      	ldr	r3, [r7, #0]
 8017618:	785b      	ldrb	r3, [r3, #1]
 801761a:	b25b      	sxtb	r3, r3
 801761c:	b2db      	uxtb	r3, r3
 801761e:	091b      	lsrs	r3, r3, #4
 8017620:	b2db      	uxtb	r3, r3
 8017622:	b25a      	sxtb	r2, r3
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	3302      	adds	r3, #2
 801762c:	781b      	ldrb	r3, [r3, #0]
 801762e:	b29a      	uxth	r2, r3
 8017630:	683b      	ldr	r3, [r7, #0]
 8017632:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017634:	683b      	ldr	r3, [r7, #0]
 8017636:	889b      	ldrh	r3, [r3, #4]
 8017638:	b21a      	sxth	r2, r3
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	3303      	adds	r3, #3
 801763e:	781b      	ldrb	r3, [r3, #0]
 8017640:	021b      	lsls	r3, r3, #8
 8017642:	b21b      	sxth	r3, r3
 8017644:	4313      	orrs	r3, r2
 8017646:	b21b      	sxth	r3, r3
 8017648:	b29a      	uxth	r2, r3
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	791a      	ldrb	r2, [r3, #4]
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017656:	683b      	ldr	r3, [r7, #0]
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	091b      	lsrs	r3, r3, #4
 801765c:	b2db      	uxtb	r3, r3
 801765e:	2207      	movs	r2, #7
 8017660:	4013      	ands	r3, r2
 8017662:	b2da      	uxtb	r2, r3
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	781b      	ldrb	r3, [r3, #0]
 801766c:	220f      	movs	r2, #15
 801766e:	4013      	ands	r3, r2
 8017670:	b2da      	uxtb	r2, r3
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017676:	187b      	adds	r3, r7, r1
 8017678:	2205      	movs	r2, #5
 801767a:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 801767c:	230f      	movs	r3, #15
 801767e:	18fb      	adds	r3, r7, r3
 8017680:	781b      	ldrb	r3, [r3, #0]
}
 8017682:	0018      	movs	r0, r3
 8017684:	46bd      	mov	sp, r7
 8017686:	b004      	add	sp, #16
 8017688:	bd80      	pop	{r7, pc}

0801768a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801768a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801768c:	b089      	sub	sp, #36	; 0x24
 801768e:	af02      	add	r7, sp, #8
 8017690:	60f8      	str	r0, [r7, #12]
 8017692:	60b9      	str	r1, [r7, #8]
 8017694:	607a      	str	r2, [r7, #4]
 8017696:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017698:	2317      	movs	r3, #23
 801769a:	18fb      	adds	r3, r7, r3
 801769c:	68fa      	ldr	r2, [r7, #12]
 801769e:	7912      	ldrb	r2, [r2, #4]
 80176a0:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 80176a2:	2116      	movs	r1, #22
 80176a4:	187b      	adds	r3, r7, r1
 80176a6:	68fa      	ldr	r2, [r7, #12]
 80176a8:	7992      	ldrb	r2, [r2, #6]
 80176aa:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 80176ac:	2015      	movs	r0, #21
 80176ae:	183b      	adds	r3, r7, r0
 80176b0:	68fa      	ldr	r2, [r7, #12]
 80176b2:	79d2      	ldrb	r2, [r2, #7]
 80176b4:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	7a1a      	ldrb	r2, [r3, #8]
 80176ba:	2414      	movs	r4, #20
 80176bc:	193b      	adds	r3, r7, r4
 80176be:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	795b      	ldrb	r3, [r3, #5]
 80176c4:	2201      	movs	r2, #1
 80176c6:	4053      	eors	r3, r2
 80176c8:	b2db      	uxtb	r3, r3
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d00b      	beq.n	80176e6 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80176ce:	193b      	adds	r3, r7, r4
 80176d0:	68fa      	ldr	r2, [r7, #12]
 80176d2:	7ad2      	ldrb	r2, [r2, #11]
 80176d4:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 80176d6:	187b      	adds	r3, r7, r1
 80176d8:	68fa      	ldr	r2, [r7, #12]
 80176da:	7a52      	ldrb	r2, [r2, #9]
 80176dc:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 80176de:	183b      	adds	r3, r7, r0
 80176e0:	68fa      	ldr	r2, [r7, #12]
 80176e2:	7a92      	ldrb	r2, [r2, #10]
 80176e4:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 80176e6:	2617      	movs	r6, #23
 80176e8:	19bb      	adds	r3, r7, r6
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d046      	beq.n	801777e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	7b18      	ldrb	r0, [r3, #12]
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	691c      	ldr	r4, [r3, #16]
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	2514      	movs	r5, #20
 80176fc:	575d      	ldrsb	r5, [r3, r5]
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	2215      	movs	r2, #21
 8017702:	569a      	ldrsb	r2, [r3, r2]
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	699b      	ldr	r3, [r3, #24]
 8017708:	2116      	movs	r1, #22
 801770a:	1879      	adds	r1, r7, r1
 801770c:	7809      	ldrb	r1, [r1, #0]
 801770e:	b249      	sxtb	r1, r1
 8017710:	9301      	str	r3, [sp, #4]
 8017712:	9200      	str	r2, [sp, #0]
 8017714:	002b      	movs	r3, r5
 8017716:	000a      	movs	r2, r1
 8017718:	0021      	movs	r1, r4
 801771a:	f7ff fceb 	bl	80170f4 <RegionCommonChanVerifyDr>
 801771e:	0003      	movs	r3, r0
 8017720:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017722:	2301      	movs	r3, #1
 8017724:	4053      	eors	r3, r2
 8017726:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017728:	2b00      	cmp	r3, #0
 801772a:	d005      	beq.n	8017738 <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 801772c:	19bb      	adds	r3, r7, r6
 801772e:	19ba      	adds	r2, r7, r6
 8017730:	7812      	ldrb	r2, [r2, #0]
 8017732:	2102      	movs	r1, #2
 8017734:	438a      	bics	r2, r1
 8017736:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	211d      	movs	r1, #29
 801773c:	5659      	ldrsb	r1, [r3, r1]
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	221c      	movs	r2, #28
 8017742:	569a      	ldrsb	r2, [r3, r2]
 8017744:	2415      	movs	r4, #21
 8017746:	193b      	adds	r3, r7, r4
 8017748:	781b      	ldrb	r3, [r3, #0]
 801774a:	b25b      	sxtb	r3, r3
 801774c:	0018      	movs	r0, r3
 801774e:	f7ff fd6a 	bl	8017226 <RegionCommonValueInRange>
 8017752:	1e03      	subs	r3, r0, #0
 8017754:	d113      	bne.n	801777e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	7f5b      	ldrb	r3, [r3, #29]
 801775a:	b25b      	sxtb	r3, r3
 801775c:	193a      	adds	r2, r7, r4
 801775e:	7812      	ldrb	r2, [r2, #0]
 8017760:	b252      	sxtb	r2, r2
 8017762:	429a      	cmp	r2, r3
 8017764:	da04      	bge.n	8017770 <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017766:	193b      	adds	r3, r7, r4
 8017768:	68fa      	ldr	r2, [r7, #12]
 801776a:	7f52      	ldrb	r2, [r2, #29]
 801776c:	701a      	strb	r2, [r3, #0]
 801776e:	e006      	b.n	801777e <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017770:	2217      	movs	r2, #23
 8017772:	18bb      	adds	r3, r7, r2
 8017774:	18ba      	adds	r2, r7, r2
 8017776:	7812      	ldrb	r2, [r2, #0]
 8017778:	2104      	movs	r1, #4
 801777a:	438a      	bics	r2, r1
 801777c:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801777e:	2317      	movs	r3, #23
 8017780:	18fb      	adds	r3, r7, r3
 8017782:	781b      	ldrb	r3, [r3, #0]
 8017784:	2b07      	cmp	r3, #7
 8017786:	d108      	bne.n	801779a <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8017788:	2214      	movs	r2, #20
 801778a:	18bb      	adds	r3, r7, r2
 801778c:	781b      	ldrb	r3, [r3, #0]
 801778e:	b25b      	sxtb	r3, r3
 8017790:	2b00      	cmp	r3, #0
 8017792:	d102      	bne.n	801779a <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8017794:	18bb      	adds	r3, r7, r2
 8017796:	2201      	movs	r2, #1
 8017798:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 801779a:	68bb      	ldr	r3, [r7, #8]
 801779c:	2216      	movs	r2, #22
 801779e:	18ba      	adds	r2, r7, r2
 80177a0:	7812      	ldrb	r2, [r2, #0]
 80177a2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2215      	movs	r2, #21
 80177a8:	18ba      	adds	r2, r7, r2
 80177aa:	7812      	ldrb	r2, [r2, #0]
 80177ac:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80177ae:	2314      	movs	r3, #20
 80177b0:	18fb      	adds	r3, r7, r3
 80177b2:	781a      	ldrb	r2, [r3, #0]
 80177b4:	683b      	ldr	r3, [r7, #0]
 80177b6:	701a      	strb	r2, [r3, #0]

    return status;
 80177b8:	2317      	movs	r3, #23
 80177ba:	18fb      	adds	r3, r7, r3
 80177bc:	781b      	ldrb	r3, [r3, #0]
}
 80177be:	0018      	movs	r0, r3
 80177c0:	46bd      	mov	sp, r7
 80177c2:	b007      	add	sp, #28
 80177c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080177c8 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b082      	sub	sp, #8
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	0002      	movs	r2, r0
 80177d0:	6039      	str	r1, [r7, #0]
 80177d2:	1dfb      	adds	r3, r7, #7
 80177d4:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 80177d6:	6839      	ldr	r1, [r7, #0]
 80177d8:	4806      	ldr	r0, [pc, #24]	; (80177f4 <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 80177da:	f7e8 fc9d 	bl	8000118 <__udivsi3>
 80177de:	0003      	movs	r3, r0
 80177e0:	001a      	movs	r2, r3
 80177e2:	1dfb      	adds	r3, r7, #7
 80177e4:	781b      	ldrb	r3, [r3, #0]
 80177e6:	409a      	lsls	r2, r3
 80177e8:	0013      	movs	r3, r2
}
 80177ea:	0018      	movs	r0, r3
 80177ec:	46bd      	mov	sp, r7
 80177ee:	b002      	add	sp, #8
 80177f0:	bd80      	pop	{r7, pc}
 80177f2:	46c0      	nop			; (mov r8, r8)
 80177f4:	3b9aca00 	.word	0x3b9aca00

080177f8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	0002      	movs	r2, r0
 8017800:	1dfb      	adds	r3, r7, #7
 8017802:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 8017804:	4b02      	ldr	r3, [pc, #8]	; (8017810 <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 8017806:	0018      	movs	r0, r3
 8017808:	46bd      	mov	sp, r7
 801780a:	b002      	add	sp, #8
 801780c:	bd80      	pop	{r7, pc}
 801780e:	46c0      	nop			; (mov r8, r8)
 8017810:	00027100 	.word	0x00027100

08017814 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8017814:	b5b0      	push	{r4, r5, r7, lr}
 8017816:	b084      	sub	sp, #16
 8017818:	af00      	add	r7, sp, #0
 801781a:	60f8      	str	r0, [r7, #12]
 801781c:	607a      	str	r2, [r7, #4]
 801781e:	603b      	str	r3, [r7, #0]
 8017820:	200b      	movs	r0, #11
 8017822:	183b      	adds	r3, r7, r0
 8017824:	1c0a      	adds	r2, r1, #0
 8017826:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 8017828:	0002      	movs	r2, r0
 801782a:	18bb      	adds	r3, r7, r2
 801782c:	781d      	ldrb	r5, [r3, #0]
 801782e:	18bb      	adds	r3, r7, r2
 8017830:	781b      	ldrb	r3, [r3, #0]
 8017832:	4a1c      	ldr	r2, [pc, #112]	; (80178a4 <RegionCommonComputeRxWindowParameters+0x90>)
 8017834:	4694      	mov	ip, r2
 8017836:	4463      	add	r3, ip
 8017838:	005c      	lsls	r4, r3, #1
 801783a:	6879      	ldr	r1, [r7, #4]
 801783c:	000a      	movs	r2, r1
 801783e:	0152      	lsls	r2, r2, #5
 8017840:	1a52      	subs	r2, r2, r1
 8017842:	0193      	lsls	r3, r2, #6
 8017844:	1a9b      	subs	r3, r3, r2
 8017846:	00db      	lsls	r3, r3, #3
 8017848:	185b      	adds	r3, r3, r1
 801784a:	01db      	lsls	r3, r3, #7
 801784c:	001a      	movs	r2, r3
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	18d3      	adds	r3, r2, r3
 8017852:	3b01      	subs	r3, #1
 8017854:	68f9      	ldr	r1, [r7, #12]
 8017856:	0018      	movs	r0, r3
 8017858:	f7e8 fc5e 	bl	8000118 <__udivsi3>
 801785c:	0003      	movs	r3, r0
 801785e:	18e2      	adds	r2, r4, r3
 8017860:	002b      	movs	r3, r5
 8017862:	4293      	cmp	r3, r2
 8017864:	d200      	bcs.n	8017868 <RegionCommonComputeRxWindowParameters+0x54>
 8017866:	0013      	movs	r3, r2
 8017868:	6a3a      	ldr	r2, [r7, #32]
 801786a:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	009a      	lsls	r2, r3, #2
 8017870:	6a3b      	ldr	r3, [r7, #32]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	68f9      	ldr	r1, [r7, #12]
 8017876:	434b      	muls	r3, r1
 8017878:	085b      	lsrs	r3, r3, #1
 801787a:	1ad3      	subs	r3, r2, r3
 801787c:	4a0a      	ldr	r2, [pc, #40]	; (80178a8 <RegionCommonComputeRxWindowParameters+0x94>)
 801787e:	4694      	mov	ip, r2
 8017880:	4463      	add	r3, ip
 8017882:	490a      	ldr	r1, [pc, #40]	; (80178ac <RegionCommonComputeRxWindowParameters+0x98>)
 8017884:	0018      	movs	r0, r3
 8017886:	f7e8 fcd1 	bl	800022c <__divsi3>
 801788a:	0003      	movs	r3, r0
 801788c:	001a      	movs	r2, r3
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	1ad3      	subs	r3, r2, r3
 8017892:	3b01      	subs	r3, #1
 8017894:	001a      	movs	r2, r3
 8017896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017898:	601a      	str	r2, [r3, #0]
}
 801789a:	46c0      	nop			; (mov r8, r8)
 801789c:	46bd      	mov	sp, r7
 801789e:	b004      	add	sp, #16
 80178a0:	bdb0      	pop	{r4, r5, r7, pc}
 80178a2:	46c0      	nop			; (mov r8, r8)
 80178a4:	7ffffffc 	.word	0x7ffffffc
 80178a8:	000f423f 	.word	0x000f423f
 80178ac:	000f4240 	.word	0x000f4240

080178b0 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80178b0:	b5b0      	push	{r4, r5, r7, lr}
 80178b2:	b086      	sub	sp, #24
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	60b9      	str	r1, [r7, #8]
 80178b8:	607a      	str	r2, [r7, #4]
 80178ba:	210f      	movs	r1, #15
 80178bc:	187b      	adds	r3, r7, r1
 80178be:	1c02      	adds	r2, r0, #0
 80178c0:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 80178c2:	2417      	movs	r4, #23
 80178c4:	193b      	adds	r3, r7, r4
 80178c6:	2200      	movs	r2, #0
 80178c8:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80178ca:	187b      	adds	r3, r7, r1
 80178cc:	781b      	ldrb	r3, [r3, #0]
 80178ce:	b25b      	sxtb	r3, r3
 80178d0:	005b      	lsls	r3, r3, #1
 80178d2:	0018      	movs	r0, r3
 80178d4:	f7e9 fb92 	bl	8000ffc <__aeabi_ui2f>
 80178d8:	1c03      	adds	r3, r0, #0
 80178da:	1c19      	adds	r1, r3, #0
 80178dc:	68b8      	ldr	r0, [r7, #8]
 80178de:	f7e9 f95f 	bl	8000ba0 <__aeabi_fsub>
 80178e2:	1c03      	adds	r3, r0, #0
 80178e4:	6879      	ldr	r1, [r7, #4]
 80178e6:	1c18      	adds	r0, r3, #0
 80178e8:	f7e9 f95a 	bl	8000ba0 <__aeabi_fsub>
 80178ec:	1c03      	adds	r3, r0, #0
 80178ee:	1c18      	adds	r0, r3, #0
 80178f0:	f7eb f9ba 	bl	8002c68 <__aeabi_f2d>
 80178f4:	0002      	movs	r2, r0
 80178f6:	000b      	movs	r3, r1
 80178f8:	0010      	movs	r0, r2
 80178fa:	0019      	movs	r1, r3
 80178fc:	f006 fa76 	bl	801ddec <floor>
 8017900:	0002      	movs	r2, r0
 8017902:	000b      	movs	r3, r1
 8017904:	0025      	movs	r5, r4
 8017906:	193c      	adds	r4, r7, r4
 8017908:	0010      	movs	r0, r2
 801790a:	0019      	movs	r1, r3
 801790c:	f7eb f920 	bl	8002b50 <__aeabi_d2iz>
 8017910:	0003      	movs	r3, r0
 8017912:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8017914:	197b      	adds	r3, r7, r5
 8017916:	781b      	ldrb	r3, [r3, #0]
 8017918:	b25b      	sxtb	r3, r3
}
 801791a:	0018      	movs	r0, r3
 801791c:	46bd      	mov	sp, r7
 801791e:	b006      	add	sp, #24
 8017920:	bdb0      	pop	{r4, r5, r7, pc}

08017922 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017924:	b087      	sub	sp, #28
 8017926:	af00      	add	r7, sp, #0
 8017928:	60f8      	str	r0, [r7, #12]
 801792a:	60b9      	str	r1, [r7, #8]
 801792c:	607a      	str	r2, [r7, #4]
 801792e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017930:	2317      	movs	r3, #23
 8017932:	18fb      	adds	r3, r7, r3
 8017934:	2200      	movs	r2, #0
 8017936:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 8017938:	2316      	movs	r3, #22
 801793a:	18fb      	adds	r3, r7, r3
 801793c:	2200      	movs	r2, #0
 801793e:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017940:	2315      	movs	r3, #21
 8017942:	18fb      	adds	r3, r7, r3
 8017944:	2200      	movs	r2, #0
 8017946:	701a      	strb	r2, [r3, #0]
 8017948:	2314      	movs	r3, #20
 801794a:	18fb      	adds	r3, r7, r3
 801794c:	2200      	movs	r2, #0
 801794e:	701a      	strb	r2, [r3, #0]
 8017950:	e0bf      	b.n	8017ad2 <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017952:	2313      	movs	r3, #19
 8017954:	18fb      	adds	r3, r7, r3
 8017956:	2200      	movs	r2, #0
 8017958:	701a      	strb	r2, [r3, #0]
 801795a:	e0a8      	b.n	8017aae <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	685a      	ldr	r2, [r3, #4]
 8017960:	2314      	movs	r3, #20
 8017962:	18fb      	adds	r3, r7, r3
 8017964:	781b      	ldrb	r3, [r3, #0]
 8017966:	005b      	lsls	r3, r3, #1
 8017968:	18d3      	adds	r3, r2, r3
 801796a:	881b      	ldrh	r3, [r3, #0]
 801796c:	001a      	movs	r2, r3
 801796e:	2013      	movs	r0, #19
 8017970:	183b      	adds	r3, r7, r0
 8017972:	781b      	ldrb	r3, [r3, #0]
 8017974:	411a      	asrs	r2, r3
 8017976:	0013      	movs	r3, r2
 8017978:	2201      	movs	r2, #1
 801797a:	4013      	ands	r3, r2
 801797c:	d100      	bne.n	8017980 <RegionCommonCountNbOfEnabledChannels+0x5e>
 801797e:	e090      	b.n	8017aa2 <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	689a      	ldr	r2, [r3, #8]
 8017984:	2315      	movs	r3, #21
 8017986:	18fb      	adds	r3, r7, r3
 8017988:	7819      	ldrb	r1, [r3, #0]
 801798a:	183b      	adds	r3, r7, r0
 801798c:	781b      	ldrb	r3, [r3, #0]
 801798e:	18cb      	adds	r3, r1, r3
 8017990:	0019      	movs	r1, r3
 8017992:	000b      	movs	r3, r1
 8017994:	005b      	lsls	r3, r3, #1
 8017996:	185b      	adds	r3, r3, r1
 8017998:	009b      	lsls	r3, r3, #2
 801799a:	18d3      	adds	r3, r2, r3
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d100      	bne.n	80179a4 <RegionCommonCountNbOfEnabledChannels+0x82>
 80179a2:	e079      	b.n	8017a98 <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	781b      	ldrb	r3, [r3, #0]
 80179a8:	2201      	movs	r2, #1
 80179aa:	4053      	eors	r3, r2
 80179ac:	b2db      	uxtb	r3, r3
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d00d      	beq.n	80179ce <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d009      	beq.n	80179ce <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	8a5b      	ldrh	r3, [r3, #18]
 80179be:	001a      	movs	r2, r3
 80179c0:	183b      	adds	r3, r7, r0
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	411a      	asrs	r2, r3
 80179c6:	0013      	movs	r3, r2
 80179c8:	2201      	movs	r2, #1
 80179ca:	4013      	ands	r3, r2
 80179cc:	d066      	beq.n	8017a9c <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	785b      	ldrb	r3, [r3, #1]
 80179d2:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	689a      	ldr	r2, [r3, #8]
 80179d8:	2515      	movs	r5, #21
 80179da:	197b      	adds	r3, r7, r5
 80179dc:	7819      	ldrb	r1, [r3, #0]
 80179de:	2613      	movs	r6, #19
 80179e0:	19bb      	adds	r3, r7, r6
 80179e2:	781b      	ldrb	r3, [r3, #0]
 80179e4:	18cb      	adds	r3, r1, r3
 80179e6:	0019      	movs	r1, r3
 80179e8:	000b      	movs	r3, r1
 80179ea:	005b      	lsls	r3, r3, #1
 80179ec:	185b      	adds	r3, r3, r1
 80179ee:	009b      	lsls	r3, r3, #2
 80179f0:	18d3      	adds	r3, r2, r3
 80179f2:	7a1b      	ldrb	r3, [r3, #8]
 80179f4:	011b      	lsls	r3, r3, #4
 80179f6:	b25b      	sxtb	r3, r3
 80179f8:	111b      	asrs	r3, r3, #4
 80179fa:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80179fc:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	689a      	ldr	r2, [r3, #8]
 8017a02:	197b      	adds	r3, r7, r5
 8017a04:	7819      	ldrb	r1, [r3, #0]
 8017a06:	19bb      	adds	r3, r7, r6
 8017a08:	781b      	ldrb	r3, [r3, #0]
 8017a0a:	18cb      	adds	r3, r1, r3
 8017a0c:	0019      	movs	r1, r3
 8017a0e:	000b      	movs	r3, r1
 8017a10:	005b      	lsls	r3, r3, #1
 8017a12:	185b      	adds	r3, r3, r1
 8017a14:	009b      	lsls	r3, r3, #2
 8017a16:	18d3      	adds	r3, r2, r3
 8017a18:	7a1b      	ldrb	r3, [r3, #8]
 8017a1a:	b25b      	sxtb	r3, r3
 8017a1c:	111b      	asrs	r3, r3, #4
 8017a1e:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017a20:	001a      	movs	r2, r3
 8017a22:	0021      	movs	r1, r4
 8017a24:	f7ff fbff 	bl	8017226 <RegionCommonValueInRange>
 8017a28:	1e03      	subs	r3, r0, #0
 8017a2a:	d039      	beq.n	8017aa0 <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	68da      	ldr	r2, [r3, #12]
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	6899      	ldr	r1, [r3, #8]
 8017a34:	197b      	adds	r3, r7, r5
 8017a36:	7818      	ldrb	r0, [r3, #0]
 8017a38:	19bb      	adds	r3, r7, r6
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	18c3      	adds	r3, r0, r3
 8017a3e:	0018      	movs	r0, r3
 8017a40:	0003      	movs	r3, r0
 8017a42:	005b      	lsls	r3, r3, #1
 8017a44:	181b      	adds	r3, r3, r0
 8017a46:	009b      	lsls	r3, r3, #2
 8017a48:	18cb      	adds	r3, r1, r3
 8017a4a:	7a5b      	ldrb	r3, [r3, #9]
 8017a4c:	0019      	movs	r1, r3
 8017a4e:	000b      	movs	r3, r1
 8017a50:	009b      	lsls	r3, r3, #2
 8017a52:	185b      	adds	r3, r3, r1
 8017a54:	009b      	lsls	r3, r3, #2
 8017a56:	18d3      	adds	r3, r2, r3
 8017a58:	7c1b      	ldrb	r3, [r3, #16]
 8017a5a:	2201      	movs	r2, #1
 8017a5c:	4053      	eors	r3, r2
 8017a5e:	b2db      	uxtb	r3, r3
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d006      	beq.n	8017a72 <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017a64:	2116      	movs	r1, #22
 8017a66:	187b      	adds	r3, r7, r1
 8017a68:	781a      	ldrb	r2, [r3, #0]
 8017a6a:	187b      	adds	r3, r7, r1
 8017a6c:	3201      	adds	r2, #1
 8017a6e:	701a      	strb	r2, [r3, #0]
                    continue;
 8017a70:	e017      	b.n	8017aa2 <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017a72:	2217      	movs	r2, #23
 8017a74:	18bb      	adds	r3, r7, r2
 8017a76:	781b      	ldrb	r3, [r3, #0]
 8017a78:	18ba      	adds	r2, r7, r2
 8017a7a:	1c59      	adds	r1, r3, #1
 8017a7c:	7011      	strb	r1, [r2, #0]
 8017a7e:	001a      	movs	r2, r3
 8017a80:	68bb      	ldr	r3, [r7, #8]
 8017a82:	189b      	adds	r3, r3, r2
 8017a84:	2215      	movs	r2, #21
 8017a86:	18b9      	adds	r1, r7, r2
 8017a88:	2213      	movs	r2, #19
 8017a8a:	18ba      	adds	r2, r7, r2
 8017a8c:	7809      	ldrb	r1, [r1, #0]
 8017a8e:	7812      	ldrb	r2, [r2, #0]
 8017a90:	188a      	adds	r2, r1, r2
 8017a92:	b2d2      	uxtb	r2, r2
 8017a94:	701a      	strb	r2, [r3, #0]
 8017a96:	e004      	b.n	8017aa2 <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017a98:	46c0      	nop			; (mov r8, r8)
 8017a9a:	e002      	b.n	8017aa2 <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 8017a9c:	46c0      	nop			; (mov r8, r8)
 8017a9e:	e000      	b.n	8017aa2 <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017aa0:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8017aa2:	2113      	movs	r1, #19
 8017aa4:	187b      	adds	r3, r7, r1
 8017aa6:	781a      	ldrb	r2, [r3, #0]
 8017aa8:	187b      	adds	r3, r7, r1
 8017aaa:	3201      	adds	r2, #1
 8017aac:	701a      	strb	r2, [r3, #0]
 8017aae:	2313      	movs	r3, #19
 8017ab0:	18fb      	adds	r3, r7, r3
 8017ab2:	781b      	ldrb	r3, [r3, #0]
 8017ab4:	2b0f      	cmp	r3, #15
 8017ab6:	d800      	bhi.n	8017aba <RegionCommonCountNbOfEnabledChannels+0x198>
 8017ab8:	e750      	b.n	801795c <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017aba:	2215      	movs	r2, #21
 8017abc:	18bb      	adds	r3, r7, r2
 8017abe:	18ba      	adds	r2, r7, r2
 8017ac0:	7812      	ldrb	r2, [r2, #0]
 8017ac2:	3210      	adds	r2, #16
 8017ac4:	701a      	strb	r2, [r3, #0]
 8017ac6:	2114      	movs	r1, #20
 8017ac8:	187b      	adds	r3, r7, r1
 8017aca:	781a      	ldrb	r2, [r3, #0]
 8017acc:	187b      	adds	r3, r7, r1
 8017ace:	3201      	adds	r2, #1
 8017ad0:	701a      	strb	r2, [r3, #0]
 8017ad2:	2315      	movs	r3, #21
 8017ad4:	18fb      	adds	r3, r7, r3
 8017ad6:	781b      	ldrb	r3, [r3, #0]
 8017ad8:	b29a      	uxth	r2, r3
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	8a1b      	ldrh	r3, [r3, #16]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d200      	bcs.n	8017ae4 <RegionCommonCountNbOfEnabledChannels+0x1c2>
 8017ae2:	e736      	b.n	8017952 <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	2217      	movs	r2, #23
 8017ae8:	18ba      	adds	r2, r7, r2
 8017aea:	7812      	ldrb	r2, [r2, #0]
 8017aec:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017aee:	683b      	ldr	r3, [r7, #0]
 8017af0:	2216      	movs	r2, #22
 8017af2:	18ba      	adds	r2, r7, r2
 8017af4:	7812      	ldrb	r2, [r2, #0]
 8017af6:	701a      	strb	r2, [r3, #0]
}
 8017af8:	46c0      	nop			; (mov r8, r8)
 8017afa:	46bd      	mov	sp, r7
 8017afc:	b007      	add	sp, #28
 8017afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017b00 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b02:	46c6      	mov	lr, r8
 8017b04:	b500      	push	{lr}
 8017b06:	b08a      	sub	sp, #40	; 0x28
 8017b08:	af04      	add	r7, sp, #16
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
 8017b10:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	685b      	ldr	r3, [r3, #4]
 8017b16:	0018      	movs	r0, r3
 8017b18:	f005 f904 	bl	801cd24 <UTIL_TIMER_GetElapsedTime>
 8017b1c:	0003      	movs	r3, r0
 8017b1e:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	681a      	ldr	r2, [r3, #0]
 8017b24:	697b      	ldr	r3, [r7, #20]
 8017b26:	1ad2      	subs	r2, r2, r3
 8017b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b2a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b2e:	2201      	movs	r2, #1
 8017b30:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017b32:	683b      	ldr	r3, [r7, #0]
 8017b34:	2200      	movs	r2, #0
 8017b36:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d004      	beq.n	8017b4a <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017b44:	697a      	ldr	r2, [r7, #20]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d32b      	bcc.n	8017ba2 <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017b4a:	68bb      	ldr	r3, [r7, #8]
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	69db      	ldr	r3, [r3, #28]
 8017b54:	781b      	ldrb	r3, [r3, #0]
 8017b56:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017b5c:	68dc      	ldr	r4, [r3, #12]
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	7a5d      	ldrb	r5, [r3, #9]
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	7a1e      	ldrb	r6, [r3, #8]
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	7d1b      	ldrb	r3, [r3, #20]
 8017b6a:	4698      	mov	r8, r3
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	699b      	ldr	r3, [r3, #24]
 8017b70:	9303      	str	r3, [sp, #12]
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	2204      	movs	r2, #4
 8017b76:	446a      	add	r2, sp
 8017b78:	330c      	adds	r3, #12
 8017b7a:	cb03      	ldmia	r3!, {r0, r1}
 8017b7c:	c203      	stmia	r2!, {r0, r1}
 8017b7e:	4643      	mov	r3, r8
 8017b80:	9300      	str	r3, [sp, #0]
 8017b82:	0033      	movs	r3, r6
 8017b84:	002a      	movs	r2, r5
 8017b86:	0021      	movs	r1, r4
 8017b88:	4660      	mov	r0, ip
 8017b8a:	f7ff fc60 	bl	801744e <RegionCommonUpdateBandTimeOff>
 8017b8e:	0002      	movs	r2, r0
 8017b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b92:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	69d8      	ldr	r0, [r3, #28]
 8017b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9a:	683a      	ldr	r2, [r7, #0]
 8017b9c:	6879      	ldr	r1, [r7, #4]
 8017b9e:	f7ff fec0 	bl	8017922 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017ba2:	683b      	ldr	r3, [r7, #0]
 8017ba4:	781b      	ldrb	r3, [r3, #0]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d004      	beq.n	8017bb4 <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 8017baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bac:	2200      	movs	r2, #0
 8017bae:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	e006      	b.n	8017bc2 <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 8017bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d001      	beq.n	8017bc0 <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017bbc:	230b      	movs	r3, #11
 8017bbe:	e000      	b.n	8017bc2 <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017bc0:	230c      	movs	r3, #12
    }
}
 8017bc2:	0018      	movs	r0, r3
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	b006      	add	sp, #24
 8017bc8:	bc80      	pop	{r7}
 8017bca:	46b8      	mov	r8, r7
 8017bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017bd0 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017bd0:	b590      	push	{r4, r7, lr}
 8017bd2:	b089      	sub	sp, #36	; 0x24
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6039      	str	r1, [r7, #0]
 8017bd8:	0011      	movs	r1, r2
 8017bda:	1dfb      	adds	r3, r7, #7
 8017bdc:	1c02      	adds	r2, r0, #0
 8017bde:	701a      	strb	r2, [r3, #0]
 8017be0:	1dbb      	adds	r3, r7, #6
 8017be2:	1c0a      	adds	r2, r1, #0
 8017be4:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8017be6:	2308      	movs	r3, #8
 8017be8:	18fb      	adds	r3, r7, r3
 8017bea:	4a04      	ldr	r2, [pc, #16]	; (8017bfc <RegionCommonRxConfigPrint+0x2c>)
 8017bec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017bee:	c313      	stmia	r3!, {r0, r1, r4}
 8017bf0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017bf2:	c313      	stmia	r3!, {r0, r1, r4}
    }
    else
    {
//        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017bf4:	46c0      	nop			; (mov r8, r8)
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	b009      	add	sp, #36	; 0x24
 8017bfa:	bd90      	pop	{r4, r7, pc}
 8017bfc:	0801eea0 	.word	0x0801eea0

08017c00 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b088      	sub	sp, #32
 8017c04:	af04      	add	r7, sp, #16
 8017c06:	6078      	str	r0, [r7, #4]
 8017c08:	000a      	movs	r2, r1
 8017c0a:	1cfb      	adds	r3, r7, #3
 8017c0c:	701a      	strb	r2, [r3, #0]
	uint32_t freq_mhz = frequency / 1000000; // Конвертируем частоту в мегагерцы
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	4912      	ldr	r1, [pc, #72]	; (8017c5c <RegionCommonTxConfigPrint+0x5c>)
 8017c12:	0018      	movs	r0, r3
 8017c14:	f7e8 fa80 	bl	8000118 <__udivsi3>
 8017c18:	0003      	movs	r3, r0
 8017c1a:	60fb      	str	r3, [r7, #12]
	uint32_t freq_decimal = (frequency % 1000000) / 100000; // Получаем 1-ю цифру после запятой
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	490f      	ldr	r1, [pc, #60]	; (8017c5c <RegionCommonTxConfigPrint+0x5c>)
 8017c20:	0018      	movs	r0, r3
 8017c22:	f7e8 faff 	bl	8000224 <__aeabi_uidivmod>
 8017c26:	000b      	movs	r3, r1
 8017c28:	490d      	ldr	r1, [pc, #52]	; (8017c60 <RegionCommonTxConfigPrint+0x60>)
 8017c2a:	0018      	movs	r0, r3
 8017c2c:	f7e8 fa74 	bl	8000118 <__udivsi3>
 8017c30:	0003      	movs	r3, r0
 8017c32:	60bb      	str	r3, [r7, #8]
//	float freq_mhz2 = frequency / 1000000.0f; // Конвертируем частоту в мегагерцы
//    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
    MW_LOG(TS_OFF, VLEVEL_M,  "Отправка на частоте %d.%d МГц по каналу скорости передачи DR%d\r\n", freq_mhz, freq_decimal, dr );
 8017c34:	1cfb      	adds	r3, r7, #3
 8017c36:	781b      	ldrb	r3, [r3, #0]
 8017c38:	b25b      	sxtb	r3, r3
 8017c3a:	4a0a      	ldr	r2, [pc, #40]	; (8017c64 <RegionCommonTxConfigPrint+0x64>)
 8017c3c:	9302      	str	r3, [sp, #8]
 8017c3e:	68bb      	ldr	r3, [r7, #8]
 8017c40:	9301      	str	r3, [sp, #4]
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	9300      	str	r3, [sp, #0]
 8017c46:	0013      	movs	r3, r2
 8017c48:	2200      	movs	r2, #0
 8017c4a:	2100      	movs	r1, #0
 8017c4c:	2002      	movs	r0, #2
 8017c4e:	f003 ffe1 	bl	801bc14 <UTIL_ADV_TRACE_COND_FSend>
}
 8017c52:	46c0      	nop			; (mov r8, r8)
 8017c54:	46bd      	mov	sp, r7
 8017c56:	b004      	add	sp, #16
 8017c58:	bd80      	pop	{r7, pc}
 8017c5a:	46c0      	nop			; (mov r8, r8)
 8017c5c:	000f4240 	.word	0x000f4240
 8017c60:	000186a0 	.word	0x000186a0
 8017c64:	0801eeb8 	.word	0x0801eeb8

08017c68 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b084      	sub	sp, #16
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	0002      	movs	r2, r0
 8017c70:	1dfb      	adds	r3, r7, #7
 8017c72:	701a      	strb	r2, [r3, #0]
 8017c74:	1dbb      	adds	r3, r7, #6
 8017c76:	1c0a      	adds	r2, r1, #0
 8017c78:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017c7a:	210f      	movs	r1, #15
 8017c7c:	187b      	adds	r3, r7, r1
 8017c7e:	2200      	movs	r2, #0
 8017c80:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8017c82:	1dfa      	adds	r2, r7, #7
 8017c84:	1dbb      	adds	r3, r7, #6
 8017c86:	7812      	ldrb	r2, [r2, #0]
 8017c88:	b252      	sxtb	r2, r2
 8017c8a:	781b      	ldrb	r3, [r3, #0]
 8017c8c:	b25b      	sxtb	r3, r3
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d104      	bne.n	8017c9c <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 8017c92:	187b      	adds	r3, r7, r1
 8017c94:	1dba      	adds	r2, r7, #6
 8017c96:	7812      	ldrb	r2, [r2, #0]
 8017c98:	701a      	strb	r2, [r3, #0]
 8017c9a:	e005      	b.n	8017ca8 <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 8017c9c:	1dfb      	adds	r3, r7, #7
 8017c9e:	781a      	ldrb	r2, [r3, #0]
 8017ca0:	230f      	movs	r3, #15
 8017ca2:	18fb      	adds	r3, r7, r3
 8017ca4:	3a01      	subs	r2, #1
 8017ca6:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8017ca8:	230f      	movs	r3, #15
 8017caa:	18fb      	adds	r3, r7, r3
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	b25b      	sxtb	r3, r3
}
 8017cb0:	0018      	movs	r0, r3
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	b004      	add	sp, #16
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b082      	sub	sp, #8
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8017cc0:	4b09      	ldr	r3, [pc, #36]	; (8017ce8 <GetBandwidth+0x30>)
 8017cc2:	687a      	ldr	r2, [r7, #4]
 8017cc4:	0092      	lsls	r2, r2, #2
 8017cc6:	58d3      	ldr	r3, [r2, r3]
 8017cc8:	4a08      	ldr	r2, [pc, #32]	; (8017cec <GetBandwidth+0x34>)
 8017cca:	4293      	cmp	r3, r2
 8017ccc:	d004      	beq.n	8017cd8 <GetBandwidth+0x20>
 8017cce:	4a08      	ldr	r2, [pc, #32]	; (8017cf0 <GetBandwidth+0x38>)
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	d003      	beq.n	8017cdc <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	e002      	b.n	8017cde <GetBandwidth+0x26>
        case 250000:
            return 1;
 8017cd8:	2301      	movs	r3, #1
 8017cda:	e000      	b.n	8017cde <GetBandwidth+0x26>
        case 500000:
            return 2;
 8017cdc:	2302      	movs	r3, #2
    }
}
 8017cde:	0018      	movs	r0, r3
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	b002      	add	sp, #8
 8017ce4:	bd80      	pop	{r7, pc}
 8017ce6:	46c0      	nop			; (mov r8, r8)
 8017ce8:	0801ef40 	.word	0x0801ef40
 8017cec:	0003d090 	.word	0x0003d090
 8017cf0:	0007a120 	.word	0x0007a120

08017cf4 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017cf4:	b590      	push	{r4, r7, lr}
 8017cf6:	b085      	sub	sp, #20
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	0004      	movs	r4, r0
 8017cfc:	0008      	movs	r0, r1
 8017cfe:	0011      	movs	r1, r2
 8017d00:	603b      	str	r3, [r7, #0]
 8017d02:	1dfb      	adds	r3, r7, #7
 8017d04:	1c22      	adds	r2, r4, #0
 8017d06:	701a      	strb	r2, [r3, #0]
 8017d08:	1dbb      	adds	r3, r7, #6
 8017d0a:	1c02      	adds	r2, r0, #0
 8017d0c:	701a      	strb	r2, [r3, #0]
 8017d0e:	1d7b      	adds	r3, r7, #5
 8017d10:	1c0a      	adds	r2, r1, #0
 8017d12:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8017d14:	210f      	movs	r1, #15
 8017d16:	187b      	adds	r3, r7, r1
 8017d18:	1dfa      	adds	r2, r7, #7
 8017d1a:	7812      	ldrb	r2, [r2, #0]
 8017d1c:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8017d1e:	187a      	adds	r2, r7, r1
 8017d20:	1dbb      	adds	r3, r7, #6
 8017d22:	1df9      	adds	r1, r7, #7
 8017d24:	780c      	ldrb	r4, [r1, #0]
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	b258      	sxtb	r0, r3
 8017d2a:	b261      	sxtb	r1, r4
 8017d2c:	4288      	cmp	r0, r1
 8017d2e:	da00      	bge.n	8017d32 <LimitTxPower+0x3e>
 8017d30:	1c23      	adds	r3, r4, #0
 8017d32:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017d34:	230f      	movs	r3, #15
 8017d36:	18fb      	adds	r3, r7, r3
 8017d38:	781b      	ldrb	r3, [r3, #0]
 8017d3a:	b25b      	sxtb	r3, r3
}
 8017d3c:	0018      	movs	r0, r3
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	b005      	add	sp, #20
 8017d42:	bd90      	pop	{r4, r7, pc}

08017d44 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b082      	sub	sp, #8
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
 8017d4c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017d4e:	4b2e      	ldr	r3, [pc, #184]	; (8017e08 <VerifyRfFreq+0xc4>)
 8017d50:	6a1b      	ldr	r3, [r3, #32]
 8017d52:	687a      	ldr	r2, [r7, #4]
 8017d54:	0010      	movs	r0, r2
 8017d56:	4798      	blx	r3
 8017d58:	0003      	movs	r3, r0
 8017d5a:	001a      	movs	r2, r3
 8017d5c:	2301      	movs	r3, #1
 8017d5e:	4053      	eors	r3, r2
 8017d60:	b2db      	uxtb	r3, r3
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d001      	beq.n	8017d6a <VerifyRfFreq+0x26>
    {
        return false;
 8017d66:	2300      	movs	r3, #0
 8017d68:	e04a      	b.n	8017e00 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	4a27      	ldr	r2, [pc, #156]	; (8017e0c <VerifyRfFreq+0xc8>)
 8017d6e:	4293      	cmp	r3, r2
 8017d70:	d907      	bls.n	8017d82 <VerifyRfFreq+0x3e>
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	4a26      	ldr	r2, [pc, #152]	; (8017e10 <VerifyRfFreq+0xcc>)
 8017d76:	4293      	cmp	r3, r2
 8017d78:	d803      	bhi.n	8017d82 <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8017d7a:	683b      	ldr	r3, [r7, #0]
 8017d7c:	2202      	movs	r2, #2
 8017d7e:	701a      	strb	r2, [r3, #0]
 8017d80:	e03d      	b.n	8017dfe <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	4a22      	ldr	r2, [pc, #136]	; (8017e10 <VerifyRfFreq+0xcc>)
 8017d86:	4293      	cmp	r3, r2
 8017d88:	d907      	bls.n	8017d9a <VerifyRfFreq+0x56>
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	4a21      	ldr	r2, [pc, #132]	; (8017e14 <VerifyRfFreq+0xd0>)
 8017d8e:	4293      	cmp	r3, r2
 8017d90:	d803      	bhi.n	8017d9a <VerifyRfFreq+0x56>
    {
        *band = 0;
 8017d92:	683b      	ldr	r3, [r7, #0]
 8017d94:	2200      	movs	r2, #0
 8017d96:	701a      	strb	r2, [r3, #0]
 8017d98:	e031      	b.n	8017dfe <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	4a1d      	ldr	r2, [pc, #116]	; (8017e14 <VerifyRfFreq+0xd0>)
 8017d9e:	4293      	cmp	r3, r2
 8017da0:	d907      	bls.n	8017db2 <VerifyRfFreq+0x6e>
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	4a1c      	ldr	r2, [pc, #112]	; (8017e18 <VerifyRfFreq+0xd4>)
 8017da6:	4293      	cmp	r3, r2
 8017da8:	d803      	bhi.n	8017db2 <VerifyRfFreq+0x6e>
    {
        *band = 1;
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	2201      	movs	r2, #1
 8017dae:	701a      	strb	r2, [r3, #0]
 8017db0:	e025      	b.n	8017dfe <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	4a19      	ldr	r2, [pc, #100]	; (8017e1c <VerifyRfFreq+0xd8>)
 8017db6:	4293      	cmp	r3, r2
 8017db8:	d907      	bls.n	8017dca <VerifyRfFreq+0x86>
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	4a18      	ldr	r2, [pc, #96]	; (8017e20 <VerifyRfFreq+0xdc>)
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d803      	bhi.n	8017dca <VerifyRfFreq+0x86>
    {
        *band = 5;
 8017dc2:	683b      	ldr	r3, [r7, #0]
 8017dc4:	2205      	movs	r2, #5
 8017dc6:	701a      	strb	r2, [r3, #0]
 8017dc8:	e019      	b.n	8017dfe <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	4a15      	ldr	r2, [pc, #84]	; (8017e24 <VerifyRfFreq+0xe0>)
 8017dce:	4293      	cmp	r3, r2
 8017dd0:	d907      	bls.n	8017de2 <VerifyRfFreq+0x9e>
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	4a14      	ldr	r2, [pc, #80]	; (8017e28 <VerifyRfFreq+0xe4>)
 8017dd6:	4293      	cmp	r3, r2
 8017dd8:	d803      	bhi.n	8017de2 <VerifyRfFreq+0x9e>
    {
        *band = 3;
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	2203      	movs	r2, #3
 8017dde:	701a      	strb	r2, [r3, #0]
 8017de0:	e00d      	b.n	8017dfe <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	4a11      	ldr	r2, [pc, #68]	; (8017e2c <VerifyRfFreq+0xe8>)
 8017de6:	4293      	cmp	r3, r2
 8017de8:	d907      	bls.n	8017dfa <VerifyRfFreq+0xb6>
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	4a10      	ldr	r2, [pc, #64]	; (8017e30 <VerifyRfFreq+0xec>)
 8017dee:	4293      	cmp	r3, r2
 8017df0:	d803      	bhi.n	8017dfa <VerifyRfFreq+0xb6>
    {
        *band = 4;
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	2204      	movs	r2, #4
 8017df6:	701a      	strb	r2, [r3, #0]
 8017df8:	e001      	b.n	8017dfe <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	e000      	b.n	8017e00 <VerifyRfFreq+0xbc>
    }
    return true;
 8017dfe:	2301      	movs	r3, #1
}
 8017e00:	0018      	movs	r0, r3
 8017e02:	46bd      	mov	sp, r7
 8017e04:	b002      	add	sp, #8
 8017e06:	bd80      	pop	{r7, pc}
 8017e08:	0801f0bc 	.word	0x0801f0bc
 8017e0c:	337055bf 	.word	0x337055bf
 8017e10:	338eda3f 	.word	0x338eda3f
 8017e14:	33bca100 	.word	0x33bca100
 8017e18:	33c5c8c0 	.word	0x33c5c8c0
 8017e1c:	33c74f5f 	.word	0x33c74f5f
 8017e20:	33cef080 	.word	0x33cef080
 8017e24:	33d1fdbf 	.word	0x33d1fdbf
 8017e28:	33d5ce50 	.word	0x33d5ce50
 8017e2c:	33d6919f 	.word	0x33d6919f
 8017e30:	33db2580 	.word	0x33db2580

08017e34 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017e34:	b5b0      	push	{r4, r5, r7, lr}
 8017e36:	b08a      	sub	sp, #40	; 0x28
 8017e38:	af04      	add	r7, sp, #16
 8017e3a:	0002      	movs	r2, r0
 8017e3c:	1dfb      	adds	r3, r7, #7
 8017e3e:	701a      	strb	r2, [r3, #0]
 8017e40:	1d3b      	adds	r3, r7, #4
 8017e42:	1c0a      	adds	r2, r1, #0
 8017e44:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 8017e46:	1dfb      	adds	r3, r7, #7
 8017e48:	781b      	ldrb	r3, [r3, #0]
 8017e4a:	b25b      	sxtb	r3, r3
 8017e4c:	4a26      	ldr	r2, [pc, #152]	; (8017ee8 <GetTimeOnAir+0xb4>)
 8017e4e:	5cd2      	ldrb	r2, [r2, r3]
 8017e50:	2513      	movs	r5, #19
 8017e52:	197b      	adds	r3, r7, r5
 8017e54:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 8017e56:	1dfb      	adds	r3, r7, #7
 8017e58:	781b      	ldrb	r3, [r3, #0]
 8017e5a:	b25b      	sxtb	r3, r3
 8017e5c:	0018      	movs	r0, r3
 8017e5e:	f7ff ff2b 	bl	8017cb8 <GetBandwidth>
 8017e62:	0003      	movs	r3, r0
 8017e64:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017e66:	2300      	movs	r3, #0
 8017e68:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017e6a:	1dfb      	adds	r3, r7, #7
 8017e6c:	781b      	ldrb	r3, [r3, #0]
 8017e6e:	b25b      	sxtb	r3, r3
 8017e70:	2b07      	cmp	r3, #7
 8017e72:	d11d      	bne.n	8017eb0 <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017e74:	4b1d      	ldr	r3, [pc, #116]	; (8017eec <GetTimeOnAir+0xb8>)
 8017e76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017e78:	197b      	adds	r3, r7, r5
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	569a      	ldrsb	r2, [r3, r2]
 8017e7e:	0013      	movs	r3, r2
 8017e80:	015b      	lsls	r3, r3, #5
 8017e82:	1a9b      	subs	r3, r3, r2
 8017e84:	009b      	lsls	r3, r3, #2
 8017e86:	189b      	adds	r3, r3, r2
 8017e88:	00db      	lsls	r3, r3, #3
 8017e8a:	0018      	movs	r0, r3
 8017e8c:	1d3b      	adds	r3, r7, #4
 8017e8e:	881b      	ldrh	r3, [r3, #0]
 8017e90:	b2db      	uxtb	r3, r3
 8017e92:	68f9      	ldr	r1, [r7, #12]
 8017e94:	2201      	movs	r2, #1
 8017e96:	9203      	str	r2, [sp, #12]
 8017e98:	9302      	str	r3, [sp, #8]
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	9301      	str	r3, [sp, #4]
 8017e9e:	2305      	movs	r3, #5
 8017ea0:	9300      	str	r3, [sp, #0]
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	0002      	movs	r2, r0
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	47a0      	blx	r4
 8017eaa:	0003      	movs	r3, r0
 8017eac:	617b      	str	r3, [r7, #20]
 8017eae:	e015      	b.n	8017edc <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017eb0:	4b0e      	ldr	r3, [pc, #56]	; (8017eec <GetTimeOnAir+0xb8>)
 8017eb2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017eb4:	2313      	movs	r3, #19
 8017eb6:	18fb      	adds	r3, r7, r3
 8017eb8:	2200      	movs	r2, #0
 8017eba:	569a      	ldrsb	r2, [r3, r2]
 8017ebc:	1d3b      	adds	r3, r7, #4
 8017ebe:	881b      	ldrh	r3, [r3, #0]
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	68f9      	ldr	r1, [r7, #12]
 8017ec4:	2001      	movs	r0, #1
 8017ec6:	9003      	str	r0, [sp, #12]
 8017ec8:	9302      	str	r3, [sp, #8]
 8017eca:	2300      	movs	r3, #0
 8017ecc:	9301      	str	r3, [sp, #4]
 8017ece:	2308      	movs	r3, #8
 8017ed0:	9300      	str	r3, [sp, #0]
 8017ed2:	2301      	movs	r3, #1
 8017ed4:	2001      	movs	r0, #1
 8017ed6:	47a0      	blx	r4
 8017ed8:	0003      	movs	r3, r0
 8017eda:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 8017edc:	697b      	ldr	r3, [r7, #20]
}
 8017ede:	0018      	movs	r0, r3
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	b006      	add	sp, #24
 8017ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8017ee6:	46c0      	nop			; (mov r8, r8)
 8017ee8:	0801ef38 	.word	0x0801ef38
 8017eec:	0801f0bc 	.word	0x0801f0bc

08017ef0 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b084      	sub	sp, #16
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017ef8:	2308      	movs	r3, #8
 8017efa:	18fb      	adds	r3, r7, r3
 8017efc:	2200      	movs	r2, #0
 8017efe:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	781b      	ldrb	r3, [r3, #0]
 8017f04:	2b39      	cmp	r3, #57	; 0x39
 8017f06:	d900      	bls.n	8017f0a <RegionEU868GetPhyParam+0x1a>
 8017f08:	e0e9      	b.n	80180de <RegionEU868GetPhyParam+0x1ee>
 8017f0a:	009a      	lsls	r2, r3, #2
 8017f0c:	4b7b      	ldr	r3, [pc, #492]	; (80180fc <RegionEU868GetPhyParam+0x20c>)
 8017f0e:	18d3      	adds	r3, r2, r3
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017f14:	2308      	movs	r3, #8
 8017f16:	18fb      	adds	r3, r7, r3
 8017f18:	2200      	movs	r2, #0
 8017f1a:	601a      	str	r2, [r3, #0]
            break;
 8017f1c:	e0e0      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8017f1e:	2308      	movs	r3, #8
 8017f20:	18fb      	adds	r3, r7, r3
 8017f22:	2200      	movs	r2, #0
 8017f24:	601a      	str	r2, [r3, #0]
            break;
 8017f26:	e0db      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017f28:	2308      	movs	r3, #8
 8017f2a:	18fb      	adds	r3, r7, r3
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	601a      	str	r2, [r3, #0]
            break;
 8017f30:	e0d6      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	785b      	ldrb	r3, [r3, #1]
 8017f36:	b25b      	sxtb	r3, r3
 8017f38:	2100      	movs	r1, #0
 8017f3a:	0018      	movs	r0, r3
 8017f3c:	f7ff fe94 	bl	8017c68 <GetNextLowerTxDr>
 8017f40:	0003      	movs	r3, r0
 8017f42:	001a      	movs	r2, r3
 8017f44:	2308      	movs	r3, #8
 8017f46:	18fb      	adds	r3, r7, r3
 8017f48:	601a      	str	r2, [r3, #0]
            break;
 8017f4a:	e0c9      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017f4c:	2308      	movs	r3, #8
 8017f4e:	18fb      	adds	r3, r7, r3
 8017f50:	2200      	movs	r2, #0
 8017f52:	601a      	str	r2, [r3, #0]
            break;
 8017f54:	e0c4      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017f56:	2308      	movs	r3, #8
 8017f58:	18fb      	adds	r3, r7, r3
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	601a      	str	r2, [r3, #0]
            break;
 8017f5e:	e0bf      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8017f60:	2308      	movs	r3, #8
 8017f62:	18fb      	adds	r3, r7, r3
 8017f64:	2240      	movs	r2, #64	; 0x40
 8017f66:	601a      	str	r2, [r3, #0]
            break;
 8017f68:	e0ba      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8017f6a:	2308      	movs	r3, #8
 8017f6c:	18fb      	adds	r3, r7, r3
 8017f6e:	2220      	movs	r2, #32
 8017f70:	601a      	str	r2, [r3, #0]
            break;
 8017f72:	e0b5      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	785b      	ldrb	r3, [r3, #1]
 8017f78:	b25b      	sxtb	r3, r3
 8017f7a:	001a      	movs	r2, r3
 8017f7c:	4b60      	ldr	r3, [pc, #384]	; (8018100 <RegionEU868GetPhyParam+0x210>)
 8017f7e:	5c9b      	ldrb	r3, [r3, r2]
 8017f80:	001a      	movs	r2, r3
 8017f82:	2308      	movs	r3, #8
 8017f84:	18fb      	adds	r3, r7, r3
 8017f86:	601a      	str	r2, [r3, #0]
            break;
 8017f88:	e0aa      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	785b      	ldrb	r3, [r3, #1]
 8017f8e:	b25b      	sxtb	r3, r3
 8017f90:	001a      	movs	r2, r3
 8017f92:	4b5c      	ldr	r3, [pc, #368]	; (8018104 <RegionEU868GetPhyParam+0x214>)
 8017f94:	5c9b      	ldrb	r3, [r3, r2]
 8017f96:	001a      	movs	r2, r3
 8017f98:	2308      	movs	r3, #8
 8017f9a:	18fb      	adds	r3, r7, r3
 8017f9c:	601a      	str	r2, [r3, #0]
            break;
 8017f9e:	e09f      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017fa0:	2308      	movs	r3, #8
 8017fa2:	18fb      	adds	r3, r7, r3
 8017fa4:	2201      	movs	r2, #1
 8017fa6:	601a      	str	r2, [r3, #0]
            break;
 8017fa8:	e09a      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017faa:	2308      	movs	r3, #8
 8017fac:	18fb      	adds	r3, r7, r3
 8017fae:	4a56      	ldr	r2, [pc, #344]	; (8018108 <RegionEU868GetPhyParam+0x218>)
 8017fb0:	601a      	str	r2, [r3, #0]
            break;
 8017fb2:	e095      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8017fb4:	2308      	movs	r3, #8
 8017fb6:	18fb      	adds	r3, r7, r3
 8017fb8:	22fa      	movs	r2, #250	; 0xfa
 8017fba:	0092      	lsls	r2, r2, #2
 8017fbc:	601a      	str	r2, [r3, #0]
            break;
 8017fbe:	e08f      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8017fc0:	2308      	movs	r3, #8
 8017fc2:	18fb      	adds	r3, r7, r3
 8017fc4:	22fa      	movs	r2, #250	; 0xfa
 8017fc6:	00d2      	lsls	r2, r2, #3
 8017fc8:	601a      	str	r2, [r3, #0]
            break;
 8017fca:	e089      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8017fcc:	2308      	movs	r3, #8
 8017fce:	18fb      	adds	r3, r7, r3
 8017fd0:	4a4e      	ldr	r2, [pc, #312]	; (801810c <RegionEU868GetPhyParam+0x21c>)
 8017fd2:	601a      	str	r2, [r3, #0]
            break;
 8017fd4:	e084      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8017fd6:	2308      	movs	r3, #8
 8017fd8:	18fb      	adds	r3, r7, r3
 8017fda:	4a4d      	ldr	r2, [pc, #308]	; (8018110 <RegionEU868GetPhyParam+0x220>)
 8017fdc:	601a      	str	r2, [r3, #0]
            break;
 8017fde:	e07f      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8017fe0:	2308      	movs	r3, #8
 8017fe2:	18fb      	adds	r3, r7, r3
 8017fe4:	2280      	movs	r2, #128	; 0x80
 8017fe6:	01d2      	lsls	r2, r2, #7
 8017fe8:	601a      	str	r2, [r3, #0]
            break;
 8017fea:	e079      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8017fec:	23fa      	movs	r3, #250	; 0xfa
 8017fee:	009b      	lsls	r3, r3, #2
 8017ff0:	4a48      	ldr	r2, [pc, #288]	; (8018114 <RegionEU868GetPhyParam+0x224>)
 8017ff2:	0019      	movs	r1, r3
 8017ff4:	0010      	movs	r0, r2
 8017ff6:	f001 f983 	bl	8019300 <randr>
 8017ffa:	0003      	movs	r3, r0
 8017ffc:	22fa      	movs	r2, #250	; 0xfa
 8017ffe:	00d2      	lsls	r2, r2, #3
 8018000:	4694      	mov	ip, r2
 8018002:	4463      	add	r3, ip
 8018004:	001a      	movs	r2, r3
 8018006:	2308      	movs	r3, #8
 8018008:	18fb      	adds	r3, r7, r3
 801800a:	601a      	str	r2, [r3, #0]
            break;
 801800c:	e068      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 801800e:	2308      	movs	r3, #8
 8018010:	18fb      	adds	r3, r7, r3
 8018012:	2200      	movs	r2, #0
 8018014:	601a      	str	r2, [r3, #0]
            break;
 8018016:	e063      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018018:	2308      	movs	r3, #8
 801801a:	18fb      	adds	r3, r7, r3
 801801c:	4a3e      	ldr	r2, [pc, #248]	; (8018118 <RegionEU868GetPhyParam+0x228>)
 801801e:	601a      	str	r2, [r3, #0]
            break;
 8018020:	e05e      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018022:	2308      	movs	r3, #8
 8018024:	18fb      	adds	r3, r7, r3
 8018026:	2200      	movs	r2, #0
 8018028:	601a      	str	r2, [r3, #0]
            break;
 801802a:	e059      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 801802c:	2308      	movs	r3, #8
 801802e:	18fb      	adds	r3, r7, r3
 8018030:	4a3a      	ldr	r2, [pc, #232]	; (801811c <RegionEU868GetPhyParam+0x22c>)
 8018032:	601a      	str	r2, [r3, #0]
            break;
 8018034:	e054      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8018036:	2308      	movs	r3, #8
 8018038:	18fb      	adds	r3, r7, r3
 801803a:	4a39      	ldr	r2, [pc, #228]	; (8018120 <RegionEU868GetPhyParam+0x230>)
 801803c:	601a      	str	r2, [r3, #0]
            break;
 801803e:	e04f      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018040:	2308      	movs	r3, #8
 8018042:	18fb      	adds	r3, r7, r3
 8018044:	2210      	movs	r2, #16
 8018046:	601a      	str	r2, [r3, #0]
            break;
 8018048:	e04a      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801804a:	2308      	movs	r3, #8
 801804c:	18fb      	adds	r3, r7, r3
 801804e:	4a35      	ldr	r2, [pc, #212]	; (8018124 <RegionEU868GetPhyParam+0x234>)
 8018050:	601a      	str	r2, [r3, #0]
            break;
 8018052:	e045      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8018054:	2308      	movs	r3, #8
 8018056:	18fb      	adds	r3, r7, r3
 8018058:	2200      	movs	r2, #0
 801805a:	601a      	str	r2, [r3, #0]
            break;
 801805c:	e040      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801805e:	2308      	movs	r3, #8
 8018060:	18fb      	adds	r3, r7, r3
 8018062:	2283      	movs	r2, #131	; 0x83
 8018064:	05d2      	lsls	r2, r2, #23
 8018066:	601a      	str	r2, [r3, #0]
            break;
 8018068:	e03a      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801806a:	2308      	movs	r3, #8
 801806c:	18fb      	adds	r3, r7, r3
 801806e:	4a2e      	ldr	r2, [pc, #184]	; (8018128 <RegionEU868GetPhyParam+0x238>)
 8018070:	601a      	str	r2, [r3, #0]
            break;
 8018072:	e035      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018074:	2308      	movs	r3, #8
 8018076:	18fb      	adds	r3, r7, r3
 8018078:	4a27      	ldr	r2, [pc, #156]	; (8018118 <RegionEU868GetPhyParam+0x228>)
 801807a:	601a      	str	r2, [r3, #0]
            break;
 801807c:	e030      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801807e:	2108      	movs	r1, #8
 8018080:	187b      	adds	r3, r7, r1
 8018082:	2211      	movs	r2, #17
 8018084:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018086:	187b      	adds	r3, r7, r1
 8018088:	2202      	movs	r2, #2
 801808a:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801808c:	187b      	adds	r3, r7, r1
 801808e:	2200      	movs	r2, #0
 8018090:	709a      	strb	r2, [r3, #2]
            break;
 8018092:	e025      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018094:	2308      	movs	r3, #8
 8018096:	18fb      	adds	r3, r7, r3
 8018098:	2203      	movs	r2, #3
 801809a:	601a      	str	r2, [r3, #0]
            break;
 801809c:	e020      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801809e:	2308      	movs	r3, #8
 80180a0:	18fb      	adds	r3, r7, r3
 80180a2:	4a1d      	ldr	r2, [pc, #116]	; (8018118 <RegionEU868GetPhyParam+0x228>)
 80180a4:	601a      	str	r2, [r3, #0]
            break;
 80180a6:	e01b      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80180a8:	2308      	movs	r3, #8
 80180aa:	18fb      	adds	r3, r7, r3
 80180ac:	2203      	movs	r2, #3
 80180ae:	601a      	str	r2, [r3, #0]
            break;
 80180b0:	e016      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	785b      	ldrb	r3, [r3, #1]
 80180b6:	b25b      	sxtb	r3, r3
 80180b8:	001a      	movs	r2, r3
 80180ba:	4b1c      	ldr	r3, [pc, #112]	; (801812c <RegionEU868GetPhyParam+0x23c>)
 80180bc:	5c9b      	ldrb	r3, [r3, r2]
 80180be:	001a      	movs	r2, r3
 80180c0:	2308      	movs	r3, #8
 80180c2:	18fb      	adds	r3, r7, r3
 80180c4:	601a      	str	r2, [r3, #0]
            break;
 80180c6:	e00b      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	785b      	ldrb	r3, [r3, #1]
 80180cc:	b25b      	sxtb	r3, r3
 80180ce:	0018      	movs	r0, r3
 80180d0:	f7ff fdf2 	bl	8017cb8 <GetBandwidth>
 80180d4:	0002      	movs	r2, r0
 80180d6:	2308      	movs	r3, #8
 80180d8:	18fb      	adds	r3, r7, r3
 80180da:	601a      	str	r2, [r3, #0]
            break;
 80180dc:	e000      	b.n	80180e0 <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 80180de:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80180e0:	210c      	movs	r1, #12
 80180e2:	187b      	adds	r3, r7, r1
 80180e4:	2208      	movs	r2, #8
 80180e6:	18ba      	adds	r2, r7, r2
 80180e8:	6812      	ldr	r2, [r2, #0]
 80180ea:	601a      	str	r2, [r3, #0]
 80180ec:	187b      	adds	r3, r7, r1
 80180ee:	2200      	movs	r2, #0
 80180f0:	681a      	ldr	r2, [r3, #0]
 80180f2:	0013      	movs	r3, r2
}
 80180f4:	0018      	movs	r0, r3
 80180f6:	46bd      	mov	sp, r7
 80180f8:	b004      	add	sp, #16
 80180fa:	bd80      	pop	{r7, pc}
 80180fc:	0801ef70 	.word	0x0801ef70
 8018100:	0801ef60 	.word	0x0801ef60
 8018104:	0801ef68 	.word	0x0801ef68
 8018108:	00000bb8 	.word	0x00000bb8
 801810c:	00001388 	.word	0x00001388
 8018110:	00001770 	.word	0x00001770
 8018114:	fffffc18 	.word	0xfffffc18
 8018118:	33d3e608 	.word	0x33d3e608
 801811c:	20000e10 	.word	0x20000e10
 8018120:	20000e12 	.word	0x20000e12
 8018124:	20000cd8 	.word	0x20000cd8
 8018128:	4009999a 	.word	0x4009999a
 801812c:	0801ef38 	.word	0x0801ef38

08018130 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018130:	b5b0      	push	{r4, r5, r7, lr}
 8018132:	b084      	sub	sp, #16
 8018134:	af02      	add	r7, sp, #8
 8018136:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	781b      	ldrb	r3, [r3, #0]
 801813c:	0019      	movs	r1, r3
 801813e:	4a11      	ldr	r2, [pc, #68]	; (8018184 <RegionEU868SetBandTxDone+0x54>)
 8018140:	000b      	movs	r3, r1
 8018142:	005b      	lsls	r3, r3, #1
 8018144:	185b      	adds	r3, r3, r1
 8018146:	009b      	lsls	r3, r3, #2
 8018148:	18d3      	adds	r3, r2, r3
 801814a:	3309      	adds	r3, #9
 801814c:	781b      	ldrb	r3, [r3, #0]
 801814e:	001a      	movs	r2, r3
 8018150:	0013      	movs	r3, r2
 8018152:	009b      	lsls	r3, r3, #2
 8018154:	189b      	adds	r3, r3, r2
 8018156:	009b      	lsls	r3, r3, #2
 8018158:	33c0      	adds	r3, #192	; 0xc0
 801815a:	001a      	movs	r2, r3
 801815c:	4b09      	ldr	r3, [pc, #36]	; (8018184 <RegionEU868SetBandTxDone+0x54>)
 801815e:	18d0      	adds	r0, r2, r3
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	689c      	ldr	r4, [r3, #8]
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	785d      	ldrb	r5, [r3, #1]
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	466a      	mov	r2, sp
 801816c:	6919      	ldr	r1, [r3, #16]
 801816e:	6011      	str	r1, [r2, #0]
 8018170:	68db      	ldr	r3, [r3, #12]
 8018172:	002a      	movs	r2, r5
 8018174:	0021      	movs	r1, r4
 8018176:	f7ff f92e 	bl	80173d6 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 801817a:	46c0      	nop			; (mov r8, r8)
 801817c:	46bd      	mov	sp, r7
 801817e:	b002      	add	sp, #8
 8018180:	bdb0      	pop	{r4, r5, r7, pc}
 8018182:	46c0      	nop			; (mov r8, r8)
 8018184:	20000cd8 	.word	0x20000cd8

08018188 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018188:	b590      	push	{r4, r7, lr}
 801818a:	b0ab      	sub	sp, #172	; 0xac
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018190:	2430      	movs	r4, #48	; 0x30
 8018192:	193b      	adds	r3, r7, r4
 8018194:	0018      	movs	r0, r3
 8018196:	2378      	movs	r3, #120	; 0x78
 8018198:	001a      	movs	r2, r3
 801819a:	2100      	movs	r1, #0
 801819c:	f005 fe1d 	bl	801ddda <memset>
 80181a0:	0021      	movs	r1, r4
 80181a2:	187b      	adds	r3, r7, r1
 80181a4:	2264      	movs	r2, #100	; 0x64
 80181a6:	801a      	strh	r2, [r3, #0]
 80181a8:	187b      	adds	r3, r7, r1
 80181aa:	2264      	movs	r2, #100	; 0x64
 80181ac:	829a      	strh	r2, [r3, #20]
 80181ae:	187b      	adds	r3, r7, r1
 80181b0:	22fa      	movs	r2, #250	; 0xfa
 80181b2:	0092      	lsls	r2, r2, #2
 80181b4:	851a      	strh	r2, [r3, #40]	; 0x28
 80181b6:	187b      	adds	r3, r7, r1
 80181b8:	220a      	movs	r2, #10
 80181ba:	879a      	strh	r2, [r3, #60]	; 0x3c
 80181bc:	0008      	movs	r0, r1
 80181be:	187b      	adds	r3, r7, r1
 80181c0:	2250      	movs	r2, #80	; 0x50
 80181c2:	2164      	movs	r1, #100	; 0x64
 80181c4:	5299      	strh	r1, [r3, r2]
 80181c6:	183b      	adds	r3, r7, r0
 80181c8:	2264      	movs	r2, #100	; 0x64
 80181ca:	21fa      	movs	r1, #250	; 0xfa
 80181cc:	0089      	lsls	r1, r1, #2
 80181ce:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	791b      	ldrb	r3, [r3, #4]
 80181d4:	2b03      	cmp	r3, #3
 80181d6:	d048      	beq.n	801826a <RegionEU868InitDefaults+0xe2>
 80181d8:	dc54      	bgt.n	8018284 <RegionEU868InitDefaults+0xfc>
 80181da:	2b02      	cmp	r3, #2
 80181dc:	d036      	beq.n	801824c <RegionEU868InitDefaults+0xc4>
 80181de:	dc51      	bgt.n	8018284 <RegionEU868InitDefaults+0xfc>
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d002      	beq.n	80181ea <RegionEU868InitDefaults+0x62>
 80181e4:	2b01      	cmp	r3, #1
 80181e6:	d021      	beq.n	801822c <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 80181e8:	e04c      	b.n	8018284 <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80181ea:	2330      	movs	r3, #48	; 0x30
 80181ec:	18f9      	adds	r1, r7, r3
 80181ee:	4b29      	ldr	r3, [pc, #164]	; (8018294 <RegionEU868InitDefaults+0x10c>)
 80181f0:	2278      	movs	r2, #120	; 0x78
 80181f2:	0018      	movs	r0, r3
 80181f4:	f001 f89a 	bl	801932c <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80181f8:	4b27      	ldr	r3, [pc, #156]	; (8018298 <RegionEU868InitDefaults+0x110>)
 80181fa:	4a28      	ldr	r2, [pc, #160]	; (801829c <RegionEU868InitDefaults+0x114>)
 80181fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80181fe:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018200:	4b25      	ldr	r3, [pc, #148]	; (8018298 <RegionEU868InitDefaults+0x110>)
 8018202:	4a27      	ldr	r2, [pc, #156]	; (80182a0 <RegionEU868InitDefaults+0x118>)
 8018204:	330c      	adds	r3, #12
 8018206:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018208:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801820a:	4b23      	ldr	r3, [pc, #140]	; (8018298 <RegionEU868InitDefaults+0x110>)
 801820c:	4a25      	ldr	r2, [pc, #148]	; (80182a4 <RegionEU868InitDefaults+0x11c>)
 801820e:	3318      	adds	r3, #24
 8018210:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018212:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018214:	4a20      	ldr	r2, [pc, #128]	; (8018298 <RegionEU868InitDefaults+0x110>)
 8018216:	239d      	movs	r3, #157	; 0x9d
 8018218:	005b      	lsls	r3, r3, #1
 801821a:	2107      	movs	r1, #7
 801821c:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801821e:	4922      	ldr	r1, [pc, #136]	; (80182a8 <RegionEU868InitDefaults+0x120>)
 8018220:	4b22      	ldr	r3, [pc, #136]	; (80182ac <RegionEU868InitDefaults+0x124>)
 8018222:	2201      	movs	r2, #1
 8018224:	0018      	movs	r0, r3
 8018226:	f7ff f8a7 	bl	8017378 <RegionCommonChanMaskCopy>
            break;
 801822a:	e02e      	b.n	801828a <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 801822c:	4b1a      	ldr	r3, [pc, #104]	; (8018298 <RegionEU868InitDefaults+0x110>)
 801822e:	2200      	movs	r2, #0
 8018230:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 8018232:	4b19      	ldr	r3, [pc, #100]	; (8018298 <RegionEU868InitDefaults+0x110>)
 8018234:	2200      	movs	r2, #0
 8018236:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 8018238:	4b17      	ldr	r3, [pc, #92]	; (8018298 <RegionEU868InitDefaults+0x110>)
 801823a:	2200      	movs	r2, #0
 801823c:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801823e:	491a      	ldr	r1, [pc, #104]	; (80182a8 <RegionEU868InitDefaults+0x120>)
 8018240:	4b1a      	ldr	r3, [pc, #104]	; (80182ac <RegionEU868InitDefaults+0x124>)
 8018242:	2201      	movs	r2, #1
 8018244:	0018      	movs	r0, r3
 8018246:	f7ff f897 	bl	8017378 <RegionCommonChanMaskCopy>
            break;
 801824a:	e01e      	b.n	801828a <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 801824c:	4a12      	ldr	r2, [pc, #72]	; (8018298 <RegionEU868InitDefaults+0x110>)
 801824e:	239c      	movs	r3, #156	; 0x9c
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	5ad2      	ldrh	r2, [r2, r3]
 8018254:	4910      	ldr	r1, [pc, #64]	; (8018298 <RegionEU868InitDefaults+0x110>)
 8018256:	239d      	movs	r3, #157	; 0x9d
 8018258:	005b      	lsls	r3, r3, #1
 801825a:	5acb      	ldrh	r3, [r1, r3]
 801825c:	4313      	orrs	r3, r2
 801825e:	b299      	uxth	r1, r3
 8018260:	4a0d      	ldr	r2, [pc, #52]	; (8018298 <RegionEU868InitDefaults+0x110>)
 8018262:	239c      	movs	r3, #156	; 0x9c
 8018264:	005b      	lsls	r3, r3, #1
 8018266:	52d1      	strh	r1, [r2, r3]
            break;
 8018268:	e00f      	b.n	801828a <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d00a      	beq.n	8018288 <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6819      	ldr	r1, [r3, #0]
 8018276:	239e      	movs	r3, #158	; 0x9e
 8018278:	005a      	lsls	r2, r3, #1
 801827a:	4b07      	ldr	r3, [pc, #28]	; (8018298 <RegionEU868InitDefaults+0x110>)
 801827c:	0018      	movs	r0, r3
 801827e:	f001 f855 	bl	801932c <memcpy1>
            break;
 8018282:	e001      	b.n	8018288 <RegionEU868InitDefaults+0x100>
            break;
 8018284:	46c0      	nop			; (mov r8, r8)
 8018286:	e000      	b.n	801828a <RegionEU868InitDefaults+0x102>
            break;
 8018288:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801828a:	46c0      	nop			; (mov r8, r8)
 801828c:	46bd      	mov	sp, r7
 801828e:	b02b      	add	sp, #172	; 0xac
 8018290:	bd90      	pop	{r4, r7, pc}
 8018292:	46c0      	nop			; (mov r8, r8)
 8018294:	20000d98 	.word	0x20000d98
 8018298:	20000cd8 	.word	0x20000cd8
 801829c:	0801f058 	.word	0x0801f058
 80182a0:	0801f064 	.word	0x0801f064
 80182a4:	0801f070 	.word	0x0801f070
 80182a8:	20000e12 	.word	0x20000e12
 80182ac:	20000e10 	.word	0x20000e10

080182b0 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b082      	sub	sp, #8
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	229e      	movs	r2, #158	; 0x9e
 80182bc:	0052      	lsls	r2, r2, #1
 80182be:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80182c0:	4b02      	ldr	r3, [pc, #8]	; (80182cc <RegionEU868GetNvmCtx+0x1c>)
}
 80182c2:	0018      	movs	r0, r3
 80182c4:	46bd      	mov	sp, r7
 80182c6:	b002      	add	sp, #8
 80182c8:	bd80      	pop	{r7, pc}
 80182ca:	46c0      	nop			; (mov r8, r8)
 80182cc:	20000cd8 	.word	0x20000cd8

080182d0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b084      	sub	sp, #16
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
 80182d8:	000a      	movs	r2, r1
 80182da:	1cfb      	adds	r3, r7, #3
 80182dc:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 80182de:	1cfb      	adds	r3, r7, #3
 80182e0:	781b      	ldrb	r3, [r3, #0]
 80182e2:	2b0f      	cmp	r3, #15
 80182e4:	d847      	bhi.n	8018376 <RegionEU868Verify+0xa6>
 80182e6:	009a      	lsls	r2, r3, #2
 80182e8:	4b25      	ldr	r3, [pc, #148]	; (8018380 <RegionEU868Verify+0xb0>)
 80182ea:	18d3      	adds	r3, r2, r3
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80182f0:	210f      	movs	r1, #15
 80182f2:	187b      	adds	r3, r7, r1
 80182f4:	2200      	movs	r2, #0
 80182f6:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	187a      	adds	r2, r7, r1
 80182fe:	0011      	movs	r1, r2
 8018300:	0018      	movs	r0, r3
 8018302:	f7ff fd1f 	bl	8017d44 <VerifyRfFreq>
 8018306:	0003      	movs	r3, r0
 8018308:	e036      	b.n	8018378 <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	781b      	ldrb	r3, [r3, #0]
 801830e:	b25b      	sxtb	r3, r3
 8018310:	2207      	movs	r2, #7
 8018312:	2100      	movs	r1, #0
 8018314:	0018      	movs	r0, r3
 8018316:	f7fe ff86 	bl	8017226 <RegionCommonValueInRange>
 801831a:	0003      	movs	r3, r0
 801831c:	1e5a      	subs	r2, r3, #1
 801831e:	4193      	sbcs	r3, r2
 8018320:	b2db      	uxtb	r3, r3
 8018322:	e029      	b.n	8018378 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	781b      	ldrb	r3, [r3, #0]
 8018328:	b25b      	sxtb	r3, r3
 801832a:	2205      	movs	r2, #5
 801832c:	2100      	movs	r1, #0
 801832e:	0018      	movs	r0, r3
 8018330:	f7fe ff79 	bl	8017226 <RegionCommonValueInRange>
 8018334:	0003      	movs	r3, r0
 8018336:	1e5a      	subs	r2, r3, #1
 8018338:	4193      	sbcs	r3, r2
 801833a:	b2db      	uxtb	r3, r3
 801833c:	e01c      	b.n	8018378 <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	781b      	ldrb	r3, [r3, #0]
 8018342:	b25b      	sxtb	r3, r3
 8018344:	2207      	movs	r2, #7
 8018346:	2100      	movs	r1, #0
 8018348:	0018      	movs	r0, r3
 801834a:	f7fe ff6c 	bl	8017226 <RegionCommonValueInRange>
 801834e:	0003      	movs	r3, r0
 8018350:	1e5a      	subs	r2, r3, #1
 8018352:	4193      	sbcs	r3, r2
 8018354:	b2db      	uxtb	r3, r3
 8018356:	e00f      	b.n	8018378 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	781b      	ldrb	r3, [r3, #0]
 801835c:	b25b      	sxtb	r3, r3
 801835e:	2207      	movs	r2, #7
 8018360:	2100      	movs	r1, #0
 8018362:	0018      	movs	r0, r3
 8018364:	f7fe ff5f 	bl	8017226 <RegionCommonValueInRange>
 8018368:	0003      	movs	r3, r0
 801836a:	1e5a      	subs	r2, r3, #1
 801836c:	4193      	sbcs	r3, r2
 801836e:	b2db      	uxtb	r3, r3
 8018370:	e002      	b.n	8018378 <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8018372:	2301      	movs	r3, #1
 8018374:	e000      	b.n	8018378 <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 8018376:	2300      	movs	r3, #0
    }
}
 8018378:	0018      	movs	r0, r3
 801837a:	46bd      	mov	sp, r7
 801837c:	b004      	add	sp, #16
 801837e:	bd80      	pop	{r7, pc}
 8018380:	0801f07c 	.word	0x0801f07c

08018384 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018384:	b590      	push	{r4, r7, lr}
 8018386:	b08b      	sub	sp, #44	; 0x2c
 8018388:	af00      	add	r7, sp, #0
 801838a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801838c:	2318      	movs	r3, #24
 801838e:	18fb      	adds	r3, r7, r3
 8018390:	2250      	movs	r2, #80	; 0x50
 8018392:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	791b      	ldrb	r3, [r3, #4]
 8018398:	2b10      	cmp	r3, #16
 801839a:	d000      	beq.n	801839e <RegionEU868ApplyCFList+0x1a>
 801839c:	e07c      	b.n	8018498 <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	330f      	adds	r3, #15
 80183a4:	781b      	ldrb	r3, [r3, #0]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d000      	beq.n	80183ac <RegionEU868ApplyCFList+0x28>
 80183aa:	e077      	b.n	801849c <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80183ac:	2327      	movs	r3, #39	; 0x27
 80183ae:	18fb      	adds	r3, r7, r3
 80183b0:	2200      	movs	r2, #0
 80183b2:	701a      	strb	r2, [r3, #0]
 80183b4:	2326      	movs	r3, #38	; 0x26
 80183b6:	18fb      	adds	r3, r7, r3
 80183b8:	2203      	movs	r2, #3
 80183ba:	701a      	strb	r2, [r3, #0]
 80183bc:	e066      	b.n	801848c <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80183be:	2326      	movs	r3, #38	; 0x26
 80183c0:	18fb      	adds	r3, r7, r3
 80183c2:	781b      	ldrb	r3, [r3, #0]
 80183c4:	2b07      	cmp	r3, #7
 80183c6:	d82e      	bhi.n	8018426 <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681a      	ldr	r2, [r3, #0]
 80183cc:	2427      	movs	r4, #39	; 0x27
 80183ce:	193b      	adds	r3, r7, r4
 80183d0:	781b      	ldrb	r3, [r3, #0]
 80183d2:	18d3      	adds	r3, r2, r3
 80183d4:	781b      	ldrb	r3, [r3, #0]
 80183d6:	001a      	movs	r2, r3
 80183d8:	2018      	movs	r0, #24
 80183da:	183b      	adds	r3, r7, r0
 80183dc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80183de:	183b      	adds	r3, r7, r0
 80183e0:	681a      	ldr	r2, [r3, #0]
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6819      	ldr	r1, [r3, #0]
 80183e6:	193b      	adds	r3, r7, r4
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	3301      	adds	r3, #1
 80183ec:	18cb      	adds	r3, r1, r3
 80183ee:	781b      	ldrb	r3, [r3, #0]
 80183f0:	021b      	lsls	r3, r3, #8
 80183f2:	431a      	orrs	r2, r3
 80183f4:	183b      	adds	r3, r7, r0
 80183f6:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80183f8:	183b      	adds	r3, r7, r0
 80183fa:	681a      	ldr	r2, [r3, #0]
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6819      	ldr	r1, [r3, #0]
 8018400:	193b      	adds	r3, r7, r4
 8018402:	781b      	ldrb	r3, [r3, #0]
 8018404:	3302      	adds	r3, #2
 8018406:	18cb      	adds	r3, r1, r3
 8018408:	781b      	ldrb	r3, [r3, #0]
 801840a:	041b      	lsls	r3, r3, #16
 801840c:	431a      	orrs	r2, r3
 801840e:	183b      	adds	r3, r7, r0
 8018410:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8018412:	183b      	adds	r3, r7, r0
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	2264      	movs	r2, #100	; 0x64
 8018418:	435a      	muls	r2, r3
 801841a:	183b      	adds	r3, r7, r0
 801841c:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801841e:	183b      	adds	r3, r7, r0
 8018420:	2200      	movs	r2, #0
 8018422:	605a      	str	r2, [r3, #4]
 8018424:	e009      	b.n	801843a <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8018426:	2118      	movs	r1, #24
 8018428:	187b      	adds	r3, r7, r1
 801842a:	2200      	movs	r2, #0
 801842c:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 801842e:	187b      	adds	r3, r7, r1
 8018430:	2200      	movs	r2, #0
 8018432:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8018434:	187b      	adds	r3, r7, r1
 8018436:	2200      	movs	r2, #0
 8018438:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 801843a:	2218      	movs	r2, #24
 801843c:	18bb      	adds	r3, r7, r2
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d00d      	beq.n	8018460 <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8018444:	2110      	movs	r1, #16
 8018446:	187b      	adds	r3, r7, r1
 8018448:	18ba      	adds	r2, r7, r2
 801844a:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 801844c:	187b      	adds	r3, r7, r1
 801844e:	2226      	movs	r2, #38	; 0x26
 8018450:	18ba      	adds	r2, r7, r2
 8018452:	7812      	ldrb	r2, [r2, #0]
 8018454:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018456:	187b      	adds	r3, r7, r1
 8018458:	0018      	movs	r0, r3
 801845a:	f000 fdb5 	bl	8018fc8 <RegionEU868ChannelAdd>
 801845e:	e009      	b.n	8018474 <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018460:	210c      	movs	r1, #12
 8018462:	187b      	adds	r3, r7, r1
 8018464:	2226      	movs	r2, #38	; 0x26
 8018466:	18ba      	adds	r2, r7, r2
 8018468:	7812      	ldrb	r2, [r2, #0]
 801846a:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 801846c:	187b      	adds	r3, r7, r1
 801846e:	0018      	movs	r0, r3
 8018470:	f000 fe6e 	bl	8019150 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018474:	2227      	movs	r2, #39	; 0x27
 8018476:	18bb      	adds	r3, r7, r2
 8018478:	18ba      	adds	r2, r7, r2
 801847a:	7812      	ldrb	r2, [r2, #0]
 801847c:	3203      	adds	r2, #3
 801847e:	701a      	strb	r2, [r3, #0]
 8018480:	2126      	movs	r1, #38	; 0x26
 8018482:	187b      	adds	r3, r7, r1
 8018484:	781a      	ldrb	r2, [r3, #0]
 8018486:	187b      	adds	r3, r7, r1
 8018488:	3201      	adds	r2, #1
 801848a:	701a      	strb	r2, [r3, #0]
 801848c:	2326      	movs	r3, #38	; 0x26
 801848e:	18fb      	adds	r3, r7, r3
 8018490:	781b      	ldrb	r3, [r3, #0]
 8018492:	2b0f      	cmp	r3, #15
 8018494:	d993      	bls.n	80183be <RegionEU868ApplyCFList+0x3a>
 8018496:	e002      	b.n	801849e <RegionEU868ApplyCFList+0x11a>
        return;
 8018498:	46c0      	nop			; (mov r8, r8)
 801849a:	e000      	b.n	801849e <RegionEU868ApplyCFList+0x11a>
        return;
 801849c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801849e:	46bd      	mov	sp, r7
 80184a0:	b00b      	add	sp, #44	; 0x2c
 80184a2:	bd90      	pop	{r4, r7, pc}

080184a4 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b082      	sub	sp, #8
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	791b      	ldrb	r3, [r3, #4]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d002      	beq.n	80184ba <RegionEU868ChanMaskSet+0x16>
 80184b4:	2b01      	cmp	r3, #1
 80184b6:	d008      	beq.n	80184ca <RegionEU868ChanMaskSet+0x26>
 80184b8:	e00f      	b.n	80184da <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	6819      	ldr	r1, [r3, #0]
 80184be:	4b0a      	ldr	r3, [pc, #40]	; (80184e8 <RegionEU868ChanMaskSet+0x44>)
 80184c0:	2201      	movs	r2, #1
 80184c2:	0018      	movs	r0, r3
 80184c4:	f7fe ff58 	bl	8017378 <RegionCommonChanMaskCopy>
            break;
 80184c8:	e009      	b.n	80184de <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	6819      	ldr	r1, [r3, #0]
 80184ce:	4b07      	ldr	r3, [pc, #28]	; (80184ec <RegionEU868ChanMaskSet+0x48>)
 80184d0:	2201      	movs	r2, #1
 80184d2:	0018      	movs	r0, r3
 80184d4:	f7fe ff50 	bl	8017378 <RegionCommonChanMaskCopy>
            break;
 80184d8:	e001      	b.n	80184de <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 80184da:	2300      	movs	r3, #0
 80184dc:	e000      	b.n	80184e0 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 80184de:	2301      	movs	r3, #1
}
 80184e0:	0018      	movs	r0, r3
 80184e2:	46bd      	mov	sp, r7
 80184e4:	b002      	add	sp, #8
 80184e6:	bd80      	pop	{r7, pc}
 80184e8:	20000e10 	.word	0x20000e10
 80184ec:	20000e12 	.word	0x20000e12

080184f0 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80184f0:	b5b0      	push	{r4, r5, r7, lr}
 80184f2:	b088      	sub	sp, #32
 80184f4:	af02      	add	r7, sp, #8
 80184f6:	60ba      	str	r2, [r7, #8]
 80184f8:	607b      	str	r3, [r7, #4]
 80184fa:	240f      	movs	r4, #15
 80184fc:	193b      	adds	r3, r7, r4
 80184fe:	1c02      	adds	r2, r0, #0
 8018500:	701a      	strb	r2, [r3, #0]
 8018502:	230e      	movs	r3, #14
 8018504:	18fb      	adds	r3, r7, r3
 8018506:	1c0a      	adds	r2, r1, #0
 8018508:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 801850a:	2300      	movs	r3, #0
 801850c:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801850e:	193b      	adds	r3, r7, r4
 8018510:	781b      	ldrb	r3, [r3, #0]
 8018512:	b25a      	sxtb	r2, r3
 8018514:	2a07      	cmp	r2, #7
 8018516:	dd00      	ble.n	801851a <RegionEU868ComputeRxWindowParameters+0x2a>
 8018518:	2307      	movs	r3, #7
 801851a:	b25a      	sxtb	r2, r3
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	785b      	ldrb	r3, [r3, #1]
 8018524:	b25b      	sxtb	r3, r3
 8018526:	0018      	movs	r0, r3
 8018528:	f7ff fbc6 	bl	8017cb8 <GetBandwidth>
 801852c:	0003      	movs	r3, r0
 801852e:	b2da      	uxtb	r2, r3
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	785b      	ldrb	r3, [r3, #1]
 8018538:	b25b      	sxtb	r3, r3
 801853a:	2b07      	cmp	r3, #7
 801853c:	d10b      	bne.n	8018556 <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	785b      	ldrb	r3, [r3, #1]
 8018542:	b25b      	sxtb	r3, r3
 8018544:	001a      	movs	r2, r3
 8018546:	4b18      	ldr	r3, [pc, #96]	; (80185a8 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018548:	5c9b      	ldrb	r3, [r3, r2]
 801854a:	0018      	movs	r0, r3
 801854c:	f7ff f954 	bl	80177f8 <RegionCommonComputeSymbolTimeFsk>
 8018550:	0003      	movs	r3, r0
 8018552:	617b      	str	r3, [r7, #20]
 8018554:	e011      	b.n	801857a <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	785b      	ldrb	r3, [r3, #1]
 801855a:	b25b      	sxtb	r3, r3
 801855c:	001a      	movs	r2, r3
 801855e:	4b12      	ldr	r3, [pc, #72]	; (80185a8 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018560:	5c98      	ldrb	r0, [r3, r2]
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	785b      	ldrb	r3, [r3, #1]
 8018566:	b25b      	sxtb	r3, r3
 8018568:	001a      	movs	r2, r3
 801856a:	4b10      	ldr	r3, [pc, #64]	; (80185ac <RegionEU868ComputeRxWindowParameters+0xbc>)
 801856c:	0092      	lsls	r2, r2, #2
 801856e:	58d3      	ldr	r3, [r2, r3]
 8018570:	0019      	movs	r1, r3
 8018572:	f7ff f929 	bl	80177c8 <RegionCommonComputeSymbolTimeLoRa>
 8018576:	0003      	movs	r3, r0
 8018578:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801857a:	4b0d      	ldr	r3, [pc, #52]	; (80185b0 <RegionEU868ComputeRxWindowParameters+0xc0>)
 801857c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801857e:	4798      	blx	r3
 8018580:	0005      	movs	r5, r0
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	3308      	adds	r3, #8
 8018586:	687a      	ldr	r2, [r7, #4]
 8018588:	320c      	adds	r2, #12
 801858a:	68bc      	ldr	r4, [r7, #8]
 801858c:	210e      	movs	r1, #14
 801858e:	1879      	adds	r1, r7, r1
 8018590:	7809      	ldrb	r1, [r1, #0]
 8018592:	6978      	ldr	r0, [r7, #20]
 8018594:	9201      	str	r2, [sp, #4]
 8018596:	9300      	str	r3, [sp, #0]
 8018598:	002b      	movs	r3, r5
 801859a:	0022      	movs	r2, r4
 801859c:	f7ff f93a 	bl	8017814 <RegionCommonComputeRxWindowParameters>
}
 80185a0:	46c0      	nop			; (mov r8, r8)
 80185a2:	46bd      	mov	sp, r7
 80185a4:	b006      	add	sp, #24
 80185a6:	bdb0      	pop	{r4, r5, r7, pc}
 80185a8:	0801ef38 	.word	0x0801ef38
 80185ac:	0801ef40 	.word	0x0801ef40
 80185b0:	0801f0bc 	.word	0x0801f0bc

080185b4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80185b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185b6:	b091      	sub	sp, #68	; 0x44
 80185b8:	af0a      	add	r7, sp, #40	; 0x28
 80185ba:	6078      	str	r0, [r7, #4]
 80185bc:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80185be:	230f      	movs	r3, #15
 80185c0:	18fb      	adds	r3, r7, r3
 80185c2:	687a      	ldr	r2, [r7, #4]
 80185c4:	7852      	ldrb	r2, [r2, #1]
 80185c6:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 80185c8:	2316      	movs	r3, #22
 80185ca:	18fb      	adds	r3, r7, r3
 80185cc:	2200      	movs	r2, #0
 80185ce:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80185d0:	230e      	movs	r3, #14
 80185d2:	18fb      	adds	r3, r7, r3
 80185d4:	2200      	movs	r2, #0
 80185d6:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	685b      	ldr	r3, [r3, #4]
 80185dc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80185de:	4b68      	ldr	r3, [pc, #416]	; (8018780 <RegionEU868RxConfig+0x1cc>)
 80185e0:	685b      	ldr	r3, [r3, #4]
 80185e2:	4798      	blx	r3
 80185e4:	1e03      	subs	r3, r0, #0
 80185e6:	d001      	beq.n	80185ec <RegionEU868RxConfig+0x38>
    {
        return false;
 80185e8:	2300      	movs	r3, #0
 80185ea:	e0c4      	b.n	8018776 <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	7cdb      	ldrb	r3, [r3, #19]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d122      	bne.n	801863a <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	781b      	ldrb	r3, [r3, #0]
 80185f8:	0019      	movs	r1, r3
 80185fa:	4a62      	ldr	r2, [pc, #392]	; (8018784 <RegionEU868RxConfig+0x1d0>)
 80185fc:	000b      	movs	r3, r1
 80185fe:	005b      	lsls	r3, r3, #1
 8018600:	185b      	adds	r3, r3, r1
 8018602:	009b      	lsls	r3, r3, #2
 8018604:	589b      	ldr	r3, [r3, r2]
 8018606:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	781b      	ldrb	r3, [r3, #0]
 801860c:	0019      	movs	r1, r3
 801860e:	4a5d      	ldr	r2, [pc, #372]	; (8018784 <RegionEU868RxConfig+0x1d0>)
 8018610:	000b      	movs	r3, r1
 8018612:	005b      	lsls	r3, r3, #1
 8018614:	185b      	adds	r3, r3, r1
 8018616:	009b      	lsls	r3, r3, #2
 8018618:	18d3      	adds	r3, r2, r3
 801861a:	3304      	adds	r3, #4
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d00b      	beq.n	801863a <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	781b      	ldrb	r3, [r3, #0]
 8018626:	0019      	movs	r1, r3
 8018628:	4a56      	ldr	r2, [pc, #344]	; (8018784 <RegionEU868RxConfig+0x1d0>)
 801862a:	000b      	movs	r3, r1
 801862c:	005b      	lsls	r3, r3, #1
 801862e:	185b      	adds	r3, r3, r1
 8018630:	009b      	lsls	r3, r3, #2
 8018632:	18d3      	adds	r3, r2, r3
 8018634:	3304      	adds	r3, #4
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801863a:	240f      	movs	r4, #15
 801863c:	193b      	adds	r3, r7, r4
 801863e:	781b      	ldrb	r3, [r3, #0]
 8018640:	b25b      	sxtb	r3, r3
 8018642:	4a51      	ldr	r2, [pc, #324]	; (8018788 <RegionEU868RxConfig+0x1d4>)
 8018644:	5cd2      	ldrb	r2, [r2, r3]
 8018646:	250e      	movs	r5, #14
 8018648:	197b      	adds	r3, r7, r5
 801864a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 801864c:	4b4c      	ldr	r3, [pc, #304]	; (8018780 <RegionEU868RxConfig+0x1cc>)
 801864e:	68db      	ldr	r3, [r3, #12]
 8018650:	693a      	ldr	r2, [r7, #16]
 8018652:	0010      	movs	r0, r2
 8018654:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018656:	193b      	adds	r3, r7, r4
 8018658:	781b      	ldrb	r3, [r3, #0]
 801865a:	b25b      	sxtb	r3, r3
 801865c:	2b07      	cmp	r3, #7
 801865e:	d12e      	bne.n	80186be <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 8018660:	2117      	movs	r1, #23
 8018662:	187b      	adds	r3, r7, r1
 8018664:	2200      	movs	r2, #0
 8018666:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018668:	4b45      	ldr	r3, [pc, #276]	; (8018780 <RegionEU868RxConfig+0x1cc>)
 801866a:	699c      	ldr	r4, [r3, #24]
 801866c:	197b      	adds	r3, r7, r5
 801866e:	2200      	movs	r2, #0
 8018670:	569a      	ldrsb	r2, [r3, r2]
 8018672:	0013      	movs	r3, r2
 8018674:	015b      	lsls	r3, r3, #5
 8018676:	1a9b      	subs	r3, r3, r2
 8018678:	009b      	lsls	r3, r3, #2
 801867a:	189b      	adds	r3, r3, r2
 801867c:	00db      	lsls	r3, r3, #3
 801867e:	001e      	movs	r6, r3
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	689b      	ldr	r3, [r3, #8]
 8018684:	b29b      	uxth	r3, r3
 8018686:	687a      	ldr	r2, [r7, #4]
 8018688:	7c92      	ldrb	r2, [r2, #18]
 801868a:	4d40      	ldr	r5, [pc, #256]	; (801878c <RegionEU868RxConfig+0x1d8>)
 801868c:	1879      	adds	r1, r7, r1
 801868e:	7808      	ldrb	r0, [r1, #0]
 8018690:	9209      	str	r2, [sp, #36]	; 0x24
 8018692:	2200      	movs	r2, #0
 8018694:	9208      	str	r2, [sp, #32]
 8018696:	2200      	movs	r2, #0
 8018698:	9207      	str	r2, [sp, #28]
 801869a:	2200      	movs	r2, #0
 801869c:	9206      	str	r2, [sp, #24]
 801869e:	2201      	movs	r2, #1
 80186a0:	9205      	str	r2, [sp, #20]
 80186a2:	2200      	movs	r2, #0
 80186a4:	9204      	str	r2, [sp, #16]
 80186a6:	2200      	movs	r2, #0
 80186a8:	9203      	str	r2, [sp, #12]
 80186aa:	9302      	str	r3, [sp, #8]
 80186ac:	2305      	movs	r3, #5
 80186ae:	9301      	str	r3, [sp, #4]
 80186b0:	4b37      	ldr	r3, [pc, #220]	; (8018790 <RegionEU868RxConfig+0x1dc>)
 80186b2:	9300      	str	r3, [sp, #0]
 80186b4:	2300      	movs	r3, #0
 80186b6:	0032      	movs	r2, r6
 80186b8:	0029      	movs	r1, r5
 80186ba:	47a0      	blx	r4
 80186bc:	e029      	b.n	8018712 <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 80186be:	2117      	movs	r1, #23
 80186c0:	187b      	adds	r3, r7, r1
 80186c2:	2201      	movs	r2, #1
 80186c4:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80186c6:	4b2e      	ldr	r3, [pc, #184]	; (8018780 <RegionEU868RxConfig+0x1cc>)
 80186c8:	699c      	ldr	r4, [r3, #24]
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	789b      	ldrb	r3, [r3, #2]
 80186ce:	001e      	movs	r6, r3
 80186d0:	230e      	movs	r3, #14
 80186d2:	18fb      	adds	r3, r7, r3
 80186d4:	2500      	movs	r5, #0
 80186d6:	575d      	ldrsb	r5, [r3, r5]
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	689b      	ldr	r3, [r3, #8]
 80186dc:	b29b      	uxth	r3, r3
 80186de:	687a      	ldr	r2, [r7, #4]
 80186e0:	7c92      	ldrb	r2, [r2, #18]
 80186e2:	1879      	adds	r1, r7, r1
 80186e4:	7808      	ldrb	r0, [r1, #0]
 80186e6:	9209      	str	r2, [sp, #36]	; 0x24
 80186e8:	2201      	movs	r2, #1
 80186ea:	9208      	str	r2, [sp, #32]
 80186ec:	2200      	movs	r2, #0
 80186ee:	9207      	str	r2, [sp, #28]
 80186f0:	2200      	movs	r2, #0
 80186f2:	9206      	str	r2, [sp, #24]
 80186f4:	2200      	movs	r2, #0
 80186f6:	9205      	str	r2, [sp, #20]
 80186f8:	2200      	movs	r2, #0
 80186fa:	9204      	str	r2, [sp, #16]
 80186fc:	2200      	movs	r2, #0
 80186fe:	9203      	str	r2, [sp, #12]
 8018700:	9302      	str	r3, [sp, #8]
 8018702:	2308      	movs	r3, #8
 8018704:	9301      	str	r3, [sp, #4]
 8018706:	2300      	movs	r3, #0
 8018708:	9300      	str	r3, [sp, #0]
 801870a:	2301      	movs	r3, #1
 801870c:	002a      	movs	r2, r5
 801870e:	0031      	movs	r1, r6
 8018710:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	7c5b      	ldrb	r3, [r3, #17]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d009      	beq.n	801872e <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801871a:	230f      	movs	r3, #15
 801871c:	18fb      	adds	r3, r7, r3
 801871e:	2200      	movs	r2, #0
 8018720:	569a      	ldrsb	r2, [r3, r2]
 8018722:	2316      	movs	r3, #22
 8018724:	18fb      	adds	r3, r7, r3
 8018726:	491b      	ldr	r1, [pc, #108]	; (8018794 <RegionEU868RxConfig+0x1e0>)
 8018728:	5c8a      	ldrb	r2, [r1, r2]
 801872a:	701a      	strb	r2, [r3, #0]
 801872c:	e008      	b.n	8018740 <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801872e:	230f      	movs	r3, #15
 8018730:	18fb      	adds	r3, r7, r3
 8018732:	2200      	movs	r2, #0
 8018734:	569a      	ldrsb	r2, [r3, r2]
 8018736:	2316      	movs	r3, #22
 8018738:	18fb      	adds	r3, r7, r3
 801873a:	4917      	ldr	r1, [pc, #92]	; (8018798 <RegionEU868RxConfig+0x1e4>)
 801873c:	5c8a      	ldrb	r2, [r1, r2]
 801873e:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018740:	4b0f      	ldr	r3, [pc, #60]	; (8018780 <RegionEU868RxConfig+0x1cc>)
 8018742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018744:	2216      	movs	r2, #22
 8018746:	18ba      	adds	r2, r7, r2
 8018748:	7812      	ldrb	r2, [r2, #0]
 801874a:	320d      	adds	r2, #13
 801874c:	b2d1      	uxtb	r1, r2
 801874e:	2217      	movs	r2, #23
 8018750:	18ba      	adds	r2, r7, r2
 8018752:	7812      	ldrb	r2, [r2, #0]
 8018754:	0010      	movs	r0, r2
 8018756:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	7cd8      	ldrb	r0, [r3, #19]
 801875c:	240f      	movs	r4, #15
 801875e:	193b      	adds	r3, r7, r4
 8018760:	2200      	movs	r2, #0
 8018762:	569a      	ldrsb	r2, [r3, r2]
 8018764:	693b      	ldr	r3, [r7, #16]
 8018766:	0019      	movs	r1, r3
 8018768:	f7ff fa32 	bl	8017bd0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801876c:	683b      	ldr	r3, [r7, #0]
 801876e:	193a      	adds	r2, r7, r4
 8018770:	7812      	ldrb	r2, [r2, #0]
 8018772:	701a      	strb	r2, [r3, #0]
    return true;
 8018774:	2301      	movs	r3, #1
}
 8018776:	0018      	movs	r0, r3
 8018778:	46bd      	mov	sp, r7
 801877a:	b007      	add	sp, #28
 801877c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801877e:	46c0      	nop			; (mov r8, r8)
 8018780:	0801f0bc 	.word	0x0801f0bc
 8018784:	20000cd8 	.word	0x20000cd8
 8018788:	0801ef38 	.word	0x0801ef38
 801878c:	0000c350 	.word	0x0000c350
 8018790:	00014585 	.word	0x00014585
 8018794:	0801ef68 	.word	0x0801ef68
 8018798:	0801ef60 	.word	0x0801ef60

0801879c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801879c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801879e:	b093      	sub	sp, #76	; 0x4c
 80187a0:	af0a      	add	r7, sp, #40	; 0x28
 80187a2:	60f8      	str	r0, [r7, #12]
 80187a4:	60b9      	str	r1, [r7, #8]
 80187a6:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	785b      	ldrb	r3, [r3, #1]
 80187ac:	b25b      	sxtb	r3, r3
 80187ae:	001a      	movs	r2, r3
 80187b0:	4b6b      	ldr	r3, [pc, #428]	; (8018960 <RegionEU868TxConfig+0x1c4>)
 80187b2:	5c9a      	ldrb	r2, [r3, r2]
 80187b4:	251e      	movs	r5, #30
 80187b6:	197b      	adds	r3, r7, r5
 80187b8:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	2002      	movs	r0, #2
 80187be:	5618      	ldrsb	r0, [r3, r0]
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	781b      	ldrb	r3, [r3, #0]
 80187c4:	0019      	movs	r1, r3
 80187c6:	4a67      	ldr	r2, [pc, #412]	; (8018964 <RegionEU868TxConfig+0x1c8>)
 80187c8:	000b      	movs	r3, r1
 80187ca:	005b      	lsls	r3, r3, #1
 80187cc:	185b      	adds	r3, r3, r1
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	18d3      	adds	r3, r2, r3
 80187d2:	3309      	adds	r3, #9
 80187d4:	781b      	ldrb	r3, [r3, #0]
 80187d6:	001c      	movs	r4, r3
 80187d8:	4a62      	ldr	r2, [pc, #392]	; (8018964 <RegionEU868TxConfig+0x1c8>)
 80187da:	21c2      	movs	r1, #194	; 0xc2
 80187dc:	0023      	movs	r3, r4
 80187de:	009b      	lsls	r3, r3, #2
 80187e0:	191b      	adds	r3, r3, r4
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	18d3      	adds	r3, r2, r3
 80187e6:	185b      	adds	r3, r3, r1
 80187e8:	2100      	movs	r1, #0
 80187ea:	5659      	ldrsb	r1, [r3, r1]
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	2201      	movs	r2, #1
 80187f0:	569a      	ldrsb	r2, [r3, r2]
 80187f2:	261d      	movs	r6, #29
 80187f4:	19bc      	adds	r4, r7, r6
 80187f6:	4b5c      	ldr	r3, [pc, #368]	; (8018968 <RegionEU868TxConfig+0x1cc>)
 80187f8:	f7ff fa7c 	bl	8017cf4 <LimitTxPower>
 80187fc:	0003      	movs	r3, r0
 80187fe:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	785b      	ldrb	r3, [r3, #1]
 8018804:	b25b      	sxtb	r3, r3
 8018806:	0018      	movs	r0, r3
 8018808:	f7ff fa56 	bl	8017cb8 <GetBandwidth>
 801880c:	0003      	movs	r3, r0
 801880e:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8018810:	2017      	movs	r0, #23
 8018812:	183b      	adds	r3, r7, r0
 8018814:	2200      	movs	r2, #0
 8018816:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	6859      	ldr	r1, [r3, #4]
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	689a      	ldr	r2, [r3, #8]
 8018820:	183c      	adds	r4, r7, r0
 8018822:	19bb      	adds	r3, r7, r6
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	b25b      	sxtb	r3, r3
 8018828:	0018      	movs	r0, r3
 801882a:	f7ff f841 	bl	80178b0 <RegionCommonComputeTxPower>
 801882e:	0003      	movs	r3, r0
 8018830:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8018832:	4b4e      	ldr	r3, [pc, #312]	; (801896c <RegionEU868TxConfig+0x1d0>)
 8018834:	68da      	ldr	r2, [r3, #12]
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	781b      	ldrb	r3, [r3, #0]
 801883a:	0018      	movs	r0, r3
 801883c:	4949      	ldr	r1, [pc, #292]	; (8018964 <RegionEU868TxConfig+0x1c8>)
 801883e:	0003      	movs	r3, r0
 8018840:	005b      	lsls	r3, r3, #1
 8018842:	181b      	adds	r3, r3, r0
 8018844:	009b      	lsls	r3, r3, #2
 8018846:	585b      	ldr	r3, [r3, r1]
 8018848:	0018      	movs	r0, r3
 801884a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	785b      	ldrb	r3, [r3, #1]
 8018850:	b25b      	sxtb	r3, r3
 8018852:	2b07      	cmp	r3, #7
 8018854:	d12e      	bne.n	80188b4 <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018856:	231f      	movs	r3, #31
 8018858:	18fb      	adds	r3, r7, r3
 801885a:	2200      	movs	r2, #0
 801885c:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801885e:	4b43      	ldr	r3, [pc, #268]	; (801896c <RegionEU868TxConfig+0x1d0>)
 8018860:	69dc      	ldr	r4, [r3, #28]
 8018862:	197b      	adds	r3, r7, r5
 8018864:	2200      	movs	r2, #0
 8018866:	569a      	ldrsb	r2, [r3, r2]
 8018868:	0013      	movs	r3, r2
 801886a:	015b      	lsls	r3, r3, #5
 801886c:	1a9b      	subs	r3, r3, r2
 801886e:	009b      	lsls	r3, r3, #2
 8018870:	189b      	adds	r3, r3, r2
 8018872:	00db      	lsls	r3, r3, #3
 8018874:	001e      	movs	r6, r3
 8018876:	69ba      	ldr	r2, [r7, #24]
 8018878:	4d3d      	ldr	r5, [pc, #244]	; (8018970 <RegionEU868TxConfig+0x1d4>)
 801887a:	2017      	movs	r0, #23
 801887c:	183b      	adds	r3, r7, r0
 801887e:	2100      	movs	r1, #0
 8018880:	5659      	ldrsb	r1, [r3, r1]
 8018882:	231f      	movs	r3, #31
 8018884:	18fb      	adds	r3, r7, r3
 8018886:	7818      	ldrb	r0, [r3, #0]
 8018888:	23fa      	movs	r3, #250	; 0xfa
 801888a:	011b      	lsls	r3, r3, #4
 801888c:	9308      	str	r3, [sp, #32]
 801888e:	2300      	movs	r3, #0
 8018890:	9307      	str	r3, [sp, #28]
 8018892:	2300      	movs	r3, #0
 8018894:	9306      	str	r3, [sp, #24]
 8018896:	2300      	movs	r3, #0
 8018898:	9305      	str	r3, [sp, #20]
 801889a:	2301      	movs	r3, #1
 801889c:	9304      	str	r3, [sp, #16]
 801889e:	2300      	movs	r3, #0
 80188a0:	9303      	str	r3, [sp, #12]
 80188a2:	2305      	movs	r3, #5
 80188a4:	9302      	str	r3, [sp, #8]
 80188a6:	2300      	movs	r3, #0
 80188a8:	9301      	str	r3, [sp, #4]
 80188aa:	9600      	str	r6, [sp, #0]
 80188ac:	0013      	movs	r3, r2
 80188ae:	002a      	movs	r2, r5
 80188b0:	47a0      	blx	r4
 80188b2:	e025      	b.n	8018900 <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 80188b4:	201f      	movs	r0, #31
 80188b6:	183b      	adds	r3, r7, r0
 80188b8:	2201      	movs	r2, #1
 80188ba:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80188bc:	4b2b      	ldr	r3, [pc, #172]	; (801896c <RegionEU868TxConfig+0x1d0>)
 80188be:	69dc      	ldr	r4, [r3, #28]
 80188c0:	231e      	movs	r3, #30
 80188c2:	18fb      	adds	r3, r7, r3
 80188c4:	781b      	ldrb	r3, [r3, #0]
 80188c6:	b25b      	sxtb	r3, r3
 80188c8:	69bd      	ldr	r5, [r7, #24]
 80188ca:	2217      	movs	r2, #23
 80188cc:	18ba      	adds	r2, r7, r2
 80188ce:	2100      	movs	r1, #0
 80188d0:	5651      	ldrsb	r1, [r2, r1]
 80188d2:	183a      	adds	r2, r7, r0
 80188d4:	7810      	ldrb	r0, [r2, #0]
 80188d6:	22fa      	movs	r2, #250	; 0xfa
 80188d8:	0112      	lsls	r2, r2, #4
 80188da:	9208      	str	r2, [sp, #32]
 80188dc:	2200      	movs	r2, #0
 80188de:	9207      	str	r2, [sp, #28]
 80188e0:	2200      	movs	r2, #0
 80188e2:	9206      	str	r2, [sp, #24]
 80188e4:	2200      	movs	r2, #0
 80188e6:	9205      	str	r2, [sp, #20]
 80188e8:	2201      	movs	r2, #1
 80188ea:	9204      	str	r2, [sp, #16]
 80188ec:	2200      	movs	r2, #0
 80188ee:	9203      	str	r2, [sp, #12]
 80188f0:	2208      	movs	r2, #8
 80188f2:	9202      	str	r2, [sp, #8]
 80188f4:	2201      	movs	r2, #1
 80188f6:	9201      	str	r2, [sp, #4]
 80188f8:	9300      	str	r3, [sp, #0]
 80188fa:	002b      	movs	r3, r5
 80188fc:	2200      	movs	r2, #0
 80188fe:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	781b      	ldrb	r3, [r3, #0]
 8018904:	0019      	movs	r1, r3
 8018906:	4a17      	ldr	r2, [pc, #92]	; (8018964 <RegionEU868TxConfig+0x1c8>)
 8018908:	000b      	movs	r3, r1
 801890a:	005b      	lsls	r3, r3, #1
 801890c:	185b      	adds	r3, r3, r1
 801890e:	009b      	lsls	r3, r3, #2
 8018910:	589a      	ldr	r2, [r3, r2]
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	785b      	ldrb	r3, [r3, #1]
 8018916:	b25b      	sxtb	r3, r3
 8018918:	0019      	movs	r1, r3
 801891a:	0010      	movs	r0, r2
 801891c:	f7ff f970 	bl	8017c00 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	2201      	movs	r2, #1
 8018924:	569a      	ldrsb	r2, [r3, r2]
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	899b      	ldrh	r3, [r3, #12]
 801892a:	0019      	movs	r1, r3
 801892c:	0010      	movs	r0, r2
 801892e:	f7ff fa81 	bl	8017e34 <GetTimeOnAir>
 8018932:	0002      	movs	r2, r0
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018938:	4b0c      	ldr	r3, [pc, #48]	; (801896c <RegionEU868TxConfig+0x1d0>)
 801893a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801893c:	68fa      	ldr	r2, [r7, #12]
 801893e:	8992      	ldrh	r2, [r2, #12]
 8018940:	b2d1      	uxtb	r1, r2
 8018942:	221f      	movs	r2, #31
 8018944:	18ba      	adds	r2, r7, r2
 8018946:	7812      	ldrb	r2, [r2, #0]
 8018948:	0010      	movs	r0, r2
 801894a:	4798      	blx	r3

    *txPower = txPowerLimited;
 801894c:	68bb      	ldr	r3, [r7, #8]
 801894e:	221d      	movs	r2, #29
 8018950:	18ba      	adds	r2, r7, r2
 8018952:	7812      	ldrb	r2, [r2, #0]
 8018954:	701a      	strb	r2, [r3, #0]
    return true;
 8018956:	2301      	movs	r3, #1
}
 8018958:	0018      	movs	r0, r3
 801895a:	46bd      	mov	sp, r7
 801895c:	b009      	add	sp, #36	; 0x24
 801895e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018960:	0801ef38 	.word	0x0801ef38
 8018964:	20000cd8 	.word	0x20000cd8
 8018968:	20000e10 	.word	0x20000e10
 801896c:	0801f0bc 	.word	0x0801f0bc
 8018970:	000061a8 	.word	0x000061a8

08018974 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018976:	b093      	sub	sp, #76	; 0x4c
 8018978:	af00      	add	r7, sp, #0
 801897a:	60f8      	str	r0, [r7, #12]
 801897c:	60b9      	str	r1, [r7, #8]
 801897e:	607a      	str	r2, [r7, #4]
 8018980:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018982:	2347      	movs	r3, #71	; 0x47
 8018984:	18fb      	adds	r3, r7, r3
 8018986:	2207      	movs	r2, #7
 8018988:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801898a:	233c      	movs	r3, #60	; 0x3c
 801898c:	18fb      	adds	r3, r7, r3
 801898e:	0018      	movs	r0, r3
 8018990:	2306      	movs	r3, #6
 8018992:	001a      	movs	r2, r3
 8018994:	2100      	movs	r1, #0
 8018996:	f005 fa20 	bl	801ddda <memset>
    uint8_t nextIndex = 0;
 801899a:	2344      	movs	r3, #68	; 0x44
 801899c:	18fb      	adds	r3, r7, r3
 801899e:	2200      	movs	r2, #0
 80189a0:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 80189a2:	2346      	movs	r3, #70	; 0x46
 80189a4:	18fb      	adds	r3, r7, r3
 80189a6:	2200      	movs	r2, #0
 80189a8:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 80189aa:	233a      	movs	r3, #58	; 0x3a
 80189ac:	18fb      	adds	r3, r7, r3
 80189ae:	2200      	movs	r2, #0
 80189b0:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80189b2:	e098      	b.n	8018ae6 <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	685a      	ldr	r2, [r3, #4]
 80189b8:	2546      	movs	r5, #70	; 0x46
 80189ba:	197b      	adds	r3, r7, r5
 80189bc:	781b      	ldrb	r3, [r3, #0]
 80189be:	18d3      	adds	r3, r2, r3
 80189c0:	2644      	movs	r6, #68	; 0x44
 80189c2:	19bc      	adds	r4, r7, r6
 80189c4:	203c      	movs	r0, #60	; 0x3c
 80189c6:	183a      	adds	r2, r7, r0
 80189c8:	0011      	movs	r1, r2
 80189ca:	0018      	movs	r0, r3
 80189cc:	f7fe fe08 	bl	80175e0 <RegionCommonParseLinkAdrReq>
 80189d0:	0003      	movs	r3, r0
 80189d2:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 80189d4:	0032      	movs	r2, r6
 80189d6:	18bb      	adds	r3, r7, r2
 80189d8:	781b      	ldrb	r3, [r3, #0]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d100      	bne.n	80189e0 <RegionEU868LinkAdrReq+0x6c>
 80189de:	e08b      	b.n	8018af8 <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80189e0:	197b      	adds	r3, r7, r5
 80189e2:	1979      	adds	r1, r7, r5
 80189e4:	18ba      	adds	r2, r7, r2
 80189e6:	7809      	ldrb	r1, [r1, #0]
 80189e8:	7812      	ldrb	r2, [r2, #0]
 80189ea:	188a      	adds	r2, r1, r2
 80189ec:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80189ee:	2147      	movs	r1, #71	; 0x47
 80189f0:	187b      	adds	r3, r7, r1
 80189f2:	2207      	movs	r2, #7
 80189f4:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80189f6:	203c      	movs	r0, #60	; 0x3c
 80189f8:	183b      	adds	r3, r7, r0
 80189fa:	889a      	ldrh	r2, [r3, #4]
 80189fc:	243a      	movs	r4, #58	; 0x3a
 80189fe:	193b      	adds	r3, r7, r4
 8018a00:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8018a02:	183b      	adds	r3, r7, r0
 8018a04:	78db      	ldrb	r3, [r3, #3]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d10a      	bne.n	8018a20 <RegionEU868LinkAdrReq+0xac>
 8018a0a:	193b      	adds	r3, r7, r4
 8018a0c:	881b      	ldrh	r3, [r3, #0]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d106      	bne.n	8018a20 <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 8018a12:	187b      	adds	r3, r7, r1
 8018a14:	187a      	adds	r2, r7, r1
 8018a16:	7812      	ldrb	r2, [r2, #0]
 8018a18:	2101      	movs	r1, #1
 8018a1a:	438a      	bics	r2, r1
 8018a1c:	701a      	strb	r2, [r3, #0]
 8018a1e:	e062      	b.n	8018ae6 <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018a20:	223c      	movs	r2, #60	; 0x3c
 8018a22:	18bb      	adds	r3, r7, r2
 8018a24:	78db      	ldrb	r3, [r3, #3]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d003      	beq.n	8018a32 <RegionEU868LinkAdrReq+0xbe>
 8018a2a:	18bb      	adds	r3, r7, r2
 8018a2c:	78db      	ldrb	r3, [r3, #3]
 8018a2e:	2b05      	cmp	r3, #5
 8018a30:	d904      	bls.n	8018a3c <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018a32:	233c      	movs	r3, #60	; 0x3c
 8018a34:	18fb      	adds	r3, r7, r3
 8018a36:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018a38:	2b06      	cmp	r3, #6
 8018a3a:	d907      	bls.n	8018a4c <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018a3c:	2247      	movs	r2, #71	; 0x47
 8018a3e:	18bb      	adds	r3, r7, r2
 8018a40:	18ba      	adds	r2, r7, r2
 8018a42:	7812      	ldrb	r2, [r2, #0]
 8018a44:	2101      	movs	r1, #1
 8018a46:	438a      	bics	r2, r1
 8018a48:	701a      	strb	r2, [r3, #0]
 8018a4a:	e04c      	b.n	8018ae6 <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018a4c:	2345      	movs	r3, #69	; 0x45
 8018a4e:	18fb      	adds	r3, r7, r3
 8018a50:	2200      	movs	r2, #0
 8018a52:	701a      	strb	r2, [r3, #0]
 8018a54:	e042      	b.n	8018adc <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018a56:	233c      	movs	r3, #60	; 0x3c
 8018a58:	18fb      	adds	r3, r7, r3
 8018a5a:	78db      	ldrb	r3, [r3, #3]
 8018a5c:	2b06      	cmp	r3, #6
 8018a5e:	d11a      	bne.n	8018a96 <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8018a60:	2045      	movs	r0, #69	; 0x45
 8018a62:	183b      	adds	r3, r7, r0
 8018a64:	781a      	ldrb	r2, [r3, #0]
 8018a66:	496d      	ldr	r1, [pc, #436]	; (8018c1c <RegionEU868LinkAdrReq+0x2a8>)
 8018a68:	0013      	movs	r3, r2
 8018a6a:	005b      	lsls	r3, r3, #1
 8018a6c:	189b      	adds	r3, r3, r2
 8018a6e:	009b      	lsls	r3, r3, #2
 8018a70:	585b      	ldr	r3, [r3, r1]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d02c      	beq.n	8018ad0 <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 8018a76:	183b      	adds	r3, r7, r0
 8018a78:	781b      	ldrb	r3, [r3, #0]
 8018a7a:	2201      	movs	r2, #1
 8018a7c:	409a      	lsls	r2, r3
 8018a7e:	0013      	movs	r3, r2
 8018a80:	b21a      	sxth	r2, r3
 8018a82:	213a      	movs	r1, #58	; 0x3a
 8018a84:	187b      	adds	r3, r7, r1
 8018a86:	881b      	ldrh	r3, [r3, #0]
 8018a88:	b21b      	sxth	r3, r3
 8018a8a:	4313      	orrs	r3, r2
 8018a8c:	b21b      	sxth	r3, r3
 8018a8e:	b29a      	uxth	r2, r3
 8018a90:	187b      	adds	r3, r7, r1
 8018a92:	801a      	strh	r2, [r3, #0]
 8018a94:	e01c      	b.n	8018ad0 <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018a96:	233a      	movs	r3, #58	; 0x3a
 8018a98:	18fb      	adds	r3, r7, r3
 8018a9a:	881b      	ldrh	r3, [r3, #0]
 8018a9c:	001a      	movs	r2, r3
 8018a9e:	2145      	movs	r1, #69	; 0x45
 8018aa0:	187b      	adds	r3, r7, r1
 8018aa2:	781b      	ldrb	r3, [r3, #0]
 8018aa4:	411a      	asrs	r2, r3
 8018aa6:	0013      	movs	r3, r2
 8018aa8:	2201      	movs	r2, #1
 8018aaa:	4013      	ands	r3, r2
 8018aac:	d010      	beq.n	8018ad0 <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018aae:	187b      	adds	r3, r7, r1
 8018ab0:	781a      	ldrb	r2, [r3, #0]
 8018ab2:	495a      	ldr	r1, [pc, #360]	; (8018c1c <RegionEU868LinkAdrReq+0x2a8>)
 8018ab4:	0013      	movs	r3, r2
 8018ab6:	005b      	lsls	r3, r3, #1
 8018ab8:	189b      	adds	r3, r3, r2
 8018aba:	009b      	lsls	r3, r3, #2
 8018abc:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d106      	bne.n	8018ad0 <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8018ac2:	2247      	movs	r2, #71	; 0x47
 8018ac4:	18bb      	adds	r3, r7, r2
 8018ac6:	18ba      	adds	r2, r7, r2
 8018ac8:	7812      	ldrb	r2, [r2, #0]
 8018aca:	2101      	movs	r1, #1
 8018acc:	438a      	bics	r2, r1
 8018ace:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018ad0:	2145      	movs	r1, #69	; 0x45
 8018ad2:	187b      	adds	r3, r7, r1
 8018ad4:	781a      	ldrb	r2, [r3, #0]
 8018ad6:	187b      	adds	r3, r7, r1
 8018ad8:	3201      	adds	r2, #1
 8018ada:	701a      	strb	r2, [r3, #0]
 8018adc:	2345      	movs	r3, #69	; 0x45
 8018ade:	18fb      	adds	r3, r7, r3
 8018ae0:	781b      	ldrb	r3, [r3, #0]
 8018ae2:	2b0f      	cmp	r3, #15
 8018ae4:	d9b7      	bls.n	8018a56 <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	7a1b      	ldrb	r3, [r3, #8]
 8018aea:	2246      	movs	r2, #70	; 0x46
 8018aec:	18ba      	adds	r2, r7, r2
 8018aee:	7812      	ldrb	r2, [r2, #0]
 8018af0:	429a      	cmp	r2, r3
 8018af2:	d200      	bcs.n	8018af6 <RegionEU868LinkAdrReq+0x182>
 8018af4:	e75e      	b.n	80189b4 <RegionEU868LinkAdrReq+0x40>
 8018af6:	e000      	b.n	8018afa <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 8018af8:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018afa:	2134      	movs	r1, #52	; 0x34
 8018afc:	187b      	adds	r3, r7, r1
 8018afe:	2202      	movs	r2, #2
 8018b00:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	7a5a      	ldrb	r2, [r3, #9]
 8018b06:	187b      	adds	r3, r7, r1
 8018b08:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018b0a:	187b      	adds	r3, r7, r1
 8018b0c:	0018      	movs	r0, r3
 8018b0e:	f7ff f9ef 	bl	8017ef0 <RegionEU868GetPhyParam>
 8018b12:	0003      	movs	r3, r0
 8018b14:	001a      	movs	r2, r3
 8018b16:	2030      	movs	r0, #48	; 0x30
 8018b18:	183b      	adds	r3, r7, r0
 8018b1a:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8018b1c:	2110      	movs	r1, #16
 8018b1e:	187b      	adds	r3, r7, r1
 8018b20:	2447      	movs	r4, #71	; 0x47
 8018b22:	193a      	adds	r2, r7, r4
 8018b24:	7812      	ldrb	r2, [r2, #0]
 8018b26:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	7a9a      	ldrb	r2, [r3, #10]
 8018b2c:	187b      	adds	r3, r7, r1
 8018b2e:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018b30:	253c      	movs	r5, #60	; 0x3c
 8018b32:	197b      	adds	r3, r7, r5
 8018b34:	2201      	movs	r2, #1
 8018b36:	569a      	ldrsb	r2, [r3, r2]
 8018b38:	187b      	adds	r3, r7, r1
 8018b3a:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018b3c:	197b      	adds	r3, r7, r5
 8018b3e:	2202      	movs	r2, #2
 8018b40:	569a      	ldrsb	r2, [r3, r2]
 8018b42:	187b      	adds	r3, r7, r1
 8018b44:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018b46:	197b      	adds	r3, r7, r5
 8018b48:	781a      	ldrb	r2, [r3, #0]
 8018b4a:	187b      	adds	r3, r7, r1
 8018b4c:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	220b      	movs	r2, #11
 8018b52:	569a      	ldrsb	r2, [r3, r2]
 8018b54:	187b      	adds	r3, r7, r1
 8018b56:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	220c      	movs	r2, #12
 8018b5c:	569a      	ldrsb	r2, [r3, r2]
 8018b5e:	187b      	adds	r3, r7, r1
 8018b60:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	7b5b      	ldrb	r3, [r3, #13]
 8018b66:	b25a      	sxtb	r2, r3
 8018b68:	187b      	adds	r3, r7, r1
 8018b6a:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018b6c:	187b      	adds	r3, r7, r1
 8018b6e:	2210      	movs	r2, #16
 8018b70:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018b72:	187b      	adds	r3, r7, r1
 8018b74:	223a      	movs	r2, #58	; 0x3a
 8018b76:	18ba      	adds	r2, r7, r2
 8018b78:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018b7a:	183b      	adds	r3, r7, r0
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	b25a      	sxtb	r2, r3
 8018b80:	0008      	movs	r0, r1
 8018b82:	183b      	adds	r3, r7, r0
 8018b84:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018b86:	183b      	adds	r3, r7, r0
 8018b88:	2207      	movs	r2, #7
 8018b8a:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8018b8c:	183b      	adds	r3, r7, r0
 8018b8e:	4a23      	ldr	r2, [pc, #140]	; (8018c1c <RegionEU868LinkAdrReq+0x2a8>)
 8018b90:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018b92:	183b      	adds	r3, r7, r0
 8018b94:	2207      	movs	r2, #7
 8018b96:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018b98:	183b      	adds	r3, r7, r0
 8018b9a:	2200      	movs	r2, #0
 8018b9c:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018b9e:	183b      	adds	r3, r7, r0
 8018ba0:	68fa      	ldr	r2, [r7, #12]
 8018ba2:	6812      	ldr	r2, [r2, #0]
 8018ba4:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018ba6:	0026      	movs	r6, r4
 8018ba8:	193c      	adds	r4, r7, r4
 8018baa:	0029      	movs	r1, r5
 8018bac:	187d      	adds	r5, r7, r1
 8018bae:	187b      	adds	r3, r7, r1
 8018bb0:	1c9a      	adds	r2, r3, #2
 8018bb2:	187b      	adds	r3, r7, r1
 8018bb4:	1c59      	adds	r1, r3, #1
 8018bb6:	1838      	adds	r0, r7, r0
 8018bb8:	002b      	movs	r3, r5
 8018bba:	f7fe fd66 	bl	801768a <RegionCommonLinkAdrReqVerifyParams>
 8018bbe:	0003      	movs	r3, r0
 8018bc0:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018bc2:	19bb      	adds	r3, r7, r6
 8018bc4:	781b      	ldrb	r3, [r3, #0]
 8018bc6:	2b07      	cmp	r3, #7
 8018bc8:	d10c      	bne.n	8018be4 <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8018bca:	4b15      	ldr	r3, [pc, #84]	; (8018c20 <RegionEU868LinkAdrReq+0x2ac>)
 8018bcc:	2202      	movs	r2, #2
 8018bce:	2100      	movs	r1, #0
 8018bd0:	0018      	movs	r0, r3
 8018bd2:	f000 fbe9 	bl	80193a8 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8018bd6:	223a      	movs	r2, #58	; 0x3a
 8018bd8:	18bb      	adds	r3, r7, r2
 8018bda:	8819      	ldrh	r1, [r3, #0]
 8018bdc:	4a0f      	ldr	r2, [pc, #60]	; (8018c1c <RegionEU868LinkAdrReq+0x2a8>)
 8018bde:	239c      	movs	r3, #156	; 0x9c
 8018be0:	005b      	lsls	r3, r3, #1
 8018be2:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018be4:	213c      	movs	r1, #60	; 0x3c
 8018be6:	187b      	adds	r3, r7, r1
 8018be8:	2201      	movs	r2, #1
 8018bea:	569a      	ldrsb	r2, [r3, r2]
 8018bec:	68bb      	ldr	r3, [r7, #8]
 8018bee:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018bf0:	187b      	adds	r3, r7, r1
 8018bf2:	2202      	movs	r2, #2
 8018bf4:	569a      	ldrsb	r2, [r3, r2]
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018bfa:	187b      	adds	r3, r7, r1
 8018bfc:	781a      	ldrb	r2, [r3, #0]
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018c04:	2246      	movs	r2, #70	; 0x46
 8018c06:	18ba      	adds	r2, r7, r2
 8018c08:	7812      	ldrb	r2, [r2, #0]
 8018c0a:	701a      	strb	r2, [r3, #0]

    return status;
 8018c0c:	2347      	movs	r3, #71	; 0x47
 8018c0e:	18fb      	adds	r3, r7, r3
 8018c10:	781b      	ldrb	r3, [r3, #0]
}
 8018c12:	0018      	movs	r0, r3
 8018c14:	46bd      	mov	sp, r7
 8018c16:	b013      	add	sp, #76	; 0x4c
 8018c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c1a:	46c0      	nop			; (mov r8, r8)
 8018c1c:	20000cd8 	.word	0x20000cd8
 8018c20:	20000e10 	.word	0x20000e10

08018c24 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018c24:	b590      	push	{r4, r7, lr}
 8018c26:	b085      	sub	sp, #20
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018c2c:	240f      	movs	r4, #15
 8018c2e:	193b      	adds	r3, r7, r4
 8018c30:	2207      	movs	r2, #7
 8018c32:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018c34:	210e      	movs	r1, #14
 8018c36:	187b      	adds	r3, r7, r1
 8018c38:	2200      	movs	r2, #0
 8018c3a:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	685b      	ldr	r3, [r3, #4]
 8018c40:	187a      	adds	r2, r7, r1
 8018c42:	0011      	movs	r1, r2
 8018c44:	0018      	movs	r0, r3
 8018c46:	f7ff f87d 	bl	8017d44 <VerifyRfFreq>
 8018c4a:	0003      	movs	r3, r0
 8018c4c:	001a      	movs	r2, r3
 8018c4e:	2301      	movs	r3, #1
 8018c50:	4053      	eors	r3, r2
 8018c52:	b2db      	uxtb	r3, r3
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d005      	beq.n	8018c64 <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 8018c58:	193b      	adds	r3, r7, r4
 8018c5a:	193a      	adds	r2, r7, r4
 8018c5c:	7812      	ldrb	r2, [r2, #0]
 8018c5e:	2101      	movs	r1, #1
 8018c60:	438a      	bics	r2, r1
 8018c62:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	b25b      	sxtb	r3, r3
 8018c6a:	2207      	movs	r2, #7
 8018c6c:	2100      	movs	r1, #0
 8018c6e:	0018      	movs	r0, r3
 8018c70:	f7fe fad9 	bl	8017226 <RegionCommonValueInRange>
 8018c74:	1e03      	subs	r3, r0, #0
 8018c76:	d106      	bne.n	8018c86 <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 8018c78:	220f      	movs	r2, #15
 8018c7a:	18bb      	adds	r3, r7, r2
 8018c7c:	18ba      	adds	r2, r7, r2
 8018c7e:	7812      	ldrb	r2, [r2, #0]
 8018c80:	2102      	movs	r1, #2
 8018c82:	438a      	bics	r2, r1
 8018c84:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	785b      	ldrb	r3, [r3, #1]
 8018c8a:	b25b      	sxtb	r3, r3
 8018c8c:	2205      	movs	r2, #5
 8018c8e:	2100      	movs	r1, #0
 8018c90:	0018      	movs	r0, r3
 8018c92:	f7fe fac8 	bl	8017226 <RegionCommonValueInRange>
 8018c96:	1e03      	subs	r3, r0, #0
 8018c98:	d106      	bne.n	8018ca8 <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018c9a:	220f      	movs	r2, #15
 8018c9c:	18bb      	adds	r3, r7, r2
 8018c9e:	18ba      	adds	r2, r7, r2
 8018ca0:	7812      	ldrb	r2, [r2, #0]
 8018ca2:	2104      	movs	r1, #4
 8018ca4:	438a      	bics	r2, r1
 8018ca6:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8018ca8:	230f      	movs	r3, #15
 8018caa:	18fb      	adds	r3, r7, r3
 8018cac:	781b      	ldrb	r3, [r3, #0]
}
 8018cae:	0018      	movs	r0, r3
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	b005      	add	sp, #20
 8018cb4:	bd90      	pop	{r4, r7, pc}

08018cb6 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018cb6:	b590      	push	{r4, r7, lr}
 8018cb8:	b087      	sub	sp, #28
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018cbe:	2417      	movs	r4, #23
 8018cc0:	193b      	adds	r3, r7, r4
 8018cc2:	2203      	movs	r2, #3
 8018cc4:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d118      	bne.n	8018d02 <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	791b      	ldrb	r3, [r3, #4]
 8018cd4:	b25b      	sxtb	r3, r3
 8018cd6:	b2da      	uxtb	r2, r3
 8018cd8:	2108      	movs	r1, #8
 8018cda:	187b      	adds	r3, r7, r1
 8018cdc:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018cde:	187b      	adds	r3, r7, r1
 8018ce0:	0018      	movs	r0, r3
 8018ce2:	f000 fa35 	bl	8019150 <RegionEU868ChannelsRemove>
 8018ce6:	0003      	movs	r3, r0
 8018ce8:	001a      	movs	r2, r3
 8018cea:	2301      	movs	r3, #1
 8018cec:	4053      	eors	r3, r2
 8018cee:	b2db      	uxtb	r3, r3
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d041      	beq.n	8018d78 <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 8018cf4:	193b      	adds	r3, r7, r4
 8018cf6:	193a      	adds	r2, r7, r4
 8018cf8:	7812      	ldrb	r2, [r2, #0]
 8018cfa:	2103      	movs	r1, #3
 8018cfc:	438a      	bics	r2, r1
 8018cfe:	701a      	strb	r2, [r3, #0]
 8018d00:	e03a      	b.n	8018d78 <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681a      	ldr	r2, [r3, #0]
 8018d06:	210c      	movs	r1, #12
 8018d08:	187b      	adds	r3, r7, r1
 8018d0a:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	791b      	ldrb	r3, [r3, #4]
 8018d10:	b25b      	sxtb	r3, r3
 8018d12:	b2da      	uxtb	r2, r3
 8018d14:	187b      	adds	r3, r7, r1
 8018d16:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018d18:	187b      	adds	r3, r7, r1
 8018d1a:	0018      	movs	r0, r3
 8018d1c:	f000 f954 	bl	8018fc8 <RegionEU868ChannelAdd>
 8018d20:	0003      	movs	r3, r0
 8018d22:	2b06      	cmp	r3, #6
 8018d24:	d017      	beq.n	8018d56 <RegionEU868NewChannelReq+0xa0>
 8018d26:	dc1e      	bgt.n	8018d66 <RegionEU868NewChannelReq+0xb0>
 8018d28:	2b05      	cmp	r3, #5
 8018d2a:	d00c      	beq.n	8018d46 <RegionEU868NewChannelReq+0x90>
 8018d2c:	dc1b      	bgt.n	8018d66 <RegionEU868NewChannelReq+0xb0>
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d021      	beq.n	8018d76 <RegionEU868NewChannelReq+0xc0>
 8018d32:	2b04      	cmp	r3, #4
 8018d34:	d117      	bne.n	8018d66 <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018d36:	2217      	movs	r2, #23
 8018d38:	18bb      	adds	r3, r7, r2
 8018d3a:	18ba      	adds	r2, r7, r2
 8018d3c:	7812      	ldrb	r2, [r2, #0]
 8018d3e:	2101      	movs	r1, #1
 8018d40:	438a      	bics	r2, r1
 8018d42:	701a      	strb	r2, [r3, #0]
                break;
 8018d44:	e018      	b.n	8018d78 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018d46:	2217      	movs	r2, #23
 8018d48:	18bb      	adds	r3, r7, r2
 8018d4a:	18ba      	adds	r2, r7, r2
 8018d4c:	7812      	ldrb	r2, [r2, #0]
 8018d4e:	2102      	movs	r1, #2
 8018d50:	438a      	bics	r2, r1
 8018d52:	701a      	strb	r2, [r3, #0]
                break;
 8018d54:	e010      	b.n	8018d78 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018d56:	2217      	movs	r2, #23
 8018d58:	18bb      	adds	r3, r7, r2
 8018d5a:	18ba      	adds	r2, r7, r2
 8018d5c:	7812      	ldrb	r2, [r2, #0]
 8018d5e:	2103      	movs	r1, #3
 8018d60:	438a      	bics	r2, r1
 8018d62:	701a      	strb	r2, [r3, #0]
                break;
 8018d64:	e008      	b.n	8018d78 <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 8018d66:	2217      	movs	r2, #23
 8018d68:	18bb      	adds	r3, r7, r2
 8018d6a:	18ba      	adds	r2, r7, r2
 8018d6c:	7812      	ldrb	r2, [r2, #0]
 8018d6e:	2103      	movs	r1, #3
 8018d70:	438a      	bics	r2, r1
 8018d72:	701a      	strb	r2, [r3, #0]
                break;
 8018d74:	e000      	b.n	8018d78 <RegionEU868NewChannelReq+0xc2>
                break;
 8018d76:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8018d78:	2317      	movs	r3, #23
 8018d7a:	18fb      	adds	r3, r7, r3
 8018d7c:	781b      	ldrb	r3, [r3, #0]
}
 8018d7e:	0018      	movs	r0, r3
 8018d80:	46bd      	mov	sp, r7
 8018d82:	b007      	add	sp, #28
 8018d84:	bd90      	pop	{r4, r7, pc}

08018d86 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018d86:	b580      	push	{r7, lr}
 8018d88:	b082      	sub	sp, #8
 8018d8a:	af00      	add	r7, sp, #0
 8018d8c:	6078      	str	r0, [r7, #4]
    return -1;
 8018d8e:	2301      	movs	r3, #1
 8018d90:	425b      	negs	r3, r3
}
 8018d92:	0018      	movs	r0, r3
 8018d94:	46bd      	mov	sp, r7
 8018d96:	b002      	add	sp, #8
 8018d98:	bd80      	pop	{r7, pc}
	...

08018d9c <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018d9c:	b590      	push	{r4, r7, lr}
 8018d9e:	b085      	sub	sp, #20
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018da4:	240f      	movs	r4, #15
 8018da6:	193b      	adds	r3, r7, r4
 8018da8:	2203      	movs	r2, #3
 8018daa:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018dac:	210e      	movs	r1, #14
 8018dae:	187b      	adds	r3, r7, r1
 8018db0:	2200      	movs	r2, #0
 8018db2:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	685b      	ldr	r3, [r3, #4]
 8018db8:	187a      	adds	r2, r7, r1
 8018dba:	0011      	movs	r1, r2
 8018dbc:	0018      	movs	r0, r3
 8018dbe:	f7fe ffc1 	bl	8017d44 <VerifyRfFreq>
 8018dc2:	0003      	movs	r3, r0
 8018dc4:	001a      	movs	r2, r3
 8018dc6:	2301      	movs	r3, #1
 8018dc8:	4053      	eors	r3, r2
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d005      	beq.n	8018ddc <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018dd0:	193b      	adds	r3, r7, r4
 8018dd2:	193a      	adds	r2, r7, r4
 8018dd4:	7812      	ldrb	r2, [r2, #0]
 8018dd6:	2101      	movs	r1, #1
 8018dd8:	438a      	bics	r2, r1
 8018dda:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	781b      	ldrb	r3, [r3, #0]
 8018de0:	0019      	movs	r1, r3
 8018de2:	4a14      	ldr	r2, [pc, #80]	; (8018e34 <RegionEU868DlChannelReq+0x98>)
 8018de4:	000b      	movs	r3, r1
 8018de6:	005b      	lsls	r3, r3, #1
 8018de8:	185b      	adds	r3, r3, r1
 8018dea:	009b      	lsls	r3, r3, #2
 8018dec:	589b      	ldr	r3, [r3, r2]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d106      	bne.n	8018e00 <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 8018df2:	220f      	movs	r2, #15
 8018df4:	18bb      	adds	r3, r7, r2
 8018df6:	18ba      	adds	r2, r7, r2
 8018df8:	7812      	ldrb	r2, [r2, #0]
 8018dfa:	2102      	movs	r1, #2
 8018dfc:	438a      	bics	r2, r1
 8018dfe:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018e00:	230f      	movs	r3, #15
 8018e02:	18fb      	adds	r3, r7, r3
 8018e04:	781b      	ldrb	r3, [r3, #0]
 8018e06:	2b03      	cmp	r3, #3
 8018e08:	d10c      	bne.n	8018e24 <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	781b      	ldrb	r3, [r3, #0]
 8018e0e:	0018      	movs	r0, r3
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	685a      	ldr	r2, [r3, #4]
 8018e14:	4907      	ldr	r1, [pc, #28]	; (8018e34 <RegionEU868DlChannelReq+0x98>)
 8018e16:	0003      	movs	r3, r0
 8018e18:	005b      	lsls	r3, r3, #1
 8018e1a:	181b      	adds	r3, r3, r0
 8018e1c:	009b      	lsls	r3, r3, #2
 8018e1e:	18cb      	adds	r3, r1, r3
 8018e20:	3304      	adds	r3, #4
 8018e22:	601a      	str	r2, [r3, #0]
    }

    return status;
 8018e24:	230f      	movs	r3, #15
 8018e26:	18fb      	adds	r3, r7, r3
 8018e28:	781b      	ldrb	r3, [r3, #0]
}
 8018e2a:	0018      	movs	r0, r3
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	b005      	add	sp, #20
 8018e30:	bd90      	pop	{r4, r7, pc}
 8018e32:	46c0      	nop			; (mov r8, r8)
 8018e34:	20000cd8 	.word	0x20000cd8

08018e38 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b082      	sub	sp, #8
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	0002      	movs	r2, r0
 8018e40:	1dfb      	adds	r3, r7, #7
 8018e42:	701a      	strb	r2, [r3, #0]
 8018e44:	1dbb      	adds	r3, r7, #6
 8018e46:	1c0a      	adds	r2, r1, #0
 8018e48:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8018e4a:	1dfb      	adds	r3, r7, #7
 8018e4c:	781b      	ldrb	r3, [r3, #0]
 8018e4e:	b25b      	sxtb	r3, r3
}
 8018e50:	0018      	movs	r0, r3
 8018e52:	46bd      	mov	sp, r7
 8018e54:	b002      	add	sp, #8
 8018e56:	bd80      	pop	{r7, pc}

08018e58 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e5a:	b099      	sub	sp, #100	; 0x64
 8018e5c:	af02      	add	r7, sp, #8
 8018e5e:	60f8      	str	r0, [r7, #12]
 8018e60:	60b9      	str	r1, [r7, #8]
 8018e62:	607a      	str	r2, [r7, #4]
 8018e64:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8018e66:	2356      	movs	r3, #86	; 0x56
 8018e68:	18fb      	adds	r3, r7, r3
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 8018e6e:	2355      	movs	r3, #85	; 0x55
 8018e70:	18fb      	adds	r3, r7, r3
 8018e72:	2200      	movs	r2, #0
 8018e74:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8018e76:	2344      	movs	r3, #68	; 0x44
 8018e78:	18fb      	adds	r3, r7, r3
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	601a      	str	r2, [r3, #0]
 8018e7e:	3304      	adds	r3, #4
 8018e80:	220c      	movs	r2, #12
 8018e82:	2100      	movs	r1, #0
 8018e84:	0018      	movs	r0, r3
 8018e86:	f004 ffa8 	bl	801ddda <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018e8a:	2357      	movs	r3, #87	; 0x57
 8018e8c:	18fb      	adds	r3, r7, r3
 8018e8e:	220c      	movs	r2, #12
 8018e90:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8018e92:	4b4a      	ldr	r3, [pc, #296]	; (8018fbc <RegionEU868NextChannel+0x164>)
 8018e94:	2201      	movs	r2, #1
 8018e96:	2100      	movs	r1, #0
 8018e98:	0018      	movs	r0, r3
 8018e9a:	f7fe fa2c 	bl	80172f6 <RegionCommonCountChannels>
 8018e9e:	1e03      	subs	r3, r0, #0
 8018ea0:	d10a      	bne.n	8018eb8 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018ea2:	4a47      	ldr	r2, [pc, #284]	; (8018fc0 <RegionEU868NextChannel+0x168>)
 8018ea4:	239c      	movs	r3, #156	; 0x9c
 8018ea6:	005b      	lsls	r3, r3, #1
 8018ea8:	5ad3      	ldrh	r3, [r2, r3]
 8018eaa:	2207      	movs	r2, #7
 8018eac:	4313      	orrs	r3, r2
 8018eae:	b299      	uxth	r1, r3
 8018eb0:	4a43      	ldr	r2, [pc, #268]	; (8018fc0 <RegionEU868NextChannel+0x168>)
 8018eb2:	239c      	movs	r3, #156	; 0x9c
 8018eb4:	005b      	lsls	r3, r3, #1
 8018eb6:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	7a5a      	ldrb	r2, [r3, #9]
 8018ebc:	2110      	movs	r1, #16
 8018ebe:	187b      	adds	r3, r7, r1
 8018ec0:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	7a1b      	ldrb	r3, [r3, #8]
 8018ec6:	b25b      	sxtb	r3, r3
 8018ec8:	b2da      	uxtb	r2, r3
 8018eca:	187b      	adds	r3, r7, r1
 8018ecc:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 8018ece:	000d      	movs	r5, r1
 8018ed0:	197b      	adds	r3, r7, r5
 8018ed2:	4a3a      	ldr	r2, [pc, #232]	; (8018fbc <RegionEU868NextChannel+0x164>)
 8018ed4:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 8018ed6:	197b      	adds	r3, r7, r5
 8018ed8:	4a39      	ldr	r2, [pc, #228]	; (8018fc0 <RegionEU868NextChannel+0x168>)
 8018eda:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 8018edc:	197b      	adds	r3, r7, r5
 8018ede:	4a39      	ldr	r2, [pc, #228]	; (8018fc4 <RegionEU868NextChannel+0x16c>)
 8018ee0:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018ee2:	197b      	adds	r3, r7, r5
 8018ee4:	2210      	movs	r2, #16
 8018ee6:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 8018ee8:	197b      	adds	r3, r7, r5
 8018eea:	2207      	movs	r2, #7
 8018eec:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	681a      	ldr	r2, [r3, #0]
 8018ef2:	2424      	movs	r4, #36	; 0x24
 8018ef4:	193b      	adds	r3, r7, r4
 8018ef6:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	685a      	ldr	r2, [r3, #4]
 8018efc:	193b      	adds	r3, r7, r4
 8018efe:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	7a9a      	ldrb	r2, [r3, #10]
 8018f04:	193b      	adds	r3, r7, r4
 8018f06:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8018f08:	193b      	adds	r3, r7, r4
 8018f0a:	2206      	movs	r2, #6
 8018f0c:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018f0e:	193b      	adds	r3, r7, r4
 8018f10:	68fa      	ldr	r2, [r7, #12]
 8018f12:	330c      	adds	r3, #12
 8018f14:	320c      	adds	r2, #12
 8018f16:	ca03      	ldmia	r2!, {r0, r1}
 8018f18:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	7d1a      	ldrb	r2, [r3, #20]
 8018f1e:	193b      	adds	r3, r7, r4
 8018f20:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	2208      	movs	r2, #8
 8018f26:	569a      	ldrsb	r2, [r3, r2]
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	8adb      	ldrh	r3, [r3, #22]
 8018f2c:	0019      	movs	r1, r3
 8018f2e:	0010      	movs	r0, r2
 8018f30:	f7fe ff80 	bl	8017e34 <GetTimeOnAir>
 8018f34:	0002      	movs	r2, r0
 8018f36:	0020      	movs	r0, r4
 8018f38:	183b      	adds	r3, r7, r0
 8018f3a:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018f3c:	183b      	adds	r3, r7, r0
 8018f3e:	197a      	adds	r2, r7, r5
 8018f40:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018f42:	2657      	movs	r6, #87	; 0x57
 8018f44:	19bc      	adds	r4, r7, r6
 8018f46:	2356      	movs	r3, #86	; 0x56
 8018f48:	18fd      	adds	r5, r7, r3
 8018f4a:	2244      	movs	r2, #68	; 0x44
 8018f4c:	18ba      	adds	r2, r7, r2
 8018f4e:	6839      	ldr	r1, [r7, #0]
 8018f50:	1838      	adds	r0, r7, r0
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	9301      	str	r3, [sp, #4]
 8018f56:	2355      	movs	r3, #85	; 0x55
 8018f58:	18fb      	adds	r3, r7, r3
 8018f5a:	9300      	str	r3, [sp, #0]
 8018f5c:	002b      	movs	r3, r5
 8018f5e:	f7fe fdcf 	bl	8017b00 <RegionCommonIdentifyChannels>
 8018f62:	0003      	movs	r3, r0
 8018f64:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018f66:	19bb      	adds	r3, r7, r6
 8018f68:	781b      	ldrb	r3, [r3, #0]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d10e      	bne.n	8018f8c <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018f6e:	2356      	movs	r3, #86	; 0x56
 8018f70:	18fb      	adds	r3, r7, r3
 8018f72:	781b      	ldrb	r3, [r3, #0]
 8018f74:	3b01      	subs	r3, #1
 8018f76:	0019      	movs	r1, r3
 8018f78:	2000      	movs	r0, #0
 8018f7a:	f000 f9c1 	bl	8019300 <randr>
 8018f7e:	0002      	movs	r2, r0
 8018f80:	2344      	movs	r3, #68	; 0x44
 8018f82:	18fb      	adds	r3, r7, r3
 8018f84:	5c9a      	ldrb	r2, [r3, r2]
 8018f86:	68bb      	ldr	r3, [r7, #8]
 8018f88:	701a      	strb	r2, [r3, #0]
 8018f8a:	e00f      	b.n	8018fac <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018f8c:	2357      	movs	r3, #87	; 0x57
 8018f8e:	18fb      	adds	r3, r7, r3
 8018f90:	781b      	ldrb	r3, [r3, #0]
 8018f92:	2b0c      	cmp	r3, #12
 8018f94:	d10a      	bne.n	8018fac <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018f96:	4a0a      	ldr	r2, [pc, #40]	; (8018fc0 <RegionEU868NextChannel+0x168>)
 8018f98:	239c      	movs	r3, #156	; 0x9c
 8018f9a:	005b      	lsls	r3, r3, #1
 8018f9c:	5ad3      	ldrh	r3, [r2, r3]
 8018f9e:	2207      	movs	r2, #7
 8018fa0:	4313      	orrs	r3, r2
 8018fa2:	b299      	uxth	r1, r3
 8018fa4:	4a06      	ldr	r2, [pc, #24]	; (8018fc0 <RegionEU868NextChannel+0x168>)
 8018fa6:	239c      	movs	r3, #156	; 0x9c
 8018fa8:	005b      	lsls	r3, r3, #1
 8018faa:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 8018fac:	2357      	movs	r3, #87	; 0x57
 8018fae:	18fb      	adds	r3, r7, r3
 8018fb0:	781b      	ldrb	r3, [r3, #0]
}
 8018fb2:	0018      	movs	r0, r3
 8018fb4:	46bd      	mov	sp, r7
 8018fb6:	b017      	add	sp, #92	; 0x5c
 8018fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fba:	46c0      	nop			; (mov r8, r8)
 8018fbc:	20000e10 	.word	0x20000e10
 8018fc0:	20000cd8 	.word	0x20000cd8
 8018fc4:	20000d98 	.word	0x20000d98

08018fc8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018fc8:	b590      	push	{r4, r7, lr}
 8018fca:	b085      	sub	sp, #20
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8018fd0:	230c      	movs	r3, #12
 8018fd2:	18fb      	adds	r3, r7, r3
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8018fd8:	230f      	movs	r3, #15
 8018fda:	18fb      	adds	r3, r7, r3
 8018fdc:	2200      	movs	r2, #0
 8018fde:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8018fe0:	230e      	movs	r3, #14
 8018fe2:	18fb      	adds	r3, r7, r3
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8018fe8:	210d      	movs	r1, #13
 8018fea:	187b      	adds	r3, r7, r1
 8018fec:	687a      	ldr	r2, [r7, #4]
 8018fee:	7912      	ldrb	r2, [r2, #4]
 8018ff0:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018ff2:	187b      	adds	r3, r7, r1
 8018ff4:	781b      	ldrb	r3, [r3, #0]
 8018ff6:	2b02      	cmp	r3, #2
 8018ff8:	d801      	bhi.n	8018ffe <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018ffa:	2306      	movs	r3, #6
 8018ffc:	e0a1      	b.n	8019142 <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018ffe:	230d      	movs	r3, #13
 8019000:	18fb      	adds	r3, r7, r3
 8019002:	781b      	ldrb	r3, [r3, #0]
 8019004:	2b0f      	cmp	r3, #15
 8019006:	d901      	bls.n	801900c <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019008:	2303      	movs	r3, #3
 801900a:	e09a      	b.n	8019142 <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	7a1b      	ldrb	r3, [r3, #8]
 8019012:	011b      	lsls	r3, r3, #4
 8019014:	b25b      	sxtb	r3, r3
 8019016:	111b      	asrs	r3, r3, #4
 8019018:	b25b      	sxtb	r3, r3
 801901a:	2207      	movs	r2, #7
 801901c:	2100      	movs	r1, #0
 801901e:	0018      	movs	r0, r3
 8019020:	f7fe f901 	bl	8017226 <RegionCommonValueInRange>
 8019024:	1e03      	subs	r3, r0, #0
 8019026:	d103      	bne.n	8019030 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8019028:	230f      	movs	r3, #15
 801902a:	18fb      	adds	r3, r7, r3
 801902c:	2201      	movs	r2, #1
 801902e:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	7a1b      	ldrb	r3, [r3, #8]
 8019036:	b25b      	sxtb	r3, r3
 8019038:	111b      	asrs	r3, r3, #4
 801903a:	b25b      	sxtb	r3, r3
 801903c:	2207      	movs	r2, #7
 801903e:	2100      	movs	r1, #0
 8019040:	0018      	movs	r0, r3
 8019042:	f7fe f8f0 	bl	8017226 <RegionCommonValueInRange>
 8019046:	1e03      	subs	r3, r0, #0
 8019048:	d103      	bne.n	8019052 <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 801904a:	230f      	movs	r3, #15
 801904c:	18fb      	adds	r3, r7, r3
 801904e:	2201      	movs	r2, #1
 8019050:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	7a1b      	ldrb	r3, [r3, #8]
 8019058:	011b      	lsls	r3, r3, #4
 801905a:	b25b      	sxtb	r3, r3
 801905c:	111b      	asrs	r3, r3, #4
 801905e:	b25a      	sxtb	r2, r3
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	7a1b      	ldrb	r3, [r3, #8]
 8019066:	b25b      	sxtb	r3, r3
 8019068:	111b      	asrs	r3, r3, #4
 801906a:	b25b      	sxtb	r3, r3
 801906c:	429a      	cmp	r2, r3
 801906e:	dd03      	ble.n	8019078 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8019070:	230f      	movs	r3, #15
 8019072:	18fb      	adds	r3, r7, r3
 8019074:	2201      	movs	r2, #1
 8019076:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019078:	240e      	movs	r4, #14
 801907a:	193b      	adds	r3, r7, r4
 801907c:	781b      	ldrb	r3, [r3, #0]
 801907e:	2201      	movs	r2, #1
 8019080:	4053      	eors	r3, r2
 8019082:	b2db      	uxtb	r3, r3
 8019084:	2b00      	cmp	r3, #0
 8019086:	d012      	beq.n	80190ae <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	220c      	movs	r2, #12
 8019090:	18ba      	adds	r2, r7, r2
 8019092:	0011      	movs	r1, r2
 8019094:	0018      	movs	r0, r3
 8019096:	f7fe fe55 	bl	8017d44 <VerifyRfFreq>
 801909a:	0003      	movs	r3, r0
 801909c:	001a      	movs	r2, r3
 801909e:	2301      	movs	r3, #1
 80190a0:	4053      	eors	r3, r2
 80190a2:	b2db      	uxtb	r3, r3
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d002      	beq.n	80190ae <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 80190a8:	193b      	adds	r3, r7, r4
 80190aa:	2201      	movs	r2, #1
 80190ac:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80190ae:	230f      	movs	r3, #15
 80190b0:	18fb      	adds	r3, r7, r3
 80190b2:	781b      	ldrb	r3, [r3, #0]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d006      	beq.n	80190c6 <RegionEU868ChannelAdd+0xfe>
 80190b8:	230e      	movs	r3, #14
 80190ba:	18fb      	adds	r3, r7, r3
 80190bc:	781b      	ldrb	r3, [r3, #0]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d001      	beq.n	80190c6 <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80190c2:	2306      	movs	r3, #6
 80190c4:	e03d      	b.n	8019142 <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 80190c6:	230f      	movs	r3, #15
 80190c8:	18fb      	adds	r3, r7, r3
 80190ca:	781b      	ldrb	r3, [r3, #0]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d001      	beq.n	80190d4 <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80190d0:	2305      	movs	r3, #5
 80190d2:	e036      	b.n	8019142 <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 80190d4:	230e      	movs	r3, #14
 80190d6:	18fb      	adds	r3, r7, r3
 80190d8:	781b      	ldrb	r3, [r3, #0]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d001      	beq.n	80190e2 <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80190de:	2304      	movs	r3, #4
 80190e0:	e02f      	b.n	8019142 <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80190e2:	240d      	movs	r4, #13
 80190e4:	193b      	adds	r3, r7, r4
 80190e6:	781a      	ldrb	r2, [r3, #0]
 80190e8:	0013      	movs	r3, r2
 80190ea:	005b      	lsls	r3, r3, #1
 80190ec:	189b      	adds	r3, r3, r2
 80190ee:	009b      	lsls	r3, r3, #2
 80190f0:	4a16      	ldr	r2, [pc, #88]	; (801914c <RegionEU868ChannelAdd+0x184>)
 80190f2:	1898      	adds	r0, r3, r2
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	220c      	movs	r2, #12
 80190fa:	0019      	movs	r1, r3
 80190fc:	f000 f916 	bl	801932c <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8019100:	193b      	adds	r3, r7, r4
 8019102:	781a      	ldrb	r2, [r3, #0]
 8019104:	230c      	movs	r3, #12
 8019106:	18fb      	adds	r3, r7, r3
 8019108:	7818      	ldrb	r0, [r3, #0]
 801910a:	4910      	ldr	r1, [pc, #64]	; (801914c <RegionEU868ChannelAdd+0x184>)
 801910c:	0013      	movs	r3, r2
 801910e:	005b      	lsls	r3, r3, #1
 8019110:	189b      	adds	r3, r3, r2
 8019112:	009b      	lsls	r3, r3, #2
 8019114:	18cb      	adds	r3, r1, r3
 8019116:	3309      	adds	r3, #9
 8019118:	1c02      	adds	r2, r0, #0
 801911a:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 801911c:	4a0b      	ldr	r2, [pc, #44]	; (801914c <RegionEU868ChannelAdd+0x184>)
 801911e:	239c      	movs	r3, #156	; 0x9c
 8019120:	005b      	lsls	r3, r3, #1
 8019122:	5ad3      	ldrh	r3, [r2, r3]
 8019124:	b21a      	sxth	r2, r3
 8019126:	193b      	adds	r3, r7, r4
 8019128:	781b      	ldrb	r3, [r3, #0]
 801912a:	2101      	movs	r1, #1
 801912c:	4099      	lsls	r1, r3
 801912e:	000b      	movs	r3, r1
 8019130:	b21b      	sxth	r3, r3
 8019132:	4313      	orrs	r3, r2
 8019134:	b21b      	sxth	r3, r3
 8019136:	b299      	uxth	r1, r3
 8019138:	4a04      	ldr	r2, [pc, #16]	; (801914c <RegionEU868ChannelAdd+0x184>)
 801913a:	239c      	movs	r3, #156	; 0x9c
 801913c:	005b      	lsls	r3, r3, #1
 801913e:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8019140:	2300      	movs	r3, #0
}
 8019142:	0018      	movs	r0, r3
 8019144:	46bd      	mov	sp, r7
 8019146:	b005      	add	sp, #20
 8019148:	bd90      	pop	{r4, r7, pc}
 801914a:	46c0      	nop			; (mov r8, r8)
 801914c:	20000cd8 	.word	0x20000cd8

08019150 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019150:	b590      	push	{r4, r7, lr}
 8019152:	b087      	sub	sp, #28
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8019158:	2117      	movs	r1, #23
 801915a:	187b      	adds	r3, r7, r1
 801915c:	687a      	ldr	r2, [r7, #4]
 801915e:	7812      	ldrb	r2, [r2, #0]
 8019160:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019162:	187b      	adds	r3, r7, r1
 8019164:	781b      	ldrb	r3, [r3, #0]
 8019166:	2b02      	cmp	r3, #2
 8019168:	d801      	bhi.n	801916e <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 801916a:	2300      	movs	r3, #0
 801916c:	e015      	b.n	801919a <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801916e:	2417      	movs	r4, #23
 8019170:	193b      	adds	r3, r7, r4
 8019172:	781a      	ldrb	r2, [r3, #0]
 8019174:	490b      	ldr	r1, [pc, #44]	; (80191a4 <RegionEU868ChannelsRemove+0x54>)
 8019176:	0013      	movs	r3, r2
 8019178:	005b      	lsls	r3, r3, #1
 801917a:	189b      	adds	r3, r3, r2
 801917c:	009b      	lsls	r3, r3, #2
 801917e:	18cb      	adds	r3, r1, r3
 8019180:	220c      	movs	r2, #12
 8019182:	2100      	movs	r1, #0
 8019184:	0018      	movs	r0, r3
 8019186:	f004 fe28 	bl	801ddda <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801918a:	193b      	adds	r3, r7, r4
 801918c:	7819      	ldrb	r1, [r3, #0]
 801918e:	4b06      	ldr	r3, [pc, #24]	; (80191a8 <RegionEU868ChannelsRemove+0x58>)
 8019190:	2210      	movs	r2, #16
 8019192:	0018      	movs	r0, r3
 8019194:	f7fe f86d 	bl	8017272 <RegionCommonChanDisable>
 8019198:	0003      	movs	r3, r0
}
 801919a:	0018      	movs	r0, r3
 801919c:	46bd      	mov	sp, r7
 801919e:	b007      	add	sp, #28
 80191a0:	bd90      	pop	{r4, r7, pc}
 80191a2:	46c0      	nop			; (mov r8, r8)
 80191a4:	20000cd8 	.word	0x20000cd8
 80191a8:	20000e10 	.word	0x20000e10

080191ac <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80191ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191ae:	b085      	sub	sp, #20
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	2002      	movs	r0, #2
 80191b8:	5618      	ldrsb	r0, [r3, r0]
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	781b      	ldrb	r3, [r3, #0]
 80191be:	0019      	movs	r1, r3
 80191c0:	4a23      	ldr	r2, [pc, #140]	; (8019250 <RegionEU868SetContinuousWave+0xa4>)
 80191c2:	000b      	movs	r3, r1
 80191c4:	005b      	lsls	r3, r3, #1
 80191c6:	185b      	adds	r3, r3, r1
 80191c8:	009b      	lsls	r3, r3, #2
 80191ca:	18d3      	adds	r3, r2, r3
 80191cc:	3309      	adds	r3, #9
 80191ce:	781b      	ldrb	r3, [r3, #0]
 80191d0:	001c      	movs	r4, r3
 80191d2:	4a1f      	ldr	r2, [pc, #124]	; (8019250 <RegionEU868SetContinuousWave+0xa4>)
 80191d4:	21c2      	movs	r1, #194	; 0xc2
 80191d6:	0023      	movs	r3, r4
 80191d8:	009b      	lsls	r3, r3, #2
 80191da:	191b      	adds	r3, r3, r4
 80191dc:	009b      	lsls	r3, r3, #2
 80191de:	18d3      	adds	r3, r2, r3
 80191e0:	185b      	adds	r3, r3, r1
 80191e2:	2100      	movs	r1, #0
 80191e4:	5659      	ldrsb	r1, [r3, r1]
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2201      	movs	r2, #1
 80191ea:	569a      	ldrsb	r2, [r3, r2]
 80191ec:	260f      	movs	r6, #15
 80191ee:	19bc      	adds	r4, r7, r6
 80191f0:	4b18      	ldr	r3, [pc, #96]	; (8019254 <RegionEU868SetContinuousWave+0xa8>)
 80191f2:	f7fe fd7f 	bl	8017cf4 <LimitTxPower>
 80191f6:	0003      	movs	r3, r0
 80191f8:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80191fa:	200e      	movs	r0, #14
 80191fc:	183b      	adds	r3, r7, r0
 80191fe:	2200      	movs	r2, #0
 8019200:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	781b      	ldrb	r3, [r3, #0]
 8019206:	0019      	movs	r1, r3
 8019208:	4a11      	ldr	r2, [pc, #68]	; (8019250 <RegionEU868SetContinuousWave+0xa4>)
 801920a:	000b      	movs	r3, r1
 801920c:	005b      	lsls	r3, r3, #1
 801920e:	185b      	adds	r3, r3, r1
 8019210:	009b      	lsls	r3, r3, #2
 8019212:	589b      	ldr	r3, [r3, r2]
 8019214:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	6859      	ldr	r1, [r3, #4]
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	689a      	ldr	r2, [r3, #8]
 801921e:	0005      	movs	r5, r0
 8019220:	183c      	adds	r4, r7, r0
 8019222:	19bb      	adds	r3, r7, r6
 8019224:	781b      	ldrb	r3, [r3, #0]
 8019226:	b25b      	sxtb	r3, r3
 8019228:	0018      	movs	r0, r3
 801922a:	f7fe fb41 	bl	80178b0 <RegionCommonComputeTxPower>
 801922e:	0003      	movs	r3, r0
 8019230:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019232:	4b09      	ldr	r3, [pc, #36]	; (8019258 <RegionEU868SetContinuousWave+0xac>)
 8019234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019236:	687a      	ldr	r2, [r7, #4]
 8019238:	8994      	ldrh	r4, [r2, #12]
 801923a:	197a      	adds	r2, r7, r5
 801923c:	2100      	movs	r1, #0
 801923e:	5651      	ldrsb	r1, [r2, r1]
 8019240:	68b8      	ldr	r0, [r7, #8]
 8019242:	0022      	movs	r2, r4
 8019244:	4798      	blx	r3
}
 8019246:	46c0      	nop			; (mov r8, r8)
 8019248:	46bd      	mov	sp, r7
 801924a:	b005      	add	sp, #20
 801924c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801924e:	46c0      	nop			; (mov r8, r8)
 8019250:	20000cd8 	.word	0x20000cd8
 8019254:	20000e10 	.word	0x20000e10
 8019258:	0801f0bc 	.word	0x0801f0bc

0801925c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801925c:	b590      	push	{r4, r7, lr}
 801925e:	b085      	sub	sp, #20
 8019260:	af00      	add	r7, sp, #0
 8019262:	0004      	movs	r4, r0
 8019264:	0008      	movs	r0, r1
 8019266:	0011      	movs	r1, r2
 8019268:	1dfb      	adds	r3, r7, #7
 801926a:	1c22      	adds	r2, r4, #0
 801926c:	701a      	strb	r2, [r3, #0]
 801926e:	1dbb      	adds	r3, r7, #6
 8019270:	1c02      	adds	r2, r0, #0
 8019272:	701a      	strb	r2, [r3, #0]
 8019274:	1d7b      	adds	r3, r7, #5
 8019276:	1c0a      	adds	r2, r1, #0
 8019278:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 801927a:	1dbb      	adds	r3, r7, #6
 801927c:	781a      	ldrb	r2, [r3, #0]
 801927e:	1d7b      	adds	r3, r7, #5
 8019280:	781b      	ldrb	r3, [r3, #0]
 8019282:	1ad3      	subs	r3, r2, r3
 8019284:	b2da      	uxtb	r2, r3
 8019286:	210f      	movs	r1, #15
 8019288:	187b      	adds	r3, r7, r1
 801928a:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 801928c:	000a      	movs	r2, r1
 801928e:	18bb      	adds	r3, r7, r2
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	2b7f      	cmp	r3, #127	; 0x7f
 8019294:	d902      	bls.n	801929c <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8019296:	18bb      	adds	r3, r7, r2
 8019298:	2200      	movs	r2, #0
 801929a:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 801929c:	230f      	movs	r3, #15
 801929e:	18fb      	adds	r3, r7, r3
 80192a0:	781b      	ldrb	r3, [r3, #0]
}
 80192a2:	0018      	movs	r0, r3
 80192a4:	46bd      	mov	sp, r7
 80192a6:	b005      	add	sp, #20
 80192a8:	bd90      	pop	{r4, r7, pc}
	...

080192ac <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80192ac:	b580      	push	{r7, lr}
 80192ae:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80192b0:	4b08      	ldr	r3, [pc, #32]	; (80192d4 <rand1+0x28>)
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	4a08      	ldr	r2, [pc, #32]	; (80192d8 <rand1+0x2c>)
 80192b6:	4353      	muls	r3, r2
 80192b8:	4a08      	ldr	r2, [pc, #32]	; (80192dc <rand1+0x30>)
 80192ba:	189a      	adds	r2, r3, r2
 80192bc:	4b05      	ldr	r3, [pc, #20]	; (80192d4 <rand1+0x28>)
 80192be:	601a      	str	r2, [r3, #0]
 80192c0:	4b04      	ldr	r3, [pc, #16]	; (80192d4 <rand1+0x28>)
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	4906      	ldr	r1, [pc, #24]	; (80192e0 <rand1+0x34>)
 80192c6:	0018      	movs	r0, r3
 80192c8:	f7e6 ffac 	bl	8000224 <__aeabi_uidivmod>
 80192cc:	000b      	movs	r3, r1
}
 80192ce:	0018      	movs	r0, r3
 80192d0:	46bd      	mov	sp, r7
 80192d2:	bd80      	pop	{r7, pc}
 80192d4:	200001ac 	.word	0x200001ac
 80192d8:	41c64e6d 	.word	0x41c64e6d
 80192dc:	00003039 	.word	0x00003039
 80192e0:	7fffffff 	.word	0x7fffffff

080192e4 <srand1>:

void srand1( uint32_t seed )
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b082      	sub	sp, #8
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	6078      	str	r0, [r7, #4]
    next = seed;
 80192ec:	4b03      	ldr	r3, [pc, #12]	; (80192fc <srand1+0x18>)
 80192ee:	687a      	ldr	r2, [r7, #4]
 80192f0:	601a      	str	r2, [r3, #0]
}
 80192f2:	46c0      	nop			; (mov r8, r8)
 80192f4:	46bd      	mov	sp, r7
 80192f6:	b002      	add	sp, #8
 80192f8:	bd80      	pop	{r7, pc}
 80192fa:	46c0      	nop			; (mov r8, r8)
 80192fc:	200001ac 	.word	0x200001ac

08019300 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019300:	b580      	push	{r7, lr}
 8019302:	b082      	sub	sp, #8
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
 8019308:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801930a:	f7ff ffcf 	bl	80192ac <rand1>
 801930e:	683a      	ldr	r2, [r7, #0]
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	1ad3      	subs	r3, r2, r3
 8019314:	3301      	adds	r3, #1
 8019316:	0019      	movs	r1, r3
 8019318:	f7e7 f86e 	bl	80003f8 <__aeabi_idivmod>
 801931c:	000b      	movs	r3, r1
 801931e:	001a      	movs	r2, r3
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	18d3      	adds	r3, r2, r3
}
 8019324:	0018      	movs	r0, r3
 8019326:	46bd      	mov	sp, r7
 8019328:	b002      	add	sp, #8
 801932a:	bd80      	pop	{r7, pc}

0801932c <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b084      	sub	sp, #16
 8019330:	af00      	add	r7, sp, #0
 8019332:	60f8      	str	r0, [r7, #12]
 8019334:	60b9      	str	r1, [r7, #8]
 8019336:	1dbb      	adds	r3, r7, #6
 8019338:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801933a:	e007      	b.n	801934c <memcpy1+0x20>
    {
        *dst++ = *src++;
 801933c:	68ba      	ldr	r2, [r7, #8]
 801933e:	1c53      	adds	r3, r2, #1
 8019340:	60bb      	str	r3, [r7, #8]
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	1c59      	adds	r1, r3, #1
 8019346:	60f9      	str	r1, [r7, #12]
 8019348:	7812      	ldrb	r2, [r2, #0]
 801934a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801934c:	1dbb      	adds	r3, r7, #6
 801934e:	881b      	ldrh	r3, [r3, #0]
 8019350:	1dba      	adds	r2, r7, #6
 8019352:	1e59      	subs	r1, r3, #1
 8019354:	8011      	strh	r1, [r2, #0]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d1f0      	bne.n	801933c <memcpy1+0x10>
    }
}
 801935a:	46c0      	nop			; (mov r8, r8)
 801935c:	46c0      	nop			; (mov r8, r8)
 801935e:	46bd      	mov	sp, r7
 8019360:	b004      	add	sp, #16
 8019362:	bd80      	pop	{r7, pc}

08019364 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b084      	sub	sp, #16
 8019368:	af00      	add	r7, sp, #0
 801936a:	60f8      	str	r0, [r7, #12]
 801936c:	60b9      	str	r1, [r7, #8]
 801936e:	1dbb      	adds	r3, r7, #6
 8019370:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8019372:	1dbb      	adds	r3, r7, #6
 8019374:	881b      	ldrh	r3, [r3, #0]
 8019376:	3b01      	subs	r3, #1
 8019378:	68fa      	ldr	r2, [r7, #12]
 801937a:	18d3      	adds	r3, r2, r3
 801937c:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801937e:	e007      	b.n	8019390 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8019380:	68ba      	ldr	r2, [r7, #8]
 8019382:	1c53      	adds	r3, r2, #1
 8019384:	60bb      	str	r3, [r7, #8]
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	1e59      	subs	r1, r3, #1
 801938a:	60f9      	str	r1, [r7, #12]
 801938c:	7812      	ldrb	r2, [r2, #0]
 801938e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019390:	1dbb      	adds	r3, r7, #6
 8019392:	881b      	ldrh	r3, [r3, #0]
 8019394:	1dba      	adds	r2, r7, #6
 8019396:	1e59      	subs	r1, r3, #1
 8019398:	8011      	strh	r1, [r2, #0]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d1f0      	bne.n	8019380 <memcpyr+0x1c>
    }
}
 801939e:	46c0      	nop			; (mov r8, r8)
 80193a0:	46c0      	nop			; (mov r8, r8)
 80193a2:	46bd      	mov	sp, r7
 80193a4:	b004      	add	sp, #16
 80193a6:	bd80      	pop	{r7, pc}

080193a8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b082      	sub	sp, #8
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
 80193b0:	0008      	movs	r0, r1
 80193b2:	0011      	movs	r1, r2
 80193b4:	1cfb      	adds	r3, r7, #3
 80193b6:	1c02      	adds	r2, r0, #0
 80193b8:	701a      	strb	r2, [r3, #0]
 80193ba:	003b      	movs	r3, r7
 80193bc:	1c0a      	adds	r2, r1, #0
 80193be:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80193c0:	e005      	b.n	80193ce <memset1+0x26>
    {
        *dst++ = value;
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	1c5a      	adds	r2, r3, #1
 80193c6:	607a      	str	r2, [r7, #4]
 80193c8:	1cfa      	adds	r2, r7, #3
 80193ca:	7812      	ldrb	r2, [r2, #0]
 80193cc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80193ce:	003b      	movs	r3, r7
 80193d0:	881b      	ldrh	r3, [r3, #0]
 80193d2:	003a      	movs	r2, r7
 80193d4:	1e59      	subs	r1, r3, #1
 80193d6:	8011      	strh	r1, [r2, #0]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d1f2      	bne.n	80193c2 <memset1+0x1a>
    }
}
 80193dc:	46c0      	nop			; (mov r8, r8)
 80193de:	46c0      	nop			; (mov r8, r8)
 80193e0:	46bd      	mov	sp, r7
 80193e2:	b002      	add	sp, #8
 80193e4:	bd80      	pop	{r7, pc}
	...

080193e8 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 80193e8:	b590      	push	{r4, r7, lr}
 80193ea:	b087      	sub	sp, #28
 80193ec:	af02      	add	r7, sp, #8
 80193ee:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80193f0:	4b34      	ldr	r3, [pc, #208]	; (80194c4 <SX1276Init+0xdc>)
 80193f2:	687a      	ldr	r2, [r7, #4]
 80193f4:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80193f6:	4b34      	ldr	r3, [pc, #208]	; (80194c8 <SX1276Init+0xe0>)
 80193f8:	2201      	movs	r2, #1
 80193fa:	4251      	negs	r1, r2
 80193fc:	4833      	ldr	r0, [pc, #204]	; (80194cc <SX1276Init+0xe4>)
 80193fe:	2200      	movs	r2, #0
 8019400:	9200      	str	r2, [sp, #0]
 8019402:	2200      	movs	r2, #0
 8019404:	f003 fa9a 	bl	801c93c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8019408:	4b2f      	ldr	r3, [pc, #188]	; (80194c8 <SX1276Init+0xe0>)
 801940a:	2201      	movs	r2, #1
 801940c:	4251      	negs	r1, r2
 801940e:	4830      	ldr	r0, [pc, #192]	; (80194d0 <SX1276Init+0xe8>)
 8019410:	2200      	movs	r2, #0
 8019412:	9200      	str	r2, [sp, #0]
 8019414:	2200      	movs	r2, #0
 8019416:	f003 fa91 	bl	801c93c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 801941a:	4b2b      	ldr	r3, [pc, #172]	; (80194c8 <SX1276Init+0xe0>)
 801941c:	2201      	movs	r2, #1
 801941e:	4251      	negs	r1, r2
 8019420:	482c      	ldr	r0, [pc, #176]	; (80194d4 <SX1276Init+0xec>)
 8019422:	2200      	movs	r2, #0
 8019424:	9200      	str	r2, [sp, #0]
 8019426:	2200      	movs	r2, #0
 8019428:	f003 fa88 	bl	801c93c <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 801942c:	2001      	movs	r0, #1
 801942e:	f7ec fc75 	bl	8005d1c <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 8019432:	f001 fbf1 	bl	801ac18 <SX1276Reset>

    RxChainCalibration( );
 8019436:	f000 f937 	bl	80196a8 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801943a:	2000      	movs	r0, #0
 801943c:	f001 fbf3 	bl	801ac26 <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 8019440:	4b25      	ldr	r3, [pc, #148]	; (80194d8 <SX1276Init+0xf0>)
 8019442:	0018      	movs	r0, r3
 8019444:	f7ec fdca 	bl	8005fdc <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019448:	230f      	movs	r3, #15
 801944a:	18fb      	adds	r3, r7, r3
 801944c:	2200      	movs	r2, #0
 801944e:	701a      	strb	r2, [r3, #0]
 8019450:	e025      	b.n	801949e <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8019452:	240f      	movs	r4, #15
 8019454:	193b      	adds	r3, r7, r4
 8019456:	781a      	ldrb	r2, [r3, #0]
 8019458:	4920      	ldr	r1, [pc, #128]	; (80194dc <SX1276Init+0xf4>)
 801945a:	0013      	movs	r3, r2
 801945c:	005b      	lsls	r3, r3, #1
 801945e:	189b      	adds	r3, r3, r2
 8019460:	5c5b      	ldrb	r3, [r3, r1]
 8019462:	0018      	movs	r0, r3
 8019464:	f001 fc4c 	bl	801ad00 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8019468:	193b      	adds	r3, r7, r4
 801946a:	781a      	ldrb	r2, [r3, #0]
 801946c:	491b      	ldr	r1, [pc, #108]	; (80194dc <SX1276Init+0xf4>)
 801946e:	0013      	movs	r3, r2
 8019470:	005b      	lsls	r3, r3, #1
 8019472:	189b      	adds	r3, r3, r2
 8019474:	18cb      	adds	r3, r1, r3
 8019476:	3301      	adds	r3, #1
 8019478:	781b      	ldrb	r3, [r3, #0]
 801947a:	0018      	movs	r0, r3
 801947c:	193b      	adds	r3, r7, r4
 801947e:	781a      	ldrb	r2, [r3, #0]
 8019480:	4916      	ldr	r1, [pc, #88]	; (80194dc <SX1276Init+0xf4>)
 8019482:	0013      	movs	r3, r2
 8019484:	005b      	lsls	r3, r3, #1
 8019486:	189b      	adds	r3, r3, r2
 8019488:	18cb      	adds	r3, r1, r3
 801948a:	3302      	adds	r3, #2
 801948c:	781b      	ldrb	r3, [r3, #0]
 801948e:	0019      	movs	r1, r3
 8019490:	f001 fc90 	bl	801adb4 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019494:	193b      	adds	r3, r7, r4
 8019496:	781a      	ldrb	r2, [r3, #0]
 8019498:	193b      	adds	r3, r7, r4
 801949a:	3201      	adds	r2, #1
 801949c:	701a      	strb	r2, [r3, #0]
 801949e:	230f      	movs	r3, #15
 80194a0:	18fb      	adds	r3, r7, r3
 80194a2:	781b      	ldrb	r3, [r3, #0]
 80194a4:	2b0f      	cmp	r3, #15
 80194a6:	d9d4      	bls.n	8019452 <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 80194a8:	2000      	movs	r0, #0
 80194aa:	f001 fc29 	bl	801ad00 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 80194ae:	4b0c      	ldr	r3, [pc, #48]	; (80194e0 <SX1276Init+0xf8>)
 80194b0:	2200      	movs	r2, #0
 80194b2:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 80194b4:	f7ec fc2c 	bl	8005d10 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 80194b8:	0003      	movs	r3, r0
 80194ba:	3302      	adds	r3, #2
}
 80194bc:	0018      	movs	r0, r3
 80194be:	46bd      	mov	sp, r7
 80194c0:	b005      	add	sp, #20
 80194c2:	bd90      	pop	{r4, r7, pc}
 80194c4:	20000e14 	.word	0x20000e14
 80194c8:	0801b22d 	.word	0x0801b22d
 80194cc:	200016a0 	.word	0x200016a0
 80194d0:	20001738 	.word	0x20001738
 80194d4:	200016b8 	.word	0x200016b8
 80194d8:	200001b0 	.word	0x200001b0
 80194dc:	0801f128 	.word	0x0801f128
 80194e0:	200016d0 	.word	0x200016d0

080194e4 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80194e8:	4b02      	ldr	r3, [pc, #8]	; (80194f4 <SX1276GetStatus+0x10>)
 80194ea:	791b      	ldrb	r3, [r3, #4]
}
 80194ec:	0018      	movs	r0, r3
 80194ee:	46bd      	mov	sp, r7
 80194f0:	bd80      	pop	{r7, pc}
 80194f2:	46c0      	nop			; (mov r8, r8)
 80194f4:	200016d0 	.word	0x200016d0

080194f8 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80194f8:	b590      	push	{r4, r7, lr}
 80194fa:	b087      	sub	sp, #28
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8019500:	4b1d      	ldr	r3, [pc, #116]	; (8019578 <SX1276SetChannel+0x80>)
 8019502:	687a      	ldr	r2, [r7, #4]
 8019504:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	491c      	ldr	r1, [pc, #112]	; (801957c <SX1276SetChannel+0x84>)
 801950a:	0018      	movs	r0, r3
 801950c:	f7e6 fe04 	bl	8000118 <__udivsi3>
 8019510:	0003      	movs	r3, r0
 8019512:	617b      	str	r3, [r7, #20]
 8019514:	6979      	ldr	r1, [r7, #20]
 8019516:	000b      	movs	r3, r1
 8019518:	015b      	lsls	r3, r3, #5
 801951a:	1a5b      	subs	r3, r3, r1
 801951c:	019a      	lsls	r2, r3, #6
 801951e:	1ad2      	subs	r2, r2, r3
 8019520:	00d2      	lsls	r2, r2, #3
 8019522:	1853      	adds	r3, r2, r1
 8019524:	687a      	ldr	r2, [r7, #4]
 8019526:	1ad3      	subs	r3, r2, r3
 8019528:	613b      	str	r3, [r7, #16]
 801952a:	697b      	ldr	r3, [r7, #20]
 801952c:	021c      	lsls	r4, r3, #8
 801952e:	693b      	ldr	r3, [r7, #16]
 8019530:	021b      	lsls	r3, r3, #8
 8019532:	4a13      	ldr	r2, [pc, #76]	; (8019580 <SX1276SetChannel+0x88>)
 8019534:	4694      	mov	ip, r2
 8019536:	4463      	add	r3, ip
 8019538:	4910      	ldr	r1, [pc, #64]	; (801957c <SX1276SetChannel+0x84>)
 801953a:	0018      	movs	r0, r3
 801953c:	f7e6 fdec 	bl	8000118 <__udivsi3>
 8019540:	0003      	movs	r3, r0
 8019542:	18e3      	adds	r3, r4, r3
 8019544:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	0c1b      	lsrs	r3, r3, #16
 801954a:	b2db      	uxtb	r3, r3
 801954c:	0019      	movs	r1, r3
 801954e:	2006      	movs	r0, #6
 8019550:	f001 fc30 	bl	801adb4 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	0a1b      	lsrs	r3, r3, #8
 8019558:	b2db      	uxtb	r3, r3
 801955a:	0019      	movs	r1, r3
 801955c:	2007      	movs	r0, #7
 801955e:	f001 fc29 	bl	801adb4 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	b2db      	uxtb	r3, r3
 8019566:	0019      	movs	r1, r3
 8019568:	2008      	movs	r0, #8
 801956a:	f001 fc23 	bl	801adb4 <SX1276Write>
}
 801956e:	46c0      	nop			; (mov r8, r8)
 8019570:	46bd      	mov	sp, r7
 8019572:	b007      	add	sp, #28
 8019574:	bd90      	pop	{r4, r7, pc}
 8019576:	46c0      	nop			; (mov r8, r8)
 8019578:	200016d0 	.word	0x200016d0
 801957c:	00003d09 	.word	0x00003d09
 8019580:	00001e84 	.word	0x00001e84

08019584 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019584:	b5b0      	push	{r4, r5, r7, lr}
 8019586:	b086      	sub	sp, #24
 8019588:	af00      	add	r7, sp, #0
 801958a:	60f8      	str	r0, [r7, #12]
 801958c:	60b9      	str	r1, [r7, #8]
 801958e:	603b      	str	r3, [r7, #0]
 8019590:	1dbb      	adds	r3, r7, #6
 8019592:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8019594:	2317      	movs	r3, #23
 8019596:	18fb      	adds	r3, r7, r3
 8019598:	2201      	movs	r2, #1
 801959a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801959c:	2314      	movs	r3, #20
 801959e:	18fb      	adds	r3, r7, r3
 80195a0:	2200      	movs	r2, #0
 80195a2:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 80195a4:	2300      	movs	r3, #0
 80195a6:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 80195a8:	f001 f80c 	bl	801a5c4 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 80195ac:	2000      	movs	r0, #0
 80195ae:	f001 fba7 	bl	801ad00 <SX1276SetModem>

    SX1276SetChannel( freq );
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	0018      	movs	r0, r3
 80195b6:	f7ff ff9f 	bl	80194f8 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80195ba:	68bb      	ldr	r3, [r7, #8]
 80195bc:	0018      	movs	r0, r3
 80195be:	f001 fd07 	bl	801afd0 <GetFskBandwidthRegValue>
 80195c2:	0003      	movs	r3, r0
 80195c4:	0019      	movs	r1, r3
 80195c6:	2012      	movs	r0, #18
 80195c8:	f001 fbf4 	bl	801adb4 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80195cc:	68bb      	ldr	r3, [r7, #8]
 80195ce:	0018      	movs	r0, r3
 80195d0:	f001 fcfe 	bl	801afd0 <GetFskBandwidthRegValue>
 80195d4:	0003      	movs	r3, r0
 80195d6:	0019      	movs	r1, r3
 80195d8:	2013      	movs	r0, #19
 80195da:	f001 fbeb 	bl	801adb4 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80195de:	2005      	movs	r0, #5
 80195e0:	f001 fb21 	bl	801ac26 <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 80195e4:	2001      	movs	r0, #1
 80195e6:	f7eb fd6a 	bl	80050be <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80195ea:	f003 fb87 	bl	801ccfc <UTIL_TIMER_GetCurrentTime>
 80195ee:	0003      	movs	r3, r0
 80195f0:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80195f2:	e013      	b.n	801961c <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 80195f4:	2514      	movs	r5, #20
 80195f6:	197c      	adds	r4, r7, r5
 80195f8:	2000      	movs	r0, #0
 80195fa:	f001 fac1 	bl	801ab80 <SX1276ReadRssi>
 80195fe:	0003      	movs	r3, r0
 8019600:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8019602:	197a      	adds	r2, r7, r5
 8019604:	1dbb      	adds	r3, r7, #6
 8019606:	2100      	movs	r1, #0
 8019608:	5e52      	ldrsh	r2, [r2, r1]
 801960a:	2100      	movs	r1, #0
 801960c:	5e5b      	ldrsh	r3, [r3, r1]
 801960e:	429a      	cmp	r2, r3
 8019610:	dd04      	ble.n	801961c <SX1276IsChannelFree+0x98>
        {
            status = false;
 8019612:	2317      	movs	r3, #23
 8019614:	18fb      	adds	r3, r7, r3
 8019616:	2200      	movs	r2, #0
 8019618:	701a      	strb	r2, [r3, #0]
            break;
 801961a:	e007      	b.n	801962c <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801961c:	693b      	ldr	r3, [r7, #16]
 801961e:	0018      	movs	r0, r3
 8019620:	f003 fb80 	bl	801cd24 <UTIL_TIMER_GetElapsedTime>
 8019624:	0002      	movs	r2, r0
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	4293      	cmp	r3, r2
 801962a:	d8e3      	bhi.n	80195f4 <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 801962c:	f000 ffca 	bl	801a5c4 <SX1276SetSleep>
    return status;
 8019630:	2317      	movs	r3, #23
 8019632:	18fb      	adds	r3, r7, r3
 8019634:	781b      	ldrb	r3, [r3, #0]
}
 8019636:	0018      	movs	r0, r3
 8019638:	46bd      	mov	sp, r7
 801963a:	b006      	add	sp, #24
 801963c:	bdb0      	pop	{r4, r5, r7, pc}

0801963e <SX1276Random>:

uint32_t SX1276Random( void )
{
 801963e:	b580      	push	{r7, lr}
 8019640:	b082      	sub	sp, #8
 8019642:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8019644:	2300      	movs	r3, #0
 8019646:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8019648:	2001      	movs	r0, #1
 801964a:	f001 fb59 	bl	801ad00 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801964e:	21ff      	movs	r1, #255	; 0xff
 8019650:	2011      	movs	r0, #17
 8019652:	f001 fbaf 	bl	801adb4 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8019656:	2005      	movs	r0, #5
 8019658:	f001 fae5 	bl	801ac26 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 801965c:	1dfb      	adds	r3, r7, #7
 801965e:	2200      	movs	r2, #0
 8019660:	701a      	strb	r2, [r3, #0]
 8019662:	e015      	b.n	8019690 <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 8019664:	2001      	movs	r0, #1
 8019666:	f7eb fd2a 	bl	80050be <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 801966a:	202c      	movs	r0, #44	; 0x2c
 801966c:	f001 fbb3 	bl	801add6 <SX1276Read>
 8019670:	0003      	movs	r3, r0
 8019672:	001a      	movs	r2, r3
 8019674:	2301      	movs	r3, #1
 8019676:	401a      	ands	r2, r3
 8019678:	1dfb      	adds	r3, r7, #7
 801967a:	781b      	ldrb	r3, [r3, #0]
 801967c:	409a      	lsls	r2, r3
 801967e:	0013      	movs	r3, r2
 8019680:	683a      	ldr	r2, [r7, #0]
 8019682:	4313      	orrs	r3, r2
 8019684:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8019686:	1dfb      	adds	r3, r7, #7
 8019688:	781a      	ldrb	r2, [r3, #0]
 801968a:	1dfb      	adds	r3, r7, #7
 801968c:	3201      	adds	r2, #1
 801968e:	701a      	strb	r2, [r3, #0]
 8019690:	1dfb      	adds	r3, r7, #7
 8019692:	781b      	ldrb	r3, [r3, #0]
 8019694:	2b1f      	cmp	r3, #31
 8019696:	d9e5      	bls.n	8019664 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8019698:	f000 ff94 	bl	801a5c4 <SX1276SetSleep>

    return rnd;
 801969c:	683b      	ldr	r3, [r7, #0]
}
 801969e:	0018      	movs	r0, r3
 80196a0:	46bd      	mov	sp, r7
 80196a2:	b002      	add	sp, #8
 80196a4:	bd80      	pop	{r7, pc}
	...

080196a8 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 80196a8:	b590      	push	{r4, r7, lr}
 80196aa:	b087      	sub	sp, #28
 80196ac:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80196ae:	2317      	movs	r3, #23
 80196b0:	18fc      	adds	r4, r7, r3
 80196b2:	2009      	movs	r0, #9
 80196b4:	f001 fb8f 	bl	801add6 <SX1276Read>
 80196b8:	0003      	movs	r3, r0
 80196ba:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80196bc:	2006      	movs	r0, #6
 80196be:	f001 fb8a 	bl	801add6 <SX1276Read>
 80196c2:	0003      	movs	r3, r0
 80196c4:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80196c6:	2007      	movs	r0, #7
 80196c8:	f001 fb85 	bl	801add6 <SX1276Read>
 80196cc:	0003      	movs	r3, r0
 80196ce:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80196d0:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80196d2:	2008      	movs	r0, #8
 80196d4:	f001 fb7f 	bl	801add6 <SX1276Read>
 80196d8:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80196da:	4323      	orrs	r3, r4
 80196dc:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80196de:	693b      	ldr	r3, [r7, #16]
 80196e0:	0a1b      	lsrs	r3, r3, #8
 80196e2:	60fb      	str	r3, [r7, #12]
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	021b      	lsls	r3, r3, #8
 80196e8:	693a      	ldr	r2, [r7, #16]
 80196ea:	1ad3      	subs	r3, r2, r3
 80196ec:	60bb      	str	r3, [r7, #8]
 80196ee:	68f9      	ldr	r1, [r7, #12]
 80196f0:	000b      	movs	r3, r1
 80196f2:	015b      	lsls	r3, r3, #5
 80196f4:	1a5b      	subs	r3, r3, r1
 80196f6:	019a      	lsls	r2, r3, #6
 80196f8:	1ad2      	subs	r2, r2, r3
 80196fa:	00d2      	lsls	r2, r2, #3
 80196fc:	1850      	adds	r0, r2, r1
 80196fe:	68b9      	ldr	r1, [r7, #8]
 8019700:	000b      	movs	r3, r1
 8019702:	015b      	lsls	r3, r3, #5
 8019704:	1a5b      	subs	r3, r3, r1
 8019706:	019a      	lsls	r2, r3, #6
 8019708:	1ad2      	subs	r2, r2, r3
 801970a:	00d2      	lsls	r2, r2, #3
 801970c:	1853      	adds	r3, r2, r1
 801970e:	3380      	adds	r3, #128	; 0x80
 8019710:	0a1b      	lsrs	r3, r3, #8
 8019712:	18c3      	adds	r3, r0, r3
 8019714:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8019716:	2100      	movs	r1, #0
 8019718:	2009      	movs	r0, #9
 801971a:	f001 fb4b 	bl	801adb4 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801971e:	203b      	movs	r0, #59	; 0x3b
 8019720:	f001 fb59 	bl	801add6 <SX1276Read>
 8019724:	0003      	movs	r3, r0
 8019726:	001a      	movs	r2, r3
 8019728:	2340      	movs	r3, #64	; 0x40
 801972a:	4313      	orrs	r3, r2
 801972c:	b2db      	uxtb	r3, r3
 801972e:	0019      	movs	r1, r3
 8019730:	203b      	movs	r0, #59	; 0x3b
 8019732:	f001 fb3f 	bl	801adb4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019736:	46c0      	nop			; (mov r8, r8)
 8019738:	203b      	movs	r0, #59	; 0x3b
 801973a:	f001 fb4c 	bl	801add6 <SX1276Read>
 801973e:	0003      	movs	r3, r0
 8019740:	001a      	movs	r2, r3
 8019742:	2320      	movs	r3, #32
 8019744:	4013      	ands	r3, r2
 8019746:	2b20      	cmp	r3, #32
 8019748:	d0f6      	beq.n	8019738 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 801974a:	4b14      	ldr	r3, [pc, #80]	; (801979c <RxChainCalibration+0xf4>)
 801974c:	0018      	movs	r0, r3
 801974e:	f7ff fed3 	bl	80194f8 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8019752:	203b      	movs	r0, #59	; 0x3b
 8019754:	f001 fb3f 	bl	801add6 <SX1276Read>
 8019758:	0003      	movs	r3, r0
 801975a:	001a      	movs	r2, r3
 801975c:	2340      	movs	r3, #64	; 0x40
 801975e:	4313      	orrs	r3, r2
 8019760:	b2db      	uxtb	r3, r3
 8019762:	0019      	movs	r1, r3
 8019764:	203b      	movs	r0, #59	; 0x3b
 8019766:	f001 fb25 	bl	801adb4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801976a:	46c0      	nop			; (mov r8, r8)
 801976c:	203b      	movs	r0, #59	; 0x3b
 801976e:	f001 fb32 	bl	801add6 <SX1276Read>
 8019772:	0003      	movs	r3, r0
 8019774:	001a      	movs	r2, r3
 8019776:	2320      	movs	r3, #32
 8019778:	4013      	ands	r3, r2
 801977a:	2b20      	cmp	r3, #32
 801977c:	d0f6      	beq.n	801976c <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 801977e:	2317      	movs	r3, #23
 8019780:	18fb      	adds	r3, r7, r3
 8019782:	781b      	ldrb	r3, [r3, #0]
 8019784:	0019      	movs	r1, r3
 8019786:	2009      	movs	r0, #9
 8019788:	f001 fb14 	bl	801adb4 <SX1276Write>
    SX1276SetChannel( initialFreq );
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	0018      	movs	r0, r3
 8019790:	f7ff feb2 	bl	80194f8 <SX1276SetChannel>
}
 8019794:	46c0      	nop			; (mov r8, r8)
 8019796:	46bd      	mov	sp, r7
 8019798:	b007      	add	sp, #28
 801979a:	bd90      	pop	{r4, r7, pc}
 801979c:	33bca100 	.word	0x33bca100

080197a0 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 80197a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197a2:	46c6      	mov	lr, r8
 80197a4:	b500      	push	{lr}
 80197a6:	b084      	sub	sp, #16
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	60b9      	str	r1, [r7, #8]
 80197ac:	607a      	str	r2, [r7, #4]
 80197ae:	0019      	movs	r1, r3
 80197b0:	240f      	movs	r4, #15
 80197b2:	193b      	adds	r3, r7, r4
 80197b4:	1c02      	adds	r2, r0, #0
 80197b6:	701a      	strb	r2, [r3, #0]
 80197b8:	230e      	movs	r3, #14
 80197ba:	18fb      	adds	r3, r7, r3
 80197bc:	1c0a      	adds	r2, r1, #0
 80197be:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 80197c0:	193b      	adds	r3, r7, r4
 80197c2:	781b      	ldrb	r3, [r3, #0]
 80197c4:	0018      	movs	r0, r3
 80197c6:	f001 fa9b 	bl	801ad00 <SX1276SetModem>

    switch( modem )
 80197ca:	193b      	adds	r3, r7, r4
 80197cc:	781b      	ldrb	r3, [r3, #0]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d003      	beq.n	80197da <SX1276SetRxConfig+0x3a>
 80197d2:	2b01      	cmp	r3, #1
 80197d4:	d100      	bne.n	80197d8 <SX1276SetRxConfig+0x38>
 80197d6:	e0fb      	b.n	80199d0 <SX1276SetRxConfig+0x230>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80197d8:	e26e      	b.n	8019cb8 <SX1276SetRxConfig+0x518>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80197da:	4bbd      	ldr	r3, [pc, #756]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 80197dc:	68ba      	ldr	r2, [r7, #8]
 80197de:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80197e0:	4bbb      	ldr	r3, [pc, #748]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 80197e2:	687a      	ldr	r2, [r7, #4]
 80197e4:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80197e6:	4bba      	ldr	r3, [pc, #744]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 80197e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197ea:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80197ec:	4bb8      	ldr	r3, [pc, #736]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 80197ee:	222c      	movs	r2, #44	; 0x2c
 80197f0:	2108      	movs	r1, #8
 80197f2:	468c      	mov	ip, r1
 80197f4:	44bc      	add	ip, r7
 80197f6:	4462      	add	r2, ip
 80197f8:	2122      	movs	r1, #34	; 0x22
 80197fa:	7812      	ldrb	r2, [r2, #0]
 80197fc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80197fe:	4bb4      	ldr	r3, [pc, #720]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019800:	2130      	movs	r1, #48	; 0x30
 8019802:	2408      	movs	r4, #8
 8019804:	193a      	adds	r2, r7, r4
 8019806:	1852      	adds	r2, r2, r1
 8019808:	2123      	movs	r1, #35	; 0x23
 801980a:	7812      	ldrb	r2, [r2, #0]
 801980c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801980e:	4bb0      	ldr	r3, [pc, #704]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019810:	2034      	movs	r0, #52	; 0x34
 8019812:	193a      	adds	r2, r7, r4
 8019814:	1812      	adds	r2, r2, r0
 8019816:	2124      	movs	r1, #36	; 0x24
 8019818:	7812      	ldrb	r2, [r2, #0]
 801981a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801981c:	4bac      	ldr	r3, [pc, #688]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 801981e:	2220      	movs	r2, #32
 8019820:	2020      	movs	r0, #32
 8019822:	4684      	mov	ip, r0
 8019824:	2108      	movs	r1, #8
 8019826:	4688      	mov	r8, r1
 8019828:	44b8      	add	r8, r7
 801982a:	44c4      	add	ip, r8
 801982c:	4462      	add	r2, ip
 801982e:	2125      	movs	r1, #37	; 0x25
 8019830:	7812      	ldrb	r2, [r2, #0]
 8019832:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8019834:	4ba6      	ldr	r3, [pc, #664]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019836:	2224      	movs	r2, #36	; 0x24
 8019838:	2020      	movs	r0, #32
 801983a:	4684      	mov	ip, r0
 801983c:	2108      	movs	r1, #8
 801983e:	4688      	mov	r8, r1
 8019840:	44b8      	add	r8, r7
 8019842:	44c4      	add	ip, r8
 8019844:	4462      	add	r2, ip
 8019846:	2126      	movs	r1, #38	; 0x26
 8019848:	7812      	ldrb	r2, [r2, #0]
 801984a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 801984c:	4ba0      	ldr	r3, [pc, #640]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 801984e:	2624      	movs	r6, #36	; 0x24
 8019850:	193a      	adds	r2, r7, r4
 8019852:	1992      	adds	r2, r2, r6
 8019854:	8812      	ldrh	r2, [r2, #0]
 8019856:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8019858:	2328      	movs	r3, #40	; 0x28
 801985a:	2208      	movs	r2, #8
 801985c:	4694      	mov	ip, r2
 801985e:	44bc      	add	ip, r7
 8019860:	4463      	add	r3, ip
 8019862:	881b      	ldrh	r3, [r3, #0]
 8019864:	0018      	movs	r0, r3
 8019866:	f7e9 f9a9 	bl	8002bbc <__aeabi_i2d>
 801986a:	0004      	movs	r4, r0
 801986c:	000d      	movs	r5, r1
 801986e:	6878      	ldr	r0, [r7, #4]
 8019870:	f7e9 f9d4 	bl	8002c1c <__aeabi_ui2d>
 8019874:	0002      	movs	r2, r0
 8019876:	000b      	movs	r3, r1
 8019878:	2000      	movs	r0, #0
 801987a:	4996      	ldr	r1, [pc, #600]	; (8019ad4 <SX1276SetRxConfig+0x334>)
 801987c:	f7e7 ff64 	bl	8001748 <__aeabi_ddiv>
 8019880:	0002      	movs	r2, r0
 8019882:	000b      	movs	r3, r1
 8019884:	0010      	movs	r0, r2
 8019886:	0019      	movs	r1, r3
 8019888:	2200      	movs	r2, #0
 801988a:	4b93      	ldr	r3, [pc, #588]	; (8019ad8 <SX1276SetRxConfig+0x338>)
 801988c:	f7e8 fb62 	bl	8001f54 <__aeabi_dmul>
 8019890:	0002      	movs	r2, r0
 8019892:	000b      	movs	r3, r1
 8019894:	0020      	movs	r0, r4
 8019896:	0029      	movs	r1, r5
 8019898:	f7e8 fb5c 	bl	8001f54 <__aeabi_dmul>
 801989c:	0002      	movs	r2, r0
 801989e:	000b      	movs	r3, r1
 80198a0:	0010      	movs	r0, r2
 80198a2:	0019      	movs	r1, r3
 80198a4:	2200      	movs	r2, #0
 80198a6:	4b8d      	ldr	r3, [pc, #564]	; (8019adc <SX1276SetRxConfig+0x33c>)
 80198a8:	f7e8 fb54 	bl	8001f54 <__aeabi_dmul>
 80198ac:	0002      	movs	r2, r0
 80198ae:	000b      	movs	r3, r1
 80198b0:	0010      	movs	r0, r2
 80198b2:	0019      	movs	r1, r3
 80198b4:	f7e6 fea2 	bl	80005fc <__aeabi_d2uiz>
 80198b8:	0002      	movs	r2, r0
 80198ba:	4b85      	ldr	r3, [pc, #532]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 80198bc:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80198be:	6878      	ldr	r0, [r7, #4]
 80198c0:	f7e9 f9ac 	bl	8002c1c <__aeabi_ui2d>
 80198c4:	0002      	movs	r2, r0
 80198c6:	000b      	movs	r3, r1
 80198c8:	2000      	movs	r0, #0
 80198ca:	4985      	ldr	r1, [pc, #532]	; (8019ae0 <SX1276SetRxConfig+0x340>)
 80198cc:	f7e7 ff3c 	bl	8001748 <__aeabi_ddiv>
 80198d0:	0002      	movs	r2, r0
 80198d2:	000b      	movs	r3, r1
 80198d4:	0010      	movs	r0, r2
 80198d6:	0019      	movs	r1, r3
 80198d8:	f7e6 fe90 	bl	80005fc <__aeabi_d2uiz>
 80198dc:	0003      	movs	r3, r0
 80198de:	b29b      	uxth	r3, r3
 80198e0:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	0a1b      	lsrs	r3, r3, #8
 80198e6:	b2db      	uxtb	r3, r3
 80198e8:	0019      	movs	r1, r3
 80198ea:	2002      	movs	r0, #2
 80198ec:	f001 fa62 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	b2db      	uxtb	r3, r3
 80198f4:	0019      	movs	r1, r3
 80198f6:	2003      	movs	r0, #3
 80198f8:	f001 fa5c 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	0018      	movs	r0, r3
 8019900:	f001 fb66 	bl	801afd0 <GetFskBandwidthRegValue>
 8019904:	0003      	movs	r3, r0
 8019906:	0019      	movs	r1, r3
 8019908:	2012      	movs	r0, #18
 801990a:	f001 fa53 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 801990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019910:	0018      	movs	r0, r3
 8019912:	f001 fb5d 	bl	801afd0 <GetFskBandwidthRegValue>
 8019916:	0003      	movs	r3, r0
 8019918:	0019      	movs	r1, r3
 801991a:	2013      	movs	r0, #19
 801991c:	f001 fa4a 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019920:	2408      	movs	r4, #8
 8019922:	193b      	adds	r3, r7, r4
 8019924:	199b      	adds	r3, r3, r6
 8019926:	881b      	ldrh	r3, [r3, #0]
 8019928:	0a1b      	lsrs	r3, r3, #8
 801992a:	b29b      	uxth	r3, r3
 801992c:	b2db      	uxtb	r3, r3
 801992e:	0019      	movs	r1, r3
 8019930:	2025      	movs	r0, #37	; 0x25
 8019932:	f001 fa3f 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019936:	193b      	adds	r3, r7, r4
 8019938:	199b      	adds	r3, r3, r6
 801993a:	881b      	ldrh	r3, [r3, #0]
 801993c:	b2db      	uxtb	r3, r3
 801993e:	0019      	movs	r1, r3
 8019940:	2026      	movs	r0, #38	; 0x26
 8019942:	f001 fa37 	bl	801adb4 <SX1276Write>
            if( fixLen == 1 )
 8019946:	222c      	movs	r2, #44	; 0x2c
 8019948:	193b      	adds	r3, r7, r4
 801994a:	189b      	adds	r3, r3, r2
 801994c:	781b      	ldrb	r3, [r3, #0]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d008      	beq.n	8019964 <SX1276SetRxConfig+0x1c4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8019952:	2130      	movs	r1, #48	; 0x30
 8019954:	193b      	adds	r3, r7, r4
 8019956:	185b      	adds	r3, r3, r1
 8019958:	781b      	ldrb	r3, [r3, #0]
 801995a:	0019      	movs	r1, r3
 801995c:	2032      	movs	r0, #50	; 0x32
 801995e:	f001 fa29 	bl	801adb4 <SX1276Write>
 8019962:	e003      	b.n	801996c <SX1276SetRxConfig+0x1cc>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8019964:	21ff      	movs	r1, #255	; 0xff
 8019966:	2032      	movs	r0, #50	; 0x32
 8019968:	f001 fa24 	bl	801adb4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801996c:	2030      	movs	r0, #48	; 0x30
 801996e:	f001 fa32 	bl	801add6 <SX1276Read>
 8019972:	0003      	movs	r3, r0
 8019974:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8019976:	226f      	movs	r2, #111	; 0x6f
 8019978:	4013      	ands	r3, r2
 801997a:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801997c:	232c      	movs	r3, #44	; 0x2c
 801997e:	2108      	movs	r1, #8
 8019980:	468c      	mov	ip, r1
 8019982:	44bc      	add	ip, r7
 8019984:	4463      	add	r3, ip
 8019986:	781b      	ldrb	r3, [r3, #0]
 8019988:	2b00      	cmp	r3, #0
 801998a:	d001      	beq.n	8019990 <SX1276SetRxConfig+0x1f0>
 801998c:	2300      	movs	r3, #0
 801998e:	e001      	b.n	8019994 <SX1276SetRxConfig+0x1f4>
 8019990:	2380      	movs	r3, #128	; 0x80
 8019992:	425b      	negs	r3, r3
 8019994:	4313      	orrs	r3, r2
 8019996:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019998:	2334      	movs	r3, #52	; 0x34
 801999a:	2108      	movs	r1, #8
 801999c:	468c      	mov	ip, r1
 801999e:	44bc      	add	ip, r7
 80199a0:	4463      	add	r3, ip
 80199a2:	781b      	ldrb	r3, [r3, #0]
 80199a4:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80199a6:	b25b      	sxtb	r3, r3
 80199a8:	4313      	orrs	r3, r2
 80199aa:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80199ac:	b2db      	uxtb	r3, r3
 80199ae:	0019      	movs	r1, r3
 80199b0:	2030      	movs	r0, #48	; 0x30
 80199b2:	f001 f9ff 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80199b6:	2031      	movs	r0, #49	; 0x31
 80199b8:	f001 fa0d 	bl	801add6 <SX1276Read>
 80199bc:	0003      	movs	r3, r0
 80199be:	001a      	movs	r2, r3
 80199c0:	2340      	movs	r3, #64	; 0x40
 80199c2:	4313      	orrs	r3, r2
 80199c4:	b2db      	uxtb	r3, r3
 80199c6:	0019      	movs	r1, r3
 80199c8:	2031      	movs	r0, #49	; 0x31
 80199ca:	f001 f9f3 	bl	801adb4 <SX1276Write>
        break;
 80199ce:	e173      	b.n	8019cb8 <SX1276SetRxConfig+0x518>
            if( bandwidth > 2 )
 80199d0:	68bb      	ldr	r3, [r7, #8]
 80199d2:	2b02      	cmp	r3, #2
 80199d4:	d900      	bls.n	80199d8 <SX1276SetRxConfig+0x238>
                while( 1 );
 80199d6:	e7fe      	b.n	80199d6 <SX1276SetRxConfig+0x236>
            bandwidth += 7;
 80199d8:	68bb      	ldr	r3, [r7, #8]
 80199da:	3307      	adds	r3, #7
 80199dc:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80199de:	4b3c      	ldr	r3, [pc, #240]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 80199e0:	68ba      	ldr	r2, [r7, #8]
 80199e2:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80199e4:	4b3a      	ldr	r3, [pc, #232]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 80199e6:	687a      	ldr	r2, [r7, #4]
 80199e8:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80199ea:	4b39      	ldr	r3, [pc, #228]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 80199ec:	220e      	movs	r2, #14
 80199ee:	18ba      	adds	r2, r7, r2
 80199f0:	214d      	movs	r1, #77	; 0x4d
 80199f2:	7812      	ldrb	r2, [r2, #0]
 80199f4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80199f6:	4b36      	ldr	r3, [pc, #216]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 80199f8:	2224      	movs	r2, #36	; 0x24
 80199fa:	2108      	movs	r1, #8
 80199fc:	468c      	mov	ip, r1
 80199fe:	44bc      	add	ip, r7
 8019a00:	4462      	add	r2, ip
 8019a02:	214e      	movs	r1, #78	; 0x4e
 8019a04:	8812      	ldrh	r2, [r2, #0]
 8019a06:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019a08:	4b31      	ldr	r3, [pc, #196]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019a0a:	222c      	movs	r2, #44	; 0x2c
 8019a0c:	2108      	movs	r1, #8
 8019a0e:	468c      	mov	ip, r1
 8019a10:	44bc      	add	ip, r7
 8019a12:	4462      	add	r2, ip
 8019a14:	2150      	movs	r1, #80	; 0x50
 8019a16:	7812      	ldrb	r2, [r2, #0]
 8019a18:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8019a1a:	4b2d      	ldr	r3, [pc, #180]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019a1c:	2230      	movs	r2, #48	; 0x30
 8019a1e:	2108      	movs	r1, #8
 8019a20:	468c      	mov	ip, r1
 8019a22:	44bc      	add	ip, r7
 8019a24:	4462      	add	r2, ip
 8019a26:	2151      	movs	r1, #81	; 0x51
 8019a28:	7812      	ldrb	r2, [r2, #0]
 8019a2a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019a2c:	4b28      	ldr	r3, [pc, #160]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019a2e:	2234      	movs	r2, #52	; 0x34
 8019a30:	2108      	movs	r1, #8
 8019a32:	468c      	mov	ip, r1
 8019a34:	44bc      	add	ip, r7
 8019a36:	4462      	add	r2, ip
 8019a38:	2152      	movs	r1, #82	; 0x52
 8019a3a:	7812      	ldrb	r2, [r2, #0]
 8019a3c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019a3e:	4b24      	ldr	r3, [pc, #144]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019a40:	2238      	movs	r2, #56	; 0x38
 8019a42:	2108      	movs	r1, #8
 8019a44:	468c      	mov	ip, r1
 8019a46:	44bc      	add	ip, r7
 8019a48:	4462      	add	r2, ip
 8019a4a:	2153      	movs	r1, #83	; 0x53
 8019a4c:	7812      	ldrb	r2, [r2, #0]
 8019a4e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019a50:	4b1f      	ldr	r3, [pc, #124]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019a52:	223c      	movs	r2, #60	; 0x3c
 8019a54:	2108      	movs	r1, #8
 8019a56:	468c      	mov	ip, r1
 8019a58:	44bc      	add	ip, r7
 8019a5a:	4462      	add	r2, ip
 8019a5c:	2154      	movs	r1, #84	; 0x54
 8019a5e:	7812      	ldrb	r2, [r2, #0]
 8019a60:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019a62:	4b1b      	ldr	r3, [pc, #108]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019a64:	2220      	movs	r2, #32
 8019a66:	2120      	movs	r1, #32
 8019a68:	468c      	mov	ip, r1
 8019a6a:	2108      	movs	r1, #8
 8019a6c:	4688      	mov	r8, r1
 8019a6e:	44b8      	add	r8, r7
 8019a70:	44c4      	add	ip, r8
 8019a72:	4462      	add	r2, ip
 8019a74:	2155      	movs	r1, #85	; 0x55
 8019a76:	7812      	ldrb	r2, [r2, #0]
 8019a78:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8019a7a:	4b15      	ldr	r3, [pc, #84]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019a7c:	2224      	movs	r2, #36	; 0x24
 8019a7e:	2120      	movs	r1, #32
 8019a80:	468c      	mov	ip, r1
 8019a82:	2108      	movs	r1, #8
 8019a84:	4688      	mov	r8, r1
 8019a86:	44b8      	add	r8, r7
 8019a88:	44c4      	add	ip, r8
 8019a8a:	4462      	add	r2, ip
 8019a8c:	2156      	movs	r1, #86	; 0x56
 8019a8e:	7812      	ldrb	r2, [r2, #0]
 8019a90:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	2b0c      	cmp	r3, #12
 8019a96:	d902      	bls.n	8019a9e <SX1276SetRxConfig+0x2fe>
                datarate = 12;
 8019a98:	230c      	movs	r3, #12
 8019a9a:	607b      	str	r3, [r7, #4]
 8019a9c:	e004      	b.n	8019aa8 <SX1276SetRxConfig+0x308>
            else if( datarate < 6 )
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	2b05      	cmp	r3, #5
 8019aa2:	d801      	bhi.n	8019aa8 <SX1276SetRxConfig+0x308>
                datarate = 6;
 8019aa4:	2306      	movs	r3, #6
 8019aa6:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019aa8:	68bb      	ldr	r3, [r7, #8]
 8019aaa:	2b07      	cmp	r3, #7
 8019aac:	d105      	bne.n	8019aba <SX1276SetRxConfig+0x31a>
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	2b0b      	cmp	r3, #11
 8019ab2:	d008      	beq.n	8019ac6 <SX1276SetRxConfig+0x326>
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2b0c      	cmp	r3, #12
 8019ab8:	d005      	beq.n	8019ac6 <SX1276SetRxConfig+0x326>
 8019aba:	68bb      	ldr	r3, [r7, #8]
 8019abc:	2b08      	cmp	r3, #8
 8019abe:	d111      	bne.n	8019ae4 <SX1276SetRxConfig+0x344>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	2b0c      	cmp	r3, #12
 8019ac4:	d10e      	bne.n	8019ae4 <SX1276SetRxConfig+0x344>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019ac6:	4b02      	ldr	r3, [pc, #8]	; (8019ad0 <SX1276SetRxConfig+0x330>)
 8019ac8:	224c      	movs	r2, #76	; 0x4c
 8019aca:	2101      	movs	r1, #1
 8019acc:	5499      	strb	r1, [r3, r2]
 8019ace:	e00d      	b.n	8019aec <SX1276SetRxConfig+0x34c>
 8019ad0:	200016d0 	.word	0x200016d0
 8019ad4:	3ff00000 	.word	0x3ff00000
 8019ad8:	40200000 	.word	0x40200000
 8019adc:	408f4000 	.word	0x408f4000
 8019ae0:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019ae4:	4b77      	ldr	r3, [pc, #476]	; (8019cc4 <SX1276SetRxConfig+0x524>)
 8019ae6:	224c      	movs	r2, #76	; 0x4c
 8019ae8:	2100      	movs	r1, #0
 8019aea:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019aec:	201d      	movs	r0, #29
 8019aee:	f001 f972 	bl	801add6 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019af2:	68bb      	ldr	r3, [r7, #8]
 8019af4:	b2db      	uxtb	r3, r3
 8019af6:	011b      	lsls	r3, r3, #4
 8019af8:	b2da      	uxtb	r2, r3
 8019afa:	230e      	movs	r3, #14
 8019afc:	18fb      	adds	r3, r7, r3
 8019afe:	781b      	ldrb	r3, [r3, #0]
 8019b00:	18db      	adds	r3, r3, r3
 8019b02:	b2db      	uxtb	r3, r3
 8019b04:	4313      	orrs	r3, r2
 8019b06:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019b08:	242c      	movs	r4, #44	; 0x2c
 8019b0a:	2608      	movs	r6, #8
 8019b0c:	19bb      	adds	r3, r7, r6
 8019b0e:	191b      	adds	r3, r3, r4
 8019b10:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019b12:	4313      	orrs	r3, r2
 8019b14:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019b16:	0019      	movs	r1, r3
 8019b18:	201d      	movs	r0, #29
 8019b1a:	f001 f94b 	bl	801adb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019b1e:	201e      	movs	r0, #30
 8019b20:	f001 f959 	bl	801add6 <SX1276Read>
 8019b24:	0003      	movs	r3, r0
 8019b26:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8019b28:	2308      	movs	r3, #8
 8019b2a:	4013      	ands	r3, r2
 8019b2c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	b2db      	uxtb	r3, r3
 8019b32:	011b      	lsls	r3, r3, #4
 8019b34:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8019b36:	4313      	orrs	r3, r2
 8019b38:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019b3a:	2334      	movs	r3, #52	; 0x34
 8019b3c:	2108      	movs	r1, #8
 8019b3e:	468c      	mov	ip, r1
 8019b40:	44bc      	add	ip, r7
 8019b42:	4463      	add	r3, ip
 8019b44:	781b      	ldrb	r3, [r3, #0]
 8019b46:	009b      	lsls	r3, r3, #2
 8019b48:	b2db      	uxtb	r3, r3
 8019b4a:	4313      	orrs	r3, r2
 8019b4c:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8019b4e:	2528      	movs	r5, #40	; 0x28
 8019b50:	19bb      	adds	r3, r7, r6
 8019b52:	195b      	adds	r3, r3, r5
 8019b54:	881b      	ldrh	r3, [r3, #0]
 8019b56:	0a1b      	lsrs	r3, r3, #8
 8019b58:	b29b      	uxth	r3, r3
 8019b5a:	b2db      	uxtb	r3, r3
 8019b5c:	2103      	movs	r1, #3
 8019b5e:	400b      	ands	r3, r1
 8019b60:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019b62:	4313      	orrs	r3, r2
 8019b64:	b2db      	uxtb	r3, r3
 8019b66:	0019      	movs	r1, r3
 8019b68:	201e      	movs	r0, #30
 8019b6a:	f001 f923 	bl	801adb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019b6e:	2026      	movs	r0, #38	; 0x26
 8019b70:	f001 f931 	bl	801add6 <SX1276Read>
 8019b74:	0003      	movs	r3, r0
 8019b76:	b25b      	sxtb	r3, r3
 8019b78:	2208      	movs	r2, #8
 8019b7a:	4393      	bics	r3, r2
 8019b7c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019b7e:	4b51      	ldr	r3, [pc, #324]	; (8019cc4 <SX1276SetRxConfig+0x524>)
 8019b80:	214c      	movs	r1, #76	; 0x4c
 8019b82:	5c5b      	ldrb	r3, [r3, r1]
 8019b84:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019b86:	b25b      	sxtb	r3, r3
 8019b88:	4313      	orrs	r3, r2
 8019b8a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019b8c:	b2db      	uxtb	r3, r3
 8019b8e:	0019      	movs	r1, r3
 8019b90:	2026      	movs	r0, #38	; 0x26
 8019b92:	f001 f90f 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8019b96:	19bb      	adds	r3, r7, r6
 8019b98:	195b      	adds	r3, r3, r5
 8019b9a:	881b      	ldrh	r3, [r3, #0]
 8019b9c:	b2db      	uxtb	r3, r3
 8019b9e:	0019      	movs	r1, r3
 8019ba0:	201f      	movs	r0, #31
 8019ba2:	f001 f907 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019ba6:	2524      	movs	r5, #36	; 0x24
 8019ba8:	19bb      	adds	r3, r7, r6
 8019baa:	195b      	adds	r3, r3, r5
 8019bac:	881b      	ldrh	r3, [r3, #0]
 8019bae:	0a1b      	lsrs	r3, r3, #8
 8019bb0:	b29b      	uxth	r3, r3
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	0019      	movs	r1, r3
 8019bb6:	2020      	movs	r0, #32
 8019bb8:	f001 f8fc 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019bbc:	19bb      	adds	r3, r7, r6
 8019bbe:	195b      	adds	r3, r3, r5
 8019bc0:	881b      	ldrh	r3, [r3, #0]
 8019bc2:	b2db      	uxtb	r3, r3
 8019bc4:	0019      	movs	r1, r3
 8019bc6:	2021      	movs	r0, #33	; 0x21
 8019bc8:	f001 f8f4 	bl	801adb4 <SX1276Write>
            if( fixLen == 1 )
 8019bcc:	19bb      	adds	r3, r7, r6
 8019bce:	191b      	adds	r3, r3, r4
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d009      	beq.n	8019bea <SX1276SetRxConfig+0x44a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8019bd6:	2330      	movs	r3, #48	; 0x30
 8019bd8:	2208      	movs	r2, #8
 8019bda:	4694      	mov	ip, r2
 8019bdc:	44bc      	add	ip, r7
 8019bde:	4463      	add	r3, ip
 8019be0:	781b      	ldrb	r3, [r3, #0]
 8019be2:	0019      	movs	r1, r3
 8019be4:	2022      	movs	r0, #34	; 0x22
 8019be6:	f001 f8e5 	bl	801adb4 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019bea:	4b36      	ldr	r3, [pc, #216]	; (8019cc4 <SX1276SetRxConfig+0x524>)
 8019bec:	2253      	movs	r2, #83	; 0x53
 8019bee:	5c9b      	ldrb	r3, [r3, r2]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d013      	beq.n	8019c1c <SX1276SetRxConfig+0x47c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019bf4:	2044      	movs	r0, #68	; 0x44
 8019bf6:	f001 f8ee 	bl	801add6 <SX1276Read>
 8019bfa:	0003      	movs	r3, r0
 8019bfc:	001a      	movs	r2, r3
 8019bfe:	2380      	movs	r3, #128	; 0x80
 8019c00:	425b      	negs	r3, r3
 8019c02:	4313      	orrs	r3, r2
 8019c04:	b2db      	uxtb	r3, r3
 8019c06:	0019      	movs	r1, r3
 8019c08:	2044      	movs	r0, #68	; 0x44
 8019c0a:	f001 f8d3 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019c0e:	4b2d      	ldr	r3, [pc, #180]	; (8019cc4 <SX1276SetRxConfig+0x524>)
 8019c10:	2254      	movs	r2, #84	; 0x54
 8019c12:	5c9b      	ldrb	r3, [r3, r2]
 8019c14:	0019      	movs	r1, r3
 8019c16:	2024      	movs	r0, #36	; 0x24
 8019c18:	f001 f8cc 	bl	801adb4 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8019c1c:	68bb      	ldr	r3, [r7, #8]
 8019c1e:	2b09      	cmp	r3, #9
 8019c20:	d10d      	bne.n	8019c3e <SX1276SetRxConfig+0x49e>
 8019c22:	4b28      	ldr	r3, [pc, #160]	; (8019cc4 <SX1276SetRxConfig+0x524>)
 8019c24:	689b      	ldr	r3, [r3, #8]
 8019c26:	4a28      	ldr	r2, [pc, #160]	; (8019cc8 <SX1276SetRxConfig+0x528>)
 8019c28:	4293      	cmp	r3, r2
 8019c2a:	d908      	bls.n	8019c3e <SX1276SetRxConfig+0x49e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019c2c:	2102      	movs	r1, #2
 8019c2e:	2036      	movs	r0, #54	; 0x36
 8019c30:	f001 f8c0 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8019c34:	2164      	movs	r1, #100	; 0x64
 8019c36:	203a      	movs	r0, #58	; 0x3a
 8019c38:	f001 f8bc 	bl	801adb4 <SX1276Write>
 8019c3c:	e00f      	b.n	8019c5e <SX1276SetRxConfig+0x4be>
            else if( bandwidth == 9 )
 8019c3e:	68bb      	ldr	r3, [r7, #8]
 8019c40:	2b09      	cmp	r3, #9
 8019c42:	d108      	bne.n	8019c56 <SX1276SetRxConfig+0x4b6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019c44:	2102      	movs	r1, #2
 8019c46:	2036      	movs	r0, #54	; 0x36
 8019c48:	f001 f8b4 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8019c4c:	217f      	movs	r1, #127	; 0x7f
 8019c4e:	203a      	movs	r0, #58	; 0x3a
 8019c50:	f001 f8b0 	bl	801adb4 <SX1276Write>
 8019c54:	e003      	b.n	8019c5e <SX1276SetRxConfig+0x4be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8019c56:	2103      	movs	r1, #3
 8019c58:	2036      	movs	r0, #54	; 0x36
 8019c5a:	f001 f8ab 	bl	801adb4 <SX1276Write>
            if( datarate == 6 )
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	2b06      	cmp	r3, #6
 8019c62:	d114      	bne.n	8019c8e <SX1276SetRxConfig+0x4ee>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019c64:	2031      	movs	r0, #49	; 0x31
 8019c66:	f001 f8b6 	bl	801add6 <SX1276Read>
 8019c6a:	0003      	movs	r3, r0
 8019c6c:	b25b      	sxtb	r3, r3
 8019c6e:	2207      	movs	r2, #7
 8019c70:	4393      	bics	r3, r2
 8019c72:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019c74:	2205      	movs	r2, #5
 8019c76:	4313      	orrs	r3, r2
 8019c78:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019c7a:	b2db      	uxtb	r3, r3
 8019c7c:	0019      	movs	r1, r3
 8019c7e:	2031      	movs	r0, #49	; 0x31
 8019c80:	f001 f898 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019c84:	210c      	movs	r1, #12
 8019c86:	2037      	movs	r0, #55	; 0x37
 8019c88:	f001 f894 	bl	801adb4 <SX1276Write>
        break;
 8019c8c:	e013      	b.n	8019cb6 <SX1276SetRxConfig+0x516>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019c8e:	2031      	movs	r0, #49	; 0x31
 8019c90:	f001 f8a1 	bl	801add6 <SX1276Read>
 8019c94:	0003      	movs	r3, r0
 8019c96:	b25b      	sxtb	r3, r3
 8019c98:	2207      	movs	r2, #7
 8019c9a:	4393      	bics	r3, r2
 8019c9c:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019c9e:	2203      	movs	r2, #3
 8019ca0:	4313      	orrs	r3, r2
 8019ca2:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019ca4:	b2db      	uxtb	r3, r3
 8019ca6:	0019      	movs	r1, r3
 8019ca8:	2031      	movs	r0, #49	; 0x31
 8019caa:	f001 f883 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019cae:	210a      	movs	r1, #10
 8019cb0:	2037      	movs	r0, #55	; 0x37
 8019cb2:	f001 f87f 	bl	801adb4 <SX1276Write>
        break;
 8019cb6:	46c0      	nop			; (mov r8, r8)
}
 8019cb8:	46c0      	nop			; (mov r8, r8)
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	b004      	add	sp, #16
 8019cbe:	bc80      	pop	{r7}
 8019cc0:	46b8      	mov	r8, r7
 8019cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cc4:	200016d0 	.word	0x200016d0
 8019cc8:	1f4add40 	.word	0x1f4add40

08019ccc <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cce:	46c6      	mov	lr, r8
 8019cd0:	b500      	push	{lr}
 8019cd2:	b084      	sub	sp, #16
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	60ba      	str	r2, [r7, #8]
 8019cd8:	607b      	str	r3, [r7, #4]
 8019cda:	240f      	movs	r4, #15
 8019cdc:	193b      	adds	r3, r7, r4
 8019cde:	1c02      	adds	r2, r0, #0
 8019ce0:	701a      	strb	r2, [r3, #0]
 8019ce2:	230e      	movs	r3, #14
 8019ce4:	18fb      	adds	r3, r7, r3
 8019ce6:	1c0a      	adds	r2, r1, #0
 8019ce8:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8019cea:	4bb7      	ldr	r3, [pc, #732]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019cec:	791b      	ldrb	r3, [r3, #4]
 8019cee:	2b01      	cmp	r3, #1
 8019cf0:	d108      	bne.n	8019d04 <SX1276SetTxConfig+0x38>
 8019cf2:	193b      	adds	r3, r7, r4
 8019cf4:	781b      	ldrb	r3, [r3, #0]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d104      	bne.n	8019d04 <SX1276SetTxConfig+0x38>
    {
        SX1276SetSleep( );
 8019cfa:	f000 fc63 	bl	801a5c4 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8019cfe:	2001      	movs	r0, #1
 8019d00:	f7eb f9dd 	bl	80050be <HAL_Delay>
    }

    SX1276SetModem( modem );
 8019d04:	240f      	movs	r4, #15
 8019d06:	193b      	adds	r3, r7, r4
 8019d08:	781b      	ldrb	r3, [r3, #0]
 8019d0a:	0018      	movs	r0, r3
 8019d0c:	f000 fff8 	bl	801ad00 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8019d10:	250e      	movs	r5, #14
 8019d12:	197b      	adds	r3, r7, r5
 8019d14:	781b      	ldrb	r3, [r3, #0]
 8019d16:	b25b      	sxtb	r3, r3
 8019d18:	0018      	movs	r0, r3
 8019d1a:	f000 fb41 	bl	801a3a0 <SX1276SetRfTxPower>
    power = 7;  // Изменение параметра мощности передачи
 8019d1e:	197b      	adds	r3, r7, r5
 8019d20:	2207      	movs	r2, #7
 8019d22:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8019d24:	193b      	adds	r3, r7, r4
 8019d26:	781b      	ldrb	r3, [r3, #0]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d003      	beq.n	8019d34 <SX1276SetTxConfig+0x68>
 8019d2c:	2b01      	cmp	r3, #1
 8019d2e:	d100      	bne.n	8019d32 <SX1276SetTxConfig+0x66>
 8019d30:	e0c1      	b.n	8019eb6 <SX1276SetTxConfig+0x1ea>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8019d32:	e207      	b.n	801a144 <SX1276SetTxConfig+0x478>
            SX1276.Settings.Fsk.Power = power;
 8019d34:	4ba4      	ldr	r3, [pc, #656]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019d36:	220e      	movs	r2, #14
 8019d38:	18ba      	adds	r2, r7, r2
 8019d3a:	7812      	ldrb	r2, [r2, #0]
 8019d3c:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8019d3e:	4ba2      	ldr	r3, [pc, #648]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019d40:	68ba      	ldr	r2, [r7, #8]
 8019d42:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8019d44:	4ba0      	ldr	r3, [pc, #640]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019d46:	687a      	ldr	r2, [r7, #4]
 8019d48:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8019d4a:	4b9f      	ldr	r3, [pc, #636]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d4e:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019d50:	4b9d      	ldr	r3, [pc, #628]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019d52:	2420      	movs	r4, #32
 8019d54:	2608      	movs	r6, #8
 8019d56:	2208      	movs	r2, #8
 8019d58:	18ba      	adds	r2, r7, r2
 8019d5a:	1992      	adds	r2, r2, r6
 8019d5c:	1912      	adds	r2, r2, r4
 8019d5e:	8812      	ldrh	r2, [r2, #0]
 8019d60:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019d62:	4b99      	ldr	r3, [pc, #612]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019d64:	2524      	movs	r5, #36	; 0x24
 8019d66:	2208      	movs	r2, #8
 8019d68:	18ba      	adds	r2, r7, r2
 8019d6a:	1992      	adds	r2, r2, r6
 8019d6c:	1952      	adds	r2, r2, r5
 8019d6e:	2122      	movs	r1, #34	; 0x22
 8019d70:	7812      	ldrb	r2, [r2, #0]
 8019d72:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019d74:	4b94      	ldr	r3, [pc, #592]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019d76:	2228      	movs	r2, #40	; 0x28
 8019d78:	2108      	movs	r1, #8
 8019d7a:	468c      	mov	ip, r1
 8019d7c:	2108      	movs	r1, #8
 8019d7e:	4688      	mov	r8, r1
 8019d80:	44b8      	add	r8, r7
 8019d82:	44c4      	add	ip, r8
 8019d84:	4462      	add	r2, ip
 8019d86:	2124      	movs	r1, #36	; 0x24
 8019d88:	7812      	ldrb	r2, [r2, #0]
 8019d8a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019d8c:	4b8e      	ldr	r3, [pc, #568]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019d8e:	2234      	movs	r2, #52	; 0x34
 8019d90:	2108      	movs	r1, #8
 8019d92:	468c      	mov	ip, r1
 8019d94:	2108      	movs	r1, #8
 8019d96:	4688      	mov	r8, r1
 8019d98:	44b8      	add	r8, r7
 8019d9a:	44c4      	add	ip, r8
 8019d9c:	4462      	add	r2, ip
 8019d9e:	2125      	movs	r1, #37	; 0x25
 8019da0:	7812      	ldrb	r2, [r2, #0]
 8019da2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8019da4:	4b88      	ldr	r3, [pc, #544]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019da8:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8019daa:	68b8      	ldr	r0, [r7, #8]
 8019dac:	f7e8 ff36 	bl	8002c1c <__aeabi_ui2d>
 8019db0:	2200      	movs	r2, #0
 8019db2:	4b86      	ldr	r3, [pc, #536]	; (8019fcc <SX1276SetTxConfig+0x300>)
 8019db4:	f7e7 fcc8 	bl	8001748 <__aeabi_ddiv>
 8019db8:	0002      	movs	r2, r0
 8019dba:	000b      	movs	r3, r1
 8019dbc:	0010      	movs	r0, r2
 8019dbe:	0019      	movs	r1, r3
 8019dc0:	f7e6 fc1c 	bl	80005fc <__aeabi_d2uiz>
 8019dc4:	0003      	movs	r3, r0
 8019dc6:	b29b      	uxth	r3, r3
 8019dc8:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8019dca:	68bb      	ldr	r3, [r7, #8]
 8019dcc:	0a1b      	lsrs	r3, r3, #8
 8019dce:	b2db      	uxtb	r3, r3
 8019dd0:	0019      	movs	r1, r3
 8019dd2:	2004      	movs	r0, #4
 8019dd4:	f000 ffee 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8019dd8:	68bb      	ldr	r3, [r7, #8]
 8019dda:	b2db      	uxtb	r3, r3
 8019ddc:	0019      	movs	r1, r3
 8019dde:	2005      	movs	r0, #5
 8019de0:	f000 ffe8 	bl	801adb4 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019de6:	f7e8 ff19 	bl	8002c1c <__aeabi_ui2d>
 8019dea:	0002      	movs	r2, r0
 8019dec:	000b      	movs	r3, r1
 8019dee:	2000      	movs	r0, #0
 8019df0:	4977      	ldr	r1, [pc, #476]	; (8019fd0 <SX1276SetTxConfig+0x304>)
 8019df2:	f7e7 fca9 	bl	8001748 <__aeabi_ddiv>
 8019df6:	0002      	movs	r2, r0
 8019df8:	000b      	movs	r3, r1
 8019dfa:	0010      	movs	r0, r2
 8019dfc:	0019      	movs	r1, r3
 8019dfe:	f7e6 fbfd 	bl	80005fc <__aeabi_d2uiz>
 8019e02:	0003      	movs	r3, r0
 8019e04:	b29b      	uxth	r3, r3
 8019e06:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8019e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e0a:	0a1b      	lsrs	r3, r3, #8
 8019e0c:	b2db      	uxtb	r3, r3
 8019e0e:	0019      	movs	r1, r3
 8019e10:	2002      	movs	r0, #2
 8019e12:	f000 ffcf 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8019e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e18:	b2db      	uxtb	r3, r3
 8019e1a:	0019      	movs	r1, r3
 8019e1c:	2003      	movs	r0, #3
 8019e1e:	f000 ffc9 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8019e22:	2308      	movs	r3, #8
 8019e24:	18fb      	adds	r3, r7, r3
 8019e26:	199b      	adds	r3, r3, r6
 8019e28:	191b      	adds	r3, r3, r4
 8019e2a:	881b      	ldrh	r3, [r3, #0]
 8019e2c:	0a1b      	lsrs	r3, r3, #8
 8019e2e:	b29b      	uxth	r3, r3
 8019e30:	b2db      	uxtb	r3, r3
 8019e32:	0019      	movs	r1, r3
 8019e34:	2025      	movs	r0, #37	; 0x25
 8019e36:	f000 ffbd 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8019e3a:	2308      	movs	r3, #8
 8019e3c:	18fb      	adds	r3, r7, r3
 8019e3e:	199b      	adds	r3, r3, r6
 8019e40:	191b      	adds	r3, r3, r4
 8019e42:	881b      	ldrh	r3, [r3, #0]
 8019e44:	b2db      	uxtb	r3, r3
 8019e46:	0019      	movs	r1, r3
 8019e48:	2026      	movs	r0, #38	; 0x26
 8019e4a:	f000 ffb3 	bl	801adb4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019e4e:	2030      	movs	r0, #48	; 0x30
 8019e50:	f000 ffc1 	bl	801add6 <SX1276Read>
 8019e54:	0003      	movs	r3, r0
 8019e56:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8019e58:	226f      	movs	r2, #111	; 0x6f
 8019e5a:	4013      	ands	r3, r2
 8019e5c:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019e5e:	2308      	movs	r3, #8
 8019e60:	18fb      	adds	r3, r7, r3
 8019e62:	199b      	adds	r3, r3, r6
 8019e64:	195b      	adds	r3, r3, r5
 8019e66:	781b      	ldrb	r3, [r3, #0]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d001      	beq.n	8019e70 <SX1276SetTxConfig+0x1a4>
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	e001      	b.n	8019e74 <SX1276SetTxConfig+0x1a8>
 8019e70:	2380      	movs	r3, #128	; 0x80
 8019e72:	425b      	negs	r3, r3
 8019e74:	4313      	orrs	r3, r2
 8019e76:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019e78:	2328      	movs	r3, #40	; 0x28
 8019e7a:	2108      	movs	r1, #8
 8019e7c:	468c      	mov	ip, r1
 8019e7e:	2108      	movs	r1, #8
 8019e80:	4688      	mov	r8, r1
 8019e82:	44b8      	add	r8, r7
 8019e84:	44c4      	add	ip, r8
 8019e86:	4463      	add	r3, ip
 8019e88:	781b      	ldrb	r3, [r3, #0]
 8019e8a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019e8c:	b25b      	sxtb	r3, r3
 8019e8e:	4313      	orrs	r3, r2
 8019e90:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019e92:	b2db      	uxtb	r3, r3
 8019e94:	0019      	movs	r1, r3
 8019e96:	2030      	movs	r0, #48	; 0x30
 8019e98:	f000 ff8c 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019e9c:	2031      	movs	r0, #49	; 0x31
 8019e9e:	f000 ff9a 	bl	801add6 <SX1276Read>
 8019ea2:	0003      	movs	r3, r0
 8019ea4:	001a      	movs	r2, r3
 8019ea6:	2340      	movs	r3, #64	; 0x40
 8019ea8:	4313      	orrs	r3, r2
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	0019      	movs	r1, r3
 8019eae:	2031      	movs	r0, #49	; 0x31
 8019eb0:	f000 ff80 	bl	801adb4 <SX1276Write>
        break;
 8019eb4:	e146      	b.n	801a144 <SX1276SetTxConfig+0x478>
            SX1276.Settings.LoRa.Power = power;
 8019eb6:	4b44      	ldr	r3, [pc, #272]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019eb8:	220e      	movs	r2, #14
 8019eba:	18ba      	adds	r2, r7, r2
 8019ebc:	2140      	movs	r1, #64	; 0x40
 8019ebe:	7812      	ldrb	r2, [r2, #0]
 8019ec0:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	2b02      	cmp	r3, #2
 8019ec6:	d900      	bls.n	8019eca <SX1276SetTxConfig+0x1fe>
                while( 1 );
 8019ec8:	e7fe      	b.n	8019ec8 <SX1276SetTxConfig+0x1fc>
            bandwidth += 7;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	3307      	adds	r3, #7
 8019ece:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019ed0:	4b3d      	ldr	r3, [pc, #244]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019ed2:	687a      	ldr	r2, [r7, #4]
 8019ed4:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019ed6:	4b3c      	ldr	r3, [pc, #240]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019eda:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019edc:	4b3a      	ldr	r3, [pc, #232]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019ede:	221c      	movs	r2, #28
 8019ee0:	2108      	movs	r1, #8
 8019ee2:	468c      	mov	ip, r1
 8019ee4:	2108      	movs	r1, #8
 8019ee6:	4688      	mov	r8, r1
 8019ee8:	44b8      	add	r8, r7
 8019eea:	44c4      	add	ip, r8
 8019eec:	4462      	add	r2, ip
 8019eee:	214d      	movs	r1, #77	; 0x4d
 8019ef0:	7812      	ldrb	r2, [r2, #0]
 8019ef2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8019ef4:	4b34      	ldr	r3, [pc, #208]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019ef6:	2220      	movs	r2, #32
 8019ef8:	2108      	movs	r1, #8
 8019efa:	468c      	mov	ip, r1
 8019efc:	2108      	movs	r1, #8
 8019efe:	4688      	mov	r8, r1
 8019f00:	44b8      	add	r8, r7
 8019f02:	44c4      	add	ip, r8
 8019f04:	4462      	add	r2, ip
 8019f06:	214e      	movs	r1, #78	; 0x4e
 8019f08:	8812      	ldrh	r2, [r2, #0]
 8019f0a:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019f0c:	4b2e      	ldr	r3, [pc, #184]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019f0e:	2224      	movs	r2, #36	; 0x24
 8019f10:	2108      	movs	r1, #8
 8019f12:	468c      	mov	ip, r1
 8019f14:	2108      	movs	r1, #8
 8019f16:	4688      	mov	r8, r1
 8019f18:	44b8      	add	r8, r7
 8019f1a:	44c4      	add	ip, r8
 8019f1c:	4462      	add	r2, ip
 8019f1e:	2150      	movs	r1, #80	; 0x50
 8019f20:	7812      	ldrb	r2, [r2, #0]
 8019f22:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019f24:	4b28      	ldr	r3, [pc, #160]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019f26:	222c      	movs	r2, #44	; 0x2c
 8019f28:	2108      	movs	r1, #8
 8019f2a:	468c      	mov	ip, r1
 8019f2c:	2108      	movs	r1, #8
 8019f2e:	4688      	mov	r8, r1
 8019f30:	44b8      	add	r8, r7
 8019f32:	44c4      	add	ip, r8
 8019f34:	4462      	add	r2, ip
 8019f36:	2153      	movs	r1, #83	; 0x53
 8019f38:	7812      	ldrb	r2, [r2, #0]
 8019f3a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019f3c:	4b22      	ldr	r3, [pc, #136]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019f3e:	2230      	movs	r2, #48	; 0x30
 8019f40:	2108      	movs	r1, #8
 8019f42:	468c      	mov	ip, r1
 8019f44:	2108      	movs	r1, #8
 8019f46:	4688      	mov	r8, r1
 8019f48:	44b8      	add	r8, r7
 8019f4a:	44c4      	add	ip, r8
 8019f4c:	4462      	add	r2, ip
 8019f4e:	2154      	movs	r1, #84	; 0x54
 8019f50:	7812      	ldrb	r2, [r2, #0]
 8019f52:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019f54:	4b1c      	ldr	r3, [pc, #112]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019f56:	2228      	movs	r2, #40	; 0x28
 8019f58:	2108      	movs	r1, #8
 8019f5a:	468c      	mov	ip, r1
 8019f5c:	2108      	movs	r1, #8
 8019f5e:	4688      	mov	r8, r1
 8019f60:	44b8      	add	r8, r7
 8019f62:	44c4      	add	ip, r8
 8019f64:	4462      	add	r2, ip
 8019f66:	2152      	movs	r1, #82	; 0x52
 8019f68:	7812      	ldrb	r2, [r2, #0]
 8019f6a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019f6c:	4b16      	ldr	r3, [pc, #88]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019f6e:	2234      	movs	r2, #52	; 0x34
 8019f70:	2108      	movs	r1, #8
 8019f72:	468c      	mov	ip, r1
 8019f74:	2108      	movs	r1, #8
 8019f76:	4688      	mov	r8, r1
 8019f78:	44b8      	add	r8, r7
 8019f7a:	44c4      	add	ip, r8
 8019f7c:	4462      	add	r2, ip
 8019f7e:	2155      	movs	r1, #85	; 0x55
 8019f80:	7812      	ldrb	r2, [r2, #0]
 8019f82:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8019f84:	4b10      	ldr	r3, [pc, #64]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019f88:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8019f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f8c:	2b0c      	cmp	r3, #12
 8019f8e:	d902      	bls.n	8019f96 <SX1276SetTxConfig+0x2ca>
                datarate = 12;
 8019f90:	230c      	movs	r3, #12
 8019f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f94:	e004      	b.n	8019fa0 <SX1276SetTxConfig+0x2d4>
            else if( datarate < 6 )
 8019f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f98:	2b05      	cmp	r3, #5
 8019f9a:	d801      	bhi.n	8019fa0 <SX1276SetTxConfig+0x2d4>
                datarate = 6;
 8019f9c:	2306      	movs	r3, #6
 8019f9e:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2b07      	cmp	r3, #7
 8019fa4:	d105      	bne.n	8019fb2 <SX1276SetTxConfig+0x2e6>
 8019fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fa8:	2b0b      	cmp	r3, #11
 8019faa:	d008      	beq.n	8019fbe <SX1276SetTxConfig+0x2f2>
 8019fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fae:	2b0c      	cmp	r3, #12
 8019fb0:	d005      	beq.n	8019fbe <SX1276SetTxConfig+0x2f2>
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	2b08      	cmp	r3, #8
 8019fb6:	d10d      	bne.n	8019fd4 <SX1276SetTxConfig+0x308>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fba:	2b0c      	cmp	r3, #12
 8019fbc:	d10a      	bne.n	8019fd4 <SX1276SetTxConfig+0x308>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019fbe:	4b02      	ldr	r3, [pc, #8]	; (8019fc8 <SX1276SetTxConfig+0x2fc>)
 8019fc0:	224c      	movs	r2, #76	; 0x4c
 8019fc2:	2101      	movs	r1, #1
 8019fc4:	5499      	strb	r1, [r3, r2]
 8019fc6:	e009      	b.n	8019fdc <SX1276SetTxConfig+0x310>
 8019fc8:	200016d0 	.word	0x200016d0
 8019fcc:	404e8480 	.word	0x404e8480
 8019fd0:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019fd4:	4b5e      	ldr	r3, [pc, #376]	; (801a150 <SX1276SetTxConfig+0x484>)
 8019fd6:	224c      	movs	r2, #76	; 0x4c
 8019fd8:	2100      	movs	r1, #0
 8019fda:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019fdc:	4b5c      	ldr	r3, [pc, #368]	; (801a150 <SX1276SetTxConfig+0x484>)
 8019fde:	2253      	movs	r2, #83	; 0x53
 8019fe0:	5c9b      	ldrb	r3, [r3, r2]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d013      	beq.n	801a00e <SX1276SetTxConfig+0x342>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019fe6:	2044      	movs	r0, #68	; 0x44
 8019fe8:	f000 fef5 	bl	801add6 <SX1276Read>
 8019fec:	0003      	movs	r3, r0
 8019fee:	001a      	movs	r2, r3
 8019ff0:	2380      	movs	r3, #128	; 0x80
 8019ff2:	425b      	negs	r3, r3
 8019ff4:	4313      	orrs	r3, r2
 8019ff6:	b2db      	uxtb	r3, r3
 8019ff8:	0019      	movs	r1, r3
 8019ffa:	2044      	movs	r0, #68	; 0x44
 8019ffc:	f000 feda 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801a000:	4b53      	ldr	r3, [pc, #332]	; (801a150 <SX1276SetTxConfig+0x484>)
 801a002:	2254      	movs	r2, #84	; 0x54
 801a004:	5c9b      	ldrb	r3, [r3, r2]
 801a006:	0019      	movs	r1, r3
 801a008:	2024      	movs	r0, #36	; 0x24
 801a00a:	f000 fed3 	bl	801adb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801a00e:	201d      	movs	r0, #29
 801a010:	f000 fee1 	bl	801add6 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	b2db      	uxtb	r3, r3
 801a018:	011b      	lsls	r3, r3, #4
 801a01a:	b2da      	uxtb	r2, r3
 801a01c:	231c      	movs	r3, #28
 801a01e:	2108      	movs	r1, #8
 801a020:	468c      	mov	ip, r1
 801a022:	2108      	movs	r1, #8
 801a024:	4688      	mov	r8, r1
 801a026:	44b8      	add	r8, r7
 801a028:	44c4      	add	ip, r8
 801a02a:	4463      	add	r3, ip
 801a02c:	781b      	ldrb	r3, [r3, #0]
 801a02e:	18db      	adds	r3, r3, r3
 801a030:	b2db      	uxtb	r3, r3
 801a032:	4313      	orrs	r3, r2
 801a034:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a036:	2324      	movs	r3, #36	; 0x24
 801a038:	2108      	movs	r1, #8
 801a03a:	468c      	mov	ip, r1
 801a03c:	2108      	movs	r1, #8
 801a03e:	4688      	mov	r8, r1
 801a040:	44b8      	add	r8, r7
 801a042:	44c4      	add	ip, r8
 801a044:	4463      	add	r3, ip
 801a046:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a048:	4313      	orrs	r3, r2
 801a04a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a04c:	0019      	movs	r1, r3
 801a04e:	201d      	movs	r0, #29
 801a050:	f000 feb0 	bl	801adb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801a054:	201e      	movs	r0, #30
 801a056:	f000 febe 	bl	801add6 <SX1276Read>
 801a05a:	0003      	movs	r3, r0
 801a05c:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801a05e:	230b      	movs	r3, #11
 801a060:	4013      	ands	r3, r2
 801a062:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a066:	b2db      	uxtb	r3, r3
 801a068:	011b      	lsls	r3, r3, #4
 801a06a:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 801a06c:	4313      	orrs	r3, r2
 801a06e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a070:	2328      	movs	r3, #40	; 0x28
 801a072:	2108      	movs	r1, #8
 801a074:	468c      	mov	ip, r1
 801a076:	2108      	movs	r1, #8
 801a078:	4688      	mov	r8, r1
 801a07a:	44b8      	add	r8, r7
 801a07c:	44c4      	add	ip, r8
 801a07e:	4463      	add	r3, ip
 801a080:	781b      	ldrb	r3, [r3, #0]
 801a082:	009b      	lsls	r3, r3, #2
 801a084:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801a086:	4313      	orrs	r3, r2
 801a088:	b2db      	uxtb	r3, r3
 801a08a:	0019      	movs	r1, r3
 801a08c:	201e      	movs	r0, #30
 801a08e:	f000 fe91 	bl	801adb4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801a092:	2026      	movs	r0, #38	; 0x26
 801a094:	f000 fe9f 	bl	801add6 <SX1276Read>
 801a098:	0003      	movs	r3, r0
 801a09a:	b25b      	sxtb	r3, r3
 801a09c:	2208      	movs	r2, #8
 801a09e:	4393      	bics	r3, r2
 801a0a0:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801a0a2:	4b2b      	ldr	r3, [pc, #172]	; (801a150 <SX1276SetTxConfig+0x484>)
 801a0a4:	214c      	movs	r1, #76	; 0x4c
 801a0a6:	5c5b      	ldrb	r3, [r3, r1]
 801a0a8:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801a0aa:	b25b      	sxtb	r3, r3
 801a0ac:	4313      	orrs	r3, r2
 801a0ae:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801a0b0:	b2db      	uxtb	r3, r3
 801a0b2:	0019      	movs	r1, r3
 801a0b4:	2026      	movs	r0, #38	; 0x26
 801a0b6:	f000 fe7d 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a0ba:	2420      	movs	r4, #32
 801a0bc:	2508      	movs	r5, #8
 801a0be:	2308      	movs	r3, #8
 801a0c0:	18fb      	adds	r3, r7, r3
 801a0c2:	195b      	adds	r3, r3, r5
 801a0c4:	191b      	adds	r3, r3, r4
 801a0c6:	881b      	ldrh	r3, [r3, #0]
 801a0c8:	0a1b      	lsrs	r3, r3, #8
 801a0ca:	b29b      	uxth	r3, r3
 801a0cc:	b2db      	uxtb	r3, r3
 801a0ce:	0019      	movs	r1, r3
 801a0d0:	2020      	movs	r0, #32
 801a0d2:	f000 fe6f 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801a0d6:	2308      	movs	r3, #8
 801a0d8:	18fb      	adds	r3, r7, r3
 801a0da:	195b      	adds	r3, r3, r5
 801a0dc:	191b      	adds	r3, r3, r4
 801a0de:	881b      	ldrh	r3, [r3, #0]
 801a0e0:	b2db      	uxtb	r3, r3
 801a0e2:	0019      	movs	r1, r3
 801a0e4:	2021      	movs	r0, #33	; 0x21
 801a0e6:	f000 fe65 	bl	801adb4 <SX1276Write>
            if( datarate == 6 )
 801a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0ec:	2b06      	cmp	r3, #6
 801a0ee:	d114      	bne.n	801a11a <SX1276SetTxConfig+0x44e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a0f0:	2031      	movs	r0, #49	; 0x31
 801a0f2:	f000 fe70 	bl	801add6 <SX1276Read>
 801a0f6:	0003      	movs	r3, r0
 801a0f8:	b25b      	sxtb	r3, r3
 801a0fa:	2207      	movs	r2, #7
 801a0fc:	4393      	bics	r3, r2
 801a0fe:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a100:	2205      	movs	r2, #5
 801a102:	4313      	orrs	r3, r2
 801a104:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a106:	b2db      	uxtb	r3, r3
 801a108:	0019      	movs	r1, r3
 801a10a:	2031      	movs	r0, #49	; 0x31
 801a10c:	f000 fe52 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a110:	210c      	movs	r1, #12
 801a112:	2037      	movs	r0, #55	; 0x37
 801a114:	f000 fe4e 	bl	801adb4 <SX1276Write>
        break;
 801a118:	e013      	b.n	801a142 <SX1276SetTxConfig+0x476>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a11a:	2031      	movs	r0, #49	; 0x31
 801a11c:	f000 fe5b 	bl	801add6 <SX1276Read>
 801a120:	0003      	movs	r3, r0
 801a122:	b25b      	sxtb	r3, r3
 801a124:	2207      	movs	r2, #7
 801a126:	4393      	bics	r3, r2
 801a128:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a12a:	2203      	movs	r2, #3
 801a12c:	4313      	orrs	r3, r2
 801a12e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a130:	b2db      	uxtb	r3, r3
 801a132:	0019      	movs	r1, r3
 801a134:	2031      	movs	r0, #49	; 0x31
 801a136:	f000 fe3d 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a13a:	210a      	movs	r1, #10
 801a13c:	2037      	movs	r0, #55	; 0x37
 801a13e:	f000 fe39 	bl	801adb4 <SX1276Write>
        break;
 801a142:	46c0      	nop			; (mov r8, r8)
}
 801a144:	46c0      	nop			; (mov r8, r8)
 801a146:	46bd      	mov	sp, r7
 801a148:	b004      	add	sp, #16
 801a14a:	bc80      	pop	{r7}
 801a14c:	46b8      	mov	r8, r7
 801a14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a150:	200016d0 	.word	0x200016d0

0801a154 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801a154:	b590      	push	{r4, r7, lr}
 801a156:	b08b      	sub	sp, #44	; 0x2c
 801a158:	af04      	add	r7, sp, #16
 801a15a:	60b9      	str	r1, [r7, #8]
 801a15c:	607a      	str	r2, [r7, #4]
 801a15e:	0019      	movs	r1, r3
 801a160:	240f      	movs	r4, #15
 801a162:	193b      	adds	r3, r7, r4
 801a164:	1c02      	adds	r2, r0, #0
 801a166:	701a      	strb	r2, [r3, #0]
 801a168:	230e      	movs	r3, #14
 801a16a:	18fb      	adds	r3, r7, r3
 801a16c:	1c0a      	adds	r2, r1, #0
 801a16e:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 801a170:	2300      	movs	r3, #0
 801a172:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a174:	2301      	movs	r3, #1
 801a176:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a178:	193b      	adds	r3, r7, r4
 801a17a:	781b      	ldrb	r3, [r3, #0]
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d002      	beq.n	801a186 <SX1276GetTimeOnAir+0x32>
 801a180:	2b01      	cmp	r3, #1
 801a182:	d01a      	beq.n	801a1ba <SX1276GetTimeOnAir+0x66>
 801a184:	e03f      	b.n	801a206 <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 801a186:	2334      	movs	r3, #52	; 0x34
 801a188:	18fb      	adds	r3, r7, r3
 801a18a:	781c      	ldrb	r4, [r3, #0]
 801a18c:	2330      	movs	r3, #48	; 0x30
 801a18e:	18fb      	adds	r3, r7, r3
 801a190:	781a      	ldrb	r2, [r3, #0]
 801a192:	232c      	movs	r3, #44	; 0x2c
 801a194:	18fb      	adds	r3, r7, r3
 801a196:	7819      	ldrb	r1, [r3, #0]
 801a198:	2328      	movs	r3, #40	; 0x28
 801a19a:	18fb      	adds	r3, r7, r3
 801a19c:	8818      	ldrh	r0, [r3, #0]
 801a19e:	0023      	movs	r3, r4
 801a1a0:	f000 ff7e 	bl	801b0a0 <SX1276GetGfskTimeOnAirNumerator>
 801a1a4:	0002      	movs	r2, r0
 801a1a6:	0013      	movs	r3, r2
 801a1a8:	015b      	lsls	r3, r3, #5
 801a1aa:	1a9b      	subs	r3, r3, r2
 801a1ac:	009b      	lsls	r3, r3, #2
 801a1ae:	189b      	adds	r3, r3, r2
 801a1b0:	00db      	lsls	r3, r3, #3
 801a1b2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	613b      	str	r3, [r7, #16]
        }
        break;
 801a1b8:	e025      	b.n	801a206 <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 801a1ba:	2328      	movs	r3, #40	; 0x28
 801a1bc:	18fb      	adds	r3, r7, r3
 801a1be:	881c      	ldrh	r4, [r3, #0]
 801a1c0:	230e      	movs	r3, #14
 801a1c2:	18fb      	adds	r3, r7, r3
 801a1c4:	781a      	ldrb	r2, [r3, #0]
 801a1c6:	6879      	ldr	r1, [r7, #4]
 801a1c8:	68b8      	ldr	r0, [r7, #8]
 801a1ca:	2334      	movs	r3, #52	; 0x34
 801a1cc:	18fb      	adds	r3, r7, r3
 801a1ce:	781b      	ldrb	r3, [r3, #0]
 801a1d0:	9302      	str	r3, [sp, #8]
 801a1d2:	2330      	movs	r3, #48	; 0x30
 801a1d4:	18fb      	adds	r3, r7, r3
 801a1d6:	781b      	ldrb	r3, [r3, #0]
 801a1d8:	9301      	str	r3, [sp, #4]
 801a1da:	232c      	movs	r3, #44	; 0x2c
 801a1dc:	18fb      	adds	r3, r7, r3
 801a1de:	781b      	ldrb	r3, [r3, #0]
 801a1e0:	9300      	str	r3, [sp, #0]
 801a1e2:	0023      	movs	r3, r4
 801a1e4:	f000 ff96 	bl	801b114 <SX1276GetLoRaTimeOnAirNumerator>
 801a1e8:	0002      	movs	r2, r0
 801a1ea:	0013      	movs	r3, r2
 801a1ec:	015b      	lsls	r3, r3, #5
 801a1ee:	1a9b      	subs	r3, r3, r2
 801a1f0:	009b      	lsls	r3, r3, #2
 801a1f2:	189b      	adds	r3, r3, r2
 801a1f4:	00db      	lsls	r3, r3, #3
 801a1f6:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 801a1f8:	68bb      	ldr	r3, [r7, #8]
 801a1fa:	0018      	movs	r0, r3
 801a1fc:	f000 ff1e 	bl	801b03c <SX1276GetLoRaBandwidthInHz>
 801a200:	0003      	movs	r3, r0
 801a202:	613b      	str	r3, [r7, #16]
        }
        break;
 801a204:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 801a206:	697a      	ldr	r2, [r7, #20]
 801a208:	693b      	ldr	r3, [r7, #16]
 801a20a:	18d3      	adds	r3, r2, r3
 801a20c:	3b01      	subs	r3, #1
 801a20e:	6939      	ldr	r1, [r7, #16]
 801a210:	0018      	movs	r0, r3
 801a212:	f7e5 ff81 	bl	8000118 <__udivsi3>
 801a216:	0003      	movs	r3, r0
}
 801a218:	0018      	movs	r0, r3
 801a21a:	46bd      	mov	sp, r7
 801a21c:	b007      	add	sp, #28
 801a21e:	bd90      	pop	{r4, r7, pc}

0801a220 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b084      	sub	sp, #16
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
 801a228:	000a      	movs	r2, r1
 801a22a:	1cfb      	adds	r3, r7, #3
 801a22c:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 801a22e:	2300      	movs	r3, #0
 801a230:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 801a232:	4b59      	ldr	r3, [pc, #356]	; (801a398 <SX1276Send+0x178>)
 801a234:	795b      	ldrb	r3, [r3, #5]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d002      	beq.n	801a240 <SX1276Send+0x20>
 801a23a:	2b01      	cmp	r3, #1
 801a23c:	d04c      	beq.n	801a2d8 <SX1276Send+0xb8>
 801a23e:	e0a2      	b.n	801a386 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a240:	4b55      	ldr	r3, [pc, #340]	; (801a398 <SX1276Send+0x178>)
 801a242:	2200      	movs	r2, #0
 801a244:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801a246:	1cfb      	adds	r3, r7, #3
 801a248:	781b      	ldrb	r3, [r3, #0]
 801a24a:	b29a      	uxth	r2, r3
 801a24c:	4b52      	ldr	r3, [pc, #328]	; (801a398 <SX1276Send+0x178>)
 801a24e:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 801a250:	4b51      	ldr	r3, [pc, #324]	; (801a398 <SX1276Send+0x178>)
 801a252:	2222      	movs	r2, #34	; 0x22
 801a254:	5c9b      	ldrb	r3, [r3, r2]
 801a256:	2201      	movs	r2, #1
 801a258:	4053      	eors	r3, r2
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d005      	beq.n	801a26c <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 801a260:	1cfb      	adds	r3, r7, #3
 801a262:	2101      	movs	r1, #1
 801a264:	0018      	movs	r0, r3
 801a266:	f000 fe31 	bl	801aecc <SX1276WriteFifo>
 801a26a:	e005      	b.n	801a278 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801a26c:	1cfb      	adds	r3, r7, #3
 801a26e:	781b      	ldrb	r3, [r3, #0]
 801a270:	0019      	movs	r1, r3
 801a272:	2032      	movs	r0, #50	; 0x32
 801a274:	f000 fd9e 	bl	801adb4 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801a278:	1cfb      	adds	r3, r7, #3
 801a27a:	781b      	ldrb	r3, [r3, #0]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d009      	beq.n	801a294 <SX1276Send+0x74>
 801a280:	1cfb      	adds	r3, r7, #3
 801a282:	781b      	ldrb	r3, [r3, #0]
 801a284:	2b40      	cmp	r3, #64	; 0x40
 801a286:	d805      	bhi.n	801a294 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801a288:	1cfb      	adds	r3, r7, #3
 801a28a:	7819      	ldrb	r1, [r3, #0]
 801a28c:	4b42      	ldr	r3, [pc, #264]	; (801a398 <SX1276Send+0x178>)
 801a28e:	223f      	movs	r2, #63	; 0x3f
 801a290:	5499      	strb	r1, [r3, r2]
 801a292:	e00b      	b.n	801a2ac <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 801a294:	1cfb      	adds	r3, r7, #3
 801a296:	781b      	ldrb	r3, [r3, #0]
 801a298:	b29a      	uxth	r2, r3
 801a29a:	6879      	ldr	r1, [r7, #4]
 801a29c:	4b3f      	ldr	r3, [pc, #252]	; (801a39c <SX1276Send+0x17c>)
 801a29e:	0018      	movs	r0, r3
 801a2a0:	f002 f838 	bl	801c314 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801a2a4:	4b3c      	ldr	r3, [pc, #240]	; (801a398 <SX1276Send+0x178>)
 801a2a6:	223f      	movs	r2, #63	; 0x3f
 801a2a8:	2120      	movs	r1, #32
 801a2aa:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801a2ac:	4b3a      	ldr	r3, [pc, #232]	; (801a398 <SX1276Send+0x178>)
 801a2ae:	223f      	movs	r2, #63	; 0x3f
 801a2b0:	5c9a      	ldrb	r2, [r3, r2]
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	0011      	movs	r1, r2
 801a2b6:	0018      	movs	r0, r3
 801a2b8:	f000 fe08 	bl	801aecc <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801a2bc:	4b36      	ldr	r3, [pc, #216]	; (801a398 <SX1276Send+0x178>)
 801a2be:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801a2c0:	4b35      	ldr	r3, [pc, #212]	; (801a398 <SX1276Send+0x178>)
 801a2c2:	213f      	movs	r1, #63	; 0x3f
 801a2c4:	5c5b      	ldrb	r3, [r3, r1]
 801a2c6:	b29b      	uxth	r3, r3
 801a2c8:	18d3      	adds	r3, r2, r3
 801a2ca:	b29a      	uxth	r2, r3
 801a2cc:	4b32      	ldr	r3, [pc, #200]	; (801a398 <SX1276Send+0x178>)
 801a2ce:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801a2d0:	4b31      	ldr	r3, [pc, #196]	; (801a398 <SX1276Send+0x178>)
 801a2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2d4:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a2d6:	e056      	b.n	801a386 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a2d8:	4b2f      	ldr	r3, [pc, #188]	; (801a398 <SX1276Send+0x178>)
 801a2da:	2255      	movs	r2, #85	; 0x55
 801a2dc:	5c9b      	ldrb	r3, [r3, r2]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d011      	beq.n	801a306 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801a2e2:	2033      	movs	r0, #51	; 0x33
 801a2e4:	f000 fd77 	bl	801add6 <SX1276Read>
 801a2e8:	0003      	movs	r3, r0
 801a2ea:	001a      	movs	r2, r3
 801a2ec:	2341      	movs	r3, #65	; 0x41
 801a2ee:	439a      	bics	r2, r3
 801a2f0:	0013      	movs	r3, r2
 801a2f2:	b2db      	uxtb	r3, r3
 801a2f4:	0019      	movs	r1, r3
 801a2f6:	2033      	movs	r0, #51	; 0x33
 801a2f8:	f000 fd5c 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a2fc:	2119      	movs	r1, #25
 801a2fe:	203b      	movs	r0, #59	; 0x3b
 801a300:	f000 fd58 	bl	801adb4 <SX1276Write>
 801a304:	e013      	b.n	801a32e <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a306:	2033      	movs	r0, #51	; 0x33
 801a308:	f000 fd65 	bl	801add6 <SX1276Read>
 801a30c:	0003      	movs	r3, r0
 801a30e:	b25b      	sxtb	r3, r3
 801a310:	2241      	movs	r2, #65	; 0x41
 801a312:	4393      	bics	r3, r2
 801a314:	b25b      	sxtb	r3, r3
 801a316:	2201      	movs	r2, #1
 801a318:	4313      	orrs	r3, r2
 801a31a:	b25b      	sxtb	r3, r3
 801a31c:	b2db      	uxtb	r3, r3
 801a31e:	0019      	movs	r1, r3
 801a320:	2033      	movs	r0, #51	; 0x33
 801a322:	f000 fd47 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a326:	211d      	movs	r1, #29
 801a328:	203b      	movs	r0, #59	; 0x3b
 801a32a:	f000 fd43 	bl	801adb4 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 801a32e:	1cfb      	adds	r3, r7, #3
 801a330:	7819      	ldrb	r1, [r3, #0]
 801a332:	4b19      	ldr	r3, [pc, #100]	; (801a398 <SX1276Send+0x178>)
 801a334:	2264      	movs	r2, #100	; 0x64
 801a336:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801a338:	1cfb      	adds	r3, r7, #3
 801a33a:	781b      	ldrb	r3, [r3, #0]
 801a33c:	0019      	movs	r1, r3
 801a33e:	2022      	movs	r0, #34	; 0x22
 801a340:	f000 fd38 	bl	801adb4 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 801a344:	2100      	movs	r1, #0
 801a346:	200e      	movs	r0, #14
 801a348:	f000 fd34 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a34c:	2100      	movs	r1, #0
 801a34e:	200d      	movs	r0, #13
 801a350:	f000 fd30 	bl	801adb4 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 801a354:	2001      	movs	r0, #1
 801a356:	f000 fd3e 	bl	801add6 <SX1276Read>
 801a35a:	0003      	movs	r3, r0
 801a35c:	001a      	movs	r2, r3
 801a35e:	23f8      	movs	r3, #248	; 0xf8
 801a360:	439a      	bics	r2, r3
 801a362:	1e13      	subs	r3, r2, #0
 801a364:	d104      	bne.n	801a370 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801a366:	f000 f94f 	bl	801a608 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 801a36a:	2001      	movs	r0, #1
 801a36c:	f7ea fea7 	bl	80050be <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 801a370:	1cfb      	adds	r3, r7, #3
 801a372:	781a      	ldrb	r2, [r3, #0]
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	0011      	movs	r1, r2
 801a378:	0018      	movs	r0, r3
 801a37a:	f000 fda7 	bl	801aecc <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801a37e:	4b06      	ldr	r3, [pc, #24]	; (801a398 <SX1276Send+0x178>)
 801a380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a382:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a384:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	0018      	movs	r0, r3
 801a38a:	f000 faf3 	bl	801a974 <SX1276SetTx>
}
 801a38e:	46c0      	nop			; (mov r8, r8)
 801a390:	46bd      	mov	sp, r7
 801a392:	b004      	add	sp, #16
 801a394:	bd80      	pop	{r7, pc}
 801a396:	46c0      	nop			; (mov r8, r8)
 801a398:	200016d0 	.word	0x200016d0
 801a39c:	20000e18 	.word	0x20000e18

0801a3a0 <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 801a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3a2:	b085      	sub	sp, #20
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	0002      	movs	r2, r0
 801a3a8:	1dfb      	adds	r3, r7, #7
 801a3aa:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 801a3ac:	210f      	movs	r1, #15
 801a3ae:	187b      	adds	r3, r7, r1
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801a3b4:	250e      	movs	r5, #14
 801a3b6:	197b      	adds	r3, r7, r5
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 801a3bc:	260d      	movs	r6, #13
 801a3be:	19bb      	adds	r3, r7, r6
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 801a3c4:	187c      	adds	r4, r7, r1
 801a3c6:	2009      	movs	r0, #9
 801a3c8:	f000 fd05 	bl	801add6 <SX1276Read>
 801a3cc:	0003      	movs	r3, r0
 801a3ce:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 801a3d0:	197c      	adds	r4, r7, r5
 801a3d2:	204d      	movs	r0, #77	; 0x4d
 801a3d4:	f000 fcff 	bl	801add6 <SX1276Read>
 801a3d8:	0003      	movs	r3, r0
 801a3da:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 801a3dc:	4b78      	ldr	r3, [pc, #480]	; (801a5c0 <SX1276SetRfTxPower+0x220>)
 801a3de:	689b      	ldr	r3, [r3, #8]
 801a3e0:	0018      	movs	r0, r3
 801a3e2:	f7eb fe4f 	bl	8006084 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 801a3e6:	0003      	movs	r3, r0
 801a3e8:	2b03      	cmp	r3, #3
 801a3ea:	d01f      	beq.n	801a42c <SX1276SetRfTxPower+0x8c>
 801a3ec:	dc23      	bgt.n	801a436 <SX1276SetRfTxPower+0x96>
 801a3ee:	2b02      	cmp	r3, #2
 801a3f0:	d008      	beq.n	801a404 <SX1276SetRfTxPower+0x64>
 801a3f2:	dc20      	bgt.n	801a436 <SX1276SetRfTxPower+0x96>
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d00a      	beq.n	801a40e <SX1276SetRfTxPower+0x6e>
 801a3f8:	2b01      	cmp	r3, #1
 801a3fa:	d11c      	bne.n	801a436 <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 801a3fc:	19bb      	adds	r3, r7, r6
 801a3fe:	2200      	movs	r2, #0
 801a400:	701a      	strb	r2, [r3, #0]
        break;
 801a402:	e019      	b.n	801a438 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a404:	230d      	movs	r3, #13
 801a406:	18fb      	adds	r3, r7, r3
 801a408:	2280      	movs	r2, #128	; 0x80
 801a40a:	701a      	strb	r2, [r3, #0]
        break;
 801a40c:	e014      	b.n	801a438 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 801a40e:	1dfb      	adds	r3, r7, #7
 801a410:	781b      	ldrb	r3, [r3, #0]
 801a412:	b25b      	sxtb	r3, r3
 801a414:	2b0e      	cmp	r3, #14
 801a416:	dd04      	ble.n	801a422 <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a418:	230d      	movs	r3, #13
 801a41a:	18fb      	adds	r3, r7, r3
 801a41c:	2280      	movs	r2, #128	; 0x80
 801a41e:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 801a420:	e00a      	b.n	801a438 <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 801a422:	230d      	movs	r3, #13
 801a424:	18fb      	adds	r3, r7, r3
 801a426:	2200      	movs	r2, #0
 801a428:	701a      	strb	r2, [r3, #0]
        break;
 801a42a:	e005      	b.n	801a438 <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 801a42c:	230d      	movs	r3, #13
 801a42e:	18fb      	adds	r3, r7, r3
 801a430:	2280      	movs	r2, #128	; 0x80
 801a432:	701a      	strb	r2, [r3, #0]
          break;
 801a434:	e000      	b.n	801a438 <SX1276SetRfTxPower+0x98>
        default:
        break;
 801a436:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 801a438:	210f      	movs	r1, #15
 801a43a:	187b      	adds	r3, r7, r1
 801a43c:	781b      	ldrb	r3, [r3, #0]
 801a43e:	b25b      	sxtb	r3, r3
 801a440:	227f      	movs	r2, #127	; 0x7f
 801a442:	4013      	ands	r3, r2
 801a444:	b25a      	sxtb	r2, r3
 801a446:	230d      	movs	r3, #13
 801a448:	18fb      	adds	r3, r7, r3
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	b25b      	sxtb	r3, r3
 801a44e:	4313      	orrs	r3, r2
 801a450:	b25a      	sxtb	r2, r3
 801a452:	187b      	adds	r3, r7, r1
 801a454:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a456:	187b      	adds	r3, r7, r1
 801a458:	781b      	ldrb	r3, [r3, #0]
 801a45a:	b25b      	sxtb	r3, r3
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	da67      	bge.n	801a530 <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 801a460:	1dfb      	adds	r3, r7, #7
 801a462:	781b      	ldrb	r3, [r3, #0]
 801a464:	b25b      	sxtb	r3, r3
 801a466:	2b11      	cmp	r3, #17
 801a468:	dd07      	ble.n	801a47a <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801a46a:	220e      	movs	r2, #14
 801a46c:	18bb      	adds	r3, r7, r2
 801a46e:	18ba      	adds	r2, r7, r2
 801a470:	7812      	ldrb	r2, [r2, #0]
 801a472:	2107      	movs	r1, #7
 801a474:	430a      	orrs	r2, r1
 801a476:	701a      	strb	r2, [r3, #0]
 801a478:	e00b      	b.n	801a492 <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801a47a:	210e      	movs	r1, #14
 801a47c:	187b      	adds	r3, r7, r1
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	b25b      	sxtb	r3, r3
 801a482:	2207      	movs	r2, #7
 801a484:	4393      	bics	r3, r2
 801a486:	b25b      	sxtb	r3, r3
 801a488:	2204      	movs	r2, #4
 801a48a:	4313      	orrs	r3, r2
 801a48c:	b25a      	sxtb	r2, r3
 801a48e:	187b      	adds	r3, r7, r1
 801a490:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801a492:	230e      	movs	r3, #14
 801a494:	18fb      	adds	r3, r7, r3
 801a496:	781b      	ldrb	r3, [r3, #0]
 801a498:	2207      	movs	r2, #7
 801a49a:	4013      	ands	r3, r2
 801a49c:	2b07      	cmp	r3, #7
 801a49e:	d123      	bne.n	801a4e8 <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 801a4a0:	1dfb      	adds	r3, r7, #7
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	b25b      	sxtb	r3, r3
 801a4a6:	2b04      	cmp	r3, #4
 801a4a8:	dc02      	bgt.n	801a4b0 <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 801a4aa:	1dfb      	adds	r3, r7, #7
 801a4ac:	2205      	movs	r2, #5
 801a4ae:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801a4b0:	1dfb      	adds	r3, r7, #7
 801a4b2:	781b      	ldrb	r3, [r3, #0]
 801a4b4:	b25b      	sxtb	r3, r3
 801a4b6:	2b14      	cmp	r3, #20
 801a4b8:	dd02      	ble.n	801a4c0 <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 801a4ba:	1dfb      	adds	r3, r7, #7
 801a4bc:	2214      	movs	r2, #20
 801a4be:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801a4c0:	200f      	movs	r0, #15
 801a4c2:	183b      	adds	r3, r7, r0
 801a4c4:	781b      	ldrb	r3, [r3, #0]
 801a4c6:	b25b      	sxtb	r3, r3
 801a4c8:	220f      	movs	r2, #15
 801a4ca:	4393      	bics	r3, r2
 801a4cc:	b25a      	sxtb	r2, r3
 801a4ce:	1dfb      	adds	r3, r7, #7
 801a4d0:	781b      	ldrb	r3, [r3, #0]
 801a4d2:	3b05      	subs	r3, #5
 801a4d4:	b2db      	uxtb	r3, r3
 801a4d6:	b25b      	sxtb	r3, r3
 801a4d8:	210f      	movs	r1, #15
 801a4da:	400b      	ands	r3, r1
 801a4dc:	b25b      	sxtb	r3, r3
 801a4de:	4313      	orrs	r3, r2
 801a4e0:	b25a      	sxtb	r2, r3
 801a4e2:	183b      	adds	r3, r7, r0
 801a4e4:	701a      	strb	r2, [r3, #0]
 801a4e6:	e059      	b.n	801a59c <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 801a4e8:	1dfb      	adds	r3, r7, #7
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	b25b      	sxtb	r3, r3
 801a4ee:	2b01      	cmp	r3, #1
 801a4f0:	dc02      	bgt.n	801a4f8 <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 801a4f2:	1dfb      	adds	r3, r7, #7
 801a4f4:	2202      	movs	r2, #2
 801a4f6:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801a4f8:	1dfb      	adds	r3, r7, #7
 801a4fa:	781b      	ldrb	r3, [r3, #0]
 801a4fc:	b25b      	sxtb	r3, r3
 801a4fe:	2b11      	cmp	r3, #17
 801a500:	dd02      	ble.n	801a508 <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 801a502:	1dfb      	adds	r3, r7, #7
 801a504:	2211      	movs	r2, #17
 801a506:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801a508:	200f      	movs	r0, #15
 801a50a:	183b      	adds	r3, r7, r0
 801a50c:	781b      	ldrb	r3, [r3, #0]
 801a50e:	b25b      	sxtb	r3, r3
 801a510:	220f      	movs	r2, #15
 801a512:	4393      	bics	r3, r2
 801a514:	b25a      	sxtb	r2, r3
 801a516:	1dfb      	adds	r3, r7, #7
 801a518:	781b      	ldrb	r3, [r3, #0]
 801a51a:	3b02      	subs	r3, #2
 801a51c:	b2db      	uxtb	r3, r3
 801a51e:	b25b      	sxtb	r3, r3
 801a520:	210f      	movs	r1, #15
 801a522:	400b      	ands	r3, r1
 801a524:	b25b      	sxtb	r3, r3
 801a526:	4313      	orrs	r3, r2
 801a528:	b25a      	sxtb	r2, r3
 801a52a:	183b      	adds	r3, r7, r0
 801a52c:	701a      	strb	r2, [r3, #0]
 801a52e:	e035      	b.n	801a59c <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 801a530:	1dfb      	adds	r3, r7, #7
 801a532:	781b      	ldrb	r3, [r3, #0]
 801a534:	b25b      	sxtb	r3, r3
 801a536:	2b00      	cmp	r3, #0
 801a538:	dd18      	ble.n	801a56c <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 801a53a:	1dfb      	adds	r3, r7, #7
 801a53c:	781b      	ldrb	r3, [r3, #0]
 801a53e:	b25b      	sxtb	r3, r3
 801a540:	2b0f      	cmp	r3, #15
 801a542:	dd02      	ble.n	801a54a <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 801a544:	1dfb      	adds	r3, r7, #7
 801a546:	220f      	movs	r2, #15
 801a548:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 801a54a:	210f      	movs	r1, #15
 801a54c:	187b      	adds	r3, r7, r1
 801a54e:	781b      	ldrb	r3, [r3, #0]
 801a550:	b25b      	sxtb	r3, r3
 801a552:	227f      	movs	r2, #127	; 0x7f
 801a554:	4393      	bics	r3, r2
 801a556:	b25b      	sxtb	r3, r3
 801a558:	2270      	movs	r2, #112	; 0x70
 801a55a:	4313      	orrs	r3, r2
 801a55c:	b25a      	sxtb	r2, r3
 801a55e:	1dfb      	adds	r3, r7, #7
 801a560:	781b      	ldrb	r3, [r3, #0]
 801a562:	4313      	orrs	r3, r2
 801a564:	b25a      	sxtb	r2, r3
 801a566:	187b      	adds	r3, r7, r1
 801a568:	701a      	strb	r2, [r3, #0]
 801a56a:	e017      	b.n	801a59c <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 801a56c:	1dfb      	adds	r3, r7, #7
 801a56e:	781b      	ldrb	r3, [r3, #0]
 801a570:	b25b      	sxtb	r3, r3
 801a572:	3304      	adds	r3, #4
 801a574:	da02      	bge.n	801a57c <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 801a576:	1dfb      	adds	r3, r7, #7
 801a578:	22fc      	movs	r2, #252	; 0xfc
 801a57a:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 801a57c:	210f      	movs	r1, #15
 801a57e:	187b      	adds	r3, r7, r1
 801a580:	781b      	ldrb	r3, [r3, #0]
 801a582:	b25b      	sxtb	r3, r3
 801a584:	227f      	movs	r2, #127	; 0x7f
 801a586:	4393      	bics	r3, r2
 801a588:	b25a      	sxtb	r2, r3
 801a58a:	1dfb      	adds	r3, r7, #7
 801a58c:	781b      	ldrb	r3, [r3, #0]
 801a58e:	3304      	adds	r3, #4
 801a590:	b2db      	uxtb	r3, r3
 801a592:	b25b      	sxtb	r3, r3
 801a594:	4313      	orrs	r3, r2
 801a596:	b25a      	sxtb	r2, r3
 801a598:	187b      	adds	r3, r7, r1
 801a59a:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801a59c:	230f      	movs	r3, #15
 801a59e:	18fb      	adds	r3, r7, r3
 801a5a0:	781b      	ldrb	r3, [r3, #0]
 801a5a2:	0019      	movs	r1, r3
 801a5a4:	2009      	movs	r0, #9
 801a5a6:	f000 fc05 	bl	801adb4 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801a5aa:	230e      	movs	r3, #14
 801a5ac:	18fb      	adds	r3, r7, r3
 801a5ae:	781b      	ldrb	r3, [r3, #0]
 801a5b0:	0019      	movs	r1, r3
 801a5b2:	204d      	movs	r0, #77	; 0x4d
 801a5b4:	f000 fbfe 	bl	801adb4 <SX1276Write>
}
 801a5b8:	46c0      	nop			; (mov r8, r8)
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	b005      	add	sp, #20
 801a5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5c0:	200016d0 	.word	0x200016d0

0801a5c4 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 801a5c8:	4b0b      	ldr	r3, [pc, #44]	; (801a5f8 <SX1276SetSleep+0x34>)
 801a5ca:	0018      	movs	r0, r3
 801a5cc:	f002 fa66 	bl	801ca9c <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a5d0:	4b0a      	ldr	r3, [pc, #40]	; (801a5fc <SX1276SetSleep+0x38>)
 801a5d2:	0018      	movs	r0, r3
 801a5d4:	f002 fa62 	bl	801ca9c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a5d8:	4b09      	ldr	r3, [pc, #36]	; (801a600 <SX1276SetSleep+0x3c>)
 801a5da:	0018      	movs	r0, r3
 801a5dc:	f002 fa5e 	bl	801ca9c <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a5e0:	2000      	movs	r0, #0
 801a5e2:	f000 fb20 	bl	801ac26 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 801a5e6:	2000      	movs	r0, #0
 801a5e8:	f7eb fb98 	bl	8005d1c <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 801a5ec:	4b05      	ldr	r3, [pc, #20]	; (801a604 <SX1276SetSleep+0x40>)
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	711a      	strb	r2, [r3, #4]
}
 801a5f2:	46c0      	nop			; (mov r8, r8)
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bd80      	pop	{r7, pc}
 801a5f8:	20001738 	.word	0x20001738
 801a5fc:	200016a0 	.word	0x200016a0
 801a600:	200016b8 	.word	0x200016b8
 801a604:	200016d0 	.word	0x200016d0

0801a608 <SX1276SetStby>:

void SX1276SetStby( void )
{
 801a608:	b580      	push	{r7, lr}
 801a60a:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 801a60c:	4b0a      	ldr	r3, [pc, #40]	; (801a638 <SX1276SetStby+0x30>)
 801a60e:	0018      	movs	r0, r3
 801a610:	f002 fa44 	bl	801ca9c <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a614:	4b09      	ldr	r3, [pc, #36]	; (801a63c <SX1276SetStby+0x34>)
 801a616:	0018      	movs	r0, r3
 801a618:	f002 fa40 	bl	801ca9c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a61c:	4b08      	ldr	r3, [pc, #32]	; (801a640 <SX1276SetStby+0x38>)
 801a61e:	0018      	movs	r0, r3
 801a620:	f002 fa3c 	bl	801ca9c <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801a624:	2001      	movs	r0, #1
 801a626:	f000 fafe 	bl	801ac26 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801a62a:	4b06      	ldr	r3, [pc, #24]	; (801a644 <SX1276SetStby+0x3c>)
 801a62c:	2200      	movs	r2, #0
 801a62e:	711a      	strb	r2, [r3, #4]
}
 801a630:	46c0      	nop			; (mov r8, r8)
 801a632:	46bd      	mov	sp, r7
 801a634:	bd80      	pop	{r7, pc}
 801a636:	46c0      	nop			; (mov r8, r8)
 801a638:	20001738 	.word	0x20001738
 801a63c:	200016a0 	.word	0x200016a0
 801a640:	200016b8 	.word	0x200016b8
 801a644:	200016d0 	.word	0x200016d0

0801a648 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801a648:	b580      	push	{r7, lr}
 801a64a:	b084      	sub	sp, #16
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 801a650:	230f      	movs	r3, #15
 801a652:	18fb      	adds	r3, r7, r3
 801a654:	2200      	movs	r2, #0
 801a656:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 801a658:	4bba      	ldr	r3, [pc, #744]	; (801a944 <SX1276SetRx+0x2fc>)
 801a65a:	0018      	movs	r0, r3
 801a65c:	f002 fa1e 	bl	801ca9c <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 801a660:	4bb9      	ldr	r3, [pc, #740]	; (801a948 <SX1276SetRx+0x300>)
 801a662:	795b      	ldrb	r3, [r3, #5]
 801a664:	2b00      	cmp	r3, #0
 801a666:	d002      	beq.n	801a66e <SX1276SetRx+0x26>
 801a668:	2b01      	cmp	r3, #1
 801a66a:	d041      	beq.n	801a6f0 <SX1276SetRx+0xa8>
 801a66c:	e127      	b.n	801a8be <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801a66e:	230f      	movs	r3, #15
 801a670:	18fb      	adds	r3, r7, r3
 801a672:	4ab5      	ldr	r2, [pc, #724]	; (801a948 <SX1276SetRx+0x300>)
 801a674:	2126      	movs	r1, #38	; 0x26
 801a676:	5c52      	ldrb	r2, [r2, r1]
 801a678:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a67a:	2040      	movs	r0, #64	; 0x40
 801a67c:	f000 fbab 	bl	801add6 <SX1276Read>
 801a680:	0003      	movs	r3, r0
 801a682:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801a684:	2203      	movs	r2, #3
 801a686:	4013      	ands	r3, r2
 801a688:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801a68a:	220c      	movs	r2, #12
 801a68c:	4313      	orrs	r3, r2
 801a68e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a690:	b2db      	uxtb	r3, r3
 801a692:	0019      	movs	r1, r3
 801a694:	2040      	movs	r0, #64	; 0x40
 801a696:	f000 fb8d 	bl	801adb4 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a69a:	2041      	movs	r0, #65	; 0x41
 801a69c:	f000 fb9b 	bl	801add6 <SX1276Read>
 801a6a0:	0003      	movs	r3, r0
 801a6a2:	001a      	movs	r2, r3
 801a6a4:	233f      	movs	r3, #63	; 0x3f
 801a6a6:	425b      	negs	r3, r3
 801a6a8:	4313      	orrs	r3, r2
 801a6aa:	b2db      	uxtb	r3, r3
 801a6ac:	0019      	movs	r1, r3
 801a6ae:	2041      	movs	r0, #65	; 0x41
 801a6b0:	f000 fb80 	bl	801adb4 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a6b4:	2035      	movs	r0, #53	; 0x35
 801a6b6:	f000 fb8e 	bl	801add6 <SX1276Read>
 801a6ba:	0003      	movs	r3, r0
 801a6bc:	001a      	movs	r2, r3
 801a6be:	233f      	movs	r3, #63	; 0x3f
 801a6c0:	4013      	ands	r3, r2
 801a6c2:	b2d9      	uxtb	r1, r3
 801a6c4:	4ba0      	ldr	r3, [pc, #640]	; (801a948 <SX1276SetRx+0x300>)
 801a6c6:	223e      	movs	r2, #62	; 0x3e
 801a6c8:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801a6ca:	211e      	movs	r1, #30
 801a6cc:	200d      	movs	r0, #13
 801a6ce:	f000 fb71 	bl	801adb4 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a6d2:	4b9d      	ldr	r3, [pc, #628]	; (801a948 <SX1276SetRx+0x300>)
 801a6d4:	2230      	movs	r2, #48	; 0x30
 801a6d6:	2100      	movs	r1, #0
 801a6d8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a6da:	4b9b      	ldr	r3, [pc, #620]	; (801a948 <SX1276SetRx+0x300>)
 801a6dc:	2231      	movs	r2, #49	; 0x31
 801a6de:	2100      	movs	r1, #0
 801a6e0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a6e2:	4b99      	ldr	r3, [pc, #612]	; (801a948 <SX1276SetRx+0x300>)
 801a6e4:	2200      	movs	r2, #0
 801a6e6:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a6e8:	4b97      	ldr	r3, [pc, #604]	; (801a948 <SX1276SetRx+0x300>)
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801a6ee:	e0e6      	b.n	801a8be <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a6f0:	4b95      	ldr	r3, [pc, #596]	; (801a948 <SX1276SetRx+0x300>)
 801a6f2:	2255      	movs	r2, #85	; 0x55
 801a6f4:	5c9b      	ldrb	r3, [r3, r2]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d010      	beq.n	801a71c <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801a6fa:	2033      	movs	r0, #51	; 0x33
 801a6fc:	f000 fb6b 	bl	801add6 <SX1276Read>
 801a700:	0003      	movs	r3, r0
 801a702:	001a      	movs	r2, r3
 801a704:	2341      	movs	r3, #65	; 0x41
 801a706:	4313      	orrs	r3, r2
 801a708:	b2db      	uxtb	r3, r3
 801a70a:	0019      	movs	r1, r3
 801a70c:	2033      	movs	r0, #51	; 0x33
 801a70e:	f000 fb51 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a712:	2119      	movs	r1, #25
 801a714:	203b      	movs	r0, #59	; 0x3b
 801a716:	f000 fb4d 	bl	801adb4 <SX1276Write>
 801a71a:	e013      	b.n	801a744 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a71c:	2033      	movs	r0, #51	; 0x33
 801a71e:	f000 fb5a 	bl	801add6 <SX1276Read>
 801a722:	0003      	movs	r3, r0
 801a724:	b25b      	sxtb	r3, r3
 801a726:	2241      	movs	r2, #65	; 0x41
 801a728:	4393      	bics	r3, r2
 801a72a:	b25b      	sxtb	r3, r3
 801a72c:	2201      	movs	r2, #1
 801a72e:	4313      	orrs	r3, r2
 801a730:	b25b      	sxtb	r3, r3
 801a732:	b2db      	uxtb	r3, r3
 801a734:	0019      	movs	r1, r3
 801a736:	2033      	movs	r0, #51	; 0x33
 801a738:	f000 fb3c 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a73c:	211d      	movs	r1, #29
 801a73e:	203b      	movs	r0, #59	; 0x3b
 801a740:	f000 fb38 	bl	801adb4 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801a744:	4b80      	ldr	r3, [pc, #512]	; (801a948 <SX1276SetRx+0x300>)
 801a746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a748:	2b08      	cmp	r3, #8
 801a74a:	d900      	bls.n	801a74e <SX1276SetRx+0x106>
 801a74c:	e075      	b.n	801a83a <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801a74e:	2031      	movs	r0, #49	; 0x31
 801a750:	f000 fb41 	bl	801add6 <SX1276Read>
 801a754:	0003      	movs	r3, r0
 801a756:	001a      	movs	r2, r3
 801a758:	237f      	movs	r3, #127	; 0x7f
 801a75a:	4013      	ands	r3, r2
 801a75c:	b2db      	uxtb	r3, r3
 801a75e:	0019      	movs	r1, r3
 801a760:	2031      	movs	r0, #49	; 0x31
 801a762:	f000 fb27 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801a766:	2100      	movs	r1, #0
 801a768:	2030      	movs	r0, #48	; 0x30
 801a76a:	f000 fb23 	bl	801adb4 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801a76e:	4b76      	ldr	r3, [pc, #472]	; (801a948 <SX1276SetRx+0x300>)
 801a770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a772:	2b08      	cmp	r3, #8
 801a774:	d86e      	bhi.n	801a854 <SX1276SetRx+0x20c>
 801a776:	009a      	lsls	r2, r3, #2
 801a778:	4b74      	ldr	r3, [pc, #464]	; (801a94c <SX1276SetRx+0x304>)
 801a77a:	18d3      	adds	r3, r2, r3
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801a780:	2148      	movs	r1, #72	; 0x48
 801a782:	202f      	movs	r0, #47	; 0x2f
 801a784:	f000 fb16 	bl	801adb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801a788:	4b6f      	ldr	r3, [pc, #444]	; (801a948 <SX1276SetRx+0x300>)
 801a78a:	689b      	ldr	r3, [r3, #8]
 801a78c:	4a70      	ldr	r2, [pc, #448]	; (801a950 <SX1276SetRx+0x308>)
 801a78e:	4694      	mov	ip, r2
 801a790:	4463      	add	r3, ip
 801a792:	0018      	movs	r0, r3
 801a794:	f7fe feb0 	bl	80194f8 <SX1276SetChannel>
                    break;
 801a798:	e05c      	b.n	801a854 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a79a:	2144      	movs	r1, #68	; 0x44
 801a79c:	202f      	movs	r0, #47	; 0x2f
 801a79e:	f000 fb09 	bl	801adb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801a7a2:	4b69      	ldr	r3, [pc, #420]	; (801a948 <SX1276SetRx+0x300>)
 801a7a4:	689b      	ldr	r3, [r3, #8]
 801a7a6:	4a6b      	ldr	r2, [pc, #428]	; (801a954 <SX1276SetRx+0x30c>)
 801a7a8:	4694      	mov	ip, r2
 801a7aa:	4463      	add	r3, ip
 801a7ac:	0018      	movs	r0, r3
 801a7ae:	f7fe fea3 	bl	80194f8 <SX1276SetChannel>
                    break;
 801a7b2:	e04f      	b.n	801a854 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a7b4:	2144      	movs	r1, #68	; 0x44
 801a7b6:	202f      	movs	r0, #47	; 0x2f
 801a7b8:	f000 fafc 	bl	801adb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801a7bc:	4b62      	ldr	r3, [pc, #392]	; (801a948 <SX1276SetRx+0x300>)
 801a7be:	689b      	ldr	r3, [r3, #8]
 801a7c0:	4a65      	ldr	r2, [pc, #404]	; (801a958 <SX1276SetRx+0x310>)
 801a7c2:	4694      	mov	ip, r2
 801a7c4:	4463      	add	r3, ip
 801a7c6:	0018      	movs	r0, r3
 801a7c8:	f7fe fe96 	bl	80194f8 <SX1276SetChannel>
                    break;
 801a7cc:	e042      	b.n	801a854 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a7ce:	2144      	movs	r1, #68	; 0x44
 801a7d0:	202f      	movs	r0, #47	; 0x2f
 801a7d2:	f000 faef 	bl	801adb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801a7d6:	4b5c      	ldr	r3, [pc, #368]	; (801a948 <SX1276SetRx+0x300>)
 801a7d8:	689b      	ldr	r3, [r3, #8]
 801a7da:	4a60      	ldr	r2, [pc, #384]	; (801a95c <SX1276SetRx+0x314>)
 801a7dc:	4694      	mov	ip, r2
 801a7de:	4463      	add	r3, ip
 801a7e0:	0018      	movs	r0, r3
 801a7e2:	f7fe fe89 	bl	80194f8 <SX1276SetChannel>
                    break;
 801a7e6:	e035      	b.n	801a854 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a7e8:	2144      	movs	r1, #68	; 0x44
 801a7ea:	202f      	movs	r0, #47	; 0x2f
 801a7ec:	f000 fae2 	bl	801adb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801a7f0:	4b55      	ldr	r3, [pc, #340]	; (801a948 <SX1276SetRx+0x300>)
 801a7f2:	689b      	ldr	r3, [r3, #8]
 801a7f4:	4a5a      	ldr	r2, [pc, #360]	; (801a960 <SX1276SetRx+0x318>)
 801a7f6:	4694      	mov	ip, r2
 801a7f8:	4463      	add	r3, ip
 801a7fa:	0018      	movs	r0, r3
 801a7fc:	f7fe fe7c 	bl	80194f8 <SX1276SetChannel>
                    break;
 801a800:	e028      	b.n	801a854 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a802:	2144      	movs	r1, #68	; 0x44
 801a804:	202f      	movs	r0, #47	; 0x2f
 801a806:	f000 fad5 	bl	801adb4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801a80a:	4b4f      	ldr	r3, [pc, #316]	; (801a948 <SX1276SetRx+0x300>)
 801a80c:	689b      	ldr	r3, [r3, #8]
 801a80e:	4a55      	ldr	r2, [pc, #340]	; (801a964 <SX1276SetRx+0x31c>)
 801a810:	4694      	mov	ip, r2
 801a812:	4463      	add	r3, ip
 801a814:	0018      	movs	r0, r3
 801a816:	f7fe fe6f 	bl	80194f8 <SX1276SetChannel>
                    break;
 801a81a:	e01b      	b.n	801a854 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a81c:	2140      	movs	r1, #64	; 0x40
 801a81e:	202f      	movs	r0, #47	; 0x2f
 801a820:	f000 fac8 	bl	801adb4 <SX1276Write>
                    break;
 801a824:	e016      	b.n	801a854 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a826:	2140      	movs	r1, #64	; 0x40
 801a828:	202f      	movs	r0, #47	; 0x2f
 801a82a:	f000 fac3 	bl	801adb4 <SX1276Write>
                    break;
 801a82e:	e011      	b.n	801a854 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a830:	2140      	movs	r1, #64	; 0x40
 801a832:	202f      	movs	r0, #47	; 0x2f
 801a834:	f000 fabe 	bl	801adb4 <SX1276Write>
                    break;
 801a838:	e00c      	b.n	801a854 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801a83a:	2031      	movs	r0, #49	; 0x31
 801a83c:	f000 facb 	bl	801add6 <SX1276Read>
 801a840:	0003      	movs	r3, r0
 801a842:	001a      	movs	r2, r3
 801a844:	2380      	movs	r3, #128	; 0x80
 801a846:	425b      	negs	r3, r3
 801a848:	4313      	orrs	r3, r2
 801a84a:	b2db      	uxtb	r3, r3
 801a84c:	0019      	movs	r1, r3
 801a84e:	2031      	movs	r0, #49	; 0x31
 801a850:	f000 fab0 	bl	801adb4 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801a854:	230f      	movs	r3, #15
 801a856:	18fb      	adds	r3, r7, r3
 801a858:	4a3b      	ldr	r2, [pc, #236]	; (801a948 <SX1276SetRx+0x300>)
 801a85a:	2156      	movs	r1, #86	; 0x56
 801a85c:	5c52      	ldrb	r2, [r2, r1]
 801a85e:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a860:	4b39      	ldr	r3, [pc, #228]	; (801a948 <SX1276SetRx+0x300>)
 801a862:	2253      	movs	r2, #83	; 0x53
 801a864:	5c9b      	ldrb	r3, [r3, r2]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d010      	beq.n	801a88c <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801a86a:	211d      	movs	r1, #29
 801a86c:	2011      	movs	r0, #17
 801a86e:	f000 faa1 	bl	801adb4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801a872:	2040      	movs	r0, #64	; 0x40
 801a874:	f000 faaf 	bl	801add6 <SX1276Read>
 801a878:	0003      	movs	r3, r0
 801a87a:	001a      	movs	r2, r3
 801a87c:	2333      	movs	r3, #51	; 0x33
 801a87e:	4013      	ands	r3, r2
 801a880:	b2db      	uxtb	r3, r3
 801a882:	0019      	movs	r1, r3
 801a884:	2040      	movs	r0, #64	; 0x40
 801a886:	f000 fa95 	bl	801adb4 <SX1276Write>
 801a88a:	e00f      	b.n	801a8ac <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801a88c:	211f      	movs	r1, #31
 801a88e:	2011      	movs	r0, #17
 801a890:	f000 fa90 	bl	801adb4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801a894:	2040      	movs	r0, #64	; 0x40
 801a896:	f000 fa9e 	bl	801add6 <SX1276Read>
 801a89a:	0003      	movs	r3, r0
 801a89c:	001a      	movs	r2, r3
 801a89e:	233f      	movs	r3, #63	; 0x3f
 801a8a0:	4013      	ands	r3, r2
 801a8a2:	b2db      	uxtb	r3, r3
 801a8a4:	0019      	movs	r1, r3
 801a8a6:	2040      	movs	r0, #64	; 0x40
 801a8a8:	f000 fa84 	bl	801adb4 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801a8ac:	2100      	movs	r1, #0
 801a8ae:	200f      	movs	r0, #15
 801a8b0:	f000 fa80 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a8b4:	2100      	movs	r1, #0
 801a8b6:	200d      	movs	r0, #13
 801a8b8:	f000 fa7c 	bl	801adb4 <SX1276Write>
        }
        break;
 801a8bc:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801a8be:	2380      	movs	r3, #128	; 0x80
 801a8c0:	005a      	lsls	r2, r3, #1
 801a8c2:	4b29      	ldr	r3, [pc, #164]	; (801a968 <SX1276SetRx+0x320>)
 801a8c4:	2100      	movs	r1, #0
 801a8c6:	0018      	movs	r0, r3
 801a8c8:	f003 fa87 	bl	801ddda <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801a8cc:	4b1e      	ldr	r3, [pc, #120]	; (801a948 <SX1276SetRx+0x300>)
 801a8ce:	2201      	movs	r2, #1
 801a8d0:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d009      	beq.n	801a8ec <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a8d8:	687a      	ldr	r2, [r7, #4]
 801a8da:	4b24      	ldr	r3, [pc, #144]	; (801a96c <SX1276SetRx+0x324>)
 801a8dc:	0011      	movs	r1, r2
 801a8de:	0018      	movs	r0, r3
 801a8e0:	f002 f954 	bl	801cb8c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a8e4:	4b21      	ldr	r3, [pc, #132]	; (801a96c <SX1276SetRx+0x324>)
 801a8e6:	0018      	movs	r0, r3
 801a8e8:	f002 f860 	bl	801c9ac <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801a8ec:	4b16      	ldr	r3, [pc, #88]	; (801a948 <SX1276SetRx+0x300>)
 801a8ee:	795b      	ldrb	r3, [r3, #5]
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d116      	bne.n	801a922 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801a8f4:	2005      	movs	r0, #5
 801a8f6:	f000 f996 	bl	801ac26 <SX1276SetOpMode>

        if( rxContinuous == false )
 801a8fa:	230f      	movs	r3, #15
 801a8fc:	18fb      	adds	r3, r7, r3
 801a8fe:	781b      	ldrb	r3, [r3, #0]
 801a900:	2201      	movs	r2, #1
 801a902:	4053      	eors	r3, r2
 801a904:	b2db      	uxtb	r3, r3
 801a906:	2b00      	cmp	r3, #0
 801a908:	d017      	beq.n	801a93a <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801a90a:	4b0f      	ldr	r3, [pc, #60]	; (801a948 <SX1276SetRx+0x300>)
 801a90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a90e:	4b18      	ldr	r3, [pc, #96]	; (801a970 <SX1276SetRx+0x328>)
 801a910:	0011      	movs	r1, r2
 801a912:	0018      	movs	r0, r3
 801a914:	f002 f93a 	bl	801cb8c <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 801a918:	4b15      	ldr	r3, [pc, #84]	; (801a970 <SX1276SetRx+0x328>)
 801a91a:	0018      	movs	r0, r3
 801a91c:	f002 f846 	bl	801c9ac <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801a920:	e00b      	b.n	801a93a <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 801a922:	230f      	movs	r3, #15
 801a924:	18fb      	adds	r3, r7, r3
 801a926:	781b      	ldrb	r3, [r3, #0]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d003      	beq.n	801a934 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801a92c:	2005      	movs	r0, #5
 801a92e:	f000 f97a 	bl	801ac26 <SX1276SetOpMode>
}
 801a932:	e002      	b.n	801a93a <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801a934:	2006      	movs	r0, #6
 801a936:	f000 f976 	bl	801ac26 <SX1276SetOpMode>
}
 801a93a:	46c0      	nop			; (mov r8, r8)
 801a93c:	46bd      	mov	sp, r7
 801a93e:	b004      	add	sp, #16
 801a940:	bd80      	pop	{r7, pc}
 801a942:	46c0      	nop			; (mov r8, r8)
 801a944:	200016a0 	.word	0x200016a0
 801a948:	200016d0 	.word	0x200016d0
 801a94c:	0801f208 	.word	0x0801f208
 801a950:	00001e82 	.word	0x00001e82
 801a954:	000028b4 	.word	0x000028b4
 801a958:	00003d04 	.word	0x00003d04
 801a95c:	0000515e 	.word	0x0000515e
 801a960:	00007a12 	.word	0x00007a12
 801a964:	0000a2c6 	.word	0x0000a2c6
 801a968:	20000e18 	.word	0x20000e18
 801a96c:	20001738 	.word	0x20001738
 801a970:	200016b8 	.word	0x200016b8

0801a974 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b082      	sub	sp, #8
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 801a97c:	4b38      	ldr	r3, [pc, #224]	; (801aa60 <SX1276SetTx+0xec>)
 801a97e:	0018      	movs	r0, r3
 801a980:	f002 f88c 	bl	801ca9c <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a984:	687a      	ldr	r2, [r7, #4]
 801a986:	4b37      	ldr	r3, [pc, #220]	; (801aa64 <SX1276SetTx+0xf0>)
 801a988:	0011      	movs	r1, r2
 801a98a:	0018      	movs	r0, r3
 801a98c:	f002 f8fe 	bl	801cb8c <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 801a990:	4b35      	ldr	r3, [pc, #212]	; (801aa68 <SX1276SetTx+0xf4>)
 801a992:	795b      	ldrb	r3, [r3, #5]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d002      	beq.n	801a99e <SX1276SetTx+0x2a>
 801a998:	2b01      	cmp	r3, #1
 801a99a:	d024      	beq.n	801a9e6 <SX1276SetTx+0x72>
 801a99c:	e052      	b.n	801aa44 <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a99e:	2040      	movs	r0, #64	; 0x40
 801a9a0:	f000 fa19 	bl	801add6 <SX1276Read>
 801a9a4:	0003      	movs	r3, r0
 801a9a6:	001a      	movs	r2, r3
 801a9a8:	2303      	movs	r3, #3
 801a9aa:	4013      	ands	r3, r2
 801a9ac:	b2db      	uxtb	r3, r3
 801a9ae:	0019      	movs	r1, r3
 801a9b0:	2040      	movs	r0, #64	; 0x40
 801a9b2:	f000 f9ff 	bl	801adb4 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a9b6:	2041      	movs	r0, #65	; 0x41
 801a9b8:	f000 fa0d 	bl	801add6 <SX1276Read>
 801a9bc:	0003      	movs	r3, r0
 801a9be:	001a      	movs	r2, r3
 801a9c0:	233e      	movs	r3, #62	; 0x3e
 801a9c2:	4013      	ands	r3, r2
 801a9c4:	b2db      	uxtb	r3, r3
 801a9c6:	0019      	movs	r1, r3
 801a9c8:	2041      	movs	r0, #65	; 0x41
 801a9ca:	f000 f9f3 	bl	801adb4 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a9ce:	2035      	movs	r0, #53	; 0x35
 801a9d0:	f000 fa01 	bl	801add6 <SX1276Read>
 801a9d4:	0003      	movs	r3, r0
 801a9d6:	001a      	movs	r2, r3
 801a9d8:	233f      	movs	r3, #63	; 0x3f
 801a9da:	4013      	ands	r3, r2
 801a9dc:	b2d9      	uxtb	r1, r3
 801a9de:	4b22      	ldr	r3, [pc, #136]	; (801aa68 <SX1276SetTx+0xf4>)
 801a9e0:	223e      	movs	r2, #62	; 0x3e
 801a9e2:	5499      	strb	r1, [r3, r2]
        }
        break;
 801a9e4:	e02e      	b.n	801aa44 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a9e6:	4b20      	ldr	r3, [pc, #128]	; (801aa68 <SX1276SetTx+0xf4>)
 801a9e8:	2253      	movs	r2, #83	; 0x53
 801a9ea:	5c9b      	ldrb	r3, [r3, r2]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d014      	beq.n	801aa1a <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a9f0:	21f5      	movs	r1, #245	; 0xf5
 801a9f2:	2011      	movs	r0, #17
 801a9f4:	f000 f9de 	bl	801adb4 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801a9f8:	2040      	movs	r0, #64	; 0x40
 801a9fa:	f000 f9ec 	bl	801add6 <SX1276Read>
 801a9fe:	0003      	movs	r3, r0
 801aa00:	b25b      	sxtb	r3, r3
 801aa02:	2233      	movs	r2, #51	; 0x33
 801aa04:	4013      	ands	r3, r2
 801aa06:	b25b      	sxtb	r3, r3
 801aa08:	2240      	movs	r2, #64	; 0x40
 801aa0a:	4313      	orrs	r3, r2
 801aa0c:	b25b      	sxtb	r3, r3
 801aa0e:	b2db      	uxtb	r3, r3
 801aa10:	0019      	movs	r1, r3
 801aa12:	2040      	movs	r0, #64	; 0x40
 801aa14:	f000 f9ce 	bl	801adb4 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801aa18:	e013      	b.n	801aa42 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801aa1a:	21f7      	movs	r1, #247	; 0xf7
 801aa1c:	2011      	movs	r0, #17
 801aa1e:	f000 f9c9 	bl	801adb4 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801aa22:	2040      	movs	r0, #64	; 0x40
 801aa24:	f000 f9d7 	bl	801add6 <SX1276Read>
 801aa28:	0003      	movs	r3, r0
 801aa2a:	b25b      	sxtb	r3, r3
 801aa2c:	223f      	movs	r2, #63	; 0x3f
 801aa2e:	4013      	ands	r3, r2
 801aa30:	b25b      	sxtb	r3, r3
 801aa32:	2240      	movs	r2, #64	; 0x40
 801aa34:	4313      	orrs	r3, r2
 801aa36:	b25b      	sxtb	r3, r3
 801aa38:	b2db      	uxtb	r3, r3
 801aa3a:	0019      	movs	r1, r3
 801aa3c:	2040      	movs	r0, #64	; 0x40
 801aa3e:	f000 f9b9 	bl	801adb4 <SX1276Write>
        break;
 801aa42:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801aa44:	4b08      	ldr	r3, [pc, #32]	; (801aa68 <SX1276SetTx+0xf4>)
 801aa46:	2202      	movs	r2, #2
 801aa48:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801aa4a:	4b06      	ldr	r3, [pc, #24]	; (801aa64 <SX1276SetTx+0xf0>)
 801aa4c:	0018      	movs	r0, r3
 801aa4e:	f001 ffad 	bl	801c9ac <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801aa52:	2003      	movs	r0, #3
 801aa54:	f000 f8e7 	bl	801ac26 <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801aa58:	46c0      	nop			; (mov r8, r8)
 801aa5a:	46bd      	mov	sp, r7
 801aa5c:	b002      	add	sp, #8
 801aa5e:	bd80      	pop	{r7, pc}
 801aa60:	20001738 	.word	0x20001738
 801aa64:	200016a0 	.word	0x200016a0
 801aa68:	200016d0 	.word	0x200016d0

0801aa6c <SX1276StartCad>:

void SX1276StartCad( void )
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801aa70:	4b11      	ldr	r3, [pc, #68]	; (801aab8 <SX1276StartCad+0x4c>)
 801aa72:	795b      	ldrb	r3, [r3, #5]
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d01a      	beq.n	801aaae <SX1276StartCad+0x42>
 801aa78:	2b01      	cmp	r3, #1
 801aa7a:	d000      	beq.n	801aa7e <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801aa7c:	e018      	b.n	801aab0 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801aa7e:	21fa      	movs	r1, #250	; 0xfa
 801aa80:	2011      	movs	r0, #17
 801aa82:	f000 f997 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801aa86:	2040      	movs	r0, #64	; 0x40
 801aa88:	f000 f9a5 	bl	801add6 <SX1276Read>
 801aa8c:	0003      	movs	r3, r0
 801aa8e:	001a      	movs	r2, r3
 801aa90:	2303      	movs	r3, #3
 801aa92:	439a      	bics	r2, r3
 801aa94:	0013      	movs	r3, r2
 801aa96:	b2db      	uxtb	r3, r3
 801aa98:	0019      	movs	r1, r3
 801aa9a:	2040      	movs	r0, #64	; 0x40
 801aa9c:	f000 f98a 	bl	801adb4 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801aaa0:	4b05      	ldr	r3, [pc, #20]	; (801aab8 <SX1276StartCad+0x4c>)
 801aaa2:	2203      	movs	r2, #3
 801aaa4:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801aaa6:	2007      	movs	r0, #7
 801aaa8:	f000 f8bd 	bl	801ac26 <SX1276SetOpMode>
        break;
 801aaac:	e000      	b.n	801aab0 <SX1276StartCad+0x44>
        break;
 801aaae:	46c0      	nop			; (mov r8, r8)
    }
}
 801aab0:	46c0      	nop			; (mov r8, r8)
 801aab2:	46bd      	mov	sp, r7
 801aab4:	bd80      	pop	{r7, pc}
 801aab6:	46c0      	nop			; (mov r8, r8)
 801aab8:	200016d0 	.word	0x200016d0

0801aabc <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b08e      	sub	sp, #56	; 0x38
 801aac0:	af0a      	add	r7, sp, #40	; 0x28
 801aac2:	6078      	str	r0, [r7, #4]
 801aac4:	0008      	movs	r0, r1
 801aac6:	0011      	movs	r1, r2
 801aac8:	1cfb      	adds	r3, r7, #3
 801aaca:	1c02      	adds	r2, r0, #0
 801aacc:	701a      	strb	r2, [r3, #0]
 801aace:	003b      	movs	r3, r7
 801aad0:	1c0a      	adds	r2, r1, #0
 801aad2:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801aad4:	003b      	movs	r3, r7
 801aad6:	881a      	ldrh	r2, [r3, #0]
 801aad8:	0013      	movs	r3, r2
 801aada:	015b      	lsls	r3, r3, #5
 801aadc:	1a9b      	subs	r3, r3, r2
 801aade:	009b      	lsls	r3, r3, #2
 801aae0:	189b      	adds	r3, r3, r2
 801aae2:	00db      	lsls	r3, r3, #3
 801aae4:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	0018      	movs	r0, r3
 801aaea:	f7fe fd05 	bl	80194f8 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801aaee:	1cfb      	adds	r3, r7, #3
 801aaf0:	2100      	movs	r1, #0
 801aaf2:	5659      	ldrsb	r1, [r3, r1]
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	9308      	str	r3, [sp, #32]
 801aaf8:	2300      	movs	r3, #0
 801aafa:	9307      	str	r3, [sp, #28]
 801aafc:	2300      	movs	r3, #0
 801aafe:	9306      	str	r3, [sp, #24]
 801ab00:	2300      	movs	r3, #0
 801ab02:	9305      	str	r3, [sp, #20]
 801ab04:	2300      	movs	r3, #0
 801ab06:	9304      	str	r3, [sp, #16]
 801ab08:	2300      	movs	r3, #0
 801ab0a:	9303      	str	r3, [sp, #12]
 801ab0c:	2305      	movs	r3, #5
 801ab0e:	9302      	str	r3, [sp, #8]
 801ab10:	2300      	movs	r3, #0
 801ab12:	9301      	str	r3, [sp, #4]
 801ab14:	2396      	movs	r3, #150	; 0x96
 801ab16:	015b      	lsls	r3, r3, #5
 801ab18:	9300      	str	r3, [sp, #0]
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	2000      	movs	r0, #0
 801ab20:	f7ff f8d4 	bl	8019ccc <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801ab24:	2031      	movs	r0, #49	; 0x31
 801ab26:	f000 f956 	bl	801add6 <SX1276Read>
 801ab2a:	0003      	movs	r3, r0
 801ab2c:	001a      	movs	r2, r3
 801ab2e:	2340      	movs	r3, #64	; 0x40
 801ab30:	439a      	bics	r2, r3
 801ab32:	0013      	movs	r3, r2
 801ab34:	b2db      	uxtb	r3, r3
 801ab36:	0019      	movs	r1, r3
 801ab38:	2031      	movs	r0, #49	; 0x31
 801ab3a:	f000 f93b 	bl	801adb4 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801ab3e:	21f0      	movs	r1, #240	; 0xf0
 801ab40:	2040      	movs	r0, #64	; 0x40
 801ab42:	f000 f937 	bl	801adb4 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801ab46:	21a0      	movs	r1, #160	; 0xa0
 801ab48:	2041      	movs	r0, #65	; 0x41
 801ab4a:	f000 f933 	bl	801adb4 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ab4e:	68fa      	ldr	r2, [r7, #12]
 801ab50:	4b09      	ldr	r3, [pc, #36]	; (801ab78 <SX1276SetTxContinuousWave+0xbc>)
 801ab52:	0011      	movs	r1, r2
 801ab54:	0018      	movs	r0, r3
 801ab56:	f002 f819 	bl	801cb8c <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801ab5a:	4b08      	ldr	r3, [pc, #32]	; (801ab7c <SX1276SetTxContinuousWave+0xc0>)
 801ab5c:	2202      	movs	r2, #2
 801ab5e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801ab60:	4b05      	ldr	r3, [pc, #20]	; (801ab78 <SX1276SetTxContinuousWave+0xbc>)
 801ab62:	0018      	movs	r0, r3
 801ab64:	f001 ff22 	bl	801c9ac <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801ab68:	2003      	movs	r0, #3
 801ab6a:	f000 f85c 	bl	801ac26 <SX1276SetOpMode>
}
 801ab6e:	46c0      	nop			; (mov r8, r8)
 801ab70:	46bd      	mov	sp, r7
 801ab72:	b004      	add	sp, #16
 801ab74:	bd80      	pop	{r7, pc}
 801ab76:	46c0      	nop			; (mov r8, r8)
 801ab78:	200016a0 	.word	0x200016a0
 801ab7c:	200016d0 	.word	0x200016d0

0801ab80 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801ab80:	b580      	push	{r7, lr}
 801ab82:	b084      	sub	sp, #16
 801ab84:	af00      	add	r7, sp, #0
 801ab86:	0002      	movs	r2, r0
 801ab88:	1dfb      	adds	r3, r7, #7
 801ab8a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801ab8c:	230e      	movs	r3, #14
 801ab8e:	18fb      	adds	r3, r7, r3
 801ab90:	2200      	movs	r2, #0
 801ab92:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801ab94:	1dfb      	adds	r3, r7, #7
 801ab96:	781b      	ldrb	r3, [r3, #0]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d002      	beq.n	801aba2 <SX1276ReadRssi+0x22>
 801ab9c:	2b01      	cmp	r3, #1
 801ab9e:	d00d      	beq.n	801abbc <SX1276ReadRssi+0x3c>
 801aba0:	e027      	b.n	801abf2 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801aba2:	2011      	movs	r0, #17
 801aba4:	f000 f917 	bl	801add6 <SX1276Read>
 801aba8:	0003      	movs	r3, r0
 801abaa:	085b      	lsrs	r3, r3, #1
 801abac:	b2db      	uxtb	r3, r3
 801abae:	b29b      	uxth	r3, r3
 801abb0:	425b      	negs	r3, r3
 801abb2:	b29a      	uxth	r2, r3
 801abb4:	230e      	movs	r3, #14
 801abb6:	18fb      	adds	r3, r7, r3
 801abb8:	801a      	strh	r2, [r3, #0]
        break;
 801abba:	e020      	b.n	801abfe <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801abbc:	4b14      	ldr	r3, [pc, #80]	; (801ac10 <SX1276ReadRssi+0x90>)
 801abbe:	689b      	ldr	r3, [r3, #8]
 801abc0:	4a14      	ldr	r2, [pc, #80]	; (801ac14 <SX1276ReadRssi+0x94>)
 801abc2:	4293      	cmp	r3, r2
 801abc4:	d90a      	bls.n	801abdc <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801abc6:	201b      	movs	r0, #27
 801abc8:	f000 f905 	bl	801add6 <SX1276Read>
 801abcc:	0003      	movs	r3, r0
 801abce:	b29b      	uxth	r3, r3
 801abd0:	3b9d      	subs	r3, #157	; 0x9d
 801abd2:	b29a      	uxth	r2, r3
 801abd4:	230e      	movs	r3, #14
 801abd6:	18fb      	adds	r3, r7, r3
 801abd8:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801abda:	e010      	b.n	801abfe <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801abdc:	201b      	movs	r0, #27
 801abde:	f000 f8fa 	bl	801add6 <SX1276Read>
 801abe2:	0003      	movs	r3, r0
 801abe4:	b29b      	uxth	r3, r3
 801abe6:	3ba4      	subs	r3, #164	; 0xa4
 801abe8:	b29a      	uxth	r2, r3
 801abea:	230e      	movs	r3, #14
 801abec:	18fb      	adds	r3, r7, r3
 801abee:	801a      	strh	r2, [r3, #0]
        break;
 801abf0:	e005      	b.n	801abfe <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801abf2:	230e      	movs	r3, #14
 801abf4:	18fb      	adds	r3, r7, r3
 801abf6:	2201      	movs	r2, #1
 801abf8:	4252      	negs	r2, r2
 801abfa:	801a      	strh	r2, [r3, #0]
        break;
 801abfc:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801abfe:	230e      	movs	r3, #14
 801ac00:	18fb      	adds	r3, r7, r3
 801ac02:	2200      	movs	r2, #0
 801ac04:	5e9b      	ldrsh	r3, [r3, r2]
}
 801ac06:	0018      	movs	r0, r3
 801ac08:	46bd      	mov	sp, r7
 801ac0a:	b004      	add	sp, #16
 801ac0c:	bd80      	pop	{r7, pc}
 801ac0e:	46c0      	nop			; (mov r8, r8)
 801ac10:	200016d0 	.word	0x200016d0
 801ac14:	1f4add40 	.word	0x1f4add40

0801ac18 <SX1276Reset>:

static void SX1276Reset( void )
{
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801ac1c:	f7eb fa9c 	bl	8006158 <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801ac20:	46c0      	nop			; (mov r8, r8)
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd80      	pop	{r7, pc}

0801ac26 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801ac26:	b5b0      	push	{r4, r5, r7, lr}
 801ac28:	b084      	sub	sp, #16
 801ac2a:	af00      	add	r7, sp, #0
 801ac2c:	0002      	movs	r2, r0
 801ac2e:	1dfb      	adds	r3, r7, #7
 801ac30:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801ac32:	1dfb      	adds	r3, r7, #7
 801ac34:	781b      	ldrb	r3, [r3, #0]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d118      	bne.n	801ac6c <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ac3a:	2001      	movs	r0, #1
 801ac3c:	f000 f8cb 	bl	801add6 <SX1276Read>
 801ac40:	0003      	movs	r3, r0
 801ac42:	b25b      	sxtb	r3, r3
 801ac44:	2207      	movs	r2, #7
 801ac46:	4393      	bics	r3, r2
 801ac48:	b25a      	sxtb	r2, r3
 801ac4a:	1dfb      	adds	r3, r7, #7
 801ac4c:	781b      	ldrb	r3, [r3, #0]
 801ac4e:	b25b      	sxtb	r3, r3
 801ac50:	4313      	orrs	r3, r2
 801ac52:	b25b      	sxtb	r3, r3
 801ac54:	b2db      	uxtb	r3, r3
 801ac56:	0019      	movs	r1, r3
 801ac58:	2001      	movs	r0, #1
 801ac5a:	f000 f8ab 	bl	801adb4 <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801ac5e:	2000      	movs	r0, #0
 801ac60:	f7eb fa1a 	bl	8006098 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801ac64:	2000      	movs	r0, #0
 801ac66:	f7eb f859 	bl	8005d1c <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801ac6a:	e044      	b.n	801acf6 <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801ac6c:	1dfb      	adds	r3, r7, #7
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	2b05      	cmp	r3, #5
 801ac72:	d118      	bne.n	801aca6 <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801ac74:	2001      	movs	r0, #1
 801ac76:	f7eb f851 	bl	8005d1c <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801ac7a:	2001      	movs	r0, #1
 801ac7c:	f7eb fa0c 	bl	8006098 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ac80:	2001      	movs	r0, #1
 801ac82:	f000 f8a8 	bl	801add6 <SX1276Read>
 801ac86:	0003      	movs	r3, r0
 801ac88:	b25b      	sxtb	r3, r3
 801ac8a:	2207      	movs	r2, #7
 801ac8c:	4393      	bics	r3, r2
 801ac8e:	b25a      	sxtb	r2, r3
 801ac90:	1dfb      	adds	r3, r7, #7
 801ac92:	781b      	ldrb	r3, [r3, #0]
 801ac94:	b25b      	sxtb	r3, r3
 801ac96:	4313      	orrs	r3, r2
 801ac98:	b25b      	sxtb	r3, r3
 801ac9a:	b2db      	uxtb	r3, r3
 801ac9c:	0019      	movs	r1, r3
 801ac9e:	2001      	movs	r0, #1
 801aca0:	f000 f888 	bl	801adb4 <SX1276Write>
}
 801aca4:	e027      	b.n	801acf6 <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801aca6:	250f      	movs	r5, #15
 801aca8:	197c      	adds	r4, r7, r5
 801acaa:	2009      	movs	r0, #9
 801acac:	f000 f893 	bl	801add6 <SX1276Read>
 801acb0:	0003      	movs	r3, r0
 801acb2:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801acb4:	2001      	movs	r0, #1
 801acb6:	f7eb f831 	bl	8005d1c <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801acba:	197b      	adds	r3, r7, r5
 801acbc:	781b      	ldrb	r3, [r3, #0]
 801acbe:	b25b      	sxtb	r3, r3
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	da03      	bge.n	801accc <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801acc4:	2003      	movs	r0, #3
 801acc6:	f7eb f9e7 	bl	8006098 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801acca:	e002      	b.n	801acd2 <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801accc:	2002      	movs	r0, #2
 801acce:	f7eb f9e3 	bl	8006098 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801acd2:	2001      	movs	r0, #1
 801acd4:	f000 f87f 	bl	801add6 <SX1276Read>
 801acd8:	0003      	movs	r3, r0
 801acda:	b25b      	sxtb	r3, r3
 801acdc:	2207      	movs	r2, #7
 801acde:	4393      	bics	r3, r2
 801ace0:	b25a      	sxtb	r2, r3
 801ace2:	1dfb      	adds	r3, r7, #7
 801ace4:	781b      	ldrb	r3, [r3, #0]
 801ace6:	b25b      	sxtb	r3, r3
 801ace8:	4313      	orrs	r3, r2
 801acea:	b25b      	sxtb	r3, r3
 801acec:	b2db      	uxtb	r3, r3
 801acee:	0019      	movs	r1, r3
 801acf0:	2001      	movs	r0, #1
 801acf2:	f000 f85f 	bl	801adb4 <SX1276Write>
}
 801acf6:	46c0      	nop			; (mov r8, r8)
 801acf8:	46bd      	mov	sp, r7
 801acfa:	b004      	add	sp, #16
 801acfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801ad00 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b082      	sub	sp, #8
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	0002      	movs	r2, r0
 801ad08:	1dfb      	adds	r3, r7, #7
 801ad0a:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801ad0c:	2001      	movs	r0, #1
 801ad0e:	f000 f862 	bl	801add6 <SX1276Read>
 801ad12:	0003      	movs	r3, r0
 801ad14:	b25b      	sxtb	r3, r3
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	da03      	bge.n	801ad22 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801ad1a:	4b25      	ldr	r3, [pc, #148]	; (801adb0 <SX1276SetModem+0xb0>)
 801ad1c:	2201      	movs	r2, #1
 801ad1e:	715a      	strb	r2, [r3, #5]
 801ad20:	e002      	b.n	801ad28 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801ad22:	4b23      	ldr	r3, [pc, #140]	; (801adb0 <SX1276SetModem+0xb0>)
 801ad24:	2200      	movs	r2, #0
 801ad26:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801ad28:	4b21      	ldr	r3, [pc, #132]	; (801adb0 <SX1276SetModem+0xb0>)
 801ad2a:	795b      	ldrb	r3, [r3, #5]
 801ad2c:	1dfa      	adds	r2, r7, #7
 801ad2e:	7812      	ldrb	r2, [r2, #0]
 801ad30:	429a      	cmp	r2, r3
 801ad32:	d038      	beq.n	801ada6 <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801ad34:	4b1e      	ldr	r3, [pc, #120]	; (801adb0 <SX1276SetModem+0xb0>)
 801ad36:	1dfa      	adds	r2, r7, #7
 801ad38:	7812      	ldrb	r2, [r2, #0]
 801ad3a:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801ad3c:	4b1c      	ldr	r3, [pc, #112]	; (801adb0 <SX1276SetModem+0xb0>)
 801ad3e:	795b      	ldrb	r3, [r3, #5]
 801ad40:	2b01      	cmp	r3, #1
 801ad42:	d017      	beq.n	801ad74 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801ad44:	2000      	movs	r0, #0
 801ad46:	f7ff ff6e 	bl	801ac26 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801ad4a:	2001      	movs	r0, #1
 801ad4c:	f000 f843 	bl	801add6 <SX1276Read>
 801ad50:	0003      	movs	r3, r0
 801ad52:	001a      	movs	r2, r3
 801ad54:	237f      	movs	r3, #127	; 0x7f
 801ad56:	4013      	ands	r3, r2
 801ad58:	b2db      	uxtb	r3, r3
 801ad5a:	0019      	movs	r1, r3
 801ad5c:	2001      	movs	r0, #1
 801ad5e:	f000 f829 	bl	801adb4 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801ad62:	2100      	movs	r1, #0
 801ad64:	2040      	movs	r0, #64	; 0x40
 801ad66:	f000 f825 	bl	801adb4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801ad6a:	2130      	movs	r1, #48	; 0x30
 801ad6c:	2041      	movs	r0, #65	; 0x41
 801ad6e:	f000 f821 	bl	801adb4 <SX1276Write>
        break;
 801ad72:	e019      	b.n	801ada8 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801ad74:	2000      	movs	r0, #0
 801ad76:	f7ff ff56 	bl	801ac26 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801ad7a:	2001      	movs	r0, #1
 801ad7c:	f000 f82b 	bl	801add6 <SX1276Read>
 801ad80:	0003      	movs	r3, r0
 801ad82:	001a      	movs	r2, r3
 801ad84:	2380      	movs	r3, #128	; 0x80
 801ad86:	425b      	negs	r3, r3
 801ad88:	4313      	orrs	r3, r2
 801ad8a:	b2db      	uxtb	r3, r3
 801ad8c:	0019      	movs	r1, r3
 801ad8e:	2001      	movs	r0, #1
 801ad90:	f000 f810 	bl	801adb4 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801ad94:	2100      	movs	r1, #0
 801ad96:	2040      	movs	r0, #64	; 0x40
 801ad98:	f000 f80c 	bl	801adb4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801ad9c:	2100      	movs	r1, #0
 801ad9e:	2041      	movs	r0, #65	; 0x41
 801ada0:	f000 f808 	bl	801adb4 <SX1276Write>
        break;
 801ada4:	e000      	b.n	801ada8 <SX1276SetModem+0xa8>
        return;
 801ada6:	46c0      	nop			; (mov r8, r8)
    }
}
 801ada8:	46bd      	mov	sp, r7
 801adaa:	b002      	add	sp, #8
 801adac:	bd80      	pop	{r7, pc}
 801adae:	46c0      	nop			; (mov r8, r8)
 801adb0:	200016d0 	.word	0x200016d0

0801adb4 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b082      	sub	sp, #8
 801adb8:	af00      	add	r7, sp, #0
 801adba:	6078      	str	r0, [r7, #4]
 801adbc:	000a      	movs	r2, r1
 801adbe:	1cfb      	adds	r3, r7, #3
 801adc0:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801adc2:	1cf9      	adds	r1, r7, #3
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	2201      	movs	r2, #1
 801adc8:	0018      	movs	r0, r3
 801adca:	f000 f815 	bl	801adf8 <SX1276WriteBuffer>
}
 801adce:	46c0      	nop			; (mov r8, r8)
 801add0:	46bd      	mov	sp, r7
 801add2:	b002      	add	sp, #8
 801add4:	bd80      	pop	{r7, pc}

0801add6 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801add6:	b590      	push	{r4, r7, lr}
 801add8:	b085      	sub	sp, #20
 801adda:	af00      	add	r7, sp, #0
 801addc:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801adde:	240f      	movs	r4, #15
 801ade0:	1939      	adds	r1, r7, r4
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	2201      	movs	r2, #1
 801ade6:	0018      	movs	r0, r3
 801ade8:	f000 f83a 	bl	801ae60 <SX1276ReadBuffer>
    return data;
 801adec:	193b      	adds	r3, r7, r4
 801adee:	781b      	ldrb	r3, [r3, #0]
}
 801adf0:	0018      	movs	r0, r3
 801adf2:	46bd      	mov	sp, r7
 801adf4:	b005      	add	sp, #20
 801adf6:	bd90      	pop	{r4, r7, pc}

0801adf8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801adf8:	b590      	push	{r4, r7, lr}
 801adfa:	b087      	sub	sp, #28
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	60f8      	str	r0, [r7, #12]
 801ae00:	60b9      	str	r1, [r7, #8]
 801ae02:	1dfb      	adds	r3, r7, #7
 801ae04:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801ae06:	2000      	movs	r0, #0
 801ae08:	f7eb f9f8 	bl	80061fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	b29b      	uxth	r3, r3
 801ae10:	2280      	movs	r2, #128	; 0x80
 801ae12:	4313      	orrs	r3, r2
 801ae14:	b29b      	uxth	r3, r3
 801ae16:	0018      	movs	r0, r3
 801ae18:	f7eb f9dd 	bl	80061d6 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801ae1c:	2317      	movs	r3, #23
 801ae1e:	18fb      	adds	r3, r7, r3
 801ae20:	2200      	movs	r2, #0
 801ae22:	701a      	strb	r2, [r3, #0]
 801ae24:	e00e      	b.n	801ae44 <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801ae26:	2417      	movs	r4, #23
 801ae28:	193b      	adds	r3, r7, r4
 801ae2a:	781b      	ldrb	r3, [r3, #0]
 801ae2c:	68ba      	ldr	r2, [r7, #8]
 801ae2e:	18d3      	adds	r3, r2, r3
 801ae30:	781b      	ldrb	r3, [r3, #0]
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	0018      	movs	r0, r3
 801ae36:	f7eb f9ce 	bl	80061d6 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801ae3a:	193b      	adds	r3, r7, r4
 801ae3c:	781a      	ldrb	r2, [r3, #0]
 801ae3e:	193b      	adds	r3, r7, r4
 801ae40:	3201      	adds	r2, #1
 801ae42:	701a      	strb	r2, [r3, #0]
 801ae44:	2317      	movs	r3, #23
 801ae46:	18fa      	adds	r2, r7, r3
 801ae48:	1dfb      	adds	r3, r7, #7
 801ae4a:	7812      	ldrb	r2, [r2, #0]
 801ae4c:	781b      	ldrb	r3, [r3, #0]
 801ae4e:	429a      	cmp	r2, r3
 801ae50:	d3e9      	bcc.n	801ae26 <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801ae52:	2001      	movs	r0, #1
 801ae54:	f7eb f9d2 	bl	80061fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801ae58:	46c0      	nop			; (mov r8, r8)
 801ae5a:	46bd      	mov	sp, r7
 801ae5c:	b007      	add	sp, #28
 801ae5e:	bd90      	pop	{r4, r7, pc}

0801ae60 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801ae60:	b580      	push	{r7, lr}
 801ae62:	b086      	sub	sp, #24
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	60f8      	str	r0, [r7, #12]
 801ae68:	60b9      	str	r1, [r7, #8]
 801ae6a:	1dfb      	adds	r3, r7, #7
 801ae6c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801ae6e:	2000      	movs	r0, #0
 801ae70:	f7eb f9c4 	bl	80061fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	227f      	movs	r2, #127	; 0x7f
 801ae7a:	4013      	ands	r3, r2
 801ae7c:	b29b      	uxth	r3, r3
 801ae7e:	0018      	movs	r0, r3
 801ae80:	f7eb f9a9 	bl	80061d6 <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801ae84:	2317      	movs	r3, #23
 801ae86:	18fb      	adds	r3, r7, r3
 801ae88:	2200      	movs	r2, #0
 801ae8a:	701a      	strb	r2, [r3, #0]
 801ae8c:	e010      	b.n	801aeb0 <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801ae8e:	2000      	movs	r0, #0
 801ae90:	f7eb f9a1 	bl	80061d6 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801ae94:	0003      	movs	r3, r0
 801ae96:	0019      	movs	r1, r3
 801ae98:	2017      	movs	r0, #23
 801ae9a:	183b      	adds	r3, r7, r0
 801ae9c:	781b      	ldrb	r3, [r3, #0]
 801ae9e:	68ba      	ldr	r2, [r7, #8]
 801aea0:	18d3      	adds	r3, r2, r3
 801aea2:	b2ca      	uxtb	r2, r1
 801aea4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801aea6:	183b      	adds	r3, r7, r0
 801aea8:	781a      	ldrb	r2, [r3, #0]
 801aeaa:	183b      	adds	r3, r7, r0
 801aeac:	3201      	adds	r2, #1
 801aeae:	701a      	strb	r2, [r3, #0]
 801aeb0:	2317      	movs	r3, #23
 801aeb2:	18fa      	adds	r2, r7, r3
 801aeb4:	1dfb      	adds	r3, r7, #7
 801aeb6:	7812      	ldrb	r2, [r2, #0]
 801aeb8:	781b      	ldrb	r3, [r3, #0]
 801aeba:	429a      	cmp	r2, r3
 801aebc:	d3e7      	bcc.n	801ae8e <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801aebe:	2001      	movs	r0, #1
 801aec0:	f7eb f99c 	bl	80061fc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801aec4:	46c0      	nop			; (mov r8, r8)
 801aec6:	46bd      	mov	sp, r7
 801aec8:	b006      	add	sp, #24
 801aeca:	bd80      	pop	{r7, pc}

0801aecc <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801aecc:	b580      	push	{r7, lr}
 801aece:	b082      	sub	sp, #8
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	6078      	str	r0, [r7, #4]
 801aed4:	000a      	movs	r2, r1
 801aed6:	1cfb      	adds	r3, r7, #3
 801aed8:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801aeda:	1cfb      	adds	r3, r7, #3
 801aedc:	781a      	ldrb	r2, [r3, #0]
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	0019      	movs	r1, r3
 801aee2:	2000      	movs	r0, #0
 801aee4:	f7ff ff88 	bl	801adf8 <SX1276WriteBuffer>
}
 801aee8:	46c0      	nop			; (mov r8, r8)
 801aeea:	46bd      	mov	sp, r7
 801aeec:	b002      	add	sp, #8
 801aeee:	bd80      	pop	{r7, pc}

0801aef0 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b082      	sub	sp, #8
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
 801aef8:	000a      	movs	r2, r1
 801aefa:	1cfb      	adds	r3, r7, #3
 801aefc:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801aefe:	1cfb      	adds	r3, r7, #3
 801af00:	781a      	ldrb	r2, [r3, #0]
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	0019      	movs	r1, r3
 801af06:	2000      	movs	r0, #0
 801af08:	f7ff ffaa 	bl	801ae60 <SX1276ReadBuffer>
}
 801af0c:	46c0      	nop			; (mov r8, r8)
 801af0e:	46bd      	mov	sp, r7
 801af10:	b002      	add	sp, #8
 801af12:	bd80      	pop	{r7, pc}

0801af14 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b082      	sub	sp, #8
 801af18:	af00      	add	r7, sp, #0
 801af1a:	0002      	movs	r2, r0
 801af1c:	1dfb      	adds	r3, r7, #7
 801af1e:	701a      	strb	r2, [r3, #0]
 801af20:	1dbb      	adds	r3, r7, #6
 801af22:	1c0a      	adds	r2, r1, #0
 801af24:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801af26:	1dfb      	adds	r3, r7, #7
 801af28:	781b      	ldrb	r3, [r3, #0]
 801af2a:	0018      	movs	r0, r3
 801af2c:	f7ff fee8 	bl	801ad00 <SX1276SetModem>

    switch( modem )
 801af30:	1dfb      	adds	r3, r7, #7
 801af32:	781b      	ldrb	r3, [r3, #0]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d002      	beq.n	801af3e <SX1276SetMaxPayloadLength+0x2a>
 801af38:	2b01      	cmp	r3, #1
 801af3a:	d00f      	beq.n	801af5c <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801af3c:	e016      	b.n	801af6c <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801af3e:	4b0d      	ldr	r3, [pc, #52]	; (801af74 <SX1276SetMaxPayloadLength+0x60>)
 801af40:	2222      	movs	r2, #34	; 0x22
 801af42:	5c9b      	ldrb	r3, [r3, r2]
 801af44:	2201      	movs	r2, #1
 801af46:	4053      	eors	r3, r2
 801af48:	b2db      	uxtb	r3, r3
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d00d      	beq.n	801af6a <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801af4e:	1dbb      	adds	r3, r7, #6
 801af50:	781b      	ldrb	r3, [r3, #0]
 801af52:	0019      	movs	r1, r3
 801af54:	2032      	movs	r0, #50	; 0x32
 801af56:	f7ff ff2d 	bl	801adb4 <SX1276Write>
        break;
 801af5a:	e006      	b.n	801af6a <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801af5c:	1dbb      	adds	r3, r7, #6
 801af5e:	781b      	ldrb	r3, [r3, #0]
 801af60:	0019      	movs	r1, r3
 801af62:	2023      	movs	r0, #35	; 0x23
 801af64:	f7ff ff26 	bl	801adb4 <SX1276Write>
        break;
 801af68:	e000      	b.n	801af6c <SX1276SetMaxPayloadLength+0x58>
        break;
 801af6a:	46c0      	nop			; (mov r8, r8)
}
 801af6c:	46c0      	nop			; (mov r8, r8)
 801af6e:	46bd      	mov	sp, r7
 801af70:	b002      	add	sp, #8
 801af72:	bd80      	pop	{r7, pc}
 801af74:	200016d0 	.word	0x200016d0

0801af78 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801af78:	b580      	push	{r7, lr}
 801af7a:	b082      	sub	sp, #8
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	0002      	movs	r2, r0
 801af80:	1dfb      	adds	r3, r7, #7
 801af82:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801af84:	2001      	movs	r0, #1
 801af86:	f7ff febb 	bl	801ad00 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801af8a:	4b0b      	ldr	r3, [pc, #44]	; (801afb8 <SX1276SetPublicNetwork+0x40>)
 801af8c:	1dfa      	adds	r2, r7, #7
 801af8e:	215c      	movs	r1, #92	; 0x5c
 801af90:	7812      	ldrb	r2, [r2, #0]
 801af92:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801af94:	1dfb      	adds	r3, r7, #7
 801af96:	781b      	ldrb	r3, [r3, #0]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d004      	beq.n	801afa6 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801af9c:	2134      	movs	r1, #52	; 0x34
 801af9e:	2039      	movs	r0, #57	; 0x39
 801afa0:	f7ff ff08 	bl	801adb4 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801afa4:	e003      	b.n	801afae <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801afa6:	2112      	movs	r1, #18
 801afa8:	2039      	movs	r0, #57	; 0x39
 801afaa:	f7ff ff03 	bl	801adb4 <SX1276Write>
}
 801afae:	46c0      	nop			; (mov r8, r8)
 801afb0:	46bd      	mov	sp, r7
 801afb2:	b002      	add	sp, #8
 801afb4:	bd80      	pop	{r7, pc}
 801afb6:	46c0      	nop			; (mov r8, r8)
 801afb8:	200016d0 	.word	0x200016d0

0801afbc <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801afbc:	b580      	push	{r7, lr}
 801afbe:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801afc0:	f7ea fea6 	bl	8005d10 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801afc4:	0003      	movs	r3, r0
 801afc6:	3302      	adds	r3, #2
}
 801afc8:	0018      	movs	r0, r3
 801afca:	46bd      	mov	sp, r7
 801afcc:	bd80      	pop	{r7, pc}
	...

0801afd0 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b084      	sub	sp, #16
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801afd8:	230f      	movs	r3, #15
 801afda:	18fb      	adds	r3, r7, r3
 801afdc:	2200      	movs	r2, #0
 801afde:	701a      	strb	r2, [r3, #0]
 801afe0:	e01f      	b.n	801b022 <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801afe2:	210f      	movs	r1, #15
 801afe4:	187b      	adds	r3, r7, r1
 801afe6:	781a      	ldrb	r2, [r3, #0]
 801afe8:	4b13      	ldr	r3, [pc, #76]	; (801b038 <GetFskBandwidthRegValue+0x68>)
 801afea:	00d2      	lsls	r2, r2, #3
 801afec:	58d3      	ldr	r3, [r2, r3]
 801afee:	687a      	ldr	r2, [r7, #4]
 801aff0:	429a      	cmp	r2, r3
 801aff2:	d310      	bcc.n	801b016 <GetFskBandwidthRegValue+0x46>
 801aff4:	187b      	adds	r3, r7, r1
 801aff6:	781b      	ldrb	r3, [r3, #0]
 801aff8:	1c5a      	adds	r2, r3, #1
 801affa:	4b0f      	ldr	r3, [pc, #60]	; (801b038 <GetFskBandwidthRegValue+0x68>)
 801affc:	00d2      	lsls	r2, r2, #3
 801affe:	58d3      	ldr	r3, [r2, r3]
 801b000:	687a      	ldr	r2, [r7, #4]
 801b002:	429a      	cmp	r2, r3
 801b004:	d207      	bcs.n	801b016 <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801b006:	187b      	adds	r3, r7, r1
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	4a0b      	ldr	r2, [pc, #44]	; (801b038 <GetFskBandwidthRegValue+0x68>)
 801b00c:	00db      	lsls	r3, r3, #3
 801b00e:	18d3      	adds	r3, r2, r3
 801b010:	3304      	adds	r3, #4
 801b012:	781b      	ldrb	r3, [r3, #0]
 801b014:	e00b      	b.n	801b02e <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801b016:	210f      	movs	r1, #15
 801b018:	187b      	adds	r3, r7, r1
 801b01a:	781a      	ldrb	r2, [r3, #0]
 801b01c:	187b      	adds	r3, r7, r1
 801b01e:	3201      	adds	r2, #1
 801b020:	701a      	strb	r2, [r3, #0]
 801b022:	230f      	movs	r3, #15
 801b024:	18fb      	adds	r3, r7, r3
 801b026:	781b      	ldrb	r3, [r3, #0]
 801b028:	2b14      	cmp	r3, #20
 801b02a:	d9da      	bls.n	801afe2 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801b02c:	e7fe      	b.n	801b02c <GetFskBandwidthRegValue+0x5c>
}
 801b02e:	0018      	movs	r0, r3
 801b030:	46bd      	mov	sp, r7
 801b032:	b004      	add	sp, #16
 801b034:	bd80      	pop	{r7, pc}
 801b036:	46c0      	nop			; (mov r8, r8)
 801b038:	0801f158 	.word	0x0801f158

0801b03c <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b084      	sub	sp, #16
 801b040:	af00      	add	r7, sp, #0
 801b042:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801b044:	2300      	movs	r3, #0
 801b046:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2b03      	cmp	r3, #3
 801b04c:	d018      	beq.n	801b080 <SX1276GetLoRaBandwidthInHz+0x44>
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	2b03      	cmp	r3, #3
 801b052:	d818      	bhi.n	801b086 <SX1276GetLoRaBandwidthInHz+0x4a>
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	2b02      	cmp	r3, #2
 801b058:	d00f      	beq.n	801b07a <SX1276GetLoRaBandwidthInHz+0x3e>
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	2b02      	cmp	r3, #2
 801b05e:	d812      	bhi.n	801b086 <SX1276GetLoRaBandwidthInHz+0x4a>
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	2b00      	cmp	r3, #0
 801b064:	d003      	beq.n	801b06e <SX1276GetLoRaBandwidthInHz+0x32>
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	2b01      	cmp	r3, #1
 801b06a:	d003      	beq.n	801b074 <SX1276GetLoRaBandwidthInHz+0x38>
 801b06c:	e00b      	b.n	801b086 <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801b06e:	4b08      	ldr	r3, [pc, #32]	; (801b090 <SX1276GetLoRaBandwidthInHz+0x54>)
 801b070:	60fb      	str	r3, [r7, #12]
        break;
 801b072:	e008      	b.n	801b086 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801b074:	4b07      	ldr	r3, [pc, #28]	; (801b094 <SX1276GetLoRaBandwidthInHz+0x58>)
 801b076:	60fb      	str	r3, [r7, #12]
        break;
 801b078:	e005      	b.n	801b086 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801b07a:	4b07      	ldr	r3, [pc, #28]	; (801b098 <SX1276GetLoRaBandwidthInHz+0x5c>)
 801b07c:	60fb      	str	r3, [r7, #12]
        break;
 801b07e:	e002      	b.n	801b086 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801b080:	4b06      	ldr	r3, [pc, #24]	; (801b09c <SX1276GetLoRaBandwidthInHz+0x60>)
 801b082:	60fb      	str	r3, [r7, #12]
            break;
 801b084:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801b086:	68fb      	ldr	r3, [r7, #12]
}
 801b088:	0018      	movs	r0, r3
 801b08a:	46bd      	mov	sp, r7
 801b08c:	b004      	add	sp, #16
 801b08e:	bd80      	pop	{r7, pc}
 801b090:	0001e848 	.word	0x0001e848
 801b094:	0003d090 	.word	0x0003d090
 801b098:	0007a120 	.word	0x0007a120
 801b09c:	0000f424 	.word	0x0000f424

0801b0a0 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801b0a0:	b5b0      	push	{r4, r5, r7, lr}
 801b0a2:	b084      	sub	sp, #16
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	0005      	movs	r5, r0
 801b0a8:	000c      	movs	r4, r1
 801b0aa:	0010      	movs	r0, r2
 801b0ac:	0019      	movs	r1, r3
 801b0ae:	1dbb      	adds	r3, r7, #6
 801b0b0:	1c2a      	adds	r2, r5, #0
 801b0b2:	801a      	strh	r2, [r3, #0]
 801b0b4:	1d7b      	adds	r3, r7, #5
 801b0b6:	1c22      	adds	r2, r4, #0
 801b0b8:	701a      	strb	r2, [r3, #0]
 801b0ba:	1d3b      	adds	r3, r7, #4
 801b0bc:	1c02      	adds	r2, r0, #0
 801b0be:	701a      	strb	r2, [r3, #0]
 801b0c0:	1cfb      	adds	r3, r7, #3
 801b0c2:	1c0a      	adds	r2, r1, #0
 801b0c4:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801b0c6:	230f      	movs	r3, #15
 801b0c8:	18fb      	adds	r3, r7, r3
 801b0ca:	2203      	movs	r2, #3
 801b0cc:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801b0ce:	1dbb      	adds	r3, r7, #6
 801b0d0:	881b      	ldrh	r3, [r3, #0]
 801b0d2:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b0d4:	1d7b      	adds	r3, r7, #5
 801b0d6:	781b      	ldrb	r3, [r3, #0]
 801b0d8:	2101      	movs	r1, #1
 801b0da:	404b      	eors	r3, r1
 801b0dc:	b2db      	uxtb	r3, r3
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d001      	beq.n	801b0e6 <SX1276GetGfskTimeOnAirNumerator+0x46>
 801b0e2:	2308      	movs	r3, #8
 801b0e4:	e000      	b.n	801b0e8 <SX1276GetGfskTimeOnAirNumerator+0x48>
 801b0e6:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801b0e8:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801b0ea:	230f      	movs	r3, #15
 801b0ec:	18fb      	adds	r3, r7, r3
 801b0ee:	781b      	ldrb	r3, [r3, #0]
 801b0f0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b0f2:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801b0f4:	1d3b      	adds	r3, r7, #4
 801b0f6:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801b0f8:	1cfb      	adds	r3, r7, #3
 801b0fa:	781b      	ldrb	r3, [r3, #0]
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d001      	beq.n	801b104 <SX1276GetGfskTimeOnAirNumerator+0x64>
 801b100:	2302      	movs	r3, #2
 801b102:	e000      	b.n	801b106 <SX1276GetGfskTimeOnAirNumerator+0x66>
 801b104:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801b106:	185b      	adds	r3, r3, r1
               ) << 3 
 801b108:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801b10a:	18d3      	adds	r3, r2, r3
             );
}
 801b10c:	0018      	movs	r0, r3
 801b10e:	46bd      	mov	sp, r7
 801b110:	b004      	add	sp, #16
 801b112:	bdb0      	pop	{r4, r5, r7, pc}

0801b114 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b08a      	sub	sp, #40	; 0x28
 801b118:	af00      	add	r7, sp, #0
 801b11a:	60f8      	str	r0, [r7, #12]
 801b11c:	60b9      	str	r1, [r7, #8]
 801b11e:	0019      	movs	r1, r3
 801b120:	1dfb      	adds	r3, r7, #7
 801b122:	701a      	strb	r2, [r3, #0]
 801b124:	1d3b      	adds	r3, r7, #4
 801b126:	1c0a      	adds	r2, r1, #0
 801b128:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801b12a:	1dfb      	adds	r3, r7, #7
 801b12c:	781b      	ldrb	r3, [r3, #0]
 801b12e:	3304      	adds	r3, #4
 801b130:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801b132:	2327      	movs	r3, #39	; 0x27
 801b134:	18fb      	adds	r3, r7, r3
 801b136:	2200      	movs	r2, #0
 801b138:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801b13a:	68bb      	ldr	r3, [r7, #8]
 801b13c:	2b05      	cmp	r3, #5
 801b13e:	d002      	beq.n	801b146 <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801b140:	68bb      	ldr	r3, [r7, #8]
 801b142:	2b06      	cmp	r3, #6
 801b144:	d106      	bne.n	801b154 <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801b146:	1d3b      	adds	r3, r7, #4
 801b148:	881b      	ldrh	r3, [r3, #0]
 801b14a:	2b0b      	cmp	r3, #11
 801b14c:	d802      	bhi.n	801b154 <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801b14e:	1d3b      	adds	r3, r7, #4
 801b150:	220c      	movs	r2, #12
 801b152:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d105      	bne.n	801b166 <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801b15a:	68bb      	ldr	r3, [r7, #8]
 801b15c:	2b0b      	cmp	r3, #11
 801b15e:	d008      	beq.n	801b172 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	2b0c      	cmp	r3, #12
 801b164:	d005      	beq.n	801b172 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	2b01      	cmp	r3, #1
 801b16a:	d106      	bne.n	801b17a <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	2b0c      	cmp	r3, #12
 801b170:	d103      	bne.n	801b17a <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801b172:	2327      	movs	r3, #39	; 0x27
 801b174:	18fb      	adds	r3, r7, r3
 801b176:	2201      	movs	r2, #1
 801b178:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b17a:	2334      	movs	r3, #52	; 0x34
 801b17c:	18fb      	adds	r3, r7, r3
 801b17e:	781b      	ldrb	r3, [r3, #0]
 801b180:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801b182:	2338      	movs	r3, #56	; 0x38
 801b184:	18fb      	adds	r3, r7, r3
 801b186:	781b      	ldrb	r3, [r3, #0]
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d001      	beq.n	801b190 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801b18c:	2310      	movs	r3, #16
 801b18e:	e000      	b.n	801b192 <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801b190:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b192:	189b      	adds	r3, r3, r2
 801b194:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801b196:	68bb      	ldr	r3, [r7, #8]
 801b198:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801b19a:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801b19c:	2330      	movs	r3, #48	; 0x30
 801b19e:	18fb      	adds	r3, r7, r3
 801b1a0:	781b      	ldrb	r3, [r3, #0]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d001      	beq.n	801b1aa <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801b1a6:	2300      	movs	r3, #0
 801b1a8:	e000      	b.n	801b1ac <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801b1aa:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801b1ac:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b1ae:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801b1b0:	68bb      	ldr	r3, [r7, #8]
 801b1b2:	2b06      	cmp	r3, #6
 801b1b4:	d803      	bhi.n	801b1be <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801b1b6:	68bb      	ldr	r3, [r7, #8]
 801b1b8:	009b      	lsls	r3, r3, #2
 801b1ba:	623b      	str	r3, [r7, #32]
 801b1bc:	e00f      	b.n	801b1de <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801b1be:	69fb      	ldr	r3, [r7, #28]
 801b1c0:	3308      	adds	r3, #8
 801b1c2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801b1c4:	2327      	movs	r3, #39	; 0x27
 801b1c6:	18fb      	adds	r3, r7, r3
 801b1c8:	781b      	ldrb	r3, [r3, #0]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d004      	beq.n	801b1d8 <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801b1ce:	68bb      	ldr	r3, [r7, #8]
 801b1d0:	3b02      	subs	r3, #2
 801b1d2:	009b      	lsls	r3, r3, #2
 801b1d4:	623b      	str	r3, [r7, #32]
 801b1d6:	e002      	b.n	801b1de <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	009b      	lsls	r3, r3, #2
 801b1dc:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801b1de:	69fb      	ldr	r3, [r7, #28]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	da01      	bge.n	801b1e8 <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801b1e8:	69fa      	ldr	r2, [r7, #28]
 801b1ea:	6a3b      	ldr	r3, [r7, #32]
 801b1ec:	18d3      	adds	r3, r2, r3
 801b1ee:	3b01      	subs	r3, #1
 801b1f0:	6a39      	ldr	r1, [r7, #32]
 801b1f2:	0018      	movs	r0, r3
 801b1f4:	f7e5 f81a 	bl	800022c <__divsi3>
 801b1f8:	0003      	movs	r3, r0
 801b1fa:	001a      	movs	r2, r3
 801b1fc:	697b      	ldr	r3, [r7, #20]
 801b1fe:	435a      	muls	r2, r3
 801b200:	1d3b      	adds	r3, r7, #4
 801b202:	881b      	ldrh	r3, [r3, #0]
 801b204:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801b206:	330c      	adds	r3, #12
 801b208:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801b20a:	68bb      	ldr	r3, [r7, #8]
 801b20c:	2b06      	cmp	r3, #6
 801b20e:	d802      	bhi.n	801b216 <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801b210:	69bb      	ldr	r3, [r7, #24]
 801b212:	3302      	adds	r3, #2
 801b214:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801b216:	69bb      	ldr	r3, [r7, #24]
 801b218:	009b      	lsls	r3, r3, #2
 801b21a:	1c5a      	adds	r2, r3, #1
 801b21c:	68bb      	ldr	r3, [r7, #8]
 801b21e:	3b02      	subs	r3, #2
 801b220:	409a      	lsls	r2, r3
 801b222:	0013      	movs	r3, r2
}
 801b224:	0018      	movs	r0, r3
 801b226:	46bd      	mov	sp, r7
 801b228:	b00a      	add	sp, #40	; 0x28
 801b22a:	bd80      	pop	{r7, pc}

0801b22c <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801b22c:	b590      	push	{r4, r7, lr}
 801b22e:	b085      	sub	sp, #20
 801b230:	af00      	add	r7, sp, #0
 801b232:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801b234:	4b4f      	ldr	r3, [pc, #316]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b236:	791b      	ldrb	r3, [r3, #4]
 801b238:	2b01      	cmp	r3, #1
 801b23a:	d002      	beq.n	801b242 <SX1276OnTimeoutIrq+0x16>
 801b23c:	2b02      	cmp	r3, #2
 801b23e:	d041      	beq.n	801b2c4 <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801b240:	e094      	b.n	801b36c <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801b242:	4b4c      	ldr	r3, [pc, #304]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b244:	795b      	ldrb	r3, [r3, #5]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d12e      	bne.n	801b2a8 <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b24a:	4b4a      	ldr	r3, [pc, #296]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b24c:	2230      	movs	r2, #48	; 0x30
 801b24e:	2100      	movs	r1, #0
 801b250:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b252:	4b48      	ldr	r3, [pc, #288]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b254:	2231      	movs	r2, #49	; 0x31
 801b256:	2100      	movs	r1, #0
 801b258:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b25a:	4b46      	ldr	r3, [pc, #280]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b25c:	2200      	movs	r2, #0
 801b25e:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801b260:	4b44      	ldr	r3, [pc, #272]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b262:	2200      	movs	r2, #0
 801b264:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b266:	210b      	movs	r1, #11
 801b268:	203e      	movs	r0, #62	; 0x3e
 801b26a:	f7ff fda3 	bl	801adb4 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b26e:	2110      	movs	r1, #16
 801b270:	203f      	movs	r0, #63	; 0x3f
 801b272:	f7ff fd9f 	bl	801adb4 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801b276:	4b3f      	ldr	r3, [pc, #252]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b278:	2226      	movs	r2, #38	; 0x26
 801b27a:	5c9b      	ldrb	r3, [r3, r2]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d00c      	beq.n	801b29a <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b280:	200d      	movs	r0, #13
 801b282:	f7ff fda8 	bl	801add6 <SX1276Read>
 801b286:	0003      	movs	r3, r0
 801b288:	001a      	movs	r2, r3
 801b28a:	2340      	movs	r3, #64	; 0x40
 801b28c:	4313      	orrs	r3, r2
 801b28e:	b2db      	uxtb	r3, r3
 801b290:	0019      	movs	r1, r3
 801b292:	200d      	movs	r0, #13
 801b294:	f7ff fd8e 	bl	801adb4 <SX1276Write>
 801b298:	e006      	b.n	801b2a8 <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801b29a:	4b36      	ldr	r3, [pc, #216]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b29c:	2200      	movs	r2, #0
 801b29e:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801b2a0:	4b35      	ldr	r3, [pc, #212]	; (801b378 <SX1276OnTimeoutIrq+0x14c>)
 801b2a2:	0018      	movs	r0, r3
 801b2a4:	f001 fbfa 	bl	801ca9c <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b2a8:	4b34      	ldr	r3, [pc, #208]	; (801b37c <SX1276OnTimeoutIrq+0x150>)
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d05a      	beq.n	801b366 <SX1276OnTimeoutIrq+0x13a>
 801b2b0:	4b32      	ldr	r3, [pc, #200]	; (801b37c <SX1276OnTimeoutIrq+0x150>)
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	68db      	ldr	r3, [r3, #12]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d055      	beq.n	801b366 <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801b2ba:	4b30      	ldr	r3, [pc, #192]	; (801b37c <SX1276OnTimeoutIrq+0x150>)
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	68db      	ldr	r3, [r3, #12]
 801b2c0:	4798      	blx	r3
        break;
 801b2c2:	e050      	b.n	801b366 <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801b2c4:	f7ff fca8 	bl	801ac18 <SX1276Reset>
        RxChainCalibration( );
 801b2c8:	f7fe f9ee 	bl	80196a8 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b2cc:	2000      	movs	r0, #0
 801b2ce:	f7ff fcaa 	bl	801ac26 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b2d2:	230f      	movs	r3, #15
 801b2d4:	18fb      	adds	r3, r7, r3
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	701a      	strb	r2, [r3, #0]
 801b2da:	e025      	b.n	801b328 <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801b2dc:	240f      	movs	r4, #15
 801b2de:	193b      	adds	r3, r7, r4
 801b2e0:	781a      	ldrb	r2, [r3, #0]
 801b2e2:	4927      	ldr	r1, [pc, #156]	; (801b380 <SX1276OnTimeoutIrq+0x154>)
 801b2e4:	0013      	movs	r3, r2
 801b2e6:	005b      	lsls	r3, r3, #1
 801b2e8:	189b      	adds	r3, r3, r2
 801b2ea:	5c5b      	ldrb	r3, [r3, r1]
 801b2ec:	0018      	movs	r0, r3
 801b2ee:	f7ff fd07 	bl	801ad00 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801b2f2:	193b      	adds	r3, r7, r4
 801b2f4:	781a      	ldrb	r2, [r3, #0]
 801b2f6:	4922      	ldr	r1, [pc, #136]	; (801b380 <SX1276OnTimeoutIrq+0x154>)
 801b2f8:	0013      	movs	r3, r2
 801b2fa:	005b      	lsls	r3, r3, #1
 801b2fc:	189b      	adds	r3, r3, r2
 801b2fe:	18cb      	adds	r3, r1, r3
 801b300:	3301      	adds	r3, #1
 801b302:	781b      	ldrb	r3, [r3, #0]
 801b304:	0018      	movs	r0, r3
 801b306:	193b      	adds	r3, r7, r4
 801b308:	781a      	ldrb	r2, [r3, #0]
 801b30a:	491d      	ldr	r1, [pc, #116]	; (801b380 <SX1276OnTimeoutIrq+0x154>)
 801b30c:	0013      	movs	r3, r2
 801b30e:	005b      	lsls	r3, r3, #1
 801b310:	189b      	adds	r3, r3, r2
 801b312:	18cb      	adds	r3, r1, r3
 801b314:	3302      	adds	r3, #2
 801b316:	781b      	ldrb	r3, [r3, #0]
 801b318:	0019      	movs	r1, r3
 801b31a:	f7ff fd4b 	bl	801adb4 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b31e:	193b      	adds	r3, r7, r4
 801b320:	781a      	ldrb	r2, [r3, #0]
 801b322:	193b      	adds	r3, r7, r4
 801b324:	3201      	adds	r2, #1
 801b326:	701a      	strb	r2, [r3, #0]
 801b328:	230f      	movs	r3, #15
 801b32a:	18fb      	adds	r3, r7, r3
 801b32c:	781b      	ldrb	r3, [r3, #0]
 801b32e:	2b0f      	cmp	r3, #15
 801b330:	d9d4      	bls.n	801b2dc <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801b332:	2000      	movs	r0, #0
 801b334:	f7ff fce4 	bl	801ad00 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801b338:	4b0e      	ldr	r3, [pc, #56]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b33a:	225c      	movs	r2, #92	; 0x5c
 801b33c:	5c9b      	ldrb	r3, [r3, r2]
 801b33e:	0018      	movs	r0, r3
 801b340:	f7ff fe1a 	bl	801af78 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801b344:	4b0b      	ldr	r3, [pc, #44]	; (801b374 <SX1276OnTimeoutIrq+0x148>)
 801b346:	2200      	movs	r2, #0
 801b348:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b34a:	4b0c      	ldr	r3, [pc, #48]	; (801b37c <SX1276OnTimeoutIrq+0x150>)
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d00b      	beq.n	801b36a <SX1276OnTimeoutIrq+0x13e>
 801b352:	4b0a      	ldr	r3, [pc, #40]	; (801b37c <SX1276OnTimeoutIrq+0x150>)
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	685b      	ldr	r3, [r3, #4]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d006      	beq.n	801b36a <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801b35c:	4b07      	ldr	r3, [pc, #28]	; (801b37c <SX1276OnTimeoutIrq+0x150>)
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	685b      	ldr	r3, [r3, #4]
 801b362:	4798      	blx	r3
        break;
 801b364:	e001      	b.n	801b36a <SX1276OnTimeoutIrq+0x13e>
        break;
 801b366:	46c0      	nop			; (mov r8, r8)
 801b368:	e000      	b.n	801b36c <SX1276OnTimeoutIrq+0x140>
        break;
 801b36a:	46c0      	nop			; (mov r8, r8)
    }
}
 801b36c:	46c0      	nop			; (mov r8, r8)
 801b36e:	46bd      	mov	sp, r7
 801b370:	b005      	add	sp, #20
 801b372:	bd90      	pop	{r4, r7, pc}
 801b374:	200016d0 	.word	0x200016d0
 801b378:	200016b8 	.word	0x200016b8
 801b37c:	20000e14 	.word	0x20000e14
 801b380:	0801f128 	.word	0x0801f128

0801b384 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801b384:	b590      	push	{r4, r7, lr}
 801b386:	b083      	sub	sp, #12
 801b388:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801b38a:	1d7b      	adds	r3, r7, #5
 801b38c:	2200      	movs	r2, #0
 801b38e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801b390:	4bc3      	ldr	r3, [pc, #780]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b392:	791b      	ldrb	r3, [r3, #4]
 801b394:	2b01      	cmp	r3, #1
 801b396:	d003      	beq.n	801b3a0 <SX1276OnDio0Irq+0x1c>
 801b398:	2b02      	cmp	r3, #2
 801b39a:	d100      	bne.n	801b39e <SX1276OnDio0Irq+0x1a>
 801b39c:	e1e2      	b.n	801b764 <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801b39e:	e1ff      	b.n	801b7a0 <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801b3a0:	4bbf      	ldr	r3, [pc, #764]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b3a2:	795b      	ldrb	r3, [r3, #5]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d003      	beq.n	801b3b0 <SX1276OnDio0Irq+0x2c>
 801b3a8:	2b01      	cmp	r3, #1
 801b3aa:	d100      	bne.n	801b3ae <SX1276OnDio0Irq+0x2a>
 801b3ac:	e0e2      	b.n	801b574 <SX1276OnDio0Irq+0x1f0>
                break;
 801b3ae:	e1d8      	b.n	801b762 <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801b3b0:	4bbb      	ldr	r3, [pc, #748]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b3b2:	2224      	movs	r2, #36	; 0x24
 801b3b4:	5c9b      	ldrb	r3, [r3, r2]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d052      	beq.n	801b460 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801b3ba:	203f      	movs	r0, #63	; 0x3f
 801b3bc:	f7ff fd0b 	bl	801add6 <SX1276Read>
 801b3c0:	0003      	movs	r3, r0
 801b3c2:	001a      	movs	r2, r3
 801b3c4:	1d7b      	adds	r3, r7, #5
 801b3c6:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801b3c8:	1d7b      	adds	r3, r7, #5
 801b3ca:	781b      	ldrb	r3, [r3, #0]
 801b3cc:	b2db      	uxtb	r3, r3
 801b3ce:	001a      	movs	r2, r3
 801b3d0:	2302      	movs	r3, #2
 801b3d2:	4013      	ands	r3, r2
 801b3d4:	2b02      	cmp	r3, #2
 801b3d6:	d043      	beq.n	801b460 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b3d8:	210b      	movs	r1, #11
 801b3da:	203e      	movs	r0, #62	; 0x3e
 801b3dc:	f7ff fcea 	bl	801adb4 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b3e0:	2110      	movs	r1, #16
 801b3e2:	203f      	movs	r0, #63	; 0x3f
 801b3e4:	f7ff fce6 	bl	801adb4 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801b3e8:	4bae      	ldr	r3, [pc, #696]	; (801b6a4 <SX1276OnDio0Irq+0x320>)
 801b3ea:	0018      	movs	r0, r3
 801b3ec:	f001 fb56 	bl	801ca9c <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801b3f0:	4bab      	ldr	r3, [pc, #684]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b3f2:	2226      	movs	r2, #38	; 0x26
 801b3f4:	5c9b      	ldrb	r3, [r3, r2]
 801b3f6:	2201      	movs	r2, #1
 801b3f8:	4053      	eors	r3, r2
 801b3fa:	b2db      	uxtb	r3, r3
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d007      	beq.n	801b410 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801b400:	4ba9      	ldr	r3, [pc, #676]	; (801b6a8 <SX1276OnDio0Irq+0x324>)
 801b402:	0018      	movs	r0, r3
 801b404:	f001 fb4a 	bl	801ca9c <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801b408:	4ba5      	ldr	r3, [pc, #660]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b40a:	2200      	movs	r2, #0
 801b40c:	711a      	strb	r2, [r3, #4]
 801b40e:	e00b      	b.n	801b428 <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b410:	200d      	movs	r0, #13
 801b412:	f7ff fce0 	bl	801add6 <SX1276Read>
 801b416:	0003      	movs	r3, r0
 801b418:	001a      	movs	r2, r3
 801b41a:	2340      	movs	r3, #64	; 0x40
 801b41c:	4313      	orrs	r3, r2
 801b41e:	b2db      	uxtb	r3, r3
 801b420:	0019      	movs	r1, r3
 801b422:	200d      	movs	r0, #13
 801b424:	f7ff fcc6 	bl	801adb4 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b428:	4ba0      	ldr	r3, [pc, #640]	; (801b6ac <SX1276OnDio0Irq+0x328>)
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d008      	beq.n	801b442 <SX1276OnDio0Irq+0xbe>
 801b430:	4b9e      	ldr	r3, [pc, #632]	; (801b6ac <SX1276OnDio0Irq+0x328>)
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	691b      	ldr	r3, [r3, #16]
 801b436:	2b00      	cmp	r3, #0
 801b438:	d003      	beq.n	801b442 <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801b43a:	4b9c      	ldr	r3, [pc, #624]	; (801b6ac <SX1276OnDio0Irq+0x328>)
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	691b      	ldr	r3, [r3, #16]
 801b440:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b442:	4b97      	ldr	r3, [pc, #604]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b444:	2230      	movs	r2, #48	; 0x30
 801b446:	2100      	movs	r1, #0
 801b448:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b44a:	4b95      	ldr	r3, [pc, #596]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b44c:	2231      	movs	r2, #49	; 0x31
 801b44e:	2100      	movs	r1, #0
 801b450:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b452:	4b93      	ldr	r3, [pc, #588]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b454:	2200      	movs	r2, #0
 801b456:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801b458:	4b91      	ldr	r3, [pc, #580]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b45a:	2200      	movs	r2, #0
 801b45c:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801b45e:	e180      	b.n	801b762 <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b460:	4b8f      	ldr	r3, [pc, #572]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b462:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b464:	2b00      	cmp	r3, #0
 801b466:	d12d      	bne.n	801b4c4 <SX1276OnDio0Irq+0x140>
 801b468:	4b8d      	ldr	r3, [pc, #564]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b46a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d129      	bne.n	801b4c4 <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b470:	4b8b      	ldr	r3, [pc, #556]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b472:	2222      	movs	r2, #34	; 0x22
 801b474:	5c9b      	ldrb	r3, [r3, r2]
 801b476:	2201      	movs	r2, #1
 801b478:	4053      	eors	r3, r2
 801b47a:	b2db      	uxtb	r3, r3
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d005      	beq.n	801b48c <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b480:	4b8b      	ldr	r3, [pc, #556]	; (801b6b0 <SX1276OnDio0Irq+0x32c>)
 801b482:	2101      	movs	r1, #1
 801b484:	0018      	movs	r0, r3
 801b486:	f7ff fd33 	bl	801aef0 <SX1276ReadFifo>
 801b48a:	e006      	b.n	801b49a <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b48c:	2032      	movs	r0, #50	; 0x32
 801b48e:	f7ff fca2 	bl	801add6 <SX1276Read>
 801b492:	0003      	movs	r3, r0
 801b494:	b29a      	uxth	r2, r3
 801b496:	4b82      	ldr	r3, [pc, #520]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b498:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b49a:	4b81      	ldr	r3, [pc, #516]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b49c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b49e:	001a      	movs	r2, r3
 801b4a0:	4b84      	ldr	r3, [pc, #528]	; (801b6b4 <SX1276OnDio0Irq+0x330>)
 801b4a2:	18d0      	adds	r0, r2, r3
 801b4a4:	4b7e      	ldr	r3, [pc, #504]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4a6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b4a8:	b2da      	uxtb	r2, r3
 801b4aa:	4b7d      	ldr	r3, [pc, #500]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4ae:	b2db      	uxtb	r3, r3
 801b4b0:	1ad3      	subs	r3, r2, r3
 801b4b2:	b2db      	uxtb	r3, r3
 801b4b4:	0019      	movs	r1, r3
 801b4b6:	f7ff fd1b 	bl	801aef0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b4ba:	4b79      	ldr	r3, [pc, #484]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4bc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b4be:	4b78      	ldr	r3, [pc, #480]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4c0:	879a      	strh	r2, [r3, #60]	; 0x3c
 801b4c2:	e013      	b.n	801b4ec <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b4c4:	4b76      	ldr	r3, [pc, #472]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4c8:	001a      	movs	r2, r3
 801b4ca:	4b7a      	ldr	r3, [pc, #488]	; (801b6b4 <SX1276OnDio0Irq+0x330>)
 801b4cc:	18d0      	adds	r0, r2, r3
 801b4ce:	4b74      	ldr	r3, [pc, #464]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4d0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b4d2:	b2da      	uxtb	r2, r3
 801b4d4:	4b72      	ldr	r3, [pc, #456]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4d6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4d8:	b2db      	uxtb	r3, r3
 801b4da:	1ad3      	subs	r3, r2, r3
 801b4dc:	b2db      	uxtb	r3, r3
 801b4de:	0019      	movs	r1, r3
 801b4e0:	f7ff fd06 	bl	801aef0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b4e4:	4b6e      	ldr	r3, [pc, #440]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4e6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b4e8:	4b6d      	ldr	r3, [pc, #436]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4ea:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801b4ec:	4b6d      	ldr	r3, [pc, #436]	; (801b6a4 <SX1276OnDio0Irq+0x320>)
 801b4ee:	0018      	movs	r0, r3
 801b4f0:	f001 fad4 	bl	801ca9c <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801b4f4:	4b6a      	ldr	r3, [pc, #424]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b4f6:	2226      	movs	r2, #38	; 0x26
 801b4f8:	5c9b      	ldrb	r3, [r3, r2]
 801b4fa:	2201      	movs	r2, #1
 801b4fc:	4053      	eors	r3, r2
 801b4fe:	b2db      	uxtb	r3, r3
 801b500:	2b00      	cmp	r3, #0
 801b502:	d007      	beq.n	801b514 <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801b504:	4b66      	ldr	r3, [pc, #408]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b506:	2200      	movs	r2, #0
 801b508:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801b50a:	4b67      	ldr	r3, [pc, #412]	; (801b6a8 <SX1276OnDio0Irq+0x324>)
 801b50c:	0018      	movs	r0, r3
 801b50e:	f001 fac5 	bl	801ca9c <UTIL_TIMER_Stop>
 801b512:	e00b      	b.n	801b52c <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b514:	200d      	movs	r0, #13
 801b516:	f7ff fc5e 	bl	801add6 <SX1276Read>
 801b51a:	0003      	movs	r3, r0
 801b51c:	001a      	movs	r2, r3
 801b51e:	2340      	movs	r3, #64	; 0x40
 801b520:	4313      	orrs	r3, r2
 801b522:	b2db      	uxtb	r3, r3
 801b524:	0019      	movs	r1, r3
 801b526:	200d      	movs	r0, #13
 801b528:	f7ff fc44 	bl	801adb4 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b52c:	4b5f      	ldr	r3, [pc, #380]	; (801b6ac <SX1276OnDio0Irq+0x328>)
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d010      	beq.n	801b556 <SX1276OnDio0Irq+0x1d2>
 801b534:	4b5d      	ldr	r3, [pc, #372]	; (801b6ac <SX1276OnDio0Irq+0x328>)
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	689b      	ldr	r3, [r3, #8]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d00b      	beq.n	801b556 <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801b53e:	4b5b      	ldr	r3, [pc, #364]	; (801b6ac <SX1276OnDio0Irq+0x328>)
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	689c      	ldr	r4, [r3, #8]
 801b544:	4b56      	ldr	r3, [pc, #344]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b546:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801b548:	4b55      	ldr	r3, [pc, #340]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b54a:	2232      	movs	r2, #50	; 0x32
 801b54c:	569b      	ldrsb	r3, [r3, r2]
 801b54e:	b21a      	sxth	r2, r3
 801b550:	4858      	ldr	r0, [pc, #352]	; (801b6b4 <SX1276OnDio0Irq+0x330>)
 801b552:	2300      	movs	r3, #0
 801b554:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b556:	4b52      	ldr	r3, [pc, #328]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b558:	2230      	movs	r2, #48	; 0x30
 801b55a:	2100      	movs	r1, #0
 801b55c:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b55e:	4b50      	ldr	r3, [pc, #320]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b560:	2231      	movs	r2, #49	; 0x31
 801b562:	2100      	movs	r1, #0
 801b564:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b566:	4b4e      	ldr	r3, [pc, #312]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b568:	2200      	movs	r2, #0
 801b56a:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801b56c:	4b4c      	ldr	r3, [pc, #304]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b56e:	2200      	movs	r2, #0
 801b570:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801b572:	e0f6      	b.n	801b762 <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801b574:	2140      	movs	r1, #64	; 0x40
 801b576:	2012      	movs	r0, #18
 801b578:	f7ff fc1c 	bl	801adb4 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801b57c:	2012      	movs	r0, #18
 801b57e:	f7ff fc2a 	bl	801add6 <SX1276Read>
 801b582:	0003      	movs	r3, r0
 801b584:	001a      	movs	r2, r3
 801b586:	1d7b      	adds	r3, r7, #5
 801b588:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801b58a:	1d7b      	adds	r3, r7, #5
 801b58c:	781b      	ldrb	r3, [r3, #0]
 801b58e:	b2db      	uxtb	r3, r3
 801b590:	001a      	movs	r2, r3
 801b592:	2320      	movs	r3, #32
 801b594:	4013      	ands	r3, r2
 801b596:	2b20      	cmp	r3, #32
 801b598:	d122      	bne.n	801b5e0 <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801b59a:	2120      	movs	r1, #32
 801b59c:	2012      	movs	r0, #18
 801b59e:	f7ff fc09 	bl	801adb4 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801b5a2:	4b3f      	ldr	r3, [pc, #252]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b5a4:	2256      	movs	r2, #86	; 0x56
 801b5a6:	5c9b      	ldrb	r3, [r3, r2]
 801b5a8:	2201      	movs	r2, #1
 801b5aa:	4053      	eors	r3, r2
 801b5ac:	b2db      	uxtb	r3, r3
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d002      	beq.n	801b5b8 <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801b5b2:	4b3b      	ldr	r3, [pc, #236]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b5b4:	2200      	movs	r2, #0
 801b5b6:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801b5b8:	4b3a      	ldr	r3, [pc, #232]	; (801b6a4 <SX1276OnDio0Irq+0x320>)
 801b5ba:	0018      	movs	r0, r3
 801b5bc:	f001 fa6e 	bl	801ca9c <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b5c0:	4b3a      	ldr	r3, [pc, #232]	; (801b6ac <SX1276OnDio0Irq+0x328>)
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d100      	bne.n	801b5ca <SX1276OnDio0Irq+0x246>
 801b5c8:	e0c8      	b.n	801b75c <SX1276OnDio0Irq+0x3d8>
 801b5ca:	4b38      	ldr	r3, [pc, #224]	; (801b6ac <SX1276OnDio0Irq+0x328>)
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	691b      	ldr	r3, [r3, #16]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d100      	bne.n	801b5d6 <SX1276OnDio0Irq+0x252>
 801b5d4:	e0c2      	b.n	801b75c <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801b5d6:	4b35      	ldr	r3, [pc, #212]	; (801b6ac <SX1276OnDio0Irq+0x328>)
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	691b      	ldr	r3, [r3, #16]
 801b5dc:	4798      	blx	r3
                        break;
 801b5de:	e0bd      	b.n	801b75c <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801b5e0:	2019      	movs	r0, #25
 801b5e2:	f7ff fbf8 	bl	801add6 <SX1276Read>
 801b5e6:	0003      	movs	r3, r0
 801b5e8:	b25b      	sxtb	r3, r3
 801b5ea:	3302      	adds	r3, #2
 801b5ec:	109b      	asrs	r3, r3, #2
 801b5ee:	b259      	sxtb	r1, r3
 801b5f0:	4b2b      	ldr	r3, [pc, #172]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b5f2:	2260      	movs	r2, #96	; 0x60
 801b5f4:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801b5f6:	201a      	movs	r0, #26
 801b5f8:	f7ff fbed 	bl	801add6 <SX1276Read>
 801b5fc:	0003      	movs	r3, r0
 801b5fe:	001a      	movs	r2, r3
 801b600:	1dbb      	adds	r3, r7, #6
 801b602:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801b604:	4b26      	ldr	r3, [pc, #152]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b606:	2260      	movs	r2, #96	; 0x60
 801b608:	569b      	ldrsb	r3, [r3, r2]
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	da32      	bge.n	801b674 <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b60e:	4b24      	ldr	r3, [pc, #144]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b610:	689b      	ldr	r3, [r3, #8]
 801b612:	4a29      	ldr	r2, [pc, #164]	; (801b6b8 <SX1276OnDio0Irq+0x334>)
 801b614:	4293      	cmp	r3, r2
 801b616:	d916      	bls.n	801b646 <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b618:	1dbb      	adds	r3, r7, #6
 801b61a:	2200      	movs	r2, #0
 801b61c:	5e9b      	ldrsh	r3, [r3, r2]
 801b61e:	111b      	asrs	r3, r3, #4
 801b620:	b21b      	sxth	r3, r3
 801b622:	b29a      	uxth	r2, r3
 801b624:	1dbb      	adds	r3, r7, #6
 801b626:	881b      	ldrh	r3, [r3, #0]
 801b628:	18d3      	adds	r3, r2, r3
 801b62a:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b62c:	4b1c      	ldr	r3, [pc, #112]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b62e:	2160      	movs	r1, #96	; 0x60
 801b630:	565b      	ldrsb	r3, [r3, r1]
 801b632:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b634:	18d3      	adds	r3, r2, r3
 801b636:	b29b      	uxth	r3, r3
 801b638:	3b9d      	subs	r3, #157	; 0x9d
 801b63a:	b29b      	uxth	r3, r3
 801b63c:	b219      	sxth	r1, r3
 801b63e:	4b18      	ldr	r3, [pc, #96]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b640:	2262      	movs	r2, #98	; 0x62
 801b642:	5299      	strh	r1, [r3, r2]
 801b644:	e04a      	b.n	801b6dc <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b646:	1dbb      	adds	r3, r7, #6
 801b648:	2200      	movs	r2, #0
 801b64a:	5e9b      	ldrsh	r3, [r3, r2]
 801b64c:	111b      	asrs	r3, r3, #4
 801b64e:	b21b      	sxth	r3, r3
 801b650:	b29a      	uxth	r2, r3
 801b652:	1dbb      	adds	r3, r7, #6
 801b654:	881b      	ldrh	r3, [r3, #0]
 801b656:	18d3      	adds	r3, r2, r3
 801b658:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b65a:	4b11      	ldr	r3, [pc, #68]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b65c:	2160      	movs	r1, #96	; 0x60
 801b65e:	565b      	ldrsb	r3, [r3, r1]
 801b660:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b662:	18d3      	adds	r3, r2, r3
 801b664:	b29b      	uxth	r3, r3
 801b666:	3ba4      	subs	r3, #164	; 0xa4
 801b668:	b29b      	uxth	r3, r3
 801b66a:	b219      	sxth	r1, r3
 801b66c:	4b0c      	ldr	r3, [pc, #48]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b66e:	2262      	movs	r2, #98	; 0x62
 801b670:	5299      	strh	r1, [r3, r2]
 801b672:	e033      	b.n	801b6dc <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b674:	4b0a      	ldr	r3, [pc, #40]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b676:	689b      	ldr	r3, [r3, #8]
 801b678:	4a0f      	ldr	r2, [pc, #60]	; (801b6b8 <SX1276OnDio0Irq+0x334>)
 801b67a:	4293      	cmp	r3, r2
 801b67c:	d91e      	bls.n	801b6bc <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801b67e:	1dbb      	adds	r3, r7, #6
 801b680:	2200      	movs	r2, #0
 801b682:	5e9b      	ldrsh	r3, [r3, r2]
 801b684:	111b      	asrs	r3, r3, #4
 801b686:	b21b      	sxth	r3, r3
 801b688:	b29a      	uxth	r2, r3
 801b68a:	1dbb      	adds	r3, r7, #6
 801b68c:	881b      	ldrh	r3, [r3, #0]
 801b68e:	18d3      	adds	r3, r2, r3
 801b690:	b29b      	uxth	r3, r3
 801b692:	3b9d      	subs	r3, #157	; 0x9d
 801b694:	b29b      	uxth	r3, r3
 801b696:	b219      	sxth	r1, r3
 801b698:	4b01      	ldr	r3, [pc, #4]	; (801b6a0 <SX1276OnDio0Irq+0x31c>)
 801b69a:	2262      	movs	r2, #98	; 0x62
 801b69c:	5299      	strh	r1, [r3, r2]
 801b69e:	e01d      	b.n	801b6dc <SX1276OnDio0Irq+0x358>
 801b6a0:	200016d0 	.word	0x200016d0
 801b6a4:	20001738 	.word	0x20001738
 801b6a8:	200016b8 	.word	0x200016b8
 801b6ac:	20000e14 	.word	0x20000e14
 801b6b0:	2000170a 	.word	0x2000170a
 801b6b4:	20000e18 	.word	0x20000e18
 801b6b8:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801b6bc:	1dbb      	adds	r3, r7, #6
 801b6be:	2200      	movs	r2, #0
 801b6c0:	5e9b      	ldrsh	r3, [r3, r2]
 801b6c2:	111b      	asrs	r3, r3, #4
 801b6c4:	b21b      	sxth	r3, r3
 801b6c6:	b29a      	uxth	r2, r3
 801b6c8:	1dbb      	adds	r3, r7, #6
 801b6ca:	881b      	ldrh	r3, [r3, #0]
 801b6cc:	18d3      	adds	r3, r2, r3
 801b6ce:	b29b      	uxth	r3, r3
 801b6d0:	3ba4      	subs	r3, #164	; 0xa4
 801b6d2:	b29b      	uxth	r3, r3
 801b6d4:	b219      	sxth	r1, r3
 801b6d6:	4b34      	ldr	r3, [pc, #208]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b6d8:	2262      	movs	r2, #98	; 0x62
 801b6da:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801b6dc:	2013      	movs	r0, #19
 801b6de:	f7ff fb7a 	bl	801add6 <SX1276Read>
 801b6e2:	0003      	movs	r3, r0
 801b6e4:	0019      	movs	r1, r3
 801b6e6:	4b30      	ldr	r3, [pc, #192]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b6e8:	2264      	movs	r2, #100	; 0x64
 801b6ea:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801b6ec:	2010      	movs	r0, #16
 801b6ee:	f7ff fb72 	bl	801add6 <SX1276Read>
 801b6f2:	0003      	movs	r3, r0
 801b6f4:	0019      	movs	r1, r3
 801b6f6:	200d      	movs	r0, #13
 801b6f8:	f7ff fb5c 	bl	801adb4 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801b6fc:	4b2a      	ldr	r3, [pc, #168]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b6fe:	2264      	movs	r2, #100	; 0x64
 801b700:	5c9a      	ldrb	r2, [r3, r2]
 801b702:	4b2a      	ldr	r3, [pc, #168]	; (801b7ac <SX1276OnDio0Irq+0x428>)
 801b704:	0011      	movs	r1, r2
 801b706:	0018      	movs	r0, r3
 801b708:	f7ff fbf2 	bl	801aef0 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801b70c:	4b26      	ldr	r3, [pc, #152]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b70e:	2256      	movs	r2, #86	; 0x56
 801b710:	5c9b      	ldrb	r3, [r3, r2]
 801b712:	2201      	movs	r2, #1
 801b714:	4053      	eors	r3, r2
 801b716:	b2db      	uxtb	r3, r3
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d002      	beq.n	801b722 <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801b71c:	4b22      	ldr	r3, [pc, #136]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b71e:	2200      	movs	r2, #0
 801b720:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801b722:	4b23      	ldr	r3, [pc, #140]	; (801b7b0 <SX1276OnDio0Irq+0x42c>)
 801b724:	0018      	movs	r0, r3
 801b726:	f001 f9b9 	bl	801ca9c <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b72a:	4b22      	ldr	r3, [pc, #136]	; (801b7b4 <SX1276OnDio0Irq+0x430>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d016      	beq.n	801b760 <SX1276OnDio0Irq+0x3dc>
 801b732:	4b20      	ldr	r3, [pc, #128]	; (801b7b4 <SX1276OnDio0Irq+0x430>)
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	689b      	ldr	r3, [r3, #8]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d011      	beq.n	801b760 <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801b73c:	4b1d      	ldr	r3, [pc, #116]	; (801b7b4 <SX1276OnDio0Irq+0x430>)
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	689c      	ldr	r4, [r3, #8]
 801b742:	4b19      	ldr	r3, [pc, #100]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b744:	2264      	movs	r2, #100	; 0x64
 801b746:	5c9b      	ldrb	r3, [r3, r2]
 801b748:	b299      	uxth	r1, r3
 801b74a:	4b17      	ldr	r3, [pc, #92]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b74c:	2262      	movs	r2, #98	; 0x62
 801b74e:	5e9a      	ldrsh	r2, [r3, r2]
 801b750:	4b15      	ldr	r3, [pc, #84]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b752:	2060      	movs	r0, #96	; 0x60
 801b754:	561b      	ldrsb	r3, [r3, r0]
 801b756:	4815      	ldr	r0, [pc, #84]	; (801b7ac <SX1276OnDio0Irq+0x428>)
 801b758:	47a0      	blx	r4
                break;
 801b75a:	e001      	b.n	801b760 <SX1276OnDio0Irq+0x3dc>
                        break;
 801b75c:	46c0      	nop			; (mov r8, r8)
 801b75e:	e01f      	b.n	801b7a0 <SX1276OnDio0Irq+0x41c>
                break;
 801b760:	46c0      	nop			; (mov r8, r8)
            break;
 801b762:	e01d      	b.n	801b7a0 <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801b764:	4b14      	ldr	r3, [pc, #80]	; (801b7b8 <SX1276OnDio0Irq+0x434>)
 801b766:	0018      	movs	r0, r3
 801b768:	f001 f998 	bl	801ca9c <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801b76c:	4b0e      	ldr	r3, [pc, #56]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b76e:	795b      	ldrb	r3, [r3, #5]
 801b770:	2b01      	cmp	r3, #1
 801b772:	d103      	bne.n	801b77c <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801b774:	2108      	movs	r1, #8
 801b776:	2012      	movs	r0, #18
 801b778:	f7ff fb1c 	bl	801adb4 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b77c:	4b0a      	ldr	r3, [pc, #40]	; (801b7a8 <SX1276OnDio0Irq+0x424>)
 801b77e:	2200      	movs	r2, #0
 801b780:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b782:	4b0c      	ldr	r3, [pc, #48]	; (801b7b4 <SX1276OnDio0Irq+0x430>)
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	2b00      	cmp	r3, #0
 801b788:	d008      	beq.n	801b79c <SX1276OnDio0Irq+0x418>
 801b78a:	4b0a      	ldr	r3, [pc, #40]	; (801b7b4 <SX1276OnDio0Irq+0x430>)
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d003      	beq.n	801b79c <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801b794:	4b07      	ldr	r3, [pc, #28]	; (801b7b4 <SX1276OnDio0Irq+0x430>)
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	4798      	blx	r3
                break;
 801b79c:	46c0      	nop			; (mov r8, r8)
            break;
 801b79e:	46c0      	nop			; (mov r8, r8)
    }
}
 801b7a0:	46c0      	nop			; (mov r8, r8)
 801b7a2:	46bd      	mov	sp, r7
 801b7a4:	b003      	add	sp, #12
 801b7a6:	bd90      	pop	{r4, r7, pc}
 801b7a8:	200016d0 	.word	0x200016d0
 801b7ac:	20000e18 	.word	0x20000e18
 801b7b0:	20001738 	.word	0x20001738
 801b7b4:	20000e14 	.word	0x20000e14
 801b7b8:	200016a0 	.word	0x200016a0

0801b7bc <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801b7bc:	b580      	push	{r7, lr}
 801b7be:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801b7c0:	4b6c      	ldr	r3, [pc, #432]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b7c2:	791b      	ldrb	r3, [r3, #4]
 801b7c4:	2b01      	cmp	r3, #1
 801b7c6:	d003      	beq.n	801b7d0 <SX1276OnDio1Irq+0x14>
 801b7c8:	2b02      	cmp	r3, #2
 801b7ca:	d100      	bne.n	801b7ce <SX1276OnDio1Irq+0x12>
 801b7cc:	e08b      	b.n	801b8e6 <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801b7ce:	e0ce      	b.n	801b96e <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b7d0:	4b68      	ldr	r3, [pc, #416]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b7d2:	795b      	ldrb	r3, [r3, #5]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d002      	beq.n	801b7de <SX1276OnDio1Irq+0x22>
 801b7d8:	2b01      	cmp	r3, #1
 801b7da:	d061      	beq.n	801b8a0 <SX1276OnDio1Irq+0xe4>
                break;
 801b7dc:	e082      	b.n	801b8e4 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b7de:	f7ea fd29 	bl	8006234 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b7e2:	1e03      	subs	r3, r0, #0
 801b7e4:	d100      	bne.n	801b7e8 <SX1276OnDio1Irq+0x2c>
 801b7e6:	e078      	b.n	801b8da <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801b7e8:	4b63      	ldr	r3, [pc, #396]	; (801b978 <SX1276OnDio1Irq+0x1bc>)
 801b7ea:	0018      	movs	r0, r3
 801b7ec:	f001 f956 	bl	801ca9c <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b7f0:	4b60      	ldr	r3, [pc, #384]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b7f2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d118      	bne.n	801b82a <SX1276OnDio1Irq+0x6e>
 801b7f8:	4b5e      	ldr	r3, [pc, #376]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b7fa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d114      	bne.n	801b82a <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b800:	4b5c      	ldr	r3, [pc, #368]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b802:	2222      	movs	r2, #34	; 0x22
 801b804:	5c9b      	ldrb	r3, [r3, r2]
 801b806:	2201      	movs	r2, #1
 801b808:	4053      	eors	r3, r2
 801b80a:	b2db      	uxtb	r3, r3
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d005      	beq.n	801b81c <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b810:	4b5a      	ldr	r3, [pc, #360]	; (801b97c <SX1276OnDio1Irq+0x1c0>)
 801b812:	2101      	movs	r1, #1
 801b814:	0018      	movs	r0, r3
 801b816:	f7ff fb6b 	bl	801aef0 <SX1276ReadFifo>
 801b81a:	e006      	b.n	801b82a <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b81c:	2032      	movs	r0, #50	; 0x32
 801b81e:	f7ff fada 	bl	801add6 <SX1276Read>
 801b822:	0003      	movs	r3, r0
 801b824:	b29a      	uxth	r2, r3
 801b826:	4b53      	ldr	r3, [pc, #332]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b828:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801b82a:	4b52      	ldr	r3, [pc, #328]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b82c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b82e:	001a      	movs	r2, r3
 801b830:	4b50      	ldr	r3, [pc, #320]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b832:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b834:	1ad3      	subs	r3, r2, r3
 801b836:	4a4f      	ldr	r2, [pc, #316]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b838:	213e      	movs	r1, #62	; 0x3e
 801b83a:	5c52      	ldrb	r2, [r2, r1]
 801b83c:	4293      	cmp	r3, r2
 801b83e:	db1a      	blt.n	801b876 <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801b840:	4b4c      	ldr	r3, [pc, #304]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b842:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b844:	001a      	movs	r2, r3
 801b846:	4b4e      	ldr	r3, [pc, #312]	; (801b980 <SX1276OnDio1Irq+0x1c4>)
 801b848:	18d2      	adds	r2, r2, r3
 801b84a:	4b4a      	ldr	r3, [pc, #296]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b84c:	213e      	movs	r1, #62	; 0x3e
 801b84e:	5c5b      	ldrb	r3, [r3, r1]
 801b850:	3b01      	subs	r3, #1
 801b852:	b2db      	uxtb	r3, r3
 801b854:	0019      	movs	r1, r3
 801b856:	0010      	movs	r0, r2
 801b858:	f7ff fb4a 	bl	801aef0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801b85c:	4b45      	ldr	r3, [pc, #276]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b85e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801b860:	4b44      	ldr	r3, [pc, #272]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b862:	213e      	movs	r1, #62	; 0x3e
 801b864:	5c5b      	ldrb	r3, [r3, r1]
 801b866:	b29b      	uxth	r3, r3
 801b868:	18d3      	adds	r3, r2, r3
 801b86a:	b29b      	uxth	r3, r3
 801b86c:	3b01      	subs	r3, #1
 801b86e:	b29a      	uxth	r2, r3
 801b870:	4b40      	ldr	r3, [pc, #256]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b872:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b874:	e036      	b.n	801b8e4 <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b876:	4b3f      	ldr	r3, [pc, #252]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b878:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b87a:	001a      	movs	r2, r3
 801b87c:	4b40      	ldr	r3, [pc, #256]	; (801b980 <SX1276OnDio1Irq+0x1c4>)
 801b87e:	18d0      	adds	r0, r2, r3
 801b880:	4b3c      	ldr	r3, [pc, #240]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b882:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b884:	b2da      	uxtb	r2, r3
 801b886:	4b3b      	ldr	r3, [pc, #236]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b888:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b88a:	b2db      	uxtb	r3, r3
 801b88c:	1ad3      	subs	r3, r2, r3
 801b88e:	b2db      	uxtb	r3, r3
 801b890:	0019      	movs	r1, r3
 801b892:	f7ff fb2d 	bl	801aef0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b896:	4b37      	ldr	r3, [pc, #220]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b898:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b89a:	4b36      	ldr	r3, [pc, #216]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b89c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b89e:	e021      	b.n	801b8e4 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b8a0:	f7ea fcc8 	bl	8006234 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b8a4:	1e03      	subs	r3, r0, #0
 801b8a6:	d01a      	beq.n	801b8de <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801b8a8:	4b36      	ldr	r3, [pc, #216]	; (801b984 <SX1276OnDio1Irq+0x1c8>)
 801b8aa:	0018      	movs	r0, r3
 801b8ac:	f001 f8f6 	bl	801ca9c <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801b8b0:	2180      	movs	r1, #128	; 0x80
 801b8b2:	2012      	movs	r0, #18
 801b8b4:	f7ff fa7e 	bl	801adb4 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b8b8:	4b2e      	ldr	r3, [pc, #184]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b8ba:	2200      	movs	r2, #0
 801b8bc:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b8be:	4b32      	ldr	r3, [pc, #200]	; (801b988 <SX1276OnDio1Irq+0x1cc>)
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d00d      	beq.n	801b8e2 <SX1276OnDio1Irq+0x126>
 801b8c6:	4b30      	ldr	r3, [pc, #192]	; (801b988 <SX1276OnDio1Irq+0x1cc>)
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	68db      	ldr	r3, [r3, #12]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d008      	beq.n	801b8e2 <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801b8d0:	4b2d      	ldr	r3, [pc, #180]	; (801b988 <SX1276OnDio1Irq+0x1cc>)
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	68db      	ldr	r3, [r3, #12]
 801b8d6:	4798      	blx	r3
                break;
 801b8d8:	e003      	b.n	801b8e2 <SX1276OnDio1Irq+0x126>
                    break;
 801b8da:	46c0      	nop			; (mov r8, r8)
 801b8dc:	e047      	b.n	801b96e <SX1276OnDio1Irq+0x1b2>
                    break;
 801b8de:	46c0      	nop			; (mov r8, r8)
 801b8e0:	e045      	b.n	801b96e <SX1276OnDio1Irq+0x1b2>
                break;
 801b8e2:	46c0      	nop			; (mov r8, r8)
            break;
 801b8e4:	e043      	b.n	801b96e <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b8e6:	4b23      	ldr	r3, [pc, #140]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b8e8:	795b      	ldrb	r3, [r3, #5]
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	d13b      	bne.n	801b966 <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801b8ee:	f7ea fca1 	bl	8006234 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b8f2:	0003      	movs	r3, r0
 801b8f4:	2b01      	cmp	r3, #1
 801b8f6:	d038      	beq.n	801b96a <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801b8f8:	4b1e      	ldr	r3, [pc, #120]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b8fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b8fc:	001a      	movs	r2, r3
 801b8fe:	4b1d      	ldr	r3, [pc, #116]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b900:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b902:	1ad3      	subs	r3, r2, r3
 801b904:	4a1b      	ldr	r2, [pc, #108]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b906:	213f      	movs	r1, #63	; 0x3f
 801b908:	5c52      	ldrb	r2, [r2, r1]
 801b90a:	4293      	cmp	r3, r2
 801b90c:	dd16      	ble.n	801b93c <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801b90e:	4b19      	ldr	r3, [pc, #100]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b910:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b912:	001a      	movs	r2, r3
 801b914:	4b1a      	ldr	r3, [pc, #104]	; (801b980 <SX1276OnDio1Irq+0x1c4>)
 801b916:	18d2      	adds	r2, r2, r3
 801b918:	4b16      	ldr	r3, [pc, #88]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b91a:	213f      	movs	r1, #63	; 0x3f
 801b91c:	5c5b      	ldrb	r3, [r3, r1]
 801b91e:	0019      	movs	r1, r3
 801b920:	0010      	movs	r0, r2
 801b922:	f7ff fad3 	bl	801aecc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801b926:	4b13      	ldr	r3, [pc, #76]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b928:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801b92a:	4b12      	ldr	r3, [pc, #72]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b92c:	213f      	movs	r1, #63	; 0x3f
 801b92e:	5c5b      	ldrb	r3, [r3, r1]
 801b930:	b29b      	uxth	r3, r3
 801b932:	18d3      	adds	r3, r2, r3
 801b934:	b29a      	uxth	r2, r3
 801b936:	4b0f      	ldr	r3, [pc, #60]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b938:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b93a:	e017      	b.n	801b96c <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b93c:	4b0d      	ldr	r3, [pc, #52]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b93e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b940:	001a      	movs	r2, r3
 801b942:	4b0f      	ldr	r3, [pc, #60]	; (801b980 <SX1276OnDio1Irq+0x1c4>)
 801b944:	18d0      	adds	r0, r2, r3
 801b946:	4b0b      	ldr	r3, [pc, #44]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b948:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b94a:	b2da      	uxtb	r2, r3
 801b94c:	4b09      	ldr	r3, [pc, #36]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b94e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b950:	b2db      	uxtb	r3, r3
 801b952:	1ad3      	subs	r3, r2, r3
 801b954:	b2db      	uxtb	r3, r3
 801b956:	0019      	movs	r1, r3
 801b958:	f7ff fab8 	bl	801aecc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801b95c:	4b05      	ldr	r3, [pc, #20]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b95e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b960:	4b04      	ldr	r3, [pc, #16]	; (801b974 <SX1276OnDio1Irq+0x1b8>)
 801b962:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b964:	e002      	b.n	801b96c <SX1276OnDio1Irq+0x1b0>
                break;
 801b966:	46c0      	nop			; (mov r8, r8)
 801b968:	e000      	b.n	801b96c <SX1276OnDio1Irq+0x1b0>
                    break;
 801b96a:	46c0      	nop			; (mov r8, r8)
            break;
 801b96c:	46c0      	nop			; (mov r8, r8)
    }
}
 801b96e:	46c0      	nop			; (mov r8, r8)
 801b970:	46bd      	mov	sp, r7
 801b972:	bd80      	pop	{r7, pc}
 801b974:	200016d0 	.word	0x200016d0
 801b978:	200016b8 	.word	0x200016b8
 801b97c:	2000170a 	.word	0x2000170a
 801b980:	20000e18 	.word	0x20000e18
 801b984:	20001738 	.word	0x20001738
 801b988:	20000e14 	.word	0x20000e14

0801b98c <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801b98c:	b590      	push	{r4, r7, lr}
 801b98e:	b085      	sub	sp, #20
 801b990:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801b992:	2300      	movs	r3, #0
 801b994:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801b996:	4b5d      	ldr	r3, [pc, #372]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801b998:	791b      	ldrb	r3, [r3, #4]
 801b99a:	2b01      	cmp	r3, #1
 801b99c:	d003      	beq.n	801b9a6 <SX1276OnDio2Irq+0x1a>
 801b99e:	2b02      	cmp	r3, #2
 801b9a0:	d100      	bne.n	801b9a4 <SX1276OnDio2Irq+0x18>
 801b9a2:	e083      	b.n	801baac <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801b9a4:	e0ae      	b.n	801bb04 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801b9a6:	4b59      	ldr	r3, [pc, #356]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801b9a8:	795b      	ldrb	r3, [r3, #5]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d002      	beq.n	801b9b4 <SX1276OnDio2Irq+0x28>
 801b9ae:	2b01      	cmp	r3, #1
 801b9b0:	d058      	beq.n	801ba64 <SX1276OnDio2Irq+0xd8>
                break;
 801b9b2:	e07a      	b.n	801baaa <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801b9b4:	4b55      	ldr	r3, [pc, #340]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801b9b6:	2230      	movs	r2, #48	; 0x30
 801b9b8:	2101      	movs	r1, #1
 801b9ba:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801b9bc:	4b53      	ldr	r3, [pc, #332]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801b9be:	2230      	movs	r2, #48	; 0x30
 801b9c0:	5c9b      	ldrb	r3, [r3, r2]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d06e      	beq.n	801baa4 <SX1276OnDio2Irq+0x118>
 801b9c6:	4b51      	ldr	r3, [pc, #324]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801b9c8:	2231      	movs	r2, #49	; 0x31
 801b9ca:	5c9b      	ldrb	r3, [r3, r2]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d169      	bne.n	801baa4 <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801b9d0:	4b4f      	ldr	r3, [pc, #316]	; (801bb10 <SX1276OnDio2Irq+0x184>)
 801b9d2:	0018      	movs	r0, r3
 801b9d4:	f001 f862 	bl	801ca9c <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801b9d8:	4b4c      	ldr	r3, [pc, #304]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801b9da:	2231      	movs	r2, #49	; 0x31
 801b9dc:	2101      	movs	r1, #1
 801b9de:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801b9e0:	2011      	movs	r0, #17
 801b9e2:	f7ff f9f8 	bl	801add6 <SX1276Read>
 801b9e6:	0003      	movs	r3, r0
 801b9e8:	085b      	lsrs	r3, r3, #1
 801b9ea:	b2db      	uxtb	r3, r3
 801b9ec:	425b      	negs	r3, r3
 801b9ee:	b2db      	uxtb	r3, r3
 801b9f0:	b259      	sxtb	r1, r3
 801b9f2:	4b46      	ldr	r3, [pc, #280]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801b9f4:	2232      	movs	r2, #50	; 0x32
 801b9f6:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801b9f8:	201b      	movs	r0, #27
 801b9fa:	f7ff f9ec 	bl	801add6 <SX1276Read>
 801b9fe:	0003      	movs	r3, r0
 801ba00:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801ba02:	201c      	movs	r0, #28
 801ba04:	f7ff f9e7 	bl	801add6 <SX1276Read>
 801ba08:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801ba0a:	4323      	orrs	r3, r4
 801ba0c:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	0a1b      	lsrs	r3, r3, #8
 801ba12:	60bb      	str	r3, [r7, #8]
 801ba14:	68bb      	ldr	r3, [r7, #8]
 801ba16:	021b      	lsls	r3, r3, #8
 801ba18:	68fa      	ldr	r2, [r7, #12]
 801ba1a:	1ad3      	subs	r3, r2, r3
 801ba1c:	607b      	str	r3, [r7, #4]
 801ba1e:	68b9      	ldr	r1, [r7, #8]
 801ba20:	000b      	movs	r3, r1
 801ba22:	015b      	lsls	r3, r3, #5
 801ba24:	1a5b      	subs	r3, r3, r1
 801ba26:	019a      	lsls	r2, r3, #6
 801ba28:	1ad2      	subs	r2, r2, r3
 801ba2a:	00d2      	lsls	r2, r2, #3
 801ba2c:	1850      	adds	r0, r2, r1
 801ba2e:	6879      	ldr	r1, [r7, #4]
 801ba30:	000b      	movs	r3, r1
 801ba32:	015b      	lsls	r3, r3, #5
 801ba34:	1a5b      	subs	r3, r3, r1
 801ba36:	019a      	lsls	r2, r3, #6
 801ba38:	1ad2      	subs	r2, r2, r3
 801ba3a:	00d2      	lsls	r2, r2, #3
 801ba3c:	1853      	adds	r3, r2, r1
 801ba3e:	3380      	adds	r3, #128	; 0x80
 801ba40:	0a1b      	lsrs	r3, r3, #8
 801ba42:	18c3      	adds	r3, r0, r3
 801ba44:	001a      	movs	r2, r3
 801ba46:	4b31      	ldr	r3, [pc, #196]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801ba48:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801ba4a:	200c      	movs	r0, #12
 801ba4c:	f7ff f9c3 	bl	801add6 <SX1276Read>
 801ba50:	0003      	movs	r3, r0
 801ba52:	095b      	lsrs	r3, r3, #5
 801ba54:	b2db      	uxtb	r3, r3
 801ba56:	2207      	movs	r2, #7
 801ba58:	4013      	ands	r3, r2
 801ba5a:	b2d9      	uxtb	r1, r3
 801ba5c:	4b2b      	ldr	r3, [pc, #172]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801ba5e:	2238      	movs	r2, #56	; 0x38
 801ba60:	5499      	strb	r1, [r3, r2]
                break;
 801ba62:	e01f      	b.n	801baa4 <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801ba64:	4b29      	ldr	r3, [pc, #164]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801ba66:	2253      	movs	r2, #83	; 0x53
 801ba68:	5c9b      	ldrb	r3, [r3, r2]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d01c      	beq.n	801baa8 <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801ba6e:	2102      	movs	r1, #2
 801ba70:	2012      	movs	r0, #18
 801ba72:	f7ff f99f 	bl	801adb4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801ba76:	4b27      	ldr	r3, [pc, #156]	; (801bb14 <SX1276OnDio2Irq+0x188>)
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d014      	beq.n	801baa8 <SX1276OnDio2Irq+0x11c>
 801ba7e:	4b25      	ldr	r3, [pc, #148]	; (801bb14 <SX1276OnDio2Irq+0x188>)
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	695b      	ldr	r3, [r3, #20]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d00f      	beq.n	801baa8 <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801ba88:	4b22      	ldr	r3, [pc, #136]	; (801bb14 <SX1276OnDio2Irq+0x188>)
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	695c      	ldr	r4, [r3, #20]
 801ba8e:	201c      	movs	r0, #28
 801ba90:	f7ff f9a1 	bl	801add6 <SX1276Read>
 801ba94:	0003      	movs	r3, r0
 801ba96:	001a      	movs	r2, r3
 801ba98:	233f      	movs	r3, #63	; 0x3f
 801ba9a:	4013      	ands	r3, r2
 801ba9c:	b2db      	uxtb	r3, r3
 801ba9e:	0018      	movs	r0, r3
 801baa0:	47a0      	blx	r4
                break;
 801baa2:	e001      	b.n	801baa8 <SX1276OnDio2Irq+0x11c>
                break;
 801baa4:	46c0      	nop			; (mov r8, r8)
 801baa6:	e02d      	b.n	801bb04 <SX1276OnDio2Irq+0x178>
                break;
 801baa8:	46c0      	nop			; (mov r8, r8)
            break;
 801baaa:	e02b      	b.n	801bb04 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801baac:	4b17      	ldr	r3, [pc, #92]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801baae:	795b      	ldrb	r3, [r3, #5]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d021      	beq.n	801baf8 <SX1276OnDio2Irq+0x16c>
 801bab4:	2b01      	cmp	r3, #1
 801bab6:	d121      	bne.n	801bafc <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801bab8:	4b14      	ldr	r3, [pc, #80]	; (801bb0c <SX1276OnDio2Irq+0x180>)
 801baba:	2253      	movs	r2, #83	; 0x53
 801babc:	5c9b      	ldrb	r3, [r3, r2]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d01e      	beq.n	801bb00 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801bac2:	2102      	movs	r1, #2
 801bac4:	2012      	movs	r0, #18
 801bac6:	f7ff f975 	bl	801adb4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801baca:	4b12      	ldr	r3, [pc, #72]	; (801bb14 <SX1276OnDio2Irq+0x188>)
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d016      	beq.n	801bb00 <SX1276OnDio2Irq+0x174>
 801bad2:	4b10      	ldr	r3, [pc, #64]	; (801bb14 <SX1276OnDio2Irq+0x188>)
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	695b      	ldr	r3, [r3, #20]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d011      	beq.n	801bb00 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801badc:	4b0d      	ldr	r3, [pc, #52]	; (801bb14 <SX1276OnDio2Irq+0x188>)
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	695c      	ldr	r4, [r3, #20]
 801bae2:	201c      	movs	r0, #28
 801bae4:	f7ff f977 	bl	801add6 <SX1276Read>
 801bae8:	0003      	movs	r3, r0
 801baea:	001a      	movs	r2, r3
 801baec:	233f      	movs	r3, #63	; 0x3f
 801baee:	4013      	ands	r3, r2
 801baf0:	b2db      	uxtb	r3, r3
 801baf2:	0018      	movs	r0, r3
 801baf4:	47a0      	blx	r4
                break;
 801baf6:	e003      	b.n	801bb00 <SX1276OnDio2Irq+0x174>
                break;
 801baf8:	46c0      	nop			; (mov r8, r8)
 801bafa:	e002      	b.n	801bb02 <SX1276OnDio2Irq+0x176>
                break;
 801bafc:	46c0      	nop			; (mov r8, r8)
 801bafe:	e000      	b.n	801bb02 <SX1276OnDio2Irq+0x176>
                break;
 801bb00:	46c0      	nop			; (mov r8, r8)
            break;
 801bb02:	46c0      	nop			; (mov r8, r8)
    }
}
 801bb04:	46c0      	nop			; (mov r8, r8)
 801bb06:	46bd      	mov	sp, r7
 801bb08:	b005      	add	sp, #20
 801bb0a:	bd90      	pop	{r4, r7, pc}
 801bb0c:	200016d0 	.word	0x200016d0
 801bb10:	200016b8 	.word	0x200016b8
 801bb14:	20000e14 	.word	0x20000e14

0801bb18 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801bb1c:	4b1d      	ldr	r3, [pc, #116]	; (801bb94 <SX1276OnDio3Irq+0x7c>)
 801bb1e:	795b      	ldrb	r3, [r3, #5]
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d031      	beq.n	801bb88 <SX1276OnDio3Irq+0x70>
 801bb24:	2b01      	cmp	r3, #1
 801bb26:	d000      	beq.n	801bb2a <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801bb28:	e031      	b.n	801bb8e <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801bb2a:	2012      	movs	r0, #18
 801bb2c:	f7ff f953 	bl	801add6 <SX1276Read>
 801bb30:	0003      	movs	r3, r0
 801bb32:	001a      	movs	r2, r3
 801bb34:	2301      	movs	r3, #1
 801bb36:	4013      	ands	r3, r2
 801bb38:	2b01      	cmp	r3, #1
 801bb3a:	d112      	bne.n	801bb62 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801bb3c:	2105      	movs	r1, #5
 801bb3e:	2012      	movs	r0, #18
 801bb40:	f7ff f938 	bl	801adb4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bb44:	4b14      	ldr	r3, [pc, #80]	; (801bb98 <SX1276OnDio3Irq+0x80>)
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d01f      	beq.n	801bb8c <SX1276OnDio3Irq+0x74>
 801bb4c:	4b12      	ldr	r3, [pc, #72]	; (801bb98 <SX1276OnDio3Irq+0x80>)
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	699b      	ldr	r3, [r3, #24]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d01a      	beq.n	801bb8c <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801bb56:	4b10      	ldr	r3, [pc, #64]	; (801bb98 <SX1276OnDio3Irq+0x80>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	699b      	ldr	r3, [r3, #24]
 801bb5c:	2001      	movs	r0, #1
 801bb5e:	4798      	blx	r3
        break;
 801bb60:	e014      	b.n	801bb8c <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801bb62:	2104      	movs	r1, #4
 801bb64:	2012      	movs	r0, #18
 801bb66:	f7ff f925 	bl	801adb4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bb6a:	4b0b      	ldr	r3, [pc, #44]	; (801bb98 <SX1276OnDio3Irq+0x80>)
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d00c      	beq.n	801bb8c <SX1276OnDio3Irq+0x74>
 801bb72:	4b09      	ldr	r3, [pc, #36]	; (801bb98 <SX1276OnDio3Irq+0x80>)
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	699b      	ldr	r3, [r3, #24]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d007      	beq.n	801bb8c <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801bb7c:	4b06      	ldr	r3, [pc, #24]	; (801bb98 <SX1276OnDio3Irq+0x80>)
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	699b      	ldr	r3, [r3, #24]
 801bb82:	2000      	movs	r0, #0
 801bb84:	4798      	blx	r3
        break;
 801bb86:	e001      	b.n	801bb8c <SX1276OnDio3Irq+0x74>
        break;
 801bb88:	46c0      	nop			; (mov r8, r8)
 801bb8a:	e000      	b.n	801bb8e <SX1276OnDio3Irq+0x76>
        break;
 801bb8c:	46c0      	nop			; (mov r8, r8)
    }
}
 801bb8e:	46c0      	nop			; (mov r8, r8)
 801bb90:	46bd      	mov	sp, r7
 801bb92:	bd80      	pop	{r7, pc}
 801bb94:	200016d0 	.word	0x200016d0
 801bb98:	20000e14 	.word	0x20000e14

0801bb9c <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801bba0:	4b0b      	ldr	r3, [pc, #44]	; (801bbd0 <SX1276OnDio4Irq+0x34>)
 801bba2:	795b      	ldrb	r3, [r3, #5]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d002      	beq.n	801bbae <SX1276OnDio4Irq+0x12>
 801bba8:	2b01      	cmp	r3, #1
 801bbaa:	d00a      	beq.n	801bbc2 <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801bbac:	e00c      	b.n	801bbc8 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801bbae:	4b08      	ldr	r3, [pc, #32]	; (801bbd0 <SX1276OnDio4Irq+0x34>)
 801bbb0:	2230      	movs	r2, #48	; 0x30
 801bbb2:	5c9b      	ldrb	r3, [r3, r2]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d106      	bne.n	801bbc6 <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801bbb8:	4b05      	ldr	r3, [pc, #20]	; (801bbd0 <SX1276OnDio4Irq+0x34>)
 801bbba:	2230      	movs	r2, #48	; 0x30
 801bbbc:	2101      	movs	r1, #1
 801bbbe:	5499      	strb	r1, [r3, r2]
        break;
 801bbc0:	e001      	b.n	801bbc6 <SX1276OnDio4Irq+0x2a>
        break;
 801bbc2:	46c0      	nop			; (mov r8, r8)
 801bbc4:	e000      	b.n	801bbc8 <SX1276OnDio4Irq+0x2c>
        break;
 801bbc6:	46c0      	nop			; (mov r8, r8)
    }
}
 801bbc8:	46c0      	nop			; (mov r8, r8)
 801bbca:	46bd      	mov	sp, r7
 801bbcc:	bd80      	pop	{r7, pc}
 801bbce:	46c0      	nop			; (mov r8, r8)
 801bbd0:	200016d0 	.word	0x200016d0

0801bbd4 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bbd8:	4b0a      	ldr	r3, [pc, #40]	; (801bc04 <UTIL_ADV_TRACE_Init+0x30>)
 801bbda:	2218      	movs	r2, #24
 801bbdc:	2100      	movs	r1, #0
 801bbde:	0018      	movs	r0, r3
 801bbe0:	f000 fbb8 	bl	801c354 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bbe4:	2380      	movs	r3, #128	; 0x80
 801bbe6:	009a      	lsls	r2, r3, #2
 801bbe8:	4b07      	ldr	r3, [pc, #28]	; (801bc08 <UTIL_ADV_TRACE_Init+0x34>)
 801bbea:	2100      	movs	r1, #0
 801bbec:	0018      	movs	r0, r3
 801bbee:	f000 fbb1 	bl	801c354 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bbf2:	4b06      	ldr	r3, [pc, #24]	; (801bc0c <UTIL_ADV_TRACE_Init+0x38>)
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	4a06      	ldr	r2, [pc, #24]	; (801bc10 <UTIL_ADV_TRACE_Init+0x3c>)
 801bbf8:	0010      	movs	r0, r2
 801bbfa:	4798      	blx	r3
 801bbfc:	0003      	movs	r3, r0
}
 801bbfe:	0018      	movs	r0, r3
 801bc00:	46bd      	mov	sp, r7
 801bc02:	bd80      	pop	{r7, pc}
 801bc04:	20000f18 	.word	0x20000f18
 801bc08:	20000f30 	.word	0x20000f30
 801bc0c:	0801e48c 	.word	0x0801e48c
 801bc10:	0801be95 	.word	0x0801be95

0801bc14 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801bc14:	b408      	push	{r3}
 801bc16:	b590      	push	{r4, r7, lr}
 801bc18:	b08c      	sub	sp, #48	; 0x30
 801bc1a:	af00      	add	r7, sp, #0
 801bc1c:	60f8      	str	r0, [r7, #12]
 801bc1e:	60b9      	str	r1, [r7, #8]
 801bc20:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801bc22:	2316      	movs	r3, #22
 801bc24:	18fb      	adds	r3, r7, r3
 801bc26:	2200      	movs	r2, #0
 801bc28:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801bc2a:	232c      	movs	r3, #44	; 0x2c
 801bc2c:	18fb      	adds	r3, r7, r3
 801bc2e:	2200      	movs	r2, #0
 801bc30:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801bc32:	4b41      	ldr	r3, [pc, #260]	; (801bd38 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bc34:	7a1b      	ldrb	r3, [r3, #8]
 801bc36:	001a      	movs	r2, r3
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	4293      	cmp	r3, r2
 801bc3c:	d902      	bls.n	801bc44 <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801bc3e:	2305      	movs	r3, #5
 801bc40:	425b      	negs	r3, r3
 801bc42:	e072      	b.n	801bd2a <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801bc44:	4b3c      	ldr	r3, [pc, #240]	; (801bd38 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bc46:	68db      	ldr	r3, [r3, #12]
 801bc48:	68ba      	ldr	r2, [r7, #8]
 801bc4a:	4013      	ands	r3, r2
 801bc4c:	68ba      	ldr	r2, [r7, #8]
 801bc4e:	429a      	cmp	r2, r3
 801bc50:	d002      	beq.n	801bc58 <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801bc52:	2306      	movs	r3, #6
 801bc54:	425b      	negs	r3, r3
 801bc56:	e068      	b.n	801bd2a <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801bc58:	4b37      	ldr	r3, [pc, #220]	; (801bd38 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bc5a:	685b      	ldr	r3, [r3, #4]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d00a      	beq.n	801bc76 <UTIL_ADV_TRACE_COND_FSend+0x62>
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d007      	beq.n	801bc76 <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801bc66:	4b34      	ldr	r3, [pc, #208]	; (801bd38 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bc68:	685b      	ldr	r3, [r3, #4]
 801bc6a:	2216      	movs	r2, #22
 801bc6c:	18b9      	adds	r1, r7, r2
 801bc6e:	2218      	movs	r2, #24
 801bc70:	18ba      	adds	r2, r7, r2
 801bc72:	0010      	movs	r0, r2
 801bc74:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801bc76:	2340      	movs	r3, #64	; 0x40
 801bc78:	18fb      	adds	r3, r7, r3
 801bc7a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bc80:	2180      	movs	r1, #128	; 0x80
 801bc82:	0049      	lsls	r1, r1, #1
 801bc84:	482d      	ldr	r0, [pc, #180]	; (801bd3c <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801bc86:	f001 fa13 	bl	801d0b0 <tiny_vsnprintf_like>
 801bc8a:	0002      	movs	r2, r0
 801bc8c:	242c      	movs	r4, #44	; 0x2c
 801bc8e:	193b      	adds	r3, r7, r4
 801bc90:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801bc92:	f000 fa23 	bl	801c0dc <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801bc96:	2316      	movs	r3, #22
 801bc98:	18fb      	adds	r3, r7, r3
 801bc9a:	881a      	ldrh	r2, [r3, #0]
 801bc9c:	193b      	adds	r3, r7, r4
 801bc9e:	881b      	ldrh	r3, [r3, #0]
 801bca0:	18d3      	adds	r3, r2, r3
 801bca2:	b29b      	uxth	r3, r3
 801bca4:	2214      	movs	r2, #20
 801bca6:	18ba      	adds	r2, r7, r2
 801bca8:	0011      	movs	r1, r2
 801bcaa:	0018      	movs	r0, r3
 801bcac:	f000 f97c 	bl	801bfa8 <TRACE_AllocateBufer>
 801bcb0:	0003      	movs	r3, r0
 801bcb2:	3301      	adds	r3, #1
 801bcb4:	d035      	beq.n	801bd22 <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801bcb6:	232e      	movs	r3, #46	; 0x2e
 801bcb8:	18fb      	adds	r3, r7, r3
 801bcba:	2200      	movs	r2, #0
 801bcbc:	801a      	strh	r2, [r3, #0]
 801bcbe:	e016      	b.n	801bcee <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801bcc0:	202e      	movs	r0, #46	; 0x2e
 801bcc2:	183b      	adds	r3, r7, r0
 801bcc4:	881b      	ldrh	r3, [r3, #0]
 801bcc6:	2414      	movs	r4, #20
 801bcc8:	193a      	adds	r2, r7, r4
 801bcca:	8812      	ldrh	r2, [r2, #0]
 801bccc:	0011      	movs	r1, r2
 801bcce:	2218      	movs	r2, #24
 801bcd0:	18ba      	adds	r2, r7, r2
 801bcd2:	5cd2      	ldrb	r2, [r2, r3]
 801bcd4:	4b1a      	ldr	r3, [pc, #104]	; (801bd40 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bcd6:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801bcd8:	193b      	adds	r3, r7, r4
 801bcda:	881b      	ldrh	r3, [r3, #0]
 801bcdc:	3301      	adds	r3, #1
 801bcde:	b29a      	uxth	r2, r3
 801bce0:	193b      	adds	r3, r7, r4
 801bce2:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801bce4:	183b      	adds	r3, r7, r0
 801bce6:	881a      	ldrh	r2, [r3, #0]
 801bce8:	183b      	adds	r3, r7, r0
 801bcea:	3201      	adds	r2, #1
 801bcec:	801a      	strh	r2, [r3, #0]
 801bcee:	2316      	movs	r3, #22
 801bcf0:	18fb      	adds	r3, r7, r3
 801bcf2:	881b      	ldrh	r3, [r3, #0]
 801bcf4:	222e      	movs	r2, #46	; 0x2e
 801bcf6:	18ba      	adds	r2, r7, r2
 801bcf8:	8812      	ldrh	r2, [r2, #0]
 801bcfa:	429a      	cmp	r2, r3
 801bcfc:	d3e0      	bcc.n	801bcc0 <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bcfe:	2314      	movs	r3, #20
 801bd00:	18fb      	adds	r3, r7, r3
 801bd02:	881b      	ldrh	r3, [r3, #0]
 801bd04:	001a      	movs	r2, r3
 801bd06:	4b0e      	ldr	r3, [pc, #56]	; (801bd40 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bd08:	18d0      	adds	r0, r2, r3
 801bd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bd0e:	2180      	movs	r1, #128	; 0x80
 801bd10:	0049      	lsls	r1, r1, #1
 801bd12:	f001 f9cd 	bl	801d0b0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801bd16:	f000 f9fd 	bl	801c114 <TRACE_UnLock>

    return TRACE_Send();
 801bd1a:	f000 f831 	bl	801bd80 <TRACE_Send>
 801bd1e:	0003      	movs	r3, r0
 801bd20:	e003      	b.n	801bd2a <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801bd22:	f000 f9f7 	bl	801c114 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801bd26:	2303      	movs	r3, #3
 801bd28:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801bd2a:	0018      	movs	r0, r3
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	b00c      	add	sp, #48	; 0x30
 801bd30:	bc90      	pop	{r4, r7}
 801bd32:	bc08      	pop	{r3}
 801bd34:	b001      	add	sp, #4
 801bd36:	4718      	bx	r3
 801bd38:	20000f18 	.word	0x20000f18
 801bd3c:	20001130 	.word	0x20001130
 801bd40:	20000f30 	.word	0x20000f30

0801bd44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b082      	sub	sp, #8
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801bd4c:	4b03      	ldr	r3, [pc, #12]	; (801bd5c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801bd4e:	687a      	ldr	r2, [r7, #4]
 801bd50:	605a      	str	r2, [r3, #4]
}
 801bd52:	46c0      	nop			; (mov r8, r8)
 801bd54:	46bd      	mov	sp, r7
 801bd56:	b002      	add	sp, #8
 801bd58:	bd80      	pop	{r7, pc}
 801bd5a:	46c0      	nop			; (mov r8, r8)
 801bd5c:	20000f18 	.word	0x20000f18

0801bd60 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801bd60:	b580      	push	{r7, lr}
 801bd62:	b082      	sub	sp, #8
 801bd64:	af00      	add	r7, sp, #0
 801bd66:	0002      	movs	r2, r0
 801bd68:	1dfb      	adds	r3, r7, #7
 801bd6a:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801bd6c:	4b03      	ldr	r3, [pc, #12]	; (801bd7c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801bd6e:	1dfa      	adds	r2, r7, #7
 801bd70:	7812      	ldrb	r2, [r2, #0]
 801bd72:	721a      	strb	r2, [r3, #8]
}
 801bd74:	46c0      	nop			; (mov r8, r8)
 801bd76:	46bd      	mov	sp, r7
 801bd78:	b002      	add	sp, #8
 801bd7a:	bd80      	pop	{r7, pc}
 801bd7c:	20000f18 	.word	0x20000f18

0801bd80 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801bd80:	b590      	push	{r4, r7, lr}
 801bd82:	b089      	sub	sp, #36	; 0x24
 801bd84:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801bd86:	231f      	movs	r3, #31
 801bd88:	18fb      	adds	r3, r7, r3
 801bd8a:	2200      	movs	r2, #0
 801bd8c:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801bd8e:	2300      	movs	r3, #0
 801bd90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd92:	f3ef 8310 	mrs	r3, PRIMASK
 801bd96:	613b      	str	r3, [r7, #16]
  return(result);
 801bd98:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801bd9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd9c:	b672      	cpsid	i
}
 801bd9e:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801bda0:	f000 f9d4 	bl	801c14c <TRACE_IsLocked>
 801bda4:	1e03      	subs	r3, r0, #0
 801bda6:	d160      	bne.n	801be6a <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801bda8:	f000 f998 	bl	801c0dc <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801bdac:	4b36      	ldr	r3, [pc, #216]	; (801be88 <TRACE_Send+0x108>)
 801bdae:	8a1a      	ldrh	r2, [r3, #16]
 801bdb0:	4b35      	ldr	r3, [pc, #212]	; (801be88 <TRACE_Send+0x108>)
 801bdb2:	8a5b      	ldrh	r3, [r3, #18]
 801bdb4:	429a      	cmp	r2, r3
 801bdb6:	d050      	beq.n	801be5a <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bdb8:	4b33      	ldr	r3, [pc, #204]	; (801be88 <TRACE_Send+0x108>)
 801bdba:	789b      	ldrb	r3, [r3, #2]
 801bdbc:	2b01      	cmp	r3, #1
 801bdbe:	d117      	bne.n	801bdf0 <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801bdc0:	4b31      	ldr	r3, [pc, #196]	; (801be88 <TRACE_Send+0x108>)
 801bdc2:	881a      	ldrh	r2, [r3, #0]
 801bdc4:	4b30      	ldr	r3, [pc, #192]	; (801be88 <TRACE_Send+0x108>)
 801bdc6:	8a1b      	ldrh	r3, [r3, #16]
 801bdc8:	1ad3      	subs	r3, r2, r3
 801bdca:	b29a      	uxth	r2, r3
 801bdcc:	4b2e      	ldr	r3, [pc, #184]	; (801be88 <TRACE_Send+0x108>)
 801bdce:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bdd0:	4b2d      	ldr	r3, [pc, #180]	; (801be88 <TRACE_Send+0x108>)
 801bdd2:	2202      	movs	r2, #2
 801bdd4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bdd6:	4b2c      	ldr	r3, [pc, #176]	; (801be88 <TRACE_Send+0x108>)
 801bdd8:	2200      	movs	r2, #0
 801bdda:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801bddc:	4b2a      	ldr	r3, [pc, #168]	; (801be88 <TRACE_Send+0x108>)
 801bdde:	8a9b      	ldrh	r3, [r3, #20]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d105      	bne.n	801bdf0 <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bde4:	4b28      	ldr	r3, [pc, #160]	; (801be88 <TRACE_Send+0x108>)
 801bde6:	2200      	movs	r2, #0
 801bde8:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bdea:	4b27      	ldr	r3, [pc, #156]	; (801be88 <TRACE_Send+0x108>)
 801bdec:	2200      	movs	r2, #0
 801bdee:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bdf0:	4b25      	ldr	r3, [pc, #148]	; (801be88 <TRACE_Send+0x108>)
 801bdf2:	789b      	ldrb	r3, [r3, #2]
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d116      	bne.n	801be26 <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bdf8:	4b23      	ldr	r3, [pc, #140]	; (801be88 <TRACE_Send+0x108>)
 801bdfa:	8a5a      	ldrh	r2, [r3, #18]
 801bdfc:	4b22      	ldr	r3, [pc, #136]	; (801be88 <TRACE_Send+0x108>)
 801bdfe:	8a1b      	ldrh	r3, [r3, #16]
 801be00:	429a      	cmp	r2, r3
 801be02:	d908      	bls.n	801be16 <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801be04:	4b20      	ldr	r3, [pc, #128]	; (801be88 <TRACE_Send+0x108>)
 801be06:	8a5a      	ldrh	r2, [r3, #18]
 801be08:	4b1f      	ldr	r3, [pc, #124]	; (801be88 <TRACE_Send+0x108>)
 801be0a:	8a1b      	ldrh	r3, [r3, #16]
 801be0c:	1ad3      	subs	r3, r2, r3
 801be0e:	b29a      	uxth	r2, r3
 801be10:	4b1d      	ldr	r3, [pc, #116]	; (801be88 <TRACE_Send+0x108>)
 801be12:	829a      	strh	r2, [r3, #20]
 801be14:	e007      	b.n	801be26 <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801be16:	4b1c      	ldr	r3, [pc, #112]	; (801be88 <TRACE_Send+0x108>)
 801be18:	8a1b      	ldrh	r3, [r3, #16]
 801be1a:	2280      	movs	r2, #128	; 0x80
 801be1c:	0092      	lsls	r2, r2, #2
 801be1e:	1ad3      	subs	r3, r2, r3
 801be20:	b29a      	uxth	r2, r3
 801be22:	4b19      	ldr	r3, [pc, #100]	; (801be88 <TRACE_Send+0x108>)
 801be24:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801be26:	4b18      	ldr	r3, [pc, #96]	; (801be88 <TRACE_Send+0x108>)
 801be28:	8a1b      	ldrh	r3, [r3, #16]
 801be2a:	001a      	movs	r2, r3
 801be2c:	4b17      	ldr	r3, [pc, #92]	; (801be8c <TRACE_Send+0x10c>)
 801be2e:	18d3      	adds	r3, r2, r3
 801be30:	61bb      	str	r3, [r7, #24]
 801be32:	697b      	ldr	r3, [r7, #20]
 801be34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	f383 8810 	msr	PRIMASK, r3
}
 801be3c:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801be3e:	f7e9 f905 	bl	800504c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801be42:	4b13      	ldr	r3, [pc, #76]	; (801be90 <TRACE_Send+0x110>)
 801be44:	68db      	ldr	r3, [r3, #12]
 801be46:	4a10      	ldr	r2, [pc, #64]	; (801be88 <TRACE_Send+0x108>)
 801be48:	8a91      	ldrh	r1, [r2, #20]
 801be4a:	221f      	movs	r2, #31
 801be4c:	18bc      	adds	r4, r7, r2
 801be4e:	69ba      	ldr	r2, [r7, #24]
 801be50:	0010      	movs	r0, r2
 801be52:	4798      	blx	r3
 801be54:	0003      	movs	r3, r0
 801be56:	7023      	strb	r3, [r4, #0]
 801be58:	e00d      	b.n	801be76 <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801be5a:	f000 f95b 	bl	801c114 <TRACE_UnLock>
 801be5e:	697b      	ldr	r3, [r7, #20]
 801be60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be62:	68bb      	ldr	r3, [r7, #8]
 801be64:	f383 8810 	msr	PRIMASK, r3
}
 801be68:	e005      	b.n	801be76 <TRACE_Send+0xf6>
 801be6a:	697b      	ldr	r3, [r7, #20]
 801be6c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	f383 8810 	msr	PRIMASK, r3
}
 801be74:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801be76:	231f      	movs	r3, #31
 801be78:	18fb      	adds	r3, r7, r3
 801be7a:	781b      	ldrb	r3, [r3, #0]
 801be7c:	b25b      	sxtb	r3, r3
}
 801be7e:	0018      	movs	r0, r3
 801be80:	46bd      	mov	sp, r7
 801be82:	b009      	add	sp, #36	; 0x24
 801be84:	bd90      	pop	{r4, r7, pc}
 801be86:	46c0      	nop			; (mov r8, r8)
 801be88:	20000f18 	.word	0x20000f18
 801be8c:	20000f30 	.word	0x20000f30
 801be90:	0801e48c 	.word	0x0801e48c

0801be94 <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801be94:	b580      	push	{r7, lr}
 801be96:	b086      	sub	sp, #24
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be9c:	f3ef 8310 	mrs	r3, PRIMASK
 801bea0:	613b      	str	r3, [r7, #16]
  return(result);
 801bea2:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bea6:	b672      	cpsid	i
}
 801bea8:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801beaa:	4b3c      	ldr	r3, [pc, #240]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801beac:	789b      	ldrb	r3, [r3, #2]
 801beae:	2b02      	cmp	r3, #2
 801beb0:	d106      	bne.n	801bec0 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801beb2:	4b3a      	ldr	r3, [pc, #232]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801beb4:	2200      	movs	r2, #0
 801beb6:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801beb8:	4b38      	ldr	r3, [pc, #224]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801beba:	2200      	movs	r2, #0
 801bebc:	821a      	strh	r2, [r3, #16]
 801bebe:	e00a      	b.n	801bed6 <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bec0:	4b36      	ldr	r3, [pc, #216]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bec2:	8a1a      	ldrh	r2, [r3, #16]
 801bec4:	4b35      	ldr	r3, [pc, #212]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bec6:	8a9b      	ldrh	r3, [r3, #20]
 801bec8:	18d3      	adds	r3, r2, r3
 801beca:	b29b      	uxth	r3, r3
 801becc:	05db      	lsls	r3, r3, #23
 801bece:	0ddb      	lsrs	r3, r3, #23
 801bed0:	b29a      	uxth	r2, r3
 801bed2:	4b32      	ldr	r3, [pc, #200]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bed4:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801bed6:	4b31      	ldr	r3, [pc, #196]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bed8:	8a1a      	ldrh	r2, [r3, #16]
 801beda:	4b30      	ldr	r3, [pc, #192]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bedc:	8a5b      	ldrh	r3, [r3, #18]
 801bede:	429a      	cmp	r2, r3
 801bee0:	d04c      	beq.n	801bf7c <TRACE_TxCpltCallback+0xe8>
 801bee2:	4b2e      	ldr	r3, [pc, #184]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bee4:	8adb      	ldrh	r3, [r3, #22]
 801bee6:	2b01      	cmp	r3, #1
 801bee8:	d148      	bne.n	801bf7c <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801beea:	4b2c      	ldr	r3, [pc, #176]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801beec:	789b      	ldrb	r3, [r3, #2]
 801beee:	2b01      	cmp	r3, #1
 801bef0:	d117      	bne.n	801bf22 <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801bef2:	4b2a      	ldr	r3, [pc, #168]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bef4:	881a      	ldrh	r2, [r3, #0]
 801bef6:	4b29      	ldr	r3, [pc, #164]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bef8:	8a1b      	ldrh	r3, [r3, #16]
 801befa:	1ad3      	subs	r3, r2, r3
 801befc:	b29a      	uxth	r2, r3
 801befe:	4b27      	ldr	r3, [pc, #156]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf00:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bf02:	4b26      	ldr	r3, [pc, #152]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf04:	2202      	movs	r2, #2
 801bf06:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bf08:	4b24      	ldr	r3, [pc, #144]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801bf0e:	4b23      	ldr	r3, [pc, #140]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf10:	8a9b      	ldrh	r3, [r3, #20]
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d105      	bne.n	801bf22 <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bf16:	4b21      	ldr	r3, [pc, #132]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf18:	2200      	movs	r2, #0
 801bf1a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bf1c:	4b1f      	ldr	r3, [pc, #124]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf1e:	2200      	movs	r2, #0
 801bf20:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bf22:	4b1e      	ldr	r3, [pc, #120]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf24:	789b      	ldrb	r3, [r3, #2]
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d116      	bne.n	801bf58 <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bf2a:	4b1c      	ldr	r3, [pc, #112]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf2c:	8a5a      	ldrh	r2, [r3, #18]
 801bf2e:	4b1b      	ldr	r3, [pc, #108]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf30:	8a1b      	ldrh	r3, [r3, #16]
 801bf32:	429a      	cmp	r2, r3
 801bf34:	d908      	bls.n	801bf48 <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bf36:	4b19      	ldr	r3, [pc, #100]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf38:	8a5a      	ldrh	r2, [r3, #18]
 801bf3a:	4b18      	ldr	r3, [pc, #96]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf3c:	8a1b      	ldrh	r3, [r3, #16]
 801bf3e:	1ad3      	subs	r3, r2, r3
 801bf40:	b29a      	uxth	r2, r3
 801bf42:	4b16      	ldr	r3, [pc, #88]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf44:	829a      	strh	r2, [r3, #20]
 801bf46:	e007      	b.n	801bf58 <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bf48:	4b14      	ldr	r3, [pc, #80]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf4a:	8a1b      	ldrh	r3, [r3, #16]
 801bf4c:	2280      	movs	r2, #128	; 0x80
 801bf4e:	0092      	lsls	r2, r2, #2
 801bf50:	1ad3      	subs	r3, r2, r3
 801bf52:	b29a      	uxth	r2, r3
 801bf54:	4b11      	ldr	r3, [pc, #68]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf56:	829a      	strh	r2, [r3, #20]
 801bf58:	697b      	ldr	r3, [r7, #20]
 801bf5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf5c:	68fb      	ldr	r3, [r7, #12]
 801bf5e:	f383 8810 	msr	PRIMASK, r3
}
 801bf62:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801bf64:	4b0e      	ldr	r3, [pc, #56]	; (801bfa0 <TRACE_TxCpltCallback+0x10c>)
 801bf66:	68db      	ldr	r3, [r3, #12]
 801bf68:	4a0c      	ldr	r2, [pc, #48]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf6a:	8a12      	ldrh	r2, [r2, #16]
 801bf6c:	0011      	movs	r1, r2
 801bf6e:	4a0d      	ldr	r2, [pc, #52]	; (801bfa4 <TRACE_TxCpltCallback+0x110>)
 801bf70:	1888      	adds	r0, r1, r2
 801bf72:	4a0a      	ldr	r2, [pc, #40]	; (801bf9c <TRACE_TxCpltCallback+0x108>)
 801bf74:	8a92      	ldrh	r2, [r2, #20]
 801bf76:	0011      	movs	r1, r2
 801bf78:	4798      	blx	r3
 801bf7a:	e00a      	b.n	801bf92 <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801bf7c:	f7e9 f86f 	bl	800505e <UTIL_ADV_TRACE_PostSendHook>
 801bf80:	697b      	ldr	r3, [r7, #20]
 801bf82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf84:	68bb      	ldr	r3, [r7, #8]
 801bf86:	f383 8810 	msr	PRIMASK, r3
}
 801bf8a:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801bf8c:	f000 f8c2 	bl	801c114 <TRACE_UnLock>
  }
}
 801bf90:	46c0      	nop			; (mov r8, r8)
 801bf92:	46c0      	nop			; (mov r8, r8)
 801bf94:	46bd      	mov	sp, r7
 801bf96:	b006      	add	sp, #24
 801bf98:	bd80      	pop	{r7, pc}
 801bf9a:	46c0      	nop			; (mov r8, r8)
 801bf9c:	20000f18 	.word	0x20000f18
 801bfa0:	0801e48c 	.word	0x0801e48c
 801bfa4:	20000f30 	.word	0x20000f30

0801bfa8 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b086      	sub	sp, #24
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	0002      	movs	r2, r0
 801bfb0:	6039      	str	r1, [r7, #0]
 801bfb2:	1dbb      	adds	r3, r7, #6
 801bfb4:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801bfb6:	2314      	movs	r3, #20
 801bfb8:	18fb      	adds	r3, r7, r3
 801bfba:	2201      	movs	r2, #1
 801bfbc:	4252      	negs	r2, r2
 801bfbe:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bfc0:	f3ef 8310 	mrs	r3, PRIMASK
 801bfc4:	60fb      	str	r3, [r7, #12]
  return(result);
 801bfc6:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bfc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bfca:	b672      	cpsid	i
}
 801bfcc:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bfce:	4b42      	ldr	r3, [pc, #264]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801bfd0:	8a5a      	ldrh	r2, [r3, #18]
 801bfd2:	4b41      	ldr	r3, [pc, #260]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801bfd4:	8a1b      	ldrh	r3, [r3, #16]
 801bfd6:	429a      	cmp	r2, r3
 801bfd8:	d123      	bne.n	801c022 <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bfda:	4b3f      	ldr	r3, [pc, #252]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801bfdc:	8a5a      	ldrh	r2, [r3, #18]
 801bfde:	2016      	movs	r0, #22
 801bfe0:	183b      	adds	r3, r7, r0
 801bfe2:	2180      	movs	r1, #128	; 0x80
 801bfe4:	0089      	lsls	r1, r1, #2
 801bfe6:	1a8a      	subs	r2, r1, r2
 801bfe8:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bfea:	1dba      	adds	r2, r7, #6
 801bfec:	0001      	movs	r1, r0
 801bfee:	187b      	adds	r3, r7, r1
 801bff0:	8812      	ldrh	r2, [r2, #0]
 801bff2:	881b      	ldrh	r3, [r3, #0]
 801bff4:	429a      	cmp	r2, r3
 801bff6:	d346      	bcc.n	801c086 <TRACE_AllocateBufer+0xde>
 801bff8:	4b37      	ldr	r3, [pc, #220]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801bffa:	8a1b      	ldrh	r3, [r3, #16]
 801bffc:	1dba      	adds	r2, r7, #6
 801bffe:	8812      	ldrh	r2, [r2, #0]
 801c000:	429a      	cmp	r2, r3
 801c002:	d240      	bcs.n	801c086 <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c004:	4b34      	ldr	r3, [pc, #208]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c006:	2201      	movs	r2, #1
 801c008:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c00a:	4b33      	ldr	r3, [pc, #204]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c00c:	8a5a      	ldrh	r2, [r3, #18]
 801c00e:	4b32      	ldr	r3, [pc, #200]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c010:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c012:	187b      	adds	r3, r7, r1
 801c014:	4a30      	ldr	r2, [pc, #192]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c016:	8a12      	ldrh	r2, [r2, #16]
 801c018:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c01a:	4b2f      	ldr	r3, [pc, #188]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c01c:	2200      	movs	r2, #0
 801c01e:	825a      	strh	r2, [r3, #18]
 801c020:	e031      	b.n	801c086 <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c022:	4b2d      	ldr	r3, [pc, #180]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c024:	8a5a      	ldrh	r2, [r3, #18]
 801c026:	4b2c      	ldr	r3, [pc, #176]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c028:	8a1b      	ldrh	r3, [r3, #16]
 801c02a:	429a      	cmp	r2, r3
 801c02c:	d923      	bls.n	801c076 <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c02e:	4b2a      	ldr	r3, [pc, #168]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c030:	8a5a      	ldrh	r2, [r3, #18]
 801c032:	2016      	movs	r0, #22
 801c034:	183b      	adds	r3, r7, r0
 801c036:	2180      	movs	r1, #128	; 0x80
 801c038:	0089      	lsls	r1, r1, #2
 801c03a:	1a8a      	subs	r2, r1, r2
 801c03c:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c03e:	1dba      	adds	r2, r7, #6
 801c040:	0001      	movs	r1, r0
 801c042:	187b      	adds	r3, r7, r1
 801c044:	8812      	ldrh	r2, [r2, #0]
 801c046:	881b      	ldrh	r3, [r3, #0]
 801c048:	429a      	cmp	r2, r3
 801c04a:	d31c      	bcc.n	801c086 <TRACE_AllocateBufer+0xde>
 801c04c:	4b22      	ldr	r3, [pc, #136]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c04e:	8a1b      	ldrh	r3, [r3, #16]
 801c050:	1dba      	adds	r2, r7, #6
 801c052:	8812      	ldrh	r2, [r2, #0]
 801c054:	429a      	cmp	r2, r3
 801c056:	d216      	bcs.n	801c086 <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c058:	4b1f      	ldr	r3, [pc, #124]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c05a:	2201      	movs	r2, #1
 801c05c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c05e:	4b1e      	ldr	r3, [pc, #120]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c060:	8a5a      	ldrh	r2, [r3, #18]
 801c062:	4b1d      	ldr	r3, [pc, #116]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c064:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c066:	187b      	adds	r3, r7, r1
 801c068:	4a1b      	ldr	r2, [pc, #108]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c06a:	8a12      	ldrh	r2, [r2, #16]
 801c06c:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c06e:	4b1a      	ldr	r3, [pc, #104]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c070:	2200      	movs	r2, #0
 801c072:	825a      	strh	r2, [r3, #18]
 801c074:	e007      	b.n	801c086 <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c076:	4b18      	ldr	r3, [pc, #96]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c078:	8a19      	ldrh	r1, [r3, #16]
 801c07a:	4b17      	ldr	r3, [pc, #92]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c07c:	8a5a      	ldrh	r2, [r3, #18]
 801c07e:	2316      	movs	r3, #22
 801c080:	18fb      	adds	r3, r7, r3
 801c082:	1a8a      	subs	r2, r1, r2
 801c084:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801c086:	2316      	movs	r3, #22
 801c088:	18fa      	adds	r2, r7, r3
 801c08a:	1dbb      	adds	r3, r7, #6
 801c08c:	8812      	ldrh	r2, [r2, #0]
 801c08e:	881b      	ldrh	r3, [r3, #0]
 801c090:	429a      	cmp	r2, r3
 801c092:	d912      	bls.n	801c0ba <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c094:	4b10      	ldr	r3, [pc, #64]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c096:	8a5a      	ldrh	r2, [r3, #18]
 801c098:	683b      	ldr	r3, [r7, #0]
 801c09a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c09c:	4b0e      	ldr	r3, [pc, #56]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c09e:	8a5a      	ldrh	r2, [r3, #18]
 801c0a0:	1dbb      	adds	r3, r7, #6
 801c0a2:	881b      	ldrh	r3, [r3, #0]
 801c0a4:	18d3      	adds	r3, r2, r3
 801c0a6:	b29b      	uxth	r3, r3
 801c0a8:	05db      	lsls	r3, r3, #23
 801c0aa:	0ddb      	lsrs	r3, r3, #23
 801c0ac:	b29a      	uxth	r2, r3
 801c0ae:	4b0a      	ldr	r3, [pc, #40]	; (801c0d8 <TRACE_AllocateBufer+0x130>)
 801c0b0:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c0b2:	2314      	movs	r3, #20
 801c0b4:	18fb      	adds	r3, r7, r3
 801c0b6:	2200      	movs	r2, #0
 801c0b8:	801a      	strh	r2, [r3, #0]
 801c0ba:	693b      	ldr	r3, [r7, #16]
 801c0bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0be:	68bb      	ldr	r3, [r7, #8]
 801c0c0:	f383 8810 	msr	PRIMASK, r3
}
 801c0c4:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801c0c6:	2314      	movs	r3, #20
 801c0c8:	18fb      	adds	r3, r7, r3
 801c0ca:	2200      	movs	r2, #0
 801c0cc:	5e9b      	ldrsh	r3, [r3, r2]
}
 801c0ce:	0018      	movs	r0, r3
 801c0d0:	46bd      	mov	sp, r7
 801c0d2:	b006      	add	sp, #24
 801c0d4:	bd80      	pop	{r7, pc}
 801c0d6:	46c0      	nop			; (mov r8, r8)
 801c0d8:	20000f18 	.word	0x20000f18

0801c0dc <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b084      	sub	sp, #16
 801c0e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0e2:	f3ef 8310 	mrs	r3, PRIMASK
 801c0e6:	607b      	str	r3, [r7, #4]
  return(result);
 801c0e8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c0ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0ec:	b672      	cpsid	i
}
 801c0ee:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801c0f0:	4b07      	ldr	r3, [pc, #28]	; (801c110 <TRACE_Lock+0x34>)
 801c0f2:	8adb      	ldrh	r3, [r3, #22]
 801c0f4:	3301      	adds	r3, #1
 801c0f6:	b29a      	uxth	r2, r3
 801c0f8:	4b05      	ldr	r3, [pc, #20]	; (801c110 <TRACE_Lock+0x34>)
 801c0fa:	82da      	strh	r2, [r3, #22]
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c100:	68bb      	ldr	r3, [r7, #8]
 801c102:	f383 8810 	msr	PRIMASK, r3
}
 801c106:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c108:	46c0      	nop			; (mov r8, r8)
 801c10a:	46bd      	mov	sp, r7
 801c10c:	b004      	add	sp, #16
 801c10e:	bd80      	pop	{r7, pc}
 801c110:	20000f18 	.word	0x20000f18

0801c114 <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801c114:	b580      	push	{r7, lr}
 801c116:	b084      	sub	sp, #16
 801c118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c11a:	f3ef 8310 	mrs	r3, PRIMASK
 801c11e:	607b      	str	r3, [r7, #4]
  return(result);
 801c120:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c122:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c124:	b672      	cpsid	i
}
 801c126:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801c128:	4b07      	ldr	r3, [pc, #28]	; (801c148 <TRACE_UnLock+0x34>)
 801c12a:	8adb      	ldrh	r3, [r3, #22]
 801c12c:	3b01      	subs	r3, #1
 801c12e:	b29a      	uxth	r2, r3
 801c130:	4b05      	ldr	r3, [pc, #20]	; (801c148 <TRACE_UnLock+0x34>)
 801c132:	82da      	strh	r2, [r3, #22]
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c138:	68bb      	ldr	r3, [r7, #8]
 801c13a:	f383 8810 	msr	PRIMASK, r3
}
 801c13e:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c140:	46c0      	nop			; (mov r8, r8)
 801c142:	46bd      	mov	sp, r7
 801c144:	b004      	add	sp, #16
 801c146:	bd80      	pop	{r7, pc}
 801c148:	20000f18 	.word	0x20000f18

0801c14c <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801c14c:	b580      	push	{r7, lr}
 801c14e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c150:	4b03      	ldr	r3, [pc, #12]	; (801c160 <TRACE_IsLocked+0x14>)
 801c152:	8adb      	ldrh	r3, [r3, #22]
 801c154:	1e5a      	subs	r2, r3, #1
 801c156:	4193      	sbcs	r3, r2
 801c158:	b2db      	uxtb	r3, r3
}
 801c15a:	0018      	movs	r0, r3
 801c15c:	46bd      	mov	sp, r7
 801c15e:	bd80      	pop	{r7, pc}
 801c160:	20000f18 	.word	0x20000f18

0801c164 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c164:	b580      	push	{r7, lr}
 801c166:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c168:	4b04      	ldr	r3, [pc, #16]	; (801c17c <UTIL_LPM_Init+0x18>)
 801c16a:	2200      	movs	r2, #0
 801c16c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c16e:	4b04      	ldr	r3, [pc, #16]	; (801c180 <UTIL_LPM_Init+0x1c>)
 801c170:	2200      	movs	r2, #0
 801c172:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c174:	46c0      	nop			; (mov r8, r8)
 801c176:	46bd      	mov	sp, r7
 801c178:	bd80      	pop	{r7, pc}
 801c17a:	46c0      	nop			; (mov r8, r8)
 801c17c:	20001230 	.word	0x20001230
 801c180:	20001234 	.word	0x20001234

0801c184 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b086      	sub	sp, #24
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6078      	str	r0, [r7, #4]
 801c18c:	000a      	movs	r2, r1
 801c18e:	1cfb      	adds	r3, r7, #3
 801c190:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c192:	f3ef 8310 	mrs	r3, PRIMASK
 801c196:	613b      	str	r3, [r7, #16]
  return(result);
 801c198:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c19a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c19c:	b672      	cpsid	i
}
 801c19e:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801c1a0:	1cfb      	adds	r3, r7, #3
 801c1a2:	781b      	ldrb	r3, [r3, #0]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d008      	beq.n	801c1ba <UTIL_LPM_SetStopMode+0x36>
 801c1a8:	2b01      	cmp	r3, #1
 801c1aa:	d10e      	bne.n	801c1ca <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c1ac:	4b0c      	ldr	r3, [pc, #48]	; (801c1e0 <UTIL_LPM_SetStopMode+0x5c>)
 801c1ae:	681a      	ldr	r2, [r3, #0]
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	431a      	orrs	r2, r3
 801c1b4:	4b0a      	ldr	r3, [pc, #40]	; (801c1e0 <UTIL_LPM_SetStopMode+0x5c>)
 801c1b6:	601a      	str	r2, [r3, #0]
      break;
 801c1b8:	e008      	b.n	801c1cc <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	43da      	mvns	r2, r3
 801c1be:	4b08      	ldr	r3, [pc, #32]	; (801c1e0 <UTIL_LPM_SetStopMode+0x5c>)
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	401a      	ands	r2, r3
 801c1c4:	4b06      	ldr	r3, [pc, #24]	; (801c1e0 <UTIL_LPM_SetStopMode+0x5c>)
 801c1c6:	601a      	str	r2, [r3, #0]
      break;
 801c1c8:	e000      	b.n	801c1cc <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801c1ca:	46c0      	nop			; (mov r8, r8)
 801c1cc:	697b      	ldr	r3, [r7, #20]
 801c1ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	f383 8810 	msr	PRIMASK, r3
}
 801c1d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c1d8:	46c0      	nop			; (mov r8, r8)
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	b006      	add	sp, #24
 801c1de:	bd80      	pop	{r7, pc}
 801c1e0:	20001230 	.word	0x20001230

0801c1e4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c1e4:	b580      	push	{r7, lr}
 801c1e6:	b086      	sub	sp, #24
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	6078      	str	r0, [r7, #4]
 801c1ec:	000a      	movs	r2, r1
 801c1ee:	1cfb      	adds	r3, r7, #3
 801c1f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1f2:	f3ef 8310 	mrs	r3, PRIMASK
 801c1f6:	613b      	str	r3, [r7, #16]
  return(result);
 801c1f8:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c1fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1fc:	b672      	cpsid	i
}
 801c1fe:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801c200:	1cfb      	adds	r3, r7, #3
 801c202:	781b      	ldrb	r3, [r3, #0]
 801c204:	2b00      	cmp	r3, #0
 801c206:	d008      	beq.n	801c21a <UTIL_LPM_SetOffMode+0x36>
 801c208:	2b01      	cmp	r3, #1
 801c20a:	d10e      	bne.n	801c22a <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c20c:	4b0c      	ldr	r3, [pc, #48]	; (801c240 <UTIL_LPM_SetOffMode+0x5c>)
 801c20e:	681a      	ldr	r2, [r3, #0]
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	431a      	orrs	r2, r3
 801c214:	4b0a      	ldr	r3, [pc, #40]	; (801c240 <UTIL_LPM_SetOffMode+0x5c>)
 801c216:	601a      	str	r2, [r3, #0]
      break;
 801c218:	e008      	b.n	801c22c <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	43da      	mvns	r2, r3
 801c21e:	4b08      	ldr	r3, [pc, #32]	; (801c240 <UTIL_LPM_SetOffMode+0x5c>)
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	401a      	ands	r2, r3
 801c224:	4b06      	ldr	r3, [pc, #24]	; (801c240 <UTIL_LPM_SetOffMode+0x5c>)
 801c226:	601a      	str	r2, [r3, #0]
      break;
 801c228:	e000      	b.n	801c22c <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801c22a:	46c0      	nop			; (mov r8, r8)
 801c22c:	697b      	ldr	r3, [r7, #20]
 801c22e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	f383 8810 	msr	PRIMASK, r3
}
 801c236:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c238:	46c0      	nop			; (mov r8, r8)
 801c23a:	46bd      	mov	sp, r7
 801c23c:	b006      	add	sp, #24
 801c23e:	bd80      	pop	{r7, pc}
 801c240:	20001234 	.word	0x20001234

0801c244 <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801c244:	b580      	push	{r7, lr}
 801c246:	b084      	sub	sp, #16
 801c248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c24a:	f3ef 8310 	mrs	r3, PRIMASK
 801c24e:	607b      	str	r3, [r7, #4]
  return(result);
 801c250:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c252:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801c254:	b672      	cpsid	i
}
 801c256:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c258:	4b11      	ldr	r3, [pc, #68]	; (801c2a0 <UTIL_LPM_GetMode+0x5c>)
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d004      	beq.n	801c26a <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801c260:	230f      	movs	r3, #15
 801c262:	18fb      	adds	r3, r7, r3
 801c264:	2200      	movs	r2, #0
 801c266:	701a      	strb	r2, [r3, #0]
 801c268:	e00c      	b.n	801c284 <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c26a:	4b0e      	ldr	r3, [pc, #56]	; (801c2a4 <UTIL_LPM_GetMode+0x60>)
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d004      	beq.n	801c27c <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801c272:	230f      	movs	r3, #15
 801c274:	18fb      	adds	r3, r7, r3
 801c276:	2201      	movs	r2, #1
 801c278:	701a      	strb	r2, [r3, #0]
 801c27a:	e003      	b.n	801c284 <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801c27c:	230f      	movs	r3, #15
 801c27e:	18fb      	adds	r3, r7, r3
 801c280:	2202      	movs	r2, #2
 801c282:	701a      	strb	r2, [r3, #0]
 801c284:	68bb      	ldr	r3, [r7, #8]
 801c286:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c288:	683b      	ldr	r3, [r7, #0]
 801c28a:	f383 8810 	msr	PRIMASK, r3
}
 801c28e:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801c290:	230f      	movs	r3, #15
 801c292:	18fb      	adds	r3, r7, r3
 801c294:	781b      	ldrb	r3, [r3, #0]
}
 801c296:	0018      	movs	r0, r3
 801c298:	46bd      	mov	sp, r7
 801c29a:	b004      	add	sp, #16
 801c29c:	bd80      	pop	{r7, pc}
 801c29e:	46c0      	nop			; (mov r8, r8)
 801c2a0:	20001230 	.word	0x20001230
 801c2a4:	20001234 	.word	0x20001234

0801c2a8 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801c2a8:	b580      	push	{r7, lr}
 801c2aa:	b084      	sub	sp, #16
 801c2ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2ae:	f3ef 8310 	mrs	r3, PRIMASK
 801c2b2:	60bb      	str	r3, [r7, #8]
  return(result);
 801c2b4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c2b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2b8:	b672      	cpsid	i
}
 801c2ba:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c2bc:	4b12      	ldr	r3, [pc, #72]	; (801c308 <UTIL_LPM_EnterLowPower+0x60>)
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d006      	beq.n	801c2d2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c2c4:	4b11      	ldr	r3, [pc, #68]	; (801c30c <UTIL_LPM_EnterLowPower+0x64>)
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c2ca:	4b10      	ldr	r3, [pc, #64]	; (801c30c <UTIL_LPM_EnterLowPower+0x64>)
 801c2cc:	685b      	ldr	r3, [r3, #4]
 801c2ce:	4798      	blx	r3
 801c2d0:	e010      	b.n	801c2f4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c2d2:	4b0f      	ldr	r3, [pc, #60]	; (801c310 <UTIL_LPM_EnterLowPower+0x68>)
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d006      	beq.n	801c2e8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c2da:	4b0c      	ldr	r3, [pc, #48]	; (801c30c <UTIL_LPM_EnterLowPower+0x64>)
 801c2dc:	689b      	ldr	r3, [r3, #8]
 801c2de:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c2e0:	4b0a      	ldr	r3, [pc, #40]	; (801c30c <UTIL_LPM_EnterLowPower+0x64>)
 801c2e2:	68db      	ldr	r3, [r3, #12]
 801c2e4:	4798      	blx	r3
 801c2e6:	e005      	b.n	801c2f4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c2e8:	4b08      	ldr	r3, [pc, #32]	; (801c30c <UTIL_LPM_EnterLowPower+0x64>)
 801c2ea:	691b      	ldr	r3, [r3, #16]
 801c2ec:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c2ee:	4b07      	ldr	r3, [pc, #28]	; (801c30c <UTIL_LPM_EnterLowPower+0x64>)
 801c2f0:	695b      	ldr	r3, [r3, #20]
 801c2f2:	4798      	blx	r3
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	f383 8810 	msr	PRIMASK, r3
}
 801c2fe:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c300:	46c0      	nop			; (mov r8, r8)
 801c302:	46bd      	mov	sp, r7
 801c304:	b004      	add	sp, #16
 801c306:	bd80      	pop	{r7, pc}
 801c308:	20001230 	.word	0x20001230
 801c30c:	0801e468 	.word	0x0801e468
 801c310:	20001234 	.word	0x20001234

0801c314 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c314:	b580      	push	{r7, lr}
 801c316:	b086      	sub	sp, #24
 801c318:	af00      	add	r7, sp, #0
 801c31a:	60f8      	str	r0, [r7, #12]
 801c31c:	60b9      	str	r1, [r7, #8]
 801c31e:	1dbb      	adds	r3, r7, #6
 801c320:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c326:	68bb      	ldr	r3, [r7, #8]
 801c328:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c32a:	e007      	b.n	801c33c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c32c:	693a      	ldr	r2, [r7, #16]
 801c32e:	1c53      	adds	r3, r2, #1
 801c330:	613b      	str	r3, [r7, #16]
 801c332:	697b      	ldr	r3, [r7, #20]
 801c334:	1c59      	adds	r1, r3, #1
 801c336:	6179      	str	r1, [r7, #20]
 801c338:	7812      	ldrb	r2, [r2, #0]
 801c33a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c33c:	1dbb      	adds	r3, r7, #6
 801c33e:	881b      	ldrh	r3, [r3, #0]
 801c340:	1dba      	adds	r2, r7, #6
 801c342:	1e59      	subs	r1, r3, #1
 801c344:	8011      	strh	r1, [r2, #0]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d1f0      	bne.n	801c32c <UTIL_MEM_cpy_8+0x18>
    }
}
 801c34a:	46c0      	nop			; (mov r8, r8)
 801c34c:	46c0      	nop			; (mov r8, r8)
 801c34e:	46bd      	mov	sp, r7
 801c350:	b006      	add	sp, #24
 801c352:	bd80      	pop	{r7, pc}

0801c354 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c354:	b580      	push	{r7, lr}
 801c356:	b084      	sub	sp, #16
 801c358:	af00      	add	r7, sp, #0
 801c35a:	6078      	str	r0, [r7, #4]
 801c35c:	0008      	movs	r0, r1
 801c35e:	0011      	movs	r1, r2
 801c360:	1cfb      	adds	r3, r7, #3
 801c362:	1c02      	adds	r2, r0, #0
 801c364:	701a      	strb	r2, [r3, #0]
 801c366:	003b      	movs	r3, r7
 801c368:	1c0a      	adds	r2, r1, #0
 801c36a:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c370:	e005      	b.n	801c37e <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	1c5a      	adds	r2, r3, #1
 801c376:	60fa      	str	r2, [r7, #12]
 801c378:	1cfa      	adds	r2, r7, #3
 801c37a:	7812      	ldrb	r2, [r2, #0]
 801c37c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c37e:	003b      	movs	r3, r7
 801c380:	881b      	ldrh	r3, [r3, #0]
 801c382:	003a      	movs	r2, r7
 801c384:	1e59      	subs	r1, r3, #1
 801c386:	8011      	strh	r1, [r2, #0]
 801c388:	2b00      	cmp	r3, #0
 801c38a:	d1f2      	bne.n	801c372 <UTIL_MEM_set_8+0x1e>
  }
}
 801c38c:	46c0      	nop			; (mov r8, r8)
 801c38e:	46c0      	nop			; (mov r8, r8)
 801c390:	46bd      	mov	sp, r7
 801c392:	b004      	add	sp, #16
 801c394:	bd80      	pop	{r7, pc}
	...

0801c398 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c398:	b580      	push	{r7, lr}
 801c39a:	b08c      	sub	sp, #48	; 0x30
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c3a0:	4b66      	ldr	r3, [pc, #408]	; (801c53c <UTIL_SEQ_Run+0x1a4>)
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c3a6:	4b65      	ldr	r3, [pc, #404]	; (801c53c <UTIL_SEQ_Run+0x1a4>)
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	687a      	ldr	r2, [r7, #4]
 801c3ac:	401a      	ands	r2, r3
 801c3ae:	4b63      	ldr	r3, [pc, #396]	; (801c53c <UTIL_SEQ_Run+0x1a4>)
 801c3b0:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c3b2:	e086      	b.n	801c4c2 <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c3b8:	e002      	b.n	801c3c0 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3bc:	3301      	adds	r3, #1
 801c3be:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c3c0:	4b5f      	ldr	r3, [pc, #380]	; (801c540 <UTIL_SEQ_Run+0x1a8>)
 801c3c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c3c4:	00d2      	lsls	r2, r2, #3
 801c3c6:	58d2      	ldr	r2, [r2, r3]
 801c3c8:	4b5e      	ldr	r3, [pc, #376]	; (801c544 <UTIL_SEQ_Run+0x1ac>)
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	401a      	ands	r2, r3
 801c3ce:	4b5b      	ldr	r3, [pc, #364]	; (801c53c <UTIL_SEQ_Run+0x1a4>)
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	4013      	ands	r3, r2
 801c3d4:	d0f1      	beq.n	801c3ba <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c3d6:	4b5a      	ldr	r3, [pc, #360]	; (801c540 <UTIL_SEQ_Run+0x1a8>)
 801c3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c3da:	00d2      	lsls	r2, r2, #3
 801c3dc:	58d2      	ldr	r2, [r2, r3]
 801c3de:	4b59      	ldr	r3, [pc, #356]	; (801c544 <UTIL_SEQ_Run+0x1ac>)
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	401a      	ands	r2, r3
 801c3e4:	4b55      	ldr	r3, [pc, #340]	; (801c53c <UTIL_SEQ_Run+0x1a4>)
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	4013      	ands	r3, r2
 801c3ea:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c3ec:	4a54      	ldr	r2, [pc, #336]	; (801c540 <UTIL_SEQ_Run+0x1a8>)
 801c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3f0:	00db      	lsls	r3, r3, #3
 801c3f2:	18d3      	adds	r3, r2, r3
 801c3f4:	3304      	adds	r3, #4
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3fa:	4013      	ands	r3, r2
 801c3fc:	d107      	bne.n	801c40e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c3fe:	4a50      	ldr	r2, [pc, #320]	; (801c540 <UTIL_SEQ_Run+0x1a8>)
 801c400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c402:	00db      	lsls	r3, r3, #3
 801c404:	18d3      	adds	r3, r2, r3
 801c406:	3304      	adds	r3, #4
 801c408:	2201      	movs	r2, #1
 801c40a:	4252      	negs	r2, r2
 801c40c:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c40e:	4a4c      	ldr	r2, [pc, #304]	; (801c540 <UTIL_SEQ_Run+0x1a8>)
 801c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c412:	00db      	lsls	r3, r3, #3
 801c414:	18d3      	adds	r3, r2, r3
 801c416:	3304      	adds	r3, #4
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c41c:	4013      	ands	r3, r2
 801c41e:	0018      	movs	r0, r3
 801c420:	f000 f8f6 	bl	801c610 <SEQ_BitPosition>
 801c424:	0003      	movs	r3, r0
 801c426:	001a      	movs	r2, r3
 801c428:	4b47      	ldr	r3, [pc, #284]	; (801c548 <UTIL_SEQ_Run+0x1b0>)
 801c42a:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c42c:	4a44      	ldr	r2, [pc, #272]	; (801c540 <UTIL_SEQ_Run+0x1a8>)
 801c42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c430:	00db      	lsls	r3, r3, #3
 801c432:	18d3      	adds	r3, r2, r3
 801c434:	3304      	adds	r3, #4
 801c436:	681a      	ldr	r2, [r3, #0]
 801c438:	4b43      	ldr	r3, [pc, #268]	; (801c548 <UTIL_SEQ_Run+0x1b0>)
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	2101      	movs	r1, #1
 801c43e:	4099      	lsls	r1, r3
 801c440:	000b      	movs	r3, r1
 801c442:	43db      	mvns	r3, r3
 801c444:	401a      	ands	r2, r3
 801c446:	493e      	ldr	r1, [pc, #248]	; (801c540 <UTIL_SEQ_Run+0x1a8>)
 801c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c44a:	00db      	lsls	r3, r3, #3
 801c44c:	18cb      	adds	r3, r1, r3
 801c44e:	3304      	adds	r3, #4
 801c450:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c452:	f3ef 8310 	mrs	r3, PRIMASK
 801c456:	61bb      	str	r3, [r7, #24]
  return(result);
 801c458:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c45a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c45c:	b672      	cpsid	i
}
 801c45e:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c460:	4b39      	ldr	r3, [pc, #228]	; (801c548 <UTIL_SEQ_Run+0x1b0>)
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	2201      	movs	r2, #1
 801c466:	409a      	lsls	r2, r3
 801c468:	0013      	movs	r3, r2
 801c46a:	43da      	mvns	r2, r3
 801c46c:	4b37      	ldr	r3, [pc, #220]	; (801c54c <UTIL_SEQ_Run+0x1b4>)
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	401a      	ands	r2, r3
 801c472:	4b36      	ldr	r3, [pc, #216]	; (801c54c <UTIL_SEQ_Run+0x1b4>)
 801c474:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c476:	2302      	movs	r3, #2
 801c478:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c47a:	e013      	b.n	801c4a4 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c47e:	1e5a      	subs	r2, r3, #1
 801c480:	4b2f      	ldr	r3, [pc, #188]	; (801c540 <UTIL_SEQ_Run+0x1a8>)
 801c482:	00d2      	lsls	r2, r2, #3
 801c484:	58d1      	ldr	r1, [r2, r3]
 801c486:	4b30      	ldr	r3, [pc, #192]	; (801c548 <UTIL_SEQ_Run+0x1b0>)
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	2201      	movs	r2, #1
 801c48c:	409a      	lsls	r2, r3
 801c48e:	0013      	movs	r3, r2
 801c490:	43db      	mvns	r3, r3
 801c492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c494:	3a01      	subs	r2, #1
 801c496:	4019      	ands	r1, r3
 801c498:	4b29      	ldr	r3, [pc, #164]	; (801c540 <UTIL_SEQ_Run+0x1a8>)
 801c49a:	00d2      	lsls	r2, r2, #3
 801c49c:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4a0:	3b01      	subs	r3, #1
 801c4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d1e8      	bne.n	801c47c <UTIL_SEQ_Run+0xe4>
 801c4aa:	6a3b      	ldr	r3, [r7, #32]
 801c4ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4ae:	697b      	ldr	r3, [r7, #20]
 801c4b0:	f383 8810 	msr	PRIMASK, r3
}
 801c4b4:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c4b6:	4b24      	ldr	r3, [pc, #144]	; (801c548 <UTIL_SEQ_Run+0x1b0>)
 801c4b8:	681a      	ldr	r2, [r3, #0]
 801c4ba:	4b25      	ldr	r3, [pc, #148]	; (801c550 <UTIL_SEQ_Run+0x1b8>)
 801c4bc:	0092      	lsls	r2, r2, #2
 801c4be:	58d3      	ldr	r3, [r2, r3]
 801c4c0:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c4c2:	4b22      	ldr	r3, [pc, #136]	; (801c54c <UTIL_SEQ_Run+0x1b4>)
 801c4c4:	681a      	ldr	r2, [r3, #0]
 801c4c6:	4b1f      	ldr	r3, [pc, #124]	; (801c544 <UTIL_SEQ_Run+0x1ac>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	401a      	ands	r2, r3
 801c4cc:	4b1b      	ldr	r3, [pc, #108]	; (801c53c <UTIL_SEQ_Run+0x1a4>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	4013      	ands	r3, r2
 801c4d2:	d006      	beq.n	801c4e2 <UTIL_SEQ_Run+0x14a>
 801c4d4:	4b1f      	ldr	r3, [pc, #124]	; (801c554 <UTIL_SEQ_Run+0x1bc>)
 801c4d6:	681a      	ldr	r2, [r3, #0]
 801c4d8:	4b1f      	ldr	r3, [pc, #124]	; (801c558 <UTIL_SEQ_Run+0x1c0>)
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	4013      	ands	r3, r2
 801c4de:	d100      	bne.n	801c4e2 <UTIL_SEQ_Run+0x14a>
 801c4e0:	e768      	b.n	801c3b4 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c4e2:	4b19      	ldr	r3, [pc, #100]	; (801c548 <UTIL_SEQ_Run+0x1b0>)
 801c4e4:	2201      	movs	r2, #1
 801c4e6:	4252      	negs	r2, r2
 801c4e8:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c4ea:	f000 f887 	bl	801c5fc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4ee:	f3ef 8310 	mrs	r3, PRIMASK
 801c4f2:	613b      	str	r3, [r7, #16]
  return(result);
 801c4f4:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c4f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4f8:	b672      	cpsid	i
}
 801c4fa:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c4fc:	4b13      	ldr	r3, [pc, #76]	; (801c54c <UTIL_SEQ_Run+0x1b4>)
 801c4fe:	681a      	ldr	r2, [r3, #0]
 801c500:	4b10      	ldr	r3, [pc, #64]	; (801c544 <UTIL_SEQ_Run+0x1ac>)
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	401a      	ands	r2, r3
 801c506:	4b0d      	ldr	r3, [pc, #52]	; (801c53c <UTIL_SEQ_Run+0x1a4>)
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	4013      	ands	r3, r2
 801c50c:	d107      	bne.n	801c51e <UTIL_SEQ_Run+0x186>
 801c50e:	4b11      	ldr	r3, [pc, #68]	; (801c554 <UTIL_SEQ_Run+0x1bc>)
 801c510:	681a      	ldr	r2, [r3, #0]
 801c512:	4b11      	ldr	r3, [pc, #68]	; (801c558 <UTIL_SEQ_Run+0x1c0>)
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	4013      	ands	r3, r2
 801c518:	d101      	bne.n	801c51e <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801c51a:	f7e8 fc3f 	bl	8004d9c <UTIL_SEQ_Idle>
 801c51e:	69fb      	ldr	r3, [r7, #28]
 801c520:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	f383 8810 	msr	PRIMASK, r3
}
 801c528:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c52a:	f000 f86c 	bl	801c606 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c52e:	4b03      	ldr	r3, [pc, #12]	; (801c53c <UTIL_SEQ_Run+0x1a4>)
 801c530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c532:	601a      	str	r2, [r3, #0]

  return;
 801c534:	46c0      	nop			; (mov r8, r8)
}
 801c536:	46bd      	mov	sp, r7
 801c538:	b00c      	add	sp, #48	; 0x30
 801c53a:	bd80      	pop	{r7, pc}
 801c53c:	200001cc 	.word	0x200001cc
 801c540:	200012c8 	.word	0x200012c8
 801c544:	200001c8 	.word	0x200001c8
 801c548:	20001244 	.word	0x20001244
 801c54c:	20001238 	.word	0x20001238
 801c550:	20001248 	.word	0x20001248
 801c554:	2000123c 	.word	0x2000123c
 801c558:	20001240 	.word	0x20001240

0801c55c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b088      	sub	sp, #32
 801c560:	af00      	add	r7, sp, #0
 801c562:	60f8      	str	r0, [r7, #12]
 801c564:	60b9      	str	r1, [r7, #8]
 801c566:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c568:	f3ef 8310 	mrs	r3, PRIMASK
 801c56c:	617b      	str	r3, [r7, #20]
  return(result);
 801c56e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c572:	b672      	cpsid	i
}
 801c574:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	0018      	movs	r0, r3
 801c57a:	f000 f849 	bl	801c610 <SEQ_BitPosition>
 801c57e:	0003      	movs	r3, r0
 801c580:	001a      	movs	r2, r3
 801c582:	4b07      	ldr	r3, [pc, #28]	; (801c5a0 <UTIL_SEQ_RegTask+0x44>)
 801c584:	0092      	lsls	r2, r2, #2
 801c586:	6879      	ldr	r1, [r7, #4]
 801c588:	50d1      	str	r1, [r2, r3]
 801c58a:	69fb      	ldr	r3, [r7, #28]
 801c58c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c58e:	69bb      	ldr	r3, [r7, #24]
 801c590:	f383 8810 	msr	PRIMASK, r3
}
 801c594:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c596:	46c0      	nop			; (mov r8, r8)
}
 801c598:	46bd      	mov	sp, r7
 801c59a:	b008      	add	sp, #32
 801c59c:	bd80      	pop	{r7, pc}
 801c59e:	46c0      	nop			; (mov r8, r8)
 801c5a0:	20001248 	.word	0x20001248

0801c5a4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b086      	sub	sp, #24
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	6078      	str	r0, [r7, #4]
 801c5ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5ae:	f3ef 8310 	mrs	r3, PRIMASK
 801c5b2:	60fb      	str	r3, [r7, #12]
  return(result);
 801c5b4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c5b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5b8:	b672      	cpsid	i
}
 801c5ba:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801c5bc:	4b0d      	ldr	r3, [pc, #52]	; (801c5f4 <UTIL_SEQ_SetTask+0x50>)
 801c5be:	681a      	ldr	r2, [r3, #0]
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	431a      	orrs	r2, r3
 801c5c4:	4b0b      	ldr	r3, [pc, #44]	; (801c5f4 <UTIL_SEQ_SetTask+0x50>)
 801c5c6:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c5c8:	4b0b      	ldr	r3, [pc, #44]	; (801c5f8 <UTIL_SEQ_SetTask+0x54>)
 801c5ca:	683a      	ldr	r2, [r7, #0]
 801c5cc:	00d2      	lsls	r2, r2, #3
 801c5ce:	58d2      	ldr	r2, [r2, r3]
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	431a      	orrs	r2, r3
 801c5d4:	0011      	movs	r1, r2
 801c5d6:	4b08      	ldr	r3, [pc, #32]	; (801c5f8 <UTIL_SEQ_SetTask+0x54>)
 801c5d8:	683a      	ldr	r2, [r7, #0]
 801c5da:	00d2      	lsls	r2, r2, #3
 801c5dc:	50d1      	str	r1, [r2, r3]
 801c5de:	697b      	ldr	r3, [r7, #20]
 801c5e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5e2:	693b      	ldr	r3, [r7, #16]
 801c5e4:	f383 8810 	msr	PRIMASK, r3
}
 801c5e8:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c5ea:	46c0      	nop			; (mov r8, r8)
}
 801c5ec:	46bd      	mov	sp, r7
 801c5ee:	b006      	add	sp, #24
 801c5f0:	bd80      	pop	{r7, pc}
 801c5f2:	46c0      	nop			; (mov r8, r8)
 801c5f4:	20001238 	.word	0x20001238
 801c5f8:	200012c8 	.word	0x200012c8

0801c5fc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c600:	46c0      	nop			; (mov r8, r8)
}
 801c602:	46bd      	mov	sp, r7
 801c604:	bd80      	pop	{r7, pc}

0801c606 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c606:	b580      	push	{r7, lr}
 801c608:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c60a:	46c0      	nop			; (mov r8, r8)
}
 801c60c:	46bd      	mov	sp, r7
 801c60e:	bd80      	pop	{r7, pc}

0801c610 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b084      	sub	sp, #16
 801c614:	af00      	add	r7, sp, #0
 801c616:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801c618:	210f      	movs	r1, #15
 801c61a:	187b      	adds	r3, r7, r1
 801c61c:	2200      	movs	r2, #0
 801c61e:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	0c1b      	lsrs	r3, r3, #16
 801c624:	041b      	lsls	r3, r3, #16
 801c626:	d105      	bne.n	801c634 <SEQ_BitPosition+0x24>
 801c628:	187b      	adds	r3, r7, r1
 801c62a:	2210      	movs	r2, #16
 801c62c:	701a      	strb	r2, [r3, #0]
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	041b      	lsls	r3, r3, #16
 801c632:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	0e1b      	lsrs	r3, r3, #24
 801c638:	061b      	lsls	r3, r3, #24
 801c63a:	d108      	bne.n	801c64e <SEQ_BitPosition+0x3e>
 801c63c:	220f      	movs	r2, #15
 801c63e:	18bb      	adds	r3, r7, r2
 801c640:	18ba      	adds	r2, r7, r2
 801c642:	7812      	ldrb	r2, [r2, #0]
 801c644:	3208      	adds	r2, #8
 801c646:	701a      	strb	r2, [r3, #0]
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	021b      	lsls	r3, r3, #8
 801c64c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	0f1b      	lsrs	r3, r3, #28
 801c652:	071b      	lsls	r3, r3, #28
 801c654:	d108      	bne.n	801c668 <SEQ_BitPosition+0x58>
 801c656:	220f      	movs	r2, #15
 801c658:	18bb      	adds	r3, r7, r2
 801c65a:	18ba      	adds	r2, r7, r2
 801c65c:	7812      	ldrb	r2, [r2, #0]
 801c65e:	3204      	adds	r2, #4
 801c660:	701a      	strb	r2, [r3, #0]
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	011b      	lsls	r3, r3, #4
 801c666:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	0f1b      	lsrs	r3, r3, #28
 801c66c:	4a08      	ldr	r2, [pc, #32]	; (801c690 <SEQ_BitPosition+0x80>)
 801c66e:	5cd1      	ldrb	r1, [r2, r3]
 801c670:	200f      	movs	r0, #15
 801c672:	183b      	adds	r3, r7, r0
 801c674:	183a      	adds	r2, r7, r0
 801c676:	7812      	ldrb	r2, [r2, #0]
 801c678:	188a      	adds	r2, r1, r2
 801c67a:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801c67c:	183b      	adds	r3, r7, r0
 801c67e:	781b      	ldrb	r3, [r3, #0]
 801c680:	221f      	movs	r2, #31
 801c682:	1ad3      	subs	r3, r2, r3
 801c684:	b2db      	uxtb	r3, r3
}
 801c686:	0018      	movs	r0, r3
 801c688:	46bd      	mov	sp, r7
 801c68a:	b004      	add	sp, #16
 801c68c:	bd80      	pop	{r7, pc}
 801c68e:	46c0      	nop			; (mov r8, r8)
 801c690:	0801f22c 	.word	0x0801f22c

0801c694 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c694:	b082      	sub	sp, #8
 801c696:	b580      	push	{r7, lr}
 801c698:	b086      	sub	sp, #24
 801c69a:	af00      	add	r7, sp, #0
 801c69c:	60f8      	str	r0, [r7, #12]
 801c69e:	1d38      	adds	r0, r7, #4
 801c6a0:	6001      	str	r1, [r0, #0]
 801c6a2:	6042      	str	r2, [r0, #4]
 801c6a4:	2204      	movs	r2, #4
 801c6a6:	2120      	movs	r1, #32
 801c6a8:	468c      	mov	ip, r1
 801c6aa:	44bc      	add	ip, r7
 801c6ac:	4462      	add	r2, ip
 801c6ae:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c6b0:	2110      	movs	r1, #16
 801c6b2:	187b      	adds	r3, r7, r1
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	601a      	str	r2, [r3, #0]
 801c6b8:	187b      	adds	r3, r7, r1
 801c6ba:	2200      	movs	r2, #0
 801c6bc:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801c6be:	1d3b      	adds	r3, r7, #4
 801c6c0:	681a      	ldr	r2, [r3, #0]
 801c6c2:	2304      	movs	r3, #4
 801c6c4:	2020      	movs	r0, #32
 801c6c6:	4684      	mov	ip, r0
 801c6c8:	44bc      	add	ip, r7
 801c6ca:	4463      	add	r3, ip
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	18d2      	adds	r2, r2, r3
 801c6d0:	187b      	adds	r3, r7, r1
 801c6d2:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c6d4:	1d3b      	adds	r3, r7, #4
 801c6d6:	2204      	movs	r2, #4
 801c6d8:	5e9b      	ldrsh	r3, [r3, r2]
 801c6da:	b29a      	uxth	r2, r3
 801c6dc:	2304      	movs	r3, #4
 801c6de:	2020      	movs	r0, #32
 801c6e0:	4684      	mov	ip, r0
 801c6e2:	44bc      	add	ip, r7
 801c6e4:	4463      	add	r3, ip
 801c6e6:	2004      	movs	r0, #4
 801c6e8:	5e1b      	ldrsh	r3, [r3, r0]
 801c6ea:	b29b      	uxth	r3, r3
 801c6ec:	18d3      	adds	r3, r2, r3
 801c6ee:	b29b      	uxth	r3, r3
 801c6f0:	b21a      	sxth	r2, r3
 801c6f2:	187b      	adds	r3, r7, r1
 801c6f4:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801c6f6:	187b      	adds	r3, r7, r1
 801c6f8:	2204      	movs	r2, #4
 801c6fa:	5e9a      	ldrsh	r2, [r3, r2]
 801c6fc:	23fa      	movs	r3, #250	; 0xfa
 801c6fe:	009b      	lsls	r3, r3, #2
 801c700:	429a      	cmp	r2, r3
 801c702:	db0f      	blt.n	801c724 <SysTimeAdd+0x90>
  {
    c.Seconds++;
 801c704:	187b      	adds	r3, r7, r1
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	1c5a      	adds	r2, r3, #1
 801c70a:	187b      	adds	r3, r7, r1
 801c70c:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801c70e:	187b      	adds	r3, r7, r1
 801c710:	2204      	movs	r2, #4
 801c712:	5e9b      	ldrsh	r3, [r3, r2]
 801c714:	b29b      	uxth	r3, r3
 801c716:	4a09      	ldr	r2, [pc, #36]	; (801c73c <SysTimeAdd+0xa8>)
 801c718:	4694      	mov	ip, r2
 801c71a:	4463      	add	r3, ip
 801c71c:	b29b      	uxth	r3, r3
 801c71e:	b21a      	sxth	r2, r3
 801c720:	187b      	adds	r3, r7, r1
 801c722:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	2210      	movs	r2, #16
 801c728:	18ba      	adds	r2, r7, r2
 801c72a:	ca03      	ldmia	r2!, {r0, r1}
 801c72c:	c303      	stmia	r3!, {r0, r1}
}
 801c72e:	68f8      	ldr	r0, [r7, #12]
 801c730:	46bd      	mov	sp, r7
 801c732:	b006      	add	sp, #24
 801c734:	bc80      	pop	{r7}
 801c736:	bc08      	pop	{r3}
 801c738:	b002      	add	sp, #8
 801c73a:	4718      	bx	r3
 801c73c:	fffffc18 	.word	0xfffffc18

0801c740 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c740:	b082      	sub	sp, #8
 801c742:	b580      	push	{r7, lr}
 801c744:	b086      	sub	sp, #24
 801c746:	af00      	add	r7, sp, #0
 801c748:	60f8      	str	r0, [r7, #12]
 801c74a:	1d38      	adds	r0, r7, #4
 801c74c:	6001      	str	r1, [r0, #0]
 801c74e:	6042      	str	r2, [r0, #4]
 801c750:	2204      	movs	r2, #4
 801c752:	2120      	movs	r1, #32
 801c754:	468c      	mov	ip, r1
 801c756:	44bc      	add	ip, r7
 801c758:	4462      	add	r2, ip
 801c75a:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c75c:	2110      	movs	r1, #16
 801c75e:	187b      	adds	r3, r7, r1
 801c760:	2200      	movs	r2, #0
 801c762:	601a      	str	r2, [r3, #0]
 801c764:	187b      	adds	r3, r7, r1
 801c766:	2200      	movs	r2, #0
 801c768:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801c76a:	1d3b      	adds	r3, r7, #4
 801c76c:	681a      	ldr	r2, [r3, #0]
 801c76e:	2304      	movs	r3, #4
 801c770:	2020      	movs	r0, #32
 801c772:	4684      	mov	ip, r0
 801c774:	44bc      	add	ip, r7
 801c776:	4463      	add	r3, ip
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	1ad2      	subs	r2, r2, r3
 801c77c:	187b      	adds	r3, r7, r1
 801c77e:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c780:	1d3b      	adds	r3, r7, #4
 801c782:	2204      	movs	r2, #4
 801c784:	5e9b      	ldrsh	r3, [r3, r2]
 801c786:	b29a      	uxth	r2, r3
 801c788:	2304      	movs	r3, #4
 801c78a:	2020      	movs	r0, #32
 801c78c:	4684      	mov	ip, r0
 801c78e:	44bc      	add	ip, r7
 801c790:	4463      	add	r3, ip
 801c792:	2004      	movs	r0, #4
 801c794:	5e1b      	ldrsh	r3, [r3, r0]
 801c796:	b29b      	uxth	r3, r3
 801c798:	1ad3      	subs	r3, r2, r3
 801c79a:	b29b      	uxth	r3, r3
 801c79c:	b21a      	sxth	r2, r3
 801c79e:	187b      	adds	r3, r7, r1
 801c7a0:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801c7a2:	187b      	adds	r3, r7, r1
 801c7a4:	2204      	movs	r2, #4
 801c7a6:	5e9b      	ldrsh	r3, [r3, r2]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	da10      	bge.n	801c7ce <SysTimeSub+0x8e>
  {
    c.Seconds--;
 801c7ac:	187b      	adds	r3, r7, r1
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	1e5a      	subs	r2, r3, #1
 801c7b2:	187b      	adds	r3, r7, r1
 801c7b4:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801c7b6:	187b      	adds	r3, r7, r1
 801c7b8:	2204      	movs	r2, #4
 801c7ba:	5e9b      	ldrsh	r3, [r3, r2]
 801c7bc:	b29b      	uxth	r3, r3
 801c7be:	22fa      	movs	r2, #250	; 0xfa
 801c7c0:	0092      	lsls	r2, r2, #2
 801c7c2:	4694      	mov	ip, r2
 801c7c4:	4463      	add	r3, ip
 801c7c6:	b29b      	uxth	r3, r3
 801c7c8:	b21a      	sxth	r2, r3
 801c7ca:	187b      	adds	r3, r7, r1
 801c7cc:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	2210      	movs	r2, #16
 801c7d2:	18ba      	adds	r2, r7, r2
 801c7d4:	ca03      	ldmia	r2!, {r0, r1}
 801c7d6:	c303      	stmia	r3!, {r0, r1}
}
 801c7d8:	68f8      	ldr	r0, [r7, #12]
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	b006      	add	sp, #24
 801c7de:	bc80      	pop	{r7}
 801c7e0:	bc08      	pop	{r3}
 801c7e2:	b002      	add	sp, #8
 801c7e4:	4718      	bx	r3
	...

0801c7e8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c7e8:	b5b0      	push	{r4, r5, r7, lr}
 801c7ea:	b088      	sub	sp, #32
 801c7ec:	af02      	add	r7, sp, #8
 801c7ee:	003b      	movs	r3, r7
 801c7f0:	6018      	str	r0, [r3, #0]
 801c7f2:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c7f4:	2108      	movs	r1, #8
 801c7f6:	187b      	adds	r3, r7, r1
 801c7f8:	2200      	movs	r2, #0
 801c7fa:	601a      	str	r2, [r3, #0]
 801c7fc:	187b      	adds	r3, r7, r1
 801c7fe:	2200      	movs	r2, #0
 801c800:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c802:	4b14      	ldr	r3, [pc, #80]	; (801c854 <SysTimeSet+0x6c>)
 801c804:	691b      	ldr	r3, [r3, #16]
 801c806:	000c      	movs	r4, r1
 801c808:	187a      	adds	r2, r7, r1
 801c80a:	3204      	adds	r2, #4
 801c80c:	0010      	movs	r0, r2
 801c80e:	4798      	blx	r3
 801c810:	0002      	movs	r2, r0
 801c812:	0021      	movs	r1, r4
 801c814:	187b      	adds	r3, r7, r1
 801c816:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c818:	2510      	movs	r5, #16
 801c81a:	197c      	adds	r4, r7, r5
 801c81c:	187b      	adds	r3, r7, r1
 801c81e:	003a      	movs	r2, r7
 801c820:	4669      	mov	r1, sp
 801c822:	6858      	ldr	r0, [r3, #4]
 801c824:	6008      	str	r0, [r1, #0]
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	6811      	ldr	r1, [r2, #0]
 801c82a:	6852      	ldr	r2, [r2, #4]
 801c82c:	0020      	movs	r0, r4
 801c82e:	f7ff ff87 	bl	801c740 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c832:	4b08      	ldr	r3, [pc, #32]	; (801c854 <SysTimeSet+0x6c>)
 801c834:	681a      	ldr	r2, [r3, #0]
 801c836:	197b      	adds	r3, r7, r5
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	0018      	movs	r0, r3
 801c83c:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c83e:	4b05      	ldr	r3, [pc, #20]	; (801c854 <SysTimeSet+0x6c>)
 801c840:	689b      	ldr	r3, [r3, #8]
 801c842:	197a      	adds	r2, r7, r5
 801c844:	2104      	movs	r1, #4
 801c846:	5e52      	ldrsh	r2, [r2, r1]
 801c848:	0010      	movs	r0, r2
 801c84a:	4798      	blx	r3
}
 801c84c:	46c0      	nop			; (mov r8, r8)
 801c84e:	46bd      	mov	sp, r7
 801c850:	b006      	add	sp, #24
 801c852:	bdb0      	pop	{r4, r5, r7, pc}
 801c854:	0801e454 	.word	0x0801e454

0801c858 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c85a:	b08b      	sub	sp, #44	; 0x2c
 801c85c:	af02      	add	r7, sp, #8
 801c85e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c860:	2518      	movs	r5, #24
 801c862:	197b      	adds	r3, r7, r5
 801c864:	2200      	movs	r2, #0
 801c866:	601a      	str	r2, [r3, #0]
 801c868:	197b      	adds	r3, r7, r5
 801c86a:	2200      	movs	r2, #0
 801c86c:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c86e:	2410      	movs	r4, #16
 801c870:	193b      	adds	r3, r7, r4
 801c872:	2200      	movs	r2, #0
 801c874:	601a      	str	r2, [r3, #0]
 801c876:	193b      	adds	r3, r7, r4
 801c878:	2200      	movs	r2, #0
 801c87a:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c87c:	4b16      	ldr	r3, [pc, #88]	; (801c8d8 <SysTimeGet+0x80>)
 801c87e:	691b      	ldr	r3, [r3, #16]
 801c880:	197a      	adds	r2, r7, r5
 801c882:	3204      	adds	r2, #4
 801c884:	0010      	movs	r0, r2
 801c886:	4798      	blx	r3
 801c888:	0002      	movs	r2, r0
 801c88a:	197b      	adds	r3, r7, r5
 801c88c:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c88e:	4b12      	ldr	r3, [pc, #72]	; (801c8d8 <SysTimeGet+0x80>)
 801c890:	68db      	ldr	r3, [r3, #12]
 801c892:	4798      	blx	r3
 801c894:	0003      	movs	r3, r0
 801c896:	b21a      	sxth	r2, r3
 801c898:	2608      	movs	r6, #8
 801c89a:	19bb      	adds	r3, r7, r6
 801c89c:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c89e:	4b0e      	ldr	r3, [pc, #56]	; (801c8d8 <SysTimeGet+0x80>)
 801c8a0:	685b      	ldr	r3, [r3, #4]
 801c8a2:	4798      	blx	r3
 801c8a4:	0002      	movs	r2, r0
 801c8a6:	0031      	movs	r1, r6
 801c8a8:	187b      	adds	r3, r7, r1
 801c8aa:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c8ac:	0026      	movs	r6, r4
 801c8ae:	193c      	adds	r4, r7, r4
 801c8b0:	197b      	adds	r3, r7, r5
 801c8b2:	187a      	adds	r2, r7, r1
 801c8b4:	4669      	mov	r1, sp
 801c8b6:	6858      	ldr	r0, [r3, #4]
 801c8b8:	6008      	str	r0, [r1, #0]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	6811      	ldr	r1, [r2, #0]
 801c8be:	6852      	ldr	r2, [r2, #4]
 801c8c0:	0020      	movs	r0, r4
 801c8c2:	f7ff fee7 	bl	801c694 <SysTimeAdd>

  return sysTime;
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	19ba      	adds	r2, r7, r6
 801c8ca:	ca03      	ldmia	r2!, {r0, r1}
 801c8cc:	c303      	stmia	r3!, {r0, r1}
}
 801c8ce:	6878      	ldr	r0, [r7, #4]
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	b009      	add	sp, #36	; 0x24
 801c8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8d6:	46c0      	nop			; (mov r8, r8)
 801c8d8:	0801e454 	.word	0x0801e454

0801c8dc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c8dc:	b590      	push	{r4, r7, lr}
 801c8de:	b085      	sub	sp, #20
 801c8e0:	af00      	add	r7, sp, #0
 801c8e2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c8e4:	2108      	movs	r1, #8
 801c8e6:	187b      	adds	r3, r7, r1
 801c8e8:	2200      	movs	r2, #0
 801c8ea:	601a      	str	r2, [r3, #0]
 801c8ec:	187b      	adds	r3, r7, r1
 801c8ee:	2200      	movs	r2, #0
 801c8f0:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c8f2:	4b09      	ldr	r3, [pc, #36]	; (801c918 <SysTimeGetMcuTime+0x3c>)
 801c8f4:	691b      	ldr	r3, [r3, #16]
 801c8f6:	000c      	movs	r4, r1
 801c8f8:	187a      	adds	r2, r7, r1
 801c8fa:	3204      	adds	r2, #4
 801c8fc:	0010      	movs	r0, r2
 801c8fe:	4798      	blx	r3
 801c900:	0002      	movs	r2, r0
 801c902:	193b      	adds	r3, r7, r4
 801c904:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	193a      	adds	r2, r7, r4
 801c90a:	ca03      	ldmia	r2!, {r0, r1}
 801c90c:	c303      	stmia	r3!, {r0, r1}
}
 801c90e:	6878      	ldr	r0, [r7, #4]
 801c910:	46bd      	mov	sp, r7
 801c912:	b005      	add	sp, #20
 801c914:	bd90      	pop	{r4, r7, pc}
 801c916:	46c0      	nop			; (mov r8, r8)
 801c918:	0801e454 	.word	0x0801e454

0801c91c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c91c:	b580      	push	{r7, lr}
 801c91e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c920:	4b04      	ldr	r3, [pc, #16]	; (801c934 <UTIL_TIMER_Init+0x18>)
 801c922:	2200      	movs	r2, #0
 801c924:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c926:	4b04      	ldr	r3, [pc, #16]	; (801c938 <UTIL_TIMER_Init+0x1c>)
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	4798      	blx	r3
 801c92c:	0003      	movs	r3, r0
}
 801c92e:	0018      	movs	r0, r3
 801c930:	46bd      	mov	sp, r7
 801c932:	bd80      	pop	{r7, pc}
 801c934:	200012d8 	.word	0x200012d8
 801c938:	0801e428 	.word	0x0801e428

0801c93c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c93c:	b580      	push	{r7, lr}
 801c93e:	b084      	sub	sp, #16
 801c940:	af00      	add	r7, sp, #0
 801c942:	60f8      	str	r0, [r7, #12]
 801c944:	60b9      	str	r1, [r7, #8]
 801c946:	603b      	str	r3, [r7, #0]
 801c948:	1dfb      	adds	r3, r7, #7
 801c94a:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d025      	beq.n	801c99e <UTIL_TIMER_Create+0x62>
 801c952:	683b      	ldr	r3, [r7, #0]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d022      	beq.n	801c99e <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	2200      	movs	r2, #0
 801c95c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c95e:	4b12      	ldr	r3, [pc, #72]	; (801c9a8 <UTIL_TIMER_Create+0x6c>)
 801c960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c962:	68ba      	ldr	r2, [r7, #8]
 801c964:	0010      	movs	r0, r2
 801c966:	4798      	blx	r3
 801c968:	0002      	movs	r2, r0
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	2200      	movs	r2, #0
 801c972:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	2200      	movs	r2, #0
 801c978:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	2200      	movs	r2, #0
 801c97e:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	683a      	ldr	r2, [r7, #0]
 801c984:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	69ba      	ldr	r2, [r7, #24]
 801c98a:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	1dfa      	adds	r2, r7, #7
 801c990:	7812      	ldrb	r2, [r2, #0]
 801c992:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	2200      	movs	r2, #0
 801c998:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c99a:	2300      	movs	r3, #0
 801c99c:	e000      	b.n	801c9a0 <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c99e:	2301      	movs	r3, #1
  }
}
 801c9a0:	0018      	movs	r0, r3
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	b004      	add	sp, #16
 801c9a6:	bd80      	pop	{r7, pc}
 801c9a8:	0801e428 	.word	0x0801e428

0801c9ac <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b08a      	sub	sp, #40	; 0x28
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c9b4:	2327      	movs	r3, #39	; 0x27
 801c9b6:	18fb      	adds	r3, r7, r3
 801c9b8:	2200      	movs	r2, #0
 801c9ba:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d05d      	beq.n	801ca7e <UTIL_TIMER_Start+0xd2>
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	0018      	movs	r0, r3
 801c9c6:	f000 f9cb 	bl	801cd60 <TimerExists>
 801c9ca:	0003      	movs	r3, r0
 801c9cc:	001a      	movs	r2, r3
 801c9ce:	2301      	movs	r3, #1
 801c9d0:	4053      	eors	r3, r2
 801c9d2:	b2db      	uxtb	r3, r3
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d052      	beq.n	801ca7e <UTIL_TIMER_Start+0xd2>
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	7a5b      	ldrb	r3, [r3, #9]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d14e      	bne.n	801ca7e <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c9e0:	f3ef 8310 	mrs	r3, PRIMASK
 801c9e4:	613b      	str	r3, [r7, #16]
  return(result);
 801c9e6:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c9e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c9ea:	b672      	cpsid	i
}
 801c9ec:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c9f4:	4b27      	ldr	r3, [pc, #156]	; (801ca94 <UTIL_TIMER_Start+0xe8>)
 801c9f6:	6a1b      	ldr	r3, [r3, #32]
 801c9f8:	4798      	blx	r3
 801c9fa:	0003      	movs	r3, r0
 801c9fc:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801c9fe:	6a3a      	ldr	r2, [r7, #32]
 801ca00:	69bb      	ldr	r3, [r7, #24]
 801ca02:	429a      	cmp	r2, r3
 801ca04:	d201      	bcs.n	801ca0a <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801ca06:	69bb      	ldr	r3, [r7, #24]
 801ca08:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	6a3a      	ldr	r2, [r7, #32]
 801ca0e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	2200      	movs	r2, #0
 801ca14:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	2201      	movs	r2, #1
 801ca1a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	2200      	movs	r2, #0
 801ca20:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ca22:	4b1d      	ldr	r3, [pc, #116]	; (801ca98 <UTIL_TIMER_Start+0xec>)
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d107      	bne.n	801ca3a <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ca2a:	4b1a      	ldr	r3, [pc, #104]	; (801ca94 <UTIL_TIMER_Start+0xe8>)
 801ca2c:	691b      	ldr	r3, [r3, #16]
 801ca2e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	0018      	movs	r0, r3
 801ca34:	f000 fa08 	bl	801ce48 <TimerInsertNewHeadTimer>
 801ca38:	e01a      	b.n	801ca70 <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ca3a:	4b16      	ldr	r3, [pc, #88]	; (801ca94 <UTIL_TIMER_Start+0xe8>)
 801ca3c:	699b      	ldr	r3, [r3, #24]
 801ca3e:	4798      	blx	r3
 801ca40:	0003      	movs	r3, r0
 801ca42:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	681a      	ldr	r2, [r3, #0]
 801ca48:	697b      	ldr	r3, [r7, #20]
 801ca4a:	18d2      	adds	r2, r2, r3
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	681a      	ldr	r2, [r3, #0]
 801ca54:	4b10      	ldr	r3, [pc, #64]	; (801ca98 <UTIL_TIMER_Start+0xec>)
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	429a      	cmp	r2, r3
 801ca5c:	d204      	bcs.n	801ca68 <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	0018      	movs	r0, r3
 801ca62:	f000 f9f1 	bl	801ce48 <TimerInsertNewHeadTimer>
 801ca66:	e003      	b.n	801ca70 <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	0018      	movs	r0, r3
 801ca6c:	f000 f9be 	bl	801cdec <TimerInsertTimer>
 801ca70:	69fb      	ldr	r3, [r7, #28]
 801ca72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	f383 8810 	msr	PRIMASK, r3
}
 801ca7a:	46c0      	nop			; (mov r8, r8)
  {
 801ca7c:	e003      	b.n	801ca86 <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801ca7e:	2327      	movs	r3, #39	; 0x27
 801ca80:	18fb      	adds	r3, r7, r3
 801ca82:	2201      	movs	r2, #1
 801ca84:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801ca86:	2327      	movs	r3, #39	; 0x27
 801ca88:	18fb      	adds	r3, r7, r3
 801ca8a:	781b      	ldrb	r3, [r3, #0]
}
 801ca8c:	0018      	movs	r0, r3
 801ca8e:	46bd      	mov	sp, r7
 801ca90:	b00a      	add	sp, #40	; 0x28
 801ca92:	bd80      	pop	{r7, pc}
 801ca94:	0801e428 	.word	0x0801e428
 801ca98:	200012d8 	.word	0x200012d8

0801ca9c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	b088      	sub	sp, #32
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801caa4:	231f      	movs	r3, #31
 801caa6:	18fb      	adds	r3, r7, r3
 801caa8:	2200      	movs	r2, #0
 801caaa:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d05d      	beq.n	801cb6e <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cab2:	f3ef 8310 	mrs	r3, PRIMASK
 801cab6:	60fb      	str	r3, [r7, #12]
  return(result);
 801cab8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801caba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cabc:	b672      	cpsid	i
}
 801cabe:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801cac0:	4b30      	ldr	r3, [pc, #192]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801cac6:	4b2f      	ldr	r3, [pc, #188]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	2201      	movs	r2, #1
 801cad0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801cad2:	4b2c      	ldr	r3, [pc, #176]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d043      	beq.n	801cb62 <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	2200      	movs	r2, #0
 801cade:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801cae0:	4b28      	ldr	r3, [pc, #160]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	687a      	ldr	r2, [r7, #4]
 801cae6:	429a      	cmp	r2, r3
 801cae8:	d134      	bne.n	801cb54 <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801caea:	4b26      	ldr	r3, [pc, #152]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801caec:	681b      	ldr	r3, [r3, #0]
 801caee:	2200      	movs	r2, #0
 801caf0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801caf2:	4b24      	ldr	r3, [pc, #144]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	695b      	ldr	r3, [r3, #20]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d00a      	beq.n	801cb12 <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801cafc:	4b21      	ldr	r3, [pc, #132]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	695a      	ldr	r2, [r3, #20]
 801cb02:	4b20      	ldr	r3, [pc, #128]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801cb04:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801cb06:	4b1f      	ldr	r3, [pc, #124]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	0018      	movs	r0, r3
 801cb0c:	f000 f944 	bl	801cd98 <TimerSetTimeout>
 801cb10:	e023      	b.n	801cb5a <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cb12:	4b1d      	ldr	r3, [pc, #116]	; (801cb88 <UTIL_TIMER_Stop+0xec>)
 801cb14:	68db      	ldr	r3, [r3, #12]
 801cb16:	4798      	blx	r3
            TimerListHead = NULL;
 801cb18:	4b1a      	ldr	r3, [pc, #104]	; (801cb84 <UTIL_TIMER_Stop+0xe8>)
 801cb1a:	2200      	movs	r2, #0
 801cb1c:	601a      	str	r2, [r3, #0]
 801cb1e:	e01c      	b.n	801cb5a <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801cb20:	697a      	ldr	r2, [r7, #20]
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	429a      	cmp	r2, r3
 801cb26:	d110      	bne.n	801cb4a <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801cb28:	697b      	ldr	r3, [r7, #20]
 801cb2a:	695b      	ldr	r3, [r3, #20]
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d006      	beq.n	801cb3e <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801cb30:	697b      	ldr	r3, [r7, #20]
 801cb32:	695b      	ldr	r3, [r3, #20]
 801cb34:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cb36:	69bb      	ldr	r3, [r7, #24]
 801cb38:	697a      	ldr	r2, [r7, #20]
 801cb3a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801cb3c:	e00d      	b.n	801cb5a <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801cb3e:	2300      	movs	r3, #0
 801cb40:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cb42:	69bb      	ldr	r3, [r7, #24]
 801cb44:	697a      	ldr	r2, [r7, #20]
 801cb46:	615a      	str	r2, [r3, #20]
            break;
 801cb48:	e007      	b.n	801cb5a <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801cb4a:	697b      	ldr	r3, [r7, #20]
 801cb4c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801cb4e:	697b      	ldr	r3, [r7, #20]
 801cb50:	695b      	ldr	r3, [r3, #20]
 801cb52:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801cb54:	697b      	ldr	r3, [r7, #20]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d1e2      	bne.n	801cb20 <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801cb5a:	231f      	movs	r3, #31
 801cb5c:	18fb      	adds	r3, r7, r3
 801cb5e:	2200      	movs	r2, #0
 801cb60:	701a      	strb	r2, [r3, #0]
 801cb62:	693b      	ldr	r3, [r7, #16]
 801cb64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb66:	68bb      	ldr	r3, [r7, #8]
 801cb68:	f383 8810 	msr	PRIMASK, r3
}
 801cb6c:	e003      	b.n	801cb76 <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801cb6e:	231f      	movs	r3, #31
 801cb70:	18fb      	adds	r3, r7, r3
 801cb72:	2201      	movs	r2, #1
 801cb74:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801cb76:	231f      	movs	r3, #31
 801cb78:	18fb      	adds	r3, r7, r3
 801cb7a:	781b      	ldrb	r3, [r3, #0]
}
 801cb7c:	0018      	movs	r0, r3
 801cb7e:	46bd      	mov	sp, r7
 801cb80:	b008      	add	sp, #32
 801cb82:	bd80      	pop	{r7, pc}
 801cb84:	200012d8 	.word	0x200012d8
 801cb88:	0801e428 	.word	0x0801e428

0801cb8c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801cb8c:	b590      	push	{r4, r7, lr}
 801cb8e:	b085      	sub	sp, #20
 801cb90:	af00      	add	r7, sp, #0
 801cb92:	6078      	str	r0, [r7, #4]
 801cb94:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cb96:	210f      	movs	r1, #15
 801cb98:	187b      	adds	r3, r7, r1
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d103      	bne.n	801cbac <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801cba4:	187b      	adds	r3, r7, r1
 801cba6:	2201      	movs	r2, #1
 801cba8:	701a      	strb	r2, [r3, #0]
 801cbaa:	e019      	b.n	801cbe0 <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801cbac:	4b10      	ldr	r3, [pc, #64]	; (801cbf0 <UTIL_TIMER_SetPeriod+0x64>)
 801cbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbb0:	683a      	ldr	r2, [r7, #0]
 801cbb2:	0010      	movs	r0, r2
 801cbb4:	4798      	blx	r3
 801cbb6:	0002      	movs	r2, r0
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	0018      	movs	r0, r3
 801cbc0:	f000 f8ce 	bl	801cd60 <TimerExists>
 801cbc4:	1e03      	subs	r3, r0, #0
 801cbc6:	d00b      	beq.n	801cbe0 <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	0018      	movs	r0, r3
 801cbcc:	f7ff ff66 	bl	801ca9c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801cbd0:	230f      	movs	r3, #15
 801cbd2:	18fc      	adds	r4, r7, r3
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	0018      	movs	r0, r3
 801cbd8:	f7ff fee8 	bl	801c9ac <UTIL_TIMER_Start>
 801cbdc:	0003      	movs	r3, r0
 801cbde:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801cbe0:	230f      	movs	r3, #15
 801cbe2:	18fb      	adds	r3, r7, r3
 801cbe4:	781b      	ldrb	r3, [r3, #0]
}
 801cbe6:	0018      	movs	r0, r3
 801cbe8:	46bd      	mov	sp, r7
 801cbea:	b005      	add	sp, #20
 801cbec:	bd90      	pop	{r4, r7, pc}
 801cbee:	46c0      	nop			; (mov r8, r8)
 801cbf0:	0801e428 	.word	0x0801e428

0801cbf4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801cbf4:	b590      	push	{r4, r7, lr}
 801cbf6:	b089      	sub	sp, #36	; 0x24
 801cbf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbfa:	f3ef 8310 	mrs	r3, PRIMASK
 801cbfe:	60bb      	str	r3, [r7, #8]
  return(result);
 801cc00:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cc02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc04:	b672      	cpsid	i
}
 801cc06:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801cc08:	4b3a      	ldr	r3, [pc, #232]	; (801ccf4 <UTIL_TIMER_IRQ_Handler+0x100>)
 801cc0a:	695b      	ldr	r3, [r3, #20]
 801cc0c:	4798      	blx	r3
 801cc0e:	0003      	movs	r3, r0
 801cc10:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cc12:	4b38      	ldr	r3, [pc, #224]	; (801ccf4 <UTIL_TIMER_IRQ_Handler+0x100>)
 801cc14:	691b      	ldr	r3, [r3, #16]
 801cc16:	4798      	blx	r3
 801cc18:	0003      	movs	r3, r0
 801cc1a:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801cc1c:	693a      	ldr	r2, [r7, #16]
 801cc1e:	697b      	ldr	r3, [r7, #20]
 801cc20:	1ad3      	subs	r3, r2, r3
 801cc22:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801cc24:	4b34      	ldr	r3, [pc, #208]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d038      	beq.n	801cc9e <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801cc2c:	4b32      	ldr	r3, [pc, #200]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801cc32:	69fb      	ldr	r3, [r7, #28]
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	68fa      	ldr	r2, [r7, #12]
 801cc38:	429a      	cmp	r2, r3
 801cc3a:	d206      	bcs.n	801cc4a <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801cc3c:	69fb      	ldr	r3, [r7, #28]
 801cc3e:	681a      	ldr	r2, [r3, #0]
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	1ad2      	subs	r2, r2, r3
 801cc44:	69fb      	ldr	r3, [r7, #28]
 801cc46:	601a      	str	r2, [r3, #0]
 801cc48:	e002      	b.n	801cc50 <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801cc4a:	69fb      	ldr	r3, [r7, #28]
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801cc50:	69fb      	ldr	r3, [r7, #28]
 801cc52:	695b      	ldr	r3, [r3, #20]
 801cc54:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801cc56:	69fb      	ldr	r3, [r7, #28]
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d1ea      	bne.n	801cc32 <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cc5c:	e01f      	b.n	801cc9e <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801cc5e:	4b26      	ldr	r3, [pc, #152]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801cc64:	4b24      	ldr	r3, [pc, #144]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	695a      	ldr	r2, [r3, #20]
 801cc6a:	4b23      	ldr	r3, [pc, #140]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc6c:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801cc6e:	69fb      	ldr	r3, [r7, #28]
 801cc70:	2200      	movs	r2, #0
 801cc72:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801cc74:	69fb      	ldr	r3, [r7, #28]
 801cc76:	2200      	movs	r2, #0
 801cc78:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801cc7a:	69fb      	ldr	r3, [r7, #28]
 801cc7c:	68da      	ldr	r2, [r3, #12]
 801cc7e:	69fb      	ldr	r3, [r7, #28]
 801cc80:	691b      	ldr	r3, [r3, #16]
 801cc82:	0018      	movs	r0, r3
 801cc84:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801cc86:	69fb      	ldr	r3, [r7, #28]
 801cc88:	7adb      	ldrb	r3, [r3, #11]
 801cc8a:	2b01      	cmp	r3, #1
 801cc8c:	d107      	bne.n	801cc9e <UTIL_TIMER_IRQ_Handler+0xaa>
 801cc8e:	69fb      	ldr	r3, [r7, #28]
 801cc90:	7a9b      	ldrb	r3, [r3, #10]
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d103      	bne.n	801cc9e <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801cc96:	69fb      	ldr	r3, [r7, #28]
 801cc98:	0018      	movs	r0, r3
 801cc9a:	f7ff fe87 	bl	801c9ac <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cc9e:	4b16      	ldr	r3, [pc, #88]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d00d      	beq.n	801ccc2 <UTIL_TIMER_IRQ_Handler+0xce>
 801cca6:	4b14      	ldr	r3, [pc, #80]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d0d6      	beq.n	801cc5e <UTIL_TIMER_IRQ_Handler+0x6a>
 801ccb0:	4b11      	ldr	r3, [pc, #68]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	681c      	ldr	r4, [r3, #0]
 801ccb6:	4b0f      	ldr	r3, [pc, #60]	; (801ccf4 <UTIL_TIMER_IRQ_Handler+0x100>)
 801ccb8:	699b      	ldr	r3, [r3, #24]
 801ccba:	4798      	blx	r3
 801ccbc:	0003      	movs	r3, r0
 801ccbe:	429c      	cmp	r4, r3
 801ccc0:	d3cd      	bcc.n	801cc5e <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ccc2:	4b0d      	ldr	r3, [pc, #52]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d009      	beq.n	801ccde <UTIL_TIMER_IRQ_Handler+0xea>
 801ccca:	4b0b      	ldr	r3, [pc, #44]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	7a1b      	ldrb	r3, [r3, #8]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d104      	bne.n	801ccde <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801ccd4:	4b08      	ldr	r3, [pc, #32]	; (801ccf8 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	0018      	movs	r0, r3
 801ccda:	f000 f85d 	bl	801cd98 <TimerSetTimeout>
 801ccde:	69bb      	ldr	r3, [r7, #24]
 801cce0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	f383 8810 	msr	PRIMASK, r3
}
 801cce8:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ccea:	46c0      	nop			; (mov r8, r8)
 801ccec:	46bd      	mov	sp, r7
 801ccee:	b009      	add	sp, #36	; 0x24
 801ccf0:	bd90      	pop	{r4, r7, pc}
 801ccf2:	46c0      	nop			; (mov r8, r8)
 801ccf4:	0801e428 	.word	0x0801e428
 801ccf8:	200012d8 	.word	0x200012d8

0801ccfc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ccfc:	b580      	push	{r7, lr}
 801ccfe:	b082      	sub	sp, #8
 801cd00:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cd02:	4b07      	ldr	r3, [pc, #28]	; (801cd20 <UTIL_TIMER_GetCurrentTime+0x24>)
 801cd04:	69db      	ldr	r3, [r3, #28]
 801cd06:	4798      	blx	r3
 801cd08:	0003      	movs	r3, r0
 801cd0a:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cd0c:	4b04      	ldr	r3, [pc, #16]	; (801cd20 <UTIL_TIMER_GetCurrentTime+0x24>)
 801cd0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd10:	687a      	ldr	r2, [r7, #4]
 801cd12:	0010      	movs	r0, r2
 801cd14:	4798      	blx	r3
 801cd16:	0003      	movs	r3, r0
}
 801cd18:	0018      	movs	r0, r3
 801cd1a:	46bd      	mov	sp, r7
 801cd1c:	b002      	add	sp, #8
 801cd1e:	bd80      	pop	{r7, pc}
 801cd20:	0801e428 	.word	0x0801e428

0801cd24 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cd24:	b580      	push	{r7, lr}
 801cd26:	b084      	sub	sp, #16
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cd2c:	4b0b      	ldr	r3, [pc, #44]	; (801cd5c <UTIL_TIMER_GetElapsedTime+0x38>)
 801cd2e:	69db      	ldr	r3, [r3, #28]
 801cd30:	4798      	blx	r3
 801cd32:	0003      	movs	r3, r0
 801cd34:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cd36:	4b09      	ldr	r3, [pc, #36]	; (801cd5c <UTIL_TIMER_GetElapsedTime+0x38>)
 801cd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd3a:	687a      	ldr	r2, [r7, #4]
 801cd3c:	0010      	movs	r0, r2
 801cd3e:	4798      	blx	r3
 801cd40:	0003      	movs	r3, r0
 801cd42:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cd44:	4b05      	ldr	r3, [pc, #20]	; (801cd5c <UTIL_TIMER_GetElapsedTime+0x38>)
 801cd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd48:	68f9      	ldr	r1, [r7, #12]
 801cd4a:	68ba      	ldr	r2, [r7, #8]
 801cd4c:	1a8a      	subs	r2, r1, r2
 801cd4e:	0010      	movs	r0, r2
 801cd50:	4798      	blx	r3
 801cd52:	0003      	movs	r3, r0
}
 801cd54:	0018      	movs	r0, r3
 801cd56:	46bd      	mov	sp, r7
 801cd58:	b004      	add	sp, #16
 801cd5a:	bd80      	pop	{r7, pc}
 801cd5c:	0801e428 	.word	0x0801e428

0801cd60 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cd60:	b580      	push	{r7, lr}
 801cd62:	b084      	sub	sp, #16
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cd68:	4b0a      	ldr	r3, [pc, #40]	; (801cd94 <TimerExists+0x34>)
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cd6e:	e008      	b.n	801cd82 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cd70:	68fa      	ldr	r2, [r7, #12]
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	429a      	cmp	r2, r3
 801cd76:	d101      	bne.n	801cd7c <TimerExists+0x1c>
    {
      return true;
 801cd78:	2301      	movs	r3, #1
 801cd7a:	e006      	b.n	801cd8a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	695b      	ldr	r3, [r3, #20]
 801cd80:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d1f3      	bne.n	801cd70 <TimerExists+0x10>
  }
  return false;
 801cd88:	2300      	movs	r3, #0
}
 801cd8a:	0018      	movs	r0, r3
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	b004      	add	sp, #16
 801cd90:	bd80      	pop	{r7, pc}
 801cd92:	46c0      	nop			; (mov r8, r8)
 801cd94:	200012d8 	.word	0x200012d8

0801cd98 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cd98:	b590      	push	{r4, r7, lr}
 801cd9a:	b085      	sub	sp, #20
 801cd9c:	af00      	add	r7, sp, #0
 801cd9e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cda0:	4b11      	ldr	r3, [pc, #68]	; (801cde8 <TimerSetTimeout+0x50>)
 801cda2:	6a1b      	ldr	r3, [r3, #32]
 801cda4:	4798      	blx	r3
 801cda6:	0003      	movs	r3, r0
 801cda8:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	2201      	movs	r2, #1
 801cdae:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	681c      	ldr	r4, [r3, #0]
 801cdb4:	4b0c      	ldr	r3, [pc, #48]	; (801cde8 <TimerSetTimeout+0x50>)
 801cdb6:	699b      	ldr	r3, [r3, #24]
 801cdb8:	4798      	blx	r3
 801cdba:	0002      	movs	r2, r0
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	18d3      	adds	r3, r2, r3
 801cdc0:	429c      	cmp	r4, r3
 801cdc2:	d207      	bcs.n	801cdd4 <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cdc4:	4b08      	ldr	r3, [pc, #32]	; (801cde8 <TimerSetTimeout+0x50>)
 801cdc6:	699b      	ldr	r3, [r3, #24]
 801cdc8:	4798      	blx	r3
 801cdca:	0002      	movs	r2, r0
 801cdcc:	68fb      	ldr	r3, [r7, #12]
 801cdce:	18d2      	adds	r2, r2, r3
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cdd4:	4b04      	ldr	r3, [pc, #16]	; (801cde8 <TimerSetTimeout+0x50>)
 801cdd6:	689a      	ldr	r2, [r3, #8]
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	0018      	movs	r0, r3
 801cdde:	4790      	blx	r2
}
 801cde0:	46c0      	nop			; (mov r8, r8)
 801cde2:	46bd      	mov	sp, r7
 801cde4:	b005      	add	sp, #20
 801cde6:	bd90      	pop	{r4, r7, pc}
 801cde8:	0801e428 	.word	0x0801e428

0801cdec <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cdec:	b580      	push	{r7, lr}
 801cdee:	b084      	sub	sp, #16
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cdf4:	4b13      	ldr	r3, [pc, #76]	; (801ce44 <TimerInsertTimer+0x58>)
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801cdfa:	4b12      	ldr	r3, [pc, #72]	; (801ce44 <TimerInsertTimer+0x58>)
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	695b      	ldr	r3, [r3, #20]
 801ce00:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801ce02:	e012      	b.n	801ce2a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	681a      	ldr	r2, [r3, #0]
 801ce08:	68bb      	ldr	r3, [r7, #8]
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	429a      	cmp	r2, r3
 801ce0e:	d905      	bls.n	801ce1c <TimerInsertTimer+0x30>
    {
        cur = next;
 801ce10:	68bb      	ldr	r3, [r7, #8]
 801ce12:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801ce14:	68bb      	ldr	r3, [r7, #8]
 801ce16:	695b      	ldr	r3, [r3, #20]
 801ce18:	60bb      	str	r3, [r7, #8]
 801ce1a:	e006      	b.n	801ce2a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801ce1c:	68fb      	ldr	r3, [r7, #12]
 801ce1e:	687a      	ldr	r2, [r7, #4]
 801ce20:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	68ba      	ldr	r2, [r7, #8]
 801ce26:	615a      	str	r2, [r3, #20]
        return;
 801ce28:	e009      	b.n	801ce3e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	695b      	ldr	r3, [r3, #20]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d1e8      	bne.n	801ce04 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	687a      	ldr	r2, [r7, #4]
 801ce36:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	2200      	movs	r2, #0
 801ce3c:	615a      	str	r2, [r3, #20]
}
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	b004      	add	sp, #16
 801ce42:	bd80      	pop	{r7, pc}
 801ce44:	200012d8 	.word	0x200012d8

0801ce48 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	b084      	sub	sp, #16
 801ce4c:	af00      	add	r7, sp, #0
 801ce4e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ce50:	4b0b      	ldr	r3, [pc, #44]	; (801ce80 <TimerInsertNewHeadTimer+0x38>)
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d002      	beq.n	801ce62 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	2200      	movs	r2, #0
 801ce60:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	68fa      	ldr	r2, [r7, #12]
 801ce66:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ce68:	4b05      	ldr	r3, [pc, #20]	; (801ce80 <TimerInsertNewHeadTimer+0x38>)
 801ce6a:	687a      	ldr	r2, [r7, #4]
 801ce6c:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801ce6e:	4b04      	ldr	r3, [pc, #16]	; (801ce80 <TimerInsertNewHeadTimer+0x38>)
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	0018      	movs	r0, r3
 801ce74:	f7ff ff90 	bl	801cd98 <TimerSetTimeout>
}
 801ce78:	46c0      	nop			; (mov r8, r8)
 801ce7a:	46bd      	mov	sp, r7
 801ce7c:	b004      	add	sp, #16
 801ce7e:	bd80      	pop	{r7, pc}
 801ce80:	200012d8 	.word	0x200012d8

0801ce84 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ce84:	b580      	push	{r7, lr}
 801ce86:	b084      	sub	sp, #16
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ce90:	e00e      	b.n	801ceb0 <ee_skip_atoi+0x2c>
 801ce92:	68fa      	ldr	r2, [r7, #12]
 801ce94:	0013      	movs	r3, r2
 801ce96:	009b      	lsls	r3, r3, #2
 801ce98:	189b      	adds	r3, r3, r2
 801ce9a:	005b      	lsls	r3, r3, #1
 801ce9c:	0018      	movs	r0, r3
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	1c59      	adds	r1, r3, #1
 801cea4:	687a      	ldr	r2, [r7, #4]
 801cea6:	6011      	str	r1, [r2, #0]
 801cea8:	781b      	ldrb	r3, [r3, #0]
 801ceaa:	18c3      	adds	r3, r0, r3
 801ceac:	3b30      	subs	r3, #48	; 0x30
 801ceae:	60fb      	str	r3, [r7, #12]
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	781b      	ldrb	r3, [r3, #0]
 801ceb6:	2b2f      	cmp	r3, #47	; 0x2f
 801ceb8:	d904      	bls.n	801cec4 <ee_skip_atoi+0x40>
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	781b      	ldrb	r3, [r3, #0]
 801cec0:	2b39      	cmp	r3, #57	; 0x39
 801cec2:	d9e6      	bls.n	801ce92 <ee_skip_atoi+0xe>
  return i;
 801cec4:	68fb      	ldr	r3, [r7, #12]
}
 801cec6:	0018      	movs	r0, r3
 801cec8:	46bd      	mov	sp, r7
 801ceca:	b004      	add	sp, #16
 801cecc:	bd80      	pop	{r7, pc}
	...

0801ced0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b098      	sub	sp, #96	; 0x60
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	60f8      	str	r0, [r7, #12]
 801ced8:	60b9      	str	r1, [r7, #8]
 801ceda:	607a      	str	r2, [r7, #4]
 801cedc:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801cede:	4b72      	ldr	r3, [pc, #456]	; (801d0a8 <ee_number+0x1d8>)
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801cee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cee6:	2240      	movs	r2, #64	; 0x40
 801cee8:	4013      	ands	r3, r2
 801ceea:	d002      	beq.n	801cef2 <ee_number+0x22>
 801ceec:	4b6f      	ldr	r3, [pc, #444]	; (801d0ac <ee_number+0x1dc>)
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801cef2:	683b      	ldr	r3, [r7, #0]
 801cef4:	2b01      	cmp	r3, #1
 801cef6:	dd02      	ble.n	801cefe <ee_number+0x2e>
 801cef8:	683b      	ldr	r3, [r7, #0]
 801cefa:	2b24      	cmp	r3, #36	; 0x24
 801cefc:	dd01      	ble.n	801cf02 <ee_number+0x32>
 801cefe:	2300      	movs	r3, #0
 801cf00:	e0cd      	b.n	801d09e <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801cf02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf04:	2201      	movs	r2, #1
 801cf06:	4013      	ands	r3, r2
 801cf08:	d001      	beq.n	801cf0e <ee_number+0x3e>
 801cf0a:	2230      	movs	r2, #48	; 0x30
 801cf0c:	e000      	b.n	801cf10 <ee_number+0x40>
 801cf0e:	2220      	movs	r2, #32
 801cf10:	2353      	movs	r3, #83	; 0x53
 801cf12:	18fb      	adds	r3, r7, r3
 801cf14:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801cf16:	215f      	movs	r1, #95	; 0x5f
 801cf18:	187b      	adds	r3, r7, r1
 801cf1a:	2200      	movs	r2, #0
 801cf1c:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801cf1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf20:	2202      	movs	r2, #2
 801cf22:	4013      	ands	r3, r2
 801cf24:	d00b      	beq.n	801cf3e <ee_number+0x6e>
  {
    if (num < 0)
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	da08      	bge.n	801cf3e <ee_number+0x6e>
    {
      sign = '-';
 801cf2c:	187b      	adds	r3, r7, r1
 801cf2e:	222d      	movs	r2, #45	; 0x2d
 801cf30:	701a      	strb	r2, [r3, #0]
      num = -num;
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	425b      	negs	r3, r3
 801cf36:	607b      	str	r3, [r7, #4]
      size--;
 801cf38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf3a:	3b01      	subs	r3, #1
 801cf3c:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801cf3e:	2300      	movs	r3, #0
 801cf40:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d120      	bne.n	801cf8a <ee_number+0xba>
    tmp[i++] = '0';
 801cf48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf4a:	1c5a      	adds	r2, r3, #1
 801cf4c:	657a      	str	r2, [r7, #84]	; 0x54
 801cf4e:	2210      	movs	r2, #16
 801cf50:	18ba      	adds	r2, r7, r2
 801cf52:	2130      	movs	r1, #48	; 0x30
 801cf54:	54d1      	strb	r1, [r2, r3]
 801cf56:	e01b      	b.n	801cf90 <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	683a      	ldr	r2, [r7, #0]
 801cf5c:	0011      	movs	r1, r2
 801cf5e:	0018      	movs	r0, r3
 801cf60:	f7e3 f960 	bl	8000224 <__aeabi_uidivmod>
 801cf64:	000b      	movs	r3, r1
 801cf66:	001a      	movs	r2, r3
 801cf68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cf6a:	189a      	adds	r2, r3, r2
 801cf6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf6e:	1c59      	adds	r1, r3, #1
 801cf70:	6579      	str	r1, [r7, #84]	; 0x54
 801cf72:	7811      	ldrb	r1, [r2, #0]
 801cf74:	2210      	movs	r2, #16
 801cf76:	18ba      	adds	r2, r7, r2
 801cf78:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	683a      	ldr	r2, [r7, #0]
 801cf7e:	0011      	movs	r1, r2
 801cf80:	0018      	movs	r0, r3
 801cf82:	f7e3 f8c9 	bl	8000118 <__udivsi3>
 801cf86:	0003      	movs	r3, r0
 801cf88:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d1e3      	bne.n	801cf58 <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801cf90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cf92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cf94:	429a      	cmp	r2, r3
 801cf96:	dd01      	ble.n	801cf9c <ee_number+0xcc>
 801cf98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801cf9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cf9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cfa0:	1ad3      	subs	r3, r2, r3
 801cfa2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801cfa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cfa6:	2201      	movs	r2, #1
 801cfa8:	4013      	ands	r3, r2
 801cfaa:	d112      	bne.n	801cfd2 <ee_number+0x102>
 801cfac:	e00c      	b.n	801cfc8 <ee_number+0xf8>
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	1c5a      	adds	r2, r3, #1
 801cfb2:	60fa      	str	r2, [r7, #12]
 801cfb4:	2220      	movs	r2, #32
 801cfb6:	701a      	strb	r2, [r3, #0]
 801cfb8:	68bb      	ldr	r3, [r7, #8]
 801cfba:	3b01      	subs	r3, #1
 801cfbc:	60bb      	str	r3, [r7, #8]
 801cfbe:	68bb      	ldr	r3, [r7, #8]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d101      	bne.n	801cfc8 <ee_number+0xf8>
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	e06a      	b.n	801d09e <ee_number+0x1ce>
 801cfc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cfca:	1e5a      	subs	r2, r3, #1
 801cfcc:	66ba      	str	r2, [r7, #104]	; 0x68
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	dced      	bgt.n	801cfae <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801cfd2:	215f      	movs	r1, #95	; 0x5f
 801cfd4:	187b      	adds	r3, r7, r1
 801cfd6:	781b      	ldrb	r3, [r3, #0]
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	d01c      	beq.n	801d016 <ee_number+0x146>
 801cfdc:	68fb      	ldr	r3, [r7, #12]
 801cfde:	1c5a      	adds	r2, r3, #1
 801cfe0:	60fa      	str	r2, [r7, #12]
 801cfe2:	187a      	adds	r2, r7, r1
 801cfe4:	7812      	ldrb	r2, [r2, #0]
 801cfe6:	701a      	strb	r2, [r3, #0]
 801cfe8:	68bb      	ldr	r3, [r7, #8]
 801cfea:	3b01      	subs	r3, #1
 801cfec:	60bb      	str	r3, [r7, #8]
 801cfee:	68bb      	ldr	r3, [r7, #8]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d110      	bne.n	801d016 <ee_number+0x146>
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	e052      	b.n	801d09e <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	1c5a      	adds	r2, r3, #1
 801cffc:	60fa      	str	r2, [r7, #12]
 801cffe:	2253      	movs	r2, #83	; 0x53
 801d000:	18ba      	adds	r2, r7, r2
 801d002:	7812      	ldrb	r2, [r2, #0]
 801d004:	701a      	strb	r2, [r3, #0]
 801d006:	68bb      	ldr	r3, [r7, #8]
 801d008:	3b01      	subs	r3, #1
 801d00a:	60bb      	str	r3, [r7, #8]
 801d00c:	68bb      	ldr	r3, [r7, #8]
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d101      	bne.n	801d016 <ee_number+0x146>
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	e043      	b.n	801d09e <ee_number+0x1ce>
 801d016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d018:	1e5a      	subs	r2, r3, #1
 801d01a:	66ba      	str	r2, [r7, #104]	; 0x68
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	dceb      	bgt.n	801cff8 <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d020:	e00c      	b.n	801d03c <ee_number+0x16c>
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	1c5a      	adds	r2, r3, #1
 801d026:	60fa      	str	r2, [r7, #12]
 801d028:	2230      	movs	r2, #48	; 0x30
 801d02a:	701a      	strb	r2, [r3, #0]
 801d02c:	68bb      	ldr	r3, [r7, #8]
 801d02e:	3b01      	subs	r3, #1
 801d030:	60bb      	str	r3, [r7, #8]
 801d032:	68bb      	ldr	r3, [r7, #8]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d101      	bne.n	801d03c <ee_number+0x16c>
 801d038:	68fb      	ldr	r3, [r7, #12]
 801d03a:	e030      	b.n	801d09e <ee_number+0x1ce>
 801d03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d03e:	1e5a      	subs	r2, r3, #1
 801d040:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d042:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d044:	429a      	cmp	r2, r3
 801d046:	dbec      	blt.n	801d022 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d048:	e010      	b.n	801d06c <ee_number+0x19c>
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	1c5a      	adds	r2, r3, #1
 801d04e:	60fa      	str	r2, [r7, #12]
 801d050:	2210      	movs	r2, #16
 801d052:	18b9      	adds	r1, r7, r2
 801d054:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d056:	188a      	adds	r2, r1, r2
 801d058:	7812      	ldrb	r2, [r2, #0]
 801d05a:	701a      	strb	r2, [r3, #0]
 801d05c:	68bb      	ldr	r3, [r7, #8]
 801d05e:	3b01      	subs	r3, #1
 801d060:	60bb      	str	r3, [r7, #8]
 801d062:	68bb      	ldr	r3, [r7, #8]
 801d064:	2b00      	cmp	r3, #0
 801d066:	d101      	bne.n	801d06c <ee_number+0x19c>
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	e018      	b.n	801d09e <ee_number+0x1ce>
 801d06c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d06e:	1e5a      	subs	r2, r3, #1
 801d070:	657a      	str	r2, [r7, #84]	; 0x54
 801d072:	2b00      	cmp	r3, #0
 801d074:	dce9      	bgt.n	801d04a <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801d076:	e00c      	b.n	801d092 <ee_number+0x1c2>
 801d078:	68fb      	ldr	r3, [r7, #12]
 801d07a:	1c5a      	adds	r2, r3, #1
 801d07c:	60fa      	str	r2, [r7, #12]
 801d07e:	2220      	movs	r2, #32
 801d080:	701a      	strb	r2, [r3, #0]
 801d082:	68bb      	ldr	r3, [r7, #8]
 801d084:	3b01      	subs	r3, #1
 801d086:	60bb      	str	r3, [r7, #8]
 801d088:	68bb      	ldr	r3, [r7, #8]
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d101      	bne.n	801d092 <ee_number+0x1c2>
 801d08e:	68fb      	ldr	r3, [r7, #12]
 801d090:	e005      	b.n	801d09e <ee_number+0x1ce>
 801d092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d094:	1e5a      	subs	r2, r3, #1
 801d096:	66ba      	str	r2, [r7, #104]	; 0x68
 801d098:	2b00      	cmp	r3, #0
 801d09a:	dced      	bgt.n	801d078 <ee_number+0x1a8>

  return str;
 801d09c:	68fb      	ldr	r3, [r7, #12]
}
 801d09e:	0018      	movs	r0, r3
 801d0a0:	46bd      	mov	sp, r7
 801d0a2:	b018      	add	sp, #96	; 0x60
 801d0a4:	bd80      	pop	{r7, pc}
 801d0a6:	46c0      	nop			; (mov r8, r8)
 801d0a8:	200001d0 	.word	0x200001d0
 801d0ac:	200001d4 	.word	0x200001d4

0801d0b0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d0b0:	b590      	push	{r4, r7, lr}
 801d0b2:	b093      	sub	sp, #76	; 0x4c
 801d0b4:	af04      	add	r7, sp, #16
 801d0b6:	60f8      	str	r0, [r7, #12]
 801d0b8:	60b9      	str	r1, [r7, #8]
 801d0ba:	607a      	str	r2, [r7, #4]
 801d0bc:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d0be:	68bb      	ldr	r3, [r7, #8]
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	dc01      	bgt.n	801d0c8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d0c4:	2300      	movs	r3, #0
 801d0c6:	e104      	b.n	801d2d2 <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d0cc:	e0ec      	b.n	801d2a8 <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d0ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d0d0:	68fb      	ldr	r3, [r7, #12]
 801d0d2:	1ad2      	subs	r2, r2, r3
 801d0d4:	68bb      	ldr	r3, [r7, #8]
 801d0d6:	3b01      	subs	r3, #1
 801d0d8:	429a      	cmp	r2, r3
 801d0da:	db00      	blt.n	801d0de <tiny_vsnprintf_like+0x2e>
 801d0dc:	e0f2      	b.n	801d2c4 <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	781b      	ldrb	r3, [r3, #0]
 801d0e2:	2b25      	cmp	r3, #37	; 0x25
 801d0e4:	d006      	beq.n	801d0f4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d0e6:	687a      	ldr	r2, [r7, #4]
 801d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0ea:	1c59      	adds	r1, r3, #1
 801d0ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d0ee:	7812      	ldrb	r2, [r2, #0]
 801d0f0:	701a      	strb	r2, [r3, #0]
      continue;
 801d0f2:	e0d6      	b.n	801d2a2 <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801d0f4:	2300      	movs	r3, #0
 801d0f6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	3301      	adds	r3, #1
 801d0fc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	781b      	ldrb	r3, [r3, #0]
 801d102:	2b30      	cmp	r3, #48	; 0x30
 801d104:	d103      	bne.n	801d10e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d106:	6a3b      	ldr	r3, [r7, #32]
 801d108:	2201      	movs	r2, #1
 801d10a:	4313      	orrs	r3, r2
 801d10c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801d10e:	2301      	movs	r3, #1
 801d110:	425b      	negs	r3, r3
 801d112:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	781b      	ldrb	r3, [r3, #0]
 801d118:	2b2f      	cmp	r3, #47	; 0x2f
 801d11a:	d909      	bls.n	801d130 <tiny_vsnprintf_like+0x80>
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	781b      	ldrb	r3, [r3, #0]
 801d120:	2b39      	cmp	r3, #57	; 0x39
 801d122:	d805      	bhi.n	801d130 <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801d124:	1d3b      	adds	r3, r7, #4
 801d126:	0018      	movs	r0, r3
 801d128:	f7ff feac 	bl	801ce84 <ee_skip_atoi>
 801d12c:	0003      	movs	r3, r0
 801d12e:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801d130:	2301      	movs	r3, #1
 801d132:	425b      	negs	r3, r3
 801d134:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801d136:	2301      	movs	r3, #1
 801d138:	425b      	negs	r3, r3
 801d13a:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801d13c:	230a      	movs	r3, #10
 801d13e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	781b      	ldrb	r3, [r3, #0]
 801d144:	3b58      	subs	r3, #88	; 0x58
 801d146:	2b20      	cmp	r3, #32
 801d148:	d854      	bhi.n	801d1f4 <tiny_vsnprintf_like+0x144>
 801d14a:	009a      	lsls	r2, r3, #2
 801d14c:	4b63      	ldr	r3, [pc, #396]	; (801d2dc <tiny_vsnprintf_like+0x22c>)
 801d14e:	18d3      	adds	r3, r2, r3
 801d150:	681b      	ldr	r3, [r3, #0]
 801d152:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d156:	1c5a      	adds	r2, r3, #1
 801d158:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d15a:	2220      	movs	r2, #32
 801d15c:	701a      	strb	r2, [r3, #0]
 801d15e:	69fb      	ldr	r3, [r7, #28]
 801d160:	3b01      	subs	r3, #1
 801d162:	61fb      	str	r3, [r7, #28]
 801d164:	69fb      	ldr	r3, [r7, #28]
 801d166:	2b00      	cmp	r3, #0
 801d168:	dcf4      	bgt.n	801d154 <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801d16a:	683b      	ldr	r3, [r7, #0]
 801d16c:	1d1a      	adds	r2, r3, #4
 801d16e:	603a      	str	r2, [r7, #0]
 801d170:	6819      	ldr	r1, [r3, #0]
 801d172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d174:	1c5a      	adds	r2, r3, #1
 801d176:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d178:	b2ca      	uxtb	r2, r1
 801d17a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d17c:	e091      	b.n	801d2a2 <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801d17e:	683b      	ldr	r3, [r7, #0]
 801d180:	1d1a      	adds	r2, r3, #4
 801d182:	603a      	str	r2, [r7, #0]
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d101      	bne.n	801d192 <tiny_vsnprintf_like+0xe2>
 801d18e:	4b54      	ldr	r3, [pc, #336]	; (801d2e0 <tiny_vsnprintf_like+0x230>)
 801d190:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d194:	0018      	movs	r0, r3
 801d196:	f7e2 ffb7 	bl	8000108 <strlen>
 801d19a:	0003      	movs	r3, r0
 801d19c:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d19e:	e004      	b.n	801d1aa <tiny_vsnprintf_like+0xfa>
 801d1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1a2:	1c5a      	adds	r2, r3, #1
 801d1a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d1a6:	2220      	movs	r2, #32
 801d1a8:	701a      	strb	r2, [r3, #0]
 801d1aa:	69fb      	ldr	r3, [r7, #28]
 801d1ac:	1e5a      	subs	r2, r3, #1
 801d1ae:	61fa      	str	r2, [r7, #28]
 801d1b0:	693a      	ldr	r2, [r7, #16]
 801d1b2:	429a      	cmp	r2, r3
 801d1b4:	dbf4      	blt.n	801d1a0 <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d1b6:	2300      	movs	r3, #0
 801d1b8:	62bb      	str	r3, [r7, #40]	; 0x28
 801d1ba:	e00a      	b.n	801d1d2 <tiny_vsnprintf_like+0x122>
 801d1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d1be:	1c53      	adds	r3, r2, #1
 801d1c0:	627b      	str	r3, [r7, #36]	; 0x24
 801d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1c4:	1c59      	adds	r1, r3, #1
 801d1c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d1c8:	7812      	ldrb	r2, [r2, #0]
 801d1ca:	701a      	strb	r2, [r3, #0]
 801d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1ce:	3301      	adds	r3, #1
 801d1d0:	62bb      	str	r3, [r7, #40]	; 0x28
 801d1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d1d4:	693b      	ldr	r3, [r7, #16]
 801d1d6:	429a      	cmp	r2, r3
 801d1d8:	dbf0      	blt.n	801d1bc <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d1da:	e062      	b.n	801d2a2 <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d1dc:	6a3b      	ldr	r3, [r7, #32]
 801d1de:	2240      	movs	r2, #64	; 0x40
 801d1e0:	4313      	orrs	r3, r2
 801d1e2:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d1e4:	2310      	movs	r3, #16
 801d1e6:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d1e8:	e02d      	b.n	801d246 <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d1ea:	6a3b      	ldr	r3, [r7, #32]
 801d1ec:	2202      	movs	r2, #2
 801d1ee:	4313      	orrs	r3, r2
 801d1f0:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d1f2:	e025      	b.n	801d240 <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	781b      	ldrb	r3, [r3, #0]
 801d1f8:	2b25      	cmp	r3, #37	; 0x25
 801d1fa:	d004      	beq.n	801d206 <tiny_vsnprintf_like+0x156>
 801d1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1fe:	1c5a      	adds	r2, r3, #1
 801d200:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d202:	2225      	movs	r2, #37	; 0x25
 801d204:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	1ad2      	subs	r2, r2, r3
 801d20c:	68bb      	ldr	r3, [r7, #8]
 801d20e:	3b01      	subs	r3, #1
 801d210:	429a      	cmp	r2, r3
 801d212:	da17      	bge.n	801d244 <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	781b      	ldrb	r3, [r3, #0]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d006      	beq.n	801d22a <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801d21c:	687a      	ldr	r2, [r7, #4]
 801d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d220:	1c59      	adds	r1, r3, #1
 801d222:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d224:	7812      	ldrb	r2, [r2, #0]
 801d226:	701a      	strb	r2, [r3, #0]
 801d228:	e002      	b.n	801d230 <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	3b01      	subs	r3, #1
 801d22e:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	1ad2      	subs	r2, r2, r3
 801d236:	68bb      	ldr	r3, [r7, #8]
 801d238:	3b01      	subs	r3, #1
 801d23a:	429a      	cmp	r2, r3
 801d23c:	db30      	blt.n	801d2a0 <tiny_vsnprintf_like+0x1f0>
 801d23e:	e002      	b.n	801d246 <tiny_vsnprintf_like+0x196>
        break;
 801d240:	46c0      	nop			; (mov r8, r8)
 801d242:	e000      	b.n	801d246 <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801d244:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801d246:	697b      	ldr	r3, [r7, #20]
 801d248:	2b6c      	cmp	r3, #108	; 0x6c
 801d24a:	d105      	bne.n	801d258 <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801d24c:	683b      	ldr	r3, [r7, #0]
 801d24e:	1d1a      	adds	r2, r3, #4
 801d250:	603a      	str	r2, [r7, #0]
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	637b      	str	r3, [r7, #52]	; 0x34
 801d256:	e00e      	b.n	801d276 <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801d258:	6a3b      	ldr	r3, [r7, #32]
 801d25a:	2202      	movs	r2, #2
 801d25c:	4013      	ands	r3, r2
 801d25e:	d005      	beq.n	801d26c <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801d260:	683b      	ldr	r3, [r7, #0]
 801d262:	1d1a      	adds	r2, r3, #4
 801d264:	603a      	str	r2, [r7, #0]
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	637b      	str	r3, [r7, #52]	; 0x34
 801d26a:	e004      	b.n	801d276 <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801d26c:	683b      	ldr	r3, [r7, #0]
 801d26e:	1d1a      	adds	r2, r3, #4
 801d270:	603a      	str	r2, [r7, #0]
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d276:	68bb      	ldr	r3, [r7, #8]
 801d278:	1e5a      	subs	r2, r3, #1
 801d27a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d27c:	68fb      	ldr	r3, [r7, #12]
 801d27e:	1acb      	subs	r3, r1, r3
 801d280:	1ad1      	subs	r1, r2, r3
 801d282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d284:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801d286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d288:	6a3b      	ldr	r3, [r7, #32]
 801d28a:	9302      	str	r3, [sp, #8]
 801d28c:	69bb      	ldr	r3, [r7, #24]
 801d28e:	9301      	str	r3, [sp, #4]
 801d290:	69fb      	ldr	r3, [r7, #28]
 801d292:	9300      	str	r3, [sp, #0]
 801d294:	0023      	movs	r3, r4
 801d296:	f7ff fe1b 	bl	801ced0 <ee_number>
 801d29a:	0003      	movs	r3, r0
 801d29c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d29e:	e000      	b.n	801d2a2 <tiny_vsnprintf_like+0x1f2>
        continue;
 801d2a0:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	3301      	adds	r3, #1
 801d2a6:	607b      	str	r3, [r7, #4]
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	781b      	ldrb	r3, [r3, #0]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d000      	beq.n	801d2b2 <tiny_vsnprintf_like+0x202>
 801d2b0:	e70d      	b.n	801d0ce <tiny_vsnprintf_like+0x1e>
 801d2b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	1ad2      	subs	r2, r2, r3
 801d2b8:	68bb      	ldr	r3, [r7, #8]
 801d2ba:	3b01      	subs	r3, #1
 801d2bc:	429a      	cmp	r2, r3
 801d2be:	db00      	blt.n	801d2c2 <tiny_vsnprintf_like+0x212>
 801d2c0:	e705      	b.n	801d0ce <tiny_vsnprintf_like+0x1e>
 801d2c2:	e000      	b.n	801d2c6 <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801d2c4:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801d2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d2cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	1ad3      	subs	r3, r2, r3
}
 801d2d2:	0018      	movs	r0, r3
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	b00f      	add	sp, #60	; 0x3c
 801d2d8:	bd90      	pop	{r4, r7, pc}
 801d2da:	46c0      	nop			; (mov r8, r8)
 801d2dc:	0801f294 	.word	0x0801f294
 801d2e0:	0801f28c 	.word	0x0801f28c

0801d2e4 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801d2e4:	b580      	push	{r7, lr}
 801d2e6:	b082      	sub	sp, #8
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	2203      	movs	r2, #3
 801d2f0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	2200      	movs	r2, #0
 801d2f6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	2203      	movs	r2, #3
 801d2fc:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	2203      	movs	r2, #3
 801d302:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	2203      	movs	r2, #3
 801d308:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	2203      	movs	r2, #3
 801d30e:	715a      	strb	r2, [r3, #5]
}
 801d310:	46c0      	nop			; (mov r8, r8)
 801d312:	46bd      	mov	sp, r7
 801d314:	b002      	add	sp, #8
 801d316:	bd80      	pop	{r7, pc}

0801d318 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801d318:	b590      	push	{r4, r7, lr}
 801d31a:	b08b      	sub	sp, #44	; 0x2c
 801d31c:	af04      	add	r7, sp, #16
 801d31e:	60f8      	str	r0, [r7, #12]
 801d320:	607a      	str	r2, [r7, #4]
 801d322:	240b      	movs	r4, #11
 801d324:	193b      	adds	r3, r7, r4
 801d326:	1c0a      	adds	r2, r1, #0
 801d328:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d32e:	2116      	movs	r1, #22
 801d330:	187a      	adds	r2, r7, r1
 801d332:	18db      	adds	r3, r3, r3
 801d334:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801d336:	68fb      	ldr	r3, [r7, #12]
 801d338:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d33a:	193b      	adds	r3, r7, r4
 801d33c:	781b      	ldrb	r3, [r3, #0]
 801d33e:	b29a      	uxth	r2, r3
 801d340:	187b      	adds	r3, r7, r1
 801d342:	8819      	ldrh	r1, [r3, #0]
 801d344:	4b0f      	ldr	r3, [pc, #60]	; (801d384 <read_register16+0x6c>)
 801d346:	9302      	str	r3, [sp, #8]
 801d348:	2302      	movs	r3, #2
 801d34a:	9301      	str	r3, [sp, #4]
 801d34c:	2414      	movs	r4, #20
 801d34e:	193b      	adds	r3, r7, r4
 801d350:	9300      	str	r3, [sp, #0]
 801d352:	2301      	movs	r3, #1
 801d354:	f7ea feb4 	bl	80080c0 <HAL_I2C_Mem_Read>
 801d358:	1e03      	subs	r3, r0, #0
 801d35a:	d10e      	bne.n	801d37a <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801d35c:	0021      	movs	r1, r4
 801d35e:	187b      	adds	r3, r7, r1
 801d360:	785b      	ldrb	r3, [r3, #1]
 801d362:	021b      	lsls	r3, r3, #8
 801d364:	b21a      	sxth	r2, r3
 801d366:	187b      	adds	r3, r7, r1
 801d368:	781b      	ldrb	r3, [r3, #0]
 801d36a:	b21b      	sxth	r3, r3
 801d36c:	4313      	orrs	r3, r2
 801d36e:	b21b      	sxth	r3, r3
 801d370:	b29a      	uxth	r2, r3
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	801a      	strh	r2, [r3, #0]
		return true;
 801d376:	2301      	movs	r3, #1
 801d378:	e000      	b.n	801d37c <read_register16+0x64>
	} else
		return false;
 801d37a:	2300      	movs	r3, #0

}
 801d37c:	0018      	movs	r0, r3
 801d37e:	46bd      	mov	sp, r7
 801d380:	b007      	add	sp, #28
 801d382:	bd90      	pop	{r4, r7, pc}
 801d384:	00001388 	.word	0x00001388

0801d388 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801d388:	b5b0      	push	{r4, r5, r7, lr}
 801d38a:	b08a      	sub	sp, #40	; 0x28
 801d38c:	af04      	add	r7, sp, #16
 801d38e:	60f8      	str	r0, [r7, #12]
 801d390:	0008      	movs	r0, r1
 801d392:	607a      	str	r2, [r7, #4]
 801d394:	0019      	movs	r1, r3
 801d396:	240b      	movs	r4, #11
 801d398:	193b      	adds	r3, r7, r4
 801d39a:	1c02      	adds	r2, r0, #0
 801d39c:	701a      	strb	r2, [r3, #0]
 801d39e:	250a      	movs	r5, #10
 801d3a0:	197b      	adds	r3, r7, r5
 801d3a2:	1c0a      	adds	r2, r1, #0
 801d3a4:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d3aa:	2116      	movs	r1, #22
 801d3ac:	187a      	adds	r2, r7, r1
 801d3ae:	18db      	adds	r3, r3, r3
 801d3b0:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d3b6:	193b      	adds	r3, r7, r4
 801d3b8:	781b      	ldrb	r3, [r3, #0]
 801d3ba:	b29c      	uxth	r4, r3
 801d3bc:	197b      	adds	r3, r7, r5
 801d3be:	781b      	ldrb	r3, [r3, #0]
 801d3c0:	b29b      	uxth	r3, r3
 801d3c2:	187a      	adds	r2, r7, r1
 801d3c4:	8811      	ldrh	r1, [r2, #0]
 801d3c6:	4a09      	ldr	r2, [pc, #36]	; (801d3ec <read_data+0x64>)
 801d3c8:	9202      	str	r2, [sp, #8]
 801d3ca:	9301      	str	r3, [sp, #4]
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	9300      	str	r3, [sp, #0]
 801d3d0:	2301      	movs	r3, #1
 801d3d2:	0022      	movs	r2, r4
 801d3d4:	f7ea fe74 	bl	80080c0 <HAL_I2C_Mem_Read>
 801d3d8:	1e03      	subs	r3, r0, #0
 801d3da:	d101      	bne.n	801d3e0 <read_data+0x58>
		return 0;
 801d3dc:	2300      	movs	r3, #0
 801d3de:	e000      	b.n	801d3e2 <read_data+0x5a>
	else
		return 1;
 801d3e0:	2301      	movs	r3, #1

}
 801d3e2:	0018      	movs	r0, r3
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	b006      	add	sp, #24
 801d3e8:	bdb0      	pop	{r4, r5, r7, pc}
 801d3ea:	46c0      	nop			; (mov r8, r8)
 801d3ec:	00001388 	.word	0x00001388

0801d3f0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801d3f0:	b580      	push	{r7, lr}
 801d3f2:	b082      	sub	sp, #8
 801d3f4:	af00      	add	r7, sp, #0
 801d3f6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801d3f8:	687a      	ldr	r2, [r7, #4]
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	2188      	movs	r1, #136	; 0x88
 801d3fe:	0018      	movs	r0, r3
 801d400:	f7ff ff8a 	bl	801d318 <read_register16>
 801d404:	1e03      	subs	r3, r0, #0
 801d406:	d100      	bne.n	801d40a <read_calibration_data+0x1a>
 801d408:	e06d      	b.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	1c9a      	adds	r2, r3, #2
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	218a      	movs	r1, #138	; 0x8a
 801d412:	0018      	movs	r0, r3
 801d414:	f7ff ff80 	bl	801d318 <read_register16>
 801d418:	1e03      	subs	r3, r0, #0
 801d41a:	d100      	bne.n	801d41e <read_calibration_data+0x2e>
 801d41c:	e063      	b.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	1d1a      	adds	r2, r3, #4
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	218c      	movs	r1, #140	; 0x8c
 801d426:	0018      	movs	r0, r3
 801d428:	f7ff ff76 	bl	801d318 <read_register16>
 801d42c:	1e03      	subs	r3, r0, #0
 801d42e:	d05a      	beq.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	1d9a      	adds	r2, r3, #6
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	218e      	movs	r1, #142	; 0x8e
 801d438:	0018      	movs	r0, r3
 801d43a:	f7ff ff6d 	bl	801d318 <read_register16>
 801d43e:	1e03      	subs	r3, r0, #0
 801d440:	d051      	beq.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	3308      	adds	r3, #8
 801d446:	001a      	movs	r2, r3
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	2190      	movs	r1, #144	; 0x90
 801d44c:	0018      	movs	r0, r3
 801d44e:	f7ff ff63 	bl	801d318 <read_register16>
 801d452:	1e03      	subs	r3, r0, #0
 801d454:	d047      	beq.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	330a      	adds	r3, #10
 801d45a:	001a      	movs	r2, r3
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	2192      	movs	r1, #146	; 0x92
 801d460:	0018      	movs	r0, r3
 801d462:	f7ff ff59 	bl	801d318 <read_register16>
 801d466:	1e03      	subs	r3, r0, #0
 801d468:	d03d      	beq.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	330c      	adds	r3, #12
 801d46e:	001a      	movs	r2, r3
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	2194      	movs	r1, #148	; 0x94
 801d474:	0018      	movs	r0, r3
 801d476:	f7ff ff4f 	bl	801d318 <read_register16>
 801d47a:	1e03      	subs	r3, r0, #0
 801d47c:	d033      	beq.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	330e      	adds	r3, #14
 801d482:	001a      	movs	r2, r3
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	2196      	movs	r1, #150	; 0x96
 801d488:	0018      	movs	r0, r3
 801d48a:	f7ff ff45 	bl	801d318 <read_register16>
 801d48e:	1e03      	subs	r3, r0, #0
 801d490:	d029      	beq.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	3310      	adds	r3, #16
 801d496:	001a      	movs	r2, r3
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	2198      	movs	r1, #152	; 0x98
 801d49c:	0018      	movs	r0, r3
 801d49e:	f7ff ff3b 	bl	801d318 <read_register16>
 801d4a2:	1e03      	subs	r3, r0, #0
 801d4a4:	d01f      	beq.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	3312      	adds	r3, #18
 801d4aa:	001a      	movs	r2, r3
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	219a      	movs	r1, #154	; 0x9a
 801d4b0:	0018      	movs	r0, r3
 801d4b2:	f7ff ff31 	bl	801d318 <read_register16>
 801d4b6:	1e03      	subs	r3, r0, #0
 801d4b8:	d015      	beq.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	3314      	adds	r3, #20
 801d4be:	001a      	movs	r2, r3
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	219c      	movs	r1, #156	; 0x9c
 801d4c4:	0018      	movs	r0, r3
 801d4c6:	f7ff ff27 	bl	801d318 <read_register16>
 801d4ca:	1e03      	subs	r3, r0, #0
 801d4cc:	d00b      	beq.n	801d4e6 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	3316      	adds	r3, #22
 801d4d2:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	219e      	movs	r1, #158	; 0x9e
 801d4d8:	0018      	movs	r0, r3
 801d4da:	f7ff ff1d 	bl	801d318 <read_register16>
 801d4de:	1e03      	subs	r3, r0, #0
 801d4e0:	d001      	beq.n	801d4e6 <read_calibration_data+0xf6>

		return true;
 801d4e2:	2301      	movs	r3, #1
 801d4e4:	e000      	b.n	801d4e8 <read_calibration_data+0xf8>
	}

	return false;
 801d4e6:	2300      	movs	r3, #0
}
 801d4e8:	0018      	movs	r0, r3
 801d4ea:	46bd      	mov	sp, r7
 801d4ec:	b002      	add	sp, #8
 801d4ee:	bd80      	pop	{r7, pc}

0801d4f0 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801d4f0:	b5b0      	push	{r4, r5, r7, lr}
 801d4f2:	b084      	sub	sp, #16
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	3318      	adds	r3, #24
 801d4fc:	001a      	movs	r2, r3
 801d4fe:	6878      	ldr	r0, [r7, #4]
 801d500:	2301      	movs	r3, #1
 801d502:	21a1      	movs	r1, #161	; 0xa1
 801d504:	f7ff ff40 	bl	801d388 <read_data>
 801d508:	1e03      	subs	r3, r0, #0
 801d50a:	d14b      	bne.n	801d5a4 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	331a      	adds	r3, #26
 801d510:	001a      	movs	r2, r3
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	21e1      	movs	r1, #225	; 0xe1
 801d516:	0018      	movs	r0, r3
 801d518:	f7ff fefe 	bl	801d318 <read_register16>
 801d51c:	1e03      	subs	r3, r0, #0
 801d51e:	d041      	beq.n	801d5a4 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	331c      	adds	r3, #28
 801d524:	001a      	movs	r2, r3
 801d526:	6878      	ldr	r0, [r7, #4]
 801d528:	2301      	movs	r3, #1
 801d52a:	21e3      	movs	r1, #227	; 0xe3
 801d52c:	f7ff ff2c 	bl	801d388 <read_data>
 801d530:	1e03      	subs	r3, r0, #0
 801d532:	d137      	bne.n	801d5a4 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801d534:	240e      	movs	r4, #14
 801d536:	193a      	adds	r2, r7, r4
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	21e4      	movs	r1, #228	; 0xe4
 801d53c:	0018      	movs	r0, r3
 801d53e:	f7ff feeb 	bl	801d318 <read_register16>
 801d542:	1e03      	subs	r3, r0, #0
 801d544:	d02e      	beq.n	801d5a4 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801d546:	250c      	movs	r5, #12
 801d548:	197a      	adds	r2, r7, r5
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	21e5      	movs	r1, #229	; 0xe5
 801d54e:	0018      	movs	r0, r3
 801d550:	f7ff fee2 	bl	801d318 <read_register16>
 801d554:	1e03      	subs	r3, r0, #0
 801d556:	d025      	beq.n	801d5a4 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	3322      	adds	r3, #34	; 0x22
 801d55c:	001a      	movs	r2, r3
 801d55e:	6878      	ldr	r0, [r7, #4]
 801d560:	2301      	movs	r3, #1
 801d562:	21e7      	movs	r1, #231	; 0xe7
 801d564:	f7ff ff10 	bl	801d388 <read_data>
 801d568:	1e03      	subs	r3, r0, #0
 801d56a:	d11b      	bne.n	801d5a4 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801d56c:	193b      	adds	r3, r7, r4
 801d56e:	881b      	ldrh	r3, [r3, #0]
 801d570:	011b      	lsls	r3, r3, #4
 801d572:	b21a      	sxth	r2, r3
 801d574:	23ff      	movs	r3, #255	; 0xff
 801d576:	011b      	lsls	r3, r3, #4
 801d578:	4013      	ands	r3, r2
 801d57a:	b21a      	sxth	r2, r3
 801d57c:	193b      	adds	r3, r7, r4
 801d57e:	881b      	ldrh	r3, [r3, #0]
 801d580:	121b      	asrs	r3, r3, #8
 801d582:	b21b      	sxth	r3, r3
 801d584:	210f      	movs	r1, #15
 801d586:	400b      	ands	r3, r1
 801d588:	b21b      	sxth	r3, r3
 801d58a:	4313      	orrs	r3, r2
 801d58c:	b21a      	sxth	r2, r3
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801d592:	197b      	adds	r3, r7, r5
 801d594:	881b      	ldrh	r3, [r3, #0]
 801d596:	091b      	lsrs	r3, r3, #4
 801d598:	b29b      	uxth	r3, r3
 801d59a:	b21a      	sxth	r2, r3
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	841a      	strh	r2, [r3, #32]

		return true;
 801d5a0:	2301      	movs	r3, #1
 801d5a2:	e000      	b.n	801d5a6 <read_hum_calibration_data+0xb6>
	}

	return false;
 801d5a4:	2300      	movs	r3, #0
}
 801d5a6:	0018      	movs	r0, r3
 801d5a8:	46bd      	mov	sp, r7
 801d5aa:	b004      	add	sp, #16
 801d5ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d5b0 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801d5b0:	b580      	push	{r7, lr}
 801d5b2:	b088      	sub	sp, #32
 801d5b4:	af04      	add	r7, sp, #16
 801d5b6:	6078      	str	r0, [r7, #4]
 801d5b8:	0008      	movs	r0, r1
 801d5ba:	0011      	movs	r1, r2
 801d5bc:	1cfb      	adds	r3, r7, #3
 801d5be:	1c02      	adds	r2, r0, #0
 801d5c0:	701a      	strb	r2, [r3, #0]
 801d5c2:	1cbb      	adds	r3, r7, #2
 801d5c4:	1c0a      	adds	r2, r1, #0
 801d5c6:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d5cc:	210e      	movs	r1, #14
 801d5ce:	187a      	adds	r2, r7, r1
 801d5d0:	18db      	adds	r3, r3, r3
 801d5d2:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d5d8:	1cfb      	adds	r3, r7, #3
 801d5da:	781b      	ldrb	r3, [r3, #0]
 801d5dc:	b29a      	uxth	r2, r3
 801d5de:	187b      	adds	r3, r7, r1
 801d5e0:	8819      	ldrh	r1, [r3, #0]
 801d5e2:	4b09      	ldr	r3, [pc, #36]	; (801d608 <write_register8+0x58>)
 801d5e4:	9302      	str	r3, [sp, #8]
 801d5e6:	2301      	movs	r3, #1
 801d5e8:	9301      	str	r3, [sp, #4]
 801d5ea:	1cbb      	adds	r3, r7, #2
 801d5ec:	9300      	str	r3, [sp, #0]
 801d5ee:	2301      	movs	r3, #1
 801d5f0:	f7ea fc38 	bl	8007e64 <HAL_I2C_Mem_Write>
 801d5f4:	1e03      	subs	r3, r0, #0
 801d5f6:	d101      	bne.n	801d5fc <write_register8+0x4c>
		return false;
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	e000      	b.n	801d5fe <write_register8+0x4e>
	else
		return true;
 801d5fc:	2301      	movs	r3, #1
}
 801d5fe:	0018      	movs	r0, r3
 801d600:	46bd      	mov	sp, r7
 801d602:	b004      	add	sp, #16
 801d604:	bd80      	pop	{r7, pc}
 801d606:	46c0      	nop			; (mov r8, r8)
 801d608:	00002710 	.word	0x00002710

0801d60c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801d60c:	b590      	push	{r4, r7, lr}
 801d60e:	b085      	sub	sp, #20
 801d610:	af00      	add	r7, sp, #0
 801d612:	6078      	str	r0, [r7, #4]
 801d614:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d61a:	2b76      	cmp	r3, #118	; 0x76
 801d61c:	d005      	beq.n	801d62a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d622:	2b77      	cmp	r3, #119	; 0x77
 801d624:	d001      	beq.n	801d62a <bmp280_init+0x1e>

		return false;
 801d626:	2300      	movs	r3, #0
 801d628:	e0a3      	b.n	801d772 <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	3332      	adds	r3, #50	; 0x32
 801d62e:	001a      	movs	r2, r3
 801d630:	6878      	ldr	r0, [r7, #4]
 801d632:	2301      	movs	r3, #1
 801d634:	21d0      	movs	r1, #208	; 0xd0
 801d636:	f7ff fea7 	bl	801d388 <read_data>
 801d63a:	1e03      	subs	r3, r0, #0
 801d63c:	d001      	beq.n	801d642 <bmp280_init+0x36>
		return false;
 801d63e:	2300      	movs	r3, #0
 801d640:	e097      	b.n	801d772 <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	2232      	movs	r2, #50	; 0x32
 801d646:	5c9b      	ldrb	r3, [r3, r2]
 801d648:	2b58      	cmp	r3, #88	; 0x58
 801d64a:	d006      	beq.n	801d65a <bmp280_init+0x4e>
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	2232      	movs	r2, #50	; 0x32
 801d650:	5c9b      	ldrb	r3, [r3, r2]
 801d652:	2b60      	cmp	r3, #96	; 0x60
 801d654:	d001      	beq.n	801d65a <bmp280_init+0x4e>

		return false;
 801d656:	2300      	movs	r3, #0
 801d658:	e08b      	b.n	801d772 <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	22b6      	movs	r2, #182	; 0xb6
 801d65e:	21e0      	movs	r1, #224	; 0xe0
 801d660:	0018      	movs	r0, r3
 801d662:	f7ff ffa5 	bl	801d5b0 <write_register8>
 801d666:	1e03      	subs	r3, r0, #0
 801d668:	d001      	beq.n	801d66e <bmp280_init+0x62>
		return false;
 801d66a:	2300      	movs	r3, #0
 801d66c:	e081      	b.n	801d772 <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801d66e:	240c      	movs	r4, #12
 801d670:	193a      	adds	r2, r7, r4
 801d672:	6878      	ldr	r0, [r7, #4]
 801d674:	2301      	movs	r3, #1
 801d676:	21f3      	movs	r1, #243	; 0xf3
 801d678:	f7ff fe86 	bl	801d388 <read_data>
 801d67c:	1e03      	subs	r3, r0, #0
 801d67e:	d1f6      	bne.n	801d66e <bmp280_init+0x62>
				&& (status & 1) == 0)
 801d680:	193b      	adds	r3, r7, r4
 801d682:	781b      	ldrb	r3, [r3, #0]
 801d684:	001a      	movs	r2, r3
 801d686:	2301      	movs	r3, #1
 801d688:	4013      	ands	r3, r2
 801d68a:	d1f0      	bne.n	801d66e <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	0018      	movs	r0, r3
 801d690:	f7ff feae 	bl	801d3f0 <read_calibration_data>
 801d694:	0003      	movs	r3, r0
 801d696:	001a      	movs	r2, r3
 801d698:	2301      	movs	r3, #1
 801d69a:	4053      	eors	r3, r2
 801d69c:	b2db      	uxtb	r3, r3
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d100      	bne.n	801d6a4 <bmp280_init+0x98>
 801d6a2:	e001      	b.n	801d6a8 <bmp280_init+0x9c>
		return false;
 801d6a4:	2300      	movs	r3, #0
 801d6a6:	e064      	b.n	801d772 <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	2232      	movs	r2, #50	; 0x32
 801d6ac:	5c9b      	ldrb	r3, [r3, r2]
 801d6ae:	2b60      	cmp	r3, #96	; 0x60
 801d6b0:	d10c      	bne.n	801d6cc <bmp280_init+0xc0>
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	0018      	movs	r0, r3
 801d6b6:	f7ff ff1b 	bl	801d4f0 <read_hum_calibration_data>
 801d6ba:	0003      	movs	r3, r0
 801d6bc:	001a      	movs	r2, r3
 801d6be:	2301      	movs	r3, #1
 801d6c0:	4053      	eors	r3, r2
 801d6c2:	b2db      	uxtb	r3, r3
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d001      	beq.n	801d6cc <bmp280_init+0xc0>
		return false;
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	e052      	b.n	801d772 <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801d6cc:	683b      	ldr	r3, [r7, #0]
 801d6ce:	795b      	ldrb	r3, [r3, #5]
 801d6d0:	015b      	lsls	r3, r3, #5
 801d6d2:	b25a      	sxtb	r2, r3
 801d6d4:	683b      	ldr	r3, [r7, #0]
 801d6d6:	785b      	ldrb	r3, [r3, #1]
 801d6d8:	009b      	lsls	r3, r3, #2
 801d6da:	b25b      	sxtb	r3, r3
 801d6dc:	4313      	orrs	r3, r2
 801d6de:	b25a      	sxtb	r2, r3
 801d6e0:	210f      	movs	r1, #15
 801d6e2:	187b      	adds	r3, r7, r1
 801d6e4:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801d6e6:	187b      	adds	r3, r7, r1
 801d6e8:	781a      	ldrb	r2, [r3, #0]
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	21f5      	movs	r1, #245	; 0xf5
 801d6ee:	0018      	movs	r0, r3
 801d6f0:	f7ff ff5e 	bl	801d5b0 <write_register8>
 801d6f4:	1e03      	subs	r3, r0, #0
 801d6f6:	d001      	beq.n	801d6fc <bmp280_init+0xf0>
		return false;
 801d6f8:	2300      	movs	r3, #0
 801d6fa:	e03a      	b.n	801d772 <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801d6fc:	683b      	ldr	r3, [r7, #0]
 801d6fe:	781b      	ldrb	r3, [r3, #0]
 801d700:	2b01      	cmp	r3, #1
 801d702:	d102      	bne.n	801d70a <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801d704:	683b      	ldr	r3, [r7, #0]
 801d706:	2200      	movs	r2, #0
 801d708:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d70a:	683b      	ldr	r3, [r7, #0]
 801d70c:	78db      	ldrb	r3, [r3, #3]
 801d70e:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801d710:	b25a      	sxtb	r2, r3
 801d712:	683b      	ldr	r3, [r7, #0]
 801d714:	789b      	ldrb	r3, [r3, #2]
 801d716:	009b      	lsls	r3, r3, #2
 801d718:	b25b      	sxtb	r3, r3
 801d71a:	4313      	orrs	r3, r2
 801d71c:	b25a      	sxtb	r2, r3
 801d71e:	683b      	ldr	r3, [r7, #0]
 801d720:	781b      	ldrb	r3, [r3, #0]
 801d722:	b25b      	sxtb	r3, r3
 801d724:	4313      	orrs	r3, r2
 801d726:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d728:	230e      	movs	r3, #14
 801d72a:	18fb      	adds	r3, r7, r3
 801d72c:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	2232      	movs	r2, #50	; 0x32
 801d732:	5c9b      	ldrb	r3, [r3, r2]
 801d734:	2b60      	cmp	r3, #96	; 0x60
 801d736:	d10f      	bne.n	801d758 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801d738:	210d      	movs	r1, #13
 801d73a:	187b      	adds	r3, r7, r1
 801d73c:	683a      	ldr	r2, [r7, #0]
 801d73e:	7912      	ldrb	r2, [r2, #4]
 801d740:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801d742:	187b      	adds	r3, r7, r1
 801d744:	781a      	ldrb	r2, [r3, #0]
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	21f2      	movs	r1, #242	; 0xf2
 801d74a:	0018      	movs	r0, r3
 801d74c:	f7ff ff30 	bl	801d5b0 <write_register8>
 801d750:	1e03      	subs	r3, r0, #0
 801d752:	d001      	beq.n	801d758 <bmp280_init+0x14c>
			return false;
 801d754:	2300      	movs	r3, #0
 801d756:	e00c      	b.n	801d772 <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801d758:	230e      	movs	r3, #14
 801d75a:	18fb      	adds	r3, r7, r3
 801d75c:	781a      	ldrb	r2, [r3, #0]
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	21f4      	movs	r1, #244	; 0xf4
 801d762:	0018      	movs	r0, r3
 801d764:	f7ff ff24 	bl	801d5b0 <write_register8>
 801d768:	1e03      	subs	r3, r0, #0
 801d76a:	d001      	beq.n	801d770 <bmp280_init+0x164>
		return false;
 801d76c:	2300      	movs	r3, #0
 801d76e:	e000      	b.n	801d772 <bmp280_init+0x166>
	}

	return true;
 801d770:	2301      	movs	r3, #1
}
 801d772:	0018      	movs	r0, r3
 801d774:	46bd      	mov	sp, r7
 801d776:	b005      	add	sp, #20
 801d778:	bd90      	pop	{r4, r7, pc}

0801d77a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801d77a:	b580      	push	{r7, lr}
 801d77c:	b086      	sub	sp, #24
 801d77e:	af00      	add	r7, sp, #0
 801d780:	60f8      	str	r0, [r7, #12]
 801d782:	60b9      	str	r1, [r7, #8]
 801d784:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d786:	68bb      	ldr	r3, [r7, #8]
 801d788:	10da      	asrs	r2, r3, #3
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	881b      	ldrh	r3, [r3, #0]
 801d78e:	005b      	lsls	r3, r3, #1
 801d790:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801d792:	68fa      	ldr	r2, [r7, #12]
 801d794:	2102      	movs	r1, #2
 801d796:	5e52      	ldrsh	r2, [r2, r1]
 801d798:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d79a:	12db      	asrs	r3, r3, #11
 801d79c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d79e:	68bb      	ldr	r3, [r7, #8]
 801d7a0:	111b      	asrs	r3, r3, #4
 801d7a2:	68fa      	ldr	r2, [r7, #12]
 801d7a4:	8812      	ldrh	r2, [r2, #0]
 801d7a6:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801d7a8:	68ba      	ldr	r2, [r7, #8]
 801d7aa:	1112      	asrs	r2, r2, #4
 801d7ac:	68f9      	ldr	r1, [r7, #12]
 801d7ae:	8809      	ldrh	r1, [r1, #0]
 801d7b0:	1a52      	subs	r2, r2, r1
 801d7b2:	4353      	muls	r3, r2
 801d7b4:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801d7b6:	68fa      	ldr	r2, [r7, #12]
 801d7b8:	2104      	movs	r1, #4
 801d7ba:	5e52      	ldrsh	r2, [r2, r1]
 801d7bc:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d7be:	139b      	asrs	r3, r3, #14
 801d7c0:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801d7c2:	697a      	ldr	r2, [r7, #20]
 801d7c4:	693b      	ldr	r3, [r7, #16]
 801d7c6:	18d2      	adds	r2, r2, r3
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	681a      	ldr	r2, [r3, #0]
 801d7d0:	0013      	movs	r3, r2
 801d7d2:	009b      	lsls	r3, r3, #2
 801d7d4:	189b      	adds	r3, r3, r2
 801d7d6:	3380      	adds	r3, #128	; 0x80
 801d7d8:	121b      	asrs	r3, r3, #8
}
 801d7da:	0018      	movs	r0, r3
 801d7dc:	46bd      	mov	sp, r7
 801d7de:	b006      	add	sp, #24
 801d7e0:	bd80      	pop	{r7, pc}
	...

0801d7e4 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7e6:	b0af      	sub	sp, #188	; 0xbc
 801d7e8:	af00      	add	r7, sp, #0
 801d7ea:	239c      	movs	r3, #156	; 0x9c
 801d7ec:	18fe      	adds	r6, r7, r3
 801d7ee:	6030      	str	r0, [r6, #0]
 801d7f0:	2098      	movs	r0, #152	; 0x98
 801d7f2:	1838      	adds	r0, r7, r0
 801d7f4:	6001      	str	r1, [r0, #0]
 801d7f6:	2194      	movs	r1, #148	; 0x94
 801d7f8:	1878      	adds	r0, r7, r1
 801d7fa:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801d7fc:	187a      	adds	r2, r7, r1
 801d7fe:	6813      	ldr	r3, [r2, #0]
 801d800:	65bb      	str	r3, [r7, #88]	; 0x58
 801d802:	17db      	asrs	r3, r3, #31
 801d804:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d806:	4ace      	ldr	r2, [pc, #824]	; (801db40 <compensate_pressure+0x35c>)
 801d808:	2301      	movs	r3, #1
 801d80a:	425b      	negs	r3, r3
 801d80c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d80e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801d810:	1880      	adds	r0, r0, r2
 801d812:	4159      	adcs	r1, r3
 801d814:	0002      	movs	r2, r0
 801d816:	000b      	movs	r3, r1
 801d818:	26b0      	movs	r6, #176	; 0xb0
 801d81a:	19b9      	adds	r1, r7, r6
 801d81c:	600a      	str	r2, [r1, #0]
 801d81e:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801d820:	19ba      	adds	r2, r7, r6
 801d822:	6853      	ldr	r3, [r2, #4]
 801d824:	6812      	ldr	r2, [r2, #0]
 801d826:	19b9      	adds	r1, r7, r6
 801d828:	6808      	ldr	r0, [r1, #0]
 801d82a:	6849      	ldr	r1, [r1, #4]
 801d82c:	f7e2 fea6 	bl	800057c <__aeabi_lmul>
 801d830:	0002      	movs	r2, r0
 801d832:	000b      	movs	r3, r1
 801d834:	0010      	movs	r0, r2
 801d836:	0019      	movs	r1, r3
 801d838:	239c      	movs	r3, #156	; 0x9c
 801d83a:	18fa      	adds	r2, r7, r3
 801d83c:	6813      	ldr	r3, [r2, #0]
 801d83e:	2210      	movs	r2, #16
 801d840:	5e9b      	ldrsh	r3, [r3, r2]
 801d842:	653b      	str	r3, [r7, #80]	; 0x50
 801d844:	17db      	asrs	r3, r3, #31
 801d846:	657b      	str	r3, [r7, #84]	; 0x54
 801d848:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d84a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d84c:	f7e2 fe96 	bl	800057c <__aeabi_lmul>
 801d850:	0002      	movs	r2, r0
 801d852:	000b      	movs	r3, r1
 801d854:	21a8      	movs	r1, #168	; 0xa8
 801d856:	1878      	adds	r0, r7, r1
 801d858:	6002      	str	r2, [r0, #0]
 801d85a:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801d85c:	239c      	movs	r3, #156	; 0x9c
 801d85e:	18fa      	adds	r2, r7, r3
 801d860:	6813      	ldr	r3, [r2, #0]
 801d862:	220e      	movs	r2, #14
 801d864:	5e9b      	ldrsh	r3, [r3, r2]
 801d866:	64bb      	str	r3, [r7, #72]	; 0x48
 801d868:	17db      	asrs	r3, r3, #31
 801d86a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d86c:	19ba      	adds	r2, r7, r6
 801d86e:	6853      	ldr	r3, [r2, #4]
 801d870:	6812      	ldr	r2, [r2, #0]
 801d872:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d874:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d876:	f7e2 fe81 	bl	800057c <__aeabi_lmul>
 801d87a:	0002      	movs	r2, r0
 801d87c:	000b      	movs	r3, r1
 801d87e:	0bd1      	lsrs	r1, r2, #15
 801d880:	045d      	lsls	r5, r3, #17
 801d882:	430d      	orrs	r5, r1
 801d884:	0454      	lsls	r4, r2, #17
 801d886:	21a8      	movs	r1, #168	; 0xa8
 801d888:	187a      	adds	r2, r7, r1
 801d88a:	6853      	ldr	r3, [r2, #4]
 801d88c:	6812      	ldr	r2, [r2, #0]
 801d88e:	1912      	adds	r2, r2, r4
 801d890:	416b      	adcs	r3, r5
 801d892:	1878      	adds	r0, r7, r1
 801d894:	6002      	str	r2, [r0, #0]
 801d896:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801d898:	259c      	movs	r5, #156	; 0x9c
 801d89a:	197b      	adds	r3, r7, r5
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	220c      	movs	r2, #12
 801d8a0:	5e9b      	ldrsh	r3, [r3, r2]
 801d8a2:	643b      	str	r3, [r7, #64]	; 0x40
 801d8a4:	17db      	asrs	r3, r3, #31
 801d8a6:	647b      	str	r3, [r7, #68]	; 0x44
 801d8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d8aa:	00db      	lsls	r3, r3, #3
 801d8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d8ae:	2300      	movs	r3, #0
 801d8b0:	63bb      	str	r3, [r7, #56]	; 0x38
 801d8b2:	000c      	movs	r4, r1
 801d8b4:	187b      	adds	r3, r7, r1
 801d8b6:	681a      	ldr	r2, [r3, #0]
 801d8b8:	685b      	ldr	r3, [r3, #4]
 801d8ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d8bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d8be:	1812      	adds	r2, r2, r0
 801d8c0:	414b      	adcs	r3, r1
 801d8c2:	1939      	adds	r1, r7, r4
 801d8c4:	600a      	str	r2, [r1, #0]
 801d8c6:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d8c8:	0034      	movs	r4, r6
 801d8ca:	193b      	adds	r3, r7, r4
 801d8cc:	681a      	ldr	r2, [r3, #0]
 801d8ce:	685b      	ldr	r3, [r3, #4]
 801d8d0:	1939      	adds	r1, r7, r4
 801d8d2:	6808      	ldr	r0, [r1, #0]
 801d8d4:	6849      	ldr	r1, [r1, #4]
 801d8d6:	f7e2 fe51 	bl	800057c <__aeabi_lmul>
 801d8da:	0002      	movs	r2, r0
 801d8dc:	000b      	movs	r3, r1
 801d8de:	0010      	movs	r0, r2
 801d8e0:	0019      	movs	r1, r3
 801d8e2:	197b      	adds	r3, r7, r5
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	220a      	movs	r2, #10
 801d8e8:	5e9b      	ldrsh	r3, [r3, r2]
 801d8ea:	633b      	str	r3, [r7, #48]	; 0x30
 801d8ec:	17db      	asrs	r3, r3, #31
 801d8ee:	637b      	str	r3, [r7, #52]	; 0x34
 801d8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8f4:	f7e2 fe42 	bl	800057c <__aeabi_lmul>
 801d8f8:	0002      	movs	r2, r0
 801d8fa:	000b      	movs	r3, r1
 801d8fc:	0619      	lsls	r1, r3, #24
 801d8fe:	468c      	mov	ip, r1
 801d900:	0a10      	lsrs	r0, r2, #8
 801d902:	2688      	movs	r6, #136	; 0x88
 801d904:	19b9      	adds	r1, r7, r6
 801d906:	6008      	str	r0, [r1, #0]
 801d908:	19b8      	adds	r0, r7, r6
 801d90a:	6800      	ldr	r0, [r0, #0]
 801d90c:	4661      	mov	r1, ip
 801d90e:	4308      	orrs	r0, r1
 801d910:	19b9      	adds	r1, r7, r6
 801d912:	6008      	str	r0, [r1, #0]
 801d914:	121b      	asrs	r3, r3, #8
 801d916:	228c      	movs	r2, #140	; 0x8c
 801d918:	18ba      	adds	r2, r7, r2
 801d91a:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801d91c:	197b      	adds	r3, r7, r5
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	2208      	movs	r2, #8
 801d922:	5e9b      	ldrsh	r3, [r3, r2]
 801d924:	62bb      	str	r3, [r7, #40]	; 0x28
 801d926:	17db      	asrs	r3, r3, #31
 801d928:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d92a:	193b      	adds	r3, r7, r4
 801d92c:	681a      	ldr	r2, [r3, #0]
 801d92e:	685b      	ldr	r3, [r3, #4]
 801d930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d934:	f7e2 fe22 	bl	800057c <__aeabi_lmul>
 801d938:	0002      	movs	r2, r0
 801d93a:	000b      	movs	r3, r1
 801d93c:	0d11      	lsrs	r1, r2, #20
 801d93e:	468c      	mov	ip, r1
 801d940:	0318      	lsls	r0, r3, #12
 801d942:	2184      	movs	r1, #132	; 0x84
 801d944:	1879      	adds	r1, r7, r1
 801d946:	6008      	str	r0, [r1, #0]
 801d948:	2084      	movs	r0, #132	; 0x84
 801d94a:	1839      	adds	r1, r7, r0
 801d94c:	6808      	ldr	r0, [r1, #0]
 801d94e:	4661      	mov	r1, ip
 801d950:	4308      	orrs	r0, r1
 801d952:	2184      	movs	r1, #132	; 0x84
 801d954:	1879      	adds	r1, r7, r1
 801d956:	6008      	str	r0, [r1, #0]
 801d958:	0313      	lsls	r3, r2, #12
 801d95a:	2180      	movs	r1, #128	; 0x80
 801d95c:	187a      	adds	r2, r7, r1
 801d95e:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d960:	19bb      	adds	r3, r7, r6
 801d962:	681a      	ldr	r2, [r3, #0]
 801d964:	685b      	ldr	r3, [r3, #4]
 801d966:	1879      	adds	r1, r7, r1
 801d968:	6808      	ldr	r0, [r1, #0]
 801d96a:	6849      	ldr	r1, [r1, #4]
 801d96c:	1812      	adds	r2, r2, r0
 801d96e:	414b      	adcs	r3, r1
 801d970:	1939      	adds	r1, r7, r4
 801d972:	600a      	str	r2, [r1, #0]
 801d974:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801d976:	193b      	adds	r3, r7, r4
 801d978:	6818      	ldr	r0, [r3, #0]
 801d97a:	6859      	ldr	r1, [r3, #4]
 801d97c:	2200      	movs	r2, #0
 801d97e:	2380      	movs	r3, #128	; 0x80
 801d980:	021b      	lsls	r3, r3, #8
 801d982:	1880      	adds	r0, r0, r2
 801d984:	4159      	adcs	r1, r3
 801d986:	197b      	adds	r3, r7, r5
 801d988:	681b      	ldr	r3, [r3, #0]
 801d98a:	88db      	ldrh	r3, [r3, #6]
 801d98c:	623b      	str	r3, [r7, #32]
 801d98e:	2300      	movs	r3, #0
 801d990:	627b      	str	r3, [r7, #36]	; 0x24
 801d992:	6a3a      	ldr	r2, [r7, #32]
 801d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d996:	f7e2 fdf1 	bl	800057c <__aeabi_lmul>
 801d99a:	0002      	movs	r2, r0
 801d99c:	000b      	movs	r3, r1
 801d99e:	1059      	asrs	r1, r3, #1
 801d9a0:	1938      	adds	r0, r7, r4
 801d9a2:	6001      	str	r1, [r0, #0]
 801d9a4:	17db      	asrs	r3, r3, #31
 801d9a6:	21b4      	movs	r1, #180	; 0xb4
 801d9a8:	187a      	adds	r2, r7, r1
 801d9aa:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801d9ac:	193b      	adds	r3, r7, r4
 801d9ae:	681a      	ldr	r2, [r3, #0]
 801d9b0:	187b      	adds	r3, r7, r1
 801d9b2:	681b      	ldr	r3, [r3, #0]
 801d9b4:	431a      	orrs	r2, r3
 801d9b6:	d101      	bne.n	801d9bc <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	e0bc      	b.n	801db36 <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801d9bc:	2398      	movs	r3, #152	; 0x98
 801d9be:	18fb      	adds	r3, r7, r3
 801d9c0:	681a      	ldr	r2, [r3, #0]
 801d9c2:	2380      	movs	r3, #128	; 0x80
 801d9c4:	035b      	lsls	r3, r3, #13
 801d9c6:	1a9b      	subs	r3, r3, r2
 801d9c8:	24a0      	movs	r4, #160	; 0xa0
 801d9ca:	193a      	adds	r2, r7, r4
 801d9cc:	6013      	str	r3, [r2, #0]
 801d9ce:	17db      	asrs	r3, r3, #31
 801d9d0:	25a4      	movs	r5, #164	; 0xa4
 801d9d2:	197a      	adds	r2, r7, r5
 801d9d4:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801d9d6:	193b      	adds	r3, r7, r4
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	105b      	asrs	r3, r3, #1
 801d9dc:	61fb      	str	r3, [r7, #28]
 801d9de:	193b      	adds	r3, r7, r4
 801d9e0:	681b      	ldr	r3, [r3, #0]
 801d9e2:	07db      	lsls	r3, r3, #31
 801d9e4:	61bb      	str	r3, [r7, #24]
 801d9e6:	20a8      	movs	r0, #168	; 0xa8
 801d9e8:	183a      	adds	r2, r7, r0
 801d9ea:	6853      	ldr	r3, [r2, #4]
 801d9ec:	6812      	ldr	r2, [r2, #0]
 801d9ee:	69b8      	ldr	r0, [r7, #24]
 801d9f0:	69f9      	ldr	r1, [r7, #28]
 801d9f2:	1a80      	subs	r0, r0, r2
 801d9f4:	4199      	sbcs	r1, r3
 801d9f6:	4a53      	ldr	r2, [pc, #332]	; (801db44 <compensate_pressure+0x360>)
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	f7e2 fdbf 	bl	800057c <__aeabi_lmul>
 801d9fe:	0002      	movs	r2, r0
 801da00:	000b      	movs	r3, r1
 801da02:	0010      	movs	r0, r2
 801da04:	0019      	movs	r1, r3
 801da06:	23b0      	movs	r3, #176	; 0xb0
 801da08:	18fa      	adds	r2, r7, r3
 801da0a:	6853      	ldr	r3, [r2, #4]
 801da0c:	6812      	ldr	r2, [r2, #0]
 801da0e:	f7e2 fd71 	bl	80004f4 <__aeabi_ldivmod>
 801da12:	0002      	movs	r2, r0
 801da14:	000b      	movs	r3, r1
 801da16:	1939      	adds	r1, r7, r4
 801da18:	600a      	str	r2, [r1, #0]
 801da1a:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801da1c:	269c      	movs	r6, #156	; 0x9c
 801da1e:	19ba      	adds	r2, r7, r6
 801da20:	6813      	ldr	r3, [r2, #0]
 801da22:	2216      	movs	r2, #22
 801da24:	5e9b      	ldrsh	r3, [r3, r2]
 801da26:	613b      	str	r3, [r7, #16]
 801da28:	17db      	asrs	r3, r3, #31
 801da2a:	617b      	str	r3, [r7, #20]
 801da2c:	197a      	adds	r2, r7, r5
 801da2e:	6813      	ldr	r3, [r2, #0]
 801da30:	04da      	lsls	r2, r3, #19
 801da32:	1939      	adds	r1, r7, r4
 801da34:	680b      	ldr	r3, [r1, #0]
 801da36:	0b5b      	lsrs	r3, r3, #13
 801da38:	67bb      	str	r3, [r7, #120]	; 0x78
 801da3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801da3c:	4313      	orrs	r3, r2
 801da3e:	67bb      	str	r3, [r7, #120]	; 0x78
 801da40:	197a      	adds	r2, r7, r5
 801da42:	6813      	ldr	r3, [r2, #0]
 801da44:	135b      	asrs	r3, r3, #13
 801da46:	67fb      	str	r3, [r7, #124]	; 0x7c
 801da48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801da4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801da4c:	6938      	ldr	r0, [r7, #16]
 801da4e:	6979      	ldr	r1, [r7, #20]
 801da50:	f7e2 fd94 	bl	800057c <__aeabi_lmul>
 801da54:	0002      	movs	r2, r0
 801da56:	000b      	movs	r3, r1
 801da58:	0010      	movs	r0, r2
 801da5a:	0019      	movs	r1, r3
 801da5c:	197a      	adds	r2, r7, r5
 801da5e:	6813      	ldr	r3, [r2, #0]
 801da60:	04da      	lsls	r2, r3, #19
 801da62:	193b      	adds	r3, r7, r4
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	0b5b      	lsrs	r3, r3, #13
 801da68:	673b      	str	r3, [r7, #112]	; 0x70
 801da6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da6c:	4313      	orrs	r3, r2
 801da6e:	673b      	str	r3, [r7, #112]	; 0x70
 801da70:	197a      	adds	r2, r7, r5
 801da72:	6813      	ldr	r3, [r2, #0]
 801da74:	135b      	asrs	r3, r3, #13
 801da76:	677b      	str	r3, [r7, #116]	; 0x74
 801da78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801da7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da7c:	f7e2 fd7e 	bl	800057c <__aeabi_lmul>
 801da80:	0002      	movs	r2, r0
 801da82:	000b      	movs	r3, r1
 801da84:	01d9      	lsls	r1, r3, #7
 801da86:	0e50      	lsrs	r0, r2, #25
 801da88:	4301      	orrs	r1, r0
 801da8a:	25b0      	movs	r5, #176	; 0xb0
 801da8c:	1978      	adds	r0, r7, r5
 801da8e:	6001      	str	r1, [r0, #0]
 801da90:	165b      	asrs	r3, r3, #25
 801da92:	22b4      	movs	r2, #180	; 0xb4
 801da94:	18ba      	adds	r2, r7, r2
 801da96:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801da98:	19ba      	adds	r2, r7, r6
 801da9a:	6813      	ldr	r3, [r2, #0]
 801da9c:	2214      	movs	r2, #20
 801da9e:	5e9b      	ldrsh	r3, [r3, r2]
 801daa0:	60bb      	str	r3, [r7, #8]
 801daa2:	17db      	asrs	r3, r3, #31
 801daa4:	60fb      	str	r3, [r7, #12]
 801daa6:	193a      	adds	r2, r7, r4
 801daa8:	6853      	ldr	r3, [r2, #4]
 801daaa:	6812      	ldr	r2, [r2, #0]
 801daac:	68b8      	ldr	r0, [r7, #8]
 801daae:	68f9      	ldr	r1, [r7, #12]
 801dab0:	f7e2 fd64 	bl	800057c <__aeabi_lmul>
 801dab4:	0002      	movs	r2, r0
 801dab6:	000b      	movs	r3, r1
 801dab8:	0359      	lsls	r1, r3, #13
 801daba:	0cd0      	lsrs	r0, r2, #19
 801dabc:	4301      	orrs	r1, r0
 801dabe:	20a8      	movs	r0, #168	; 0xa8
 801dac0:	1838      	adds	r0, r7, r0
 801dac2:	6001      	str	r1, [r0, #0]
 801dac4:	14db      	asrs	r3, r3, #19
 801dac6:	22ac      	movs	r2, #172	; 0xac
 801dac8:	18ba      	adds	r2, r7, r2
 801daca:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801dacc:	193a      	adds	r2, r7, r4
 801dace:	6810      	ldr	r0, [r2, #0]
 801dad0:	6851      	ldr	r1, [r2, #4]
 801dad2:	197a      	adds	r2, r7, r5
 801dad4:	6853      	ldr	r3, [r2, #4]
 801dad6:	6812      	ldr	r2, [r2, #0]
 801dad8:	1880      	adds	r0, r0, r2
 801dada:	4159      	adcs	r1, r3
 801dadc:	23a8      	movs	r3, #168	; 0xa8
 801dade:	18fb      	adds	r3, r7, r3
 801dae0:	681a      	ldr	r2, [r3, #0]
 801dae2:	685b      	ldr	r3, [r3, #4]
 801dae4:	1812      	adds	r2, r2, r0
 801dae6:	414b      	adcs	r3, r1
 801dae8:	0619      	lsls	r1, r3, #24
 801daea:	0a10      	lsrs	r0, r2, #8
 801daec:	66b8      	str	r0, [r7, #104]	; 0x68
 801daee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801daf0:	4308      	orrs	r0, r1
 801daf2:	66b8      	str	r0, [r7, #104]	; 0x68
 801daf4:	121b      	asrs	r3, r3, #8
 801daf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 801daf8:	19bb      	adds	r3, r7, r6
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	2212      	movs	r2, #18
 801dafe:	5e9b      	ldrsh	r3, [r3, r2]
 801db00:	603b      	str	r3, [r7, #0]
 801db02:	17db      	asrs	r3, r3, #31
 801db04:	607b      	str	r3, [r7, #4]
 801db06:	6839      	ldr	r1, [r7, #0]
 801db08:	687a      	ldr	r2, [r7, #4]
 801db0a:	000b      	movs	r3, r1
 801db0c:	0f1b      	lsrs	r3, r3, #28
 801db0e:	0010      	movs	r0, r2
 801db10:	0100      	lsls	r0, r0, #4
 801db12:	6678      	str	r0, [r7, #100]	; 0x64
 801db14:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801db16:	4318      	orrs	r0, r3
 801db18:	6678      	str	r0, [r7, #100]	; 0x64
 801db1a:	000b      	movs	r3, r1
 801db1c:	011b      	lsls	r3, r3, #4
 801db1e:	663b      	str	r3, [r7, #96]	; 0x60
 801db20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801db22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801db24:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801db26:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801db28:	1812      	adds	r2, r2, r0
 801db2a:	414b      	adcs	r3, r1
 801db2c:	1939      	adds	r1, r7, r4
 801db2e:	600a      	str	r2, [r1, #0]
 801db30:	604b      	str	r3, [r1, #4]
	return p;
 801db32:	193b      	adds	r3, r7, r4
 801db34:	681b      	ldr	r3, [r3, #0]
}
 801db36:	0018      	movs	r0, r3
 801db38:	46bd      	mov	sp, r7
 801db3a:	b02f      	add	sp, #188	; 0xbc
 801db3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db3e:	46c0      	nop			; (mov r8, r8)
 801db40:	fffe0c00 	.word	0xfffe0c00
 801db44:	00000c35 	.word	0x00000c35

0801db48 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801db48:	b580      	push	{r7, lr}
 801db4a:	b086      	sub	sp, #24
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	60f8      	str	r0, [r7, #12]
 801db50:	60b9      	str	r1, [r7, #8]
 801db52:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	4a2c      	ldr	r2, [pc, #176]	; (801dc08 <compensate_humidity+0xc0>)
 801db58:	4694      	mov	ip, r2
 801db5a:	4463      	add	r3, ip
 801db5c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801db5e:	68bb      	ldr	r3, [r7, #8]
 801db60:	039a      	lsls	r2, r3, #14
 801db62:	68fb      	ldr	r3, [r7, #12]
 801db64:	211e      	movs	r1, #30
 801db66:	5e5b      	ldrsh	r3, [r3, r1]
 801db68:	051b      	lsls	r3, r3, #20
 801db6a:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	2120      	movs	r1, #32
 801db70:	5e5b      	ldrsh	r3, [r3, r1]
 801db72:	0019      	movs	r1, r3
 801db74:	697b      	ldr	r3, [r7, #20]
 801db76:	434b      	muls	r3, r1
 801db78:	1ad3      	subs	r3, r2, r3
 801db7a:	2280      	movs	r2, #128	; 0x80
 801db7c:	01d2      	lsls	r2, r2, #7
 801db7e:	4694      	mov	ip, r2
 801db80:	4463      	add	r3, ip
 801db82:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801db84:	68fa      	ldr	r2, [r7, #12]
 801db86:	2122      	movs	r1, #34	; 0x22
 801db88:	5652      	ldrsb	r2, [r2, r1]
 801db8a:	0011      	movs	r1, r2
 801db8c:	697a      	ldr	r2, [r7, #20]
 801db8e:	434a      	muls	r2, r1
 801db90:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801db92:	68f9      	ldr	r1, [r7, #12]
 801db94:	7f09      	ldrb	r1, [r1, #28]
 801db96:	0008      	movs	r0, r1
 801db98:	6979      	ldr	r1, [r7, #20]
 801db9a:	4341      	muls	r1, r0
 801db9c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801db9e:	2080      	movs	r0, #128	; 0x80
 801dba0:	0200      	lsls	r0, r0, #8
 801dba2:	4684      	mov	ip, r0
 801dba4:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801dba6:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801dba8:	1292      	asrs	r2, r2, #10
 801dbaa:	2180      	movs	r1, #128	; 0x80
 801dbac:	0389      	lsls	r1, r1, #14
 801dbae:	468c      	mov	ip, r1
 801dbb0:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801dbb2:	68f9      	ldr	r1, [r7, #12]
 801dbb4:	201a      	movs	r0, #26
 801dbb6:	5e09      	ldrsh	r1, [r1, r0]
 801dbb8:	434a      	muls	r2, r1
 801dbba:	2180      	movs	r1, #128	; 0x80
 801dbbc:	0189      	lsls	r1, r1, #6
 801dbbe:	468c      	mov	ip, r1
 801dbc0:	4462      	add	r2, ip
 801dbc2:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801dbc4:	4353      	muls	r3, r2
 801dbc6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801dbc8:	697b      	ldr	r3, [r7, #20]
 801dbca:	13db      	asrs	r3, r3, #15
 801dbcc:	697a      	ldr	r2, [r7, #20]
 801dbce:	13d2      	asrs	r2, r2, #15
 801dbd0:	4353      	muls	r3, r2
 801dbd2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801dbd4:	68fa      	ldr	r2, [r7, #12]
 801dbd6:	7e12      	ldrb	r2, [r2, #24]
 801dbd8:	4353      	muls	r3, r2
 801dbda:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801dbdc:	697a      	ldr	r2, [r7, #20]
 801dbde:	1ad3      	subs	r3, r2, r3
 801dbe0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801dbe2:	697b      	ldr	r3, [r7, #20]
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	da00      	bge.n	801dbea <compensate_humidity+0xa2>
 801dbe8:	2300      	movs	r3, #0
 801dbea:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801dbec:	697b      	ldr	r3, [r7, #20]
 801dbee:	22c8      	movs	r2, #200	; 0xc8
 801dbf0:	0552      	lsls	r2, r2, #21
 801dbf2:	4293      	cmp	r3, r2
 801dbf4:	dd01      	ble.n	801dbfa <compensate_humidity+0xb2>
 801dbf6:	23c8      	movs	r3, #200	; 0xc8
 801dbf8:	055b      	lsls	r3, r3, #21
 801dbfa:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801dbfc:	697b      	ldr	r3, [r7, #20]
 801dbfe:	131b      	asrs	r3, r3, #12
}
 801dc00:	0018      	movs	r0, r3
 801dc02:	46bd      	mov	sp, r7
 801dc04:	b006      	add	sp, #24
 801dc06:	bd80      	pop	{r7, pc}
 801dc08:	fffed400 	.word	0xfffed400

0801dc0c <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801dc0c:	b590      	push	{r4, r7, lr}
 801dc0e:	b08d      	sub	sp, #52	; 0x34
 801dc10:	af00      	add	r7, sp, #0
 801dc12:	60f8      	str	r0, [r7, #12]
 801dc14:	60b9      	str	r1, [r7, #8]
 801dc16:	607a      	str	r2, [r7, #4]
 801dc18:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	2232      	movs	r2, #50	; 0x32
 801dc1e:	5c9b      	ldrb	r3, [r3, r2]
 801dc20:	2b60      	cmp	r3, #96	; 0x60
 801dc22:	d007      	beq.n	801dc34 <bmp280_read_fixed+0x28>
		if (humidity)
 801dc24:	683b      	ldr	r3, [r7, #0]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d002      	beq.n	801dc30 <bmp280_read_fixed+0x24>
			*humidity = 0;
 801dc2a:	683b      	ldr	r3, [r7, #0]
 801dc2c:	2200      	movs	r2, #0
 801dc2e:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801dc30:	2300      	movs	r3, #0
 801dc32:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801dc34:	683b      	ldr	r3, [r7, #0]
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d001      	beq.n	801dc3e <bmp280_read_fixed+0x32>
 801dc3a:	2308      	movs	r3, #8
 801dc3c:	e000      	b.n	801dc40 <bmp280_read_fixed+0x34>
 801dc3e:	2306      	movs	r3, #6
 801dc40:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801dc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc44:	b2db      	uxtb	r3, r3
 801dc46:	2218      	movs	r2, #24
 801dc48:	18ba      	adds	r2, r7, r2
 801dc4a:	68f8      	ldr	r0, [r7, #12]
 801dc4c:	21f7      	movs	r1, #247	; 0xf7
 801dc4e:	f7ff fb9b 	bl	801d388 <read_data>
 801dc52:	1e03      	subs	r3, r0, #0
 801dc54:	d001      	beq.n	801dc5a <bmp280_read_fixed+0x4e>
		return false;
 801dc56:	2300      	movs	r3, #0
 801dc58:	e041      	b.n	801dcde <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801dc5a:	2418      	movs	r4, #24
 801dc5c:	193b      	adds	r3, r7, r4
 801dc5e:	781b      	ldrb	r3, [r3, #0]
 801dc60:	031a      	lsls	r2, r3, #12
 801dc62:	193b      	adds	r3, r7, r4
 801dc64:	785b      	ldrb	r3, [r3, #1]
 801dc66:	011b      	lsls	r3, r3, #4
 801dc68:	4313      	orrs	r3, r2
 801dc6a:	193a      	adds	r2, r7, r4
 801dc6c:	7892      	ldrb	r2, [r2, #2]
 801dc6e:	0912      	lsrs	r2, r2, #4
 801dc70:	b2d2      	uxtb	r2, r2
 801dc72:	4313      	orrs	r3, r2
 801dc74:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801dc76:	193b      	adds	r3, r7, r4
 801dc78:	78db      	ldrb	r3, [r3, #3]
 801dc7a:	031a      	lsls	r2, r3, #12
 801dc7c:	193b      	adds	r3, r7, r4
 801dc7e:	791b      	ldrb	r3, [r3, #4]
 801dc80:	011b      	lsls	r3, r3, #4
 801dc82:	4313      	orrs	r3, r2
 801dc84:	193a      	adds	r2, r7, r4
 801dc86:	7952      	ldrb	r2, [r2, #5]
 801dc88:	0912      	lsrs	r2, r2, #4
 801dc8a:	b2d2      	uxtb	r2, r2
 801dc8c:	4313      	orrs	r3, r2
 801dc8e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801dc90:	2314      	movs	r3, #20
 801dc92:	18fa      	adds	r2, r7, r3
 801dc94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	0018      	movs	r0, r3
 801dc9a:	f7ff fd6e 	bl	801d77a <compensate_temperature>
 801dc9e:	0002      	movs	r2, r0
 801dca0:	68bb      	ldr	r3, [r7, #8]
 801dca2:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801dca4:	697a      	ldr	r2, [r7, #20]
 801dca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	0018      	movs	r0, r3
 801dcac:	f7ff fd9a 	bl	801d7e4 <compensate_pressure>
 801dcb0:	0002      	movs	r2, r0
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801dcb6:	683b      	ldr	r3, [r7, #0]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d00f      	beq.n	801dcdc <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801dcbc:	193b      	adds	r3, r7, r4
 801dcbe:	799b      	ldrb	r3, [r3, #6]
 801dcc0:	021b      	lsls	r3, r3, #8
 801dcc2:	193a      	adds	r2, r7, r4
 801dcc4:	79d2      	ldrb	r2, [r2, #7]
 801dcc6:	4313      	orrs	r3, r2
 801dcc8:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801dcca:	697a      	ldr	r2, [r7, #20]
 801dccc:	6a39      	ldr	r1, [r7, #32]
 801dcce:	68fb      	ldr	r3, [r7, #12]
 801dcd0:	0018      	movs	r0, r3
 801dcd2:	f7ff ff39 	bl	801db48 <compensate_humidity>
 801dcd6:	0002      	movs	r2, r0
 801dcd8:	683b      	ldr	r3, [r7, #0]
 801dcda:	601a      	str	r2, [r3, #0]
	}

	return true;
 801dcdc:	2301      	movs	r3, #1
}
 801dcde:	0018      	movs	r0, r3
 801dce0:	46bd      	mov	sp, r7
 801dce2:	b00d      	add	sp, #52	; 0x34
 801dce4:	bd90      	pop	{r4, r7, pc}
	...

0801dce8 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 801dce8:	b580      	push	{r7, lr}
 801dcea:	b088      	sub	sp, #32
 801dcec:	af00      	add	r7, sp, #0
 801dcee:	60f8      	str	r0, [r7, #12]
 801dcf0:	60b9      	str	r1, [r7, #8]
 801dcf2:	607a      	str	r2, [r7, #4]
 801dcf4:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 801dcf6:	683b      	ldr	r3, [r7, #0]
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d002      	beq.n	801dd02 <bmp280_read_float+0x1a>
 801dcfc:	2314      	movs	r3, #20
 801dcfe:	18fb      	adds	r3, r7, r3
 801dd00:	e000      	b.n	801dd04 <bmp280_read_float+0x1c>
 801dd02:	2300      	movs	r3, #0
 801dd04:	2218      	movs	r2, #24
 801dd06:	18ba      	adds	r2, r7, r2
 801dd08:	211c      	movs	r1, #28
 801dd0a:	1879      	adds	r1, r7, r1
 801dd0c:	68f8      	ldr	r0, [r7, #12]
 801dd0e:	f7ff ff7d 	bl	801dc0c <bmp280_read_fixed>
 801dd12:	1e03      	subs	r3, r0, #0
 801dd14:	d02d      	beq.n	801dd72 <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 801dd16:	69fb      	ldr	r3, [r7, #28]
 801dd18:	0018      	movs	r0, r3
 801dd1a:	f7e3 f929 	bl	8000f70 <__aeabi_i2f>
 801dd1e:	1c03      	adds	r3, r0, #0
 801dd20:	4916      	ldr	r1, [pc, #88]	; (801dd7c <bmp280_read_float+0x94>)
 801dd22:	1c18      	adds	r0, r3, #0
 801dd24:	f7e2 fd72 	bl	800080c <__aeabi_fdiv>
 801dd28:	1c03      	adds	r3, r0, #0
 801dd2a:	1c1a      	adds	r2, r3, #0
 801dd2c:	68bb      	ldr	r3, [r7, #8]
 801dd2e:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 801dd30:	69bb      	ldr	r3, [r7, #24]
 801dd32:	0018      	movs	r0, r3
 801dd34:	f7e3 f962 	bl	8000ffc <__aeabi_ui2f>
 801dd38:	1c03      	adds	r3, r0, #0
 801dd3a:	2187      	movs	r1, #135	; 0x87
 801dd3c:	05c9      	lsls	r1, r1, #23
 801dd3e:	1c18      	adds	r0, r3, #0
 801dd40:	f7e2 fd64 	bl	800080c <__aeabi_fdiv>
 801dd44:	1c03      	adds	r3, r0, #0
 801dd46:	1c1a      	adds	r2, r3, #0
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	601a      	str	r2, [r3, #0]
		if (humidity)
 801dd4c:	683b      	ldr	r3, [r7, #0]
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d00d      	beq.n	801dd6e <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 801dd52:	697b      	ldr	r3, [r7, #20]
 801dd54:	0018      	movs	r0, r3
 801dd56:	f7e3 f951 	bl	8000ffc <__aeabi_ui2f>
 801dd5a:	1c03      	adds	r3, r0, #0
 801dd5c:	2189      	movs	r1, #137	; 0x89
 801dd5e:	05c9      	lsls	r1, r1, #23
 801dd60:	1c18      	adds	r0, r3, #0
 801dd62:	f7e2 fd53 	bl	800080c <__aeabi_fdiv>
 801dd66:	1c03      	adds	r3, r0, #0
 801dd68:	1c1a      	adds	r2, r3, #0
 801dd6a:	683b      	ldr	r3, [r7, #0]
 801dd6c:	601a      	str	r2, [r3, #0]
		return true;
 801dd6e:	2301      	movs	r3, #1
 801dd70:	e000      	b.n	801dd74 <bmp280_read_float+0x8c>
	}

	return false;
 801dd72:	2300      	movs	r3, #0
}
 801dd74:	0018      	movs	r0, r3
 801dd76:	46bd      	mov	sp, r7
 801dd78:	b008      	add	sp, #32
 801dd7a:	bd80      	pop	{r7, pc}
 801dd7c:	42c80000 	.word	0x42c80000

0801dd80 <__libc_init_array>:
 801dd80:	b570      	push	{r4, r5, r6, lr}
 801dd82:	2600      	movs	r6, #0
 801dd84:	4d0c      	ldr	r5, [pc, #48]	; (801ddb8 <__libc_init_array+0x38>)
 801dd86:	4c0d      	ldr	r4, [pc, #52]	; (801ddbc <__libc_init_array+0x3c>)
 801dd88:	1b64      	subs	r4, r4, r5
 801dd8a:	10a4      	asrs	r4, r4, #2
 801dd8c:	42a6      	cmp	r6, r4
 801dd8e:	d109      	bne.n	801dda4 <__libc_init_array+0x24>
 801dd90:	2600      	movs	r6, #0
 801dd92:	f000 f8b5 	bl	801df00 <_init>
 801dd96:	4d0a      	ldr	r5, [pc, #40]	; (801ddc0 <__libc_init_array+0x40>)
 801dd98:	4c0a      	ldr	r4, [pc, #40]	; (801ddc4 <__libc_init_array+0x44>)
 801dd9a:	1b64      	subs	r4, r4, r5
 801dd9c:	10a4      	asrs	r4, r4, #2
 801dd9e:	42a6      	cmp	r6, r4
 801dda0:	d105      	bne.n	801ddae <__libc_init_array+0x2e>
 801dda2:	bd70      	pop	{r4, r5, r6, pc}
 801dda4:	00b3      	lsls	r3, r6, #2
 801dda6:	58eb      	ldr	r3, [r5, r3]
 801dda8:	4798      	blx	r3
 801ddaa:	3601      	adds	r6, #1
 801ddac:	e7ee      	b.n	801dd8c <__libc_init_array+0xc>
 801ddae:	00b3      	lsls	r3, r6, #2
 801ddb0:	58eb      	ldr	r3, [r5, r3]
 801ddb2:	4798      	blx	r3
 801ddb4:	3601      	adds	r6, #1
 801ddb6:	e7f2      	b.n	801dd9e <__libc_init_array+0x1e>
 801ddb8:	0801f420 	.word	0x0801f420
 801ddbc:	0801f420 	.word	0x0801f420
 801ddc0:	0801f420 	.word	0x0801f420
 801ddc4:	0801f424 	.word	0x0801f424

0801ddc8 <memcpy>:
 801ddc8:	2300      	movs	r3, #0
 801ddca:	b510      	push	{r4, lr}
 801ddcc:	429a      	cmp	r2, r3
 801ddce:	d100      	bne.n	801ddd2 <memcpy+0xa>
 801ddd0:	bd10      	pop	{r4, pc}
 801ddd2:	5ccc      	ldrb	r4, [r1, r3]
 801ddd4:	54c4      	strb	r4, [r0, r3]
 801ddd6:	3301      	adds	r3, #1
 801ddd8:	e7f8      	b.n	801ddcc <memcpy+0x4>

0801ddda <memset>:
 801ddda:	0003      	movs	r3, r0
 801dddc:	1882      	adds	r2, r0, r2
 801ddde:	4293      	cmp	r3, r2
 801dde0:	d100      	bne.n	801dde4 <memset+0xa>
 801dde2:	4770      	bx	lr
 801dde4:	7019      	strb	r1, [r3, #0]
 801dde6:	3301      	adds	r3, #1
 801dde8:	e7f9      	b.n	801ddde <memset+0x4>
	...

0801ddec <floor>:
 801ddec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ddee:	004b      	lsls	r3, r1, #1
 801ddf0:	4a3d      	ldr	r2, [pc, #244]	; (801dee8 <floor+0xfc>)
 801ddf2:	0d5b      	lsrs	r3, r3, #21
 801ddf4:	189f      	adds	r7, r3, r2
 801ddf6:	4684      	mov	ip, r0
 801ddf8:	000e      	movs	r6, r1
 801ddfa:	000d      	movs	r5, r1
 801ddfc:	0004      	movs	r4, r0
 801ddfe:	9001      	str	r0, [sp, #4]
 801de00:	2f13      	cmp	r7, #19
 801de02:	dc34      	bgt.n	801de6e <floor+0x82>
 801de04:	2f00      	cmp	r7, #0
 801de06:	da16      	bge.n	801de36 <floor+0x4a>
 801de08:	4a38      	ldr	r2, [pc, #224]	; (801deec <floor+0x100>)
 801de0a:	4b39      	ldr	r3, [pc, #228]	; (801def0 <floor+0x104>)
 801de0c:	4660      	mov	r0, ip
 801de0e:	0031      	movs	r1, r6
 801de10:	f7e3 f930 	bl	8001074 <__aeabi_dadd>
 801de14:	2200      	movs	r2, #0
 801de16:	2300      	movs	r3, #0
 801de18:	f7e2 fb1e 	bl	8000458 <__aeabi_dcmpgt>
 801de1c:	2800      	cmp	r0, #0
 801de1e:	d007      	beq.n	801de30 <floor+0x44>
 801de20:	2e00      	cmp	r6, #0
 801de22:	da5d      	bge.n	801dee0 <floor+0xf4>
 801de24:	0073      	lsls	r3, r6, #1
 801de26:	085b      	lsrs	r3, r3, #1
 801de28:	431c      	orrs	r4, r3
 801de2a:	d001      	beq.n	801de30 <floor+0x44>
 801de2c:	2400      	movs	r4, #0
 801de2e:	4d31      	ldr	r5, [pc, #196]	; (801def4 <floor+0x108>)
 801de30:	46a4      	mov	ip, r4
 801de32:	002e      	movs	r6, r5
 801de34:	e029      	b.n	801de8a <floor+0x9e>
 801de36:	4b30      	ldr	r3, [pc, #192]	; (801def8 <floor+0x10c>)
 801de38:	413b      	asrs	r3, r7
 801de3a:	9300      	str	r3, [sp, #0]
 801de3c:	400b      	ands	r3, r1
 801de3e:	4303      	orrs	r3, r0
 801de40:	d023      	beq.n	801de8a <floor+0x9e>
 801de42:	4a2a      	ldr	r2, [pc, #168]	; (801deec <floor+0x100>)
 801de44:	4b2a      	ldr	r3, [pc, #168]	; (801def0 <floor+0x104>)
 801de46:	4660      	mov	r0, ip
 801de48:	0031      	movs	r1, r6
 801de4a:	f7e3 f913 	bl	8001074 <__aeabi_dadd>
 801de4e:	2200      	movs	r2, #0
 801de50:	2300      	movs	r3, #0
 801de52:	f7e2 fb01 	bl	8000458 <__aeabi_dcmpgt>
 801de56:	2800      	cmp	r0, #0
 801de58:	d0ea      	beq.n	801de30 <floor+0x44>
 801de5a:	2e00      	cmp	r6, #0
 801de5c:	da03      	bge.n	801de66 <floor+0x7a>
 801de5e:	2380      	movs	r3, #128	; 0x80
 801de60:	035b      	lsls	r3, r3, #13
 801de62:	413b      	asrs	r3, r7
 801de64:	18f5      	adds	r5, r6, r3
 801de66:	9b00      	ldr	r3, [sp, #0]
 801de68:	2400      	movs	r4, #0
 801de6a:	439d      	bics	r5, r3
 801de6c:	e7e0      	b.n	801de30 <floor+0x44>
 801de6e:	2f33      	cmp	r7, #51	; 0x33
 801de70:	dd0f      	ble.n	801de92 <floor+0xa6>
 801de72:	2380      	movs	r3, #128	; 0x80
 801de74:	00db      	lsls	r3, r3, #3
 801de76:	429f      	cmp	r7, r3
 801de78:	d107      	bne.n	801de8a <floor+0x9e>
 801de7a:	0002      	movs	r2, r0
 801de7c:	000b      	movs	r3, r1
 801de7e:	4660      	mov	r0, ip
 801de80:	0031      	movs	r1, r6
 801de82:	f7e3 f8f7 	bl	8001074 <__aeabi_dadd>
 801de86:	4684      	mov	ip, r0
 801de88:	000e      	movs	r6, r1
 801de8a:	4660      	mov	r0, ip
 801de8c:	0031      	movs	r1, r6
 801de8e:	b003      	add	sp, #12
 801de90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de92:	4a1a      	ldr	r2, [pc, #104]	; (801defc <floor+0x110>)
 801de94:	189b      	adds	r3, r3, r2
 801de96:	2201      	movs	r2, #1
 801de98:	4252      	negs	r2, r2
 801de9a:	40da      	lsrs	r2, r3
 801de9c:	9200      	str	r2, [sp, #0]
 801de9e:	4210      	tst	r0, r2
 801dea0:	d0f3      	beq.n	801de8a <floor+0x9e>
 801dea2:	4a12      	ldr	r2, [pc, #72]	; (801deec <floor+0x100>)
 801dea4:	4b12      	ldr	r3, [pc, #72]	; (801def0 <floor+0x104>)
 801dea6:	4660      	mov	r0, ip
 801dea8:	0031      	movs	r1, r6
 801deaa:	f7e3 f8e3 	bl	8001074 <__aeabi_dadd>
 801deae:	2200      	movs	r2, #0
 801deb0:	2300      	movs	r3, #0
 801deb2:	f7e2 fad1 	bl	8000458 <__aeabi_dcmpgt>
 801deb6:	2800      	cmp	r0, #0
 801deb8:	d0ba      	beq.n	801de30 <floor+0x44>
 801deba:	2e00      	cmp	r6, #0
 801debc:	da02      	bge.n	801dec4 <floor+0xd8>
 801debe:	2f14      	cmp	r7, #20
 801dec0:	d103      	bne.n	801deca <floor+0xde>
 801dec2:	3501      	adds	r5, #1
 801dec4:	9b00      	ldr	r3, [sp, #0]
 801dec6:	439c      	bics	r4, r3
 801dec8:	e7b2      	b.n	801de30 <floor+0x44>
 801deca:	2334      	movs	r3, #52	; 0x34
 801decc:	1bdf      	subs	r7, r3, r7
 801dece:	3b33      	subs	r3, #51	; 0x33
 801ded0:	40bb      	lsls	r3, r7
 801ded2:	18e4      	adds	r4, r4, r3
 801ded4:	9b01      	ldr	r3, [sp, #4]
 801ded6:	429c      	cmp	r4, r3
 801ded8:	419b      	sbcs	r3, r3
 801deda:	425b      	negs	r3, r3
 801dedc:	18f5      	adds	r5, r6, r3
 801dede:	e7f1      	b.n	801dec4 <floor+0xd8>
 801dee0:	2400      	movs	r4, #0
 801dee2:	0025      	movs	r5, r4
 801dee4:	e7a4      	b.n	801de30 <floor+0x44>
 801dee6:	46c0      	nop			; (mov r8, r8)
 801dee8:	fffffc01 	.word	0xfffffc01
 801deec:	8800759c 	.word	0x8800759c
 801def0:	7e37e43c 	.word	0x7e37e43c
 801def4:	bff00000 	.word	0xbff00000
 801def8:	000fffff 	.word	0x000fffff
 801defc:	fffffbed 	.word	0xfffffbed

0801df00 <_init>:
 801df00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df02:	46c0      	nop			; (mov r8, r8)
 801df04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df06:	bc08      	pop	{r3}
 801df08:	469e      	mov	lr, r3
 801df0a:	4770      	bx	lr

0801df0c <_fini>:
 801df0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df0e:	46c0      	nop			; (mov r8, r8)
 801df10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df12:	bc08      	pop	{r3}
 801df14:	469e      	mov	lr, r3
 801df16:	4770      	bx	lr
