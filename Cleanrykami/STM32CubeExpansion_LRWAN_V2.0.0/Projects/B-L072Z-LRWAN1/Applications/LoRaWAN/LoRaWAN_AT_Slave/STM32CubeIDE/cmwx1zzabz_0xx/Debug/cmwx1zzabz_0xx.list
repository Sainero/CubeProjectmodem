
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c48  0801efc4  0801efc4  0002efc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08021c0c  08021c0c  00031c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08021c14  08021c14  00031c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08021c18  08021c18  00031c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000000  08021c1c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000194c  200001ec  08021e08  000401ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  20001b38  08021e08  00041b38  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00051045  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a66d  00000000  00000000  00091259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002818  00000000  00000000  0009b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002450  00000000  00000000  0009e0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023c29  00000000  00000000  000a0530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039cb6  00000000  00000000  000c4159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b0504  00000000  00000000  000fde0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ae313  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008e28  00000000  00000000  001ae368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801efac 	.word	0x0801efac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0801efac 	.word	0x0801efac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fa69 	bl	80018ec <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9b3 	bl	8001790 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa5b 	bl	80018ec <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa51 	bl	80018ec <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d5 	bl	8001808 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9cb 	bl	8001808 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_uldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d111      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d10f      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000488:	2900      	cmp	r1, #0
 800048a:	d100      	bne.n	800048e <__aeabi_uldivmod+0xe>
 800048c:	2800      	cmp	r0, #0
 800048e:	d002      	beq.n	8000496 <__aeabi_uldivmod+0x16>
 8000490:	2100      	movs	r1, #0
 8000492:	43c9      	mvns	r1, r1
 8000494:	1c08      	adds	r0, r1, #0
 8000496:	b407      	push	{r0, r1, r2}
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <__aeabi_uldivmod+0x24>)
 800049a:	a102      	add	r1, pc, #8	; (adr r1, 80004a4 <__aeabi_uldivmod+0x24>)
 800049c:	1840      	adds	r0, r0, r1
 800049e:	9002      	str	r0, [sp, #8]
 80004a0:	bd03      	pop	{r0, r1, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	ffffff5d 	.word	0xffffff5d
 80004a8:	b403      	push	{r0, r1}
 80004aa:	4668      	mov	r0, sp
 80004ac:	b501      	push	{r0, lr}
 80004ae:	9802      	ldr	r0, [sp, #8]
 80004b0:	f000 f84c 	bl	800054c <__udivmoddi4>
 80004b4:	9b01      	ldr	r3, [sp, #4]
 80004b6:	469e      	mov	lr, r3
 80004b8:	b002      	add	sp, #8
 80004ba:	bc0c      	pop	{r2, r3}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_lmul>:
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	0415      	lsls	r5, r2, #16
 80004c4:	0c2d      	lsrs	r5, r5, #16
 80004c6:	000f      	movs	r7, r1
 80004c8:	0001      	movs	r1, r0
 80004ca:	002e      	movs	r6, r5
 80004cc:	46c6      	mov	lr, r8
 80004ce:	4684      	mov	ip, r0
 80004d0:	0400      	lsls	r0, r0, #16
 80004d2:	0c14      	lsrs	r4, r2, #16
 80004d4:	0c00      	lsrs	r0, r0, #16
 80004d6:	0c09      	lsrs	r1, r1, #16
 80004d8:	4346      	muls	r6, r0
 80004da:	434d      	muls	r5, r1
 80004dc:	4360      	muls	r0, r4
 80004de:	4361      	muls	r1, r4
 80004e0:	1940      	adds	r0, r0, r5
 80004e2:	0c34      	lsrs	r4, r6, #16
 80004e4:	1824      	adds	r4, r4, r0
 80004e6:	b500      	push	{lr}
 80004e8:	42a5      	cmp	r5, r4
 80004ea:	d903      	bls.n	80004f4 <__aeabi_lmul+0x34>
 80004ec:	2080      	movs	r0, #128	; 0x80
 80004ee:	0240      	lsls	r0, r0, #9
 80004f0:	4680      	mov	r8, r0
 80004f2:	4441      	add	r1, r8
 80004f4:	0c25      	lsrs	r5, r4, #16
 80004f6:	186d      	adds	r5, r5, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	4359      	muls	r1, r3
 80004fc:	437a      	muls	r2, r7
 80004fe:	0430      	lsls	r0, r6, #16
 8000500:	1949      	adds	r1, r1, r5
 8000502:	0424      	lsls	r4, r4, #16
 8000504:	0c00      	lsrs	r0, r0, #16
 8000506:	1820      	adds	r0, r4, r0
 8000508:	1889      	adds	r1, r1, r2
 800050a:	bc80      	pop	{r7}
 800050c:	46b8      	mov	r8, r7
 800050e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000510 <__aeabi_d2uiz>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2200      	movs	r2, #0
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <__aeabi_d2uiz+0x38>)
 8000516:	0004      	movs	r4, r0
 8000518:	000d      	movs	r5, r1
 800051a:	f7ff ffa7 	bl	800046c <__aeabi_dcmpge>
 800051e:	2800      	cmp	r0, #0
 8000520:	d104      	bne.n	800052c <__aeabi_d2uiz+0x1c>
 8000522:	0020      	movs	r0, r4
 8000524:	0029      	movs	r1, r5
 8000526:	f002 f84f 	bl	80025c8 <__aeabi_d2iz>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <__aeabi_d2uiz+0x38>)
 800052e:	2200      	movs	r2, #0
 8000530:	0020      	movs	r0, r4
 8000532:	0029      	movs	r1, r5
 8000534:	f001 fcb6 	bl	8001ea4 <__aeabi_dsub>
 8000538:	f002 f846 	bl	80025c8 <__aeabi_d2iz>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	061b      	lsls	r3, r3, #24
 8000540:	469c      	mov	ip, r3
 8000542:	4460      	add	r0, ip
 8000544:	e7f1      	b.n	800052a <__aeabi_d2uiz+0x1a>
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	41e00000 	.word	0x41e00000

0800054c <__udivmoddi4>:
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	4657      	mov	r7, sl
 8000550:	464e      	mov	r6, r9
 8000552:	4645      	mov	r5, r8
 8000554:	46de      	mov	lr, fp
 8000556:	b5e0      	push	{r5, r6, r7, lr}
 8000558:	0004      	movs	r4, r0
 800055a:	000d      	movs	r5, r1
 800055c:	4692      	mov	sl, r2
 800055e:	4699      	mov	r9, r3
 8000560:	b083      	sub	sp, #12
 8000562:	428b      	cmp	r3, r1
 8000564:	d830      	bhi.n	80005c8 <__udivmoddi4+0x7c>
 8000566:	d02d      	beq.n	80005c4 <__udivmoddi4+0x78>
 8000568:	4649      	mov	r1, r9
 800056a:	4650      	mov	r0, sl
 800056c:	f002 f91e 	bl	80027ac <__clzdi2>
 8000570:	0029      	movs	r1, r5
 8000572:	0006      	movs	r6, r0
 8000574:	0020      	movs	r0, r4
 8000576:	f002 f919 	bl	80027ac <__clzdi2>
 800057a:	1a33      	subs	r3, r6, r0
 800057c:	4698      	mov	r8, r3
 800057e:	3b20      	subs	r3, #32
 8000580:	469b      	mov	fp, r3
 8000582:	d433      	bmi.n	80005ec <__udivmoddi4+0xa0>
 8000584:	465a      	mov	r2, fp
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	4642      	mov	r2, r8
 800058c:	001f      	movs	r7, r3
 800058e:	4653      	mov	r3, sl
 8000590:	4093      	lsls	r3, r2
 8000592:	001e      	movs	r6, r3
 8000594:	42af      	cmp	r7, r5
 8000596:	d83a      	bhi.n	800060e <__udivmoddi4+0xc2>
 8000598:	42af      	cmp	r7, r5
 800059a:	d100      	bne.n	800059e <__udivmoddi4+0x52>
 800059c:	e078      	b.n	8000690 <__udivmoddi4+0x144>
 800059e:	465b      	mov	r3, fp
 80005a0:	1ba4      	subs	r4, r4, r6
 80005a2:	41bd      	sbcs	r5, r7
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	da00      	bge.n	80005aa <__udivmoddi4+0x5e>
 80005a8:	e075      	b.n	8000696 <__udivmoddi4+0x14a>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	465a      	mov	r2, fp
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	4642      	mov	r2, r8
 80005be:	4093      	lsls	r3, r2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	e028      	b.n	8000616 <__udivmoddi4+0xca>
 80005c4:	4282      	cmp	r2, r0
 80005c6:	d9cf      	bls.n	8000568 <__udivmoddi4+0x1c>
 80005c8:	2200      	movs	r2, #0
 80005ca:	2300      	movs	r3, #0
 80005cc:	9200      	str	r2, [sp, #0]
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <__udivmoddi4+0x8e>
 80005d6:	601c      	str	r4, [r3, #0]
 80005d8:	605d      	str	r5, [r3, #4]
 80005da:	9800      	ldr	r0, [sp, #0]
 80005dc:	9901      	ldr	r1, [sp, #4]
 80005de:	b003      	add	sp, #12
 80005e0:	bcf0      	pop	{r4, r5, r6, r7}
 80005e2:	46bb      	mov	fp, r7
 80005e4:	46b2      	mov	sl, r6
 80005e6:	46a9      	mov	r9, r5
 80005e8:	46a0      	mov	r8, r4
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	4642      	mov	r2, r8
 80005ee:	2320      	movs	r3, #32
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	4652      	mov	r2, sl
 80005f4:	40da      	lsrs	r2, r3
 80005f6:	4641      	mov	r1, r8
 80005f8:	0013      	movs	r3, r2
 80005fa:	464a      	mov	r2, r9
 80005fc:	408a      	lsls	r2, r1
 80005fe:	0017      	movs	r7, r2
 8000600:	4642      	mov	r2, r8
 8000602:	431f      	orrs	r7, r3
 8000604:	4653      	mov	r3, sl
 8000606:	4093      	lsls	r3, r2
 8000608:	001e      	movs	r6, r3
 800060a:	42af      	cmp	r7, r5
 800060c:	d9c4      	bls.n	8000598 <__udivmoddi4+0x4c>
 800060e:	2200      	movs	r2, #0
 8000610:	2300      	movs	r3, #0
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	4643      	mov	r3, r8
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0d9      	beq.n	80005d0 <__udivmoddi4+0x84>
 800061c:	07fb      	lsls	r3, r7, #31
 800061e:	0872      	lsrs	r2, r6, #1
 8000620:	431a      	orrs	r2, r3
 8000622:	4646      	mov	r6, r8
 8000624:	087b      	lsrs	r3, r7, #1
 8000626:	e00e      	b.n	8000646 <__udivmoddi4+0xfa>
 8000628:	42ab      	cmp	r3, r5
 800062a:	d101      	bne.n	8000630 <__udivmoddi4+0xe4>
 800062c:	42a2      	cmp	r2, r4
 800062e:	d80c      	bhi.n	800064a <__udivmoddi4+0xfe>
 8000630:	1aa4      	subs	r4, r4, r2
 8000632:	419d      	sbcs	r5, r3
 8000634:	2001      	movs	r0, #1
 8000636:	1924      	adds	r4, r4, r4
 8000638:	416d      	adcs	r5, r5
 800063a:	2100      	movs	r1, #0
 800063c:	3e01      	subs	r6, #1
 800063e:	1824      	adds	r4, r4, r0
 8000640:	414d      	adcs	r5, r1
 8000642:	2e00      	cmp	r6, #0
 8000644:	d006      	beq.n	8000654 <__udivmoddi4+0x108>
 8000646:	42ab      	cmp	r3, r5
 8000648:	d9ee      	bls.n	8000628 <__udivmoddi4+0xdc>
 800064a:	3e01      	subs	r6, #1
 800064c:	1924      	adds	r4, r4, r4
 800064e:	416d      	adcs	r5, r5
 8000650:	2e00      	cmp	r6, #0
 8000652:	d1f8      	bne.n	8000646 <__udivmoddi4+0xfa>
 8000654:	9800      	ldr	r0, [sp, #0]
 8000656:	9901      	ldr	r1, [sp, #4]
 8000658:	465b      	mov	r3, fp
 800065a:	1900      	adds	r0, r0, r4
 800065c:	4169      	adcs	r1, r5
 800065e:	2b00      	cmp	r3, #0
 8000660:	db24      	blt.n	80006ac <__udivmoddi4+0x160>
 8000662:	002b      	movs	r3, r5
 8000664:	465a      	mov	r2, fp
 8000666:	4644      	mov	r4, r8
 8000668:	40d3      	lsrs	r3, r2
 800066a:	002a      	movs	r2, r5
 800066c:	40e2      	lsrs	r2, r4
 800066e:	001c      	movs	r4, r3
 8000670:	465b      	mov	r3, fp
 8000672:	0015      	movs	r5, r2
 8000674:	2b00      	cmp	r3, #0
 8000676:	db2a      	blt.n	80006ce <__udivmoddi4+0x182>
 8000678:	0026      	movs	r6, r4
 800067a:	409e      	lsls	r6, r3
 800067c:	0033      	movs	r3, r6
 800067e:	0026      	movs	r6, r4
 8000680:	4647      	mov	r7, r8
 8000682:	40be      	lsls	r6, r7
 8000684:	0032      	movs	r2, r6
 8000686:	1a80      	subs	r0, r0, r2
 8000688:	4199      	sbcs	r1, r3
 800068a:	9000      	str	r0, [sp, #0]
 800068c:	9101      	str	r1, [sp, #4]
 800068e:	e79f      	b.n	80005d0 <__udivmoddi4+0x84>
 8000690:	42a3      	cmp	r3, r4
 8000692:	d8bc      	bhi.n	800060e <__udivmoddi4+0xc2>
 8000694:	e783      	b.n	800059e <__udivmoddi4+0x52>
 8000696:	4642      	mov	r2, r8
 8000698:	2320      	movs	r3, #32
 800069a:	2100      	movs	r1, #0
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	2200      	movs	r2, #0
 80006a0:	9100      	str	r1, [sp, #0]
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	2201      	movs	r2, #1
 80006a6:	40da      	lsrs	r2, r3
 80006a8:	9201      	str	r2, [sp, #4]
 80006aa:	e786      	b.n	80005ba <__udivmoddi4+0x6e>
 80006ac:	4642      	mov	r2, r8
 80006ae:	2320      	movs	r3, #32
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	002a      	movs	r2, r5
 80006b4:	4646      	mov	r6, r8
 80006b6:	409a      	lsls	r2, r3
 80006b8:	0023      	movs	r3, r4
 80006ba:	40f3      	lsrs	r3, r6
 80006bc:	4644      	mov	r4, r8
 80006be:	4313      	orrs	r3, r2
 80006c0:	002a      	movs	r2, r5
 80006c2:	40e2      	lsrs	r2, r4
 80006c4:	001c      	movs	r4, r3
 80006c6:	465b      	mov	r3, fp
 80006c8:	0015      	movs	r5, r2
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	dad4      	bge.n	8000678 <__udivmoddi4+0x12c>
 80006ce:	4642      	mov	r2, r8
 80006d0:	002f      	movs	r7, r5
 80006d2:	2320      	movs	r3, #32
 80006d4:	0026      	movs	r6, r4
 80006d6:	4097      	lsls	r7, r2
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	40de      	lsrs	r6, r3
 80006dc:	003b      	movs	r3, r7
 80006de:	4333      	orrs	r3, r6
 80006e0:	e7cd      	b.n	800067e <__udivmoddi4+0x132>
 80006e2:	46c0      	nop			; (mov r8, r8)

080006e4 <__aeabi_fsub>:
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	4646      	mov	r6, r8
 80006e8:	46d6      	mov	lr, sl
 80006ea:	464f      	mov	r7, r9
 80006ec:	0243      	lsls	r3, r0, #9
 80006ee:	0a5b      	lsrs	r3, r3, #9
 80006f0:	00da      	lsls	r2, r3, #3
 80006f2:	4694      	mov	ip, r2
 80006f4:	024a      	lsls	r2, r1, #9
 80006f6:	b5c0      	push	{r6, r7, lr}
 80006f8:	0044      	lsls	r4, r0, #1
 80006fa:	0a56      	lsrs	r6, r2, #9
 80006fc:	1c05      	adds	r5, r0, #0
 80006fe:	46b0      	mov	r8, r6
 8000700:	0e24      	lsrs	r4, r4, #24
 8000702:	004e      	lsls	r6, r1, #1
 8000704:	0992      	lsrs	r2, r2, #6
 8000706:	001f      	movs	r7, r3
 8000708:	0020      	movs	r0, r4
 800070a:	4692      	mov	sl, r2
 800070c:	0fed      	lsrs	r5, r5, #31
 800070e:	0e36      	lsrs	r6, r6, #24
 8000710:	0fc9      	lsrs	r1, r1, #31
 8000712:	2eff      	cmp	r6, #255	; 0xff
 8000714:	d100      	bne.n	8000718 <__aeabi_fsub+0x34>
 8000716:	e07f      	b.n	8000818 <__aeabi_fsub+0x134>
 8000718:	2201      	movs	r2, #1
 800071a:	4051      	eors	r1, r2
 800071c:	428d      	cmp	r5, r1
 800071e:	d051      	beq.n	80007c4 <__aeabi_fsub+0xe0>
 8000720:	1ba2      	subs	r2, r4, r6
 8000722:	4691      	mov	r9, r2
 8000724:	2a00      	cmp	r2, #0
 8000726:	dc00      	bgt.n	800072a <__aeabi_fsub+0x46>
 8000728:	e07e      	b.n	8000828 <__aeabi_fsub+0x144>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fsub+0x4c>
 800072e:	e099      	b.n	8000864 <__aeabi_fsub+0x180>
 8000730:	2cff      	cmp	r4, #255	; 0xff
 8000732:	d100      	bne.n	8000736 <__aeabi_fsub+0x52>
 8000734:	e08c      	b.n	8000850 <__aeabi_fsub+0x16c>
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	4652      	mov	r2, sl
 800073a:	04db      	lsls	r3, r3, #19
 800073c:	431a      	orrs	r2, r3
 800073e:	4692      	mov	sl, r2
 8000740:	464a      	mov	r2, r9
 8000742:	2301      	movs	r3, #1
 8000744:	2a1b      	cmp	r2, #27
 8000746:	dc08      	bgt.n	800075a <__aeabi_fsub+0x76>
 8000748:	4653      	mov	r3, sl
 800074a:	2120      	movs	r1, #32
 800074c:	40d3      	lsrs	r3, r2
 800074e:	1a89      	subs	r1, r1, r2
 8000750:	4652      	mov	r2, sl
 8000752:	408a      	lsls	r2, r1
 8000754:	1e51      	subs	r1, r2, #1
 8000756:	418a      	sbcs	r2, r1
 8000758:	4313      	orrs	r3, r2
 800075a:	4662      	mov	r2, ip
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	015a      	lsls	r2, r3, #5
 8000760:	d400      	bmi.n	8000764 <__aeabi_fsub+0x80>
 8000762:	e0f3      	b.n	800094c <__aeabi_fsub+0x268>
 8000764:	019b      	lsls	r3, r3, #6
 8000766:	099e      	lsrs	r6, r3, #6
 8000768:	0030      	movs	r0, r6
 800076a:	f002 f801 	bl	8002770 <__clzsi2>
 800076e:	3805      	subs	r0, #5
 8000770:	4086      	lsls	r6, r0
 8000772:	4284      	cmp	r4, r0
 8000774:	dd00      	ble.n	8000778 <__aeabi_fsub+0x94>
 8000776:	e0f7      	b.n	8000968 <__aeabi_fsub+0x284>
 8000778:	0032      	movs	r2, r6
 800077a:	1b04      	subs	r4, r0, r4
 800077c:	2020      	movs	r0, #32
 800077e:	3401      	adds	r4, #1
 8000780:	40e2      	lsrs	r2, r4
 8000782:	1b04      	subs	r4, r0, r4
 8000784:	40a6      	lsls	r6, r4
 8000786:	0033      	movs	r3, r6
 8000788:	1e5e      	subs	r6, r3, #1
 800078a:	41b3      	sbcs	r3, r6
 800078c:	2400      	movs	r4, #0
 800078e:	4313      	orrs	r3, r2
 8000790:	075a      	lsls	r2, r3, #29
 8000792:	d004      	beq.n	800079e <__aeabi_fsub+0xba>
 8000794:	220f      	movs	r2, #15
 8000796:	401a      	ands	r2, r3
 8000798:	2a04      	cmp	r2, #4
 800079a:	d000      	beq.n	800079e <__aeabi_fsub+0xba>
 800079c:	3304      	adds	r3, #4
 800079e:	015a      	lsls	r2, r3, #5
 80007a0:	d400      	bmi.n	80007a4 <__aeabi_fsub+0xc0>
 80007a2:	e0d6      	b.n	8000952 <__aeabi_fsub+0x26e>
 80007a4:	1c62      	adds	r2, r4, #1
 80007a6:	2cfe      	cmp	r4, #254	; 0xfe
 80007a8:	d100      	bne.n	80007ac <__aeabi_fsub+0xc8>
 80007aa:	e0da      	b.n	8000962 <__aeabi_fsub+0x27e>
 80007ac:	019b      	lsls	r3, r3, #6
 80007ae:	0a5f      	lsrs	r7, r3, #9
 80007b0:	b2d0      	uxtb	r0, r2
 80007b2:	05c0      	lsls	r0, r0, #23
 80007b4:	4338      	orrs	r0, r7
 80007b6:	07ed      	lsls	r5, r5, #31
 80007b8:	4328      	orrs	r0, r5
 80007ba:	bce0      	pop	{r5, r6, r7}
 80007bc:	46ba      	mov	sl, r7
 80007be:	46b1      	mov	r9, r6
 80007c0:	46a8      	mov	r8, r5
 80007c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c4:	1ba2      	subs	r2, r4, r6
 80007c6:	4691      	mov	r9, r2
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	dd63      	ble.n	8000894 <__aeabi_fsub+0x1b0>
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fsub+0xee>
 80007d0:	e099      	b.n	8000906 <__aeabi_fsub+0x222>
 80007d2:	2cff      	cmp	r4, #255	; 0xff
 80007d4:	d03c      	beq.n	8000850 <__aeabi_fsub+0x16c>
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	4652      	mov	r2, sl
 80007da:	04db      	lsls	r3, r3, #19
 80007dc:	431a      	orrs	r2, r3
 80007de:	4692      	mov	sl, r2
 80007e0:	464a      	mov	r2, r9
 80007e2:	2301      	movs	r3, #1
 80007e4:	2a1b      	cmp	r2, #27
 80007e6:	dc08      	bgt.n	80007fa <__aeabi_fsub+0x116>
 80007e8:	4653      	mov	r3, sl
 80007ea:	2120      	movs	r1, #32
 80007ec:	40d3      	lsrs	r3, r2
 80007ee:	1a89      	subs	r1, r1, r2
 80007f0:	4652      	mov	r2, sl
 80007f2:	408a      	lsls	r2, r1
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	418a      	sbcs	r2, r1
 80007f8:	4313      	orrs	r3, r2
 80007fa:	4463      	add	r3, ip
 80007fc:	015a      	lsls	r2, r3, #5
 80007fe:	d400      	bmi.n	8000802 <__aeabi_fsub+0x11e>
 8000800:	e0a4      	b.n	800094c <__aeabi_fsub+0x268>
 8000802:	3401      	adds	r4, #1
 8000804:	2cff      	cmp	r4, #255	; 0xff
 8000806:	d100      	bne.n	800080a <__aeabi_fsub+0x126>
 8000808:	e0ab      	b.n	8000962 <__aeabi_fsub+0x27e>
 800080a:	2201      	movs	r2, #1
 800080c:	4997      	ldr	r1, [pc, #604]	; (8000a6c <__aeabi_fsub+0x388>)
 800080e:	401a      	ands	r2, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	400b      	ands	r3, r1
 8000814:	4313      	orrs	r3, r2
 8000816:	e7bb      	b.n	8000790 <__aeabi_fsub+0xac>
 8000818:	2a00      	cmp	r2, #0
 800081a:	d032      	beq.n	8000882 <__aeabi_fsub+0x19e>
 800081c:	428d      	cmp	r5, r1
 800081e:	d035      	beq.n	800088c <__aeabi_fsub+0x1a8>
 8000820:	22ff      	movs	r2, #255	; 0xff
 8000822:	4252      	negs	r2, r2
 8000824:	4691      	mov	r9, r2
 8000826:	44a1      	add	r9, r4
 8000828:	464a      	mov	r2, r9
 800082a:	2a00      	cmp	r2, #0
 800082c:	d051      	beq.n	80008d2 <__aeabi_fsub+0x1ee>
 800082e:	1b30      	subs	r0, r6, r4
 8000830:	2c00      	cmp	r4, #0
 8000832:	d000      	beq.n	8000836 <__aeabi_fsub+0x152>
 8000834:	e09c      	b.n	8000970 <__aeabi_fsub+0x28c>
 8000836:	4663      	mov	r3, ip
 8000838:	2b00      	cmp	r3, #0
 800083a:	d100      	bne.n	800083e <__aeabi_fsub+0x15a>
 800083c:	e0df      	b.n	80009fe <__aeabi_fsub+0x31a>
 800083e:	3801      	subs	r0, #1
 8000840:	2800      	cmp	r0, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fsub+0x162>
 8000844:	e0f7      	b.n	8000a36 <__aeabi_fsub+0x352>
 8000846:	2eff      	cmp	r6, #255	; 0xff
 8000848:	d000      	beq.n	800084c <__aeabi_fsub+0x168>
 800084a:	e099      	b.n	8000980 <__aeabi_fsub+0x29c>
 800084c:	000d      	movs	r5, r1
 800084e:	4643      	mov	r3, r8
 8000850:	2b00      	cmp	r3, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fsub+0x172>
 8000854:	e085      	b.n	8000962 <__aeabi_fsub+0x27e>
 8000856:	2780      	movs	r7, #128	; 0x80
 8000858:	03ff      	lsls	r7, r7, #15
 800085a:	431f      	orrs	r7, r3
 800085c:	027f      	lsls	r7, r7, #9
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	0a7f      	lsrs	r7, r7, #9
 8000862:	e7a6      	b.n	80007b2 <__aeabi_fsub+0xce>
 8000864:	4652      	mov	r2, sl
 8000866:	2a00      	cmp	r2, #0
 8000868:	d074      	beq.n	8000954 <__aeabi_fsub+0x270>
 800086a:	2201      	movs	r2, #1
 800086c:	4252      	negs	r2, r2
 800086e:	4690      	mov	r8, r2
 8000870:	44c1      	add	r9, r8
 8000872:	464a      	mov	r2, r9
 8000874:	2a00      	cmp	r2, #0
 8000876:	d100      	bne.n	800087a <__aeabi_fsub+0x196>
 8000878:	e0c8      	b.n	8000a0c <__aeabi_fsub+0x328>
 800087a:	2cff      	cmp	r4, #255	; 0xff
 800087c:	d000      	beq.n	8000880 <__aeabi_fsub+0x19c>
 800087e:	e75f      	b.n	8000740 <__aeabi_fsub+0x5c>
 8000880:	e7e6      	b.n	8000850 <__aeabi_fsub+0x16c>
 8000882:	2201      	movs	r2, #1
 8000884:	4051      	eors	r1, r2
 8000886:	42a9      	cmp	r1, r5
 8000888:	d000      	beq.n	800088c <__aeabi_fsub+0x1a8>
 800088a:	e749      	b.n	8000720 <__aeabi_fsub+0x3c>
 800088c:	22ff      	movs	r2, #255	; 0xff
 800088e:	4252      	negs	r2, r2
 8000890:	4691      	mov	r9, r2
 8000892:	44a1      	add	r9, r4
 8000894:	464a      	mov	r2, r9
 8000896:	2a00      	cmp	r2, #0
 8000898:	d043      	beq.n	8000922 <__aeabi_fsub+0x23e>
 800089a:	1b31      	subs	r1, r6, r4
 800089c:	2c00      	cmp	r4, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_fsub+0x1be>
 80008a0:	e08c      	b.n	80009bc <__aeabi_fsub+0x2d8>
 80008a2:	2eff      	cmp	r6, #255	; 0xff
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fsub+0x1c4>
 80008a6:	e092      	b.n	80009ce <__aeabi_fsub+0x2ea>
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	4662      	mov	r2, ip
 80008ac:	04db      	lsls	r3, r3, #19
 80008ae:	431a      	orrs	r2, r3
 80008b0:	4694      	mov	ip, r2
 80008b2:	2301      	movs	r3, #1
 80008b4:	291b      	cmp	r1, #27
 80008b6:	dc09      	bgt.n	80008cc <__aeabi_fsub+0x1e8>
 80008b8:	2020      	movs	r0, #32
 80008ba:	4663      	mov	r3, ip
 80008bc:	4662      	mov	r2, ip
 80008be:	40cb      	lsrs	r3, r1
 80008c0:	1a41      	subs	r1, r0, r1
 80008c2:	408a      	lsls	r2, r1
 80008c4:	0011      	movs	r1, r2
 80008c6:	1e48      	subs	r0, r1, #1
 80008c8:	4181      	sbcs	r1, r0
 80008ca:	430b      	orrs	r3, r1
 80008cc:	0034      	movs	r4, r6
 80008ce:	4453      	add	r3, sl
 80008d0:	e794      	b.n	80007fc <__aeabi_fsub+0x118>
 80008d2:	22fe      	movs	r2, #254	; 0xfe
 80008d4:	1c66      	adds	r6, r4, #1
 80008d6:	4232      	tst	r2, r6
 80008d8:	d164      	bne.n	80009a4 <__aeabi_fsub+0x2c0>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d000      	beq.n	80008e0 <__aeabi_fsub+0x1fc>
 80008de:	e082      	b.n	80009e6 <__aeabi_fsub+0x302>
 80008e0:	4663      	mov	r3, ip
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fsub+0x204>
 80008e6:	e0ab      	b.n	8000a40 <__aeabi_fsub+0x35c>
 80008e8:	4653      	mov	r3, sl
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fsub+0x20c>
 80008ee:	e760      	b.n	80007b2 <__aeabi_fsub+0xce>
 80008f0:	4663      	mov	r3, ip
 80008f2:	4652      	mov	r2, sl
 80008f4:	1a9b      	subs	r3, r3, r2
 80008f6:	015a      	lsls	r2, r3, #5
 80008f8:	d400      	bmi.n	80008fc <__aeabi_fsub+0x218>
 80008fa:	e0aa      	b.n	8000a52 <__aeabi_fsub+0x36e>
 80008fc:	4663      	mov	r3, ip
 80008fe:	4652      	mov	r2, sl
 8000900:	000d      	movs	r5, r1
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	e744      	b.n	8000790 <__aeabi_fsub+0xac>
 8000906:	4652      	mov	r2, sl
 8000908:	2a00      	cmp	r2, #0
 800090a:	d023      	beq.n	8000954 <__aeabi_fsub+0x270>
 800090c:	2201      	movs	r2, #1
 800090e:	4252      	negs	r2, r2
 8000910:	4690      	mov	r8, r2
 8000912:	44c1      	add	r9, r8
 8000914:	464a      	mov	r2, r9
 8000916:	2a00      	cmp	r2, #0
 8000918:	d075      	beq.n	8000a06 <__aeabi_fsub+0x322>
 800091a:	2cff      	cmp	r4, #255	; 0xff
 800091c:	d000      	beq.n	8000920 <__aeabi_fsub+0x23c>
 800091e:	e75f      	b.n	80007e0 <__aeabi_fsub+0xfc>
 8000920:	e796      	b.n	8000850 <__aeabi_fsub+0x16c>
 8000922:	26fe      	movs	r6, #254	; 0xfe
 8000924:	3401      	adds	r4, #1
 8000926:	4226      	tst	r6, r4
 8000928:	d153      	bne.n	80009d2 <__aeabi_fsub+0x2ee>
 800092a:	2800      	cmp	r0, #0
 800092c:	d172      	bne.n	8000a14 <__aeabi_fsub+0x330>
 800092e:	4663      	mov	r3, ip
 8000930:	2b00      	cmp	r3, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_fsub+0x252>
 8000934:	e093      	b.n	8000a5e <__aeabi_fsub+0x37a>
 8000936:	4653      	mov	r3, sl
 8000938:	2b00      	cmp	r3, #0
 800093a:	d100      	bne.n	800093e <__aeabi_fsub+0x25a>
 800093c:	e739      	b.n	80007b2 <__aeabi_fsub+0xce>
 800093e:	4463      	add	r3, ip
 8000940:	2400      	movs	r4, #0
 8000942:	015a      	lsls	r2, r3, #5
 8000944:	d502      	bpl.n	800094c <__aeabi_fsub+0x268>
 8000946:	4a4a      	ldr	r2, [pc, #296]	; (8000a70 <__aeabi_fsub+0x38c>)
 8000948:	3401      	adds	r4, #1
 800094a:	4013      	ands	r3, r2
 800094c:	075a      	lsls	r2, r3, #29
 800094e:	d000      	beq.n	8000952 <__aeabi_fsub+0x26e>
 8000950:	e720      	b.n	8000794 <__aeabi_fsub+0xb0>
 8000952:	08db      	lsrs	r3, r3, #3
 8000954:	2cff      	cmp	r4, #255	; 0xff
 8000956:	d100      	bne.n	800095a <__aeabi_fsub+0x276>
 8000958:	e77a      	b.n	8000850 <__aeabi_fsub+0x16c>
 800095a:	025b      	lsls	r3, r3, #9
 800095c:	0a5f      	lsrs	r7, r3, #9
 800095e:	b2e0      	uxtb	r0, r4
 8000960:	e727      	b.n	80007b2 <__aeabi_fsub+0xce>
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	2700      	movs	r7, #0
 8000966:	e724      	b.n	80007b2 <__aeabi_fsub+0xce>
 8000968:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <__aeabi_fsub+0x38c>)
 800096a:	1a24      	subs	r4, r4, r0
 800096c:	4033      	ands	r3, r6
 800096e:	e70f      	b.n	8000790 <__aeabi_fsub+0xac>
 8000970:	2eff      	cmp	r6, #255	; 0xff
 8000972:	d100      	bne.n	8000976 <__aeabi_fsub+0x292>
 8000974:	e76a      	b.n	800084c <__aeabi_fsub+0x168>
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	4662      	mov	r2, ip
 800097a:	04db      	lsls	r3, r3, #19
 800097c:	431a      	orrs	r2, r3
 800097e:	4694      	mov	ip, r2
 8000980:	2301      	movs	r3, #1
 8000982:	281b      	cmp	r0, #27
 8000984:	dc09      	bgt.n	800099a <__aeabi_fsub+0x2b6>
 8000986:	2420      	movs	r4, #32
 8000988:	4663      	mov	r3, ip
 800098a:	4662      	mov	r2, ip
 800098c:	40c3      	lsrs	r3, r0
 800098e:	1a20      	subs	r0, r4, r0
 8000990:	4082      	lsls	r2, r0
 8000992:	0010      	movs	r0, r2
 8000994:	1e44      	subs	r4, r0, #1
 8000996:	41a0      	sbcs	r0, r4
 8000998:	4303      	orrs	r3, r0
 800099a:	4652      	mov	r2, sl
 800099c:	000d      	movs	r5, r1
 800099e:	0034      	movs	r4, r6
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	e6dc      	b.n	800075e <__aeabi_fsub+0x7a>
 80009a4:	4663      	mov	r3, ip
 80009a6:	4652      	mov	r2, sl
 80009a8:	1a9e      	subs	r6, r3, r2
 80009aa:	0173      	lsls	r3, r6, #5
 80009ac:	d417      	bmi.n	80009de <__aeabi_fsub+0x2fa>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fsub+0x2d0>
 80009b2:	e6d9      	b.n	8000768 <__aeabi_fsub+0x84>
 80009b4:	2500      	movs	r5, #0
 80009b6:	2000      	movs	r0, #0
 80009b8:	2700      	movs	r7, #0
 80009ba:	e6fa      	b.n	80007b2 <__aeabi_fsub+0xce>
 80009bc:	4663      	mov	r3, ip
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d044      	beq.n	8000a4c <__aeabi_fsub+0x368>
 80009c2:	3901      	subs	r1, #1
 80009c4:	2900      	cmp	r1, #0
 80009c6:	d04c      	beq.n	8000a62 <__aeabi_fsub+0x37e>
 80009c8:	2eff      	cmp	r6, #255	; 0xff
 80009ca:	d000      	beq.n	80009ce <__aeabi_fsub+0x2ea>
 80009cc:	e771      	b.n	80008b2 <__aeabi_fsub+0x1ce>
 80009ce:	4643      	mov	r3, r8
 80009d0:	e73e      	b.n	8000850 <__aeabi_fsub+0x16c>
 80009d2:	2cff      	cmp	r4, #255	; 0xff
 80009d4:	d0c5      	beq.n	8000962 <__aeabi_fsub+0x27e>
 80009d6:	4652      	mov	r2, sl
 80009d8:	4462      	add	r2, ip
 80009da:	0853      	lsrs	r3, r2, #1
 80009dc:	e7b6      	b.n	800094c <__aeabi_fsub+0x268>
 80009de:	4663      	mov	r3, ip
 80009e0:	000d      	movs	r5, r1
 80009e2:	1ad6      	subs	r6, r2, r3
 80009e4:	e6c0      	b.n	8000768 <__aeabi_fsub+0x84>
 80009e6:	4662      	mov	r2, ip
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d116      	bne.n	8000a1a <__aeabi_fsub+0x336>
 80009ec:	4653      	mov	r3, sl
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d000      	beq.n	80009f4 <__aeabi_fsub+0x310>
 80009f2:	e72b      	b.n	800084c <__aeabi_fsub+0x168>
 80009f4:	2780      	movs	r7, #128	; 0x80
 80009f6:	2500      	movs	r5, #0
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	03ff      	lsls	r7, r7, #15
 80009fc:	e6d9      	b.n	80007b2 <__aeabi_fsub+0xce>
 80009fe:	000d      	movs	r5, r1
 8000a00:	4643      	mov	r3, r8
 8000a02:	0034      	movs	r4, r6
 8000a04:	e7a6      	b.n	8000954 <__aeabi_fsub+0x270>
 8000a06:	4653      	mov	r3, sl
 8000a08:	4463      	add	r3, ip
 8000a0a:	e6f7      	b.n	80007fc <__aeabi_fsub+0x118>
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	4652      	mov	r2, sl
 8000a10:	1a9b      	subs	r3, r3, r2
 8000a12:	e6a4      	b.n	800075e <__aeabi_fsub+0x7a>
 8000a14:	4662      	mov	r2, ip
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	d0d9      	beq.n	80009ce <__aeabi_fsub+0x2ea>
 8000a1a:	4652      	mov	r2, sl
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_fsub+0x33e>
 8000a20:	e716      	b.n	8000850 <__aeabi_fsub+0x16c>
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	03d2      	lsls	r2, r2, #15
 8000a26:	4213      	tst	r3, r2
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fsub+0x348>
 8000a2a:	e711      	b.n	8000850 <__aeabi_fsub+0x16c>
 8000a2c:	4640      	mov	r0, r8
 8000a2e:	4210      	tst	r0, r2
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fsub+0x350>
 8000a32:	e70d      	b.n	8000850 <__aeabi_fsub+0x16c>
 8000a34:	e70a      	b.n	800084c <__aeabi_fsub+0x168>
 8000a36:	4652      	mov	r2, sl
 8000a38:	000d      	movs	r5, r1
 8000a3a:	0034      	movs	r4, r6
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	e68e      	b.n	800075e <__aeabi_fsub+0x7a>
 8000a40:	4653      	mov	r3, sl
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d008      	beq.n	8000a58 <__aeabi_fsub+0x374>
 8000a46:	000d      	movs	r5, r1
 8000a48:	4647      	mov	r7, r8
 8000a4a:	e6b2      	b.n	80007b2 <__aeabi_fsub+0xce>
 8000a4c:	4643      	mov	r3, r8
 8000a4e:	0034      	movs	r4, r6
 8000a50:	e780      	b.n	8000954 <__aeabi_fsub+0x270>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d000      	beq.n	8000a58 <__aeabi_fsub+0x374>
 8000a56:	e779      	b.n	800094c <__aeabi_fsub+0x268>
 8000a58:	2500      	movs	r5, #0
 8000a5a:	2700      	movs	r7, #0
 8000a5c:	e6a9      	b.n	80007b2 <__aeabi_fsub+0xce>
 8000a5e:	4647      	mov	r7, r8
 8000a60:	e6a7      	b.n	80007b2 <__aeabi_fsub+0xce>
 8000a62:	4653      	mov	r3, sl
 8000a64:	0034      	movs	r4, r6
 8000a66:	4463      	add	r3, ip
 8000a68:	e6c8      	b.n	80007fc <__aeabi_fsub+0x118>
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	7dffffff 	.word	0x7dffffff
 8000a70:	fbffffff 	.word	0xfbffffff

08000a74 <__aeabi_ui2f>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	1e05      	subs	r5, r0, #0
 8000a78:	d00e      	beq.n	8000a98 <__aeabi_ui2f+0x24>
 8000a7a:	f001 fe79 	bl	8002770 <__clzsi2>
 8000a7e:	239e      	movs	r3, #158	; 0x9e
 8000a80:	0004      	movs	r4, r0
 8000a82:	1a1b      	subs	r3, r3, r0
 8000a84:	2b96      	cmp	r3, #150	; 0x96
 8000a86:	dc0c      	bgt.n	8000aa2 <__aeabi_ui2f+0x2e>
 8000a88:	2808      	cmp	r0, #8
 8000a8a:	dd01      	ble.n	8000a90 <__aeabi_ui2f+0x1c>
 8000a8c:	3c08      	subs	r4, #8
 8000a8e:	40a5      	lsls	r5, r4
 8000a90:	026d      	lsls	r5, r5, #9
 8000a92:	0a6d      	lsrs	r5, r5, #9
 8000a94:	b2d8      	uxtb	r0, r3
 8000a96:	e001      	b.n	8000a9c <__aeabi_ui2f+0x28>
 8000a98:	2000      	movs	r0, #0
 8000a9a:	2500      	movs	r5, #0
 8000a9c:	05c0      	lsls	r0, r0, #23
 8000a9e:	4328      	orrs	r0, r5
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	2b99      	cmp	r3, #153	; 0x99
 8000aa4:	dd09      	ble.n	8000aba <__aeabi_ui2f+0x46>
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	0029      	movs	r1, r5
 8000aaa:	321b      	adds	r2, #27
 8000aac:	4091      	lsls	r1, r2
 8000aae:	1e4a      	subs	r2, r1, #1
 8000ab0:	4191      	sbcs	r1, r2
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	1a12      	subs	r2, r2, r0
 8000ab6:	40d5      	lsrs	r5, r2
 8000ab8:	430d      	orrs	r5, r1
 8000aba:	2c05      	cmp	r4, #5
 8000abc:	dd01      	ble.n	8000ac2 <__aeabi_ui2f+0x4e>
 8000abe:	1f62      	subs	r2, r4, #5
 8000ac0:	4095      	lsls	r5, r2
 8000ac2:	0029      	movs	r1, r5
 8000ac4:	4e08      	ldr	r6, [pc, #32]	; (8000ae8 <__aeabi_ui2f+0x74>)
 8000ac6:	4031      	ands	r1, r6
 8000ac8:	076a      	lsls	r2, r5, #29
 8000aca:	d009      	beq.n	8000ae0 <__aeabi_ui2f+0x6c>
 8000acc:	200f      	movs	r0, #15
 8000ace:	4028      	ands	r0, r5
 8000ad0:	2804      	cmp	r0, #4
 8000ad2:	d005      	beq.n	8000ae0 <__aeabi_ui2f+0x6c>
 8000ad4:	3104      	adds	r1, #4
 8000ad6:	014a      	lsls	r2, r1, #5
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_ui2f+0x6c>
 8000ada:	239f      	movs	r3, #159	; 0x9f
 8000adc:	4031      	ands	r1, r6
 8000ade:	1b1b      	subs	r3, r3, r4
 8000ae0:	0189      	lsls	r1, r1, #6
 8000ae2:	0a4d      	lsrs	r5, r1, #9
 8000ae4:	b2d8      	uxtb	r0, r3
 8000ae6:	e7d9      	b.n	8000a9c <__aeabi_ui2f+0x28>
 8000ae8:	fbffffff 	.word	0xfbffffff

08000aec <__aeabi_dadd>:
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	464f      	mov	r7, r9
 8000af0:	46d6      	mov	lr, sl
 8000af2:	4646      	mov	r6, r8
 8000af4:	000d      	movs	r5, r1
 8000af6:	0001      	movs	r1, r0
 8000af8:	0018      	movs	r0, r3
 8000afa:	b5c0      	push	{r6, r7, lr}
 8000afc:	0017      	movs	r7, r2
 8000afe:	032b      	lsls	r3, r5, #12
 8000b00:	0a5a      	lsrs	r2, r3, #9
 8000b02:	0f4b      	lsrs	r3, r1, #29
 8000b04:	4313      	orrs	r3, r2
 8000b06:	00ca      	lsls	r2, r1, #3
 8000b08:	4691      	mov	r9, r2
 8000b0a:	0302      	lsls	r2, r0, #12
 8000b0c:	006e      	lsls	r6, r5, #1
 8000b0e:	0041      	lsls	r1, r0, #1
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	0fec      	lsrs	r4, r5, #31
 8000b14:	0f7d      	lsrs	r5, r7, #29
 8000b16:	4315      	orrs	r5, r2
 8000b18:	0d76      	lsrs	r6, r6, #21
 8000b1a:	0d49      	lsrs	r1, r1, #21
 8000b1c:	0fc0      	lsrs	r0, r0, #31
 8000b1e:	4682      	mov	sl, r0
 8000b20:	46ac      	mov	ip, r5
 8000b22:	00ff      	lsls	r7, r7, #3
 8000b24:	1a72      	subs	r2, r6, r1
 8000b26:	4284      	cmp	r4, r0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dadd+0x40>
 8000b2a:	e098      	b.n	8000c5e <__aeabi_dadd+0x172>
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	dc00      	bgt.n	8000b32 <__aeabi_dadd+0x46>
 8000b30:	e081      	b.n	8000c36 <__aeabi_dadd+0x14a>
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x4c>
 8000b36:	e0b6      	b.n	8000ca6 <__aeabi_dadd+0x1ba>
 8000b38:	49c9      	ldr	r1, [pc, #804]	; (8000e60 <__aeabi_dadd+0x374>)
 8000b3a:	428e      	cmp	r6, r1
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x54>
 8000b3e:	e172      	b.n	8000e26 <__aeabi_dadd+0x33a>
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0028      	movs	r0, r5
 8000b44:	0409      	lsls	r1, r1, #16
 8000b46:	4308      	orrs	r0, r1
 8000b48:	4684      	mov	ip, r0
 8000b4a:	2a38      	cmp	r2, #56	; 0x38
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x64>
 8000b4e:	e15e      	b.n	8000e0e <__aeabi_dadd+0x322>
 8000b50:	2a1f      	cmp	r2, #31
 8000b52:	dd00      	ble.n	8000b56 <__aeabi_dadd+0x6a>
 8000b54:	e1ee      	b.n	8000f34 <__aeabi_dadd+0x448>
 8000b56:	2020      	movs	r0, #32
 8000b58:	0039      	movs	r1, r7
 8000b5a:	4665      	mov	r5, ip
 8000b5c:	1a80      	subs	r0, r0, r2
 8000b5e:	4087      	lsls	r7, r0
 8000b60:	40d1      	lsrs	r1, r2
 8000b62:	4085      	lsls	r5, r0
 8000b64:	430d      	orrs	r5, r1
 8000b66:	0039      	movs	r1, r7
 8000b68:	1e4f      	subs	r7, r1, #1
 8000b6a:	41b9      	sbcs	r1, r7
 8000b6c:	4667      	mov	r7, ip
 8000b6e:	40d7      	lsrs	r7, r2
 8000b70:	4329      	orrs	r1, r5
 8000b72:	1bdb      	subs	r3, r3, r7
 8000b74:	464a      	mov	r2, r9
 8000b76:	1a55      	subs	r5, r2, r1
 8000b78:	45a9      	cmp	r9, r5
 8000b7a:	4189      	sbcs	r1, r1
 8000b7c:	4249      	negs	r1, r1
 8000b7e:	1a5b      	subs	r3, r3, r1
 8000b80:	4698      	mov	r8, r3
 8000b82:	4643      	mov	r3, r8
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	d400      	bmi.n	8000b8a <__aeabi_dadd+0x9e>
 8000b88:	e0cc      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	0a5b      	lsrs	r3, r3, #9
 8000b90:	4698      	mov	r8, r3
 8000b92:	4643      	mov	r3, r8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0xae>
 8000b98:	e12c      	b.n	8000df4 <__aeabi_dadd+0x308>
 8000b9a:	4640      	mov	r0, r8
 8000b9c:	f001 fde8 	bl	8002770 <__clzsi2>
 8000ba0:	0001      	movs	r1, r0
 8000ba2:	3908      	subs	r1, #8
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	0028      	movs	r0, r5
 8000ba8:	4643      	mov	r3, r8
 8000baa:	1a52      	subs	r2, r2, r1
 8000bac:	408b      	lsls	r3, r1
 8000bae:	40d0      	lsrs	r0, r2
 8000bb0:	408d      	lsls	r5, r1
 8000bb2:	4303      	orrs	r3, r0
 8000bb4:	428e      	cmp	r6, r1
 8000bb6:	dd00      	ble.n	8000bba <__aeabi_dadd+0xce>
 8000bb8:	e117      	b.n	8000dea <__aeabi_dadd+0x2fe>
 8000bba:	1b8e      	subs	r6, r1, r6
 8000bbc:	1c72      	adds	r2, r6, #1
 8000bbe:	2a1f      	cmp	r2, #31
 8000bc0:	dd00      	ble.n	8000bc4 <__aeabi_dadd+0xd8>
 8000bc2:	e1a7      	b.n	8000f14 <__aeabi_dadd+0x428>
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	002e      	movs	r6, r5
 8000bca:	1a89      	subs	r1, r1, r2
 8000bcc:	408d      	lsls	r5, r1
 8000bce:	4088      	lsls	r0, r1
 8000bd0:	40d6      	lsrs	r6, r2
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	1e69      	subs	r1, r5, #1
 8000bd6:	418d      	sbcs	r5, r1
 8000bd8:	4330      	orrs	r0, r6
 8000bda:	4698      	mov	r8, r3
 8000bdc:	2600      	movs	r6, #0
 8000bde:	4305      	orrs	r5, r0
 8000be0:	076b      	lsls	r3, r5, #29
 8000be2:	d009      	beq.n	8000bf8 <__aeabi_dadd+0x10c>
 8000be4:	230f      	movs	r3, #15
 8000be6:	402b      	ands	r3, r5
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d005      	beq.n	8000bf8 <__aeabi_dadd+0x10c>
 8000bec:	1d2b      	adds	r3, r5, #4
 8000bee:	42ab      	cmp	r3, r5
 8000bf0:	41ad      	sbcs	r5, r5
 8000bf2:	426d      	negs	r5, r5
 8000bf4:	44a8      	add	r8, r5
 8000bf6:	001d      	movs	r5, r3
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	d400      	bmi.n	8000c00 <__aeabi_dadd+0x114>
 8000bfe:	e094      	b.n	8000d2a <__aeabi_dadd+0x23e>
 8000c00:	4b97      	ldr	r3, [pc, #604]	; (8000e60 <__aeabi_dadd+0x374>)
 8000c02:	1c72      	adds	r2, r6, #1
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x11e>
 8000c08:	e09d      	b.n	8000d46 <__aeabi_dadd+0x25a>
 8000c0a:	4641      	mov	r1, r8
 8000c0c:	4b95      	ldr	r3, [pc, #596]	; (8000e64 <__aeabi_dadd+0x378>)
 8000c0e:	08ed      	lsrs	r5, r5, #3
 8000c10:	4019      	ands	r1, r3
 8000c12:	000b      	movs	r3, r1
 8000c14:	0552      	lsls	r2, r2, #21
 8000c16:	0749      	lsls	r1, r1, #29
 8000c18:	025b      	lsls	r3, r3, #9
 8000c1a:	4329      	orrs	r1, r5
 8000c1c:	0b1b      	lsrs	r3, r3, #12
 8000c1e:	0d52      	lsrs	r2, r2, #21
 8000c20:	0512      	lsls	r2, r2, #20
 8000c22:	4313      	orrs	r3, r2
 8000c24:	07e4      	lsls	r4, r4, #31
 8000c26:	4323      	orrs	r3, r4
 8000c28:	0008      	movs	r0, r1
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	bce0      	pop	{r5, r6, r7}
 8000c2e:	46ba      	mov	sl, r7
 8000c30:	46b1      	mov	r9, r6
 8000c32:	46a8      	mov	r8, r5
 8000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d043      	beq.n	8000cc2 <__aeabi_dadd+0x1d6>
 8000c3a:	1b8a      	subs	r2, r1, r6
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_dadd+0x156>
 8000c40:	e12a      	b.n	8000e98 <__aeabi_dadd+0x3ac>
 8000c42:	464c      	mov	r4, r9
 8000c44:	431c      	orrs	r4, r3
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dadd+0x15e>
 8000c48:	e1d1      	b.n	8000fee <__aeabi_dadd+0x502>
 8000c4a:	1e54      	subs	r4, r2, #1
 8000c4c:	2a01      	cmp	r2, #1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x166>
 8000c50:	e21f      	b.n	8001092 <__aeabi_dadd+0x5a6>
 8000c52:	4d83      	ldr	r5, [pc, #524]	; (8000e60 <__aeabi_dadd+0x374>)
 8000c54:	42aa      	cmp	r2, r5
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x16e>
 8000c58:	e272      	b.n	8001140 <__aeabi_dadd+0x654>
 8000c5a:	0022      	movs	r2, r4
 8000c5c:	e123      	b.n	8000ea6 <__aeabi_dadd+0x3ba>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	dc00      	bgt.n	8000c64 <__aeabi_dadd+0x178>
 8000c62:	e098      	b.n	8000d96 <__aeabi_dadd+0x2aa>
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d042      	beq.n	8000cee <__aeabi_dadd+0x202>
 8000c68:	497d      	ldr	r1, [pc, #500]	; (8000e60 <__aeabi_dadd+0x374>)
 8000c6a:	428e      	cmp	r6, r1
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x184>
 8000c6e:	e0da      	b.n	8000e26 <__aeabi_dadd+0x33a>
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0028      	movs	r0, r5
 8000c74:	0409      	lsls	r1, r1, #16
 8000c76:	4308      	orrs	r0, r1
 8000c78:	4684      	mov	ip, r0
 8000c7a:	2a38      	cmp	r2, #56	; 0x38
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dadd+0x194>
 8000c7e:	e129      	b.n	8000ed4 <__aeabi_dadd+0x3e8>
 8000c80:	2a1f      	cmp	r2, #31
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_dadd+0x19a>
 8000c84:	e187      	b.n	8000f96 <__aeabi_dadd+0x4aa>
 8000c86:	0011      	movs	r1, r2
 8000c88:	4665      	mov	r5, ip
 8000c8a:	3920      	subs	r1, #32
 8000c8c:	40cd      	lsrs	r5, r1
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d004      	beq.n	8000c9c <__aeabi_dadd+0x1b0>
 8000c92:	2040      	movs	r0, #64	; 0x40
 8000c94:	4661      	mov	r1, ip
 8000c96:	1a82      	subs	r2, r0, r2
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	430f      	orrs	r7, r1
 8000c9c:	0039      	movs	r1, r7
 8000c9e:	1e4f      	subs	r7, r1, #1
 8000ca0:	41b9      	sbcs	r1, r7
 8000ca2:	430d      	orrs	r5, r1
 8000ca4:	e11b      	b.n	8000ede <__aeabi_dadd+0x3f2>
 8000ca6:	0029      	movs	r1, r5
 8000ca8:	4339      	orrs	r1, r7
 8000caa:	d100      	bne.n	8000cae <__aeabi_dadd+0x1c2>
 8000cac:	e0b5      	b.n	8000e1a <__aeabi_dadd+0x32e>
 8000cae:	1e51      	subs	r1, r2, #1
 8000cb0:	2a01      	cmp	r2, #1
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x1ca>
 8000cb4:	e1ab      	b.n	800100e <__aeabi_dadd+0x522>
 8000cb6:	486a      	ldr	r0, [pc, #424]	; (8000e60 <__aeabi_dadd+0x374>)
 8000cb8:	4282      	cmp	r2, r0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x1d2>
 8000cbc:	e1b2      	b.n	8001024 <__aeabi_dadd+0x538>
 8000cbe:	000a      	movs	r2, r1
 8000cc0:	e743      	b.n	8000b4a <__aeabi_dadd+0x5e>
 8000cc2:	4969      	ldr	r1, [pc, #420]	; (8000e68 <__aeabi_dadd+0x37c>)
 8000cc4:	1c75      	adds	r5, r6, #1
 8000cc6:	420d      	tst	r5, r1
 8000cc8:	d000      	beq.n	8000ccc <__aeabi_dadd+0x1e0>
 8000cca:	e0cf      	b.n	8000e6c <__aeabi_dadd+0x380>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_dadd+0x1e6>
 8000cd0:	e193      	b.n	8000ffa <__aeabi_dadd+0x50e>
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x1ee>
 8000cd8:	e1d1      	b.n	800107e <__aeabi_dadd+0x592>
 8000cda:	4661      	mov	r1, ip
 8000cdc:	4339      	orrs	r1, r7
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x1f6>
 8000ce0:	e1e3      	b.n	80010aa <__aeabi_dadd+0x5be>
 8000ce2:	4649      	mov	r1, r9
 8000ce4:	0758      	lsls	r0, r3, #29
 8000ce6:	08c9      	lsrs	r1, r1, #3
 8000ce8:	4301      	orrs	r1, r0
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	e026      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000cee:	0029      	movs	r1, r5
 8000cf0:	4339      	orrs	r1, r7
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x20a>
 8000cf4:	e091      	b.n	8000e1a <__aeabi_dadd+0x32e>
 8000cf6:	1e51      	subs	r1, r2, #1
 8000cf8:	2a01      	cmp	r2, #1
 8000cfa:	d005      	beq.n	8000d08 <__aeabi_dadd+0x21c>
 8000cfc:	4858      	ldr	r0, [pc, #352]	; (8000e60 <__aeabi_dadd+0x374>)
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x218>
 8000d02:	e18f      	b.n	8001024 <__aeabi_dadd+0x538>
 8000d04:	000a      	movs	r2, r1
 8000d06:	e7b8      	b.n	8000c7a <__aeabi_dadd+0x18e>
 8000d08:	003d      	movs	r5, r7
 8000d0a:	444d      	add	r5, r9
 8000d0c:	454d      	cmp	r5, r9
 8000d0e:	4189      	sbcs	r1, r1
 8000d10:	4463      	add	r3, ip
 8000d12:	4698      	mov	r8, r3
 8000d14:	4249      	negs	r1, r1
 8000d16:	4488      	add	r8, r1
 8000d18:	4643      	mov	r3, r8
 8000d1a:	2602      	movs	r6, #2
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	d500      	bpl.n	8000d22 <__aeabi_dadd+0x236>
 8000d20:	e0eb      	b.n	8000efa <__aeabi_dadd+0x40e>
 8000d22:	3e01      	subs	r6, #1
 8000d24:	076b      	lsls	r3, r5, #29
 8000d26:	d000      	beq.n	8000d2a <__aeabi_dadd+0x23e>
 8000d28:	e75c      	b.n	8000be4 <__aeabi_dadd+0xf8>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	08e9      	lsrs	r1, r5, #3
 8000d2e:	075a      	lsls	r2, r3, #29
 8000d30:	4311      	orrs	r1, r2
 8000d32:	0032      	movs	r2, r6
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	484a      	ldr	r0, [pc, #296]	; (8000e60 <__aeabi_dadd+0x374>)
 8000d38:	4282      	cmp	r2, r0
 8000d3a:	d021      	beq.n	8000d80 <__aeabi_dadd+0x294>
 8000d3c:	031b      	lsls	r3, r3, #12
 8000d3e:	0552      	lsls	r2, r2, #21
 8000d40:	0b1b      	lsrs	r3, r3, #12
 8000d42:	0d52      	lsrs	r2, r2, #21
 8000d44:	e76c      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000d46:	2300      	movs	r3, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e769      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000d4c:	002a      	movs	r2, r5
 8000d4e:	433a      	orrs	r2, r7
 8000d50:	d069      	beq.n	8000e26 <__aeabi_dadd+0x33a>
 8000d52:	464a      	mov	r2, r9
 8000d54:	0758      	lsls	r0, r3, #29
 8000d56:	08d1      	lsrs	r1, r2, #3
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	031b      	lsls	r3, r3, #12
 8000d5e:	4308      	orrs	r0, r1
 8000d60:	421a      	tst	r2, r3
 8000d62:	d007      	beq.n	8000d74 <__aeabi_dadd+0x288>
 8000d64:	0029      	movs	r1, r5
 8000d66:	08ed      	lsrs	r5, r5, #3
 8000d68:	421d      	tst	r5, r3
 8000d6a:	d103      	bne.n	8000d74 <__aeabi_dadd+0x288>
 8000d6c:	002a      	movs	r2, r5
 8000d6e:	08ff      	lsrs	r7, r7, #3
 8000d70:	0748      	lsls	r0, r1, #29
 8000d72:	4338      	orrs	r0, r7
 8000d74:	0f43      	lsrs	r3, r0, #29
 8000d76:	00c1      	lsls	r1, r0, #3
 8000d78:	075b      	lsls	r3, r3, #29
 8000d7a:	08c9      	lsrs	r1, r1, #3
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	000a      	movs	r2, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	d100      	bne.n	8000d88 <__aeabi_dadd+0x29c>
 8000d86:	e213      	b.n	80011b0 <__aeabi_dadd+0x6c4>
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	0312      	lsls	r2, r2, #12
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	031b      	lsls	r3, r3, #12
 8000d90:	4a33      	ldr	r2, [pc, #204]	; (8000e60 <__aeabi_dadd+0x374>)
 8000d92:	0b1b      	lsrs	r3, r3, #12
 8000d94:	e744      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d04b      	beq.n	8000e32 <__aeabi_dadd+0x346>
 8000d9a:	1b8a      	subs	r2, r1, r6
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dadd+0x2b6>
 8000da0:	e0e7      	b.n	8000f72 <__aeabi_dadd+0x486>
 8000da2:	482f      	ldr	r0, [pc, #188]	; (8000e60 <__aeabi_dadd+0x374>)
 8000da4:	4281      	cmp	r1, r0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x2be>
 8000da8:	e195      	b.n	80010d6 <__aeabi_dadd+0x5ea>
 8000daa:	2080      	movs	r0, #128	; 0x80
 8000dac:	0400      	lsls	r0, r0, #16
 8000dae:	4303      	orrs	r3, r0
 8000db0:	2a38      	cmp	r2, #56	; 0x38
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_dadd+0x2ca>
 8000db4:	e143      	b.n	800103e <__aeabi_dadd+0x552>
 8000db6:	2a1f      	cmp	r2, #31
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_dadd+0x2d0>
 8000dba:	e1db      	b.n	8001174 <__aeabi_dadd+0x688>
 8000dbc:	2020      	movs	r0, #32
 8000dbe:	001d      	movs	r5, r3
 8000dc0:	464e      	mov	r6, r9
 8000dc2:	1a80      	subs	r0, r0, r2
 8000dc4:	4085      	lsls	r5, r0
 8000dc6:	40d6      	lsrs	r6, r2
 8000dc8:	4335      	orrs	r5, r6
 8000dca:	464e      	mov	r6, r9
 8000dcc:	4086      	lsls	r6, r0
 8000dce:	0030      	movs	r0, r6
 8000dd0:	40d3      	lsrs	r3, r2
 8000dd2:	1e46      	subs	r6, r0, #1
 8000dd4:	41b0      	sbcs	r0, r6
 8000dd6:	449c      	add	ip, r3
 8000dd8:	4305      	orrs	r5, r0
 8000dda:	19ed      	adds	r5, r5, r7
 8000ddc:	42bd      	cmp	r5, r7
 8000dde:	419b      	sbcs	r3, r3
 8000de0:	425b      	negs	r3, r3
 8000de2:	4463      	add	r3, ip
 8000de4:	4698      	mov	r8, r3
 8000de6:	000e      	movs	r6, r1
 8000de8:	e07f      	b.n	8000eea <__aeabi_dadd+0x3fe>
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <__aeabi_dadd+0x378>)
 8000dec:	1a76      	subs	r6, r6, r1
 8000dee:	4013      	ands	r3, r2
 8000df0:	4698      	mov	r8, r3
 8000df2:	e6f5      	b.n	8000be0 <__aeabi_dadd+0xf4>
 8000df4:	0028      	movs	r0, r5
 8000df6:	f001 fcbb 	bl	8002770 <__clzsi2>
 8000dfa:	0001      	movs	r1, r0
 8000dfc:	3118      	adds	r1, #24
 8000dfe:	291f      	cmp	r1, #31
 8000e00:	dc00      	bgt.n	8000e04 <__aeabi_dadd+0x318>
 8000e02:	e6cf      	b.n	8000ba4 <__aeabi_dadd+0xb8>
 8000e04:	002b      	movs	r3, r5
 8000e06:	3808      	subs	r0, #8
 8000e08:	4083      	lsls	r3, r0
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	e6d2      	b.n	8000bb4 <__aeabi_dadd+0xc8>
 8000e0e:	4662      	mov	r2, ip
 8000e10:	433a      	orrs	r2, r7
 8000e12:	0011      	movs	r1, r2
 8000e14:	1e4f      	subs	r7, r1, #1
 8000e16:	41b9      	sbcs	r1, r7
 8000e18:	e6ac      	b.n	8000b74 <__aeabi_dadd+0x88>
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	0758      	lsls	r0, r3, #29
 8000e1e:	08c9      	lsrs	r1, r1, #3
 8000e20:	4301      	orrs	r1, r0
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	e787      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8000e26:	4649      	mov	r1, r9
 8000e28:	075a      	lsls	r2, r3, #29
 8000e2a:	08c9      	lsrs	r1, r1, #3
 8000e2c:	4311      	orrs	r1, r2
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	e7a6      	b.n	8000d80 <__aeabi_dadd+0x294>
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <__aeabi_dadd+0x37c>)
 8000e34:	1c70      	adds	r0, r6, #1
 8000e36:	4208      	tst	r0, r1
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dadd+0x350>
 8000e3a:	e0bb      	b.n	8000fb4 <__aeabi_dadd+0x4c8>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dadd+0x356>
 8000e40:	e114      	b.n	800106c <__aeabi_dadd+0x580>
 8000e42:	4649      	mov	r1, r9
 8000e44:	4319      	orrs	r1, r3
 8000e46:	d100      	bne.n	8000e4a <__aeabi_dadd+0x35e>
 8000e48:	e175      	b.n	8001136 <__aeabi_dadd+0x64a>
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	4339      	orrs	r1, r7
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_dadd+0x366>
 8000e50:	e17e      	b.n	8001150 <__aeabi_dadd+0x664>
 8000e52:	4649      	mov	r1, r9
 8000e54:	0758      	lsls	r0, r3, #29
 8000e56:	08c9      	lsrs	r1, r1, #3
 8000e58:	4301      	orrs	r1, r0
 8000e5a:	08db      	lsrs	r3, r3, #3
 8000e5c:	e76e      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	ff7fffff 	.word	0xff7fffff
 8000e68:	000007fe 	.word	0x000007fe
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	1bcd      	subs	r5, r1, r7
 8000e70:	4661      	mov	r1, ip
 8000e72:	1a58      	subs	r0, r3, r1
 8000e74:	45a9      	cmp	r9, r5
 8000e76:	4189      	sbcs	r1, r1
 8000e78:	4249      	negs	r1, r1
 8000e7a:	4688      	mov	r8, r1
 8000e7c:	0001      	movs	r1, r0
 8000e7e:	4640      	mov	r0, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	4688      	mov	r8, r1
 8000e84:	0209      	lsls	r1, r1, #8
 8000e86:	d500      	bpl.n	8000e8a <__aeabi_dadd+0x39e>
 8000e88:	e0a6      	b.n	8000fd8 <__aeabi_dadd+0x4ec>
 8000e8a:	4641      	mov	r1, r8
 8000e8c:	4329      	orrs	r1, r5
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x3a6>
 8000e90:	e67f      	b.n	8000b92 <__aeabi_dadd+0xa6>
 8000e92:	2300      	movs	r3, #0
 8000e94:	2400      	movs	r4, #0
 8000e96:	e751      	b.n	8000d3c <__aeabi_dadd+0x250>
 8000e98:	4cc7      	ldr	r4, [pc, #796]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dadd+0x3b4>
 8000e9e:	e0c7      	b.n	8001030 <__aeabi_dadd+0x544>
 8000ea0:	2480      	movs	r4, #128	; 0x80
 8000ea2:	0424      	lsls	r4, r4, #16
 8000ea4:	4323      	orrs	r3, r4
 8000ea6:	2a38      	cmp	r2, #56	; 0x38
 8000ea8:	dc54      	bgt.n	8000f54 <__aeabi_dadd+0x468>
 8000eaa:	2a1f      	cmp	r2, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0x3c4>
 8000eae:	e0cc      	b.n	800104a <__aeabi_dadd+0x55e>
 8000eb0:	2420      	movs	r4, #32
 8000eb2:	4648      	mov	r0, r9
 8000eb4:	1aa4      	subs	r4, r4, r2
 8000eb6:	001d      	movs	r5, r3
 8000eb8:	464e      	mov	r6, r9
 8000eba:	40a0      	lsls	r0, r4
 8000ebc:	40d6      	lsrs	r6, r2
 8000ebe:	40a5      	lsls	r5, r4
 8000ec0:	0004      	movs	r4, r0
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	4662      	mov	r2, ip
 8000ec6:	4335      	orrs	r5, r6
 8000ec8:	1e66      	subs	r6, r4, #1
 8000eca:	41b4      	sbcs	r4, r6
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	469c      	mov	ip, r3
 8000ed0:	4325      	orrs	r5, r4
 8000ed2:	e044      	b.n	8000f5e <__aeabi_dadd+0x472>
 8000ed4:	4662      	mov	r2, ip
 8000ed6:	433a      	orrs	r2, r7
 8000ed8:	0015      	movs	r5, r2
 8000eda:	1e6f      	subs	r7, r5, #1
 8000edc:	41bd      	sbcs	r5, r7
 8000ede:	444d      	add	r5, r9
 8000ee0:	454d      	cmp	r5, r9
 8000ee2:	4189      	sbcs	r1, r1
 8000ee4:	4249      	negs	r1, r1
 8000ee6:	4688      	mov	r8, r1
 8000ee8:	4498      	add	r8, r3
 8000eea:	4643      	mov	r3, r8
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	d400      	bmi.n	8000ef2 <__aeabi_dadd+0x406>
 8000ef0:	e718      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000ef2:	4bb1      	ldr	r3, [pc, #708]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000ef4:	3601      	adds	r6, #1
 8000ef6:	429e      	cmp	r6, r3
 8000ef8:	d049      	beq.n	8000f8e <__aeabi_dadd+0x4a2>
 8000efa:	4642      	mov	r2, r8
 8000efc:	4baf      	ldr	r3, [pc, #700]	; (80011bc <__aeabi_dadd+0x6d0>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	401a      	ands	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	086a      	lsrs	r2, r5, #1
 8000f06:	400d      	ands	r5, r1
 8000f08:	4315      	orrs	r5, r2
 8000f0a:	07d9      	lsls	r1, r3, #31
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	4698      	mov	r8, r3
 8000f10:	430d      	orrs	r5, r1
 8000f12:	e665      	b.n	8000be0 <__aeabi_dadd+0xf4>
 8000f14:	0018      	movs	r0, r3
 8000f16:	3e1f      	subs	r6, #31
 8000f18:	40f0      	lsrs	r0, r6
 8000f1a:	2a20      	cmp	r2, #32
 8000f1c:	d003      	beq.n	8000f26 <__aeabi_dadd+0x43a>
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	1a8a      	subs	r2, r1, r2
 8000f22:	4093      	lsls	r3, r2
 8000f24:	431d      	orrs	r5, r3
 8000f26:	1e69      	subs	r1, r5, #1
 8000f28:	418d      	sbcs	r5, r1
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2600      	movs	r6, #0
 8000f2e:	4698      	mov	r8, r3
 8000f30:	4305      	orrs	r5, r0
 8000f32:	e6f7      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000f34:	0011      	movs	r1, r2
 8000f36:	4665      	mov	r5, ip
 8000f38:	3920      	subs	r1, #32
 8000f3a:	40cd      	lsrs	r5, r1
 8000f3c:	2a20      	cmp	r2, #32
 8000f3e:	d004      	beq.n	8000f4a <__aeabi_dadd+0x45e>
 8000f40:	2040      	movs	r0, #64	; 0x40
 8000f42:	4661      	mov	r1, ip
 8000f44:	1a82      	subs	r2, r0, r2
 8000f46:	4091      	lsls	r1, r2
 8000f48:	430f      	orrs	r7, r1
 8000f4a:	0039      	movs	r1, r7
 8000f4c:	1e4f      	subs	r7, r1, #1
 8000f4e:	41b9      	sbcs	r1, r7
 8000f50:	4329      	orrs	r1, r5
 8000f52:	e60f      	b.n	8000b74 <__aeabi_dadd+0x88>
 8000f54:	464a      	mov	r2, r9
 8000f56:	4313      	orrs	r3, r2
 8000f58:	001d      	movs	r5, r3
 8000f5a:	1e6b      	subs	r3, r5, #1
 8000f5c:	419d      	sbcs	r5, r3
 8000f5e:	1b7d      	subs	r5, r7, r5
 8000f60:	42af      	cmp	r7, r5
 8000f62:	419b      	sbcs	r3, r3
 8000f64:	4662      	mov	r2, ip
 8000f66:	425b      	negs	r3, r3
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	4698      	mov	r8, r3
 8000f6c:	4654      	mov	r4, sl
 8000f6e:	000e      	movs	r6, r1
 8000f70:	e607      	b.n	8000b82 <__aeabi_dadd+0x96>
 8000f72:	4648      	mov	r0, r9
 8000f74:	4318      	orrs	r0, r3
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x48e>
 8000f78:	e0b3      	b.n	80010e2 <__aeabi_dadd+0x5f6>
 8000f7a:	1e50      	subs	r0, r2, #1
 8000f7c:	2a01      	cmp	r2, #1
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x496>
 8000f80:	e10d      	b.n	800119e <__aeabi_dadd+0x6b2>
 8000f82:	4d8d      	ldr	r5, [pc, #564]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000f84:	42aa      	cmp	r2, r5
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x49e>
 8000f88:	e0a5      	b.n	80010d6 <__aeabi_dadd+0x5ea>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	e710      	b.n	8000db0 <__aeabi_dadd+0x2c4>
 8000f8e:	0032      	movs	r2, r6
 8000f90:	2300      	movs	r3, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	e644      	b.n	8000c20 <__aeabi_dadd+0x134>
 8000f96:	2120      	movs	r1, #32
 8000f98:	0038      	movs	r0, r7
 8000f9a:	1a89      	subs	r1, r1, r2
 8000f9c:	4665      	mov	r5, ip
 8000f9e:	408f      	lsls	r7, r1
 8000fa0:	408d      	lsls	r5, r1
 8000fa2:	40d0      	lsrs	r0, r2
 8000fa4:	1e79      	subs	r1, r7, #1
 8000fa6:	418f      	sbcs	r7, r1
 8000fa8:	4305      	orrs	r5, r0
 8000faa:	433d      	orrs	r5, r7
 8000fac:	4667      	mov	r7, ip
 8000fae:	40d7      	lsrs	r7, r2
 8000fb0:	19db      	adds	r3, r3, r7
 8000fb2:	e794      	b.n	8000ede <__aeabi_dadd+0x3f2>
 8000fb4:	4a80      	ldr	r2, [pc, #512]	; (80011b8 <__aeabi_dadd+0x6cc>)
 8000fb6:	4290      	cmp	r0, r2
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dadd+0x4d0>
 8000fba:	e0ec      	b.n	8001196 <__aeabi_dadd+0x6aa>
 8000fbc:	0039      	movs	r1, r7
 8000fbe:	4449      	add	r1, r9
 8000fc0:	4549      	cmp	r1, r9
 8000fc2:	4192      	sbcs	r2, r2
 8000fc4:	4463      	add	r3, ip
 8000fc6:	4252      	negs	r2, r2
 8000fc8:	189b      	adds	r3, r3, r2
 8000fca:	07dd      	lsls	r5, r3, #31
 8000fcc:	0849      	lsrs	r1, r1, #1
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	0006      	movs	r6, r0
 8000fd4:	430d      	orrs	r5, r1
 8000fd6:	e6a5      	b.n	8000d24 <__aeabi_dadd+0x238>
 8000fd8:	464a      	mov	r2, r9
 8000fda:	1abd      	subs	r5, r7, r2
 8000fdc:	42af      	cmp	r7, r5
 8000fde:	4189      	sbcs	r1, r1
 8000fe0:	4662      	mov	r2, ip
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	1a5b      	subs	r3, r3, r1
 8000fe8:	4698      	mov	r8, r3
 8000fea:	4654      	mov	r4, sl
 8000fec:	e5d1      	b.n	8000b92 <__aeabi_dadd+0xa6>
 8000fee:	076c      	lsls	r4, r5, #29
 8000ff0:	08f9      	lsrs	r1, r7, #3
 8000ff2:	4321      	orrs	r1, r4
 8000ff4:	08eb      	lsrs	r3, r5, #3
 8000ff6:	0004      	movs	r4, r0
 8000ff8:	e69d      	b.n	8000d36 <__aeabi_dadd+0x24a>
 8000ffa:	464a      	mov	r2, r9
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	d175      	bne.n	80010ec <__aeabi_dadd+0x600>
 8001000:	4661      	mov	r1, ip
 8001002:	4339      	orrs	r1, r7
 8001004:	d114      	bne.n	8001030 <__aeabi_dadd+0x544>
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	2400      	movs	r4, #0
 800100a:	031b      	lsls	r3, r3, #12
 800100c:	e6bc      	b.n	8000d88 <__aeabi_dadd+0x29c>
 800100e:	464a      	mov	r2, r9
 8001010:	1bd5      	subs	r5, r2, r7
 8001012:	45a9      	cmp	r9, r5
 8001014:	4189      	sbcs	r1, r1
 8001016:	4662      	mov	r2, ip
 8001018:	4249      	negs	r1, r1
 800101a:	1a9b      	subs	r3, r3, r2
 800101c:	1a5b      	subs	r3, r3, r1
 800101e:	4698      	mov	r8, r3
 8001020:	2601      	movs	r6, #1
 8001022:	e5ae      	b.n	8000b82 <__aeabi_dadd+0x96>
 8001024:	464a      	mov	r2, r9
 8001026:	08d1      	lsrs	r1, r2, #3
 8001028:	075a      	lsls	r2, r3, #29
 800102a:	4311      	orrs	r1, r2
 800102c:	08db      	lsrs	r3, r3, #3
 800102e:	e6a7      	b.n	8000d80 <__aeabi_dadd+0x294>
 8001030:	4663      	mov	r3, ip
 8001032:	08f9      	lsrs	r1, r7, #3
 8001034:	075a      	lsls	r2, r3, #29
 8001036:	4654      	mov	r4, sl
 8001038:	4311      	orrs	r1, r2
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	e6a0      	b.n	8000d80 <__aeabi_dadd+0x294>
 800103e:	464a      	mov	r2, r9
 8001040:	4313      	orrs	r3, r2
 8001042:	001d      	movs	r5, r3
 8001044:	1e6b      	subs	r3, r5, #1
 8001046:	419d      	sbcs	r5, r3
 8001048:	e6c7      	b.n	8000dda <__aeabi_dadd+0x2ee>
 800104a:	0014      	movs	r4, r2
 800104c:	001e      	movs	r6, r3
 800104e:	3c20      	subs	r4, #32
 8001050:	40e6      	lsrs	r6, r4
 8001052:	2a20      	cmp	r2, #32
 8001054:	d005      	beq.n	8001062 <__aeabi_dadd+0x576>
 8001056:	2440      	movs	r4, #64	; 0x40
 8001058:	1aa2      	subs	r2, r4, r2
 800105a:	4093      	lsls	r3, r2
 800105c:	464a      	mov	r2, r9
 800105e:	431a      	orrs	r2, r3
 8001060:	4691      	mov	r9, r2
 8001062:	464d      	mov	r5, r9
 8001064:	1e6b      	subs	r3, r5, #1
 8001066:	419d      	sbcs	r5, r3
 8001068:	4335      	orrs	r5, r6
 800106a:	e778      	b.n	8000f5e <__aeabi_dadd+0x472>
 800106c:	464a      	mov	r2, r9
 800106e:	431a      	orrs	r2, r3
 8001070:	d000      	beq.n	8001074 <__aeabi_dadd+0x588>
 8001072:	e66b      	b.n	8000d4c <__aeabi_dadd+0x260>
 8001074:	076b      	lsls	r3, r5, #29
 8001076:	08f9      	lsrs	r1, r7, #3
 8001078:	4319      	orrs	r1, r3
 800107a:	08eb      	lsrs	r3, r5, #3
 800107c:	e680      	b.n	8000d80 <__aeabi_dadd+0x294>
 800107e:	4661      	mov	r1, ip
 8001080:	4339      	orrs	r1, r7
 8001082:	d054      	beq.n	800112e <__aeabi_dadd+0x642>
 8001084:	4663      	mov	r3, ip
 8001086:	08f9      	lsrs	r1, r7, #3
 8001088:	075c      	lsls	r4, r3, #29
 800108a:	4321      	orrs	r1, r4
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	0004      	movs	r4, r0
 8001090:	e654      	b.n	8000d3c <__aeabi_dadd+0x250>
 8001092:	464a      	mov	r2, r9
 8001094:	1abd      	subs	r5, r7, r2
 8001096:	42af      	cmp	r7, r5
 8001098:	4189      	sbcs	r1, r1
 800109a:	4662      	mov	r2, ip
 800109c:	4249      	negs	r1, r1
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	1a5b      	subs	r3, r3, r1
 80010a2:	4698      	mov	r8, r3
 80010a4:	0004      	movs	r4, r0
 80010a6:	2601      	movs	r6, #1
 80010a8:	e56b      	b.n	8000b82 <__aeabi_dadd+0x96>
 80010aa:	464a      	mov	r2, r9
 80010ac:	1bd5      	subs	r5, r2, r7
 80010ae:	45a9      	cmp	r9, r5
 80010b0:	4189      	sbcs	r1, r1
 80010b2:	4662      	mov	r2, ip
 80010b4:	4249      	negs	r1, r1
 80010b6:	1a9a      	subs	r2, r3, r2
 80010b8:	1a52      	subs	r2, r2, r1
 80010ba:	4690      	mov	r8, r2
 80010bc:	0212      	lsls	r2, r2, #8
 80010be:	d532      	bpl.n	8001126 <__aeabi_dadd+0x63a>
 80010c0:	464a      	mov	r2, r9
 80010c2:	1abd      	subs	r5, r7, r2
 80010c4:	42af      	cmp	r7, r5
 80010c6:	4189      	sbcs	r1, r1
 80010c8:	4662      	mov	r2, ip
 80010ca:	4249      	negs	r1, r1
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	1a5b      	subs	r3, r3, r1
 80010d0:	4698      	mov	r8, r3
 80010d2:	0004      	movs	r4, r0
 80010d4:	e584      	b.n	8000be0 <__aeabi_dadd+0xf4>
 80010d6:	4663      	mov	r3, ip
 80010d8:	08f9      	lsrs	r1, r7, #3
 80010da:	075a      	lsls	r2, r3, #29
 80010dc:	4311      	orrs	r1, r2
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	e64e      	b.n	8000d80 <__aeabi_dadd+0x294>
 80010e2:	08f9      	lsrs	r1, r7, #3
 80010e4:	0768      	lsls	r0, r5, #29
 80010e6:	4301      	orrs	r1, r0
 80010e8:	08eb      	lsrs	r3, r5, #3
 80010ea:	e624      	b.n	8000d36 <__aeabi_dadd+0x24a>
 80010ec:	4662      	mov	r2, ip
 80010ee:	433a      	orrs	r2, r7
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dadd+0x608>
 80010f2:	e698      	b.n	8000e26 <__aeabi_dadd+0x33a>
 80010f4:	464a      	mov	r2, r9
 80010f6:	08d1      	lsrs	r1, r2, #3
 80010f8:	075a      	lsls	r2, r3, #29
 80010fa:	4311      	orrs	r1, r2
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	031b      	lsls	r3, r3, #12
 8001102:	421a      	tst	r2, r3
 8001104:	d008      	beq.n	8001118 <__aeabi_dadd+0x62c>
 8001106:	4660      	mov	r0, ip
 8001108:	08c5      	lsrs	r5, r0, #3
 800110a:	421d      	tst	r5, r3
 800110c:	d104      	bne.n	8001118 <__aeabi_dadd+0x62c>
 800110e:	4654      	mov	r4, sl
 8001110:	002a      	movs	r2, r5
 8001112:	08f9      	lsrs	r1, r7, #3
 8001114:	0743      	lsls	r3, r0, #29
 8001116:	4319      	orrs	r1, r3
 8001118:	0f4b      	lsrs	r3, r1, #29
 800111a:	00c9      	lsls	r1, r1, #3
 800111c:	075b      	lsls	r3, r3, #29
 800111e:	08c9      	lsrs	r1, r1, #3
 8001120:	4319      	orrs	r1, r3
 8001122:	0013      	movs	r3, r2
 8001124:	e62c      	b.n	8000d80 <__aeabi_dadd+0x294>
 8001126:	4641      	mov	r1, r8
 8001128:	4329      	orrs	r1, r5
 800112a:	d000      	beq.n	800112e <__aeabi_dadd+0x642>
 800112c:	e5fa      	b.n	8000d24 <__aeabi_dadd+0x238>
 800112e:	2300      	movs	r3, #0
 8001130:	000a      	movs	r2, r1
 8001132:	2400      	movs	r4, #0
 8001134:	e602      	b.n	8000d3c <__aeabi_dadd+0x250>
 8001136:	076b      	lsls	r3, r5, #29
 8001138:	08f9      	lsrs	r1, r7, #3
 800113a:	4319      	orrs	r1, r3
 800113c:	08eb      	lsrs	r3, r5, #3
 800113e:	e5fd      	b.n	8000d3c <__aeabi_dadd+0x250>
 8001140:	4663      	mov	r3, ip
 8001142:	08f9      	lsrs	r1, r7, #3
 8001144:	075b      	lsls	r3, r3, #29
 8001146:	4319      	orrs	r1, r3
 8001148:	4663      	mov	r3, ip
 800114a:	0004      	movs	r4, r0
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	e617      	b.n	8000d80 <__aeabi_dadd+0x294>
 8001150:	003d      	movs	r5, r7
 8001152:	444d      	add	r5, r9
 8001154:	4463      	add	r3, ip
 8001156:	454d      	cmp	r5, r9
 8001158:	4189      	sbcs	r1, r1
 800115a:	4698      	mov	r8, r3
 800115c:	4249      	negs	r1, r1
 800115e:	4488      	add	r8, r1
 8001160:	4643      	mov	r3, r8
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	d400      	bmi.n	8001168 <__aeabi_dadd+0x67c>
 8001166:	e5dd      	b.n	8000d24 <__aeabi_dadd+0x238>
 8001168:	4642      	mov	r2, r8
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <__aeabi_dadd+0x6d0>)
 800116c:	2601      	movs	r6, #1
 800116e:	401a      	ands	r2, r3
 8001170:	4690      	mov	r8, r2
 8001172:	e5d7      	b.n	8000d24 <__aeabi_dadd+0x238>
 8001174:	0010      	movs	r0, r2
 8001176:	001e      	movs	r6, r3
 8001178:	3820      	subs	r0, #32
 800117a:	40c6      	lsrs	r6, r0
 800117c:	2a20      	cmp	r2, #32
 800117e:	d005      	beq.n	800118c <__aeabi_dadd+0x6a0>
 8001180:	2040      	movs	r0, #64	; 0x40
 8001182:	1a82      	subs	r2, r0, r2
 8001184:	4093      	lsls	r3, r2
 8001186:	464a      	mov	r2, r9
 8001188:	431a      	orrs	r2, r3
 800118a:	4691      	mov	r9, r2
 800118c:	464d      	mov	r5, r9
 800118e:	1e6b      	subs	r3, r5, #1
 8001190:	419d      	sbcs	r5, r3
 8001192:	4335      	orrs	r5, r6
 8001194:	e621      	b.n	8000dda <__aeabi_dadd+0x2ee>
 8001196:	0002      	movs	r2, r0
 8001198:	2300      	movs	r3, #0
 800119a:	2100      	movs	r1, #0
 800119c:	e540      	b.n	8000c20 <__aeabi_dadd+0x134>
 800119e:	464a      	mov	r2, r9
 80011a0:	19d5      	adds	r5, r2, r7
 80011a2:	42bd      	cmp	r5, r7
 80011a4:	4189      	sbcs	r1, r1
 80011a6:	4463      	add	r3, ip
 80011a8:	4698      	mov	r8, r3
 80011aa:	4249      	negs	r1, r1
 80011ac:	4488      	add	r8, r1
 80011ae:	e5b3      	b.n	8000d18 <__aeabi_dadd+0x22c>
 80011b0:	2100      	movs	r1, #0
 80011b2:	4a01      	ldr	r2, [pc, #4]	; (80011b8 <__aeabi_dadd+0x6cc>)
 80011b4:	000b      	movs	r3, r1
 80011b6:	e533      	b.n	8000c20 <__aeabi_dadd+0x134>
 80011b8:	000007ff 	.word	0x000007ff
 80011bc:	ff7fffff 	.word	0xff7fffff

080011c0 <__aeabi_ddiv>:
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	4657      	mov	r7, sl
 80011c4:	464e      	mov	r6, r9
 80011c6:	4645      	mov	r5, r8
 80011c8:	46de      	mov	lr, fp
 80011ca:	b5e0      	push	{r5, r6, r7, lr}
 80011cc:	4681      	mov	r9, r0
 80011ce:	0005      	movs	r5, r0
 80011d0:	030c      	lsls	r4, r1, #12
 80011d2:	0048      	lsls	r0, r1, #1
 80011d4:	4692      	mov	sl, r2
 80011d6:	001f      	movs	r7, r3
 80011d8:	b085      	sub	sp, #20
 80011da:	0b24      	lsrs	r4, r4, #12
 80011dc:	0d40      	lsrs	r0, r0, #21
 80011de:	0fce      	lsrs	r6, r1, #31
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d059      	beq.n	8001298 <__aeabi_ddiv+0xd8>
 80011e4:	4b87      	ldr	r3, [pc, #540]	; (8001404 <__aeabi_ddiv+0x244>)
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d100      	bne.n	80011ec <__aeabi_ddiv+0x2c>
 80011ea:	e098      	b.n	800131e <__aeabi_ddiv+0x15e>
 80011ec:	0f6b      	lsrs	r3, r5, #29
 80011ee:	00e4      	lsls	r4, r4, #3
 80011f0:	431c      	orrs	r4, r3
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	4323      	orrs	r3, r4
 80011f8:	4698      	mov	r8, r3
 80011fa:	4b83      	ldr	r3, [pc, #524]	; (8001408 <__aeabi_ddiv+0x248>)
 80011fc:	00ed      	lsls	r5, r5, #3
 80011fe:	469b      	mov	fp, r3
 8001200:	2300      	movs	r3, #0
 8001202:	4699      	mov	r9, r3
 8001204:	4483      	add	fp, r0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	033c      	lsls	r4, r7, #12
 800120a:	007b      	lsls	r3, r7, #1
 800120c:	4650      	mov	r0, sl
 800120e:	0b24      	lsrs	r4, r4, #12
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	0fff      	lsrs	r7, r7, #31
 8001214:	2b00      	cmp	r3, #0
 8001216:	d067      	beq.n	80012e8 <__aeabi_ddiv+0x128>
 8001218:	4a7a      	ldr	r2, [pc, #488]	; (8001404 <__aeabi_ddiv+0x244>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d018      	beq.n	8001250 <__aeabi_ddiv+0x90>
 800121e:	497a      	ldr	r1, [pc, #488]	; (8001408 <__aeabi_ddiv+0x248>)
 8001220:	0f42      	lsrs	r2, r0, #29
 8001222:	468c      	mov	ip, r1
 8001224:	00e4      	lsls	r4, r4, #3
 8001226:	4659      	mov	r1, fp
 8001228:	4314      	orrs	r4, r2
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	4463      	add	r3, ip
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	1acb      	subs	r3, r1, r3
 8001232:	4314      	orrs	r4, r2
 8001234:	469b      	mov	fp, r3
 8001236:	00c2      	lsls	r2, r0, #3
 8001238:	2000      	movs	r0, #0
 800123a:	0033      	movs	r3, r6
 800123c:	407b      	eors	r3, r7
 800123e:	469a      	mov	sl, r3
 8001240:	464b      	mov	r3, r9
 8001242:	2b0f      	cmp	r3, #15
 8001244:	d900      	bls.n	8001248 <__aeabi_ddiv+0x88>
 8001246:	e0ef      	b.n	8001428 <__aeabi_ddiv+0x268>
 8001248:	4970      	ldr	r1, [pc, #448]	; (800140c <__aeabi_ddiv+0x24c>)
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	58cb      	ldr	r3, [r1, r3]
 800124e:	469f      	mov	pc, r3
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <__aeabi_ddiv+0x250>)
 8001252:	4652      	mov	r2, sl
 8001254:	469c      	mov	ip, r3
 8001256:	4322      	orrs	r2, r4
 8001258:	44e3      	add	fp, ip
 800125a:	2a00      	cmp	r2, #0
 800125c:	d000      	beq.n	8001260 <__aeabi_ddiv+0xa0>
 800125e:	e095      	b.n	800138c <__aeabi_ddiv+0x1cc>
 8001260:	4649      	mov	r1, r9
 8001262:	2302      	movs	r3, #2
 8001264:	4319      	orrs	r1, r3
 8001266:	4689      	mov	r9, r1
 8001268:	2400      	movs	r4, #0
 800126a:	2002      	movs	r0, #2
 800126c:	e7e5      	b.n	800123a <__aeabi_ddiv+0x7a>
 800126e:	2300      	movs	r3, #0
 8001270:	2400      	movs	r4, #0
 8001272:	2500      	movs	r5, #0
 8001274:	4652      	mov	r2, sl
 8001276:	051b      	lsls	r3, r3, #20
 8001278:	4323      	orrs	r3, r4
 800127a:	07d2      	lsls	r2, r2, #31
 800127c:	4313      	orrs	r3, r2
 800127e:	0028      	movs	r0, r5
 8001280:	0019      	movs	r1, r3
 8001282:	b005      	add	sp, #20
 8001284:	bcf0      	pop	{r4, r5, r6, r7}
 8001286:	46bb      	mov	fp, r7
 8001288:	46b2      	mov	sl, r6
 800128a:	46a9      	mov	r9, r5
 800128c:	46a0      	mov	r8, r4
 800128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001290:	2400      	movs	r4, #0
 8001292:	2500      	movs	r5, #0
 8001294:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <__aeabi_ddiv+0x244>)
 8001296:	e7ed      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001298:	464b      	mov	r3, r9
 800129a:	4323      	orrs	r3, r4
 800129c:	4698      	mov	r8, r3
 800129e:	d100      	bne.n	80012a2 <__aeabi_ddiv+0xe2>
 80012a0:	e089      	b.n	80013b6 <__aeabi_ddiv+0x1f6>
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_ddiv+0xe8>
 80012a6:	e1e0      	b.n	800166a <__aeabi_ddiv+0x4aa>
 80012a8:	0020      	movs	r0, r4
 80012aa:	f001 fa61 	bl	8002770 <__clzsi2>
 80012ae:	0001      	movs	r1, r0
 80012b0:	0002      	movs	r2, r0
 80012b2:	390b      	subs	r1, #11
 80012b4:	231d      	movs	r3, #29
 80012b6:	1a5b      	subs	r3, r3, r1
 80012b8:	4649      	mov	r1, r9
 80012ba:	0010      	movs	r0, r2
 80012bc:	40d9      	lsrs	r1, r3
 80012be:	3808      	subs	r0, #8
 80012c0:	4084      	lsls	r4, r0
 80012c2:	000b      	movs	r3, r1
 80012c4:	464d      	mov	r5, r9
 80012c6:	4323      	orrs	r3, r4
 80012c8:	4698      	mov	r8, r3
 80012ca:	4085      	lsls	r5, r0
 80012cc:	4851      	ldr	r0, [pc, #324]	; (8001414 <__aeabi_ddiv+0x254>)
 80012ce:	033c      	lsls	r4, r7, #12
 80012d0:	1a83      	subs	r3, r0, r2
 80012d2:	469b      	mov	fp, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	4699      	mov	r9, r3
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	007b      	lsls	r3, r7, #1
 80012dc:	4650      	mov	r0, sl
 80012de:	0b24      	lsrs	r4, r4, #12
 80012e0:	0d5b      	lsrs	r3, r3, #21
 80012e2:	0fff      	lsrs	r7, r7, #31
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d197      	bne.n	8001218 <__aeabi_ddiv+0x58>
 80012e8:	4652      	mov	r2, sl
 80012ea:	4322      	orrs	r2, r4
 80012ec:	d055      	beq.n	800139a <__aeabi_ddiv+0x1da>
 80012ee:	2c00      	cmp	r4, #0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_ddiv+0x134>
 80012f2:	e1ca      	b.n	800168a <__aeabi_ddiv+0x4ca>
 80012f4:	0020      	movs	r0, r4
 80012f6:	f001 fa3b 	bl	8002770 <__clzsi2>
 80012fa:	0002      	movs	r2, r0
 80012fc:	3a0b      	subs	r2, #11
 80012fe:	231d      	movs	r3, #29
 8001300:	0001      	movs	r1, r0
 8001302:	1a9b      	subs	r3, r3, r2
 8001304:	4652      	mov	r2, sl
 8001306:	3908      	subs	r1, #8
 8001308:	40da      	lsrs	r2, r3
 800130a:	408c      	lsls	r4, r1
 800130c:	4314      	orrs	r4, r2
 800130e:	4652      	mov	r2, sl
 8001310:	408a      	lsls	r2, r1
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <__aeabi_ddiv+0x258>)
 8001314:	4458      	add	r0, fp
 8001316:	469b      	mov	fp, r3
 8001318:	4483      	add	fp, r0
 800131a:	2000      	movs	r0, #0
 800131c:	e78d      	b.n	800123a <__aeabi_ddiv+0x7a>
 800131e:	464b      	mov	r3, r9
 8001320:	4323      	orrs	r3, r4
 8001322:	4698      	mov	r8, r3
 8001324:	d140      	bne.n	80013a8 <__aeabi_ddiv+0x1e8>
 8001326:	2308      	movs	r3, #8
 8001328:	4699      	mov	r9, r3
 800132a:	3b06      	subs	r3, #6
 800132c:	2500      	movs	r5, #0
 800132e:	4683      	mov	fp, r0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	e769      	b.n	8001208 <__aeabi_ddiv+0x48>
 8001334:	46b2      	mov	sl, r6
 8001336:	9b00      	ldr	r3, [sp, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d0a9      	beq.n	8001290 <__aeabi_ddiv+0xd0>
 800133c:	2b03      	cmp	r3, #3
 800133e:	d100      	bne.n	8001342 <__aeabi_ddiv+0x182>
 8001340:	e211      	b.n	8001766 <__aeabi_ddiv+0x5a6>
 8001342:	2b01      	cmp	r3, #1
 8001344:	d093      	beq.n	800126e <__aeabi_ddiv+0xae>
 8001346:	4a35      	ldr	r2, [pc, #212]	; (800141c <__aeabi_ddiv+0x25c>)
 8001348:	445a      	add	r2, fp
 800134a:	2a00      	cmp	r2, #0
 800134c:	dc00      	bgt.n	8001350 <__aeabi_ddiv+0x190>
 800134e:	e13c      	b.n	80015ca <__aeabi_ddiv+0x40a>
 8001350:	076b      	lsls	r3, r5, #29
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x196>
 8001354:	e1a7      	b.n	80016a6 <__aeabi_ddiv+0x4e6>
 8001356:	08ed      	lsrs	r5, r5, #3
 8001358:	4643      	mov	r3, r8
 800135a:	01db      	lsls	r3, r3, #7
 800135c:	d506      	bpl.n	800136c <__aeabi_ddiv+0x1ac>
 800135e:	4642      	mov	r2, r8
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <__aeabi_ddiv+0x260>)
 8001362:	401a      	ands	r2, r3
 8001364:	4690      	mov	r8, r2
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	00d2      	lsls	r2, r2, #3
 800136a:	445a      	add	r2, fp
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <__aeabi_ddiv+0x264>)
 800136e:	429a      	cmp	r2, r3
 8001370:	dc8e      	bgt.n	8001290 <__aeabi_ddiv+0xd0>
 8001372:	4643      	mov	r3, r8
 8001374:	0552      	lsls	r2, r2, #21
 8001376:	0758      	lsls	r0, r3, #29
 8001378:	025c      	lsls	r4, r3, #9
 800137a:	4305      	orrs	r5, r0
 800137c:	0b24      	lsrs	r4, r4, #12
 800137e:	0d53      	lsrs	r3, r2, #21
 8001380:	e778      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001382:	46ba      	mov	sl, r7
 8001384:	46a0      	mov	r8, r4
 8001386:	0015      	movs	r5, r2
 8001388:	9000      	str	r0, [sp, #0]
 800138a:	e7d4      	b.n	8001336 <__aeabi_ddiv+0x176>
 800138c:	464a      	mov	r2, r9
 800138e:	2303      	movs	r3, #3
 8001390:	431a      	orrs	r2, r3
 8001392:	4691      	mov	r9, r2
 8001394:	2003      	movs	r0, #3
 8001396:	4652      	mov	r2, sl
 8001398:	e74f      	b.n	800123a <__aeabi_ddiv+0x7a>
 800139a:	4649      	mov	r1, r9
 800139c:	2301      	movs	r3, #1
 800139e:	4319      	orrs	r1, r3
 80013a0:	4689      	mov	r9, r1
 80013a2:	2400      	movs	r4, #0
 80013a4:	2001      	movs	r0, #1
 80013a6:	e748      	b.n	800123a <__aeabi_ddiv+0x7a>
 80013a8:	230c      	movs	r3, #12
 80013aa:	4699      	mov	r9, r3
 80013ac:	3b09      	subs	r3, #9
 80013ae:	46a0      	mov	r8, r4
 80013b0:	4683      	mov	fp, r0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	e728      	b.n	8001208 <__aeabi_ddiv+0x48>
 80013b6:	2304      	movs	r3, #4
 80013b8:	4699      	mov	r9, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	469b      	mov	fp, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	2500      	movs	r5, #0
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	e720      	b.n	8001208 <__aeabi_ddiv+0x48>
 80013c6:	2300      	movs	r3, #0
 80013c8:	2480      	movs	r4, #128	; 0x80
 80013ca:	469a      	mov	sl, r3
 80013cc:	2500      	movs	r5, #0
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <__aeabi_ddiv+0x244>)
 80013d0:	0324      	lsls	r4, r4, #12
 80013d2:	e74f      	b.n	8001274 <__aeabi_ddiv+0xb4>
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	4641      	mov	r1, r8
 80013d8:	031b      	lsls	r3, r3, #12
 80013da:	4219      	tst	r1, r3
 80013dc:	d008      	beq.n	80013f0 <__aeabi_ddiv+0x230>
 80013de:	421c      	tst	r4, r3
 80013e0:	d106      	bne.n	80013f0 <__aeabi_ddiv+0x230>
 80013e2:	431c      	orrs	r4, r3
 80013e4:	0324      	lsls	r4, r4, #12
 80013e6:	46ba      	mov	sl, r7
 80013e8:	0015      	movs	r5, r2
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <__aeabi_ddiv+0x244>)
 80013ec:	0b24      	lsrs	r4, r4, #12
 80013ee:	e741      	b.n	8001274 <__aeabi_ddiv+0xb4>
 80013f0:	2480      	movs	r4, #128	; 0x80
 80013f2:	4643      	mov	r3, r8
 80013f4:	0324      	lsls	r4, r4, #12
 80013f6:	431c      	orrs	r4, r3
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	46b2      	mov	sl, r6
 80013fc:	4b01      	ldr	r3, [pc, #4]	; (8001404 <__aeabi_ddiv+0x244>)
 80013fe:	0b24      	lsrs	r4, r4, #12
 8001400:	e738      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	000007ff 	.word	0x000007ff
 8001408:	fffffc01 	.word	0xfffffc01
 800140c:	08021b8c 	.word	0x08021b8c
 8001410:	fffff801 	.word	0xfffff801
 8001414:	fffffc0d 	.word	0xfffffc0d
 8001418:	000003f3 	.word	0x000003f3
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	4544      	cmp	r4, r8
 800142a:	d200      	bcs.n	800142e <__aeabi_ddiv+0x26e>
 800142c:	e116      	b.n	800165c <__aeabi_ddiv+0x49c>
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x272>
 8001430:	e111      	b.n	8001656 <__aeabi_ddiv+0x496>
 8001432:	2301      	movs	r3, #1
 8001434:	425b      	negs	r3, r3
 8001436:	469c      	mov	ip, r3
 8001438:	002e      	movs	r6, r5
 800143a:	4640      	mov	r0, r8
 800143c:	2500      	movs	r5, #0
 800143e:	44e3      	add	fp, ip
 8001440:	0223      	lsls	r3, r4, #8
 8001442:	0e14      	lsrs	r4, r2, #24
 8001444:	431c      	orrs	r4, r3
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	4699      	mov	r9, r3
 800144a:	0423      	lsls	r3, r4, #16
 800144c:	0c1f      	lsrs	r7, r3, #16
 800144e:	0212      	lsls	r2, r2, #8
 8001450:	4649      	mov	r1, r9
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	9701      	str	r7, [sp, #4]
 8001456:	f7fe fee5 	bl	8000224 <__aeabi_uidivmod>
 800145a:	0002      	movs	r2, r0
 800145c:	437a      	muls	r2, r7
 800145e:	040b      	lsls	r3, r1, #16
 8001460:	0c31      	lsrs	r1, r6, #16
 8001462:	4680      	mov	r8, r0
 8001464:	4319      	orrs	r1, r3
 8001466:	428a      	cmp	r2, r1
 8001468:	d90b      	bls.n	8001482 <__aeabi_ddiv+0x2c2>
 800146a:	2301      	movs	r3, #1
 800146c:	425b      	negs	r3, r3
 800146e:	469c      	mov	ip, r3
 8001470:	1909      	adds	r1, r1, r4
 8001472:	44e0      	add	r8, ip
 8001474:	428c      	cmp	r4, r1
 8001476:	d804      	bhi.n	8001482 <__aeabi_ddiv+0x2c2>
 8001478:	428a      	cmp	r2, r1
 800147a:	d902      	bls.n	8001482 <__aeabi_ddiv+0x2c2>
 800147c:	1e83      	subs	r3, r0, #2
 800147e:	4698      	mov	r8, r3
 8001480:	1909      	adds	r1, r1, r4
 8001482:	1a88      	subs	r0, r1, r2
 8001484:	4649      	mov	r1, r9
 8001486:	f7fe fecd 	bl	8000224 <__aeabi_uidivmod>
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	468c      	mov	ip, r1
 800148e:	0431      	lsls	r1, r6, #16
 8001490:	4666      	mov	r6, ip
 8001492:	9a01      	ldr	r2, [sp, #4]
 8001494:	0c09      	lsrs	r1, r1, #16
 8001496:	4342      	muls	r2, r0
 8001498:	0003      	movs	r3, r0
 800149a:	4331      	orrs	r1, r6
 800149c:	428a      	cmp	r2, r1
 800149e:	d904      	bls.n	80014aa <__aeabi_ddiv+0x2ea>
 80014a0:	1909      	adds	r1, r1, r4
 80014a2:	3b01      	subs	r3, #1
 80014a4:	428c      	cmp	r4, r1
 80014a6:	d800      	bhi.n	80014aa <__aeabi_ddiv+0x2ea>
 80014a8:	e111      	b.n	80016ce <__aeabi_ddiv+0x50e>
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	4642      	mov	r2, r8
 80014ae:	9e00      	ldr	r6, [sp, #0]
 80014b0:	0412      	lsls	r2, r2, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	0c33      	lsrs	r3, r6, #16
 80014b6:	001f      	movs	r7, r3
 80014b8:	0c10      	lsrs	r0, r2, #16
 80014ba:	4690      	mov	r8, r2
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	0413      	lsls	r3, r2, #16
 80014c0:	0432      	lsls	r2, r6, #16
 80014c2:	0c16      	lsrs	r6, r2, #16
 80014c4:	0032      	movs	r2, r6
 80014c6:	0c1b      	lsrs	r3, r3, #16
 80014c8:	435a      	muls	r2, r3
 80014ca:	9603      	str	r6, [sp, #12]
 80014cc:	437b      	muls	r3, r7
 80014ce:	4346      	muls	r6, r0
 80014d0:	4378      	muls	r0, r7
 80014d2:	0c17      	lsrs	r7, r2, #16
 80014d4:	46bc      	mov	ip, r7
 80014d6:	199b      	adds	r3, r3, r6
 80014d8:	4463      	add	r3, ip
 80014da:	429e      	cmp	r6, r3
 80014dc:	d903      	bls.n	80014e6 <__aeabi_ddiv+0x326>
 80014de:	2680      	movs	r6, #128	; 0x80
 80014e0:	0276      	lsls	r6, r6, #9
 80014e2:	46b4      	mov	ip, r6
 80014e4:	4460      	add	r0, ip
 80014e6:	0c1e      	lsrs	r6, r3, #16
 80014e8:	1830      	adds	r0, r6, r0
 80014ea:	0416      	lsls	r6, r2, #16
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	0c36      	lsrs	r6, r6, #16
 80014f0:	199e      	adds	r6, r3, r6
 80014f2:	4281      	cmp	r1, r0
 80014f4:	d200      	bcs.n	80014f8 <__aeabi_ddiv+0x338>
 80014f6:	e09c      	b.n	8001632 <__aeabi_ddiv+0x472>
 80014f8:	d100      	bne.n	80014fc <__aeabi_ddiv+0x33c>
 80014fa:	e097      	b.n	800162c <__aeabi_ddiv+0x46c>
 80014fc:	1bae      	subs	r6, r5, r6
 80014fe:	1a09      	subs	r1, r1, r0
 8001500:	42b5      	cmp	r5, r6
 8001502:	4180      	sbcs	r0, r0
 8001504:	4240      	negs	r0, r0
 8001506:	1a08      	subs	r0, r1, r0
 8001508:	4284      	cmp	r4, r0
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x34e>
 800150c:	e111      	b.n	8001732 <__aeabi_ddiv+0x572>
 800150e:	4649      	mov	r1, r9
 8001510:	f7fe fe88 	bl	8000224 <__aeabi_uidivmod>
 8001514:	9a01      	ldr	r2, [sp, #4]
 8001516:	040b      	lsls	r3, r1, #16
 8001518:	4342      	muls	r2, r0
 800151a:	0c31      	lsrs	r1, r6, #16
 800151c:	0005      	movs	r5, r0
 800151e:	4319      	orrs	r1, r3
 8001520:	428a      	cmp	r2, r1
 8001522:	d907      	bls.n	8001534 <__aeabi_ddiv+0x374>
 8001524:	1909      	adds	r1, r1, r4
 8001526:	3d01      	subs	r5, #1
 8001528:	428c      	cmp	r4, r1
 800152a:	d803      	bhi.n	8001534 <__aeabi_ddiv+0x374>
 800152c:	428a      	cmp	r2, r1
 800152e:	d901      	bls.n	8001534 <__aeabi_ddiv+0x374>
 8001530:	1e85      	subs	r5, r0, #2
 8001532:	1909      	adds	r1, r1, r4
 8001534:	1a88      	subs	r0, r1, r2
 8001536:	4649      	mov	r1, r9
 8001538:	f7fe fe74 	bl	8000224 <__aeabi_uidivmod>
 800153c:	0409      	lsls	r1, r1, #16
 800153e:	468c      	mov	ip, r1
 8001540:	0431      	lsls	r1, r6, #16
 8001542:	4666      	mov	r6, ip
 8001544:	9a01      	ldr	r2, [sp, #4]
 8001546:	0c09      	lsrs	r1, r1, #16
 8001548:	4342      	muls	r2, r0
 800154a:	0003      	movs	r3, r0
 800154c:	4331      	orrs	r1, r6
 800154e:	428a      	cmp	r2, r1
 8001550:	d907      	bls.n	8001562 <__aeabi_ddiv+0x3a2>
 8001552:	1909      	adds	r1, r1, r4
 8001554:	3b01      	subs	r3, #1
 8001556:	428c      	cmp	r4, r1
 8001558:	d803      	bhi.n	8001562 <__aeabi_ddiv+0x3a2>
 800155a:	428a      	cmp	r2, r1
 800155c:	d901      	bls.n	8001562 <__aeabi_ddiv+0x3a2>
 800155e:	1e83      	subs	r3, r0, #2
 8001560:	1909      	adds	r1, r1, r4
 8001562:	9e03      	ldr	r6, [sp, #12]
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	0032      	movs	r2, r6
 8001568:	042d      	lsls	r5, r5, #16
 800156a:	431d      	orrs	r5, r3
 800156c:	9f02      	ldr	r7, [sp, #8]
 800156e:	042b      	lsls	r3, r5, #16
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	435a      	muls	r2, r3
 8001574:	437b      	muls	r3, r7
 8001576:	469c      	mov	ip, r3
 8001578:	0c28      	lsrs	r0, r5, #16
 800157a:	4346      	muls	r6, r0
 800157c:	0c13      	lsrs	r3, r2, #16
 800157e:	44b4      	add	ip, r6
 8001580:	4463      	add	r3, ip
 8001582:	4378      	muls	r0, r7
 8001584:	429e      	cmp	r6, r3
 8001586:	d903      	bls.n	8001590 <__aeabi_ddiv+0x3d0>
 8001588:	2680      	movs	r6, #128	; 0x80
 800158a:	0276      	lsls	r6, r6, #9
 800158c:	46b4      	mov	ip, r6
 800158e:	4460      	add	r0, ip
 8001590:	0c1e      	lsrs	r6, r3, #16
 8001592:	0412      	lsls	r2, r2, #16
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	0c12      	lsrs	r2, r2, #16
 8001598:	1830      	adds	r0, r6, r0
 800159a:	189b      	adds	r3, r3, r2
 800159c:	4281      	cmp	r1, r0
 800159e:	d306      	bcc.n	80015ae <__aeabi_ddiv+0x3ee>
 80015a0:	d002      	beq.n	80015a8 <__aeabi_ddiv+0x3e8>
 80015a2:	2301      	movs	r3, #1
 80015a4:	431d      	orrs	r5, r3
 80015a6:	e6ce      	b.n	8001346 <__aeabi_ddiv+0x186>
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d100      	bne.n	80015ae <__aeabi_ddiv+0x3ee>
 80015ac:	e6cb      	b.n	8001346 <__aeabi_ddiv+0x186>
 80015ae:	1861      	adds	r1, r4, r1
 80015b0:	1e6e      	subs	r6, r5, #1
 80015b2:	42a1      	cmp	r1, r4
 80015b4:	d200      	bcs.n	80015b8 <__aeabi_ddiv+0x3f8>
 80015b6:	e0a4      	b.n	8001702 <__aeabi_ddiv+0x542>
 80015b8:	4281      	cmp	r1, r0
 80015ba:	d200      	bcs.n	80015be <__aeabi_ddiv+0x3fe>
 80015bc:	e0c9      	b.n	8001752 <__aeabi_ddiv+0x592>
 80015be:	d100      	bne.n	80015c2 <__aeabi_ddiv+0x402>
 80015c0:	e0d9      	b.n	8001776 <__aeabi_ddiv+0x5b6>
 80015c2:	0035      	movs	r5, r6
 80015c4:	e7ed      	b.n	80015a2 <__aeabi_ddiv+0x3e2>
 80015c6:	2501      	movs	r5, #1
 80015c8:	426d      	negs	r5, r5
 80015ca:	2101      	movs	r1, #1
 80015cc:	1a89      	subs	r1, r1, r2
 80015ce:	2938      	cmp	r1, #56	; 0x38
 80015d0:	dd00      	ble.n	80015d4 <__aeabi_ddiv+0x414>
 80015d2:	e64c      	b.n	800126e <__aeabi_ddiv+0xae>
 80015d4:	291f      	cmp	r1, #31
 80015d6:	dc00      	bgt.n	80015da <__aeabi_ddiv+0x41a>
 80015d8:	e07f      	b.n	80016da <__aeabi_ddiv+0x51a>
 80015da:	231f      	movs	r3, #31
 80015dc:	425b      	negs	r3, r3
 80015de:	1a9a      	subs	r2, r3, r2
 80015e0:	4643      	mov	r3, r8
 80015e2:	40d3      	lsrs	r3, r2
 80015e4:	2920      	cmp	r1, #32
 80015e6:	d004      	beq.n	80015f2 <__aeabi_ddiv+0x432>
 80015e8:	4644      	mov	r4, r8
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <__aeabi_ddiv+0x5c0>)
 80015ec:	445a      	add	r2, fp
 80015ee:	4094      	lsls	r4, r2
 80015f0:	4325      	orrs	r5, r4
 80015f2:	1e6a      	subs	r2, r5, #1
 80015f4:	4195      	sbcs	r5, r2
 80015f6:	2207      	movs	r2, #7
 80015f8:	432b      	orrs	r3, r5
 80015fa:	0015      	movs	r5, r2
 80015fc:	2400      	movs	r4, #0
 80015fe:	401d      	ands	r5, r3
 8001600:	421a      	tst	r2, r3
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x446>
 8001604:	e0a1      	b.n	800174a <__aeabi_ddiv+0x58a>
 8001606:	220f      	movs	r2, #15
 8001608:	2400      	movs	r4, #0
 800160a:	401a      	ands	r2, r3
 800160c:	2a04      	cmp	r2, #4
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x452>
 8001610:	e098      	b.n	8001744 <__aeabi_ddiv+0x584>
 8001612:	1d1a      	adds	r2, r3, #4
 8001614:	429a      	cmp	r2, r3
 8001616:	419b      	sbcs	r3, r3
 8001618:	425b      	negs	r3, r3
 800161a:	18e4      	adds	r4, r4, r3
 800161c:	0013      	movs	r3, r2
 800161e:	0222      	lsls	r2, r4, #8
 8001620:	d400      	bmi.n	8001624 <__aeabi_ddiv+0x464>
 8001622:	e08f      	b.n	8001744 <__aeabi_ddiv+0x584>
 8001624:	2301      	movs	r3, #1
 8001626:	2400      	movs	r4, #0
 8001628:	2500      	movs	r5, #0
 800162a:	e623      	b.n	8001274 <__aeabi_ddiv+0xb4>
 800162c:	42b5      	cmp	r5, r6
 800162e:	d300      	bcc.n	8001632 <__aeabi_ddiv+0x472>
 8001630:	e764      	b.n	80014fc <__aeabi_ddiv+0x33c>
 8001632:	4643      	mov	r3, r8
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	9b00      	ldr	r3, [sp, #0]
 8001638:	469c      	mov	ip, r3
 800163a:	4465      	add	r5, ip
 800163c:	001f      	movs	r7, r3
 800163e:	429d      	cmp	r5, r3
 8001640:	419b      	sbcs	r3, r3
 8001642:	425b      	negs	r3, r3
 8001644:	191b      	adds	r3, r3, r4
 8001646:	18c9      	adds	r1, r1, r3
 8001648:	428c      	cmp	r4, r1
 800164a:	d23a      	bcs.n	80016c2 <__aeabi_ddiv+0x502>
 800164c:	4288      	cmp	r0, r1
 800164e:	d863      	bhi.n	8001718 <__aeabi_ddiv+0x558>
 8001650:	d060      	beq.n	8001714 <__aeabi_ddiv+0x554>
 8001652:	4690      	mov	r8, r2
 8001654:	e752      	b.n	80014fc <__aeabi_ddiv+0x33c>
 8001656:	42aa      	cmp	r2, r5
 8001658:	d900      	bls.n	800165c <__aeabi_ddiv+0x49c>
 800165a:	e6ea      	b.n	8001432 <__aeabi_ddiv+0x272>
 800165c:	4643      	mov	r3, r8
 800165e:	07de      	lsls	r6, r3, #31
 8001660:	0858      	lsrs	r0, r3, #1
 8001662:	086b      	lsrs	r3, r5, #1
 8001664:	431e      	orrs	r6, r3
 8001666:	07ed      	lsls	r5, r5, #31
 8001668:	e6ea      	b.n	8001440 <__aeabi_ddiv+0x280>
 800166a:	4648      	mov	r0, r9
 800166c:	f001 f880 	bl	8002770 <__clzsi2>
 8001670:	0001      	movs	r1, r0
 8001672:	0002      	movs	r2, r0
 8001674:	3115      	adds	r1, #21
 8001676:	3220      	adds	r2, #32
 8001678:	291c      	cmp	r1, #28
 800167a:	dc00      	bgt.n	800167e <__aeabi_ddiv+0x4be>
 800167c:	e61a      	b.n	80012b4 <__aeabi_ddiv+0xf4>
 800167e:	464b      	mov	r3, r9
 8001680:	3808      	subs	r0, #8
 8001682:	4083      	lsls	r3, r0
 8001684:	2500      	movs	r5, #0
 8001686:	4698      	mov	r8, r3
 8001688:	e620      	b.n	80012cc <__aeabi_ddiv+0x10c>
 800168a:	f001 f871 	bl	8002770 <__clzsi2>
 800168e:	0003      	movs	r3, r0
 8001690:	001a      	movs	r2, r3
 8001692:	3215      	adds	r2, #21
 8001694:	3020      	adds	r0, #32
 8001696:	2a1c      	cmp	r2, #28
 8001698:	dc00      	bgt.n	800169c <__aeabi_ddiv+0x4dc>
 800169a:	e630      	b.n	80012fe <__aeabi_ddiv+0x13e>
 800169c:	4654      	mov	r4, sl
 800169e:	3b08      	subs	r3, #8
 80016a0:	2200      	movs	r2, #0
 80016a2:	409c      	lsls	r4, r3
 80016a4:	e635      	b.n	8001312 <__aeabi_ddiv+0x152>
 80016a6:	230f      	movs	r3, #15
 80016a8:	402b      	ands	r3, r5
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d100      	bne.n	80016b0 <__aeabi_ddiv+0x4f0>
 80016ae:	e652      	b.n	8001356 <__aeabi_ddiv+0x196>
 80016b0:	2305      	movs	r3, #5
 80016b2:	425b      	negs	r3, r3
 80016b4:	42ab      	cmp	r3, r5
 80016b6:	419b      	sbcs	r3, r3
 80016b8:	3504      	adds	r5, #4
 80016ba:	425b      	negs	r3, r3
 80016bc:	08ed      	lsrs	r5, r5, #3
 80016be:	4498      	add	r8, r3
 80016c0:	e64a      	b.n	8001358 <__aeabi_ddiv+0x198>
 80016c2:	428c      	cmp	r4, r1
 80016c4:	d1c5      	bne.n	8001652 <__aeabi_ddiv+0x492>
 80016c6:	42af      	cmp	r7, r5
 80016c8:	d9c0      	bls.n	800164c <__aeabi_ddiv+0x48c>
 80016ca:	4690      	mov	r8, r2
 80016cc:	e716      	b.n	80014fc <__aeabi_ddiv+0x33c>
 80016ce:	428a      	cmp	r2, r1
 80016d0:	d800      	bhi.n	80016d4 <__aeabi_ddiv+0x514>
 80016d2:	e6ea      	b.n	80014aa <__aeabi_ddiv+0x2ea>
 80016d4:	1e83      	subs	r3, r0, #2
 80016d6:	1909      	adds	r1, r1, r4
 80016d8:	e6e7      	b.n	80014aa <__aeabi_ddiv+0x2ea>
 80016da:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <__aeabi_ddiv+0x5c4>)
 80016dc:	0028      	movs	r0, r5
 80016de:	445a      	add	r2, fp
 80016e0:	4643      	mov	r3, r8
 80016e2:	4095      	lsls	r5, r2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	40c8      	lsrs	r0, r1
 80016e8:	1e6a      	subs	r2, r5, #1
 80016ea:	4195      	sbcs	r5, r2
 80016ec:	4644      	mov	r4, r8
 80016ee:	4303      	orrs	r3, r0
 80016f0:	432b      	orrs	r3, r5
 80016f2:	40cc      	lsrs	r4, r1
 80016f4:	075a      	lsls	r2, r3, #29
 80016f6:	d092      	beq.n	800161e <__aeabi_ddiv+0x45e>
 80016f8:	220f      	movs	r2, #15
 80016fa:	401a      	ands	r2, r3
 80016fc:	2a04      	cmp	r2, #4
 80016fe:	d188      	bne.n	8001612 <__aeabi_ddiv+0x452>
 8001700:	e78d      	b.n	800161e <__aeabi_ddiv+0x45e>
 8001702:	0035      	movs	r5, r6
 8001704:	4281      	cmp	r1, r0
 8001706:	d000      	beq.n	800170a <__aeabi_ddiv+0x54a>
 8001708:	e74b      	b.n	80015a2 <__aeabi_ddiv+0x3e2>
 800170a:	9a00      	ldr	r2, [sp, #0]
 800170c:	4293      	cmp	r3, r2
 800170e:	d000      	beq.n	8001712 <__aeabi_ddiv+0x552>
 8001710:	e747      	b.n	80015a2 <__aeabi_ddiv+0x3e2>
 8001712:	e618      	b.n	8001346 <__aeabi_ddiv+0x186>
 8001714:	42ae      	cmp	r6, r5
 8001716:	d99c      	bls.n	8001652 <__aeabi_ddiv+0x492>
 8001718:	2302      	movs	r3, #2
 800171a:	425b      	negs	r3, r3
 800171c:	469c      	mov	ip, r3
 800171e:	9b00      	ldr	r3, [sp, #0]
 8001720:	44e0      	add	r8, ip
 8001722:	469c      	mov	ip, r3
 8001724:	4465      	add	r5, ip
 8001726:	429d      	cmp	r5, r3
 8001728:	419b      	sbcs	r3, r3
 800172a:	425b      	negs	r3, r3
 800172c:	191b      	adds	r3, r3, r4
 800172e:	18c9      	adds	r1, r1, r3
 8001730:	e6e4      	b.n	80014fc <__aeabi_ddiv+0x33c>
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <__aeabi_ddiv+0x5c8>)
 8001734:	445a      	add	r2, fp
 8001736:	2a00      	cmp	r2, #0
 8001738:	dc00      	bgt.n	800173c <__aeabi_ddiv+0x57c>
 800173a:	e744      	b.n	80015c6 <__aeabi_ddiv+0x406>
 800173c:	2301      	movs	r3, #1
 800173e:	2500      	movs	r5, #0
 8001740:	4498      	add	r8, r3
 8001742:	e609      	b.n	8001358 <__aeabi_ddiv+0x198>
 8001744:	0765      	lsls	r5, r4, #29
 8001746:	0264      	lsls	r4, r4, #9
 8001748:	0b24      	lsrs	r4, r4, #12
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	431d      	orrs	r5, r3
 800174e:	2300      	movs	r3, #0
 8001750:	e590      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001752:	9e00      	ldr	r6, [sp, #0]
 8001754:	3d02      	subs	r5, #2
 8001756:	0072      	lsls	r2, r6, #1
 8001758:	42b2      	cmp	r2, r6
 800175a:	41bf      	sbcs	r7, r7
 800175c:	427f      	negs	r7, r7
 800175e:	193c      	adds	r4, r7, r4
 8001760:	1909      	adds	r1, r1, r4
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	e7ce      	b.n	8001704 <__aeabi_ddiv+0x544>
 8001766:	2480      	movs	r4, #128	; 0x80
 8001768:	4643      	mov	r3, r8
 800176a:	0324      	lsls	r4, r4, #12
 800176c:	431c      	orrs	r4, r3
 800176e:	0324      	lsls	r4, r4, #12
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <__aeabi_ddiv+0x5cc>)
 8001772:	0b24      	lsrs	r4, r4, #12
 8001774:	e57e      	b.n	8001274 <__aeabi_ddiv+0xb4>
 8001776:	9a00      	ldr	r2, [sp, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d3ea      	bcc.n	8001752 <__aeabi_ddiv+0x592>
 800177c:	0035      	movs	r5, r6
 800177e:	e7c4      	b.n	800170a <__aeabi_ddiv+0x54a>
 8001780:	0000043e 	.word	0x0000043e
 8001784:	0000041e 	.word	0x0000041e
 8001788:	000003ff 	.word	0x000003ff
 800178c:	000007ff 	.word	0x000007ff

08001790 <__eqdf2>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	464f      	mov	r7, r9
 8001794:	4646      	mov	r6, r8
 8001796:	46d6      	mov	lr, sl
 8001798:	4694      	mov	ip, r2
 800179a:	4691      	mov	r9, r2
 800179c:	031a      	lsls	r2, r3, #12
 800179e:	0b12      	lsrs	r2, r2, #12
 80017a0:	4d18      	ldr	r5, [pc, #96]	; (8001804 <__eqdf2+0x74>)
 80017a2:	b5c0      	push	{r6, r7, lr}
 80017a4:	004c      	lsls	r4, r1, #1
 80017a6:	030f      	lsls	r7, r1, #12
 80017a8:	4692      	mov	sl, r2
 80017aa:	005a      	lsls	r2, r3, #1
 80017ac:	0006      	movs	r6, r0
 80017ae:	4680      	mov	r8, r0
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	2001      	movs	r0, #1
 80017b4:	0d64      	lsrs	r4, r4, #21
 80017b6:	0fc9      	lsrs	r1, r1, #31
 80017b8:	0d52      	lsrs	r2, r2, #21
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	42ac      	cmp	r4, r5
 80017be:	d00a      	beq.n	80017d6 <__eqdf2+0x46>
 80017c0:	42aa      	cmp	r2, r5
 80017c2:	d003      	beq.n	80017cc <__eqdf2+0x3c>
 80017c4:	4294      	cmp	r4, r2
 80017c6:	d101      	bne.n	80017cc <__eqdf2+0x3c>
 80017c8:	4557      	cmp	r7, sl
 80017ca:	d00d      	beq.n	80017e8 <__eqdf2+0x58>
 80017cc:	bce0      	pop	{r5, r6, r7}
 80017ce:	46ba      	mov	sl, r7
 80017d0:	46b1      	mov	r9, r6
 80017d2:	46a8      	mov	r8, r5
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d6:	003d      	movs	r5, r7
 80017d8:	4335      	orrs	r5, r6
 80017da:	d1f7      	bne.n	80017cc <__eqdf2+0x3c>
 80017dc:	42a2      	cmp	r2, r4
 80017de:	d1f5      	bne.n	80017cc <__eqdf2+0x3c>
 80017e0:	4652      	mov	r2, sl
 80017e2:	4665      	mov	r5, ip
 80017e4:	432a      	orrs	r2, r5
 80017e6:	d1f1      	bne.n	80017cc <__eqdf2+0x3c>
 80017e8:	2001      	movs	r0, #1
 80017ea:	45c8      	cmp	r8, r9
 80017ec:	d1ee      	bne.n	80017cc <__eqdf2+0x3c>
 80017ee:	4299      	cmp	r1, r3
 80017f0:	d006      	beq.n	8001800 <__eqdf2+0x70>
 80017f2:	2c00      	cmp	r4, #0
 80017f4:	d1ea      	bne.n	80017cc <__eqdf2+0x3c>
 80017f6:	433e      	orrs	r6, r7
 80017f8:	0030      	movs	r0, r6
 80017fa:	1e46      	subs	r6, r0, #1
 80017fc:	41b0      	sbcs	r0, r6
 80017fe:	e7e5      	b.n	80017cc <__eqdf2+0x3c>
 8001800:	2000      	movs	r0, #0
 8001802:	e7e3      	b.n	80017cc <__eqdf2+0x3c>
 8001804:	000007ff 	.word	0x000007ff

08001808 <__gedf2>:
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	464e      	mov	r6, r9
 800180c:	4645      	mov	r5, r8
 800180e:	4657      	mov	r7, sl
 8001810:	46de      	mov	lr, fp
 8001812:	0004      	movs	r4, r0
 8001814:	0018      	movs	r0, r3
 8001816:	b5e0      	push	{r5, r6, r7, lr}
 8001818:	0016      	movs	r6, r2
 800181a:	031b      	lsls	r3, r3, #12
 800181c:	0b1b      	lsrs	r3, r3, #12
 800181e:	4d32      	ldr	r5, [pc, #200]	; (80018e8 <__gedf2+0xe0>)
 8001820:	030f      	lsls	r7, r1, #12
 8001822:	004a      	lsls	r2, r1, #1
 8001824:	4699      	mov	r9, r3
 8001826:	0043      	lsls	r3, r0, #1
 8001828:	46a4      	mov	ip, r4
 800182a:	46b0      	mov	r8, r6
 800182c:	0b3f      	lsrs	r7, r7, #12
 800182e:	0d52      	lsrs	r2, r2, #21
 8001830:	0fc9      	lsrs	r1, r1, #31
 8001832:	0d5b      	lsrs	r3, r3, #21
 8001834:	0fc0      	lsrs	r0, r0, #31
 8001836:	42aa      	cmp	r2, r5
 8001838:	d029      	beq.n	800188e <__gedf2+0x86>
 800183a:	42ab      	cmp	r3, r5
 800183c:	d018      	beq.n	8001870 <__gedf2+0x68>
 800183e:	2a00      	cmp	r2, #0
 8001840:	d12a      	bne.n	8001898 <__gedf2+0x90>
 8001842:	433c      	orrs	r4, r7
 8001844:	46a3      	mov	fp, r4
 8001846:	4265      	negs	r5, r4
 8001848:	4165      	adcs	r5, r4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <__gedf2+0x4c>
 800184e:	464c      	mov	r4, r9
 8001850:	4326      	orrs	r6, r4
 8001852:	d027      	beq.n	80018a4 <__gedf2+0x9c>
 8001854:	2d00      	cmp	r5, #0
 8001856:	d115      	bne.n	8001884 <__gedf2+0x7c>
 8001858:	4281      	cmp	r1, r0
 800185a:	d028      	beq.n	80018ae <__gedf2+0xa6>
 800185c:	2002      	movs	r0, #2
 800185e:	3901      	subs	r1, #1
 8001860:	4008      	ands	r0, r1
 8001862:	3801      	subs	r0, #1
 8001864:	bcf0      	pop	{r4, r5, r6, r7}
 8001866:	46bb      	mov	fp, r7
 8001868:	46b2      	mov	sl, r6
 800186a:	46a9      	mov	r9, r5
 800186c:	46a0      	mov	r8, r4
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001870:	464d      	mov	r5, r9
 8001872:	432e      	orrs	r6, r5
 8001874:	d12f      	bne.n	80018d6 <__gedf2+0xce>
 8001876:	2a00      	cmp	r2, #0
 8001878:	d1ee      	bne.n	8001858 <__gedf2+0x50>
 800187a:	433c      	orrs	r4, r7
 800187c:	4265      	negs	r5, r4
 800187e:	4165      	adcs	r5, r4
 8001880:	2d00      	cmp	r5, #0
 8001882:	d0e9      	beq.n	8001858 <__gedf2+0x50>
 8001884:	2800      	cmp	r0, #0
 8001886:	d1ed      	bne.n	8001864 <__gedf2+0x5c>
 8001888:	2001      	movs	r0, #1
 800188a:	4240      	negs	r0, r0
 800188c:	e7ea      	b.n	8001864 <__gedf2+0x5c>
 800188e:	003d      	movs	r5, r7
 8001890:	4325      	orrs	r5, r4
 8001892:	d120      	bne.n	80018d6 <__gedf2+0xce>
 8001894:	4293      	cmp	r3, r2
 8001896:	d0eb      	beq.n	8001870 <__gedf2+0x68>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1dd      	bne.n	8001858 <__gedf2+0x50>
 800189c:	464c      	mov	r4, r9
 800189e:	4326      	orrs	r6, r4
 80018a0:	d1da      	bne.n	8001858 <__gedf2+0x50>
 80018a2:	e7db      	b.n	800185c <__gedf2+0x54>
 80018a4:	465b      	mov	r3, fp
 80018a6:	2000      	movs	r0, #0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0db      	beq.n	8001864 <__gedf2+0x5c>
 80018ac:	e7d6      	b.n	800185c <__gedf2+0x54>
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dc0a      	bgt.n	80018c8 <__gedf2+0xc0>
 80018b2:	dbe7      	blt.n	8001884 <__gedf2+0x7c>
 80018b4:	454f      	cmp	r7, r9
 80018b6:	d8d1      	bhi.n	800185c <__gedf2+0x54>
 80018b8:	d010      	beq.n	80018dc <__gedf2+0xd4>
 80018ba:	2000      	movs	r0, #0
 80018bc:	454f      	cmp	r7, r9
 80018be:	d2d1      	bcs.n	8001864 <__gedf2+0x5c>
 80018c0:	2900      	cmp	r1, #0
 80018c2:	d0e1      	beq.n	8001888 <__gedf2+0x80>
 80018c4:	0008      	movs	r0, r1
 80018c6:	e7cd      	b.n	8001864 <__gedf2+0x5c>
 80018c8:	4243      	negs	r3, r0
 80018ca:	4158      	adcs	r0, r3
 80018cc:	2302      	movs	r3, #2
 80018ce:	4240      	negs	r0, r0
 80018d0:	4018      	ands	r0, r3
 80018d2:	3801      	subs	r0, #1
 80018d4:	e7c6      	b.n	8001864 <__gedf2+0x5c>
 80018d6:	2002      	movs	r0, #2
 80018d8:	4240      	negs	r0, r0
 80018da:	e7c3      	b.n	8001864 <__gedf2+0x5c>
 80018dc:	45c4      	cmp	ip, r8
 80018de:	d8bd      	bhi.n	800185c <__gedf2+0x54>
 80018e0:	2000      	movs	r0, #0
 80018e2:	45c4      	cmp	ip, r8
 80018e4:	d2be      	bcs.n	8001864 <__gedf2+0x5c>
 80018e6:	e7eb      	b.n	80018c0 <__gedf2+0xb8>
 80018e8:	000007ff 	.word	0x000007ff

080018ec <__ledf2>:
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	464e      	mov	r6, r9
 80018f0:	4645      	mov	r5, r8
 80018f2:	4657      	mov	r7, sl
 80018f4:	46de      	mov	lr, fp
 80018f6:	0004      	movs	r4, r0
 80018f8:	0018      	movs	r0, r3
 80018fa:	b5e0      	push	{r5, r6, r7, lr}
 80018fc:	0016      	movs	r6, r2
 80018fe:	031b      	lsls	r3, r3, #12
 8001900:	0b1b      	lsrs	r3, r3, #12
 8001902:	4d31      	ldr	r5, [pc, #196]	; (80019c8 <__ledf2+0xdc>)
 8001904:	030f      	lsls	r7, r1, #12
 8001906:	004a      	lsls	r2, r1, #1
 8001908:	4699      	mov	r9, r3
 800190a:	0043      	lsls	r3, r0, #1
 800190c:	46a4      	mov	ip, r4
 800190e:	46b0      	mov	r8, r6
 8001910:	0b3f      	lsrs	r7, r7, #12
 8001912:	0d52      	lsrs	r2, r2, #21
 8001914:	0fc9      	lsrs	r1, r1, #31
 8001916:	0d5b      	lsrs	r3, r3, #21
 8001918:	0fc0      	lsrs	r0, r0, #31
 800191a:	42aa      	cmp	r2, r5
 800191c:	d011      	beq.n	8001942 <__ledf2+0x56>
 800191e:	42ab      	cmp	r3, r5
 8001920:	d014      	beq.n	800194c <__ledf2+0x60>
 8001922:	2a00      	cmp	r2, #0
 8001924:	d12f      	bne.n	8001986 <__ledf2+0x9a>
 8001926:	433c      	orrs	r4, r7
 8001928:	46a3      	mov	fp, r4
 800192a:	4265      	negs	r5, r4
 800192c:	4165      	adcs	r5, r4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d114      	bne.n	800195c <__ledf2+0x70>
 8001932:	464c      	mov	r4, r9
 8001934:	4326      	orrs	r6, r4
 8001936:	d111      	bne.n	800195c <__ledf2+0x70>
 8001938:	465b      	mov	r3, fp
 800193a:	2000      	movs	r0, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d017      	beq.n	8001970 <__ledf2+0x84>
 8001940:	e010      	b.n	8001964 <__ledf2+0x78>
 8001942:	003d      	movs	r5, r7
 8001944:	4325      	orrs	r5, r4
 8001946:	d112      	bne.n	800196e <__ledf2+0x82>
 8001948:	4293      	cmp	r3, r2
 800194a:	d11c      	bne.n	8001986 <__ledf2+0x9a>
 800194c:	464d      	mov	r5, r9
 800194e:	432e      	orrs	r6, r5
 8001950:	d10d      	bne.n	800196e <__ledf2+0x82>
 8001952:	2a00      	cmp	r2, #0
 8001954:	d104      	bne.n	8001960 <__ledf2+0x74>
 8001956:	433c      	orrs	r4, r7
 8001958:	4265      	negs	r5, r4
 800195a:	4165      	adcs	r5, r4
 800195c:	2d00      	cmp	r5, #0
 800195e:	d10d      	bne.n	800197c <__ledf2+0x90>
 8001960:	4281      	cmp	r1, r0
 8001962:	d016      	beq.n	8001992 <__ledf2+0xa6>
 8001964:	2002      	movs	r0, #2
 8001966:	3901      	subs	r1, #1
 8001968:	4008      	ands	r0, r1
 800196a:	3801      	subs	r0, #1
 800196c:	e000      	b.n	8001970 <__ledf2+0x84>
 800196e:	2002      	movs	r0, #2
 8001970:	bcf0      	pop	{r4, r5, r6, r7}
 8001972:	46bb      	mov	fp, r7
 8001974:	46b2      	mov	sl, r6
 8001976:	46a9      	mov	r9, r5
 8001978:	46a0      	mov	r8, r4
 800197a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197c:	2800      	cmp	r0, #0
 800197e:	d1f7      	bne.n	8001970 <__ledf2+0x84>
 8001980:	2001      	movs	r0, #1
 8001982:	4240      	negs	r0, r0
 8001984:	e7f4      	b.n	8001970 <__ledf2+0x84>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ea      	bne.n	8001960 <__ledf2+0x74>
 800198a:	464c      	mov	r4, r9
 800198c:	4326      	orrs	r6, r4
 800198e:	d1e7      	bne.n	8001960 <__ledf2+0x74>
 8001990:	e7e8      	b.n	8001964 <__ledf2+0x78>
 8001992:	429a      	cmp	r2, r3
 8001994:	dd06      	ble.n	80019a4 <__ledf2+0xb8>
 8001996:	4243      	negs	r3, r0
 8001998:	4158      	adcs	r0, r3
 800199a:	2302      	movs	r3, #2
 800199c:	4240      	negs	r0, r0
 800199e:	4018      	ands	r0, r3
 80019a0:	3801      	subs	r0, #1
 80019a2:	e7e5      	b.n	8001970 <__ledf2+0x84>
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbe9      	blt.n	800197c <__ledf2+0x90>
 80019a8:	454f      	cmp	r7, r9
 80019aa:	d8db      	bhi.n	8001964 <__ledf2+0x78>
 80019ac:	d006      	beq.n	80019bc <__ledf2+0xd0>
 80019ae:	2000      	movs	r0, #0
 80019b0:	454f      	cmp	r7, r9
 80019b2:	d2dd      	bcs.n	8001970 <__ledf2+0x84>
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d0e3      	beq.n	8001980 <__ledf2+0x94>
 80019b8:	0008      	movs	r0, r1
 80019ba:	e7d9      	b.n	8001970 <__ledf2+0x84>
 80019bc:	45c4      	cmp	ip, r8
 80019be:	d8d1      	bhi.n	8001964 <__ledf2+0x78>
 80019c0:	2000      	movs	r0, #0
 80019c2:	45c4      	cmp	ip, r8
 80019c4:	d2d4      	bcs.n	8001970 <__ledf2+0x84>
 80019c6:	e7f5      	b.n	80019b4 <__ledf2+0xc8>
 80019c8:	000007ff 	.word	0x000007ff

080019cc <__aeabi_dmul>:
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	4657      	mov	r7, sl
 80019d0:	464e      	mov	r6, r9
 80019d2:	4645      	mov	r5, r8
 80019d4:	46de      	mov	lr, fp
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	4698      	mov	r8, r3
 80019da:	030c      	lsls	r4, r1, #12
 80019dc:	004b      	lsls	r3, r1, #1
 80019de:	0006      	movs	r6, r0
 80019e0:	4692      	mov	sl, r2
 80019e2:	b087      	sub	sp, #28
 80019e4:	0b24      	lsrs	r4, r4, #12
 80019e6:	0d5b      	lsrs	r3, r3, #21
 80019e8:	0fcf      	lsrs	r7, r1, #31
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06c      	beq.n	8001ac8 <__aeabi_dmul+0xfc>
 80019ee:	4add      	ldr	r2, [pc, #884]	; (8001d64 <__aeabi_dmul+0x398>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dmul+0x2a>
 80019f4:	e086      	b.n	8001b04 <__aeabi_dmul+0x138>
 80019f6:	0f42      	lsrs	r2, r0, #29
 80019f8:	00e4      	lsls	r4, r4, #3
 80019fa:	4314      	orrs	r4, r2
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	0412      	lsls	r2, r2, #16
 8001a00:	4314      	orrs	r4, r2
 8001a02:	4ad9      	ldr	r2, [pc, #868]	; (8001d68 <__aeabi_dmul+0x39c>)
 8001a04:	00c5      	lsls	r5, r0, #3
 8001a06:	4694      	mov	ip, r2
 8001a08:	4463      	add	r3, ip
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4699      	mov	r9, r3
 8001a10:	469b      	mov	fp, r3
 8001a12:	4643      	mov	r3, r8
 8001a14:	4642      	mov	r2, r8
 8001a16:	031e      	lsls	r6, r3, #12
 8001a18:	0fd2      	lsrs	r2, r2, #31
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4650      	mov	r0, sl
 8001a1e:	4690      	mov	r8, r2
 8001a20:	0b36      	lsrs	r6, r6, #12
 8001a22:	0d5b      	lsrs	r3, r3, #21
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dmul+0x5c>
 8001a26:	e078      	b.n	8001b1a <__aeabi_dmul+0x14e>
 8001a28:	4ace      	ldr	r2, [pc, #824]	; (8001d64 <__aeabi_dmul+0x398>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01d      	beq.n	8001a6a <__aeabi_dmul+0x9e>
 8001a2e:	49ce      	ldr	r1, [pc, #824]	; (8001d68 <__aeabi_dmul+0x39c>)
 8001a30:	0f42      	lsrs	r2, r0, #29
 8001a32:	468c      	mov	ip, r1
 8001a34:	9900      	ldr	r1, [sp, #0]
 8001a36:	4463      	add	r3, ip
 8001a38:	00f6      	lsls	r6, r6, #3
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	4316      	orrs	r6, r2
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	449c      	add	ip, r3
 8001a42:	0412      	lsls	r2, r2, #16
 8001a44:	4663      	mov	r3, ip
 8001a46:	4316      	orrs	r6, r2
 8001a48:	00c2      	lsls	r2, r0, #3
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	9900      	ldr	r1, [sp, #0]
 8001a50:	4643      	mov	r3, r8
 8001a52:	3101      	adds	r1, #1
 8001a54:	468c      	mov	ip, r1
 8001a56:	4649      	mov	r1, r9
 8001a58:	407b      	eors	r3, r7
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	290f      	cmp	r1, #15
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_dmul+0x96>
 8001a60:	e07e      	b.n	8001b60 <__aeabi_dmul+0x194>
 8001a62:	4bc2      	ldr	r3, [pc, #776]	; (8001d6c <__aeabi_dmul+0x3a0>)
 8001a64:	0089      	lsls	r1, r1, #2
 8001a66:	5859      	ldr	r1, [r3, r1]
 8001a68:	468f      	mov	pc, r1
 8001a6a:	4652      	mov	r2, sl
 8001a6c:	9b00      	ldr	r3, [sp, #0]
 8001a6e:	4332      	orrs	r2, r6
 8001a70:	d000      	beq.n	8001a74 <__aeabi_dmul+0xa8>
 8001a72:	e156      	b.n	8001d22 <__aeabi_dmul+0x356>
 8001a74:	49bb      	ldr	r1, [pc, #748]	; (8001d64 <__aeabi_dmul+0x398>)
 8001a76:	2600      	movs	r6, #0
 8001a78:	468c      	mov	ip, r1
 8001a7a:	4463      	add	r3, ip
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2302      	movs	r3, #2
 8001a82:	4319      	orrs	r1, r3
 8001a84:	4689      	mov	r9, r1
 8001a86:	2002      	movs	r0, #2
 8001a88:	e7e1      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001a8a:	4643      	mov	r3, r8
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	0034      	movs	r4, r6
 8001a90:	0015      	movs	r5, r2
 8001a92:	4683      	mov	fp, r0
 8001a94:	465b      	mov	r3, fp
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d05e      	beq.n	8001b58 <__aeabi_dmul+0x18c>
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dmul+0xd4>
 8001a9e:	e1f3      	b.n	8001e88 <__aeabi_dmul+0x4bc>
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d000      	beq.n	8001aa6 <__aeabi_dmul+0xda>
 8001aa4:	e118      	b.n	8001cd8 <__aeabi_dmul+0x30c>
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2500      	movs	r5, #0
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	0512      	lsls	r2, r2, #20
 8001ab0:	4322      	orrs	r2, r4
 8001ab2:	07db      	lsls	r3, r3, #31
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	0028      	movs	r0, r5
 8001ab8:	0011      	movs	r1, r2
 8001aba:	b007      	add	sp, #28
 8001abc:	bcf0      	pop	{r4, r5, r6, r7}
 8001abe:	46bb      	mov	fp, r7
 8001ac0:	46b2      	mov	sl, r6
 8001ac2:	46a9      	mov	r9, r5
 8001ac4:	46a0      	mov	r8, r4
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	0025      	movs	r5, r4
 8001aca:	4305      	orrs	r5, r0
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dmul+0x104>
 8001ace:	e141      	b.n	8001d54 <__aeabi_dmul+0x388>
 8001ad0:	2c00      	cmp	r4, #0
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dmul+0x10a>
 8001ad4:	e1ad      	b.n	8001e32 <__aeabi_dmul+0x466>
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	f000 fe4a 	bl	8002770 <__clzsi2>
 8001adc:	0001      	movs	r1, r0
 8001ade:	0002      	movs	r2, r0
 8001ae0:	390b      	subs	r1, #11
 8001ae2:	231d      	movs	r3, #29
 8001ae4:	0010      	movs	r0, r2
 8001ae6:	1a5b      	subs	r3, r3, r1
 8001ae8:	0031      	movs	r1, r6
 8001aea:	0035      	movs	r5, r6
 8001aec:	3808      	subs	r0, #8
 8001aee:	4084      	lsls	r4, r0
 8001af0:	40d9      	lsrs	r1, r3
 8001af2:	4085      	lsls	r5, r0
 8001af4:	430c      	orrs	r4, r1
 8001af6:	489e      	ldr	r0, [pc, #632]	; (8001d70 <__aeabi_dmul+0x3a4>)
 8001af8:	1a83      	subs	r3, r0, r2
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2300      	movs	r3, #0
 8001afe:	4699      	mov	r9, r3
 8001b00:	469b      	mov	fp, r3
 8001b02:	e786      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001b04:	0005      	movs	r5, r0
 8001b06:	4325      	orrs	r5, r4
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dmul+0x140>
 8001b0a:	e11c      	b.n	8001d46 <__aeabi_dmul+0x37a>
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2302      	movs	r3, #2
 8001b12:	2400      	movs	r4, #0
 8001b14:	4691      	mov	r9, r2
 8001b16:	469b      	mov	fp, r3
 8001b18:	e77b      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001b1a:	4652      	mov	r2, sl
 8001b1c:	4332      	orrs	r2, r6
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dmul+0x156>
 8001b20:	e10a      	b.n	8001d38 <__aeabi_dmul+0x36c>
 8001b22:	2e00      	cmp	r6, #0
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dmul+0x15c>
 8001b26:	e176      	b.n	8001e16 <__aeabi_dmul+0x44a>
 8001b28:	0030      	movs	r0, r6
 8001b2a:	f000 fe21 	bl	8002770 <__clzsi2>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	3a0b      	subs	r2, #11
 8001b32:	231d      	movs	r3, #29
 8001b34:	0001      	movs	r1, r0
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	4652      	mov	r2, sl
 8001b3a:	3908      	subs	r1, #8
 8001b3c:	40da      	lsrs	r2, r3
 8001b3e:	408e      	lsls	r6, r1
 8001b40:	4316      	orrs	r6, r2
 8001b42:	4652      	mov	r2, sl
 8001b44:	408a      	lsls	r2, r1
 8001b46:	9b00      	ldr	r3, [sp, #0]
 8001b48:	4989      	ldr	r1, [pc, #548]	; (8001d70 <__aeabi_dmul+0x3a4>)
 8001b4a:	1a18      	subs	r0, r3, r0
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	468c      	mov	ip, r1
 8001b50:	4463      	add	r3, ip
 8001b52:	2000      	movs	r0, #0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	e77a      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001b58:	2400      	movs	r4, #0
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	4a81      	ldr	r2, [pc, #516]	; (8001d64 <__aeabi_dmul+0x398>)
 8001b5e:	e7a5      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001b60:	0c2f      	lsrs	r7, r5, #16
 8001b62:	042d      	lsls	r5, r5, #16
 8001b64:	0c2d      	lsrs	r5, r5, #16
 8001b66:	002b      	movs	r3, r5
 8001b68:	0c11      	lsrs	r1, r2, #16
 8001b6a:	0412      	lsls	r2, r2, #16
 8001b6c:	0c12      	lsrs	r2, r2, #16
 8001b6e:	4353      	muls	r3, r2
 8001b70:	4698      	mov	r8, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	0028      	movs	r0, r5
 8001b76:	437b      	muls	r3, r7
 8001b78:	4699      	mov	r9, r3
 8001b7a:	4348      	muls	r0, r1
 8001b7c:	4448      	add	r0, r9
 8001b7e:	4683      	mov	fp, r0
 8001b80:	4640      	mov	r0, r8
 8001b82:	000b      	movs	r3, r1
 8001b84:	0c00      	lsrs	r0, r0, #16
 8001b86:	4682      	mov	sl, r0
 8001b88:	4658      	mov	r0, fp
 8001b8a:	437b      	muls	r3, r7
 8001b8c:	4450      	add	r0, sl
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	4581      	cmp	r9, r0
 8001b92:	d906      	bls.n	8001ba2 <__aeabi_dmul+0x1d6>
 8001b94:	469a      	mov	sl, r3
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	025b      	lsls	r3, r3, #9
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	44ca      	add	sl, r9
 8001b9e:	4653      	mov	r3, sl
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	0c03      	lsrs	r3, r0, #16
 8001ba4:	469b      	mov	fp, r3
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	0400      	lsls	r0, r0, #16
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	4698      	mov	r8, r3
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	4443      	add	r3, r8
 8001bb4:	9304      	str	r3, [sp, #16]
 8001bb6:	0c33      	lsrs	r3, r6, #16
 8001bb8:	4699      	mov	r9, r3
 8001bba:	002b      	movs	r3, r5
 8001bbc:	0436      	lsls	r6, r6, #16
 8001bbe:	0c36      	lsrs	r6, r6, #16
 8001bc0:	4373      	muls	r3, r6
 8001bc2:	4698      	mov	r8, r3
 8001bc4:	0033      	movs	r3, r6
 8001bc6:	437b      	muls	r3, r7
 8001bc8:	469a      	mov	sl, r3
 8001bca:	464b      	mov	r3, r9
 8001bcc:	435d      	muls	r5, r3
 8001bce:	435f      	muls	r7, r3
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	4455      	add	r5, sl
 8001bd4:	0c18      	lsrs	r0, r3, #16
 8001bd6:	1940      	adds	r0, r0, r5
 8001bd8:	4582      	cmp	sl, r0
 8001bda:	d903      	bls.n	8001be4 <__aeabi_dmul+0x218>
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	469a      	mov	sl, r3
 8001be2:	4457      	add	r7, sl
 8001be4:	0c05      	lsrs	r5, r0, #16
 8001be6:	19eb      	adds	r3, r5, r7
 8001be8:	9305      	str	r3, [sp, #20]
 8001bea:	4643      	mov	r3, r8
 8001bec:	041d      	lsls	r5, r3, #16
 8001bee:	0c2d      	lsrs	r5, r5, #16
 8001bf0:	0400      	lsls	r0, r0, #16
 8001bf2:	1940      	adds	r0, r0, r5
 8001bf4:	0c25      	lsrs	r5, r4, #16
 8001bf6:	0424      	lsls	r4, r4, #16
 8001bf8:	0c24      	lsrs	r4, r4, #16
 8001bfa:	0027      	movs	r7, r4
 8001bfc:	4357      	muls	r7, r2
 8001bfe:	436a      	muls	r2, r5
 8001c00:	4690      	mov	r8, r2
 8001c02:	002a      	movs	r2, r5
 8001c04:	0c3b      	lsrs	r3, r7, #16
 8001c06:	469a      	mov	sl, r3
 8001c08:	434a      	muls	r2, r1
 8001c0a:	4361      	muls	r1, r4
 8001c0c:	4441      	add	r1, r8
 8001c0e:	4451      	add	r1, sl
 8001c10:	4483      	add	fp, r0
 8001c12:	4588      	cmp	r8, r1
 8001c14:	d903      	bls.n	8001c1e <__aeabi_dmul+0x252>
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	4442      	add	r2, r8
 8001c1e:	043f      	lsls	r7, r7, #16
 8001c20:	0c0b      	lsrs	r3, r1, #16
 8001c22:	0c3f      	lsrs	r7, r7, #16
 8001c24:	0409      	lsls	r1, r1, #16
 8001c26:	19c9      	adds	r1, r1, r7
 8001c28:	0027      	movs	r7, r4
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	4377      	muls	r7, r6
 8001c30:	435c      	muls	r4, r3
 8001c32:	436e      	muls	r6, r5
 8001c34:	435d      	muls	r5, r3
 8001c36:	0c3b      	lsrs	r3, r7, #16
 8001c38:	4699      	mov	r9, r3
 8001c3a:	19a4      	adds	r4, r4, r6
 8001c3c:	444c      	add	r4, r9
 8001c3e:	4442      	add	r2, r8
 8001c40:	9503      	str	r5, [sp, #12]
 8001c42:	42a6      	cmp	r6, r4
 8001c44:	d904      	bls.n	8001c50 <__aeabi_dmul+0x284>
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	4445      	add	r5, r8
 8001c4e:	9503      	str	r5, [sp, #12]
 8001c50:	9b02      	ldr	r3, [sp, #8]
 8001c52:	043f      	lsls	r7, r7, #16
 8001c54:	445b      	add	r3, fp
 8001c56:	001e      	movs	r6, r3
 8001c58:	4283      	cmp	r3, r0
 8001c5a:	4180      	sbcs	r0, r0
 8001c5c:	0423      	lsls	r3, r4, #16
 8001c5e:	4698      	mov	r8, r3
 8001c60:	9b05      	ldr	r3, [sp, #20]
 8001c62:	0c3f      	lsrs	r7, r7, #16
 8001c64:	4447      	add	r7, r8
 8001c66:	4698      	mov	r8, r3
 8001c68:	1876      	adds	r6, r6, r1
 8001c6a:	428e      	cmp	r6, r1
 8001c6c:	4189      	sbcs	r1, r1
 8001c6e:	4447      	add	r7, r8
 8001c70:	4240      	negs	r0, r0
 8001c72:	183d      	adds	r5, r7, r0
 8001c74:	46a8      	mov	r8, r5
 8001c76:	4693      	mov	fp, r2
 8001c78:	4249      	negs	r1, r1
 8001c7a:	468a      	mov	sl, r1
 8001c7c:	44c3      	add	fp, r8
 8001c7e:	429f      	cmp	r7, r3
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4580      	cmp	r8, r0
 8001c84:	4180      	sbcs	r0, r0
 8001c86:	9b03      	ldr	r3, [sp, #12]
 8001c88:	44da      	add	sl, fp
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	4653      	mov	r3, sl
 8001c8e:	4240      	negs	r0, r0
 8001c90:	427f      	negs	r7, r7
 8001c92:	4307      	orrs	r7, r0
 8001c94:	0c24      	lsrs	r4, r4, #16
 8001c96:	4593      	cmp	fp, r2
 8001c98:	4192      	sbcs	r2, r2
 8001c9a:	458a      	cmp	sl, r1
 8001c9c:	4189      	sbcs	r1, r1
 8001c9e:	193f      	adds	r7, r7, r4
 8001ca0:	0ddc      	lsrs	r4, r3, #23
 8001ca2:	9b04      	ldr	r3, [sp, #16]
 8001ca4:	0275      	lsls	r5, r6, #9
 8001ca6:	431d      	orrs	r5, r3
 8001ca8:	1e68      	subs	r0, r5, #1
 8001caa:	4185      	sbcs	r5, r0
 8001cac:	4653      	mov	r3, sl
 8001cae:	4252      	negs	r2, r2
 8001cb0:	4249      	negs	r1, r1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	18bf      	adds	r7, r7, r2
 8001cb6:	4447      	add	r7, r8
 8001cb8:	0df6      	lsrs	r6, r6, #23
 8001cba:	027f      	lsls	r7, r7, #9
 8001cbc:	4335      	orrs	r5, r6
 8001cbe:	025a      	lsls	r2, r3, #9
 8001cc0:	433c      	orrs	r4, r7
 8001cc2:	4315      	orrs	r5, r2
 8001cc4:	01fb      	lsls	r3, r7, #7
 8001cc6:	d400      	bmi.n	8001cca <__aeabi_dmul+0x2fe>
 8001cc8:	e0c1      	b.n	8001e4e <__aeabi_dmul+0x482>
 8001cca:	2101      	movs	r1, #1
 8001ccc:	086a      	lsrs	r2, r5, #1
 8001cce:	400d      	ands	r5, r1
 8001cd0:	4315      	orrs	r5, r2
 8001cd2:	07e2      	lsls	r2, r4, #31
 8001cd4:	4315      	orrs	r5, r2
 8001cd6:	0864      	lsrs	r4, r4, #1
 8001cd8:	4926      	ldr	r1, [pc, #152]	; (8001d74 <__aeabi_dmul+0x3a8>)
 8001cda:	4461      	add	r1, ip
 8001cdc:	2900      	cmp	r1, #0
 8001cde:	dd56      	ble.n	8001d8e <__aeabi_dmul+0x3c2>
 8001ce0:	076b      	lsls	r3, r5, #29
 8001ce2:	d009      	beq.n	8001cf8 <__aeabi_dmul+0x32c>
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	402a      	ands	r2, r5
 8001ce8:	2a04      	cmp	r2, #4
 8001cea:	d005      	beq.n	8001cf8 <__aeabi_dmul+0x32c>
 8001cec:	1d2a      	adds	r2, r5, #4
 8001cee:	42aa      	cmp	r2, r5
 8001cf0:	41ad      	sbcs	r5, r5
 8001cf2:	426d      	negs	r5, r5
 8001cf4:	1964      	adds	r4, r4, r5
 8001cf6:	0015      	movs	r5, r2
 8001cf8:	01e3      	lsls	r3, r4, #7
 8001cfa:	d504      	bpl.n	8001d06 <__aeabi_dmul+0x33a>
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <__aeabi_dmul+0x3ac>)
 8001d00:	00c9      	lsls	r1, r1, #3
 8001d02:	4014      	ands	r4, r2
 8001d04:	4461      	add	r1, ip
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <__aeabi_dmul+0x3b0>)
 8001d08:	4291      	cmp	r1, r2
 8001d0a:	dd00      	ble.n	8001d0e <__aeabi_dmul+0x342>
 8001d0c:	e724      	b.n	8001b58 <__aeabi_dmul+0x18c>
 8001d0e:	0762      	lsls	r2, r4, #29
 8001d10:	08ed      	lsrs	r5, r5, #3
 8001d12:	0264      	lsls	r4, r4, #9
 8001d14:	0549      	lsls	r1, r1, #21
 8001d16:	4315      	orrs	r5, r2
 8001d18:	0b24      	lsrs	r4, r4, #12
 8001d1a:	0d4a      	lsrs	r2, r1, #21
 8001d1c:	e6c6      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001d1e:	9701      	str	r7, [sp, #4]
 8001d20:	e6b8      	b.n	8001a94 <__aeabi_dmul+0xc8>
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <__aeabi_dmul+0x398>)
 8001d24:	2003      	movs	r0, #3
 8001d26:	4694      	mov	ip, r2
 8001d28:	4463      	add	r3, ip
 8001d2a:	464a      	mov	r2, r9
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2303      	movs	r3, #3
 8001d30:	431a      	orrs	r2, r3
 8001d32:	4691      	mov	r9, r2
 8001d34:	4652      	mov	r2, sl
 8001d36:	e68a      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001d38:	4649      	mov	r1, r9
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4319      	orrs	r1, r3
 8001d3e:	4689      	mov	r9, r1
 8001d40:	2600      	movs	r6, #0
 8001d42:	2001      	movs	r0, #1
 8001d44:	e683      	b.n	8001a4e <__aeabi_dmul+0x82>
 8001d46:	220c      	movs	r2, #12
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	0005      	movs	r5, r0
 8001d4e:	4691      	mov	r9, r2
 8001d50:	469b      	mov	fp, r3
 8001d52:	e65e      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001d54:	2304      	movs	r3, #4
 8001d56:	4699      	mov	r9, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	2400      	movs	r4, #0
 8001d60:	469b      	mov	fp, r3
 8001d62:	e656      	b.n	8001a12 <__aeabi_dmul+0x46>
 8001d64:	000007ff 	.word	0x000007ff
 8001d68:	fffffc01 	.word	0xfffffc01
 8001d6c:	08021bcc 	.word	0x08021bcc
 8001d70:	fffffc0d 	.word	0xfffffc0d
 8001d74:	000003ff 	.word	0x000003ff
 8001d78:	feffffff 	.word	0xfeffffff
 8001d7c:	000007fe 	.word	0x000007fe
 8001d80:	2300      	movs	r3, #0
 8001d82:	2480      	movs	r4, #128	; 0x80
 8001d84:	2500      	movs	r5, #0
 8001d86:	4a44      	ldr	r2, [pc, #272]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	0324      	lsls	r4, r4, #12
 8001d8c:	e68e      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001d8e:	2001      	movs	r0, #1
 8001d90:	1a40      	subs	r0, r0, r1
 8001d92:	2838      	cmp	r0, #56	; 0x38
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dmul+0x3cc>
 8001d96:	e686      	b.n	8001aa6 <__aeabi_dmul+0xda>
 8001d98:	281f      	cmp	r0, #31
 8001d9a:	dd5b      	ble.n	8001e54 <__aeabi_dmul+0x488>
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	0023      	movs	r3, r4
 8001da0:	4252      	negs	r2, r2
 8001da2:	1a51      	subs	r1, r2, r1
 8001da4:	40cb      	lsrs	r3, r1
 8001da6:	0019      	movs	r1, r3
 8001da8:	2820      	cmp	r0, #32
 8001daa:	d003      	beq.n	8001db4 <__aeabi_dmul+0x3e8>
 8001dac:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <__aeabi_dmul+0x4d0>)
 8001dae:	4462      	add	r2, ip
 8001db0:	4094      	lsls	r4, r2
 8001db2:	4325      	orrs	r5, r4
 8001db4:	1e6a      	subs	r2, r5, #1
 8001db6:	4195      	sbcs	r5, r2
 8001db8:	002a      	movs	r2, r5
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	2107      	movs	r1, #7
 8001dbe:	000d      	movs	r5, r1
 8001dc0:	2400      	movs	r4, #0
 8001dc2:	4015      	ands	r5, r2
 8001dc4:	4211      	tst	r1, r2
 8001dc6:	d05b      	beq.n	8001e80 <__aeabi_dmul+0x4b4>
 8001dc8:	210f      	movs	r1, #15
 8001dca:	2400      	movs	r4, #0
 8001dcc:	4011      	ands	r1, r2
 8001dce:	2904      	cmp	r1, #4
 8001dd0:	d053      	beq.n	8001e7a <__aeabi_dmul+0x4ae>
 8001dd2:	1d11      	adds	r1, r2, #4
 8001dd4:	4291      	cmp	r1, r2
 8001dd6:	4192      	sbcs	r2, r2
 8001dd8:	4252      	negs	r2, r2
 8001dda:	18a4      	adds	r4, r4, r2
 8001ddc:	000a      	movs	r2, r1
 8001dde:	0223      	lsls	r3, r4, #8
 8001de0:	d54b      	bpl.n	8001e7a <__aeabi_dmul+0x4ae>
 8001de2:	2201      	movs	r2, #1
 8001de4:	2400      	movs	r4, #0
 8001de6:	2500      	movs	r5, #0
 8001de8:	e660      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	031b      	lsls	r3, r3, #12
 8001dee:	421c      	tst	r4, r3
 8001df0:	d009      	beq.n	8001e06 <__aeabi_dmul+0x43a>
 8001df2:	421e      	tst	r6, r3
 8001df4:	d107      	bne.n	8001e06 <__aeabi_dmul+0x43a>
 8001df6:	4333      	orrs	r3, r6
 8001df8:	031c      	lsls	r4, r3, #12
 8001dfa:	4643      	mov	r3, r8
 8001dfc:	0015      	movs	r5, r2
 8001dfe:	0b24      	lsrs	r4, r4, #12
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	e652      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0312      	lsls	r2, r2, #12
 8001e0a:	4314      	orrs	r4, r2
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001e10:	0b24      	lsrs	r4, r4, #12
 8001e12:	9701      	str	r7, [sp, #4]
 8001e14:	e64a      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e16:	f000 fcab 	bl	8002770 <__clzsi2>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	3215      	adds	r2, #21
 8001e20:	3020      	adds	r0, #32
 8001e22:	2a1c      	cmp	r2, #28
 8001e24:	dc00      	bgt.n	8001e28 <__aeabi_dmul+0x45c>
 8001e26:	e684      	b.n	8001b32 <__aeabi_dmul+0x166>
 8001e28:	4656      	mov	r6, sl
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	409e      	lsls	r6, r3
 8001e30:	e689      	b.n	8001b46 <__aeabi_dmul+0x17a>
 8001e32:	f000 fc9d 	bl	8002770 <__clzsi2>
 8001e36:	0001      	movs	r1, r0
 8001e38:	0002      	movs	r2, r0
 8001e3a:	3115      	adds	r1, #21
 8001e3c:	3220      	adds	r2, #32
 8001e3e:	291c      	cmp	r1, #28
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_dmul+0x478>
 8001e42:	e64e      	b.n	8001ae2 <__aeabi_dmul+0x116>
 8001e44:	0034      	movs	r4, r6
 8001e46:	3808      	subs	r0, #8
 8001e48:	2500      	movs	r5, #0
 8001e4a:	4084      	lsls	r4, r0
 8001e4c:	e653      	b.n	8001af6 <__aeabi_dmul+0x12a>
 8001e4e:	9b00      	ldr	r3, [sp, #0]
 8001e50:	469c      	mov	ip, r3
 8001e52:	e741      	b.n	8001cd8 <__aeabi_dmul+0x30c>
 8001e54:	4912      	ldr	r1, [pc, #72]	; (8001ea0 <__aeabi_dmul+0x4d4>)
 8001e56:	0022      	movs	r2, r4
 8001e58:	4461      	add	r1, ip
 8001e5a:	002e      	movs	r6, r5
 8001e5c:	408d      	lsls	r5, r1
 8001e5e:	408a      	lsls	r2, r1
 8001e60:	40c6      	lsrs	r6, r0
 8001e62:	1e69      	subs	r1, r5, #1
 8001e64:	418d      	sbcs	r5, r1
 8001e66:	4332      	orrs	r2, r6
 8001e68:	432a      	orrs	r2, r5
 8001e6a:	40c4      	lsrs	r4, r0
 8001e6c:	0753      	lsls	r3, r2, #29
 8001e6e:	d0b6      	beq.n	8001dde <__aeabi_dmul+0x412>
 8001e70:	210f      	movs	r1, #15
 8001e72:	4011      	ands	r1, r2
 8001e74:	2904      	cmp	r1, #4
 8001e76:	d1ac      	bne.n	8001dd2 <__aeabi_dmul+0x406>
 8001e78:	e7b1      	b.n	8001dde <__aeabi_dmul+0x412>
 8001e7a:	0765      	lsls	r5, r4, #29
 8001e7c:	0264      	lsls	r4, r4, #9
 8001e7e:	0b24      	lsrs	r4, r4, #12
 8001e80:	08d2      	lsrs	r2, r2, #3
 8001e82:	4315      	orrs	r5, r2
 8001e84:	2200      	movs	r2, #0
 8001e86:	e611      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0312      	lsls	r2, r2, #12
 8001e8c:	4314      	orrs	r4, r2
 8001e8e:	0324      	lsls	r4, r4, #12
 8001e90:	4a01      	ldr	r2, [pc, #4]	; (8001e98 <__aeabi_dmul+0x4cc>)
 8001e92:	0b24      	lsrs	r4, r4, #12
 8001e94:	e60a      	b.n	8001aac <__aeabi_dmul+0xe0>
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	000007ff 	.word	0x000007ff
 8001e9c:	0000043e 	.word	0x0000043e
 8001ea0:	0000041e 	.word	0x0000041e

08001ea4 <__aeabi_dsub>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	4657      	mov	r7, sl
 8001ea8:	464e      	mov	r6, r9
 8001eaa:	4645      	mov	r5, r8
 8001eac:	46de      	mov	lr, fp
 8001eae:	0004      	movs	r4, r0
 8001eb0:	b5e0      	push	{r5, r6, r7, lr}
 8001eb2:	001f      	movs	r7, r3
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	030b      	lsls	r3, r1, #12
 8001eb8:	0f62      	lsrs	r2, r4, #29
 8001eba:	004e      	lsls	r6, r1, #1
 8001ebc:	0fcd      	lsrs	r5, r1, #31
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	0339      	lsls	r1, r7, #12
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	0a49      	lsrs	r1, r1, #9
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	0f44      	lsrs	r4, r0, #29
 8001eca:	4321      	orrs	r1, r4
 8001ecc:	4cc2      	ldr	r4, [pc, #776]	; (80021d8 <__aeabi_dsub+0x334>)
 8001ece:	4691      	mov	r9, r2
 8001ed0:	4692      	mov	sl, r2
 8001ed2:	00c0      	lsls	r0, r0, #3
 8001ed4:	007a      	lsls	r2, r7, #1
 8001ed6:	4680      	mov	r8, r0
 8001ed8:	0d76      	lsrs	r6, r6, #21
 8001eda:	0d52      	lsrs	r2, r2, #21
 8001edc:	0fff      	lsrs	r7, r7, #31
 8001ede:	42a2      	cmp	r2, r4
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x40>
 8001ee2:	e0b4      	b.n	800204e <__aeabi_dsub+0x1aa>
 8001ee4:	2401      	movs	r4, #1
 8001ee6:	4067      	eors	r7, r4
 8001ee8:	46bb      	mov	fp, r7
 8001eea:	42bd      	cmp	r5, r7
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x4c>
 8001eee:	e088      	b.n	8002002 <__aeabi_dsub+0x15e>
 8001ef0:	1ab4      	subs	r4, r6, r2
 8001ef2:	46a4      	mov	ip, r4
 8001ef4:	2c00      	cmp	r4, #0
 8001ef6:	dc00      	bgt.n	8001efa <__aeabi_dsub+0x56>
 8001ef8:	e0b2      	b.n	8002060 <__aeabi_dsub+0x1bc>
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x5c>
 8001efe:	e0c5      	b.n	800208c <__aeabi_dsub+0x1e8>
 8001f00:	4ab5      	ldr	r2, [pc, #724]	; (80021d8 <__aeabi_dsub+0x334>)
 8001f02:	4296      	cmp	r6, r2
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x64>
 8001f06:	e28b      	b.n	8002420 <__aeabi_dsub+0x57c>
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	0412      	lsls	r2, r2, #16
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	4662      	mov	r2, ip
 8001f10:	2a38      	cmp	r2, #56	; 0x38
 8001f12:	dd00      	ble.n	8001f16 <__aeabi_dsub+0x72>
 8001f14:	e1a1      	b.n	800225a <__aeabi_dsub+0x3b6>
 8001f16:	2a1f      	cmp	r2, #31
 8001f18:	dd00      	ble.n	8001f1c <__aeabi_dsub+0x78>
 8001f1a:	e216      	b.n	800234a <__aeabi_dsub+0x4a6>
 8001f1c:	2720      	movs	r7, #32
 8001f1e:	000c      	movs	r4, r1
 8001f20:	1abf      	subs	r7, r7, r2
 8001f22:	40bc      	lsls	r4, r7
 8001f24:	0002      	movs	r2, r0
 8001f26:	46a0      	mov	r8, r4
 8001f28:	4664      	mov	r4, ip
 8001f2a:	40b8      	lsls	r0, r7
 8001f2c:	40e2      	lsrs	r2, r4
 8001f2e:	4644      	mov	r4, r8
 8001f30:	4314      	orrs	r4, r2
 8001f32:	0002      	movs	r2, r0
 8001f34:	1e50      	subs	r0, r2, #1
 8001f36:	4182      	sbcs	r2, r0
 8001f38:	4660      	mov	r0, ip
 8001f3a:	40c1      	lsrs	r1, r0
 8001f3c:	4322      	orrs	r2, r4
 8001f3e:	1a5b      	subs	r3, r3, r1
 8001f40:	4649      	mov	r1, r9
 8001f42:	1a8c      	subs	r4, r1, r2
 8001f44:	45a1      	cmp	r9, r4
 8001f46:	4192      	sbcs	r2, r2
 8001f48:	4252      	negs	r2, r2
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	4698      	mov	r8, r3
 8001f4e:	4643      	mov	r3, r8
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	d400      	bmi.n	8001f56 <__aeabi_dsub+0xb2>
 8001f54:	e117      	b.n	8002186 <__aeabi_dsub+0x2e2>
 8001f56:	4643      	mov	r3, r8
 8001f58:	025b      	lsls	r3, r3, #9
 8001f5a:	0a5b      	lsrs	r3, r3, #9
 8001f5c:	4698      	mov	r8, r3
 8001f5e:	4643      	mov	r3, r8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0xc2>
 8001f64:	e16c      	b.n	8002240 <__aeabi_dsub+0x39c>
 8001f66:	4640      	mov	r0, r8
 8001f68:	f000 fc02 	bl	8002770 <__clzsi2>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	3a08      	subs	r2, #8
 8001f70:	2120      	movs	r1, #32
 8001f72:	0020      	movs	r0, r4
 8001f74:	4643      	mov	r3, r8
 8001f76:	1a89      	subs	r1, r1, r2
 8001f78:	4093      	lsls	r3, r2
 8001f7a:	40c8      	lsrs	r0, r1
 8001f7c:	4094      	lsls	r4, r2
 8001f7e:	4303      	orrs	r3, r0
 8001f80:	4296      	cmp	r6, r2
 8001f82:	dd00      	ble.n	8001f86 <__aeabi_dsub+0xe2>
 8001f84:	e157      	b.n	8002236 <__aeabi_dsub+0x392>
 8001f86:	1b96      	subs	r6, r2, r6
 8001f88:	1c71      	adds	r1, r6, #1
 8001f8a:	291f      	cmp	r1, #31
 8001f8c:	dd00      	ble.n	8001f90 <__aeabi_dsub+0xec>
 8001f8e:	e1cb      	b.n	8002328 <__aeabi_dsub+0x484>
 8001f90:	2220      	movs	r2, #32
 8001f92:	0018      	movs	r0, r3
 8001f94:	0026      	movs	r6, r4
 8001f96:	1a52      	subs	r2, r2, r1
 8001f98:	4094      	lsls	r4, r2
 8001f9a:	4090      	lsls	r0, r2
 8001f9c:	40ce      	lsrs	r6, r1
 8001f9e:	40cb      	lsrs	r3, r1
 8001fa0:	1e62      	subs	r2, r4, #1
 8001fa2:	4194      	sbcs	r4, r2
 8001fa4:	4330      	orrs	r0, r6
 8001fa6:	4698      	mov	r8, r3
 8001fa8:	2600      	movs	r6, #0
 8001faa:	4304      	orrs	r4, r0
 8001fac:	0763      	lsls	r3, r4, #29
 8001fae:	d009      	beq.n	8001fc4 <__aeabi_dsub+0x120>
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	4023      	ands	r3, r4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d005      	beq.n	8001fc4 <__aeabi_dsub+0x120>
 8001fb8:	1d23      	adds	r3, r4, #4
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	41a4      	sbcs	r4, r4
 8001fbe:	4264      	negs	r4, r4
 8001fc0:	44a0      	add	r8, r4
 8001fc2:	001c      	movs	r4, r3
 8001fc4:	4643      	mov	r3, r8
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	d400      	bmi.n	8001fcc <__aeabi_dsub+0x128>
 8001fca:	e0df      	b.n	800218c <__aeabi_dsub+0x2e8>
 8001fcc:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <__aeabi_dsub+0x334>)
 8001fce:	3601      	adds	r6, #1
 8001fd0:	429e      	cmp	r6, r3
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_dsub+0x132>
 8001fd4:	e0fb      	b.n	80021ce <__aeabi_dsub+0x32a>
 8001fd6:	4642      	mov	r2, r8
 8001fd8:	4b80      	ldr	r3, [pc, #512]	; (80021dc <__aeabi_dsub+0x338>)
 8001fda:	08e4      	lsrs	r4, r4, #3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	0013      	movs	r3, r2
 8001fe0:	0571      	lsls	r1, r6, #21
 8001fe2:	0752      	lsls	r2, r2, #29
 8001fe4:	025b      	lsls	r3, r3, #9
 8001fe6:	4322      	orrs	r2, r4
 8001fe8:	0b1b      	lsrs	r3, r3, #12
 8001fea:	0d49      	lsrs	r1, r1, #21
 8001fec:	0509      	lsls	r1, r1, #20
 8001fee:	07ed      	lsls	r5, r5, #31
 8001ff0:	4319      	orrs	r1, r3
 8001ff2:	4329      	orrs	r1, r5
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ff8:	46bb      	mov	fp, r7
 8001ffa:	46b2      	mov	sl, r6
 8001ffc:	46a9      	mov	r9, r5
 8001ffe:	46a0      	mov	r8, r4
 8002000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002002:	1ab4      	subs	r4, r6, r2
 8002004:	46a4      	mov	ip, r4
 8002006:	2c00      	cmp	r4, #0
 8002008:	dd58      	ble.n	80020bc <__aeabi_dsub+0x218>
 800200a:	2a00      	cmp	r2, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x16c>
 800200e:	e09e      	b.n	800214e <__aeabi_dsub+0x2aa>
 8002010:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <__aeabi_dsub+0x334>)
 8002012:	4296      	cmp	r6, r2
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x174>
 8002016:	e13b      	b.n	8002290 <__aeabi_dsub+0x3ec>
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	0412      	lsls	r2, r2, #16
 800201c:	4311      	orrs	r1, r2
 800201e:	4662      	mov	r2, ip
 8002020:	2a38      	cmp	r2, #56	; 0x38
 8002022:	dd00      	ble.n	8002026 <__aeabi_dsub+0x182>
 8002024:	e0c1      	b.n	80021aa <__aeabi_dsub+0x306>
 8002026:	2a1f      	cmp	r2, #31
 8002028:	dc00      	bgt.n	800202c <__aeabi_dsub+0x188>
 800202a:	e1bb      	b.n	80023a4 <__aeabi_dsub+0x500>
 800202c:	000c      	movs	r4, r1
 800202e:	3a20      	subs	r2, #32
 8002030:	40d4      	lsrs	r4, r2
 8002032:	0022      	movs	r2, r4
 8002034:	4664      	mov	r4, ip
 8002036:	2c20      	cmp	r4, #32
 8002038:	d004      	beq.n	8002044 <__aeabi_dsub+0x1a0>
 800203a:	2740      	movs	r7, #64	; 0x40
 800203c:	1b3f      	subs	r7, r7, r4
 800203e:	40b9      	lsls	r1, r7
 8002040:	4308      	orrs	r0, r1
 8002042:	4680      	mov	r8, r0
 8002044:	4644      	mov	r4, r8
 8002046:	1e61      	subs	r1, r4, #1
 8002048:	418c      	sbcs	r4, r1
 800204a:	4314      	orrs	r4, r2
 800204c:	e0b1      	b.n	80021b2 <__aeabi_dsub+0x30e>
 800204e:	000c      	movs	r4, r1
 8002050:	4304      	orrs	r4, r0
 8002052:	d02a      	beq.n	80020aa <__aeabi_dsub+0x206>
 8002054:	46bb      	mov	fp, r7
 8002056:	42bd      	cmp	r5, r7
 8002058:	d02d      	beq.n	80020b6 <__aeabi_dsub+0x212>
 800205a:	4c61      	ldr	r4, [pc, #388]	; (80021e0 <__aeabi_dsub+0x33c>)
 800205c:	46a4      	mov	ip, r4
 800205e:	44b4      	add	ip, r6
 8002060:	4664      	mov	r4, ip
 8002062:	2c00      	cmp	r4, #0
 8002064:	d05c      	beq.n	8002120 <__aeabi_dsub+0x27c>
 8002066:	1b94      	subs	r4, r2, r6
 8002068:	46a4      	mov	ip, r4
 800206a:	2e00      	cmp	r6, #0
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x1cc>
 800206e:	e115      	b.n	800229c <__aeabi_dsub+0x3f8>
 8002070:	464d      	mov	r5, r9
 8002072:	431d      	orrs	r5, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0x1d4>
 8002076:	e1c3      	b.n	8002400 <__aeabi_dsub+0x55c>
 8002078:	1e65      	subs	r5, r4, #1
 800207a:	2c01      	cmp	r4, #1
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x1dc>
 800207e:	e20c      	b.n	800249a <__aeabi_dsub+0x5f6>
 8002080:	4e55      	ldr	r6, [pc, #340]	; (80021d8 <__aeabi_dsub+0x334>)
 8002082:	42b4      	cmp	r4, r6
 8002084:	d100      	bne.n	8002088 <__aeabi_dsub+0x1e4>
 8002086:	e1f8      	b.n	800247a <__aeabi_dsub+0x5d6>
 8002088:	46ac      	mov	ip, r5
 800208a:	e10e      	b.n	80022aa <__aeabi_dsub+0x406>
 800208c:	000a      	movs	r2, r1
 800208e:	4302      	orrs	r2, r0
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x1f0>
 8002092:	e136      	b.n	8002302 <__aeabi_dsub+0x45e>
 8002094:	0022      	movs	r2, r4
 8002096:	3a01      	subs	r2, #1
 8002098:	2c01      	cmp	r4, #1
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0x1fa>
 800209c:	e1c6      	b.n	800242c <__aeabi_dsub+0x588>
 800209e:	4c4e      	ldr	r4, [pc, #312]	; (80021d8 <__aeabi_dsub+0x334>)
 80020a0:	45a4      	cmp	ip, r4
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x202>
 80020a4:	e0f4      	b.n	8002290 <__aeabi_dsub+0x3ec>
 80020a6:	4694      	mov	ip, r2
 80020a8:	e731      	b.n	8001f0e <__aeabi_dsub+0x6a>
 80020aa:	2401      	movs	r4, #1
 80020ac:	4067      	eors	r7, r4
 80020ae:	46bb      	mov	fp, r7
 80020b0:	42bd      	cmp	r5, r7
 80020b2:	d000      	beq.n	80020b6 <__aeabi_dsub+0x212>
 80020b4:	e71c      	b.n	8001ef0 <__aeabi_dsub+0x4c>
 80020b6:	4c4a      	ldr	r4, [pc, #296]	; (80021e0 <__aeabi_dsub+0x33c>)
 80020b8:	46a4      	mov	ip, r4
 80020ba:	44b4      	add	ip, r6
 80020bc:	4664      	mov	r4, ip
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dsub+0x220>
 80020c2:	e0cf      	b.n	8002264 <__aeabi_dsub+0x3c0>
 80020c4:	1b94      	subs	r4, r2, r6
 80020c6:	46a4      	mov	ip, r4
 80020c8:	2e00      	cmp	r6, #0
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x22a>
 80020cc:	e15c      	b.n	8002388 <__aeabi_dsub+0x4e4>
 80020ce:	4e42      	ldr	r6, [pc, #264]	; (80021d8 <__aeabi_dsub+0x334>)
 80020d0:	42b2      	cmp	r2, r6
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dsub+0x232>
 80020d4:	e1ec      	b.n	80024b0 <__aeabi_dsub+0x60c>
 80020d6:	2680      	movs	r6, #128	; 0x80
 80020d8:	0436      	lsls	r6, r6, #16
 80020da:	4333      	orrs	r3, r6
 80020dc:	4664      	mov	r4, ip
 80020de:	2c38      	cmp	r4, #56	; 0x38
 80020e0:	dd00      	ble.n	80020e4 <__aeabi_dsub+0x240>
 80020e2:	e1b3      	b.n	800244c <__aeabi_dsub+0x5a8>
 80020e4:	2c1f      	cmp	r4, #31
 80020e6:	dd00      	ble.n	80020ea <__aeabi_dsub+0x246>
 80020e8:	e238      	b.n	800255c <__aeabi_dsub+0x6b8>
 80020ea:	2620      	movs	r6, #32
 80020ec:	1b36      	subs	r6, r6, r4
 80020ee:	001c      	movs	r4, r3
 80020f0:	40b4      	lsls	r4, r6
 80020f2:	464f      	mov	r7, r9
 80020f4:	46a0      	mov	r8, r4
 80020f6:	4664      	mov	r4, ip
 80020f8:	40e7      	lsrs	r7, r4
 80020fa:	4644      	mov	r4, r8
 80020fc:	433c      	orrs	r4, r7
 80020fe:	464f      	mov	r7, r9
 8002100:	40b7      	lsls	r7, r6
 8002102:	003e      	movs	r6, r7
 8002104:	1e77      	subs	r7, r6, #1
 8002106:	41be      	sbcs	r6, r7
 8002108:	4334      	orrs	r4, r6
 800210a:	4666      	mov	r6, ip
 800210c:	40f3      	lsrs	r3, r6
 800210e:	18c9      	adds	r1, r1, r3
 8002110:	1824      	adds	r4, r4, r0
 8002112:	4284      	cmp	r4, r0
 8002114:	419b      	sbcs	r3, r3
 8002116:	425b      	negs	r3, r3
 8002118:	4698      	mov	r8, r3
 800211a:	0016      	movs	r6, r2
 800211c:	4488      	add	r8, r1
 800211e:	e04e      	b.n	80021be <__aeabi_dsub+0x31a>
 8002120:	4a30      	ldr	r2, [pc, #192]	; (80021e4 <__aeabi_dsub+0x340>)
 8002122:	1c74      	adds	r4, r6, #1
 8002124:	4214      	tst	r4, r2
 8002126:	d000      	beq.n	800212a <__aeabi_dsub+0x286>
 8002128:	e0d6      	b.n	80022d8 <__aeabi_dsub+0x434>
 800212a:	464a      	mov	r2, r9
 800212c:	431a      	orrs	r2, r3
 800212e:	2e00      	cmp	r6, #0
 8002130:	d000      	beq.n	8002134 <__aeabi_dsub+0x290>
 8002132:	e15b      	b.n	80023ec <__aeabi_dsub+0x548>
 8002134:	2a00      	cmp	r2, #0
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x296>
 8002138:	e1a5      	b.n	8002486 <__aeabi_dsub+0x5e2>
 800213a:	000a      	movs	r2, r1
 800213c:	4302      	orrs	r2, r0
 800213e:	d000      	beq.n	8002142 <__aeabi_dsub+0x29e>
 8002140:	e1bb      	b.n	80024ba <__aeabi_dsub+0x616>
 8002142:	464a      	mov	r2, r9
 8002144:	0759      	lsls	r1, r3, #29
 8002146:	08d2      	lsrs	r2, r2, #3
 8002148:	430a      	orrs	r2, r1
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	e027      	b.n	800219e <__aeabi_dsub+0x2fa>
 800214e:	000a      	movs	r2, r1
 8002150:	4302      	orrs	r2, r0
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2b2>
 8002154:	e174      	b.n	8002440 <__aeabi_dsub+0x59c>
 8002156:	0022      	movs	r2, r4
 8002158:	3a01      	subs	r2, #1
 800215a:	2c01      	cmp	r4, #1
 800215c:	d005      	beq.n	800216a <__aeabi_dsub+0x2c6>
 800215e:	4c1e      	ldr	r4, [pc, #120]	; (80021d8 <__aeabi_dsub+0x334>)
 8002160:	45a4      	cmp	ip, r4
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x2c2>
 8002164:	e094      	b.n	8002290 <__aeabi_dsub+0x3ec>
 8002166:	4694      	mov	ip, r2
 8002168:	e759      	b.n	800201e <__aeabi_dsub+0x17a>
 800216a:	4448      	add	r0, r9
 800216c:	4548      	cmp	r0, r9
 800216e:	4192      	sbcs	r2, r2
 8002170:	185b      	adds	r3, r3, r1
 8002172:	4698      	mov	r8, r3
 8002174:	0004      	movs	r4, r0
 8002176:	4252      	negs	r2, r2
 8002178:	4490      	add	r8, r2
 800217a:	4643      	mov	r3, r8
 800217c:	2602      	movs	r6, #2
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	d500      	bpl.n	8002184 <__aeabi_dsub+0x2e0>
 8002182:	e0c4      	b.n	800230e <__aeabi_dsub+0x46a>
 8002184:	3e01      	subs	r6, #1
 8002186:	0763      	lsls	r3, r4, #29
 8002188:	d000      	beq.n	800218c <__aeabi_dsub+0x2e8>
 800218a:	e711      	b.n	8001fb0 <__aeabi_dsub+0x10c>
 800218c:	4643      	mov	r3, r8
 800218e:	46b4      	mov	ip, r6
 8002190:	0759      	lsls	r1, r3, #29
 8002192:	08e2      	lsrs	r2, r4, #3
 8002194:	430a      	orrs	r2, r1
 8002196:	08db      	lsrs	r3, r3, #3
 8002198:	490f      	ldr	r1, [pc, #60]	; (80021d8 <__aeabi_dsub+0x334>)
 800219a:	458c      	cmp	ip, r1
 800219c:	d040      	beq.n	8002220 <__aeabi_dsub+0x37c>
 800219e:	4661      	mov	r1, ip
 80021a0:	031b      	lsls	r3, r3, #12
 80021a2:	0549      	lsls	r1, r1, #21
 80021a4:	0b1b      	lsrs	r3, r3, #12
 80021a6:	0d49      	lsrs	r1, r1, #21
 80021a8:	e720      	b.n	8001fec <__aeabi_dsub+0x148>
 80021aa:	4301      	orrs	r1, r0
 80021ac:	000c      	movs	r4, r1
 80021ae:	1e61      	subs	r1, r4, #1
 80021b0:	418c      	sbcs	r4, r1
 80021b2:	444c      	add	r4, r9
 80021b4:	454c      	cmp	r4, r9
 80021b6:	4192      	sbcs	r2, r2
 80021b8:	4252      	negs	r2, r2
 80021ba:	4690      	mov	r8, r2
 80021bc:	4498      	add	r8, r3
 80021be:	4643      	mov	r3, r8
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	d5e0      	bpl.n	8002186 <__aeabi_dsub+0x2e2>
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__aeabi_dsub+0x334>)
 80021c6:	3601      	adds	r6, #1
 80021c8:	429e      	cmp	r6, r3
 80021ca:	d000      	beq.n	80021ce <__aeabi_dsub+0x32a>
 80021cc:	e09f      	b.n	800230e <__aeabi_dsub+0x46a>
 80021ce:	0031      	movs	r1, r6
 80021d0:	2300      	movs	r3, #0
 80021d2:	2200      	movs	r2, #0
 80021d4:	e70a      	b.n	8001fec <__aeabi_dsub+0x148>
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	000007ff 	.word	0x000007ff
 80021dc:	ff7fffff 	.word	0xff7fffff
 80021e0:	fffff801 	.word	0xfffff801
 80021e4:	000007fe 	.word	0x000007fe
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x34a>
 80021ec:	e160      	b.n	80024b0 <__aeabi_dsub+0x60c>
 80021ee:	000a      	movs	r2, r1
 80021f0:	4302      	orrs	r2, r0
 80021f2:	d04d      	beq.n	8002290 <__aeabi_dsub+0x3ec>
 80021f4:	464a      	mov	r2, r9
 80021f6:	075c      	lsls	r4, r3, #29
 80021f8:	08d2      	lsrs	r2, r2, #3
 80021fa:	4322      	orrs	r2, r4
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	08db      	lsrs	r3, r3, #3
 8002200:	0324      	lsls	r4, r4, #12
 8002202:	4223      	tst	r3, r4
 8002204:	d007      	beq.n	8002216 <__aeabi_dsub+0x372>
 8002206:	08ce      	lsrs	r6, r1, #3
 8002208:	4226      	tst	r6, r4
 800220a:	d104      	bne.n	8002216 <__aeabi_dsub+0x372>
 800220c:	465d      	mov	r5, fp
 800220e:	0033      	movs	r3, r6
 8002210:	08c2      	lsrs	r2, r0, #3
 8002212:	0749      	lsls	r1, r1, #29
 8002214:	430a      	orrs	r2, r1
 8002216:	0f51      	lsrs	r1, r2, #29
 8002218:	00d2      	lsls	r2, r2, #3
 800221a:	08d2      	lsrs	r2, r2, #3
 800221c:	0749      	lsls	r1, r1, #29
 800221e:	430a      	orrs	r2, r1
 8002220:	0011      	movs	r1, r2
 8002222:	4319      	orrs	r1, r3
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x384>
 8002226:	e1c8      	b.n	80025ba <__aeabi_dsub+0x716>
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	0309      	lsls	r1, r1, #12
 800222c:	430b      	orrs	r3, r1
 800222e:	031b      	lsls	r3, r3, #12
 8002230:	49d5      	ldr	r1, [pc, #852]	; (8002588 <__aeabi_dsub+0x6e4>)
 8002232:	0b1b      	lsrs	r3, r3, #12
 8002234:	e6da      	b.n	8001fec <__aeabi_dsub+0x148>
 8002236:	49d5      	ldr	r1, [pc, #852]	; (800258c <__aeabi_dsub+0x6e8>)
 8002238:	1ab6      	subs	r6, r6, r2
 800223a:	400b      	ands	r3, r1
 800223c:	4698      	mov	r8, r3
 800223e:	e6b5      	b.n	8001fac <__aeabi_dsub+0x108>
 8002240:	0020      	movs	r0, r4
 8002242:	f000 fa95 	bl	8002770 <__clzsi2>
 8002246:	0002      	movs	r2, r0
 8002248:	3218      	adds	r2, #24
 800224a:	2a1f      	cmp	r2, #31
 800224c:	dc00      	bgt.n	8002250 <__aeabi_dsub+0x3ac>
 800224e:	e68f      	b.n	8001f70 <__aeabi_dsub+0xcc>
 8002250:	0023      	movs	r3, r4
 8002252:	3808      	subs	r0, #8
 8002254:	4083      	lsls	r3, r0
 8002256:	2400      	movs	r4, #0
 8002258:	e692      	b.n	8001f80 <__aeabi_dsub+0xdc>
 800225a:	4308      	orrs	r0, r1
 800225c:	0002      	movs	r2, r0
 800225e:	1e50      	subs	r0, r2, #1
 8002260:	4182      	sbcs	r2, r0
 8002262:	e66d      	b.n	8001f40 <__aeabi_dsub+0x9c>
 8002264:	4cca      	ldr	r4, [pc, #808]	; (8002590 <__aeabi_dsub+0x6ec>)
 8002266:	1c72      	adds	r2, r6, #1
 8002268:	4222      	tst	r2, r4
 800226a:	d000      	beq.n	800226e <__aeabi_dsub+0x3ca>
 800226c:	e0ad      	b.n	80023ca <__aeabi_dsub+0x526>
 800226e:	464a      	mov	r2, r9
 8002270:	431a      	orrs	r2, r3
 8002272:	2e00      	cmp	r6, #0
 8002274:	d1b8      	bne.n	80021e8 <__aeabi_dsub+0x344>
 8002276:	2a00      	cmp	r2, #0
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x3d8>
 800227a:	e158      	b.n	800252e <__aeabi_dsub+0x68a>
 800227c:	000a      	movs	r2, r1
 800227e:	4302      	orrs	r2, r0
 8002280:	d000      	beq.n	8002284 <__aeabi_dsub+0x3e0>
 8002282:	e159      	b.n	8002538 <__aeabi_dsub+0x694>
 8002284:	464a      	mov	r2, r9
 8002286:	0759      	lsls	r1, r3, #29
 8002288:	08d2      	lsrs	r2, r2, #3
 800228a:	430a      	orrs	r2, r1
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	e786      	b.n	800219e <__aeabi_dsub+0x2fa>
 8002290:	464a      	mov	r2, r9
 8002292:	0759      	lsls	r1, r3, #29
 8002294:	08d2      	lsrs	r2, r2, #3
 8002296:	430a      	orrs	r2, r1
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	e7c1      	b.n	8002220 <__aeabi_dsub+0x37c>
 800229c:	4dba      	ldr	r5, [pc, #744]	; (8002588 <__aeabi_dsub+0x6e4>)
 800229e:	42aa      	cmp	r2, r5
 80022a0:	d100      	bne.n	80022a4 <__aeabi_dsub+0x400>
 80022a2:	e11e      	b.n	80024e2 <__aeabi_dsub+0x63e>
 80022a4:	2580      	movs	r5, #128	; 0x80
 80022a6:	042d      	lsls	r5, r5, #16
 80022a8:	432b      	orrs	r3, r5
 80022aa:	4664      	mov	r4, ip
 80022ac:	2c38      	cmp	r4, #56	; 0x38
 80022ae:	dc5d      	bgt.n	800236c <__aeabi_dsub+0x4c8>
 80022b0:	2c1f      	cmp	r4, #31
 80022b2:	dd00      	ble.n	80022b6 <__aeabi_dsub+0x412>
 80022b4:	e0d0      	b.n	8002458 <__aeabi_dsub+0x5b4>
 80022b6:	2520      	movs	r5, #32
 80022b8:	4667      	mov	r7, ip
 80022ba:	1b2d      	subs	r5, r5, r4
 80022bc:	464e      	mov	r6, r9
 80022be:	001c      	movs	r4, r3
 80022c0:	40fe      	lsrs	r6, r7
 80022c2:	40ac      	lsls	r4, r5
 80022c4:	4334      	orrs	r4, r6
 80022c6:	464e      	mov	r6, r9
 80022c8:	40ae      	lsls	r6, r5
 80022ca:	0035      	movs	r5, r6
 80022cc:	40fb      	lsrs	r3, r7
 80022ce:	1e6e      	subs	r6, r5, #1
 80022d0:	41b5      	sbcs	r5, r6
 80022d2:	1ac9      	subs	r1, r1, r3
 80022d4:	432c      	orrs	r4, r5
 80022d6:	e04e      	b.n	8002376 <__aeabi_dsub+0x4d2>
 80022d8:	464a      	mov	r2, r9
 80022da:	1a14      	subs	r4, r2, r0
 80022dc:	45a1      	cmp	r9, r4
 80022de:	4192      	sbcs	r2, r2
 80022e0:	4252      	negs	r2, r2
 80022e2:	4690      	mov	r8, r2
 80022e4:	1a5f      	subs	r7, r3, r1
 80022e6:	003a      	movs	r2, r7
 80022e8:	4647      	mov	r7, r8
 80022ea:	1bd2      	subs	r2, r2, r7
 80022ec:	4690      	mov	r8, r2
 80022ee:	0212      	lsls	r2, r2, #8
 80022f0:	d500      	bpl.n	80022f4 <__aeabi_dsub+0x450>
 80022f2:	e08b      	b.n	800240c <__aeabi_dsub+0x568>
 80022f4:	4642      	mov	r2, r8
 80022f6:	4322      	orrs	r2, r4
 80022f8:	d000      	beq.n	80022fc <__aeabi_dsub+0x458>
 80022fa:	e630      	b.n	8001f5e <__aeabi_dsub+0xba>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2500      	movs	r5, #0
 8002300:	e74d      	b.n	800219e <__aeabi_dsub+0x2fa>
 8002302:	464a      	mov	r2, r9
 8002304:	0759      	lsls	r1, r3, #29
 8002306:	08d2      	lsrs	r2, r2, #3
 8002308:	430a      	orrs	r2, r1
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	e744      	b.n	8002198 <__aeabi_dsub+0x2f4>
 800230e:	4642      	mov	r2, r8
 8002310:	4b9e      	ldr	r3, [pc, #632]	; (800258c <__aeabi_dsub+0x6e8>)
 8002312:	0861      	lsrs	r1, r4, #1
 8002314:	401a      	ands	r2, r3
 8002316:	0013      	movs	r3, r2
 8002318:	2201      	movs	r2, #1
 800231a:	4014      	ands	r4, r2
 800231c:	430c      	orrs	r4, r1
 800231e:	07da      	lsls	r2, r3, #31
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	4698      	mov	r8, r3
 8002324:	4314      	orrs	r4, r2
 8002326:	e641      	b.n	8001fac <__aeabi_dsub+0x108>
 8002328:	001a      	movs	r2, r3
 800232a:	3e1f      	subs	r6, #31
 800232c:	40f2      	lsrs	r2, r6
 800232e:	0016      	movs	r6, r2
 8002330:	2920      	cmp	r1, #32
 8002332:	d003      	beq.n	800233c <__aeabi_dsub+0x498>
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	1a51      	subs	r1, r2, r1
 8002338:	408b      	lsls	r3, r1
 800233a:	431c      	orrs	r4, r3
 800233c:	1e62      	subs	r2, r4, #1
 800233e:	4194      	sbcs	r4, r2
 8002340:	2300      	movs	r3, #0
 8002342:	4334      	orrs	r4, r6
 8002344:	4698      	mov	r8, r3
 8002346:	2600      	movs	r6, #0
 8002348:	e71d      	b.n	8002186 <__aeabi_dsub+0x2e2>
 800234a:	000c      	movs	r4, r1
 800234c:	3a20      	subs	r2, #32
 800234e:	40d4      	lsrs	r4, r2
 8002350:	0022      	movs	r2, r4
 8002352:	4664      	mov	r4, ip
 8002354:	2c20      	cmp	r4, #32
 8002356:	d004      	beq.n	8002362 <__aeabi_dsub+0x4be>
 8002358:	2740      	movs	r7, #64	; 0x40
 800235a:	1b3f      	subs	r7, r7, r4
 800235c:	40b9      	lsls	r1, r7
 800235e:	4308      	orrs	r0, r1
 8002360:	4680      	mov	r8, r0
 8002362:	4644      	mov	r4, r8
 8002364:	1e61      	subs	r1, r4, #1
 8002366:	418c      	sbcs	r4, r1
 8002368:	4322      	orrs	r2, r4
 800236a:	e5e9      	b.n	8001f40 <__aeabi_dsub+0x9c>
 800236c:	464c      	mov	r4, r9
 800236e:	4323      	orrs	r3, r4
 8002370:	001c      	movs	r4, r3
 8002372:	1e63      	subs	r3, r4, #1
 8002374:	419c      	sbcs	r4, r3
 8002376:	1b04      	subs	r4, r0, r4
 8002378:	42a0      	cmp	r0, r4
 800237a:	419b      	sbcs	r3, r3
 800237c:	425b      	negs	r3, r3
 800237e:	1acb      	subs	r3, r1, r3
 8002380:	4698      	mov	r8, r3
 8002382:	465d      	mov	r5, fp
 8002384:	0016      	movs	r6, r2
 8002386:	e5e2      	b.n	8001f4e <__aeabi_dsub+0xaa>
 8002388:	464e      	mov	r6, r9
 800238a:	431e      	orrs	r6, r3
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x4ec>
 800238e:	e0ae      	b.n	80024ee <__aeabi_dsub+0x64a>
 8002390:	1e66      	subs	r6, r4, #1
 8002392:	2c01      	cmp	r4, #1
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x4f4>
 8002396:	e0fd      	b.n	8002594 <__aeabi_dsub+0x6f0>
 8002398:	4f7b      	ldr	r7, [pc, #492]	; (8002588 <__aeabi_dsub+0x6e4>)
 800239a:	42bc      	cmp	r4, r7
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x4fc>
 800239e:	e107      	b.n	80025b0 <__aeabi_dsub+0x70c>
 80023a0:	46b4      	mov	ip, r6
 80023a2:	e69b      	b.n	80020dc <__aeabi_dsub+0x238>
 80023a4:	4664      	mov	r4, ip
 80023a6:	2220      	movs	r2, #32
 80023a8:	1b12      	subs	r2, r2, r4
 80023aa:	000c      	movs	r4, r1
 80023ac:	4094      	lsls	r4, r2
 80023ae:	0007      	movs	r7, r0
 80023b0:	4090      	lsls	r0, r2
 80023b2:	46a0      	mov	r8, r4
 80023b4:	4664      	mov	r4, ip
 80023b6:	1e42      	subs	r2, r0, #1
 80023b8:	4190      	sbcs	r0, r2
 80023ba:	4662      	mov	r2, ip
 80023bc:	40e7      	lsrs	r7, r4
 80023be:	4644      	mov	r4, r8
 80023c0:	40d1      	lsrs	r1, r2
 80023c2:	433c      	orrs	r4, r7
 80023c4:	4304      	orrs	r4, r0
 80023c6:	185b      	adds	r3, r3, r1
 80023c8:	e6f3      	b.n	80021b2 <__aeabi_dsub+0x30e>
 80023ca:	4c6f      	ldr	r4, [pc, #444]	; (8002588 <__aeabi_dsub+0x6e4>)
 80023cc:	42a2      	cmp	r2, r4
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x52e>
 80023d0:	e0d5      	b.n	800257e <__aeabi_dsub+0x6da>
 80023d2:	4448      	add	r0, r9
 80023d4:	185b      	adds	r3, r3, r1
 80023d6:	4548      	cmp	r0, r9
 80023d8:	4189      	sbcs	r1, r1
 80023da:	4249      	negs	r1, r1
 80023dc:	185b      	adds	r3, r3, r1
 80023de:	07dc      	lsls	r4, r3, #31
 80023e0:	0840      	lsrs	r0, r0, #1
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	4698      	mov	r8, r3
 80023e6:	0016      	movs	r6, r2
 80023e8:	4304      	orrs	r4, r0
 80023ea:	e6cc      	b.n	8002186 <__aeabi_dsub+0x2e2>
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d000      	beq.n	80023f2 <__aeabi_dsub+0x54e>
 80023f0:	e082      	b.n	80024f8 <__aeabi_dsub+0x654>
 80023f2:	000a      	movs	r2, r1
 80023f4:	4302      	orrs	r2, r0
 80023f6:	d140      	bne.n	800247a <__aeabi_dsub+0x5d6>
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	2500      	movs	r5, #0
 80023fc:	031b      	lsls	r3, r3, #12
 80023fe:	e713      	b.n	8002228 <__aeabi_dsub+0x384>
 8002400:	074b      	lsls	r3, r1, #29
 8002402:	08c2      	lsrs	r2, r0, #3
 8002404:	431a      	orrs	r2, r3
 8002406:	465d      	mov	r5, fp
 8002408:	08cb      	lsrs	r3, r1, #3
 800240a:	e6c5      	b.n	8002198 <__aeabi_dsub+0x2f4>
 800240c:	464a      	mov	r2, r9
 800240e:	1a84      	subs	r4, r0, r2
 8002410:	42a0      	cmp	r0, r4
 8002412:	4192      	sbcs	r2, r2
 8002414:	1acb      	subs	r3, r1, r3
 8002416:	4252      	negs	r2, r2
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	4698      	mov	r8, r3
 800241c:	465d      	mov	r5, fp
 800241e:	e59e      	b.n	8001f5e <__aeabi_dsub+0xba>
 8002420:	464a      	mov	r2, r9
 8002422:	0759      	lsls	r1, r3, #29
 8002424:	08d2      	lsrs	r2, r2, #3
 8002426:	430a      	orrs	r2, r1
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	e6f9      	b.n	8002220 <__aeabi_dsub+0x37c>
 800242c:	464a      	mov	r2, r9
 800242e:	1a14      	subs	r4, r2, r0
 8002430:	45a1      	cmp	r9, r4
 8002432:	4192      	sbcs	r2, r2
 8002434:	1a5b      	subs	r3, r3, r1
 8002436:	4252      	negs	r2, r2
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	4698      	mov	r8, r3
 800243c:	2601      	movs	r6, #1
 800243e:	e586      	b.n	8001f4e <__aeabi_dsub+0xaa>
 8002440:	464a      	mov	r2, r9
 8002442:	0759      	lsls	r1, r3, #29
 8002444:	08d2      	lsrs	r2, r2, #3
 8002446:	430a      	orrs	r2, r1
 8002448:	08db      	lsrs	r3, r3, #3
 800244a:	e6a5      	b.n	8002198 <__aeabi_dsub+0x2f4>
 800244c:	464c      	mov	r4, r9
 800244e:	4323      	orrs	r3, r4
 8002450:	001c      	movs	r4, r3
 8002452:	1e63      	subs	r3, r4, #1
 8002454:	419c      	sbcs	r4, r3
 8002456:	e65b      	b.n	8002110 <__aeabi_dsub+0x26c>
 8002458:	4665      	mov	r5, ip
 800245a:	001e      	movs	r6, r3
 800245c:	3d20      	subs	r5, #32
 800245e:	40ee      	lsrs	r6, r5
 8002460:	2c20      	cmp	r4, #32
 8002462:	d005      	beq.n	8002470 <__aeabi_dsub+0x5cc>
 8002464:	2540      	movs	r5, #64	; 0x40
 8002466:	1b2d      	subs	r5, r5, r4
 8002468:	40ab      	lsls	r3, r5
 800246a:	464c      	mov	r4, r9
 800246c:	431c      	orrs	r4, r3
 800246e:	46a2      	mov	sl, r4
 8002470:	4654      	mov	r4, sl
 8002472:	1e63      	subs	r3, r4, #1
 8002474:	419c      	sbcs	r4, r3
 8002476:	4334      	orrs	r4, r6
 8002478:	e77d      	b.n	8002376 <__aeabi_dsub+0x4d2>
 800247a:	074b      	lsls	r3, r1, #29
 800247c:	08c2      	lsrs	r2, r0, #3
 800247e:	431a      	orrs	r2, r3
 8002480:	465d      	mov	r5, fp
 8002482:	08cb      	lsrs	r3, r1, #3
 8002484:	e6cc      	b.n	8002220 <__aeabi_dsub+0x37c>
 8002486:	000a      	movs	r2, r1
 8002488:	4302      	orrs	r2, r0
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0x5ea>
 800248c:	e736      	b.n	80022fc <__aeabi_dsub+0x458>
 800248e:	074b      	lsls	r3, r1, #29
 8002490:	08c2      	lsrs	r2, r0, #3
 8002492:	431a      	orrs	r2, r3
 8002494:	465d      	mov	r5, fp
 8002496:	08cb      	lsrs	r3, r1, #3
 8002498:	e681      	b.n	800219e <__aeabi_dsub+0x2fa>
 800249a:	464a      	mov	r2, r9
 800249c:	1a84      	subs	r4, r0, r2
 800249e:	42a0      	cmp	r0, r4
 80024a0:	4192      	sbcs	r2, r2
 80024a2:	1acb      	subs	r3, r1, r3
 80024a4:	4252      	negs	r2, r2
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	4698      	mov	r8, r3
 80024aa:	465d      	mov	r5, fp
 80024ac:	2601      	movs	r6, #1
 80024ae:	e54e      	b.n	8001f4e <__aeabi_dsub+0xaa>
 80024b0:	074b      	lsls	r3, r1, #29
 80024b2:	08c2      	lsrs	r2, r0, #3
 80024b4:	431a      	orrs	r2, r3
 80024b6:	08cb      	lsrs	r3, r1, #3
 80024b8:	e6b2      	b.n	8002220 <__aeabi_dsub+0x37c>
 80024ba:	464a      	mov	r2, r9
 80024bc:	1a14      	subs	r4, r2, r0
 80024be:	45a1      	cmp	r9, r4
 80024c0:	4192      	sbcs	r2, r2
 80024c2:	1a5f      	subs	r7, r3, r1
 80024c4:	4252      	negs	r2, r2
 80024c6:	1aba      	subs	r2, r7, r2
 80024c8:	4690      	mov	r8, r2
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	d56b      	bpl.n	80025a6 <__aeabi_dsub+0x702>
 80024ce:	464a      	mov	r2, r9
 80024d0:	1a84      	subs	r4, r0, r2
 80024d2:	42a0      	cmp	r0, r4
 80024d4:	4192      	sbcs	r2, r2
 80024d6:	1acb      	subs	r3, r1, r3
 80024d8:	4252      	negs	r2, r2
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	4698      	mov	r8, r3
 80024de:	465d      	mov	r5, fp
 80024e0:	e564      	b.n	8001fac <__aeabi_dsub+0x108>
 80024e2:	074b      	lsls	r3, r1, #29
 80024e4:	08c2      	lsrs	r2, r0, #3
 80024e6:	431a      	orrs	r2, r3
 80024e8:	465d      	mov	r5, fp
 80024ea:	08cb      	lsrs	r3, r1, #3
 80024ec:	e698      	b.n	8002220 <__aeabi_dsub+0x37c>
 80024ee:	074b      	lsls	r3, r1, #29
 80024f0:	08c2      	lsrs	r2, r0, #3
 80024f2:	431a      	orrs	r2, r3
 80024f4:	08cb      	lsrs	r3, r1, #3
 80024f6:	e64f      	b.n	8002198 <__aeabi_dsub+0x2f4>
 80024f8:	000a      	movs	r2, r1
 80024fa:	4302      	orrs	r2, r0
 80024fc:	d090      	beq.n	8002420 <__aeabi_dsub+0x57c>
 80024fe:	464a      	mov	r2, r9
 8002500:	075c      	lsls	r4, r3, #29
 8002502:	08d2      	lsrs	r2, r2, #3
 8002504:	4314      	orrs	r4, r2
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	0312      	lsls	r2, r2, #12
 800250c:	4213      	tst	r3, r2
 800250e:	d008      	beq.n	8002522 <__aeabi_dsub+0x67e>
 8002510:	08ce      	lsrs	r6, r1, #3
 8002512:	4216      	tst	r6, r2
 8002514:	d105      	bne.n	8002522 <__aeabi_dsub+0x67e>
 8002516:	08c0      	lsrs	r0, r0, #3
 8002518:	0749      	lsls	r1, r1, #29
 800251a:	4308      	orrs	r0, r1
 800251c:	0004      	movs	r4, r0
 800251e:	465d      	mov	r5, fp
 8002520:	0033      	movs	r3, r6
 8002522:	0f61      	lsrs	r1, r4, #29
 8002524:	00e2      	lsls	r2, r4, #3
 8002526:	0749      	lsls	r1, r1, #29
 8002528:	08d2      	lsrs	r2, r2, #3
 800252a:	430a      	orrs	r2, r1
 800252c:	e678      	b.n	8002220 <__aeabi_dsub+0x37c>
 800252e:	074b      	lsls	r3, r1, #29
 8002530:	08c2      	lsrs	r2, r0, #3
 8002532:	431a      	orrs	r2, r3
 8002534:	08cb      	lsrs	r3, r1, #3
 8002536:	e632      	b.n	800219e <__aeabi_dsub+0x2fa>
 8002538:	4448      	add	r0, r9
 800253a:	185b      	adds	r3, r3, r1
 800253c:	4548      	cmp	r0, r9
 800253e:	4192      	sbcs	r2, r2
 8002540:	4698      	mov	r8, r3
 8002542:	4252      	negs	r2, r2
 8002544:	4490      	add	r8, r2
 8002546:	4643      	mov	r3, r8
 8002548:	0004      	movs	r4, r0
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	d400      	bmi.n	8002550 <__aeabi_dsub+0x6ac>
 800254e:	e61a      	b.n	8002186 <__aeabi_dsub+0x2e2>
 8002550:	4642      	mov	r2, r8
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <__aeabi_dsub+0x6e8>)
 8002554:	2601      	movs	r6, #1
 8002556:	401a      	ands	r2, r3
 8002558:	4690      	mov	r8, r2
 800255a:	e614      	b.n	8002186 <__aeabi_dsub+0x2e2>
 800255c:	4666      	mov	r6, ip
 800255e:	001f      	movs	r7, r3
 8002560:	3e20      	subs	r6, #32
 8002562:	40f7      	lsrs	r7, r6
 8002564:	2c20      	cmp	r4, #32
 8002566:	d005      	beq.n	8002574 <__aeabi_dsub+0x6d0>
 8002568:	2640      	movs	r6, #64	; 0x40
 800256a:	1b36      	subs	r6, r6, r4
 800256c:	40b3      	lsls	r3, r6
 800256e:	464c      	mov	r4, r9
 8002570:	431c      	orrs	r4, r3
 8002572:	46a2      	mov	sl, r4
 8002574:	4654      	mov	r4, sl
 8002576:	1e63      	subs	r3, r4, #1
 8002578:	419c      	sbcs	r4, r3
 800257a:	433c      	orrs	r4, r7
 800257c:	e5c8      	b.n	8002110 <__aeabi_dsub+0x26c>
 800257e:	0011      	movs	r1, r2
 8002580:	2300      	movs	r3, #0
 8002582:	2200      	movs	r2, #0
 8002584:	e532      	b.n	8001fec <__aeabi_dsub+0x148>
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	000007ff 	.word	0x000007ff
 800258c:	ff7fffff 	.word	0xff7fffff
 8002590:	000007fe 	.word	0x000007fe
 8002594:	464a      	mov	r2, r9
 8002596:	1814      	adds	r4, r2, r0
 8002598:	4284      	cmp	r4, r0
 800259a:	4192      	sbcs	r2, r2
 800259c:	185b      	adds	r3, r3, r1
 800259e:	4698      	mov	r8, r3
 80025a0:	4252      	negs	r2, r2
 80025a2:	4490      	add	r8, r2
 80025a4:	e5e9      	b.n	800217a <__aeabi_dsub+0x2d6>
 80025a6:	4642      	mov	r2, r8
 80025a8:	4322      	orrs	r2, r4
 80025aa:	d100      	bne.n	80025ae <__aeabi_dsub+0x70a>
 80025ac:	e6a6      	b.n	80022fc <__aeabi_dsub+0x458>
 80025ae:	e5ea      	b.n	8002186 <__aeabi_dsub+0x2e2>
 80025b0:	074b      	lsls	r3, r1, #29
 80025b2:	08c2      	lsrs	r2, r0, #3
 80025b4:	431a      	orrs	r2, r3
 80025b6:	08cb      	lsrs	r3, r1, #3
 80025b8:	e632      	b.n	8002220 <__aeabi_dsub+0x37c>
 80025ba:	2200      	movs	r2, #0
 80025bc:	4901      	ldr	r1, [pc, #4]	; (80025c4 <__aeabi_dsub+0x720>)
 80025be:	0013      	movs	r3, r2
 80025c0:	e514      	b.n	8001fec <__aeabi_dsub+0x148>
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	000007ff 	.word	0x000007ff

080025c8 <__aeabi_d2iz>:
 80025c8:	000a      	movs	r2, r1
 80025ca:	b530      	push	{r4, r5, lr}
 80025cc:	4c13      	ldr	r4, [pc, #76]	; (800261c <__aeabi_d2iz+0x54>)
 80025ce:	0053      	lsls	r3, r2, #1
 80025d0:	0309      	lsls	r1, r1, #12
 80025d2:	0005      	movs	r5, r0
 80025d4:	0b09      	lsrs	r1, r1, #12
 80025d6:	2000      	movs	r0, #0
 80025d8:	0d5b      	lsrs	r3, r3, #21
 80025da:	0fd2      	lsrs	r2, r2, #31
 80025dc:	42a3      	cmp	r3, r4
 80025de:	dd04      	ble.n	80025ea <__aeabi_d2iz+0x22>
 80025e0:	480f      	ldr	r0, [pc, #60]	; (8002620 <__aeabi_d2iz+0x58>)
 80025e2:	4283      	cmp	r3, r0
 80025e4:	dd02      	ble.n	80025ec <__aeabi_d2iz+0x24>
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <__aeabi_d2iz+0x5c>)
 80025e8:	18d0      	adds	r0, r2, r3
 80025ea:	bd30      	pop	{r4, r5, pc}
 80025ec:	2080      	movs	r0, #128	; 0x80
 80025ee:	0340      	lsls	r0, r0, #13
 80025f0:	4301      	orrs	r1, r0
 80025f2:	480d      	ldr	r0, [pc, #52]	; (8002628 <__aeabi_d2iz+0x60>)
 80025f4:	1ac0      	subs	r0, r0, r3
 80025f6:	281f      	cmp	r0, #31
 80025f8:	dd08      	ble.n	800260c <__aeabi_d2iz+0x44>
 80025fa:	480c      	ldr	r0, [pc, #48]	; (800262c <__aeabi_d2iz+0x64>)
 80025fc:	1ac3      	subs	r3, r0, r3
 80025fe:	40d9      	lsrs	r1, r3
 8002600:	000b      	movs	r3, r1
 8002602:	4258      	negs	r0, r3
 8002604:	2a00      	cmp	r2, #0
 8002606:	d1f0      	bne.n	80025ea <__aeabi_d2iz+0x22>
 8002608:	0018      	movs	r0, r3
 800260a:	e7ee      	b.n	80025ea <__aeabi_d2iz+0x22>
 800260c:	4c08      	ldr	r4, [pc, #32]	; (8002630 <__aeabi_d2iz+0x68>)
 800260e:	40c5      	lsrs	r5, r0
 8002610:	46a4      	mov	ip, r4
 8002612:	4463      	add	r3, ip
 8002614:	4099      	lsls	r1, r3
 8002616:	000b      	movs	r3, r1
 8002618:	432b      	orrs	r3, r5
 800261a:	e7f2      	b.n	8002602 <__aeabi_d2iz+0x3a>
 800261c:	000003fe 	.word	0x000003fe
 8002620:	0000041d 	.word	0x0000041d
 8002624:	7fffffff 	.word	0x7fffffff
 8002628:	00000433 	.word	0x00000433
 800262c:	00000413 	.word	0x00000413
 8002630:	fffffbed 	.word	0xfffffbed

08002634 <__aeabi_i2d>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	2800      	cmp	r0, #0
 8002638:	d016      	beq.n	8002668 <__aeabi_i2d+0x34>
 800263a:	17c3      	asrs	r3, r0, #31
 800263c:	18c5      	adds	r5, r0, r3
 800263e:	405d      	eors	r5, r3
 8002640:	0fc4      	lsrs	r4, r0, #31
 8002642:	0028      	movs	r0, r5
 8002644:	f000 f894 	bl	8002770 <__clzsi2>
 8002648:	4a11      	ldr	r2, [pc, #68]	; (8002690 <__aeabi_i2d+0x5c>)
 800264a:	1a12      	subs	r2, r2, r0
 800264c:	280a      	cmp	r0, #10
 800264e:	dc16      	bgt.n	800267e <__aeabi_i2d+0x4a>
 8002650:	0003      	movs	r3, r0
 8002652:	002e      	movs	r6, r5
 8002654:	3315      	adds	r3, #21
 8002656:	409e      	lsls	r6, r3
 8002658:	230b      	movs	r3, #11
 800265a:	1a18      	subs	r0, r3, r0
 800265c:	40c5      	lsrs	r5, r0
 800265e:	0553      	lsls	r3, r2, #21
 8002660:	032d      	lsls	r5, r5, #12
 8002662:	0b2d      	lsrs	r5, r5, #12
 8002664:	0d5b      	lsrs	r3, r3, #21
 8002666:	e003      	b.n	8002670 <__aeabi_i2d+0x3c>
 8002668:	2400      	movs	r4, #0
 800266a:	2300      	movs	r3, #0
 800266c:	2500      	movs	r5, #0
 800266e:	2600      	movs	r6, #0
 8002670:	051b      	lsls	r3, r3, #20
 8002672:	432b      	orrs	r3, r5
 8002674:	07e4      	lsls	r4, r4, #31
 8002676:	4323      	orrs	r3, r4
 8002678:	0030      	movs	r0, r6
 800267a:	0019      	movs	r1, r3
 800267c:	bd70      	pop	{r4, r5, r6, pc}
 800267e:	380b      	subs	r0, #11
 8002680:	4085      	lsls	r5, r0
 8002682:	0553      	lsls	r3, r2, #21
 8002684:	032d      	lsls	r5, r5, #12
 8002686:	2600      	movs	r6, #0
 8002688:	0b2d      	lsrs	r5, r5, #12
 800268a:	0d5b      	lsrs	r3, r3, #21
 800268c:	e7f0      	b.n	8002670 <__aeabi_i2d+0x3c>
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	0000041e 	.word	0x0000041e

08002694 <__aeabi_ui2d>:
 8002694:	b510      	push	{r4, lr}
 8002696:	1e04      	subs	r4, r0, #0
 8002698:	d010      	beq.n	80026bc <__aeabi_ui2d+0x28>
 800269a:	f000 f869 	bl	8002770 <__clzsi2>
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <__aeabi_ui2d+0x48>)
 80026a0:	1a1b      	subs	r3, r3, r0
 80026a2:	280a      	cmp	r0, #10
 80026a4:	dc11      	bgt.n	80026ca <__aeabi_ui2d+0x36>
 80026a6:	220b      	movs	r2, #11
 80026a8:	0021      	movs	r1, r4
 80026aa:	1a12      	subs	r2, r2, r0
 80026ac:	40d1      	lsrs	r1, r2
 80026ae:	3015      	adds	r0, #21
 80026b0:	030a      	lsls	r2, r1, #12
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	4084      	lsls	r4, r0
 80026b6:	0b12      	lsrs	r2, r2, #12
 80026b8:	0d5b      	lsrs	r3, r3, #21
 80026ba:	e001      	b.n	80026c0 <__aeabi_ui2d+0x2c>
 80026bc:	2300      	movs	r3, #0
 80026be:	2200      	movs	r2, #0
 80026c0:	051b      	lsls	r3, r3, #20
 80026c2:	4313      	orrs	r3, r2
 80026c4:	0020      	movs	r0, r4
 80026c6:	0019      	movs	r1, r3
 80026c8:	bd10      	pop	{r4, pc}
 80026ca:	0022      	movs	r2, r4
 80026cc:	380b      	subs	r0, #11
 80026ce:	4082      	lsls	r2, r0
 80026d0:	055b      	lsls	r3, r3, #21
 80026d2:	0312      	lsls	r2, r2, #12
 80026d4:	2400      	movs	r4, #0
 80026d6:	0b12      	lsrs	r2, r2, #12
 80026d8:	0d5b      	lsrs	r3, r3, #21
 80026da:	e7f1      	b.n	80026c0 <__aeabi_ui2d+0x2c>
 80026dc:	0000041e 	.word	0x0000041e

080026e0 <__aeabi_f2d>:
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	0043      	lsls	r3, r0, #1
 80026e4:	0246      	lsls	r6, r0, #9
 80026e6:	0fc4      	lsrs	r4, r0, #31
 80026e8:	20fe      	movs	r0, #254	; 0xfe
 80026ea:	0e1b      	lsrs	r3, r3, #24
 80026ec:	1c59      	adds	r1, r3, #1
 80026ee:	0a75      	lsrs	r5, r6, #9
 80026f0:	4208      	tst	r0, r1
 80026f2:	d00c      	beq.n	800270e <__aeabi_f2d+0x2e>
 80026f4:	22e0      	movs	r2, #224	; 0xe0
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	4694      	mov	ip, r2
 80026fa:	076d      	lsls	r5, r5, #29
 80026fc:	0b36      	lsrs	r6, r6, #12
 80026fe:	4463      	add	r3, ip
 8002700:	051b      	lsls	r3, r3, #20
 8002702:	4333      	orrs	r3, r6
 8002704:	07e4      	lsls	r4, r4, #31
 8002706:	4323      	orrs	r3, r4
 8002708:	0028      	movs	r0, r5
 800270a:	0019      	movs	r1, r3
 800270c:	bd70      	pop	{r4, r5, r6, pc}
 800270e:	2b00      	cmp	r3, #0
 8002710:	d114      	bne.n	800273c <__aeabi_f2d+0x5c>
 8002712:	2d00      	cmp	r5, #0
 8002714:	d01b      	beq.n	800274e <__aeabi_f2d+0x6e>
 8002716:	0028      	movs	r0, r5
 8002718:	f000 f82a 	bl	8002770 <__clzsi2>
 800271c:	280a      	cmp	r0, #10
 800271e:	dc1c      	bgt.n	800275a <__aeabi_f2d+0x7a>
 8002720:	230b      	movs	r3, #11
 8002722:	002a      	movs	r2, r5
 8002724:	1a1b      	subs	r3, r3, r0
 8002726:	40da      	lsrs	r2, r3
 8002728:	0003      	movs	r3, r0
 800272a:	3315      	adds	r3, #21
 800272c:	409d      	lsls	r5, r3
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <__aeabi_f2d+0x88>)
 8002730:	0312      	lsls	r2, r2, #12
 8002732:	1a1b      	subs	r3, r3, r0
 8002734:	055b      	lsls	r3, r3, #21
 8002736:	0b16      	lsrs	r6, r2, #12
 8002738:	0d5b      	lsrs	r3, r3, #21
 800273a:	e7e1      	b.n	8002700 <__aeabi_f2d+0x20>
 800273c:	2d00      	cmp	r5, #0
 800273e:	d009      	beq.n	8002754 <__aeabi_f2d+0x74>
 8002740:	0b32      	lsrs	r2, r6, #12
 8002742:	2680      	movs	r6, #128	; 0x80
 8002744:	0336      	lsls	r6, r6, #12
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <__aeabi_f2d+0x8c>)
 8002748:	076d      	lsls	r5, r5, #29
 800274a:	4316      	orrs	r6, r2
 800274c:	e7d8      	b.n	8002700 <__aeabi_f2d+0x20>
 800274e:	2300      	movs	r3, #0
 8002750:	2600      	movs	r6, #0
 8002752:	e7d5      	b.n	8002700 <__aeabi_f2d+0x20>
 8002754:	2600      	movs	r6, #0
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <__aeabi_f2d+0x8c>)
 8002758:	e7d2      	b.n	8002700 <__aeabi_f2d+0x20>
 800275a:	0003      	movs	r3, r0
 800275c:	002a      	movs	r2, r5
 800275e:	3b0b      	subs	r3, #11
 8002760:	409a      	lsls	r2, r3
 8002762:	2500      	movs	r5, #0
 8002764:	e7e3      	b.n	800272e <__aeabi_f2d+0x4e>
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	00000389 	.word	0x00000389
 800276c:	000007ff 	.word	0x000007ff

08002770 <__clzsi2>:
 8002770:	211c      	movs	r1, #28
 8002772:	2301      	movs	r3, #1
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	4298      	cmp	r0, r3
 8002778:	d301      	bcc.n	800277e <__clzsi2+0xe>
 800277a:	0c00      	lsrs	r0, r0, #16
 800277c:	3910      	subs	r1, #16
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	4298      	cmp	r0, r3
 8002782:	d301      	bcc.n	8002788 <__clzsi2+0x18>
 8002784:	0a00      	lsrs	r0, r0, #8
 8002786:	3908      	subs	r1, #8
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	4298      	cmp	r0, r3
 800278c:	d301      	bcc.n	8002792 <__clzsi2+0x22>
 800278e:	0900      	lsrs	r0, r0, #4
 8002790:	3904      	subs	r1, #4
 8002792:	a202      	add	r2, pc, #8	; (adr r2, 800279c <__clzsi2+0x2c>)
 8002794:	5c10      	ldrb	r0, [r2, r0]
 8002796:	1840      	adds	r0, r0, r1
 8002798:	4770      	bx	lr
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	02020304 	.word	0x02020304
 80027a0:	01010101 	.word	0x01010101
	...

080027ac <__clzdi2>:
 80027ac:	b510      	push	{r4, lr}
 80027ae:	2900      	cmp	r1, #0
 80027b0:	d103      	bne.n	80027ba <__clzdi2+0xe>
 80027b2:	f7ff ffdd 	bl	8002770 <__clzsi2>
 80027b6:	3020      	adds	r0, #32
 80027b8:	e002      	b.n	80027c0 <__clzdi2+0x14>
 80027ba:	1c08      	adds	r0, r1, #0
 80027bc:	f7ff ffd8 	bl	8002770 <__clzsi2>
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)

080027c4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80027c8:	f003 fc72 	bl	80060b0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80027cc:	f000 f80e 	bl	80027ec <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80027da:	2301      	movs	r3, #1
 80027dc:	425b      	negs	r3, r3
 80027de:	0018      	movs	r0, r3
 80027e0:	f01a fb54 	bl	801ce8c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 80027f2:	2002      	movs	r0, #2
 80027f4:	f004 f94c 	bl	8006a90 <BSP_LED_Init>
  LED_Init(LED_RED1);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f004 f949 	bl	8006a90 <BSP_LED_Init>
  LED_Init(LED_RED2);
 80027fe:	2003      	movs	r0, #3
 8002800:	f004 f946 	bl	8006a90 <BSP_LED_Init>
  CMD_Init(CmdProcessNotify);
 8002804:	4b42      	ldr	r3, [pc, #264]	; (8002910 <LoRaWAN_Init+0x124>)
 8002806:	0018      	movs	r0, r3
 8002808:	f001 fdd6 	bl	80043b8 <CMD_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800280c:	4b41      	ldr	r3, [pc, #260]	; (8002914 <LoRaWAN_Init+0x128>)
 800280e:	2200      	movs	r2, #0
 8002810:	9202      	str	r2, [sp, #8]
 8002812:	2200      	movs	r2, #0
 8002814:	9201      	str	r2, [sp, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	9200      	str	r2, [sp, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	2002      	movs	r0, #2
 8002820:	f019 ff68 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8002824:	4b3c      	ldr	r3, [pc, #240]	; (8002918 <LoRaWAN_Init+0x12c>)
 8002826:	2201      	movs	r2, #1
 8002828:	9202      	str	r2, [sp, #8]
 800282a:	2202      	movs	r2, #2
 800282c:	9201      	str	r2, [sp, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	9200      	str	r2, [sp, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	2002      	movs	r0, #2
 8002838:	f019 ff5c 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800283c:	4b37      	ldr	r3, [pc, #220]	; (800291c <LoRaWAN_Init+0x130>)
 800283e:	2201      	movs	r2, #1
 8002840:	9202      	str	r2, [sp, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	9201      	str	r2, [sp, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	9200      	str	r2, [sp, #0]
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2002      	movs	r0, #2
 8002850:	f019 ff50 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002854:	4b32      	ldr	r3, [pc, #200]	; (8002920 <LoRaWAN_Init+0x134>)
 8002856:	2201      	movs	r2, #1
 8002858:	4251      	negs	r1, r2
 800285a:	4832      	ldr	r0, [pc, #200]	; (8002924 <LoRaWAN_Init+0x138>)
 800285c:	2200      	movs	r2, #0
 800285e:	9200      	str	r2, [sp, #0]
 8002860:	2200      	movs	r2, #0
 8002862:	f01b f817 	bl	801d894 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <LoRaWAN_Init+0x13c>)
 8002868:	2201      	movs	r2, #1
 800286a:	4251      	negs	r1, r2
 800286c:	482f      	ldr	r0, [pc, #188]	; (800292c <LoRaWAN_Init+0x140>)
 800286e:	2200      	movs	r2, #0
 8002870:	9200      	str	r2, [sp, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	f01b f80e 	bl	801d894 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <LoRaWAN_Init+0x144>)
 800287a:	2201      	movs	r2, #1
 800287c:	4251      	negs	r1, r2
 800287e:	482d      	ldr	r0, [pc, #180]	; (8002934 <LoRaWAN_Init+0x148>)
 8002880:	2200      	movs	r2, #0
 8002882:	9200      	str	r2, [sp, #0]
 8002884:	2201      	movs	r2, #1
 8002886:	f01b f805 	bl	801d894 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800288a:	23fa      	movs	r3, #250	; 0xfa
 800288c:	005a      	lsls	r2, r3, #1
 800288e:	4b25      	ldr	r3, [pc, #148]	; (8002924 <LoRaWAN_Init+0x138>)
 8002890:	0011      	movs	r1, r2
 8002892:	0018      	movs	r0, r3
 8002894:	f01b f926 	bl	801dae4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002898:	23fa      	movs	r3, #250	; 0xfa
 800289a:	005a      	lsls	r2, r3, #1
 800289c:	4b23      	ldr	r3, [pc, #140]	; (800292c <LoRaWAN_Init+0x140>)
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f01b f91f 	bl	801dae4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 80028a6:	23fa      	movs	r3, #250	; 0xfa
 80028a8:	005a      	lsls	r2, r3, #1
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <LoRaWAN_Init+0x148>)
 80028ac:	0011      	movs	r1, r2
 80028ae:	0018      	movs	r0, r3
 80028b0:	f01b f918 	bl	801dae4 <UTIL_TIMER_SetPeriod>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <LoRaWAN_Init+0x14c>)
 80028b6:	001a      	movs	r2, r3
 80028b8:	2100      	movs	r1, #0
 80028ba:	2002      	movs	r0, #2
 80028bc:	f01a fbc8 	bl	801d050 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Vcom), UTIL_SEQ_RFU, CMD_Process);
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <LoRaWAN_Init+0x150>)
 80028c2:	001a      	movs	r2, r3
 80028c4:	2100      	movs	r1, #0
 80028c6:	2001      	movs	r0, #1
 80028c8:	f01a fbc2 	bl	801d050 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 80028cc:	f002 f832 	bl	8004934 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <LoRaWAN_Init+0x154>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f00b fb5e 	bl	800df94 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <LoRaWAN_Init+0x158>)
 80028da:	0018      	movs	r0, r3
 80028dc:	f00b fba0 	bl	800e020 <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <LoRaWAN_Init+0x148>)
 80028e2:	0018      	movs	r0, r3
 80028e4:	f01b f80e 	bl	801d904 <UTIL_TIMER_Start>

  APP_PPRINTF("ATtention command interface\r\n");
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <LoRaWAN_Init+0x15c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	2000      	movs	r0, #0
 80028f0:	f019 ff00 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d1f7      	bne.n	80028e8 <LoRaWAN_Init+0xfc>
  APP_PPRINTF("AT? to list all available functions\r\n");
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <LoRaWAN_Init+0x160>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	2000      	movs	r0, #0
 8002900:	f019 fef8 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d1f7      	bne.n	80028f8 <LoRaWAN_Init+0x10c>
  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	08002a45 	.word	0x08002a45
 8002914:	0801efd4 	.word	0x0801efd4
 8002918:	0801eff4 	.word	0x0801eff4
 800291c:	0801f014 	.word	0x0801f014
 8002920:	0800298d 	.word	0x0800298d
 8002924:	20000208 	.word	0x20000208
 8002928:	080029a3 	.word	0x080029a3
 800292c:	20000220 	.word	0x20000220
 8002930:	080029b9 	.word	0x080029b9
 8002934:	20000238 	.word	0x20000238
 8002938:	0800e245 	.word	0x0800e245
 800293c:	08004419 	.word	0x08004419
 8002940:	20000000 	.word	0x20000000
 8002944:	20000020 	.word	0x20000020
 8002948:	0801f034 	.word	0x0801f034
 800294c:	0801f054 	.word	0x0801f054

08002950 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00f      	beq.n	8002980 <OnRxData+0x30>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00c      	beq.n	8002980 <OnRxData+0x30>
  {
    LED_On(LED_BLUE);
 8002966:	2002      	movs	r0, #2
 8002968:	f004 f900 	bl	8006b6c <BSP_LED_On>
    UTIL_TIMER_Start(&RxLedTimer);
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <OnRxData+0x38>)
 800296e:	0018      	movs	r0, r3
 8002970:	f01a ffc8 	bl	801d904 <UTIL_TIMER_Start>

    AT_event_receive(appData, params);
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0011      	movs	r1, r2
 800297a:	0018      	movs	r0, r3
 800297c:	f000 f8a8 	bl	8002ad0 <AT_event_receive>
  }

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b002      	add	sp, #8
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000220 	.word	0x20000220

0800298c <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 8002994:	2003      	movs	r0, #3
 8002996:	f004 f905 	bl	8006ba4 <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE);
 80029aa:	2002      	movs	r0, #2
 80029ac:	f004 f8fa 	bl	8006ba4 <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1);
 80029c0:	2001      	movs	r0, #1
 80029c2:	f004 f90b 	bl	8006bdc <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <OnTxData+0x24>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <OnTxData+0x24>
  {
    LED_On(LED_RED2);
 80029e6:	2003      	movs	r0, #3
 80029e8:	f004 f8c0 	bl	8006b6c <BSP_LED_On>
    UTIL_TIMER_Start(&TxLedTimer);
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <OnTxData+0x34>)
 80029ee:	0018      	movs	r0, r3
 80029f0:	f01a ff88 	bl	801d904 <UTIL_TIMER_Start>
  }
  AT_event_confirm(params);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 f8f4 	bl	8002be4 <AT_event_confirm>

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000208 	.word	0x20000208

08002a08 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <OnJoinRequest+0x26>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d106      	bne.n	8002a2e <OnJoinRequest+0x26>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <OnJoinRequest+0x38>)
 8002a22:	0018      	movs	r0, r3
 8002a24:	f01a ffe6 	bl	801d9f4 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1);
 8002a28:	2001      	movs	r0, #1
 8002a2a:	f004 f8bb 	bl	8006ba4 <BSP_LED_Off>

    }
  }
  AT_event_join(joinParams);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 f82b 	bl	8002a8c <AT_event_join>

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	20000238 	.word	0x20000238

08002a44 <CmdProcessNotify>:

static void CmdProcessNotify(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CmdProcessNotify_1 */

  /* USER CODE END CmdProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Vcom), 0);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f01a fb24 	bl	801d098 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN CmdProcessNotify_2 */

  /* USER CODE END CmdProcessNotify_2 */
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f01a fb1b 	bl	801d098 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a6c:	f3bf 8f4f 	dsb	sy
}
 8002a70:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a72:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <__NVIC_SystemReset+0x1c>)
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <__NVIC_SystemReset+0x20>)
 8002a76:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a78:	f3bf 8f4f 	dsb	sy
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	e7fd      	b.n	8002a7e <__NVIC_SystemReset+0x16>
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	e000ed00 	.word	0xe000ed00
 8002a88:	05fa0004 	.word	0x05fa0004

08002a8c <AT_event_join>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
void AT_event_join(LmHandlerJoinParams_t *params)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_event_join_1 */

  /* USER CODE END AT_event_join_1 */
  if ((params != NULL) && (params->Status == LORAMAC_HANDLER_SUCCESS))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <AT_event_join+0x26>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	785b      	ldrb	r3, [r3, #1]
 8002a9e:	b25b      	sxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d106      	bne.n	8002ab2 <AT_event_join+0x26>
  {
    AT_PRINTF("+EVT:JOINED\r\n");
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <AT_event_join+0x3c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f019 fe22 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 8002ab0:	e006      	b.n	8002ac0 <AT_event_join+0x34>
  }
  else
  {
    AT_PRINTF("+EVT:JOIN FAILED\r\n");
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <AT_event_join+0x40>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f019 fe1b 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN AT_event_join_2 */

  /* USER CODE END AT_event_join_2 */
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	0801f118 	.word	0x0801f118
 8002acc:	0801f128 	.word	0x0801f128

08002ad0 <AT_event_receive>:

void AT_event_receive(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b08f      	sub	sp, #60	; 0x3c
 8002ad4:	af04      	add	r7, sp, #16
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN AT_event_receive_1 */

  /* USER CODE END AT_event_receive_1 */
  const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 8002ada:	230c      	movs	r3, #12
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <AT_event_receive+0x100>)
 8002ae0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ae2:	c313      	stmia	r3!, {r0, r1, r4}
 8002ae4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ae6:	c313      	stmia	r3!, {r0, r1, r4}
  uint8_t ReceivedDataSize = 0;
 8002ae8:	2127      	movs	r1, #39	; 0x27
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]

  if ((appData != NULL) && (appData->BufferSize > 0))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d068      	beq.n	8002bc8 <AT_event_receive+0xf8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	785b      	ldrb	r3, [r3, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d064      	beq.n	8002bc8 <AT_event_receive+0xf8>
  {
    /* Received data to be copied*/
    if (LORAWAN_APP_DATA_BUFFER_MAX_SIZE <= appData->BufferSize)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	785b      	ldrb	r3, [r3, #1]
 8002b02:	2bf1      	cmp	r3, #241	; 0xf1
 8002b04:	d903      	bls.n	8002b0e <AT_event_receive+0x3e>
    {
      ReceivedDataSize = LORAWAN_APP_DATA_BUFFER_MAX_SIZE;
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	22f2      	movs	r2, #242	; 0xf2
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e004      	b.n	8002b18 <AT_event_receive+0x48>
    }
    else
    {
      ReceivedDataSize = appData->BufferSize;
 8002b0e:	2327      	movs	r3, #39	; 0x27
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	7852      	ldrb	r2, [r2, #1]
 8002b16:	701a      	strb	r2, [r3, #0]
    }

    /*aynchronous notification to the host*/
    AT_PRINTF("+EVT:%d:%02x:", appData->Port, ReceivedDataSize);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	2327      	movs	r3, #39	; 0x27
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <AT_event_receive+0x104>)
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	9100      	str	r1, [sp, #0]
 8002b2a:	0013      	movs	r3, r2
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2000      	movs	r0, #0
 8002b32:	f019 fddf 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>

    for (uint8_t i = 0; i < ReceivedDataSize; i++)
 8002b36:	2326      	movs	r3, #38	; 0x26
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e013      	b.n	8002b68 <AT_event_receive+0x98>
    {
      AT_PRINTF("%02x", appData->Buffer[i]);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	2426      	movs	r4, #38	; 0x26
 8002b46:	193b      	adds	r3, r7, r4
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	18d3      	adds	r3, r2, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	001a      	movs	r2, r3
 8002b50:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <AT_event_receive+0x108>)
 8002b52:	9200      	str	r2, [sp, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2100      	movs	r1, #0
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f019 fdcb 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < ReceivedDataSize; i++)
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	3201      	adds	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	2326      	movs	r3, #38	; 0x26
 8002b6a:	18fa      	adds	r2, r7, r3
 8002b6c:	2327      	movs	r3, #39	; 0x27
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3e3      	bcc.n	8002b40 <AT_event_receive+0x70>
    }
    AT_PRINTF("\r\n");
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <AT_event_receive+0x10c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f019 fdb8 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    if (params != NULL)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01e      	beq.n	8002bc8 <AT_event_receive+0xf8>
    {
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d\r\n", slotStrings[params->RxSlot], params->Datarate, params->Rssi,
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	7b1b      	ldrb	r3, [r3, #12]
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	001a      	movs	r2, r3
 8002b92:	230c      	movs	r3, #12
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	58d3      	ldr	r3, [r2, r3]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	7892      	ldrb	r2, [r2, #2]
 8002b9e:	b252      	sxtb	r2, r2
 8002ba0:	0011      	movs	r1, r2
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	78d2      	ldrb	r2, [r2, #3]
 8002ba6:	b252      	sxtb	r2, r2
 8002ba8:	0010      	movs	r0, r2
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	7912      	ldrb	r2, [r2, #4]
 8002bae:	b252      	sxtb	r2, r2
 8002bb0:	0014      	movs	r4, r2
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <AT_event_receive+0x110>)
 8002bb4:	9403      	str	r4, [sp, #12]
 8002bb6:	9002      	str	r0, [sp, #8]
 8002bb8:	9101      	str	r1, [sp, #4]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f019 fd96 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    }
  }
  /* USER CODE BEGIN AT_event_receive_2 */

  /* USER CODE END AT_event_receive_2 */
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b00b      	add	sp, #44	; 0x2c
 8002bce:	bd90      	pop	{r4, r7, pc}
 8002bd0:	0801f180 	.word	0x0801f180
 8002bd4:	0801f13c 	.word	0x0801f13c
 8002bd8:	0801f14c 	.word	0x0801f14c
 8002bdc:	0801f154 	.word	0x0801f154
 8002be0:	0801f158 	.word	0x0801f158

08002be4 <AT_event_confirm>:

void AT_event_confirm(LmHandlerTxParams_t *params)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_event_confirm_1 */

  /* USER CODE END AT_event_confirm_1 */
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <AT_event_confirm+0x2a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	789b      	ldrb	r3, [r3, #2]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d109      	bne.n	8002c0e <AT_event_confirm+0x2a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	78db      	ldrb	r3, [r3, #3]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <AT_event_confirm+0x2a>
  {
    AT_PRINTF("+EVT:SEND_CONFIRMED\r\n");
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <AT_event_confirm+0x34>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	2100      	movs	r1, #0
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f019 fd73 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN AT_event_confirm_2 */

  /* USER CODE END AT_event_confirm_2 */
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	0801f198 	.word	0x0801f198

08002c1c <AT_return_error>:
{
  return AT_OK;
}

ATEerror_t AT_return_error(const char *param)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return AT_ERROR;
 8002c24:	2301      	movs	r3, #1
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b002      	add	sp, #8
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <AT_reset>:

ATEerror_t AT_reset(const char *param)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_reset_1 */

  /* USER CODE END AT_reset_1 */
  NVIC_SystemReset();
 8002c36:	f7ff ff17 	bl	8002a68 <__NVIC_SystemReset>
	...

08002c3c <AT_Region_get>:

  /* USER CODE END AT_reset_2 */
}

ATEerror_t AT_Region_get(const char *param)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b091      	sub	sp, #68	; 0x44
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Region_get_1 */

  /* USER CODE END AT_Region_get_1 */
  const char *regionStrings[] = { "AS923", "AU915", "CN470", "CN779", "EU433", "EU868", "KR920", "IN865", "US915", "RU864" };
 8002c44:	2310      	movs	r3, #16
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	4a18      	ldr	r2, [pc, #96]	; (8002cac <AT_Region_get+0x70>)
 8002c4a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c4c:	c313      	stmia	r3!, {r0, r1, r4}
 8002c4e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c50:	c313      	stmia	r3!, {r0, r1, r4}
 8002c52:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c54:	c313      	stmia	r3!, {r0, r1, r4}
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	601a      	str	r2, [r3, #0]
  LoRaMacRegion_t region;
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 8002c5a:	230f      	movs	r3, #15
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f00b fdd4 	bl	800e80c <LmHandlerGetActiveRegion>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d001      	beq.n	8002c6c <AT_Region_get+0x30>
  {
    return AT_PARAM_ERROR;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e01b      	b.n	8002ca4 <AT_Region_get+0x68>
  }

  if (region > LORAMAC_REGION_RU864)
 8002c6c:	230f      	movs	r3, #15
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	d901      	bls.n	8002c7a <AT_Region_get+0x3e>
  {
    return AT_PARAM_ERROR;
 8002c76:	2302      	movs	r3, #2
 8002c78:	e014      	b.n	8002ca4 <AT_Region_get+0x68>
  }

  AT_PRINTF("%d:%s\r\n", region, regionStrings[region]);
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	18bb      	adds	r3, r7, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	0019      	movs	r1, r3
 8002c82:	18bb      	adds	r3, r7, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	001a      	movs	r2, r3
 8002c88:	2310      	movs	r3, #16
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	0092      	lsls	r2, r2, #2
 8002c8e:	58d3      	ldr	r3, [r2, r3]
 8002c90:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <AT_Region_get+0x74>)
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	9100      	str	r1, [sp, #0]
 8002c96:	0013      	movs	r3, r2
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f019 fd29 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 8002ca2:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Region_get_2 */

  /* USER CODE END AT_Region_get_2 */
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b00f      	add	sp, #60	; 0x3c
 8002caa:	bd90      	pop	{r4, r7, pc}
 8002cac:	0801f1b8 	.word	0x0801f1b8
 8002cb0:	0801f1b0 	.word	0x0801f1b0

08002cb4 <AT_Region_set>:

ATEerror_t AT_Region_set(const char *param)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Region_set_1 */

  /* USER CODE END AT_Region_set_1 */
  LoRaMacRegion_t region;
  if (tiny_sscanf(param, "%hhu", &region) != 1)
 8002cbc:	230f      	movs	r3, #15
 8002cbe:	18fa      	adds	r2, r7, r3
 8002cc0:	490f      	ldr	r1, [pc, #60]	; (8002d00 <AT_Region_set+0x4c>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f01b fe59 	bl	801e97c <tiny_sscanf>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d001      	beq.n	8002cd4 <AT_Region_set+0x20>
  {
    return AT_PARAM_ERROR;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e011      	b.n	8002cf8 <AT_Region_set+0x44>
  }
  if (region > LORAMAC_REGION_RU864)
 8002cd4:	230f      	movs	r3, #15
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b09      	cmp	r3, #9
 8002cdc:	d901      	bls.n	8002ce2 <AT_Region_set+0x2e>
  {
    return AT_PARAM_ERROR;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e00a      	b.n	8002cf8 <AT_Region_set+0x44>
  }

  if (LmHandlerSetActiveRegion(region) != LORAMAC_HANDLER_SUCCESS)
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f00b fe8d 	bl	800ea08 <LmHandlerSetActiveRegion>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d001      	beq.n	8002cf6 <AT_Region_set+0x42>
  {
    return AT_PARAM_ERROR;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e000      	b.n	8002cf8 <AT_Region_set+0x44>
  }

  return AT_OK;
 8002cf6:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Region_set_2 */

  /* USER CODE END AT_Region_set_2 */
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b004      	add	sp, #16
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	0801f1e0 	.word	0x0801f1e0

08002d04 <AT_DevEUI_get>:

ATEerror_t AT_DevEUI_get(const char *param)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevEUI_get_1 */

  /* USER CODE END AT_DevEUI_get_1 */
  uint8_t devEUI[8];
  if (LmHandlerGetDevEUI(devEUI) != LORAMAC_HANDLER_SUCCESS)
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	0018      	movs	r0, r3
 8002d12:	f00b fd91 	bl	800e838 <LmHandlerGetDevEUI>
 8002d16:	1e03      	subs	r3, r0, #0
 8002d18:	d001      	beq.n	8002d1e <AT_DevEUI_get+0x1a>
  {
    return AT_PARAM_ERROR;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e005      	b.n	8002d2a <AT_DevEUI_get+0x26>
  }

  print_8_02x(devEUI);
 8002d1e:	2308      	movs	r3, #8
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	0018      	movs	r0, r3
 8002d24:	f001 fab0 	bl	8004288 <print_8_02x>
  return AT_OK;
 8002d28:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevEUI_get_2 */

  /* USER CODE END AT_DevEUI_get_2 */
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b004      	add	sp, #16
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <AT_DevEUI_set>:

ATEerror_t AT_DevEUI_set(const char *param)
{
 8002d34:	b5b0      	push	{r4, r5, r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af06      	add	r7, sp, #24
 8002d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevEUI_set_1 */

  /* USER CODE END AT_DevEUI_set_1 */
  uint8_t devEui[8];
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8002d3c:	2508      	movs	r5, #8
 8002d3e:	197b      	adds	r3, r7, r5
 8002d40:	1c5c      	adds	r4, r3, #1
 8002d42:	197a      	adds	r2, r7, r5
 8002d44:	4914      	ldr	r1, [pc, #80]	; (8002d98 <AT_DevEUI_set+0x64>)
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	197b      	adds	r3, r7, r5
 8002d4a:	3307      	adds	r3, #7
 8002d4c:	9305      	str	r3, [sp, #20]
 8002d4e:	197b      	adds	r3, r7, r5
 8002d50:	3306      	adds	r3, #6
 8002d52:	9304      	str	r3, [sp, #16]
 8002d54:	197b      	adds	r3, r7, r5
 8002d56:	3305      	adds	r3, #5
 8002d58:	9303      	str	r3, [sp, #12]
 8002d5a:	197b      	adds	r3, r7, r5
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	197b      	adds	r3, r7, r5
 8002d62:	3303      	adds	r3, #3
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	197b      	adds	r3, r7, r5
 8002d68:	3302      	adds	r3, #2
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	0023      	movs	r3, r4
 8002d6e:	f01b fe05 	bl	801e97c <tiny_sscanf>
 8002d72:	0003      	movs	r3, r0
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d001      	beq.n	8002d7c <AT_DevEUI_set+0x48>
                  &devEui[0], &devEui[1], &devEui[2], &devEui[3],
                  &devEui[4], &devEui[5], &devEui[6], &devEui[7]) != 8)
  {
    return AT_PARAM_ERROR;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e009      	b.n	8002d90 <AT_DevEUI_set+0x5c>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevEUI(devEui))
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	0018      	movs	r0, r3
 8002d82:	f00b fd71 	bl	800e868 <LmHandlerSetDevEUI>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d001      	beq.n	8002d8e <AT_DevEUI_set+0x5a>
  {
    return AT_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <AT_DevEUI_set+0x5c>
  }

  return AT_OK;
 8002d8e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevEUI_set_2 */

  /* USER CODE END AT_DevEUI_set_2 */
}
 8002d90:	0018      	movs	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b004      	add	sp, #16
 8002d96:	bdb0      	pop	{r4, r5, r7, pc}
 8002d98:	0801f1e8 	.word	0x0801f1e8

08002d9c <AT_JoinEUI_get>:

ATEerror_t AT_JoinEUI_get(const char *param)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinEUI_get_1 */

  /* USER CODE END AT_JoinEUI_get_1 */
  uint8_t appEUI[8];
  if (LmHandlerGetAppEUI(appEUI) != LORAMAC_HANDLER_SUCCESS)
 8002da4:	2308      	movs	r3, #8
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	0018      	movs	r0, r3
 8002daa:	f00b fd87 	bl	800e8bc <LmHandlerGetAppEUI>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <AT_JoinEUI_get+0x1a>
  {
    return AT_PARAM_ERROR;
 8002db2:	2302      	movs	r3, #2
 8002db4:	e005      	b.n	8002dc2 <AT_JoinEUI_get+0x26>
  }

  print_8_02x(appEUI);
 8002db6:	2308      	movs	r3, #8
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f001 fa64 	bl	8004288 <print_8_02x>
  return AT_OK;
 8002dc0:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinEUI_get_2 */

  /* USER CODE END AT_JoinEUI_get_2 */
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b004      	add	sp, #16
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <AT_JoinEUI_set>:

ATEerror_t AT_JoinEUI_set(const char *param)
{
 8002dcc:	b5b0      	push	{r4, r5, r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af06      	add	r7, sp, #24
 8002dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinEUI_set_1 */

  /* USER CODE END AT_JoinEUI_set_1 */
  uint8_t JoinEui[8];
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8002dd4:	2508      	movs	r5, #8
 8002dd6:	197b      	adds	r3, r7, r5
 8002dd8:	1c5c      	adds	r4, r3, #1
 8002dda:	197a      	adds	r2, r7, r5
 8002ddc:	4914      	ldr	r1, [pc, #80]	; (8002e30 <AT_JoinEUI_set+0x64>)
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	197b      	adds	r3, r7, r5
 8002de2:	3307      	adds	r3, #7
 8002de4:	9305      	str	r3, [sp, #20]
 8002de6:	197b      	adds	r3, r7, r5
 8002de8:	3306      	adds	r3, #6
 8002dea:	9304      	str	r3, [sp, #16]
 8002dec:	197b      	adds	r3, r7, r5
 8002dee:	3305      	adds	r3, #5
 8002df0:	9303      	str	r3, [sp, #12]
 8002df2:	197b      	adds	r3, r7, r5
 8002df4:	3304      	adds	r3, #4
 8002df6:	9302      	str	r3, [sp, #8]
 8002df8:	197b      	adds	r3, r7, r5
 8002dfa:	3303      	adds	r3, #3
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	197b      	adds	r3, r7, r5
 8002e00:	3302      	adds	r3, #2
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	0023      	movs	r3, r4
 8002e06:	f01b fdb9 	bl	801e97c <tiny_sscanf>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d001      	beq.n	8002e14 <AT_JoinEUI_set+0x48>
                  &JoinEui[0], &JoinEui[1], &JoinEui[2], &JoinEui[3],
                  &JoinEui[4], &JoinEui[5], &JoinEui[6], &JoinEui[7]) != 8)
  {
    return AT_PARAM_ERROR;
 8002e10:	2302      	movs	r3, #2
 8002e12:	e009      	b.n	8002e28 <AT_JoinEUI_set+0x5c>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppEUI(JoinEui))
 8002e14:	2308      	movs	r3, #8
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f00b fd67 	bl	800e8ec <LmHandlerSetAppEUI>
 8002e1e:	1e03      	subs	r3, r0, #0
 8002e20:	d001      	beq.n	8002e26 <AT_JoinEUI_set+0x5a>
  {
    return AT_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <AT_JoinEUI_set+0x5c>
  }

  return AT_OK;
 8002e26:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinEUI_set_2 */

  /* USER CODE END AT_JoinEUI_set_2 */
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b004      	add	sp, #16
 8002e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e30:	0801f1e8 	.word	0x0801f1e8

08002e34 <AT_DevAddr_get>:

ATEerror_t AT_DevAddr_get(const char *param)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevAddr_get_1 */

  /* USER CODE END AT_DevAddr_get_1 */
  uint32_t devAddr;
  if (LmHandlerGetDevAddr(&devAddr) != LORAMAC_HANDLER_SUCCESS)
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	0018      	movs	r0, r3
 8002e42:	f00b fdaf 	bl	800e9a4 <LmHandlerGetDevAddr>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d001      	beq.n	8002e4e <AT_DevAddr_get+0x1a>
  {
    return AT_PARAM_ERROR;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e004      	b.n	8002e58 <AT_DevAddr_get+0x24>
  }

  print_uint32_as_02x(devAddr);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f001 f9f5 	bl	8004240 <print_uint32_as_02x>
  return AT_OK;
 8002e56:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevAddr_get_2 */

  /* USER CODE END AT_DevAddr_get_2 */
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <AT_DevAddr_set>:

ATEerror_t AT_DevAddr_set(const char *param)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevAddr_set_1 */

  /* USER CODE END AT_DevAddr_set_1 */
  uint32_t devAddr;
  if (sscanf_uint32_as_hhx(param, &devAddr) != 4)
 8002e68:	230c      	movs	r3, #12
 8002e6a:	18fa      	adds	r2, r7, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	0011      	movs	r1, r2
 8002e70:	0018      	movs	r0, r3
 8002e72:	f001 f9c9 	bl	8004208 <sscanf_uint32_as_hhx>
 8002e76:	0003      	movs	r3, r0
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d001      	beq.n	8002e80 <AT_DevAddr_set+0x20>
  {
    return AT_PARAM_ERROR;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e008      	b.n	8002e92 <AT_DevAddr_set+0x32>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevAddr(devAddr))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f00b fda4 	bl	800e9d0 <LmHandlerSetDevAddr>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d001      	beq.n	8002e90 <AT_DevAddr_set+0x30>
  {
    return AT_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <AT_DevAddr_set+0x32>
  }

  return AT_OK;
 8002e90:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevAddr_set_2 */

  /* USER CODE END AT_DevAddr_set_2 */
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b004      	add	sp, #16
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <AT_ADR_get>:

ATEerror_t AT_ADR_get(const char *param)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_ADR_get_1 */

  /* USER CODE END AT_ADR_get_1 */
  bool adrEnable;
  if (LmHandlerGetAdrEnable(&adrEnable) != LORAMAC_HANDLER_SUCCESS)
 8002ea2:	230f      	movs	r3, #15
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f00b fdcc 	bl	800ea44 <LmHandlerGetAdrEnable>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <AT_ADR_get+0x1a>
  {
    return AT_PARAM_ERROR;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e006      	b.n	8002ec2 <AT_ADR_get+0x28>
  }

  print_d(adrEnable);
 8002eb4:	230f      	movs	r3, #15
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f001 fa26 	bl	800430c <print_d>
  return AT_OK;
 8002ec0:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_ADR_get_2 */

  /* USER CODE END AT_ADR_get_2 */
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b004      	add	sp, #16
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <AT_ADR_set>:

ATEerror_t AT_ADR_set(const char *param)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_ADR_set_1 */

  /* USER CODE END AT_ADR_set_1 */
  switch (param[0])
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	3b30      	subs	r3, #48	; 0x30
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d80b      	bhi.n	8002ef4 <AT_ADR_set+0x2a>
  {
    case '0':
    case '1':
      LmHandlerSetAdrEnable(param[0] - '0');
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	3b30      	subs	r3, #48	; 0x30
 8002ee2:	1e5a      	subs	r2, r3, #1
 8002ee4:	4193      	sbcs	r3, r2
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f00b fdc1 	bl	800ea70 <LmHandlerSetAdrEnable>
      break;
 8002eee:	46c0      	nop			; (mov r8, r8)
    default:
      return AT_PARAM_ERROR;
  }

  return AT_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e000      	b.n	8002ef6 <AT_ADR_set+0x2c>
      return AT_PARAM_ERROR;
 8002ef4:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_ADR_set_2 */

  /* USER CODE END AT_ADR_set_2 */
}
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b002      	add	sp, #8
 8002efc:	bd80      	pop	{r7, pc}

08002efe <AT_TransmitPower_get>:

ATEerror_t AT_TransmitPower_get(const char *param)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_TransmitPower_get_1 */

  /* USER CODE END AT_TransmitPower_get_1 */
  int8_t txPower;
  if (LmHandlerGetTxPower(&txPower) != LORAMAC_HANDLER_SUCCESS)
 8002f06:	230f      	movs	r3, #15
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f00b fe4d 	bl	800ebaa <LmHandlerGetTxPower>
 8002f10:	1e03      	subs	r3, r0, #0
 8002f12:	d001      	beq.n	8002f18 <AT_TransmitPower_get+0x1a>
  {
    return AT_PARAM_ERROR;
 8002f14:	2302      	movs	r3, #2
 8002f16:	e007      	b.n	8002f28 <AT_TransmitPower_get+0x2a>
  }

  print_d(txPower);
 8002f18:	230f      	movs	r3, #15
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	0018      	movs	r0, r3
 8002f22:	f001 f9f3 	bl	800430c <print_d>
  return AT_OK;
 8002f26:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_TransmitPower_get_2 */

  /* USER CODE END AT_TransmitPower_get_2 */
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b004      	add	sp, #16
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <AT_TransmitPower_set>:

ATEerror_t AT_TransmitPower_set(const char *param)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_TransmitPower_set_1 */

  /* USER CODE END AT_TransmitPower_set_1 */
  int8_t txPower;
  if (tiny_sscanf(param, "%hhu", &txPower) != 1)
 8002f38:	230f      	movs	r3, #15
 8002f3a:	18fa      	adds	r2, r7, r3
 8002f3c:	490c      	ldr	r1, [pc, #48]	; (8002f70 <AT_TransmitPower_set+0x40>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f01b fd1b 	bl	801e97c <tiny_sscanf>
 8002f46:	0003      	movs	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d001      	beq.n	8002f50 <AT_TransmitPower_set+0x20>
  {
    return AT_PARAM_ERROR;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e00b      	b.n	8002f68 <AT_TransmitPower_set+0x38>
  }

  if (LmHandlerSetTxPower(txPower) != LORAMAC_HANDLER_SUCCESS)
 8002f50:	230f      	movs	r3, #15
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b25b      	sxtb	r3, r3
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f00b fecc 	bl	800ecf6 <LmHandlerSetTxPower>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <AT_TransmitPower_set+0x36>
  {
    return AT_PARAM_ERROR;
 8002f62:	2302      	movs	r3, #2
 8002f64:	e000      	b.n	8002f68 <AT_TransmitPower_set+0x38>
  }

  return AT_OK;
 8002f66:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_TransmitPower_set_2 */

  /* USER CODE END AT_TransmitPower_set_2 */
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b004      	add	sp, #16
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	0801f1e0 	.word	0x0801f1e0

08002f74 <AT_DataRate_get>:

ATEerror_t AT_DataRate_get(const char *param)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DataRate_get_1 */

  /* USER CODE END AT_DataRate_get_1 */
  int8_t txDatarate;
  if (LmHandlerGetTxDatarate(&txDatarate) != LORAMAC_HANDLER_SUCCESS)
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	0018      	movs	r0, r3
 8002f82:	f00b fc19 	bl	800e7b8 <LmHandlerGetTxDatarate>
 8002f86:	1e03      	subs	r3, r0, #0
 8002f88:	d001      	beq.n	8002f8e <AT_DataRate_get+0x1a>
  {
    return AT_PARAM_ERROR;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e007      	b.n	8002f9e <AT_DataRate_get+0x2a>
  }

  print_d(txDatarate);
 8002f8e:	230f      	movs	r3, #15
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b25b      	sxtb	r3, r3
 8002f96:	0018      	movs	r0, r3
 8002f98:	f001 f9b8 	bl	800430c <print_d>
  return AT_OK;
 8002f9c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DataRate_get_2 */

  /* USER CODE END AT_DataRate_get_2 */
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b004      	add	sp, #16
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <AT_DataRate_set>:

ATEerror_t AT_DataRate_set(const char *param)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DataRate_set_1 */

  /* USER CODE END AT_DataRate_set_1 */
  int8_t datarate;

  if (tiny_sscanf(param, "%hhu", &datarate) != 1)
 8002fb0:	230f      	movs	r3, #15
 8002fb2:	18fa      	adds	r2, r7, r3
 8002fb4:	4913      	ldr	r1, [pc, #76]	; (8003004 <AT_DataRate_set+0x5c>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f01b fcdf 	bl	801e97c <tiny_sscanf>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d001      	beq.n	8002fc8 <AT_DataRate_set+0x20>
  {
    return AT_PARAM_ERROR;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e018      	b.n	8002ffa <AT_DataRate_set+0x52>
  }
  if ((datarate < 0) || (datarate > 15))
 8002fc8:	220f      	movs	r2, #15
 8002fca:	18bb      	adds	r3, r7, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db04      	blt.n	8002fde <AT_DataRate_set+0x36>
 8002fd4:	18bb      	adds	r3, r7, r2
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b25b      	sxtb	r3, r3
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	dd01      	ble.n	8002fe2 <AT_DataRate_set+0x3a>
  {
    return AT_PARAM_ERROR;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e00b      	b.n	8002ffa <AT_DataRate_set+0x52>
  }

  if (LmHandlerSetTxDatarate(datarate) != LORAMAC_HANDLER_SUCCESS)
 8002fe2:	230f      	movs	r3, #15
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	0018      	movs	r0, r3
 8002fec:	f00b fd62 	bl	800eab4 <LmHandlerSetTxDatarate>
 8002ff0:	1e03      	subs	r3, r0, #0
 8002ff2:	d001      	beq.n	8002ff8 <AT_DataRate_set+0x50>
  {
    return AT_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <AT_DataRate_set+0x52>
  }

  return AT_OK;
 8002ff8:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DataRate_set_2 */

  /* USER CODE END AT_DataRate_set_2 */
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	0801f1e0 	.word	0x0801f1e0

08003008 <AT_DutyCycle_get>:

ATEerror_t AT_DutyCycle_get(const char *param)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DutyCycle_get_1 */

  /* USER CODE END AT_DutyCycle_get_1 */
  bool dutyCycleEnable;
  if (LmHandlerGetDutyCycleEnable(&dutyCycleEnable) != LORAMAC_HANDLER_SUCCESS)
 8003010:	230f      	movs	r3, #15
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	0018      	movs	r0, r3
 8003016:	f00b fd77 	bl	800eb08 <LmHandlerGetDutyCycleEnable>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d001      	beq.n	8003022 <AT_DutyCycle_get+0x1a>
  {
    return AT_PARAM_ERROR;
 800301e:	2302      	movs	r3, #2
 8003020:	e006      	b.n	8003030 <AT_DutyCycle_get+0x28>
  }

  print_d(dutyCycleEnable);
 8003022:	230f      	movs	r3, #15
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	0018      	movs	r0, r3
 800302a:	f001 f96f 	bl	800430c <print_d>
  return AT_OK;
 800302e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DutyCycle_get_2 */

  /* USER CODE END AT_DutyCycle_get_2 */
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}

08003038 <AT_DutyCycle_set>:

ATEerror_t AT_DutyCycle_set(const char *param)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DutyCycle_set_1 */

  /* USER CODE END AT_DutyCycle_set_1 */
  switch (param[0])
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	3b30      	subs	r3, #48	; 0x30
 8003046:	2b01      	cmp	r3, #1
 8003048:	d80b      	bhi.n	8003062 <AT_DutyCycle_set+0x2a>
  {
    case '0':
    case '1':
      LmHandlerSetDutyCycleEnable(param[0] - '0');
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	3b30      	subs	r3, #48	; 0x30
 8003050:	1e5a      	subs	r2, r3, #1
 8003052:	4193      	sbcs	r3, r2
 8003054:	b2db      	uxtb	r3, r3
 8003056:	0018      	movs	r0, r3
 8003058:	f00b fd6c 	bl	800eb34 <LmHandlerSetDutyCycleEnable>
      break;
 800305c:	46c0      	nop			; (mov r8, r8)
    default:
      return AT_PARAM_ERROR;
  }

  return AT_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <AT_DutyCycle_set+0x2c>
      return AT_PARAM_ERROR;
 8003062:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_DutyCycle_set_2 */

  /* USER CODE END AT_DutyCycle_set_2 */
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <AT_Rx2Frequency_get>:

ATEerror_t AT_Rx2Frequency_get(const char *param)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2Frequency_get_1 */

  /* USER CODE END AT_Rx2Frequency_get_1 */
  RxChannelParams_t rx2Params;
  LmHandlerGetRX2Params(&rx2Params);
 8003074:	2408      	movs	r4, #8
 8003076:	193b      	adds	r3, r7, r4
 8003078:	0018      	movs	r0, r3
 800307a:	f00b fd71 	bl	800eb60 <LmHandlerGetRX2Params>
  print_d(rx2Params.Frequency);
 800307e:	193b      	adds	r3, r7, r4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0018      	movs	r0, r3
 8003084:	f001 f942 	bl	800430c <print_d>
  return AT_OK;
 8003088:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Frequency_get_2 */

  /* USER CODE END AT_Rx2Frequency_get_2 */
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b005      	add	sp, #20
 8003090:	bd90      	pop	{r4, r7, pc}

08003092 <AT_Rx2DataRate_get>:

ATEerror_t AT_Rx2DataRate_get(const char *param)
{
 8003092:	b590      	push	{r4, r7, lr}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2DataRate_get_1 */

  /* USER CODE END AT_Rx2DataRate_get_1 */
  RxChannelParams_t rx2Params;
  LmHandlerGetRX2Params(&rx2Params);
 800309a:	2408      	movs	r4, #8
 800309c:	193b      	adds	r3, r7, r4
 800309e:	0018      	movs	r0, r3
 80030a0:	f00b fd5e 	bl	800eb60 <LmHandlerGetRX2Params>
  print_d(rx2Params.Datarate);
 80030a4:	193b      	adds	r3, r7, r4
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f001 f92f 	bl	800430c <print_d>
  return AT_OK;
 80030ae:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2DataRate_get_2 */

  /* USER CODE END AT_Rx2DataRate_get_2 */
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b005      	add	sp, #20
 80030b6:	bd90      	pop	{r4, r7, pc}

080030b8 <AT_Rx1Delay_get>:

ATEerror_t AT_Rx1Delay_get(const char *param)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx1Delay_get_1 */

  /* USER CODE END AT_Rx1Delay_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80030c0:	230c      	movs	r3, #12
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	0018      	movs	r0, r3
 80030c6:	f00b fd92 	bl	800ebee <LmHandlerGetRx1Delay>
 80030ca:	1e03      	subs	r3, r0, #0
 80030cc:	d001      	beq.n	80030d2 <AT_Rx1Delay_get+0x1a>
  {
    return AT_PARAM_ERROR;
 80030ce:	2302      	movs	r3, #2
 80030d0:	e004      	b.n	80030dc <AT_Rx1Delay_get+0x24>
  }

  print_u(rxDelay);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f001 f92d 	bl	8004334 <print_u>
  return AT_OK;
 80030da:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx1Delay_get_2 */

  /* USER CODE END AT_Rx1Delay_get_2 */
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b004      	add	sp, #16
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <AT_Rx2Delay_get>:

ATEerror_t AT_Rx2Delay_get(const char *param)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2Delay_get_1 */

  /* USER CODE END AT_Rx2Delay_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80030ec:	230c      	movs	r3, #12
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	0018      	movs	r0, r3
 80030f2:	f00b fd9d 	bl	800ec30 <LmHandlerGetRx2Delay>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d001      	beq.n	80030fe <AT_Rx2Delay_get+0x1a>
  {
    return AT_PARAM_ERROR;
 80030fa:	2302      	movs	r3, #2
 80030fc:	e004      	b.n	8003108 <AT_Rx2Delay_get+0x24>
  }

  print_u(rxDelay);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0018      	movs	r0, r3
 8003102:	f001 f917 	bl	8004334 <print_u>
  return AT_OK;
 8003106:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Delay_get_2 */

  /* USER CODE END AT_Rx2Delay_get_2 */
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}

08003110 <AT_JoinAcceptDelay1_get>:

ATEerror_t AT_JoinAcceptDelay1_get(const char *param)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay1_get_1 */

  /* USER CODE END AT_JoinAcceptDelay1_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetJoinRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8003118:	230c      	movs	r3, #12
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	0018      	movs	r0, r3
 800311e:	f00b fda8 	bl	800ec72 <LmHandlerGetJoinRx1Delay>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d001      	beq.n	800312a <AT_JoinAcceptDelay1_get+0x1a>
  {
    return AT_PARAM_ERROR;
 8003126:	2302      	movs	r3, #2
 8003128:	e004      	b.n	8003134 <AT_JoinAcceptDelay1_get+0x24>
  }

  print_u(rxDelay);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	0018      	movs	r0, r3
 800312e:	f001 f901 	bl	8004334 <print_u>
  return AT_OK;
 8003132:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay1_get_2 */

  /* USER CODE END AT_JoinAcceptDelay1_get_2 */
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b004      	add	sp, #16
 800313a:	bd80      	pop	{r7, pc}

0800313c <AT_JoinAcceptDelay2_get>:

ATEerror_t AT_JoinAcceptDelay2_get(const char *param)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay2_get_1 */

  /* USER CODE END AT_JoinAcceptDelay2_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetJoinRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8003144:	230c      	movs	r3, #12
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	0018      	movs	r0, r3
 800314a:	f00b fdb3 	bl	800ecb4 <LmHandlerGetJoinRx2Delay>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d001      	beq.n	8003156 <AT_JoinAcceptDelay2_get+0x1a>
  {
    return AT_PARAM_ERROR;
 8003152:	2302      	movs	r3, #2
 8003154:	e004      	b.n	8003160 <AT_JoinAcceptDelay2_get+0x24>
  }

  print_u(rxDelay);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	0018      	movs	r0, r3
 800315a:	f001 f8eb 	bl	8004334 <print_u>
  return AT_OK;
 800315e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay2_get_2 */

  /* USER CODE END AT_JoinAcceptDelay2_get_2 */
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bd80      	pop	{r7, pc}

08003168 <AT_Rx2Frequency_set>:

ATEerror_t AT_Rx2Frequency_set(const char *param)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* USER CODE END AT_Rx2Frequency_set_1 */
  RxChannelParams_t rx2Params;

  /* Get the current configuration of RX2 */
  LmHandlerGetRX2Params(&rx2Params);
 8003170:	2408      	movs	r4, #8
 8003172:	193b      	adds	r3, r7, r4
 8003174:	0018      	movs	r0, r3
 8003176:	f00b fcf3 	bl	800eb60 <LmHandlerGetRX2Params>

  /* Update the frequency with scanf */
  if (tiny_sscanf(param, "%lu", &(rx2Params.Frequency)) != 1)
 800317a:	193a      	adds	r2, r7, r4
 800317c:	490b      	ldr	r1, [pc, #44]	; (80031ac <AT_Rx2Frequency_set+0x44>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f01b fbfb 	bl	801e97c <tiny_sscanf>
 8003186:	0003      	movs	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d001      	beq.n	8003190 <AT_Rx2Frequency_set+0x28>
  {
    return AT_PARAM_ERROR;
 800318c:	2302      	movs	r3, #2
 800318e:	e009      	b.n	80031a4 <AT_Rx2Frequency_set+0x3c>
  }
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 8003190:	2308      	movs	r3, #8
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	0018      	movs	r0, r3
 8003196:	f00b fdca 	bl	800ed2e <LmHandlerSetRX2Params>
 800319a:	1e03      	subs	r3, r0, #0
 800319c:	d001      	beq.n	80031a2 <AT_Rx2Frequency_set+0x3a>
  {
    return AT_PARAM_ERROR;
 800319e:	2302      	movs	r3, #2
 80031a0:	e000      	b.n	80031a4 <AT_Rx2Frequency_set+0x3c>
  }

  return AT_OK;
 80031a2:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Frequency_set_2 */

  /* USER CODE END AT_Rx2Frequency_set_2 */
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b005      	add	sp, #20
 80031aa:	bd90      	pop	{r4, r7, pc}
 80031ac:	0801f210 	.word	0x0801f210

080031b0 <AT_Rx2DataRate_set>:

ATEerror_t AT_Rx2DataRate_set(const char *param)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* USER CODE END AT_Rx2DataRate_set_1 */
  RxChannelParams_t rx2Params;

  /* Get the current configuration of RX2 */
  LmHandlerGetRX2Params(&rx2Params);
 80031b8:	2408      	movs	r4, #8
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	0018      	movs	r0, r3
 80031be:	f00b fccf 	bl	800eb60 <LmHandlerGetRX2Params>

  /* Update the Datarate with scanf */
  if (tiny_sscanf(param, "%hhu", &(rx2Params.Datarate)) != 1)
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	1d1a      	adds	r2, r3, #4
 80031c6:	490f      	ldr	r1, [pc, #60]	; (8003204 <AT_Rx2DataRate_set+0x54>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f01b fbd6 	bl	801e97c <tiny_sscanf>
 80031d0:	0003      	movs	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <AT_Rx2DataRate_set+0x2a>
  {
    return AT_PARAM_ERROR;
 80031d6:	2302      	movs	r3, #2
 80031d8:	e010      	b.n	80031fc <AT_Rx2DataRate_set+0x4c>
  }
  else if (rx2Params.Datarate > 15)
 80031da:	2308      	movs	r3, #8
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	791b      	ldrb	r3, [r3, #4]
 80031e0:	2b0f      	cmp	r3, #15
 80031e2:	d901      	bls.n	80031e8 <AT_Rx2DataRate_set+0x38>
  {
    return AT_PARAM_ERROR;
 80031e4:	2302      	movs	r3, #2
 80031e6:	e009      	b.n	80031fc <AT_Rx2DataRate_set+0x4c>
  }
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 80031e8:	2308      	movs	r3, #8
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	0018      	movs	r0, r3
 80031ee:	f00b fd9e 	bl	800ed2e <LmHandlerSetRX2Params>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d001      	beq.n	80031fa <AT_Rx2DataRate_set+0x4a>
  {
    return AT_PARAM_ERROR;
 80031f6:	2302      	movs	r3, #2
 80031f8:	e000      	b.n	80031fc <AT_Rx2DataRate_set+0x4c>
  }

  return AT_OK;
 80031fa:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2DataRate_set_2 */

  /* USER CODE END AT_Rx2DataRate_set_2 */
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b005      	add	sp, #20
 8003202:	bd90      	pop	{r4, r7, pc}
 8003204:	0801f1e0 	.word	0x0801f1e0

08003208 <AT_Rx1Delay_set>:

ATEerror_t AT_Rx1Delay_set(const char *param)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx1Delay_set_1 */

  /* USER CODE END AT_Rx1Delay_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8003210:	230c      	movs	r3, #12
 8003212:	18fa      	adds	r2, r7, r3
 8003214:	490b      	ldr	r1, [pc, #44]	; (8003244 <AT_Rx1Delay_set+0x3c>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f01b fbaf 	bl	801e97c <tiny_sscanf>
 800321e:	0003      	movs	r3, r0
 8003220:	2b01      	cmp	r3, #1
 8003222:	d001      	beq.n	8003228 <AT_Rx1Delay_set+0x20>
  {
    return AT_PARAM_ERROR;
 8003224:	2302      	movs	r3, #2
 8003226:	e008      	b.n	800323a <AT_Rx1Delay_set+0x32>
  }
  else if (LmHandlerSetRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	0018      	movs	r0, r3
 800322c:	f00b fd9d 	bl	800ed6a <LmHandlerSetRx1Delay>
 8003230:	1e03      	subs	r3, r0, #0
 8003232:	d001      	beq.n	8003238 <AT_Rx1Delay_set+0x30>
  {
    return AT_PARAM_ERROR;
 8003234:	2302      	movs	r3, #2
 8003236:	e000      	b.n	800323a <AT_Rx1Delay_set+0x32>
  }

  return AT_OK;
 8003238:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx1Delay_set_2 */

  /* USER CODE END AT_Rx1Delay_set_2 */
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b004      	add	sp, #16
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	0801f210 	.word	0x0801f210

08003248 <AT_Rx2Delay_set>:

ATEerror_t AT_Rx2Delay_set(const char *param)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2Delay_set_1 */

  /* USER CODE END AT_Rx2Delay_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8003250:	230c      	movs	r3, #12
 8003252:	18fa      	adds	r2, r7, r3
 8003254:	490b      	ldr	r1, [pc, #44]	; (8003284 <AT_Rx2Delay_set+0x3c>)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f01b fb8f 	bl	801e97c <tiny_sscanf>
 800325e:	0003      	movs	r3, r0
 8003260:	2b01      	cmp	r3, #1
 8003262:	d001      	beq.n	8003268 <AT_Rx2Delay_set+0x20>
  {
    return AT_PARAM_ERROR;
 8003264:	2302      	movs	r3, #2
 8003266:	e008      	b.n	800327a <AT_Rx2Delay_set+0x32>
  }
  else if (LmHandlerSetRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	0018      	movs	r0, r3
 800326c:	f00b fd96 	bl	800ed9c <LmHandlerSetRx2Delay>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d001      	beq.n	8003278 <AT_Rx2Delay_set+0x30>
  {
    return AT_PARAM_ERROR;
 8003274:	2302      	movs	r3, #2
 8003276:	e000      	b.n	800327a <AT_Rx2Delay_set+0x32>
  }

  return AT_OK;
 8003278:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Delay_set_2 */

  /* USER CODE END AT_Rx2Delay_set_2 */
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	0801f210 	.word	0x0801f210

08003288 <AT_JoinAcceptDelay1_set>:

ATEerror_t AT_JoinAcceptDelay1_set(const char *param)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay1_set_1 */

  /* USER CODE END AT_JoinAcceptDelay1_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8003290:	230c      	movs	r3, #12
 8003292:	18fa      	adds	r2, r7, r3
 8003294:	490b      	ldr	r1, [pc, #44]	; (80032c4 <AT_JoinAcceptDelay1_set+0x3c>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0018      	movs	r0, r3
 800329a:	f01b fb6f 	bl	801e97c <tiny_sscanf>
 800329e:	0003      	movs	r3, r0
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d001      	beq.n	80032a8 <AT_JoinAcceptDelay1_set+0x20>
  {
    return AT_PARAM_ERROR;
 80032a4:	2302      	movs	r3, #2
 80032a6:	e008      	b.n	80032ba <AT_JoinAcceptDelay1_set+0x32>
  }
  else if (LmHandlerSetJoinRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	0018      	movs	r0, r3
 80032ac:	f00b fd8f 	bl	800edce <LmHandlerSetJoinRx1Delay>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d001      	beq.n	80032b8 <AT_JoinAcceptDelay1_set+0x30>
  {
    return AT_PARAM_ERROR;
 80032b4:	2302      	movs	r3, #2
 80032b6:	e000      	b.n	80032ba <AT_JoinAcceptDelay1_set+0x32>
  }

  return AT_OK;
 80032b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay1_set_2 */

  /* USER CODE END AT_JoinAcceptDelay1_set_2 */
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	0801f210 	.word	0x0801f210

080032c8 <AT_JoinAcceptDelay2_set>:

ATEerror_t AT_JoinAcceptDelay2_set(const char *param)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay2_set_1 */

  /* USER CODE END AT_JoinAcceptDelay2_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 80032d0:	230c      	movs	r3, #12
 80032d2:	18fa      	adds	r2, r7, r3
 80032d4:	490b      	ldr	r1, [pc, #44]	; (8003304 <AT_JoinAcceptDelay2_set+0x3c>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f01b fb4f 	bl	801e97c <tiny_sscanf>
 80032de:	0003      	movs	r3, r0
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d001      	beq.n	80032e8 <AT_JoinAcceptDelay2_set+0x20>
  {
    return AT_PARAM_ERROR;
 80032e4:	2302      	movs	r3, #2
 80032e6:	e008      	b.n	80032fa <AT_JoinAcceptDelay2_set+0x32>
  }
  else if (LmHandlerSetJoinRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f00b fd88 	bl	800ee00 <LmHandlerSetJoinRx2Delay>
 80032f0:	1e03      	subs	r3, r0, #0
 80032f2:	d001      	beq.n	80032f8 <AT_JoinAcceptDelay2_set+0x30>
  {
    return AT_PARAM_ERROR;
 80032f4:	2302      	movs	r3, #2
 80032f6:	e000      	b.n	80032fa <AT_JoinAcceptDelay2_set+0x32>
  }

  return AT_OK;
 80032f8:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay2_set_2 */

  /* USER CODE END AT_JoinAcceptDelay2_set_2 */
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b004      	add	sp, #16
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	0801f210 	.word	0x0801f210

08003308 <AT_NetworkID_get>:

ATEerror_t AT_NetworkID_get(const char *param)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NetworkID_get_1 */

  /* USER CODE END AT_NetworkID_get_1 */
  uint32_t networkId;
  if (LmHandlerGetNetworkID(&networkId) != LORAMAC_HANDLER_SUCCESS)
 8003310:	230c      	movs	r3, #12
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	0018      	movs	r0, r3
 8003316:	f00b fb13 	bl	800e940 <LmHandlerGetNetworkID>
 800331a:	1e03      	subs	r3, r0, #0
 800331c:	d001      	beq.n	8003322 <AT_NetworkID_get+0x1a>
  {
    return AT_PARAM_ERROR;
 800331e:	2302      	movs	r3, #2
 8003320:	e004      	b.n	800332c <AT_NetworkID_get+0x24>
  }

  print_uint32_as_02x(networkId);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	0018      	movs	r0, r3
 8003326:	f000 ff8b 	bl	8004240 <print_uint32_as_02x>
  return AT_OK;
 800332a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NetworkID_get_2 */

  /* USER CODE END AT_NetworkID_get_2 */
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b004      	add	sp, #16
 8003332:	bd80      	pop	{r7, pc}

08003334 <AT_NetworkID_set>:

ATEerror_t AT_NetworkID_set(const char *param)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NetworkID_set_1 */

  /* USER CODE END AT_NetworkID_set_1 */
  uint32_t networkId;
  if (sscanf_uint32_as_hhx(param, &networkId) != 4)
 800333c:	230c      	movs	r3, #12
 800333e:	18fa      	adds	r2, r7, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0011      	movs	r1, r2
 8003344:	0018      	movs	r0, r3
 8003346:	f000 ff5f 	bl	8004208 <sscanf_uint32_as_hhx>
 800334a:	0003      	movs	r3, r0
 800334c:	2b04      	cmp	r3, #4
 800334e:	d001      	beq.n	8003354 <AT_NetworkID_set+0x20>
  {
    return AT_PARAM_ERROR;
 8003350:	2302      	movs	r3, #2
 8003352:	e004      	b.n	800335e <AT_NetworkID_set+0x2a>
  }

  LmHandlerSetNetworkID(networkId);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	0018      	movs	r0, r3
 8003358:	f00b fb08 	bl	800e96c <LmHandlerSetNetworkID>
  return AT_OK;
 800335c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NetworkID_set_2 */

  /* USER CODE END AT_NetworkID_set_2 */
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b004      	add	sp, #16
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <AT_DeviceClass_get>:

ATEerror_t AT_DeviceClass_get(const char *param)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af02      	add	r7, sp, #8
 800336e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DeviceClass_get_1 */

  /* USER CODE END AT_DeviceClass_get_1 */
  DeviceClass_t currentClass;
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 8003370:	f001 fb0c 	bl	800498c <LoraInfo_GetPtr>
 8003374:	0003      	movs	r3, r0
 8003376:	60fb      	str	r3, [r7, #12]
  if (loraInfo == NULL)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <AT_DeviceClass_get+0x1a>
  {
    return AT_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e05f      	b.n	8003442 <AT_DeviceClass_get+0xda>
  }

  if (LmHandlerGetCurrentClass(&currentClass) != LORAMAC_HANDLER_SUCCESS)
 8003382:	230b      	movs	r3, #11
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	0018      	movs	r0, r3
 8003388:	f00b f9f4 	bl	800e774 <LmHandlerGetCurrentClass>
 800338c:	1e03      	subs	r3, r0, #0
 800338e:	d001      	beq.n	8003394 <AT_DeviceClass_get+0x2c>
  {
    return AT_PARAM_ERROR;
 8003390:	2302      	movs	r3, #2
 8003392:	e056      	b.n	8003442 <AT_DeviceClass_get+0xda>
  }

  if ((loraInfo->ClassB == 1) && (ClassBEnableRequest == true) && (currentClass == CLASS_A))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d145      	bne.n	8003428 <AT_DeviceClass_get+0xc0>
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <AT_DeviceClass_get+0xe4>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d041      	beq.n	8003428 <AT_DeviceClass_get+0xc0>
 80033a4:	230b      	movs	r3, #11
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d13c      	bne.n	8003428 <AT_DeviceClass_get+0xc0>
  {
    BeaconState_t beaconState;

    if (LmHandlerGetBeaconState(&beaconState) != LORAMAC_HANDLER_SUCCESS)
 80033ae:	230a      	movs	r3, #10
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	0018      	movs	r0, r3
 80033b4:	f00b fd53 	bl	800ee5e <LmHandlerGetBeaconState>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <AT_DeviceClass_get+0x58>
    {
      return AT_PARAM_ERROR;
 80033bc:	2302      	movs	r3, #2
 80033be:	e040      	b.n	8003442 <AT_DeviceClass_get+0xda>
    }

    if ((beaconState == BEACON_STATE_ACQUISITION) ||
 80033c0:	220a      	movs	r2, #10
 80033c2:	18bb      	adds	r3, r7, r2
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <AT_DeviceClass_get+0x72>
        (beaconState == BEACON_STATE_ACQUISITION_BY_TIME) ||
 80033ca:	18bb      	adds	r3, r7, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
    if ((beaconState == BEACON_STATE_ACQUISITION) ||
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d003      	beq.n	80033da <AT_DeviceClass_get+0x72>
        (beaconState == BEACON_STATE_REACQUISITION)) /*Beacon_Searching on Class B request*/
 80033d2:	18bb      	adds	r3, r7, r2
 80033d4:	781b      	ldrb	r3, [r3, #0]
        (beaconState == BEACON_STATE_ACQUISITION_BY_TIME) ||
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d106      	bne.n	80033e8 <AT_DeviceClass_get+0x80>
    {
      AT_PRINTF("B,S0\r\n");
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <AT_DeviceClass_get+0xe8>)
 80033dc:	2200      	movs	r2, #0
 80033de:	2100      	movs	r1, #0
 80033e0:	2000      	movs	r0, #0
 80033e2:	f019 f987 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 80033e6:	e01e      	b.n	8003426 <AT_DeviceClass_get+0xbe>
    }
    else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 80033e8:	220a      	movs	r2, #10
 80033ea:	18bb      	adds	r3, r7, r2
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d00b      	beq.n	800340a <AT_DeviceClass_get+0xa2>
             (beaconState == BEACON_STATE_IDLE)   ||
 80033f2:	18bb      	adds	r3, r7, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
    else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 80033f6:	2b07      	cmp	r3, #7
 80033f8:	d007      	beq.n	800340a <AT_DeviceClass_get+0xa2>
             (beaconState == BEACON_STATE_GUARD)  ||
 80033fa:	18bb      	adds	r3, r7, r2
 80033fc:	781b      	ldrb	r3, [r3, #0]
             (beaconState == BEACON_STATE_IDLE)   ||
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d003      	beq.n	800340a <AT_DeviceClass_get+0xa2>
             (beaconState == BEACON_STATE_RX))
 8003402:	18bb      	adds	r3, r7, r2
 8003404:	781b      	ldrb	r3, [r3, #0]
             (beaconState == BEACON_STATE_GUARD)  ||
 8003406:	2b09      	cmp	r3, #9
 8003408:	d106      	bne.n	8003418 <AT_DeviceClass_get+0xb0>
    {
      AT_PRINTF("B,S1\r\n");
 800340a:	4b12      	ldr	r3, [pc, #72]	; (8003454 <AT_DeviceClass_get+0xec>)
 800340c:	2200      	movs	r2, #0
 800340e:	2100      	movs	r1, #0
 8003410:	2000      	movs	r0, #0
 8003412:	f019 f96f 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 8003416:	e006      	b.n	8003426 <AT_DeviceClass_get+0xbe>
    }
    else
    {
      AT_PRINTF("B,S2\r\n");
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <AT_DeviceClass_get+0xf0>)
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	2000      	movs	r0, #0
 8003420:	f019 f968 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  {
 8003424:	e00c      	b.n	8003440 <AT_DeviceClass_get+0xd8>
 8003426:	e00b      	b.n	8003440 <AT_DeviceClass_get+0xd8>
    }
  }
  else /* we are now either in Class B enable or Class C enable*/
  {
    AT_PRINTF("%c\r\n", 'A' + currentClass);
 8003428:	230b      	movs	r3, #11
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	3341      	adds	r3, #65	; 0x41
 8003430:	4a0a      	ldr	r2, [pc, #40]	; (800345c <AT_DeviceClass_get+0xf4>)
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	0013      	movs	r3, r2
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	2000      	movs	r0, #0
 800343c:	f019 f95a 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  }

  return AT_OK;
 8003440:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DeviceClass_get_2 */

  /* USER CODE END AT_DeviceClass_get_2 */
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b004      	add	sp, #16
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	20000250 	.word	0x20000250
 8003450:	0801f214 	.word	0x0801f214
 8003454:	0801f21c 	.word	0x0801f21c
 8003458:	0801f224 	.word	0x0801f224
 800345c:	0801f22c 	.word	0x0801f22c

08003460 <AT_DeviceClass_set>:

ATEerror_t AT_DeviceClass_set(const char *param)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DeviceClass_set_1 */

  /* USER CODE END AT_DeviceClass_set_1 */
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8003468:	230f      	movs	r3, #15
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 8003470:	f001 fa8c 	bl	800498c <LoraInfo_GetPtr>
 8003474:	0003      	movs	r3, r0
 8003476:	60bb      	str	r3, [r7, #8]
  if (loraInfo == NULL)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <AT_DeviceClass_set+0x22>
  {
    return AT_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e044      	b.n	800350c <AT_DeviceClass_set+0xac>
  }

  switch (param[0])
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b43      	cmp	r3, #67	; 0x43
 8003488:	d025      	beq.n	80034d6 <AT_DeviceClass_set+0x76>
 800348a:	dc2c      	bgt.n	80034e6 <AT_DeviceClass_set+0x86>
 800348c:	2b41      	cmp	r3, #65	; 0x41
 800348e:	d002      	beq.n	8003496 <AT_DeviceClass_set+0x36>
 8003490:	2b42      	cmp	r3, #66	; 0x42
 8003492:	d00f      	beq.n	80034b4 <AT_DeviceClass_set+0x54>
 8003494:	e027      	b.n	80034e6 <AT_DeviceClass_set+0x86>
  {
    case 'A':
      if (loraInfo->ClassB == 1)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <AT_DeviceClass_set+0x44>
      {
        ClassBEnableRequest = false;
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <AT_DeviceClass_set+0xb4>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
      }
      errorStatus = LmHandlerRequestClass(CLASS_A);
 80034a4:	230f      	movs	r3, #15
 80034a6:	18fc      	adds	r4, r7, r3
 80034a8:	2000      	movs	r0, #0
 80034aa:	f00b f883 	bl	800e5b4 <LmHandlerRequestClass>
 80034ae:	0003      	movs	r3, r0
 80034b0:	7023      	strb	r3, [r4, #0]
      break;
 80034b2:	e01a      	b.n	80034ea <AT_DeviceClass_set+0x8a>
    case 'B':
      if (loraInfo->ClassB == 1)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10a      	bne.n	80034d2 <AT_DeviceClass_set+0x72>
      {
        ClassBEnableRequest = true;
 80034bc:	4b15      	ldr	r3, [pc, #84]	; (8003514 <AT_DeviceClass_set+0xb4>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
        errorStatus = LmHandlerRequestClass(CLASS_B);  /*Class B AT cmd switch Class B not supported cf.[UM2073]*/
 80034c2:	230f      	movs	r3, #15
 80034c4:	18fc      	adds	r4, r7, r3
 80034c6:	2001      	movs	r0, #1
 80034c8:	f00b f874 	bl	800e5b4 <LmHandlerRequestClass>
 80034cc:	0003      	movs	r3, r0
 80034ce:	7023      	strb	r3, [r4, #0]
      }
      else
      {
        return AT_NO_CLASS_B_ENABLE;
      }
      break;
 80034d0:	e00b      	b.n	80034ea <AT_DeviceClass_set+0x8a>
        return AT_NO_CLASS_B_ENABLE;
 80034d2:	2307      	movs	r3, #7
 80034d4:	e01a      	b.n	800350c <AT_DeviceClass_set+0xac>
    case 'C':
      errorStatus = LmHandlerRequestClass(CLASS_C);
 80034d6:	230f      	movs	r3, #15
 80034d8:	18fc      	adds	r4, r7, r3
 80034da:	2002      	movs	r0, #2
 80034dc:	f00b f86a 	bl	800e5b4 <LmHandlerRequestClass>
 80034e0:	0003      	movs	r3, r0
 80034e2:	7023      	strb	r3, [r4, #0]
      break;
 80034e4:	e001      	b.n	80034ea <AT_DeviceClass_set+0x8a>
    default:
      return AT_PARAM_ERROR;
 80034e6:	2302      	movs	r3, #2
 80034e8:	e010      	b.n	800350c <AT_DeviceClass_set+0xac>
  }

  if (errorStatus == LORAMAC_HANDLER_NO_NETWORK_JOINED)
 80034ea:	230f      	movs	r3, #15
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	3303      	adds	r3, #3
 80034f4:	d101      	bne.n	80034fa <AT_DeviceClass_set+0x9a>
  {
    return AT_NO_NET_JOINED;
 80034f6:	2305      	movs	r3, #5
 80034f8:	e008      	b.n	800350c <AT_DeviceClass_set+0xac>
  }
  else if (errorStatus != LORAMAC_HANDLER_SUCCESS)
 80034fa:	230f      	movs	r3, #15
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	b25b      	sxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <AT_DeviceClass_set+0xaa>
  {
    return AT_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <AT_DeviceClass_set+0xac>
  }

  return AT_OK;
 800350a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DeviceClass_set_2 */

  /* USER CODE END AT_DeviceClass_set_2 */
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b005      	add	sp, #20
 8003512:	bd90      	pop	{r4, r7, pc}
 8003514:	20000250 	.word	0x20000250

08003518 <AT_PingSlot_get>:

ATEerror_t AT_PingSlot_get(const char *param)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_PingSlot_get_1 */

  /* USER CODE END AT_PingSlot_get_1 */
  uint8_t periodicity;

  if (LmHandlerGetPingPeriodicity(&periodicity) != LORAMAC_HANDLER_SUCCESS)
 8003520:	230f      	movs	r3, #15
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	0018      	movs	r0, r3
 8003526:	f00b fc84 	bl	800ee32 <LmHandlerGetPingPeriodicity>
 800352a:	1e03      	subs	r3, r0, #0
 800352c:	d001      	beq.n	8003532 <AT_PingSlot_get+0x1a>
  {
    return AT_PARAM_ERROR;
 800352e:	2302      	movs	r3, #2
 8003530:	e006      	b.n	8003540 <AT_PingSlot_get+0x28>
  }

  print_d(periodicity);
 8003532:	230f      	movs	r3, #15
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	0018      	movs	r0, r3
 800353a:	f000 fee7 	bl	800430c <print_d>
  return AT_OK;
 800353e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_PingSlot_get_2 */

  /* USER CODE END AT_PingSlot_get_2 */
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}

08003548 <AT_PingSlot_set>:

ATEerror_t AT_PingSlot_set(const char *param)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_PingSlot_set_1 */

  /* USER CODE END AT_PingSlot_set_1 */
  uint8_t periodicity;

  if (tiny_sscanf(param, "%hhu", &periodicity) != 1)
 8003550:	230f      	movs	r3, #15
 8003552:	18fa      	adds	r2, r7, r3
 8003554:	490f      	ldr	r1, [pc, #60]	; (8003594 <AT_PingSlot_set+0x4c>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f01b fa0f 	bl	801e97c <tiny_sscanf>
 800355e:	0003      	movs	r3, r0
 8003560:	2b01      	cmp	r3, #1
 8003562:	d001      	beq.n	8003568 <AT_PingSlot_set+0x20>
  {
    return AT_PARAM_ERROR;
 8003564:	2302      	movs	r3, #2
 8003566:	e011      	b.n	800358c <AT_PingSlot_set+0x44>
  }
  else if (periodicity > 7)
 8003568:	230f      	movs	r3, #15
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b07      	cmp	r3, #7
 8003570:	d901      	bls.n	8003576 <AT_PingSlot_set+0x2e>
  {
    return AT_PARAM_ERROR;
 8003572:	2302      	movs	r3, #2
 8003574:	e00a      	b.n	800358c <AT_PingSlot_set+0x44>
  }
  else if (LmHandlerSetPingPeriodicity(periodicity) != LORAMAC_HANDLER_SUCCESS)
 8003576:	230f      	movs	r3, #15
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	0018      	movs	r0, r3
 800357e:	f00b fc62 	bl	800ee46 <LmHandlerSetPingPeriodicity>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d001      	beq.n	800358a <AT_PingSlot_set+0x42>
  {
    return AT_PARAM_ERROR;
 8003586:	2302      	movs	r3, #2
 8003588:	e000      	b.n	800358c <AT_PingSlot_set+0x44>
  }

  return AT_OK;
 800358a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_PingSlot_set_2 */

  /* USER CODE END AT_PingSlot_set_2 */
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b004      	add	sp, #16
 8003592:	bd80      	pop	{r7, pc}
 8003594:	0801f1e0 	.word	0x0801f1e0

08003598 <AT_LocalTime_get>:

ATEerror_t AT_LocalTime_get(const char *param)
{
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	b095      	sub	sp, #84	; 0x54
 800359c:	af06      	add	r7, sp, #24
 800359e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_LocalTime_get_1 */

  /* USER CODE END AT_LocalTime_get_1 */
  struct tm localtime;
  SysTime_t UnixEpoch = SysTimeGet();
 80035a0:	240c      	movs	r4, #12
 80035a2:	193b      	adds	r3, r7, r4
 80035a4:	0018      	movs	r0, r3
 80035a6:	f019 ff3d 	bl	801d424 <SysTimeGet>
  UnixEpoch.Seconds -= 18; /*removing leap seconds*/
 80035aa:	0021      	movs	r1, r4
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3b12      	subs	r3, #18
 80035b2:	001a      	movs	r2, r3
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	601a      	str	r2, [r3, #0]

  UnixEpoch.Seconds += 3600 * 2; /*adding 2 hours*/
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	22e1      	movs	r2, #225	; 0xe1
 80035be:	0152      	lsls	r2, r2, #5
 80035c0:	189a      	adds	r2, r3, r2
 80035c2:	187b      	adds	r3, r7, r1
 80035c4:	601a      	str	r2, [r3, #0]

  SysTimeLocalTime(UnixEpoch.Seconds,  & localtime);
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2614      	movs	r6, #20
 80035cc:	19ba      	adds	r2, r7, r6
 80035ce:	0011      	movs	r1, r2
 80035d0:	0018      	movs	r0, r3
 80035d2:	f019 ff89 	bl	801d4e8 <SysTimeLocalTime>

  AT_PRINTF("LTIME:%02dh%02dm%02ds on %02d/%02d/%04d\r\n",
 80035d6:	19bb      	adds	r3, r7, r6
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	19bb      	adds	r3, r7, r6
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	19bb      	adds	r3, r7, r6
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	19bb      	adds	r3, r7, r6
 80035e4:	68dc      	ldr	r4, [r3, #12]
 80035e6:	19bb      	adds	r3, r7, r6
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	1c5d      	adds	r5, r3, #1
 80035ec:	19bb      	adds	r3, r7, r6
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	4e0a      	ldr	r6, [pc, #40]	; (800361c <AT_LocalTime_get+0x84>)
 80035f2:	46b4      	mov	ip, r6
 80035f4:	4463      	add	r3, ip
 80035f6:	4e0a      	ldr	r6, [pc, #40]	; (8003620 <AT_LocalTime_get+0x88>)
 80035f8:	9305      	str	r3, [sp, #20]
 80035fa:	9504      	str	r5, [sp, #16]
 80035fc:	9403      	str	r4, [sp, #12]
 80035fe:	9002      	str	r0, [sp, #8]
 8003600:	9101      	str	r1, [sp, #4]
 8003602:	9200      	str	r2, [sp, #0]
 8003604:	0033      	movs	r3, r6
 8003606:	2200      	movs	r2, #0
 8003608:	2100      	movs	r1, #0
 800360a:	2000      	movs	r0, #0
 800360c:	f019 f872 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
            localtime.tm_hour, localtime.tm_min, localtime.tm_sec,
            localtime.tm_mday, localtime.tm_mon + 1, localtime.tm_year + 1900);

  return AT_OK;
 8003610:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_LocalTime_get_2 */

  /* USER CODE END AT_LocalTime_get_2 */
}
 8003612:	0018      	movs	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	b00f      	add	sp, #60	; 0x3c
 8003618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	0000076c 	.word	0x0000076c
 8003620:	0801f234 	.word	0x0801f234

08003624 <AT_Join>:

ATEerror_t AT_Join(const char *param)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Join_1 */

  /* USER CODE END AT_Join_1 */
  switch (param[0])
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d002      	beq.n	800363a <AT_Join+0x16>
 8003634:	2b31      	cmp	r3, #49	; 0x31
 8003636:	d004      	beq.n	8003642 <AT_Join+0x1e>
 8003638:	e007      	b.n	800364a <AT_Join+0x26>
  {
    case '0':
      LmHandlerJoin(ACTIVATION_TYPE_ABP);
 800363a:	2001      	movs	r0, #1
 800363c:	f00a fe60 	bl	800e300 <LmHandlerJoin>
      break;
 8003640:	e005      	b.n	800364e <AT_Join+0x2a>
    case '1':
      LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 8003642:	2002      	movs	r0, #2
 8003644:	f00a fe5c 	bl	800e300 <LmHandlerJoin>
      break;
 8003648:	e001      	b.n	800364e <AT_Join+0x2a>
    default:
      return AT_PARAM_ERROR;
 800364a:	2302      	movs	r3, #2
 800364c:	e000      	b.n	8003650 <AT_Join+0x2c>
  }

  return AT_OK;
 800364e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Join_2 */

  /* USER CODE END AT_Join_2 */
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}

08003658 <AT_Send>:

ATEerror_t AT_Send(const char *param)
{
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Send_1 */

  /* USER CODE END AT_Send_1 */
  const char *buf = param;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t bufSize = strlen(param);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	0018      	movs	r0, r3
 8003668:	f7fc fd4e 	bl	8000108 <strlen>
 800366c:	0002      	movs	r2, r0
 800366e:	2322      	movs	r3, #34	; 0x22
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	801a      	strh	r2, [r3, #0]
  uint32_t appPort;
  LmHandlerMsgTypes_t isTxConfirmed;
  unsigned size = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
  char hex[3] = {0, 0, 0};
 8003678:	2310      	movs	r3, #16
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	4a8d      	ldr	r2, [pc, #564]	; (80038b4 <AT_Send+0x25c>)
 800367e:	8811      	ldrh	r1, [r2, #0]
 8003680:	8019      	strh	r1, [r3, #0]
 8003682:	7892      	ldrb	r2, [r2, #2]
 8003684:	709a      	strb	r2, [r3, #2]
  UTIL_TIMER_Time_t nextTxIn = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800368a:	231a      	movs	r3, #26
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	701a      	strb	r2, [r3, #0]
  ATEerror_t status = AT_ERROR;
 8003692:	231b      	movs	r3, #27
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]

  /* read and set the application port */
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 800369a:	2314      	movs	r3, #20
 800369c:	18fa      	adds	r2, r7, r3
 800369e:	4986      	ldr	r1, [pc, #536]	; (80038b8 <AT_Send+0x260>)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	0018      	movs	r0, r3
 80036a4:	f01b f96a 	bl	801e97c <tiny_sscanf>
 80036a8:	0003      	movs	r3, r0
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d010      	beq.n	80036d0 <AT_Send+0x78>
  {
    AT_PRINTF("AT+SEND without the application port\r\n");
 80036ae:	4b83      	ldr	r3, [pc, #524]	; (80038bc <AT_Send+0x264>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	2000      	movs	r0, #0
 80036b6:	f019 f81d 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 80036ba:	2302      	movs	r3, #2
 80036bc:	e0f5      	b.n	80038aa <AT_Send+0x252>
  }

  /* skip the application port */
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
  {
    buf ++;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	3301      	adds	r3, #1
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 80036c4:	2122      	movs	r1, #34	; 0x22
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	3a01      	subs	r2, #1
 80036ce:	801a      	strh	r2, [r3, #0]
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b2f      	cmp	r3, #47	; 0x2f
 80036d6:	d908      	bls.n	80036ea <AT_Send+0x92>
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b39      	cmp	r3, #57	; 0x39
 80036de:	d804      	bhi.n	80036ea <AT_Send+0x92>
 80036e0:	2322      	movs	r3, #34	; 0x22
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d8e9      	bhi.n	80036be <AT_Send+0x66>
  };

  if ((bufSize == 0) || (':' != buf[0]))
 80036ea:	2322      	movs	r3, #34	; 0x22
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <AT_Send+0xa4>
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b3a      	cmp	r3, #58	; 0x3a
 80036fa:	d007      	beq.n	800370c <AT_Send+0xb4>
  {
    AT_PRINTF("AT+SEND missing : character after app port\r\n");
 80036fc:	4b70      	ldr	r3, [pc, #448]	; (80038c0 <AT_Send+0x268>)
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	2000      	movs	r0, #0
 8003704:	f018 fff6 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8003708:	2302      	movs	r3, #2
 800370a:	e0ce      	b.n	80038aa <AT_Send+0x252>
  }
  else
  {
    /* skip the char ':' */
    buf ++;
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	3301      	adds	r3, #1
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 8003712:	2122      	movs	r1, #34	; 0x22
 8003714:	187b      	adds	r3, r7, r1
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	187b      	adds	r3, r7, r1
 800371a:	3a01      	subs	r2, #1
 800371c:	801a      	strh	r2, [r3, #0]
  }

  switch (buf[0])
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b30      	cmp	r3, #48	; 0x30
 8003724:	d002      	beq.n	800372c <AT_Send+0xd4>
 8003726:	2b31      	cmp	r3, #49	; 0x31
 8003728:	d005      	beq.n	8003736 <AT_Send+0xde>
 800372a:	e009      	b.n	8003740 <AT_Send+0xe8>
  {
    case '0':
      isTxConfirmed = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800372c:	2321      	movs	r3, #33	; 0x21
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
      break;
 8003734:	e00c      	b.n	8003750 <AT_Send+0xf8>
    case '1':
      isTxConfirmed = LORAMAC_HANDLER_CONFIRMED_MSG;
 8003736:	2321      	movs	r3, #33	; 0x21
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
      break;
 800373e:	e007      	b.n	8003750 <AT_Send+0xf8>
    default:
      AT_PRINTF("AT+SEND without the acknowledge flag\r\n");
 8003740:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <AT_Send+0x26c>)
 8003742:	2200      	movs	r2, #0
 8003744:	2100      	movs	r1, #0
 8003746:	2000      	movs	r0, #0
 8003748:	f018 ffd4 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
      return AT_PARAM_ERROR;
 800374c:	2302      	movs	r3, #2
 800374e:	e0ac      	b.n	80038aa <AT_Send+0x252>
  }

  if (bufSize > 0)
 8003750:	2222      	movs	r2, #34	; 0x22
 8003752:	18bb      	adds	r3, r7, r2
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <AT_Send+0x114>
  {
    /* skip the acknowledge flag */
    buf ++;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	3301      	adds	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 8003760:	0011      	movs	r1, r2
 8003762:	18bb      	adds	r3, r7, r2
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	187b      	adds	r3, r7, r1
 8003768:	3a01      	subs	r2, #1
 800376a:	801a      	strh	r2, [r3, #0]
  }

  if ((bufSize == 0) || (':' != buf[0]))
 800376c:	2322      	movs	r3, #34	; 0x22
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <AT_Send+0x126>
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b3a      	cmp	r3, #58	; 0x3a
 800377c:	d007      	beq.n	800378e <AT_Send+0x136>
  {
    AT_PRINTF("AT+SEND missing : character after ack flag\r\n");
 800377e:	4b52      	ldr	r3, [pc, #328]	; (80038c8 <AT_Send+0x270>)
 8003780:	2200      	movs	r2, #0
 8003782:	2100      	movs	r1, #0
 8003784:	2000      	movs	r0, #0
 8003786:	f018 ffb5 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800378a:	2302      	movs	r3, #2
 800378c:	e08d      	b.n	80038aa <AT_Send+0x252>
  }
  else
  {
    /* skip the char ':' */
    buf ++;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	3301      	adds	r3, #1
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 8003794:	2122      	movs	r1, #34	; 0x22
 8003796:	187b      	adds	r3, r7, r1
 8003798:	881a      	ldrh	r2, [r3, #0]
 800379a:	187b      	adds	r3, r7, r1
 800379c:	3a01      	subs	r2, #1
 800379e:	801a      	strh	r2, [r3, #0]
  }

  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 80037a0:	e027      	b.n	80037f2 <AT_Send+0x19a>
  {
    hex[0] = buf[size * 2];
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	18d3      	adds	r3, r2, r3
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	2110      	movs	r1, #16
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	701a      	strb	r2, [r3, #0]
    hex[1] = buf[size * 2 + 1];
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	3301      	adds	r3, #1
 80037b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ba:	18d3      	adds	r3, r2, r3
 80037bc:	781a      	ldrb	r2, [r3, #0]
 80037be:	0008      	movs	r0, r1
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	705a      	strb	r2, [r3, #1]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buffer[size]) != 1)
 80037c4:	4b41      	ldr	r3, [pc, #260]	; (80038cc <AT_Send+0x274>)
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	18d2      	adds	r2, r2, r3
 80037cc:	4940      	ldr	r1, [pc, #256]	; (80038d0 <AT_Send+0x278>)
 80037ce:	183b      	adds	r3, r7, r0
 80037d0:	0018      	movs	r0, r3
 80037d2:	f01b f8d3 	bl	801e97c <tiny_sscanf>
 80037d6:	0003      	movs	r3, r0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <AT_Send+0x188>
    {
      return AT_PARAM_ERROR;
 80037dc:	2302      	movs	r3, #2
 80037de:	e064      	b.n	80038aa <AT_Send+0x252>
    }
    size++;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
    bufSize -= 2;
 80037e6:	2222      	movs	r2, #34	; 0x22
 80037e8:	18bb      	adds	r3, r7, r2
 80037ea:	18ba      	adds	r2, r7, r2
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	3a02      	subs	r2, #2
 80037f0:	801a      	strh	r2, [r3, #0]
  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2bf1      	cmp	r3, #241	; 0xf1
 80037f6:	d804      	bhi.n	8003802 <AT_Send+0x1aa>
 80037f8:	2322      	movs	r3, #34	; 0x22
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d8cf      	bhi.n	80037a2 <AT_Send+0x14a>
  }
  if (bufSize != 0)
 8003802:	2322      	movs	r3, #34	; 0x22
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <AT_Send+0x1b8>
  {
    return AT_PARAM_ERROR;
 800380c:	2302      	movs	r3, #2
 800380e:	e04c      	b.n	80038aa <AT_Send+0x252>
  }

  AppData.BufferSize = size;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <AT_Send+0x274>)
 8003816:	705a      	strb	r2, [r3, #1]
  AppData.Port = appPort;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <AT_Send+0x274>)
 800381e:	701a      	strb	r2, [r3, #0]

  lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, &nextTxIn, false);
 8003820:	251a      	movs	r5, #26
 8003822:	197c      	adds	r4, r7, r5
 8003824:	230c      	movs	r3, #12
 8003826:	18fa      	adds	r2, r7, r3
 8003828:	2321      	movs	r3, #33	; 0x21
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	7819      	ldrb	r1, [r3, #0]
 800382e:	4827      	ldr	r0, [pc, #156]	; (80038cc <AT_Send+0x274>)
 8003830:	2300      	movs	r3, #0
 8003832:	f00a fded 	bl	800e410 <LmHandlerSend>
 8003836:	0003      	movs	r3, r0
 8003838:	7023      	strb	r3, [r4, #0]

  switch (lmhStatus)
 800383a:	197b      	adds	r3, r7, r5
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b25b      	sxtb	r3, r3
 8003840:	3306      	adds	r3, #6
 8003842:	2b06      	cmp	r3, #6
 8003844:	d829      	bhi.n	800389a <AT_Send+0x242>
 8003846:	009a      	lsls	r2, r3, #2
 8003848:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <AT_Send+0x27c>)
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	469f      	mov	pc, r3
  {
    case LORAMAC_HANDLER_SUCCESS:
      status = (nextTxIn > 0) ? AT_DUTYCYLE_RESTRICTED : AT_OK;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <AT_Send+0x202>
 8003856:	2208      	movs	r2, #8
 8003858:	e000      	b.n	800385c <AT_Send+0x204>
 800385a:	2200      	movs	r2, #0
 800385c:	231b      	movs	r3, #27
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	701a      	strb	r2, [r3, #0]
      break;
 8003862:	e01f      	b.n	80038a4 <AT_Send+0x24c>
    case LORAMAC_HANDLER_BUSY_ERROR:
    case LORAMAC_HANDLER_COMPLIANCE_RUNNING:
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 8003864:	f00a fd2c 	bl	800e2c0 <LmHandlerJoinStatus>
 8003868:	0003      	movs	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <AT_Send+0x21a>
 800386e:	2205      	movs	r2, #5
 8003870:	e000      	b.n	8003874 <AT_Send+0x21c>
 8003872:	2203      	movs	r2, #3
 8003874:	231b      	movs	r3, #27
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	701a      	strb	r2, [r3, #0]
      break;
 800387a:	e013      	b.n	80038a4 <AT_Send+0x24c>
    case LORAMAC_HANDLER_NO_NETWORK_JOINED:
      status = AT_NO_NET_JOINED;
 800387c:	231b      	movs	r3, #27
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2205      	movs	r2, #5
 8003882:	701a      	strb	r2, [r3, #0]
      break;
 8003884:	e00e      	b.n	80038a4 <AT_Send+0x24c>
    case LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED:
      status = AT_DUTYCYLE_RESTRICTED;
 8003886:	231b      	movs	r3, #27
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2208      	movs	r2, #8
 800388c:	701a      	strb	r2, [r3, #0]
      break;
 800388e:	e009      	b.n	80038a4 <AT_Send+0x24c>
    case LORAMAC_HANDLER_CRYPTO_ERROR:
      status = AT_CRYPTO_ERROR;
 8003890:	231b      	movs	r3, #27
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2209      	movs	r2, #9
 8003896:	701a      	strb	r2, [r3, #0]
      break;
 8003898:	e004      	b.n	80038a4 <AT_Send+0x24c>
    case LORAMAC_HANDLER_ERROR:
    default:
      status = AT_ERROR;
 800389a:	231b      	movs	r3, #27
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
      break;
 80038a2:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80038a4:	231b      	movs	r3, #27
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	781b      	ldrb	r3, [r3, #0]
  /* USER CODE BEGIN AT_Send_2 */

  /* USER CODE END AT_Send_2 */
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b00a      	add	sp, #40	; 0x28
 80038b0:	bdb0      	pop	{r4, r5, r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	0801f31c 	.word	0x0801f31c
 80038b8:	0801f260 	.word	0x0801f260
 80038bc:	0801f264 	.word	0x0801f264
 80038c0:	0801f28c 	.word	0x0801f28c
 80038c4:	0801f2bc 	.word	0x0801f2bc
 80038c8:	0801f2e4 	.word	0x0801f2e4
 80038cc:	20000028 	.word	0x20000028
 80038d0:	0801f314 	.word	0x0801f314
 80038d4:	0801f320 	.word	0x0801f320

080038d8 <AT_version_get>:

ATEerror_t AT_version_get(const char *param)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af04      	add	r7, sp, #16
 80038de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_version_get_1 */

  /* USER CODE END AT_version_get_1 */
  /* Get LoRa APP version*/
  AT_PRINTF("APP_VERSION:        V%X.%X.%X\r\n",
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <AT_version_get+0x5c>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	9202      	str	r2, [sp, #8]
 80038e6:	2200      	movs	r2, #0
 80038e8:	9201      	str	r2, [sp, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	9200      	str	r2, [sp, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	2100      	movs	r1, #0
 80038f2:	2000      	movs	r0, #0
 80038f4:	f018 fefe 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
            (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
            (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
            (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  AT_PRINTF("MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <AT_version_get+0x60>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	2202      	movs	r2, #2
 8003900:	9201      	str	r2, [sp, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	9200      	str	r2, [sp, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	2000      	movs	r0, #0
 800390c:	f018 fef2 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
            (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
            (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
            (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  AT_PRINTF("MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <AT_version_get+0x64>)
 8003912:	2201      	movs	r2, #1
 8003914:	9202      	str	r2, [sp, #8]
 8003916:	2200      	movs	r2, #0
 8003918:	9201      	str	r2, [sp, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	9200      	str	r2, [sp, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	2100      	movs	r1, #0
 8003922:	2000      	movs	r0, #0
 8003924:	f018 fee6 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
            (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
            (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
            (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  return AT_OK;
 8003928:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_version_get_2 */

  /* USER CODE END AT_version_get_2 */
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b002      	add	sp, #8
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	0801f33c 	.word	0x0801f33c
 8003938:	0801f35c 	.word	0x0801f35c
 800393c:	0801f37c 	.word	0x0801f37c

08003940 <AT_bat_get>:

ATEerror_t AT_bat_get(const char *param)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_bat_get_1 */

  /* USER CODE END AT_bat_get_1 */
  print_d(SYS_GetBatteryLevel());
 8003948:	f001 fccc 	bl	80052e4 <SYS_GetBatteryLevel>
 800394c:	0003      	movs	r3, r0
 800394e:	0018      	movs	r0, r3
 8003950:	f000 fcdc 	bl	800430c <print_d>

  return AT_OK;
 8003954:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_bat_get_2 */

  /* USER CODE END AT_bat_get_2 */
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b002      	add	sp, #8
 800395c:	bd80      	pop	{r7, pc}

0800395e <AT_test_txTone>:

ATEerror_t AT_test_txTone(const char *param)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_txTone_1 */

  /* USER CODE END AT_test_txTone_1 */
  if (0U == TST_TxTone())
 8003966:	f001 f819 	bl	800499c <TST_TxTone>
 800396a:	1e03      	subs	r3, r0, #0
 800396c:	d101      	bne.n	8003972 <AT_test_txTone+0x14>
  {
    return AT_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <AT_test_txTone+0x16>
  }
  else
  {
    return AT_BUSY_ERROR;
 8003972:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_txTone_2 */

  /* USER CODE END AT_test_txTone_2 */
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}

0800397c <AT_test_rxRssi>:

ATEerror_t AT_test_rxRssi(const char *param)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_rxRssi_1 */

  /* USER CODE END AT_test_rxRssi_1 */
  if (0U == TST_RxRssi())
 8003984:	f001 f83a 	bl	80049fc <TST_RxRssi>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d101      	bne.n	8003990 <AT_test_rxRssi+0x14>
  {
    return AT_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <AT_test_rxRssi+0x16>
  }
  else
  {
    return AT_BUSY_ERROR;
 8003990:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_rxRssi_2 */

  /* USER CODE END AT_test_rxRssi_2 */
}
 8003992:	0018      	movs	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <AT_test_tx>:

ATEerror_t AT_test_tx(const char *param)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_tx_1 */

  /* USER CODE END AT_test_tx_1 */
  const char *buf = param;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60fb      	str	r3, [r7, #12]
  uint32_t nb_packet;

  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 80039a8:	2308      	movs	r3, #8
 80039aa:	18fa      	adds	r2, r7, r3
 80039ac:	490e      	ldr	r1, [pc, #56]	; (80039e8 <AT_test_tx+0x4c>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f01a ffe3 	bl	801e97c <tiny_sscanf>
 80039b6:	0003      	movs	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d007      	beq.n	80039cc <AT_test_tx+0x30>
  {
    AT_PRINTF("AT+TTX: nb packets sent is missing\r\n");
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <AT_test_tx+0x50>)
 80039be:	2200      	movs	r2, #0
 80039c0:	2100      	movs	r1, #0
 80039c2:	2000      	movs	r0, #0
 80039c4:	f018 fe96 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 80039c8:	2302      	movs	r3, #2
 80039ca:	e008      	b.n	80039de <AT_test_tx+0x42>
  }

  if (0U == TST_TX_Start(nb_packet))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f001 f8d0 	bl	8004b74 <TST_TX_Start>
 80039d4:	1e03      	subs	r3, r0, #0
 80039d6:	d101      	bne.n	80039dc <AT_test_tx+0x40>
  {
    return AT_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <AT_test_tx+0x42>
  }
  else
  {
    return AT_BUSY_ERROR;
 80039dc:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_tx_2 */

  /* USER CODE END AT_test_tx_2 */
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b004      	add	sp, #16
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	0801f39c 	.word	0x0801f39c
 80039ec:	0801f3a0 	.word	0x0801f3a0

080039f0 <AT_test_tx_hopping>:
  * @brief  Start Tx hopping
  * @param  String parameter
  * @retval AT_OK
  */
ATEerror_t AT_test_tx_hopping(const char *param)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b09b      	sub	sp, #108	; 0x6c
 80039f4:	af04      	add	r7, sp, #16
 80039f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_tx_hopping_1 */

  /* USER CODE END AT_test_tx_hopping_1 */
  const char *buf = param;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t nb_tx;

  testParameter_t test_param;
  uint32_t hop_freq;

  if (4 != tiny_sscanf(buf, "%u,%u,%u,%u", &freq_start, &freq_stop, &delta_f, &nb_tx))
 80039fc:	2344      	movs	r3, #68	; 0x44
 80039fe:	18fc      	adds	r4, r7, r3
 8003a00:	2348      	movs	r3, #72	; 0x48
 8003a02:	18fa      	adds	r2, r7, r3
 8003a04:	4934      	ldr	r1, [pc, #208]	; (8003ad8 <AT_test_tx_hopping+0xe8>)
 8003a06:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003a08:	233c      	movs	r3, #60	; 0x3c
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2340      	movs	r3, #64	; 0x40
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	0023      	movs	r3, r4
 8003a16:	f01a ffb1 	bl	801e97c <tiny_sscanf>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d001      	beq.n	8003a24 <AT_test_tx_hopping+0x34>
  {
    return AT_PARAM_ERROR;
 8003a20:	2302      	movs	r3, #2
 8003a22:	e055      	b.n	8003ad0 <AT_test_tx_hopping+0xe0>
  }

  /*if freq is set in MHz, convert to Hz*/
  if (freq_start < 1000)
 8003a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a26:	23fa      	movs	r3, #250	; 0xfa
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d209      	bcs.n	8003a42 <AT_test_tx_hopping+0x52>
  {
    freq_start *= 1000000;
 8003a2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003a30:	000a      	movs	r2, r1
 8003a32:	0152      	lsls	r2, r2, #5
 8003a34:	1a52      	subs	r2, r2, r1
 8003a36:	0193      	lsls	r3, r2, #6
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	185b      	adds	r3, r3, r1
 8003a3e:	019b      	lsls	r3, r3, #6
 8003a40:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  if (freq_stop < 1000)
 8003a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a44:	23fa      	movs	r3, #250	; 0xfa
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d209      	bcs.n	8003a60 <AT_test_tx_hopping+0x70>
  {
    freq_stop *= 1000000;
 8003a4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a4e:	000a      	movs	r2, r1
 8003a50:	0152      	lsls	r2, r2, #5
 8003a52:	1a52      	subs	r2, r2, r1
 8003a54:	0193      	lsls	r3, r2, #6
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	185b      	adds	r3, r3, r1
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  /**/
  hop_freq = freq_start;
 8003a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a62:	657b      	str	r3, [r7, #84]	; 0x54

  for (int i = 0; i < nb_tx; i++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
 8003a68:	e02d      	b.n	8003ac6 <AT_test_tx_hopping+0xd6>
  {
    /*get current config*/
    TST_get_config(&test_param);
 8003a6a:	240c      	movs	r4, #12
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f001 f85e 	bl	8004b30 <TST_get_config>

    /*increment frequency*/
    test_param.freq = hop_freq;
 8003a74:	0021      	movs	r1, r4
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a7a:	605a      	str	r2, [r3, #4]
    /*Set new config*/
    TST_set_config(&test_param);
 8003a7c:	187b      	adds	r3, r7, r1
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f001 f844 	bl	8004b0c <TST_set_config>

    APP_TPRINTF("Tx Hop at %dHz. %d of %d\r\n", hop_freq, i, nb_tx);
 8003a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a86:	4a15      	ldr	r2, [pc, #84]	; (8003adc <AT_test_tx_hopping+0xec>)
 8003a88:	9302      	str	r3, [sp, #8]
 8003a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	0013      	movs	r3, r2
 8003a94:	2201      	movs	r2, #1
 8003a96:	2100      	movs	r1, #0
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f018 fe2b 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>

    if (0U != TST_TX_Start(1))
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f001 f868 	bl	8004b74 <TST_TX_Start>
 8003aa4:	1e03      	subs	r3, r0, #0
 8003aa6:	d001      	beq.n	8003aac <AT_test_tx_hopping+0xbc>
    {
      return AT_BUSY_ERROR;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e011      	b.n	8003ad0 <AT_test_tx_hopping+0xe0>
    }

    hop_freq += delta_f;
 8003aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ab0:	18d3      	adds	r3, r2, r3
 8003ab2:	657b      	str	r3, [r7, #84]	; 0x54

    if (hop_freq > freq_stop)
 8003ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d901      	bls.n	8003ac0 <AT_test_tx_hopping+0xd0>
    {
      hop_freq = freq_start;
 8003abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003abe:	657b      	str	r3, [r7, #84]	; 0x54
  for (int i = 0; i < nb_tx; i++)
 8003ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d3cd      	bcc.n	8003a6a <AT_test_tx_hopping+0x7a>
    }
  }

  return AT_OK;
 8003ace:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_tx_hopping_2 */

  /* USER CODE END AT_test_tx_hopping_2 */
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b017      	add	sp, #92	; 0x5c
 8003ad6:	bd90      	pop	{r4, r7, pc}
 8003ad8:	0801f3c8 	.word	0x0801f3c8
 8003adc:	0801f3d4 	.word	0x0801f3d4

08003ae0 <AT_test_rx>:

ATEerror_t AT_test_rx(const char *param)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_rx_1 */

  /* USER CODE END AT_test_rx_1 */
  const char *buf = param;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60fb      	str	r3, [r7, #12]
  uint32_t nb_packet;

  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 8003aec:	2308      	movs	r3, #8
 8003aee:	18fa      	adds	r2, r7, r3
 8003af0:	490e      	ldr	r1, [pc, #56]	; (8003b2c <AT_test_rx+0x4c>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f01a ff41 	bl	801e97c <tiny_sscanf>
 8003afa:	0003      	movs	r3, r0
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d007      	beq.n	8003b10 <AT_test_rx+0x30>
  {
    AT_PRINTF("AT+TRX: nb expected packets is missing\r\n");
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <AT_test_rx+0x50>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	2100      	movs	r1, #0
 8003b06:	2000      	movs	r0, #0
 8003b08:	f018 fdf4 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e008      	b.n	8003b22 <AT_test_rx+0x42>
  }

  if (0U == TST_RX_Start(nb_packet))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f001 f92a 	bl	8004d6c <TST_RX_Start>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d101      	bne.n	8003b20 <AT_test_rx+0x40>
  {
    return AT_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <AT_test_rx+0x42>
  }
  else
  {
    return AT_BUSY_ERROR;
 8003b20:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_rx_2 */

  /* USER CODE END AT_test_rx_2 */
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b004      	add	sp, #16
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	0801f39c 	.word	0x0801f39c
 8003b30:	0801f3f0 	.word	0x0801f3f0

08003b34 <AT_verbose_set>:

  /* USER CODE END AT_read_register_2 */
}

ATEerror_t AT_verbose_set(const char *param)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_verbose_set_1 */

  /* USER CODE END AT_verbose_set_1 */
  const char *buf = param;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]
  int32_t lvl_nb;

  /* read and set the verbose level */
  if (1 != tiny_sscanf(buf, "%u", &lvl_nb))
 8003b40:	2308      	movs	r3, #8
 8003b42:	18fa      	adds	r2, r7, r3
 8003b44:	4913      	ldr	r1, [pc, #76]	; (8003b94 <AT_verbose_set+0x60>)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f01a ff17 	bl	801e97c <tiny_sscanf>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d007      	beq.n	8003b64 <AT_verbose_set+0x30>
  {
    AT_PRINTF("AT+VL: verbose level is not well set\r\n");
 8003b54:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <AT_verbose_set+0x64>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f018 fdca 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8003b60:	2302      	movs	r3, #2
 8003b62:	e013      	b.n	8003b8c <AT_verbose_set+0x58>
  }
  if ((lvl_nb > VLEVEL_H) || (lvl_nb < VLEVEL_OFF))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	dc02      	bgt.n	8003b70 <AT_verbose_set+0x3c>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da07      	bge.n	8003b80 <AT_verbose_set+0x4c>
  {
    AT_PRINTF("AT+VL: verbose level out of range => 0(VLEVEL_OFF) to 3(VLEVEL_H)\r\n");
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <AT_verbose_set+0x68>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	2100      	movs	r1, #0
 8003b76:	2000      	movs	r0, #0
 8003b78:	f018 fdbc 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e005      	b.n	8003b8c <AT_verbose_set+0x58>
  }

  UTIL_ADV_TRACE_SetVerboseLevel(lvl_nb);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	0018      	movs	r0, r3
 8003b86:	f018 fe5b 	bl	801c840 <UTIL_ADV_TRACE_SetVerboseLevel>

  return AT_OK;
 8003b8a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_verbose_set_2 */

  /* USER CODE END AT_verbose_set_2 */
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b004      	add	sp, #16
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	0801f39c 	.word	0x0801f39c
 8003b98:	0801f430 	.word	0x0801f430
 8003b9c:	0801f458 	.word	0x0801f458

08003ba0 <AT_verbose_get>:

ATEerror_t AT_verbose_get(const char *param)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_verbose_get_1 */

  /* USER CODE END AT_verbose_get_1 */
  print_u(UTIL_ADV_TRACE_GetVerboseLevel());
 8003ba8:	f018 fe5a 	bl	801c860 <UTIL_ADV_TRACE_GetVerboseLevel>
 8003bac:	0003      	movs	r3, r0
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 fbc0 	bl	8004334 <print_u>
  return AT_OK;
 8003bb4:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_verbose_get_2 */

  /* USER CODE END AT_verbose_get_2 */
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b002      	add	sp, #8
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <AT_test_get_config>:

ATEerror_t AT_test_get_config(const char *param)
{
 8003bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc2:	46de      	mov	lr, fp
 8003bc4:	4657      	mov	r7, sl
 8003bc6:	464e      	mov	r6, r9
 8003bc8:	4645      	mov	r5, r8
 8003bca:	b5e0      	push	{r5, r6, r7, lr}
 8003bcc:	b0a3      	sub	sp, #140	; 0x8c
 8003bce:	af0c      	add	r7, sp, #48	; 0x30
 8003bd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_get_config_1 */

  /* USER CODE END AT_test_get_config_1 */
  testParameter_t testParam;
  uint32_t loraBW[7] = {7812, 15625, 31250, 62500, 125000, 250000, 500000};
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	4a9c      	ldr	r2, [pc, #624]	; (8003e48 <AT_test_get_config+0x288>)
 8003bd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bda:	c313      	stmia	r3!, {r0, r1, r4}
 8003bdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bde:	c313      	stmia	r3!, {r0, r1, r4}
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	601a      	str	r2, [r3, #0]

  TST_get_config(&testParam);
 8003be4:	2428      	movs	r4, #40	; 0x28
 8003be6:	193b      	adds	r3, r7, r4
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 ffa1 	bl	8004b30 <TST_get_config>

  AT_PRINTF("1: Freq= %d Hz\r\n", testParam.freq);
 8003bee:	193b      	adds	r3, r7, r4
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4a96      	ldr	r2, [pc, #600]	; (8003e4c <AT_test_get_config+0x28c>)
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	0013      	movs	r3, r2
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f018 fd79 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("2: Power= %d dBm\r\n", testParam.power);
 8003c02:	193b      	adds	r3, r7, r4
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4a92      	ldr	r2, [pc, #584]	; (8003e50 <AT_test_get_config+0x290>)
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	0013      	movs	r3, r2
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2100      	movs	r1, #0
 8003c10:	2000      	movs	r0, #0
 8003c12:	f018 fd6f 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>

  if (testParam.modulation == 0)
 8003c16:	193b      	adds	r3, r7, r4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d158      	bne.n	8003cd0 <AT_test_get_config+0x110>
  {
    /*fsk*/
    AT_PRINTF("3: Bandwidth= %d kHz\r\n", testParam.bandwidth);
 8003c1e:	193b      	adds	r3, r7, r4
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4a8c      	ldr	r2, [pc, #560]	; (8003e54 <AT_test_get_config+0x294>)
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	0013      	movs	r3, r2
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f018 fd61 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: FSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	4a88      	ldr	r2, [pc, #544]	; (8003e58 <AT_test_get_config+0x298>)
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	0013      	movs	r3, r2
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2100      	movs	r1, #0
 8003c40:	2000      	movs	r0, #0
 8003c42:	f018 fd57 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: Coding Rate not applicable\r\n");
 8003c46:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <AT_test_get_config+0x29c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f018 fd51 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 8003c52:	193b      	adds	r3, r7, r4
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	4a82      	ldr	r2, [pc, #520]	; (8003e60 <AT_test_get_config+0x2a0>)
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	0013      	movs	r3, r2
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2000      	movs	r0, #0
 8003c62:	f018 fd47 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 8003c66:	193b      	adds	r3, r7, r4
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	4a7e      	ldr	r2, [pc, #504]	; (8003e64 <AT_test_get_config+0x2a4>)
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	0013      	movs	r3, r2
 8003c70:	2200      	movs	r2, #0
 8003c72:	2100      	movs	r1, #0
 8003c74:	2000      	movs	r0, #0
 8003c76:	f018 fd3d 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation FSK\r\n");
 8003c7a:	4b7b      	ldr	r3, [pc, #492]	; (8003e68 <AT_test_get_config+0x2a8>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2100      	movs	r1, #0
 8003c80:	2000      	movs	r0, #0
 8003c82:	f018 fd37 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 8003c86:	193b      	adds	r3, r7, r4
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4a78      	ldr	r2, [pc, #480]	; (8003e6c <AT_test_get_config+0x2ac>)
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	0013      	movs	r3, r2
 8003c90:	2200      	movs	r2, #0
 8003c92:	2100      	movs	r1, #0
 8003c94:	2000      	movs	r0, #0
 8003c96:	f018 fd2d 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: FSK deviation= %d \r\n", testParam.fskDev);
 8003c9a:	193b      	adds	r3, r7, r4
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	4a74      	ldr	r2, [pc, #464]	; (8003e70 <AT_test_get_config+0x2b0>)
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	0013      	movs	r3, r2
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2000      	movs	r0, #0
 8003caa:	f018 fd23 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt not applicable\r\n");
 8003cae:	4b71      	ldr	r3, [pc, #452]	; (8003e74 <AT_test_get_config+0x2b4>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f018 fd1d 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12: FSK gaussian BT product= %d \r\n", testParam.BTproduct);
 8003cba:	193b      	adds	r3, r7, r4
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	4a6e      	ldr	r2, [pc, #440]	; (8003e78 <AT_test_get_config+0x2b8>)
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	0013      	movs	r3, r2
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f018 fd13 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 8003cce:	e06d      	b.n	8003dac <AT_test_get_config+0x1ec>
  }
  else if (testParam.modulation == 1)
 8003cd0:	2428      	movs	r4, #40	; 0x28
 8003cd2:	193b      	adds	r3, r7, r4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d15d      	bne.n	8003d96 <AT_test_get_config+0x1d6>
  {
    /*Lora*/
    AT_PRINTF("3: Bandwidth= %d Hz\r\n", loraBW[testParam.bandwidth]);
 8003cda:	193b      	adds	r3, r7, r4
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	230c      	movs	r3, #12
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	58d3      	ldr	r3, [r2, r3]
 8003ce6:	4a65      	ldr	r2, [pc, #404]	; (8003e7c <AT_test_get_config+0x2bc>)
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	0013      	movs	r3, r2
 8003cec:	2200      	movs	r2, #0
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f018 fcff 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: SF= %d \r\n", testParam.loraSf_datarate);
 8003cf6:	193b      	adds	r3, r7, r4
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	4a61      	ldr	r2, [pc, #388]	; (8003e80 <AT_test_get_config+0x2c0>)
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	0013      	movs	r3, r2
 8003d00:	2200      	movs	r2, #0
 8003d02:	2100      	movs	r1, #0
 8003d04:	2000      	movs	r0, #0
 8003d06:	f018 fcf5 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: CR= 4/%d \r\n", testParam.codingRate + 4);
 8003d0a:	193b      	adds	r3, r7, r4
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4a5c      	ldr	r2, [pc, #368]	; (8003e84 <AT_test_get_config+0x2c4>)
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	0013      	movs	r3, r2
 8003d16:	2200      	movs	r2, #0
 8003d18:	2100      	movs	r1, #0
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	f018 fcea 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 8003d20:	193b      	adds	r3, r7, r4
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	4a4e      	ldr	r2, [pc, #312]	; (8003e60 <AT_test_get_config+0x2a0>)
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	0013      	movs	r3, r2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f018 fce0 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 8003d34:	193b      	adds	r3, r7, r4
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4a4a      	ldr	r2, [pc, #296]	; (8003e64 <AT_test_get_config+0x2a4>)
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	0013      	movs	r3, r2
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2100      	movs	r1, #0
 8003d42:	2000      	movs	r0, #0
 8003d44:	f018 fcd6 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation LORA\r\n");
 8003d48:	4b4f      	ldr	r3, [pc, #316]	; (8003e88 <AT_test_get_config+0x2c8>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f018 fcd0 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 8003d54:	193b      	adds	r3, r7, r4
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a44      	ldr	r2, [pc, #272]	; (8003e6c <AT_test_get_config+0x2ac>)
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	0013      	movs	r3, r2
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2100      	movs	r1, #0
 8003d62:	2000      	movs	r0, #0
 8003d64:	f018 fcc6 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: Frequency deviation not applicable\r\n");
 8003d68:	4b48      	ldr	r3, [pc, #288]	; (8003e8c <AT_test_get_config+0x2cc>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f018 fcc0 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt[0 to 2]= %d \r\n", testParam.lowDrOpt);
 8003d74:	193b      	adds	r3, r7, r4
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	4a45      	ldr	r2, [pc, #276]	; (8003e90 <AT_test_get_config+0x2d0>)
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	0013      	movs	r3, r2
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2100      	movs	r1, #0
 8003d82:	2000      	movs	r0, #0
 8003d84:	f018 fcb6 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12 BT product not applicable\r\n");
 8003d88:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <AT_test_get_config+0x2d4>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f018 fcb0 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 8003d94:	e00a      	b.n	8003dac <AT_test_get_config+0x1ec>
  }
  else
  {
    AT_PRINTF("4: BPSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 8003d96:	2328      	movs	r3, #40	; 0x28
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	4a3e      	ldr	r2, [pc, #248]	; (8003e98 <AT_test_get_config+0x2d8>)
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	0013      	movs	r3, r2
 8003da2:	2200      	movs	r2, #0
 8003da4:	2100      	movs	r1, #0
 8003da6:	2000      	movs	r0, #0
 8003da8:	f018 fca4 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  }

  AT_PRINTF("can be copy/paste in set cmd: AT+TCONF=%d:%d:%d:%d:4/%d:%d:%d:%d:%d:%d:%d:%d\r\n", testParam.freq,
 8003dac:	2628      	movs	r6, #40	; 0x28
 8003dae:	19bb      	adds	r3, r7, r6
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	19bb      	adds	r3, r7, r6
 8003db4:	6899      	ldr	r1, [r3, #8]
 8003db6:	19bb      	adds	r3, r7, r6
 8003db8:	68d8      	ldr	r0, [r3, #12]
 8003dba:	19bb      	adds	r3, r7, r6
 8003dbc:	691c      	ldr	r4, [r3, #16]
 8003dbe:	19bb      	adds	r3, r7, r6
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	1d1d      	adds	r5, r3, #4
 8003dc4:	19bb      	adds	r3, r7, r6
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	0033      	movs	r3, r6
 8003dcc:	001e      	movs	r6, r3
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	469c      	mov	ip, r3
 8003dd4:	0033      	movs	r3, r6
 8003dd6:	001e      	movs	r6, r3
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4698      	mov	r8, r3
 8003dde:	0033      	movs	r3, r6
 8003de0:	001e      	movs	r6, r3
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4699      	mov	r9, r3
 8003de8:	0033      	movs	r3, r6
 8003dea:	001e      	movs	r6, r3
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	469a      	mov	sl, r3
 8003df2:	0033      	movs	r3, r6
 8003df4:	001e      	movs	r6, r3
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	469b      	mov	fp, r3
 8003dfc:	0033      	movs	r3, r6
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	4e26      	ldr	r6, [pc, #152]	; (8003e9c <AT_test_get_config+0x2dc>)
 8003e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e06:	465b      	mov	r3, fp
 8003e08:	930a      	str	r3, [sp, #40]	; 0x28
 8003e0a:	4653      	mov	r3, sl
 8003e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e0e:	464b      	mov	r3, r9
 8003e10:	9308      	str	r3, [sp, #32]
 8003e12:	4643      	mov	r3, r8
 8003e14:	9307      	str	r3, [sp, #28]
 8003e16:	4663      	mov	r3, ip
 8003e18:	9306      	str	r3, [sp, #24]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9305      	str	r3, [sp, #20]
 8003e1e:	9504      	str	r5, [sp, #16]
 8003e20:	9403      	str	r4, [sp, #12]
 8003e22:	9002      	str	r0, [sp, #8]
 8003e24:	9101      	str	r1, [sp, #4]
 8003e26:	9200      	str	r2, [sp, #0]
 8003e28:	0033      	movs	r3, r6
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f018 fc60 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
            testParam.power,
            testParam.bandwidth, testParam.loraSf_datarate, testParam.codingRate + 4, \
            testParam.lna, testParam.paBoost, testParam.modulation, testParam.payloadLen, testParam.fskDev, testParam.lowDrOpt,
            testParam.BTproduct);
  return AT_OK;
 8003e34:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_get_config_2 */

  /* USER CODE END AT_test_get_config_2 */
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b017      	add	sp, #92	; 0x5c
 8003e3c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e3e:	46bb      	mov	fp, r7
 8003e40:	46b2      	mov	sl, r6
 8003e42:	46a9      	mov	r9, r5
 8003e44:	46a0      	mov	r8, r4
 8003e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e48:	0801f700 	.word	0x0801f700
 8003e4c:	0801f49c 	.word	0x0801f49c
 8003e50:	0801f4b0 	.word	0x0801f4b0
 8003e54:	0801f4c4 	.word	0x0801f4c4
 8003e58:	0801f4dc 	.word	0x0801f4dc
 8003e5c:	0801f4f8 	.word	0x0801f4f8
 8003e60:	0801f518 	.word	0x0801f518
 8003e64:	0801f530 	.word	0x0801f530
 8003e68:	0801f54c 	.word	0x0801f54c
 8003e6c:	0801f560 	.word	0x0801f560
 8003e70:	0801f57c 	.word	0x0801f57c
 8003e74:	0801f598 	.word	0x0801f598
 8003e78:	0801f5b8 	.word	0x0801f5b8
 8003e7c:	0801f5dc 	.word	0x0801f5dc
 8003e80:	0801f5f4 	.word	0x0801f5f4
 8003e84:	0801f604 	.word	0x0801f604
 8003e88:	0801f614 	.word	0x0801f614
 8003e8c:	0801f62c 	.word	0x0801f62c
 8003e90:	0801f658 	.word	0x0801f658
 8003e94:	0801f674 	.word	0x0801f674
 8003e98:	0801f694 	.word	0x0801f694
 8003e9c:	0801f6b0 	.word	0x0801f6b0

08003ea0 <AT_test_set_config>:

ATEerror_t AT_test_set_config(const char *param)
{
 8003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea2:	b0a9      	sub	sp, #164	; 0xa4
 8003ea4:	af0c      	add	r7, sp, #48	; 0x30
 8003ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_set_config_1 */

  /* USER CODE END AT_test_set_config_1 */
  testParameter_t testParam;
  int32_t power = 14;
 8003ea8:	230e      	movs	r3, #14
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t loraSf_datarate;
  uint32_t bandwidth;
  uint32_t codingRate;
  uint32_t lna;
  uint32_t paBoost;
  uint32_t modulation = 1; /*Lora default in legacy*/
 8003eac:	2301      	movs	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
  uint32_t payloadLen = 16; /*Lora default in legacy*/
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	61bb      	str	r3, [r7, #24]
  uint32_t fskdDeviation = 25000; /*Lora default in legacy*/
 8003eb4:	4ba7      	ldr	r3, [pc, #668]	; (8004154 <AT_test_set_config+0x2b4>)
 8003eb6:	617b      	str	r3, [r7, #20]
  uint32_t lowDrOpt = 2; /*Lora default in legacy*/
 8003eb8:	2302      	movs	r3, #2
 8003eba:	613b      	str	r3, [r7, #16]
  uint32_t BTproduct = 3; /*Lora default in legacy*/
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	60fb      	str	r3, [r7, #12]

  if (13 == tiny_sscanf(param, "%d:%d:%d:%d:%d/%d:%d:%d:%d:%d:%d:%d:%d",
 8003ec0:	253c      	movs	r5, #60	; 0x3c
 8003ec2:	197c      	adds	r4, r7, r5
 8003ec4:	2634      	movs	r6, #52	; 0x34
 8003ec6:	19ba      	adds	r2, r7, r6
 8003ec8:	49a3      	ldr	r1, [pc, #652]	; (8004158 <AT_test_set_config+0x2b8>)
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	230c      	movs	r3, #12
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed8:	2314      	movs	r3, #20
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	9308      	str	r3, [sp, #32]
 8003ede:	2318      	movs	r3, #24
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	9307      	str	r3, [sp, #28]
 8003ee4:	231c      	movs	r3, #28
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	9306      	str	r3, [sp, #24]
 8003eea:	2320      	movs	r3, #32
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	9305      	str	r3, [sp, #20]
 8003ef0:	2324      	movs	r3, #36	; 0x24
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	9304      	str	r3, [sp, #16]
 8003ef6:	2328      	movs	r3, #40	; 0x28
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	9303      	str	r3, [sp, #12]
 8003efc:	2338      	movs	r3, #56	; 0x38
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	9302      	str	r3, [sp, #8]
 8003f02:	2330      	movs	r3, #48	; 0x30
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	232c      	movs	r3, #44	; 0x2c
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	0023      	movs	r3, r4
 8003f10:	f01a fd34 	bl	801e97c <tiny_sscanf>
 8003f14:	0003      	movs	r3, r0
 8003f16:	2b0d      	cmp	r3, #13
 8003f18:	d033      	beq.n	8003f82 <AT_test_set_config+0xe2>
                        &lowDrOpt,
                        &BTproduct))
  {
    /*extend to new format for extended*/
  }
  else if (8 == tiny_sscanf(param, "%d:%d:%d:%d:%d/%d:%d:%d",
 8003f1a:	197c      	adds	r4, r7, r5
 8003f1c:	19ba      	adds	r2, r7, r6
 8003f1e:	498f      	ldr	r1, [pc, #572]	; (800415c <AT_test_set_config+0x2bc>)
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	2320      	movs	r3, #32
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	9305      	str	r3, [sp, #20]
 8003f28:	2324      	movs	r3, #36	; 0x24
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	9304      	str	r3, [sp, #16]
 8003f2e:	2328      	movs	r3, #40	; 0x28
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	9303      	str	r3, [sp, #12]
 8003f34:	2338      	movs	r3, #56	; 0x38
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	9302      	str	r3, [sp, #8]
 8003f3a:	2330      	movs	r3, #48	; 0x30
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	232c      	movs	r3, #44	; 0x2c
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	0023      	movs	r3, r4
 8003f48:	f01a fd18 	bl	801e97c <tiny_sscanf>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d115      	bne.n	8003f7e <AT_test_set_config+0xde>
                            &codingRate,
                            &lna,
                            &paBoost))
  {
    /*legacy*/
    if (bandwidth == 500)
 8003f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f54:	23fa      	movs	r3, #250	; 0xfa
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d102      	bne.n	8003f62 <AT_test_set_config+0xc2>
    {
      bandwidth = BW_500kHz;
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f60:	e00f      	b.n	8003f82 <AT_test_set_config+0xe2>
    }
    else if (bandwidth == 250)
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	2bfa      	cmp	r3, #250	; 0xfa
 8003f66:	d102      	bne.n	8003f6e <AT_test_set_config+0xce>
    {
      bandwidth = BW_250kHz;
 8003f68:	2305      	movs	r3, #5
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6c:	e009      	b.n	8003f82 <AT_test_set_config+0xe2>
    }
    else if (bandwidth == 125)
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	2b7d      	cmp	r3, #125	; 0x7d
 8003f72:	d102      	bne.n	8003f7a <AT_test_set_config+0xda>
    {
      bandwidth = BW_125kHz;
 8003f74:	2304      	movs	r3, #4
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f78:	e003      	b.n	8003f82 <AT_test_set_config+0xe2>
    }
    else
    {
      return AT_PARAM_ERROR;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0e6      	b.n	800414c <AT_test_set_config+0x2ac>
    }
  }
  else
  {
    return AT_PARAM_ERROR;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e0e4      	b.n	800414c <AT_test_set_config+0x2ac>
  }
  /* Power  check and set*/
  if ((power >= -9) && (power <= 22))
 8003f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f84:	3309      	adds	r3, #9
 8003f86:	db0a      	blt.n	8003f9e <AT_test_set_config+0xfe>
 8003f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8a:	2b16      	cmp	r3, #22
 8003f8c:	dc07      	bgt.n	8003f9e <AT_test_set_config+0xfe>
  {
    testParam.power = power;
 8003f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f90:	2340      	movs	r3, #64	; 0x40
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	609a      	str	r2, [r3, #8]
  else
  {
    return AT_PARAM_ERROR;
  }
  /* payloadLen check and set*/
  if ((payloadLen != 0) && (payloadLen <= 256))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <AT_test_set_config+0x102>
 8003f9c:	e00e      	b.n	8003fbc <AT_test_set_config+0x11c>
    return AT_PARAM_ERROR;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e0d4      	b.n	800414c <AT_test_set_config+0x2ac>
  if ((payloadLen != 0) && (payloadLen <= 256))
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d807      	bhi.n	8003fbc <AT_test_set_config+0x11c>
  {
    testParam.payloadLen = payloadLen;
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	2340      	movs	r3, #64	; 0x40
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	621a      	str	r2, [r3, #32]
  {
    return AT_PARAM_ERROR;
  }

  /*modulation check and set*/
  if (modulation == 0)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <AT_test_set_config+0x120>
 8003fba:	e006      	b.n	8003fca <AT_test_set_config+0x12a>
    return AT_PARAM_ERROR;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e0c5      	b.n	800414c <AT_test_set_config+0x2ac>
  {
    /*modulation fsk=0 or lora=1*/
    testParam.modulation = TEST_FSK;
 8003fc0:	2340      	movs	r3, #64	; 0x40
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e011      	b.n	8003fee <AT_test_set_config+0x14e>
  }
  else if (modulation == 1)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d104      	bne.n	8003fda <AT_test_set_config+0x13a>
  {
    /*modulation fsk=0 or lora=1*/
    testParam.modulation = TEST_LORA;
 8003fd0:	2340      	movs	r3, #64	; 0x40
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e009      	b.n	8003fee <AT_test_set_config+0x14e>
  }
  else if (modulation == 2)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d104      	bne.n	8003fea <AT_test_set_config+0x14a>
  {
    /*modulation fsk=0 or lora=1*/
    testParam.modulation = TEST_BPSK;
 8003fe0:	2340      	movs	r3, #64	; 0x40
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e001      	b.n	8003fee <AT_test_set_config+0x14e>
  }
  else
  {
    return AT_PARAM_ERROR;
 8003fea:	2302      	movs	r3, #2
 8003fec:	e0ae      	b.n	800414c <AT_test_set_config+0x2ac>
  }

  /* frequency check and set*/
  if (freq < 1000)
 8003fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ff0:	23fa      	movs	r3, #250	; 0xfa
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d20d      	bcs.n	8004014 <AT_test_set_config+0x174>
  {
    /*given in MHz*/
    testParam.freq = freq * 1000000;
 8003ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ffa:	000a      	movs	r2, r1
 8003ffc:	0152      	lsls	r2, r2, #5
 8003ffe:	1a52      	subs	r2, r2, r1
 8004000:	0193      	lsls	r3, r2, #6
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	185b      	adds	r3, r3, r1
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	001a      	movs	r2, r3
 800400c:	2340      	movs	r3, #64	; 0x40
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e003      	b.n	800401c <AT_test_set_config+0x17c>
  }
  else
  {
    testParam.freq = freq;
 8004014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004016:	2340      	movs	r3, #64	; 0x40
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	605a      	str	r2, [r3, #4]
  }

  /* bandwidth check and set*/
  if (testParam.modulation == 0)
 800401c:	2140      	movs	r1, #64	; 0x40
 800401e:	187b      	adds	r3, r7, r1
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10e      	bne.n	8004044 <AT_test_set_config+0x1a4>
  {
    /*fsk bandwidth check and set*/
    if ((bandwidth >= 4800) && (bandwidth <= 467000))
 8004026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004028:	2396      	movs	r3, #150	; 0x96
 800402a:	015b      	lsls	r3, r3, #5
 800402c:	429a      	cmp	r2, r3
 800402e:	d307      	bcc.n	8004040 <AT_test_set_config+0x1a0>
 8004030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004032:	4a4b      	ldr	r2, [pc, #300]	; (8004160 <AT_test_set_config+0x2c0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d803      	bhi.n	8004040 <AT_test_set_config+0x1a0>
    {
      testParam.bandwidth = bandwidth;
 8004038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403a:	187b      	adds	r3, r7, r1
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	e00f      	b.n	8004060 <AT_test_set_config+0x1c0>
    }
    else
    {

      return AT_PARAM_ERROR;
 8004040:	2302      	movs	r3, #2
 8004042:	e083      	b.n	800414c <AT_test_set_config+0x2ac>
    }
  }
  else if (testParam.modulation == 1)
 8004044:	2140      	movs	r1, #64	; 0x40
 8004046:	187b      	adds	r3, r7, r1
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d108      	bne.n	8004060 <AT_test_set_config+0x1c0>
  {
    /*Lora modulation check and set*/
    if (bandwidth <= BW_500kHz)
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2b06      	cmp	r3, #6
 8004052:	d803      	bhi.n	800405c <AT_test_set_config+0x1bc>
    {
      testParam.bandwidth = bandwidth;
 8004054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004056:	187b      	adds	r3, r7, r1
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	e001      	b.n	8004060 <AT_test_set_config+0x1c0>
    }
    else
    {
      return AT_PARAM_ERROR;
 800405c:	2302      	movs	r3, #2
 800405e:	e075      	b.n	800414c <AT_test_set_config+0x2ac>
  }
  else
  {
  }

  if (lowDrOpt <= 2)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d808      	bhi.n	8004078 <AT_test_set_config+0x1d8>
  {
    testParam.lowDrOpt = lowDrOpt;
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	2140      	movs	r1, #64	; 0x40
 800406a:	187b      	adds	r3, r7, r1
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
  else
  {
    return AT_PARAM_ERROR;
  }

  if (testParam.modulation == 0)
 800406e:	187b      	adds	r3, r7, r1
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d112      	bne.n	800409c <AT_test_set_config+0x1fc>
 8004076:	e001      	b.n	800407c <AT_test_set_config+0x1dc>
    return AT_PARAM_ERROR;
 8004078:	2302      	movs	r3, #2
 800407a:	e067      	b.n	800414c <AT_test_set_config+0x2ac>
  {
    /*fsk modulation check and set*/
    if ((loraSf_datarate >= 600) && (loraSf_datarate <= 300000))
 800407c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407e:	2396      	movs	r3, #150	; 0x96
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	429a      	cmp	r2, r3
 8004084:	d308      	bcc.n	8004098 <AT_test_set_config+0x1f8>
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	4a36      	ldr	r2, [pc, #216]	; (8004164 <AT_test_set_config+0x2c4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d804      	bhi.n	8004098 <AT_test_set_config+0x1f8>
    {
      testParam.loraSf_datarate = loraSf_datarate;
 800408e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004090:	2340      	movs	r3, #64	; 0x40
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	611a      	str	r2, [r3, #16]
 8004096:	e022      	b.n	80040de <AT_test_set_config+0x23e>
    }
    else
    {
      return AT_PARAM_ERROR;
 8004098:	2302      	movs	r3, #2
 800409a:	e057      	b.n	800414c <AT_test_set_config+0x2ac>
    }
  }
  else if (testParam.modulation == 1)
 800409c:	2140      	movs	r1, #64	; 0x40
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10b      	bne.n	80040be <AT_test_set_config+0x21e>
  {
    /*Lora modulation*/
    /*spreading factor check and set*/
    if ((loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d906      	bls.n	80040ba <AT_test_set_config+0x21a>
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	2b0c      	cmp	r3, #12
 80040b0:	d803      	bhi.n	80040ba <AT_test_set_config+0x21a>
    {
      testParam.loraSf_datarate = loraSf_datarate;
 80040b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	611a      	str	r2, [r3, #16]
 80040b8:	e011      	b.n	80040de <AT_test_set_config+0x23e>
    }
    else
    {
      return AT_PARAM_ERROR;
 80040ba:	2302      	movs	r3, #2
 80040bc:	e046      	b.n	800414c <AT_test_set_config+0x2ac>
    }
  }
  else if (testParam.modulation == 2)
 80040be:	2140      	movs	r1, #64	; 0x40
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d10a      	bne.n	80040de <AT_test_set_config+0x23e>
  {
    /*BPSK modulation*/
    /*spreading factor check and set*/
    if (loraSf_datarate <= 1000)
 80040c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ca:	23fa      	movs	r3, #250	; 0xfa
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d803      	bhi.n	80040da <AT_test_set_config+0x23a>
    {
      testParam.loraSf_datarate = loraSf_datarate;
 80040d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d4:	187b      	adds	r3, r7, r1
 80040d6:	611a      	str	r2, [r3, #16]
 80040d8:	e001      	b.n	80040de <AT_test_set_config+0x23e>
    }
    else
    {
      return AT_PARAM_ERROR;
 80040da:	2302      	movs	r3, #2
 80040dc:	e036      	b.n	800414c <AT_test_set_config+0x2ac>
    }
  }

  /* coding rate numerator check and set*/
  if (crNum != 4)
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d001      	beq.n	80040e8 <AT_test_set_config+0x248>
  {
    return AT_PARAM_ERROR;
 80040e4:	2302      	movs	r3, #2
 80040e6:	e031      	b.n	800414c <AT_test_set_config+0x2ac>
  }
  /* check coding rate denominator is ok*/
  if ((codingRate >= 5) && (codingRate <= 8))
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d90b      	bls.n	8004106 <AT_test_set_config+0x266>
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d808      	bhi.n	8004106 <AT_test_set_config+0x266>
  {
    testParam.codingRate = codingRate - 4;
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	1f1a      	subs	r2, r3, #4
 80040f8:	2340      	movs	r3, #64	; 0x40
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	615a      	str	r2, [r3, #20]
  else
  {
    return AT_PARAM_ERROR;
  }
  /* fsk BT product check and set*/
  if (BTproduct <= 4)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d902      	bls.n	800410a <AT_test_set_config+0x26a>
 8004104:	e00b      	b.n	800411e <AT_test_set_config+0x27e>
    return AT_PARAM_ERROR;
 8004106:	2302      	movs	r3, #2
 8004108:	e020      	b.n	800414c <AT_test_set_config+0x2ac>
  {
    /*given in MHz*/
    testParam.BTproduct = BTproduct;
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	2340      	movs	r3, #64	; 0x40
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    return AT_PARAM_ERROR;
  }
  /* fskdDeviation check and se*/
  if ((fskdDeviation >= 600) && (fskdDeviation <= 200000))
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	2396      	movs	r3, #150	; 0x96
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	429a      	cmp	r2, r3
 800411a:	d316      	bcc.n	800414a <AT_test_set_config+0x2aa>
 800411c:	e001      	b.n	8004122 <AT_test_set_config+0x282>
    return AT_PARAM_ERROR;
 800411e:	2302      	movs	r3, #2
 8004120:	e014      	b.n	800414c <AT_test_set_config+0x2ac>
  if ((fskdDeviation >= 600) && (fskdDeviation <= 200000))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4a10      	ldr	r2, [pc, #64]	; (8004168 <AT_test_set_config+0x2c8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d80f      	bhi.n	800414a <AT_test_set_config+0x2aa>
  {
    /*given in MHz*/
    testParam.fskDev = fskdDeviation;
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	2140      	movs	r1, #64	; 0x40
 800412e:	187b      	adds	r3, r7, r1
 8004130:	625a      	str	r2, [r3, #36]	; 0x24
  else
  {
    return AT_PARAM_ERROR;
  }

  testParam.lna = lna;
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	187b      	adds	r3, r7, r1
 8004136:	619a      	str	r2, [r3, #24]
  testParam.paBoost = paBoost;
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	187b      	adds	r3, r7, r1
 800413c:	61da      	str	r2, [r3, #28]

  TST_set_config(&testParam);
 800413e:	187b      	adds	r3, r7, r1
 8004140:	0018      	movs	r0, r3
 8004142:	f000 fce3 	bl	8004b0c <TST_set_config>

  return AT_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <AT_test_set_config+0x2ac>
    return AT_PARAM_ERROR;
 800414a:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_test_set_config_2 */

  /* USER CODE END AT_test_set_config_2 */
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b01d      	add	sp, #116	; 0x74
 8004152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004154:	000061a8 	.word	0x000061a8
 8004158:	0801f71c 	.word	0x0801f71c
 800415c:	0801f744 	.word	0x0801f744
 8004160:	00072038 	.word	0x00072038
 8004164:	000493e0 	.word	0x000493e0
 8004168:	00030d40 	.word	0x00030d40

0800416c <AT_test_stop>:

ATEerror_t AT_test_stop(const char *param)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_stop_1 */

  /* USER CODE END AT_test_stop_1 */
  TST_stop();
 8004174:	f000 fcee 	bl	8004b54 <TST_stop>
  AT_PRINTF("Test Stop\r\n");
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <AT_test_stop+0x24>)
 800417a:	2200      	movs	r2, #0
 800417c:	2100      	movs	r1, #0
 800417e:	2000      	movs	r0, #0
 8004180:	f018 fab8 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 8004184:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_stop_2 */

  /* USER CODE END AT_test_stop_2 */
}
 8004186:	0018      	movs	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	b002      	add	sp, #8
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	0801f75c 	.word	0x0801f75c

08004194 <AT_Certif>:

ATEerror_t AT_Certif(const char *param)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af02      	add	r7, sp, #8
 800419a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Certif_1 */

  /* USER CODE END AT_Certif_1 */
  switch (param[0])
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b30      	cmp	r3, #48	; 0x30
 80041a2:	d002      	beq.n	80041aa <AT_Certif+0x16>
 80041a4:	2b31      	cmp	r3, #49	; 0x31
 80041a6:	d003      	beq.n	80041b0 <AT_Certif+0x1c>
 80041a8:	e022      	b.n	80041f0 <AT_Certif+0x5c>
  {
    case '0':
      LmHandlerJoin(ACTIVATION_TYPE_ABP);
 80041aa:	2001      	movs	r0, #1
 80041ac:	f00a f8a8 	bl	800e300 <LmHandlerJoin>
    case '1':
      LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 80041b0:	2002      	movs	r0, #2
 80041b2:	f00a f8a5 	bl	800e300 <LmHandlerJoin>
      break;
 80041b6:	46c0      	nop			; (mov r8, r8)
    default:
      return AT_PARAM_ERROR;
  }

  UTIL_TIMER_Create(&TxCertifTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnCertifTimer, NULL);  /* 8s */
 80041b8:	4b10      	ldr	r3, [pc, #64]	; (80041fc <AT_Certif+0x68>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	4251      	negs	r1, r2
 80041be:	4810      	ldr	r0, [pc, #64]	; (8004200 <AT_Certif+0x6c>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	9200      	str	r2, [sp, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f019 fb65 	bl	801d894 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxCertifTimer,  8000);  /* 8s */
 80041ca:	23fa      	movs	r3, #250	; 0xfa
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <AT_Certif+0x6c>)
 80041d0:	0011      	movs	r1, r2
 80041d2:	0018      	movs	r0, r3
 80041d4:	f019 fc86 	bl	801dae4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxCertifTimer);
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <AT_Certif+0x6c>)
 80041da:	0018      	movs	r0, r3
 80041dc:	f019 fb92 	bl	801d904 <UTIL_TIMER_Start>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaCertifTx), UTIL_SEQ_RFU, CertifSend);
 80041e0:	4b08      	ldr	r3, [pc, #32]	; (8004204 <AT_Certif+0x70>)
 80041e2:	001a      	movs	r2, r3
 80041e4:	2100      	movs	r1, #0
 80041e6:	2004      	movs	r0, #4
 80041e8:	f018 ff32 	bl	801d050 <UTIL_SEQ_RegTask>

  return AT_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <AT_Certif+0x5e>
      return AT_PARAM_ERROR;
 80041f0:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_Certif_2 */

  /* USER CODE END AT_Certif_2 */
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	0800435d 	.word	0x0800435d
 8004200:	20000348 	.word	0x20000348
 8004204:	08004375 	.word	0x08004375

08004208 <sscanf_uint32_as_hhx>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t sscanf_uint32_as_hhx(const char *from, uint32_t *value)
{
 8004208:	b5b0      	push	{r4, r5, r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af02      	add	r7, sp, #8
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN sscanf_uint32_as_hhx_1 */

  /* USER CODE END sscanf_uint32_as_hhx_1 */
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	1cdc      	adds	r4, r3, #3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	1c9d      	adds	r5, r3, #2
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	4907      	ldr	r1, [pc, #28]	; (800423c <sscanf_uint32_as_hhx+0x34>)
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	9201      	str	r2, [sp, #4]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	002b      	movs	r3, r5
 800422a:	0022      	movs	r2, r4
 800422c:	f01a fba6 	bl	801e97c <tiny_sscanf>
 8004230:	0003      	movs	r3, r0
                     &((unsigned char *)(value))[1],
                     &((unsigned char *)(value))[0]);
  /* USER CODE BEGIN sscanf_uint32_as_hhx_2 */

  /* USER CODE END sscanf_uint32_as_hhx_2 */
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b002      	add	sp, #8
 8004238:	bdb0      	pop	{r4, r5, r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	0801f768 	.word	0x0801f768

08004240 <print_uint32_as_02x>:

static void print_uint32_as_02x(uint32_t value)
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b087      	sub	sp, #28
 8004244:	af04      	add	r7, sp, #16
 8004246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_uint32_as_02x_1 */

  /* USER CODE END print_uint32_as_02x_1 */
  AT_PRINTF("%02x:%02x:%02x:%02x\r\n",
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	3303      	adds	r3, #3
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	001a      	movs	r2, r3
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	3302      	adds	r3, #2
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	0019      	movs	r1, r3
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	3301      	adds	r3, #1
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	0018      	movs	r0, r3
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	001c      	movs	r4, r3
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <print_uint32_as_02x+0x44>)
 8004268:	9403      	str	r4, [sp, #12]
 800426a:	9002      	str	r0, [sp, #8]
 800426c:	9101      	str	r1, [sp, #4]
 800426e:	9200      	str	r2, [sp, #0]
 8004270:	2200      	movs	r2, #0
 8004272:	2100      	movs	r1, #0
 8004274:	2000      	movs	r0, #0
 8004276:	f018 fa3d 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
            (unsigned)((unsigned char *)(&value))[1],
            (unsigned)((unsigned char *)(&value))[0]);
  /* USER CODE BEGIN print_uint32_as_02x_2 */

  /* USER CODE END print_uint32_as_02x_2 */
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b003      	add	sp, #12
 8004280:	bd90      	pop	{r4, r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	0801f77c 	.word	0x0801f77c

08004288 <print_8_02x>:

static void print_8_02x(uint8_t *pt)
{
 8004288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428a:	46ce      	mov	lr, r9
 800428c:	4647      	mov	r7, r8
 800428e:	b580      	push	{r7, lr}
 8004290:	b08b      	sub	sp, #44	; 0x2c
 8004292:	af08      	add	r7, sp, #32
 8004294:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_8_02x_1 */

  /* USER CODE END print_8_02x_1 */
  AT_PRINTF("%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	001a      	movs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3301      	adds	r3, #1
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	0019      	movs	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3302      	adds	r3, #2
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	0018      	movs	r0, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3303      	adds	r3, #3
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	001c      	movs	r4, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	001d      	movs	r5, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3305      	adds	r3, #5
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	001e      	movs	r6, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3306      	adds	r3, #6
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	469c      	mov	ip, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3307      	adds	r3, #7
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	4698      	mov	r8, r3
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <print_8_02x+0x80>)
 80042d6:	4699      	mov	r9, r3
 80042d8:	4643      	mov	r3, r8
 80042da:	9307      	str	r3, [sp, #28]
 80042dc:	4663      	mov	r3, ip
 80042de:	9306      	str	r3, [sp, #24]
 80042e0:	9605      	str	r6, [sp, #20]
 80042e2:	9504      	str	r5, [sp, #16]
 80042e4:	9403      	str	r4, [sp, #12]
 80042e6:	9002      	str	r0, [sp, #8]
 80042e8:	9101      	str	r1, [sp, #4]
 80042ea:	9200      	str	r2, [sp, #0]
 80042ec:	464b      	mov	r3, r9
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	2000      	movs	r0, #0
 80042f4:	f018 f9fe 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
            pt[0], pt[1], pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);
  /* USER CODE BEGIN print_8_02x_2 */

  /* USER CODE END print_8_02x_2 */
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b003      	add	sp, #12
 80042fe:	bcc0      	pop	{r6, r7}
 8004300:	46b9      	mov	r9, r7
 8004302:	46b0      	mov	r8, r6
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	0801f794 	.word	0x0801f794

0800430c <print_d>:

static void print_d(int32_t value)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_d_1 */

  /* USER CODE END print_d_1 */
  AT_PRINTF("%d\r\n", value);
 8004314:	4a06      	ldr	r2, [pc, #24]	; (8004330 <print_d+0x24>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	0013      	movs	r3, r2
 800431c:	2200      	movs	r2, #0
 800431e:	2100      	movs	r1, #0
 8004320:	2000      	movs	r0, #0
 8004322:	f018 f9e7 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN print_d_2 */

  /* USER CODE END print_d_2 */
}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	0801f7c0 	.word	0x0801f7c0

08004334 <print_u>:

static void print_u(uint32_t value)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_u_1 */

  /* USER CODE END print_u_1 */
  AT_PRINTF("%u\r\n", value);
 800433c:	4a06      	ldr	r2, [pc, #24]	; (8004358 <print_u+0x24>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	0013      	movs	r3, r2
 8004344:	2200      	movs	r2, #0
 8004346:	2100      	movs	r1, #0
 8004348:	2000      	movs	r0, #0
 800434a:	f018 f9d3 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN print_u_2 */

  /* USER CODE END print_u_2 */
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b002      	add	sp, #8
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	0801f7c8 	.word	0x0801f7c8

0800435c <OnCertifTimer>:

static void OnCertifTimer(void *context)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnCertifTimer_1 */

  /* USER CODE END OnCertifTimer_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaCertifTx), CFG_SEQ_Prio_0);
 8004364:	2100      	movs	r1, #0
 8004366:	2004      	movs	r0, #4
 8004368:	f018 fe96 	bl	801d098 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnCertifTimer_2 */

  /* USER CODE END OnCertifTimer_2 */
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}

08004374 <CertifSend>:

static void CertifSend(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CertifSend_1 */

  /* USER CODE END CertifSend_1 */
  AppData.Buffer[0] = 0x43;
 8004378:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <CertifSend+0x3c>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2243      	movs	r2, #67	; 0x43
 800437e:	701a      	strb	r2, [r3, #0]
  AppData.BufferSize = 1;
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <CertifSend+0x3c>)
 8004382:	2201      	movs	r2, #1
 8004384:	705a      	strb	r2, [r3, #1]
  AppData.Port = 99;
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <CertifSend+0x3c>)
 8004388:	2263      	movs	r2, #99	; 0x63
 800438a:	701a      	strb	r2, [r3, #0]

  /* Restart Tx to prevent a previous Join Failed */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800438c:	f009 ff98 	bl	800e2c0 <LmHandlerJoinStatus>
 8004390:	0003      	movs	r3, r0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d003      	beq.n	800439e <CertifSend+0x2a>
  {
    UTIL_TIMER_Start(&TxCertifTimer);
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <CertifSend+0x40>)
 8004398:	0018      	movs	r0, r3
 800439a:	f019 fab3 	bl	801d904 <UTIL_TIMER_Start>
  }
  LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 800439e:	4804      	ldr	r0, [pc, #16]	; (80043b0 <CertifSend+0x3c>)
 80043a0:	2300      	movs	r3, #0
 80043a2:	2200      	movs	r2, #0
 80043a4:	2100      	movs	r1, #0
 80043a6:	f00a f833 	bl	800e410 <LmHandlerSend>
}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000028 	.word	0x20000028
 80043b4:	20000348 	.word	0x20000348

080043b8 <CMD_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
void CMD_Init(void (*CmdProcessNotify)(void))
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CMD_Init_1 */

  /* USER CODE END CMD_Init_1 */
  UTIL_ADV_TRACE_StartRxProcess(CMD_GetChar);
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <CMD_Init+0x44>)
 80043c2:	0018      	movs	r0, r3
 80043c4:	f018 f986 	bl	801c6d4 <UTIL_ADV_TRACE_StartRxProcess>
  /* register call back*/
  if (CmdProcessNotify != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <CMD_Init+0x1c>
  {
    NotifyCb = CmdProcessNotify;
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <CMD_Init+0x48>)
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	601a      	str	r2, [r3, #0]
  }
  widx = 0;
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <CMD_Init+0x4c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
  ridx = 0;
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <CMD_Init+0x50>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
  charCount = 0;
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <CMD_Init+0x54>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
  i = 0;
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <CMD_Init+0x58>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
  circBuffOverflow = 0;
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <CMD_Init+0x5c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN CMD_Init_2 */

  /* USER CODE END CMD_Init_2 */
}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	080046c1 	.word	0x080046c1
 8004400:	20000598 	.word	0x20000598
 8004404:	20000588 	.word	0x20000588
 8004408:	2000058c 	.word	0x2000058c
 800440c:	20000590 	.word	0x20000590
 8004410:	20000584 	.word	0x20000584
 8004414:	20000594 	.word	0x20000594

08004418 <CMD_Process>:

void CMD_Process(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b090      	sub	sp, #64	; 0x40
 800441c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CMD_Process_1 */

  /* USER CODE END CMD_Process_1 */
  /* Process all commands */
  if (circBuffOverflow == 1)
 800441e:	4b6b      	ldr	r3, [pc, #428]	; (80045cc <CMD_Process+0x1b4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d000      	beq.n	8004428 <CMD_Process+0x10>
 8004426:	e0c7      	b.n	80045b8 <CMD_Process+0x1a0>
  {
    com_error(AT_TEST_PARAM_OVERFLOW);
 8004428:	2004      	movs	r0, #4
 800442a:	f000 fa5d 	bl	80048e8 <com_error>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442e:	f3ef 8310 	mrs	r3, PRIMASK
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /*Full flush in case of overflow */
    UTILS_ENTER_CRITICAL_SECTION();
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8004438:	b672      	cpsid	i
}
 800443a:	46c0      	nop			; (mov r8, r8)
    ridx = widx;
 800443c:	4b64      	ldr	r3, [pc, #400]	; (80045d0 <CMD_Process+0x1b8>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b64      	ldr	r3, [pc, #400]	; (80045d4 <CMD_Process+0x1bc>)
 8004442:	601a      	str	r2, [r3, #0]
    charCount = 0;
 8004444:	4b64      	ldr	r3, [pc, #400]	; (80045d8 <CMD_Process+0x1c0>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
    circBuffOverflow = 0;
 800444a:	4b60      	ldr	r3, [pc, #384]	; (80045cc <CMD_Process+0x1b4>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	f383 8810 	msr	PRIMASK, r3
}
 800445a:	46c0      	nop			; (mov r8, r8)
    UTILS_EXIT_CRITICAL_SECTION();
    i = 0;
 800445c:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <CMD_Process+0x1c4>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
  }

  while (charCount != 0)
 8004462:	e0a9      	b.n	80045b8 <CMD_Process+0x1a0>
  {
#if 0 /* echo On    */
    AT_PPRINTF("%c", circBuffer[ridx]);
#endif /* 0 */

    if (circBuffer[ridx] == AT_ERROR_RX_CHAR)
 8004464:	4b5b      	ldr	r3, [pc, #364]	; (80045d4 <CMD_Process+0x1bc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a5d      	ldr	r2, [pc, #372]	; (80045e0 <CMD_Process+0x1c8>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d124      	bne.n	80044ba <CMD_Process+0xa2>
    {
      ridx++;
 8004470:	4b58      	ldr	r3, [pc, #352]	; (80045d4 <CMD_Process+0x1bc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	4b57      	ldr	r3, [pc, #348]	; (80045d4 <CMD_Process+0x1bc>)
 8004478:	601a      	str	r2, [r3, #0]
      if (ridx == CIRC_BUFF_SIZE)
 800447a:	4b56      	ldr	r3, [pc, #344]	; (80045d4 <CMD_Process+0x1bc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d102      	bne.n	8004488 <CMD_Process+0x70>
      {
        ridx = 0;
 8004482:	4b54      	ldr	r3, [pc, #336]	; (80045d4 <CMD_Process+0x1bc>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004488:	f3ef 8310 	mrs	r3, PRIMASK
 800448c:	61fb      	str	r3, [r7, #28]
  return(result);
 800448e:	69fb      	ldr	r3, [r7, #28]
      }
      UTILS_ENTER_CRITICAL_SECTION();
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8004492:	b672      	cpsid	i
}
 8004494:	46c0      	nop			; (mov r8, r8)
      charCount--;
 8004496:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <CMD_Process+0x1c0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	1e5a      	subs	r2, r3, #1
 800449c:	4b4e      	ldr	r3, [pc, #312]	; (80045d8 <CMD_Process+0x1c0>)
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f383 8810 	msr	PRIMASK, r3
}
 80044aa:	46c0      	nop			; (mov r8, r8)
      UTILS_EXIT_CRITICAL_SECTION();
      com_error(AT_RX_ERROR);
 80044ac:	2006      	movs	r0, #6
 80044ae:	f000 fa1b 	bl	80048e8 <com_error>
      i = 0;
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <CMD_Process+0x1c4>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e07e      	b.n	80045b8 <CMD_Process+0x1a0>
    }
    else if ((circBuffer[ridx] == '\r') || (circBuffer[ridx] == '\n'))
 80044ba:	4b46      	ldr	r3, [pc, #280]	; (80045d4 <CMD_Process+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a48      	ldr	r2, [pc, #288]	; (80045e0 <CMD_Process+0x1c8>)
 80044c0:	5cd3      	ldrb	r3, [r2, r3]
 80044c2:	2b0d      	cmp	r3, #13
 80044c4:	d005      	beq.n	80044d2 <CMD_Process+0xba>
 80044c6:	4b43      	ldr	r3, [pc, #268]	; (80045d4 <CMD_Process+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a45      	ldr	r2, [pc, #276]	; (80045e0 <CMD_Process+0x1c8>)
 80044cc:	5cd3      	ldrb	r3, [r2, r3]
 80044ce:	2b0a      	cmp	r3, #10
 80044d0:	d13f      	bne.n	8004552 <CMD_Process+0x13a>
    {
      ridx++;
 80044d2:	4b40      	ldr	r3, [pc, #256]	; (80045d4 <CMD_Process+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <CMD_Process+0x1bc>)
 80044da:	601a      	str	r2, [r3, #0]
      if (ridx == CIRC_BUFF_SIZE)
 80044dc:	4b3d      	ldr	r3, [pc, #244]	; (80045d4 <CMD_Process+0x1bc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d102      	bne.n	80044ea <CMD_Process+0xd2>
      {
        ridx = 0;
 80044e4:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <CMD_Process+0x1bc>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ea:	f3ef 8310 	mrs	r3, PRIMASK
 80044ee:	617b      	str	r3, [r7, #20]
  return(result);
 80044f0:	697b      	ldr	r3, [r7, #20]
      }
      UTILS_ENTER_CRITICAL_SECTION();
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80044f4:	b672      	cpsid	i
}
 80044f6:	46c0      	nop			; (mov r8, r8)
      charCount--;
 80044f8:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <CMD_Process+0x1c0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1e5a      	subs	r2, r3, #1
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <CMD_Process+0x1c0>)
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004504:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f383 8810 	msr	PRIMASK, r3
}
 800450c:	46c0      	nop			; (mov r8, r8)
      UTILS_EXIT_CRITICAL_SECTION();

      if (i != 0)
 800450e:	4b33      	ldr	r3, [pc, #204]	; (80045dc <CMD_Process+0x1c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d050      	beq.n	80045b8 <CMD_Process+0x1a0>
      {
        command[i] = '\0';
 8004516:	4b31      	ldr	r3, [pc, #196]	; (80045dc <CMD_Process+0x1c4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a32      	ldr	r2, [pc, #200]	; (80045e4 <CMD_Process+0x1cc>)
 800451c:	2100      	movs	r1, #0
 800451e:	54d1      	strb	r1, [r2, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004520:	f3ef 8310 	mrs	r3, PRIMASK
 8004524:	60fb      	str	r3, [r7, #12]
  return(result);
 8004526:	68fb      	ldr	r3, [r7, #12]
        UTILS_ENTER_CRITICAL_SECTION();
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 800452a:	b672      	cpsid	i
}
 800452c:	46c0      	nop			; (mov r8, r8)
        CMD_ProcessBackSpace(command);
 800452e:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <CMD_Process+0x1cc>)
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f85b 	bl	80045ec <CMD_ProcessBackSpace>
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f383 8810 	msr	PRIMASK, r3
}
 8004540:	46c0      	nop			; (mov r8, r8)
        UTILS_EXIT_CRITICAL_SECTION();
        parse_cmd(command);
 8004542:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <CMD_Process+0x1cc>)
 8004544:	0018      	movs	r0, r3
 8004546:	f000 f8ff 	bl	8004748 <parse_cmd>
        i = 0;
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <CMD_Process+0x1c4>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
    {
 8004550:	e032      	b.n	80045b8 <CMD_Process+0x1a0>
      }
    }
    else if (i == (CMD_SIZE - 1))
 8004552:	4b22      	ldr	r3, [pc, #136]	; (80045dc <CMD_Process+0x1c4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <CMD_Process+0x1d0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d106      	bne.n	800456a <CMD_Process+0x152>
    {
      i = 0;
 800455c:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <CMD_Process+0x1c4>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
      com_error(AT_TEST_PARAM_OVERFLOW);
 8004562:	2004      	movs	r0, #4
 8004564:	f000 f9c0 	bl	80048e8 <com_error>
 8004568:	e026      	b.n	80045b8 <CMD_Process+0x1a0>
    }
    else
    {
      command[i++] = circBuffer[ridx++];
 800456a:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <CMD_Process+0x1bc>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	1c51      	adds	r1, r2, #1
 8004570:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <CMD_Process+0x1bc>)
 8004572:	6019      	str	r1, [r3, #0]
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <CMD_Process+0x1c4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	1c58      	adds	r0, r3, #1
 800457a:	4918      	ldr	r1, [pc, #96]	; (80045dc <CMD_Process+0x1c4>)
 800457c:	6008      	str	r0, [r1, #0]
 800457e:	4918      	ldr	r1, [pc, #96]	; (80045e0 <CMD_Process+0x1c8>)
 8004580:	5c89      	ldrb	r1, [r1, r2]
 8004582:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <CMD_Process+0x1cc>)
 8004584:	54d1      	strb	r1, [r2, r3]
      if (ridx == CIRC_BUFF_SIZE)
 8004586:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <CMD_Process+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b08      	cmp	r3, #8
 800458c:	d102      	bne.n	8004594 <CMD_Process+0x17c>
      {
        ridx = 0;
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <CMD_Process+0x1bc>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004594:	f3ef 8310 	mrs	r3, PRIMASK
 8004598:	607b      	str	r3, [r7, #4]
  return(result);
 800459a:	687b      	ldr	r3, [r7, #4]
      }
      UTILS_ENTER_CRITICAL_SECTION();
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("cpsid i" : : : "memory");
 800459e:	b672      	cpsid	i
}
 80045a0:	46c0      	nop			; (mov r8, r8)
      charCount--;
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <CMD_Process+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1e5a      	subs	r2, r3, #1
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <CMD_Process+0x1c0>)
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)
  while (charCount != 0)
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <CMD_Process+0x1c0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d000      	beq.n	80045c2 <CMD_Process+0x1aa>
 80045c0:	e750      	b.n	8004464 <CMD_Process+0x4c>
    }
  }
  /* USER CODE BEGIN CMD_Process_2 */

  /* USER CODE END CMD_Process_2 */
}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b010      	add	sp, #64	; 0x40
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20000594 	.word	0x20000594
 80045d0:	20000588 	.word	0x20000588
 80045d4:	2000058c 	.word	0x2000058c
 80045d8:	20000590 	.word	0x20000590
 80045dc:	20000584 	.word	0x20000584
 80045e0:	20000360 	.word	0x20000360
 80045e4:	20000368 	.word	0x20000368
 80045e8:	0000021b 	.word	0x0000021b

080045ec <CMD_ProcessBackSpace>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t CMD_ProcessBackSpace(char *cmd)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CMD_ProcessBackSpace_1 */

  /* USER CODE END CMD_ProcessBackSpace_1 */
  uint32_t i = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t bs_cnt = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61bb      	str	r3, [r7, #24]
  uint32_t cmd_len = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  /*get command length and number of backspace*/
  while (cmd[cmd_len] != '\0')
 8004600:	e00b      	b.n	800461a <CMD_ProcessBackSpace+0x2e>
  {
    if (cmd[cmd_len] == '\b')
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	18d3      	adds	r3, r2, r3
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b08      	cmp	r3, #8
 800460c:	d102      	bne.n	8004614 <CMD_ProcessBackSpace+0x28>
    {
      bs_cnt++;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3301      	adds	r3, #1
 8004612:	61bb      	str	r3, [r7, #24]
    }
    cmd_len++;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	3301      	adds	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
  while (cmd[cmd_len] != '\0')
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	18d3      	adds	r3, r2, r3
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ed      	bne.n	8004602 <CMD_ProcessBackSpace+0x16>
  }
  /*for every backspace, remove backspace and its preceding character*/
  for (i = 0; i < bs_cnt; i++)
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e03f      	b.n	80046ac <CMD_ProcessBackSpace+0xc0>
  {
    int curs = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
    int j = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

    /*set cursor to backspace*/
    while (cmd[curs] != '\b')
 8004634:	e002      	b.n	800463c <CMD_ProcessBackSpace+0x50>
    {
      curs++;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3301      	adds	r3, #1
 800463a:	613b      	str	r3, [r7, #16]
    while (cmd[curs] != '\b')
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	18d3      	adds	r3, r2, r3
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d1f6      	bne.n	8004636 <CMD_ProcessBackSpace+0x4a>
    }
    if (curs > 0)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	dd28      	ble.n	80046a0 <CMD_ProcessBackSpace+0xb4>
    {
      for (j = curs - 1; j < cmd_len - 2; j++)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	3b01      	subs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e00b      	b.n	800466e <CMD_ProcessBackSpace+0x82>
      {
        cmd[j] = cmd[j + 2];
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3302      	adds	r3, #2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	18d2      	adds	r2, r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	18cb      	adds	r3, r1, r3
 8004664:	7812      	ldrb	r2, [r2, #0]
 8004666:	701a      	strb	r2, [r3, #0]
      for (j = curs - 1; j < cmd_len - 2; j++)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	1e9a      	subs	r2, r3, #2
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	429a      	cmp	r2, r3
 8004676:	d8ee      	bhi.n	8004656 <CMD_ProcessBackSpace+0x6a>
      }
      cmd[j++] = '\0';
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	60fa      	str	r2, [r7, #12]
 800467e:	001a      	movs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	189b      	adds	r3, r3, r2
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
      cmd[j++] = '\0';
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	60fa      	str	r2, [r7, #12]
 800468e:	001a      	movs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	189b      	adds	r3, r3, r2
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
      cmd_len -= 2;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3b02      	subs	r3, #2
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e002      	b.n	80046a6 <CMD_ProcessBackSpace+0xba>
    }
    else
    {
      return -1;
 80046a0:	2301      	movs	r3, #1
 80046a2:	425b      	negs	r3, r3
 80046a4:	e007      	b.n	80046b6 <CMD_ProcessBackSpace+0xca>
  for (i = 0; i < bs_cnt; i++)
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3301      	adds	r3, #1
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3bb      	bcc.n	800462c <CMD_ProcessBackSpace+0x40>
    }
  }
  return 0;
 80046b4:	2300      	movs	r3, #0
  /* USER CODE BEGIN CMD_ProcessBackSpace_2 */

  /* USER CODE END CMD_ProcessBackSpace_2 */
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b008      	add	sp, #32
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <CMD_GetChar>:

static void CMD_GetChar(uint8_t *rxChar, uint16_t size, uint8_t error)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	0008      	movs	r0, r1
 80046ca:	0011      	movs	r1, r2
 80046cc:	1cbb      	adds	r3, r7, #2
 80046ce:	1c02      	adds	r2, r0, #0
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	1c7b      	adds	r3, r7, #1
 80046d4:	1c0a      	adds	r2, r1, #0
 80046d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CMD_GetChar_1 */

  /* USER CODE END CMD_GetChar_1 */
  charCount++;
 80046d8:	4b16      	ldr	r3, [pc, #88]	; (8004734 <CMD_GetChar+0x74>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <CMD_GetChar+0x74>)
 80046e0:	601a      	str	r2, [r3, #0]
  if (charCount == (CIRC_BUFF_SIZE + 1))
 80046e2:	4b14      	ldr	r3, [pc, #80]	; (8004734 <CMD_GetChar+0x74>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b09      	cmp	r3, #9
 80046e8:	d108      	bne.n	80046fc <CMD_GetChar+0x3c>
  {
    circBuffOverflow = 1;
 80046ea:	4b13      	ldr	r3, [pc, #76]	; (8004738 <CMD_GetChar+0x78>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
    charCount--;
 80046f0:	4b10      	ldr	r3, [pc, #64]	; (8004734 <CMD_GetChar+0x74>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	1e5a      	subs	r2, r3, #1
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <CMD_GetChar+0x74>)
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e00f      	b.n	800471c <CMD_GetChar+0x5c>
  }
  else
  {
    circBuffer[widx++] = *rxChar;
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <CMD_GetChar+0x7c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	1c59      	adds	r1, r3, #1
 8004702:	4a0e      	ldr	r2, [pc, #56]	; (800473c <CMD_GetChar+0x7c>)
 8004704:	6011      	str	r1, [r2, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	7811      	ldrb	r1, [r2, #0]
 800470a:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <CMD_GetChar+0x80>)
 800470c:	54d1      	strb	r1, [r2, r3]
    if (widx == CIRC_BUFF_SIZE)
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <CMD_GetChar+0x7c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b08      	cmp	r3, #8
 8004714:	d102      	bne.n	800471c <CMD_GetChar+0x5c>
    {
      widx = 0;
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <CMD_GetChar+0x7c>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
    }
  }

  if (NotifyCb != NULL)
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <CMD_GetChar+0x84>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <CMD_GetChar+0x6a>
  {
    NotifyCb();
 8004724:	4b07      	ldr	r3, [pc, #28]	; (8004744 <CMD_GetChar+0x84>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4798      	blx	r3
  }
  /* USER CODE BEGIN CMD_GetChar_2 */

  /* USER CODE END CMD_GetChar_2 */
}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	46bd      	mov	sp, r7
 800472e:	b002      	add	sp, #8
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	20000590 	.word	0x20000590
 8004738:	20000594 	.word	0x20000594
 800473c:	20000588 	.word	0x20000588
 8004740:	20000360 	.word	0x20000360
 8004744:	20000598 	.word	0x20000598

08004748 <parse_cmd>:

static void parse_cmd(const char *cmd)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN parse_cmd_1 */

  /* USER CODE END parse_cmd_1 */
  ATEerror_t status = AT_OK;
 8004750:	2317      	movs	r3, #23
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
  const struct ATCommand_s *Current_ATCommand;
  int32_t i;

  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b41      	cmp	r3, #65	; 0x41
 800475e:	d104      	bne.n	800476a <parse_cmd+0x22>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3301      	adds	r3, #1
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b54      	cmp	r3, #84	; 0x54
 8004768:	d004      	beq.n	8004774 <parse_cmd+0x2c>
  {
    status = AT_ERROR;
 800476a:	2317      	movs	r3, #23
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e0ab      	b.n	80048cc <parse_cmd+0x184>
  }
  else if (cmd[2] == '\0')
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3302      	adds	r3, #2
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d100      	bne.n	8004780 <parse_cmd+0x38>
 800477e:	e0a5      	b.n	80048cc <parse_cmd+0x184>
  {
    /* status = AT_OK; */
  }
  else if (cmd[2] == '?')
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3302      	adds	r3, #2
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b3f      	cmp	r3, #63	; 0x3f
 8004788:	d124      	bne.n	80047d4 <parse_cmd+0x8c>
  {
#ifdef NO_HELP
#else
    AT_PPRINTF("AT+<CMD>?        : Help on <CMD>\r\n"
 800478a:	4b55      	ldr	r3, [pc, #340]	; (80048e0 <parse_cmd+0x198>)
 800478c:	2200      	movs	r2, #0
 800478e:	2100      	movs	r1, #0
 8004790:	2000      	movs	r0, #0
 8004792:	f017 ffaf 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 8004796:	1e03      	subs	r3, r0, #0
 8004798:	d1f7      	bne.n	800478a <parse_cmd+0x42>
               "AT+<CMD>         : Run <CMD>\r\n"
               "AT+<CMD>=<value> : Set the value\r\n"
               "AT+<CMD>=?       : Get the value\r\n");
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	e012      	b.n	80047c6 <parse_cmd+0x7e>
    {
      AT_PPRINTF(ATCommand[i].help_string);
 80047a0:	4950      	ldr	r1, [pc, #320]	; (80048e4 <parse_cmd+0x19c>)
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	0013      	movs	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	189b      	adds	r3, r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	18cb      	adds	r3, r1, r3
 80047ae:	3314      	adds	r3, #20
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2100      	movs	r1, #0
 80047b6:	2000      	movs	r0, #0
 80047b8:	f017 ff9c 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 80047bc:	1e03      	subs	r3, r0, #0
 80047be:	d1ef      	bne.n	80047a0 <parse_cmd+0x58>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	3301      	adds	r3, #1
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b21      	cmp	r3, #33	; 0x21
 80047ca:	d9e9      	bls.n	80047a0 <parse_cmd+0x58>
    }
    /* Wait for the message queue to be flushed in order
       not to disturb following com_error() display */
    HAL_Delay(HELP_DISPLAY_FLUSH_DELAY);
 80047cc:	2064      	movs	r0, #100	; 0x64
 80047ce:	f001 fe2e 	bl	800642e <HAL_Delay>
 80047d2:	e07b      	b.n	80048cc <parse_cmd+0x184>
#endif /* !NO_HELP */
  }
  else
  {
    /* point to the start of the command, excluding AT */
    status = AT_ERROR;
 80047d4:	2317      	movs	r3, #23
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	2201      	movs	r2, #1
 80047da:	701a      	strb	r2, [r3, #0]
    cmd += 2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3302      	adds	r3, #2
 80047e0:	607b      	str	r3, [r7, #4]
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e06e      	b.n	80048c6 <parse_cmd+0x17e>
    {
      if (strncmp(cmd, ATCommand[i].string, ATCommand[i].size_string) == 0)
 80047e8:	493e      	ldr	r1, [pc, #248]	; (80048e4 <parse_cmd+0x19c>)
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	0013      	movs	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	189b      	adds	r3, r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	5858      	ldr	r0, [r3, r1]
 80047f6:	493b      	ldr	r1, [pc, #236]	; (80048e4 <parse_cmd+0x19c>)
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	0013      	movs	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	18cb      	adds	r3, r1, r3
 8004804:	3304      	adds	r3, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	001a      	movs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0001      	movs	r1, r0
 800480e:	0018      	movs	r0, r3
 8004810:	f01a fb31 	bl	801ee76 <strncmp>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d153      	bne.n	80048c0 <parse_cmd+0x178>
      {
        Current_ATCommand = &(ATCommand[i]);
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	0013      	movs	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	189b      	adds	r3, r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4a30      	ldr	r2, [pc, #192]	; (80048e4 <parse_cmd+0x19c>)
 8004824:	189b      	adds	r3, r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
        /* point to the string after the command to parse it */
        cmd += Current_ATCommand->size_string;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	001a      	movs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	189b      	adds	r3, r3, r2
 8004832:	607b      	str	r3, [r7, #4]

        /* parse after the command */
        switch (cmd[0])
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b3f      	cmp	r3, #63	; 0x3f
 800483a:	d031      	beq.n	80048a0 <parse_cmd+0x158>
 800483c:	dc3e      	bgt.n	80048bc <parse_cmd+0x174>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <parse_cmd+0x100>
 8004842:	2b3d      	cmp	r3, #61	; 0x3d
 8004844:	d00a      	beq.n	800485c <parse_cmd+0x114>
#endif /* !NO_HELP */
            status = AT_OK;
            break;
          default:
            /* not recognized */
            break;
 8004846:	e039      	b.n	80048bc <parse_cmd+0x174>
            status = Current_ATCommand->run(cmd);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2217      	movs	r2, #23
 800484e:	18bc      	adds	r4, r7, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	0010      	movs	r0, r2
 8004854:	4798      	blx	r3
 8004856:	0003      	movs	r3, r0
 8004858:	7023      	strb	r3, [r4, #0]
            break;
 800485a:	e030      	b.n	80048be <parse_cmd+0x176>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3301      	adds	r3, #1
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b3f      	cmp	r3, #63	; 0x3f
 8004864:	d110      	bne.n	8004888 <parse_cmd+0x140>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3302      	adds	r3, #2
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <parse_cmd+0x140>
              status = Current_ATCommand->get(cmd + 1);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	3201      	adds	r2, #1
 8004878:	2117      	movs	r1, #23
 800487a:	187c      	adds	r4, r7, r1
 800487c:	0010      	movs	r0, r2
 800487e:	4798      	blx	r3
 8004880:	0003      	movs	r3, r0
 8004882:	7023      	strb	r3, [r4, #0]
 8004884:	46c0      	nop			; (mov r8, r8)
            break;
 8004886:	e01a      	b.n	80048be <parse_cmd+0x176>
              status = Current_ATCommand->set(cmd + 1);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	3201      	adds	r2, #1
 8004890:	2117      	movs	r1, #23
 8004892:	187c      	adds	r4, r7, r1
 8004894:	0010      	movs	r0, r2
 8004896:	4798      	blx	r3
 8004898:	0003      	movs	r3, r0
 800489a:	7023      	strb	r3, [r4, #0]
            break;
 800489c:	e00f      	b.n	80048be <parse_cmd+0x176>
          case '?':
 800489e:	46c0      	nop			; (mov r8, r8)
            AT_PPRINTF(Current_ATCommand->help_string);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2100      	movs	r1, #0
 80048a8:	2000      	movs	r0, #0
 80048aa:	f017 ff23 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 80048ae:	1e03      	subs	r3, r0, #0
 80048b0:	d1f5      	bne.n	800489e <parse_cmd+0x156>
            status = AT_OK;
 80048b2:	2317      	movs	r3, #23
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]
            break;
 80048ba:	e000      	b.n	80048be <parse_cmd+0x176>
            break;
 80048bc:	46c0      	nop			; (mov r8, r8)
        }

        /* we end the loop as the command was found */
        break;
 80048be:	e005      	b.n	80048cc <parse_cmd+0x184>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	3301      	adds	r3, #1
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b21      	cmp	r3, #33	; 0x21
 80048ca:	d98d      	bls.n	80047e8 <parse_cmd+0xa0>
      }
    }
  }

  com_error(status);
 80048cc:	2317      	movs	r3, #23
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 f808 	bl	80048e8 <com_error>
  /* USER CODE BEGIN parse_cmd_2 */

  /* USER CODE END parse_cmd_2 */
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	b007      	add	sp, #28
 80048de:	bd90      	pop	{r4, r7, pc}
 80048e0:	08020814 	.word	0x08020814
 80048e4:	080204e4 	.word	0x080204e4

080048e8 <com_error>:

static void com_error(ATEerror_t error_type)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	0002      	movs	r2, r0
 80048f0:	1dfb      	adds	r3, r7, #7
 80048f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN com_error_1 */

  /* USER CODE END com_error_1 */
  if (error_type > AT_MAX)
 80048f4:	1dfb      	adds	r3, r7, #7
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b0a      	cmp	r3, #10
 80048fa:	d902      	bls.n	8004902 <com_error+0x1a>
  {
    error_type = AT_MAX;
 80048fc:	1dfb      	adds	r3, r7, #7
 80048fe:	220a      	movs	r2, #10
 8004900:	701a      	strb	r2, [r3, #0]
  }
  AT_PPRINTF(ATError_description[error_type]);
 8004902:	1dfb      	adds	r3, r7, #7
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <com_error+0x48>)
 8004908:	0092      	lsls	r2, r2, #2
 800490a:	58d3      	ldr	r3, [r2, r3]
 800490c:	2200      	movs	r2, #0
 800490e:	2100      	movs	r1, #0
 8004910:	2000      	movs	r0, #0
 8004912:	f017 feef 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
 8004916:	0003      	movs	r3, r0
 8004918:	0019      	movs	r1, r3
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	1dfa      	adds	r2, r7, #7
 800491e:	7812      	ldrb	r2, [r2, #0]
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	2900      	cmp	r1, #0
 8004924:	d1ed      	bne.n	8004902 <com_error+0x1a>
  /* USER CODE BEGIN com_error_2 */

  /* USER CODE END com_error_2 */
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46c0      	nop			; (mov r8, r8)
 800492a:	46bd      	mov	sp, r7
 800492c:	b002      	add	sp, #8
 800492e:	bd80      	pop	{r7, pc}
 8004930:	0801f8c8 	.word	0x0801f8c8

08004934 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <LoraInfo_Init+0x50>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <LoraInfo_Init+0x50>)
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <LoraInfo_Init+0x50>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <LoraInfo_Init+0x50>)
 800494c:	2200      	movs	r2, #0
 800494e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <LoraInfo_Init+0x50>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	431a      	orrs	r2, r3
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <LoraInfo_Init+0x50>)
 800495a:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <LoraInfo_Init+0x50>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <LoraInfo_Init+0x54>)
 8004966:	2200      	movs	r2, #0
 8004968:	2100      	movs	r1, #0
 800496a:	2000      	movs	r0, #0
 800496c:	f017 fec2 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 8004970:	e7fe      	b.n	8004970 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8004972:	4b04      	ldr	r3, [pc, #16]	; (8004984 <LoraInfo_Init+0x50>)
 8004974:	2200      	movs	r2, #0
 8004976:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <LoraInfo_Init+0x50>)
 800497a:	2203      	movs	r2, #3
 800497c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	2000059c 	.word	0x2000059c
 8004988:	080208ac 	.word	0x080208ac

0800498c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8004990:	4b01      	ldr	r3, [pc, #4]	; (8004998 <LoraInfo_GetPtr+0xc>)
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	2000059c 	.word	0x2000059c

0800499c <TST_TxTone>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t TST_TxTone(void)
{
 800499c:	b5b0      	push	{r4, r5, r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TST_TxTone_1 */

  /* USER CODE END TST_TxTone_1 */
  if ((TestState & TX_TEST_TONE) != TX_TEST_TONE)
 80049a0:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <TST_TxTone+0x4c>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	001a      	movs	r2, r3
 80049a6:	2301      	movs	r3, #1
 80049a8:	4013      	ands	r3, r2
 80049aa:	d118      	bne.n	80049de <TST_TxTone+0x42>
  {
    TestState |= TX_TEST_TONE;
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <TST_TxTone+0x4c>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	4313      	orrs	r3, r2
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <TST_TxTone+0x4c>)
 80049b8:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Tx FSK Test\r\n");
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <TST_TxTone+0x50>)
 80049bc:	2201      	movs	r2, #1
 80049be:	2100      	movs	r1, #0
 80049c0:	2000      	movs	r0, #0
 80049c2:	f017 fe97 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>

    Radio.SetTxContinuousWave(testParam.freq, testParam.power, CONTIUNUOUS_TIMEOUT);
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <TST_TxTone+0x54>)
 80049c8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80049ca:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <TST_TxTone+0x58>)
 80049cc:	6858      	ldr	r0, [r3, #4]
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <TST_TxTone+0x58>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	b25b      	sxtb	r3, r3
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <TST_TxTone+0x5c>)
 80049d6:	0019      	movs	r1, r3
 80049d8:	47a0      	blx	r4

    return 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	e001      	b.n	80049e2 <TST_TxTone+0x46>
  }
  else
  {
    return -1;
 80049de:	2301      	movs	r3, #1
 80049e0:	425b      	negs	r3, r3
  }
  /* USER CODE BEGIN TST_TxTone_2 */

  /* USER CODE END TST_TxTone_2 */
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bdb0      	pop	{r4, r5, r7, pc}
 80049e8:	200005ac 	.word	0x200005ac
 80049ec:	080208fc 	.word	0x080208fc
 80049f0:	08021740 	.word	0x08021740
 80049f4:	20000030 	.word	0x20000030
 80049f8:	0000ffff 	.word	0x0000ffff

080049fc <TST_RxRssi>:

int32_t TST_RxRssi(void)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b08d      	sub	sp, #52	; 0x34
 8004a00:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN TST_RxRssi_1 */

  /* USER CODE END TST_RxRssi_1 */
  uint32_t timeout = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
  int16_t rssiVal = 0;
 8004a06:	1cbb      	adds	r3, r7, #2
 8004a08:	2200      	movs	r2, #0
 8004a0a:	801a      	strh	r2, [r3, #0]

  /* Test with LNA */
  /* check that test is not already started*/
  if ((TestState & RX_TEST_RSSI) != RX_TEST_RSSI)
 8004a0c:	4b37      	ldr	r3, [pc, #220]	; (8004aec <TST_RxRssi+0xf0>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	001a      	movs	r2, r3
 8004a12:	2302      	movs	r3, #2
 8004a14:	4013      	ands	r3, r2
 8004a16:	d163      	bne.n	8004ae0 <TST_RxRssi+0xe4>
  {
    TestState |= RX_TEST_RSSI;
 8004a18:	4b34      	ldr	r3, [pc, #208]	; (8004aec <TST_RxRssi+0xf0>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	4b32      	ldr	r3, [pc, #200]	; (8004aec <TST_RxRssi+0xf0>)
 8004a24:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Rx FSK Test\r\n");
 8004a26:	4b32      	ldr	r3, [pc, #200]	; (8004af0 <TST_RxRssi+0xf4>)
 8004a28:	2201      	movs	r2, #1
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f017 fe61 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>

    Radio.SetChannel(testParam.freq);
 8004a32:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <TST_RxRssi+0xf8>)
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <TST_RxRssi+0xfc>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	4790      	blx	r2

    /* RX Continuous */
    Radio.SetRxConfig(MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 8004a3e:	4b2d      	ldr	r3, [pc, #180]	; (8004af4 <TST_RxRssi+0xf8>)
 8004a40:	699c      	ldr	r4, [r3, #24]
 8004a42:	4a2e      	ldr	r2, [pc, #184]	; (8004afc <TST_RxRssi+0x100>)
 8004a44:	492d      	ldr	r1, [pc, #180]	; (8004afc <TST_RxRssi+0x100>)
 8004a46:	2301      	movs	r3, #1
 8004a48:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9308      	str	r3, [sp, #32]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	9307      	str	r3, [sp, #28]
 8004a52:	2300      	movs	r3, #0
 8004a54:	9306      	str	r3, [sp, #24]
 8004a56:	2301      	movs	r3, #1
 8004a58:	9305      	str	r3, [sp, #20]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9304      	str	r3, [sp, #16]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9303      	str	r3, [sp, #12]
 8004a62:	231e      	movs	r3, #30
 8004a64:	9302      	str	r3, [sp, #8]
 8004a66:	2308      	movs	r3, #8
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <TST_RxRssi+0x104>)
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2000      	movs	r0, #0
 8004a72:	47a0      	blx	r4
                      0, FSK_BANDWIDTHAFC, LORA_PREAMBLE_LENGTH,
                      LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_OFF,
                      0, true, 0, 0, LORA_IQ_INVERSION_OFF, true);

    timeout = 0xFFFFFF; /* continuous Rx */
 8004a74:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <TST_RxRssi+0x108>)
 8004a76:	607b      	str	r3, [r7, #4]
    if (testParam.lna == 0)
 8004a78:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <TST_RxRssi+0xfc>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <TST_RxRssi+0x90>
    {
      Radio.Rx(timeout);
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <TST_RxRssi+0xf8>)
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	0010      	movs	r0, r2
 8004a88:	4798      	blx	r3
 8004a8a:	e004      	b.n	8004a96 <TST_RxRssi+0x9a>
    }
    else
    {
      Radio.RxBoosted(timeout);
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <TST_RxRssi+0xf8>)
 8004a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	0010      	movs	r0, r2
 8004a94:	4798      	blx	r3
    }

    HAL_Delay(Radio.GetWakeupTime());   /* Wait for 50ms */
 8004a96:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <TST_RxRssi+0xf8>)
 8004a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9a:	4798      	blx	r3
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f001 fcc5 	bl	800642e <HAL_Delay>

    rssiVal = Radio.Rssi(MODEM_FSK);
 8004aa4:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <TST_RxRssi+0xf8>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	1cbc      	adds	r4, r7, #2
 8004aaa:	2000      	movs	r0, #0
 8004aac:	4798      	blx	r3
 8004aae:	0003      	movs	r3, r0
 8004ab0:	8023      	strh	r3, [r4, #0]
    APP_TPRINTF(">>> RSSI Value= %d dBm\r\n", rssiVal);
 8004ab2:	1cbb      	adds	r3, r7, #2
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	5e9b      	ldrsh	r3, [r3, r2]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <TST_RxRssi+0x10c>)
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	0013      	movs	r3, r2
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f017 fe16 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>

    Radio.Sleep();
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <TST_RxRssi+0xf8>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	4798      	blx	r3
    TestState &= ~RX_TEST_RSSI;
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <TST_RxRssi+0xf0>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	4393      	bics	r3, r2
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <TST_RxRssi+0xf0>)
 8004ada:	701a      	strb	r2, [r3, #0]
    return 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e001      	b.n	8004ae4 <TST_RxRssi+0xe8>
  }
  else
  {
    return -1;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	425b      	negs	r3, r3
  }
  /* USER CODE BEGIN TST_RxRssi_2 */

  /* USER CODE END TST_RxRssi_2 */
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b003      	add	sp, #12
 8004aea:	bd90      	pop	{r4, r7, pc}
 8004aec:	200005ac 	.word	0x200005ac
 8004af0:	0802090c 	.word	0x0802090c
 8004af4:	08021740 	.word	0x08021740
 8004af8:	20000030 	.word	0x20000030
 8004afc:	0000c350 	.word	0x0000c350
 8004b00:	00014585 	.word	0x00014585
 8004b04:	00ffffff 	.word	0x00ffffff
 8004b08:	0802091c 	.word	0x0802091c

08004b0c <TST_set_config>:

int32_t  TST_set_config(testParameter_t *Param)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_set_config_1 */

  /* USER CODE END TST_set_config_1 */
  UTIL_MEM_cpy_8(&testParam, Param, sizeof(testParameter_t));
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <TST_set_config+0x20>)
 8004b18:	2230      	movs	r2, #48	; 0x30
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f018 f974 	bl	801ce08 <UTIL_MEM_cpy_8>

  return 0;
 8004b20:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_set_config_2 */

  /* USER CODE END TST_set_config_2 */
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b002      	add	sp, #8
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	20000030 	.word	0x20000030

08004b30 <TST_get_config>:

int32_t TST_get_config(testParameter_t *Param)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_get_config_1 */

  /* USER CODE END TST_get_config_1 */
  UTIL_MEM_cpy_8(Param, &testParam, sizeof(testParameter_t));
 8004b38:	4905      	ldr	r1, [pc, #20]	; (8004b50 <TST_get_config+0x20>)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2230      	movs	r2, #48	; 0x30
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f018 f962 	bl	801ce08 <UTIL_MEM_cpy_8>
  return 0;
 8004b44:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_get_config_2 */

  /* USER CODE END TST_get_config_2 */
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b002      	add	sp, #8
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	20000030 	.word	0x20000030

08004b54 <TST_stop>:

int32_t TST_stop(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TST_stop_1 */

  /* USER CODE END TST_stop_1 */
  TestState = 0;
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <TST_stop+0x18>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]

  /* Set the radio in Sleep*/
  Radio.Sleep();
 8004b5e:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <TST_stop+0x1c>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	4798      	blx	r3

  return 0;
 8004b64:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_stop_2 */

  /* USER CODE END TST_stop_2 */
}
 8004b66:	0018      	movs	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	200005ac 	.word	0x200005ac
 8004b70:	08021740 	.word	0x08021740

08004b74 <TST_TX_Start>:

int32_t TST_TX_Start(int32_t nb_packet)
{
 8004b74:	b5b0      	push	{r4, r5, r7, lr}
 8004b76:	b0ce      	sub	sp, #312	; 0x138
 8004b78:	af0a      	add	r7, sp, #40	; 0x28
 8004b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_TX_Start_1 */

  /* USER CODE END TST_TX_Start_1 */
  int32_t i;
  uint8_t payload[256] = {0};
 8004b7c:	4b68      	ldr	r3, [pc, #416]	; (8004d20 <TST_TX_Start+0x1ac>)
 8004b7e:	2288      	movs	r2, #136	; 0x88
 8004b80:	0052      	lsls	r2, r2, #1
 8004b82:	4694      	mov	ip, r2
 8004b84:	44bc      	add	ip, r7
 8004b86:	4463      	add	r3, ip
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	22fc      	movs	r2, #252	; 0xfc
 8004b90:	2100      	movs	r1, #0
 8004b92:	0018      	movs	r0, r3
 8004b94:	f01a f967 	bl	801ee66 <memset>

  if ((TestState & TX_TEST_LORA) != TX_TEST_LORA)
 8004b98:	4b62      	ldr	r3, [pc, #392]	; (8004d24 <TST_TX_Start+0x1b0>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d000      	beq.n	8004ba6 <TST_TX_Start+0x32>
 8004ba4:	e0b6      	b.n	8004d14 <TST_TX_Start+0x1a0>
  {
    TestState |= TX_TEST_LORA;
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	; (8004d24 <TST_TX_Start+0x1b0>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2204      	movs	r2, #4
 8004bac:	4313      	orrs	r3, r2
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	4b5c      	ldr	r3, [pc, #368]	; (8004d24 <TST_TX_Start+0x1b0>)
 8004bb2:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Tx LoRa Test\r\n");
 8004bb4:	4b5c      	ldr	r3, [pc, #368]	; (8004d28 <TST_TX_Start+0x1b4>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	2100      	movs	r1, #0
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f017 fd9a 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 8004bc0:	4b5a      	ldr	r3, [pc, #360]	; (8004d2c <TST_TX_Start+0x1b8>)
 8004bc2:	4a5b      	ldr	r2, [pc, #364]	; (8004d30 <TST_TX_Start+0x1bc>)
 8004bc4:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 8004bc6:	4b59      	ldr	r3, [pc, #356]	; (8004d2c <TST_TX_Start+0x1b8>)
 8004bc8:	4a5a      	ldr	r2, [pc, #360]	; (8004d34 <TST_TX_Start+0x1c0>)
 8004bca:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 8004bcc:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <TST_TX_Start+0x1b8>)
 8004bce:	4a5a      	ldr	r2, [pc, #360]	; (8004d38 <TST_TX_Start+0x1c4>)
 8004bd0:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8004bd2:	4b56      	ldr	r3, [pc, #344]	; (8004d2c <TST_TX_Start+0x1b8>)
 8004bd4:	4a59      	ldr	r2, [pc, #356]	; (8004d3c <TST_TX_Start+0x1c8>)
 8004bd6:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 8004bd8:	4b54      	ldr	r3, [pc, #336]	; (8004d2c <TST_TX_Start+0x1b8>)
 8004bda:	4a59      	ldr	r2, [pc, #356]	; (8004d40 <TST_TX_Start+0x1cc>)
 8004bdc:	611a      	str	r2, [r3, #16]
    Radio.Init(&RadioEvents);
 8004bde:	4b59      	ldr	r3, [pc, #356]	; (8004d44 <TST_TX_Start+0x1d0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a52      	ldr	r2, [pc, #328]	; (8004d2c <TST_TX_Start+0x1b8>)
 8004be4:	0010      	movs	r0, r2
 8004be6:	4798      	blx	r3
    /*Fill payload with PRBS9 data*/
    Prbs9_generator(payload, testParam.payloadLen);
 8004be8:	4b57      	ldr	r3, [pc, #348]	; (8004d48 <TST_TX_Start+0x1d4>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	230c      	movs	r3, #12
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	0011      	movs	r1, r2
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f000 fa29 	bl	800504c <Prbs9_generator>

    /* Launch several times payload: nb times given by user */
    for (i = 1; i <= nb_packet; i++)
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	2286      	movs	r2, #134	; 0x86
 8004bfe:	0052      	lsls	r2, r2, #1
 8004c00:	18ba      	adds	r2, r7, r2
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	e076      	b.n	8004cf4 <TST_TX_Start+0x180>
    {
      APP_TPRINTF("Tx %d of %d\r\n", i, nb_packet);
 8004c06:	4a51      	ldr	r2, [pc, #324]	; (8004d4c <TST_TX_Start+0x1d8>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	2386      	movs	r3, #134	; 0x86
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	0013      	movs	r3, r2
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f017 fd69 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetChannel(testParam.freq);
 8004c22:	4b48      	ldr	r3, [pc, #288]	; (8004d44 <TST_TX_Start+0x1d0>)
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	4b48      	ldr	r3, [pc, #288]	; (8004d48 <TST_TX_Start+0x1d4>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	4790      	blx	r2
      Radio.SetTxConfig(MODEM_LORA, testParam.power, 0, (testParam.bandwidth - 4),
 8004c2e:	4b45      	ldr	r3, [pc, #276]	; (8004d44 <TST_TX_Start+0x1d0>)
 8004c30:	69dc      	ldr	r4, [r3, #28]
 8004c32:	4b45      	ldr	r3, [pc, #276]	; (8004d48 <TST_TX_Start+0x1d4>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	b259      	sxtb	r1, r3
 8004c38:	4b43      	ldr	r3, [pc, #268]	; (8004d48 <TST_TX_Start+0x1d4>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	1f18      	subs	r0, r3, #4
 8004c3e:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <TST_TX_Start+0x1d4>)
 8004c40:	691a      	ldr	r2, [r3, #16]
                        testParam.loraSf_datarate, testParam.codingRate,
 8004c42:	4b41      	ldr	r3, [pc, #260]	; (8004d48 <TST_TX_Start+0x1d4>)
 8004c44:	695b      	ldr	r3, [r3, #20]
      Radio.SetTxConfig(MODEM_LORA, testParam.power, 0, (testParam.bandwidth - 4),
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	4d41      	ldr	r5, [pc, #260]	; (8004d50 <TST_TX_Start+0x1dc>)
 8004c4a:	9508      	str	r5, [sp, #32]
 8004c4c:	2500      	movs	r5, #0
 8004c4e:	9507      	str	r5, [sp, #28]
 8004c50:	2500      	movs	r5, #0
 8004c52:	9506      	str	r5, [sp, #24]
 8004c54:	2500      	movs	r5, #0
 8004c56:	9505      	str	r5, [sp, #20]
 8004c58:	2500      	movs	r5, #0
 8004c5a:	9504      	str	r5, [sp, #16]
 8004c5c:	2500      	movs	r5, #0
 8004c5e:	9503      	str	r5, [sp, #12]
 8004c60:	2508      	movs	r5, #8
 8004c62:	9502      	str	r5, [sp, #8]
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	9200      	str	r2, [sp, #0]
 8004c68:	0003      	movs	r3, r0
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	47a0      	blx	r4
                        LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_OFF,
                        false, 0, 0, LORA_IQ_INVERSION_OFF, 3000);

      /* Send payload once*/
      Radio.Send(payload, testParam.payloadLen);
 8004c70:	4b34      	ldr	r3, [pc, #208]	; (8004d44 <TST_TX_Start+0x1d0>)
 8004c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c74:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <TST_TX_Start+0x1d4>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	b2d9      	uxtb	r1, r3
 8004c7a:	230c      	movs	r3, #12
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	0018      	movs	r0, r3
 8004c80:	4790      	blx	r2
      /* Wait Tx done/timeout */
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8004c82:	2001      	movs	r0, #1
 8004c84:	f018 fa52 	bl	801d12c <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 8004c88:	4b2e      	ldr	r3, [pc, #184]	; (8004d44 <TST_TX_Start+0x1d0>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	4798      	blx	r3

      if (RadioTxDone_flag == 1)
 8004c8e:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <TST_TX_Start+0x1e0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <TST_TX_Start+0x12e>
      {
        APP_TPRINTF("OnTxDone\r\n");
 8004c96:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <TST_TX_Start+0x1e4>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f017 fd29 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioTxTimeout_flag == 1)
 8004ca2:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <TST_TX_Start+0x1e8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d105      	bne.n	8004cb6 <TST_TX_Start+0x142>
      {
        APP_TPRINTF("OnTxTimeout\r\n");
 8004caa:	4b2d      	ldr	r3, [pc, #180]	; (8004d60 <TST_TX_Start+0x1ec>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	2100      	movs	r1, #0
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	f017 fd1f 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioError_flag == 1)
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	; (8004d64 <TST_TX_Start+0x1f0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d105      	bne.n	8004cca <TST_TX_Start+0x156>
      {
        APP_TPRINTF("OnRxError\r\n");
 8004cbe:	4b2a      	ldr	r3, [pc, #168]	; (8004d68 <TST_TX_Start+0x1f4>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f017 fd15 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
      }

      /*Delay between 2 consecutive Tx*/
      HAL_Delay(500);
 8004cca:	23fa      	movs	r3, #250	; 0xfa
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f001 fbad 	bl	800642e <HAL_Delay>
      /* Reset TX Done or timeout flags */
      RadioTxDone_flag = 0;
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <TST_TX_Start+0x1e0>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
      RadioTxTimeout_flag = 0;
 8004cda:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <TST_TX_Start+0x1e8>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
      RadioError_flag = 0;
 8004ce0:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <TST_TX_Start+0x1f0>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
    for (i = 1; i <= nb_packet; i++)
 8004ce6:	2286      	movs	r2, #134	; 0x86
 8004ce8:	0052      	lsls	r2, r2, #1
 8004cea:	18bb      	adds	r3, r7, r2
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	18ba      	adds	r2, r7, r2
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	2386      	movs	r3, #134	; 0x86
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	dd81      	ble.n	8004c06 <TST_TX_Start+0x92>
    }
    TestState &= ~TX_TEST_LORA;
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <TST_TX_Start+0x1b0>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2204      	movs	r2, #4
 8004d08:	4393      	bics	r3, r2
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <TST_TX_Start+0x1b0>)
 8004d0e:	701a      	strb	r2, [r3, #0]
    return 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e001      	b.n	8004d18 <TST_TX_Start+0x1a4>
  }
  else
  {
    return -1;
 8004d14:	2301      	movs	r3, #1
 8004d16:	425b      	negs	r3, r3
  }
  /* USER CODE BEGIN TST_TX_Start_2 */

  /* USER CODE END TST_TX_Start_2 */
}
 8004d18:	0018      	movs	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b044      	add	sp, #272	; 0x110
 8004d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d20:	fffffefc 	.word	0xfffffefc
 8004d24:	200005ac 	.word	0x200005ac
 8004d28:	08020938 	.word	0x08020938
 8004d2c:	200005c8 	.word	0x200005c8
 8004d30:	08004f89 	.word	0x08004f89
 8004d34:	08004fa5 	.word	0x08004fa5
 8004d38:	08004ff9 	.word	0x08004ff9
 8004d3c:	08005015 	.word	0x08005015
 8004d40:	08005031 	.word	0x08005031
 8004d44:	08021740 	.word	0x08021740
 8004d48:	20000030 	.word	0x20000030
 8004d4c:	08020948 	.word	0x08020948
 8004d50:	00000bb8 	.word	0x00000bb8
 8004d54:	200005b0 	.word	0x200005b0
 8004d58:	08020958 	.word	0x08020958
 8004d5c:	200005b4 	.word	0x200005b4
 8004d60:	08020964 	.word	0x08020964
 8004d64:	200005c0 	.word	0x200005c0
 8004d68:	08020974 	.word	0x08020974

08004d6c <TST_RX_Start>:

int32_t TST_RX_Start(int32_t nb_packet)
{
 8004d6c:	b5b0      	push	{r4, r5, r7, lr}
 8004d6e:	b092      	sub	sp, #72	; 0x48
 8004d70:	af0a      	add	r7, sp, #40	; 0x28
 8004d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_RX_Start_1 */

  /* USER CODE END TST_RX_Start_1 */
  int32_t i;
  /* init of PER counter */
  uint32_t count_RxOk = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
  uint32_t count_RxKo = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  uint32_t PER = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]

  if (((TestState & RX_TEST_LORA) != RX_TEST_LORA) && (nb_packet > 0))
 8004d80:	4b6d      	ldr	r3, [pc, #436]	; (8004f38 <TST_RX_Start+0x1cc>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	001a      	movs	r2, r3
 8004d86:	2308      	movs	r3, #8
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d000      	beq.n	8004d8e <TST_RX_Start+0x22>
 8004d8c:	e0ce      	b.n	8004f2c <TST_RX_Start+0x1c0>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	dc00      	bgt.n	8004d96 <TST_RX_Start+0x2a>
 8004d94:	e0ca      	b.n	8004f2c <TST_RX_Start+0x1c0>
  {
    TestState |= RX_TEST_LORA;
 8004d96:	4b68      	ldr	r3, [pc, #416]	; (8004f38 <TST_RX_Start+0x1cc>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	4b65      	ldr	r3, [pc, #404]	; (8004f38 <TST_RX_Start+0x1cc>)
 8004da2:	701a      	strb	r2, [r3, #0]

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 8004da4:	4b65      	ldr	r3, [pc, #404]	; (8004f3c <TST_RX_Start+0x1d0>)
 8004da6:	4a66      	ldr	r2, [pc, #408]	; (8004f40 <TST_RX_Start+0x1d4>)
 8004da8:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 8004daa:	4b64      	ldr	r3, [pc, #400]	; (8004f3c <TST_RX_Start+0x1d0>)
 8004dac:	4a65      	ldr	r2, [pc, #404]	; (8004f44 <TST_RX_Start+0x1d8>)
 8004dae:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 8004db0:	4b62      	ldr	r3, [pc, #392]	; (8004f3c <TST_RX_Start+0x1d0>)
 8004db2:	4a65      	ldr	r2, [pc, #404]	; (8004f48 <TST_RX_Start+0x1dc>)
 8004db4:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8004db6:	4b61      	ldr	r3, [pc, #388]	; (8004f3c <TST_RX_Start+0x1d0>)
 8004db8:	4a64      	ldr	r2, [pc, #400]	; (8004f4c <TST_RX_Start+0x1e0>)
 8004dba:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 8004dbc:	4b5f      	ldr	r3, [pc, #380]	; (8004f3c <TST_RX_Start+0x1d0>)
 8004dbe:	4a64      	ldr	r2, [pc, #400]	; (8004f50 <TST_RX_Start+0x1e4>)
 8004dc0:	611a      	str	r2, [r3, #16]
    Radio.Init(&RadioEvents);
 8004dc2:	4b64      	ldr	r3, [pc, #400]	; (8004f54 <TST_RX_Start+0x1e8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a5d      	ldr	r2, [pc, #372]	; (8004f3c <TST_RX_Start+0x1d0>)
 8004dc8:	0010      	movs	r0, r2
 8004dca:	4798      	blx	r3

    for (i = 1; i <= nb_packet; i++)
 8004dcc:	2301      	movs	r3, #1
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	e09e      	b.n	8004f10 <TST_RX_Start+0x1a4>
    {
      /* Rx config */
      Radio.SetChannel(testParam.freq);
 8004dd2:	4b60      	ldr	r3, [pc, #384]	; (8004f54 <TST_RX_Start+0x1e8>)
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	4b60      	ldr	r3, [pc, #384]	; (8004f58 <TST_RX_Start+0x1ec>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	4790      	blx	r2
      Radio.SetRxConfig(MODEM_LORA, (testParam.bandwidth - 4), testParam.loraSf_datarate,
 8004dde:	4b5d      	ldr	r3, [pc, #372]	; (8004f54 <TST_RX_Start+0x1e8>)
 8004de0:	699c      	ldr	r4, [r3, #24]
 8004de2:	4b5d      	ldr	r3, [pc, #372]	; (8004f58 <TST_RX_Start+0x1ec>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	1f19      	subs	r1, r3, #4
 8004de8:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <TST_RX_Start+0x1ec>)
 8004dea:	691a      	ldr	r2, [r3, #16]
                        testParam.codingRate, 0, LORA_PREAMBLE_LENGTH,
 8004dec:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <TST_RX_Start+0x1ec>)
 8004dee:	695b      	ldr	r3, [r3, #20]
      Radio.SetRxConfig(MODEM_LORA, (testParam.bandwidth - 4), testParam.loraSf_datarate,
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2001      	movs	r0, #1
 8004df4:	9009      	str	r0, [sp, #36]	; 0x24
 8004df6:	2000      	movs	r0, #0
 8004df8:	9008      	str	r0, [sp, #32]
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	9007      	str	r0, [sp, #28]
 8004dfe:	2000      	movs	r0, #0
 8004e00:	9006      	str	r0, [sp, #24]
 8004e02:	2000      	movs	r0, #0
 8004e04:	9005      	str	r0, [sp, #20]
 8004e06:	2000      	movs	r0, #0
 8004e08:	9004      	str	r0, [sp, #16]
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	9003      	str	r0, [sp, #12]
 8004e0e:	201e      	movs	r0, #30
 8004e10:	9002      	str	r0, [sp, #8]
 8004e12:	2008      	movs	r0, #8
 8004e14:	9001      	str	r0, [sp, #4]
 8004e16:	2000      	movs	r0, #0
 8004e18:	9000      	str	r0, [sp, #0]
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	47a0      	blx	r4
                        LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_OFF,
                        0, false, 0, 0, LORA_IQ_INVERSION_OFF, true);
      Radio.Rx(RX_TIMEOUT_VALUE);
 8004e1e:	4b4d      	ldr	r3, [pc, #308]	; (8004f54 <TST_RX_Start+0x1e8>)
 8004e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e22:	4a4e      	ldr	r2, [pc, #312]	; (8004f5c <TST_RX_Start+0x1f0>)
 8004e24:	0010      	movs	r0, r2
 8004e26:	4798      	blx	r3

      /* Wait Rx done/timeout */
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8004e28:	2001      	movs	r0, #1
 8004e2a:	f018 f97f 	bl	801d12c <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 8004e2e:	4b49      	ldr	r3, [pc, #292]	; (8004f54 <TST_RX_Start+0x1e8>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	4798      	blx	r3

      if (RadioRxDone_flag == 1)
 8004e34:	4b4a      	ldr	r3, [pc, #296]	; (8004f60 <TST_RX_Start+0x1f4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d11e      	bne.n	8004e7a <TST_RX_Start+0x10e>
      {
        int16_t rssi = last_rx_rssi;
 8004e3c:	240e      	movs	r4, #14
 8004e3e:	193b      	adds	r3, r7, r4
 8004e40:	4a48      	ldr	r2, [pc, #288]	; (8004f64 <TST_RX_Start+0x1f8>)
 8004e42:	8812      	ldrh	r2, [r2, #0]
 8004e44:	801a      	strh	r2, [r3, #0]
        int8_t snr = last_rx_snr;
 8004e46:	250d      	movs	r5, #13
 8004e48:	197b      	adds	r3, r7, r5
 8004e4a:	4a47      	ldr	r2, [pc, #284]	; (8004f68 <TST_RX_Start+0x1fc>)
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	701a      	strb	r2, [r3, #0]
        APP_TPRINTF("OnRxDone\r\n");
 8004e50:	4b46      	ldr	r3, [pc, #280]	; (8004f6c <TST_RX_Start+0x200>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	2100      	movs	r1, #0
 8004e56:	2000      	movs	r0, #0
 8004e58:	f017 fc4c 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
        APP_TPRINTF("RssiValue=%d dBm, SnrValue=%d\r\n", rssi, snr);
 8004e5c:	193b      	adds	r3, r7, r4
 8004e5e:	2200      	movs	r2, #0
 8004e60:	5e9b      	ldrsh	r3, [r3, r2]
 8004e62:	197a      	adds	r2, r7, r5
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	b252      	sxtb	r2, r2
 8004e68:	4941      	ldr	r1, [pc, #260]	; (8004f70 <TST_RX_Start+0x204>)
 8004e6a:	9201      	str	r2, [sp, #4]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	000b      	movs	r3, r1
 8004e70:	2201      	movs	r2, #1
 8004e72:	2100      	movs	r1, #0
 8004e74:	2000      	movs	r0, #0
 8004e76:	f017 fc3d 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioRxTimeout_flag == 1)
 8004e7a:	4b3e      	ldr	r3, [pc, #248]	; (8004f74 <TST_RX_Start+0x208>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d105      	bne.n	8004e8e <TST_RX_Start+0x122>
      {
        APP_TPRINTF("OnRxTimeout\r\n");
 8004e82:	4b3d      	ldr	r3, [pc, #244]	; (8004f78 <TST_RX_Start+0x20c>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	2100      	movs	r1, #0
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f017 fc33 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioError_flag == 1)
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <TST_RX_Start+0x210>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d105      	bne.n	8004ea2 <TST_RX_Start+0x136>
      {
        APP_TPRINTF("OnRxError\r\n");
 8004e96:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <TST_RX_Start+0x214>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f017 fc29 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
      }

      /*check flag*/
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 8004ea2:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <TST_RX_Start+0x208>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d003      	beq.n	8004eb2 <TST_RX_Start+0x146>
 8004eaa:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <TST_RX_Start+0x210>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d102      	bne.n	8004eb8 <TST_RX_Start+0x14c>
      {
        count_RxKo++;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
      }
      if (RadioRxDone_flag == 1)
 8004eb8:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <TST_RX_Start+0x1f4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d102      	bne.n	8004ec6 <TST_RX_Start+0x15a>
      {
        count_RxOk++;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	61bb      	str	r3, [r7, #24]
      }
      /* Reset timeout flag */
      RadioRxDone_flag = 0;
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <TST_RX_Start+0x1f4>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
      RadioRxTimeout_flag = 0;
 8004ecc:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <TST_RX_Start+0x208>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
      RadioError_flag = 0;
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <TST_RX_Start+0x210>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Compute PER */
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2264      	movs	r2, #100	; 0x64
 8004edc:	435a      	muls	r2, r3
 8004ede:	0010      	movs	r0, r2
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	f7fb f916 	bl	8000118 <__udivsi3>
 8004eec:	0003      	movs	r3, r0
 8004eee:	613b      	str	r3, [r7, #16]
      APP_TPRINTF("Rx %d of %d  >>> PER= %d %%\r\n", i, nb_packet, PER);
 8004ef0:	4a24      	ldr	r2, [pc, #144]	; (8004f84 <TST_RX_Start+0x218>)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	9302      	str	r3, [sp, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	0013      	movs	r3, r2
 8004f00:	2201      	movs	r2, #1
 8004f02:	2100      	movs	r1, #0
 8004f04:	2000      	movs	r0, #0
 8004f06:	f017 fbf5 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    for (i = 1; i <= nb_packet; i++)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	dc00      	bgt.n	8004f1a <TST_RX_Start+0x1ae>
 8004f18:	e75b      	b.n	8004dd2 <TST_RX_Start+0x66>
    }
    TestState &= ~RX_TEST_LORA;
 8004f1a:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <TST_RX_Start+0x1cc>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2208      	movs	r2, #8
 8004f20:	4393      	bics	r3, r2
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <TST_RX_Start+0x1cc>)
 8004f26:	701a      	strb	r2, [r3, #0]
    return 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e001      	b.n	8004f30 <TST_RX_Start+0x1c4>
  }
  else
  {
    return -1;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	425b      	negs	r3, r3
  }
  /* USER CODE BEGIN TST_RX_Start_2 */

  /* USER CODE END TST_RX_Start_2 */
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b008      	add	sp, #32
 8004f36:	bdb0      	pop	{r4, r5, r7, pc}
 8004f38:	200005ac 	.word	0x200005ac
 8004f3c:	200005c8 	.word	0x200005c8
 8004f40:	08004f89 	.word	0x08004f89
 8004f44:	08004fa5 	.word	0x08004fa5
 8004f48:	08004ff9 	.word	0x08004ff9
 8004f4c:	08005015 	.word	0x08005015
 8004f50:	08005031 	.word	0x08005031
 8004f54:	08021740 	.word	0x08021740
 8004f58:	20000030 	.word	0x20000030
 8004f5c:	00001388 	.word	0x00001388
 8004f60:	200005b8 	.word	0x200005b8
 8004f64:	200005c4 	.word	0x200005c4
 8004f68:	200005c6 	.word	0x200005c6
 8004f6c:	08020980 	.word	0x08020980
 8004f70:	0802098c 	.word	0x0802098c
 8004f74:	200005bc 	.word	0x200005bc
 8004f78:	080209ac 	.word	0x080209ac
 8004f7c:	200005c0 	.word	0x200005c0
 8004f80:	08020974 	.word	0x08020974
 8004f84:	080209bc 	.word	0x080209bc

08004f88 <OnTxDone>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/

void OnTxDone(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone_1 */

  /* USER CODE END OnTxDone_1 */
  /* Set TxDone flag */
  RadioTxDone_flag = 1;
 8004f8c:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <OnTxDone+0x18>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8004f92:	2001      	movs	r0, #1
 8004f94:	f018 f8ac 	bl	801d0f0 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxDone_2 */

  /* USER CODE END OnTxDone_2 */
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	200005b0 	.word	0x200005b0

08004fa4 <OnRxDone>:

void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	000c      	movs	r4, r1
 8004fae:	0010      	movs	r0, r2
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	230a      	movs	r3, #10
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	1c22      	adds	r2, r4, #0
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	2408      	movs	r4, #8
 8004fbc:	193b      	adds	r3, r7, r4
 8004fbe:	1c02      	adds	r2, r0, #0
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	1dfb      	adds	r3, r7, #7
 8004fc4:	1c0a      	adds	r2, r1, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN OnRxDone_1 */

  /* USER CODE END OnRxDone_1 */
  last_rx_rssi = rssi;
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <OnRxDone+0x48>)
 8004fca:	193a      	adds	r2, r7, r4
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	801a      	strh	r2, [r3, #0]
  last_rx_snr = snr;
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <OnRxDone+0x4c>)
 8004fd2:	1dfa      	adds	r2, r7, #7
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	701a      	strb	r2, [r3, #0]

  /* Set Rxdone flag */
  RadioRxDone_flag = 1;
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <OnRxDone+0x50>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8004fde:	2001      	movs	r0, #1
 8004fe0:	f018 f886 	bl	801d0f0 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxDone_2 */

  /* USER CODE END OnRxDone_2 */
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b005      	add	sp, #20
 8004fea:	bd90      	pop	{r4, r7, pc}
 8004fec:	200005c4 	.word	0x200005c4
 8004ff0:	200005c6 	.word	0x200005c6
 8004ff4:	200005b8 	.word	0x200005b8

08004ff8 <OnTxTimeout>:

void OnTxTimeout(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout_1 */

  /* USER CODE END OnTxTimeout_1 */
  /* Set timeout flag */
  RadioTxTimeout_flag = 1;
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <OnTxTimeout+0x18>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8005002:	2001      	movs	r0, #1
 8005004:	f018 f874 	bl	801d0f0 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxTimeout_2 */

  /* USER CODE END OnTxTimeout_2 */
}
 8005008:	46c0      	nop			; (mov r8, r8)
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	200005b4 	.word	0x200005b4

08005014 <OnRxTimeout>:

void OnRxTimeout(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout_1 */

  /* USER CODE END OnRxTimeout_1 */
  /* Set timeout flag */
  RadioRxTimeout_flag = 1;
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <OnRxTimeout+0x18>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800501e:	2001      	movs	r0, #1
 8005020:	f018 f866 	bl	801d0f0 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxTimeout_2 */

  /* USER CODE END OnRxTimeout_2 */
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	200005bc 	.word	0x200005bc

08005030 <OnRxError>:

void OnRxError(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError_1 */

  /* USER CODE END OnRxError_1 */
  /* Set error flag */
  RadioError_flag = 1;
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <OnRxError+0x18>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800503a:	2001      	movs	r0, #1
 800503c:	f018 f858 	bl	801d0f0 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxError_2 */

  /* USER CODE END OnRxError_2 */
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	200005c0 	.word	0x200005c0

0800504c <Prbs9_generator>:

static int32_t Prbs9_generator(uint8_t *payload, uint8_t len)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	000a      	movs	r2, r1
 8005056:	1cfb      	adds	r3, r7, #3
 8005058:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN Prbs9_generator_1 */

  /* USER CODE END Prbs9_generator_1 */
  uint16_t prbs9_val = PRBS9_INIT;
 800505a:	2316      	movs	r3, #22
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	2202      	movs	r2, #2
 8005060:	801a      	strh	r2, [r3, #0]

  for (int32_t i = 0; i < len * 8; i++)
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	e041      	b.n	80050ec <Prbs9_generator+0xa0>
  {
    /*fill buffer with prbs9 sequence*/
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
 8005068:	2116      	movs	r1, #22
 800506a:	187b      	adds	r3, r7, r1
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	b29a      	uxth	r2, r3
 8005072:	187b      	adds	r3, r7, r1
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	b29b      	uxth	r3, r3
 800507a:	4053      	eors	r3, r2
 800507c:	b29b      	uxth	r3, r3
 800507e:	001a      	movs	r2, r3
 8005080:	2301      	movs	r3, #1
 8005082:	4013      	ands	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
 8005086:	187b      	adds	r3, r7, r1
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	b21a      	sxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	b21b      	sxth	r3, r3
 8005092:	4313      	orrs	r3, r2
 8005094:	b21b      	sxth	r3, r3
 8005096:	b29a      	uxth	r2, r3
 8005098:	187b      	adds	r3, r7, r1
 800509a:	05d2      	lsls	r2, r2, #23
 800509c:	0dd2      	lsrs	r2, r2, #23
 800509e:	801a      	strh	r2, [r3, #0]
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	da00      	bge.n	80050a8 <Prbs9_generator+0x5c>
 80050a6:	3307      	adds	r3, #7
 80050a8:	10db      	asrs	r3, r3, #3
 80050aa:	001c      	movs	r4, r3
 80050ac:	0022      	movs	r2, r4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	189b      	adds	r3, r3, r2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	b25a      	sxtb	r2, r3
 80050b6:	2316      	movs	r3, #22
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	2101      	movs	r1, #1
 80050be:	4019      	ands	r1, r3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4810      	ldr	r0, [pc, #64]	; (8005104 <Prbs9_generator+0xb8>)
 80050c4:	4003      	ands	r3, r0
 80050c6:	d504      	bpl.n	80050d2 <Prbs9_generator+0x86>
 80050c8:	3b01      	subs	r3, #1
 80050ca:	2008      	movs	r0, #8
 80050cc:	4240      	negs	r0, r0
 80050ce:	4303      	orrs	r3, r0
 80050d0:	3301      	adds	r3, #1
 80050d2:	4099      	lsls	r1, r3
 80050d4:	000b      	movs	r3, r1
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	4313      	orrs	r3, r2
 80050da:	b25a      	sxtb	r2, r3
 80050dc:	0021      	movs	r1, r4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	185b      	adds	r3, r3, r1
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
  for (int32_t i = 0; i < len * 8; i++)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3301      	adds	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	1cfb      	adds	r3, r7, #3
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	dbb7      	blt.n	8005068 <Prbs9_generator+0x1c>
  }
  return 0;
 80050f8:	2300      	movs	r3, #0
  /* USER CODE BEGIN Prbs9_generator_2 */

  /* USER CODE END Prbs9_generator_2 */
}
 80050fa:	0018      	movs	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b007      	add	sp, #28
 8005100:	bd90      	pop	{r4, r7, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	80000007 	.word	0x80000007

08005108 <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 800510c:	4b22      	ldr	r3, [pc, #136]	; (8005198 <MX_ADC_Init+0x90>)
 800510e:	4a23      	ldr	r2, [pc, #140]	; (800519c <MX_ADC_Init+0x94>)
 8005110:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <MX_ADC_Init+0x90>)
 8005114:	2200      	movs	r2, #0
 8005116:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005118:	4b1f      	ldr	r3, [pc, #124]	; (8005198 <MX_ADC_Init+0x90>)
 800511a:	2280      	movs	r2, #128	; 0x80
 800511c:	0612      	lsls	r2, r2, #24
 800511e:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8005120:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <MX_ADC_Init+0x90>)
 8005122:	2200      	movs	r2, #0
 8005124:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8005126:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <MX_ADC_Init+0x90>)
 8005128:	2201      	movs	r2, #1
 800512a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 800512c:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <MX_ADC_Init+0x90>)
 800512e:	2200      	movs	r2, #0
 8005130:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8005132:	4b19      	ldr	r3, [pc, #100]	; (8005198 <MX_ADC_Init+0x90>)
 8005134:	2200      	movs	r2, #0
 8005136:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <MX_ADC_Init+0x90>)
 800513a:	2207      	movs	r2, #7
 800513c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800513e:	4b16      	ldr	r3, [pc, #88]	; (8005198 <MX_ADC_Init+0x90>)
 8005140:	2201      	movs	r2, #1
 8005142:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8005144:	4b14      	ldr	r3, [pc, #80]	; (8005198 <MX_ADC_Init+0x90>)
 8005146:	2200      	movs	r2, #0
 8005148:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 800514a:	4b13      	ldr	r3, [pc, #76]	; (8005198 <MX_ADC_Init+0x90>)
 800514c:	2220      	movs	r2, #32
 800514e:	2100      	movs	r1, #0
 8005150:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005152:	4b11      	ldr	r3, [pc, #68]	; (8005198 <MX_ADC_Init+0x90>)
 8005154:	2221      	movs	r2, #33	; 0x21
 8005156:	2100      	movs	r1, #0
 8005158:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800515a:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <MX_ADC_Init+0x90>)
 800515c:	2200      	movs	r2, #0
 800515e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8005160:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <MX_ADC_Init+0x90>)
 8005162:	2204      	movs	r2, #4
 8005164:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005166:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <MX_ADC_Init+0x90>)
 8005168:	222c      	movs	r2, #44	; 0x2c
 800516a:	2100      	movs	r1, #0
 800516c:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800516e:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <MX_ADC_Init+0x90>)
 8005170:	0018      	movs	r0, r3
 8005172:	f002 f947 	bl	8007404 <HAL_ADC_Init>
 8005176:	1e03      	subs	r3, r0, #0
 8005178:	d001      	beq.n	800517e <MX_ADC_Init+0x76>
  {
    Error_Handler();
 800517a:	f000 f9ef 	bl	800555c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800517e:	4b06      	ldr	r3, [pc, #24]	; (8005198 <MX_ADC_Init+0x90>)
 8005180:	2100      	movs	r1, #0
 8005182:	0018      	movs	r0, r3
 8005184:	f002 fe30 	bl	8007de8 <HAL_ADCEx_Calibration_Start>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d001      	beq.n	8005190 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 800518c:	f000 f9e6 	bl	800555c <Error_Handler>
  }
}
 8005190:	46c0      	nop			; (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	20001860 	.word	0x20001860
 800519c:	40012400 	.word	0x40012400

080051a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a06      	ldr	r2, [pc, #24]	; (80051c8 <HAL_ADC_MspInit+0x28>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d106      	bne.n	80051c0 <HAL_ADC_MspInit+0x20>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_ADC_MspInit+0x2c>)
 80051b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_ADC_MspInit+0x2c>)
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	0089      	lsls	r1, r1, #2
 80051bc:	430a      	orrs	r2, r1
 80051be:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b002      	add	sp, #8
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40012400 	.word	0x40012400
 80051cc:	40021000 	.word	0x40021000

080051d0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0c      	ldr	r2, [pc, #48]	; (8005210 <HAL_ADC_MspDeInit+0x40>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d112      	bne.n	8005208 <HAL_ADC_MspDeInit+0x38>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <HAL_ADC_MspDeInit+0x44>)
 80051e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_ADC_MspDeInit+0x44>)
 80051e8:	2180      	movs	r1, #128	; 0x80
 80051ea:	0089      	lsls	r1, r1, #2
 80051ec:	430a      	orrs	r2, r1
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 80051f0:	4b08      	ldr	r3, [pc, #32]	; (8005214 <HAL_ADC_MspDeInit+0x44>)
 80051f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <HAL_ADC_MspDeInit+0x44>)
 80051f6:	4908      	ldr	r1, [pc, #32]	; (8005218 <HAL_ADC_MspDeInit+0x48>)
 80051f8:	400a      	ands	r2, r1
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <HAL_ADC_MspDeInit+0x44>)
 80051fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005200:	4b04      	ldr	r3, [pc, #16]	; (8005214 <HAL_ADC_MspDeInit+0x44>)
 8005202:	4905      	ldr	r1, [pc, #20]	; (8005218 <HAL_ADC_MspDeInit+0x48>)
 8005204:	400a      	ands	r2, r1
 8005206:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40012400 	.word	0x40012400
 8005214:	40021000 	.word	0x40021000
 8005218:	fffffdff 	.word	0xfffffdff

0800521c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 8005220:	4b02      	ldr	r3, [pc, #8]	; (800522c <SYS_InitMeasurement+0x10>)
 8005222:	4a03      	ldr	r2, [pc, #12]	; (8005230 <SYS_InitMeasurement+0x14>)
 8005224:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20001860 	.word	0x20001860
 8005230:	40012400 	.word	0x40012400

08005234 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8005234:	b5b0      	push	{r4, r5, r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 800523a:	250e      	movs	r5, #14
 800523c:	197b      	adds	r3, r7, r5
 800523e:	2200      	movs	r2, #0
 8005240:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8005246:	1dbc      	adds	r4, r7, #6
 8005248:	f000 f84c 	bl	80052e4 <SYS_GetBatteryLevel>
 800524c:	0003      	movs	r3, r0
 800524e:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8005250:	4b1f      	ldr	r3, [pc, #124]	; (80052d0 <SYS_GetTemperatureLevel+0x9c>)
 8005252:	0018      	movs	r0, r3
 8005254:	f000 f874 	bl	8005340 <ADC_ReadChannels>
 8005258:	0003      	movs	r3, r0
 800525a:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800525c:	1dbb      	adds	r3, r7, #6
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	4353      	muls	r3, r2
 8005264:	491b      	ldr	r1, [pc, #108]	; (80052d4 <SYS_GetTemperatureLevel+0xa0>)
 8005266:	0018      	movs	r0, r3
 8005268:	f7fa ff56 	bl	8000118 <__udivsi3>
 800526c:	0003      	movs	r3, r0
 800526e:	001a      	movs	r2, r3
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <SYS_GetTemperatureLevel+0xa4>)
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	1ad2      	subs	r2, r2, r3
 8005276:	0013      	movs	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	189b      	adds	r3, r3, r2
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	4a16      	ldr	r2, [pc, #88]	; (80052dc <SYS_GetTemperatureLevel+0xa8>)
 8005282:	8812      	ldrh	r2, [r2, #0]
 8005284:	0011      	movs	r1, r2
 8005286:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <SYS_GetTemperatureLevel+0xa4>)
 8005288:	8812      	ldrh	r2, [r2, #0]
 800528a:	1a8a      	subs	r2, r1, r2
 800528c:	0011      	movs	r1, r2
 800528e:	0018      	movs	r0, r3
 8005290:	f7fa ffcc 	bl	800022c <__divsi3>
 8005294:	0003      	movs	r3, r0
 8005296:	b29b      	uxth	r3, r3
 8005298:	22f0      	movs	r2, #240	; 0xf0
 800529a:	0152      	lsls	r2, r2, #5
 800529c:	4694      	mov	ip, r2
 800529e:	4463      	add	r3, ip
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	197b      	adds	r3, r7, r5
 80052a4:	801a      	strh	r2, [r3, #0]

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 80052a6:	197b      	adds	r3, r7, r5
 80052a8:	2200      	movs	r2, #0
 80052aa:	5e9b      	ldrsh	r3, [r3, r2]
 80052ac:	121b      	asrs	r3, r3, #8
 80052ae:	b21b      	sxth	r3, r3
 80052b0:	001a      	movs	r2, r3
 80052b2:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <SYS_GetTemperatureLevel+0xac>)
 80052b4:	9200      	str	r2, [sp, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	2100      	movs	r1, #0
 80052ba:	2001      	movs	r0, #1
 80052bc:	f017 fa1a 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>

  return (int16_t) temperatureDegreeC;
 80052c0:	197b      	adds	r3, r7, r5
 80052c2:	2200      	movs	r2, #0
 80052c4:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80052c6:	0018      	movs	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b004      	add	sp, #16
 80052cc:	bdb0      	pop	{r4, r5, r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	48040000 	.word	0x48040000
 80052d4:	00000bb8 	.word	0x00000bb8
 80052d8:	1ff8007a 	.word	0x1ff8007a
 80052dc:	1ff8007e 	.word	0x1ff8007e
 80052e0:	080209dc 	.word	0x080209dc

080052e4 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80052ea:	1dbb      	adds	r3, r7, #6
 80052ec:	2200      	movs	r2, #0
 80052ee:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80052f4:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <SYS_GetBatteryLevel+0x50>)
 80052f6:	0018      	movs	r0, r3
 80052f8:	f000 f822 	bl	8005340 <ADC_ReadChannels>
 80052fc:	0003      	movs	r3, r0
 80052fe:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 8005306:	1dbb      	adds	r3, r7, #6
 8005308:	2200      	movs	r2, #0
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	e00c      	b.n	8005328 <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <SYS_GetBatteryLevel+0x54>)
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	001a      	movs	r2, r3
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <SYS_GetBatteryLevel+0x58>)
 8005316:	4353      	muls	r3, r2
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	0018      	movs	r0, r3
 800531c:	f7fa fefc 	bl	8000118 <__udivsi3>
 8005320:	0003      	movs	r3, r0
 8005322:	001a      	movs	r2, r3
 8005324:	1dbb      	adds	r3, r7, #6
 8005326:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 8005328:	1dbb      	adds	r3, r7, #6
 800532a:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800532c:	0018      	movs	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	b002      	add	sp, #8
 8005332:	bd80      	pop	{r7, pc}
 8005334:	44020000 	.word	0x44020000
 8005338:	1ff80078 	.word	0x1ff80078
 800533c:	00000bb8 	.word	0x00000bb8

08005340 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800534c:	230c      	movs	r3, #12
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	0018      	movs	r0, r3
 8005352:	2308      	movs	r3, #8
 8005354:	001a      	movs	r2, r3
 8005356:	2100      	movs	r1, #0
 8005358:	f019 fd85 	bl	801ee66 <memset>

  MX_ADC_Init();
 800535c:	f7ff fed4 	bl	8005108 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8005360:	46c0      	nop			; (mov r8, r8)
 8005362:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <ADC_ReadChannels+0xd4>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2208      	movs	r2, #8
 8005368:	4013      	ands	r3, r2
 800536a:	2b08      	cmp	r3, #8
 800536c:	d1f9      	bne.n	8005362 <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 800536e:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <ADC_ReadChannels+0xd8>)
 8005370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005372:	4b29      	ldr	r3, [pc, #164]	; (8005418 <ADC_ReadChannels+0xd8>)
 8005374:	2180      	movs	r1, #128	; 0x80
 8005376:	0089      	lsls	r1, r1, #2
 8005378:	430a      	orrs	r2, r1
 800537a:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800537c:	4b27      	ldr	r3, [pc, #156]	; (800541c <ADC_ReadChannels+0xdc>)
 800537e:	2100      	movs	r1, #0
 8005380:	0018      	movs	r0, r3
 8005382:	f002 fd31 	bl	8007de8 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8005386:	240c      	movs	r4, #12
 8005388:	193b      	adds	r3, r7, r4
 800538a:	4a25      	ldr	r2, [pc, #148]	; (8005420 <ADC_ReadChannels+0xe0>)
 800538c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800538e:	193b      	adds	r3, r7, r4
 8005390:	4a24      	ldr	r2, [pc, #144]	; (8005424 <ADC_ReadChannels+0xe4>)
 8005392:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005394:	193a      	adds	r2, r7, r4
 8005396:	4b21      	ldr	r3, [pc, #132]	; (800541c <ADC_ReadChannels+0xdc>)
 8005398:	0011      	movs	r1, r2
 800539a:	0018      	movs	r0, r3
 800539c:	f002 fb78 	bl	8007a90 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80053a0:	0021      	movs	r1, r4
 80053a2:	187b      	adds	r3, r7, r1
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80053a8:	187b      	adds	r3, r7, r1
 80053aa:	2280      	movs	r2, #128	; 0x80
 80053ac:	0152      	lsls	r2, r2, #5
 80053ae:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80053b0:	187a      	adds	r2, r7, r1
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <ADC_ReadChannels+0xdc>)
 80053b4:	0011      	movs	r1, r2
 80053b6:	0018      	movs	r0, r3
 80053b8:	f002 fb6a 	bl	8007a90 <HAL_ADC_ConfigChannel>
 80053bc:	1e03      	subs	r3, r0, #0
 80053be:	d001      	beq.n	80053c4 <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 80053c0:	f000 f8cc 	bl	800555c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80053c4:	4b15      	ldr	r3, [pc, #84]	; (800541c <ADC_ReadChannels+0xdc>)
 80053c6:	0018      	movs	r0, r3
 80053c8:	f002 fa2c 	bl	8007824 <HAL_ADC_Start>
 80053cc:	1e03      	subs	r3, r0, #0
 80053ce:	d001      	beq.n	80053d4 <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 80053d0:	f000 f8c4 	bl	800555c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80053d4:	2301      	movs	r3, #1
 80053d6:	425a      	negs	r2, r3
 80053d8:	4b10      	ldr	r3, [pc, #64]	; (800541c <ADC_ReadChannels+0xdc>)
 80053da:	0011      	movs	r1, r2
 80053dc:	0018      	movs	r0, r3
 80053de:	f002 fab5 	bl	800794c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 80053e2:	4b0e      	ldr	r3, [pc, #56]	; (800541c <ADC_ReadChannels+0xdc>)
 80053e4:	0018      	movs	r0, r3
 80053e6:	f002 fa71 	bl	80078cc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <ADC_ReadChannels+0xdc>)
 80053ec:	0018      	movs	r0, r3
 80053ee:	f002 fb43 	bl	8007a78 <HAL_ADC_GetValue>
 80053f2:	0003      	movs	r3, r0
 80053f4:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <ADC_ReadChannels+0xdc>)
 80053f8:	0018      	movs	r0, r3
 80053fa:	f002 f977 	bl	80076ec <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 80053fe:	4b06      	ldr	r3, [pc, #24]	; (8005418 <ADC_ReadChannels+0xd8>)
 8005400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <ADC_ReadChannels+0xd8>)
 8005404:	4908      	ldr	r1, [pc, #32]	; (8005428 <ADC_ReadChannels+0xe8>)
 8005406:	400a      	ands	r2, r1
 8005408:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 800540a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b007      	add	sp, #28
 8005412:	bd90      	pop	{r4, r7, pc}
 8005414:	40007000 	.word	0x40007000
 8005418:	40021000 	.word	0x40021000
 800541c:	20001860 	.word	0x20001860
 8005420:	0007ffff 	.word	0x0007ffff
 8005424:	00001001 	.word	0x00001001
 8005428:	fffffdff 	.word	0xfffffdff

0800542c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <MX_DMA_Init+0x38>)
 8005434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005436:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <MX_DMA_Init+0x38>)
 8005438:	2101      	movs	r1, #1
 800543a:	430a      	orrs	r2, r1
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <MX_DMA_Init+0x38>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	2201      	movs	r2, #1
 8005444:	4013      	ands	r3, r2
 8005446:	607b      	str	r3, [r7, #4]
 8005448:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800544a:	2200      	movs	r2, #0
 800544c:	2100      	movs	r1, #0
 800544e:	200b      	movs	r0, #11
 8005450:	f002 fe0a 	bl	8008068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005454:	200b      	movs	r0, #11
 8005456:	f002 fe1c 	bl	8008092 <HAL_NVIC_EnableIRQ>

}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b002      	add	sp, #8
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	40021000 	.word	0x40021000

08005468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800546c:	f001 ff50 	bl	8007310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005470:	f000 f806 	bl	8005480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8005474:	f7fd f9a6 	bl	80027c4 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8005478:	f7fd f9ad 	bl	80027d6 <MX_LoRaWAN_Process>
 800547c:	e7fc      	b.n	8005478 <main+0x10>
	...

08005480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b095      	sub	sp, #84	; 0x54
 8005484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005486:	2418      	movs	r4, #24
 8005488:	193b      	adds	r3, r7, r4
 800548a:	0018      	movs	r0, r3
 800548c:	2338      	movs	r3, #56	; 0x38
 800548e:	001a      	movs	r2, r3
 8005490:	2100      	movs	r1, #0
 8005492:	f019 fce8 	bl	801ee66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005496:	1d3b      	adds	r3, r7, #4
 8005498:	0018      	movs	r0, r3
 800549a:	2314      	movs	r3, #20
 800549c:	001a      	movs	r2, r3
 800549e:	2100      	movs	r1, #0
 80054a0:	f019 fce1 	bl	801ee66 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80054a4:	0021      	movs	r1, r4
 80054a6:	187b      	adds	r3, r7, r1
 80054a8:	2202      	movs	r2, #2
 80054aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	2200      	movs	r2, #0
 80054b0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80054b2:	187b      	adds	r3, r7, r1
 80054b4:	2201      	movs	r2, #1
 80054b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054b8:	187b      	adds	r3, r7, r1
 80054ba:	2210      	movs	r2, #16
 80054bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80054be:	187b      	adds	r3, r7, r1
 80054c0:	2202      	movs	r2, #2
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 80054c4:	187b      	adds	r3, r7, r1
 80054c6:	2200      	movs	r2, #0
 80054c8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	2280      	movs	r2, #128	; 0x80
 80054ce:	0312      	lsls	r2, r2, #12
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80054d2:	187b      	adds	r3, r7, r1
 80054d4:	2280      	movs	r2, #128	; 0x80
 80054d6:	0412      	lsls	r2, r2, #16
 80054d8:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054da:	187b      	adds	r3, r7, r1
 80054dc:	0018      	movs	r0, r3
 80054de:	f003 fc83 	bl	8008de8 <HAL_RCC_OscConfig>
 80054e2:	1e03      	subs	r3, r0, #0
 80054e4:	d001      	beq.n	80054ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80054e6:	f000 f839 	bl	800555c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 80054ea:	4b19      	ldr	r3, [pc, #100]	; (8005550 <SystemClock_Config+0xd0>)
 80054ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ee:	4b18      	ldr	r3, [pc, #96]	; (8005550 <SystemClock_Config+0xd0>)
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	0549      	lsls	r1, r1, #21
 80054f4:	430a      	orrs	r2, r1
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80054f8:	4b16      	ldr	r3, [pc, #88]	; (8005554 <SystemClock_Config+0xd4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a16      	ldr	r2, [pc, #88]	; (8005558 <SystemClock_Config+0xd8>)
 80054fe:	401a      	ands	r2, r3
 8005500:	4b14      	ldr	r3, [pc, #80]	; (8005554 <SystemClock_Config+0xd4>)
 8005502:	2180      	movs	r1, #128	; 0x80
 8005504:	0109      	lsls	r1, r1, #4
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <SystemClock_Config+0xd4>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2210      	movs	r2, #16
 8005512:	4013      	ands	r3, r2
 8005514:	2b10      	cmp	r3, #16
 8005516:	d0f9      	beq.n	800550c <SystemClock_Config+0x8c>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005518:	1d3b      	adds	r3, r7, #4
 800551a:	220f      	movs	r2, #15
 800551c:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	2203      	movs	r2, #3
 8005522:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005524:	1d3b      	adds	r3, r7, #4
 8005526:	2200      	movs	r2, #0
 8005528:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800552a:	1d3b      	adds	r3, r7, #4
 800552c:	2200      	movs	r2, #0
 800552e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	2200      	movs	r2, #0
 8005534:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	2101      	movs	r1, #1
 800553a:	0018      	movs	r0, r3
 800553c:	f004 f828 	bl	8009590 <HAL_RCC_ClockConfig>
 8005540:	1e03      	subs	r3, r0, #0
 8005542:	d001      	beq.n	8005548 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8005544:	f000 f80a 	bl	800555c <Error_Handler>
  }
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	46bd      	mov	sp, r7
 800554c:	b015      	add	sp, #84	; 0x54
 800554e:	bd90      	pop	{r4, r7, pc}
 8005550:	40021000 	.word	0x40021000
 8005554:	40007000 	.word	0x40007000
 8005558:	ffffe7ff 	.word	0xffffe7ff

0800555c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8005560:	e7fe      	b.n	8005560 <Error_Handler+0x4>
	...

08005564 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b090      	sub	sp, #64	; 0x40
 8005568:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800556a:	232c      	movs	r3, #44	; 0x2c
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	0018      	movs	r0, r3
 8005570:	2314      	movs	r3, #20
 8005572:	001a      	movs	r2, r3
 8005574:	2100      	movs	r1, #0
 8005576:	f019 fc76 	bl	801ee66 <memset>
  RTC_DateTypeDef sDate = {0};
 800557a:	2328      	movs	r3, #40	; 0x28
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8005582:	003b      	movs	r3, r7
 8005584:	0018      	movs	r0, r3
 8005586:	2328      	movs	r3, #40	; 0x28
 8005588:	001a      	movs	r2, r3
 800558a:	2100      	movs	r1, #0
 800558c:	f019 fc6b 	bl	801ee66 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005590:	4b41      	ldr	r3, [pc, #260]	; (8005698 <MX_RTC_Init+0x134>)
 8005592:	4a42      	ldr	r2, [pc, #264]	; (800569c <MX_RTC_Init+0x138>)
 8005594:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005596:	4b40      	ldr	r3, [pc, #256]	; (8005698 <MX_RTC_Init+0x134>)
 8005598:	2200      	movs	r2, #0
 800559a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800559c:	4b3e      	ldr	r3, [pc, #248]	; (8005698 <MX_RTC_Init+0x134>)
 800559e:	221f      	movs	r2, #31
 80055a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80055a2:	4b3d      	ldr	r3, [pc, #244]	; (8005698 <MX_RTC_Init+0x134>)
 80055a4:	4a3e      	ldr	r2, [pc, #248]	; (80056a0 <MX_RTC_Init+0x13c>)
 80055a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80055a8:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <MX_RTC_Init+0x134>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80055ae:	4b3a      	ldr	r3, [pc, #232]	; (8005698 <MX_RTC_Init+0x134>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80055b4:	4b38      	ldr	r3, [pc, #224]	; (8005698 <MX_RTC_Init+0x134>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80055ba:	4b37      	ldr	r3, [pc, #220]	; (8005698 <MX_RTC_Init+0x134>)
 80055bc:	2200      	movs	r2, #0
 80055be:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80055c0:	4b35      	ldr	r3, [pc, #212]	; (8005698 <MX_RTC_Init+0x134>)
 80055c2:	0018      	movs	r0, r3
 80055c4:	f004 fb5e 	bl	8009c84 <HAL_RTC_Init>
 80055c8:	1e03      	subs	r3, r0, #0
 80055ca:	d001      	beq.n	80055d0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80055cc:	f7ff ffc6 	bl	800555c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80055d0:	212c      	movs	r1, #44	; 0x2c
 80055d2:	187b      	adds	r3, r7, r1
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	2200      	movs	r2, #0
 80055dc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80055de:	187b      	adds	r3, r7, r1
 80055e0:	2200      	movs	r2, #0
 80055e2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80055e4:	187b      	adds	r3, r7, r1
 80055e6:	2200      	movs	r2, #0
 80055e8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80055ea:	187b      	adds	r3, r7, r1
 80055ec:	2200      	movs	r2, #0
 80055ee:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80055f0:	1879      	adds	r1, r7, r1
 80055f2:	4b29      	ldr	r3, [pc, #164]	; (8005698 <MX_RTC_Init+0x134>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	0018      	movs	r0, r3
 80055f8:	f004 fbe2 	bl	8009dc0 <HAL_RTC_SetTime>
 80055fc:	1e03      	subs	r3, r0, #0
 80055fe:	d001      	beq.n	8005604 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8005600:	f7ff ffac 	bl	800555c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005604:	2128      	movs	r1, #40	; 0x28
 8005606:	187b      	adds	r3, r7, r1
 8005608:	2201      	movs	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800560c:	187b      	adds	r3, r7, r1
 800560e:	2201      	movs	r2, #1
 8005610:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8005612:	187b      	adds	r3, r7, r1
 8005614:	2201      	movs	r2, #1
 8005616:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8005618:	187b      	adds	r3, r7, r1
 800561a:	2200      	movs	r2, #0
 800561c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800561e:	1879      	adds	r1, r7, r1
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <MX_RTC_Init+0x134>)
 8005622:	2200      	movs	r2, #0
 8005624:	0018      	movs	r0, r3
 8005626:	f004 fceb 	bl	800a000 <HAL_RTC_SetDate>
 800562a:	1e03      	subs	r3, r0, #0
 800562c:	d001      	beq.n	8005632 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800562e:	f7ff ff95 	bl	800555c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8005632:	003b      	movs	r3, r7
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8005638:	003b      	movs	r3, r7
 800563a:	2200      	movs	r2, #0
 800563c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800563e:	003b      	movs	r3, r7
 8005640:	2200      	movs	r2, #0
 8005642:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8005644:	003b      	movs	r3, r7
 8005646:	2200      	movs	r2, #0
 8005648:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800564a:	003b      	movs	r3, r7
 800564c:	2200      	movs	r2, #0
 800564e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005650:	003b      	movs	r3, r7
 8005652:	2200      	movs	r2, #0
 8005654:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8005656:	003b      	movs	r3, r7
 8005658:	2200      	movs	r2, #0
 800565a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 800565c:	003b      	movs	r3, r7
 800565e:	22a0      	movs	r2, #160	; 0xa0
 8005660:	0512      	lsls	r2, r2, #20
 8005662:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005664:	003b      	movs	r3, r7
 8005666:	2200      	movs	r2, #0
 8005668:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 800566a:	003b      	movs	r3, r7
 800566c:	2220      	movs	r2, #32
 800566e:	211e      	movs	r1, #30
 8005670:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8005672:	003b      	movs	r3, r7
 8005674:	2280      	movs	r2, #128	; 0x80
 8005676:	0052      	lsls	r2, r2, #1
 8005678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800567a:	0039      	movs	r1, r7
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <MX_RTC_Init+0x134>)
 800567e:	2200      	movs	r2, #0
 8005680:	0018      	movs	r0, r3
 8005682:	f004 fdb9 	bl	800a1f8 <HAL_RTC_SetAlarm_IT>
 8005686:	1e03      	subs	r3, r0, #0
 8005688:	d001      	beq.n	800568e <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800568a:	f7ff ff67 	bl	800555c <Error_Handler>
  }

}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	46bd      	mov	sp, r7
 8005692:	b010      	add	sp, #64	; 0x40
 8005694:	bd80      	pop	{r7, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	20001904 	.word	0x20001904
 800569c:	40002800 	.word	0x40002800
 80056a0:	000003ff 	.word	0x000003ff

080056a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b091      	sub	sp, #68	; 0x44
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056ac:	2408      	movs	r4, #8
 80056ae:	193b      	adds	r3, r7, r4
 80056b0:	0018      	movs	r0, r3
 80056b2:	2338      	movs	r3, #56	; 0x38
 80056b4:	001a      	movs	r2, r3
 80056b6:	2100      	movs	r1, #0
 80056b8:	f019 fbd5 	bl	801ee66 <memset>
  if (rtcHandle->Instance == RTC)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	; (800571c <HAL_RTC_MspInit+0x78>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d126      	bne.n	8005714 <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80056c6:	193b      	adds	r3, r7, r4
 80056c8:	2204      	movs	r2, #4
 80056ca:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80056cc:	193b      	adds	r3, r7, r4
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	0052      	lsls	r2, r2, #1
 80056d2:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 80056d4:	193b      	adds	r3, r7, r4
 80056d6:	2200      	movs	r2, #0
 80056d8:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 80056da:	193b      	adds	r3, r7, r4
 80056dc:	2200      	movs	r2, #0
 80056de:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80056e0:	193b      	adds	r3, r7, r4
 80056e2:	2200      	movs	r2, #0
 80056e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056e6:	193b      	adds	r3, r7, r4
 80056e8:	0018      	movs	r0, r3
 80056ea:	f003 fb7d 	bl	8008de8 <HAL_RCC_OscConfig>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 80056f2:	f7ff ff33 	bl	800555c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <HAL_RTC_MspInit+0x7c>)
 80056f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RTC_MspInit+0x7c>)
 80056fc:	2180      	movs	r1, #128	; 0x80
 80056fe:	02c9      	lsls	r1, r1, #11
 8005700:	430a      	orrs	r2, r1
 8005702:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8005704:	2200      	movs	r2, #0
 8005706:	2100      	movs	r1, #0
 8005708:	2002      	movs	r0, #2
 800570a:	f002 fcad 	bl	8008068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800570e:	2002      	movs	r0, #2
 8005710:	f002 fcbf 	bl	8008092 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b011      	add	sp, #68	; 0x44
 800571a:	bd90      	pop	{r4, r7, pc}
 800571c:	40002800 	.word	0x40002800
 8005720:	40021000 	.word	0x40021000

08005724 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	0c1b      	lsrs	r3, r3, #16
}
 8005734:	0018      	movs	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	b002      	add	sp, #8
 800573a:	bd80      	pop	{r7, pc}

0800573c <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	; 0x28
 8005740:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <RTC_IF_Init+0x60>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	4053      	eors	r3, r2
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01f      	beq.n	8005790 <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	2220      	movs	r2, #32
 8005754:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	2280      	movs	r2, #128	; 0x80
 800575a:	0252      	lsls	r2, r2, #9
 800575c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	0018      	movs	r0, r3
 8005762:	f004 f939 	bl	80099d8 <HAL_RCCEx_PeriphCLKConfig>
 8005766:	1e03      	subs	r3, r0, #0
 8005768:	d000      	beq.n	800576c <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 800576a:	e7fe      	b.n	800576a <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 800576c:	f7ff fefa 	bl	8005564 <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	005a      	lsls	r2, r3, #1
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <RTC_IF_Init+0x64>)
 8005776:	0011      	movs	r1, r2
 8005778:	0018      	movs	r0, r3
 800577a:	f004 fe89 	bl	800a490 <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800577e:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <RTC_IF_Init+0x64>)
 8005780:	0018      	movs	r0, r3
 8005782:	f005 f833 	bl	800a7ec <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8005786:	f000 f859 	bl	800583c <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 800578a:	4b04      	ldr	r3, [pc, #16]	; (800579c <RTC_IF_Init+0x60>)
 800578c:	2201      	movs	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	0018      	movs	r0, r3
 8005794:	46bd      	mov	sp, r7
 8005796:	b00a      	add	sp, #40	; 0x28
 8005798:	bd80      	pop	{r7, pc}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	200005e4 	.word	0x200005e4
 80057a0:	20001904 	.word	0x20001904

080057a4 <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80057ac:	4b14      	ldr	r3, [pc, #80]	; (8005800 <RTC_IF_StartTimer+0x5c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	5e9b      	ldrsh	r3, [r3, r2]
 80057b2:	3303      	adds	r3, #3
 80057b4:	001c      	movs	r4, r3
 80057b6:	f000 f861 	bl	800587c <RTC_IF_GetTimerElapsedTime>
 80057ba:	0002      	movs	r2, r0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	429c      	cmp	r4, r3
 80057c2:	d204      	bcs.n	80057ce <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 80057c4:	2100      	movs	r1, #0
 80057c6:	2002      	movs	r0, #2
 80057c8:	f017 fa56 	bl	801cc78 <UTIL_LPM_SetStopMode>
 80057cc:	e003      	b.n	80057d6 <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 80057ce:	2101      	movs	r1, #1
 80057d0:	2002      	movs	r0, #2
 80057d2:	f017 fa51 	bl	801cc78 <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 80057d6:	f017 faaf 	bl	801cd38 <UTIL_LPM_GetMode>
 80057da:	0003      	movs	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d106      	bne.n	80057ee <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <RTC_IF_StartTimer+0x5c>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	5e9b      	ldrsh	r3, [r3, r2]
 80057e6:	001a      	movs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	1a9b      	subs	r3, r3, r2
 80057ec:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f000 f959 	bl	8005aa8 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b003      	add	sp, #12
 80057fe:	bd90      	pop	{r4, r7, pc}
 8005800:	200005e6 	.word	0x200005e6

08005804 <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <RTC_IF_StopTimer+0x30>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	22ff      	movs	r2, #255	; 0xff
 8005810:	401a      	ands	r2, r3
 8005812:	4b08      	ldr	r3, [pc, #32]	; (8005834 <RTC_IF_StopTimer+0x30>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4908      	ldr	r1, [pc, #32]	; (8005838 <RTC_IF_StopTimer+0x34>)
 8005818:	430a      	orrs	r2, r1
 800581a:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	005a      	lsls	r2, r3, #1
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <RTC_IF_StopTimer+0x30>)
 8005822:	0011      	movs	r1, r2
 8005824:	0018      	movs	r0, r3
 8005826:	f004 fe33 	bl	800a490 <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	20001904 	.word	0x20001904
 8005838:	fffffe7f 	.word	0xfffffe7f

0800583c <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8005840:	4a06      	ldr	r2, [pc, #24]	; (800585c <RTC_IF_SetTimerContext+0x20>)
 8005842:	4b07      	ldr	r3, [pc, #28]	; (8005860 <RTC_IF_SetTimerContext+0x24>)
 8005844:	0011      	movs	r1, r2
 8005846:	0018      	movs	r0, r3
 8005848:	f000 fa94 	bl	8005d74 <RTC_GetCalendarValue>
 800584c:	0002      	movs	r2, r0
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <RTC_IF_SetTimerContext+0x28>)
 8005850:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8005852:	4b04      	ldr	r3, [pc, #16]	; (8005864 <RTC_IF_SetTimerContext+0x28>)
 8005854:	681b      	ldr	r3, [r3, #0]
}
 8005856:	0018      	movs	r0, r3
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000614 	.word	0x20000614
 8005860:	20000628 	.word	0x20000628
 8005864:	20000610 	.word	0x20000610

08005868 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 800586c:	4b02      	ldr	r3, [pc, #8]	; (8005878 <RTC_IF_GetTimerContext+0x10>)
 800586e:	681b      	ldr	r3, [r3, #0]
}
 8005870:	0018      	movs	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	20000610 	.word	0x20000610

0800587c <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8005882:	2308      	movs	r3, #8
 8005884:	18fa      	adds	r2, r7, r3
 8005886:	1d3b      	adds	r3, r7, #4
 8005888:	0011      	movs	r1, r2
 800588a:	0018      	movs	r0, r3
 800588c:	f000 fa72 	bl	8005d74 <RTC_GetCalendarValue>
 8005890:	0003      	movs	r3, r0
 8005892:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8005894:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <RTC_IF_GetTimerElapsedTime+0x28>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	1ad3      	subs	r3, r2, r3
}
 800589c:	0018      	movs	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	b008      	add	sp, #32
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000610 	.word	0x20000610

080058a8 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <RTC_IF_GetTimerValue+0x30>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80058ba:	2308      	movs	r3, #8
 80058bc:	18fa      	adds	r2, r7, r3
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	0011      	movs	r1, r2
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 fa56 	bl	8005d74 <RTC_GetCalendarValue>
 80058c8:	0003      	movs	r3, r0
 80058ca:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 80058cc:	69fb      	ldr	r3, [r7, #28]
}
 80058ce:	0018      	movs	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b008      	add	sp, #32
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	200005e4 	.word	0x200005e4

080058dc <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 80058e0:	2303      	movs	r3, #3
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80058e8:	b5b0      	push	{r4, r5, r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	000a      	movs	r2, r1
 80058f4:	2100      	movs	r1, #0
 80058f6:	000b      	movs	r3, r1
 80058f8:	0e51      	lsrs	r1, r2, #25
 80058fa:	01dd      	lsls	r5, r3, #7
 80058fc:	430d      	orrs	r5, r1
 80058fe:	01d4      	lsls	r4, r2, #7
 8005900:	227d      	movs	r2, #125	; 0x7d
 8005902:	2300      	movs	r3, #0
 8005904:	0020      	movs	r0, r4
 8005906:	0029      	movs	r1, r5
 8005908:	f7fa fdba 	bl	8000480 <__aeabi_uldivmod>
 800590c:	0002      	movs	r2, r0
 800590e:	000b      	movs	r3, r1
 8005910:	0013      	movs	r3, r2
}
 8005912:	0018      	movs	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	b002      	add	sp, #8
 8005918:	bdb0      	pop	{r4, r5, r7, pc}

0800591a <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 800591a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591c:	b089      	sub	sp, #36	; 0x24
 800591e:	af00      	add	r7, sp, #0
 8005920:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	0ed1      	lsrs	r1, r2, #27
 8005930:	0158      	lsls	r0, r3, #5
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	4308      	orrs	r0, r1
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	0153      	lsls	r3, r2, #5
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	68fc      	ldr	r4, [r7, #12]
 8005942:	6939      	ldr	r1, [r7, #16]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	1a5b      	subs	r3, r3, r1
 8005948:	4194      	sbcs	r4, r2
 800594a:	001a      	movs	r2, r3
 800594c:	0023      	movs	r3, r4
 800594e:	0f91      	lsrs	r1, r2, #30
 8005950:	0098      	lsls	r0, r3, #2
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4308      	orrs	r0, r1
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	0093      	lsls	r3, r2, #2
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	6838      	ldr	r0, [r7, #0]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	1812      	adds	r2, r2, r0
 8005968:	414b      	adcs	r3, r1
 800596a:	0659      	lsls	r1, r3, #25
 800596c:	09d0      	lsrs	r0, r2, #7
 800596e:	0005      	movs	r5, r0
 8005970:	0028      	movs	r0, r5
 8005972:	4308      	orrs	r0, r1
 8005974:	0005      	movs	r5, r0
 8005976:	09db      	lsrs	r3, r3, #7
 8005978:	001e      	movs	r6, r3
 800597a:	002b      	movs	r3, r5
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	b009      	add	sp, #36	; 0x24
 8005982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005984 <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	0018      	movs	r0, r3
 8005998:	f7ff ffa6 	bl	80058e8 <RTC_IF_Convert_ms2Tick>
 800599c:	0003      	movs	r3, r0
 800599e:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 80059a0:	f7ff ff82 	bl	80058a8 <RTC_IF_GetTimerValue>
 80059a4:	0003      	movs	r3, r0
 80059a6:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 80059a8:	e000      	b.n	80059ac <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 80059aa:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 80059ac:	f7ff ff7c 	bl	80058a8 <RTC_IF_GetTimerValue>
 80059b0:	0002      	movs	r2, r0
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d8f6      	bhi.n	80059aa <RTC_IF_DelayMs+0x26>
  }
}
 80059bc:	46c0      	nop			; (mov r8, r8)
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	46bd      	mov	sp, r7
 80059c2:	b004      	add	sp, #16
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 80059ce:	f018 f8bd 	bl	801db4c <UTIL_TIMER_IRQ_Handler>
}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b002      	add	sp, #8
 80059d8:	bd80      	pop	{r7, pc}

080059da <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 80059da:	b5b0      	push	{r4, r5, r7, lr}
 80059dc:	b08c      	sub	sp, #48	; 0x30
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80059e2:	230c      	movs	r3, #12
 80059e4:	18fa      	adds	r2, r7, r3
 80059e6:	2308      	movs	r3, #8
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	0011      	movs	r1, r2
 80059ec:	0018      	movs	r0, r3
 80059ee:	f000 f9c1 	bl	8005d74 <RTC_GetCalendarValue>
 80059f2:	0003      	movs	r3, r0
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f6:	2300      	movs	r3, #0
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	059b      	lsls	r3, r3, #22
 80059fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a00:	0a94      	lsrs	r4, r2, #10
 8005a02:	431c      	orrs	r4, r3
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	0a9d      	lsrs	r5, r3, #10
 8005a08:	0023      	movs	r3, r4
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	059b      	lsls	r3, r3, #22
 8005a10:	0d9b      	lsrs	r3, r3, #22
 8005a12:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7ff ff7f 	bl	800591a <RTC_IF_Convert_Tick2ms>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	801a      	strh	r2, [r3, #0]

  return seconds;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a26:	0018      	movs	r0, r3
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	b00c      	add	sp, #48	; 0x30
 8005a2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a30 <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <RTC_IF_BkUp_Write_Seconds+0x1c>)
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f004 feaa 	bl	800a798 <HAL_RTCEx_BKUPWrite>
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b002      	add	sp, #8
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20001904 	.word	0x20001904

08005a50 <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f004 fe9a 	bl	800a798 <HAL_RTCEx_BKUPWrite>
}
 8005a64:	46c0      	nop			; (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20001904 	.word	0x20001904

08005a70 <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <RTC_IF_BkUp_Read_Seconds+0x18>)
 8005a76:	2100      	movs	r1, #0
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f004 fea3 	bl	800a7c4 <HAL_RTCEx_BKUPRead>
 8005a7e:	0003      	movs	r3, r0
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	20001904 	.word	0x20001904

08005a8c <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 8005a92:	2101      	movs	r1, #1
 8005a94:	0018      	movs	r0, r3
 8005a96:	f004 fe95 	bl	800a7c4 <HAL_RTCEx_BKUPRead>
 8005a9a:	0003      	movs	r3, r0
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	20001904 	.word	0x20001904

08005aa8 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8005aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aaa:	b08d      	sub	sp, #52	; 0x34
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8005ab0:	242e      	movs	r4, #46	; 0x2e
 8005ab2:	193b      	adds	r3, r7, r4
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8005ab8:	232c      	movs	r3, #44	; 0x2c
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	2200      	movs	r2, #0
 8005abe:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8005ac0:	232a      	movs	r3, #42	; 0x2a
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8005ac8:	2328      	movs	r3, #40	; 0x28
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	2200      	movs	r2, #0
 8005ace:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8005ad0:	2526      	movs	r5, #38	; 0x26
 8005ad2:	197b      	adds	r3, r7, r5
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8005ad8:	2610      	movs	r6, #16
 8005ada:	19ba      	adds	r2, r7, r6
 8005adc:	4b9b      	ldr	r3, [pc, #620]	; (8005d4c <RTC_StartWakeUpAlarm+0x2a4>)
 8005ade:	3304      	adds	r3, #4
 8005ae0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005ae2:	c223      	stmia	r2!, {r0, r1, r5}
 8005ae4:	cb03      	ldmia	r3!, {r0, r1}
 8005ae6:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8005ae8:	230c      	movs	r3, #12
 8005aea:	001d      	movs	r5, r3
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	4a97      	ldr	r2, [pc, #604]	; (8005d4c <RTC_StartWakeUpAlarm+0x2a4>)
 8005af0:	6992      	ldr	r2, [r2, #24]
 8005af2:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 8005af4:	f7ff fe86 	bl	8005804 <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8005af8:	19bb      	adds	r3, r7, r6
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	193b      	adds	r3, r7, r4
 8005b00:	4993      	ldr	r1, [pc, #588]	; (8005d50 <RTC_StartWakeUpAlarm+0x2a8>)
 8005b02:	1a8a      	subs	r2, r1, r2
 8005b04:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	059b      	lsls	r3, r3, #22
 8005b0c:	0d9b      	lsrs	r3, r3, #22
 8005b0e:	b299      	uxth	r1, r3
 8005b10:	193b      	adds	r3, r7, r4
 8005b12:	193a      	adds	r2, r7, r4
 8005b14:	8812      	ldrh	r2, [r2, #0]
 8005b16:	188a      	adds	r2, r1, r2
 8005b18:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	0a9b      	lsrs	r3, r3, #10
 8005b1e:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8005b20:	002b      	movs	r3, r5
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	789a      	ldrb	r2, [r3, #2]
 8005b26:	2526      	movs	r5, #38	; 0x26
 8005b28:	197b      	adds	r3, r7, r5
 8005b2a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8005b2c:	e00a      	b.n	8005b44 <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a88      	ldr	r2, [pc, #544]	; (8005d54 <RTC_StartWakeUpAlarm+0x2ac>)
 8005b32:	4694      	mov	ip, r2
 8005b34:	4463      	add	r3, ip
 8005b36:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8005b38:	2126      	movs	r1, #38	; 0x26
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	881a      	ldrh	r2, [r3, #0]
 8005b3e:	187b      	adds	r3, r7, r1
 8005b40:	3201      	adds	r2, #1
 8005b42:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a84      	ldr	r2, [pc, #528]	; (8005d58 <RTC_StartWakeUpAlarm+0x2b0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d8f0      	bhi.n	8005b2e <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	2328      	movs	r3, #40	; 0x28
 8005b54:	18fb      	adds	r3, r7, r3
 8005b56:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8005b58:	e00a      	b.n	8005b70 <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a7f      	ldr	r2, [pc, #508]	; (8005d5c <RTC_StartWakeUpAlarm+0x2b4>)
 8005b5e:	4694      	mov	ip, r2
 8005b60:	4463      	add	r3, ip
 8005b62:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8005b64:	2128      	movs	r1, #40	; 0x28
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	881a      	ldrh	r2, [r3, #0]
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	3201      	adds	r2, #1
 8005b6e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	23e1      	movs	r3, #225	; 0xe1
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d2ef      	bcs.n	8005b5a <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	785a      	ldrb	r2, [r3, #1]
 8005b80:	232a      	movs	r3, #42	; 0x2a
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8005b86:	e008      	b.n	8005b9a <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3b3c      	subs	r3, #60	; 0x3c
 8005b8c:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8005b8e:	212a      	movs	r1, #42	; 0x2a
 8005b90:	187b      	adds	r3, r7, r1
 8005b92:	881a      	ldrh	r2, [r3, #0]
 8005b94:	187b      	adds	r3, r7, r1
 8005b96:	3201      	adds	r2, #1
 8005b98:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b3b      	cmp	r3, #59	; 0x3b
 8005b9e:	d8f3      	bhi.n	8005b88 <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	789b      	ldrb	r3, [r3, #2]
 8005ba6:	b299      	uxth	r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	232c      	movs	r3, #44	; 0x2c
 8005bae:	18fb      	adds	r3, r7, r3
 8005bb0:	188a      	adds	r2, r1, r2
 8005bb2:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8005bb4:	e00d      	b.n	8005bd2 <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 8005bb6:	222e      	movs	r2, #46	; 0x2e
 8005bb8:	18bb      	adds	r3, r7, r2
 8005bba:	18ba      	adds	r2, r7, r2
 8005bbc:	8812      	ldrh	r2, [r2, #0]
 8005bbe:	4968      	ldr	r1, [pc, #416]	; (8005d60 <RTC_StartWakeUpAlarm+0x2b8>)
 8005bc0:	468c      	mov	ip, r1
 8005bc2:	4462      	add	r2, ip
 8005bc4:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8005bc6:	212c      	movs	r1, #44	; 0x2c
 8005bc8:	187b      	adds	r3, r7, r1
 8005bca:	881a      	ldrh	r2, [r3, #0]
 8005bcc:	187b      	adds	r3, r7, r1
 8005bce:	3201      	adds	r2, #1
 8005bd0:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8005bd2:	232e      	movs	r3, #46	; 0x2e
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d2ea      	bcs.n	8005bb6 <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8005be0:	e00b      	b.n	8005bfa <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8005be2:	222c      	movs	r2, #44	; 0x2c
 8005be4:	18bb      	adds	r3, r7, r2
 8005be6:	18ba      	adds	r2, r7, r2
 8005be8:	8812      	ldrh	r2, [r2, #0]
 8005bea:	3a3c      	subs	r2, #60	; 0x3c
 8005bec:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8005bee:	212a      	movs	r1, #42	; 0x2a
 8005bf0:	187b      	adds	r3, r7, r1
 8005bf2:	881a      	ldrh	r2, [r3, #0]
 8005bf4:	187b      	adds	r3, r7, r1
 8005bf6:	3201      	adds	r2, #1
 8005bf8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8005bfa:	232c      	movs	r3, #44	; 0x2c
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	2b3b      	cmp	r3, #59	; 0x3b
 8005c02:	d8ee      	bhi.n	8005be2 <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8005c04:	e00b      	b.n	8005c1e <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8005c06:	222a      	movs	r2, #42	; 0x2a
 8005c08:	18bb      	adds	r3, r7, r2
 8005c0a:	18ba      	adds	r2, r7, r2
 8005c0c:	8812      	ldrh	r2, [r2, #0]
 8005c0e:	3a3c      	subs	r2, #60	; 0x3c
 8005c10:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8005c12:	2128      	movs	r1, #40	; 0x28
 8005c14:	187b      	adds	r3, r7, r1
 8005c16:	881a      	ldrh	r2, [r3, #0]
 8005c18:	187b      	adds	r3, r7, r1
 8005c1a:	3201      	adds	r2, #1
 8005c1c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8005c1e:	232a      	movs	r3, #42	; 0x2a
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	2b3b      	cmp	r3, #59	; 0x3b
 8005c26:	d8ee      	bhi.n	8005c06 <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8005c28:	e00b      	b.n	8005c42 <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 8005c2a:	2228      	movs	r2, #40	; 0x28
 8005c2c:	18bb      	adds	r3, r7, r2
 8005c2e:	18ba      	adds	r2, r7, r2
 8005c30:	8812      	ldrh	r2, [r2, #0]
 8005c32:	3a18      	subs	r2, #24
 8005c34:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8005c36:	2126      	movs	r1, #38	; 0x26
 8005c38:	187b      	adds	r3, r7, r1
 8005c3a:	881a      	ldrh	r2, [r3, #0]
 8005c3c:	187b      	adds	r3, r7, r1
 8005c3e:	3201      	adds	r2, #1
 8005c40:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8005c42:	2328      	movs	r3, #40	; 0x28
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	2b17      	cmp	r3, #23
 8005c4a:	d8ee      	bhi.n	8005c2a <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 8005c4c:	210c      	movs	r1, #12
 8005c4e:	187b      	adds	r3, r7, r1
 8005c50:	78db      	ldrb	r3, [r3, #3]
 8005c52:	2203      	movs	r2, #3
 8005c54:	4013      	ands	r3, r2
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d119      	bne.n	8005c90 <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	4a40      	ldr	r2, [pc, #256]	; (8005d64 <RTC_StartWakeUpAlarm+0x2bc>)
 8005c64:	5cd3      	ldrb	r3, [r2, r3]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2426      	movs	r4, #38	; 0x26
 8005c6a:	193a      	adds	r2, r7, r4
 8005c6c:	8812      	ldrh	r2, [r2, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d928      	bls.n	8005cc4 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8005c72:	193b      	adds	r3, r7, r4
 8005c74:	8818      	ldrh	r0, [r3, #0]
 8005c76:	187b      	adds	r3, r7, r1
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	4a39      	ldr	r2, [pc, #228]	; (8005d64 <RTC_StartWakeUpAlarm+0x2bc>)
 8005c7e:	5cd3      	ldrb	r3, [r2, r3]
 8005c80:	0019      	movs	r1, r3
 8005c82:	f7fa fbb9 	bl	80003f8 <__aeabi_idivmod>
 8005c86:	000b      	movs	r3, r1
 8005c88:	001a      	movs	r2, r3
 8005c8a:	193b      	adds	r3, r7, r4
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e019      	b.n	8005cc4 <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8005c90:	210c      	movs	r1, #12
 8005c92:	187b      	adds	r3, r7, r1
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	4a33      	ldr	r2, [pc, #204]	; (8005d68 <RTC_StartWakeUpAlarm+0x2c0>)
 8005c9a:	5cd3      	ldrb	r3, [r2, r3]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2426      	movs	r4, #38	; 0x26
 8005ca0:	193a      	adds	r2, r7, r4
 8005ca2:	8812      	ldrh	r2, [r2, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d90d      	bls.n	8005cc4 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8005ca8:	193b      	adds	r3, r7, r4
 8005caa:	8818      	ldrh	r0, [r3, #0]
 8005cac:	187b      	adds	r3, r7, r1
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	4a2d      	ldr	r2, [pc, #180]	; (8005d68 <RTC_StartWakeUpAlarm+0x2c0>)
 8005cb4:	5cd3      	ldrb	r3, [r2, r3]
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	f7fa fb9e 	bl	80003f8 <__aeabi_idivmod>
 8005cbc:	000b      	movs	r3, r1
 8005cbe:	001a      	movs	r2, r3
 8005cc0:	193b      	adds	r3, r7, r4
 8005cc2:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8005cc4:	232e      	movs	r3, #46	; 0x2e
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	4a21      	ldr	r2, [pc, #132]	; (8005d50 <RTC_StartWakeUpAlarm+0x2a8>)
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	001a      	movs	r2, r3
 8005cd0:	4b26      	ldr	r3, [pc, #152]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005cd2:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8005cd4:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005cd6:	22a0      	movs	r2, #160	; 0xa0
 8005cd8:	0512      	lsls	r2, r2, #20
 8005cda:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8005cdc:	232c      	movs	r3, #44	; 0x2c
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	4b21      	ldr	r3, [pc, #132]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005ce6:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8005ce8:	232a      	movs	r3, #42	; 0x2a
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	4b1e      	ldr	r3, [pc, #120]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005cf2:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8005cf4:	2328      	movs	r3, #40	; 0x28
 8005cf6:	18fb      	adds	r3, r7, r3
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005cfe:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8005d00:	2326      	movs	r3, #38	; 0x26
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b2d9      	uxtb	r1, r3
 8005d08:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8005d0e:	2310      	movs	r3, #16
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	78da      	ldrb	r2, [r3, #3]
 8005d14:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005d16:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8005d24:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	0052      	lsls	r2, r2, #1
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005d32:	4b0e      	ldr	r3, [pc, #56]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8005d38:	490c      	ldr	r1, [pc, #48]	; (8005d6c <RTC_StartWakeUpAlarm+0x2c4>)
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <RTC_StartWakeUpAlarm+0x2c8>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f004 fa5a 	bl	800a1f8 <HAL_RTC_SetAlarm_IT>
}
 8005d44:	46c0      	nop			; (mov r8, r8)
 8005d46:	46bd      	mov	sp, r7
 8005d48:	b00d      	add	sp, #52	; 0x34
 8005d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d4c:	20000610 	.word	0x20000610
 8005d50:	000003ff 	.word	0x000003ff
 8005d54:	fffeae80 	.word	0xfffeae80
 8005d58:	0001517f 	.word	0x0001517f
 8005d5c:	fffff1f0 	.word	0xfffff1f0
 8005d60:	fffffc00 	.word	0xfffffc00
 8005d64:	080209f4 	.word	0x080209f4
 8005d68:	080209e8 	.word	0x080209e8
 8005d6c:	200005e8 	.word	0x200005e8
 8005d70:	20001904 	.word	0x20001904

08005d74 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	4b42      	ldr	r3, [pc, #264]	; (8005e90 <RTC_GetCalendarValue+0x11c>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f004 f8dd 	bl	8009f48 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 8005d8e:	4b41      	ldr	r3, [pc, #260]	; (8005e94 <RTC_GetCalendarValue+0x120>)
 8005d90:	0018      	movs	r0, r3
 8005d92:	f7ff fcc7 	bl	8005724 <LL_RTC_TIME_GetSubSecond>
 8005d96:	0003      	movs	r3, r0
 8005d98:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4b3c      	ldr	r3, [pc, #240]	; (8005e90 <RTC_GetCalendarValue+0x11c>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	0018      	movs	r0, r3
 8005da2:	f004 f9db 	bl	800a15c <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <RTC_GetCalendarValue+0x11c>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	0018      	movs	r0, r3
 8005dae:	f004 f8cb 	bl	8009f48 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8005db2:	4b38      	ldr	r3, [pc, #224]	; (8005e94 <RTC_GetCalendarValue+0x120>)
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7ff fcb5 	bl	8005724 <LL_RTC_TIME_GetSubSecond>
 8005dba:	0002      	movs	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d1e5      	bne.n	8005d8e <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	78db      	ldrb	r3, [r3, #3]
 8005dc6:	001a      	movs	r2, r3
 8005dc8:	4b33      	ldr	r3, [pc, #204]	; (8005e98 <RTC_GetCalendarValue+0x124>)
 8005dca:	4353      	muls	r3, r2
 8005dcc:	3303      	adds	r3, #3
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	78db      	ldrb	r3, [r3, #3]
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	4013      	ands	r3, r2
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <RTC_GetCalendarValue+0x70>
 8005de0:	4b2e      	ldr	r3, [pc, #184]	; (8005e9c <RTC_GetCalendarValue+0x128>)
 8005de2:	e000      	b.n	8005de6 <RTC_GetCalendarValue+0x72>
 8005de4:	4b2e      	ldr	r3, [pc, #184]	; (8005ea0 <RTC_GetCalendarValue+0x12c>)
 8005de6:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	0013      	movs	r3, r2
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	189b      	adds	r3, r3, r2
 8005df8:	3301      	adds	r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da00      	bge.n	8005e00 <RTC_GetCalendarValue+0x8c>
 8005dfe:	3301      	adds	r3, #1
 8005e00:	105b      	asrs	r3, r3, #1
 8005e02:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	40da      	lsrs	r2, r3
 8005e10:	0013      	movs	r3, r2
 8005e12:	2203      	movs	r2, #3
 8005e14:	4013      	ands	r3, r2
 8005e16:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	18d3      	adds	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	789b      	ldrb	r3, [r3, #2]
 8005e22:	001a      	movs	r2, r3
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	18d3      	adds	r3, r2, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	0013      	movs	r3, r2
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	011a      	lsls	r2, r3, #4
 8005e36:	1ad2      	subs	r2, r2, r3
 8005e38:	0113      	lsls	r3, r2, #4
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	01db      	lsls	r3, r3, #7
 8005e3e:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	789b      	ldrb	r3, [r3, #2]
 8005e44:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	001a      	movs	r2, r3
 8005e4c:	0013      	movs	r3, r2
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	011a      	lsls	r2, r3, #4
 8005e54:	1ad2      	subs	r2, r2, r3
 8005e56:	0113      	lsls	r3, r2, #4
 8005e58:	001a      	movs	r2, r3
 8005e5a:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	001a      	movs	r2, r3
 8005e62:	0013      	movs	r3, r2
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	18c3      	adds	r3, r0, r3
 8005e6c:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	18d3      	adds	r3, r2, r3
 8005e72:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	029a      	lsls	r2, r3, #10
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	4a09      	ldr	r2, [pc, #36]	; (8005ea4 <RTC_GetCalendarValue+0x130>)
 8005e80:	4694      	mov	ip, r2
 8005e82:	4463      	add	r3, ip
 8005e84:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 8005e86:	697b      	ldr	r3, [r7, #20]
}
 8005e88:	0018      	movs	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b006      	add	sp, #24
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20001904 	.word	0x20001904
 8005e94:	40002800 	.word	0x40002800
 8005e98:	000005b5 	.word	0x000005b5
 8005e9c:	00445550 	.word	0x00445550
 8005ea0:	0099aaa0 	.word	0x0099aaa0
 8005ea4:	000003ff 	.word	0x000003ff

08005ea8 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8005eac:	46c0      	nop			; (mov r8, r8)
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec6:	607b      	str	r3, [r7, #4]
  return(result);
 8005ec8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8005eca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ecc:	b672      	cpsid	i
}
 8005ece:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 8005ed0:	f000 ffce 	bl	8006e70 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <PWR_EnterStopMode+0x48>)
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f7ff f97a 	bl	80051d0 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <PWR_EnterStopMode+0x4c>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <PWR_EnterStopMode+0x4c>)
 8005ee2:	2104      	movs	r1, #4
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f383 8810 	msr	PRIMASK, r3
}
 8005ef2:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	f002 fefe 	bl	8008cf8 <HAL_PWR_EnterSTOPMode>
}
 8005efc:	46c0      	nop			; (mov r8, r8)
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b004      	add	sp, #16
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20001860 	.word	0x20001860
 8005f08:	40007000 	.word	0x40007000

08005f0c <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f12:	f3ef 8310 	mrs	r3, PRIMASK
 8005f16:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f18:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 8005f1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f1c:	b672      	cpsid	i
}
 8005f1e:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8005f20:	4b19      	ldr	r3, [pc, #100]	; (8005f88 <PWR_ExitStopMode+0x7c>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	4b18      	ldr	r3, [pc, #96]	; (8005f88 <PWR_ExitStopMode+0x7c>)
 8005f26:	2101      	movs	r1, #1
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	4b16      	ldr	r3, [pc, #88]	; (8005f88 <PWR_ExitStopMode+0x7c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2204      	movs	r2, #4
 8005f34:	4013      	ands	r3, r2
 8005f36:	d0fa      	beq.n	8005f2e <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8005f38:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <PWR_ExitStopMode+0x7c>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <PWR_ExitStopMode+0x7c>)
 8005f3e:	2180      	movs	r1, #128	; 0x80
 8005f40:	0449      	lsls	r1, r1, #17
 8005f42:	430a      	orrs	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <PWR_ExitStopMode+0x7c>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	049b      	lsls	r3, r3, #18
 8005f50:	4013      	ands	r3, r2
 8005f52:	d0f9      	beq.n	8005f48 <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <PWR_ExitStopMode+0x7c>)
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <PWR_ExitStopMode+0x7c>)
 8005f5a:	2103      	movs	r1, #3
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8005f60:	46c0      	nop			; (mov r8, r8)
 8005f62:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <PWR_ExitStopMode+0x7c>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	220c      	movs	r2, #12
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b0c      	cmp	r3, #12
 8005f6c:	d1f9      	bne.n	8005f62 <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8005f6e:	f000 fe79 	bl	8006c64 <CMWX1ZZABZ0XX_RADIO_IoInit>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f383 8810 	msr	PRIMASK, r3
}
 8005f7c:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b004      	add	sp, #16
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	40021000 	.word	0x40021000

08005f8c <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8005f90:	2101      	movs	r1, #1
 8005f92:	2000      	movs	r0, #0
 8005f94:	f002 fe58 	bl	8008c48 <HAL_PWR_EnterSLEEPMode>
}
 8005f98:	46c0      	nop			; (mov r8, r8)
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	af00      	add	r7, sp, #0
}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <HAL_MspInit+0x30>)
 8005fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_MspInit+0x30>)
 8005fb2:	2180      	movs	r1, #128	; 0x80
 8005fb4:	0549      	lsls	r1, r1, #21
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8005fba:	f002 fe37 	bl	8008c2c <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8005fbe:	f002 ff05 	bl	8008dcc <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <HAL_MspInit+0x34>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_MspInit+0x34>)
 8005fc8:	2108      	movs	r1, #8
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8005fce:	f002 feef 	bl	8008db0 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40022000 	.word	0x40022000

08005fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	e7fd      	b.n	8005fee <HardFault_Handler+0x4>

08005ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006000:	46c0      	nop			; (mov r8, r8)
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800600a:	f001 f9a1 	bl	8007350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <EXTI0_1_IRQHandler+0x1c>)
 800601a:	0018      	movs	r0, r3
 800601c:	f002 fb2c 	bl	8008678 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8006020:	4b04      	ldr	r3, [pc, #16]	; (8006034 <EXTI0_1_IRQHandler+0x20>)
 8006022:	0018      	movs	r0, r3
 8006024:	f002 fb28 	bl	8008678 <HAL_EXTI_IRQHandler>
#endif
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	20001a60 	.word	0x20001a60
 8006034:	20001a58 	.word	0x20001a58

08006038 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 800603c:	46c0      	nop			; (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <EXTI4_15_IRQHandler+0x1c>)
 800604a:	0018      	movs	r0, r3
 800604c:	f002 fb14 	bl	8008678 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8006050:	4b04      	ldr	r3, [pc, #16]	; (8006064 <EXTI4_15_IRQHandler+0x20>)
 8006052:	0018      	movs	r0, r3
 8006054:	f002 fb10 	bl	8008678 <HAL_EXTI_IRQHandler>
#endif
}
 8006058:	46c0      	nop			; (mov r8, r8)
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	20001a50 	.word	0x20001a50
 8006064:	20001a68 	.word	0x20001a68

08006068 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(hlpuart1.hdmatx);
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800606e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006070:	0018      	movs	r0, r3
 8006072:	f002 f9f2 	bl	800845a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20001928 	.word	0x20001928

08006080 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006084:	4b03      	ldr	r3, [pc, #12]	; (8006094 <RNG_LPUART1_IRQHandler+0x14>)
 8006086:	0018      	movs	r0, r3
 8006088:	f005 f862 	bl	800b150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800608c:	46c0      	nop			; (mov r8, r8)
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	20001928 	.word	0x20001928

08006098 <RTC_IRQHandler>:



void RTC_IRQHandler(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800609c:	4b03      	ldr	r3, [pc, #12]	; (80060ac <RTC_IRQHandler+0x14>)
 800609e:	0018      	movs	r0, r3
 80060a0:	f004 fa96 	bl	800a5d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80060a4:	46c0      	nop			; (mov r8, r8)
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	20001904 	.word	0x20001904

080060b0 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 80060b4:	f017 fbde 	bl	801d874 <UTIL_TIMER_Init>

  Gpio_PreInit();
 80060b8:	f000 f8f8 	bl	80062ac <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 80060bc:	f000 f9c4 	bl	8006448 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80060c0:	f016 fae8 	bl	801c694 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <SystemApp_Init+0x40>)
 80060c6:	0018      	movs	r0, r3
 80060c8:	f016 fbac 	bl	801c824 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80060cc:	2002      	movs	r0, #2
 80060ce:	f016 fbb7 	bl	801c840 <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80060d2:	f7ff f8a3 	bl	800521c <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 80060d6:	f000 fff9 	bl	80070cc <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 80060da:	f000 fdc3 	bl	8006c64 <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80060de:	f016 fdbb 	bl	801cc58 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80060e2:	2101      	movs	r1, #1
 80060e4:	2001      	movs	r0, #1
 80060e6:	f016 fdf7 	bl	801ccd8 <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	08006261 	.word	0x08006261

080060f4 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80060f8:	f016 fe50 	bl	801cd9c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80060fc:	46c0      	nop			; (mov r8, r8)
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b085      	sub	sp, #20
 8006108:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 800610a:	1dfb      	adds	r3, r7, #7
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8006110:	1d3c      	adds	r4, r7, #4
 8006112:	f7ff f8e7 	bl	80052e4 <SYS_GetBatteryLevel>
 8006116:	0003      	movs	r3, r0
 8006118:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	4a1a      	ldr	r2, [pc, #104]	; (8006188 <GetBatteryLevel+0x84>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d903      	bls.n	800612c <GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8006124:	1dfb      	adds	r3, r7, #7
 8006126:	22fe      	movs	r2, #254	; 0xfe
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	e01d      	b.n	8006168 <GetBatteryLevel+0x64>
  }
  else if (batteryLevelmV < VDD_MIN)
 800612c:	1d3b      	adds	r3, r7, #4
 800612e:	881a      	ldrh	r2, [r3, #0]
 8006130:	23e1      	movs	r3, #225	; 0xe1
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	429a      	cmp	r2, r3
 8006136:	d203      	bcs.n	8006140 <GetBatteryLevel+0x3c>
  {
    batteryLevel = 0;
 8006138:	1dfb      	adds	r3, r7, #7
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	e013      	b.n	8006168 <GetBatteryLevel+0x64>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	4a11      	ldr	r2, [pc, #68]	; (800618c <GetBatteryLevel+0x88>)
 8006146:	4694      	mov	ip, r2
 8006148:	4463      	add	r3, ip
 800614a:	001a      	movs	r2, r3
 800614c:	0013      	movs	r3, r2
 800614e:	01db      	lsls	r3, r3, #7
 8006150:	1a9b      	subs	r3, r3, r2
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	001a      	movs	r2, r3
 8006156:	2396      	movs	r3, #150	; 0x96
 8006158:	00d9      	lsls	r1, r3, #3
 800615a:	0010      	movs	r0, r2
 800615c:	f7f9 ffdc 	bl	8000118 <__udivsi3>
 8006160:	0003      	movs	r3, r0
 8006162:	001a      	movs	r2, r3
 8006164:	1dfb      	adds	r3, r7, #7
 8006166:	701a      	strb	r2, [r3, #0]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8006168:	1dfb      	adds	r3, r7, #7
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	4a08      	ldr	r2, [pc, #32]	; (8006190 <GetBatteryLevel+0x8c>)
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	0013      	movs	r3, r2
 8006172:	2201      	movs	r2, #1
 8006174:	2100      	movs	r1, #0
 8006176:	2002      	movs	r0, #2
 8006178:	f016 fabc 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 800617c:	1dfb      	adds	r3, r7, #7
 800617e:	781b      	ldrb	r3, [r3, #0]
}
 8006180:	0018      	movs	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	b003      	add	sp, #12
 8006186:	bd90      	pop	{r4, r7, pc}
 8006188:	00000bb8 	.word	0x00000bb8
 800618c:	fffff8f8 	.word	0xfffff8f8
 8006190:	08020a58 	.word	0x08020a58

08006194 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 800619a:	1dbb      	adds	r3, r7, #6
 800619c:	2200      	movs	r2, #0
 800619e:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80061a0:	f7ff f848 	bl	8005234 <SYS_GetTemperatureLevel>
 80061a4:	1e03      	subs	r3, r0, #0
 80061a6:	da00      	bge.n	80061aa <GetTemperatureLevel+0x16>
 80061a8:	33ff      	adds	r3, #255	; 0xff
 80061aa:	121b      	asrs	r3, r3, #8
 80061ac:	b21a      	sxth	r2, r3
 80061ae:	1dbb      	adds	r3, r7, #6
 80061b0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80061b2:	1dbb      	adds	r3, r7, #6
 80061b4:	881b      	ldrh	r3, [r3, #0]
}
 80061b6:	0018      	movs	r0, r3
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b002      	add	sp, #8
 80061bc:	bd80      	pop	{r7, pc}

080061be <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80061be:	b590      	push	{r4, r7, lr}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80061c6:	f001 f8d5 	bl	8007374 <HAL_GetUIDw0>
 80061ca:	0004      	movs	r4, r0
 80061cc:	f001 f8e6 	bl	800739c <HAL_GetUIDw2>
 80061d0:	0003      	movs	r3, r0
 80061d2:	18e3      	adds	r3, r4, r3
 80061d4:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 80061d6:	f001 f8d7 	bl	8007388 <HAL_GetUIDw1>
 80061da:	0003      	movs	r3, r0
 80061dc:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	0e1a      	lsrs	r2, r3, #24
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3307      	adds	r3, #7
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	0c1a      	lsrs	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3306      	adds	r3, #6
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	0a1a      	lsrs	r2, r3, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3305      	adds	r3, #5
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3304      	adds	r3, #4
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	0e1a      	lsrs	r2, r3, #24
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3303      	adds	r3, #3
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	0c1a      	lsrs	r2, r3, #16
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3302      	adds	r3, #2
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	0a1a      	lsrs	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3301      	adds	r3, #1
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	b2da      	uxtb	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b005      	add	sp, #20
 800623e:	bd90      	pop	{r4, r7, pc}

08006240 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8006240:	b5b0      	push	{r4, r5, r7, lr}
 8006242:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8006244:	f001 f896 	bl	8007374 <HAL_GetUIDw0>
 8006248:	0004      	movs	r4, r0
 800624a:	f001 f89d 	bl	8007388 <HAL_GetUIDw1>
 800624e:	0003      	movs	r3, r0
 8006250:	405c      	eors	r4, r3
 8006252:	f001 f8a3 	bl	800739c <HAL_GetUIDw2>
 8006256:	0003      	movs	r3, r0
 8006258:	4063      	eors	r3, r4
}
 800625a:	0018      	movs	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	bdb0      	pop	{r4, r5, r7, pc}

08006260 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b087      	sub	sp, #28
 8006264:	af02      	add	r7, sp, #8
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800626a:	2408      	movs	r4, #8
 800626c:	193b      	adds	r3, r7, r4
 800626e:	0018      	movs	r0, r3
 8006270:	f017 f8d8 	bl	801d424 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8006274:	0022      	movs	r2, r4
 8006276:	18bb      	adds	r3, r7, r2
 8006278:	6819      	ldr	r1, [r3, #0]
 800627a:	18bb      	adds	r3, r7, r2
 800627c:	2204      	movs	r2, #4
 800627e:	5e9b      	ldrsh	r3, [r3, r2]
 8006280:	4a09      	ldr	r2, [pc, #36]	; (80062a8 <TimestampNow+0x48>)
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	000b      	movs	r3, r1
 8006288:	2110      	movs	r1, #16
 800628a:	f000 f8a9 	bl	80063e0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	0018      	movs	r0, r3
 8006292:	f7f9 ff39 	bl	8000108 <strlen>
 8006296:	0003      	movs	r3, r0
 8006298:	b29a      	uxth	r2, r3
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b005      	add	sp, #20
 80062a4:	bd90      	pop	{r4, r7, pc}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	08020a64 	.word	0x08020a64

080062ac <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 80062ac:	b590      	push	{r4, r7, lr}
 80062ae:	b08b      	sub	sp, #44	; 0x2c
 80062b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062b2:	2414      	movs	r4, #20
 80062b4:	193b      	adds	r3, r7, r4
 80062b6:	0018      	movs	r0, r3
 80062b8:	2314      	movs	r3, #20
 80062ba:	001a      	movs	r2, r3
 80062bc:	2100      	movs	r1, #0
 80062be:	f018 fdd2 	bl	801ee66 <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062c2:	4b38      	ldr	r3, [pc, #224]	; (80063a4 <Gpio_PreInit+0xf8>)
 80062c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c6:	4b37      	ldr	r3, [pc, #220]	; (80063a4 <Gpio_PreInit+0xf8>)
 80062c8:	2101      	movs	r1, #1
 80062ca:	430a      	orrs	r2, r1
 80062cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80062ce:	4b35      	ldr	r3, [pc, #212]	; (80063a4 <Gpio_PreInit+0xf8>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	2201      	movs	r2, #1
 80062d4:	4013      	ands	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80062da:	4b32      	ldr	r3, [pc, #200]	; (80063a4 <Gpio_PreInit+0xf8>)
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	4b31      	ldr	r3, [pc, #196]	; (80063a4 <Gpio_PreInit+0xf8>)
 80062e0:	2102      	movs	r1, #2
 80062e2:	430a      	orrs	r2, r1
 80062e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80062e6:	4b2f      	ldr	r3, [pc, #188]	; (80063a4 <Gpio_PreInit+0xf8>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	2202      	movs	r2, #2
 80062ec:	4013      	ands	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062f2:	4b2c      	ldr	r3, [pc, #176]	; (80063a4 <Gpio_PreInit+0xf8>)
 80062f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f6:	4b2b      	ldr	r3, [pc, #172]	; (80063a4 <Gpio_PreInit+0xf8>)
 80062f8:	2104      	movs	r1, #4
 80062fa:	430a      	orrs	r2, r1
 80062fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80062fe:	4b29      	ldr	r3, [pc, #164]	; (80063a4 <Gpio_PreInit+0xf8>)
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	2204      	movs	r2, #4
 8006304:	4013      	ands	r3, r2
 8006306:	60bb      	str	r3, [r7, #8]
 8006308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800630a:	4b26      	ldr	r3, [pc, #152]	; (80063a4 <Gpio_PreInit+0xf8>)
 800630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630e:	4b25      	ldr	r3, [pc, #148]	; (80063a4 <Gpio_PreInit+0xf8>)
 8006310:	2180      	movs	r1, #128	; 0x80
 8006312:	430a      	orrs	r2, r1
 8006314:	62da      	str	r2, [r3, #44]	; 0x2c
 8006316:	4b23      	ldr	r3, [pc, #140]	; (80063a4 <Gpio_PreInit+0xf8>)
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631a:	2280      	movs	r2, #128	; 0x80
 800631c:	4013      	ands	r3, r2
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006322:	193b      	adds	r3, r7, r4
 8006324:	2203      	movs	r2, #3
 8006326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006328:	193b      	adds	r3, r7, r4
 800632a:	2200      	movs	r2, #0
 800632c:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800632e:	193b      	adds	r3, r7, r4
 8006330:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <Gpio_PreInit+0xfc>)
 8006332:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006334:	193a      	adds	r2, r7, r4
 8006336:	23a0      	movs	r3, #160	; 0xa0
 8006338:	05db      	lsls	r3, r3, #23
 800633a:	0011      	movs	r1, r2
 800633c:	0018      	movs	r0, r3
 800633e:	f002 f9bf 	bl	80086c0 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8006342:	193b      	adds	r3, r7, r4
 8006344:	4a19      	ldr	r2, [pc, #100]	; (80063ac <Gpio_PreInit+0x100>)
 8006346:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006348:	193b      	adds	r3, r7, r4
 800634a:	4a19      	ldr	r2, [pc, #100]	; (80063b0 <Gpio_PreInit+0x104>)
 800634c:	0019      	movs	r1, r3
 800634e:	0010      	movs	r0, r2
 8006350:	f002 f9b6 	bl	80086c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006354:	193b      	adds	r3, r7, r4
 8006356:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <Gpio_PreInit+0x108>)
 8006358:	0019      	movs	r1, r3
 800635a:	0010      	movs	r0, r2
 800635c:	f002 f9b0 	bl	80086c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006360:	193b      	adds	r3, r7, r4
 8006362:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <Gpio_PreInit+0x10c>)
 8006364:	0019      	movs	r1, r3
 8006366:	0010      	movs	r0, r2
 8006368:	f002 f9aa 	bl	80086c0 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800636c:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <Gpio_PreInit+0xf8>)
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <Gpio_PreInit+0xf8>)
 8006372:	2101      	movs	r1, #1
 8006374:	438a      	bics	r2, r1
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8006378:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <Gpio_PreInit+0xf8>)
 800637a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <Gpio_PreInit+0xf8>)
 800637e:	2102      	movs	r1, #2
 8006380:	438a      	bics	r2, r1
 8006382:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <Gpio_PreInit+0xf8>)
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <Gpio_PreInit+0xf8>)
 800638a:	2104      	movs	r1, #4
 800638c:	438a      	bics	r2, r1
 800638e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <Gpio_PreInit+0xf8>)
 8006392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <Gpio_PreInit+0xf8>)
 8006396:	2180      	movs	r1, #128	; 0x80
 8006398:	438a      	bics	r2, r1
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b00b      	add	sp, #44	; 0x2c
 80063a2:	bd90      	pop	{r4, r7, pc}
 80063a4:	40021000 	.word	0x40021000
 80063a8:	00009fff 	.word	0x00009fff
 80063ac:	0000ffff 	.word	0x0000ffff
 80063b0:	50000400 	.word	0x50000400
 80063b4:	50000800 	.word	0x50000800
 80063b8:	50001c00 	.word	0x50001c00

080063bc <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80063c0:	2101      	movs	r1, #1
 80063c2:	2004      	movs	r0, #4
 80063c4:	f016 fc58 	bl	801cc78 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80063c8:	46c0      	nop			; (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80063d2:	2100      	movs	r1, #0
 80063d4:	2004      	movs	r0, #4
 80063d6:	f016 fc4f 	bl	801cc78 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80063e0:	b40c      	push	{r2, r3}
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80063ec:	231c      	movs	r3, #28
 80063ee:	18fb      	adds	r3, r7, r3
 80063f0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f018 fbed 	bl	801ebd8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	46bd      	mov	sp, r7
 8006402:	b004      	add	sp, #16
 8006404:	bc80      	pop	{r7}
 8006406:	bc08      	pop	{r3}
 8006408:	b002      	add	sp, #8
 800640a:	4718      	bx	r3

0800640c <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8006416:	0018      	movs	r0, r3
 8006418:	46bd      	mov	sp, r7
 800641a:	b002      	add	sp, #8
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8006422:	f7ff fa41 	bl	80058a8 <RTC_IF_GetTimerValue>
 8006426:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8006428:	0018      	movs	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	0018      	movs	r0, r3
 800643a:	f7ff faa3 	bl	8005984 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	46bd      	mov	sp, r7
 8006442:	b002      	add	sp, #8
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
  HAL_DBGMCU_EnableDBGStandbyMode();

#elif defined (DEBUGGER_ON) && (DEBUGGER_ON == 0) /* DEBUGGER_OFF */
  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
  /* The 4 debug lines above are simply not set in this case */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800644e:	1d3b      	adds	r3, r7, #4
 8006450:	0018      	movs	r0, r3
 8006452:	2314      	movs	r3, #20
 8006454:	001a      	movs	r2, r3
 8006456:	2100      	movs	r1, #0
 8006458:	f018 fd05 	bl	801ee66 <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	2203      	movs	r2, #3
 8006460:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	2200      	movs	r2, #0
 8006466:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	22c0      	movs	r2, #192	; 0xc0
 800646c:	01d2      	lsls	r2, r2, #7
 800646e:	601a      	str	r2, [r3, #0]
  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8006470:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <DBG_Init+0x88>)
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	4b16      	ldr	r3, [pc, #88]	; (80064d0 <DBG_Init+0x88>)
 8006476:	2101      	movs	r1, #1
 8006478:	430a      	orrs	r2, r1
 800647a:	62da      	str	r2, [r3, #44]	; 0x2c
 800647c:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <DBG_Init+0x88>)
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	2201      	movs	r2, #1
 8006482:	4013      	ands	r3, r2
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006488:	1d3a      	adds	r2, r7, #4
 800648a:	23a0      	movs	r3, #160	; 0xa0
 800648c:	05db      	lsls	r3, r3, #23
 800648e:	0011      	movs	r1, r2
 8006490:	0018      	movs	r0, r3
 8006492:	f002 f915 	bl	80086c0 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE() ;
 8006496:	4b0e      	ldr	r3, [pc, #56]	; (80064d0 <DBG_Init+0x88>)
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <DBG_Init+0x88>)
 800649c:	2101      	movs	r1, #1
 800649e:	438a      	bics	r2, r1
 80064a0:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <DBG_Init+0x88>)
 80064a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a6:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <DBG_Init+0x88>)
 80064a8:	2180      	movs	r1, #128	; 0x80
 80064aa:	03c9      	lsls	r1, r1, #15
 80064ac:	430a      	orrs	r2, r1
 80064ae:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode();
 80064b0:	f000 ff7e 	bl	80073b0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80064b4:	f000 ff8a 	bl	80073cc <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80064b8:	f000 ff96 	bl	80073e8 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 80064bc:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <DBG_Init+0x88>)
 80064be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <DBG_Init+0x88>)
 80064c2:	4904      	ldr	r1, [pc, #16]	; (80064d4 <DBG_Init+0x8c>)
 80064c4:	400a      	ands	r2, r1
 80064c6:	635a      	str	r2, [r3, #52]	; 0x34
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80064c8:	46c0      	nop			; (mov r8, r8)
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b006      	add	sp, #24
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40021000 	.word	0x40021000
 80064d4:	ffbfffff 	.word	0xffbfffff

080064d8 <MX_LPUART1_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_Init(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80064dc:	4b10      	ldr	r3, [pc, #64]	; (8006520 <MX_LPUART1_Init+0x48>)
 80064de:	4a11      	ldr	r2, [pc, #68]	; (8006524 <MX_LPUART1_Init+0x4c>)
 80064e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = LPUART_BAUDRATE;
 80064e2:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <MX_LPUART1_Init+0x48>)
 80064e4:	2296      	movs	r2, #150	; 0x96
 80064e6:	0192      	lsls	r2, r2, #6
 80064e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <MX_LPUART1_Init+0x48>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <MX_LPUART1_Init+0x48>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80064f6:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <MX_LPUART1_Init+0x48>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80064fc:	4b08      	ldr	r3, [pc, #32]	; (8006520 <MX_LPUART1_Init+0x48>)
 80064fe:	220c      	movs	r2, #12
 8006500:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <MX_LPUART1_Init+0x48>)
 8006504:	2200      	movs	r2, #0
 8006506:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006508:	4b05      	ldr	r3, [pc, #20]	; (8006520 <MX_LPUART1_Init+0x48>)
 800650a:	0018      	movs	r0, r3
 800650c:	f004 fce2 	bl	800aed4 <HAL_UART_Init>
 8006510:	1e03      	subs	r3, r0, #0
 8006512:	d001      	beq.n	8006518 <MX_LPUART1_Init+0x40>
  {
    Error_Handler();
 8006514:	f7ff f822 	bl	800555c <Error_Handler>
  }
}
 8006518:	46c0      	nop			; (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	20001928 	.word	0x20001928
 8006524:	40004800 	.word	0x40004800

08006528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8006528:	b590      	push	{r4, r7, lr}
 800652a:	b093      	sub	sp, #76	; 0x4c
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006530:	2334      	movs	r3, #52	; 0x34
 8006532:	18fb      	adds	r3, r7, r3
 8006534:	0018      	movs	r0, r3
 8006536:	2314      	movs	r3, #20
 8006538:	001a      	movs	r2, r3
 800653a:	2100      	movs	r1, #0
 800653c:	f018 fc93 	bl	801ee66 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006540:	2410      	movs	r4, #16
 8006542:	193b      	adds	r3, r7, r4
 8006544:	0018      	movs	r0, r3
 8006546:	2324      	movs	r3, #36	; 0x24
 8006548:	001a      	movs	r2, r3
 800654a:	2100      	movs	r1, #0
 800654c:	f018 fc8b 	bl	801ee66 <memset>
  if (uartHandle->Instance == LPUART1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a44      	ldr	r2, [pc, #272]	; (8006668 <HAL_UART_MspInit+0x140>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d000      	beq.n	800655c <HAL_UART_MspInit+0x34>
 800655a:	e080      	b.n	800665e <HAL_UART_MspInit+0x136>
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800655c:	193b      	adds	r3, r7, r4
 800655e:	2204      	movs	r2, #4
 8006560:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8006562:	193b      	adds	r3, r7, r4
 8006564:	2280      	movs	r2, #128	; 0x80
 8006566:	0112      	lsls	r2, r2, #4
 8006568:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800656a:	193b      	adds	r3, r7, r4
 800656c:	0018      	movs	r0, r3
 800656e:	f003 fa33 	bl	80099d8 <HAL_RCCEx_PeriphCLKConfig>
 8006572:	1e03      	subs	r3, r0, #0
 8006574:	d001      	beq.n	800657a <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 8006576:	f7fe fff1 	bl	800555c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800657a:	4b3c      	ldr	r3, [pc, #240]	; (800666c <HAL_UART_MspInit+0x144>)
 800657c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800657e:	4b3b      	ldr	r3, [pc, #236]	; (800666c <HAL_UART_MspInit+0x144>)
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	02c9      	lsls	r1, r1, #11
 8006584:	430a      	orrs	r2, r1
 8006586:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006588:	4b38      	ldr	r3, [pc, #224]	; (800666c <HAL_UART_MspInit+0x144>)
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	4b37      	ldr	r3, [pc, #220]	; (800666c <HAL_UART_MspInit+0x144>)
 800658e:	2101      	movs	r1, #1
 8006590:	430a      	orrs	r2, r1
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c
 8006594:	4b35      	ldr	r3, [pc, #212]	; (800666c <HAL_UART_MspInit+0x144>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	2201      	movs	r2, #1
 800659a:	4013      	ands	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
      */
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80065a0:	2434      	movs	r4, #52	; 0x34
 80065a2:	193b      	adds	r3, r7, r4
 80065a4:	2208      	movs	r2, #8
 80065a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a8:	193b      	adds	r3, r7, r4
 80065aa:	2202      	movs	r2, #2
 80065ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ae:	193b      	adds	r3, r7, r4
 80065b0:	2200      	movs	r2, #0
 80065b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80065b4:	193b      	adds	r3, r7, r4
 80065b6:	2203      	movs	r2, #3
 80065b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80065ba:	193b      	adds	r3, r7, r4
 80065bc:	2206      	movs	r2, #6
 80065be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80065c0:	193a      	adds	r2, r7, r4
 80065c2:	23a0      	movs	r3, #160	; 0xa0
 80065c4:	05db      	lsls	r3, r3, #23
 80065c6:	0011      	movs	r1, r2
 80065c8:	0018      	movs	r0, r3
 80065ca:	f002 f879 	bl	80086c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 80065ce:	0021      	movs	r1, r4
 80065d0:	187b      	adds	r3, r7, r1
 80065d2:	2204      	movs	r2, #4
 80065d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d6:	187b      	adds	r3, r7, r1
 80065d8:	2202      	movs	r2, #2
 80065da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065dc:	187b      	adds	r3, r7, r1
 80065de:	2200      	movs	r2, #0
 80065e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80065e2:	187b      	adds	r3, r7, r1
 80065e4:	2203      	movs	r2, #3
 80065e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80065e8:	187b      	adds	r3, r7, r1
 80065ea:	2206      	movs	r2, #6
 80065ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80065ee:	187a      	adds	r2, r7, r1
 80065f0:	23a0      	movs	r3, #160	; 0xa0
 80065f2:	05db      	lsls	r3, r3, #23
 80065f4:	0011      	movs	r1, r2
 80065f6:	0018      	movs	r0, r3
 80065f8:	f002 f862 	bl	80086c0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80065fc:	4b1c      	ldr	r3, [pc, #112]	; (8006670 <HAL_UART_MspInit+0x148>)
 80065fe:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <HAL_UART_MspInit+0x14c>)
 8006600:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8006602:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <HAL_UART_MspInit+0x148>)
 8006604:	2205      	movs	r2, #5
 8006606:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006608:	4b19      	ldr	r3, [pc, #100]	; (8006670 <HAL_UART_MspInit+0x148>)
 800660a:	2210      	movs	r2, #16
 800660c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800660e:	4b18      	ldr	r3, [pc, #96]	; (8006670 <HAL_UART_MspInit+0x148>)
 8006610:	2200      	movs	r2, #0
 8006612:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006614:	4b16      	ldr	r3, [pc, #88]	; (8006670 <HAL_UART_MspInit+0x148>)
 8006616:	2280      	movs	r2, #128	; 0x80
 8006618:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800661a:	4b15      	ldr	r3, [pc, #84]	; (8006670 <HAL_UART_MspInit+0x148>)
 800661c:	2200      	movs	r2, #0
 800661e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006620:	4b13      	ldr	r3, [pc, #76]	; (8006670 <HAL_UART_MspInit+0x148>)
 8006622:	2200      	movs	r2, #0
 8006624:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8006626:	4b12      	ldr	r3, [pc, #72]	; (8006670 <HAL_UART_MspInit+0x148>)
 8006628:	2200      	movs	r2, #0
 800662a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <HAL_UART_MspInit+0x148>)
 800662e:	2200      	movs	r2, #0
 8006630:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8006632:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <HAL_UART_MspInit+0x148>)
 8006634:	0018      	movs	r0, r3
 8006636:	f001 fd4d 	bl	80080d4 <HAL_DMA_Init>
 800663a:	1e03      	subs	r3, r0, #0
 800663c:	d001      	beq.n	8006642 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 800663e:	f7fe ff8d 	bl	800555c <Error_Handler>
    }


    __HAL_LINKDMA(uartHandle, hdmatx, hdma_lpuart1_tx);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_UART_MspInit+0x148>)
 8006646:	66da      	str	r2, [r3, #108]	; 0x6c
 8006648:	4b09      	ldr	r3, [pc, #36]	; (8006670 <HAL_UART_MspInit+0x148>)
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	629a      	str	r2, [r3, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, USARTx_DMA_Priority, 0);
 800664e:	2200      	movs	r2, #0
 8006650:	2100      	movs	r1, #0
 8006652:	201d      	movs	r0, #29
 8006654:	f001 fd08 	bl	8008068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006658:	201d      	movs	r0, #29
 800665a:	f001 fd1a 	bl	8008092 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPUART1_MspInit 1 */

    /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	46bd      	mov	sp, r7
 8006662:	b013      	add	sp, #76	; 0x4c
 8006664:	bd90      	pop	{r4, r7, pc}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	40004800 	.word	0x40004800
 800666c:	40021000 	.word	0x40021000
 8006670:	200019ac 	.word	0x200019ac
 8006674:	40020080 	.word	0x40020080

08006678 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == LPUART1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <HAL_UART_MspDeInit+0x44>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d113      	bne.n	80066b2 <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800668a:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <HAL_UART_MspDeInit+0x48>)
 800668c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800668e:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <HAL_UART_MspDeInit+0x48>)
 8006690:	490c      	ldr	r1, [pc, #48]	; (80066c4 <HAL_UART_MspDeInit+0x4c>)
 8006692:	400a      	ands	r2, r1
 8006694:	639a      	str	r2, [r3, #56]	; 0x38

    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8006696:	23a0      	movs	r3, #160	; 0xa0
 8006698:	05db      	lsls	r3, r3, #23
 800669a:	210c      	movs	r1, #12
 800669c:	0018      	movs	r0, r3
 800669e:	f002 f98d 	bl	80089bc <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a6:	0018      	movs	r0, r3
 80066a8:	f001 fd8c 	bl	80081c4 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 80066ac:	201d      	movs	r0, #29
 80066ae:	f001 fd00 	bl	80080b2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN LPUART1_MspDeInit 1 */

    /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 80066b2:	46c0      	nop			; (mov r8, r8)
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b002      	add	sp, #8
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	40004800 	.word	0x40004800
 80066c0:	40021000 	.word	0x40021000
 80066c4:	fffbffff 	.word	0xfffbffff

080066c8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <vcom_Init+0x20>)
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 80066d6:	f7fe fea9 	bl	800542c <MX_DMA_Init>
  MX_LPUART1_Init();
 80066da:	f7ff fefd 	bl	80064d8 <MX_LPUART1_Init>
  return UTIL_ADV_TRACE_OK;
 80066de:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80066e0:	0018      	movs	r0, r3
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b002      	add	sp, #8
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	2000062c 	.word	0x2000062c

080066ec <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vcom_DeInit+0x34>)
 80066f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066f4:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <vcom_DeInit+0x34>)
 80066f6:	2180      	movs	r1, #128	; 0x80
 80066f8:	02c9      	lsls	r1, r1, #11
 80066fa:	430a      	orrs	r2, r1
 80066fc:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_LPUART1_RELEASE_RESET();
 80066fe:	4b08      	ldr	r3, [pc, #32]	; (8006720 <vcom_DeInit+0x34>)
 8006700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006702:	4b07      	ldr	r3, [pc, #28]	; (8006720 <vcom_DeInit+0x34>)
 8006704:	4907      	ldr	r1, [pc, #28]	; (8006724 <vcom_DeInit+0x38>)
 8006706:	400a      	ands	r2, r1
 8006708:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 800670a:	4b07      	ldr	r3, [pc, #28]	; (8006728 <vcom_DeInit+0x3c>)
 800670c:	0018      	movs	r0, r3
 800670e:	f7ff ffb3 	bl	8006678 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8006712:	200b      	movs	r0, #11
 8006714:	f001 fccd 	bl	80080b2 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8006718:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40021000 	.word	0x40021000
 8006724:	fffbffff 	.word	0xfffbffff
 8006728:	20001928 	.word	0x20001928

0800672c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	000a      	movs	r2, r1
 8006736:	1cbb      	adds	r3, r7, #2
 8006738:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 800673a:	1cbb      	adds	r3, r7, #2
 800673c:	881a      	ldrh	r2, [r3, #0]
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	4b04      	ldr	r3, [pc, #16]	; (8006754 <vcom_Trace_DMA+0x28>)
 8006742:	0018      	movs	r0, r3
 8006744:	f004 fc72 	bl	800b02c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8006748:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b002      	add	sp, #8
 8006750:	bd80      	pop	{r7, pc}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	20001928 	.word	0x20001928

08006758 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8006760:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <vcom_ReceiveInit+0x80>)
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8006766:	2108      	movs	r1, #8
 8006768:	187b      	adds	r3, r7, r1
 800676a:	2280      	movs	r2, #128	; 0x80
 800676c:	0392      	lsls	r2, r2, #14
 800676e:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8006770:	187b      	adds	r3, r7, r1
 8006772:	481a      	ldr	r0, [pc, #104]	; (80067dc <vcom_ReceiveInit+0x84>)
 8006774:	6819      	ldr	r1, [r3, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	f005 fdb0 	bl	800c2dc <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 800677c:	46c0      	nop			; (mov r8, r8)
 800677e:	4b17      	ldr	r3, [pc, #92]	; (80067dc <vcom_ReceiveInit+0x84>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	025b      	lsls	r3, r3, #9
 8006788:	401a      	ands	r2, r3
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	025b      	lsls	r3, r3, #9
 800678e:	429a      	cmp	r2, r3
 8006790:	d0f5      	beq.n	800677e <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	4b11      	ldr	r3, [pc, #68]	; (80067dc <vcom_ReceiveInit+0x84>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	2380      	movs	r3, #128	; 0x80
 800679c:	03db      	lsls	r3, r3, #15
 800679e:	401a      	ands	r2, r3
 80067a0:	2380      	movs	r3, #128	; 0x80
 80067a2:	03db      	lsls	r3, r3, #15
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d1f5      	bne.n	8006794 <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <vcom_ReceiveInit+0x84>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <vcom_ReceiveInit+0x84>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	03c9      	lsls	r1, r1, #15
 80067b6:	430a      	orrs	r2, r1
 80067b8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 80067ba:	4b08      	ldr	r3, [pc, #32]	; (80067dc <vcom_ReceiveInit+0x84>)
 80067bc:	0018      	movs	r0, r3
 80067be:	f005 fdf3 	bl	800c3a8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 80067c2:	4907      	ldr	r1, [pc, #28]	; (80067e0 <vcom_ReceiveInit+0x88>)
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <vcom_ReceiveInit+0x84>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	0018      	movs	r0, r3
 80067ca:	f004 fbd7 	bl	800af7c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80067ce:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80067d0:	0018      	movs	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	b004      	add	sp, #16
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20000630 	.word	0x20000630
 80067dc:	20001928 	.word	0x20001928
 80067e0:	200019f4 	.word	0x200019f4

080067e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80067ec:	4b03      	ldr	r3, [pc, #12]	; (80067fc <HAL_UART_TxCpltCallback+0x18>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2000      	movs	r0, #0
 80067f2:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80067f4:	46c0      	nop			; (mov r8, r8)
 80067f6:	46bd      	mov	sp, r7
 80067f8:	b002      	add	sp, #8
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	2000062c 	.word	0x2000062c

08006800 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <HAL_UART_RxCpltCallback+0x3c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <HAL_UART_RxCpltCallback+0x26>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2280      	movs	r2, #128	; 0x80
 8006814:	589b      	ldr	r3, [r3, r2]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <HAL_UART_RxCpltCallback+0x3c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4808      	ldr	r0, [pc, #32]	; (8006840 <HAL_UART_RxCpltCallback+0x40>)
 8006820:	2200      	movs	r2, #0
 8006822:	2101      	movs	r1, #1
 8006824:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8006826:	4906      	ldr	r1, [pc, #24]	; (8006840 <HAL_UART_RxCpltCallback+0x40>)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	0018      	movs	r0, r3
 800682e:	f004 fba5 	bl	800af7c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	46bd      	mov	sp, r7
 8006836:	b002      	add	sp, #8
 8006838:	bd80      	pop	{r7, pc}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	20000630 	.word	0x20000630
 8006840:	200019f4 	.word	0x200019f4

08006844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006844:	480d      	ldr	r0, [pc, #52]	; (800687c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006846:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006848:	480d      	ldr	r0, [pc, #52]	; (8006880 <LoopForever+0x6>)
  ldr r1, =_edata
 800684a:	490e      	ldr	r1, [pc, #56]	; (8006884 <LoopForever+0xa>)
  ldr r2, =_sidata
 800684c:	4a0e      	ldr	r2, [pc, #56]	; (8006888 <LoopForever+0xe>)
  movs r3, #0
 800684e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006850:	e002      	b.n	8006858 <LoopCopyDataInit>

08006852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006856:	3304      	adds	r3, #4

08006858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800685a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800685c:	d3f9      	bcc.n	8006852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800685e:	4a0b      	ldr	r2, [pc, #44]	; (800688c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006860:	4c0b      	ldr	r4, [pc, #44]	; (8006890 <LoopForever+0x16>)
  movs r3, #0
 8006862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006864:	e001      	b.n	800686a <LoopFillZerobss>

08006866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006868:	3204      	adds	r2, #4

0800686a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800686a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800686c:	d3fb      	bcc.n	8006866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800686e:	f000 fd11 	bl	8007294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006872:	f018 facb 	bl	801ee0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006876:	f7fe fdf7 	bl	8005468 <main>

0800687a <LoopForever>:

LoopForever:
    b LoopForever
 800687a:	e7fe      	b.n	800687a <LoopForever>
   ldr   r0, =_estack
 800687c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006884:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8006888:	08021c1c 	.word	0x08021c1c
  ldr r2, =_sbss
 800688c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8006890:	20001b38 	.word	0x20001b38

08006894 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006894:	e7fe      	b.n	8006894 <ADC1_COMP_IRQHandler>
	...

08006898 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800689e:	2300      	movs	r3, #0
 80068a0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <BSP_SPI1_Init+0x40>)
 80068a4:	4a0d      	ldr	r2, [pc, #52]	; (80068dc <BSP_SPI1_Init+0x44>)
 80068a6:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <BSP_SPI1_Init+0x40>)
 80068aa:	0018      	movs	r0, r3
 80068ac:	f004 fa31 	bl	800ad12 <HAL_SPI_GetState>
 80068b0:	1e03      	subs	r3, r0, #0
 80068b2:	d10c      	bne.n	80068ce <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 80068b4:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <BSP_SPI1_Init+0x40>)
 80068b6:	0018      	movs	r0, r3
 80068b8:	f000 f87e 	bl	80069b8 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80068bc:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <BSP_SPI1_Init+0x40>)
 80068be:	0018      	movs	r0, r3
 80068c0:	f000 f830 	bl	8006924 <MX_SPI1_Init>
 80068c4:	1e03      	subs	r3, r0, #0
 80068c6:	d002      	beq.n	80068ce <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80068c8:	2308      	movs	r3, #8
 80068ca:	425b      	negs	r3, r3
 80068cc:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80068ce:	687b      	ldr	r3, [r7, #4]
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b002      	add	sp, #8
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	200019f8 	.word	0x200019f8
 80068dc:	40013000 	.word	0x40013000

080068e0 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 80068e0:	b590      	push	{r4, r7, lr}
 80068e2:	b089      	sub	sp, #36	; 0x24
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	1dbb      	adds	r3, r7, #6
 80068ec:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80068ee:	2306      	movs	r3, #6
 80068f0:	425b      	negs	r3, r3
 80068f2:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80068f4:	1dbb      	adds	r3, r7, #6
 80068f6:	881c      	ldrh	r4, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	4808      	ldr	r0, [pc, #32]	; (8006920 <BSP_SPI1_SendRecv+0x40>)
 80068fe:	23fa      	movs	r3, #250	; 0xfa
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	0023      	movs	r3, r4
 8006906:	f004 f849 	bl	800a99c <HAL_SPI_TransmitReceive>
 800690a:	1e03      	subs	r3, r0, #0
 800690c:	d102      	bne.n	8006914 <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 800690e:	1dbb      	adds	r3, r7, #6
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8006914:	697b      	ldr	r3, [r7, #20]
}
 8006916:	0018      	movs	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	b007      	add	sp, #28
 800691c:	bd90      	pop	{r4, r7, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	200019f8 	.word	0x200019f8

08006924 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800692c:	240f      	movs	r4, #15
 800692e:	193b      	adds	r3, r7, r4
 8006930:	2200      	movs	r2, #0
 8006932:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a1e      	ldr	r2, [pc, #120]	; (80069b0 <MX_SPI1_Init+0x8c>)
 8006938:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2282      	movs	r2, #130	; 0x82
 800693e:	0052      	lsls	r2, r2, #1
 8006940:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2280      	movs	r2, #128	; 0x80
 800695e:	0092      	lsls	r2, r2, #2
 8006960:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8006962:	f003 f823 	bl	80099ac <HAL_RCC_GetPCLK2Freq>
 8006966:	0003      	movs	r3, r0
 8006968:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <MX_SPI1_Init+0x90>)
 800696a:	0011      	movs	r1, r2
 800696c:	0018      	movs	r0, r3
 800696e:	f000 f867 	bl	8006a40 <SPI_GetPrescaler>
 8006972:	0002      	movs	r2, r0
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2207      	movs	r2, #7
 800698e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0018      	movs	r0, r3
 8006994:	f003 ff66 	bl	800a864 <HAL_SPI_Init>
 8006998:	1e03      	subs	r3, r0, #0
 800699a:	d002      	beq.n	80069a2 <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 800699c:	193b      	adds	r3, r7, r4
 800699e:	2201      	movs	r2, #1
 80069a0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80069a2:	230f      	movs	r3, #15
 80069a4:	18fb      	adds	r3, r7, r3
 80069a6:	781b      	ldrb	r3, [r3, #0]
}
 80069a8:	0018      	movs	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	b005      	add	sp, #20
 80069ae:	bd90      	pop	{r4, r7, pc}
 80069b0:	40013000 	.word	0x40013000
 80069b4:	00989680 	.word	0x00989680

080069b8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 80069b8:	b590      	push	{r4, r7, lr}
 80069ba:	b089      	sub	sp, #36	; 0x24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <SPI1_MspInit+0x80>)
 80069c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069c4:	4b1c      	ldr	r3, [pc, #112]	; (8006a38 <SPI1_MspInit+0x80>)
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	0149      	lsls	r1, r1, #5
 80069ca:	430a      	orrs	r2, r1
 80069cc:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ce:	240c      	movs	r4, #12
 80069d0:	193b      	adds	r3, r7, r4
 80069d2:	2202      	movs	r2, #2
 80069d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d6:	193b      	adds	r3, r7, r4
 80069d8:	2200      	movs	r2, #0
 80069da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069dc:	193b      	adds	r3, r7, r4
 80069de:	2203      	movs	r2, #3
 80069e0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80069e2:	193b      	adds	r3, r7, r4
 80069e4:	2200      	movs	r2, #0
 80069e6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80069e8:	193b      	adds	r3, r7, r4
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80069ee:	193a      	adds	r2, r7, r4
 80069f0:	23a0      	movs	r3, #160	; 0xa0
 80069f2:	05db      	lsls	r3, r3, #23
 80069f4:	0011      	movs	r1, r2
 80069f6:	0018      	movs	r0, r3
 80069f8:	f001 fe62 	bl	80086c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80069fc:	193b      	adds	r3, r7, r4
 80069fe:	2200      	movs	r2, #0
 8006a00:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8006a02:	193b      	adds	r3, r7, r4
 8006a04:	2240      	movs	r2, #64	; 0x40
 8006a06:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006a08:	193a      	adds	r2, r7, r4
 8006a0a:	23a0      	movs	r3, #160	; 0xa0
 8006a0c:	05db      	lsls	r3, r3, #23
 8006a0e:	0011      	movs	r1, r2
 8006a10:	0018      	movs	r0, r3
 8006a12:	f001 fe55 	bl	80086c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8006a16:	193b      	adds	r3, r7, r4
 8006a18:	2200      	movs	r2, #0
 8006a1a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8006a1c:	193b      	adds	r3, r7, r4
 8006a1e:	2208      	movs	r2, #8
 8006a20:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006a22:	193b      	adds	r3, r7, r4
 8006a24:	4a05      	ldr	r2, [pc, #20]	; (8006a3c <SPI1_MspInit+0x84>)
 8006a26:	0019      	movs	r1, r3
 8006a28:	0010      	movs	r0, r2
 8006a2a:	f001 fe49 	bl	80086c0 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b009      	add	sp, #36	; 0x24
 8006a34:	bd90      	pop	{r4, r7, pc}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	50000400 	.word	0x50000400

08006a40 <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8006a56:	e00d      	b.n	8006a74 <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <SPI_GetPrescaler+0x4c>)
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	0092      	lsls	r2, r2, #2
 8006a5e:	58d3      	ldr	r3, [r2, r3]
 8006a60:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	3301      	adds	r3, #1
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	d807      	bhi.n	8006a7e <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d8ed      	bhi.n	8006a58 <SPI_GetPrescaler+0x18>
 8006a7c:	e000      	b.n	8006a80 <SPI_GetPrescaler+0x40>
      break;
 8006a7e:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 8006a80:	68fb      	ldr	r3, [r7, #12]
}
 8006a82:	0018      	movs	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	b006      	add	sp, #24
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	08020a80 	.word	0x08020a80

08006a90 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08c      	sub	sp, #48	; 0x30
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	0002      	movs	r2, r0
 8006a98:	1dfb      	adds	r3, r7, #7
 8006a9a:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006a9c:	1dfb      	adds	r3, r7, #7
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d02f      	beq.n	8006b04 <BSP_LED_Init+0x74>
 8006aa4:	dc3a      	bgt.n	8006b1c <BSP_LED_Init+0x8c>
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d01f      	beq.n	8006aea <BSP_LED_Init+0x5a>
 8006aaa:	dc37      	bgt.n	8006b1c <BSP_LED_Init+0x8c>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <BSP_LED_Init+0x26>
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d00d      	beq.n	8006ad0 <BSP_LED_Init+0x40>
 8006ab4:	e032      	b.n	8006b1c <BSP_LED_Init+0x8c>
 8006ab6:	4b2a      	ldr	r3, [pc, #168]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aba:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006abc:	2102      	movs	r1, #2
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ac2:	4b27      	ldr	r3, [pc, #156]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	4013      	ands	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	e025      	b.n	8006b1c <BSP_LED_Init+0x8c>
 8006ad0:	4b23      	ldr	r3, [pc, #140]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8006adc:	4b20      	ldr	r3, [pc, #128]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	e018      	b.n	8006b1c <BSP_LED_Init+0x8c>
 8006aea:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	4b1c      	ldr	r3, [pc, #112]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006af0:	2102      	movs	r1, #2
 8006af2:	430a      	orrs	r2, r1
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006af6:	4b1a      	ldr	r3, [pc, #104]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	2202      	movs	r2, #2
 8006afc:	4013      	ands	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	e00b      	b.n	8006b1c <BSP_LED_Init+0x8c>
 8006b04:	4b16      	ldr	r3, [pc, #88]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b10:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <BSP_LED_Init+0xd0>)
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	2202      	movs	r2, #2
 8006b16:	4013      	ands	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8006b1e:	1dfb      	adds	r3, r7, #7
 8006b20:	781a      	ldrb	r2, [r3, #0]
 8006b22:	4b10      	ldr	r3, [pc, #64]	; (8006b64 <BSP_LED_Init+0xd4>)
 8006b24:	0052      	lsls	r2, r2, #1
 8006b26:	5ad3      	ldrh	r3, [r2, r3]
 8006b28:	001a      	movs	r2, r3
 8006b2a:	211c      	movs	r1, #28
 8006b2c:	187b      	adds	r3, r7, r1
 8006b2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b30:	187b      	adds	r3, r7, r1
 8006b32:	2201      	movs	r2, #1
 8006b34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b36:	187b      	adds	r3, r7, r1
 8006b38:	2200      	movs	r2, #0
 8006b3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b3c:	187b      	adds	r3, r7, r1
 8006b3e:	2203      	movs	r2, #3
 8006b40:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006b42:	1dfb      	adds	r3, r7, #7
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <BSP_LED_Init+0xd8>)
 8006b48:	0092      	lsls	r2, r2, #2
 8006b4a:	58d3      	ldr	r3, [r2, r3]
 8006b4c:	187a      	adds	r2, r7, r1
 8006b4e:	0011      	movs	r1, r2
 8006b50:	0018      	movs	r0, r3
 8006b52:	f001 fdb5 	bl	80086c0 <HAL_GPIO_Init>
}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b00c      	add	sp, #48	; 0x30
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	40021000 	.word	0x40021000
 8006b64:	08020aa0 	.word	0x08020aa0
 8006b68:	20000060 	.word	0x20000060

08006b6c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	0002      	movs	r2, r0
 8006b74:	1dfb      	adds	r3, r7, #7
 8006b76:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8006b78:	1dfb      	adds	r3, r7, #7
 8006b7a:	781a      	ldrb	r2, [r3, #0]
 8006b7c:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <BSP_LED_On+0x30>)
 8006b7e:	0092      	lsls	r2, r2, #2
 8006b80:	58d0      	ldr	r0, [r2, r3]
 8006b82:	1dfb      	adds	r3, r7, #7
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <BSP_LED_On+0x34>)
 8006b88:	0052      	lsls	r2, r2, #1
 8006b8a:	5ad3      	ldrh	r3, [r2, r3]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	0019      	movs	r1, r3
 8006b90:	f002 f813 	bl	8008bba <HAL_GPIO_WritePin>
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b002      	add	sp, #8
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20000060 	.word	0x20000060
 8006ba0:	08020aa0 	.word	0x08020aa0

08006ba4 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	0002      	movs	r2, r0
 8006bac:	1dfb      	adds	r3, r7, #7
 8006bae:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8006bb0:	1dfb      	adds	r3, r7, #7
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <BSP_LED_Off+0x30>)
 8006bb6:	0092      	lsls	r2, r2, #2
 8006bb8:	58d0      	ldr	r0, [r2, r3]
 8006bba:	1dfb      	adds	r3, r7, #7
 8006bbc:	781a      	ldrb	r2, [r3, #0]
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <BSP_LED_Off+0x34>)
 8006bc0:	0052      	lsls	r2, r2, #1
 8006bc2:	5ad3      	ldrh	r3, [r2, r3]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	0019      	movs	r1, r3
 8006bc8:	f001 fff7 	bl	8008bba <HAL_GPIO_WritePin>
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b002      	add	sp, #8
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000060 	.word	0x20000060
 8006bd8:	08020aa0 	.word	0x08020aa0

08006bdc <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	0002      	movs	r2, r0
 8006be4:	1dfb      	adds	r3, r7, #7
 8006be6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8006be8:	1dfb      	adds	r3, r7, #7
 8006bea:	781a      	ldrb	r2, [r3, #0]
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <BSP_LED_Toggle+0x30>)
 8006bee:	0092      	lsls	r2, r2, #2
 8006bf0:	58d0      	ldr	r0, [r2, r3]
 8006bf2:	1dfb      	adds	r3, r7, #7
 8006bf4:	781a      	ldrb	r2, [r3, #0]
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <BSP_LED_Toggle+0x34>)
 8006bf8:	0052      	lsls	r2, r2, #1
 8006bfa:	5ad3      	ldrh	r3, [r2, r3]
 8006bfc:	0019      	movs	r1, r3
 8006bfe:	f001 fff9 	bl	8008bf4 <HAL_GPIO_TogglePin>
}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	46bd      	mov	sp, r7
 8006c06:	b002      	add	sp, #8
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	20000060 	.word	0x20000060
 8006c10:	08020aa0 	.word	0x08020aa0

08006c14 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8006c18:	2305      	movs	r3, #5
}
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	0002      	movs	r2, r0
 8006c28:	1dfb      	adds	r3, r7, #7
 8006c2a:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 8006c2c:	1dfb      	adds	r3, r7, #7
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d10b      	bne.n	8006c4c <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	0159      	lsls	r1, r3, #5
 8006c38:	23a0      	movs	r3, #160	; 0xa0
 8006c3a:	05db      	lsls	r3, r3, #23
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f001 ffbb 	bl	8008bba <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8006c44:	2005      	movs	r0, #5
 8006c46:	f7ff fbf2 	bl	800642e <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8006c4a:	e007      	b.n	8006c5c <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	0159      	lsls	r1, r3, #5
 8006c50:	23a0      	movs	r3, #160	; 0xa0
 8006c52:	05db      	lsls	r3, r3, #23
 8006c54:	2200      	movs	r2, #0
 8006c56:	0018      	movs	r0, r3
 8006c58:	f001 ffaf 	bl	8008bba <HAL_GPIO_WritePin>
}
 8006c5c:	46c0      	nop			; (mov r8, r8)
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b002      	add	sp, #8
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 8006c64:	b590      	push	{r4, r7, lr}
 8006c66:	b0a7      	sub	sp, #156	; 0x9c
 8006c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8006c6a:	2480      	movs	r4, #128	; 0x80
 8006c6c:	193b      	adds	r3, r7, r4
 8006c6e:	0018      	movs	r0, r3
 8006c70:	2314      	movs	r3, #20
 8006c72:	001a      	movs	r2, r3
 8006c74:	2100      	movs	r1, #0
 8006c76:	f018 f8f6 	bl	801ee66 <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8006c7a:	4b78      	ldr	r3, [pc, #480]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7e:	4b77      	ldr	r3, [pc, #476]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006c80:	2102      	movs	r1, #2
 8006c82:	430a      	orrs	r2, r1
 8006c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c86:	4b75      	ldr	r3, [pc, #468]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8006c92:	4b72      	ldr	r3, [pc, #456]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	4b71      	ldr	r3, [pc, #452]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006c98:	2102      	movs	r1, #2
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c9e:	4b6f      	ldr	r3, [pc, #444]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	623b      	str	r3, [r7, #32]
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8006caa:	4b6c      	ldr	r3, [pc, #432]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	4b6b      	ldr	r3, [pc, #428]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cb6:	4b69      	ldr	r3, [pc, #420]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	2202      	movs	r2, #2
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8006cc2:	4b66      	ldr	r3, [pc, #408]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc6:	4b65      	ldr	r3, [pc, #404]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006cc8:	2104      	movs	r1, #4
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cce:	4b63      	ldr	r3, [pc, #396]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 8006cda:	193b      	adds	r3, r7, r4
 8006cdc:	2202      	movs	r2, #2
 8006cde:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006ce0:	193b      	adds	r3, r7, r4
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2294      	movs	r2, #148	; 0x94
 8006cea:	18ba      	adds	r2, r7, r2
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e020      	b.n	8006d32 <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8006cf0:	4b5b      	ldr	r3, [pc, #364]	; (8006e60 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 8006cf2:	2194      	movs	r1, #148	; 0x94
 8006cf4:	187a      	adds	r2, r7, r1
 8006cf6:	6812      	ldr	r2, [r2, #0]
 8006cf8:	0092      	lsls	r2, r2, #2
 8006cfa:	58d2      	ldr	r2, [r2, r3]
 8006cfc:	2080      	movs	r0, #128	; 0x80
 8006cfe:	183b      	adds	r3, r7, r0
 8006d00:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8006d02:	4b58      	ldr	r3, [pc, #352]	; (8006e64 <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 8006d04:	187a      	adds	r2, r7, r1
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	0052      	lsls	r2, r2, #1
 8006d0a:	5ad3      	ldrh	r3, [r2, r3]
 8006d0c:	001a      	movs	r2, r3
 8006d0e:	183b      	adds	r3, r7, r0
 8006d10:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8006d12:	4b55      	ldr	r3, [pc, #340]	; (8006e68 <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 8006d14:	000c      	movs	r4, r1
 8006d16:	187a      	adds	r2, r7, r1
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	0092      	lsls	r2, r2, #2
 8006d1c:	58d3      	ldr	r3, [r2, r3]
 8006d1e:	183a      	adds	r2, r7, r0
 8006d20:	0011      	movs	r1, r2
 8006d22:	0018      	movs	r0, r3
 8006d24:	f001 fccc 	bl	80086c0 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006d28:	193b      	adds	r3, r7, r4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	193a      	adds	r2, r7, r4
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	2394      	movs	r3, #148	; 0x94
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d9d9      	bls.n	8006cf0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 8006d3c:	2328      	movs	r3, #40	; 0x28
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	0018      	movs	r0, r3
 8006d42:	f000 fa07 	bl	8007154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 8006d46:	2480      	movs	r4, #128	; 0x80
 8006d48:	193b      	adds	r3, r7, r4
 8006d4a:	2280      	movs	r2, #128	; 0x80
 8006d4c:	0212      	lsls	r2, r2, #8
 8006d4e:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d50:	193b      	adds	r3, r7, r4
 8006d52:	2201      	movs	r2, #1
 8006d54:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 8006d56:	193b      	adds	r3, r7, r4
 8006d58:	2201      	movs	r2, #1
 8006d5a:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 8006d5c:	4b3f      	ldr	r3, [pc, #252]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d60:	4b3e      	ldr	r3, [pc, #248]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006d62:	2101      	movs	r1, #1
 8006d64:	430a      	orrs	r2, r1
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d68:	4b3c      	ldr	r3, [pc, #240]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	4013      	ands	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8006d74:	193a      	adds	r2, r7, r4
 8006d76:	23a0      	movs	r3, #160	; 0xa0
 8006d78:	05db      	lsls	r3, r3, #23
 8006d7a:	0011      	movs	r1, r2
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f001 fc9f 	bl	80086c0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8006d82:	2380      	movs	r3, #128	; 0x80
 8006d84:	0219      	lsls	r1, r3, #8
 8006d86:	23a0      	movs	r3, #160	; 0xa0
 8006d88:	05db      	lsls	r3, r3, #23
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f001 ff14 	bl	8008bba <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 8006d92:	4b32      	ldr	r3, [pc, #200]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d96:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006d98:	2101      	movs	r1, #1
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d9e:	4b2f      	ldr	r3, [pc, #188]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	2201      	movs	r2, #1
 8006da4:	4013      	ands	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8006daa:	4b2c      	ldr	r3, [pc, #176]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	4b2b      	ldr	r3, [pc, #172]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006db0:	2101      	movs	r1, #1
 8006db2:	430a      	orrs	r2, r1
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8006dc2:	4b26      	ldr	r3, [pc, #152]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc6:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006dc8:	2104      	movs	r1, #4
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006dce:	4b23      	ldr	r3, [pc, #140]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	60bb      	str	r3, [r7, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8006dda:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	4b1f      	ldr	r3, [pc, #124]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006de0:	2104      	movs	r1, #4
 8006de2:	430a      	orrs	r2, r1
 8006de4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006de6:	4b1d      	ldr	r3, [pc, #116]	; (8006e5c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dea:	2204      	movs	r2, #4
 8006dec:	4013      	ands	r3, r2
 8006dee:	607b      	str	r3, [r7, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006df2:	193b      	adds	r3, r7, r4
 8006df4:	2201      	movs	r2, #1
 8006df6:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8006df8:	193b      	adds	r3, r7, r4
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006dfe:	193b      	adds	r3, r7, r4
 8006e00:	2203      	movs	r2, #3
 8006e02:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8006e04:	193b      	adds	r3, r7, r4
 8006e06:	2280      	movs	r2, #128	; 0x80
 8006e08:	0152      	lsls	r2, r2, #5
 8006e0a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8006e0c:	193a      	adds	r2, r7, r4
 8006e0e:	23a0      	movs	r3, #160	; 0xa0
 8006e10:	05db      	lsls	r3, r3, #23
 8006e12:	0011      	movs	r1, r2
 8006e14:	0018      	movs	r0, r3
 8006e16:	f001 fc53 	bl	80086c0 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8006e1a:	193b      	adds	r3, r7, r4
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8006e20:	193a      	adds	r2, r7, r4
 8006e22:	23a0      	movs	r3, #160	; 0xa0
 8006e24:	05db      	lsls	r3, r3, #23
 8006e26:	0011      	movs	r1, r2
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f001 fc49 	bl	80086c0 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8006e2e:	193b      	adds	r3, r7, r4
 8006e30:	2202      	movs	r2, #2
 8006e32:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8006e34:	193b      	adds	r3, r7, r4
 8006e36:	4a0d      	ldr	r2, [pc, #52]	; (8006e6c <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8006e38:	0019      	movs	r1, r3
 8006e3a:	0010      	movs	r0, r2
 8006e3c:	f001 fc40 	bl	80086c0 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8006e40:	193b      	adds	r3, r7, r4
 8006e42:	2204      	movs	r2, #4
 8006e44:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8006e46:	193b      	adds	r3, r7, r4
 8006e48:	4a08      	ldr	r2, [pc, #32]	; (8006e6c <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8006e4a:	0019      	movs	r1, r3
 8006e4c:	0010      	movs	r0, r2
 8006e4e:	f001 fc37 	bl	80086c0 <HAL_GPIO_Init>
}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b027      	add	sp, #156	; 0x9c
 8006e58:	bd90      	pop	{r4, r7, pc}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	08020adc 	.word	0x08020adc
 8006e64:	08020ad4 	.word	0x08020ad4
 8006e68:	20000074 	.word	0x20000074
 8006e6c:	50000800 	.word	0x50000800

08006e70 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8006e76:	003b      	movs	r3, r7
 8006e78:	0018      	movs	r0, r3
 8006e7a:	2314      	movs	r3, #20
 8006e7c:	001a      	movs	r2, r3
 8006e7e:	2100      	movs	r1, #0
 8006e80:	f017 fff1 	bl	801ee66 <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 8006e84:	003b      	movs	r3, r7
 8006e86:	2202      	movs	r2, #2
 8006e88:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	e018      	b.n	8006ec2 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8006e90:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	0092      	lsls	r2, r2, #2
 8006e96:	58d2      	ldr	r2, [r2, r3]
 8006e98:	003b      	movs	r3, r7
 8006e9a:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8006e9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	0052      	lsls	r2, r2, #1
 8006ea2:	5ad3      	ldrh	r3, [r2, r3]
 8006ea4:	001a      	movs	r2, r3
 8006ea6:	003b      	movs	r3, r7
 8006ea8:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	58d3      	ldr	r3, [r2, r3]
 8006eb2:	003a      	movs	r2, r7
 8006eb4:	0011      	movs	r1, r2
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f001 fc02 	bl	80086c0 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d9e3      	bls.n	8006e90 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 8006ec8:	f000 f9a4 	bl	8007214 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b006      	add	sp, #24
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	08020adc 	.word	0x08020adc
 8006ed8:	08020ad4 	.word	0x08020ad4
 8006edc:	20000074 	.word	0x20000074

08006ee0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8006eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eee:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 8006ef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ef2:	b672      	cpsid	i
}
 8006ef4:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	e02f      	b.n	8006f5c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	00da      	lsls	r2, r3, #3
 8006f00:	4b1d      	ldr	r3, [pc, #116]	; (8006f78 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8006f02:	18d0      	adds	r0, r2, r3
 8006f04:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	0092      	lsls	r2, r2, #2
 8006f0a:	58d3      	ldr	r3, [r2, r3]
 8006f0c:	0019      	movs	r1, r3
 8006f0e:	f001 fba1 	bl	8008654 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	00da      	lsls	r2, r3, #3
 8006f16:	4b18      	ldr	r3, [pc, #96]	; (8006f78 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8006f18:	18d0      	adds	r0, r2, r3
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	18d3      	adds	r3, r2, r3
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	001a      	movs	r2, r3
 8006f26:	2100      	movs	r1, #0
 8006f28:	f001 fb73 	bl	8008612 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8006f2c:	4a14      	ldr	r2, [pc, #80]	; (8006f80 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	18d3      	adds	r3, r2, r3
 8006f32:	2000      	movs	r0, #0
 8006f34:	5618      	ldrsb	r0, [r3, r0]
 8006f36:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	0092      	lsls	r2, r2, #2
 8006f3c:	58d3      	ldr	r3, [r2, r3]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	0019      	movs	r1, r3
 8006f42:	f001 f891 	bl	8008068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8006f46:	4a0e      	ldr	r2, [pc, #56]	; (8006f80 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	18d3      	adds	r3, r2, r3
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b25b      	sxtb	r3, r3
 8006f50:	0018      	movs	r0, r3
 8006f52:	f001 f89e 	bl	8008092 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d9cc      	bls.n	8006efc <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f383 8810 	msr	PRIMASK, r3
}
 8006f6c:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b006      	add	sp, #24
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	20001a50 	.word	0x20001a50
 8006f7c:	08020ab0 	.word	0x08020ab0
 8006f80:	08020ad0 	.word	0x08020ad0
 8006f84:	08020ac0 	.word	0x08020ac0

08006f88 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	0018      	movs	r0, r3
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b002      	add	sp, #8
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	0002      	movs	r2, r0
 8006fa4:	1dfb      	adds	r3, r7, #7
 8006fa6:	701a      	strb	r2, [r3, #0]

  switch (state)
 8006fa8:	1dfb      	adds	r3, r7, #7
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d82e      	bhi.n	800700e <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 8006fb0:	009a      	lsls	r2, r3, #2
 8006fb2:	4b23      	ldr	r3, [pc, #140]	; (8007040 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 8006fb4:	18d3      	adds	r3, r2, r3
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8006fba:	23a0      	movs	r3, #160	; 0xa0
 8006fbc:	05db      	lsls	r3, r3, #23
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f001 fdf9 	bl	8008bba <HAL_GPIO_WritePin>
      break;
 8006fc8:	e036      	b.n	8007038 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8006fca:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	2104      	movs	r1, #4
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f001 fdf2 	bl	8008bba <HAL_GPIO_WritePin>
      break;
 8006fd6:	e02f      	b.n	8007038 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	2102      	movs	r1, #2
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f001 fdeb 	bl	8008bba <HAL_GPIO_WritePin>
      break;
 8006fe4:	e028      	b.n	8007038 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8006fe6:	23a0      	movs	r3, #160	; 0xa0
 8006fe8:	05db      	lsls	r3, r3, #23
 8006fea:	2200      	movs	r2, #0
 8006fec:	2102      	movs	r1, #2
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f001 fde3 	bl	8008bba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8006ff4:	4b13      	ldr	r3, [pc, #76]	; (8007044 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2104      	movs	r1, #4
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f001 fddd 	bl	8008bba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8007000:	4b10      	ldr	r3, [pc, #64]	; (8007044 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8007002:	2200      	movs	r2, #0
 8007004:	2102      	movs	r1, #2
 8007006:	0018      	movs	r0, r3
 8007008:	f001 fdd7 	bl	8008bba <HAL_GPIO_WritePin>
      break;
 800700c:	e014      	b.n	8007038 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 800700e:	23a0      	movs	r3, #160	; 0xa0
 8007010:	05db      	lsls	r3, r3, #23
 8007012:	2200      	movs	r2, #0
 8007014:	2102      	movs	r1, #2
 8007016:	0018      	movs	r0, r3
 8007018:	f001 fdcf 	bl	8008bba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 800701e:	2200      	movs	r2, #0
 8007020:	2104      	movs	r1, #4
 8007022:	0018      	movs	r0, r3
 8007024:	f001 fdc9 	bl	8008bba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 800702a:	2200      	movs	r2, #0
 800702c:	2102      	movs	r1, #2
 800702e:	0018      	movs	r0, r3
 8007030:	f001 fdc3 	bl	8008bba <HAL_GPIO_WritePin>

      break;
 8007034:	e000      	b.n	8007038 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 8007036:	46c0      	nop			; (mov r8, r8)
  }
}
 8007038:	46c0      	nop			; (mov r8, r8)
 800703a:	46bd      	mov	sp, r7
 800703c:	b002      	add	sp, #8
 800703e:	bd80      	pop	{r7, pc}
 8007040:	08020aec 	.word	0x08020aec
 8007044:	50000800 	.word	0x50000800

08007048 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 8007050:	2301      	movs	r3, #1
}
 8007052:	0018      	movs	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	b002      	add	sp, #8
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 8007062:	1d3b      	adds	r3, r7, #4
 8007064:	0018      	movs	r0, r3
 8007066:	2314      	movs	r3, #20
 8007068:	001a      	movs	r2, r3
 800706a:	2100      	movs	r1, #0
 800706c:	f017 fefb 	bl	801ee66 <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007070:	1d3b      	adds	r3, r7, #4
 8007072:	2201      	movs	r2, #1
 8007074:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8007076:	1d3b      	adds	r3, r7, #4
 8007078:	2200      	movs	r2, #0
 800707a:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800707c:	1d3b      	adds	r3, r7, #4
 800707e:	2203      	movs	r2, #3
 8007080:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8007088:	1d3b      	adds	r3, r7, #4
 800708a:	4a0f      	ldr	r2, [pc, #60]	; (80070c8 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 800708c:	0019      	movs	r1, r3
 800708e:	0010      	movs	r0, r2
 8007090:	f001 fb16 	bl	80086c0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8007094:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8007096:	2200      	movs	r2, #0
 8007098:	2101      	movs	r1, #1
 800709a:	0018      	movs	r0, r3
 800709c:	f001 fd8d 	bl	8008bba <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 80070a0:	2001      	movs	r0, #1
 80070a2:	f7ff f9c4 	bl	800642e <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 80070a6:	1d3b      	adds	r3, r7, #4
 80070a8:	2200      	movs	r2, #0
 80070aa:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	4a06      	ldr	r2, [pc, #24]	; (80070c8 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 80070b0:	0019      	movs	r1, r3
 80070b2:	0010      	movs	r0, r2
 80070b4:	f001 fb04 	bl	80086c0 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 80070b8:	2006      	movs	r0, #6
 80070ba:	f7ff f9b8 	bl	800642e <HAL_Delay>
}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b006      	add	sp, #24
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	50000800 	.word	0x50000800

080070cc <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 80070d0:	f7ff fbe2 	bl	8006898 <BSP_SPI1_Init>
}
 80070d4:	46c0      	nop			; (mov r8, r8)
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 80070da:	b590      	push	{r4, r7, lr}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	0002      	movs	r2, r0
 80070e2:	1dbb      	adds	r3, r7, #6
 80070e4:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80070e6:	240e      	movs	r4, #14
 80070e8:	1939      	adds	r1, r7, r4
 80070ea:	1dbb      	adds	r3, r7, #6
 80070ec:	2201      	movs	r2, #1
 80070ee:	0018      	movs	r0, r3
 80070f0:	f7ff fbf6 	bl	80068e0 <BSP_SPI1_SendRecv>

  return rxData;
 80070f4:	193b      	adds	r3, r7, r4
 80070f6:	881b      	ldrh	r3, [r3, #0]
}
 80070f8:	0018      	movs	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b005      	add	sp, #20
 80070fe:	bd90      	pop	{r4, r7, pc}

08007100 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  if (state == 0)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d108      	bne.n	8007120 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 800710e:	2380      	movs	r3, #128	; 0x80
 8007110:	0219      	lsls	r1, r3, #8
 8007112:	23a0      	movs	r3, #160	; 0xa0
 8007114:	05db      	lsls	r3, r3, #23
 8007116:	2200      	movs	r2, #0
 8007118:	0018      	movs	r0, r3
 800711a:	f001 fd4e 	bl	8008bba <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 800711e:	e007      	b.n	8007130 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8007120:	2380      	movs	r3, #128	; 0x80
 8007122:	0219      	lsls	r1, r3, #8
 8007124:	23a0      	movs	r3, #160	; 0xa0
 8007126:	05db      	lsls	r3, r3, #23
 8007128:	2201      	movs	r2, #1
 800712a:	0018      	movs	r0, r3
 800712c:	f001 fd45 	bl	8008bba <HAL_GPIO_WritePin>
}
 8007130:	46c0      	nop			; (mov r8, r8)
 8007132:	46bd      	mov	sp, r7
 8007134:	b002      	add	sp, #8
 8007136:	bd80      	pop	{r7, pc}

08007138 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 800713e:	2102      	movs	r1, #2
 8007140:	0018      	movs	r0, r3
 8007142:	f001 fd1d 	bl	8008b80 <HAL_GPIO_ReadPin>
 8007146:	0003      	movs	r3, r0
}
 8007148:	0018      	movs	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	50000400 	.word	0x50000400

08007154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b08b      	sub	sp, #44	; 0x2c
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800715c:	4b2b      	ldr	r3, [pc, #172]	; (800720c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	4b2a      	ldr	r3, [pc, #168]	; (800720c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8007162:	2102      	movs	r1, #2
 8007164:	430a      	orrs	r2, r1
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c
 8007168:	4b28      	ldr	r3, [pc, #160]	; (800720c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	2202      	movs	r2, #2
 800716e:	4013      	ands	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8007174:	4b25      	ldr	r3, [pc, #148]	; (800720c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8007176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007178:	4b24      	ldr	r3, [pc, #144]	; (800720c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800717a:	2101      	movs	r1, #1
 800717c:	430a      	orrs	r2, r1
 800717e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007180:	4b22      	ldr	r3, [pc, #136]	; (800720c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	2201      	movs	r2, #1
 8007186:	4013      	ands	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800718c:	4b1f      	ldr	r3, [pc, #124]	; (800720c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4b1e      	ldr	r3, [pc, #120]	; (800720c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8007192:	2101      	movs	r1, #1
 8007194:	430a      	orrs	r2, r1
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c
 8007198:	4b1c      	ldr	r3, [pc, #112]	; (800720c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	2201      	movs	r2, #1
 800719e:	4013      	ands	r3, r2
 80071a0:	60bb      	str	r3, [r7, #8]
 80071a2:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a4:	2414      	movs	r4, #20
 80071a6:	193b      	adds	r3, r7, r4
 80071a8:	2202      	movs	r2, #2
 80071aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80071ac:	193b      	adds	r3, r7, r4
 80071ae:	2202      	movs	r2, #2
 80071b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b2:	193b      	adds	r3, r7, r4
 80071b4:	2203      	movs	r2, #3
 80071b6:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80071b8:	193b      	adds	r3, r7, r4
 80071ba:	2200      	movs	r2, #0
 80071bc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80071be:	193b      	adds	r3, r7, r4
 80071c0:	2280      	movs	r2, #128	; 0x80
 80071c2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80071c4:	193a      	adds	r2, r7, r4
 80071c6:	23a0      	movs	r3, #160	; 0xa0
 80071c8:	05db      	lsls	r3, r3, #23
 80071ca:	0011      	movs	r1, r2
 80071cc:	0018      	movs	r0, r3
 80071ce:	f001 fa77 	bl	80086c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80071d2:	193b      	adds	r3, r7, r4
 80071d4:	2200      	movs	r2, #0
 80071d6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80071d8:	193b      	adds	r3, r7, r4
 80071da:	2240      	movs	r2, #64	; 0x40
 80071dc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80071de:	193a      	adds	r2, r7, r4
 80071e0:	23a0      	movs	r3, #160	; 0xa0
 80071e2:	05db      	lsls	r3, r3, #23
 80071e4:	0011      	movs	r1, r2
 80071e6:	0018      	movs	r0, r3
 80071e8:	f001 fa6a 	bl	80086c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80071ec:	193b      	adds	r3, r7, r4
 80071ee:	2200      	movs	r2, #0
 80071f0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80071f2:	193b      	adds	r3, r7, r4
 80071f4:	2208      	movs	r2, #8
 80071f6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80071f8:	193b      	adds	r3, r7, r4
 80071fa:	4a05      	ldr	r2, [pc, #20]	; (8007210 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 80071fc:	0019      	movs	r1, r3
 80071fe:	0010      	movs	r0, r2
 8007200:	f001 fa5e 	bl	80086c0 <HAL_GPIO_Init>
}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	b00b      	add	sp, #44	; 0x2c
 800720a:	bd90      	pop	{r4, r7, pc}
 800720c:	40021000 	.word	0x40021000
 8007210:	50000400 	.word	0x50000400

08007214 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800721a:	1d3b      	adds	r3, r7, #4
 800721c:	2201      	movs	r2, #1
 800721e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007220:	1d3b      	adds	r3, r7, #4
 8007222:	2202      	movs	r2, #2
 8007224:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8007226:	1d3b      	adds	r3, r7, #4
 8007228:	2280      	movs	r2, #128	; 0x80
 800722a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800722c:	1d3a      	adds	r2, r7, #4
 800722e:	23a0      	movs	r3, #160	; 0xa0
 8007230:	05db      	lsls	r3, r3, #23
 8007232:	0011      	movs	r1, r2
 8007234:	0018      	movs	r0, r3
 8007236:	f001 fa43 	bl	80086c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800723a:	1d3b      	adds	r3, r7, #4
 800723c:	2240      	movs	r2, #64	; 0x40
 800723e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007240:	1d3a      	adds	r2, r7, #4
 8007242:	23a0      	movs	r3, #160	; 0xa0
 8007244:	05db      	lsls	r3, r3, #23
 8007246:	0011      	movs	r1, r2
 8007248:	0018      	movs	r0, r3
 800724a:	f001 fa39 	bl	80086c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800724e:	1d3b      	adds	r3, r7, #4
 8007250:	2208      	movs	r2, #8
 8007252:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007254:	1d3b      	adds	r3, r7, #4
 8007256:	4a0e      	ldr	r2, [pc, #56]	; (8007290 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8007258:	0019      	movs	r1, r3
 800725a:	0010      	movs	r0, r2
 800725c:	f001 fa30 	bl	80086c0 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8007260:	23a0      	movs	r3, #160	; 0xa0
 8007262:	05db      	lsls	r3, r3, #23
 8007264:	2200      	movs	r2, #0
 8007266:	2180      	movs	r1, #128	; 0x80
 8007268:	0018      	movs	r0, r3
 800726a:	f001 fca6 	bl	8008bba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 800726e:	23a0      	movs	r3, #160	; 0xa0
 8007270:	05db      	lsls	r3, r3, #23
 8007272:	2200      	movs	r2, #0
 8007274:	2140      	movs	r1, #64	; 0x40
 8007276:	0018      	movs	r0, r3
 8007278:	f001 fc9f 	bl	8008bba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 800727e:	2200      	movs	r2, #0
 8007280:	2108      	movs	r1, #8
 8007282:	0018      	movs	r0, r3
 8007284:	f001 fc99 	bl	8008bba <HAL_GPIO_WritePin>

}
 8007288:	46c0      	nop			; (mov r8, r8)
 800728a:	46bd      	mov	sp, r7
 800728c:	b006      	add	sp, #24
 800728e:	bd80      	pop	{r7, pc}
 8007290:	50000400 	.word	0x50000400

08007294 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8007298:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <SystemInit+0x64>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4b16      	ldr	r3, [pc, #88]	; (80072f8 <SystemInit+0x64>)
 800729e:	2180      	movs	r1, #128	; 0x80
 80072a0:	0049      	lsls	r1, r1, #1
 80072a2:	430a      	orrs	r2, r1
 80072a4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <SystemInit+0x64>)
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	4b13      	ldr	r3, [pc, #76]	; (80072f8 <SystemInit+0x64>)
 80072ac:	4913      	ldr	r1, [pc, #76]	; (80072fc <SystemInit+0x68>)
 80072ae:	400a      	ands	r2, r1
 80072b0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80072b2:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <SystemInit+0x64>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <SystemInit+0x64>)
 80072b8:	4911      	ldr	r1, [pc, #68]	; (8007300 <SystemInit+0x6c>)
 80072ba:	400a      	ands	r2, r1
 80072bc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80072be:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <SystemInit+0x64>)
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	4b0d      	ldr	r3, [pc, #52]	; (80072f8 <SystemInit+0x64>)
 80072c4:	2101      	movs	r1, #1
 80072c6:	438a      	bics	r2, r1
 80072c8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80072ca:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <SystemInit+0x64>)
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <SystemInit+0x64>)
 80072d0:	490c      	ldr	r1, [pc, #48]	; (8007304 <SystemInit+0x70>)
 80072d2:	400a      	ands	r2, r1
 80072d4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80072d6:	4b08      	ldr	r3, [pc, #32]	; (80072f8 <SystemInit+0x64>)
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <SystemInit+0x64>)
 80072dc:	490a      	ldr	r1, [pc, #40]	; (8007308 <SystemInit+0x74>)
 80072de:	400a      	ands	r2, r1
 80072e0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80072e2:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <SystemInit+0x64>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072e8:	4b08      	ldr	r3, [pc, #32]	; (800730c <SystemInit+0x78>)
 80072ea:	2280      	movs	r2, #128	; 0x80
 80072ec:	0512      	lsls	r2, r2, #20
 80072ee:	609a      	str	r2, [r3, #8]
#endif
}
 80072f0:	46c0      	nop			; (mov r8, r8)
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	40021000 	.word	0x40021000
 80072fc:	88ff400c 	.word	0x88ff400c
 8007300:	fef6fff6 	.word	0xfef6fff6
 8007304:	fffbffff 	.word	0xfffbffff
 8007308:	ff02ffff 	.word	0xff02ffff
 800730c:	e000ed00 	.word	0xe000ed00

08007310 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007316:	1dfb      	adds	r3, r7, #7
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_Init+0x3c>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <HAL_Init+0x3c>)
 8007322:	2102      	movs	r1, #2
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007328:	2003      	movs	r0, #3
 800732a:	f7ff f86f 	bl	800640c <HAL_InitTick>
 800732e:	1e03      	subs	r3, r0, #0
 8007330:	d003      	beq.n	800733a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8007332:	1dfb      	adds	r3, r7, #7
 8007334:	2201      	movs	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e001      	b.n	800733e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800733a:	f7fe fe35 	bl	8005fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800733e:	1dfb      	adds	r3, r7, #7
 8007340:	781b      	ldrb	r3, [r3, #0]
}
 8007342:	0018      	movs	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	b002      	add	sp, #8
 8007348:	bd80      	pop	{r7, pc}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	40022000 	.word	0x40022000

08007350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <HAL_IncTick+0x1c>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	001a      	movs	r2, r3
 800735a:	4b05      	ldr	r3, [pc, #20]	; (8007370 <HAL_IncTick+0x20>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	18d2      	adds	r2, r2, r3
 8007360:	4b03      	ldr	r3, [pc, #12]	; (8007370 <HAL_IncTick+0x20>)
 8007362:	601a      	str	r2, [r3, #0]
}
 8007364:	46c0      	nop			; (mov r8, r8)
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	2000008c 	.word	0x2000008c
 8007370:	20001a70 	.word	0x20001a70

08007374 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8007378:	4b02      	ldr	r3, [pc, #8]	; (8007384 <HAL_GetUIDw0+0x10>)
 800737a:	681b      	ldr	r3, [r3, #0]
}
 800737c:	0018      	movs	r0, r3
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	1ff80050 	.word	0x1ff80050

08007388 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800738c:	4b02      	ldr	r3, [pc, #8]	; (8007398 <HAL_GetUIDw1+0x10>)
 800738e:	681b      	ldr	r3, [r3, #0]
}
 8007390:	0018      	movs	r0, r3
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	1ff80054 	.word	0x1ff80054

0800739c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80073a0:	4b02      	ldr	r3, [pc, #8]	; (80073ac <HAL_GetUIDw2+0x10>)
 80073a2:	681b      	ldr	r3, [r3, #0]
}
 80073a4:	0018      	movs	r0, r3
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	1ff80064 	.word	0x1ff80064

080073b0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 80073ba:	2101      	movs	r1, #1
 80073bc:	438a      	bics	r2, r1
 80073be:	605a      	str	r2, [r3, #4]
}
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	40015800 	.word	0x40015800

080073cc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80073d0:	4b04      	ldr	r3, [pc, #16]	; (80073e4 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80073d6:	2102      	movs	r1, #2
 80073d8:	438a      	bics	r2, r1
 80073da:	605a      	str	r2, [r3, #4]
}
 80073dc:	46c0      	nop			; (mov r8, r8)
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	40015800 	.word	0x40015800

080073e8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	4b03      	ldr	r3, [pc, #12]	; (8007400 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80073f2:	2104      	movs	r1, #4
 80073f4:	438a      	bics	r2, r1
 80073f6:	605a      	str	r2, [r3, #4]
}
 80073f8:	46c0      	nop			; (mov r8, r8)
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	40015800 	.word	0x40015800

08007404 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e159      	b.n	80076ca <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2250      	movs	r2, #80	; 0x50
 8007428:	2100      	movs	r1, #0
 800742a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	0018      	movs	r0, r3
 8007430:	f7fd feb6 	bl	80051a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007438:	2210      	movs	r2, #16
 800743a:	4013      	ands	r3, r2
 800743c:	2b10      	cmp	r3, #16
 800743e:	d005      	beq.n	800744c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2204      	movs	r2, #4
 8007448:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800744a:	d00b      	beq.n	8007464 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007450:	2210      	movs	r2, #16
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2250      	movs	r2, #80	; 0x50
 800745c:	2100      	movs	r1, #0
 800745e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e132      	b.n	80076ca <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007468:	4a9a      	ldr	r2, [pc, #616]	; (80076d4 <HAL_ADC_Init+0x2d0>)
 800746a:	4013      	ands	r3, r2
 800746c:	2202      	movs	r2, #2
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	2203      	movs	r2, #3
 800747c:	4013      	ands	r3, r2
 800747e:	2b01      	cmp	r3, #1
 8007480:	d108      	bne.n	8007494 <HAL_ADC_Init+0x90>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2201      	movs	r2, #1
 800748a:	4013      	ands	r3, r2
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_ADC_Init+0x90>
 8007490:	2301      	movs	r3, #1
 8007492:	e000      	b.n	8007496 <HAL_ADC_Init+0x92>
 8007494:	2300      	movs	r3, #0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d149      	bne.n	800752e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	23c0      	movs	r3, #192	; 0xc0
 80074a0:	061b      	lsls	r3, r3, #24
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d00b      	beq.n	80074be <HAL_ADC_Init+0xba>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	2380      	movs	r3, #128	; 0x80
 80074ac:	05db      	lsls	r3, r3, #23
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d005      	beq.n	80074be <HAL_ADC_Init+0xba>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	061b      	lsls	r3, r3, #24
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d111      	bne.n	80074e2 <HAL_ADC_Init+0xde>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	0092      	lsls	r2, r2, #2
 80074ca:	0892      	lsrs	r2, r2, #2
 80074cc:	611a      	str	r2, [r3, #16]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6919      	ldr	r1, [r3, #16]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	611a      	str	r2, [r3, #16]
 80074e0:	e014      	b.n	800750c <HAL_ADC_Init+0x108>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	0892      	lsrs	r2, r2, #2
 80074f0:	611a      	str	r2, [r3, #16]
 80074f2:	4b79      	ldr	r3, [pc, #484]	; (80076d8 <HAL_ADC_Init+0x2d4>)
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	4b78      	ldr	r3, [pc, #480]	; (80076d8 <HAL_ADC_Init+0x2d4>)
 80074f8:	4978      	ldr	r1, [pc, #480]	; (80076dc <HAL_ADC_Init+0x2d8>)
 80074fa:	400a      	ands	r2, r1
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	4b76      	ldr	r3, [pc, #472]	; (80076d8 <HAL_ADC_Init+0x2d4>)
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	4b74      	ldr	r3, [pc, #464]	; (80076d8 <HAL_ADC_Init+0x2d4>)
 8007508:	430a      	orrs	r2, r1
 800750a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2118      	movs	r1, #24
 8007518:	438a      	bics	r2, r1
 800751a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68d9      	ldr	r1, [r3, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800752e:	4b6a      	ldr	r3, [pc, #424]	; (80076d8 <HAL_ADC_Init+0x2d4>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	4b69      	ldr	r3, [pc, #420]	; (80076d8 <HAL_ADC_Init+0x2d4>)
 8007534:	496a      	ldr	r1, [pc, #424]	; (80076e0 <HAL_ADC_Init+0x2dc>)
 8007536:	400a      	ands	r2, r1
 8007538:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800753a:	4b67      	ldr	r3, [pc, #412]	; (80076d8 <HAL_ADC_Init+0x2d4>)
 800753c:	6819      	ldr	r1, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007542:	065a      	lsls	r2, r3, #25
 8007544:	4b64      	ldr	r3, [pc, #400]	; (80076d8 <HAL_ADC_Init+0x2d4>)
 8007546:	430a      	orrs	r2, r1
 8007548:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	2380      	movs	r3, #128	; 0x80
 8007552:	055b      	lsls	r3, r3, #21
 8007554:	4013      	ands	r3, r2
 8007556:	d108      	bne.n	800756a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2180      	movs	r1, #128	; 0x80
 8007564:	0549      	lsls	r1, r1, #21
 8007566:	430a      	orrs	r2, r1
 8007568:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	495b      	ldr	r1, [pc, #364]	; (80076e4 <HAL_ADC_Init+0x2e0>)
 8007576:	400a      	ands	r2, r1
 8007578:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68d9      	ldr	r1, [r3, #12]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b02      	cmp	r3, #2
 800758a:	d101      	bne.n	8007590 <HAL_ADC_Init+0x18c>
 800758c:	2304      	movs	r3, #4
 800758e:	e000      	b.n	8007592 <HAL_ADC_Init+0x18e>
 8007590:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007592:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2020      	movs	r0, #32
 8007598:	5c1b      	ldrb	r3, [r3, r0]
 800759a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800759c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	202c      	movs	r0, #44	; 0x2c
 80075a2:	5c1b      	ldrb	r3, [r3, r0]
 80075a4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80075a6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80075ac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80075b4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80075bc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075ca:	23c2      	movs	r3, #194	; 0xc2
 80075cc:	33ff      	adds	r3, #255	; 0xff
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d00b      	beq.n	80075ea <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68d9      	ldr	r1, [r3, #12]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2221      	movs	r2, #33	; 0x21
 80075ee:	5c9b      	ldrb	r3, [r3, r2]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d11a      	bne.n	800762a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	5c9b      	ldrb	r3, [r3, r2]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2180      	movs	r1, #128	; 0x80
 800760a:	0249      	lsls	r1, r1, #9
 800760c:	430a      	orrs	r2, r1
 800760e:	60da      	str	r2, [r3, #12]
 8007610:	e00b      	b.n	800762a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007616:	2220      	movs	r2, #32
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007622:	2201      	movs	r2, #1
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762e:	2b01      	cmp	r3, #1
 8007630:	d11f      	bne.n	8007672 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	492a      	ldr	r1, [pc, #168]	; (80076e8 <HAL_ADC_Init+0x2e4>)
 800763e:	400a      	ands	r2, r1
 8007640:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6919      	ldr	r1, [r3, #16]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007650:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8007656:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2101      	movs	r1, #1
 800766c:	430a      	orrs	r2, r1
 800766e:	611a      	str	r2, [r3, #16]
 8007670:	e00e      	b.n	8007690 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	2201      	movs	r2, #1
 800767a:	4013      	ands	r3, r2
 800767c:	2b01      	cmp	r3, #1
 800767e:	d107      	bne.n	8007690 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2101      	movs	r1, #1
 800768c:	438a      	bics	r2, r1
 800768e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2107      	movs	r1, #7
 800769c:	438a      	bics	r2, r1
 800769e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6959      	ldr	r1, [r3, #20]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076bc:	2203      	movs	r2, #3
 80076be:	4393      	bics	r3, r2
 80076c0:	2201      	movs	r2, #1
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	0018      	movs	r0, r3
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b002      	add	sp, #8
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	fffffefd 	.word	0xfffffefd
 80076d8:	40012708 	.word	0x40012708
 80076dc:	ffc3ffff 	.word	0xffc3ffff
 80076e0:	fdffffff 	.word	0xfdffffff
 80076e4:	fffe0219 	.word	0xfffe0219
 80076e8:	fffffc03 	.word	0xfffffc03

080076ec <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80076ec:	b5b0      	push	{r4, r5, r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076f4:	230f      	movs	r3, #15
 80076f6:	18fb      	adds	r3, r7, r3
 80076f8:	2200      	movs	r2, #0
 80076fa:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e07d      	b.n	8007802 <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	2202      	movs	r2, #2
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8007712:	250f      	movs	r5, #15
 8007714:	197c      	adds	r4, r7, r5
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	0018      	movs	r0, r3
 800771a:	f000 faff 	bl	8007d1c <ADC_ConversionStop>
 800771e:	0003      	movs	r3, r0
 8007720:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007722:	197b      	adds	r3, r7, r5
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10d      	bne.n	8007746 <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800772a:	197c      	adds	r4, r7, r5
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	0018      	movs	r0, r3
 8007730:	f000 fa94 	bl	8007c5c <ADC_Disable>
 8007734:	0003      	movs	r3, r0
 8007736:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8007738:	197b      	adds	r3, r7, r5
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d002      	beq.n	8007746 <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8007746:	230f      	movs	r3, #15
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d051      	beq.n	80077f4 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	492c      	ldr	r1, [pc, #176]	; (800780c <HAL_ADC_DeInit+0x120>)
 800775c:	400a      	ands	r2, r1
 800775e:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <HAL_ADC_DeInit+0x124>)
 8007766:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4928      	ldr	r1, [pc, #160]	; (8007814 <HAL_ADC_DeInit+0x128>)
 8007774:	400a      	ands	r2, r1
 8007776:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4925      	ldr	r1, [pc, #148]	; (8007818 <HAL_ADC_DeInit+0x12c>)
 8007784:	400a      	ands	r2, r1
 8007786:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691a      	ldr	r2, [r3, #16]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4922      	ldr	r1, [pc, #136]	; (800781c <HAL_ADC_DeInit+0x130>)
 8007794:	400a      	ands	r2, r1
 8007796:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695a      	ldr	r2, [r3, #20]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2107      	movs	r1, #7
 80077a4:	438a      	bics	r2, r1
 80077a6:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6a1a      	ldr	r2, [r3, #32]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	491b      	ldr	r1, [pc, #108]	; (8007820 <HAL_ADC_DeInit+0x134>)
 80077b4:	400a      	ands	r2, r1
 80077b6:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	22b4      	movs	r2, #180	; 0xb4
 80077be:	589a      	ldr	r2, [r3, r2]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	217f      	movs	r1, #127	; 0x7f
 80077c6:	438a      	bics	r2, r1
 80077c8:	21b4      	movs	r1, #180	; 0xb4
 80077ca:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	22b4      	movs	r2, #180	; 0xb4
 80077d2:	589a      	ldr	r2, [r3, r2]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	217f      	movs	r1, #127	; 0x7f
 80077da:	438a      	bics	r2, r1
 80077dc:	21b4      	movs	r1, #180	; 0xb4
 80077de:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	0018      	movs	r0, r3
 80077e4:	f7fd fcf4 	bl	80051d0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2250      	movs	r2, #80	; 0x50
 80077f8:	2100      	movs	r1, #0
 80077fa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80077fc:	230f      	movs	r3, #15
 80077fe:	18fb      	adds	r3, r7, r3
 8007800:	781b      	ldrb	r3, [r3, #0]
}
 8007802:	0018      	movs	r0, r3
 8007804:	46bd      	mov	sp, r7
 8007806:	b004      	add	sp, #16
 8007808:	bdb0      	pop	{r4, r5, r7, pc}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	fffff760 	.word	0xfffff760
 8007810:	0000089f 	.word	0x0000089f
 8007814:	efffffff 	.word	0xefffffff
 8007818:	833e0200 	.word	0x833e0200
 800781c:	3ffffc02 	.word	0x3ffffc02
 8007820:	f000f000 	.word	0xf000f000

08007824 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007824:	b590      	push	{r4, r7, lr}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800782c:	230f      	movs	r3, #15
 800782e:	18fb      	adds	r3, r7, r3
 8007830:	2200      	movs	r2, #0
 8007832:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	2204      	movs	r2, #4
 800783c:	4013      	ands	r3, r2
 800783e:	d138      	bne.n	80078b2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2250      	movs	r2, #80	; 0x50
 8007844:	5c9b      	ldrb	r3, [r3, r2]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_ADC_Start+0x2a>
 800784a:	2302      	movs	r3, #2
 800784c:	e038      	b.n	80078c0 <HAL_ADC_Start+0x9c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2250      	movs	r2, #80	; 0x50
 8007852:	2101      	movs	r1, #1
 8007854:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d007      	beq.n	800786e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800785e:	230f      	movs	r3, #15
 8007860:	18fc      	adds	r4, r7, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	0018      	movs	r0, r3
 8007866:	f000 f999 	bl	8007b9c <ADC_Enable>
 800786a:	0003      	movs	r3, r0
 800786c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800786e:	230f      	movs	r3, #15
 8007870:	18fb      	adds	r3, r7, r3
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d120      	bne.n	80078ba <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787c:	4a12      	ldr	r2, [pc, #72]	; (80078c8 <HAL_ADC_Start+0xa4>)
 800787e:	4013      	ands	r3, r2
 8007880:	2280      	movs	r2, #128	; 0x80
 8007882:	0052      	lsls	r2, r2, #1
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2250      	movs	r2, #80	; 0x50
 8007894:	2100      	movs	r1, #0
 8007896:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	221c      	movs	r2, #28
 800789e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2104      	movs	r1, #4
 80078ac:	430a      	orrs	r2, r1
 80078ae:	609a      	str	r2, [r3, #8]
 80078b0:	e003      	b.n	80078ba <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80078b2:	230f      	movs	r3, #15
 80078b4:	18fb      	adds	r3, r7, r3
 80078b6:	2202      	movs	r2, #2
 80078b8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80078ba:	230f      	movs	r3, #15
 80078bc:	18fb      	adds	r3, r7, r3
 80078be:	781b      	ldrb	r3, [r3, #0]
}
 80078c0:	0018      	movs	r0, r3
 80078c2:	46bd      	mov	sp, r7
 80078c4:	b005      	add	sp, #20
 80078c6:	bd90      	pop	{r4, r7, pc}
 80078c8:	fffff0fe 	.word	0xfffff0fe

080078cc <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80078cc:	b5b0      	push	{r4, r5, r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078d4:	230f      	movs	r3, #15
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	2200      	movs	r2, #0
 80078da:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2250      	movs	r2, #80	; 0x50
 80078e0:	5c9b      	ldrb	r3, [r3, r2]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d101      	bne.n	80078ea <HAL_ADC_Stop+0x1e>
 80078e6:	2302      	movs	r3, #2
 80078e8:	e029      	b.n	800793e <HAL_ADC_Stop+0x72>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2250      	movs	r2, #80	; 0x50
 80078ee:	2101      	movs	r1, #1
 80078f0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80078f2:	250f      	movs	r5, #15
 80078f4:	197c      	adds	r4, r7, r5
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	0018      	movs	r0, r3
 80078fa:	f000 fa0f 	bl	8007d1c <ADC_ConversionStop>
 80078fe:	0003      	movs	r3, r0
 8007900:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007902:	197b      	adds	r3, r7, r5
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d112      	bne.n	8007930 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800790a:	197c      	adds	r4, r7, r5
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	0018      	movs	r0, r3
 8007910:	f000 f9a4 	bl	8007c5c <ADC_Disable>
 8007914:	0003      	movs	r3, r0
 8007916:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007918:	197b      	adds	r3, r7, r5
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d107      	bne.n	8007930 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007924:	4a08      	ldr	r2, [pc, #32]	; (8007948 <HAL_ADC_Stop+0x7c>)
 8007926:	4013      	ands	r3, r2
 8007928:	2201      	movs	r2, #1
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2250      	movs	r2, #80	; 0x50
 8007934:	2100      	movs	r1, #0
 8007936:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8007938:	230f      	movs	r3, #15
 800793a:	18fb      	adds	r3, r7, r3
 800793c:	781b      	ldrb	r3, [r3, #0]
}
 800793e:	0018      	movs	r0, r3
 8007940:	46bd      	mov	sp, r7
 8007942:	b004      	add	sp, #16
 8007944:	bdb0      	pop	{r4, r5, r7, pc}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	fffffefe 	.word	0xfffffefe

0800794c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	2b08      	cmp	r3, #8
 8007964:	d102      	bne.n	800796c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8007966:	2308      	movs	r3, #8
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	e014      	b.n	8007996 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	4013      	ands	r3, r2
 8007976:	2b01      	cmp	r3, #1
 8007978:	d10b      	bne.n	8007992 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797e:	2220      	movs	r2, #32
 8007980:	431a      	orrs	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2250      	movs	r2, #80	; 0x50
 800798a:	2100      	movs	r1, #0
 800798c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e06c      	b.n	8007a6c <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8007992:	230c      	movs	r3, #12
 8007994:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8007996:	f7fe fd42 	bl	800641e <HAL_GetTick>
 800799a:	0003      	movs	r3, r0
 800799c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800799e:	e019      	b.n	80079d4 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	3301      	adds	r3, #1
 80079a4:	d016      	beq.n	80079d4 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <HAL_ADC_PollForConversion+0x70>
 80079ac:	f7fe fd37 	bl	800641e <HAL_GetTick>
 80079b0:	0002      	movs	r2, r0
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d20b      	bcs.n	80079d4 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	2204      	movs	r2, #4
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2250      	movs	r2, #80	; 0x50
 80079cc:	2100      	movs	r1, #0
 80079ce:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e04b      	b.n	8007a6c <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4013      	ands	r3, r2
 80079de:	d0df      	beq.n	80079a0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e4:	2280      	movs	r2, #128	; 0x80
 80079e6:	0092      	lsls	r2, r2, #2
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	23c0      	movs	r3, #192	; 0xc0
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	4013      	ands	r3, r2
 80079fa:	d12e      	bne.n	8007a5a <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d129      	bne.n	8007a5a <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	4013      	ands	r3, r2
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d122      	bne.n	8007a5a <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2204      	movs	r2, #4
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	d110      	bne.n	8007a42 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	210c      	movs	r1, #12
 8007a2c:	438a      	bics	r2, r1
 8007a2e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a34:	4a0f      	ldr	r2, [pc, #60]	; (8007a74 <HAL_ADC_PollForConversion+0x128>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	2201      	movs	r2, #1
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	655a      	str	r2, [r3, #84]	; 0x54
 8007a40:	e00b      	b.n	8007a5a <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a46:	2220      	movs	r2, #32
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a52:	2201      	movs	r2, #1
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d103      	bne.n	8007a6a <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	220c      	movs	r2, #12
 8007a68:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b004      	add	sp, #16
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	fffffefe 	.word	0xfffffefe

08007a78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007a86:	0018      	movs	r0, r3
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	b002      	add	sp, #8
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2250      	movs	r2, #80	; 0x50
 8007a9e:	5c9b      	ldrb	r3, [r3, r2]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_ADC_ConfigChannel+0x18>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e06c      	b.n	8007b82 <HAL_ADC_ConfigChannel+0xf2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2250      	movs	r2, #80	; 0x50
 8007aac:	2101      	movs	r1, #1
 8007aae:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	4013      	ands	r3, r2
 8007aba:	d00b      	beq.n	8007ad4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2250      	movs	r2, #80	; 0x50
 8007acc:	2100      	movs	r1, #0
 8007ace:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e056      	b.n	8007b82 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4a2c      	ldr	r2, [pc, #176]	; (8007b8c <HAL_ADC_ConfigChannel+0xfc>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d028      	beq.n	8007b30 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	035b      	lsls	r3, r3, #13
 8007aea:	0b5a      	lsrs	r2, r3, #13
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	2380      	movs	r3, #128	; 0x80
 8007afa:	02db      	lsls	r3, r3, #11
 8007afc:	4013      	ands	r3, r2
 8007afe:	d009      	beq.n	8007b14 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8007b00:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <HAL_ADC_ConfigChannel+0x100>)
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	4b22      	ldr	r3, [pc, #136]	; (8007b90 <HAL_ADC_ConfigChannel+0x100>)
 8007b06:	2180      	movs	r1, #128	; 0x80
 8007b08:	0409      	lsls	r1, r1, #16
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8007b0e:	200a      	movs	r0, #10
 8007b10:	f000 f94a 	bl	8007da8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	2380      	movs	r3, #128	; 0x80
 8007b1a:	029b      	lsls	r3, r3, #10
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	d02b      	beq.n	8007b78 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8007b20:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <HAL_ADC_ConfigChannel+0x100>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	4b1a      	ldr	r3, [pc, #104]	; (8007b90 <HAL_ADC_ConfigChannel+0x100>)
 8007b26:	2180      	movs	r1, #128	; 0x80
 8007b28:	03c9      	lsls	r1, r1, #15
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e023      	b.n	8007b78 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	035b      	lsls	r3, r3, #13
 8007b3c:	0b5b      	lsrs	r3, r3, #13
 8007b3e:	43d9      	mvns	r1, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	400a      	ands	r2, r1
 8007b46:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	2380      	movs	r3, #128	; 0x80
 8007b4e:	02db      	lsls	r3, r3, #11
 8007b50:	4013      	ands	r3, r2
 8007b52:	d005      	beq.n	8007b60 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8007b54:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <HAL_ADC_ConfigChannel+0x100>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <HAL_ADC_ConfigChannel+0x100>)
 8007b5a:	490e      	ldr	r1, [pc, #56]	; (8007b94 <HAL_ADC_ConfigChannel+0x104>)
 8007b5c:	400a      	ands	r2, r1
 8007b5e:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	2380      	movs	r3, #128	; 0x80
 8007b66:	029b      	lsls	r3, r3, #10
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d005      	beq.n	8007b78 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8007b6c:	4b08      	ldr	r3, [pc, #32]	; (8007b90 <HAL_ADC_ConfigChannel+0x100>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <HAL_ADC_ConfigChannel+0x100>)
 8007b72:	4909      	ldr	r1, [pc, #36]	; (8007b98 <HAL_ADC_ConfigChannel+0x108>)
 8007b74:	400a      	ands	r2, r1
 8007b76:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2250      	movs	r2, #80	; 0x50
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	0018      	movs	r0, r3
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b002      	add	sp, #8
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	00001001 	.word	0x00001001
 8007b90:	40012708 	.word	0x40012708
 8007b94:	ff7fffff 	.word	0xff7fffff
 8007b98:	ffbfffff 	.word	0xffbfffff

08007b9c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	2203      	movs	r2, #3
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d108      	bne.n	8007bc8 <ADC_Enable+0x2c>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <ADC_Enable+0x2c>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <ADC_Enable+0x2e>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d13f      	bne.n	8007c4e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4a20      	ldr	r2, [pc, #128]	; (8007c58 <ADC_Enable+0xbc>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	d00d      	beq.n	8007bf6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bde:	2210      	movs	r2, #16
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bea:	2201      	movs	r2, #1
 8007bec:	431a      	orrs	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e02c      	b.n	8007c50 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2101      	movs	r1, #1
 8007c02:	430a      	orrs	r2, r1
 8007c04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8007c06:	2001      	movs	r0, #1
 8007c08:	f000 f8ce 	bl	8007da8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8007c0c:	f7fe fc07 	bl	800641e <HAL_GetTick>
 8007c10:	0003      	movs	r3, r0
 8007c12:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007c14:	e014      	b.n	8007c40 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007c16:	f7fe fc02 	bl	800641e <HAL_GetTick>
 8007c1a:	0002      	movs	r2, r0
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b0a      	cmp	r3, #10
 8007c22:	d90d      	bls.n	8007c40 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c28:	2210      	movs	r2, #16
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c34:	2201      	movs	r2, #1
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e007      	b.n	8007c50 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2201      	movs	r2, #1
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d1e3      	bne.n	8007c16 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	0018      	movs	r0, r3
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b004      	add	sp, #16
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	80000017 	.word	0x80000017

08007c5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2203      	movs	r2, #3
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d108      	bne.n	8007c88 <ADC_Disable+0x2c>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <ADC_Disable+0x2c>
 8007c84:	2301      	movs	r3, #1
 8007c86:	e000      	b.n	8007c8a <ADC_Disable+0x2e>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d041      	beq.n	8007d12 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2205      	movs	r2, #5
 8007c96:	4013      	ands	r3, r2
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d110      	bne.n	8007cbe <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	609a      	str	r2, [r3, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007cb4:	f7fe fbb3 	bl	800641e <HAL_GetTick>
 8007cb8:	0003      	movs	r3, r0
 8007cba:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007cbc:	e022      	b.n	8007d04 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	2210      	movs	r2, #16
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cce:	2201      	movs	r2, #1
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e01c      	b.n	8007d14 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007cda:	f7fe fba0 	bl	800641e <HAL_GetTick>
 8007cde:	0002      	movs	r2, r0
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b0a      	cmp	r3, #10
 8007ce6:	d90d      	bls.n	8007d04 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cec:	2210      	movs	r2, #16
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e007      	b.n	8007d14 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d0e3      	beq.n	8007cda <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	0018      	movs	r0, r3
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b004      	add	sp, #16
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	2204      	movs	r2, #4
 8007d30:	4013      	ands	r3, r2
 8007d32:	d034      	beq.n	8007d9e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d10d      	bne.n	8007d5e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007d4c:	d107      	bne.n	8007d5e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2110      	movs	r1, #16
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007d5e:	f7fe fb5e 	bl	800641e <HAL_GetTick>
 8007d62:	0003      	movs	r3, r0
 8007d64:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8007d66:	e014      	b.n	8007d92 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007d68:	f7fe fb59 	bl	800641e <HAL_GetTick>
 8007d6c:	0002      	movs	r2, r0
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b0a      	cmp	r3, #10
 8007d74:	d90d      	bls.n	8007d92 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7a:	2210      	movs	r2, #16
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d86:	2201      	movs	r2, #1
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e006      	b.n	8007da0 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2204      	movs	r2, #4
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d1e4      	bne.n	8007d68 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	0018      	movs	r0, r3
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b004      	add	sp, #16
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <ADC_DelayMicroSecond+0x38>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	490b      	ldr	r1, [pc, #44]	; (8007de4 <ADC_DelayMicroSecond+0x3c>)
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7f8 f9ae 	bl	8000118 <__udivsi3>
 8007dbc:	0003      	movs	r3, r0
 8007dbe:	001a      	movs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4353      	muls	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8007dc6:	e002      	b.n	8007dce <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f9      	bne.n	8007dc8 <ADC_DelayMicroSecond+0x20>
  } 
}
 8007dd4:	46c0      	nop			; (mov r8, r8)
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	b004      	add	sp, #16
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	20000084 	.word	0x20000084
 8007de4:	000f4240 	.word	0x000f4240

08007de8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007df2:	2317      	movs	r3, #23
 8007df4:	18fb      	adds	r3, r7, r3
 8007df6:	2200      	movs	r2, #0
 8007df8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2250      	movs	r2, #80	; 0x50
 8007e06:	5c9b      	ldrb	r3, [r3, r2]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <HAL_ADCEx_Calibration_Start+0x28>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e07a      	b.n	8007f06 <HAL_ADCEx_Calibration_Start+0x11e>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2250      	movs	r2, #80	; 0x50
 8007e14:	2101      	movs	r1, #1
 8007e16:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2203      	movs	r2, #3
 8007e20:	4013      	ands	r3, r2
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d108      	bne.n	8007e38 <HAL_ADCEx_Calibration_Start+0x50>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	4013      	ands	r3, r2
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_ADCEx_Calibration_Start+0x50>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <HAL_ADCEx_Calibration_Start+0x52>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d152      	bne.n	8007ee4 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e42:	4a33      	ldr	r2, [pc, #204]	; (8007f10 <HAL_ADCEx_Calibration_Start+0x128>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	2202      	movs	r2, #2
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	2203      	movs	r2, #3
 8007e56:	4013      	ands	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2103      	movs	r1, #3
 8007e66:	438a      	bics	r2, r1
 8007e68:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2180      	movs	r1, #128	; 0x80
 8007e76:	0609      	lsls	r1, r1, #24
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007e7c:	f7fe facf 	bl	800641e <HAL_GetTick>
 8007e80:	0003      	movs	r3, r0
 8007e82:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8007e84:	e014      	b.n	8007eb0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007e86:	f7fe faca 	bl	800641e <HAL_GetTick>
 8007e8a:	0002      	movs	r2, r0
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b0a      	cmp	r3, #10
 8007e92:	d90d      	bls.n	8007eb0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e98:	2212      	movs	r2, #18
 8007e9a:	4393      	bics	r3, r2
 8007e9c:	2210      	movs	r2, #16
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2250      	movs	r2, #80	; 0x50
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e02a      	b.n	8007f06 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	0fdb      	lsrs	r3, r3, #31
 8007eb8:	07da      	lsls	r2, r3, #31
 8007eba:	2380      	movs	r3, #128	; 0x80
 8007ebc:	061b      	lsls	r3, r3, #24
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d0e1      	beq.n	8007e86 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68d9      	ldr	r1, [r3, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	4393      	bics	r3, r2
 8007eda:	2201      	movs	r2, #1
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	655a      	str	r2, [r3, #84]	; 0x54
 8007ee2:	e009      	b.n	8007ef8 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	2220      	movs	r2, #32
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8007ef0:	2317      	movs	r3, #23
 8007ef2:	18fb      	adds	r3, r7, r3
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2250      	movs	r2, #80	; 0x50
 8007efc:	2100      	movs	r1, #0
 8007efe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8007f00:	2317      	movs	r3, #23
 8007f02:	18fb      	adds	r3, r7, r3
 8007f04:	781b      	ldrb	r3, [r3, #0]
}
 8007f06:	0018      	movs	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	b006      	add	sp, #24
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	fffffefd 	.word	0xfffffefd

08007f14 <__NVIC_EnableIRQ>:
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	0002      	movs	r2, r0
 8007f1c:	1dfb      	adds	r3, r7, #7
 8007f1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f20:	1dfb      	adds	r3, r7, #7
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b7f      	cmp	r3, #127	; 0x7f
 8007f26:	d809      	bhi.n	8007f3c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f28:	1dfb      	adds	r3, r7, #7
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	001a      	movs	r2, r3
 8007f2e:	231f      	movs	r3, #31
 8007f30:	401a      	ands	r2, r3
 8007f32:	4b04      	ldr	r3, [pc, #16]	; (8007f44 <__NVIC_EnableIRQ+0x30>)
 8007f34:	2101      	movs	r1, #1
 8007f36:	4091      	lsls	r1, r2
 8007f38:	000a      	movs	r2, r1
 8007f3a:	601a      	str	r2, [r3, #0]
}
 8007f3c:	46c0      	nop			; (mov r8, r8)
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b002      	add	sp, #8
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	e000e100 	.word	0xe000e100

08007f48 <__NVIC_DisableIRQ>:
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	0002      	movs	r2, r0
 8007f50:	1dfb      	adds	r3, r7, #7
 8007f52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f54:	1dfb      	adds	r3, r7, #7
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b7f      	cmp	r3, #127	; 0x7f
 8007f5a:	d810      	bhi.n	8007f7e <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f5c:	1dfb      	adds	r3, r7, #7
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	001a      	movs	r2, r3
 8007f62:	231f      	movs	r3, #31
 8007f64:	4013      	ands	r3, r2
 8007f66:	4908      	ldr	r1, [pc, #32]	; (8007f88 <__NVIC_DisableIRQ+0x40>)
 8007f68:	2201      	movs	r2, #1
 8007f6a:	409a      	lsls	r2, r3
 8007f6c:	0013      	movs	r3, r2
 8007f6e:	2280      	movs	r2, #128	; 0x80
 8007f70:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f72:	f3bf 8f4f 	dsb	sy
}
 8007f76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007f78:	f3bf 8f6f 	isb	sy
}
 8007f7c:	46c0      	nop			; (mov r8, r8)
}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	46bd      	mov	sp, r7
 8007f82:	b002      	add	sp, #8
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	e000e100 	.word	0xe000e100

08007f8c <__NVIC_SetPriority>:
{
 8007f8c:	b590      	push	{r4, r7, lr}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	0002      	movs	r2, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	1dfb      	adds	r3, r7, #7
 8007f98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f9a:	1dfb      	adds	r3, r7, #7
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007fa0:	d828      	bhi.n	8007ff4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007fa2:	4a2f      	ldr	r2, [pc, #188]	; (8008060 <__NVIC_SetPriority+0xd4>)
 8007fa4:	1dfb      	adds	r3, r7, #7
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	b25b      	sxtb	r3, r3
 8007faa:	089b      	lsrs	r3, r3, #2
 8007fac:	33c0      	adds	r3, #192	; 0xc0
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	589b      	ldr	r3, [r3, r2]
 8007fb2:	1dfa      	adds	r2, r7, #7
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	0011      	movs	r1, r2
 8007fb8:	2203      	movs	r2, #3
 8007fba:	400a      	ands	r2, r1
 8007fbc:	00d2      	lsls	r2, r2, #3
 8007fbe:	21ff      	movs	r1, #255	; 0xff
 8007fc0:	4091      	lsls	r1, r2
 8007fc2:	000a      	movs	r2, r1
 8007fc4:	43d2      	mvns	r2, r2
 8007fc6:	401a      	ands	r2, r3
 8007fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	019b      	lsls	r3, r3, #6
 8007fce:	22ff      	movs	r2, #255	; 0xff
 8007fd0:	401a      	ands	r2, r3
 8007fd2:	1dfb      	adds	r3, r7, #7
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	2303      	movs	r3, #3
 8007fda:	4003      	ands	r3, r0
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007fe0:	481f      	ldr	r0, [pc, #124]	; (8008060 <__NVIC_SetPriority+0xd4>)
 8007fe2:	1dfb      	adds	r3, r7, #7
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b25b      	sxtb	r3, r3
 8007fe8:	089b      	lsrs	r3, r3, #2
 8007fea:	430a      	orrs	r2, r1
 8007fec:	33c0      	adds	r3, #192	; 0xc0
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	501a      	str	r2, [r3, r0]
}
 8007ff2:	e031      	b.n	8008058 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007ff4:	4a1b      	ldr	r2, [pc, #108]	; (8008064 <__NVIC_SetPriority+0xd8>)
 8007ff6:	1dfb      	adds	r3, r7, #7
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	0019      	movs	r1, r3
 8007ffc:	230f      	movs	r3, #15
 8007ffe:	400b      	ands	r3, r1
 8008000:	3b08      	subs	r3, #8
 8008002:	089b      	lsrs	r3, r3, #2
 8008004:	3306      	adds	r3, #6
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	18d3      	adds	r3, r2, r3
 800800a:	3304      	adds	r3, #4
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	1dfa      	adds	r2, r7, #7
 8008010:	7812      	ldrb	r2, [r2, #0]
 8008012:	0011      	movs	r1, r2
 8008014:	2203      	movs	r2, #3
 8008016:	400a      	ands	r2, r1
 8008018:	00d2      	lsls	r2, r2, #3
 800801a:	21ff      	movs	r1, #255	; 0xff
 800801c:	4091      	lsls	r1, r2
 800801e:	000a      	movs	r2, r1
 8008020:	43d2      	mvns	r2, r2
 8008022:	401a      	ands	r2, r3
 8008024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	019b      	lsls	r3, r3, #6
 800802a:	22ff      	movs	r2, #255	; 0xff
 800802c:	401a      	ands	r2, r3
 800802e:	1dfb      	adds	r3, r7, #7
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	0018      	movs	r0, r3
 8008034:	2303      	movs	r3, #3
 8008036:	4003      	ands	r3, r0
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800803c:	4809      	ldr	r0, [pc, #36]	; (8008064 <__NVIC_SetPriority+0xd8>)
 800803e:	1dfb      	adds	r3, r7, #7
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	001c      	movs	r4, r3
 8008044:	230f      	movs	r3, #15
 8008046:	4023      	ands	r3, r4
 8008048:	3b08      	subs	r3, #8
 800804a:	089b      	lsrs	r3, r3, #2
 800804c:	430a      	orrs	r2, r1
 800804e:	3306      	adds	r3, #6
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	18c3      	adds	r3, r0, r3
 8008054:	3304      	adds	r3, #4
 8008056:	601a      	str	r2, [r3, #0]
}
 8008058:	46c0      	nop			; (mov r8, r8)
 800805a:	46bd      	mov	sp, r7
 800805c:	b003      	add	sp, #12
 800805e:	bd90      	pop	{r4, r7, pc}
 8008060:	e000e100 	.word	0xe000e100
 8008064:	e000ed00 	.word	0xe000ed00

08008068 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
 8008072:	210f      	movs	r1, #15
 8008074:	187b      	adds	r3, r7, r1
 8008076:	1c02      	adds	r2, r0, #0
 8008078:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	187b      	adds	r3, r7, r1
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	b25b      	sxtb	r3, r3
 8008082:	0011      	movs	r1, r2
 8008084:	0018      	movs	r0, r3
 8008086:	f7ff ff81 	bl	8007f8c <__NVIC_SetPriority>
}
 800808a:	46c0      	nop			; (mov r8, r8)
 800808c:	46bd      	mov	sp, r7
 800808e:	b004      	add	sp, #16
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	0002      	movs	r2, r0
 800809a:	1dfb      	adds	r3, r7, #7
 800809c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800809e:	1dfb      	adds	r3, r7, #7
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b25b      	sxtb	r3, r3
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7ff ff35 	bl	8007f14 <__NVIC_EnableIRQ>
}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b002      	add	sp, #8
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	0002      	movs	r2, r0
 80080ba:	1dfb      	adds	r3, r7, #7
 80080bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80080be:	1dfb      	adds	r3, r7, #7
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	b25b      	sxtb	r3, r3
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7ff ff3f 	bl	8007f48 <__NVIC_DisableIRQ>
}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b002      	add	sp, #8
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e061      	b.n	80081aa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a32      	ldr	r2, [pc, #200]	; (80081b4 <HAL_DMA_Init+0xe0>)
 80080ec:	4694      	mov	ip, r2
 80080ee:	4463      	add	r3, ip
 80080f0:	2114      	movs	r1, #20
 80080f2:	0018      	movs	r0, r3
 80080f4:	f7f8 f810 	bl	8000118 <__udivsi3>
 80080f8:	0003      	movs	r3, r0
 80080fa:	009a      	lsls	r2, r3, #2
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a2d      	ldr	r2, [pc, #180]	; (80081b8 <HAL_DMA_Init+0xe4>)
 8008104:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2225      	movs	r2, #37	; 0x25
 800810a:	2102      	movs	r1, #2
 800810c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4a28      	ldr	r2, [pc, #160]	; (80081bc <HAL_DMA_Init+0xe8>)
 800811a:	4013      	ands	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800813e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	2380      	movs	r3, #128	; 0x80
 800815a:	01db      	lsls	r3, r3, #7
 800815c:	429a      	cmp	r2, r3
 800815e:	d018      	beq.n	8008192 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008160:	4b17      	ldr	r3, [pc, #92]	; (80081c0 <HAL_DMA_Init+0xec>)
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008168:	211c      	movs	r1, #28
 800816a:	400b      	ands	r3, r1
 800816c:	210f      	movs	r1, #15
 800816e:	4099      	lsls	r1, r3
 8008170:	000b      	movs	r3, r1
 8008172:	43d9      	mvns	r1, r3
 8008174:	4b12      	ldr	r3, [pc, #72]	; (80081c0 <HAL_DMA_Init+0xec>)
 8008176:	400a      	ands	r2, r1
 8008178:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800817a:	4b11      	ldr	r3, [pc, #68]	; (80081c0 <HAL_DMA_Init+0xec>)
 800817c:	6819      	ldr	r1, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008186:	201c      	movs	r0, #28
 8008188:	4003      	ands	r3, r0
 800818a:	409a      	lsls	r2, r3
 800818c:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <HAL_DMA_Init+0xec>)
 800818e:	430a      	orrs	r2, r1
 8008190:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2225      	movs	r2, #37	; 0x25
 800819c:	2101      	movs	r1, #1
 800819e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2224      	movs	r2, #36	; 0x24
 80081a4:	2100      	movs	r1, #0
 80081a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	0018      	movs	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b004      	add	sp, #16
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	bffdfff8 	.word	0xbffdfff8
 80081b8:	40020000 	.word	0x40020000
 80081bc:	ffff800f 	.word	0xffff800f
 80081c0:	400200a8 	.word	0x400200a8

080081c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e04a      	b.n	800826c <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2101      	movs	r1, #1
 80081e2:	438a      	bics	r2, r1
 80081e4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a22      	ldr	r2, [pc, #136]	; (8008274 <HAL_DMA_DeInit+0xb0>)
 80081ec:	4694      	mov	ip, r2
 80081ee:	4463      	add	r3, ip
 80081f0:	2114      	movs	r1, #20
 80081f2:	0018      	movs	r0, r3
 80081f4:	f7f7 ff90 	bl	8000118 <__udivsi3>
 80081f8:	0003      	movs	r3, r0
 80081fa:	009a      	lsls	r2, r3, #2
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a1d      	ldr	r2, [pc, #116]	; (8008278 <HAL_DMA_DeInit+0xb4>)
 8008204:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008212:	221c      	movs	r2, #28
 8008214:	401a      	ands	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	2101      	movs	r1, #1
 800821c:	4091      	lsls	r1, r2
 800821e:	000a      	movs	r2, r1
 8008220:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008222:	4b16      	ldr	r3, [pc, #88]	; (800827c <HAL_DMA_DeInit+0xb8>)
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822a:	211c      	movs	r1, #28
 800822c:	400b      	ands	r3, r1
 800822e:	210f      	movs	r1, #15
 8008230:	4099      	lsls	r1, r3
 8008232:	000b      	movs	r3, r1
 8008234:	43d9      	mvns	r1, r3
 8008236:	4b11      	ldr	r3, [pc, #68]	; (800827c <HAL_DMA_DeInit+0xb8>)
 8008238:	400a      	ands	r2, r1
 800823a:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2225      	movs	r2, #37	; 0x25
 800825e:	2100      	movs	r1, #0
 8008260:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2224      	movs	r2, #36	; 0x24
 8008266:	2100      	movs	r1, #0
 8008268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	0018      	movs	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	b002      	add	sp, #8
 8008272:	bd80      	pop	{r7, pc}
 8008274:	bffdfff8 	.word	0xbffdfff8
 8008278:	40020000 	.word	0x40020000
 800827c:	400200a8 	.word	0x400200a8

08008280 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800828e:	2317      	movs	r3, #23
 8008290:	18fb      	adds	r3, r7, r3
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2224      	movs	r2, #36	; 0x24
 800829a:	5c9b      	ldrb	r3, [r3, r2]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_DMA_Start_IT+0x24>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e04f      	b.n	8008344 <HAL_DMA_Start_IT+0xc4>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2224      	movs	r2, #36	; 0x24
 80082a8:	2101      	movs	r1, #1
 80082aa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2225      	movs	r2, #37	; 0x25
 80082b0:	5c9b      	ldrb	r3, [r3, r2]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d13a      	bne.n	800832e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2225      	movs	r2, #37	; 0x25
 80082bc:	2102      	movs	r1, #2
 80082be:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2101      	movs	r1, #1
 80082d2:	438a      	bics	r2, r1
 80082d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 f96a 	bl	80085b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d008      	beq.n	80082fc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	210e      	movs	r1, #14
 80082f6:	430a      	orrs	r2, r1
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e00f      	b.n	800831c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2104      	movs	r1, #4
 8008308:	438a      	bics	r2, r1
 800830a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	210a      	movs	r1, #10
 8008318:	430a      	orrs	r2, r1
 800831a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2101      	movs	r1, #1
 8008328:	430a      	orrs	r2, r1
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	e007      	b.n	800833e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2224      	movs	r2, #36	; 0x24
 8008332:	2100      	movs	r1, #0
 8008334:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008336:	2317      	movs	r3, #23
 8008338:	18fb      	adds	r3, r7, r3
 800833a:	2202      	movs	r2, #2
 800833c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800833e:	2317      	movs	r3, #23
 8008340:	18fb      	adds	r3, r7, r3
 8008342:	781b      	ldrb	r3, [r3, #0]
}
 8008344:	0018      	movs	r0, r3
 8008346:	46bd      	mov	sp, r7
 8008348:	b006      	add	sp, #24
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008354:	230f      	movs	r3, #15
 8008356:	18fb      	adds	r3, r7, r3
 8008358:	2200      	movs	r2, #0
 800835a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2225      	movs	r2, #37	; 0x25
 8008360:	5c9b      	ldrb	r3, [r3, r2]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d008      	beq.n	800837a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2204      	movs	r2, #4
 800836c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2224      	movs	r2, #36	; 0x24
 8008372:	2100      	movs	r1, #0
 8008374:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e024      	b.n	80083c4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	210e      	movs	r1, #14
 8008386:	438a      	bics	r2, r1
 8008388:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2101      	movs	r1, #1
 8008396:	438a      	bics	r2, r1
 8008398:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839e:	221c      	movs	r2, #28
 80083a0:	401a      	ands	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	2101      	movs	r1, #1
 80083a8:	4091      	lsls	r1, r2
 80083aa:	000a      	movs	r2, r1
 80083ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2225      	movs	r2, #37	; 0x25
 80083b2:	2101      	movs	r1, #1
 80083b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2224      	movs	r2, #36	; 0x24
 80083ba:	2100      	movs	r1, #0
 80083bc:	5499      	strb	r1, [r3, r2]

    return status;
 80083be:	230f      	movs	r3, #15
 80083c0:	18fb      	adds	r3, r7, r3
 80083c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083c4:	0018      	movs	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b004      	add	sp, #16
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083d4:	210f      	movs	r1, #15
 80083d6:	187b      	adds	r3, r7, r1
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2225      	movs	r2, #37	; 0x25
 80083e0:	5c9b      	ldrb	r3, [r3, r2]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d006      	beq.n	80083f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2204      	movs	r2, #4
 80083ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80083ee:	187b      	adds	r3, r7, r1
 80083f0:	2201      	movs	r2, #1
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	e02a      	b.n	800844c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	210e      	movs	r1, #14
 8008402:	438a      	bics	r2, r1
 8008404:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2101      	movs	r1, #1
 8008412:	438a      	bics	r2, r1
 8008414:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841a:	221c      	movs	r2, #28
 800841c:	401a      	ands	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	2101      	movs	r1, #1
 8008424:	4091      	lsls	r1, r2
 8008426:	000a      	movs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2225      	movs	r2, #37	; 0x25
 800842e:	2101      	movs	r1, #1
 8008430:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2224      	movs	r2, #36	; 0x24
 8008436:	2100      	movs	r1, #0
 8008438:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	0010      	movs	r0, r2
 800844a:	4798      	blx	r3
    }
  }
  return status;
 800844c:	230f      	movs	r3, #15
 800844e:	18fb      	adds	r3, r7, r3
 8008450:	781b      	ldrb	r3, [r3, #0]
}
 8008452:	0018      	movs	r0, r3
 8008454:	46bd      	mov	sp, r7
 8008456:	b004      	add	sp, #16
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008476:	221c      	movs	r2, #28
 8008478:	4013      	ands	r3, r2
 800847a:	2204      	movs	r2, #4
 800847c:	409a      	lsls	r2, r3
 800847e:	0013      	movs	r3, r2
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	4013      	ands	r3, r2
 8008484:	d026      	beq.n	80084d4 <HAL_DMA_IRQHandler+0x7a>
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2204      	movs	r2, #4
 800848a:	4013      	ands	r3, r2
 800848c:	d022      	beq.n	80084d4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2220      	movs	r2, #32
 8008496:	4013      	ands	r3, r2
 8008498:	d107      	bne.n	80084aa <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2104      	movs	r1, #4
 80084a6:	438a      	bics	r2, r1
 80084a8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ae:	221c      	movs	r2, #28
 80084b0:	401a      	ands	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	2104      	movs	r1, #4
 80084b8:	4091      	lsls	r1, r2
 80084ba:	000a      	movs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d100      	bne.n	80084c8 <HAL_DMA_IRQHandler+0x6e>
 80084c6:	e071      	b.n	80085ac <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	0010      	movs	r0, r2
 80084d0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80084d2:	e06b      	b.n	80085ac <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d8:	221c      	movs	r2, #28
 80084da:	4013      	ands	r3, r2
 80084dc:	2202      	movs	r2, #2
 80084de:	409a      	lsls	r2, r3
 80084e0:	0013      	movs	r3, r2
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4013      	ands	r3, r2
 80084e6:	d02d      	beq.n	8008544 <HAL_DMA_IRQHandler+0xea>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2202      	movs	r2, #2
 80084ec:	4013      	ands	r3, r2
 80084ee:	d029      	beq.n	8008544 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2220      	movs	r2, #32
 80084f8:	4013      	ands	r3, r2
 80084fa:	d10b      	bne.n	8008514 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	210a      	movs	r1, #10
 8008508:	438a      	bics	r2, r1
 800850a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2225      	movs	r2, #37	; 0x25
 8008510:	2101      	movs	r1, #1
 8008512:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008518:	221c      	movs	r2, #28
 800851a:	401a      	ands	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	2102      	movs	r1, #2
 8008522:	4091      	lsls	r1, r2
 8008524:	000a      	movs	r2, r1
 8008526:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2224      	movs	r2, #36	; 0x24
 800852c:	2100      	movs	r1, #0
 800852e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d039      	beq.n	80085ac <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	0010      	movs	r0, r2
 8008540:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008542:	e033      	b.n	80085ac <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008548:	221c      	movs	r2, #28
 800854a:	4013      	ands	r3, r2
 800854c:	2208      	movs	r2, #8
 800854e:	409a      	lsls	r2, r3
 8008550:	0013      	movs	r3, r2
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4013      	ands	r3, r2
 8008556:	d02a      	beq.n	80085ae <HAL_DMA_IRQHandler+0x154>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2208      	movs	r2, #8
 800855c:	4013      	ands	r3, r2
 800855e:	d026      	beq.n	80085ae <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	210e      	movs	r1, #14
 800856c:	438a      	bics	r2, r1
 800856e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008574:	221c      	movs	r2, #28
 8008576:	401a      	ands	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857c:	2101      	movs	r1, #1
 800857e:	4091      	lsls	r1, r2
 8008580:	000a      	movs	r2, r1
 8008582:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2225      	movs	r2, #37	; 0x25
 800858e:	2101      	movs	r1, #1
 8008590:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2224      	movs	r2, #36	; 0x24
 8008596:	2100      	movs	r1, #0
 8008598:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	0010      	movs	r0, r2
 80085aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80085ac:	46c0      	nop			; (mov r8, r8)
 80085ae:	46c0      	nop			; (mov r8, r8)
}
 80085b0:	46bd      	mov	sp, r7
 80085b2:	b004      	add	sp, #16
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	607a      	str	r2, [r7, #4]
 80085c2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c8:	221c      	movs	r2, #28
 80085ca:	401a      	ands	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d0:	2101      	movs	r1, #1
 80085d2:	4091      	lsls	r1, r2
 80085d4:	000a      	movs	r2, r1
 80085d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b10      	cmp	r3, #16
 80085e6:	d108      	bne.n	80085fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80085f8:	e007      	b.n	800860a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	60da      	str	r2, [r3, #12]
}
 800860a:	46c0      	nop			; (mov r8, r8)
 800860c:	46bd      	mov	sp, r7
 800860e:	b004      	add	sp, #16
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b086      	sub	sp, #24
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	200b      	movs	r0, #11
 800861e:	183b      	adds	r3, r7, r0
 8008620:	1c0a      	adds	r2, r1, #0
 8008622:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008624:	2317      	movs	r3, #23
 8008626:	18fb      	adds	r3, r7, r3
 8008628:	2200      	movs	r2, #0
 800862a:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800862c:	183b      	adds	r3, r7, r0
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d103      	bne.n	800863c <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	605a      	str	r2, [r3, #4]
      break;
 800863a:	e004      	b.n	8008646 <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 800863c:	2317      	movs	r3, #23
 800863e:	18fb      	adds	r3, r7, r3
 8008640:	2201      	movs	r2, #1
 8008642:	701a      	strb	r2, [r3, #0]
      break;
 8008644:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8008646:	2317      	movs	r3, #23
 8008648:	18fb      	adds	r3, r7, r3
 800864a:	781b      	ldrb	r3, [r3, #0]
}
 800864c:	0018      	movs	r0, r3
 800864e:	46bd      	mov	sp, r7
 8008650:	b006      	add	sp, #24
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e003      	b.n	8008670 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800866e:	2300      	movs	r3, #0
  }
}
 8008670:	0018      	movs	r0, r3
 8008672:	46bd      	mov	sp, r7
 8008674:	b002      	add	sp, #8
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	221f      	movs	r2, #31
 8008686:	4013      	ands	r3, r2
 8008688:	2201      	movs	r2, #1
 800868a:	409a      	lsls	r2, r3
 800868c:	0013      	movs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <HAL_EXTI_IRQHandler+0x44>)
 8008692:	695a      	ldr	r2, [r3, #20]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4013      	ands	r3, r2
 8008698:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d009      	beq.n	80086b4 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80086a0:	4b06      	ldr	r3, [pc, #24]	; (80086bc <HAL_EXTI_IRQHandler+0x44>)
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	4798      	blx	r3
    }
  }
}
 80086b4:	46c0      	nop			; (mov r8, r8)
 80086b6:	46bd      	mov	sp, r7
 80086b8:	b004      	add	sp, #16
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40010400 	.word	0x40010400

080086c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80086d6:	e155      	b.n	8008984 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2101      	movs	r1, #1
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4091      	lsls	r1, r2
 80086e2:	000a      	movs	r2, r1
 80086e4:	4013      	ands	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d100      	bne.n	80086f0 <HAL_GPIO_Init+0x30>
 80086ee:	e146      	b.n	800897e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d00b      	beq.n	8008710 <HAL_GPIO_Init+0x50>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d007      	beq.n	8008710 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008704:	2b11      	cmp	r3, #17
 8008706:	d003      	beq.n	8008710 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	2b12      	cmp	r3, #18
 800870e:	d130      	bne.n	8008772 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	2203      	movs	r2, #3
 800871c:	409a      	lsls	r2, r3
 800871e:	0013      	movs	r3, r2
 8008720:	43da      	mvns	r2, r3
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	4013      	ands	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	68da      	ldr	r2, [r3, #12]
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	409a      	lsls	r2, r3
 8008732:	0013      	movs	r3, r2
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008746:	2201      	movs	r2, #1
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	409a      	lsls	r2, r3
 800874c:	0013      	movs	r3, r2
 800874e:	43da      	mvns	r2, r3
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	4013      	ands	r3, r2
 8008754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	091b      	lsrs	r3, r3, #4
 800875c:	2201      	movs	r2, #1
 800875e:	401a      	ands	r2, r3
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	409a      	lsls	r2, r3
 8008764:	0013      	movs	r3, r2
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	2203      	movs	r2, #3
 800877e:	409a      	lsls	r2, r3
 8008780:	0013      	movs	r3, r2
 8008782:	43da      	mvns	r2, r3
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4013      	ands	r3, r2
 8008788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	689a      	ldr	r2, [r3, #8]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	409a      	lsls	r2, r3
 8008794:	0013      	movs	r3, r2
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d003      	beq.n	80087b2 <HAL_GPIO_Init+0xf2>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b12      	cmp	r3, #18
 80087b0:	d123      	bne.n	80087fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	08da      	lsrs	r2, r3, #3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3208      	adds	r2, #8
 80087ba:	0092      	lsls	r2, r2, #2
 80087bc:	58d3      	ldr	r3, [r2, r3]
 80087be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2207      	movs	r2, #7
 80087c4:	4013      	ands	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	220f      	movs	r2, #15
 80087ca:	409a      	lsls	r2, r3
 80087cc:	0013      	movs	r3, r2
 80087ce:	43da      	mvns	r2, r3
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	4013      	ands	r3, r2
 80087d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	691a      	ldr	r2, [r3, #16]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2107      	movs	r1, #7
 80087de:	400b      	ands	r3, r1
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	409a      	lsls	r2, r3
 80087e4:	0013      	movs	r3, r2
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	08da      	lsrs	r2, r3, #3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3208      	adds	r2, #8
 80087f4:	0092      	lsls	r2, r2, #2
 80087f6:	6939      	ldr	r1, [r7, #16]
 80087f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	2203      	movs	r2, #3
 8008806:	409a      	lsls	r2, r3
 8008808:	0013      	movs	r3, r2
 800880a:	43da      	mvns	r2, r3
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	4013      	ands	r3, r2
 8008810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2203      	movs	r2, #3
 8008818:	401a      	ands	r2, r3
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	409a      	lsls	r2, r3
 8008820:	0013      	movs	r3, r2
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	4313      	orrs	r3, r2
 8008826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	2380      	movs	r3, #128	; 0x80
 8008834:	055b      	lsls	r3, r3, #21
 8008836:	4013      	ands	r3, r2
 8008838:	d100      	bne.n	800883c <HAL_GPIO_Init+0x17c>
 800883a:	e0a0      	b.n	800897e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800883c:	4b57      	ldr	r3, [pc, #348]	; (800899c <HAL_GPIO_Init+0x2dc>)
 800883e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008840:	4b56      	ldr	r3, [pc, #344]	; (800899c <HAL_GPIO_Init+0x2dc>)
 8008842:	2101      	movs	r1, #1
 8008844:	430a      	orrs	r2, r1
 8008846:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8008848:	4a55      	ldr	r2, [pc, #340]	; (80089a0 <HAL_GPIO_Init+0x2e0>)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	089b      	lsrs	r3, r3, #2
 800884e:	3302      	adds	r3, #2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	589b      	ldr	r3, [r3, r2]
 8008854:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2203      	movs	r2, #3
 800885a:	4013      	ands	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	220f      	movs	r2, #15
 8008860:	409a      	lsls	r2, r3
 8008862:	0013      	movs	r3, r2
 8008864:	43da      	mvns	r2, r3
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	4013      	ands	r3, r2
 800886a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	23a0      	movs	r3, #160	; 0xa0
 8008870:	05db      	lsls	r3, r3, #23
 8008872:	429a      	cmp	r2, r3
 8008874:	d01f      	beq.n	80088b6 <HAL_GPIO_Init+0x1f6>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a4a      	ldr	r2, [pc, #296]	; (80089a4 <HAL_GPIO_Init+0x2e4>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d019      	beq.n	80088b2 <HAL_GPIO_Init+0x1f2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a49      	ldr	r2, [pc, #292]	; (80089a8 <HAL_GPIO_Init+0x2e8>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d013      	beq.n	80088ae <HAL_GPIO_Init+0x1ee>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a48      	ldr	r2, [pc, #288]	; (80089ac <HAL_GPIO_Init+0x2ec>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00d      	beq.n	80088aa <HAL_GPIO_Init+0x1ea>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a47      	ldr	r2, [pc, #284]	; (80089b0 <HAL_GPIO_Init+0x2f0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d007      	beq.n	80088a6 <HAL_GPIO_Init+0x1e6>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a46      	ldr	r2, [pc, #280]	; (80089b4 <HAL_GPIO_Init+0x2f4>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d101      	bne.n	80088a2 <HAL_GPIO_Init+0x1e2>
 800889e:	2305      	movs	r3, #5
 80088a0:	e00a      	b.n	80088b8 <HAL_GPIO_Init+0x1f8>
 80088a2:	2306      	movs	r3, #6
 80088a4:	e008      	b.n	80088b8 <HAL_GPIO_Init+0x1f8>
 80088a6:	2304      	movs	r3, #4
 80088a8:	e006      	b.n	80088b8 <HAL_GPIO_Init+0x1f8>
 80088aa:	2303      	movs	r3, #3
 80088ac:	e004      	b.n	80088b8 <HAL_GPIO_Init+0x1f8>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e002      	b.n	80088b8 <HAL_GPIO_Init+0x1f8>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e000      	b.n	80088b8 <HAL_GPIO_Init+0x1f8>
 80088b6:	2300      	movs	r3, #0
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	2103      	movs	r1, #3
 80088bc:	400a      	ands	r2, r1
 80088be:	0092      	lsls	r2, r2, #2
 80088c0:	4093      	lsls	r3, r2
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088c8:	4935      	ldr	r1, [pc, #212]	; (80089a0 <HAL_GPIO_Init+0x2e0>)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	089b      	lsrs	r3, r3, #2
 80088ce:	3302      	adds	r3, #2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80088d6:	4b38      	ldr	r3, [pc, #224]	; (80089b8 <HAL_GPIO_Init+0x2f8>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	43da      	mvns	r2, r3
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	4013      	ands	r3, r2
 80088e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	2380      	movs	r3, #128	; 0x80
 80088ec:	025b      	lsls	r3, r3, #9
 80088ee:	4013      	ands	r3, r2
 80088f0:	d003      	beq.n	80088fa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80088fa:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <HAL_GPIO_Init+0x2f8>)
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8008900:	4b2d      	ldr	r3, [pc, #180]	; (80089b8 <HAL_GPIO_Init+0x2f8>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	43da      	mvns	r2, r3
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	4013      	ands	r3, r2
 800890e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	2380      	movs	r3, #128	; 0x80
 8008916:	029b      	lsls	r3, r3, #10
 8008918:	4013      	ands	r3, r2
 800891a:	d003      	beq.n	8008924 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4313      	orrs	r3, r2
 8008922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008924:	4b24      	ldr	r3, [pc, #144]	; (80089b8 <HAL_GPIO_Init+0x2f8>)
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800892a:	4b23      	ldr	r3, [pc, #140]	; (80089b8 <HAL_GPIO_Init+0x2f8>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	43da      	mvns	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	4013      	ands	r3, r2
 8008938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	2380      	movs	r3, #128	; 0x80
 8008940:	035b      	lsls	r3, r3, #13
 8008942:	4013      	ands	r3, r2
 8008944:	d003      	beq.n	800894e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4313      	orrs	r3, r2
 800894c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800894e:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <HAL_GPIO_Init+0x2f8>)
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008954:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <HAL_GPIO_Init+0x2f8>)
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	43da      	mvns	r2, r3
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	4013      	ands	r3, r2
 8008962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	039b      	lsls	r3, r3, #14
 800896c:	4013      	ands	r3, r2
 800896e:	d003      	beq.n	8008978 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4313      	orrs	r3, r2
 8008976:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008978:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <HAL_GPIO_Init+0x2f8>)
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	3301      	adds	r3, #1
 8008982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	40da      	lsrs	r2, r3
 800898c:	1e13      	subs	r3, r2, #0
 800898e:	d000      	beq.n	8008992 <HAL_GPIO_Init+0x2d2>
 8008990:	e6a2      	b.n	80086d8 <HAL_GPIO_Init+0x18>
  }
}
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	46c0      	nop			; (mov r8, r8)
 8008996:	46bd      	mov	sp, r7
 8008998:	b006      	add	sp, #24
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40021000 	.word	0x40021000
 80089a0:	40010000 	.word	0x40010000
 80089a4:	50000400 	.word	0x50000400
 80089a8:	50000800 	.word	0x50000800
 80089ac:	50000c00 	.word	0x50000c00
 80089b0:	50001000 	.word	0x50001000
 80089b4:	50001c00 	.word	0x50001c00
 80089b8:	40010400 	.word	0x40010400

080089bc <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80089d2:	e0bc      	b.n	8008b4e <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80089d4:	2201      	movs	r2, #1
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	409a      	lsls	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	4013      	ands	r3, r2
 80089de:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d100      	bne.n	80089e8 <HAL_GPIO_DeInit+0x2c>
 80089e6:	e0af      	b.n	8008b48 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80089e8:	4a5e      	ldr	r2, [pc, #376]	; (8008b64 <HAL_GPIO_DeInit+0x1a8>)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	089b      	lsrs	r3, r3, #2
 80089ee:	3302      	adds	r3, #2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	589b      	ldr	r3, [r3, r2]
 80089f4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2203      	movs	r2, #3
 80089fa:	4013      	ands	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	220f      	movs	r2, #15
 8008a00:	409a      	lsls	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4013      	ands	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	23a0      	movs	r3, #160	; 0xa0
 8008a0c:	05db      	lsls	r3, r3, #23
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d01f      	beq.n	8008a52 <HAL_GPIO_DeInit+0x96>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a54      	ldr	r2, [pc, #336]	; (8008b68 <HAL_GPIO_DeInit+0x1ac>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d019      	beq.n	8008a4e <HAL_GPIO_DeInit+0x92>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a53      	ldr	r2, [pc, #332]	; (8008b6c <HAL_GPIO_DeInit+0x1b0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d013      	beq.n	8008a4a <HAL_GPIO_DeInit+0x8e>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a52      	ldr	r2, [pc, #328]	; (8008b70 <HAL_GPIO_DeInit+0x1b4>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00d      	beq.n	8008a46 <HAL_GPIO_DeInit+0x8a>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a51      	ldr	r2, [pc, #324]	; (8008b74 <HAL_GPIO_DeInit+0x1b8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d007      	beq.n	8008a42 <HAL_GPIO_DeInit+0x86>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a50      	ldr	r2, [pc, #320]	; (8008b78 <HAL_GPIO_DeInit+0x1bc>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d101      	bne.n	8008a3e <HAL_GPIO_DeInit+0x82>
 8008a3a:	2305      	movs	r3, #5
 8008a3c:	e00a      	b.n	8008a54 <HAL_GPIO_DeInit+0x98>
 8008a3e:	2306      	movs	r3, #6
 8008a40:	e008      	b.n	8008a54 <HAL_GPIO_DeInit+0x98>
 8008a42:	2304      	movs	r3, #4
 8008a44:	e006      	b.n	8008a54 <HAL_GPIO_DeInit+0x98>
 8008a46:	2303      	movs	r3, #3
 8008a48:	e004      	b.n	8008a54 <HAL_GPIO_DeInit+0x98>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e002      	b.n	8008a54 <HAL_GPIO_DeInit+0x98>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <HAL_GPIO_DeInit+0x98>
 8008a52:	2300      	movs	r3, #0
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	2103      	movs	r1, #3
 8008a58:	400a      	ands	r2, r1
 8008a5a:	0092      	lsls	r2, r2, #2
 8008a5c:	4093      	lsls	r3, r2
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d132      	bne.n	8008aca <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008a64:	4b45      	ldr	r3, [pc, #276]	; (8008b7c <HAL_GPIO_DeInit+0x1c0>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	43d9      	mvns	r1, r3
 8008a6c:	4b43      	ldr	r3, [pc, #268]	; (8008b7c <HAL_GPIO_DeInit+0x1c0>)
 8008a6e:	400a      	ands	r2, r1
 8008a70:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008a72:	4b42      	ldr	r3, [pc, #264]	; (8008b7c <HAL_GPIO_DeInit+0x1c0>)
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	43d9      	mvns	r1, r3
 8008a7a:	4b40      	ldr	r3, [pc, #256]	; (8008b7c <HAL_GPIO_DeInit+0x1c0>)
 8008a7c:	400a      	ands	r2, r1
 8008a7e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008a80:	4b3e      	ldr	r3, [pc, #248]	; (8008b7c <HAL_GPIO_DeInit+0x1c0>)
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	43d9      	mvns	r1, r3
 8008a88:	4b3c      	ldr	r3, [pc, #240]	; (8008b7c <HAL_GPIO_DeInit+0x1c0>)
 8008a8a:	400a      	ands	r2, r1
 8008a8c:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008a8e:	4b3b      	ldr	r3, [pc, #236]	; (8008b7c <HAL_GPIO_DeInit+0x1c0>)
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	43d9      	mvns	r1, r3
 8008a96:	4b39      	ldr	r3, [pc, #228]	; (8008b7c <HAL_GPIO_DeInit+0x1c0>)
 8008a98:	400a      	ands	r2, r1
 8008a9a:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	220f      	movs	r2, #15
 8008aa6:	409a      	lsls	r2, r3
 8008aa8:	0013      	movs	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008aac:	4a2d      	ldr	r2, [pc, #180]	; (8008b64 <HAL_GPIO_DeInit+0x1a8>)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	089b      	lsrs	r3, r3, #2
 8008ab2:	3302      	adds	r3, #2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	589a      	ldr	r2, [r3, r2]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	43d9      	mvns	r1, r3
 8008abc:	4829      	ldr	r0, [pc, #164]	; (8008b64 <HAL_GPIO_DeInit+0x1a8>)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	089b      	lsrs	r3, r3, #2
 8008ac2:	400a      	ands	r2, r1
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	2103      	movs	r1, #3
 8008ad4:	4099      	lsls	r1, r3
 8008ad6:	000b      	movs	r3, r1
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	08da      	lsrs	r2, r3, #3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3208      	adds	r2, #8
 8008ae6:	0092      	lsls	r2, r2, #2
 8008ae8:	58d3      	ldr	r3, [r2, r3]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	2107      	movs	r1, #7
 8008aee:	400a      	ands	r2, r1
 8008af0:	0092      	lsls	r2, r2, #2
 8008af2:	210f      	movs	r1, #15
 8008af4:	4091      	lsls	r1, r2
 8008af6:	000a      	movs	r2, r1
 8008af8:	43d1      	mvns	r1, r2
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	08d2      	lsrs	r2, r2, #3
 8008afe:	4019      	ands	r1, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3208      	adds	r2, #8
 8008b04:	0092      	lsls	r2, r2, #2
 8008b06:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	0052      	lsls	r2, r2, #1
 8008b10:	2103      	movs	r1, #3
 8008b12:	4091      	lsls	r1, r2
 8008b14:	000a      	movs	r2, r1
 8008b16:	43d2      	mvns	r2, r2
 8008b18:	401a      	ands	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	2101      	movs	r1, #1
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	4091      	lsls	r1, r2
 8008b28:	000a      	movs	r2, r1
 8008b2a:	43d2      	mvns	r2, r2
 8008b2c:	401a      	ands	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	0052      	lsls	r2, r2, #1
 8008b3a:	2103      	movs	r1, #3
 8008b3c:	4091      	lsls	r1, r2
 8008b3e:	000a      	movs	r2, r1
 8008b40:	43d2      	mvns	r2, r2
 8008b42:	401a      	ands	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	609a      	str	r2, [r3, #8]
    }
    position++;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	40da      	lsrs	r2, r3
 8008b54:	1e13      	subs	r3, r2, #0
 8008b56:	d000      	beq.n	8008b5a <HAL_GPIO_DeInit+0x19e>
 8008b58:	e73c      	b.n	80089d4 <HAL_GPIO_DeInit+0x18>
  }
}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	46c0      	nop			; (mov r8, r8)
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	b006      	add	sp, #24
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	40010000 	.word	0x40010000
 8008b68:	50000400 	.word	0x50000400
 8008b6c:	50000800 	.word	0x50000800
 8008b70:	50000c00 	.word	0x50000c00
 8008b74:	50001000 	.word	0x50001000
 8008b78:	50001c00 	.word	0x50001c00
 8008b7c:	40010400 	.word	0x40010400

08008b80 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	000a      	movs	r2, r1
 8008b8a:	1cbb      	adds	r3, r7, #2
 8008b8c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	1cba      	adds	r2, r7, #2
 8008b94:	8812      	ldrh	r2, [r2, #0]
 8008b96:	4013      	ands	r3, r2
 8008b98:	d004      	beq.n	8008ba4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008b9a:	230f      	movs	r3, #15
 8008b9c:	18fb      	adds	r3, r7, r3
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	e003      	b.n	8008bac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ba4:	230f      	movs	r3, #15
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008bac:	230f      	movs	r3, #15
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	781b      	ldrb	r3, [r3, #0]
}
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	b004      	add	sp, #16
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	0008      	movs	r0, r1
 8008bc4:	0011      	movs	r1, r2
 8008bc6:	1cbb      	adds	r3, r7, #2
 8008bc8:	1c02      	adds	r2, r0, #0
 8008bca:	801a      	strh	r2, [r3, #0]
 8008bcc:	1c7b      	adds	r3, r7, #1
 8008bce:	1c0a      	adds	r2, r1, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bd2:	1c7b      	adds	r3, r7, #1
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bda:	1cbb      	adds	r3, r7, #2
 8008bdc:	881a      	ldrh	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8008be2:	e003      	b.n	8008bec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8008be4:	1cbb      	adds	r3, r7, #2
 8008be6:	881a      	ldrh	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008bec:	46c0      	nop			; (mov r8, r8)
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	b002      	add	sp, #8
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	000a      	movs	r2, r1
 8008bfe:	1cbb      	adds	r3, r7, #2
 8008c00:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008c08:	1cbb      	adds	r3, r7, #2
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	041a      	lsls	r2, r3, #16
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	43db      	mvns	r3, r3
 8008c16:	1cb9      	adds	r1, r7, #2
 8008c18:	8809      	ldrh	r1, [r1, #0]
 8008c1a:	400b      	ands	r3, r1
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	619a      	str	r2, [r3, #24]
}
 8008c22:	46c0      	nop			; (mov r8, r8)
 8008c24:	46bd      	mov	sp, r7
 8008c26:	b004      	add	sp, #16
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8008c30:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <HAL_PWR_DisablePVD+0x18>)
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	4b03      	ldr	r3, [pc, #12]	; (8008c44 <HAL_PWR_DisablePVD+0x18>)
 8008c36:	2110      	movs	r1, #16
 8008c38:	438a      	bics	r2, r1
 8008c3a:	601a      	str	r2, [r3, #0]
}
 8008c3c:	46c0      	nop			; (mov r8, r8)
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	40007000 	.word	0x40007000

08008c48 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	000a      	movs	r2, r1
 8008c52:	1cfb      	adds	r3, r7, #3
 8008c54:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008c5a:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	2380      	movs	r3, #128	; 0x80
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4013      	ands	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008c66:	4b21      	ldr	r3, [pc, #132]	; (8008cec <HAL_PWR_EnterSLEEPMode+0xa4>)
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <HAL_PWR_EnterSLEEPMode+0x40>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008c7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ce8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4b19      	ldr	r3, [pc, #100]	; (8008ce8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008c82:	491b      	ldr	r1, [pc, #108]	; (8008cf0 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8008c84:	400a      	ands	r2, r1
 8008c86:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008c88:	4b17      	ldr	r3, [pc, #92]	; (8008ce8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2203      	movs	r2, #3
 8008c92:	4393      	bics	r3, r2
 8008c94:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008c9e:	4b12      	ldr	r3, [pc, #72]	; (8008ce8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008ca4:	4b13      	ldr	r3, [pc, #76]	; (8008cf4 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008caa:	2104      	movs	r1, #4
 8008cac:	438a      	bics	r2, r1
 8008cae:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008cb0:	1cfb      	adds	r3, r7, #3
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008cb8:	bf30      	wfi
 8008cba:	e002      	b.n	8008cc2 <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008cbc:	bf40      	sev
    __WFE();
 8008cbe:	bf20      	wfe
    __WFE();
 8008cc0:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <HAL_PWR_EnterSLEEPMode+0x94>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d006      	beq.n	8008cdc <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008cce:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008cd4:	2180      	movs	r1, #128	; 0x80
 8008cd6:	0089      	lsls	r1, r1, #2
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8008cdc:	46c0      	nop			; (mov r8, r8)

}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	b006      	add	sp, #24
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	46c0      	nop			; (mov r8, r8)
 8008ce8:	40007000 	.word	0x40007000
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	fffffdff 	.word	0xfffffdff
 8008cf4:	e000ed00 	.word	0xe000ed00

08008cf8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	000a      	movs	r2, r1
 8008d02:	1cfb      	adds	r3, r7, #3
 8008d04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008d0a:	4b25      	ldr	r3, [pc, #148]	; (8008da0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	2380      	movs	r3, #128	; 0x80
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4013      	ands	r3, r2
 8008d14:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008d16:	4b23      	ldr	r3, [pc, #140]	; (8008da4 <HAL_PWR_EnterSTOPMode+0xac>)
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d008      	beq.n	8008d38 <HAL_PWR_EnterSTOPMode+0x40>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008d2c:	4b1c      	ldr	r3, [pc, #112]	; (8008da0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	4b1b      	ldr	r3, [pc, #108]	; (8008da0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008d32:	491d      	ldr	r1, [pc, #116]	; (8008da8 <HAL_PWR_EnterSTOPMode+0xb0>)
 8008d34:	400a      	ands	r2, r1
 8008d36:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008d38:	4b19      	ldr	r3, [pc, #100]	; (8008da0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2203      	movs	r2, #3
 8008d42:	4393      	bics	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008d4e:	4b14      	ldr	r3, [pc, #80]	; (8008da0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008d54:	4b15      	ldr	r3, [pc, #84]	; (8008dac <HAL_PWR_EnterSTOPMode+0xb4>)
 8008d56:	691a      	ldr	r2, [r3, #16]
 8008d58:	4b14      	ldr	r3, [pc, #80]	; (8008dac <HAL_PWR_EnterSTOPMode+0xb4>)
 8008d5a:	2104      	movs	r1, #4
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008d60:	1cfb      	adds	r3, r7, #3
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008d68:	bf30      	wfi
 8008d6a:	e002      	b.n	8008d72 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008d6c:	bf40      	sev
    __WFE();
 8008d6e:	bf20      	wfe
    __WFE();
 8008d70:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008d72:	4b0e      	ldr	r3, [pc, #56]	; (8008dac <HAL_PWR_EnterSTOPMode+0xb4>)
 8008d74:	691a      	ldr	r2, [r3, #16]
 8008d76:	4b0d      	ldr	r3, [pc, #52]	; (8008dac <HAL_PWR_EnterSTOPMode+0xb4>)
 8008d78:	2104      	movs	r1, #4
 8008d7a:	438a      	bics	r2, r1
 8008d7c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d009      	beq.n	8008d98 <HAL_PWR_EnterSTOPMode+0xa0>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d006      	beq.n	8008d98 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4b04      	ldr	r3, [pc, #16]	; (8008da0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008d90:	2180      	movs	r1, #128	; 0x80
 8008d92:	0089      	lsls	r1, r1, #2
 8008d94:	430a      	orrs	r2, r1
 8008d96:	601a      	str	r2, [r3, #0]
  }
}
 8008d98:	46c0      	nop			; (mov r8, r8)
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	b006      	add	sp, #24
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40007000 	.word	0x40007000
 8008da4:	40010000 	.word	0x40010000
 8008da8:	fffffdff 	.word	0xfffffdff
 8008dac:	e000ed00 	.word	0xe000ed00

08008db0 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008db4:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b03      	ldr	r3, [pc, #12]	; (8008dc8 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008dba:	2180      	movs	r1, #128	; 0x80
 8008dbc:	00c9      	lsls	r1, r1, #3
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	601a      	str	r2, [r3, #0]
}
 8008dc2:	46c0      	nop			; (mov r8, r8)
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40007000 	.word	0x40007000

08008dcc <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008dd0:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	4b03      	ldr	r3, [pc, #12]	; (8008de4 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008dd6:	2180      	movs	r1, #128	; 0x80
 8008dd8:	0089      	lsls	r1, r1, #2
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	601a      	str	r2, [r3, #0]
}
 8008dde:	46c0      	nop			; (mov r8, r8)
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	40007000 	.word	0x40007000

08008de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008de8:	b5b0      	push	{r4, r5, r7, lr}
 8008dea:	b08a      	sub	sp, #40	; 0x28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d102      	bne.n	8008dfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	f000 fbbf 	bl	800957a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dfc:	4bc9      	ldr	r3, [pc, #804]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	220c      	movs	r2, #12
 8008e02:	4013      	ands	r3, r2
 8008e04:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e06:	4bc7      	ldr	r3, [pc, #796]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	2380      	movs	r3, #128	; 0x80
 8008e0c:	025b      	lsls	r3, r3, #9
 8008e0e:	4013      	ands	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2201      	movs	r2, #1
 8008e18:	4013      	ands	r3, r2
 8008e1a:	d100      	bne.n	8008e1e <HAL_RCC_OscConfig+0x36>
 8008e1c:	e07e      	b.n	8008f1c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d007      	beq.n	8008e34 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2b0c      	cmp	r3, #12
 8008e28:	d112      	bne.n	8008e50 <HAL_RCC_OscConfig+0x68>
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	2380      	movs	r3, #128	; 0x80
 8008e2e:	025b      	lsls	r3, r3, #9
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d10d      	bne.n	8008e50 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e34:	4bbb      	ldr	r3, [pc, #748]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	2380      	movs	r3, #128	; 0x80
 8008e3a:	029b      	lsls	r3, r3, #10
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	d100      	bne.n	8008e42 <HAL_RCC_OscConfig+0x5a>
 8008e40:	e06b      	b.n	8008f1a <HAL_RCC_OscConfig+0x132>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d167      	bne.n	8008f1a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f000 fb95 	bl	800957a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	2380      	movs	r3, #128	; 0x80
 8008e56:	025b      	lsls	r3, r3, #9
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d107      	bne.n	8008e6c <HAL_RCC_OscConfig+0x84>
 8008e5c:	4bb1      	ldr	r3, [pc, #708]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	4bb0      	ldr	r3, [pc, #704]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e62:	2180      	movs	r1, #128	; 0x80
 8008e64:	0249      	lsls	r1, r1, #9
 8008e66:	430a      	orrs	r2, r1
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	e027      	b.n	8008ebc <HAL_RCC_OscConfig+0xd4>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	23a0      	movs	r3, #160	; 0xa0
 8008e72:	02db      	lsls	r3, r3, #11
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d10e      	bne.n	8008e96 <HAL_RCC_OscConfig+0xae>
 8008e78:	4baa      	ldr	r3, [pc, #680]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	4ba9      	ldr	r3, [pc, #676]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e7e:	2180      	movs	r1, #128	; 0x80
 8008e80:	02c9      	lsls	r1, r1, #11
 8008e82:	430a      	orrs	r2, r1
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	4ba7      	ldr	r3, [pc, #668]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4ba6      	ldr	r3, [pc, #664]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e8c:	2180      	movs	r1, #128	; 0x80
 8008e8e:	0249      	lsls	r1, r1, #9
 8008e90:	430a      	orrs	r2, r1
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	e012      	b.n	8008ebc <HAL_RCC_OscConfig+0xd4>
 8008e96:	4ba3      	ldr	r3, [pc, #652]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	4ba2      	ldr	r3, [pc, #648]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008e9c:	49a2      	ldr	r1, [pc, #648]	; (8009128 <HAL_RCC_OscConfig+0x340>)
 8008e9e:	400a      	ands	r2, r1
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	4ba0      	ldr	r3, [pc, #640]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	2380      	movs	r3, #128	; 0x80
 8008ea8:	025b      	lsls	r3, r3, #9
 8008eaa:	4013      	ands	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4b9c      	ldr	r3, [pc, #624]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	4b9b      	ldr	r3, [pc, #620]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008eb6:	499d      	ldr	r1, [pc, #628]	; (800912c <HAL_RCC_OscConfig+0x344>)
 8008eb8:	400a      	ands	r2, r1
 8008eba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d015      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec4:	f7fd faab 	bl	800641e <HAL_GetTick>
 8008ec8:	0003      	movs	r3, r0
 8008eca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ecc:	e009      	b.n	8008ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ece:	f7fd faa6 	bl	800641e <HAL_GetTick>
 8008ed2:	0002      	movs	r2, r0
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	2b64      	cmp	r3, #100	; 0x64
 8008eda:	d902      	bls.n	8008ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	f000 fb4c 	bl	800957a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ee2:	4b90      	ldr	r3, [pc, #576]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	2380      	movs	r3, #128	; 0x80
 8008ee8:	029b      	lsls	r3, r3, #10
 8008eea:	4013      	ands	r3, r2
 8008eec:	d0ef      	beq.n	8008ece <HAL_RCC_OscConfig+0xe6>
 8008eee:	e015      	b.n	8008f1c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ef0:	f7fd fa95 	bl	800641e <HAL_GetTick>
 8008ef4:	0003      	movs	r3, r0
 8008ef6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ef8:	e008      	b.n	8008f0c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008efa:	f7fd fa90 	bl	800641e <HAL_GetTick>
 8008efe:	0002      	movs	r2, r0
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b64      	cmp	r3, #100	; 0x64
 8008f06:	d901      	bls.n	8008f0c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e336      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f0c:	4b85      	ldr	r3, [pc, #532]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	029b      	lsls	r3, r3, #10
 8008f14:	4013      	ands	r3, r2
 8008f16:	d1f0      	bne.n	8008efa <HAL_RCC_OscConfig+0x112>
 8008f18:	e000      	b.n	8008f1c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2202      	movs	r2, #2
 8008f22:	4013      	ands	r3, r2
 8008f24:	d100      	bne.n	8008f28 <HAL_RCC_OscConfig+0x140>
 8008f26:	e099      	b.n	800905c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	2220      	movs	r2, #32
 8008f32:	4013      	ands	r3, r2
 8008f34:	d009      	beq.n	8008f4a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008f36:	4b7b      	ldr	r3, [pc, #492]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	4b7a      	ldr	r3, [pc, #488]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008f3c:	2120      	movs	r1, #32
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	2220      	movs	r2, #32
 8008f46:	4393      	bics	r3, r2
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	2b04      	cmp	r3, #4
 8008f4e:	d005      	beq.n	8008f5c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	2b0c      	cmp	r3, #12
 8008f54:	d13e      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x1ec>
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d13b      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008f5c:	4b71      	ldr	r3, [pc, #452]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2204      	movs	r2, #4
 8008f62:	4013      	ands	r3, r2
 8008f64:	d004      	beq.n	8008f70 <HAL_RCC_OscConfig+0x188>
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e304      	b.n	800957a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f70:	4b6c      	ldr	r3, [pc, #432]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	4a6e      	ldr	r2, [pc, #440]	; (8009130 <HAL_RCC_OscConfig+0x348>)
 8008f76:	4013      	ands	r3, r2
 8008f78:	0019      	movs	r1, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	021a      	lsls	r2, r3, #8
 8008f80:	4b68      	ldr	r3, [pc, #416]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008f82:	430a      	orrs	r2, r1
 8008f84:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008f86:	4b67      	ldr	r3, [pc, #412]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2209      	movs	r2, #9
 8008f8c:	4393      	bics	r3, r2
 8008f8e:	0019      	movs	r1, r3
 8008f90:	4b64      	ldr	r3, [pc, #400]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f94:	430a      	orrs	r2, r1
 8008f96:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f98:	f000 fc42 	bl	8009820 <HAL_RCC_GetSysClockFreq>
 8008f9c:	0001      	movs	r1, r0
 8008f9e:	4b61      	ldr	r3, [pc, #388]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	091b      	lsrs	r3, r3, #4
 8008fa4:	220f      	movs	r2, #15
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	4a62      	ldr	r2, [pc, #392]	; (8009134 <HAL_RCC_OscConfig+0x34c>)
 8008faa:	5cd3      	ldrb	r3, [r2, r3]
 8008fac:	000a      	movs	r2, r1
 8008fae:	40da      	lsrs	r2, r3
 8008fb0:	4b61      	ldr	r3, [pc, #388]	; (8009138 <HAL_RCC_OscConfig+0x350>)
 8008fb2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008fb4:	4b61      	ldr	r3, [pc, #388]	; (800913c <HAL_RCC_OscConfig+0x354>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2513      	movs	r5, #19
 8008fba:	197c      	adds	r4, r7, r5
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f7fd fa25 	bl	800640c <HAL_InitTick>
 8008fc2:	0003      	movs	r3, r0
 8008fc4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008fc6:	197b      	adds	r3, r7, r5
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d046      	beq.n	800905c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8008fce:	197b      	adds	r3, r7, r5
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	e2d2      	b.n	800957a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d027      	beq.n	800902a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008fda:	4b52      	ldr	r3, [pc, #328]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2209      	movs	r2, #9
 8008fe0:	4393      	bics	r3, r2
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	4b4f      	ldr	r3, [pc, #316]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8008fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fec:	f7fd fa17 	bl	800641e <HAL_GetTick>
 8008ff0:	0003      	movs	r3, r0
 8008ff2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ff4:	e008      	b.n	8009008 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ff6:	f7fd fa12 	bl	800641e <HAL_GetTick>
 8008ffa:	0002      	movs	r2, r0
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	2b02      	cmp	r3, #2
 8009002:	d901      	bls.n	8009008 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e2b8      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009008:	4b46      	ldr	r3, [pc, #280]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2204      	movs	r2, #4
 800900e:	4013      	ands	r3, r2
 8009010:	d0f1      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009012:	4b44      	ldr	r3, [pc, #272]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	4a46      	ldr	r2, [pc, #280]	; (8009130 <HAL_RCC_OscConfig+0x348>)
 8009018:	4013      	ands	r3, r2
 800901a:	0019      	movs	r1, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	021a      	lsls	r2, r3, #8
 8009022:	4b40      	ldr	r3, [pc, #256]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8009024:	430a      	orrs	r2, r1
 8009026:	605a      	str	r2, [r3, #4]
 8009028:	e018      	b.n	800905c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800902a:	4b3e      	ldr	r3, [pc, #248]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4b3d      	ldr	r3, [pc, #244]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8009030:	2101      	movs	r1, #1
 8009032:	438a      	bics	r2, r1
 8009034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009036:	f7fd f9f2 	bl	800641e <HAL_GetTick>
 800903a:	0003      	movs	r3, r0
 800903c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800903e:	e008      	b.n	8009052 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009040:	f7fd f9ed 	bl	800641e <HAL_GetTick>
 8009044:	0002      	movs	r2, r0
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	2b02      	cmp	r3, #2
 800904c:	d901      	bls.n	8009052 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e293      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009052:	4b34      	ldr	r3, [pc, #208]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2204      	movs	r2, #4
 8009058:	4013      	ands	r3, r2
 800905a:	d1f1      	bne.n	8009040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2210      	movs	r2, #16
 8009062:	4013      	ands	r3, r2
 8009064:	d100      	bne.n	8009068 <HAL_RCC_OscConfig+0x280>
 8009066:	e0a2      	b.n	80091ae <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d140      	bne.n	80090f0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800906e:	4b2d      	ldr	r3, [pc, #180]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	2380      	movs	r3, #128	; 0x80
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4013      	ands	r3, r2
 8009078:	d005      	beq.n	8009086 <HAL_RCC_OscConfig+0x29e>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e279      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009086:	4b27      	ldr	r3, [pc, #156]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	4a2d      	ldr	r2, [pc, #180]	; (8009140 <HAL_RCC_OscConfig+0x358>)
 800908c:	4013      	ands	r3, r2
 800908e:	0019      	movs	r1, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009094:	4b23      	ldr	r3, [pc, #140]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 8009096:	430a      	orrs	r2, r1
 8009098:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800909a:	4b22      	ldr	r3, [pc, #136]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	021b      	lsls	r3, r3, #8
 80090a0:	0a19      	lsrs	r1, r3, #8
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	061a      	lsls	r2, r3, #24
 80090a8:	4b1e      	ldr	r3, [pc, #120]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 80090aa:	430a      	orrs	r2, r1
 80090ac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	0b5b      	lsrs	r3, r3, #13
 80090b4:	3301      	adds	r3, #1
 80090b6:	2280      	movs	r2, #128	; 0x80
 80090b8:	0212      	lsls	r2, r2, #8
 80090ba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80090bc:	4b19      	ldr	r3, [pc, #100]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	091b      	lsrs	r3, r3, #4
 80090c2:	210f      	movs	r1, #15
 80090c4:	400b      	ands	r3, r1
 80090c6:	491b      	ldr	r1, [pc, #108]	; (8009134 <HAL_RCC_OscConfig+0x34c>)
 80090c8:	5ccb      	ldrb	r3, [r1, r3]
 80090ca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80090cc:	4b1a      	ldr	r3, [pc, #104]	; (8009138 <HAL_RCC_OscConfig+0x350>)
 80090ce:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80090d0:	4b1a      	ldr	r3, [pc, #104]	; (800913c <HAL_RCC_OscConfig+0x354>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2513      	movs	r5, #19
 80090d6:	197c      	adds	r4, r7, r5
 80090d8:	0018      	movs	r0, r3
 80090da:	f7fd f997 	bl	800640c <HAL_InitTick>
 80090de:	0003      	movs	r3, r0
 80090e0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80090e2:	197b      	adds	r3, r7, r5
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d061      	beq.n	80091ae <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80090ea:	197b      	adds	r3, r7, r5
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	e244      	b.n	800957a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d040      	beq.n	800917a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80090f8:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <HAL_RCC_OscConfig+0x33c>)
 80090fe:	2180      	movs	r1, #128	; 0x80
 8009100:	0049      	lsls	r1, r1, #1
 8009102:	430a      	orrs	r2, r1
 8009104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009106:	f7fd f98a 	bl	800641e <HAL_GetTick>
 800910a:	0003      	movs	r3, r0
 800910c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800910e:	e019      	b.n	8009144 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009110:	f7fd f985 	bl	800641e <HAL_GetTick>
 8009114:	0002      	movs	r2, r0
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d912      	bls.n	8009144 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e22b      	b.n	800957a <HAL_RCC_OscConfig+0x792>
 8009122:	46c0      	nop			; (mov r8, r8)
 8009124:	40021000 	.word	0x40021000
 8009128:	fffeffff 	.word	0xfffeffff
 800912c:	fffbffff 	.word	0xfffbffff
 8009130:	ffffe0ff 	.word	0xffffe0ff
 8009134:	08020b00 	.word	0x08020b00
 8009138:	20000084 	.word	0x20000084
 800913c:	20000088 	.word	0x20000088
 8009140:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009144:	4bca      	ldr	r3, [pc, #808]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	2380      	movs	r3, #128	; 0x80
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4013      	ands	r3, r2
 800914e:	d0df      	beq.n	8009110 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009150:	4bc7      	ldr	r3, [pc, #796]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	4ac7      	ldr	r2, [pc, #796]	; (8009474 <HAL_RCC_OscConfig+0x68c>)
 8009156:	4013      	ands	r3, r2
 8009158:	0019      	movs	r1, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800915e:	4bc4      	ldr	r3, [pc, #784]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009160:	430a      	orrs	r2, r1
 8009162:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009164:	4bc2      	ldr	r3, [pc, #776]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	021b      	lsls	r3, r3, #8
 800916a:	0a19      	lsrs	r1, r3, #8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	061a      	lsls	r2, r3, #24
 8009172:	4bbf      	ldr	r3, [pc, #764]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009174:	430a      	orrs	r2, r1
 8009176:	605a      	str	r2, [r3, #4]
 8009178:	e019      	b.n	80091ae <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800917a:	4bbd      	ldr	r3, [pc, #756]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4bbc      	ldr	r3, [pc, #752]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009180:	49bd      	ldr	r1, [pc, #756]	; (8009478 <HAL_RCC_OscConfig+0x690>)
 8009182:	400a      	ands	r2, r1
 8009184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009186:	f7fd f94a 	bl	800641e <HAL_GetTick>
 800918a:	0003      	movs	r3, r0
 800918c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009190:	f7fd f945 	bl	800641e <HAL_GetTick>
 8009194:	0002      	movs	r2, r0
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e1eb      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80091a2:	4bb3      	ldr	r3, [pc, #716]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	2380      	movs	r3, #128	; 0x80
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4013      	ands	r3, r2
 80091ac:	d1f0      	bne.n	8009190 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2208      	movs	r2, #8
 80091b4:	4013      	ands	r3, r2
 80091b6:	d036      	beq.n	8009226 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d019      	beq.n	80091f4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091c0:	4bab      	ldr	r3, [pc, #684]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80091c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091c4:	4baa      	ldr	r3, [pc, #680]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80091c6:	2101      	movs	r1, #1
 80091c8:	430a      	orrs	r2, r1
 80091ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091cc:	f7fd f927 	bl	800641e <HAL_GetTick>
 80091d0:	0003      	movs	r3, r0
 80091d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091d4:	e008      	b.n	80091e8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091d6:	f7fd f922 	bl	800641e <HAL_GetTick>
 80091da:	0002      	movs	r2, r0
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d901      	bls.n	80091e8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e1c8      	b.n	800957a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091e8:	4ba1      	ldr	r3, [pc, #644]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80091ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ec:	2202      	movs	r2, #2
 80091ee:	4013      	ands	r3, r2
 80091f0:	d0f1      	beq.n	80091d6 <HAL_RCC_OscConfig+0x3ee>
 80091f2:	e018      	b.n	8009226 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091f4:	4b9e      	ldr	r3, [pc, #632]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80091f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091f8:	4b9d      	ldr	r3, [pc, #628]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80091fa:	2101      	movs	r1, #1
 80091fc:	438a      	bics	r2, r1
 80091fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009200:	f7fd f90d 	bl	800641e <HAL_GetTick>
 8009204:	0003      	movs	r3, r0
 8009206:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009208:	e008      	b.n	800921c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800920a:	f7fd f908 	bl	800641e <HAL_GetTick>
 800920e:	0002      	movs	r2, r0
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d901      	bls.n	800921c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e1ae      	b.n	800957a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800921c:	4b94      	ldr	r3, [pc, #592]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 800921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009220:	2202      	movs	r2, #2
 8009222:	4013      	ands	r3, r2
 8009224:	d1f1      	bne.n	800920a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2204      	movs	r2, #4
 800922c:	4013      	ands	r3, r2
 800922e:	d100      	bne.n	8009232 <HAL_RCC_OscConfig+0x44a>
 8009230:	e0ae      	b.n	8009390 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009232:	2023      	movs	r0, #35	; 0x23
 8009234:	183b      	adds	r3, r7, r0
 8009236:	2200      	movs	r2, #0
 8009238:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800923a:	4b8d      	ldr	r3, [pc, #564]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 800923c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800923e:	2380      	movs	r3, #128	; 0x80
 8009240:	055b      	lsls	r3, r3, #21
 8009242:	4013      	ands	r3, r2
 8009244:	d109      	bne.n	800925a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009246:	4b8a      	ldr	r3, [pc, #552]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800924a:	4b89      	ldr	r3, [pc, #548]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 800924c:	2180      	movs	r1, #128	; 0x80
 800924e:	0549      	lsls	r1, r1, #21
 8009250:	430a      	orrs	r2, r1
 8009252:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8009254:	183b      	adds	r3, r7, r0
 8009256:	2201      	movs	r2, #1
 8009258:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800925a:	4b88      	ldr	r3, [pc, #544]	; (800947c <HAL_RCC_OscConfig+0x694>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	2380      	movs	r3, #128	; 0x80
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	4013      	ands	r3, r2
 8009264:	d11a      	bne.n	800929c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009266:	4b85      	ldr	r3, [pc, #532]	; (800947c <HAL_RCC_OscConfig+0x694>)
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	4b84      	ldr	r3, [pc, #528]	; (800947c <HAL_RCC_OscConfig+0x694>)
 800926c:	2180      	movs	r1, #128	; 0x80
 800926e:	0049      	lsls	r1, r1, #1
 8009270:	430a      	orrs	r2, r1
 8009272:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009274:	f7fd f8d3 	bl	800641e <HAL_GetTick>
 8009278:	0003      	movs	r3, r0
 800927a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800927c:	e008      	b.n	8009290 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800927e:	f7fd f8ce 	bl	800641e <HAL_GetTick>
 8009282:	0002      	movs	r2, r0
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b64      	cmp	r3, #100	; 0x64
 800928a:	d901      	bls.n	8009290 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e174      	b.n	800957a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009290:	4b7a      	ldr	r3, [pc, #488]	; (800947c <HAL_RCC_OscConfig+0x694>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	2380      	movs	r3, #128	; 0x80
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	4013      	ands	r3, r2
 800929a:	d0f0      	beq.n	800927e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	2380      	movs	r3, #128	; 0x80
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d107      	bne.n	80092b8 <HAL_RCC_OscConfig+0x4d0>
 80092a8:	4b71      	ldr	r3, [pc, #452]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092ac:	4b70      	ldr	r3, [pc, #448]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092ae:	2180      	movs	r1, #128	; 0x80
 80092b0:	0049      	lsls	r1, r1, #1
 80092b2:	430a      	orrs	r2, r1
 80092b4:	651a      	str	r2, [r3, #80]	; 0x50
 80092b6:	e031      	b.n	800931c <HAL_RCC_OscConfig+0x534>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10c      	bne.n	80092da <HAL_RCC_OscConfig+0x4f2>
 80092c0:	4b6b      	ldr	r3, [pc, #428]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092c4:	4b6a      	ldr	r3, [pc, #424]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092c6:	496c      	ldr	r1, [pc, #432]	; (8009478 <HAL_RCC_OscConfig+0x690>)
 80092c8:	400a      	ands	r2, r1
 80092ca:	651a      	str	r2, [r3, #80]	; 0x50
 80092cc:	4b68      	ldr	r3, [pc, #416]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092d0:	4b67      	ldr	r3, [pc, #412]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092d2:	496b      	ldr	r1, [pc, #428]	; (8009480 <HAL_RCC_OscConfig+0x698>)
 80092d4:	400a      	ands	r2, r1
 80092d6:	651a      	str	r2, [r3, #80]	; 0x50
 80092d8:	e020      	b.n	800931c <HAL_RCC_OscConfig+0x534>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	23a0      	movs	r3, #160	; 0xa0
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d10e      	bne.n	8009304 <HAL_RCC_OscConfig+0x51c>
 80092e6:	4b62      	ldr	r3, [pc, #392]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092ea:	4b61      	ldr	r3, [pc, #388]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092ec:	2180      	movs	r1, #128	; 0x80
 80092ee:	00c9      	lsls	r1, r1, #3
 80092f0:	430a      	orrs	r2, r1
 80092f2:	651a      	str	r2, [r3, #80]	; 0x50
 80092f4:	4b5e      	ldr	r3, [pc, #376]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092f8:	4b5d      	ldr	r3, [pc, #372]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80092fa:	2180      	movs	r1, #128	; 0x80
 80092fc:	0049      	lsls	r1, r1, #1
 80092fe:	430a      	orrs	r2, r1
 8009300:	651a      	str	r2, [r3, #80]	; 0x50
 8009302:	e00b      	b.n	800931c <HAL_RCC_OscConfig+0x534>
 8009304:	4b5a      	ldr	r3, [pc, #360]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009308:	4b59      	ldr	r3, [pc, #356]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 800930a:	495b      	ldr	r1, [pc, #364]	; (8009478 <HAL_RCC_OscConfig+0x690>)
 800930c:	400a      	ands	r2, r1
 800930e:	651a      	str	r2, [r3, #80]	; 0x50
 8009310:	4b57      	ldr	r3, [pc, #348]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009314:	4b56      	ldr	r3, [pc, #344]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009316:	495a      	ldr	r1, [pc, #360]	; (8009480 <HAL_RCC_OscConfig+0x698>)
 8009318:	400a      	ands	r2, r1
 800931a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d015      	beq.n	8009350 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009324:	f7fd f87b 	bl	800641e <HAL_GetTick>
 8009328:	0003      	movs	r3, r0
 800932a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800932c:	e009      	b.n	8009342 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800932e:	f7fd f876 	bl	800641e <HAL_GetTick>
 8009332:	0002      	movs	r2, r0
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	4a52      	ldr	r2, [pc, #328]	; (8009484 <HAL_RCC_OscConfig+0x69c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e11b      	b.n	800957a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009342:	4b4b      	ldr	r3, [pc, #300]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009346:	2380      	movs	r3, #128	; 0x80
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4013      	ands	r3, r2
 800934c:	d0ef      	beq.n	800932e <HAL_RCC_OscConfig+0x546>
 800934e:	e014      	b.n	800937a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009350:	f7fd f865 	bl	800641e <HAL_GetTick>
 8009354:	0003      	movs	r3, r0
 8009356:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009358:	e009      	b.n	800936e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800935a:	f7fd f860 	bl	800641e <HAL_GetTick>
 800935e:	0002      	movs	r2, r0
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	4a47      	ldr	r2, [pc, #284]	; (8009484 <HAL_RCC_OscConfig+0x69c>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e105      	b.n	800957a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800936e:	4b40      	ldr	r3, [pc, #256]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009372:	2380      	movs	r3, #128	; 0x80
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4013      	ands	r3, r2
 8009378:	d1ef      	bne.n	800935a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800937a:	2323      	movs	r3, #35	; 0x23
 800937c:	18fb      	adds	r3, r7, r3
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d105      	bne.n	8009390 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009384:	4b3a      	ldr	r3, [pc, #232]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009388:	4b39      	ldr	r3, [pc, #228]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 800938a:	493f      	ldr	r1, [pc, #252]	; (8009488 <HAL_RCC_OscConfig+0x6a0>)
 800938c:	400a      	ands	r2, r1
 800938e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2220      	movs	r2, #32
 8009396:	4013      	ands	r3, r2
 8009398:	d049      	beq.n	800942e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d026      	beq.n	80093f0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80093a2:	4b33      	ldr	r3, [pc, #204]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	4b32      	ldr	r3, [pc, #200]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80093a8:	2101      	movs	r1, #1
 80093aa:	430a      	orrs	r2, r1
 80093ac:	609a      	str	r2, [r3, #8]
 80093ae:	4b30      	ldr	r3, [pc, #192]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80093b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b2:	4b2f      	ldr	r3, [pc, #188]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80093b4:	2101      	movs	r1, #1
 80093b6:	430a      	orrs	r2, r1
 80093b8:	635a      	str	r2, [r3, #52]	; 0x34
 80093ba:	4b34      	ldr	r3, [pc, #208]	; (800948c <HAL_RCC_OscConfig+0x6a4>)
 80093bc:	6a1a      	ldr	r2, [r3, #32]
 80093be:	4b33      	ldr	r3, [pc, #204]	; (800948c <HAL_RCC_OscConfig+0x6a4>)
 80093c0:	2180      	movs	r1, #128	; 0x80
 80093c2:	0189      	lsls	r1, r1, #6
 80093c4:	430a      	orrs	r2, r1
 80093c6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093c8:	f7fd f829 	bl	800641e <HAL_GetTick>
 80093cc:	0003      	movs	r3, r0
 80093ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093d0:	e008      	b.n	80093e4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093d2:	f7fd f824 	bl	800641e <HAL_GetTick>
 80093d6:	0002      	movs	r2, r0
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d901      	bls.n	80093e4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e0ca      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093e4:	4b22      	ldr	r3, [pc, #136]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	2202      	movs	r2, #2
 80093ea:	4013      	ands	r3, r2
 80093ec:	d0f1      	beq.n	80093d2 <HAL_RCC_OscConfig+0x5ea>
 80093ee:	e01e      	b.n	800942e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80093f0:	4b1f      	ldr	r3, [pc, #124]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	4b1e      	ldr	r3, [pc, #120]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 80093f6:	2101      	movs	r1, #1
 80093f8:	438a      	bics	r2, r1
 80093fa:	609a      	str	r2, [r3, #8]
 80093fc:	4b23      	ldr	r3, [pc, #140]	; (800948c <HAL_RCC_OscConfig+0x6a4>)
 80093fe:	6a1a      	ldr	r2, [r3, #32]
 8009400:	4b22      	ldr	r3, [pc, #136]	; (800948c <HAL_RCC_OscConfig+0x6a4>)
 8009402:	4923      	ldr	r1, [pc, #140]	; (8009490 <HAL_RCC_OscConfig+0x6a8>)
 8009404:	400a      	ands	r2, r1
 8009406:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009408:	f7fd f809 	bl	800641e <HAL_GetTick>
 800940c:	0003      	movs	r3, r0
 800940e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009410:	e008      	b.n	8009424 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009412:	f7fd f804 	bl	800641e <HAL_GetTick>
 8009416:	0002      	movs	r2, r0
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	2b02      	cmp	r3, #2
 800941e:	d901      	bls.n	8009424 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e0aa      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009424:	4b12      	ldr	r3, [pc, #72]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2202      	movs	r2, #2
 800942a:	4013      	ands	r3, r2
 800942c:	d1f1      	bne.n	8009412 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009432:	2b00      	cmp	r3, #0
 8009434:	d100      	bne.n	8009438 <HAL_RCC_OscConfig+0x650>
 8009436:	e09f      	b.n	8009578 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	2b0c      	cmp	r3, #12
 800943c:	d100      	bne.n	8009440 <HAL_RCC_OscConfig+0x658>
 800943e:	e078      	b.n	8009532 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009444:	2b02      	cmp	r3, #2
 8009446:	d159      	bne.n	80094fc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009448:	4b09      	ldr	r3, [pc, #36]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	4b08      	ldr	r3, [pc, #32]	; (8009470 <HAL_RCC_OscConfig+0x688>)
 800944e:	4911      	ldr	r1, [pc, #68]	; (8009494 <HAL_RCC_OscConfig+0x6ac>)
 8009450:	400a      	ands	r2, r1
 8009452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009454:	f7fc ffe3 	bl	800641e <HAL_GetTick>
 8009458:	0003      	movs	r3, r0
 800945a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800945c:	e01c      	b.n	8009498 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800945e:	f7fc ffde 	bl	800641e <HAL_GetTick>
 8009462:	0002      	movs	r2, r0
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d915      	bls.n	8009498 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e084      	b.n	800957a <HAL_RCC_OscConfig+0x792>
 8009470:	40021000 	.word	0x40021000
 8009474:	ffff1fff 	.word	0xffff1fff
 8009478:	fffffeff 	.word	0xfffffeff
 800947c:	40007000 	.word	0x40007000
 8009480:	fffffbff 	.word	0xfffffbff
 8009484:	00001388 	.word	0x00001388
 8009488:	efffffff 	.word	0xefffffff
 800948c:	40010000 	.word	0x40010000
 8009490:	ffffdfff 	.word	0xffffdfff
 8009494:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009498:	4b3a      	ldr	r3, [pc, #232]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	2380      	movs	r3, #128	; 0x80
 800949e:	049b      	lsls	r3, r3, #18
 80094a0:	4013      	ands	r3, r2
 80094a2:	d1dc      	bne.n	800945e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094a4:	4b37      	ldr	r3, [pc, #220]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	4a37      	ldr	r2, [pc, #220]	; (8009588 <HAL_RCC_OscConfig+0x7a0>)
 80094aa:	4013      	ands	r3, r2
 80094ac:	0019      	movs	r1, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094bc:	431a      	orrs	r2, r3
 80094be:	4b31      	ldr	r3, [pc, #196]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 80094c0:	430a      	orrs	r2, r1
 80094c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094c4:	4b2f      	ldr	r3, [pc, #188]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	4b2e      	ldr	r3, [pc, #184]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 80094ca:	2180      	movs	r1, #128	; 0x80
 80094cc:	0449      	lsls	r1, r1, #17
 80094ce:	430a      	orrs	r2, r1
 80094d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094d2:	f7fc ffa4 	bl	800641e <HAL_GetTick>
 80094d6:	0003      	movs	r3, r0
 80094d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80094da:	e008      	b.n	80094ee <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094dc:	f7fc ff9f 	bl	800641e <HAL_GetTick>
 80094e0:	0002      	movs	r2, r0
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d901      	bls.n	80094ee <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e045      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80094ee:	4b25      	ldr	r3, [pc, #148]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	2380      	movs	r3, #128	; 0x80
 80094f4:	049b      	lsls	r3, r3, #18
 80094f6:	4013      	ands	r3, r2
 80094f8:	d0f0      	beq.n	80094dc <HAL_RCC_OscConfig+0x6f4>
 80094fa:	e03d      	b.n	8009578 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094fc:	4b21      	ldr	r3, [pc, #132]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	4b20      	ldr	r3, [pc, #128]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 8009502:	4922      	ldr	r1, [pc, #136]	; (800958c <HAL_RCC_OscConfig+0x7a4>)
 8009504:	400a      	ands	r2, r1
 8009506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009508:	f7fc ff89 	bl	800641e <HAL_GetTick>
 800950c:	0003      	movs	r3, r0
 800950e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009510:	e008      	b.n	8009524 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009512:	f7fc ff84 	bl	800641e <HAL_GetTick>
 8009516:	0002      	movs	r2, r0
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	2b02      	cmp	r3, #2
 800951e:	d901      	bls.n	8009524 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e02a      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009524:	4b17      	ldr	r3, [pc, #92]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	2380      	movs	r3, #128	; 0x80
 800952a:	049b      	lsls	r3, r3, #18
 800952c:	4013      	ands	r3, r2
 800952e:	d1f0      	bne.n	8009512 <HAL_RCC_OscConfig+0x72a>
 8009530:	e022      	b.n	8009578 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009536:	2b01      	cmp	r3, #1
 8009538:	d101      	bne.n	800953e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e01d      	b.n	800957a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800953e:	4b11      	ldr	r3, [pc, #68]	; (8009584 <HAL_RCC_OscConfig+0x79c>)
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	2380      	movs	r3, #128	; 0x80
 8009548:	025b      	lsls	r3, r3, #9
 800954a:	401a      	ands	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	429a      	cmp	r2, r3
 8009552:	d10f      	bne.n	8009574 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	23f0      	movs	r3, #240	; 0xf0
 8009558:	039b      	lsls	r3, r3, #14
 800955a:	401a      	ands	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009560:	429a      	cmp	r2, r3
 8009562:	d107      	bne.n	8009574 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	23c0      	movs	r3, #192	; 0xc0
 8009568:	041b      	lsls	r3, r3, #16
 800956a:	401a      	ands	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009570:	429a      	cmp	r2, r3
 8009572:	d001      	beq.n	8009578 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e000      	b.n	800957a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	0018      	movs	r0, r3
 800957c:	46bd      	mov	sp, r7
 800957e:	b00a      	add	sp, #40	; 0x28
 8009580:	bdb0      	pop	{r4, r5, r7, pc}
 8009582:	46c0      	nop			; (mov r8, r8)
 8009584:	40021000 	.word	0x40021000
 8009588:	ff02ffff 	.word	0xff02ffff
 800958c:	feffffff 	.word	0xfeffffff

08009590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009590:	b5b0      	push	{r4, r5, r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e128      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095a4:	4b96      	ldr	r3, [pc, #600]	; (8009800 <HAL_RCC_ClockConfig+0x270>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2201      	movs	r2, #1
 80095aa:	4013      	ands	r3, r2
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d91e      	bls.n	80095f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095b2:	4b93      	ldr	r3, [pc, #588]	; (8009800 <HAL_RCC_ClockConfig+0x270>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2201      	movs	r2, #1
 80095b8:	4393      	bics	r3, r2
 80095ba:	0019      	movs	r1, r3
 80095bc:	4b90      	ldr	r3, [pc, #576]	; (8009800 <HAL_RCC_ClockConfig+0x270>)
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	430a      	orrs	r2, r1
 80095c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80095c4:	f7fc ff2b 	bl	800641e <HAL_GetTick>
 80095c8:	0003      	movs	r3, r0
 80095ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095cc:	e009      	b.n	80095e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ce:	f7fc ff26 	bl	800641e <HAL_GetTick>
 80095d2:	0002      	movs	r2, r0
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	4a8a      	ldr	r2, [pc, #552]	; (8009804 <HAL_RCC_ClockConfig+0x274>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d901      	bls.n	80095e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e109      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095e2:	4b87      	ldr	r3, [pc, #540]	; (8009800 <HAL_RCC_ClockConfig+0x270>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2201      	movs	r2, #1
 80095e8:	4013      	ands	r3, r2
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d1ee      	bne.n	80095ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2202      	movs	r2, #2
 80095f6:	4013      	ands	r3, r2
 80095f8:	d009      	beq.n	800960e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095fa:	4b83      	ldr	r3, [pc, #524]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	22f0      	movs	r2, #240	; 0xf0
 8009600:	4393      	bics	r3, r2
 8009602:	0019      	movs	r1, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	4b7f      	ldr	r3, [pc, #508]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 800960a:	430a      	orrs	r2, r1
 800960c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2201      	movs	r2, #1
 8009614:	4013      	ands	r3, r2
 8009616:	d100      	bne.n	800961a <HAL_RCC_ClockConfig+0x8a>
 8009618:	e089      	b.n	800972e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d107      	bne.n	8009632 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009622:	4b79      	ldr	r3, [pc, #484]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	2380      	movs	r3, #128	; 0x80
 8009628:	029b      	lsls	r3, r3, #10
 800962a:	4013      	ands	r3, r2
 800962c:	d120      	bne.n	8009670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e0e1      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	2b03      	cmp	r3, #3
 8009638:	d107      	bne.n	800964a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800963a:	4b73      	ldr	r3, [pc, #460]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	2380      	movs	r3, #128	; 0x80
 8009640:	049b      	lsls	r3, r3, #18
 8009642:	4013      	ands	r3, r2
 8009644:	d114      	bne.n	8009670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e0d5      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d106      	bne.n	8009660 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009652:	4b6d      	ldr	r3, [pc, #436]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2204      	movs	r2, #4
 8009658:	4013      	ands	r3, r2
 800965a:	d109      	bne.n	8009670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e0ca      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009660:	4b69      	ldr	r3, [pc, #420]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	2380      	movs	r3, #128	; 0x80
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4013      	ands	r3, r2
 800966a:	d101      	bne.n	8009670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e0c2      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009670:	4b65      	ldr	r3, [pc, #404]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	2203      	movs	r2, #3
 8009676:	4393      	bics	r3, r2
 8009678:	0019      	movs	r1, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	4b62      	ldr	r3, [pc, #392]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 8009680:	430a      	orrs	r2, r1
 8009682:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009684:	f7fc fecb 	bl	800641e <HAL_GetTick>
 8009688:	0003      	movs	r3, r0
 800968a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d111      	bne.n	80096b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009694:	e009      	b.n	80096aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009696:	f7fc fec2 	bl	800641e <HAL_GetTick>
 800969a:	0002      	movs	r2, r0
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	4a58      	ldr	r2, [pc, #352]	; (8009804 <HAL_RCC_ClockConfig+0x274>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d901      	bls.n	80096aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e0a5      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80096aa:	4b57      	ldr	r3, [pc, #348]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	220c      	movs	r2, #12
 80096b0:	4013      	ands	r3, r2
 80096b2:	2b08      	cmp	r3, #8
 80096b4:	d1ef      	bne.n	8009696 <HAL_RCC_ClockConfig+0x106>
 80096b6:	e03a      	b.n	800972e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d111      	bne.n	80096e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80096c0:	e009      	b.n	80096d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096c2:	f7fc feac 	bl	800641e <HAL_GetTick>
 80096c6:	0002      	movs	r2, r0
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	4a4d      	ldr	r2, [pc, #308]	; (8009804 <HAL_RCC_ClockConfig+0x274>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d901      	bls.n	80096d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e08f      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80096d6:	4b4c      	ldr	r3, [pc, #304]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	220c      	movs	r2, #12
 80096dc:	4013      	ands	r3, r2
 80096de:	2b0c      	cmp	r3, #12
 80096e0:	d1ef      	bne.n	80096c2 <HAL_RCC_ClockConfig+0x132>
 80096e2:	e024      	b.n	800972e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d11b      	bne.n	8009724 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80096ec:	e009      	b.n	8009702 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096ee:	f7fc fe96 	bl	800641e <HAL_GetTick>
 80096f2:	0002      	movs	r2, r0
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	4a42      	ldr	r2, [pc, #264]	; (8009804 <HAL_RCC_ClockConfig+0x274>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d901      	bls.n	8009702 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e079      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009702:	4b41      	ldr	r3, [pc, #260]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	220c      	movs	r2, #12
 8009708:	4013      	ands	r3, r2
 800970a:	2b04      	cmp	r3, #4
 800970c:	d1ef      	bne.n	80096ee <HAL_RCC_ClockConfig+0x15e>
 800970e:	e00e      	b.n	800972e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009710:	f7fc fe85 	bl	800641e <HAL_GetTick>
 8009714:	0002      	movs	r2, r0
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	4a3a      	ldr	r2, [pc, #232]	; (8009804 <HAL_RCC_ClockConfig+0x274>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d901      	bls.n	8009724 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e068      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009724:	4b38      	ldr	r3, [pc, #224]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	220c      	movs	r2, #12
 800972a:	4013      	ands	r3, r2
 800972c:	d1f0      	bne.n	8009710 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800972e:	4b34      	ldr	r3, [pc, #208]	; (8009800 <HAL_RCC_ClockConfig+0x270>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2201      	movs	r2, #1
 8009734:	4013      	ands	r3, r2
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	429a      	cmp	r2, r3
 800973a:	d21e      	bcs.n	800977a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800973c:	4b30      	ldr	r3, [pc, #192]	; (8009800 <HAL_RCC_ClockConfig+0x270>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2201      	movs	r2, #1
 8009742:	4393      	bics	r3, r2
 8009744:	0019      	movs	r1, r3
 8009746:	4b2e      	ldr	r3, [pc, #184]	; (8009800 <HAL_RCC_ClockConfig+0x270>)
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800974e:	f7fc fe66 	bl	800641e <HAL_GetTick>
 8009752:	0003      	movs	r3, r0
 8009754:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009756:	e009      	b.n	800976c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009758:	f7fc fe61 	bl	800641e <HAL_GetTick>
 800975c:	0002      	movs	r2, r0
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	4a28      	ldr	r2, [pc, #160]	; (8009804 <HAL_RCC_ClockConfig+0x274>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d901      	bls.n	800976c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e044      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800976c:	4b24      	ldr	r3, [pc, #144]	; (8009800 <HAL_RCC_ClockConfig+0x270>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2201      	movs	r2, #1
 8009772:	4013      	ands	r3, r2
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d1ee      	bne.n	8009758 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2204      	movs	r2, #4
 8009780:	4013      	ands	r3, r2
 8009782:	d009      	beq.n	8009798 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009784:	4b20      	ldr	r3, [pc, #128]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	4a20      	ldr	r2, [pc, #128]	; (800980c <HAL_RCC_ClockConfig+0x27c>)
 800978a:	4013      	ands	r3, r2
 800978c:	0019      	movs	r1, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	4b1d      	ldr	r3, [pc, #116]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 8009794:	430a      	orrs	r2, r1
 8009796:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2208      	movs	r2, #8
 800979e:	4013      	ands	r3, r2
 80097a0:	d00a      	beq.n	80097b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80097a2:	4b19      	ldr	r3, [pc, #100]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	4a1a      	ldr	r2, [pc, #104]	; (8009810 <HAL_RCC_ClockConfig+0x280>)
 80097a8:	4013      	ands	r3, r2
 80097aa:	0019      	movs	r1, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	00da      	lsls	r2, r3, #3
 80097b2:	4b15      	ldr	r3, [pc, #84]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 80097b4:	430a      	orrs	r2, r1
 80097b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097b8:	f000 f832 	bl	8009820 <HAL_RCC_GetSysClockFreq>
 80097bc:	0001      	movs	r1, r0
 80097be:	4b12      	ldr	r3, [pc, #72]	; (8009808 <HAL_RCC_ClockConfig+0x278>)
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	091b      	lsrs	r3, r3, #4
 80097c4:	220f      	movs	r2, #15
 80097c6:	4013      	ands	r3, r2
 80097c8:	4a12      	ldr	r2, [pc, #72]	; (8009814 <HAL_RCC_ClockConfig+0x284>)
 80097ca:	5cd3      	ldrb	r3, [r2, r3]
 80097cc:	000a      	movs	r2, r1
 80097ce:	40da      	lsrs	r2, r3
 80097d0:	4b11      	ldr	r3, [pc, #68]	; (8009818 <HAL_RCC_ClockConfig+0x288>)
 80097d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <HAL_RCC_ClockConfig+0x28c>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	250b      	movs	r5, #11
 80097da:	197c      	adds	r4, r7, r5
 80097dc:	0018      	movs	r0, r3
 80097de:	f7fc fe15 	bl	800640c <HAL_InitTick>
 80097e2:	0003      	movs	r3, r0
 80097e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80097e6:	197b      	adds	r3, r7, r5
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80097ee:	197b      	adds	r3, r7, r5
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	e000      	b.n	80097f6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	0018      	movs	r0, r3
 80097f8:	46bd      	mov	sp, r7
 80097fa:	b004      	add	sp, #16
 80097fc:	bdb0      	pop	{r4, r5, r7, pc}
 80097fe:	46c0      	nop			; (mov r8, r8)
 8009800:	40022000 	.word	0x40022000
 8009804:	00001388 	.word	0x00001388
 8009808:	40021000 	.word	0x40021000
 800980c:	fffff8ff 	.word	0xfffff8ff
 8009810:	ffffc7ff 	.word	0xffffc7ff
 8009814:	08020b00 	.word	0x08020b00
 8009818:	20000084 	.word	0x20000084
 800981c:	20000088 	.word	0x20000088

08009820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009820:	b5b0      	push	{r4, r5, r7, lr}
 8009822:	b08e      	sub	sp, #56	; 0x38
 8009824:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8009826:	4b4c      	ldr	r3, [pc, #304]	; (8009958 <HAL_RCC_GetSysClockFreq+0x138>)
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800982c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800982e:	230c      	movs	r3, #12
 8009830:	4013      	ands	r3, r2
 8009832:	2b0c      	cmp	r3, #12
 8009834:	d014      	beq.n	8009860 <HAL_RCC_GetSysClockFreq+0x40>
 8009836:	d900      	bls.n	800983a <HAL_RCC_GetSysClockFreq+0x1a>
 8009838:	e07b      	b.n	8009932 <HAL_RCC_GetSysClockFreq+0x112>
 800983a:	2b04      	cmp	r3, #4
 800983c:	d002      	beq.n	8009844 <HAL_RCC_GetSysClockFreq+0x24>
 800983e:	2b08      	cmp	r3, #8
 8009840:	d00b      	beq.n	800985a <HAL_RCC_GetSysClockFreq+0x3a>
 8009842:	e076      	b.n	8009932 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009844:	4b44      	ldr	r3, [pc, #272]	; (8009958 <HAL_RCC_GetSysClockFreq+0x138>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2210      	movs	r2, #16
 800984a:	4013      	ands	r3, r2
 800984c:	d002      	beq.n	8009854 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800984e:	4b43      	ldr	r3, [pc, #268]	; (800995c <HAL_RCC_GetSysClockFreq+0x13c>)
 8009850:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8009852:	e07c      	b.n	800994e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8009854:	4b42      	ldr	r3, [pc, #264]	; (8009960 <HAL_RCC_GetSysClockFreq+0x140>)
 8009856:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009858:	e079      	b.n	800994e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800985a:	4b42      	ldr	r3, [pc, #264]	; (8009964 <HAL_RCC_GetSysClockFreq+0x144>)
 800985c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800985e:	e076      	b.n	800994e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009862:	0c9a      	lsrs	r2, r3, #18
 8009864:	230f      	movs	r3, #15
 8009866:	401a      	ands	r2, r3
 8009868:	4b3f      	ldr	r3, [pc, #252]	; (8009968 <HAL_RCC_GetSysClockFreq+0x148>)
 800986a:	5c9b      	ldrb	r3, [r3, r2]
 800986c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	0d9a      	lsrs	r2, r3, #22
 8009872:	2303      	movs	r3, #3
 8009874:	4013      	ands	r3, r2
 8009876:	3301      	adds	r3, #1
 8009878:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800987a:	4b37      	ldr	r3, [pc, #220]	; (8009958 <HAL_RCC_GetSysClockFreq+0x138>)
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	2380      	movs	r3, #128	; 0x80
 8009880:	025b      	lsls	r3, r3, #9
 8009882:	4013      	ands	r3, r2
 8009884:	d01a      	beq.n	80098bc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	61bb      	str	r3, [r7, #24]
 800988a:	2300      	movs	r3, #0
 800988c:	61fb      	str	r3, [r7, #28]
 800988e:	4a35      	ldr	r2, [pc, #212]	; (8009964 <HAL_RCC_GetSysClockFreq+0x144>)
 8009890:	2300      	movs	r3, #0
 8009892:	69b8      	ldr	r0, [r7, #24]
 8009894:	69f9      	ldr	r1, [r7, #28]
 8009896:	f7f6 fe13 	bl	80004c0 <__aeabi_lmul>
 800989a:	0002      	movs	r2, r0
 800989c:	000b      	movs	r3, r1
 800989e:	0010      	movs	r0, r2
 80098a0:	0019      	movs	r1, r3
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	613b      	str	r3, [r7, #16]
 80098a6:	2300      	movs	r3, #0
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f7f6 fde7 	bl	8000480 <__aeabi_uldivmod>
 80098b2:	0002      	movs	r2, r0
 80098b4:	000b      	movs	r3, r1
 80098b6:	0013      	movs	r3, r2
 80098b8:	637b      	str	r3, [r7, #52]	; 0x34
 80098ba:	e037      	b.n	800992c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80098bc:	4b26      	ldr	r3, [pc, #152]	; (8009958 <HAL_RCC_GetSysClockFreq+0x138>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2210      	movs	r2, #16
 80098c2:	4013      	ands	r3, r2
 80098c4:	d01a      	beq.n	80098fc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	60bb      	str	r3, [r7, #8]
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	4a23      	ldr	r2, [pc, #140]	; (800995c <HAL_RCC_GetSysClockFreq+0x13c>)
 80098d0:	2300      	movs	r3, #0
 80098d2:	68b8      	ldr	r0, [r7, #8]
 80098d4:	68f9      	ldr	r1, [r7, #12]
 80098d6:	f7f6 fdf3 	bl	80004c0 <__aeabi_lmul>
 80098da:	0002      	movs	r2, r0
 80098dc:	000b      	movs	r3, r1
 80098de:	0010      	movs	r0, r2
 80098e0:	0019      	movs	r1, r3
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	603b      	str	r3, [r7, #0]
 80098e6:	2300      	movs	r3, #0
 80098e8:	607b      	str	r3, [r7, #4]
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f7f6 fdc7 	bl	8000480 <__aeabi_uldivmod>
 80098f2:	0002      	movs	r2, r0
 80098f4:	000b      	movs	r3, r1
 80098f6:	0013      	movs	r3, r2
 80098f8:	637b      	str	r3, [r7, #52]	; 0x34
 80098fa:	e017      	b.n	800992c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	0018      	movs	r0, r3
 8009900:	2300      	movs	r3, #0
 8009902:	0019      	movs	r1, r3
 8009904:	4a16      	ldr	r2, [pc, #88]	; (8009960 <HAL_RCC_GetSysClockFreq+0x140>)
 8009906:	2300      	movs	r3, #0
 8009908:	f7f6 fdda 	bl	80004c0 <__aeabi_lmul>
 800990c:	0002      	movs	r2, r0
 800990e:	000b      	movs	r3, r1
 8009910:	0010      	movs	r0, r2
 8009912:	0019      	movs	r1, r3
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	001c      	movs	r4, r3
 8009918:	2300      	movs	r3, #0
 800991a:	001d      	movs	r5, r3
 800991c:	0022      	movs	r2, r4
 800991e:	002b      	movs	r3, r5
 8009920:	f7f6 fdae 	bl	8000480 <__aeabi_uldivmod>
 8009924:	0002      	movs	r2, r0
 8009926:	000b      	movs	r3, r1
 8009928:	0013      	movs	r3, r2
 800992a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800992c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009930:	e00d      	b.n	800994e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8009932:	4b09      	ldr	r3, [pc, #36]	; (8009958 <HAL_RCC_GetSysClockFreq+0x138>)
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	0b5b      	lsrs	r3, r3, #13
 8009938:	2207      	movs	r2, #7
 800993a:	4013      	ands	r3, r2
 800993c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	3301      	adds	r3, #1
 8009942:	2280      	movs	r2, #128	; 0x80
 8009944:	0212      	lsls	r2, r2, #8
 8009946:	409a      	lsls	r2, r3
 8009948:	0013      	movs	r3, r2
 800994a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800994c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8009950:	0018      	movs	r0, r3
 8009952:	46bd      	mov	sp, r7
 8009954:	b00e      	add	sp, #56	; 0x38
 8009956:	bdb0      	pop	{r4, r5, r7, pc}
 8009958:	40021000 	.word	0x40021000
 800995c:	003d0900 	.word	0x003d0900
 8009960:	00f42400 	.word	0x00f42400
 8009964:	007a1200 	.word	0x007a1200
 8009968:	08020b18 	.word	0x08020b18

0800996c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009970:	4b02      	ldr	r3, [pc, #8]	; (800997c <HAL_RCC_GetHCLKFreq+0x10>)
 8009972:	681b      	ldr	r3, [r3, #0]
}
 8009974:	0018      	movs	r0, r3
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	20000084 	.word	0x20000084

08009980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009984:	f7ff fff2 	bl	800996c <HAL_RCC_GetHCLKFreq>
 8009988:	0001      	movs	r1, r0
 800998a:	4b06      	ldr	r3, [pc, #24]	; (80099a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	0a1b      	lsrs	r3, r3, #8
 8009990:	2207      	movs	r2, #7
 8009992:	4013      	ands	r3, r2
 8009994:	4a04      	ldr	r2, [pc, #16]	; (80099a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009996:	5cd3      	ldrb	r3, [r2, r3]
 8009998:	40d9      	lsrs	r1, r3
 800999a:	000b      	movs	r3, r1
}
 800999c:	0018      	movs	r0, r3
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	46c0      	nop			; (mov r8, r8)
 80099a4:	40021000 	.word	0x40021000
 80099a8:	08020b10 	.word	0x08020b10

080099ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80099b0:	f7ff ffdc 	bl	800996c <HAL_RCC_GetHCLKFreq>
 80099b4:	0001      	movs	r1, r0
 80099b6:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	0adb      	lsrs	r3, r3, #11
 80099bc:	2207      	movs	r2, #7
 80099be:	4013      	ands	r3, r2
 80099c0:	4a04      	ldr	r2, [pc, #16]	; (80099d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80099c2:	5cd3      	ldrb	r3, [r2, r3]
 80099c4:	40d9      	lsrs	r1, r3
 80099c6:	000b      	movs	r3, r1
}
 80099c8:	0018      	movs	r0, r3
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	46c0      	nop			; (mov r8, r8)
 80099d0:	40021000 	.word	0x40021000
 80099d4:	08020b10 	.word	0x08020b10

080099d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80099e0:	2017      	movs	r0, #23
 80099e2:	183b      	adds	r3, r7, r0
 80099e4:	2200      	movs	r2, #0
 80099e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2220      	movs	r2, #32
 80099ee:	4013      	ands	r3, r2
 80099f0:	d100      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80099f2:	e0c2      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099f4:	4b98      	ldr	r3, [pc, #608]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099f8:	2380      	movs	r3, #128	; 0x80
 80099fa:	055b      	lsls	r3, r3, #21
 80099fc:	4013      	ands	r3, r2
 80099fe:	d109      	bne.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a00:	4b95      	ldr	r3, [pc, #596]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a04:	4b94      	ldr	r3, [pc, #592]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a06:	2180      	movs	r1, #128	; 0x80
 8009a08:	0549      	lsls	r1, r1, #21
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8009a0e:	183b      	adds	r3, r7, r0
 8009a10:	2201      	movs	r2, #1
 8009a12:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a14:	4b91      	ldr	r3, [pc, #580]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	2380      	movs	r3, #128	; 0x80
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	d11a      	bne.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a20:	4b8e      	ldr	r3, [pc, #568]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	4b8d      	ldr	r3, [pc, #564]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009a26:	2180      	movs	r1, #128	; 0x80
 8009a28:	0049      	lsls	r1, r1, #1
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a2e:	f7fc fcf6 	bl	800641e <HAL_GetTick>
 8009a32:	0003      	movs	r3, r0
 8009a34:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a36:	e008      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a38:	f7fc fcf1 	bl	800641e <HAL_GetTick>
 8009a3c:	0002      	movs	r2, r0
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b64      	cmp	r3, #100	; 0x64
 8009a44:	d901      	bls.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e102      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a4a:	4b84      	ldr	r3, [pc, #528]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	2380      	movs	r3, #128	; 0x80
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	4013      	ands	r3, r2
 8009a54:	d0f0      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8009a56:	4b80      	ldr	r3, [pc, #512]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	23c0      	movs	r3, #192	; 0xc0
 8009a5c:	039b      	lsls	r3, r3, #14
 8009a5e:	4013      	ands	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	23c0      	movs	r3, #192	; 0xc0
 8009a68:	039b      	lsls	r3, r3, #14
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d013      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	23c0      	movs	r3, #192	; 0xc0
 8009a78:	029b      	lsls	r3, r3, #10
 8009a7a:	401a      	ands	r2, r3
 8009a7c:	23c0      	movs	r3, #192	; 0xc0
 8009a7e:	029b      	lsls	r3, r3, #10
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d10a      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a84:	4b74      	ldr	r3, [pc, #464]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	2380      	movs	r3, #128	; 0x80
 8009a8a:	029b      	lsls	r3, r3, #10
 8009a8c:	401a      	ands	r2, r3
 8009a8e:	2380      	movs	r3, #128	; 0x80
 8009a90:	029b      	lsls	r3, r3, #10
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d101      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e0da      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8009a9a:	4b6f      	ldr	r3, [pc, #444]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a9e:	23c0      	movs	r3, #192	; 0xc0
 8009aa0:	029b      	lsls	r3, r3, #10
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d03b      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	23c0      	movs	r3, #192	; 0xc0
 8009ab2:	029b      	lsls	r3, r3, #10
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d033      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	d02e      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8009ac6:	4b64      	ldr	r3, [pc, #400]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aca:	4a65      	ldr	r2, [pc, #404]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009ad0:	4b61      	ldr	r3, [pc, #388]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ad4:	4b60      	ldr	r3, [pc, #384]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ad6:	2180      	movs	r1, #128	; 0x80
 8009ad8:	0309      	lsls	r1, r1, #12
 8009ada:	430a      	orrs	r2, r1
 8009adc:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009ade:	4b5e      	ldr	r3, [pc, #376]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ae2:	4b5d      	ldr	r3, [pc, #372]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ae4:	495f      	ldr	r1, [pc, #380]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8009ae6:	400a      	ands	r2, r1
 8009ae8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009aea:	4b5b      	ldr	r3, [pc, #364]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	2380      	movs	r3, #128	; 0x80
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	4013      	ands	r3, r2
 8009af8:	d014      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009afa:	f7fc fc90 	bl	800641e <HAL_GetTick>
 8009afe:	0003      	movs	r3, r0
 8009b00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b02:	e009      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b04:	f7fc fc8b 	bl	800641e <HAL_GetTick>
 8009b08:	0002      	movs	r2, r0
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	4a56      	ldr	r2, [pc, #344]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d901      	bls.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	e09b      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b18:	4b4f      	ldr	r3, [pc, #316]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b1c:	2380      	movs	r3, #128	; 0x80
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4013      	ands	r3, r2
 8009b22:	d0ef      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	23c0      	movs	r3, #192	; 0xc0
 8009b2a:	029b      	lsls	r3, r3, #10
 8009b2c:	401a      	ands	r2, r3
 8009b2e:	23c0      	movs	r3, #192	; 0xc0
 8009b30:	029b      	lsls	r3, r3, #10
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d10c      	bne.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8009b36:	4b48      	ldr	r3, [pc, #288]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a4c      	ldr	r2, [pc, #304]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	0019      	movs	r1, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685a      	ldr	r2, [r3, #4]
 8009b44:	23c0      	movs	r3, #192	; 0xc0
 8009b46:	039b      	lsls	r3, r3, #14
 8009b48:	401a      	ands	r2, r3
 8009b4a:	4b43      	ldr	r3, [pc, #268]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	4b41      	ldr	r3, [pc, #260]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b52:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685a      	ldr	r2, [r3, #4]
 8009b58:	23c0      	movs	r3, #192	; 0xc0
 8009b5a:	029b      	lsls	r3, r3, #10
 8009b5c:	401a      	ands	r2, r3
 8009b5e:	4b3e      	ldr	r3, [pc, #248]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b60:	430a      	orrs	r2, r1
 8009b62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009b64:	2317      	movs	r3, #23
 8009b66:	18fb      	adds	r3, r7, r3
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d105      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b6e:	4b3a      	ldr	r3, [pc, #232]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b72:	4b39      	ldr	r3, [pc, #228]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b74:	493e      	ldr	r1, [pc, #248]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8009b76:	400a      	ands	r2, r1
 8009b78:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	4013      	ands	r3, r2
 8009b82:	d009      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b84:	4b34      	ldr	r3, [pc, #208]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b88:	2203      	movs	r2, #3
 8009b8a:	4393      	bics	r3, r2
 8009b8c:	0019      	movs	r1, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	4b31      	ldr	r3, [pc, #196]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b94:	430a      	orrs	r2, r1
 8009b96:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	d009      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ba2:	4b2d      	ldr	r3, [pc, #180]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba6:	220c      	movs	r2, #12
 8009ba8:	4393      	bics	r3, r2
 8009baa:	0019      	movs	r1, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	4b29      	ldr	r3, [pc, #164]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2204      	movs	r2, #4
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	d009      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bc0:	4b25      	ldr	r3, [pc, #148]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc4:	4a2b      	ldr	r2, [pc, #172]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	0019      	movs	r1, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691a      	ldr	r2, [r3, #16]
 8009bce:	4b22      	ldr	r3, [pc, #136]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2208      	movs	r2, #8
 8009bda:	4013      	ands	r3, r2
 8009bdc:	d009      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009bde:	4b1e      	ldr	r3, [pc, #120]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be2:	4a25      	ldr	r2, [pc, #148]	; (8009c78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009be4:	4013      	ands	r3, r2
 8009be6:	0019      	movs	r1, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	695a      	ldr	r2, [r3, #20]
 8009bec:	4b1a      	ldr	r3, [pc, #104]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	2380      	movs	r3, #128	; 0x80
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	d009      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009bfe:	4b16      	ldr	r3, [pc, #88]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c02:	4a17      	ldr	r2, [pc, #92]	; (8009c60 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009c04:	4013      	ands	r3, r2
 8009c06:	0019      	movs	r1, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699a      	ldr	r2, [r3, #24]
 8009c0c:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2240      	movs	r2, #64	; 0x40
 8009c18:	4013      	ands	r3, r2
 8009c1a:	d009      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c1c:	4b0e      	ldr	r3, [pc, #56]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c20:	4a16      	ldr	r2, [pc, #88]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009c22:	4013      	ands	r3, r2
 8009c24:	0019      	movs	r1, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1a      	ldr	r2, [r3, #32]
 8009c2a:	4b0b      	ldr	r3, [pc, #44]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2280      	movs	r2, #128	; 0x80
 8009c36:	4013      	ands	r3, r2
 8009c38:	d009      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009c3a:	4b07      	ldr	r3, [pc, #28]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c3e:	4a10      	ldr	r2, [pc, #64]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009c40:	4013      	ands	r3, r2
 8009c42:	0019      	movs	r1, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	69da      	ldr	r2, [r3, #28]
 8009c48:	4b03      	ldr	r3, [pc, #12]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	0018      	movs	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b006      	add	sp, #24
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	40021000 	.word	0x40021000
 8009c5c:	40007000 	.word	0x40007000
 8009c60:	fffcffff 	.word	0xfffcffff
 8009c64:	fff7ffff 	.word	0xfff7ffff
 8009c68:	00001388 	.word	0x00001388
 8009c6c:	ffcfffff 	.word	0xffcfffff
 8009c70:	efffffff 	.word	0xefffffff
 8009c74:	fffff3ff 	.word	0xfffff3ff
 8009c78:	ffffcfff 	.word	0xffffcfff
 8009c7c:	fbffffff 	.word	0xfbffffff
 8009c80:	fff3ffff 	.word	0xfff3ffff

08009c84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e08e      	b.n	8009db4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2221      	movs	r2, #33	; 0x21
 8009c9a:	5c9b      	ldrb	r3, [r3, r2]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d107      	bne.n	8009cb2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	0018      	movs	r0, r3
 8009cae:	f7fb fcf9 	bl	80056a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2221      	movs	r2, #33	; 0x21
 8009cb6:	2102      	movs	r1, #2
 8009cb8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	22ca      	movs	r2, #202	; 0xca
 8009cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2253      	movs	r2, #83	; 0x53
 8009cc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	0018      	movs	r0, r3
 8009cce:	f000 fcf4 	bl	800a6ba <RTC_EnterInitMode>
 8009cd2:	1e03      	subs	r3, r0, #0
 8009cd4:	d009      	beq.n	8009cea <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	22ff      	movs	r2, #255	; 0xff
 8009cdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2221      	movs	r2, #33	; 0x21
 8009ce2:	2104      	movs	r1, #4
 8009ce4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e064      	b.n	8009db4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689a      	ldr	r2, [r3, #8]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4931      	ldr	r1, [pc, #196]	; (8009dbc <HAL_RTC_Init+0x138>)
 8009cf6:	400a      	ands	r2, r1
 8009cf8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6899      	ldr	r1, [r3, #8]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	430a      	orrs	r2, r1
 8009d16:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	68d2      	ldr	r2, [r2, #12]
 8009d20:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6919      	ldr	r1, [r3, #16]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	041a      	lsls	r2, r3, #16
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2180      	movs	r1, #128	; 0x80
 8009d42:	438a      	bics	r2, r1
 8009d44:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2103      	movs	r1, #3
 8009d52:	438a      	bics	r2, r1
 8009d54:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	69da      	ldr	r2, [r3, #28]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	2220      	movs	r2, #32
 8009d76:	4013      	ands	r3, r2
 8009d78:	d113      	bne.n	8009da2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f000 fc75 	bl	800a66c <HAL_RTC_WaitForSynchro>
 8009d82:	1e03      	subs	r3, r0, #0
 8009d84:	d00d      	beq.n	8009da2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	22ff      	movs	r2, #255	; 0xff
 8009d8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2221      	movs	r2, #33	; 0x21
 8009d92:	2104      	movs	r1, #4
 8009d94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e008      	b.n	8009db4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	22ff      	movs	r2, #255	; 0xff
 8009da8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2221      	movs	r2, #33	; 0x21
 8009dae:	2101      	movs	r1, #1
 8009db0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009db2:	2300      	movs	r3, #0
  }
}
 8009db4:	0018      	movs	r0, r3
 8009db6:	46bd      	mov	sp, r7
 8009db8:	b002      	add	sp, #8
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	ff8fffbf 	.word	0xff8fffbf

08009dc0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009dc0:	b590      	push	{r4, r7, lr}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	5c9b      	ldrb	r3, [r3, r2]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_RTC_SetTime+0x1a>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e0ad      	b.n	8009f36 <HAL_RTC_SetTime+0x176>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	2101      	movs	r1, #1
 8009de0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2221      	movs	r2, #33	; 0x21
 8009de6:	2102      	movs	r1, #2
 8009de8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d125      	bne.n	8009e3c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	2240      	movs	r2, #64	; 0x40
 8009df8:	4013      	ands	r3, r2
 8009dfa:	d102      	bne.n	8009e02 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	0018      	movs	r0, r3
 8009e08:	f000 fc81 	bl	800a70e <RTC_ByteToBcd2>
 8009e0c:	0003      	movs	r3, r0
 8009e0e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	0018      	movs	r0, r3
 8009e16:	f000 fc7a 	bl	800a70e <RTC_ByteToBcd2>
 8009e1a:	0003      	movs	r3, r0
 8009e1c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009e1e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	789b      	ldrb	r3, [r3, #2]
 8009e24:	0018      	movs	r0, r3
 8009e26:	f000 fc72 	bl	800a70e <RTC_ByteToBcd2>
 8009e2a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009e2c:	0022      	movs	r2, r4
 8009e2e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	78db      	ldrb	r3, [r3, #3]
 8009e34:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009e36:	4313      	orrs	r3, r2
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	e017      	b.n	8009e6c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2240      	movs	r2, #64	; 0x40
 8009e44:	4013      	ands	r3, r2
 8009e46:	d102      	bne.n	8009e4e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009e5a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009e60:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	78db      	ldrb	r3, [r3, #3]
 8009e66:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	22ca      	movs	r2, #202	; 0xca
 8009e72:	625a      	str	r2, [r3, #36]	; 0x24
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2253      	movs	r2, #83	; 0x53
 8009e7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f000 fc1b 	bl	800a6ba <RTC_EnterInitMode>
 8009e84:	1e03      	subs	r3, r0, #0
 8009e86:	d00d      	beq.n	8009ea4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	22ff      	movs	r2, #255	; 0xff
 8009e8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2221      	movs	r2, #33	; 0x21
 8009e94:	2104      	movs	r1, #4
 8009e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e048      	b.n	8009f36 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	4925      	ldr	r1, [pc, #148]	; (8009f40 <HAL_RTC_SetTime+0x180>)
 8009eac:	400a      	ands	r2, r1
 8009eae:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689a      	ldr	r2, [r3, #8]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4922      	ldr	r1, [pc, #136]	; (8009f44 <HAL_RTC_SetTime+0x184>)
 8009ebc:	400a      	ands	r2, r1
 8009ebe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6899      	ldr	r1, [r3, #8]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68da      	ldr	r2, [r3, #12]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2180      	movs	r1, #128	; 0x80
 8009ee4:	438a      	bics	r2, r1
 8009ee6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	2220      	movs	r2, #32
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	d113      	bne.n	8009f1c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f000 fbb8 	bl	800a66c <HAL_RTC_WaitForSynchro>
 8009efc:	1e03      	subs	r3, r0, #0
 8009efe:	d00d      	beq.n	8009f1c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	22ff      	movs	r2, #255	; 0xff
 8009f06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2221      	movs	r2, #33	; 0x21
 8009f0c:	2104      	movs	r1, #4
 8009f0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2220      	movs	r2, #32
 8009f14:	2100      	movs	r1, #0
 8009f16:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e00c      	b.n	8009f36 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	22ff      	movs	r2, #255	; 0xff
 8009f22:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2221      	movs	r2, #33	; 0x21
 8009f28:	2101      	movs	r1, #1
 8009f2a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2220      	movs	r2, #32
 8009f30:	2100      	movs	r1, #0
 8009f32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009f34:	2300      	movs	r3, #0
  }
}
 8009f36:	0018      	movs	r0, r3
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	b007      	add	sp, #28
 8009f3c:	bd90      	pop	{r4, r7, pc}
 8009f3e:	46c0      	nop			; (mov r8, r8)
 8009f40:	007f7f7f 	.word	0x007f7f7f
 8009f44:	fffbffff 	.word	0xfffbffff

08009f48 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	045b      	lsls	r3, r3, #17
 8009f66:	0c5a      	lsrs	r2, r3, #17
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a22      	ldr	r2, [pc, #136]	; (8009ffc <HAL_RTC_GetTime+0xb4>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	0c1b      	lsrs	r3, r3, #16
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	223f      	movs	r2, #63	; 0x3f
 8009f80:	4013      	ands	r3, r2
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	227f      	movs	r2, #127	; 0x7f
 8009f90:	4013      	ands	r3, r2
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	227f      	movs	r2, #127	; 0x7f
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	0c1b      	lsrs	r3, r3, #16
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2240      	movs	r2, #64	; 0x40
 8009fae:	4013      	ands	r3, r2
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d11a      	bne.n	8009ff2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f000 fbcc 	bl	800a75e <RTC_Bcd2ToByte>
 8009fc6:	0003      	movs	r3, r0
 8009fc8:	001a      	movs	r2, r3
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	f000 fbc3 	bl	800a75e <RTC_Bcd2ToByte>
 8009fd8:	0003      	movs	r3, r0
 8009fda:	001a      	movs	r2, r3
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	789b      	ldrb	r3, [r3, #2]
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f000 fbba 	bl	800a75e <RTC_Bcd2ToByte>
 8009fea:	0003      	movs	r3, r0
 8009fec:	001a      	movs	r2, r3
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	b006      	add	sp, #24
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	007f7f7f 	.word	0x007f7f7f

0800a000 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a000:	b590      	push	{r4, r7, lr}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2220      	movs	r2, #32
 800a010:	5c9b      	ldrb	r3, [r3, r2]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d101      	bne.n	800a01a <HAL_RTC_SetDate+0x1a>
 800a016:	2302      	movs	r3, #2
 800a018:	e099      	b.n	800a14e <HAL_RTC_SetDate+0x14e>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2220      	movs	r2, #32
 800a01e:	2101      	movs	r1, #1
 800a020:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2221      	movs	r2, #33	; 0x21
 800a026:	2102      	movs	r1, #2
 800a028:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10e      	bne.n	800a04e <HAL_RTC_SetDate+0x4e>
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	785b      	ldrb	r3, [r3, #1]
 800a034:	001a      	movs	r2, r3
 800a036:	2310      	movs	r3, #16
 800a038:	4013      	ands	r3, r2
 800a03a:	d008      	beq.n	800a04e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	785b      	ldrb	r3, [r3, #1]
 800a040:	2210      	movs	r2, #16
 800a042:	4393      	bics	r3, r2
 800a044:	b2db      	uxtb	r3, r3
 800a046:	330a      	adds	r3, #10
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d11c      	bne.n	800a08e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	78db      	ldrb	r3, [r3, #3]
 800a058:	0018      	movs	r0, r3
 800a05a:	f000 fb58 	bl	800a70e <RTC_ByteToBcd2>
 800a05e:	0003      	movs	r3, r0
 800a060:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	785b      	ldrb	r3, [r3, #1]
 800a066:	0018      	movs	r0, r3
 800a068:	f000 fb51 	bl	800a70e <RTC_ByteToBcd2>
 800a06c:	0003      	movs	r3, r0
 800a06e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a070:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	789b      	ldrb	r3, [r3, #2]
 800a076:	0018      	movs	r0, r3
 800a078:	f000 fb49 	bl	800a70e <RTC_ByteToBcd2>
 800a07c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a07e:	0022      	movs	r2, r4
 800a080:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a088:	4313      	orrs	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	e00e      	b.n	800a0ac <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	78db      	ldrb	r3, [r3, #3]
 800a092:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	785b      	ldrb	r3, [r3, #1]
 800a098:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a09a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a0a0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	22ca      	movs	r2, #202	; 0xca
 800a0b2:	625a      	str	r2, [r3, #36]	; 0x24
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2253      	movs	r2, #83	; 0x53
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f000 fafb 	bl	800a6ba <RTC_EnterInitMode>
 800a0c4:	1e03      	subs	r3, r0, #0
 800a0c6:	d00d      	beq.n	800a0e4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	22ff      	movs	r2, #255	; 0xff
 800a0ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2221      	movs	r2, #33	; 0x21
 800a0d4:	2104      	movs	r1, #4
 800a0d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	2100      	movs	r1, #0
 800a0de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e034      	b.n	800a14e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	491b      	ldr	r1, [pc, #108]	; (800a158 <HAL_RTC_SetDate+0x158>)
 800a0ec:	400a      	ands	r2, r1
 800a0ee:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68da      	ldr	r2, [r3, #12]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2180      	movs	r1, #128	; 0x80
 800a0fc:	438a      	bics	r2, r1
 800a0fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	2220      	movs	r2, #32
 800a108:	4013      	ands	r3, r2
 800a10a:	d113      	bne.n	800a134 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	0018      	movs	r0, r3
 800a110:	f000 faac 	bl	800a66c <HAL_RTC_WaitForSynchro>
 800a114:	1e03      	subs	r3, r0, #0
 800a116:	d00d      	beq.n	800a134 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	22ff      	movs	r2, #255	; 0xff
 800a11e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2221      	movs	r2, #33	; 0x21
 800a124:	2104      	movs	r1, #4
 800a126:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2220      	movs	r2, #32
 800a12c:	2100      	movs	r1, #0
 800a12e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e00c      	b.n	800a14e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	22ff      	movs	r2, #255	; 0xff
 800a13a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2221      	movs	r2, #33	; 0x21
 800a140:	2101      	movs	r1, #1
 800a142:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2220      	movs	r2, #32
 800a148:	2100      	movs	r1, #0
 800a14a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a14c:	2300      	movs	r3, #0
  }
}
 800a14e:	0018      	movs	r0, r3
 800a150:	46bd      	mov	sp, r7
 800a152:	b007      	add	sp, #28
 800a154:	bd90      	pop	{r4, r7, pc}
 800a156:	46c0      	nop			; (mov r8, r8)
 800a158:	00ffff3f 	.word	0x00ffff3f

0800a15c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	4a21      	ldr	r2, [pc, #132]	; (800a1f4 <HAL_RTC_GetDate+0x98>)
 800a170:	4013      	ands	r3, r2
 800a172:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	0c1b      	lsrs	r3, r3, #16
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	0a1b      	lsrs	r3, r3, #8
 800a182:	b2db      	uxtb	r3, r3
 800a184:	221f      	movs	r2, #31
 800a186:	4013      	ands	r3, r2
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	b2db      	uxtb	r3, r3
 800a192:	223f      	movs	r2, #63	; 0x3f
 800a194:	4013      	ands	r3, r2
 800a196:	b2da      	uxtb	r2, r3
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	0b5b      	lsrs	r3, r3, #13
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2207      	movs	r2, #7
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d11a      	bne.n	800a1e8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	78db      	ldrb	r3, [r3, #3]
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f000 fad1 	bl	800a75e <RTC_Bcd2ToByte>
 800a1bc:	0003      	movs	r3, r0
 800a1be:	001a      	movs	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	f000 fac8 	bl	800a75e <RTC_Bcd2ToByte>
 800a1ce:	0003      	movs	r3, r0
 800a1d0:	001a      	movs	r2, r3
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	789b      	ldrb	r3, [r3, #2]
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f000 fabf 	bl	800a75e <RTC_Bcd2ToByte>
 800a1e0:	0003      	movs	r3, r0
 800a1e2:	001a      	movs	r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	b006      	add	sp, #24
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	00ffff3f 	.word	0x00ffff3f

0800a1f8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a1f8:	b590      	push	{r4, r7, lr}
 800a1fa:	b089      	sub	sp, #36	; 0x24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2220      	movs	r2, #32
 800a208:	5c9b      	ldrb	r3, [r3, r2]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d101      	bne.n	800a212 <HAL_RTC_SetAlarm_IT+0x1a>
 800a20e:	2302      	movs	r3, #2
 800a210:	e130      	b.n	800a474 <HAL_RTC_SetAlarm_IT+0x27c>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2220      	movs	r2, #32
 800a216:	2101      	movs	r1, #1
 800a218:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2221      	movs	r2, #33	; 0x21
 800a21e:	2102      	movs	r1, #2
 800a220:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d136      	bne.n	800a296 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	2240      	movs	r2, #64	; 0x40
 800a230:	4013      	ands	r3, r2
 800a232:	d102      	bne.n	800a23a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2200      	movs	r2, #0
 800a238:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	0018      	movs	r0, r3
 800a240:	f000 fa65 	bl	800a70e <RTC_ByteToBcd2>
 800a244:	0003      	movs	r3, r0
 800a246:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	785b      	ldrb	r3, [r3, #1]
 800a24c:	0018      	movs	r0, r3
 800a24e:	f000 fa5e 	bl	800a70e <RTC_ByteToBcd2>
 800a252:	0003      	movs	r3, r0
 800a254:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a256:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	789b      	ldrb	r3, [r3, #2]
 800a25c:	0018      	movs	r0, r3
 800a25e:	f000 fa56 	bl	800a70e <RTC_ByteToBcd2>
 800a262:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a264:	0022      	movs	r2, r4
 800a266:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	78db      	ldrb	r3, [r3, #3]
 800a26c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a26e:	431a      	orrs	r2, r3
 800a270:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2220      	movs	r2, #32
 800a276:	5c9b      	ldrb	r3, [r3, r2]
 800a278:	0018      	movs	r0, r3
 800a27a:	f000 fa48 	bl	800a70e <RTC_ByteToBcd2>
 800a27e:	0003      	movs	r3, r0
 800a280:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a282:	0022      	movs	r2, r4
 800a284:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a28a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a290:	4313      	orrs	r3, r2
 800a292:	61fb      	str	r3, [r7, #28]
 800a294:	e022      	b.n	800a2dc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	2240      	movs	r2, #64	; 0x40
 800a29e:	4013      	ands	r3, r2
 800a2a0:	d102      	bne.n	800a2a8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a2b4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a2ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	78db      	ldrb	r3, [r3, #3]
 800a2c0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a2c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2120      	movs	r1, #32
 800a2c8:	5c5b      	ldrb	r3, [r3, r1]
 800a2ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a2cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a2d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	22ca      	movs	r2, #202	; 0xca
 800a2ee:	625a      	str	r2, [r3, #36]	; 0x24
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2253      	movs	r2, #83	; 0x53
 800a2f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2fc:	2380      	movs	r3, #128	; 0x80
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	429a      	cmp	r2, r3
 800a302:	d14e      	bne.n	800a3a2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689a      	ldr	r2, [r3, #8]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	495b      	ldr	r1, [pc, #364]	; (800a47c <HAL_RTC_SetAlarm_IT+0x284>)
 800a310:	400a      	ands	r2, r1
 800a312:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	22ff      	movs	r2, #255	; 0xff
 800a31c:	401a      	ands	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4957      	ldr	r1, [pc, #348]	; (800a480 <HAL_RTC_SetAlarm_IT+0x288>)
 800a324:	430a      	orrs	r2, r1
 800a326:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a328:	f7fc f879 	bl	800641e <HAL_GetTick>
 800a32c:	0003      	movs	r3, r0
 800a32e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a330:	e016      	b.n	800a360 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a332:	f7fc f874 	bl	800641e <HAL_GetTick>
 800a336:	0002      	movs	r2, r0
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	1ad2      	subs	r2, r2, r3
 800a33c:	23fa      	movs	r3, #250	; 0xfa
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	429a      	cmp	r2, r3
 800a342:	d90d      	bls.n	800a360 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	22ff      	movs	r2, #255	; 0xff
 800a34a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2221      	movs	r2, #33	; 0x21
 800a350:	2103      	movs	r1, #3
 800a352:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2220      	movs	r2, #32
 800a358:	2100      	movs	r1, #0
 800a35a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e089      	b.n	800a474 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	4013      	ands	r3, r2
 800a36a:	d0e2      	beq.n	800a332 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	69fa      	ldr	r2, [r7, #28]
 800a372:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	69ba      	ldr	r2, [r7, #24]
 800a37a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2180      	movs	r1, #128	; 0x80
 800a388:	0049      	lsls	r1, r1, #1
 800a38a:	430a      	orrs	r2, r1
 800a38c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2180      	movs	r1, #128	; 0x80
 800a39a:	0149      	lsls	r1, r1, #5
 800a39c:	430a      	orrs	r2, r1
 800a39e:	609a      	str	r2, [r3, #8]
 800a3a0:	e04d      	b.n	800a43e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4935      	ldr	r1, [pc, #212]	; (800a484 <HAL_RTC_SetAlarm_IT+0x28c>)
 800a3ae:	400a      	ands	r2, r1
 800a3b0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	22ff      	movs	r2, #255	; 0xff
 800a3ba:	401a      	ands	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4931      	ldr	r1, [pc, #196]	; (800a488 <HAL_RTC_SetAlarm_IT+0x290>)
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a3c6:	f7fc f82a 	bl	800641e <HAL_GetTick>
 800a3ca:	0003      	movs	r3, r0
 800a3cc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a3ce:	e016      	b.n	800a3fe <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a3d0:	f7fc f825 	bl	800641e <HAL_GetTick>
 800a3d4:	0002      	movs	r2, r0
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	1ad2      	subs	r2, r2, r3
 800a3da:	23fa      	movs	r3, #250	; 0xfa
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d90d      	bls.n	800a3fe <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	22ff      	movs	r2, #255	; 0xff
 800a3e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2221      	movs	r2, #33	; 0x21
 800a3ee:	2103      	movs	r1, #3
 800a3f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e03a      	b.n	800a474 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	2202      	movs	r2, #2
 800a406:	4013      	ands	r3, r2
 800a408:	d0e2      	beq.n	800a3d0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69fa      	ldr	r2, [r7, #28]
 800a410:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69ba      	ldr	r2, [r7, #24]
 800a418:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2180      	movs	r1, #128	; 0x80
 800a426:	0089      	lsls	r1, r1, #2
 800a428:	430a      	orrs	r2, r1
 800a42a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689a      	ldr	r2, [r3, #8]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2180      	movs	r1, #128	; 0x80
 800a438:	0189      	lsls	r1, r1, #6
 800a43a:	430a      	orrs	r2, r1
 800a43c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a43e:	4b13      	ldr	r3, [pc, #76]	; (800a48c <HAL_RTC_SetAlarm_IT+0x294>)
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	4b12      	ldr	r3, [pc, #72]	; (800a48c <HAL_RTC_SetAlarm_IT+0x294>)
 800a444:	2180      	movs	r1, #128	; 0x80
 800a446:	0289      	lsls	r1, r1, #10
 800a448:	430a      	orrs	r2, r1
 800a44a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a44c:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <HAL_RTC_SetAlarm_IT+0x294>)
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	4b0e      	ldr	r3, [pc, #56]	; (800a48c <HAL_RTC_SetAlarm_IT+0x294>)
 800a452:	2180      	movs	r1, #128	; 0x80
 800a454:	0289      	lsls	r1, r1, #10
 800a456:	430a      	orrs	r2, r1
 800a458:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	22ff      	movs	r2, #255	; 0xff
 800a460:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2221      	movs	r2, #33	; 0x21
 800a466:	2101      	movs	r1, #1
 800a468:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2220      	movs	r2, #32
 800a46e:	2100      	movs	r1, #0
 800a470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	0018      	movs	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	b009      	add	sp, #36	; 0x24
 800a47a:	bd90      	pop	{r4, r7, pc}
 800a47c:	fffffeff 	.word	0xfffffeff
 800a480:	fffffe7f 	.word	0xfffffe7f
 800a484:	fffffdff 	.word	0xfffffdff
 800a488:	fffffd7f 	.word	0xfffffd7f
 800a48c:	40010400 	.word	0x40010400

0800a490 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2220      	movs	r2, #32
 800a49e:	5c9b      	ldrb	r3, [r3, r2]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d101      	bne.n	800a4a8 <HAL_RTC_DeactivateAlarm+0x18>
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	e086      	b.n	800a5b6 <HAL_RTC_DeactivateAlarm+0x126>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2221      	movs	r2, #33	; 0x21
 800a4b4:	2102      	movs	r1, #2
 800a4b6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	22ca      	movs	r2, #202	; 0xca
 800a4be:	625a      	str	r2, [r3, #36]	; 0x24
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2253      	movs	r2, #83	; 0x53
 800a4c6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a4c8:	683a      	ldr	r2, [r7, #0]
 800a4ca:	2380      	movs	r3, #128	; 0x80
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d132      	bne.n	800a538 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4938      	ldr	r1, [pc, #224]	; (800a5c0 <HAL_RTC_DeactivateAlarm+0x130>)
 800a4de:	400a      	ands	r2, r1
 800a4e0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4935      	ldr	r1, [pc, #212]	; (800a5c4 <HAL_RTC_DeactivateAlarm+0x134>)
 800a4ee:	400a      	ands	r2, r1
 800a4f0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a4f2:	f7fb ff94 	bl	800641e <HAL_GetTick>
 800a4f6:	0003      	movs	r3, r0
 800a4f8:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a4fa:	e016      	b.n	800a52a <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a4fc:	f7fb ff8f 	bl	800641e <HAL_GetTick>
 800a500:	0002      	movs	r2, r0
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	1ad2      	subs	r2, r2, r3
 800a506:	23fa      	movs	r3, #250	; 0xfa
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d90d      	bls.n	800a52a <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	22ff      	movs	r2, #255	; 0xff
 800a514:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2221      	movs	r2, #33	; 0x21
 800a51a:	2103      	movs	r1, #3
 800a51c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2220      	movs	r2, #32
 800a522:	2100      	movs	r1, #0
 800a524:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	e045      	b.n	800a5b6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	2201      	movs	r2, #1
 800a532:	4013      	ands	r3, r2
 800a534:	d0e2      	beq.n	800a4fc <HAL_RTC_DeactivateAlarm+0x6c>
 800a536:	e031      	b.n	800a59c <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4921      	ldr	r1, [pc, #132]	; (800a5c8 <HAL_RTC_DeactivateAlarm+0x138>)
 800a544:	400a      	ands	r2, r1
 800a546:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689a      	ldr	r2, [r3, #8]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	491e      	ldr	r1, [pc, #120]	; (800a5cc <HAL_RTC_DeactivateAlarm+0x13c>)
 800a554:	400a      	ands	r2, r1
 800a556:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a558:	f7fb ff61 	bl	800641e <HAL_GetTick>
 800a55c:	0003      	movs	r3, r0
 800a55e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a560:	e016      	b.n	800a590 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a562:	f7fb ff5c 	bl	800641e <HAL_GetTick>
 800a566:	0002      	movs	r2, r0
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	1ad2      	subs	r2, r2, r3
 800a56c:	23fa      	movs	r3, #250	; 0xfa
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	429a      	cmp	r2, r3
 800a572:	d90d      	bls.n	800a590 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	22ff      	movs	r2, #255	; 0xff
 800a57a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2221      	movs	r2, #33	; 0x21
 800a580:	2103      	movs	r1, #3
 800a582:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2220      	movs	r2, #32
 800a588:	2100      	movs	r1, #0
 800a58a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e012      	b.n	800a5b6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	2202      	movs	r2, #2
 800a598:	4013      	ands	r3, r2
 800a59a:	d0e2      	beq.n	800a562 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	22ff      	movs	r2, #255	; 0xff
 800a5a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2221      	movs	r2, #33	; 0x21
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	b004      	add	sp, #16
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	46c0      	nop			; (mov r8, r8)
 800a5c0:	fffffeff 	.word	0xfffffeff
 800a5c4:	ffffefff 	.word	0xffffefff
 800a5c8:	fffffdff 	.word	0xfffffdff
 800a5cc:	ffffdfff 	.word	0xffffdfff

0800a5d0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	2380      	movs	r3, #128	; 0x80
 800a5e0:	015b      	lsls	r3, r3, #5
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	d014      	beq.n	800a610 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	2380      	movs	r3, #128	; 0x80
 800a5ee:	005b      	lsls	r3, r3, #1
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	d00d      	beq.n	800a610 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	0018      	movs	r0, r3
 800a5f8:	f7fb f9e5 	bl	80059c6 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	22ff      	movs	r2, #255	; 0xff
 800a604:	401a      	ands	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4915      	ldr	r1, [pc, #84]	; (800a660 <HAL_RTC_AlarmIRQHandler+0x90>)
 800a60c:	430a      	orrs	r2, r1
 800a60e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689a      	ldr	r2, [r3, #8]
 800a616:	2380      	movs	r3, #128	; 0x80
 800a618:	019b      	lsls	r3, r3, #6
 800a61a:	4013      	ands	r3, r2
 800a61c:	d014      	beq.n	800a648 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68da      	ldr	r2, [r3, #12]
 800a624:	2380      	movs	r3, #128	; 0x80
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4013      	ands	r3, r2
 800a62a:	d00d      	beq.n	800a648 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	0018      	movs	r0, r3
 800a630:	f000 f910 	bl	800a854 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	22ff      	movs	r2, #255	; 0xff
 800a63c:	401a      	ands	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4908      	ldr	r1, [pc, #32]	; (800a664 <HAL_RTC_AlarmIRQHandler+0x94>)
 800a644:	430a      	orrs	r2, r1
 800a646:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a648:	4b07      	ldr	r3, [pc, #28]	; (800a668 <HAL_RTC_AlarmIRQHandler+0x98>)
 800a64a:	2280      	movs	r2, #128	; 0x80
 800a64c:	0292      	lsls	r2, r2, #10
 800a64e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2221      	movs	r2, #33	; 0x21
 800a654:	2101      	movs	r1, #1
 800a656:	5499      	strb	r1, [r3, r2]
}
 800a658:	46c0      	nop			; (mov r8, r8)
 800a65a:	46bd      	mov	sp, r7
 800a65c:	b002      	add	sp, #8
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	fffffe7f 	.word	0xfffffe7f
 800a664:	fffffd7f 	.word	0xfffffd7f
 800a668:	40010400 	.word	0x40010400

0800a66c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	21a0      	movs	r1, #160	; 0xa0
 800a680:	438a      	bics	r2, r1
 800a682:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a684:	f7fb fecb 	bl	800641e <HAL_GetTick>
 800a688:	0003      	movs	r3, r0
 800a68a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a68c:	e00a      	b.n	800a6a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a68e:	f7fb fec6 	bl	800641e <HAL_GetTick>
 800a692:	0002      	movs	r2, r0
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	1ad2      	subs	r2, r2, r3
 800a698:	23fa      	movs	r3, #250	; 0xfa
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d901      	bls.n	800a6a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e006      	b.n	800a6b2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	d0ee      	beq.n	800a68e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	b004      	add	sp, #16
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	2240      	movs	r2, #64	; 0x40
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	d11a      	bne.n	800a704 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	4252      	negs	r2, r2
 800a6d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a6d8:	f7fb fea1 	bl	800641e <HAL_GetTick>
 800a6dc:	0003      	movs	r3, r0
 800a6de:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a6e0:	e00a      	b.n	800a6f8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a6e2:	f7fb fe9c 	bl	800641e <HAL_GetTick>
 800a6e6:	0002      	movs	r2, r0
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	1ad2      	subs	r2, r2, r3
 800a6ec:	23fa      	movs	r3, #250	; 0xfa
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d901      	bls.n	800a6f8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e006      	b.n	800a706 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	2240      	movs	r2, #64	; 0x40
 800a700:	4013      	ands	r3, r2
 800a702:	d0ee      	beq.n	800a6e2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	0018      	movs	r0, r3
 800a708:	46bd      	mov	sp, r7
 800a70a:	b004      	add	sp, #16
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	0002      	movs	r2, r0
 800a716:	1dfb      	adds	r3, r7, #7
 800a718:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a71e:	230b      	movs	r3, #11
 800a720:	18fb      	adds	r3, r7, r3
 800a722:	1dfa      	adds	r2, r7, #7
 800a724:	7812      	ldrb	r2, [r2, #0]
 800a726:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800a728:	e008      	b.n	800a73c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3301      	adds	r3, #1
 800a72e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a730:	220b      	movs	r2, #11
 800a732:	18bb      	adds	r3, r7, r2
 800a734:	18ba      	adds	r2, r7, r2
 800a736:	7812      	ldrb	r2, [r2, #0]
 800a738:	3a0a      	subs	r2, #10
 800a73a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800a73c:	210b      	movs	r1, #11
 800a73e:	187b      	adds	r3, r7, r1
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	2b09      	cmp	r3, #9
 800a744:	d8f1      	bhi.n	800a72a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	187b      	adds	r3, r7, r1
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	4313      	orrs	r3, r2
 800a754:	b2db      	uxtb	r3, r3
}
 800a756:	0018      	movs	r0, r3
 800a758:	46bd      	mov	sp, r7
 800a75a:	b004      	add	sp, #16
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	0002      	movs	r2, r0
 800a766:	1dfb      	adds	r3, r7, #7
 800a768:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800a76a:	1dfb      	adds	r3, r7, #7
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	091b      	lsrs	r3, r3, #4
 800a770:	b2db      	uxtb	r3, r3
 800a772:	001a      	movs	r2, r3
 800a774:	0013      	movs	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	189b      	adds	r3, r3, r2
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	b2da      	uxtb	r2, r3
 800a782:	1dfb      	adds	r3, r7, #7
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	210f      	movs	r1, #15
 800a788:	400b      	ands	r3, r1
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	18d3      	adds	r3, r2, r3
 800a78e:	b2db      	uxtb	r3, r3
}
 800a790:	0018      	movs	r0, r3
 800a792:	46bd      	mov	sp, r7
 800a794:	b004      	add	sp, #16
 800a796:	bd80      	pop	{r7, pc}

0800a798 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3350      	adds	r3, #80	; 0x50
 800a7aa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	18d3      	adds	r3, r2, r3
 800a7b4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	601a      	str	r2, [r3, #0]
}
 800a7bc:	46c0      	nop			; (mov r8, r8)
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	b006      	add	sp, #24
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3350      	adds	r3, #80	; 0x50
 800a7d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	18d3      	adds	r3, r2, r3
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
}
 800a7e4:	0018      	movs	r0, r3
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	b004      	add	sp, #16
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	5c9b      	ldrb	r3, [r3, r2]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d101      	bne.n	800a802 <HAL_RTCEx_EnableBypassShadow+0x16>
 800a7fe:	2302      	movs	r3, #2
 800a800:	e024      	b.n	800a84c <HAL_RTCEx_EnableBypassShadow+0x60>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2220      	movs	r2, #32
 800a806:	2101      	movs	r1, #1
 800a808:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2221      	movs	r2, #33	; 0x21
 800a80e:	2102      	movs	r1, #2
 800a810:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	22ca      	movs	r2, #202	; 0xca
 800a818:	625a      	str	r2, [r3, #36]	; 0x24
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2253      	movs	r2, #83	; 0x53
 800a820:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2120      	movs	r1, #32
 800a82e:	430a      	orrs	r2, r1
 800a830:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	22ff      	movs	r2, #255	; 0xff
 800a838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2221      	movs	r2, #33	; 0x21
 800a83e:	2101      	movs	r1, #1
 800a840:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2220      	movs	r2, #32
 800a846:	2100      	movs	r1, #0
 800a848:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	0018      	movs	r0, r3
 800a84e:	46bd      	mov	sp, r7
 800a850:	b002      	add	sp, #8
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a85c:	46c0      	nop			; (mov r8, r8)
 800a85e:	46bd      	mov	sp, r7
 800a860:	b002      	add	sp, #8
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e083      	b.n	800a97e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d109      	bne.n	800a892 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	2382      	movs	r3, #130	; 0x82
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	429a      	cmp	r2, r3
 800a888:	d009      	beq.n	800a89e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	61da      	str	r2, [r3, #28]
 800a890:	e005      	b.n	800a89e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2251      	movs	r2, #81	; 0x51
 800a8a8:	5c9b      	ldrb	r3, [r3, r2]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d107      	bne.n	800a8c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2250      	movs	r2, #80	; 0x50
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	0018      	movs	r0, r3
 800a8bc:	f000 f866 	bl	800a98c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2251      	movs	r2, #81	; 0x51
 800a8c4:	2102      	movs	r1, #2
 800a8c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2140      	movs	r1, #64	; 0x40
 800a8d4:	438a      	bics	r2, r1
 800a8d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	2382      	movs	r3, #130	; 0x82
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	401a      	ands	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6899      	ldr	r1, [r3, #8]
 800a8e6:	2384      	movs	r3, #132	; 0x84
 800a8e8:	021b      	lsls	r3, r3, #8
 800a8ea:	400b      	ands	r3, r1
 800a8ec:	431a      	orrs	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68d9      	ldr	r1, [r3, #12]
 800a8f2:	2380      	movs	r3, #128	; 0x80
 800a8f4:	011b      	lsls	r3, r3, #4
 800a8f6:	400b      	ands	r3, r1
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2102      	movs	r1, #2
 800a900:	400b      	ands	r3, r1
 800a902:	431a      	orrs	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	2101      	movs	r1, #1
 800a90a:	400b      	ands	r3, r1
 800a90c:	431a      	orrs	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6999      	ldr	r1, [r3, #24]
 800a912:	2380      	movs	r3, #128	; 0x80
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	400b      	ands	r3, r1
 800a918:	431a      	orrs	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	2138      	movs	r1, #56	; 0x38
 800a920:	400b      	ands	r3, r1
 800a922:	431a      	orrs	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	2180      	movs	r1, #128	; 0x80
 800a92a:	400b      	ands	r3, r1
 800a92c:	431a      	orrs	r2, r3
 800a92e:	0011      	movs	r1, r2
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a934:	2380      	movs	r3, #128	; 0x80
 800a936:	019b      	lsls	r3, r3, #6
 800a938:	401a      	ands	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	0c1b      	lsrs	r3, r3, #16
 800a948:	2204      	movs	r2, #4
 800a94a:	4013      	ands	r3, r2
 800a94c:	0019      	movs	r1, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a952:	2210      	movs	r2, #16
 800a954:	401a      	ands	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	430a      	orrs	r2, r1
 800a95c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	69da      	ldr	r2, [r3, #28]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4907      	ldr	r1, [pc, #28]	; (800a988 <HAL_SPI_Init+0x124>)
 800a96a:	400a      	ands	r2, r1
 800a96c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2251      	movs	r2, #81	; 0x51
 800a978:	2101      	movs	r1, #1
 800a97a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	0018      	movs	r0, r3
 800a980:	46bd      	mov	sp, r7
 800a982:	b002      	add	sp, #8
 800a984:	bd80      	pop	{r7, pc}
 800a986:	46c0      	nop			; (mov r8, r8)
 800a988:	fffff7ff 	.word	0xfffff7ff

0800a98c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a994:	46c0      	nop			; (mov r8, r8)
 800a996:	46bd      	mov	sp, r7
 800a998:	b002      	add	sp, #8
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08c      	sub	sp, #48	; 0x30
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	001a      	movs	r2, r3
 800a9aa:	1cbb      	adds	r3, r7, #2
 800a9ac:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a9b2:	232b      	movs	r3, #43	; 0x2b
 800a9b4:	18fb      	adds	r3, r7, r3
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2250      	movs	r2, #80	; 0x50
 800a9be:	5c9b      	ldrb	r3, [r3, r2]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d101      	bne.n	800a9c8 <HAL_SPI_TransmitReceive+0x2c>
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e1a0      	b.n	800ad0a <HAL_SPI_TransmitReceive+0x36e>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2250      	movs	r2, #80	; 0x50
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9d0:	f7fb fd25 	bl	800641e <HAL_GetTick>
 800a9d4:	0003      	movs	r3, r0
 800a9d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a9d8:	2023      	movs	r0, #35	; 0x23
 800a9da:	183b      	adds	r3, r7, r0
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	2151      	movs	r1, #81	; 0x51
 800a9e0:	5c52      	ldrb	r2, [r2, r1]
 800a9e2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a9ea:	231a      	movs	r3, #26
 800a9ec:	18fb      	adds	r3, r7, r3
 800a9ee:	1cba      	adds	r2, r7, #2
 800a9f0:	8812      	ldrh	r2, [r2, #0]
 800a9f2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a9f4:	183b      	adds	r3, r7, r0
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d011      	beq.n	800aa20 <HAL_SPI_TransmitReceive+0x84>
 800a9fc:	69fa      	ldr	r2, [r7, #28]
 800a9fe:	2382      	movs	r3, #130	; 0x82
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d107      	bne.n	800aa16 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d103      	bne.n	800aa16 <HAL_SPI_TransmitReceive+0x7a>
 800aa0e:	183b      	adds	r3, r7, r0
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d004      	beq.n	800aa20 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800aa16:	232b      	movs	r3, #43	; 0x2b
 800aa18:	18fb      	adds	r3, r7, r3
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	701a      	strb	r2, [r3, #0]
    goto error;
 800aa1e:	e169      	b.n	800acf4 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d006      	beq.n	800aa34 <HAL_SPI_TransmitReceive+0x98>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d003      	beq.n	800aa34 <HAL_SPI_TransmitReceive+0x98>
 800aa2c:	1cbb      	adds	r3, r7, #2
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d104      	bne.n	800aa3e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800aa34:	232b      	movs	r3, #43	; 0x2b
 800aa36:	18fb      	adds	r3, r7, r3
 800aa38:	2201      	movs	r2, #1
 800aa3a:	701a      	strb	r2, [r3, #0]
    goto error;
 800aa3c:	e15a      	b.n	800acf4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2251      	movs	r2, #81	; 0x51
 800aa42:	5c9b      	ldrb	r3, [r3, r2]
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b04      	cmp	r3, #4
 800aa48:	d003      	beq.n	800aa52 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2251      	movs	r2, #81	; 0x51
 800aa4e:	2105      	movs	r1, #5
 800aa50:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1cba      	adds	r2, r7, #2
 800aa62:	8812      	ldrh	r2, [r2, #0]
 800aa64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	1cba      	adds	r2, r7, #2
 800aa6a:	8812      	ldrh	r2, [r2, #0]
 800aa6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	1cba      	adds	r2, r7, #2
 800aa78:	8812      	ldrh	r2, [r2, #0]
 800aa7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	1cba      	adds	r2, r7, #2
 800aa80:	8812      	ldrh	r2, [r2, #0]
 800aa82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2240      	movs	r2, #64	; 0x40
 800aa98:	4013      	ands	r3, r2
 800aa9a:	2b40      	cmp	r3, #64	; 0x40
 800aa9c:	d007      	beq.n	800aaae <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2140      	movs	r1, #64	; 0x40
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	68da      	ldr	r2, [r3, #12]
 800aab2:	2380      	movs	r3, #128	; 0x80
 800aab4:	011b      	lsls	r3, r3, #4
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d000      	beq.n	800aabc <HAL_SPI_TransmitReceive+0x120>
 800aaba:	e07a      	b.n	800abb2 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d004      	beq.n	800aace <HAL_SPI_TransmitReceive+0x132>
 800aac4:	231a      	movs	r3, #26
 800aac6:	18fb      	adds	r3, r7, r3
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d166      	bne.n	800ab9c <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad2:	881a      	ldrh	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aade:	1c9a      	adds	r2, r3, #2
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	3b01      	subs	r3, #1
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aaf2:	e053      	b.n	800ab9c <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	2202      	movs	r2, #2
 800aafc:	4013      	ands	r3, r2
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d11b      	bne.n	800ab3a <HAL_SPI_TransmitReceive+0x19e>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d016      	beq.n	800ab3a <HAL_SPI_TransmitReceive+0x19e>
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d113      	bne.n	800ab3a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab16:	881a      	ldrh	r2, [r3, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab22:	1c9a      	adds	r2, r3, #2
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	2201      	movs	r2, #1
 800ab42:	4013      	ands	r3, r2
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d119      	bne.n	800ab7c <HAL_SPI_TransmitReceive+0x1e0>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d014      	beq.n	800ab7c <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68da      	ldr	r2, [r3, #12]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5c:	b292      	uxth	r2, r2
 800ab5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab64:	1c9a      	adds	r2, r3, #2
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	3b01      	subs	r3, #1
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab7c:	f7fb fc4f 	bl	800641e <HAL_GetTick>
 800ab80:	0002      	movs	r2, r0
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d807      	bhi.n	800ab9c <HAL_SPI_TransmitReceive+0x200>
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8e:	3301      	adds	r3, #1
 800ab90:	d004      	beq.n	800ab9c <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800ab92:	232b      	movs	r3, #43	; 0x2b
 800ab94:	18fb      	adds	r3, r7, r3
 800ab96:	2203      	movs	r2, #3
 800ab98:	701a      	strb	r2, [r3, #0]
        goto error;
 800ab9a:	e0ab      	b.n	800acf4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1a6      	bne.n	800aaf4 <HAL_SPI_TransmitReceive+0x158>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abaa:	b29b      	uxth	r3, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1a1      	bne.n	800aaf4 <HAL_SPI_TransmitReceive+0x158>
 800abb0:	e07f      	b.n	800acb2 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d005      	beq.n	800abc6 <HAL_SPI_TransmitReceive+0x22a>
 800abba:	231a      	movs	r3, #26
 800abbc:	18fb      	adds	r3, r7, r3
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d000      	beq.n	800abc6 <HAL_SPI_TransmitReceive+0x22a>
 800abc4:	e06b      	b.n	800ac9e <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	330c      	adds	r3, #12
 800abd0:	7812      	ldrb	r2, [r2, #0]
 800abd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	3b01      	subs	r3, #1
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abec:	e057      	b.n	800ac9e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	2202      	movs	r2, #2
 800abf6:	4013      	ands	r3, r2
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d11c      	bne.n	800ac36 <HAL_SPI_TransmitReceive+0x29a>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d017      	beq.n	800ac36 <HAL_SPI_TransmitReceive+0x29a>
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d114      	bne.n	800ac36 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	330c      	adds	r3, #12
 800ac16:	7812      	ldrb	r2, [r2, #0]
 800ac18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	1c5a      	adds	r2, r3, #1
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	4013      	ands	r3, r2
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d119      	bne.n	800ac78 <HAL_SPI_TransmitReceive+0x2dc>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d014      	beq.n	800ac78 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68da      	ldr	r2, [r3, #12]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	b2d2      	uxtb	r2, r2
 800ac5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac60:	1c5a      	adds	r2, r3, #1
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac74:	2301      	movs	r3, #1
 800ac76:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac78:	f7fb fbd1 	bl	800641e <HAL_GetTick>
 800ac7c:	0002      	movs	r2, r0
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d802      	bhi.n	800ac8e <HAL_SPI_TransmitReceive+0x2f2>
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	d102      	bne.n	800ac94 <HAL_SPI_TransmitReceive+0x2f8>
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d104      	bne.n	800ac9e <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800ac94:	232b      	movs	r3, #43	; 0x2b
 800ac96:	18fb      	adds	r3, r7, r3
 800ac98:	2203      	movs	r2, #3
 800ac9a:	701a      	strb	r2, [r3, #0]
        goto error;
 800ac9c:	e02a      	b.n	800acf4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1a2      	bne.n	800abee <HAL_SPI_TransmitReceive+0x252>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acac:	b29b      	uxth	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d19d      	bne.n	800abee <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800acb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	0018      	movs	r0, r3
 800acba:	f000 f8c5 	bl	800ae48 <SPI_EndRxTxTransaction>
 800acbe:	1e03      	subs	r3, r0, #0
 800acc0:	d007      	beq.n	800acd2 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800acc2:	232b      	movs	r3, #43	; 0x2b
 800acc4:	18fb      	adds	r3, r7, r3
 800acc6:	2201      	movs	r2, #1
 800acc8:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2220      	movs	r2, #32
 800acce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800acd0:	e010      	b.n	800acf4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10b      	bne.n	800acf2 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acda:	2300      	movs	r3, #0
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	617b      	str	r3, [r7, #20]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	617b      	str	r3, [r7, #20]
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	e000      	b.n	800acf4 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800acf2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2251      	movs	r2, #81	; 0x51
 800acf8:	2101      	movs	r1, #1
 800acfa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2250      	movs	r2, #80	; 0x50
 800ad00:	2100      	movs	r1, #0
 800ad02:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ad04:	232b      	movs	r3, #43	; 0x2b
 800ad06:	18fb      	adds	r3, r7, r3
 800ad08:	781b      	ldrb	r3, [r3, #0]
}
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	b00c      	add	sp, #48	; 0x30
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2251      	movs	r2, #81	; 0x51
 800ad1e:	5c9b      	ldrb	r3, [r3, r2]
 800ad20:	b2db      	uxtb	r3, r3
}
 800ad22:	0018      	movs	r0, r3
 800ad24:	46bd      	mov	sp, r7
 800ad26:	b002      	add	sp, #8
 800ad28:	bd80      	pop	{r7, pc}
	...

0800ad2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	1dfb      	adds	r3, r7, #7
 800ad3a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad3c:	f7fb fb6f 	bl	800641e <HAL_GetTick>
 800ad40:	0002      	movs	r2, r0
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	1a9b      	subs	r3, r3, r2
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	18d3      	adds	r3, r2, r3
 800ad4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad4c:	f7fb fb67 	bl	800641e <HAL_GetTick>
 800ad50:	0003      	movs	r3, r0
 800ad52:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad54:	4b3a      	ldr	r3, [pc, #232]	; (800ae40 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	015b      	lsls	r3, r3, #5
 800ad5a:	0d1b      	lsrs	r3, r3, #20
 800ad5c:	69fa      	ldr	r2, [r7, #28]
 800ad5e:	4353      	muls	r3, r2
 800ad60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad62:	e058      	b.n	800ae16 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	3301      	adds	r3, #1
 800ad68:	d055      	beq.n	800ae16 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad6a:	f7fb fb58 	bl	800641e <HAL_GetTick>
 800ad6e:	0002      	movs	r2, r0
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	69fa      	ldr	r2, [r7, #28]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d902      	bls.n	800ad80 <SPI_WaitFlagStateUntilTimeout+0x54>
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d142      	bne.n	800ae06 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685a      	ldr	r2, [r3, #4]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	21e0      	movs	r1, #224	; 0xe0
 800ad8c:	438a      	bics	r2, r1
 800ad8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	2382      	movs	r3, #130	; 0x82
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d113      	bne.n	800adc4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	2380      	movs	r3, #128	; 0x80
 800ada2:	021b      	lsls	r3, r3, #8
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d005      	beq.n	800adb4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	2380      	movs	r3, #128	; 0x80
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d107      	bne.n	800adc4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2140      	movs	r1, #64	; 0x40
 800adc0:	438a      	bics	r2, r1
 800adc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adc8:	2380      	movs	r3, #128	; 0x80
 800adca:	019b      	lsls	r3, r3, #6
 800adcc:	429a      	cmp	r2, r3
 800adce:	d110      	bne.n	800adf2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	491a      	ldr	r1, [pc, #104]	; (800ae44 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800addc:	400a      	ands	r2, r1
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2180      	movs	r1, #128	; 0x80
 800adec:	0189      	lsls	r1, r1, #6
 800adee:	430a      	orrs	r2, r1
 800adf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2251      	movs	r2, #81	; 0x51
 800adf6:	2101      	movs	r1, #1
 800adf8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2250      	movs	r2, #80	; 0x50
 800adfe:	2100      	movs	r1, #0
 800ae00:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e017      	b.n	800ae36 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	3b01      	subs	r3, #1
 800ae14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	4013      	ands	r3, r2
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	425a      	negs	r2, r3
 800ae26:	4153      	adcs	r3, r2
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	001a      	movs	r2, r3
 800ae2c:	1dfb      	adds	r3, r7, #7
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d197      	bne.n	800ad64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	0018      	movs	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	b008      	add	sp, #32
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	20000084 	.word	0x20000084
 800ae44:	ffffdfff 	.word	0xffffdfff

0800ae48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b088      	sub	sp, #32
 800ae4c:	af02      	add	r7, sp, #8
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ae54:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <SPI_EndRxTxTransaction+0x84>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	491d      	ldr	r1, [pc, #116]	; (800aed0 <SPI_EndRxTxTransaction+0x88>)
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f7f5 f95c 	bl	8000118 <__udivsi3>
 800ae60:	0003      	movs	r3, r0
 800ae62:	001a      	movs	r2, r3
 800ae64:	0013      	movs	r3, r2
 800ae66:	015b      	lsls	r3, r3, #5
 800ae68:	1a9b      	subs	r3, r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	189b      	adds	r3, r3, r2
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	2382      	movs	r3, #130	; 0x82
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d112      	bne.n	800aea4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	0013      	movs	r3, r2
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2180      	movs	r1, #128	; 0x80
 800ae8c:	f7ff ff4e 	bl	800ad2c <SPI_WaitFlagStateUntilTimeout>
 800ae90:	1e03      	subs	r3, r0, #0
 800ae92:	d016      	beq.n	800aec2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae98:	2220      	movs	r2, #32
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e00f      	b.n	800aec4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	2280      	movs	r2, #128	; 0x80
 800aeb8:	4013      	ands	r3, r2
 800aeba:	2b80      	cmp	r3, #128	; 0x80
 800aebc:	d0f2      	beq.n	800aea4 <SPI_EndRxTxTransaction+0x5c>
 800aebe:	e000      	b.n	800aec2 <SPI_EndRxTxTransaction+0x7a>
        break;
 800aec0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	0018      	movs	r0, r3
 800aec6:	46bd      	mov	sp, r7
 800aec8:	b006      	add	sp, #24
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	20000084 	.word	0x20000084
 800aed0:	016e3600 	.word	0x016e3600

0800aed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e044      	b.n	800af70 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d107      	bne.n	800aefe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2274      	movs	r2, #116	; 0x74
 800aef2:	2100      	movs	r1, #0
 800aef4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	0018      	movs	r0, r3
 800aefa:	f7fb fb15 	bl	8006528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2224      	movs	r2, #36	; 0x24
 800af02:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2101      	movs	r1, #1
 800af10:	438a      	bics	r2, r1
 800af12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	0018      	movs	r0, r3
 800af18:	f000 fb3a 	bl	800b590 <UART_SetConfig>
 800af1c:	0003      	movs	r3, r0
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d101      	bne.n	800af26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e024      	b.n	800af70 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	0018      	movs	r0, r3
 800af32:	f000 fdeb 	bl	800bb0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	490d      	ldr	r1, [pc, #52]	; (800af78 <HAL_UART_Init+0xa4>)
 800af42:	400a      	ands	r2, r1
 800af44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	689a      	ldr	r2, [r3, #8]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	212a      	movs	r1, #42	; 0x2a
 800af52:	438a      	bics	r2, r1
 800af54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2101      	movs	r1, #1
 800af62:	430a      	orrs	r2, r1
 800af64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	0018      	movs	r0, r3
 800af6a:	f000 fe83 	bl	800bc74 <UART_CheckIdleState>
 800af6e:	0003      	movs	r3, r0
}
 800af70:	0018      	movs	r0, r3
 800af72:	46bd      	mov	sp, r7
 800af74:	b002      	add	sp, #8
 800af76:	bd80      	pop	{r7, pc}
 800af78:	ffffb7ff 	.word	0xffffb7ff

0800af7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	1dbb      	adds	r3, r7, #6
 800af88:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af8e:	2b20      	cmp	r3, #32
 800af90:	d144      	bne.n	800b01c <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <HAL_UART_Receive_IT+0x24>
 800af98:	1dbb      	adds	r3, r7, #6
 800af9a:	881b      	ldrh	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e03c      	b.n	800b01e <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	2380      	movs	r3, #128	; 0x80
 800afaa:	015b      	lsls	r3, r3, #5
 800afac:	429a      	cmp	r2, r3
 800afae:	d109      	bne.n	800afc4 <HAL_UART_Receive_IT+0x48>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d105      	bne.n	800afc4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2201      	movs	r2, #1
 800afbc:	4013      	ands	r3, r2
 800afbe:	d001      	beq.n	800afc4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	e02c      	b.n	800b01e <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2274      	movs	r2, #116	; 0x74
 800afc8:	5c9b      	ldrb	r3, [r3, r2]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d101      	bne.n	800afd2 <HAL_UART_Receive_IT+0x56>
 800afce:	2302      	movs	r3, #2
 800afd0:	e025      	b.n	800b01e <HAL_UART_Receive_IT+0xa2>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2274      	movs	r2, #116	; 0x74
 800afd6:	2101      	movs	r1, #1
 800afd8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a10      	ldr	r2, [pc, #64]	; (800b028 <HAL_UART_Receive_IT+0xac>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d00f      	beq.n	800b00a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	2380      	movs	r3, #128	; 0x80
 800aff2:	041b      	lsls	r3, r3, #16
 800aff4:	4013      	ands	r3, r2
 800aff6:	d008      	beq.n	800b00a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2180      	movs	r1, #128	; 0x80
 800b004:	04c9      	lsls	r1, r1, #19
 800b006:	430a      	orrs	r2, r1
 800b008:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b00a:	1dbb      	adds	r3, r7, #6
 800b00c:	881a      	ldrh	r2, [r3, #0]
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	0018      	movs	r0, r3
 800b014:	f000 fef4 	bl	800be00 <UART_Start_Receive_IT>
 800b018:	0003      	movs	r3, r0
 800b01a:	e000      	b.n	800b01e <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800b01c:	2302      	movs	r3, #2
  }
}
 800b01e:	0018      	movs	r0, r3
 800b020:	46bd      	mov	sp, r7
 800b022:	b004      	add	sp, #16
 800b024:	bd80      	pop	{r7, pc}
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	40004800 	.word	0x40004800

0800b02c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	1dbb      	adds	r3, r7, #6
 800b038:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b03e:	2b20      	cmp	r3, #32
 800b040:	d000      	beq.n	800b044 <HAL_UART_Transmit_DMA+0x18>
 800b042:	e079      	b.n	800b138 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_UART_Transmit_DMA+0x26>
 800b04a:	1dbb      	adds	r3, r7, #6
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e071      	b.n	800b13a <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	689a      	ldr	r2, [r3, #8]
 800b05a:	2380      	movs	r3, #128	; 0x80
 800b05c:	015b      	lsls	r3, r3, #5
 800b05e:	429a      	cmp	r2, r3
 800b060:	d109      	bne.n	800b076 <HAL_UART_Transmit_DMA+0x4a>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d105      	bne.n	800b076 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2201      	movs	r2, #1
 800b06e:	4013      	ands	r3, r2
 800b070:	d001      	beq.n	800b076 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	e061      	b.n	800b13a <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2274      	movs	r2, #116	; 0x74
 800b07a:	5c9b      	ldrb	r3, [r3, r2]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d101      	bne.n	800b084 <HAL_UART_Transmit_DMA+0x58>
 800b080:	2302      	movs	r3, #2
 800b082:	e05a      	b.n	800b13a <HAL_UART_Transmit_DMA+0x10e>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2274      	movs	r2, #116	; 0x74
 800b088:	2101      	movs	r1, #1
 800b08a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1dba      	adds	r2, r7, #6
 800b096:	2150      	movs	r1, #80	; 0x50
 800b098:	8812      	ldrh	r2, [r2, #0]
 800b09a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	1dba      	adds	r2, r7, #6
 800b0a0:	2152      	movs	r1, #82	; 0x52
 800b0a2:	8812      	ldrh	r2, [r2, #0]
 800b0a4:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2280      	movs	r2, #128	; 0x80
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2221      	movs	r2, #33	; 0x21
 800b0b2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d02b      	beq.n	800b114 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0c0:	4a20      	ldr	r2, [pc, #128]	; (800b144 <HAL_UART_Transmit_DMA+0x118>)
 800b0c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0c8:	4a1f      	ldr	r2, [pc, #124]	; (800b148 <HAL_UART_Transmit_DMA+0x11c>)
 800b0ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d0:	4a1e      	ldr	r2, [pc, #120]	; (800b14c <HAL_UART_Transmit_DMA+0x120>)
 800b0d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d8:	2200      	movs	r2, #0
 800b0da:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0e4:	0019      	movs	r1, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3328      	adds	r3, #40	; 0x28
 800b0ec:	001a      	movs	r2, r3
 800b0ee:	1dbb      	adds	r3, r7, #6
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	f7fd f8c5 	bl	8008280 <HAL_DMA_Start_IT>
 800b0f6:	1e03      	subs	r3, r0, #0
 800b0f8:	d00c      	beq.n	800b114 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2280      	movs	r2, #128	; 0x80
 800b0fe:	2110      	movs	r1, #16
 800b100:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2274      	movs	r2, #116	; 0x74
 800b106:	2100      	movs	r1, #0
 800b108:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2220      	movs	r2, #32
 800b10e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e012      	b.n	800b13a <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2240      	movs	r2, #64	; 0x40
 800b11a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2274      	movs	r2, #116	; 0x74
 800b120:	2100      	movs	r1, #0
 800b122:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	689a      	ldr	r2, [r3, #8]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2180      	movs	r1, #128	; 0x80
 800b130:	430a      	orrs	r2, r1
 800b132:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	e000      	b.n	800b13a <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b138:	2302      	movs	r3, #2
  }
}
 800b13a:	0018      	movs	r0, r3
 800b13c:	46bd      	mov	sp, r7
 800b13e:	b004      	add	sp, #16
 800b140:	bd80      	pop	{r7, pc}
 800b142:	46c0      	nop			; (mov r8, r8)
 800b144:	0800bfa5 	.word	0x0800bfa5
 800b148:	0800bff9 	.word	0x0800bff9
 800b14c:	0800c017 	.word	0x0800c017

0800b150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	4ab5      	ldr	r2, [pc, #724]	; (800b448 <HAL_UART_IRQHandler+0x2f8>)
 800b174:	4013      	ands	r3, r2
 800b176:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d112      	bne.n	800b1a4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	2220      	movs	r2, #32
 800b182:	4013      	ands	r3, r2
 800b184:	d00e      	beq.n	800b1a4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	2220      	movs	r2, #32
 800b18a:	4013      	ands	r3, r2
 800b18c:	d00a      	beq.n	800b1a4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b192:	2b00      	cmp	r3, #0
 800b194:	d100      	bne.n	800b198 <HAL_UART_IRQHandler+0x48>
 800b196:	e1d1      	b.n	800b53c <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	0010      	movs	r0, r2
 800b1a0:	4798      	blx	r3
      }
      return;
 800b1a2:	e1cb      	b.n	800b53c <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d100      	bne.n	800b1ac <HAL_UART_IRQHandler+0x5c>
 800b1aa:	e0d9      	b.n	800b360 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	d104      	bne.n	800b1be <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	4aa5      	ldr	r2, [pc, #660]	; (800b44c <HAL_UART_IRQHandler+0x2fc>)
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	d100      	bne.n	800b1be <HAL_UART_IRQHandler+0x6e>
 800b1bc:	e0d0      	b.n	800b360 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	d010      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x98>
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	2380      	movs	r3, #128	; 0x80
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	d00b      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2280      	movs	r2, #128	; 0x80
 800b1dc:	589b      	ldr	r3, [r3, r2]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2180      	movs	r1, #128	; 0x80
 800b1e6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	d00f      	beq.n	800b210 <HAL_UART_IRQHandler+0xc0>
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	d00b      	beq.n	800b210 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2280      	movs	r2, #128	; 0x80
 800b204:	589b      	ldr	r3, [r3, r2]
 800b206:	2204      	movs	r2, #4
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2180      	movs	r1, #128	; 0x80
 800b20e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	2204      	movs	r2, #4
 800b214:	4013      	ands	r3, r2
 800b216:	d00f      	beq.n	800b238 <HAL_UART_IRQHandler+0xe8>
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	2201      	movs	r2, #1
 800b21c:	4013      	ands	r3, r2
 800b21e:	d00b      	beq.n	800b238 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2204      	movs	r2, #4
 800b226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2280      	movs	r2, #128	; 0x80
 800b22c:	589b      	ldr	r3, [r3, r2]
 800b22e:	2202      	movs	r2, #2
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2180      	movs	r1, #128	; 0x80
 800b236:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	2208      	movs	r2, #8
 800b23c:	4013      	ands	r3, r2
 800b23e:	d013      	beq.n	800b268 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	2220      	movs	r2, #32
 800b244:	4013      	ands	r3, r2
 800b246:	d103      	bne.n	800b250 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2201      	movs	r2, #1
 800b24c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b24e:	d00b      	beq.n	800b268 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2208      	movs	r2, #8
 800b256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2280      	movs	r2, #128	; 0x80
 800b25c:	589b      	ldr	r3, [r3, r2]
 800b25e:	2208      	movs	r2, #8
 800b260:	431a      	orrs	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2180      	movs	r1, #128	; 0x80
 800b266:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b268:	69fa      	ldr	r2, [r7, #28]
 800b26a:	2380      	movs	r3, #128	; 0x80
 800b26c:	011b      	lsls	r3, r3, #4
 800b26e:	4013      	ands	r3, r2
 800b270:	d011      	beq.n	800b296 <HAL_UART_IRQHandler+0x146>
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	2380      	movs	r3, #128	; 0x80
 800b276:	04db      	lsls	r3, r3, #19
 800b278:	4013      	ands	r3, r2
 800b27a:	d00c      	beq.n	800b296 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2280      	movs	r2, #128	; 0x80
 800b282:	0112      	lsls	r2, r2, #4
 800b284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2280      	movs	r2, #128	; 0x80
 800b28a:	589b      	ldr	r3, [r3, r2]
 800b28c:	2220      	movs	r2, #32
 800b28e:	431a      	orrs	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2180      	movs	r1, #128	; 0x80
 800b294:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2280      	movs	r2, #128	; 0x80
 800b29a:	589b      	ldr	r3, [r3, r2]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d100      	bne.n	800b2a2 <HAL_UART_IRQHandler+0x152>
 800b2a0:	e14e      	b.n	800b540 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	2220      	movs	r2, #32
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	d00c      	beq.n	800b2c4 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	d008      	beq.n	800b2c4 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d004      	beq.n	800b2c4 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	0010      	movs	r0, r2
 800b2c2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2280      	movs	r2, #128	; 0x80
 800b2c8:	589b      	ldr	r3, [r3, r2]
 800b2ca:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	2240      	movs	r2, #64	; 0x40
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	2b40      	cmp	r3, #64	; 0x40
 800b2d8:	d003      	beq.n	800b2e2 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2228      	movs	r2, #40	; 0x28
 800b2de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2e0:	d033      	beq.n	800b34a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f000 fe2d 	bl	800bf44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	2240      	movs	r2, #64	; 0x40
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	2b40      	cmp	r3, #64	; 0x40
 800b2f6:	d123      	bne.n	800b340 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	689a      	ldr	r2, [r3, #8]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2140      	movs	r1, #64	; 0x40
 800b304:	438a      	bics	r2, r1
 800b306:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d012      	beq.n	800b336 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b314:	4a4e      	ldr	r2, [pc, #312]	; (800b450 <HAL_UART_IRQHandler+0x300>)
 800b316:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b31c:	0018      	movs	r0, r3
 800b31e:	f7fd f855 	bl	80083cc <HAL_DMA_Abort_IT>
 800b322:	1e03      	subs	r3, r0, #0
 800b324:	d01a      	beq.n	800b35c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b32a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b330:	0018      	movs	r0, r3
 800b332:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b334:	e012      	b.n	800b35c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	0018      	movs	r0, r3
 800b33a:	f000 f915 	bl	800b568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b33e:	e00d      	b.n	800b35c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	0018      	movs	r0, r3
 800b344:	f000 f910 	bl	800b568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b348:	e008      	b.n	800b35c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	0018      	movs	r0, r3
 800b34e:	f000 f90b 	bl	800b568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2280      	movs	r2, #128	; 0x80
 800b356:	2100      	movs	r1, #0
 800b358:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b35a:	e0f1      	b.n	800b540 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b35c:	46c0      	nop			; (mov r8, r8)
    return;
 800b35e:	e0ef      	b.n	800b540 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b364:	2b01      	cmp	r3, #1
 800b366:	d000      	beq.n	800b36a <HAL_UART_IRQHandler+0x21a>
 800b368:	e0b5      	b.n	800b4d6 <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	2210      	movs	r2, #16
 800b36e:	4013      	ands	r3, r2
 800b370:	d100      	bne.n	800b374 <HAL_UART_IRQHandler+0x224>
 800b372:	e0b0      	b.n	800b4d6 <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	2210      	movs	r2, #16
 800b378:	4013      	ands	r3, r2
 800b37a:	d100      	bne.n	800b37e <HAL_UART_IRQHandler+0x22e>
 800b37c:	e0ab      	b.n	800b4d6 <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2210      	movs	r2, #16
 800b384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	2240      	movs	r2, #64	; 0x40
 800b38e:	4013      	ands	r3, r2
 800b390:	2b40      	cmp	r3, #64	; 0x40
 800b392:	d161      	bne.n	800b458 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	2108      	movs	r1, #8
 800b39e:	187b      	adds	r3, r7, r1
 800b3a0:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800b3a2:	187b      	adds	r3, r7, r1
 800b3a4:	881b      	ldrh	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d100      	bne.n	800b3ac <HAL_UART_IRQHandler+0x25c>
 800b3aa:	e0cb      	b.n	800b544 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2258      	movs	r2, #88	; 0x58
 800b3b0:	5a9b      	ldrh	r3, [r3, r2]
 800b3b2:	187a      	adds	r2, r7, r1
 800b3b4:	8812      	ldrh	r2, [r2, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d300      	bcc.n	800b3bc <HAL_UART_IRQHandler+0x26c>
 800b3ba:	e0c3      	b.n	800b544 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	187a      	adds	r2, r7, r1
 800b3c0:	215a      	movs	r1, #90	; 0x5a
 800b3c2:	8812      	ldrh	r2, [r2, #0]
 800b3c4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	d12a      	bne.n	800b42a <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	491d      	ldr	r1, [pc, #116]	; (800b454 <HAL_UART_IRQHandler+0x304>)
 800b3e0:	400a      	ands	r2, r1
 800b3e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	689a      	ldr	r2, [r3, #8]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	438a      	bics	r2, r1
 800b3f2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	689a      	ldr	r2, [r3, #8]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2140      	movs	r1, #64	; 0x40
 800b400:	438a      	bics	r2, r1
 800b402:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2220      	movs	r2, #32
 800b408:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2110      	movs	r1, #16
 800b41c:	438a      	bics	r2, r1
 800b41e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b424:	0018      	movs	r0, r3
 800b426:	f7fc ff91 	bl	800834c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2258      	movs	r2, #88	; 0x58
 800b42e:	5a9a      	ldrh	r2, [r3, r2]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	215a      	movs	r1, #90	; 0x5a
 800b434:	5a5b      	ldrh	r3, [r3, r1]
 800b436:	b29b      	uxth	r3, r3
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	0011      	movs	r1, r2
 800b440:	0018      	movs	r0, r3
 800b442:	f000 f899 	bl	800b578 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b446:	e07d      	b.n	800b544 <HAL_UART_IRQHandler+0x3f4>
 800b448:	0000080f 	.word	0x0000080f
 800b44c:	04000120 	.word	0x04000120
 800b450:	0800c099 	.word	0x0800c099
 800b454:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2258      	movs	r2, #88	; 0x58
 800b45c:	5a99      	ldrh	r1, [r3, r2]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	225a      	movs	r2, #90	; 0x5a
 800b462:	5a9b      	ldrh	r3, [r3, r2]
 800b464:	b29a      	uxth	r2, r3
 800b466:	200a      	movs	r0, #10
 800b468:	183b      	adds	r3, r7, r0
 800b46a:	1a8a      	subs	r2, r1, r2
 800b46c:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	225a      	movs	r2, #90	; 0x5a
 800b472:	5a9b      	ldrh	r3, [r3, r2]
 800b474:	b29b      	uxth	r3, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	d100      	bne.n	800b47c <HAL_UART_IRQHandler+0x32c>
 800b47a:	e065      	b.n	800b548 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800b47c:	183b      	adds	r3, r7, r0
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d061      	beq.n	800b548 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4931      	ldr	r1, [pc, #196]	; (800b554 <HAL_UART_IRQHandler+0x404>)
 800b490:	400a      	ands	r2, r1
 800b492:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2101      	movs	r1, #1
 800b4a0:	438a      	bics	r2, r1
 800b4a2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2110      	movs	r1, #16
 800b4c2:	438a      	bics	r2, r1
 800b4c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4c6:	183b      	adds	r3, r7, r0
 800b4c8:	881a      	ldrh	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	0011      	movs	r1, r2
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	f000 f852 	bl	800b578 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b4d4:	e038      	b.n	800b548 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4d6:	69fa      	ldr	r2, [r7, #28]
 800b4d8:	2380      	movs	r3, #128	; 0x80
 800b4da:	035b      	lsls	r3, r3, #13
 800b4dc:	4013      	ands	r3, r2
 800b4de:	d00e      	beq.n	800b4fe <HAL_UART_IRQHandler+0x3ae>
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	2380      	movs	r3, #128	; 0x80
 800b4e4:	03db      	lsls	r3, r3, #15
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	d009      	beq.n	800b4fe <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2280      	movs	r2, #128	; 0x80
 800b4f0:	0352      	lsls	r2, r2, #13
 800b4f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	f000 fee8 	bl	800c2cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4fc:	e027      	b.n	800b54e <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	2280      	movs	r2, #128	; 0x80
 800b502:	4013      	ands	r3, r2
 800b504:	d00d      	beq.n	800b522 <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	2280      	movs	r2, #128	; 0x80
 800b50a:	4013      	ands	r3, r2
 800b50c:	d009      	beq.n	800b522 <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b512:	2b00      	cmp	r3, #0
 800b514:	d01a      	beq.n	800b54c <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	0010      	movs	r0, r2
 800b51e:	4798      	blx	r3
    }
    return;
 800b520:	e014      	b.n	800b54c <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	2240      	movs	r2, #64	; 0x40
 800b526:	4013      	ands	r3, r2
 800b528:	d011      	beq.n	800b54e <HAL_UART_IRQHandler+0x3fe>
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	2240      	movs	r2, #64	; 0x40
 800b52e:	4013      	ands	r3, r2
 800b530:	d00d      	beq.n	800b54e <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	0018      	movs	r0, r3
 800b536:	f000 fdc6 	bl	800c0c6 <UART_EndTransmit_IT>
    return;
 800b53a:	e008      	b.n	800b54e <HAL_UART_IRQHandler+0x3fe>
      return;
 800b53c:	46c0      	nop			; (mov r8, r8)
 800b53e:	e006      	b.n	800b54e <HAL_UART_IRQHandler+0x3fe>
    return;
 800b540:	46c0      	nop			; (mov r8, r8)
 800b542:	e004      	b.n	800b54e <HAL_UART_IRQHandler+0x3fe>
      return;
 800b544:	46c0      	nop			; (mov r8, r8)
 800b546:	e002      	b.n	800b54e <HAL_UART_IRQHandler+0x3fe>
      return;
 800b548:	46c0      	nop			; (mov r8, r8)
 800b54a:	e000      	b.n	800b54e <HAL_UART_IRQHandler+0x3fe>
    return;
 800b54c:	46c0      	nop			; (mov r8, r8)
  }

}
 800b54e:	46bd      	mov	sp, r7
 800b550:	b008      	add	sp, #32
 800b552:	bd80      	pop	{r7, pc}
 800b554:	fffffedf 	.word	0xfffffedf

0800b558 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b560:	46c0      	nop			; (mov r8, r8)
 800b562:	46bd      	mov	sp, r7
 800b564:	b002      	add	sp, #8
 800b566:	bd80      	pop	{r7, pc}

0800b568 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b570:	46c0      	nop			; (mov r8, r8)
 800b572:	46bd      	mov	sp, r7
 800b574:	b002      	add	sp, #8
 800b576:	bd80      	pop	{r7, pc}

0800b578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	000a      	movs	r2, r1
 800b582:	1cbb      	adds	r3, r7, #2
 800b584:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b586:	46c0      	nop			; (mov r8, r8)
 800b588:	46bd      	mov	sp, r7
 800b58a:	b002      	add	sp, #8
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b590:	b5b0      	push	{r4, r5, r7, lr}
 800b592:	b08e      	sub	sp, #56	; 0x38
 800b594:	af00      	add	r7, sp, #0
 800b596:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b598:	231a      	movs	r3, #26
 800b59a:	2218      	movs	r2, #24
 800b59c:	4694      	mov	ip, r2
 800b59e:	44bc      	add	ip, r7
 800b5a0:	4463      	add	r3, ip
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	689a      	ldr	r2, [r3, #8]
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	431a      	orrs	r2, r3
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	431a      	orrs	r2, r3
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4ab0      	ldr	r2, [pc, #704]	; (800b888 <UART_SetConfig+0x2f8>)
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	0019      	movs	r1, r3
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d0:	430a      	orrs	r2, r1
 800b5d2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	4aac      	ldr	r2, [pc, #688]	; (800b88c <UART_SetConfig+0x2fc>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	0019      	movs	r1, r3
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	68da      	ldr	r2, [r3, #12]
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4aa6      	ldr	r2, [pc, #664]	; (800b890 <UART_SetConfig+0x300>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d004      	beq.n	800b606 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	6a1b      	ldr	r3, [r3, #32]
 800b600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b602:	4313      	orrs	r3, r2
 800b604:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	4aa1      	ldr	r2, [pc, #644]	; (800b894 <UART_SetConfig+0x304>)
 800b60e:	4013      	ands	r3, r2
 800b610:	0019      	movs	r1, r3
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b618:	430a      	orrs	r2, r1
 800b61a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a9d      	ldr	r2, [pc, #628]	; (800b898 <UART_SetConfig+0x308>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d136      	bne.n	800b694 <UART_SetConfig+0x104>
 800b626:	4b9d      	ldr	r3, [pc, #628]	; (800b89c <UART_SetConfig+0x30c>)
 800b628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b62a:	2203      	movs	r2, #3
 800b62c:	4013      	ands	r3, r2
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d020      	beq.n	800b674 <UART_SetConfig+0xe4>
 800b632:	d827      	bhi.n	800b684 <UART_SetConfig+0xf4>
 800b634:	2b02      	cmp	r3, #2
 800b636:	d00d      	beq.n	800b654 <UART_SetConfig+0xc4>
 800b638:	d824      	bhi.n	800b684 <UART_SetConfig+0xf4>
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <UART_SetConfig+0xb4>
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d010      	beq.n	800b664 <UART_SetConfig+0xd4>
 800b642:	e01f      	b.n	800b684 <UART_SetConfig+0xf4>
 800b644:	231b      	movs	r3, #27
 800b646:	2218      	movs	r2, #24
 800b648:	4694      	mov	ip, r2
 800b64a:	44bc      	add	ip, r7
 800b64c:	4463      	add	r3, ip
 800b64e:	2201      	movs	r2, #1
 800b650:	701a      	strb	r2, [r3, #0]
 800b652:	e0c5      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b654:	231b      	movs	r3, #27
 800b656:	2218      	movs	r2, #24
 800b658:	4694      	mov	ip, r2
 800b65a:	44bc      	add	ip, r7
 800b65c:	4463      	add	r3, ip
 800b65e:	2202      	movs	r2, #2
 800b660:	701a      	strb	r2, [r3, #0]
 800b662:	e0bd      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b664:	231b      	movs	r3, #27
 800b666:	2218      	movs	r2, #24
 800b668:	4694      	mov	ip, r2
 800b66a:	44bc      	add	ip, r7
 800b66c:	4463      	add	r3, ip
 800b66e:	2204      	movs	r2, #4
 800b670:	701a      	strb	r2, [r3, #0]
 800b672:	e0b5      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b674:	231b      	movs	r3, #27
 800b676:	2218      	movs	r2, #24
 800b678:	4694      	mov	ip, r2
 800b67a:	44bc      	add	ip, r7
 800b67c:	4463      	add	r3, ip
 800b67e:	2208      	movs	r2, #8
 800b680:	701a      	strb	r2, [r3, #0]
 800b682:	e0ad      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b684:	231b      	movs	r3, #27
 800b686:	2218      	movs	r2, #24
 800b688:	4694      	mov	ip, r2
 800b68a:	44bc      	add	ip, r7
 800b68c:	4463      	add	r3, ip
 800b68e:	2210      	movs	r2, #16
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	e0a5      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a81      	ldr	r2, [pc, #516]	; (800b8a0 <UART_SetConfig+0x310>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d136      	bne.n	800b70c <UART_SetConfig+0x17c>
 800b69e:	4b7f      	ldr	r3, [pc, #508]	; (800b89c <UART_SetConfig+0x30c>)
 800b6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6a2:	220c      	movs	r2, #12
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	2b0c      	cmp	r3, #12
 800b6a8:	d020      	beq.n	800b6ec <UART_SetConfig+0x15c>
 800b6aa:	d827      	bhi.n	800b6fc <UART_SetConfig+0x16c>
 800b6ac:	2b08      	cmp	r3, #8
 800b6ae:	d00d      	beq.n	800b6cc <UART_SetConfig+0x13c>
 800b6b0:	d824      	bhi.n	800b6fc <UART_SetConfig+0x16c>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d002      	beq.n	800b6bc <UART_SetConfig+0x12c>
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d010      	beq.n	800b6dc <UART_SetConfig+0x14c>
 800b6ba:	e01f      	b.n	800b6fc <UART_SetConfig+0x16c>
 800b6bc:	231b      	movs	r3, #27
 800b6be:	2218      	movs	r2, #24
 800b6c0:	4694      	mov	ip, r2
 800b6c2:	44bc      	add	ip, r7
 800b6c4:	4463      	add	r3, ip
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	e089      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b6cc:	231b      	movs	r3, #27
 800b6ce:	2218      	movs	r2, #24
 800b6d0:	4694      	mov	ip, r2
 800b6d2:	44bc      	add	ip, r7
 800b6d4:	4463      	add	r3, ip
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	701a      	strb	r2, [r3, #0]
 800b6da:	e081      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b6dc:	231b      	movs	r3, #27
 800b6de:	2218      	movs	r2, #24
 800b6e0:	4694      	mov	ip, r2
 800b6e2:	44bc      	add	ip, r7
 800b6e4:	4463      	add	r3, ip
 800b6e6:	2204      	movs	r2, #4
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	e079      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b6ec:	231b      	movs	r3, #27
 800b6ee:	2218      	movs	r2, #24
 800b6f0:	4694      	mov	ip, r2
 800b6f2:	44bc      	add	ip, r7
 800b6f4:	4463      	add	r3, ip
 800b6f6:	2208      	movs	r2, #8
 800b6f8:	701a      	strb	r2, [r3, #0]
 800b6fa:	e071      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b6fc:	231b      	movs	r3, #27
 800b6fe:	2218      	movs	r2, #24
 800b700:	4694      	mov	ip, r2
 800b702:	44bc      	add	ip, r7
 800b704:	4463      	add	r3, ip
 800b706:	2210      	movs	r2, #16
 800b708:	701a      	strb	r2, [r3, #0]
 800b70a:	e069      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a64      	ldr	r2, [pc, #400]	; (800b8a4 <UART_SetConfig+0x314>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d107      	bne.n	800b726 <UART_SetConfig+0x196>
 800b716:	231b      	movs	r3, #27
 800b718:	2218      	movs	r2, #24
 800b71a:	4694      	mov	ip, r2
 800b71c:	44bc      	add	ip, r7
 800b71e:	4463      	add	r3, ip
 800b720:	2200      	movs	r2, #0
 800b722:	701a      	strb	r2, [r3, #0]
 800b724:	e05c      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a5f      	ldr	r2, [pc, #380]	; (800b8a8 <UART_SetConfig+0x318>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d107      	bne.n	800b740 <UART_SetConfig+0x1b0>
 800b730:	231b      	movs	r3, #27
 800b732:	2218      	movs	r2, #24
 800b734:	4694      	mov	ip, r2
 800b736:	44bc      	add	ip, r7
 800b738:	4463      	add	r3, ip
 800b73a:	2200      	movs	r2, #0
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	e04f      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a52      	ldr	r2, [pc, #328]	; (800b890 <UART_SetConfig+0x300>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d143      	bne.n	800b7d2 <UART_SetConfig+0x242>
 800b74a:	4b54      	ldr	r3, [pc, #336]	; (800b89c <UART_SetConfig+0x30c>)
 800b74c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b74e:	23c0      	movs	r3, #192	; 0xc0
 800b750:	011b      	lsls	r3, r3, #4
 800b752:	4013      	ands	r3, r2
 800b754:	22c0      	movs	r2, #192	; 0xc0
 800b756:	0112      	lsls	r2, r2, #4
 800b758:	4293      	cmp	r3, r2
 800b75a:	d02a      	beq.n	800b7b2 <UART_SetConfig+0x222>
 800b75c:	22c0      	movs	r2, #192	; 0xc0
 800b75e:	0112      	lsls	r2, r2, #4
 800b760:	4293      	cmp	r3, r2
 800b762:	d82e      	bhi.n	800b7c2 <UART_SetConfig+0x232>
 800b764:	2280      	movs	r2, #128	; 0x80
 800b766:	0112      	lsls	r2, r2, #4
 800b768:	4293      	cmp	r3, r2
 800b76a:	d012      	beq.n	800b792 <UART_SetConfig+0x202>
 800b76c:	2280      	movs	r2, #128	; 0x80
 800b76e:	0112      	lsls	r2, r2, #4
 800b770:	4293      	cmp	r3, r2
 800b772:	d826      	bhi.n	800b7c2 <UART_SetConfig+0x232>
 800b774:	2b00      	cmp	r3, #0
 800b776:	d004      	beq.n	800b782 <UART_SetConfig+0x1f2>
 800b778:	2280      	movs	r2, #128	; 0x80
 800b77a:	00d2      	lsls	r2, r2, #3
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d010      	beq.n	800b7a2 <UART_SetConfig+0x212>
 800b780:	e01f      	b.n	800b7c2 <UART_SetConfig+0x232>
 800b782:	231b      	movs	r3, #27
 800b784:	2218      	movs	r2, #24
 800b786:	4694      	mov	ip, r2
 800b788:	44bc      	add	ip, r7
 800b78a:	4463      	add	r3, ip
 800b78c:	2200      	movs	r2, #0
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	e026      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b792:	231b      	movs	r3, #27
 800b794:	2218      	movs	r2, #24
 800b796:	4694      	mov	ip, r2
 800b798:	44bc      	add	ip, r7
 800b79a:	4463      	add	r3, ip
 800b79c:	2202      	movs	r2, #2
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	e01e      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b7a2:	231b      	movs	r3, #27
 800b7a4:	2218      	movs	r2, #24
 800b7a6:	4694      	mov	ip, r2
 800b7a8:	44bc      	add	ip, r7
 800b7aa:	4463      	add	r3, ip
 800b7ac:	2204      	movs	r2, #4
 800b7ae:	701a      	strb	r2, [r3, #0]
 800b7b0:	e016      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b7b2:	231b      	movs	r3, #27
 800b7b4:	2218      	movs	r2, #24
 800b7b6:	4694      	mov	ip, r2
 800b7b8:	44bc      	add	ip, r7
 800b7ba:	4463      	add	r3, ip
 800b7bc:	2208      	movs	r2, #8
 800b7be:	701a      	strb	r2, [r3, #0]
 800b7c0:	e00e      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b7c2:	231b      	movs	r3, #27
 800b7c4:	2218      	movs	r2, #24
 800b7c6:	4694      	mov	ip, r2
 800b7c8:	44bc      	add	ip, r7
 800b7ca:	4463      	add	r3, ip
 800b7cc:	2210      	movs	r2, #16
 800b7ce:	701a      	strb	r2, [r3, #0]
 800b7d0:	e006      	b.n	800b7e0 <UART_SetConfig+0x250>
 800b7d2:	231b      	movs	r3, #27
 800b7d4:	2218      	movs	r2, #24
 800b7d6:	4694      	mov	ip, r2
 800b7d8:	44bc      	add	ip, r7
 800b7da:	4463      	add	r3, ip
 800b7dc:	2210      	movs	r2, #16
 800b7de:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a2a      	ldr	r2, [pc, #168]	; (800b890 <UART_SetConfig+0x300>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d000      	beq.n	800b7ec <UART_SetConfig+0x25c>
 800b7ea:	e09e      	b.n	800b92a <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7ec:	231b      	movs	r3, #27
 800b7ee:	2218      	movs	r2, #24
 800b7f0:	4694      	mov	ip, r2
 800b7f2:	44bc      	add	ip, r7
 800b7f4:	4463      	add	r3, ip
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d01d      	beq.n	800b838 <UART_SetConfig+0x2a8>
 800b7fc:	dc20      	bgt.n	800b840 <UART_SetConfig+0x2b0>
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	d015      	beq.n	800b82e <UART_SetConfig+0x29e>
 800b802:	dc1d      	bgt.n	800b840 <UART_SetConfig+0x2b0>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d002      	beq.n	800b80e <UART_SetConfig+0x27e>
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d005      	beq.n	800b818 <UART_SetConfig+0x288>
 800b80c:	e018      	b.n	800b840 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b80e:	f7fe f8b7 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800b812:	0003      	movs	r3, r0
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b816:	e01d      	b.n	800b854 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b818:	4b20      	ldr	r3, [pc, #128]	; (800b89c <UART_SetConfig+0x30c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2210      	movs	r2, #16
 800b81e:	4013      	ands	r3, r2
 800b820:	d002      	beq.n	800b828 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b822:	4b22      	ldr	r3, [pc, #136]	; (800b8ac <UART_SetConfig+0x31c>)
 800b824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b826:	e015      	b.n	800b854 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800b828:	4b21      	ldr	r3, [pc, #132]	; (800b8b0 <UART_SetConfig+0x320>)
 800b82a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b82c:	e012      	b.n	800b854 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b82e:	f7fd fff7 	bl	8009820 <HAL_RCC_GetSysClockFreq>
 800b832:	0003      	movs	r3, r0
 800b834:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b836:	e00d      	b.n	800b854 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b838:	2380      	movs	r3, #128	; 0x80
 800b83a:	021b      	lsls	r3, r3, #8
 800b83c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b83e:	e009      	b.n	800b854 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800b840:	2300      	movs	r3, #0
 800b842:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b844:	231a      	movs	r3, #26
 800b846:	2218      	movs	r2, #24
 800b848:	4694      	mov	ip, r2
 800b84a:	44bc      	add	ip, r7
 800b84c:	4463      	add	r3, ip
 800b84e:	2201      	movs	r2, #1
 800b850:	701a      	strb	r2, [r3, #0]
        break;
 800b852:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b856:	2b00      	cmp	r3, #0
 800b858:	d100      	bne.n	800b85c <UART_SetConfig+0x2cc>
 800b85a:	e13c      	b.n	800bad6 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	0013      	movs	r3, r2
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	189b      	adds	r3, r3, r2
 800b866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b868:	429a      	cmp	r2, r3
 800b86a:	d305      	bcc.n	800b878 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b874:	429a      	cmp	r2, r3
 800b876:	d91d      	bls.n	800b8b4 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800b878:	231a      	movs	r3, #26
 800b87a:	2218      	movs	r2, #24
 800b87c:	4694      	mov	ip, r2
 800b87e:	44bc      	add	ip, r7
 800b880:	4463      	add	r3, ip
 800b882:	2201      	movs	r2, #1
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	e126      	b.n	800bad6 <UART_SetConfig+0x546>
 800b888:	efff69f3 	.word	0xefff69f3
 800b88c:	ffffcfff 	.word	0xffffcfff
 800b890:	40004800 	.word	0x40004800
 800b894:	fffff4ff 	.word	0xfffff4ff
 800b898:	40013800 	.word	0x40013800
 800b89c:	40021000 	.word	0x40021000
 800b8a0:	40004400 	.word	0x40004400
 800b8a4:	40004c00 	.word	0x40004c00
 800b8a8:	40005000 	.word	0x40005000
 800b8ac:	003d0900 	.word	0x003d0900
 800b8b0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b6:	613b      	str	r3, [r7, #16]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	6939      	ldr	r1, [r7, #16]
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	000b      	movs	r3, r1
 800b8c2:	0e1b      	lsrs	r3, r3, #24
 800b8c4:	0010      	movs	r0, r2
 800b8c6:	0205      	lsls	r5, r0, #8
 800b8c8:	431d      	orrs	r5, r3
 800b8ca:	000b      	movs	r3, r1
 800b8cc:	021c      	lsls	r4, r3, #8
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	085b      	lsrs	r3, r3, #1
 800b8d4:	60bb      	str	r3, [r7, #8]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	68b8      	ldr	r0, [r7, #8]
 800b8dc:	68f9      	ldr	r1, [r7, #12]
 800b8de:	1900      	adds	r0, r0, r4
 800b8e0:	4169      	adcs	r1, r5
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	607b      	str	r3, [r7, #4]
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f7f4 fdc6 	bl	8000480 <__aeabi_uldivmod>
 800b8f4:	0002      	movs	r2, r0
 800b8f6:	000b      	movs	r3, r1
 800b8f8:	0013      	movs	r3, r2
 800b8fa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b8fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8fe:	23c0      	movs	r3, #192	; 0xc0
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	429a      	cmp	r2, r3
 800b904:	d309      	bcc.n	800b91a <UART_SetConfig+0x38a>
 800b906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b908:	2380      	movs	r3, #128	; 0x80
 800b90a:	035b      	lsls	r3, r3, #13
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d204      	bcs.n	800b91a <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b916:	60da      	str	r2, [r3, #12]
 800b918:	e0dd      	b.n	800bad6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800b91a:	231a      	movs	r3, #26
 800b91c:	2218      	movs	r2, #24
 800b91e:	4694      	mov	ip, r2
 800b920:	44bc      	add	ip, r7
 800b922:	4463      	add	r3, ip
 800b924:	2201      	movs	r2, #1
 800b926:	701a      	strb	r2, [r3, #0]
 800b928:	e0d5      	b.n	800bad6 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	69da      	ldr	r2, [r3, #28]
 800b92e:	2380      	movs	r3, #128	; 0x80
 800b930:	021b      	lsls	r3, r3, #8
 800b932:	429a      	cmp	r2, r3
 800b934:	d000      	beq.n	800b938 <UART_SetConfig+0x3a8>
 800b936:	e074      	b.n	800ba22 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800b938:	231b      	movs	r3, #27
 800b93a:	2218      	movs	r2, #24
 800b93c:	4694      	mov	ip, r2
 800b93e:	44bc      	add	ip, r7
 800b940:	4463      	add	r3, ip
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b08      	cmp	r3, #8
 800b946:	d822      	bhi.n	800b98e <UART_SetConfig+0x3fe>
 800b948:	009a      	lsls	r2, r3, #2
 800b94a:	4b6b      	ldr	r3, [pc, #428]	; (800baf8 <UART_SetConfig+0x568>)
 800b94c:	18d3      	adds	r3, r2, r3
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b952:	f7fe f815 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800b956:	0003      	movs	r3, r0
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b95a:	e022      	b.n	800b9a2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b95c:	f7fe f826 	bl	80099ac <HAL_RCC_GetPCLK2Freq>
 800b960:	0003      	movs	r3, r0
 800b962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b964:	e01d      	b.n	800b9a2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b966:	4b65      	ldr	r3, [pc, #404]	; (800bafc <UART_SetConfig+0x56c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2210      	movs	r2, #16
 800b96c:	4013      	ands	r3, r2
 800b96e:	d002      	beq.n	800b976 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b970:	4b63      	ldr	r3, [pc, #396]	; (800bb00 <UART_SetConfig+0x570>)
 800b972:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b974:	e015      	b.n	800b9a2 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800b976:	4b63      	ldr	r3, [pc, #396]	; (800bb04 <UART_SetConfig+0x574>)
 800b978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b97a:	e012      	b.n	800b9a2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b97c:	f7fd ff50 	bl	8009820 <HAL_RCC_GetSysClockFreq>
 800b980:	0003      	movs	r3, r0
 800b982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b984:	e00d      	b.n	800b9a2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b986:	2380      	movs	r3, #128	; 0x80
 800b988:	021b      	lsls	r3, r3, #8
 800b98a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b98c:	e009      	b.n	800b9a2 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b992:	231a      	movs	r3, #26
 800b994:	2218      	movs	r2, #24
 800b996:	4694      	mov	ip, r2
 800b998:	44bc      	add	ip, r7
 800b99a:	4463      	add	r3, ip
 800b99c:	2201      	movs	r2, #1
 800b99e:	701a      	strb	r2, [r3, #0]
        break;
 800b9a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d100      	bne.n	800b9aa <UART_SetConfig+0x41a>
 800b9a8:	e095      	b.n	800bad6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ac:	005a      	lsls	r2, r3, #1
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	085b      	lsrs	r3, r3, #1
 800b9b4:	18d2      	adds	r2, r2, r3
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	0019      	movs	r1, r3
 800b9bc:	0010      	movs	r0, r2
 800b9be:	f7f4 fbab 	bl	8000118 <__udivsi3>
 800b9c2:	0003      	movs	r3, r0
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	2b0f      	cmp	r3, #15
 800b9cc:	d921      	bls.n	800ba12 <UART_SetConfig+0x482>
 800b9ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9d0:	2380      	movs	r3, #128	; 0x80
 800b9d2:	025b      	lsls	r3, r3, #9
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d21c      	bcs.n	800ba12 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	200e      	movs	r0, #14
 800b9de:	2418      	movs	r4, #24
 800b9e0:	193b      	adds	r3, r7, r4
 800b9e2:	181b      	adds	r3, r3, r0
 800b9e4:	210f      	movs	r1, #15
 800b9e6:	438a      	bics	r2, r1
 800b9e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	085b      	lsrs	r3, r3, #1
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	2207      	movs	r2, #7
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	b299      	uxth	r1, r3
 800b9f6:	193b      	adds	r3, r7, r4
 800b9f8:	181b      	adds	r3, r3, r0
 800b9fa:	193a      	adds	r2, r7, r4
 800b9fc:	1812      	adds	r2, r2, r0
 800b9fe:	8812      	ldrh	r2, [r2, #0]
 800ba00:	430a      	orrs	r2, r1
 800ba02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	193a      	adds	r2, r7, r4
 800ba0a:	1812      	adds	r2, r2, r0
 800ba0c:	8812      	ldrh	r2, [r2, #0]
 800ba0e:	60da      	str	r2, [r3, #12]
 800ba10:	e061      	b.n	800bad6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800ba12:	231a      	movs	r3, #26
 800ba14:	2218      	movs	r2, #24
 800ba16:	4694      	mov	ip, r2
 800ba18:	44bc      	add	ip, r7
 800ba1a:	4463      	add	r3, ip
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	701a      	strb	r2, [r3, #0]
 800ba20:	e059      	b.n	800bad6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ba22:	231b      	movs	r3, #27
 800ba24:	2218      	movs	r2, #24
 800ba26:	4694      	mov	ip, r2
 800ba28:	44bc      	add	ip, r7
 800ba2a:	4463      	add	r3, ip
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	2b08      	cmp	r3, #8
 800ba30:	d822      	bhi.n	800ba78 <UART_SetConfig+0x4e8>
 800ba32:	009a      	lsls	r2, r3, #2
 800ba34:	4b34      	ldr	r3, [pc, #208]	; (800bb08 <UART_SetConfig+0x578>)
 800ba36:	18d3      	adds	r3, r2, r3
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba3c:	f7fd ffa0 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800ba40:	0003      	movs	r3, r0
 800ba42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba44:	e022      	b.n	800ba8c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba46:	f7fd ffb1 	bl	80099ac <HAL_RCC_GetPCLK2Freq>
 800ba4a:	0003      	movs	r3, r0
 800ba4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba4e:	e01d      	b.n	800ba8c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba50:	4b2a      	ldr	r3, [pc, #168]	; (800bafc <UART_SetConfig+0x56c>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2210      	movs	r2, #16
 800ba56:	4013      	ands	r3, r2
 800ba58:	d002      	beq.n	800ba60 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ba5a:	4b29      	ldr	r3, [pc, #164]	; (800bb00 <UART_SetConfig+0x570>)
 800ba5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba5e:	e015      	b.n	800ba8c <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800ba60:	4b28      	ldr	r3, [pc, #160]	; (800bb04 <UART_SetConfig+0x574>)
 800ba62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba64:	e012      	b.n	800ba8c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba66:	f7fd fedb 	bl	8009820 <HAL_RCC_GetSysClockFreq>
 800ba6a:	0003      	movs	r3, r0
 800ba6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba6e:	e00d      	b.n	800ba8c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba70:	2380      	movs	r3, #128	; 0x80
 800ba72:	021b      	lsls	r3, r3, #8
 800ba74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba76:	e009      	b.n	800ba8c <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ba7c:	231a      	movs	r3, #26
 800ba7e:	2218      	movs	r2, #24
 800ba80:	4694      	mov	ip, r2
 800ba82:	44bc      	add	ip, r7
 800ba84:	4463      	add	r3, ip
 800ba86:	2201      	movs	r2, #1
 800ba88:	701a      	strb	r2, [r3, #0]
        break;
 800ba8a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d021      	beq.n	800bad6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	085a      	lsrs	r2, r3, #1
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	18d2      	adds	r2, r2, r3
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	0019      	movs	r1, r3
 800baa2:	0010      	movs	r0, r2
 800baa4:	f7f4 fb38 	bl	8000118 <__udivsi3>
 800baa8:	0003      	movs	r3, r0
 800baaa:	b29b      	uxth	r3, r3
 800baac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	2b0f      	cmp	r3, #15
 800bab2:	d909      	bls.n	800bac8 <UART_SetConfig+0x538>
 800bab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bab6:	2380      	movs	r3, #128	; 0x80
 800bab8:	025b      	lsls	r3, r3, #9
 800baba:	429a      	cmp	r2, r3
 800babc:	d204      	bcs.n	800bac8 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bac4:	60da      	str	r2, [r3, #12]
 800bac6:	e006      	b.n	800bad6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800bac8:	231a      	movs	r3, #26
 800baca:	2218      	movs	r2, #24
 800bacc:	4694      	mov	ip, r2
 800bace:	44bc      	add	ip, r7
 800bad0:	4463      	add	r3, ip
 800bad2:	2201      	movs	r2, #1
 800bad4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	2200      	movs	r2, #0
 800bada:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	2200      	movs	r2, #0
 800bae0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bae2:	231a      	movs	r3, #26
 800bae4:	2218      	movs	r2, #24
 800bae6:	4694      	mov	ip, r2
 800bae8:	44bc      	add	ip, r7
 800baea:	4463      	add	r3, ip
 800baec:	781b      	ldrb	r3, [r3, #0]
}
 800baee:	0018      	movs	r0, r3
 800baf0:	46bd      	mov	sp, r7
 800baf2:	b00e      	add	sp, #56	; 0x38
 800baf4:	bdb0      	pop	{r4, r5, r7, pc}
 800baf6:	46c0      	nop			; (mov r8, r8)
 800baf8:	08020b24 	.word	0x08020b24
 800bafc:	40021000 	.word	0x40021000
 800bb00:	003d0900 	.word	0x003d0900
 800bb04:	00f42400 	.word	0x00f42400
 800bb08:	08020b48 	.word	0x08020b48

0800bb0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	2201      	movs	r2, #1
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	d00b      	beq.n	800bb36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	4a4a      	ldr	r2, [pc, #296]	; (800bc50 <UART_AdvFeatureConfig+0x144>)
 800bb26:	4013      	ands	r3, r2
 800bb28:	0019      	movs	r1, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	430a      	orrs	r2, r1
 800bb34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	d00b      	beq.n	800bb58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	4a43      	ldr	r2, [pc, #268]	; (800bc54 <UART_AdvFeatureConfig+0x148>)
 800bb48:	4013      	ands	r3, r2
 800bb4a:	0019      	movs	r1, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	430a      	orrs	r2, r1
 800bb56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	2204      	movs	r2, #4
 800bb5e:	4013      	ands	r3, r2
 800bb60:	d00b      	beq.n	800bb7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	4a3b      	ldr	r2, [pc, #236]	; (800bc58 <UART_AdvFeatureConfig+0x14c>)
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	0019      	movs	r1, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7e:	2208      	movs	r2, #8
 800bb80:	4013      	ands	r3, r2
 800bb82:	d00b      	beq.n	800bb9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	4a34      	ldr	r2, [pc, #208]	; (800bc5c <UART_AdvFeatureConfig+0x150>)
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	0019      	movs	r1, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	430a      	orrs	r2, r1
 800bb9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba0:	2210      	movs	r2, #16
 800bba2:	4013      	ands	r3, r2
 800bba4:	d00b      	beq.n	800bbbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	4a2c      	ldr	r2, [pc, #176]	; (800bc60 <UART_AdvFeatureConfig+0x154>)
 800bbae:	4013      	ands	r3, r2
 800bbb0:	0019      	movs	r1, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	d00b      	beq.n	800bbe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	4a25      	ldr	r2, [pc, #148]	; (800bc64 <UART_AdvFeatureConfig+0x158>)
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	0019      	movs	r1, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	430a      	orrs	r2, r1
 800bbde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe4:	2240      	movs	r2, #64	; 0x40
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	d01d      	beq.n	800bc26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	4a1d      	ldr	r2, [pc, #116]	; (800bc68 <UART_AdvFeatureConfig+0x15c>)
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	0019      	movs	r1, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	430a      	orrs	r2, r1
 800bc00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc06:	2380      	movs	r3, #128	; 0x80
 800bc08:	035b      	lsls	r3, r3, #13
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d10b      	bne.n	800bc26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	4a15      	ldr	r2, [pc, #84]	; (800bc6c <UART_AdvFeatureConfig+0x160>)
 800bc16:	4013      	ands	r3, r2
 800bc18:	0019      	movs	r1, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	430a      	orrs	r2, r1
 800bc24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	2280      	movs	r2, #128	; 0x80
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	d00b      	beq.n	800bc48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	4a0e      	ldr	r2, [pc, #56]	; (800bc70 <UART_AdvFeatureConfig+0x164>)
 800bc38:	4013      	ands	r3, r2
 800bc3a:	0019      	movs	r1, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	430a      	orrs	r2, r1
 800bc46:	605a      	str	r2, [r3, #4]
  }
}
 800bc48:	46c0      	nop			; (mov r8, r8)
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	b002      	add	sp, #8
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	fffdffff 	.word	0xfffdffff
 800bc54:	fffeffff 	.word	0xfffeffff
 800bc58:	fffbffff 	.word	0xfffbffff
 800bc5c:	ffff7fff 	.word	0xffff7fff
 800bc60:	ffffefff 	.word	0xffffefff
 800bc64:	ffffdfff 	.word	0xffffdfff
 800bc68:	ffefffff 	.word	0xffefffff
 800bc6c:	ff9fffff 	.word	0xff9fffff
 800bc70:	fff7ffff 	.word	0xfff7ffff

0800bc74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af02      	add	r7, sp, #8
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2280      	movs	r2, #128	; 0x80
 800bc80:	2100      	movs	r1, #0
 800bc82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc84:	f7fa fbcb 	bl	800641e <HAL_GetTick>
 800bc88:	0003      	movs	r3, r0
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2208      	movs	r2, #8
 800bc94:	4013      	ands	r3, r2
 800bc96:	2b08      	cmp	r3, #8
 800bc98:	d10c      	bne.n	800bcb4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2280      	movs	r2, #128	; 0x80
 800bc9e:	0391      	lsls	r1, r2, #14
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	4a17      	ldr	r2, [pc, #92]	; (800bd00 <UART_CheckIdleState+0x8c>)
 800bca4:	9200      	str	r2, [sp, #0]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f000 f82c 	bl	800bd04 <UART_WaitOnFlagUntilTimeout>
 800bcac:	1e03      	subs	r3, r0, #0
 800bcae:	d001      	beq.n	800bcb4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e021      	b.n	800bcf8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2204      	movs	r2, #4
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	2b04      	cmp	r3, #4
 800bcc0:	d10c      	bne.n	800bcdc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2280      	movs	r2, #128	; 0x80
 800bcc6:	03d1      	lsls	r1, r2, #15
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	4a0d      	ldr	r2, [pc, #52]	; (800bd00 <UART_CheckIdleState+0x8c>)
 800bccc:	9200      	str	r2, [sp, #0]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f000 f818 	bl	800bd04 <UART_WaitOnFlagUntilTimeout>
 800bcd4:	1e03      	subs	r3, r0, #0
 800bcd6:	d001      	beq.n	800bcdc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e00d      	b.n	800bcf8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2220      	movs	r2, #32
 800bce0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2220      	movs	r2, #32
 800bce6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2274      	movs	r2, #116	; 0x74
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	0018      	movs	r0, r3
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	b004      	add	sp, #16
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	01ffffff 	.word	0x01ffffff

0800bd04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	603b      	str	r3, [r7, #0]
 800bd10:	1dfb      	adds	r3, r7, #7
 800bd12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd14:	e05e      	b.n	800bdd4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	d05b      	beq.n	800bdd4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd1c:	f7fa fb7f 	bl	800641e <HAL_GetTick>
 800bd20:	0002      	movs	r2, r0
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	69ba      	ldr	r2, [r7, #24]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d302      	bcc.n	800bd32 <UART_WaitOnFlagUntilTimeout+0x2e>
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d11b      	bne.n	800bd6a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	492f      	ldr	r1, [pc, #188]	; (800bdfc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bd3e:	400a      	ands	r2, r1
 800bd40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	689a      	ldr	r2, [r3, #8]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	438a      	bics	r2, r1
 800bd50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2220      	movs	r2, #32
 800bd56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2220      	movs	r2, #32
 800bd5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2274      	movs	r2, #116	; 0x74
 800bd62:	2100      	movs	r1, #0
 800bd64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bd66:	2303      	movs	r3, #3
 800bd68:	e044      	b.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2204      	movs	r2, #4
 800bd72:	4013      	ands	r3, r2
 800bd74:	d02e      	beq.n	800bdd4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	69da      	ldr	r2, [r3, #28]
 800bd7c:	2380      	movs	r3, #128	; 0x80
 800bd7e:	011b      	lsls	r3, r3, #4
 800bd80:	401a      	ands	r2, r3
 800bd82:	2380      	movs	r3, #128	; 0x80
 800bd84:	011b      	lsls	r3, r3, #4
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d124      	bne.n	800bdd4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2280      	movs	r2, #128	; 0x80
 800bd90:	0112      	lsls	r2, r2, #4
 800bd92:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4917      	ldr	r1, [pc, #92]	; (800bdfc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bda0:	400a      	ands	r2, r1
 800bda2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	689a      	ldr	r2, [r3, #8]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2101      	movs	r1, #1
 800bdb0:	438a      	bics	r2, r1
 800bdb2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2220      	movs	r2, #32
 800bdb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2220      	movs	r2, #32
 800bdbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2280      	movs	r2, #128	; 0x80
 800bdc4:	2120      	movs	r1, #32
 800bdc6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2274      	movs	r2, #116	; 0x74
 800bdcc:	2100      	movs	r1, #0
 800bdce:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	e00f      	b.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	69db      	ldr	r3, [r3, #28]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	4013      	ands	r3, r2
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	425a      	negs	r2, r3
 800bde4:	4153      	adcs	r3, r2
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	001a      	movs	r2, r3
 800bdea:	1dfb      	adds	r3, r7, #7
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d091      	beq.n	800bd16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	0018      	movs	r0, r3
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	b004      	add	sp, #16
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	fffffe5f 	.word	0xfffffe5f

0800be00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	1dbb      	adds	r3, r7, #6
 800be0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	1dba      	adds	r2, r7, #6
 800be18:	2158      	movs	r1, #88	; 0x58
 800be1a:	8812      	ldrh	r2, [r2, #0]
 800be1c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	1dba      	adds	r2, r7, #6
 800be22:	215a      	movs	r1, #90	; 0x5a
 800be24:	8812      	ldrh	r2, [r2, #0]
 800be26:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	2380      	movs	r3, #128	; 0x80
 800be34:	015b      	lsls	r3, r3, #5
 800be36:	429a      	cmp	r2, r3
 800be38:	d10d      	bne.n	800be56 <UART_Start_Receive_IT+0x56>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d104      	bne.n	800be4c <UART_Start_Receive_IT+0x4c>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	225c      	movs	r2, #92	; 0x5c
 800be46:	4932      	ldr	r1, [pc, #200]	; (800bf10 <UART_Start_Receive_IT+0x110>)
 800be48:	5299      	strh	r1, [r3, r2]
 800be4a:	e02e      	b.n	800beaa <UART_Start_Receive_IT+0xaa>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	225c      	movs	r2, #92	; 0x5c
 800be50:	21ff      	movs	r1, #255	; 0xff
 800be52:	5299      	strh	r1, [r3, r2]
 800be54:	e029      	b.n	800beaa <UART_Start_Receive_IT+0xaa>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10d      	bne.n	800be7a <UART_Start_Receive_IT+0x7a>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d104      	bne.n	800be70 <UART_Start_Receive_IT+0x70>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	225c      	movs	r2, #92	; 0x5c
 800be6a:	21ff      	movs	r1, #255	; 0xff
 800be6c:	5299      	strh	r1, [r3, r2]
 800be6e:	e01c      	b.n	800beaa <UART_Start_Receive_IT+0xaa>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	225c      	movs	r2, #92	; 0x5c
 800be74:	217f      	movs	r1, #127	; 0x7f
 800be76:	5299      	strh	r1, [r3, r2]
 800be78:	e017      	b.n	800beaa <UART_Start_Receive_IT+0xaa>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	689a      	ldr	r2, [r3, #8]
 800be7e:	2380      	movs	r3, #128	; 0x80
 800be80:	055b      	lsls	r3, r3, #21
 800be82:	429a      	cmp	r2, r3
 800be84:	d10d      	bne.n	800bea2 <UART_Start_Receive_IT+0xa2>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d104      	bne.n	800be98 <UART_Start_Receive_IT+0x98>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	225c      	movs	r2, #92	; 0x5c
 800be92:	217f      	movs	r1, #127	; 0x7f
 800be94:	5299      	strh	r1, [r3, r2]
 800be96:	e008      	b.n	800beaa <UART_Start_Receive_IT+0xaa>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	225c      	movs	r2, #92	; 0x5c
 800be9c:	213f      	movs	r1, #63	; 0x3f
 800be9e:	5299      	strh	r1, [r3, r2]
 800bea0:	e003      	b.n	800beaa <UART_Start_Receive_IT+0xaa>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	225c      	movs	r2, #92	; 0x5c
 800bea6:	2100      	movs	r1, #0
 800bea8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2280      	movs	r2, #128	; 0x80
 800beae:	2100      	movs	r1, #0
 800beb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2222      	movs	r2, #34	; 0x22
 800beb6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	689a      	ldr	r2, [r3, #8]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2101      	movs	r1, #1
 800bec4:	430a      	orrs	r2, r1
 800bec6:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	689a      	ldr	r2, [r3, #8]
 800becc:	2380      	movs	r3, #128	; 0x80
 800bece:	015b      	lsls	r3, r3, #5
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d107      	bne.n	800bee4 <UART_Start_Receive_IT+0xe4>
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d103      	bne.n	800bee4 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4a0d      	ldr	r2, [pc, #52]	; (800bf14 <UART_Start_Receive_IT+0x114>)
 800bee0:	665a      	str	r2, [r3, #100]	; 0x64
 800bee2:	e002      	b.n	800beea <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	4a0c      	ldr	r2, [pc, #48]	; (800bf18 <UART_Start_Receive_IT+0x118>)
 800bee8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2274      	movs	r2, #116	; 0x74
 800beee:	2100      	movs	r1, #0
 800bef0:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2190      	movs	r1, #144	; 0x90
 800befe:	0049      	lsls	r1, r1, #1
 800bf00:	430a      	orrs	r2, r1
 800bf02:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	0018      	movs	r0, r3
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	b004      	add	sp, #16
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	46c0      	nop			; (mov r8, r8)
 800bf10:	000001ff 	.word	0x000001ff
 800bf14:	0800c1e5 	.word	0x0800c1e5
 800bf18:	0800c0fd 	.word	0x0800c0fd

0800bf1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	21c0      	movs	r1, #192	; 0xc0
 800bf30:	438a      	bics	r2, r1
 800bf32:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2220      	movs	r2, #32
 800bf38:	679a      	str	r2, [r3, #120]	; 0x78
}
 800bf3a:	46c0      	nop			; (mov r8, r8)
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	b002      	add	sp, #8
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4912      	ldr	r1, [pc, #72]	; (800bfa0 <UART_EndRxTransfer+0x5c>)
 800bf58:	400a      	ands	r2, r1
 800bf5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689a      	ldr	r2, [r3, #8]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2101      	movs	r1, #1
 800bf68:	438a      	bics	r2, r1
 800bf6a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d107      	bne.n	800bf84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2110      	movs	r1, #16
 800bf80:	438a      	bics	r2, r1
 800bf82:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2220      	movs	r2, #32
 800bf88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bf96:	46c0      	nop			; (mov r8, r8)
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	b002      	add	sp, #8
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	46c0      	nop			; (mov r8, r8)
 800bfa0:	fffffedf 	.word	0xfffffedf

0800bfa4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	4013      	ands	r3, r2
 800bfbc:	d114      	bne.n	800bfe8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2252      	movs	r2, #82	; 0x52
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	689a      	ldr	r2, [r3, #8]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2180      	movs	r1, #128	; 0x80
 800bfd2:	438a      	bics	r2, r1
 800bfd4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2140      	movs	r1, #64	; 0x40
 800bfe2:	430a      	orrs	r2, r1
 800bfe4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bfe6:	e003      	b.n	800bff0 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	0018      	movs	r0, r3
 800bfec:	f7fa fbfa 	bl	80067e4 <HAL_UART_TxCpltCallback>
}
 800bff0:	46c0      	nop			; (mov r8, r8)
 800bff2:	46bd      	mov	sp, r7
 800bff4:	b004      	add	sp, #16
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c004:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	0018      	movs	r0, r3
 800c00a:	f7ff faa5 	bl	800b558 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	46bd      	mov	sp, r7
 800c012:	b004      	add	sp, #16
 800c014:	bd80      	pop	{r7, pc}

0800c016 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b086      	sub	sp, #24
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c022:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c028:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	2280      	movs	r2, #128	; 0x80
 800c038:	4013      	ands	r3, r2
 800c03a:	2b80      	cmp	r3, #128	; 0x80
 800c03c:	d10a      	bne.n	800c054 <UART_DMAError+0x3e>
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	2b21      	cmp	r3, #33	; 0x21
 800c042:	d107      	bne.n	800c054 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	2252      	movs	r2, #82	; 0x52
 800c048:	2100      	movs	r1, #0
 800c04a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	0018      	movs	r0, r3
 800c050:	f7ff ff64 	bl	800bf1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	2240      	movs	r2, #64	; 0x40
 800c05c:	4013      	ands	r3, r2
 800c05e:	2b40      	cmp	r3, #64	; 0x40
 800c060:	d10a      	bne.n	800c078 <UART_DMAError+0x62>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2b22      	cmp	r3, #34	; 0x22
 800c066:	d107      	bne.n	800c078 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	225a      	movs	r2, #90	; 0x5a
 800c06c:	2100      	movs	r1, #0
 800c06e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	0018      	movs	r0, r3
 800c074:	f7ff ff66 	bl	800bf44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	2280      	movs	r2, #128	; 0x80
 800c07c:	589b      	ldr	r3, [r3, r2]
 800c07e:	2210      	movs	r2, #16
 800c080:	431a      	orrs	r2, r3
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2180      	movs	r1, #128	; 0x80
 800c086:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	0018      	movs	r0, r3
 800c08c:	f7ff fa6c 	bl	800b568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c090:	46c0      	nop			; (mov r8, r8)
 800c092:	46bd      	mov	sp, r7
 800c094:	b006      	add	sp, #24
 800c096:	bd80      	pop	{r7, pc}

0800c098 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	225a      	movs	r2, #90	; 0x5a
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2252      	movs	r2, #82	; 0x52
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	0018      	movs	r0, r3
 800c0ba:	f7ff fa55 	bl	800b568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0be:	46c0      	nop			; (mov r8, r8)
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	b004      	add	sp, #16
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2140      	movs	r1, #64	; 0x40
 800c0da:	438a      	bics	r2, r1
 800c0dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2220      	movs	r2, #32
 800c0e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	f7fa fb79 	bl	80067e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0f2:	46c0      	nop			; (mov r8, r8)
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	b002      	add	sp, #8
 800c0f8:	bd80      	pop	{r7, pc}
	...

0800c0fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c104:	200e      	movs	r0, #14
 800c106:	183b      	adds	r3, r7, r0
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	215c      	movs	r1, #92	; 0x5c
 800c10c:	5a52      	ldrh	r2, [r2, r1]
 800c10e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c114:	2b22      	cmp	r3, #34	; 0x22
 800c116:	d157      	bne.n	800c1c8 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c11e:	210c      	movs	r1, #12
 800c120:	187b      	adds	r3, r7, r1
 800c122:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c124:	187b      	adds	r3, r7, r1
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	183b      	adds	r3, r7, r0
 800c12c:	881b      	ldrh	r3, [r3, #0]
 800c12e:	b2d9      	uxtb	r1, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c134:	400a      	ands	r2, r1
 800c136:	b2d2      	uxtb	r2, r2
 800c138:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	225a      	movs	r2, #90	; 0x5a
 800c148:	5a9b      	ldrh	r3, [r3, r2]
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	3b01      	subs	r3, #1
 800c14e:	b299      	uxth	r1, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	225a      	movs	r2, #90	; 0x5a
 800c154:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	225a      	movs	r2, #90	; 0x5a
 800c15a:	5a9b      	ldrh	r3, [r3, r2]
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d13a      	bne.n	800c1d8 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	491c      	ldr	r1, [pc, #112]	; (800c1e0 <UART_RxISR_8BIT+0xe4>)
 800c16e:	400a      	ands	r2, r1
 800c170:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	689a      	ldr	r2, [r3, #8]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2101      	movs	r1, #1
 800c17e:	438a      	bics	r2, r1
 800c180:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2220      	movs	r2, #32
 800c186:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c192:	2b01      	cmp	r3, #1
 800c194:	d110      	bne.n	800c1b8 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2110      	movs	r1, #16
 800c1a2:	438a      	bics	r2, r1
 800c1a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2258      	movs	r2, #88	; 0x58
 800c1aa:	5a9a      	ldrh	r2, [r3, r2]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	0011      	movs	r1, r2
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	f7ff f9e1 	bl	800b578 <HAL_UARTEx_RxEventCallback>
 800c1b6:	e003      	b.n	800c1c0 <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	0018      	movs	r0, r3
 800c1bc:	f7fa fb20 	bl	8006800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1c6:	e007      	b.n	800c1d8 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	699a      	ldr	r2, [r3, #24]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2108      	movs	r1, #8
 800c1d4:	430a      	orrs	r2, r1
 800c1d6:	619a      	str	r2, [r3, #24]
}
 800c1d8:	46c0      	nop			; (mov r8, r8)
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	b004      	add	sp, #16
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	fffffedf 	.word	0xfffffedf

0800c1e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c1ec:	200e      	movs	r0, #14
 800c1ee:	183b      	adds	r3, r7, r0
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	215c      	movs	r1, #92	; 0x5c
 800c1f4:	5a52      	ldrh	r2, [r2, r1]
 800c1f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1fc:	2b22      	cmp	r3, #34	; 0x22
 800c1fe:	d157      	bne.n	800c2b0 <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c206:	210c      	movs	r1, #12
 800c208:	187b      	adds	r3, r7, r1
 800c20a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c210:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c212:	187b      	adds	r3, r7, r1
 800c214:	183a      	adds	r2, r7, r0
 800c216:	881b      	ldrh	r3, [r3, #0]
 800c218:	8812      	ldrh	r2, [r2, #0]
 800c21a:	4013      	ands	r3, r2
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c226:	1c9a      	adds	r2, r3, #2
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	225a      	movs	r2, #90	; 0x5a
 800c230:	5a9b      	ldrh	r3, [r3, r2]
 800c232:	b29b      	uxth	r3, r3
 800c234:	3b01      	subs	r3, #1
 800c236:	b299      	uxth	r1, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	225a      	movs	r2, #90	; 0x5a
 800c23c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	225a      	movs	r2, #90	; 0x5a
 800c242:	5a9b      	ldrh	r3, [r3, r2]
 800c244:	b29b      	uxth	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d13a      	bne.n	800c2c0 <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	491c      	ldr	r1, [pc, #112]	; (800c2c8 <UART_RxISR_16BIT+0xe4>)
 800c256:	400a      	ands	r2, r1
 800c258:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	689a      	ldr	r2, [r3, #8]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2101      	movs	r1, #1
 800c266:	438a      	bics	r2, r1
 800c268:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2220      	movs	r2, #32
 800c26e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d110      	bne.n	800c2a0 <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2110      	movs	r1, #16
 800c28a:	438a      	bics	r2, r1
 800c28c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2258      	movs	r2, #88	; 0x58
 800c292:	5a9a      	ldrh	r2, [r3, r2]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	0011      	movs	r1, r2
 800c298:	0018      	movs	r0, r3
 800c29a:	f7ff f96d 	bl	800b578 <HAL_UARTEx_RxEventCallback>
 800c29e:	e003      	b.n	800c2a8 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	0018      	movs	r0, r3
 800c2a4:	f7fa faac 	bl	8006800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2ae:	e007      	b.n	800c2c0 <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	699a      	ldr	r2, [r3, #24]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2108      	movs	r1, #8
 800c2bc:	430a      	orrs	r2, r1
 800c2be:	619a      	str	r2, [r3, #24]
}
 800c2c0:	46c0      	nop			; (mov r8, r8)
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	b004      	add	sp, #16
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	fffffedf 	.word	0xfffffedf

0800c2cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c2d4:	46c0      	nop			; (mov r8, r8)
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	b002      	add	sp, #8
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b088      	sub	sp, #32
 800c2e0:	af02      	add	r7, sp, #8
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	1d3b      	adds	r3, r7, #4
 800c2e6:	6019      	str	r1, [r3, #0]
 800c2e8:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ea:	2317      	movs	r3, #23
 800c2ec:	18fb      	adds	r3, r7, r3
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2274      	movs	r2, #116	; 0x74
 800c2f6:	5c9b      	ldrb	r3, [r3, r2]
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d101      	bne.n	800c300 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	e04a      	b.n	800c396 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2274      	movs	r2, #116	; 0x74
 800c304:	2101      	movs	r1, #1
 800c306:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2224      	movs	r2, #36	; 0x24
 800c30c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2101      	movs	r1, #1
 800c31a:	438a      	bics	r2, r1
 800c31c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	4a1e      	ldr	r2, [pc, #120]	; (800c3a0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800c326:	4013      	ands	r3, r2
 800c328:	0019      	movs	r1, r3
 800c32a:	1d3b      	adds	r3, r7, #4
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	430a      	orrs	r2, r1
 800c334:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c336:	1d3b      	adds	r3, r7, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d105      	bne.n	800c34a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c33e:	1d3b      	adds	r3, r7, #4
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	6819      	ldr	r1, [r3, #0]
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	f000 f84f 	bl	800c3e8 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2101      	movs	r1, #1
 800c356:	430a      	orrs	r2, r1
 800c358:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c35a:	f7fa f860 	bl	800641e <HAL_GetTick>
 800c35e:	0003      	movs	r3, r0
 800c360:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	2280      	movs	r2, #128	; 0x80
 800c366:	03d1      	lsls	r1, r2, #15
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	4a0e      	ldr	r2, [pc, #56]	; (800c3a4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800c36c:	9200      	str	r2, [sp, #0]
 800c36e:	2200      	movs	r2, #0
 800c370:	f7ff fcc8 	bl	800bd04 <UART_WaitOnFlagUntilTimeout>
 800c374:	1e03      	subs	r3, r0, #0
 800c376:	d004      	beq.n	800c382 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800c378:	2317      	movs	r3, #23
 800c37a:	18fb      	adds	r3, r7, r3
 800c37c:	2203      	movs	r2, #3
 800c37e:	701a      	strb	r2, [r3, #0]
 800c380:	e002      	b.n	800c388 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2220      	movs	r2, #32
 800c386:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2274      	movs	r2, #116	; 0x74
 800c38c:	2100      	movs	r1, #0
 800c38e:	5499      	strb	r1, [r3, r2]

  return status;
 800c390:	2317      	movs	r3, #23
 800c392:	18fb      	adds	r3, r7, r3
 800c394:	781b      	ldrb	r3, [r3, #0]
}
 800c396:	0018      	movs	r0, r3
 800c398:	46bd      	mov	sp, r7
 800c39a:	b006      	add	sp, #24
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	46c0      	nop			; (mov r8, r8)
 800c3a0:	ffcfffff 	.word	0xffcfffff
 800c3a4:	01ffffff 	.word	0x01ffffff

0800c3a8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2274      	movs	r2, #116	; 0x74
 800c3b4:	5c9b      	ldrb	r3, [r3, r2]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d101      	bne.n	800c3be <HAL_UARTEx_EnableStopMode+0x16>
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	e010      	b.n	800c3e0 <HAL_UARTEx_EnableStopMode+0x38>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2274      	movs	r2, #116	; 0x74
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2102      	movs	r1, #2
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2274      	movs	r2, #116	; 0x74
 800c3da:	2100      	movs	r1, #0
 800c3dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	0018      	movs	r0, r3
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	b002      	add	sp, #8
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	1d3b      	adds	r3, r7, #4
 800c3f2:	6019      	str	r1, [r3, #0]
 800c3f4:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	2210      	movs	r2, #16
 800c3fe:	4393      	bics	r3, r2
 800c400:	001a      	movs	r2, r3
 800c402:	1d3b      	adds	r3, r7, #4
 800c404:	889b      	ldrh	r3, [r3, #4]
 800c406:	0019      	movs	r1, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	430a      	orrs	r2, r1
 800c40e:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	021b      	lsls	r3, r3, #8
 800c418:	0a19      	lsrs	r1, r3, #8
 800c41a:	1d3b      	adds	r3, r7, #4
 800c41c:	799b      	ldrb	r3, [r3, #6]
 800c41e:	061a      	lsls	r2, r3, #24
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	430a      	orrs	r2, r1
 800c426:	605a      	str	r2, [r3, #4]
}
 800c428:	46c0      	nop			; (mov r8, r8)
 800c42a:	46bd      	mov	sp, r7
 800c42c:	b004      	add	sp, #16
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	33f1      	adds	r3, #241	; 0xf1
 800c43c:	2210      	movs	r2, #16
 800c43e:	2100      	movs	r1, #0
 800c440:	0018      	movs	r0, r3
 800c442:	f00d fd13 	bl	8019e6c <memset1>
    ctx->M_n = 0;
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	238a      	movs	r3, #138	; 0x8a
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	2100      	movs	r1, #0
 800c44e:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	22f0      	movs	r2, #240	; 0xf0
 800c454:	2100      	movs	r1, #0
 800c456:	0018      	movs	r0, r3
 800c458:	f00d fd08 	bl	8019e6c <memset1>
}
 800c45c:	46c0      	nop			; (mov r8, r8)
 800c45e:	46bd      	mov	sp, r7
 800c460:	b002      	add	sp, #8
 800c462:	bd80      	pop	{r7, pc}

0800c464 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2110      	movs	r1, #16
 800c474:	0018      	movs	r0, r3
 800c476:	f000 feaf 	bl	800d1d8 <lorawan_aes_set_key>
}
 800c47a:	46c0      	nop			; (mov r8, r8)
 800c47c:	46bd      	mov	sp, r7
 800c47e:	b002      	add	sp, #8
 800c480:	bd80      	pop	{r7, pc}

0800c482 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c482:	b590      	push	{r4, r7, lr}
 800c484:	b08d      	sub	sp, #52	; 0x34
 800c486:	af00      	add	r7, sp, #0
 800c488:	60f8      	str	r0, [r7, #12]
 800c48a:	60b9      	str	r1, [r7, #8]
 800c48c:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	238a      	movs	r3, #138	; 0x8a
 800c492:	005b      	lsls	r3, r3, #1
 800c494:	58d3      	ldr	r3, [r2, r3]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d100      	bne.n	800c49c <AES_CMAC_Update+0x1a>
 800c49a:	e0a4      	b.n	800c5e6 <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	238a      	movs	r3, #138	; 0x8a
 800c4a0:	005b      	lsls	r3, r3, #1
 800c4a2:	58d3      	ldr	r3, [r2, r3]
 800c4a4:	2210      	movs	r2, #16
 800c4a6:	1ad2      	subs	r2, r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d900      	bls.n	800c4b0 <AES_CMAC_Update+0x2e>
 800c4ae:	0013      	movs	r3, r2
 800c4b0:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	1c9a      	adds	r2, r3, #2
 800c4b6:	32ff      	adds	r2, #255	; 0xff
 800c4b8:	68f9      	ldr	r1, [r7, #12]
 800c4ba:	238a      	movs	r3, #138	; 0x8a
 800c4bc:	005b      	lsls	r3, r3, #1
 800c4be:	58cb      	ldr	r3, [r1, r3]
 800c4c0:	18d3      	adds	r3, r2, r3
 800c4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c4:	b292      	uxth	r2, r2
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	0018      	movs	r0, r3
 800c4ca:	f00d fc91 	bl	8019df0 <memcpy1>
        ctx->M_n += mlen;
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	238a      	movs	r3, #138	; 0x8a
 800c4d2:	005b      	lsls	r3, r3, #1
 800c4d4:	58d2      	ldr	r2, [r2, r3]
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	18d1      	adds	r1, r2, r3
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	238a      	movs	r3, #138	; 0x8a
 800c4de:	005b      	lsls	r3, r3, #1
 800c4e0:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	238a      	movs	r3, #138	; 0x8a
 800c4e6:	005b      	lsls	r3, r3, #1
 800c4e8:	58d3      	ldr	r3, [r2, r3]
 800c4ea:	2b0f      	cmp	r3, #15
 800c4ec:	d800      	bhi.n	800c4f0 <AES_CMAC_Update+0x6e>
 800c4ee:	e08c      	b.n	800c60a <AES_CMAC_Update+0x188>
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d100      	bne.n	800c4fa <AES_CMAC_Update+0x78>
 800c4f8:	e087      	b.n	800c60a <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4fe:	e018      	b.n	800c532 <AES_CMAC_Update+0xb0>
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	21f1      	movs	r1, #241	; 0xf1
 800c504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c506:	18d3      	adds	r3, r2, r3
 800c508:	185b      	adds	r3, r3, r1
 800c50a:	781a      	ldrb	r2, [r3, #0]
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	2302      	movs	r3, #2
 800c510:	33ff      	adds	r3, #255	; 0xff
 800c512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c514:	1841      	adds	r1, r0, r1
 800c516:	18cb      	adds	r3, r1, r3
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	4053      	eors	r3, r2
 800c51c:	b2d8      	uxtb	r0, r3
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	21f1      	movs	r1, #241	; 0xf1
 800c522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c524:	18d3      	adds	r3, r2, r3
 800c526:	185b      	adds	r3, r3, r1
 800c528:	1c02      	adds	r2, r0, #0
 800c52a:	701a      	strb	r2, [r3, #0]
 800c52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52e:	3301      	adds	r3, #1
 800c530:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c534:	2b0f      	cmp	r3, #15
 800c536:	dde3      	ble.n	800c500 <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	33f1      	adds	r3, #241	; 0xf1
 800c53c:	0019      	movs	r1, r3
 800c53e:	2414      	movs	r4, #20
 800c540:	193b      	adds	r3, r7, r4
 800c542:	2210      	movs	r2, #16
 800c544:	0018      	movs	r0, r3
 800c546:	f00d fc53 	bl	8019df0 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	1939      	adds	r1, r7, r4
 800c54e:	193b      	adds	r3, r7, r4
 800c550:	0018      	movs	r0, r3
 800c552:	f000 ff7d 	bl	800d450 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	33f1      	adds	r3, #241	; 0xf1
 800c55a:	1939      	adds	r1, r7, r4
 800c55c:	2210      	movs	r2, #16
 800c55e:	0018      	movs	r0, r3
 800c560:	f00d fc46 	bl	8019df0 <memcpy1>

        data += mlen;
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c568:	18d3      	adds	r3, r2, r3
 800c56a:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c574:	e037      	b.n	800c5e6 <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800c576:	2300      	movs	r3, #0
 800c578:	62bb      	str	r3, [r7, #40]	; 0x28
 800c57a:	e015      	b.n	800c5a8 <AES_CMAC_Update+0x126>
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	21f1      	movs	r1, #241	; 0xf1
 800c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c582:	18d3      	adds	r3, r2, r3
 800c584:	185b      	adds	r3, r3, r1
 800c586:	781a      	ldrb	r2, [r3, #0]
 800c588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58a:	68b9      	ldr	r1, [r7, #8]
 800c58c:	18cb      	adds	r3, r1, r3
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	4053      	eors	r3, r2
 800c592:	b2d8      	uxtb	r0, r3
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	21f1      	movs	r1, #241	; 0xf1
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	18d3      	adds	r3, r2, r3
 800c59c:	185b      	adds	r3, r3, r1
 800c59e:	1c02      	adds	r2, r0, #0
 800c5a0:	701a      	strb	r2, [r3, #0]
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5aa:	2b0f      	cmp	r3, #15
 800c5ac:	dde6      	ble.n	800c57c <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	33f1      	adds	r3, #241	; 0xf1
 800c5b2:	0019      	movs	r1, r3
 800c5b4:	2414      	movs	r4, #20
 800c5b6:	193b      	adds	r3, r7, r4
 800c5b8:	2210      	movs	r2, #16
 800c5ba:	0018      	movs	r0, r3
 800c5bc:	f00d fc18 	bl	8019df0 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	1939      	adds	r1, r7, r4
 800c5c4:	193b      	adds	r3, r7, r4
 800c5c6:	0018      	movs	r0, r3
 800c5c8:	f000 ff42 	bl	800d450 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	33f1      	adds	r3, #241	; 0xf1
 800c5d0:	1939      	adds	r1, r7, r4
 800c5d2:	2210      	movs	r2, #16
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	f00d fc0b 	bl	8019df0 <memcpy1>

        data += 16;
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	3310      	adds	r3, #16
 800c5de:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3b10      	subs	r3, #16
 800c5e4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b10      	cmp	r3, #16
 800c5ea:	d8c4      	bhi.n	800c576 <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3302      	adds	r3, #2
 800c5f0:	33ff      	adds	r3, #255	; 0xff
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	b292      	uxth	r2, r2
 800c5f6:	68b9      	ldr	r1, [r7, #8]
 800c5f8:	0018      	movs	r0, r3
 800c5fa:	f00d fbf9 	bl	8019df0 <memcpy1>
    ctx->M_n = len;
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	238a      	movs	r3, #138	; 0x8a
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	6879      	ldr	r1, [r7, #4]
 800c606:	50d1      	str	r1, [r2, r3]
 800c608:	e000      	b.n	800c60c <AES_CMAC_Update+0x18a>
            return;
 800c60a:	46c0      	nop			; (mov r8, r8)
}
 800c60c:	46bd      	mov	sp, r7
 800c60e:	b00d      	add	sp, #52	; 0x34
 800c610:	bd90      	pop	{r4, r7, pc}

0800c612 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c612:	b590      	push	{r4, r7, lr}
 800c614:	b093      	sub	sp, #76	; 0x4c
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c61c:	241c      	movs	r4, #28
 800c61e:	193b      	adds	r3, r7, r4
 800c620:	2210      	movs	r2, #16
 800c622:	2100      	movs	r1, #0
 800c624:	0018      	movs	r0, r3
 800c626:	f00d fc21 	bl	8019e6c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c62a:	683a      	ldr	r2, [r7, #0]
 800c62c:	1939      	adds	r1, r7, r4
 800c62e:	193b      	adds	r3, r7, r4
 800c630:	0018      	movs	r0, r3
 800c632:	f000 ff0d 	bl	800d450 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c636:	193b      	adds	r3, r7, r4
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	b25b      	sxtb	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	da2e      	bge.n	800c69e <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800c640:	2300      	movs	r3, #0
 800c642:	647b      	str	r3, [r7, #68]	; 0x44
 800c644:	e018      	b.n	800c678 <AES_CMAC_Final+0x66>
 800c646:	201c      	movs	r0, #28
 800c648:	183a      	adds	r2, r7, r0
 800c64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c64c:	18d3      	adds	r3, r2, r3
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	b25a      	sxtb	r2, r3
 800c654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c656:	3301      	adds	r3, #1
 800c658:	1839      	adds	r1, r7, r0
 800c65a:	5ccb      	ldrb	r3, [r1, r3]
 800c65c:	09db      	lsrs	r3, r3, #7
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	b25b      	sxtb	r3, r3
 800c662:	4313      	orrs	r3, r2
 800c664:	b25b      	sxtb	r3, r3
 800c666:	b2d9      	uxtb	r1, r3
 800c668:	183a      	adds	r2, r7, r0
 800c66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c66c:	18d3      	adds	r3, r2, r3
 800c66e:	1c0a      	adds	r2, r1, #0
 800c670:	701a      	strb	r2, [r3, #0]
 800c672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c674:	3301      	adds	r3, #1
 800c676:	647b      	str	r3, [r7, #68]	; 0x44
 800c678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c67a:	2b0e      	cmp	r3, #14
 800c67c:	dde3      	ble.n	800c646 <AES_CMAC_Final+0x34>
 800c67e:	211c      	movs	r1, #28
 800c680:	187b      	adds	r3, r7, r1
 800c682:	7bdb      	ldrb	r3, [r3, #15]
 800c684:	18db      	adds	r3, r3, r3
 800c686:	b2da      	uxtb	r2, r3
 800c688:	187b      	adds	r3, r7, r1
 800c68a:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800c68c:	187b      	adds	r3, r7, r1
 800c68e:	7bdb      	ldrb	r3, [r3, #15]
 800c690:	2279      	movs	r2, #121	; 0x79
 800c692:	4252      	negs	r2, r2
 800c694:	4053      	eors	r3, r2
 800c696:	b2da      	uxtb	r2, r3
 800c698:	187b      	adds	r3, r7, r1
 800c69a:	73da      	strb	r2, [r3, #15]
 800c69c:	e025      	b.n	800c6ea <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800c69e:	2300      	movs	r3, #0
 800c6a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c6a2:	e018      	b.n	800c6d6 <AES_CMAC_Final+0xc4>
 800c6a4:	201c      	movs	r0, #28
 800c6a6:	183a      	adds	r2, r7, r0
 800c6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6aa:	18d3      	adds	r3, r2, r3
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	005b      	lsls	r3, r3, #1
 800c6b0:	b25a      	sxtb	r2, r3
 800c6b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	1839      	adds	r1, r7, r0
 800c6b8:	5ccb      	ldrb	r3, [r1, r3]
 800c6ba:	09db      	lsrs	r3, r3, #7
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	b25b      	sxtb	r3, r3
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	b25b      	sxtb	r3, r3
 800c6c4:	b2d9      	uxtb	r1, r3
 800c6c6:	183a      	adds	r2, r7, r0
 800c6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6ca:	18d3      	adds	r3, r2, r3
 800c6cc:	1c0a      	adds	r2, r1, #0
 800c6ce:	701a      	strb	r2, [r3, #0]
 800c6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	643b      	str	r3, [r7, #64]	; 0x40
 800c6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d8:	2b0e      	cmp	r3, #14
 800c6da:	dde3      	ble.n	800c6a4 <AES_CMAC_Final+0x92>
 800c6dc:	211c      	movs	r1, #28
 800c6de:	187b      	adds	r3, r7, r1
 800c6e0:	7bdb      	ldrb	r3, [r3, #15]
 800c6e2:	18db      	adds	r3, r3, r3
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	187b      	adds	r3, r7, r1
 800c6e8:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	238a      	movs	r3, #138	; 0x8a
 800c6ee:	005b      	lsls	r3, r3, #1
 800c6f0:	58d3      	ldr	r3, [r2, r3]
 800c6f2:	2b10      	cmp	r3, #16
 800c6f4:	d11f      	bne.n	800c736 <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6fa:	e018      	b.n	800c72e <AES_CMAC_Final+0x11c>
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	2302      	movs	r3, #2
 800c700:	33ff      	adds	r3, #255	; 0xff
 800c702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c704:	188a      	adds	r2, r1, r2
 800c706:	18d3      	adds	r3, r2, r3
 800c708:	781a      	ldrb	r2, [r3, #0]
 800c70a:	231c      	movs	r3, #28
 800c70c:	18f9      	adds	r1, r7, r3
 800c70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c710:	18cb      	adds	r3, r1, r3
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	4053      	eors	r3, r2
 800c716:	b2d8      	uxtb	r0, r3
 800c718:	6839      	ldr	r1, [r7, #0]
 800c71a:	2302      	movs	r3, #2
 800c71c:	33ff      	adds	r3, #255	; 0xff
 800c71e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c720:	188a      	adds	r2, r1, r2
 800c722:	18d3      	adds	r3, r2, r3
 800c724:	1c02      	adds	r2, r0, #0
 800c726:	701a      	strb	r2, [r3, #0]
 800c728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72a:	3301      	adds	r3, #1
 800c72c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c730:	2b0f      	cmp	r3, #15
 800c732:	dde3      	ble.n	800c6fc <AES_CMAC_Final+0xea>
 800c734:	e09f      	b.n	800c876 <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c736:	231c      	movs	r3, #28
 800c738:	18fb      	adds	r3, r7, r3
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	b25b      	sxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	da2e      	bge.n	800c7a0 <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800c742:	2300      	movs	r3, #0
 800c744:	63bb      	str	r3, [r7, #56]	; 0x38
 800c746:	e018      	b.n	800c77a <AES_CMAC_Final+0x168>
 800c748:	201c      	movs	r0, #28
 800c74a:	183a      	adds	r2, r7, r0
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	18d3      	adds	r3, r2, r3
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	005b      	lsls	r3, r3, #1
 800c754:	b25a      	sxtb	r2, r3
 800c756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c758:	3301      	adds	r3, #1
 800c75a:	1839      	adds	r1, r7, r0
 800c75c:	5ccb      	ldrb	r3, [r1, r3]
 800c75e:	09db      	lsrs	r3, r3, #7
 800c760:	b2db      	uxtb	r3, r3
 800c762:	b25b      	sxtb	r3, r3
 800c764:	4313      	orrs	r3, r2
 800c766:	b25b      	sxtb	r3, r3
 800c768:	b2d9      	uxtb	r1, r3
 800c76a:	183a      	adds	r2, r7, r0
 800c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76e:	18d3      	adds	r3, r2, r3
 800c770:	1c0a      	adds	r2, r1, #0
 800c772:	701a      	strb	r2, [r3, #0]
 800c774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c776:	3301      	adds	r3, #1
 800c778:	63bb      	str	r3, [r7, #56]	; 0x38
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	2b0e      	cmp	r3, #14
 800c77e:	dde3      	ble.n	800c748 <AES_CMAC_Final+0x136>
 800c780:	211c      	movs	r1, #28
 800c782:	187b      	adds	r3, r7, r1
 800c784:	7bdb      	ldrb	r3, [r3, #15]
 800c786:	18db      	adds	r3, r3, r3
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	187b      	adds	r3, r7, r1
 800c78c:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800c78e:	187b      	adds	r3, r7, r1
 800c790:	7bdb      	ldrb	r3, [r3, #15]
 800c792:	2279      	movs	r2, #121	; 0x79
 800c794:	4252      	negs	r2, r2
 800c796:	4053      	eors	r3, r2
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	187b      	adds	r3, r7, r1
 800c79c:	73da      	strb	r2, [r3, #15]
 800c79e:	e025      	b.n	800c7ec <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7a4:	e018      	b.n	800c7d8 <AES_CMAC_Final+0x1c6>
 800c7a6:	201c      	movs	r0, #28
 800c7a8:	183a      	adds	r2, r7, r0
 800c7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ac:	18d3      	adds	r3, r2, r3
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	b25a      	sxtb	r2, r3
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	1839      	adds	r1, r7, r0
 800c7ba:	5ccb      	ldrb	r3, [r1, r3]
 800c7bc:	09db      	lsrs	r3, r3, #7
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	b25b      	sxtb	r3, r3
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	b25b      	sxtb	r3, r3
 800c7c6:	b2d9      	uxtb	r1, r3
 800c7c8:	183a      	adds	r2, r7, r0
 800c7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7cc:	18d3      	adds	r3, r2, r3
 800c7ce:	1c0a      	adds	r2, r1, #0
 800c7d0:	701a      	strb	r2, [r3, #0]
 800c7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7da:	2b0e      	cmp	r3, #14
 800c7dc:	dde3      	ble.n	800c7a6 <AES_CMAC_Final+0x194>
 800c7de:	211c      	movs	r1, #28
 800c7e0:	187b      	adds	r3, r7, r1
 800c7e2:	7bdb      	ldrb	r3, [r3, #15]
 800c7e4:	18db      	adds	r3, r3, r3
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	187b      	adds	r3, r7, r1
 800c7ea:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	238a      	movs	r3, #138	; 0x8a
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	58d2      	ldr	r2, [r2, r3]
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	2302      	movs	r3, #2
 800c7f8:	33ff      	adds	r3, #255	; 0xff
 800c7fa:	188a      	adds	r2, r1, r2
 800c7fc:	18d3      	adds	r3, r2, r3
 800c7fe:	2280      	movs	r2, #128	; 0x80
 800c800:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c802:	e00a      	b.n	800c81a <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	238a      	movs	r3, #138	; 0x8a
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	58d2      	ldr	r2, [r2, r3]
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	2302      	movs	r3, #2
 800c810:	33ff      	adds	r3, #255	; 0xff
 800c812:	188a      	adds	r2, r1, r2
 800c814:	18d3      	adds	r3, r2, r3
 800c816:	2200      	movs	r2, #0
 800c818:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	238a      	movs	r3, #138	; 0x8a
 800c81e:	005b      	lsls	r3, r3, #1
 800c820:	58d3      	ldr	r3, [r2, r3]
 800c822:	1c59      	adds	r1, r3, #1
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	238a      	movs	r3, #138	; 0x8a
 800c828:	005b      	lsls	r3, r3, #1
 800c82a:	50d1      	str	r1, [r2, r3]
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	238a      	movs	r3, #138	; 0x8a
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	58d3      	ldr	r3, [r2, r3]
 800c834:	2b0f      	cmp	r3, #15
 800c836:	d9e5      	bls.n	800c804 <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800c838:	2300      	movs	r3, #0
 800c83a:	633b      	str	r3, [r7, #48]	; 0x30
 800c83c:	e018      	b.n	800c870 <AES_CMAC_Final+0x25e>
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	2302      	movs	r3, #2
 800c842:	33ff      	adds	r3, #255	; 0xff
 800c844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c846:	188a      	adds	r2, r1, r2
 800c848:	18d3      	adds	r3, r2, r3
 800c84a:	781a      	ldrb	r2, [r3, #0]
 800c84c:	231c      	movs	r3, #28
 800c84e:	18f9      	adds	r1, r7, r3
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	18cb      	adds	r3, r1, r3
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	4053      	eors	r3, r2
 800c858:	b2d8      	uxtb	r0, r3
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	2302      	movs	r3, #2
 800c85e:	33ff      	adds	r3, #255	; 0xff
 800c860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c862:	188a      	adds	r2, r1, r2
 800c864:	18d3      	adds	r3, r2, r3
 800c866:	1c02      	adds	r2, r0, #0
 800c868:	701a      	strb	r2, [r3, #0]
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	3301      	adds	r3, #1
 800c86e:	633b      	str	r3, [r7, #48]	; 0x30
 800c870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c872:	2b0f      	cmp	r3, #15
 800c874:	dde3      	ble.n	800c83e <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800c876:	2300      	movs	r3, #0
 800c878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c87a:	e018      	b.n	800c8ae <AES_CMAC_Final+0x29c>
 800c87c:	683a      	ldr	r2, [r7, #0]
 800c87e:	21f1      	movs	r1, #241	; 0xf1
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	18d3      	adds	r3, r2, r3
 800c884:	185b      	adds	r3, r3, r1
 800c886:	781a      	ldrb	r2, [r3, #0]
 800c888:	6838      	ldr	r0, [r7, #0]
 800c88a:	2302      	movs	r3, #2
 800c88c:	33ff      	adds	r3, #255	; 0xff
 800c88e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c890:	1841      	adds	r1, r0, r1
 800c892:	18cb      	adds	r3, r1, r3
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	4053      	eors	r3, r2
 800c898:	b2d8      	uxtb	r0, r3
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	21f1      	movs	r1, #241	; 0xf1
 800c89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a0:	18d3      	adds	r3, r2, r3
 800c8a2:	185b      	adds	r3, r3, r1
 800c8a4:	1c02      	adds	r2, r0, #0
 800c8a6:	701a      	strb	r2, [r3, #0]
 800c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b0:	2b0f      	cmp	r3, #15
 800c8b2:	dde3      	ble.n	800c87c <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	33f1      	adds	r3, #241	; 0xf1
 800c8b8:	0019      	movs	r1, r3
 800c8ba:	240c      	movs	r4, #12
 800c8bc:	193b      	adds	r3, r7, r4
 800c8be:	2210      	movs	r2, #16
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f00d fa95 	bl	8019df0 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	6879      	ldr	r1, [r7, #4]
 800c8ca:	193b      	adds	r3, r7, r4
 800c8cc:	0018      	movs	r0, r3
 800c8ce:	f000 fdbf 	bl	800d450 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c8d2:	231c      	movs	r3, #28
 800c8d4:	18fb      	adds	r3, r7, r3
 800c8d6:	2210      	movs	r2, #16
 800c8d8:	2100      	movs	r1, #0
 800c8da:	0018      	movs	r0, r3
 800c8dc:	f00d fac6 	bl	8019e6c <memset1>
}
 800c8e0:	46c0      	nop			; (mov r8, r8)
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	b013      	add	sp, #76	; 0x4c
 800c8e6:	bd90      	pop	{r4, r7, pc}

0800c8e8 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781a      	ldrb	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	7852      	ldrb	r2, [r2, #1]
 800c902:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	3302      	adds	r3, #2
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	7892      	ldrb	r2, [r2, #2]
 800c90c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	3303      	adds	r3, #3
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	78d2      	ldrb	r2, [r2, #3]
 800c916:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3304      	adds	r3, #4
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	7912      	ldrb	r2, [r2, #4]
 800c920:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	3305      	adds	r3, #5
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	7952      	ldrb	r2, [r2, #5]
 800c92a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	3306      	adds	r3, #6
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	7992      	ldrb	r2, [r2, #6]
 800c934:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3307      	adds	r3, #7
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	79d2      	ldrb	r2, [r2, #7]
 800c93e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3308      	adds	r3, #8
 800c944:	683a      	ldr	r2, [r7, #0]
 800c946:	7a12      	ldrb	r2, [r2, #8]
 800c948:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3309      	adds	r3, #9
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	7a52      	ldrb	r2, [r2, #9]
 800c952:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	330a      	adds	r3, #10
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	7a92      	ldrb	r2, [r2, #10]
 800c95c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	330b      	adds	r3, #11
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	7ad2      	ldrb	r2, [r2, #11]
 800c966:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	330c      	adds	r3, #12
 800c96c:	683a      	ldr	r2, [r7, #0]
 800c96e:	7b12      	ldrb	r2, [r2, #12]
 800c970:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	330d      	adds	r3, #13
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	7b52      	ldrb	r2, [r2, #13]
 800c97a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	330e      	adds	r3, #14
 800c980:	683a      	ldr	r2, [r7, #0]
 800c982:	7b92      	ldrb	r2, [r2, #14]
 800c984:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	330f      	adds	r3, #15
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	7bd2      	ldrb	r2, [r2, #15]
 800c98e:	701a      	strb	r2, [r3, #0]
#endif
}
 800c990:	46c0      	nop			; (mov r8, r8)
 800c992:	46bd      	mov	sp, r7
 800c994:	b002      	add	sp, #8
 800c996:	bd80      	pop	{r7, pc}

0800c998 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	1dfb      	adds	r3, r7, #7
 800c9a4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c9a6:	e007      	b.n	800c9b8 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	1c53      	adds	r3, r2, #1
 800c9ac:	60bb      	str	r3, [r7, #8]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	1c59      	adds	r1, r3, #1
 800c9b2:	60f9      	str	r1, [r7, #12]
 800c9b4:	7812      	ldrb	r2, [r2, #0]
 800c9b6:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c9b8:	1dfb      	adds	r3, r7, #7
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	1dfa      	adds	r2, r7, #7
 800c9be:	1e59      	subs	r1, r3, #1
 800c9c0:	7011      	strb	r1, [r2, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1f0      	bne.n	800c9a8 <copy_block_nn+0x10>
}
 800c9c6:	46c0      	nop			; (mov r8, r8)
 800c9c8:	46c0      	nop			; (mov r8, r8)
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	b004      	add	sp, #16
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	781a      	ldrb	r2, [r3, #0]
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	4053      	eors	r3, r2
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	7819      	ldrb	r1, [r3, #0]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	781a      	ldrb	r2, [r3, #0]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	404a      	eors	r2, r1
 800c9fc:	b2d2      	uxtb	r2, r2
 800c9fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	3302      	adds	r3, #2
 800ca04:	7819      	ldrb	r1, [r3, #0]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	3302      	adds	r3, #2
 800ca0a:	781a      	ldrb	r2, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3302      	adds	r3, #2
 800ca10:	404a      	eors	r2, r1
 800ca12:	b2d2      	uxtb	r2, r2
 800ca14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3303      	adds	r3, #3
 800ca1a:	7819      	ldrb	r1, [r3, #0]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	3303      	adds	r3, #3
 800ca20:	781a      	ldrb	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3303      	adds	r3, #3
 800ca26:	404a      	eors	r2, r1
 800ca28:	b2d2      	uxtb	r2, r2
 800ca2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3304      	adds	r3, #4
 800ca30:	7819      	ldrb	r1, [r3, #0]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	3304      	adds	r3, #4
 800ca36:	781a      	ldrb	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3304      	adds	r3, #4
 800ca3c:	404a      	eors	r2, r1
 800ca3e:	b2d2      	uxtb	r2, r2
 800ca40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3305      	adds	r3, #5
 800ca46:	7819      	ldrb	r1, [r3, #0]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	3305      	adds	r3, #5
 800ca4c:	781a      	ldrb	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3305      	adds	r3, #5
 800ca52:	404a      	eors	r2, r1
 800ca54:	b2d2      	uxtb	r2, r2
 800ca56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3306      	adds	r3, #6
 800ca5c:	7819      	ldrb	r1, [r3, #0]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	3306      	adds	r3, #6
 800ca62:	781a      	ldrb	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3306      	adds	r3, #6
 800ca68:	404a      	eors	r2, r1
 800ca6a:	b2d2      	uxtb	r2, r2
 800ca6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3307      	adds	r3, #7
 800ca72:	7819      	ldrb	r1, [r3, #0]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	3307      	adds	r3, #7
 800ca78:	781a      	ldrb	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	3307      	adds	r3, #7
 800ca7e:	404a      	eors	r2, r1
 800ca80:	b2d2      	uxtb	r2, r2
 800ca82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	3308      	adds	r3, #8
 800ca88:	7819      	ldrb	r1, [r3, #0]
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	781a      	ldrb	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	3308      	adds	r3, #8
 800ca94:	404a      	eors	r2, r1
 800ca96:	b2d2      	uxtb	r2, r2
 800ca98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3309      	adds	r3, #9
 800ca9e:	7819      	ldrb	r1, [r3, #0]
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	3309      	adds	r3, #9
 800caa4:	781a      	ldrb	r2, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3309      	adds	r3, #9
 800caaa:	404a      	eors	r2, r1
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	330a      	adds	r3, #10
 800cab4:	7819      	ldrb	r1, [r3, #0]
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	330a      	adds	r3, #10
 800caba:	781a      	ldrb	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	330a      	adds	r3, #10
 800cac0:	404a      	eors	r2, r1
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	330b      	adds	r3, #11
 800caca:	7819      	ldrb	r1, [r3, #0]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	330b      	adds	r3, #11
 800cad0:	781a      	ldrb	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	330b      	adds	r3, #11
 800cad6:	404a      	eors	r2, r1
 800cad8:	b2d2      	uxtb	r2, r2
 800cada:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	330c      	adds	r3, #12
 800cae0:	7819      	ldrb	r1, [r3, #0]
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	330c      	adds	r3, #12
 800cae6:	781a      	ldrb	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	330c      	adds	r3, #12
 800caec:	404a      	eors	r2, r1
 800caee:	b2d2      	uxtb	r2, r2
 800caf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	330d      	adds	r3, #13
 800caf6:	7819      	ldrb	r1, [r3, #0]
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	330d      	adds	r3, #13
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	330d      	adds	r3, #13
 800cb02:	404a      	eors	r2, r1
 800cb04:	b2d2      	uxtb	r2, r2
 800cb06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	330e      	adds	r3, #14
 800cb0c:	7819      	ldrb	r1, [r3, #0]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	330e      	adds	r3, #14
 800cb12:	781a      	ldrb	r2, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	330e      	adds	r3, #14
 800cb18:	404a      	eors	r2, r1
 800cb1a:	b2d2      	uxtb	r2, r2
 800cb1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	330f      	adds	r3, #15
 800cb22:	7819      	ldrb	r1, [r3, #0]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	330f      	adds	r3, #15
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	330f      	adds	r3, #15
 800cb2e:	404a      	eors	r2, r1
 800cb30:	b2d2      	uxtb	r2, r2
 800cb32:	701a      	strb	r2, [r3, #0]
#endif
}
 800cb34:	46c0      	nop			; (mov r8, r8)
 800cb36:	46bd      	mov	sp, r7
 800cb38:	b002      	add	sp, #8
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	781a      	ldrb	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	4053      	eors	r3, r2
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	7819      	ldrb	r1, [r3, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3301      	adds	r3, #1
 800cb62:	781a      	ldrb	r2, [r3, #0]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	3301      	adds	r3, #1
 800cb68:	404a      	eors	r2, r1
 800cb6a:	b2d2      	uxtb	r2, r2
 800cb6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	3302      	adds	r3, #2
 800cb72:	7819      	ldrb	r1, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	3302      	adds	r3, #2
 800cb78:	781a      	ldrb	r2, [r3, #0]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3302      	adds	r3, #2
 800cb7e:	404a      	eors	r2, r1
 800cb80:	b2d2      	uxtb	r2, r2
 800cb82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	3303      	adds	r3, #3
 800cb88:	7819      	ldrb	r1, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	3303      	adds	r3, #3
 800cb8e:	781a      	ldrb	r2, [r3, #0]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	3303      	adds	r3, #3
 800cb94:	404a      	eors	r2, r1
 800cb96:	b2d2      	uxtb	r2, r2
 800cb98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	7819      	ldrb	r1, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3304      	adds	r3, #4
 800cba4:	781a      	ldrb	r2, [r3, #0]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	3304      	adds	r3, #4
 800cbaa:	404a      	eors	r2, r1
 800cbac:	b2d2      	uxtb	r2, r2
 800cbae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	3305      	adds	r3, #5
 800cbb4:	7819      	ldrb	r1, [r3, #0]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	3305      	adds	r3, #5
 800cbba:	781a      	ldrb	r2, [r3, #0]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3305      	adds	r3, #5
 800cbc0:	404a      	eors	r2, r1
 800cbc2:	b2d2      	uxtb	r2, r2
 800cbc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	3306      	adds	r3, #6
 800cbca:	7819      	ldrb	r1, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3306      	adds	r3, #6
 800cbd0:	781a      	ldrb	r2, [r3, #0]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	3306      	adds	r3, #6
 800cbd6:	404a      	eors	r2, r1
 800cbd8:	b2d2      	uxtb	r2, r2
 800cbda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	3307      	adds	r3, #7
 800cbe0:	7819      	ldrb	r1, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3307      	adds	r3, #7
 800cbe6:	781a      	ldrb	r2, [r3, #0]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	3307      	adds	r3, #7
 800cbec:	404a      	eors	r2, r1
 800cbee:	b2d2      	uxtb	r2, r2
 800cbf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	3308      	adds	r3, #8
 800cbf6:	7819      	ldrb	r1, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3308      	adds	r3, #8
 800cbfc:	781a      	ldrb	r2, [r3, #0]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	3308      	adds	r3, #8
 800cc02:	404a      	eors	r2, r1
 800cc04:	b2d2      	uxtb	r2, r2
 800cc06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	3309      	adds	r3, #9
 800cc0c:	7819      	ldrb	r1, [r3, #0]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	3309      	adds	r3, #9
 800cc12:	781a      	ldrb	r2, [r3, #0]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3309      	adds	r3, #9
 800cc18:	404a      	eors	r2, r1
 800cc1a:	b2d2      	uxtb	r2, r2
 800cc1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	330a      	adds	r3, #10
 800cc22:	7819      	ldrb	r1, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	330a      	adds	r3, #10
 800cc28:	781a      	ldrb	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	330a      	adds	r3, #10
 800cc2e:	404a      	eors	r2, r1
 800cc30:	b2d2      	uxtb	r2, r2
 800cc32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	330b      	adds	r3, #11
 800cc38:	7819      	ldrb	r1, [r3, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	330b      	adds	r3, #11
 800cc3e:	781a      	ldrb	r2, [r3, #0]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	330b      	adds	r3, #11
 800cc44:	404a      	eors	r2, r1
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	330c      	adds	r3, #12
 800cc4e:	7819      	ldrb	r1, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	330c      	adds	r3, #12
 800cc54:	781a      	ldrb	r2, [r3, #0]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	330c      	adds	r3, #12
 800cc5a:	404a      	eors	r2, r1
 800cc5c:	b2d2      	uxtb	r2, r2
 800cc5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	330d      	adds	r3, #13
 800cc64:	7819      	ldrb	r1, [r3, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	330d      	adds	r3, #13
 800cc6a:	781a      	ldrb	r2, [r3, #0]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	330d      	adds	r3, #13
 800cc70:	404a      	eors	r2, r1
 800cc72:	b2d2      	uxtb	r2, r2
 800cc74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	330e      	adds	r3, #14
 800cc7a:	7819      	ldrb	r1, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	330e      	adds	r3, #14
 800cc80:	781a      	ldrb	r2, [r3, #0]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	330e      	adds	r3, #14
 800cc86:	404a      	eors	r2, r1
 800cc88:	b2d2      	uxtb	r2, r2
 800cc8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	330f      	adds	r3, #15
 800cc90:	7819      	ldrb	r1, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	330f      	adds	r3, #15
 800cc96:	781a      	ldrb	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	330f      	adds	r3, #15
 800cc9c:	404a      	eors	r2, r1
 800cc9e:	b2d2      	uxtb	r2, r2
 800cca0:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800cca2:	46c0      	nop			; (mov r8, r8)
 800cca4:	46bd      	mov	sp, r7
 800cca6:	b004      	add	sp, #16
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b082      	sub	sp, #8
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
 800ccb2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	0011      	movs	r1, r2
 800ccba:	0018      	movs	r0, r3
 800ccbc:	f7ff fe88 	bl	800c9d0 <xor_block>
}
 800ccc0:	46c0      	nop			; (mov r8, r8)
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	b002      	add	sp, #8
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	001a      	movs	r2, r3
 800ccd6:	4b4c      	ldr	r3, [pc, #304]	; (800ce08 <shift_sub_rows+0x140>)
 800ccd8:	5c9a      	ldrb	r2, [r3, r2]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	701a      	strb	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3304      	adds	r3, #4
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	0019      	movs	r1, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	3304      	adds	r3, #4
 800ccea:	4a47      	ldr	r2, [pc, #284]	; (800ce08 <shift_sub_rows+0x140>)
 800ccec:	5c52      	ldrb	r2, [r2, r1]
 800ccee:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	0019      	movs	r1, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3308      	adds	r3, #8
 800ccfc:	4a42      	ldr	r2, [pc, #264]	; (800ce08 <shift_sub_rows+0x140>)
 800ccfe:	5c52      	ldrb	r2, [r2, r1]
 800cd00:	701a      	strb	r2, [r3, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	330c      	adds	r3, #12
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	0019      	movs	r1, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	330c      	adds	r3, #12
 800cd0e:	4a3e      	ldr	r2, [pc, #248]	; (800ce08 <shift_sub_rows+0x140>)
 800cd10:	5c52      	ldrb	r2, [r2, r1]
 800cd12:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800cd14:	200f      	movs	r0, #15
 800cd16:	183b      	adds	r3, r7, r0
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	7852      	ldrb	r2, [r2, #1]
 800cd1c:	701a      	strb	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3305      	adds	r3, #5
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	0019      	movs	r1, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	4a37      	ldr	r2, [pc, #220]	; (800ce08 <shift_sub_rows+0x140>)
 800cd2c:	5c52      	ldrb	r2, [r2, r1]
 800cd2e:	701a      	strb	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	3309      	adds	r3, #9
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	0019      	movs	r1, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	3305      	adds	r3, #5
 800cd3c:	4a32      	ldr	r2, [pc, #200]	; (800ce08 <shift_sub_rows+0x140>)
 800cd3e:	5c52      	ldrb	r2, [r2, r1]
 800cd40:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	330d      	adds	r3, #13
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	0019      	movs	r1, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3309      	adds	r3, #9
 800cd4e:	4a2e      	ldr	r2, [pc, #184]	; (800ce08 <shift_sub_rows+0x140>)
 800cd50:	5c52      	ldrb	r2, [r2, r1]
 800cd52:	701a      	strb	r2, [r3, #0]
 800cd54:	183b      	adds	r3, r7, r0
 800cd56:	781a      	ldrb	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	330d      	adds	r3, #13
 800cd5c:	492a      	ldr	r1, [pc, #168]	; (800ce08 <shift_sub_rows+0x140>)
 800cd5e:	5c8a      	ldrb	r2, [r1, r2]
 800cd60:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800cd62:	183b      	adds	r3, r7, r0
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	7892      	ldrb	r2, [r2, #2]
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	330a      	adds	r3, #10
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	0019      	movs	r1, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	3302      	adds	r3, #2
 800cd76:	4a24      	ldr	r2, [pc, #144]	; (800ce08 <shift_sub_rows+0x140>)
 800cd78:	5c52      	ldrb	r2, [r2, r1]
 800cd7a:	701a      	strb	r2, [r3, #0]
 800cd7c:	183b      	adds	r3, r7, r0
 800cd7e:	781a      	ldrb	r2, [r3, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	330a      	adds	r3, #10
 800cd84:	4920      	ldr	r1, [pc, #128]	; (800ce08 <shift_sub_rows+0x140>)
 800cd86:	5c8a      	ldrb	r2, [r1, r2]
 800cd88:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800cd8a:	183b      	adds	r3, r7, r0
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	7992      	ldrb	r2, [r2, #6]
 800cd90:	701a      	strb	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	330e      	adds	r3, #14
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	0019      	movs	r1, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	3306      	adds	r3, #6
 800cd9e:	4a1a      	ldr	r2, [pc, #104]	; (800ce08 <shift_sub_rows+0x140>)
 800cda0:	5c52      	ldrb	r2, [r2, r1]
 800cda2:	701a      	strb	r2, [r3, #0]
 800cda4:	183b      	adds	r3, r7, r0
 800cda6:	781a      	ldrb	r2, [r3, #0]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	330e      	adds	r3, #14
 800cdac:	4916      	ldr	r1, [pc, #88]	; (800ce08 <shift_sub_rows+0x140>)
 800cdae:	5c8a      	ldrb	r2, [r1, r2]
 800cdb0:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cdb2:	183b      	adds	r3, r7, r0
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	7bd2      	ldrb	r2, [r2, #15]
 800cdb8:	701a      	strb	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	330b      	adds	r3, #11
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	0019      	movs	r1, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	330f      	adds	r3, #15
 800cdc6:	4a10      	ldr	r2, [pc, #64]	; (800ce08 <shift_sub_rows+0x140>)
 800cdc8:	5c52      	ldrb	r2, [r2, r1]
 800cdca:	701a      	strb	r2, [r3, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	3307      	adds	r3, #7
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	0019      	movs	r1, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	330b      	adds	r3, #11
 800cdd8:	4a0b      	ldr	r2, [pc, #44]	; (800ce08 <shift_sub_rows+0x140>)
 800cdda:	5c52      	ldrb	r2, [r2, r1]
 800cddc:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	3303      	adds	r3, #3
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	0019      	movs	r1, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	3307      	adds	r3, #7
 800cdea:	4a07      	ldr	r2, [pc, #28]	; (800ce08 <shift_sub_rows+0x140>)
 800cdec:	5c52      	ldrb	r2, [r2, r1]
 800cdee:	701a      	strb	r2, [r3, #0]
 800cdf0:	183b      	adds	r3, r7, r0
 800cdf2:	781a      	ldrb	r2, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	3303      	adds	r3, #3
 800cdf8:	4903      	ldr	r1, [pc, #12]	; (800ce08 <shift_sub_rows+0x140>)
 800cdfa:	5c8a      	ldrb	r2, [r1, r2]
 800cdfc:	701a      	strb	r2, [r3, #0]
}
 800cdfe:	46c0      	nop			; (mov r8, r8)
 800ce00:	46bd      	mov	sp, r7
 800ce02:	b004      	add	sp, #16
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	46c0      	nop			; (mov r8, r8)
 800ce08:	08020b6c 	.word	0x08020b6c

0800ce0c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ce0c:	b590      	push	{r4, r7, lr}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	2408      	movs	r4, #8
 800ce18:	193b      	adds	r3, r7, r4
 800ce1a:	0011      	movs	r1, r2
 800ce1c:	0018      	movs	r0, r3
 800ce1e:	f7ff fd63 	bl	800c8e8 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ce22:	0020      	movs	r0, r4
 800ce24:	183b      	adds	r3, r7, r0
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	001a      	movs	r2, r3
 800ce2a:	4be8      	ldr	r3, [pc, #928]	; (800d1cc <mix_sub_columns+0x3c0>)
 800ce2c:	5c9a      	ldrb	r2, [r3, r2]
 800ce2e:	183b      	adds	r3, r7, r0
 800ce30:	795b      	ldrb	r3, [r3, #5]
 800ce32:	0019      	movs	r1, r3
 800ce34:	4be6      	ldr	r3, [pc, #920]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800ce36:	5c5b      	ldrb	r3, [r3, r1]
 800ce38:	4053      	eors	r3, r2
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	183b      	adds	r3, r7, r0
 800ce3e:	7a9b      	ldrb	r3, [r3, #10]
 800ce40:	0019      	movs	r1, r3
 800ce42:	4be4      	ldr	r3, [pc, #912]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800ce44:	5c5b      	ldrb	r3, [r3, r1]
 800ce46:	4053      	eors	r3, r2
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	183b      	adds	r3, r7, r0
 800ce4c:	7bdb      	ldrb	r3, [r3, #15]
 800ce4e:	0019      	movs	r1, r3
 800ce50:	4be0      	ldr	r3, [pc, #896]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800ce52:	5c5b      	ldrb	r3, [r3, r1]
 800ce54:	4053      	eors	r3, r2
 800ce56:	b2da      	uxtb	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ce5c:	183b      	adds	r3, r7, r0
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	001a      	movs	r2, r3
 800ce62:	4bdc      	ldr	r3, [pc, #880]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800ce64:	5c9a      	ldrb	r2, [r3, r2]
 800ce66:	183b      	adds	r3, r7, r0
 800ce68:	795b      	ldrb	r3, [r3, #5]
 800ce6a:	0019      	movs	r1, r3
 800ce6c:	4bd7      	ldr	r3, [pc, #860]	; (800d1cc <mix_sub_columns+0x3c0>)
 800ce6e:	5c5b      	ldrb	r3, [r3, r1]
 800ce70:	4053      	eors	r3, r2
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	183b      	adds	r3, r7, r0
 800ce76:	7a9b      	ldrb	r3, [r3, #10]
 800ce78:	0019      	movs	r1, r3
 800ce7a:	4bd5      	ldr	r3, [pc, #852]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800ce7c:	5c5b      	ldrb	r3, [r3, r1]
 800ce7e:	4053      	eors	r3, r2
 800ce80:	b2d9      	uxtb	r1, r3
 800ce82:	183b      	adds	r3, r7, r0
 800ce84:	7bdb      	ldrb	r3, [r3, #15]
 800ce86:	001a      	movs	r2, r3
 800ce88:	4bd2      	ldr	r3, [pc, #840]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800ce8a:	5c9a      	ldrb	r2, [r3, r2]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	404a      	eors	r2, r1
 800ce92:	b2d2      	uxtb	r2, r2
 800ce94:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ce96:	183b      	adds	r3, r7, r0
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	001a      	movs	r2, r3
 800ce9c:	4bcd      	ldr	r3, [pc, #820]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800ce9e:	5c9a      	ldrb	r2, [r3, r2]
 800cea0:	183b      	adds	r3, r7, r0
 800cea2:	795b      	ldrb	r3, [r3, #5]
 800cea4:	0019      	movs	r1, r3
 800cea6:	4bcb      	ldr	r3, [pc, #812]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cea8:	5c5b      	ldrb	r3, [r3, r1]
 800ceaa:	4053      	eors	r3, r2
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	183b      	adds	r3, r7, r0
 800ceb0:	7a9b      	ldrb	r3, [r3, #10]
 800ceb2:	0019      	movs	r1, r3
 800ceb4:	4bc5      	ldr	r3, [pc, #788]	; (800d1cc <mix_sub_columns+0x3c0>)
 800ceb6:	5c5b      	ldrb	r3, [r3, r1]
 800ceb8:	4053      	eors	r3, r2
 800ceba:	b2d9      	uxtb	r1, r3
 800cebc:	183b      	adds	r3, r7, r0
 800cebe:	7bdb      	ldrb	r3, [r3, #15]
 800cec0:	001a      	movs	r2, r3
 800cec2:	4bc3      	ldr	r3, [pc, #780]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800cec4:	5c9a      	ldrb	r2, [r3, r2]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	3302      	adds	r3, #2
 800ceca:	404a      	eors	r2, r1
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ced0:	183b      	adds	r3, r7, r0
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	001a      	movs	r2, r3
 800ced6:	4bbe      	ldr	r3, [pc, #760]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800ced8:	5c9a      	ldrb	r2, [r3, r2]
 800ceda:	183b      	adds	r3, r7, r0
 800cedc:	795b      	ldrb	r3, [r3, #5]
 800cede:	0019      	movs	r1, r3
 800cee0:	4bbc      	ldr	r3, [pc, #752]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cee2:	5c5b      	ldrb	r3, [r3, r1]
 800cee4:	4053      	eors	r3, r2
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	183b      	adds	r3, r7, r0
 800ceea:	7a9b      	ldrb	r3, [r3, #10]
 800ceec:	0019      	movs	r1, r3
 800ceee:	4bb9      	ldr	r3, [pc, #740]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cef0:	5c5b      	ldrb	r3, [r3, r1]
 800cef2:	4053      	eors	r3, r2
 800cef4:	b2d9      	uxtb	r1, r3
 800cef6:	183b      	adds	r3, r7, r0
 800cef8:	7bdb      	ldrb	r3, [r3, #15]
 800cefa:	001a      	movs	r2, r3
 800cefc:	4bb3      	ldr	r3, [pc, #716]	; (800d1cc <mix_sub_columns+0x3c0>)
 800cefe:	5c9a      	ldrb	r2, [r3, r2]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	3303      	adds	r3, #3
 800cf04:	404a      	eors	r2, r1
 800cf06:	b2d2      	uxtb	r2, r2
 800cf08:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cf0a:	183b      	adds	r3, r7, r0
 800cf0c:	791b      	ldrb	r3, [r3, #4]
 800cf0e:	001a      	movs	r2, r3
 800cf10:	4bae      	ldr	r3, [pc, #696]	; (800d1cc <mix_sub_columns+0x3c0>)
 800cf12:	5c9a      	ldrb	r2, [r3, r2]
 800cf14:	183b      	adds	r3, r7, r0
 800cf16:	7a5b      	ldrb	r3, [r3, #9]
 800cf18:	0019      	movs	r1, r3
 800cf1a:	4bad      	ldr	r3, [pc, #692]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800cf1c:	5c5b      	ldrb	r3, [r3, r1]
 800cf1e:	4053      	eors	r3, r2
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	183b      	adds	r3, r7, r0
 800cf24:	7b9b      	ldrb	r3, [r3, #14]
 800cf26:	0019      	movs	r1, r3
 800cf28:	4baa      	ldr	r3, [pc, #680]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cf2a:	5c5b      	ldrb	r3, [r3, r1]
 800cf2c:	4053      	eors	r3, r2
 800cf2e:	b2d9      	uxtb	r1, r3
 800cf30:	183b      	adds	r3, r7, r0
 800cf32:	78db      	ldrb	r3, [r3, #3]
 800cf34:	001a      	movs	r2, r3
 800cf36:	4ba7      	ldr	r3, [pc, #668]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cf38:	5c9a      	ldrb	r2, [r3, r2]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	404a      	eors	r2, r1
 800cf40:	b2d2      	uxtb	r2, r2
 800cf42:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cf44:	183b      	adds	r3, r7, r0
 800cf46:	791b      	ldrb	r3, [r3, #4]
 800cf48:	001a      	movs	r2, r3
 800cf4a:	4ba2      	ldr	r3, [pc, #648]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cf4c:	5c9a      	ldrb	r2, [r3, r2]
 800cf4e:	183b      	adds	r3, r7, r0
 800cf50:	7a5b      	ldrb	r3, [r3, #9]
 800cf52:	0019      	movs	r1, r3
 800cf54:	4b9d      	ldr	r3, [pc, #628]	; (800d1cc <mix_sub_columns+0x3c0>)
 800cf56:	5c5b      	ldrb	r3, [r3, r1]
 800cf58:	4053      	eors	r3, r2
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	183b      	adds	r3, r7, r0
 800cf5e:	7b9b      	ldrb	r3, [r3, #14]
 800cf60:	0019      	movs	r1, r3
 800cf62:	4b9b      	ldr	r3, [pc, #620]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800cf64:	5c5b      	ldrb	r3, [r3, r1]
 800cf66:	4053      	eors	r3, r2
 800cf68:	b2d9      	uxtb	r1, r3
 800cf6a:	183b      	adds	r3, r7, r0
 800cf6c:	78db      	ldrb	r3, [r3, #3]
 800cf6e:	001a      	movs	r2, r3
 800cf70:	4b98      	ldr	r3, [pc, #608]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cf72:	5c9a      	ldrb	r2, [r3, r2]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3305      	adds	r3, #5
 800cf78:	404a      	eors	r2, r1
 800cf7a:	b2d2      	uxtb	r2, r2
 800cf7c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800cf7e:	183b      	adds	r3, r7, r0
 800cf80:	791b      	ldrb	r3, [r3, #4]
 800cf82:	001a      	movs	r2, r3
 800cf84:	4b93      	ldr	r3, [pc, #588]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cf86:	5c9a      	ldrb	r2, [r3, r2]
 800cf88:	183b      	adds	r3, r7, r0
 800cf8a:	7a5b      	ldrb	r3, [r3, #9]
 800cf8c:	0019      	movs	r1, r3
 800cf8e:	4b91      	ldr	r3, [pc, #580]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cf90:	5c5b      	ldrb	r3, [r3, r1]
 800cf92:	4053      	eors	r3, r2
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	183b      	adds	r3, r7, r0
 800cf98:	7b9b      	ldrb	r3, [r3, #14]
 800cf9a:	0019      	movs	r1, r3
 800cf9c:	4b8b      	ldr	r3, [pc, #556]	; (800d1cc <mix_sub_columns+0x3c0>)
 800cf9e:	5c5b      	ldrb	r3, [r3, r1]
 800cfa0:	4053      	eors	r3, r2
 800cfa2:	b2d9      	uxtb	r1, r3
 800cfa4:	183b      	adds	r3, r7, r0
 800cfa6:	78db      	ldrb	r3, [r3, #3]
 800cfa8:	001a      	movs	r2, r3
 800cfaa:	4b89      	ldr	r3, [pc, #548]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800cfac:	5c9a      	ldrb	r2, [r3, r2]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3306      	adds	r3, #6
 800cfb2:	404a      	eors	r2, r1
 800cfb4:	b2d2      	uxtb	r2, r2
 800cfb6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800cfb8:	183b      	adds	r3, r7, r0
 800cfba:	791b      	ldrb	r3, [r3, #4]
 800cfbc:	001a      	movs	r2, r3
 800cfbe:	4b84      	ldr	r3, [pc, #528]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800cfc0:	5c9a      	ldrb	r2, [r3, r2]
 800cfc2:	183b      	adds	r3, r7, r0
 800cfc4:	7a5b      	ldrb	r3, [r3, #9]
 800cfc6:	0019      	movs	r1, r3
 800cfc8:	4b82      	ldr	r3, [pc, #520]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cfca:	5c5b      	ldrb	r3, [r3, r1]
 800cfcc:	4053      	eors	r3, r2
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	183b      	adds	r3, r7, r0
 800cfd2:	7b9b      	ldrb	r3, [r3, #14]
 800cfd4:	0019      	movs	r1, r3
 800cfd6:	4b7f      	ldr	r3, [pc, #508]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800cfd8:	5c5b      	ldrb	r3, [r3, r1]
 800cfda:	4053      	eors	r3, r2
 800cfdc:	b2d9      	uxtb	r1, r3
 800cfde:	183b      	adds	r3, r7, r0
 800cfe0:	78db      	ldrb	r3, [r3, #3]
 800cfe2:	001a      	movs	r2, r3
 800cfe4:	4b79      	ldr	r3, [pc, #484]	; (800d1cc <mix_sub_columns+0x3c0>)
 800cfe6:	5c9a      	ldrb	r2, [r3, r2]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	3307      	adds	r3, #7
 800cfec:	404a      	eors	r2, r1
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800cff2:	183b      	adds	r3, r7, r0
 800cff4:	7a1b      	ldrb	r3, [r3, #8]
 800cff6:	001a      	movs	r2, r3
 800cff8:	4b74      	ldr	r3, [pc, #464]	; (800d1cc <mix_sub_columns+0x3c0>)
 800cffa:	5c9a      	ldrb	r2, [r3, r2]
 800cffc:	183b      	adds	r3, r7, r0
 800cffe:	7b5b      	ldrb	r3, [r3, #13]
 800d000:	0019      	movs	r1, r3
 800d002:	4b73      	ldr	r3, [pc, #460]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800d004:	5c5b      	ldrb	r3, [r3, r1]
 800d006:	4053      	eors	r3, r2
 800d008:	b2da      	uxtb	r2, r3
 800d00a:	183b      	adds	r3, r7, r0
 800d00c:	789b      	ldrb	r3, [r3, #2]
 800d00e:	0019      	movs	r1, r3
 800d010:	4b70      	ldr	r3, [pc, #448]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d012:	5c5b      	ldrb	r3, [r3, r1]
 800d014:	4053      	eors	r3, r2
 800d016:	b2d9      	uxtb	r1, r3
 800d018:	183b      	adds	r3, r7, r0
 800d01a:	79db      	ldrb	r3, [r3, #7]
 800d01c:	001a      	movs	r2, r3
 800d01e:	4b6d      	ldr	r3, [pc, #436]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d020:	5c9a      	ldrb	r2, [r3, r2]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	3308      	adds	r3, #8
 800d026:	404a      	eors	r2, r1
 800d028:	b2d2      	uxtb	r2, r2
 800d02a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d02c:	183b      	adds	r3, r7, r0
 800d02e:	7a1b      	ldrb	r3, [r3, #8]
 800d030:	001a      	movs	r2, r3
 800d032:	4b68      	ldr	r3, [pc, #416]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d034:	5c9a      	ldrb	r2, [r3, r2]
 800d036:	183b      	adds	r3, r7, r0
 800d038:	7b5b      	ldrb	r3, [r3, #13]
 800d03a:	0019      	movs	r1, r3
 800d03c:	4b63      	ldr	r3, [pc, #396]	; (800d1cc <mix_sub_columns+0x3c0>)
 800d03e:	5c5b      	ldrb	r3, [r3, r1]
 800d040:	4053      	eors	r3, r2
 800d042:	b2da      	uxtb	r2, r3
 800d044:	183b      	adds	r3, r7, r0
 800d046:	789b      	ldrb	r3, [r3, #2]
 800d048:	0019      	movs	r1, r3
 800d04a:	4b61      	ldr	r3, [pc, #388]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800d04c:	5c5b      	ldrb	r3, [r3, r1]
 800d04e:	4053      	eors	r3, r2
 800d050:	b2d9      	uxtb	r1, r3
 800d052:	183b      	adds	r3, r7, r0
 800d054:	79db      	ldrb	r3, [r3, #7]
 800d056:	001a      	movs	r2, r3
 800d058:	4b5e      	ldr	r3, [pc, #376]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d05a:	5c9a      	ldrb	r2, [r3, r2]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	3309      	adds	r3, #9
 800d060:	404a      	eors	r2, r1
 800d062:	b2d2      	uxtb	r2, r2
 800d064:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d066:	183b      	adds	r3, r7, r0
 800d068:	7a1b      	ldrb	r3, [r3, #8]
 800d06a:	001a      	movs	r2, r3
 800d06c:	4b59      	ldr	r3, [pc, #356]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d06e:	5c9a      	ldrb	r2, [r3, r2]
 800d070:	183b      	adds	r3, r7, r0
 800d072:	7b5b      	ldrb	r3, [r3, #13]
 800d074:	0019      	movs	r1, r3
 800d076:	4b57      	ldr	r3, [pc, #348]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d078:	5c5b      	ldrb	r3, [r3, r1]
 800d07a:	4053      	eors	r3, r2
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	183b      	adds	r3, r7, r0
 800d080:	789b      	ldrb	r3, [r3, #2]
 800d082:	0019      	movs	r1, r3
 800d084:	4b51      	ldr	r3, [pc, #324]	; (800d1cc <mix_sub_columns+0x3c0>)
 800d086:	5c5b      	ldrb	r3, [r3, r1]
 800d088:	4053      	eors	r3, r2
 800d08a:	b2d9      	uxtb	r1, r3
 800d08c:	183b      	adds	r3, r7, r0
 800d08e:	79db      	ldrb	r3, [r3, #7]
 800d090:	001a      	movs	r2, r3
 800d092:	4b4f      	ldr	r3, [pc, #316]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800d094:	5c9a      	ldrb	r2, [r3, r2]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	330a      	adds	r3, #10
 800d09a:	404a      	eors	r2, r1
 800d09c:	b2d2      	uxtb	r2, r2
 800d09e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d0a0:	183b      	adds	r3, r7, r0
 800d0a2:	7a1b      	ldrb	r3, [r3, #8]
 800d0a4:	001a      	movs	r2, r3
 800d0a6:	4b4a      	ldr	r3, [pc, #296]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800d0a8:	5c9a      	ldrb	r2, [r3, r2]
 800d0aa:	183b      	adds	r3, r7, r0
 800d0ac:	7b5b      	ldrb	r3, [r3, #13]
 800d0ae:	0019      	movs	r1, r3
 800d0b0:	4b48      	ldr	r3, [pc, #288]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d0b2:	5c5b      	ldrb	r3, [r3, r1]
 800d0b4:	4053      	eors	r3, r2
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	183b      	adds	r3, r7, r0
 800d0ba:	789b      	ldrb	r3, [r3, #2]
 800d0bc:	0019      	movs	r1, r3
 800d0be:	4b45      	ldr	r3, [pc, #276]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d0c0:	5c5b      	ldrb	r3, [r3, r1]
 800d0c2:	4053      	eors	r3, r2
 800d0c4:	b2d9      	uxtb	r1, r3
 800d0c6:	183b      	adds	r3, r7, r0
 800d0c8:	79db      	ldrb	r3, [r3, #7]
 800d0ca:	001a      	movs	r2, r3
 800d0cc:	4b3f      	ldr	r3, [pc, #252]	; (800d1cc <mix_sub_columns+0x3c0>)
 800d0ce:	5c9a      	ldrb	r2, [r3, r2]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	330b      	adds	r3, #11
 800d0d4:	404a      	eors	r2, r1
 800d0d6:	b2d2      	uxtb	r2, r2
 800d0d8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d0da:	183b      	adds	r3, r7, r0
 800d0dc:	7b1b      	ldrb	r3, [r3, #12]
 800d0de:	001a      	movs	r2, r3
 800d0e0:	4b3a      	ldr	r3, [pc, #232]	; (800d1cc <mix_sub_columns+0x3c0>)
 800d0e2:	5c9a      	ldrb	r2, [r3, r2]
 800d0e4:	183b      	adds	r3, r7, r0
 800d0e6:	785b      	ldrb	r3, [r3, #1]
 800d0e8:	0019      	movs	r1, r3
 800d0ea:	4b39      	ldr	r3, [pc, #228]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800d0ec:	5c5b      	ldrb	r3, [r3, r1]
 800d0ee:	4053      	eors	r3, r2
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	183b      	adds	r3, r7, r0
 800d0f4:	799b      	ldrb	r3, [r3, #6]
 800d0f6:	0019      	movs	r1, r3
 800d0f8:	4b36      	ldr	r3, [pc, #216]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d0fa:	5c5b      	ldrb	r3, [r3, r1]
 800d0fc:	4053      	eors	r3, r2
 800d0fe:	b2d9      	uxtb	r1, r3
 800d100:	183b      	adds	r3, r7, r0
 800d102:	7adb      	ldrb	r3, [r3, #11]
 800d104:	001a      	movs	r2, r3
 800d106:	4b33      	ldr	r3, [pc, #204]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d108:	5c9a      	ldrb	r2, [r3, r2]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	330c      	adds	r3, #12
 800d10e:	404a      	eors	r2, r1
 800d110:	b2d2      	uxtb	r2, r2
 800d112:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d114:	183b      	adds	r3, r7, r0
 800d116:	7b1b      	ldrb	r3, [r3, #12]
 800d118:	001a      	movs	r2, r3
 800d11a:	4b2e      	ldr	r3, [pc, #184]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d11c:	5c9a      	ldrb	r2, [r3, r2]
 800d11e:	183b      	adds	r3, r7, r0
 800d120:	785b      	ldrb	r3, [r3, #1]
 800d122:	0019      	movs	r1, r3
 800d124:	4b29      	ldr	r3, [pc, #164]	; (800d1cc <mix_sub_columns+0x3c0>)
 800d126:	5c5b      	ldrb	r3, [r3, r1]
 800d128:	4053      	eors	r3, r2
 800d12a:	b2da      	uxtb	r2, r3
 800d12c:	183b      	adds	r3, r7, r0
 800d12e:	799b      	ldrb	r3, [r3, #6]
 800d130:	0019      	movs	r1, r3
 800d132:	4b27      	ldr	r3, [pc, #156]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800d134:	5c5b      	ldrb	r3, [r3, r1]
 800d136:	4053      	eors	r3, r2
 800d138:	b2d9      	uxtb	r1, r3
 800d13a:	183b      	adds	r3, r7, r0
 800d13c:	7adb      	ldrb	r3, [r3, #11]
 800d13e:	001a      	movs	r2, r3
 800d140:	4b24      	ldr	r3, [pc, #144]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d142:	5c9a      	ldrb	r2, [r3, r2]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	330d      	adds	r3, #13
 800d148:	404a      	eors	r2, r1
 800d14a:	b2d2      	uxtb	r2, r2
 800d14c:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d14e:	183b      	adds	r3, r7, r0
 800d150:	7b1b      	ldrb	r3, [r3, #12]
 800d152:	001a      	movs	r2, r3
 800d154:	4b1f      	ldr	r3, [pc, #124]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d156:	5c9a      	ldrb	r2, [r3, r2]
 800d158:	183b      	adds	r3, r7, r0
 800d15a:	785b      	ldrb	r3, [r3, #1]
 800d15c:	0019      	movs	r1, r3
 800d15e:	4b1d      	ldr	r3, [pc, #116]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d160:	5c5b      	ldrb	r3, [r3, r1]
 800d162:	4053      	eors	r3, r2
 800d164:	b2da      	uxtb	r2, r3
 800d166:	183b      	adds	r3, r7, r0
 800d168:	799b      	ldrb	r3, [r3, #6]
 800d16a:	0019      	movs	r1, r3
 800d16c:	4b17      	ldr	r3, [pc, #92]	; (800d1cc <mix_sub_columns+0x3c0>)
 800d16e:	5c5b      	ldrb	r3, [r3, r1]
 800d170:	4053      	eors	r3, r2
 800d172:	b2d9      	uxtb	r1, r3
 800d174:	183b      	adds	r3, r7, r0
 800d176:	7adb      	ldrb	r3, [r3, #11]
 800d178:	001a      	movs	r2, r3
 800d17a:	4b15      	ldr	r3, [pc, #84]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800d17c:	5c9a      	ldrb	r2, [r3, r2]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	330e      	adds	r3, #14
 800d182:	404a      	eors	r2, r1
 800d184:	b2d2      	uxtb	r2, r2
 800d186:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d188:	183b      	adds	r3, r7, r0
 800d18a:	7b1b      	ldrb	r3, [r3, #12]
 800d18c:	001a      	movs	r2, r3
 800d18e:	4b10      	ldr	r3, [pc, #64]	; (800d1d0 <mix_sub_columns+0x3c4>)
 800d190:	5c9a      	ldrb	r2, [r3, r2]
 800d192:	183b      	adds	r3, r7, r0
 800d194:	785b      	ldrb	r3, [r3, #1]
 800d196:	0019      	movs	r1, r3
 800d198:	4b0e      	ldr	r3, [pc, #56]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d19a:	5c5b      	ldrb	r3, [r3, r1]
 800d19c:	4053      	eors	r3, r2
 800d19e:	b2da      	uxtb	r2, r3
 800d1a0:	183b      	adds	r3, r7, r0
 800d1a2:	799b      	ldrb	r3, [r3, #6]
 800d1a4:	0019      	movs	r1, r3
 800d1a6:	4b0b      	ldr	r3, [pc, #44]	; (800d1d4 <mix_sub_columns+0x3c8>)
 800d1a8:	5c5b      	ldrb	r3, [r3, r1]
 800d1aa:	4053      	eors	r3, r2
 800d1ac:	b2d9      	uxtb	r1, r3
 800d1ae:	183b      	adds	r3, r7, r0
 800d1b0:	7adb      	ldrb	r3, [r3, #11]
 800d1b2:	001a      	movs	r2, r3
 800d1b4:	4b05      	ldr	r3, [pc, #20]	; (800d1cc <mix_sub_columns+0x3c0>)
 800d1b6:	5c9a      	ldrb	r2, [r3, r2]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	330f      	adds	r3, #15
 800d1bc:	404a      	eors	r2, r1
 800d1be:	b2d2      	uxtb	r2, r2
 800d1c0:	701a      	strb	r2, [r3, #0]
  }
 800d1c2:	46c0      	nop			; (mov r8, r8)
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	b007      	add	sp, #28
 800d1c8:	bd90      	pop	{r4, r7, pc}
 800d1ca:	46c0      	nop			; (mov r8, r8)
 800d1cc:	08020c6c 	.word	0x08020c6c
 800d1d0:	08020d6c 	.word	0x08020d6c
 800d1d4:	08020b6c 	.word	0x08020b6c

0800d1d8 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1da:	b087      	sub	sp, #28
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	607a      	str	r2, [r7, #4]
 800d1e2:	200b      	movs	r0, #11
 800d1e4:	183b      	adds	r3, r7, r0
 800d1e6:	1c0a      	adds	r2, r1, #0
 800d1e8:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d1ea:	183b      	adds	r3, r7, r0
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	3b10      	subs	r3, #16
 800d1f0:	2210      	movs	r2, #16
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	4192      	sbcs	r2, r2
 800d1f6:	4252      	negs	r2, r2
 800d1f8:	b2d2      	uxtb	r2, r2
 800d1fa:	2a00      	cmp	r2, #0
 800d1fc:	d109      	bne.n	800d212 <lorawan_aes_set_key+0x3a>
 800d1fe:	2201      	movs	r2, #1
 800d200:	409a      	lsls	r2, r3
 800d202:	0013      	movs	r3, r2
 800d204:	4a90      	ldr	r2, [pc, #576]	; (800d448 <lorawan_aes_set_key+0x270>)
 800d206:	4013      	ands	r3, r2
 800d208:	1e5a      	subs	r2, r3, #1
 800d20a:	4193      	sbcs	r3, r2
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d105      	bne.n	800d21e <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	22f0      	movs	r2, #240	; 0xf0
 800d216:	2100      	movs	r1, #0
 800d218:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800d21a:	23ff      	movs	r3, #255	; 0xff
 800d21c:	e10f      	b.n	800d43e <lorawan_aes_set_key+0x266>
        break;
 800d21e:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	240b      	movs	r4, #11
 800d224:	193b      	adds	r3, r7, r4
 800d226:	781a      	ldrb	r2, [r3, #0]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	0019      	movs	r1, r3
 800d22c:	f7ff fbb4 	bl	800c998 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d230:	0020      	movs	r0, r4
 800d232:	183b      	adds	r3, r7, r0
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	331c      	adds	r3, #28
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	2111      	movs	r1, #17
 800d23c:	187b      	adds	r3, r7, r1
 800d23e:	0092      	lsls	r2, r2, #2
 800d240:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800d242:	187b      	adds	r3, r7, r1
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	091b      	lsrs	r3, r3, #4
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	3b01      	subs	r3, #1
 800d24c:	b2d9      	uxtb	r1, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	22f0      	movs	r2, #240	; 0xf0
 800d252:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d254:	2317      	movs	r3, #23
 800d256:	18fb      	adds	r3, r7, r3
 800d258:	183a      	adds	r2, r7, r0
 800d25a:	7812      	ldrb	r2, [r2, #0]
 800d25c:	701a      	strb	r2, [r3, #0]
 800d25e:	2316      	movs	r3, #22
 800d260:	18fb      	adds	r3, r7, r3
 800d262:	2201      	movs	r2, #1
 800d264:	701a      	strb	r2, [r3, #0]
 800d266:	e0e0      	b.n	800d42a <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d268:	2017      	movs	r0, #23
 800d26a:	183b      	adds	r3, r7, r0
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	1f1a      	subs	r2, r3, #4
 800d270:	2415      	movs	r4, #21
 800d272:	193b      	adds	r3, r7, r4
 800d274:	6879      	ldr	r1, [r7, #4]
 800d276:	5c8a      	ldrb	r2, [r1, r2]
 800d278:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800d27a:	183b      	adds	r3, r7, r0
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	1eda      	subs	r2, r3, #3
 800d280:	2514      	movs	r5, #20
 800d282:	197b      	adds	r3, r7, r5
 800d284:	6879      	ldr	r1, [r7, #4]
 800d286:	5c8a      	ldrb	r2, [r1, r2]
 800d288:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800d28a:	183b      	adds	r3, r7, r0
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	1e9a      	subs	r2, r3, #2
 800d290:	2613      	movs	r6, #19
 800d292:	19bb      	adds	r3, r7, r6
 800d294:	6879      	ldr	r1, [r7, #4]
 800d296:	5c8a      	ldrb	r2, [r1, r2]
 800d298:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800d29a:	183b      	adds	r3, r7, r0
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	1e5a      	subs	r2, r3, #1
 800d2a0:	2312      	movs	r3, #18
 800d2a2:	18fb      	adds	r3, r7, r3
 800d2a4:	6879      	ldr	r1, [r7, #4]
 800d2a6:	5c8a      	ldrb	r2, [r1, r2]
 800d2a8:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800d2aa:	183a      	adds	r2, r7, r0
 800d2ac:	210b      	movs	r1, #11
 800d2ae:	187b      	adds	r3, r7, r1
 800d2b0:	7812      	ldrb	r2, [r2, #0]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	0019      	movs	r1, r3
 800d2b6:	0010      	movs	r0, r2
 800d2b8:	f7f2 ffb4 	bl	8000224 <__aeabi_uidivmod>
 800d2bc:	000b      	movs	r3, r1
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d13b      	bne.n	800d33c <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800d2c4:	2210      	movs	r2, #16
 800d2c6:	18bb      	adds	r3, r7, r2
 800d2c8:	193a      	adds	r2, r7, r4
 800d2ca:	7812      	ldrb	r2, [r2, #0]
 800d2cc:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800d2ce:	197b      	adds	r3, r7, r5
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	4a5e      	ldr	r2, [pc, #376]	; (800d44c <lorawan_aes_set_key+0x274>)
 800d2d4:	5cd1      	ldrb	r1, [r2, r3]
 800d2d6:	193b      	adds	r3, r7, r4
 800d2d8:	2016      	movs	r0, #22
 800d2da:	183a      	adds	r2, r7, r0
 800d2dc:	7812      	ldrb	r2, [r2, #0]
 800d2de:	404a      	eors	r2, r1
 800d2e0:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800d2e2:	19bb      	adds	r3, r7, r6
 800d2e4:	781a      	ldrb	r2, [r3, #0]
 800d2e6:	197b      	adds	r3, r7, r5
 800d2e8:	4958      	ldr	r1, [pc, #352]	; (800d44c <lorawan_aes_set_key+0x274>)
 800d2ea:	5c8a      	ldrb	r2, [r1, r2]
 800d2ec:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800d2ee:	2412      	movs	r4, #18
 800d2f0:	193b      	adds	r3, r7, r4
 800d2f2:	781a      	ldrb	r2, [r3, #0]
 800d2f4:	19bb      	adds	r3, r7, r6
 800d2f6:	4955      	ldr	r1, [pc, #340]	; (800d44c <lorawan_aes_set_key+0x274>)
 800d2f8:	5c8a      	ldrb	r2, [r1, r2]
 800d2fa:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800d2fc:	2210      	movs	r2, #16
 800d2fe:	18bb      	adds	r3, r7, r2
 800d300:	781a      	ldrb	r2, [r3, #0]
 800d302:	193b      	adds	r3, r7, r4
 800d304:	4951      	ldr	r1, [pc, #324]	; (800d44c <lorawan_aes_set_key+0x274>)
 800d306:	5c8a      	ldrb	r2, [r1, r2]
 800d308:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800d30a:	183b      	adds	r3, r7, r0
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	005b      	lsls	r3, r3, #1
 800d310:	b25a      	sxtb	r2, r3
 800d312:	0004      	movs	r4, r0
 800d314:	183b      	adds	r3, r7, r0
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	09db      	lsrs	r3, r3, #7
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	1c19      	adds	r1, r3, #0
 800d31e:	1c0b      	adds	r3, r1, #0
 800d320:	18db      	adds	r3, r3, r3
 800d322:	185b      	adds	r3, r3, r1
 800d324:	1c19      	adds	r1, r3, #0
 800d326:	00c8      	lsls	r0, r1, #3
 800d328:	1c19      	adds	r1, r3, #0
 800d32a:	1c03      	adds	r3, r0, #0
 800d32c:	18cb      	adds	r3, r1, r3
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	b25b      	sxtb	r3, r3
 800d332:	4053      	eors	r3, r2
 800d334:	b25a      	sxtb	r2, r3
 800d336:	193b      	adds	r3, r7, r4
 800d338:	701a      	strb	r2, [r3, #0]
 800d33a:	e02d      	b.n	800d398 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d33c:	210b      	movs	r1, #11
 800d33e:	187b      	adds	r3, r7, r1
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b18      	cmp	r3, #24
 800d344:	d928      	bls.n	800d398 <lorawan_aes_set_key+0x1c0>
 800d346:	2317      	movs	r3, #23
 800d348:	18fa      	adds	r2, r7, r3
 800d34a:	187b      	adds	r3, r7, r1
 800d34c:	7812      	ldrb	r2, [r2, #0]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	0019      	movs	r1, r3
 800d352:	0010      	movs	r0, r2
 800d354:	f7f2 ff66 	bl	8000224 <__aeabi_uidivmod>
 800d358:	000b      	movs	r3, r1
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b10      	cmp	r3, #16
 800d35e:	d11b      	bne.n	800d398 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800d360:	2115      	movs	r1, #21
 800d362:	187b      	adds	r3, r7, r1
 800d364:	781a      	ldrb	r2, [r3, #0]
 800d366:	187b      	adds	r3, r7, r1
 800d368:	4938      	ldr	r1, [pc, #224]	; (800d44c <lorawan_aes_set_key+0x274>)
 800d36a:	5c8a      	ldrb	r2, [r1, r2]
 800d36c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800d36e:	2114      	movs	r1, #20
 800d370:	187b      	adds	r3, r7, r1
 800d372:	781a      	ldrb	r2, [r3, #0]
 800d374:	187b      	adds	r3, r7, r1
 800d376:	4935      	ldr	r1, [pc, #212]	; (800d44c <lorawan_aes_set_key+0x274>)
 800d378:	5c8a      	ldrb	r2, [r1, r2]
 800d37a:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800d37c:	2113      	movs	r1, #19
 800d37e:	187b      	adds	r3, r7, r1
 800d380:	781a      	ldrb	r2, [r3, #0]
 800d382:	187b      	adds	r3, r7, r1
 800d384:	4931      	ldr	r1, [pc, #196]	; (800d44c <lorawan_aes_set_key+0x274>)
 800d386:	5c8a      	ldrb	r2, [r1, r2]
 800d388:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800d38a:	2112      	movs	r1, #18
 800d38c:	187b      	adds	r3, r7, r1
 800d38e:	781a      	ldrb	r2, [r3, #0]
 800d390:	187b      	adds	r3, r7, r1
 800d392:	492e      	ldr	r1, [pc, #184]	; (800d44c <lorawan_aes_set_key+0x274>)
 800d394:	5c8a      	ldrb	r2, [r1, r2]
 800d396:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800d398:	2410      	movs	r4, #16
 800d39a:	193b      	adds	r3, r7, r4
 800d39c:	2017      	movs	r0, #23
 800d39e:	1839      	adds	r1, r7, r0
 800d3a0:	220b      	movs	r2, #11
 800d3a2:	18ba      	adds	r2, r7, r2
 800d3a4:	7809      	ldrb	r1, [r1, #0]
 800d3a6:	7812      	ldrb	r2, [r2, #0]
 800d3a8:	1a8a      	subs	r2, r1, r2
 800d3aa:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d3ac:	193b      	adds	r3, r7, r4
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	5cd1      	ldrb	r1, [r2, r3]
 800d3b4:	183b      	adds	r3, r7, r0
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	2215      	movs	r2, #21
 800d3ba:	18ba      	adds	r2, r7, r2
 800d3bc:	7812      	ldrb	r2, [r2, #0]
 800d3be:	404a      	eors	r2, r1
 800d3c0:	b2d1      	uxtb	r1, r2
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d3c6:	193b      	adds	r3, r7, r4
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	5cd1      	ldrb	r1, [r2, r3]
 800d3d0:	183b      	adds	r3, r7, r0
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	2214      	movs	r2, #20
 800d3d8:	18ba      	adds	r2, r7, r2
 800d3da:	7812      	ldrb	r2, [r2, #0]
 800d3dc:	404a      	eors	r2, r1
 800d3de:	b2d1      	uxtb	r1, r2
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d3e4:	193b      	adds	r3, r7, r4
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	3302      	adds	r3, #2
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	5cd1      	ldrb	r1, [r2, r3]
 800d3ee:	183b      	adds	r3, r7, r0
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	3302      	adds	r3, #2
 800d3f4:	2213      	movs	r2, #19
 800d3f6:	18ba      	adds	r2, r7, r2
 800d3f8:	7812      	ldrb	r2, [r2, #0]
 800d3fa:	404a      	eors	r2, r1
 800d3fc:	b2d1      	uxtb	r1, r2
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d402:	193b      	adds	r3, r7, r4
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	3303      	adds	r3, #3
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	5cd1      	ldrb	r1, [r2, r3]
 800d40c:	183b      	adds	r3, r7, r0
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	3303      	adds	r3, #3
 800d412:	2212      	movs	r2, #18
 800d414:	18ba      	adds	r2, r7, r2
 800d416:	7812      	ldrb	r2, [r2, #0]
 800d418:	404a      	eors	r2, r1
 800d41a:	b2d1      	uxtb	r1, r2
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d420:	183b      	adds	r3, r7, r0
 800d422:	183a      	adds	r2, r7, r0
 800d424:	7812      	ldrb	r2, [r2, #0]
 800d426:	3204      	adds	r2, #4
 800d428:	701a      	strb	r2, [r3, #0]
 800d42a:	2317      	movs	r3, #23
 800d42c:	18fa      	adds	r2, r7, r3
 800d42e:	2311      	movs	r3, #17
 800d430:	18fb      	adds	r3, r7, r3
 800d432:	7812      	ldrb	r2, [r2, #0]
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	429a      	cmp	r2, r3
 800d438:	d200      	bcs.n	800d43c <lorawan_aes_set_key+0x264>
 800d43a:	e715      	b.n	800d268 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	0018      	movs	r0, r3
 800d440:	46bd      	mov	sp, r7
 800d442:	b007      	add	sp, #28
 800d444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d446:	46c0      	nop			; (mov r8, r8)
 800d448:	00010101 	.word	0x00010101
 800d44c:	08020b6c 	.word	0x08020b6c

0800d450 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d450:	b5b0      	push	{r4, r5, r7, lr}
 800d452:	b08a      	sub	sp, #40	; 0x28
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	22f0      	movs	r2, #240	; 0xf0
 800d460:	5c9b      	ldrb	r3, [r3, r2]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d039      	beq.n	800d4da <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	68f9      	ldr	r1, [r7, #12]
 800d46a:	2314      	movs	r3, #20
 800d46c:	18fb      	adds	r3, r7, r3
 800d46e:	0018      	movs	r0, r3
 800d470:	f7ff fb64 	bl	800cb3c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d474:	2327      	movs	r3, #39	; 0x27
 800d476:	18fb      	adds	r3, r7, r3
 800d478:	2201      	movs	r2, #1
 800d47a:	701a      	strb	r2, [r3, #0]
 800d47c:	e014      	b.n	800d4a8 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d47e:	2514      	movs	r5, #20
 800d480:	197b      	adds	r3, r7, r5
 800d482:	0018      	movs	r0, r3
 800d484:	f7ff fcc2 	bl	800ce0c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2427      	movs	r4, #39	; 0x27
 800d48c:	193a      	adds	r2, r7, r4
 800d48e:	7812      	ldrb	r2, [r2, #0]
 800d490:	0112      	lsls	r2, r2, #4
 800d492:	189a      	adds	r2, r3, r2
 800d494:	197b      	adds	r3, r7, r5
 800d496:	0011      	movs	r1, r2
 800d498:	0018      	movs	r0, r3
 800d49a:	f7ff fc06 	bl	800ccaa <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d49e:	193b      	adds	r3, r7, r4
 800d4a0:	193a      	adds	r2, r7, r4
 800d4a2:	7812      	ldrb	r2, [r2, #0]
 800d4a4:	3201      	adds	r2, #1
 800d4a6:	701a      	strb	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	22f0      	movs	r2, #240	; 0xf0
 800d4ac:	5c9b      	ldrb	r3, [r3, r2]
 800d4ae:	2427      	movs	r4, #39	; 0x27
 800d4b0:	193a      	adds	r2, r7, r4
 800d4b2:	7812      	ldrb	r2, [r2, #0]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d3e2      	bcc.n	800d47e <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d4b8:	2514      	movs	r5, #20
 800d4ba:	197b      	adds	r3, r7, r5
 800d4bc:	0018      	movs	r0, r3
 800d4be:	f7ff fc03 	bl	800ccc8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	193a      	adds	r2, r7, r4
 800d4c6:	7812      	ldrb	r2, [r2, #0]
 800d4c8:	0112      	lsls	r2, r2, #4
 800d4ca:	189a      	adds	r2, r3, r2
 800d4cc:	1979      	adds	r1, r7, r5
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	0018      	movs	r0, r3
 800d4d2:	f7ff fb33 	bl	800cb3c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e000      	b.n	800d4dc <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800d4da:	23ff      	movs	r3, #255	; 0xff
}
 800d4dc:	0018      	movs	r0, r3
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	b00a      	add	sp, #40	; 0x28
 800d4e2:	bdb0      	pop	{r4, r5, r7, pc}

0800d4e4 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	0002      	movs	r2, r0
 800d4ec:	6039      	str	r1, [r7, #0]
 800d4ee:	1dfb      	adds	r3, r7, #7
 800d4f0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d4f2:	230f      	movs	r3, #15
 800d4f4:	18fb      	adds	r3, r7, r3
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	701a      	strb	r2, [r3, #0]
 800d4fa:	e020      	b.n	800d53e <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d4fc:	200f      	movs	r0, #15
 800d4fe:	183b      	adds	r3, r7, r0
 800d500:	781a      	ldrb	r2, [r3, #0]
 800d502:	4914      	ldr	r1, [pc, #80]	; (800d554 <GetKeyByID+0x70>)
 800d504:	0013      	movs	r3, r2
 800d506:	011b      	lsls	r3, r3, #4
 800d508:	189b      	adds	r3, r3, r2
 800d50a:	18cb      	adds	r3, r1, r3
 800d50c:	3310      	adds	r3, #16
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	1dfa      	adds	r2, r7, #7
 800d512:	7812      	ldrb	r2, [r2, #0]
 800d514:	429a      	cmp	r2, r3
 800d516:	d10c      	bne.n	800d532 <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800d518:	183b      	adds	r3, r7, r0
 800d51a:	781a      	ldrb	r2, [r3, #0]
 800d51c:	0013      	movs	r3, r2
 800d51e:	011b      	lsls	r3, r3, #4
 800d520:	189b      	adds	r3, r3, r2
 800d522:	3310      	adds	r3, #16
 800d524:	001a      	movs	r2, r3
 800d526:	4b0b      	ldr	r3, [pc, #44]	; (800d554 <GetKeyByID+0x70>)
 800d528:	18d2      	adds	r2, r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800d52e:	2300      	movs	r3, #0
 800d530:	e00b      	b.n	800d54a <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d532:	210f      	movs	r1, #15
 800d534:	187b      	adds	r3, r7, r1
 800d536:	781a      	ldrb	r2, [r3, #0]
 800d538:	187b      	adds	r3, r7, r1
 800d53a:	3201      	adds	r2, #1
 800d53c:	701a      	strb	r2, [r3, #0]
 800d53e:	230f      	movs	r3, #15
 800d540:	18fb      	adds	r3, r7, r3
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b09      	cmp	r3, #9
 800d546:	d9d9      	bls.n	800d4fc <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d548:	2303      	movs	r3, #3
}
 800d54a:	0018      	movs	r0, r3
 800d54c:	46bd      	mov	sp, r7
 800d54e:	b004      	add	sp, #16
 800d550:	bd80      	pop	{r7, pc}
 800d552:	46c0      	nop			; (mov r8, r8)
 800d554:	20000090 	.word	0x20000090

0800d558 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	af00      	add	r7, sp, #0
  return;
 800d55c:	46c0      	nop			; (mov r8, r8)
}
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
	...

0800d564 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800d564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d566:	b0d1      	sub	sp, #324	; 0x144
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	0019      	movs	r1, r3
 800d570:	4b40      	ldr	r3, [pc, #256]	; (800d674 <ComputeCmac+0x110>)
 800d572:	20a0      	movs	r0, #160	; 0xa0
 800d574:	0040      	lsls	r0, r0, #1
 800d576:	4684      	mov	ip, r0
 800d578:	44bc      	add	ip, r7
 800d57a:	4463      	add	r3, ip
 800d57c:	801a      	strh	r2, [r3, #0]
 800d57e:	4b3e      	ldr	r3, [pc, #248]	; (800d678 <ComputeCmac+0x114>)
 800d580:	22a0      	movs	r2, #160	; 0xa0
 800d582:	0052      	lsls	r2, r2, #1
 800d584:	4694      	mov	ip, r2
 800d586:	44bc      	add	ip, r7
 800d588:	4463      	add	r3, ip
 800d58a:	1c0a      	adds	r2, r1, #0
 800d58c:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d58e:	2340      	movs	r3, #64	; 0x40
 800d590:	33ff      	adds	r3, #255	; 0xff
 800d592:	18fb      	adds	r3, r7, r3
 800d594:	2206      	movs	r2, #6
 800d596:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d008      	beq.n	800d5b0 <ComputeCmac+0x4c>
 800d59e:	23a8      	movs	r3, #168	; 0xa8
 800d5a0:	005b      	lsls	r3, r3, #1
 800d5a2:	2208      	movs	r2, #8
 800d5a4:	4694      	mov	ip, r2
 800d5a6:	44bc      	add	ip, r7
 800d5a8:	4463      	add	r3, ip
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <ComputeCmac+0x50>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	e05a      	b.n	800d66a <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800d5b4:	2514      	movs	r5, #20
 800d5b6:	197b      	adds	r3, r7, r5
 800d5b8:	0018      	movs	r0, r3
 800d5ba:	f7fe ff39 	bl	800c430 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800d5be:	2640      	movs	r6, #64	; 0x40
 800d5c0:	36ff      	adds	r6, #255	; 0xff
 800d5c2:	19bc      	adds	r4, r7, r6
 800d5c4:	2310      	movs	r3, #16
 800d5c6:	18fa      	adds	r2, r7, r3
 800d5c8:	4b2b      	ldr	r3, [pc, #172]	; (800d678 <ComputeCmac+0x114>)
 800d5ca:	21a0      	movs	r1, #160	; 0xa0
 800d5cc:	0049      	lsls	r1, r1, #1
 800d5ce:	468c      	mov	ip, r1
 800d5d0:	44bc      	add	ip, r7
 800d5d2:	4463      	add	r3, ip
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	0011      	movs	r1, r2
 800d5d8:	0018      	movs	r0, r3
 800d5da:	f7ff ff83 	bl	800d4e4 <GetKeyByID>
 800d5de:	0003      	movs	r3, r0
 800d5e0:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d5e2:	19bb      	adds	r3, r7, r6
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d13b      	bne.n	800d662 <ComputeCmac+0xfe>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	1c5a      	adds	r2, r3, #1
 800d5ee:	197b      	adds	r3, r7, r5
 800d5f0:	0011      	movs	r1, r2
 800d5f2:	0018      	movs	r0, r3
 800d5f4:	f7fe ff36 	bl	800c464 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d005      	beq.n	800d60a <ComputeCmac+0xa6>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800d5fe:	68f9      	ldr	r1, [r7, #12]
 800d600:	197b      	adds	r3, r7, r5
 800d602:	2210      	movs	r2, #16
 800d604:	0018      	movs	r0, r3
 800d606:	f7fe ff3c 	bl	800c482 <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800d60a:	4b1a      	ldr	r3, [pc, #104]	; (800d674 <ComputeCmac+0x110>)
 800d60c:	22a0      	movs	r2, #160	; 0xa0
 800d60e:	0052      	lsls	r2, r2, #1
 800d610:	4694      	mov	ip, r2
 800d612:	44bc      	add	ip, r7
 800d614:	4463      	add	r3, ip
 800d616:	881a      	ldrh	r2, [r3, #0]
 800d618:	68b9      	ldr	r1, [r7, #8]
 800d61a:	2414      	movs	r4, #20
 800d61c:	193b      	adds	r3, r7, r4
 800d61e:	0018      	movs	r0, r3
 800d620:	f7fe ff2f 	bl	800c482 <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800d624:	193a      	adds	r2, r7, r4
 800d626:	2496      	movs	r4, #150	; 0x96
 800d628:	0064      	lsls	r4, r4, #1
 800d62a:	193b      	adds	r3, r7, r4
 800d62c:	0011      	movs	r1, r2
 800d62e:	0018      	movs	r0, r3
 800d630:	f7fe ffef 	bl	800c612 <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d634:	0021      	movs	r1, r4
 800d636:	187b      	adds	r3, r7, r1
 800d638:	78db      	ldrb	r3, [r3, #3]
 800d63a:	061a      	lsls	r2, r3, #24
 800d63c:	187b      	adds	r3, r7, r1
 800d63e:	789b      	ldrb	r3, [r3, #2]
 800d640:	041b      	lsls	r3, r3, #16
 800d642:	431a      	orrs	r2, r3
 800d644:	187b      	adds	r3, r7, r1
 800d646:	785b      	ldrb	r3, [r3, #1]
 800d648:	021b      	lsls	r3, r3, #8
 800d64a:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800d64c:	187a      	adds	r2, r7, r1
 800d64e:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d650:	431a      	orrs	r2, r3
 800d652:	23a8      	movs	r3, #168	; 0xa8
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	2108      	movs	r1, #8
 800d658:	468c      	mov	ip, r1
 800d65a:	44bc      	add	ip, r7
 800d65c:	4463      	add	r3, ip
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d662:	2340      	movs	r3, #64	; 0x40
 800d664:	33ff      	adds	r3, #255	; 0xff
 800d666:	18fb      	adds	r3, r7, r3
 800d668:	781b      	ldrb	r3, [r3, #0]
}
 800d66a:	0018      	movs	r0, r3
 800d66c:	46bd      	mov	sp, r7
 800d66e:	b051      	add	sp, #324	; 0x144
 800d670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d672:	46c0      	nop			; (mov r8, r8)
 800d674:	fffffec6 	.word	0xfffffec6
 800d678:	fffffec5 	.word	0xfffffec5

0800d67c <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800d67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d67e:	46de      	mov	lr, fp
 800d680:	4657      	mov	r7, sl
 800d682:	464e      	mov	r6, r9
 800d684:	4645      	mov	r5, r8
 800d686:	b5e0      	push	{r5, r6, r7, lr}
 800d688:	b099      	sub	sp, #100	; 0x64
 800d68a:	af10      	add	r7, sp, #64	; 0x40
 800d68c:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d68e:	250f      	movs	r5, #15
 800d690:	2610      	movs	r6, #16
 800d692:	19bb      	adds	r3, r7, r6
 800d694:	195b      	adds	r3, r3, r5
 800d696:	2206      	movs	r2, #6
 800d698:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800d69a:	49dd      	ldr	r1, [pc, #884]	; (800da10 <SecureElementInit+0x394>)
 800d69c:	4bdd      	ldr	r3, [pc, #884]	; (800da14 <SecureElementInit+0x398>)
 800d69e:	22aa      	movs	r2, #170	; 0xaa
 800d6a0:	0018      	movs	r0, r3
 800d6a2:	f00c fba5 	bl	8019df0 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800d6a6:	19bb      	adds	r3, r7, r6
 800d6a8:	195c      	adds	r4, r3, r5
 800d6aa:	2308      	movs	r3, #8
 800d6ac:	2210      	movs	r2, #16
 800d6ae:	4694      	mov	ip, r2
 800d6b0:	44bc      	add	ip, r7
 800d6b2:	4463      	add	r3, ip
 800d6b4:	0019      	movs	r1, r3
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	f7ff ff14 	bl	800d4e4 <GetKeyByID>
 800d6bc:	0003      	movs	r3, r0
 800d6be:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d6c0:	4bd5      	ldr	r3, [pc, #852]	; (800da18 <SecureElementInit+0x39c>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	2002      	movs	r0, #2
 800d6c8:	f00f f814 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d6cc:	19bb      	adds	r3, r7, r6
 800d6ce:	195b      	adds	r3, r3, r5
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d14f      	bne.n	800d776 <SecureElementInit+0xfa>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d6d6:	69bb      	ldr	r3, [r7, #24]
 800d6d8:	785b      	ldrb	r3, [r3, #1]
 800d6da:	001d      	movs	r5, r3
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	789b      	ldrb	r3, [r3, #2]
 800d6e0:	001e      	movs	r6, r3
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	78db      	ldrb	r3, [r3, #3]
 800d6e6:	469c      	mov	ip, r3
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	791b      	ldrb	r3, [r3, #4]
 800d6ec:	4698      	mov	r8, r3
 800d6ee:	69bb      	ldr	r3, [r7, #24]
 800d6f0:	795b      	ldrb	r3, [r3, #5]
 800d6f2:	4699      	mov	r9, r3
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	799b      	ldrb	r3, [r3, #6]
 800d6f8:	469a      	mov	sl, r3
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	79db      	ldrb	r3, [r3, #7]
 800d6fe:	469b      	mov	fp, r3
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	7a1b      	ldrb	r3, [r3, #8]
 800d704:	613b      	str	r3, [r7, #16]
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	7a5b      	ldrb	r3, [r3, #9]
 800d70a:	60fb      	str	r3, [r7, #12]
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	7a9b      	ldrb	r3, [r3, #10]
 800d710:	60bb      	str	r3, [r7, #8]
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	7adb      	ldrb	r3, [r3, #11]
 800d716:	607b      	str	r3, [r7, #4]
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	7b1b      	ldrb	r3, [r3, #12]
 800d71c:	603b      	str	r3, [r7, #0]
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	7b5b      	ldrb	r3, [r3, #13]
 800d722:	001c      	movs	r4, r3
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	7b9b      	ldrb	r3, [r3, #14]
 800d728:	0018      	movs	r0, r3
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	7bdb      	ldrb	r3, [r3, #15]
 800d72e:	0019      	movs	r1, r3
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	7c1b      	ldrb	r3, [r3, #16]
 800d734:	4ab9      	ldr	r2, [pc, #740]	; (800da1c <SecureElementInit+0x3a0>)
 800d736:	930f      	str	r3, [sp, #60]	; 0x3c
 800d738:	910e      	str	r1, [sp, #56]	; 0x38
 800d73a:	900d      	str	r0, [sp, #52]	; 0x34
 800d73c:	940c      	str	r4, [sp, #48]	; 0x30
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	910b      	str	r1, [sp, #44]	; 0x2c
 800d742:	6879      	ldr	r1, [r7, #4]
 800d744:	910a      	str	r1, [sp, #40]	; 0x28
 800d746:	68b9      	ldr	r1, [r7, #8]
 800d748:	9109      	str	r1, [sp, #36]	; 0x24
 800d74a:	68f9      	ldr	r1, [r7, #12]
 800d74c:	9108      	str	r1, [sp, #32]
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	9307      	str	r3, [sp, #28]
 800d752:	465b      	mov	r3, fp
 800d754:	9306      	str	r3, [sp, #24]
 800d756:	4653      	mov	r3, sl
 800d758:	9305      	str	r3, [sp, #20]
 800d75a:	464b      	mov	r3, r9
 800d75c:	9304      	str	r3, [sp, #16]
 800d75e:	4643      	mov	r3, r8
 800d760:	9303      	str	r3, [sp, #12]
 800d762:	4663      	mov	r3, ip
 800d764:	9302      	str	r3, [sp, #8]
 800d766:	9601      	str	r6, [sp, #4]
 800d768:	9500      	str	r5, [sp, #0]
 800d76a:	0013      	movs	r3, r2
 800d76c:	2200      	movs	r2, #0
 800d76e:	2100      	movs	r1, #0
 800d770:	2002      	movs	r0, #2
 800d772:	f00e ffbf 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800d776:	250f      	movs	r5, #15
 800d778:	2610      	movs	r6, #16
 800d77a:	19bb      	adds	r3, r7, r6
 800d77c:	195c      	adds	r4, r3, r5
 800d77e:	2308      	movs	r3, #8
 800d780:	2210      	movs	r2, #16
 800d782:	4694      	mov	ip, r2
 800d784:	44bc      	add	ip, r7
 800d786:	4463      	add	r3, ip
 800d788:	0019      	movs	r1, r3
 800d78a:	2001      	movs	r0, #1
 800d78c:	f7ff feaa 	bl	800d4e4 <GetKeyByID>
 800d790:	0003      	movs	r3, r0
 800d792:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d794:	19bb      	adds	r3, r7, r6
 800d796:	195b      	adds	r3, r3, r5
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d14f      	bne.n	800d83e <SecureElementInit+0x1c2>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	785b      	ldrb	r3, [r3, #1]
 800d7a2:	001d      	movs	r5, r3
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	789b      	ldrb	r3, [r3, #2]
 800d7a8:	001e      	movs	r6, r3
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	78db      	ldrb	r3, [r3, #3]
 800d7ae:	469c      	mov	ip, r3
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	791b      	ldrb	r3, [r3, #4]
 800d7b4:	4698      	mov	r8, r3
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	795b      	ldrb	r3, [r3, #5]
 800d7ba:	4699      	mov	r9, r3
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	799b      	ldrb	r3, [r3, #6]
 800d7c0:	469a      	mov	sl, r3
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	79db      	ldrb	r3, [r3, #7]
 800d7c6:	469b      	mov	fp, r3
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	7a1b      	ldrb	r3, [r3, #8]
 800d7cc:	613b      	str	r3, [r7, #16]
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	7a5b      	ldrb	r3, [r3, #9]
 800d7d2:	60fb      	str	r3, [r7, #12]
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	7a9b      	ldrb	r3, [r3, #10]
 800d7d8:	60bb      	str	r3, [r7, #8]
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	7adb      	ldrb	r3, [r3, #11]
 800d7de:	607b      	str	r3, [r7, #4]
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	7b1b      	ldrb	r3, [r3, #12]
 800d7e4:	603b      	str	r3, [r7, #0]
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	7b5b      	ldrb	r3, [r3, #13]
 800d7ea:	001c      	movs	r4, r3
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	7b9b      	ldrb	r3, [r3, #14]
 800d7f0:	0018      	movs	r0, r3
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	7bdb      	ldrb	r3, [r3, #15]
 800d7f6:	0019      	movs	r1, r3
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	7c1b      	ldrb	r3, [r3, #16]
 800d7fc:	4a88      	ldr	r2, [pc, #544]	; (800da20 <SecureElementInit+0x3a4>)
 800d7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800d800:	910e      	str	r1, [sp, #56]	; 0x38
 800d802:	900d      	str	r0, [sp, #52]	; 0x34
 800d804:	940c      	str	r4, [sp, #48]	; 0x30
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	910b      	str	r1, [sp, #44]	; 0x2c
 800d80a:	6879      	ldr	r1, [r7, #4]
 800d80c:	910a      	str	r1, [sp, #40]	; 0x28
 800d80e:	68b9      	ldr	r1, [r7, #8]
 800d810:	9109      	str	r1, [sp, #36]	; 0x24
 800d812:	68f9      	ldr	r1, [r7, #12]
 800d814:	9108      	str	r1, [sp, #32]
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	9307      	str	r3, [sp, #28]
 800d81a:	465b      	mov	r3, fp
 800d81c:	9306      	str	r3, [sp, #24]
 800d81e:	4653      	mov	r3, sl
 800d820:	9305      	str	r3, [sp, #20]
 800d822:	464b      	mov	r3, r9
 800d824:	9304      	str	r3, [sp, #16]
 800d826:	4643      	mov	r3, r8
 800d828:	9303      	str	r3, [sp, #12]
 800d82a:	4663      	mov	r3, ip
 800d82c:	9302      	str	r3, [sp, #8]
 800d82e:	9601      	str	r6, [sp, #4]
 800d830:	9500      	str	r5, [sp, #0]
 800d832:	0013      	movs	r3, r2
 800d834:	2200      	movs	r2, #0
 800d836:	2100      	movs	r1, #0
 800d838:	2002      	movs	r0, #2
 800d83a:	f00e ff5b 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d83e:	4b79      	ldr	r3, [pc, #484]	; (800da24 <SecureElementInit+0x3a8>)
 800d840:	2200      	movs	r2, #0
 800d842:	2100      	movs	r1, #0
 800d844:	2002      	movs	r0, #2
 800d846:	f00e ff55 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800d84a:	250f      	movs	r5, #15
 800d84c:	2610      	movs	r6, #16
 800d84e:	19bb      	adds	r3, r7, r6
 800d850:	195c      	adds	r4, r3, r5
 800d852:	2308      	movs	r3, #8
 800d854:	2210      	movs	r2, #16
 800d856:	4694      	mov	ip, r2
 800d858:	44bc      	add	ip, r7
 800d85a:	4463      	add	r3, ip
 800d85c:	0019      	movs	r1, r3
 800d85e:	2003      	movs	r0, #3
 800d860:	f7ff fe40 	bl	800d4e4 <GetKeyByID>
 800d864:	0003      	movs	r3, r0
 800d866:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d868:	19bb      	adds	r3, r7, r6
 800d86a:	195b      	adds	r3, r3, r5
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d14f      	bne.n	800d912 <SecureElementInit+0x296>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	785b      	ldrb	r3, [r3, #1]
 800d876:	001d      	movs	r5, r3
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	789b      	ldrb	r3, [r3, #2]
 800d87c:	001e      	movs	r6, r3
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	78db      	ldrb	r3, [r3, #3]
 800d882:	469c      	mov	ip, r3
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	791b      	ldrb	r3, [r3, #4]
 800d888:	4698      	mov	r8, r3
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	795b      	ldrb	r3, [r3, #5]
 800d88e:	4699      	mov	r9, r3
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	799b      	ldrb	r3, [r3, #6]
 800d894:	469a      	mov	sl, r3
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	79db      	ldrb	r3, [r3, #7]
 800d89a:	469b      	mov	fp, r3
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	7a1b      	ldrb	r3, [r3, #8]
 800d8a0:	613b      	str	r3, [r7, #16]
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	7a5b      	ldrb	r3, [r3, #9]
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	7a9b      	ldrb	r3, [r3, #10]
 800d8ac:	60bb      	str	r3, [r7, #8]
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	7adb      	ldrb	r3, [r3, #11]
 800d8b2:	607b      	str	r3, [r7, #4]
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	7b1b      	ldrb	r3, [r3, #12]
 800d8b8:	603b      	str	r3, [r7, #0]
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	7b5b      	ldrb	r3, [r3, #13]
 800d8be:	001c      	movs	r4, r3
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	7b9b      	ldrb	r3, [r3, #14]
 800d8c4:	0018      	movs	r0, r3
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	7bdb      	ldrb	r3, [r3, #15]
 800d8ca:	0019      	movs	r1, r3
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	7c1b      	ldrb	r3, [r3, #16]
 800d8d0:	4a55      	ldr	r2, [pc, #340]	; (800da28 <SecureElementInit+0x3ac>)
 800d8d2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8d4:	910e      	str	r1, [sp, #56]	; 0x38
 800d8d6:	900d      	str	r0, [sp, #52]	; 0x34
 800d8d8:	940c      	str	r4, [sp, #48]	; 0x30
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	910b      	str	r1, [sp, #44]	; 0x2c
 800d8de:	6879      	ldr	r1, [r7, #4]
 800d8e0:	910a      	str	r1, [sp, #40]	; 0x28
 800d8e2:	68b9      	ldr	r1, [r7, #8]
 800d8e4:	9109      	str	r1, [sp, #36]	; 0x24
 800d8e6:	68f9      	ldr	r1, [r7, #12]
 800d8e8:	9108      	str	r1, [sp, #32]
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	9307      	str	r3, [sp, #28]
 800d8ee:	465b      	mov	r3, fp
 800d8f0:	9306      	str	r3, [sp, #24]
 800d8f2:	4653      	mov	r3, sl
 800d8f4:	9305      	str	r3, [sp, #20]
 800d8f6:	464b      	mov	r3, r9
 800d8f8:	9304      	str	r3, [sp, #16]
 800d8fa:	4643      	mov	r3, r8
 800d8fc:	9303      	str	r3, [sp, #12]
 800d8fe:	4663      	mov	r3, ip
 800d900:	9302      	str	r3, [sp, #8]
 800d902:	9601      	str	r6, [sp, #4]
 800d904:	9500      	str	r5, [sp, #0]
 800d906:	0013      	movs	r3, r2
 800d908:	2200      	movs	r2, #0
 800d90a:	2100      	movs	r1, #0
 800d90c:	2002      	movs	r0, #2
 800d90e:	f00e fef1 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800d912:	250f      	movs	r5, #15
 800d914:	2610      	movs	r6, #16
 800d916:	19bb      	adds	r3, r7, r6
 800d918:	195c      	adds	r4, r3, r5
 800d91a:	2308      	movs	r3, #8
 800d91c:	2210      	movs	r2, #16
 800d91e:	4694      	mov	ip, r2
 800d920:	44bc      	add	ip, r7
 800d922:	4463      	add	r3, ip
 800d924:	0019      	movs	r1, r3
 800d926:	2002      	movs	r0, #2
 800d928:	f7ff fddc 	bl	800d4e4 <GetKeyByID>
 800d92c:	0003      	movs	r3, r0
 800d92e:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d930:	19bb      	adds	r3, r7, r6
 800d932:	195b      	adds	r3, r3, r5
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d14f      	bne.n	800d9da <SecureElementInit+0x35e>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	785b      	ldrb	r3, [r3, #1]
 800d93e:	001d      	movs	r5, r3
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	789b      	ldrb	r3, [r3, #2]
 800d944:	001e      	movs	r6, r3
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	78db      	ldrb	r3, [r3, #3]
 800d94a:	469c      	mov	ip, r3
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	791b      	ldrb	r3, [r3, #4]
 800d950:	4698      	mov	r8, r3
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	795b      	ldrb	r3, [r3, #5]
 800d956:	4699      	mov	r9, r3
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	799b      	ldrb	r3, [r3, #6]
 800d95c:	469a      	mov	sl, r3
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	79db      	ldrb	r3, [r3, #7]
 800d962:	469b      	mov	fp, r3
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	7a1b      	ldrb	r3, [r3, #8]
 800d968:	613b      	str	r3, [r7, #16]
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	7a5b      	ldrb	r3, [r3, #9]
 800d96e:	60fb      	str	r3, [r7, #12]
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	7a9b      	ldrb	r3, [r3, #10]
 800d974:	60bb      	str	r3, [r7, #8]
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	7adb      	ldrb	r3, [r3, #11]
 800d97a:	607b      	str	r3, [r7, #4]
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	7b1b      	ldrb	r3, [r3, #12]
 800d980:	603b      	str	r3, [r7, #0]
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	7b5b      	ldrb	r3, [r3, #13]
 800d986:	001c      	movs	r4, r3
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	7b9b      	ldrb	r3, [r3, #14]
 800d98c:	0018      	movs	r0, r3
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	7bdb      	ldrb	r3, [r3, #15]
 800d992:	0019      	movs	r1, r3
 800d994:	69bb      	ldr	r3, [r7, #24]
 800d996:	7c1b      	ldrb	r3, [r3, #16]
 800d998:	4a24      	ldr	r2, [pc, #144]	; (800da2c <SecureElementInit+0x3b0>)
 800d99a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d99c:	910e      	str	r1, [sp, #56]	; 0x38
 800d99e:	900d      	str	r0, [sp, #52]	; 0x34
 800d9a0:	940c      	str	r4, [sp, #48]	; 0x30
 800d9a2:	6839      	ldr	r1, [r7, #0]
 800d9a4:	910b      	str	r1, [sp, #44]	; 0x2c
 800d9a6:	6879      	ldr	r1, [r7, #4]
 800d9a8:	910a      	str	r1, [sp, #40]	; 0x28
 800d9aa:	68b9      	ldr	r1, [r7, #8]
 800d9ac:	9109      	str	r1, [sp, #36]	; 0x24
 800d9ae:	68f9      	ldr	r1, [r7, #12]
 800d9b0:	9108      	str	r1, [sp, #32]
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	9307      	str	r3, [sp, #28]
 800d9b6:	465b      	mov	r3, fp
 800d9b8:	9306      	str	r3, [sp, #24]
 800d9ba:	4653      	mov	r3, sl
 800d9bc:	9305      	str	r3, [sp, #20]
 800d9be:	464b      	mov	r3, r9
 800d9c0:	9304      	str	r3, [sp, #16]
 800d9c2:	4643      	mov	r3, r8
 800d9c4:	9303      	str	r3, [sp, #12]
 800d9c6:	4663      	mov	r3, ip
 800d9c8:	9302      	str	r3, [sp, #8]
 800d9ca:	9601      	str	r6, [sp, #4]
 800d9cc:	9500      	str	r5, [sp, #0]
 800d9ce:	0013      	movs	r3, r2
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	2002      	movs	r0, #2
 800d9d6:	f00e fe8d 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d003      	beq.n	800d9e8 <SecureElementInit+0x36c>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800d9e0:	4b13      	ldr	r3, [pc, #76]	; (800da30 <SecureElementInit+0x3b4>)
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	601a      	str	r2, [r3, #0]
 800d9e6:	e002      	b.n	800d9ee <SecureElementInit+0x372>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800d9e8:	4b11      	ldr	r3, [pc, #68]	; (800da30 <SecureElementInit+0x3b4>)
 800d9ea:	4a12      	ldr	r2, [pc, #72]	; (800da34 <SecureElementInit+0x3b8>)
 800d9ec:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800d9ee:	4b12      	ldr	r3, [pc, #72]	; (800da38 <SecureElementInit+0x3bc>)
 800d9f0:	0018      	movs	r0, r3
 800d9f2:	f7f8 fbe4 	bl	80061be <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800d9f6:	4b0e      	ldr	r3, [pc, #56]	; (800da30 <SecureElementInit+0x3b4>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	0018      	movs	r0, r3
 800da00:	46bd      	mov	sp, r7
 800da02:	b009      	add	sp, #36	; 0x24
 800da04:	bcf0      	pop	{r4, r5, r6, r7}
 800da06:	46bb      	mov	fp, r7
 800da08:	46b2      	mov	sl, r6
 800da0a:	46a9      	mov	r9, r5
 800da0c:	46a0      	mov	r8, r4
 800da0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da10:	08020e6c 	.word	0x08020e6c
 800da14:	200000a0 	.word	0x200000a0
 800da18:	08020f18 	.word	0x08020f18
 800da1c:	08020f30 	.word	0x08020f30
 800da20:	08020f94 	.word	0x08020f94
 800da24:	08020ff8 	.word	0x08020ff8
 800da28:	08021010 	.word	0x08021010
 800da2c:	08021074 	.word	0x08021074
 800da30:	20000634 	.word	0x20000634
 800da34:	0800d559 	.word	0x0800d559
 800da38:	20000090 	.word	0x20000090

0800da3c <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d007      	beq.n	800da5a <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800da4a:	6879      	ldr	r1, [r7, #4]
 800da4c:	4b05      	ldr	r3, [pc, #20]	; (800da64 <SecureElementRestoreNvmCtx+0x28>)
 800da4e:	22ba      	movs	r2, #186	; 0xba
 800da50:	0018      	movs	r0, r3
 800da52:	f00c f9cd 	bl	8019df0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800da56:	2300      	movs	r3, #0
 800da58:	e000      	b.n	800da5c <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800da5a:	2302      	movs	r3, #2
  }
}
 800da5c:	0018      	movs	r0, r3
 800da5e:	46bd      	mov	sp, r7
 800da60:	b002      	add	sp, #8
 800da62:	bd80      	pop	{r7, pc}
 800da64:	20000090 	.word	0x20000090

0800da68 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	22ba      	movs	r2, #186	; 0xba
 800da74:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800da76:	4b02      	ldr	r3, [pc, #8]	; (800da80 <SecureElementGetNvmCtx+0x18>)
}
 800da78:	0018      	movs	r0, r3
 800da7a:	46bd      	mov	sp, r7
 800da7c:	b002      	add	sp, #8
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	20000090 	.word	0x20000090

0800da84 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800da84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da86:	b089      	sub	sp, #36	; 0x24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	0002      	movs	r2, r0
 800da8c:	6039      	str	r1, [r7, #0]
 800da8e:	1dfb      	adds	r3, r7, #7
 800da90:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d101      	bne.n	800da9c <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800da98:	2302      	movs	r3, #2
 800da9a:	e064      	b.n	800db66 <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800da9c:	231f      	movs	r3, #31
 800da9e:	18fb      	adds	r3, r7, r3
 800daa0:	2200      	movs	r2, #0
 800daa2:	701a      	strb	r2, [r3, #0]
 800daa4:	e059      	b.n	800db5a <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800daa6:	231f      	movs	r3, #31
 800daa8:	18fb      	adds	r3, r7, r3
 800daaa:	781a      	ldrb	r2, [r3, #0]
 800daac:	4930      	ldr	r1, [pc, #192]	; (800db70 <SecureElementSetKey+0xec>)
 800daae:	0013      	movs	r3, r2
 800dab0:	011b      	lsls	r3, r3, #4
 800dab2:	189b      	adds	r3, r3, r2
 800dab4:	18cb      	adds	r3, r1, r3
 800dab6:	3310      	adds	r3, #16
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	1dfa      	adds	r2, r7, #7
 800dabc:	7812      	ldrb	r2, [r2, #0]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d145      	bne.n	800db4e <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800dac2:	1dfb      	adds	r3, r7, #7
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	2b80      	cmp	r3, #128	; 0x80
 800dac8:	d12c      	bne.n	800db24 <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800daca:	251e      	movs	r5, #30
 800dacc:	197b      	adds	r3, r7, r5
 800dace:	2206      	movs	r2, #6
 800dad0:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800dad2:	260c      	movs	r6, #12
 800dad4:	19bb      	adds	r3, r7, r6
 800dad6:	2200      	movs	r2, #0
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	3304      	adds	r3, #4
 800dadc:	220c      	movs	r2, #12
 800dade:	2100      	movs	r1, #0
 800dae0:	0018      	movs	r0, r3
 800dae2:	f011 f9c0 	bl	801ee66 <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800dae6:	197c      	adds	r4, r7, r5
 800dae8:	19bb      	adds	r3, r7, r6
 800daea:	6838      	ldr	r0, [r7, #0]
 800daec:	227f      	movs	r2, #127	; 0x7f
 800daee:	2110      	movs	r1, #16
 800daf0:	f000 f8a5 	bl	800dc3e <SecureElementAesEncrypt>
 800daf4:	0003      	movs	r3, r0
 800daf6:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800daf8:	231f      	movs	r3, #31
 800dafa:	18fb      	adds	r3, r7, r3
 800dafc:	781a      	ldrb	r2, [r3, #0]
 800dafe:	0013      	movs	r3, r2
 800db00:	011b      	lsls	r3, r3, #4
 800db02:	189b      	adds	r3, r3, r2
 800db04:	3310      	adds	r3, #16
 800db06:	001a      	movs	r2, r3
 800db08:	4b19      	ldr	r3, [pc, #100]	; (800db70 <SecureElementSetKey+0xec>)
 800db0a:	18d3      	adds	r3, r2, r3
 800db0c:	3301      	adds	r3, #1
 800db0e:	19b9      	adds	r1, r7, r6
 800db10:	2210      	movs	r2, #16
 800db12:	0018      	movs	r0, r3
 800db14:	f00c f96c 	bl	8019df0 <memcpy1>
        SeNvmCtxChanged();
 800db18:	4b16      	ldr	r3, [pc, #88]	; (800db74 <SecureElementSetKey+0xf0>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4798      	blx	r3

        return retval;
 800db1e:	197b      	adds	r3, r7, r5
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	e020      	b.n	800db66 <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800db24:	231f      	movs	r3, #31
 800db26:	18fb      	adds	r3, r7, r3
 800db28:	781a      	ldrb	r2, [r3, #0]
 800db2a:	0013      	movs	r3, r2
 800db2c:	011b      	lsls	r3, r3, #4
 800db2e:	189b      	adds	r3, r3, r2
 800db30:	3310      	adds	r3, #16
 800db32:	001a      	movs	r2, r3
 800db34:	4b0e      	ldr	r3, [pc, #56]	; (800db70 <SecureElementSetKey+0xec>)
 800db36:	18d3      	adds	r3, r2, r3
 800db38:	3301      	adds	r3, #1
 800db3a:	6839      	ldr	r1, [r7, #0]
 800db3c:	2210      	movs	r2, #16
 800db3e:	0018      	movs	r0, r3
 800db40:	f00c f956 	bl	8019df0 <memcpy1>
        SeNvmCtxChanged();
 800db44:	4b0b      	ldr	r3, [pc, #44]	; (800db74 <SecureElementSetKey+0xf0>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800db4a:	2300      	movs	r3, #0
 800db4c:	e00b      	b.n	800db66 <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800db4e:	211f      	movs	r1, #31
 800db50:	187b      	adds	r3, r7, r1
 800db52:	781a      	ldrb	r2, [r3, #0]
 800db54:	187b      	adds	r3, r7, r1
 800db56:	3201      	adds	r2, #1
 800db58:	701a      	strb	r2, [r3, #0]
 800db5a:	231f      	movs	r3, #31
 800db5c:	18fb      	adds	r3, r7, r3
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	2b09      	cmp	r3, #9
 800db62:	d9a0      	bls.n	800daa6 <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800db64:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800db66:	0018      	movs	r0, r3
 800db68:	46bd      	mov	sp, r7
 800db6a:	b009      	add	sp, #36	; 0x24
 800db6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db6e:	46c0      	nop			; (mov r8, r8)
 800db70:	20000090 	.word	0x20000090
 800db74:	20000634 	.word	0x20000634

0800db78 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800db78:	b590      	push	{r4, r7, lr}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af02      	add	r7, sp, #8
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	0019      	movs	r1, r3
 800db84:	1dbb      	adds	r3, r7, #6
 800db86:	801a      	strh	r2, [r3, #0]
 800db88:	1d7b      	adds	r3, r7, #5
 800db8a:	1c0a      	adds	r2, r1, #0
 800db8c:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800db8e:	1d7b      	adds	r3, r7, #5
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	2b7e      	cmp	r3, #126	; 0x7e
 800db94:	d901      	bls.n	800db9a <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800db96:	2303      	movs	r3, #3
 800db98:	e00b      	b.n	800dbb2 <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800db9a:	1d7b      	adds	r3, r7, #5
 800db9c:	781c      	ldrb	r4, [r3, #0]
 800db9e:	1dbb      	adds	r3, r7, #6
 800dba0:	881a      	ldrh	r2, [r3, #0]
 800dba2:	68b9      	ldr	r1, [r7, #8]
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	0023      	movs	r3, r4
 800dbac:	f7ff fcda 	bl	800d564 <ComputeCmac>
 800dbb0:	0003      	movs	r3, r0
}
 800dbb2:	0018      	movs	r0, r3
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	b005      	add	sp, #20
 800dbb8:	bd90      	pop	{r4, r7, pc}

0800dbba <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800dbba:	b5b0      	push	{r4, r5, r7, lr}
 800dbbc:	b088      	sub	sp, #32
 800dbbe:	af02      	add	r7, sp, #8
 800dbc0:	60f8      	str	r0, [r7, #12]
 800dbc2:	0008      	movs	r0, r1
 800dbc4:	607a      	str	r2, [r7, #4]
 800dbc6:	0019      	movs	r1, r3
 800dbc8:	230a      	movs	r3, #10
 800dbca:	18fb      	adds	r3, r7, r3
 800dbcc:	1c02      	adds	r2, r0, #0
 800dbce:	801a      	strh	r2, [r3, #0]
 800dbd0:	2309      	movs	r3, #9
 800dbd2:	18fb      	adds	r3, r7, r3
 800dbd4:	1c0a      	adds	r2, r1, #0
 800dbd6:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dbd8:	2317      	movs	r3, #23
 800dbda:	18fb      	adds	r3, r7, r3
 800dbdc:	2206      	movs	r2, #6
 800dbde:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dbe6:	2302      	movs	r3, #2
 800dbe8:	e025      	b.n	800dc36 <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800dbee:	2517      	movs	r5, #23
 800dbf0:	197c      	adds	r4, r7, r5
 800dbf2:	2309      	movs	r3, #9
 800dbf4:	18fb      	adds	r3, r7, r3
 800dbf6:	7818      	ldrb	r0, [r3, #0]
 800dbf8:	230a      	movs	r3, #10
 800dbfa:	18fb      	adds	r3, r7, r3
 800dbfc:	881a      	ldrh	r2, [r3, #0]
 800dbfe:	68f9      	ldr	r1, [r7, #12]
 800dc00:	2310      	movs	r3, #16
 800dc02:	18fb      	adds	r3, r7, r3
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	0003      	movs	r3, r0
 800dc08:	2000      	movs	r0, #0
 800dc0a:	f7ff fcab 	bl	800d564 <ComputeCmac>
 800dc0e:	0003      	movs	r3, r0
 800dc10:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800dc12:	197b      	adds	r3, r7, r5
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d002      	beq.n	800dc20 <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800dc1a:	197b      	adds	r3, r7, r5
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	e00a      	b.n	800dc36 <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d003      	beq.n	800dc30 <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800dc28:	2317      	movs	r3, #23
 800dc2a:	18fb      	adds	r3, r7, r3
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800dc30:	2317      	movs	r3, #23
 800dc32:	18fb      	adds	r3, r7, r3
 800dc34:	781b      	ldrb	r3, [r3, #0]
}
 800dc36:	0018      	movs	r0, r3
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	b006      	add	sp, #24
 800dc3c:	bdb0      	pop	{r4, r5, r7, pc}

0800dc3e <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800dc3e:	b5b0      	push	{r4, r5, r7, lr}
 800dc40:	b0c2      	sub	sp, #264	; 0x108
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	60f8      	str	r0, [r7, #12]
 800dc46:	0008      	movs	r0, r1
 800dc48:	0011      	movs	r1, r2
 800dc4a:	607b      	str	r3, [r7, #4]
 800dc4c:	230a      	movs	r3, #10
 800dc4e:	18fb      	adds	r3, r7, r3
 800dc50:	1c02      	adds	r2, r0, #0
 800dc52:	801a      	strh	r2, [r3, #0]
 800dc54:	2309      	movs	r3, #9
 800dc56:	18fb      	adds	r3, r7, r3
 800dc58:	1c0a      	adds	r2, r1, #0
 800dc5a:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dc5c:	1dfb      	adds	r3, r7, #7
 800dc5e:	33ff      	adds	r3, #255	; 0xff
 800dc60:	2206      	movs	r2, #6
 800dc62:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d002      	beq.n	800dc70 <SecureElementAesEncrypt+0x32>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d101      	bne.n	800dc74 <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dc70:	2302      	movs	r3, #2
 800dc72:	e051      	b.n	800dd18 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800dc74:	230a      	movs	r3, #10
 800dc76:	18fb      	adds	r3, r7, r3
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	220f      	movs	r2, #15
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d001      	beq.n	800dc88 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dc84:	2305      	movs	r3, #5
 800dc86:	e047      	b.n	800dd18 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800dc88:	2514      	movs	r5, #20
 800dc8a:	197b      	adds	r3, r7, r5
 800dc8c:	22f0      	movs	r2, #240	; 0xf0
 800dc8e:	2100      	movs	r1, #0
 800dc90:	0018      	movs	r0, r3
 800dc92:	f00c f8eb 	bl	8019e6c <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800dc96:	1dfc      	adds	r4, r7, #7
 800dc98:	34ff      	adds	r4, #255	; 0xff
 800dc9a:	2310      	movs	r3, #16
 800dc9c:	18fa      	adds	r2, r7, r3
 800dc9e:	2309      	movs	r3, #9
 800dca0:	18fb      	adds	r3, r7, r3
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	0011      	movs	r1, r2
 800dca6:	0018      	movs	r0, r3
 800dca8:	f7ff fc1c 	bl	800d4e4 <GetKeyByID>
 800dcac:	0003      	movs	r3, r0
 800dcae:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800dcb0:	1dfb      	adds	r3, r7, #7
 800dcb2:	33ff      	adds	r3, #255	; 0xff
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d12b      	bne.n	800dd12 <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	197a      	adds	r2, r7, r5
 800dcc0:	2110      	movs	r1, #16
 800dcc2:	0018      	movs	r0, r3
 800dcc4:	f7ff fa88 	bl	800d1d8 <lorawan_aes_set_key>

    uint8_t block = 0;
 800dcc8:	2308      	movs	r3, #8
 800dcca:	33ff      	adds	r3, #255	; 0xff
 800dccc:	18fb      	adds	r3, r7, r3
 800dcce:	2200      	movs	r2, #0
 800dcd0:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800dcd2:	e019      	b.n	800dd08 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800dcd4:	2408      	movs	r4, #8
 800dcd6:	34ff      	adds	r4, #255	; 0xff
 800dcd8:	193b      	adds	r3, r7, r4
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	18d0      	adds	r0, r2, r3
 800dce0:	193b      	adds	r3, r7, r4
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	18d3      	adds	r3, r2, r3
 800dce8:	2214      	movs	r2, #20
 800dcea:	18ba      	adds	r2, r7, r2
 800dcec:	0019      	movs	r1, r3
 800dcee:	f7ff fbaf 	bl	800d450 <lorawan_aes_encrypt>
      block = block + 16;
 800dcf2:	193b      	adds	r3, r7, r4
 800dcf4:	193a      	adds	r2, r7, r4
 800dcf6:	7812      	ldrb	r2, [r2, #0]
 800dcf8:	3210      	adds	r2, #16
 800dcfa:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800dcfc:	220a      	movs	r2, #10
 800dcfe:	18bb      	adds	r3, r7, r2
 800dd00:	18ba      	adds	r2, r7, r2
 800dd02:	8812      	ldrh	r2, [r2, #0]
 800dd04:	3a10      	subs	r2, #16
 800dd06:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800dd08:	230a      	movs	r3, #10
 800dd0a:	18fb      	adds	r3, r7, r3
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1e0      	bne.n	800dcd4 <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800dd12:	1dfb      	adds	r3, r7, #7
 800dd14:	33ff      	adds	r3, #255	; 0xff
 800dd16:	781b      	ldrb	r3, [r3, #0]
}
 800dd18:	0018      	movs	r0, r3
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	b042      	add	sp, #264	; 0x108
 800dd1e:	bdb0      	pop	{r4, r5, r7, pc}

0800dd20 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800dd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd22:	b08b      	sub	sp, #44	; 0x2c
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	0019      	movs	r1, r3
 800dd2c:	1dfb      	adds	r3, r7, #7
 800dd2e:	701a      	strb	r2, [r3, #0]
 800dd30:	1dbb      	adds	r3, r7, #6
 800dd32:	1c0a      	adds	r2, r1, #0
 800dd34:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dd36:	2327      	movs	r3, #39	; 0x27
 800dd38:	18fb      	adds	r3, r7, r3
 800dd3a:	2206      	movs	r2, #6
 800dd3c:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dd44:	2302      	movs	r3, #2
 800dd46:	e03c      	b.n	800ddc2 <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800dd48:	1dbb      	adds	r3, r7, #6
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	2b7f      	cmp	r3, #127	; 0x7f
 800dd4e:	d105      	bne.n	800dd5c <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800dd50:	1dfb      	adds	r3, r7, #7
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2b04      	cmp	r3, #4
 800dd56:	d001      	beq.n	800dd5c <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	e032      	b.n	800ddc2 <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800dd5c:	2614      	movs	r6, #20
 800dd5e:	19bb      	adds	r3, r7, r6
 800dd60:	2200      	movs	r2, #0
 800dd62:	601a      	str	r2, [r3, #0]
 800dd64:	3304      	adds	r3, #4
 800dd66:	220c      	movs	r2, #12
 800dd68:	2100      	movs	r1, #0
 800dd6a:	0018      	movs	r0, r3
 800dd6c:	f011 f87b 	bl	801ee66 <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800dd70:	2527      	movs	r5, #39	; 0x27
 800dd72:	197c      	adds	r4, r7, r5
 800dd74:	19b9      	adds	r1, r7, r6
 800dd76:	1dfb      	adds	r3, r7, #7
 800dd78:	781a      	ldrb	r2, [r3, #0]
 800dd7a:	68b8      	ldr	r0, [r7, #8]
 800dd7c:	000b      	movs	r3, r1
 800dd7e:	2110      	movs	r1, #16
 800dd80:	f7ff ff5d 	bl	800dc3e <SecureElementAesEncrypt>
 800dd84:	0003      	movs	r3, r0
 800dd86:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800dd88:	197b      	adds	r3, r7, r5
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800dd90:	197b      	adds	r3, r7, r5
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	e015      	b.n	800ddc2 <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800dd96:	2527      	movs	r5, #39	; 0x27
 800dd98:	197c      	adds	r4, r7, r5
 800dd9a:	2314      	movs	r3, #20
 800dd9c:	18fa      	adds	r2, r7, r3
 800dd9e:	1dbb      	adds	r3, r7, #6
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	0011      	movs	r1, r2
 800dda4:	0018      	movs	r0, r3
 800dda6:	f7ff fe6d 	bl	800da84 <SecureElementSetKey>
 800ddaa:	0003      	movs	r3, r0
 800ddac:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800ddae:	197b      	adds	r3, r7, r5
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800ddb6:	197b      	adds	r3, r7, r5
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	e002      	b.n	800ddc2 <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800ddbc:	2327      	movs	r3, #39	; 0x27
 800ddbe:	18fb      	adds	r3, r7, r3
 800ddc0:	781b      	ldrb	r3, [r3, #0]
}
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	b00b      	add	sp, #44	; 0x2c
 800ddc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ddca <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800ddca:	b5b0      	push	{r4, r5, r7, lr}
 800ddcc:	b086      	sub	sp, #24
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	0011      	movs	r1, r2
 800ddd4:	607b      	str	r3, [r7, #4]
 800ddd6:	230f      	movs	r3, #15
 800ddd8:	18fb      	adds	r3, r7, r3
 800ddda:	1c02      	adds	r2, r0, #0
 800dddc:	701a      	strb	r2, [r3, #0]
 800ddde:	230c      	movs	r3, #12
 800dde0:	18fb      	adds	r3, r7, r3
 800dde2:	1c0a      	adds	r2, r1, #0
 800dde4:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d005      	beq.n	800ddf8 <SecureElementProcessJoinAccept+0x2e>
 800ddec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d002      	beq.n	800ddf8 <SecureElementProcessJoinAccept+0x2e>
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d101      	bne.n	800ddfc <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	e069      	b.n	800ded0 <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800ddfc:	2328      	movs	r3, #40	; 0x28
 800ddfe:	18fb      	adds	r3, r7, r3
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b21      	cmp	r3, #33	; 0x21
 800de04:	d901      	bls.n	800de0a <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800de06:	2305      	movs	r3, #5
 800de08:	e062      	b.n	800ded0 <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800de0a:	2517      	movs	r5, #23
 800de0c:	197b      	adds	r3, r7, r5
 800de0e:	2201      	movs	r2, #1
 800de10:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800de12:	2428      	movs	r4, #40	; 0x28
 800de14:	193b      	adds	r3, r7, r4
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	b29a      	uxth	r2, r3
 800de1a:	6879      	ldr	r1, [r7, #4]
 800de1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1e:	0018      	movs	r0, r3
 800de20:	f00b ffe6 	bl	8019df0 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	1c58      	adds	r0, r3, #1
 800de28:	193b      	adds	r3, r7, r4
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	3b01      	subs	r3, #1
 800de30:	b299      	uxth	r1, r3
 800de32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de34:	1c5c      	adds	r4, r3, #1
 800de36:	197b      	adds	r3, r7, r5
 800de38:	781a      	ldrb	r2, [r3, #0]
 800de3a:	0023      	movs	r3, r4
 800de3c:	f7ff feff 	bl	800dc3e <SecureElementAesEncrypt>
 800de40:	1e03      	subs	r3, r0, #0
 800de42:	d001      	beq.n	800de48 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800de44:	2307      	movs	r3, #7
 800de46:	e043      	b.n	800ded0 <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800de48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4a:	330b      	adds	r3, #11
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	09db      	lsrs	r3, r3, #7
 800de50:	b2da      	uxtb	r2, r3
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800de5a:	2128      	movs	r1, #40	; 0x28
 800de5c:	187b      	adds	r3, r7, r1
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	3b04      	subs	r3, #4
 800de62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de64:	18d3      	adds	r3, r2, r3
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800de6a:	187b      	adds	r3, r7, r1
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	3b03      	subs	r3, #3
 800de70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de72:	18d3      	adds	r3, r2, r3
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	021b      	lsls	r3, r3, #8
 800de78:	693a      	ldr	r2, [r7, #16]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800de7e:	187b      	adds	r3, r7, r1
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	3b02      	subs	r3, #2
 800de84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de86:	18d3      	adds	r3, r2, r3
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	041b      	lsls	r3, r3, #16
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	4313      	orrs	r3, r2
 800de90:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800de92:	187b      	adds	r3, r7, r1
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	3b01      	subs	r3, #1
 800de98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de9a:	18d3      	adds	r3, r2, r3
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	061b      	lsls	r3, r3, #24
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800dea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d10d      	bne.n	800deca <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800deae:	187b      	adds	r3, r7, r1
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	3b04      	subs	r3, #4
 800deb6:	b299      	uxth	r1, r3
 800deb8:	693a      	ldr	r2, [r7, #16]
 800deba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800debc:	2301      	movs	r3, #1
 800debe:	f7ff fe7c 	bl	800dbba <SecureElementVerifyAesCmac>
 800dec2:	1e03      	subs	r3, r0, #0
 800dec4:	d003      	beq.n	800dece <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e002      	b.n	800ded0 <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800deca:	2304      	movs	r3, #4
 800decc:	e000      	b.n	800ded0 <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800dece:	2300      	movs	r3, #0
}
 800ded0:	0018      	movs	r0, r3
 800ded2:	46bd      	mov	sp, r7
 800ded4:	b006      	add	sp, #24
 800ded6:	bdb0      	pop	{r4, r5, r7, pc}

0800ded8 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dee6:	2302      	movs	r3, #2
 800dee8:	e006      	b.n	800def8 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800deea:	4b05      	ldr	r3, [pc, #20]	; (800df00 <SecureElementRandomNumber+0x28>)
 800deec:	695b      	ldr	r3, [r3, #20]
 800deee:	4798      	blx	r3
 800def0:	0002      	movs	r2, r0
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800def6:	2300      	movs	r3, #0
}
 800def8:	0018      	movs	r0, r3
 800defa:	46bd      	mov	sp, r7
 800defc:	b002      	add	sp, #8
 800defe:	bd80      	pop	{r7, pc}
 800df00:	08021740 	.word	0x08021740

0800df04 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d101      	bne.n	800df16 <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800df12:	2302      	movs	r3, #2
 800df14:	e009      	b.n	800df2a <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800df16:	6879      	ldr	r1, [r7, #4]
 800df18:	4b06      	ldr	r3, [pc, #24]	; (800df34 <SecureElementSetDevEui+0x30>)
 800df1a:	2208      	movs	r2, #8
 800df1c:	0018      	movs	r0, r3
 800df1e:	f00b ff67 	bl	8019df0 <memcpy1>
  SeNvmCtxChanged();
 800df22:	4b05      	ldr	r3, [pc, #20]	; (800df38 <SecureElementSetDevEui+0x34>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	0018      	movs	r0, r3
 800df2c:	46bd      	mov	sp, r7
 800df2e:	b002      	add	sp, #8
 800df30:	bd80      	pop	{r7, pc}
 800df32:	46c0      	nop			; (mov r8, r8)
 800df34:	20000090 	.word	0x20000090
 800df38:	20000634 	.word	0x20000634

0800df3c <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800df40:	4b01      	ldr	r3, [pc, #4]	; (800df48 <SecureElementGetDevEui+0xc>)
}
 800df42:	0018      	movs	r0, r3
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	20000090 	.word	0x20000090

0800df4c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d101      	bne.n	800df5e <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800df5a:	2302      	movs	r3, #2
 800df5c:	e009      	b.n	800df72 <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800df5e:	6879      	ldr	r1, [r7, #4]
 800df60:	4b06      	ldr	r3, [pc, #24]	; (800df7c <SecureElementSetJoinEui+0x30>)
 800df62:	2208      	movs	r2, #8
 800df64:	0018      	movs	r0, r3
 800df66:	f00b ff43 	bl	8019df0 <memcpy1>
  SeNvmCtxChanged();
 800df6a:	4b05      	ldr	r3, [pc, #20]	; (800df80 <SecureElementSetJoinEui+0x34>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800df70:	2300      	movs	r3, #0
}
 800df72:	0018      	movs	r0, r3
 800df74:	46bd      	mov	sp, r7
 800df76:	b002      	add	sp, #8
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	46c0      	nop			; (mov r8, r8)
 800df7c:	20000098 	.word	0x20000098
 800df80:	20000634 	.word	0x20000634

0800df84 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800df88:	4b01      	ldr	r3, [pc, #4]	; (800df90 <SecureElementGetJoinEui+0xc>)
}
 800df8a:	0018      	movs	r0, r3
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20000098 	.word	0x20000098

0800df94 <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800df9c:	6879      	ldr	r1, [r7, #4]
 800df9e:	4b17      	ldr	r3, [pc, #92]	; (800dffc <LmHandlerInit+0x68>)
 800dfa0:	2220      	movs	r2, #32
 800dfa2:	0018      	movs	r0, r3
 800dfa4:	f00e ff30 	bl	801ce08 <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dfa8:	4b15      	ldr	r3, [pc, #84]	; (800e000 <LmHandlerInit+0x6c>)
 800dfaa:	4a16      	ldr	r2, [pc, #88]	; (800e004 <LmHandlerInit+0x70>)
 800dfac:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800dfae:	4b14      	ldr	r3, [pc, #80]	; (800e000 <LmHandlerInit+0x6c>)
 800dfb0:	4a15      	ldr	r2, [pc, #84]	; (800e008 <LmHandlerInit+0x74>)
 800dfb2:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800dfb4:	4b12      	ldr	r3, [pc, #72]	; (800e000 <LmHandlerInit+0x6c>)
 800dfb6:	4a15      	ldr	r2, [pc, #84]	; (800e00c <LmHandlerInit+0x78>)
 800dfb8:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800dfba:	4b11      	ldr	r3, [pc, #68]	; (800e000 <LmHandlerInit+0x6c>)
 800dfbc:	4a14      	ldr	r2, [pc, #80]	; (800e010 <LmHandlerInit+0x7c>)
 800dfbe:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800dfc0:	4b0e      	ldr	r3, [pc, #56]	; (800dffc <LmHandlerInit+0x68>)
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	4b13      	ldr	r3, [pc, #76]	; (800e014 <LmHandlerInit+0x80>)
 800dfc6:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800dfc8:	4b0c      	ldr	r3, [pc, #48]	; (800dffc <LmHandlerInit+0x68>)
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	4b11      	ldr	r3, [pc, #68]	; (800e014 <LmHandlerInit+0x80>)
 800dfce:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800dfd0:	4b10      	ldr	r3, [pc, #64]	; (800e014 <LmHandlerInit+0x80>)
 800dfd2:	4a11      	ldr	r2, [pc, #68]	; (800e018 <LmHandlerInit+0x84>)
 800dfd4:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800dfd6:	4b09      	ldr	r3, [pc, #36]	; (800dffc <LmHandlerInit+0x68>)
 800dfd8:	689a      	ldr	r2, [r3, #8]
 800dfda:	4b0e      	ldr	r3, [pc, #56]	; (800e014 <LmHandlerInit+0x80>)
 800dfdc:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800dfde:	4b0f      	ldr	r3, [pc, #60]	; (800e01c <LmHandlerInit+0x88>)
 800dfe0:	0019      	movs	r1, r3
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	f000 fb76 	bl	800e6d4 <LmHandlerPackageRegister>
 800dfe8:	1e03      	subs	r3, r0, #0
 800dfea:	d002      	beq.n	800dff2 <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800dfec:	2301      	movs	r3, #1
 800dfee:	425b      	negs	r3, r3
 800dff0:	e000      	b.n	800dff4 <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800dff2:	2300      	movs	r3, #0
}
 800dff4:	0018      	movs	r0, r3
 800dff6:	46bd      	mov	sp, r7
 800dff8:	b002      	add	sp, #8
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	20000654 	.word	0x20000654
 800e000:	20000674 	.word	0x20000674
 800e004:	0800eea9 	.word	0x0800eea9
 800e008:	0800ef15 	.word	0x0800ef15
 800e00c:	0800f001 	.word	0x0800f001
 800e010:	0800f0a9 	.word	0x0800f0a9
 800e014:	20000684 	.word	0x20000684
 800e018:	0800f847 	.word	0x0800f847
 800e01c:	20000164 	.word	0x20000164

0800e020 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800e020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e022:	46ce      	mov	lr, r9
 800e024:	4647      	mov	r7, r8
 800e026:	b580      	push	{r7, lr}
 800e028:	b099      	sub	sp, #100	; 0x64
 800e02a:	af08      	add	r7, sp, #32
 800e02c:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	4b7b      	ldr	r3, [pc, #492]	; (800e220 <LmHandlerConfigure+0x200>)
 800e032:	2206      	movs	r2, #6
 800e034:	0018      	movs	r0, r3
 800e036:	f00e fee7 	bl	801ce08 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800e03a:	f7f6 fca7 	bl	800498c <LoraInfo_GetPtr>
 800e03e:	0003      	movs	r3, r0
 800e040:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800e042:	4b77      	ldr	r3, [pc, #476]	; (800e220 <LmHandlerConfigure+0x200>)
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	001a      	movs	r2, r3
 800e048:	2301      	movs	r3, #1
 800e04a:	4093      	lsls	r3, r2
 800e04c:	001a      	movs	r2, r3
 800e04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	4013      	ands	r3, r2
 800e054:	d00b      	beq.n	800e06e <LmHandlerConfigure+0x4e>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800e056:	4b72      	ldr	r3, [pc, #456]	; (800e220 <LmHandlerConfigure+0x200>)
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	4972      	ldr	r1, [pc, #456]	; (800e224 <LmHandlerConfigure+0x204>)
 800e05c:	4b72      	ldr	r3, [pc, #456]	; (800e228 <LmHandlerConfigure+0x208>)
 800e05e:	0018      	movs	r0, r3
 800e060:	f005 fb36 	bl	80136d0 <LoRaMacInitialization>
 800e064:	1e03      	subs	r3, r0, #0
 800e066:	d009      	beq.n	800e07c <LmHandlerConfigure+0x5c>
    {
      return LORAMAC_HANDLER_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	425b      	negs	r3, r3
 800e06c:	e0d1      	b.n	800e212 <LmHandlerConfigure+0x1f2>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800e06e:	4b6f      	ldr	r3, [pc, #444]	; (800e22c <LmHandlerConfigure+0x20c>)
 800e070:	2201      	movs	r2, #1
 800e072:	2100      	movs	r1, #0
 800e074:	2000      	movs	r0, #0
 800e076:	f00e fb3d 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800e07a:	e7fe      	b.n	800e07a <LmHandlerConfigure+0x5a>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800e07c:	f001 fbf3 	bl	800f866 <NvmCtxMgmtRestore>
 800e080:	1e03      	subs	r3, r0, #0
 800e082:	d103      	bne.n	800e08c <LmHandlerConfigure+0x6c>
  {
    CtxRestoreDone = true;
 800e084:	4b6a      	ldr	r3, [pc, #424]	; (800e230 <LmHandlerConfigure+0x210>)
 800e086:	2201      	movs	r2, #1
 800e088:	701a      	strb	r2, [r3, #0]
 800e08a:	e021      	b.n	800e0d0 <LmHandlerConfigure+0xb0>
  }
  else
  {
    CtxRestoreDone = false;
 800e08c:	4b68      	ldr	r3, [pc, #416]	; (800e230 <LmHandlerConfigure+0x210>)
 800e08e:	2200      	movs	r2, #0
 800e090:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800e092:	2418      	movs	r4, #24
 800e094:	193b      	adds	r3, r7, r4
 800e096:	2202      	movs	r2, #2
 800e098:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800e09a:	193b      	adds	r3, r7, r4
 800e09c:	0018      	movs	r0, r3
 800e09e:	f005 ff79 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800e0a2:	193b      	adds	r3, r7, r4
 800e0a4:	6859      	ldr	r1, [r3, #4]
 800e0a6:	4b63      	ldr	r3, [pc, #396]	; (800e234 <LmHandlerConfigure+0x214>)
 800e0a8:	2208      	movs	r2, #8
 800e0aa:	0018      	movs	r0, r3
 800e0ac:	f00b fea0 	bl	8019df0 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800e0b0:	0021      	movs	r1, r4
 800e0b2:	187b      	adds	r3, r7, r1
 800e0b4:	2203      	movs	r2, #3
 800e0b6:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800e0b8:	000c      	movs	r4, r1
 800e0ba:	187b      	adds	r3, r7, r1
 800e0bc:	0018      	movs	r0, r3
 800e0be:	f005 ff69 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800e0c2:	193b      	adds	r3, r7, r4
 800e0c4:	6859      	ldr	r1, [r3, #4]
 800e0c6:	4b5c      	ldr	r3, [pc, #368]	; (800e238 <LmHandlerConfigure+0x218>)
 800e0c8:	2208      	movs	r2, #8
 800e0ca:	0018      	movs	r0, r3
 800e0cc:	f00b fe90 	bl	8019df0 <memcpy1>
  }
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800e0d0:	4b58      	ldr	r3, [pc, #352]	; (800e234 <LmHandlerConfigure+0x214>)
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	001a      	movs	r2, r3
 800e0d6:	4b57      	ldr	r3, [pc, #348]	; (800e234 <LmHandlerConfigure+0x214>)
 800e0d8:	785b      	ldrb	r3, [r3, #1]
 800e0da:	0019      	movs	r1, r3
 800e0dc:	4b55      	ldr	r3, [pc, #340]	; (800e234 <LmHandlerConfigure+0x214>)
 800e0de:	789b      	ldrb	r3, [r3, #2]
 800e0e0:	0018      	movs	r0, r3
 800e0e2:	4b54      	ldr	r3, [pc, #336]	; (800e234 <LmHandlerConfigure+0x214>)
 800e0e4:	78db      	ldrb	r3, [r3, #3]
 800e0e6:	001c      	movs	r4, r3
 800e0e8:	4b52      	ldr	r3, [pc, #328]	; (800e234 <LmHandlerConfigure+0x214>)
 800e0ea:	791b      	ldrb	r3, [r3, #4]
 800e0ec:	001d      	movs	r5, r3
 800e0ee:	4b51      	ldr	r3, [pc, #324]	; (800e234 <LmHandlerConfigure+0x214>)
 800e0f0:	795b      	ldrb	r3, [r3, #5]
 800e0f2:	001e      	movs	r6, r3
 800e0f4:	4b4f      	ldr	r3, [pc, #316]	; (800e234 <LmHandlerConfigure+0x214>)
 800e0f6:	799b      	ldrb	r3, [r3, #6]
 800e0f8:	469c      	mov	ip, r3
 800e0fa:	4b4e      	ldr	r3, [pc, #312]	; (800e234 <LmHandlerConfigure+0x214>)
 800e0fc:	79db      	ldrb	r3, [r3, #7]
 800e0fe:	4698      	mov	r8, r3
 800e100:	4b4e      	ldr	r3, [pc, #312]	; (800e23c <LmHandlerConfigure+0x21c>)
 800e102:	4699      	mov	r9, r3
 800e104:	4643      	mov	r3, r8
 800e106:	9307      	str	r3, [sp, #28]
 800e108:	4663      	mov	r3, ip
 800e10a:	9306      	str	r3, [sp, #24]
 800e10c:	9605      	str	r6, [sp, #20]
 800e10e:	9504      	str	r5, [sp, #16]
 800e110:	9403      	str	r4, [sp, #12]
 800e112:	9002      	str	r0, [sp, #8]
 800e114:	9101      	str	r1, [sp, #4]
 800e116:	9200      	str	r2, [sp, #0]
 800e118:	464b      	mov	r3, r9
 800e11a:	2200      	movs	r2, #0
 800e11c:	2100      	movs	r1, #0
 800e11e:	2002      	movs	r0, #2
 800e120:	f00e fae8 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
         HEX8(CommissioningParams.DevEui));
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800e124:	4b43      	ldr	r3, [pc, #268]	; (800e234 <LmHandlerConfigure+0x214>)
 800e126:	7a1b      	ldrb	r3, [r3, #8]
 800e128:	001a      	movs	r2, r3
 800e12a:	4b42      	ldr	r3, [pc, #264]	; (800e234 <LmHandlerConfigure+0x214>)
 800e12c:	7a5b      	ldrb	r3, [r3, #9]
 800e12e:	0019      	movs	r1, r3
 800e130:	4b40      	ldr	r3, [pc, #256]	; (800e234 <LmHandlerConfigure+0x214>)
 800e132:	7a9b      	ldrb	r3, [r3, #10]
 800e134:	0018      	movs	r0, r3
 800e136:	4b3f      	ldr	r3, [pc, #252]	; (800e234 <LmHandlerConfigure+0x214>)
 800e138:	7adb      	ldrb	r3, [r3, #11]
 800e13a:	001c      	movs	r4, r3
 800e13c:	4b3d      	ldr	r3, [pc, #244]	; (800e234 <LmHandlerConfigure+0x214>)
 800e13e:	7b1b      	ldrb	r3, [r3, #12]
 800e140:	001d      	movs	r5, r3
 800e142:	4b3c      	ldr	r3, [pc, #240]	; (800e234 <LmHandlerConfigure+0x214>)
 800e144:	7b5b      	ldrb	r3, [r3, #13]
 800e146:	001e      	movs	r6, r3
 800e148:	4b3a      	ldr	r3, [pc, #232]	; (800e234 <LmHandlerConfigure+0x214>)
 800e14a:	7b9b      	ldrb	r3, [r3, #14]
 800e14c:	469c      	mov	ip, r3
 800e14e:	4b39      	ldr	r3, [pc, #228]	; (800e234 <LmHandlerConfigure+0x214>)
 800e150:	7bdb      	ldrb	r3, [r3, #15]
 800e152:	4698      	mov	r8, r3
 800e154:	4b3a      	ldr	r3, [pc, #232]	; (800e240 <LmHandlerConfigure+0x220>)
 800e156:	4699      	mov	r9, r3
 800e158:	4643      	mov	r3, r8
 800e15a:	9307      	str	r3, [sp, #28]
 800e15c:	4663      	mov	r3, ip
 800e15e:	9306      	str	r3, [sp, #24]
 800e160:	9605      	str	r6, [sp, #20]
 800e162:	9504      	str	r5, [sp, #16]
 800e164:	9403      	str	r4, [sp, #12]
 800e166:	9002      	str	r0, [sp, #8]
 800e168:	9101      	str	r1, [sp, #4]
 800e16a:	9200      	str	r2, [sp, #0]
 800e16c:	464b      	mov	r3, r9
 800e16e:	2200      	movs	r2, #0
 800e170:	2100      	movs	r1, #0
 800e172:	2002      	movs	r0, #2
 800e174:	f00e fabe 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800e178:	2118      	movs	r1, #24
 800e17a:	187b      	adds	r3, r7, r1
 800e17c:	220f      	movs	r2, #15
 800e17e:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e180:	187b      	adds	r3, r7, r1
 800e182:	2201      	movs	r2, #1
 800e184:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e186:	000c      	movs	r4, r1
 800e188:	187b      	adds	r3, r7, r1
 800e18a:	0018      	movs	r0, r3
 800e18c:	f006 f860 	bl	8014250 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800e190:	0021      	movs	r1, r4
 800e192:	187b      	adds	r3, r7, r1
 800e194:	2210      	movs	r2, #16
 800e196:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e198:	187b      	adds	r3, r7, r1
 800e19a:	2200      	movs	r2, #0
 800e19c:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e19e:	000c      	movs	r4, r1
 800e1a0:	187b      	adds	r3, r7, r1
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	f006 f854 	bl	8014250 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800e1a8:	0021      	movs	r1, r4
 800e1aa:	187b      	adds	r3, r7, r1
 800e1ac:	2204      	movs	r2, #4
 800e1ae:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e1b0:	4b1b      	ldr	r3, [pc, #108]	; (800e220 <LmHandlerConfigure+0x200>)
 800e1b2:	789a      	ldrb	r2, [r3, #2]
 800e1b4:	187b      	adds	r3, r7, r1
 800e1b6:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e1b8:	000c      	movs	r4, r1
 800e1ba:	187b      	adds	r3, r7, r1
 800e1bc:	0018      	movs	r0, r3
 800e1be:	f006 f847 	bl	8014250 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e1c2:	0021      	movs	r1, r4
 800e1c4:	187b      	adds	r3, r7, r1
 800e1c6:	2222      	movs	r2, #34	; 0x22
 800e1c8:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800e1ca:	187b      	adds	r3, r7, r1
 800e1cc:	2214      	movs	r2, #20
 800e1ce:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e1d0:	187b      	adds	r3, r7, r1
 800e1d2:	0018      	movs	r0, r3
 800e1d4:	f006 f83c 	bl	8014250 <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800e1d8:	2110      	movs	r1, #16
 800e1da:	187b      	adds	r3, r7, r1
 800e1dc:	220f      	movs	r2, #15
 800e1de:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800e1e0:	4b0f      	ldr	r3, [pc, #60]	; (800e220 <LmHandlerConfigure+0x200>)
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	187a      	adds	r2, r7, r1
 800e1e6:	0011      	movs	r1, r2
 800e1e8:	0018      	movs	r0, r3
 800e1ea:	f009 f972 	bl	80174d2 <RegionGetPhyParam>
 800e1ee:	0003      	movs	r3, r0
 800e1f0:	001a      	movs	r2, r3
 800e1f2:	210c      	movs	r1, #12
 800e1f4:	187b      	adds	r3, r7, r1
 800e1f6:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800e1f8:	187b      	adds	r3, r7, r1
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	1e5a      	subs	r2, r3, #1
 800e1fe:	4193      	sbcs	r3, r2
 800e200:	b2da      	uxtb	r2, r3
 800e202:	4b07      	ldr	r3, [pc, #28]	; (800e220 <LmHandlerConfigure+0x200>)
 800e204:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800e206:	4b06      	ldr	r3, [pc, #24]	; (800e220 <LmHandlerConfigure+0x200>)
 800e208:	791b      	ldrb	r3, [r3, #4]
 800e20a:	0018      	movs	r0, r3
 800e20c:	f006 fe4c 	bl	8014ea8 <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800e210:	2300      	movs	r3, #0
}
 800e212:	0018      	movs	r0, r3
 800e214:	46bd      	mov	sp, r7
 800e216:	b011      	add	sp, #68	; 0x44
 800e218:	bcc0      	pop	{r6, r7}
 800e21a:	46b9      	mov	r9, r7
 800e21c:	46b0      	mov	r8, r6
 800e21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e220:	2000064c 	.word	0x2000064c
 800e224:	20000684 	.word	0x20000684
 800e228:	20000674 	.word	0x20000674
 800e22c:	080210e8 	.word	0x080210e8
 800e230:	2000079e 	.word	0x2000079e
 800e234:	2000014c 	.word	0x2000014c
 800e238:	20000154 	.word	0x20000154
 800e23c:	08021134 	.word	0x08021134
 800e240:	08021170 	.word	0x08021170

0800e244 <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800e24a:	f005 f9fb 	bl	8013644 <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e24e:	1dfb      	adds	r3, r7, #7
 800e250:	2200      	movs	r2, #0
 800e252:	701a      	strb	r2, [r3, #0]
 800e254:	e027      	b.n	800e2a6 <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800e256:	1dfb      	adds	r3, r7, #7
 800e258:	2200      	movs	r2, #0
 800e25a:	569a      	ldrsb	r2, [r3, r2]
 800e25c:	4b17      	ldr	r3, [pc, #92]	; (800e2bc <LmHandlerProcess+0x78>)
 800e25e:	0092      	lsls	r2, r2, #2
 800e260:	58d3      	ldr	r3, [r2, r3]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d017      	beq.n	800e296 <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800e266:	1dfb      	adds	r3, r7, #7
 800e268:	2200      	movs	r2, #0
 800e26a:	569a      	ldrsb	r2, [r3, r2]
 800e26c:	4b13      	ldr	r3, [pc, #76]	; (800e2bc <LmHandlerProcess+0x78>)
 800e26e:	0092      	lsls	r2, r2, #2
 800e270:	58d3      	ldr	r3, [r2, r3]
 800e272:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00e      	beq.n	800e296 <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800e278:	1dfb      	adds	r3, r7, #7
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	0018      	movs	r0, r3
 800e27e:	f000 ff25 	bl	800f0cc <LmHandlerPackageIsInitialized>
 800e282:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800e284:	d007      	beq.n	800e296 <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800e286:	1dfb      	adds	r3, r7, #7
 800e288:	2200      	movs	r2, #0
 800e28a:	569a      	ldrsb	r2, [r3, r2]
 800e28c:	4b0b      	ldr	r3, [pc, #44]	; (800e2bc <LmHandlerProcess+0x78>)
 800e28e:	0092      	lsls	r2, r2, #2
 800e290:	58d3      	ldr	r3, [r2, r3]
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e296:	1dfb      	adds	r3, r7, #7
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	b25b      	sxtb	r3, r3
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	3301      	adds	r3, #1
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	1dfb      	adds	r3, r7, #7
 800e2a4:	701a      	strb	r2, [r3, #0]
 800e2a6:	1dfb      	adds	r3, r7, #7
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	b25b      	sxtb	r3, r3
 800e2ac:	2b04      	cmp	r3, #4
 800e2ae:	ddd2      	ble.n	800e256 <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800e2b0:	f001 fad3 	bl	800f85a <NvmCtxMgmtStore>
}
 800e2b4:	46c0      	nop			; (mov r8, r8)
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	b002      	add	sp, #8
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	20000638 	.word	0x20000638

0800e2c0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800e2c0:	b5b0      	push	{r4, r5, r7, lr}
 800e2c2:	b08a      	sub	sp, #40	; 0x28
 800e2c4:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e2c6:	003b      	movs	r3, r7
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800e2cc:	2527      	movs	r5, #39	; 0x27
 800e2ce:	197c      	adds	r4, r7, r5
 800e2d0:	003b      	movs	r3, r7
 800e2d2:	0018      	movs	r0, r3
 800e2d4:	f005 fe5e 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800e2d8:	0003      	movs	r3, r0
 800e2da:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e2dc:	197b      	adds	r3, r7, r5
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d107      	bne.n	800e2f4 <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800e2e4:	003b      	movs	r3, r7
 800e2e6:	791b      	ldrb	r3, [r3, #4]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d101      	bne.n	800e2f0 <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	e002      	b.n	800e2f6 <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e000      	b.n	800e2f6 <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800e2f4:	2300      	movs	r3, #0
  }
}
 800e2f6:	0018      	movs	r0, r3
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	b00a      	add	sp, #40	; 0x28
 800e2fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e300 <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800e300:	b590      	push	{r4, r7, lr}
 800e302:	b093      	sub	sp, #76	; 0x4c
 800e304:	af02      	add	r7, sp, #8
 800e306:	0002      	movs	r2, r0
 800e308:	1dfb      	adds	r3, r7, #7
 800e30a:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800e30c:	1dfb      	adds	r3, r7, #7
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	2b02      	cmp	r3, #2
 800e312:	d113      	bne.n	800e33c <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e314:	4b37      	ldr	r3, [pc, #220]	; (800e3f4 <LmHandlerJoin+0xf4>)
 800e316:	2202      	movs	r2, #2
 800e318:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800e31a:	f005 fd81 	bl	8013e20 <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800e31e:	2108      	movs	r1, #8
 800e320:	187b      	adds	r3, r7, r1
 800e322:	2201      	movs	r2, #1
 800e324:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e326:	4b34      	ldr	r3, [pc, #208]	; (800e3f8 <LmHandlerJoin+0xf8>)
 800e328:	78db      	ldrb	r3, [r3, #3]
 800e32a:	b25b      	sxtb	r3, r3
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	187b      	adds	r3, r7, r1
 800e330:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800e332:	187b      	adds	r3, r7, r1
 800e334:	0018      	movs	r0, r3
 800e336:	f006 fb11 	bl	801495c <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800e33a:	e057      	b.n	800e3ec <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e33c:	4b2d      	ldr	r3, [pc, #180]	; (800e3f4 <LmHandlerJoin+0xf4>)
 800e33e:	2201      	movs	r2, #1
 800e340:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e342:	4b2c      	ldr	r3, [pc, #176]	; (800e3f4 <LmHandlerJoin+0xf4>)
 800e344:	2200      	movs	r2, #0
 800e346:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800e348:	4b2c      	ldr	r3, [pc, #176]	; (800e3fc <LmHandlerJoin+0xfc>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	2201      	movs	r2, #1
 800e34e:	4053      	eors	r3, r2
 800e350:	b2db      	uxtb	r3, r3
 800e352:	2b00      	cmp	r3, #0
 800e354:	d033      	beq.n	800e3be <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e356:	211c      	movs	r1, #28
 800e358:	187b      	adds	r3, r7, r1
 800e35a:	2227      	movs	r2, #39	; 0x27
 800e35c:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e35e:	187b      	adds	r3, r7, r1
 800e360:	4a27      	ldr	r2, [pc, #156]	; (800e400 <LmHandlerJoin+0x100>)
 800e362:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e364:	000c      	movs	r4, r1
 800e366:	187b      	adds	r3, r7, r1
 800e368:	0018      	movs	r0, r3
 800e36a:	f005 ff71 	bl	8014250 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800e36e:	0021      	movs	r1, r4
 800e370:	187b      	adds	r3, r7, r1
 800e372:	2205      	movs	r2, #5
 800e374:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800e376:	4b23      	ldr	r3, [pc, #140]	; (800e404 <LmHandlerJoin+0x104>)
 800e378:	691a      	ldr	r2, [r3, #16]
 800e37a:	187b      	adds	r3, r7, r1
 800e37c:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e37e:	000c      	movs	r4, r1
 800e380:	187b      	adds	r3, r7, r1
 800e382:	0018      	movs	r0, r3
 800e384:	f005 ff64 	bl	8014250 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800e388:	f7f7 ff5a 	bl	8006240 <GetDevAddr>
 800e38c:	0002      	movs	r2, r0
 800e38e:	4b1d      	ldr	r3, [pc, #116]	; (800e404 <LmHandlerJoin+0x104>)
 800e390:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800e392:	0021      	movs	r1, r4
 800e394:	187b      	adds	r3, r7, r1
 800e396:	2206      	movs	r2, #6
 800e398:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800e39a:	4b1a      	ldr	r3, [pc, #104]	; (800e404 <LmHandlerJoin+0x104>)
 800e39c:	695a      	ldr	r2, [r3, #20]
 800e39e:	187b      	adds	r3, r7, r1
 800e3a0:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e3a2:	187b      	adds	r3, r7, r1
 800e3a4:	0018      	movs	r0, r3
 800e3a6:	f005 ff53 	bl	8014250 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800e3aa:	4b16      	ldr	r3, [pc, #88]	; (800e404 <LmHandlerJoin+0x104>)
 800e3ac:	695b      	ldr	r3, [r3, #20]
 800e3ae:	4a16      	ldr	r2, [pc, #88]	; (800e408 <LmHandlerJoin+0x108>)
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	0013      	movs	r3, r2
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	2002      	movs	r0, #2
 800e3ba:	f00e f99b 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800e3be:	f005 fd2f 	bl	8013e20 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e3c2:	211c      	movs	r1, #28
 800e3c4:	187b      	adds	r3, r7, r1
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e3ca:	187b      	adds	r3, r7, r1
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800e3d0:	187b      	adds	r3, r7, r1
 800e3d2:	0018      	movs	r0, r3
 800e3d4:	f005 ff3c 	bl	8014250 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e3d8:	4b0c      	ldr	r3, [pc, #48]	; (800e40c <LmHandlerJoin+0x10c>)
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	4a05      	ldr	r2, [pc, #20]	; (800e3f4 <LmHandlerJoin+0xf4>)
 800e3de:	0010      	movs	r0, r2
 800e3e0:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e3e2:	4b05      	ldr	r3, [pc, #20]	; (800e3f8 <LmHandlerJoin+0xf8>)
 800e3e4:	785b      	ldrb	r3, [r3, #1]
 800e3e6:	0018      	movs	r0, r3
 800e3e8:	f000 f8e4 	bl	800e5b4 <LmHandlerRequestClass>
}
 800e3ec:	46c0      	nop			; (mov r8, r8)
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	b011      	add	sp, #68	; 0x44
 800e3f2:	bd90      	pop	{r4, r7, pc}
 800e3f4:	20000170 	.word	0x20000170
 800e3f8:	2000064c 	.word	0x2000064c
 800e3fc:	2000079e 	.word	0x2000079e
 800e400:	01000300 	.word	0x01000300
 800e404:	2000014c 	.word	0x2000014c
 800e408:	080211ac 	.word	0x080211ac
 800e40c:	20000654 	.word	0x20000654

0800e410 <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800e410:	b5b0      	push	{r4, r5, r7, lr}
 800e412:	b08c      	sub	sp, #48	; 0x30
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	0008      	movs	r0, r1
 800e41a:	607a      	str	r2, [r7, #4]
 800e41c:	0019      	movs	r1, r3
 800e41e:	230b      	movs	r3, #11
 800e420:	18fb      	adds	r3, r7, r3
 800e422:	1c02      	adds	r2, r0, #0
 800e424:	701a      	strb	r2, [r3, #0]
 800e426:	230a      	movs	r3, #10
 800e428:	18fb      	adds	r3, r7, r3
 800e42a:	1c0a      	adds	r2, r1, #0
 800e42c:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e42e:	232f      	movs	r3, #47	; 0x2f
 800e430:	18fb      	adds	r3, r7, r3
 800e432:	22ff      	movs	r2, #255	; 0xff
 800e434:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800e436:	f005 f8ed 	bl	8013614 <LoRaMacIsBusy>
 800e43a:	1e03      	subs	r3, r0, #0
 800e43c:	d002      	beq.n	800e444 <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800e43e:	2302      	movs	r3, #2
 800e440:	425b      	negs	r3, r3
 800e442:	e0a9      	b.n	800e598 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e444:	f7ff ff3c 	bl	800e2c0 <LmHandlerJoinStatus>
 800e448:	0003      	movs	r3, r0
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d007      	beq.n	800e45e <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800e44e:	4b54      	ldr	r3, [pc, #336]	; (800e5a0 <LmHandlerSend+0x190>)
 800e450:	789b      	ldrb	r3, [r3, #2]
 800e452:	0018      	movs	r0, r3
 800e454:	f7ff ff54 	bl	800e300 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e458:	2303      	movs	r3, #3
 800e45a:	425b      	negs	r3, r3
 800e45c:	e09c      	b.n	800e598 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800e45e:	4b51      	ldr	r3, [pc, #324]	; (800e5a4 <LmHandlerSend+0x194>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	4798      	blx	r3
 800e466:	1e03      	subs	r3, r0, #0
 800e468:	d00d      	beq.n	800e486 <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	781a      	ldrb	r2, [r3, #0]
 800e46e:	4b4d      	ldr	r3, [pc, #308]	; (800e5a4 <LmHandlerSend+0x194>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	429a      	cmp	r2, r3
 800e476:	d006      	beq.n	800e486 <LmHandlerSend+0x76>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d002      	beq.n	800e486 <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e480:	2304      	movs	r3, #4
 800e482:	425b      	negs	r3, r3
 800e484:	e088      	b.n	800e598 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e486:	4b48      	ldr	r3, [pc, #288]	; (800e5a8 <LmHandlerSend+0x198>)
 800e488:	2203      	movs	r2, #3
 800e48a:	569a      	ldrsb	r2, [r3, r2]
 800e48c:	2418      	movs	r4, #24
 800e48e:	193b      	adds	r3, r7, r4
 800e490:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	785b      	ldrb	r3, [r3, #1]
 800e496:	2214      	movs	r2, #20
 800e498:	18ba      	adds	r2, r7, r2
 800e49a:	0011      	movs	r1, r2
 800e49c:	0018      	movs	r0, r3
 800e49e:	f005 fccd 	bl	8013e3c <LoRaMacQueryTxPossible>
 800e4a2:	1e03      	subs	r3, r0, #0
 800e4a4:	d00c      	beq.n	800e4c0 <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e4a6:	4b41      	ldr	r3, [pc, #260]	; (800e5ac <LmHandlerSend+0x19c>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800e4ac:	193b      	adds	r3, r7, r4
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e4b2:	193b      	adds	r3, r7, r4
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e4b8:	193b      	adds	r3, r7, r4
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	819a      	strh	r2, [r3, #12]
 800e4be:	e021      	b.n	800e504 <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800e4c0:	4b3a      	ldr	r3, [pc, #232]	; (800e5ac <LmHandlerSend+0x19c>)
 800e4c2:	200b      	movs	r0, #11
 800e4c4:	183a      	adds	r2, r7, r0
 800e4c6:	7812      	ldrb	r2, [r2, #0]
 800e4c8:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	781a      	ldrb	r2, [r3, #0]
 800e4ce:	2118      	movs	r1, #24
 800e4d0:	187b      	adds	r3, r7, r1
 800e4d2:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	785b      	ldrb	r3, [r3, #1]
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	187b      	adds	r3, r7, r1
 800e4dc:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	685a      	ldr	r2, [r3, #4]
 800e4e2:	187b      	adds	r3, r7, r1
 800e4e4:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800e4e6:	183b      	adds	r3, r7, r0
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d103      	bne.n	800e4f6 <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800e4ee:	187b      	adds	r3, r7, r1
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	701a      	strb	r2, [r3, #0]
 800e4f4:	e006      	b.n	800e504 <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800e4f6:	2118      	movs	r1, #24
 800e4f8:	187b      	adds	r3, r7, r1
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800e4fe:	187b      	adds	r3, r7, r1
 800e500:	2208      	movs	r2, #8
 800e502:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800e504:	4b29      	ldr	r3, [pc, #164]	; (800e5ac <LmHandlerSend+0x19c>)
 800e506:	68fa      	ldr	r2, [r7, #12]
 800e508:	330c      	adds	r3, #12
 800e50a:	ca03      	ldmia	r2!, {r0, r1}
 800e50c:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e50e:	4b26      	ldr	r3, [pc, #152]	; (800e5a8 <LmHandlerSend+0x198>)
 800e510:	2203      	movs	r2, #3
 800e512:	569a      	ldrsb	r2, [r3, r2]
 800e514:	4b25      	ldr	r3, [pc, #148]	; (800e5ac <LmHandlerSend+0x19c>)
 800e516:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e518:	232e      	movs	r3, #46	; 0x2e
 800e51a:	18fc      	adds	r4, r7, r3
 800e51c:	230a      	movs	r3, #10
 800e51e:	18fb      	adds	r3, r7, r3
 800e520:	781a      	ldrb	r2, [r3, #0]
 800e522:	2518      	movs	r5, #24
 800e524:	197b      	adds	r3, r7, r5
 800e526:	0011      	movs	r1, r2
 800e528:	0018      	movs	r0, r3
 800e52a:	f006 fb6f 	bl	8014c0c <LoRaMacMcpsRequest>
 800e52e:	0003      	movs	r3, r0
 800e530:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d003      	beq.n	800e540 <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e538:	197b      	adds	r3, r7, r5
 800e53a:	691a      	ldr	r2, [r3, #16]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800e540:	232e      	movs	r3, #46	; 0x2e
 800e542:	18fb      	adds	r3, r7, r3
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	2b11      	cmp	r3, #17
 800e548:	d81d      	bhi.n	800e586 <LmHandlerSend+0x176>
 800e54a:	009a      	lsls	r2, r3, #2
 800e54c:	4b18      	ldr	r3, [pc, #96]	; (800e5b0 <LmHandlerSend+0x1a0>)
 800e54e:	18d3      	adds	r3, r2, r3
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e554:	232f      	movs	r3, #47	; 0x2f
 800e556:	18fb      	adds	r3, r7, r3
 800e558:	2200      	movs	r2, #0
 800e55a:	701a      	strb	r2, [r3, #0]
    break;
 800e55c:	e018      	b.n	800e590 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e55e:	232f      	movs	r3, #47	; 0x2f
 800e560:	18fb      	adds	r3, r7, r3
 800e562:	22fe      	movs	r2, #254	; 0xfe
 800e564:	701a      	strb	r2, [r3, #0]
    break;
 800e566:	e013      	b.n	800e590 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e568:	232f      	movs	r3, #47	; 0x2f
 800e56a:	18fb      	adds	r3, r7, r3
 800e56c:	22fd      	movs	r2, #253	; 0xfd
 800e56e:	701a      	strb	r2, [r3, #0]
    break;
 800e570:	e00e      	b.n	800e590 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e572:	232f      	movs	r3, #47	; 0x2f
 800e574:	18fb      	adds	r3, r7, r3
 800e576:	22fb      	movs	r2, #251	; 0xfb
 800e578:	701a      	strb	r2, [r3, #0]
    break;
 800e57a:	e009      	b.n	800e590 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e57c:	232f      	movs	r3, #47	; 0x2f
 800e57e:	18fb      	adds	r3, r7, r3
 800e580:	22fa      	movs	r2, #250	; 0xfa
 800e582:	701a      	strb	r2, [r3, #0]
    break;
 800e584:	e004      	b.n	800e590 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800e586:	232f      	movs	r3, #47	; 0x2f
 800e588:	18fb      	adds	r3, r7, r3
 800e58a:	22ff      	movs	r2, #255	; 0xff
 800e58c:	701a      	strb	r2, [r3, #0]
    break;
 800e58e:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800e590:	232f      	movs	r3, #47	; 0x2f
 800e592:	18fb      	adds	r3, r7, r3
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	b25b      	sxtb	r3, r3
}
 800e598:	0018      	movs	r0, r3
 800e59a:	46bd      	mov	sp, r7
 800e59c:	b00c      	add	sp, #48	; 0x30
 800e59e:	bdb0      	pop	{r4, r5, r7, pc}
 800e5a0:	20000170 	.word	0x20000170
 800e5a4:	20000638 	.word	0x20000638
 800e5a8:	2000064c 	.word	0x2000064c
 800e5ac:	20000694 	.word	0x20000694
 800e5b0:	080211c8 	.word	0x080211c8

0800e5b4 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b08c      	sub	sp, #48	; 0x30
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	0002      	movs	r2, r0
 800e5bc:	1dfb      	adds	r3, r7, #7
 800e5be:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e5c0:	232f      	movs	r3, #47	; 0x2f
 800e5c2:	18fb      	adds	r3, r7, r3
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e5c8:	f7ff fe7a 	bl	800e2c0 <LmHandlerJoinStatus>
 800e5cc:	0003      	movs	r3, r0
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d002      	beq.n	800e5d8 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e5d2:	2303      	movs	r3, #3
 800e5d4:	425b      	negs	r3, r3
 800e5d6:	e077      	b.n	800e6c8 <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e5d8:	2108      	movs	r1, #8
 800e5da:	187b      	adds	r3, r7, r1
 800e5dc:	2200      	movs	r2, #0
 800e5de:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e5e0:	187b      	adds	r3, r7, r1
 800e5e2:	0018      	movs	r0, r3
 800e5e4:	f005 fcd6 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800e5e8:	1e03      	subs	r3, r0, #0
 800e5ea:	d002      	beq.n	800e5f2 <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	425b      	negs	r3, r3
 800e5f0:	e06a      	b.n	800e6c8 <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800e5f2:	212e      	movs	r1, #46	; 0x2e
 800e5f4:	187b      	adds	r3, r7, r1
 800e5f6:	2208      	movs	r2, #8
 800e5f8:	18ba      	adds	r2, r7, r2
 800e5fa:	7912      	ldrb	r2, [r2, #4]
 800e5fc:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800e5fe:	187a      	adds	r2, r7, r1
 800e600:	1dfb      	adds	r3, r7, #7
 800e602:	7812      	ldrb	r2, [r2, #0]
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	429a      	cmp	r2, r3
 800e608:	d053      	beq.n	800e6b2 <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800e60a:	1dfb      	adds	r3, r7, #7
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d02a      	beq.n	800e668 <LmHandlerRequestClass+0xb4>
 800e612:	dc50      	bgt.n	800e6b6 <LmHandlerRequestClass+0x102>
 800e614:	2b00      	cmp	r3, #0
 800e616:	d002      	beq.n	800e61e <LmHandlerRequestClass+0x6a>
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d020      	beq.n	800e65e <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800e61c:	e04b      	b.n	800e6b6 <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800e61e:	232e      	movs	r3, #46	; 0x2e
 800e620:	18fb      	adds	r3, r7, r3
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d048      	beq.n	800e6ba <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800e628:	2108      	movs	r1, #8
 800e62a:	187b      	adds	r3, r7, r1
 800e62c:	2200      	movs	r2, #0
 800e62e:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e630:	187b      	adds	r3, r7, r1
 800e632:	0018      	movs	r0, r3
 800e634:	f005 fe0c 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800e638:	1e03      	subs	r3, r0, #0
 800e63a:	d10b      	bne.n	800e654 <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800e63c:	2000      	movs	r0, #0
 800e63e:	f000 fdfd 	bl	800f23c <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e642:	4b23      	ldr	r3, [pc, #140]	; (800e6d0 <LmHandlerRequestClass+0x11c>)
 800e644:	699b      	ldr	r3, [r3, #24]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d037      	beq.n	800e6ba <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800e64a:	4b21      	ldr	r3, [pc, #132]	; (800e6d0 <LmHandlerRequestClass+0x11c>)
 800e64c:	699b      	ldr	r3, [r3, #24]
 800e64e:	2000      	movs	r0, #0
 800e650:	4798      	blx	r3
      break;
 800e652:	e032      	b.n	800e6ba <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e654:	232f      	movs	r3, #47	; 0x2f
 800e656:	18fb      	adds	r3, r7, r3
 800e658:	22ff      	movs	r2, #255	; 0xff
 800e65a:	701a      	strb	r2, [r3, #0]
      break;
 800e65c:	e02d      	b.n	800e6ba <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800e65e:	232f      	movs	r3, #47	; 0x2f
 800e660:	18fb      	adds	r3, r7, r3
 800e662:	22ff      	movs	r2, #255	; 0xff
 800e664:	701a      	strb	r2, [r3, #0]
      break;
 800e666:	e02b      	b.n	800e6c0 <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800e668:	232e      	movs	r3, #46	; 0x2e
 800e66a:	18fb      	adds	r3, r7, r3
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d004      	beq.n	800e67c <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800e672:	232f      	movs	r3, #47	; 0x2f
 800e674:	18fb      	adds	r3, r7, r3
 800e676:	22ff      	movs	r2, #255	; 0xff
 800e678:	701a      	strb	r2, [r3, #0]
      break;
 800e67a:	e020      	b.n	800e6be <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800e67c:	2108      	movs	r1, #8
 800e67e:	187b      	adds	r3, r7, r1
 800e680:	2202      	movs	r2, #2
 800e682:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e684:	187b      	adds	r3, r7, r1
 800e686:	0018      	movs	r0, r3
 800e688:	f005 fde2 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800e68c:	1e03      	subs	r3, r0, #0
 800e68e:	d10b      	bne.n	800e6a8 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800e690:	2002      	movs	r0, #2
 800e692:	f000 fdd3 	bl	800f23c <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e696:	4b0e      	ldr	r3, [pc, #56]	; (800e6d0 <LmHandlerRequestClass+0x11c>)
 800e698:	699b      	ldr	r3, [r3, #24]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00f      	beq.n	800e6be <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800e69e:	4b0c      	ldr	r3, [pc, #48]	; (800e6d0 <LmHandlerRequestClass+0x11c>)
 800e6a0:	699b      	ldr	r3, [r3, #24]
 800e6a2:	2002      	movs	r0, #2
 800e6a4:	4798      	blx	r3
      break;
 800e6a6:	e00a      	b.n	800e6be <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e6a8:	232f      	movs	r3, #47	; 0x2f
 800e6aa:	18fb      	adds	r3, r7, r3
 800e6ac:	22ff      	movs	r2, #255	; 0xff
 800e6ae:	701a      	strb	r2, [r3, #0]
      break;
 800e6b0:	e005      	b.n	800e6be <LmHandlerRequestClass+0x10a>
    }
  }
 800e6b2:	46c0      	nop			; (mov r8, r8)
 800e6b4:	e004      	b.n	800e6c0 <LmHandlerRequestClass+0x10c>
        break;
 800e6b6:	46c0      	nop			; (mov r8, r8)
 800e6b8:	e002      	b.n	800e6c0 <LmHandlerRequestClass+0x10c>
      break;
 800e6ba:	46c0      	nop			; (mov r8, r8)
 800e6bc:	e000      	b.n	800e6c0 <LmHandlerRequestClass+0x10c>
      break;
 800e6be:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800e6c0:	232f      	movs	r3, #47	; 0x2f
 800e6c2:	18fb      	adds	r3, r7, r3
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	b25b      	sxtb	r3, r3
}
 800e6c8:	0018      	movs	r0, r3
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	b00c      	add	sp, #48	; 0x30
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	20000654 	.word	0x20000654

0800e6d4 <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800e6d4:	b590      	push	{r4, r7, lr}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	0002      	movs	r2, r0
 800e6dc:	6039      	str	r1, [r7, #0]
 800e6de:	1dfb      	adds	r3, r7, #7
 800e6e0:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	60fb      	str	r3, [r7, #12]
  switch (id)
 800e6e6:	1dfb      	adds	r3, r7, #7
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d104      	bne.n	800e6f8 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800e6ee:	f000 fdbf 	bl	800f270 <LmphCompliancePackageFactory>
 800e6f2:	0003      	movs	r3, r0
 800e6f4:	60fb      	str	r3, [r7, #12]
      break;
 800e6f6:	e000      	b.n	800e6fa <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800e6f8:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d028      	beq.n	800e752 <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800e700:	1dfb      	adds	r3, r7, #7
 800e702:	781a      	ldrb	r2, [r3, #0]
 800e704:	4b16      	ldr	r3, [pc, #88]	; (800e760 <LmHandlerPackageRegister+0x8c>)
 800e706:	0092      	lsls	r2, r2, #2
 800e708:	68f9      	ldr	r1, [r7, #12]
 800e70a:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e70c:	1dfb      	adds	r3, r7, #7
 800e70e:	781a      	ldrb	r2, [r3, #0]
 800e710:	4b13      	ldr	r3, [pc, #76]	; (800e760 <LmHandlerPackageRegister+0x8c>)
 800e712:	0092      	lsls	r2, r2, #2
 800e714:	58d3      	ldr	r3, [r2, r3]
 800e716:	4a13      	ldr	r2, [pc, #76]	; (800e764 <LmHandlerPackageRegister+0x90>)
 800e718:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e71a:	1dfb      	adds	r3, r7, #7
 800e71c:	781a      	ldrb	r2, [r3, #0]
 800e71e:	4b10      	ldr	r3, [pc, #64]	; (800e760 <LmHandlerPackageRegister+0x8c>)
 800e720:	0092      	lsls	r2, r2, #2
 800e722:	58d3      	ldr	r3, [r2, r3]
 800e724:	4a10      	ldr	r2, [pc, #64]	; (800e768 <LmHandlerPackageRegister+0x94>)
 800e726:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e728:	1dfb      	adds	r3, r7, #7
 800e72a:	781a      	ldrb	r2, [r3, #0]
 800e72c:	4b0c      	ldr	r3, [pc, #48]	; (800e760 <LmHandlerPackageRegister+0x8c>)
 800e72e:	0092      	lsls	r2, r2, #2
 800e730:	58d3      	ldr	r3, [r2, r3]
 800e732:	4a0e      	ldr	r2, [pc, #56]	; (800e76c <LmHandlerPackageRegister+0x98>)
 800e734:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800e736:	1dfb      	adds	r3, r7, #7
 800e738:	781a      	ldrb	r2, [r3, #0]
 800e73a:	4b09      	ldr	r3, [pc, #36]	; (800e760 <LmHandlerPackageRegister+0x8c>)
 800e73c:	0092      	lsls	r2, r2, #2
 800e73e:	58d3      	ldr	r3, [r2, r3]
 800e740:	685c      	ldr	r4, [r3, #4]
 800e742:	4b0b      	ldr	r3, [pc, #44]	; (800e770 <LmHandlerPackageRegister+0x9c>)
 800e744:	6859      	ldr	r1, [r3, #4]
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	22f2      	movs	r2, #242	; 0xf2
 800e74a:	0018      	movs	r0, r3
 800e74c:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800e74e:	2300      	movs	r3, #0
 800e750:	e001      	b.n	800e756 <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	425b      	negs	r3, r3
  }
}
 800e756:	0018      	movs	r0, r3
 800e758:	46bd      	mov	sp, r7
 800e75a:	b005      	add	sp, #20
 800e75c:	bd90      	pop	{r4, r7, pc}
 800e75e:	46c0      	nop			; (mov r8, r8)
 800e760:	20000638 	.word	0x20000638
 800e764:	0800e301 	.word	0x0800e301
 800e768:	0800e411 	.word	0x0800e411
 800e76c:	0800ee73 	.word	0x0800ee73
 800e770:	20000184 	.word	0x20000184

0800e774 <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b08c      	sub	sp, #48	; 0x30
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d102      	bne.n	800e788 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e782:	2301      	movs	r3, #1
 800e784:	425b      	negs	r3, r3
 800e786:	e012      	b.n	800e7ae <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e788:	210c      	movs	r1, #12
 800e78a:	187b      	adds	r3, r7, r1
 800e78c:	2200      	movs	r2, #0
 800e78e:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e790:	187b      	adds	r3, r7, r1
 800e792:	0018      	movs	r0, r3
 800e794:	f005 fbfe 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800e798:	1e03      	subs	r3, r0, #0
 800e79a:	d002      	beq.n	800e7a2 <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e79c:	2301      	movs	r3, #1
 800e79e:	425b      	negs	r3, r3
 800e7a0:	e005      	b.n	800e7ae <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800e7a2:	230c      	movs	r3, #12
 800e7a4:	18fb      	adds	r3, r7, r3
 800e7a6:	791a      	ldrb	r2, [r3, #4]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	b00c      	add	sp, #48	; 0x30
 800e7b4:	bd80      	pop	{r7, pc}
	...

0800e7b8 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b08c      	sub	sp, #48	; 0x30
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d102      	bne.n	800e7cc <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	425b      	negs	r3, r3
 800e7ca:	e018      	b.n	800e7fe <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800e7cc:	210c      	movs	r1, #12
 800e7ce:	187b      	adds	r3, r7, r1
 800e7d0:	221f      	movs	r2, #31
 800e7d2:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800e7d4:	187b      	adds	r3, r7, r1
 800e7d6:	0018      	movs	r0, r3
 800e7d8:	f005 fbdc 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800e7dc:	1e03      	subs	r3, r0, #0
 800e7de:	d002      	beq.n	800e7e6 <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	425b      	negs	r3, r3
 800e7e4:	e00b      	b.n	800e7fe <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800e7e6:	210c      	movs	r1, #12
 800e7e8:	187b      	adds	r3, r7, r1
 800e7ea:	2204      	movs	r2, #4
 800e7ec:	569a      	ldrsb	r2, [r3, r2]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800e7f2:	187b      	adds	r3, r7, r1
 800e7f4:	2204      	movs	r2, #4
 800e7f6:	569a      	ldrsb	r2, [r3, r2]
 800e7f8:	4b03      	ldr	r3, [pc, #12]	; (800e808 <LmHandlerGetTxDatarate+0x50>)
 800e7fa:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	0018      	movs	r0, r3
 800e800:	46bd      	mov	sp, r7
 800e802:	b00c      	add	sp, #48	; 0x30
 800e804:	bd80      	pop	{r7, pc}
 800e806:	46c0      	nop			; (mov r8, r8)
 800e808:	2000064c 	.word	0x2000064c

0800e80c <LmHandlerGetActiveRegion>:

int32_t LmHandlerGetActiveRegion(LoRaMacRegion_t *region)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  if (region == NULL)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d102      	bne.n	800e820 <LmHandlerGetActiveRegion+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	425b      	negs	r3, r3
 800e81e:	e004      	b.n	800e82a <LmHandlerGetActiveRegion+0x1e>
  }

  *region = LmHandlerParams.ActiveRegion;
 800e820:	4b04      	ldr	r3, [pc, #16]	; (800e834 <LmHandlerGetActiveRegion+0x28>)
 800e822:	781a      	ldrb	r2, [r3, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	0018      	movs	r0, r3
 800e82c:	46bd      	mov	sp, r7
 800e82e:	b002      	add	sp, #8
 800e830:	bd80      	pop	{r7, pc}
 800e832:	46c0      	nop			; (mov r8, r8)
 800e834:	2000064c 	.word	0x2000064c

0800e838 <LmHandlerGetDevEUI>:

int32_t LmHandlerGetDevEUI(uint8_t *devEUI)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  if (devEUI == NULL)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d102      	bne.n	800e84c <LmHandlerGetDevEUI+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	425b      	negs	r3, r3
 800e84a:	e006      	b.n	800e85a <LmHandlerGetDevEUI+0x22>
  }

  UTIL_MEM_cpy_8(devEUI, CommissioningParams.DevEui, SE_EUI_SIZE);
 800e84c:	4905      	ldr	r1, [pc, #20]	; (800e864 <LmHandlerGetDevEUI+0x2c>)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2208      	movs	r2, #8
 800e852:	0018      	movs	r0, r3
 800e854:	f00e fad8 	bl	801ce08 <UTIL_MEM_cpy_8>
  return LORAMAC_HANDLER_SUCCESS;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	0018      	movs	r0, r3
 800e85c:	46bd      	mov	sp, r7
 800e85e:	b002      	add	sp, #8
 800e860:	bd80      	pop	{r7, pc}
 800e862:	46c0      	nop			; (mov r8, r8)
 800e864:	2000014c 	.word	0x2000014c

0800e868 <LmHandlerSetDevEUI>:

int32_t LmHandlerSetDevEUI(uint8_t *devEUI)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08c      	sub	sp, #48	; 0x30
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
#if ( STATIC_DEVICE_EUI != 1 )
  MibRequestConfirm_t mibReq;

  /* Not yet joined */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e870:	f7ff fd26 	bl	800e2c0 <LmHandlerJoinStatus>
 800e874:	0003      	movs	r3, r0
 800e876:	2b01      	cmp	r3, #1
 800e878:	d017      	beq.n	800e8aa <LmHandlerSetDevEUI+0x42>
  {
    mibReq.Type = MIB_DEV_EUI;
 800e87a:	210c      	movs	r1, #12
 800e87c:	187b      	adds	r3, r7, r1
 800e87e:	2202      	movs	r2, #2
 800e880:	701a      	strb	r2, [r3, #0]
    mibReq.Param.DevEui = devEUI;
 800e882:	187b      	adds	r3, r7, r1
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	605a      	str	r2, [r3, #4]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e888:	187b      	adds	r3, r7, r1
 800e88a:	0018      	movs	r0, r3
 800e88c:	f005 fce0 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800e890:	1e03      	subs	r3, r0, #0
 800e892:	d002      	beq.n	800e89a <LmHandlerSetDevEUI+0x32>
    {
      return LORAMAC_HANDLER_ERROR;
 800e894:	2301      	movs	r3, #1
 800e896:	425b      	negs	r3, r3
 800e898:	e009      	b.n	800e8ae <LmHandlerSetDevEUI+0x46>
    }
    UTIL_MEM_cpy_8(CommissioningParams.DevEui, devEUI, SE_EUI_SIZE);
 800e89a:	6879      	ldr	r1, [r7, #4]
 800e89c:	4b06      	ldr	r3, [pc, #24]	; (800e8b8 <LmHandlerSetDevEUI+0x50>)
 800e89e:	2208      	movs	r2, #8
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	f00e fab1 	bl	801ce08 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	e001      	b.n	800e8ae <LmHandlerSetDevEUI+0x46>
  }
  else
  {
    /* Cannot change Keys in running state */
    return LORAMAC_HANDLER_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	425b      	negs	r3, r3
  }
#else /* STATIC_DEVICE_EUI == 1 */
  return LORAMAC_HANDLER_ERROR;
#endif /* STATIC_DEVICE_EUI */
}
 800e8ae:	0018      	movs	r0, r3
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	b00c      	add	sp, #48	; 0x30
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	46c0      	nop			; (mov r8, r8)
 800e8b8:	2000014c 	.word	0x2000014c

0800e8bc <LmHandlerGetAppEUI>:

int32_t LmHandlerGetAppEUI(uint8_t *appEUI)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  if (appEUI == NULL)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d102      	bne.n	800e8d0 <LmHandlerGetAppEUI+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	425b      	negs	r3, r3
 800e8ce:	e006      	b.n	800e8de <LmHandlerGetAppEUI+0x22>
  }

  UTIL_MEM_cpy_8(appEUI, CommissioningParams.JoinEui, SE_EUI_SIZE);
 800e8d0:	4905      	ldr	r1, [pc, #20]	; (800e8e8 <LmHandlerGetAppEUI+0x2c>)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2208      	movs	r2, #8
 800e8d6:	0018      	movs	r0, r3
 800e8d8:	f00e fa96 	bl	801ce08 <UTIL_MEM_cpy_8>

  return LORAMAC_HANDLER_SUCCESS;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	0018      	movs	r0, r3
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	b002      	add	sp, #8
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	46c0      	nop			; (mov r8, r8)
 800e8e8:	20000154 	.word	0x20000154

0800e8ec <LmHandlerSetAppEUI>:

int32_t LmHandlerSetAppEUI(uint8_t *appEUI)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b08c      	sub	sp, #48	; 0x30
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  /* Not yet joined */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e8f4:	f7ff fce4 	bl	800e2c0 <LmHandlerJoinStatus>
 800e8f8:	0003      	movs	r3, r0
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d017      	beq.n	800e92e <LmHandlerSetAppEUI+0x42>
  {
    mibReq.Type = MIB_JOIN_EUI;
 800e8fe:	210c      	movs	r1, #12
 800e900:	187b      	adds	r3, r7, r1
 800e902:	2203      	movs	r2, #3
 800e904:	701a      	strb	r2, [r3, #0]
    mibReq.Param.JoinEui = appEUI;
 800e906:	187b      	adds	r3, r7, r1
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	605a      	str	r2, [r3, #4]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e90c:	187b      	adds	r3, r7, r1
 800e90e:	0018      	movs	r0, r3
 800e910:	f005 fc9e 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800e914:	1e03      	subs	r3, r0, #0
 800e916:	d002      	beq.n	800e91e <LmHandlerSetAppEUI+0x32>
    {
      return LORAMAC_HANDLER_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	425b      	negs	r3, r3
 800e91c:	e009      	b.n	800e932 <LmHandlerSetAppEUI+0x46>
    }
    UTIL_MEM_cpy_8(CommissioningParams.JoinEui, appEUI, SE_EUI_SIZE);
 800e91e:	6879      	ldr	r1, [r7, #4]
 800e920:	4b06      	ldr	r3, [pc, #24]	; (800e93c <LmHandlerSetAppEUI+0x50>)
 800e922:	2208      	movs	r2, #8
 800e924:	0018      	movs	r0, r3
 800e926:	f00e fa6f 	bl	801ce08 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 800e92a:	2300      	movs	r3, #0
 800e92c:	e001      	b.n	800e932 <LmHandlerSetAppEUI+0x46>
  }
  else
  {
    /* Cannot change Keys in running state */
    return LORAMAC_HANDLER_ERROR;
 800e92e:	2301      	movs	r3, #1
 800e930:	425b      	negs	r3, r3
  }
}
 800e932:	0018      	movs	r0, r3
 800e934:	46bd      	mov	sp, r7
 800e936:	b00c      	add	sp, #48	; 0x30
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	46c0      	nop			; (mov r8, r8)
 800e93c:	20000154 	.word	0x20000154

0800e940 <LmHandlerGetNetworkID>:

int32_t LmHandlerGetNetworkID(uint32_t *networkId)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  if (networkId == NULL)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d102      	bne.n	800e954 <LmHandlerGetNetworkID+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	425b      	negs	r3, r3
 800e952:	e004      	b.n	800e95e <LmHandlerGetNetworkID+0x1e>
  }

  *networkId = CommissioningParams.NetworkId;
 800e954:	4b04      	ldr	r3, [pc, #16]	; (800e968 <LmHandlerGetNetworkID+0x28>)
 800e956:	691a      	ldr	r2, [r3, #16]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	601a      	str	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e95c:	2300      	movs	r3, #0
}
 800e95e:	0018      	movs	r0, r3
 800e960:	46bd      	mov	sp, r7
 800e962:	b002      	add	sp, #8
 800e964:	bd80      	pop	{r7, pc}
 800e966:	46c0      	nop			; (mov r8, r8)
 800e968:	2000014c 	.word	0x2000014c

0800e96c <LmHandlerSetNetworkID>:

int32_t LmHandlerSetNetworkID(uint32_t networkId)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  /* Not yet joined */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e974:	f7ff fca4 	bl	800e2c0 <LmHandlerJoinStatus>
 800e978:	0003      	movs	r3, r0
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d008      	beq.n	800e990 <LmHandlerSetNetworkID+0x24>
  {
    CommissioningParams.NetworkId = networkId;
 800e97e:	4b07      	ldr	r3, [pc, #28]	; (800e99c <LmHandlerSetNetworkID+0x30>)
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	611a      	str	r2, [r3, #16]
    return LmHandlerConfigure(&LmHandlerParams);
 800e984:	4b06      	ldr	r3, [pc, #24]	; (800e9a0 <LmHandlerSetNetworkID+0x34>)
 800e986:	0018      	movs	r0, r3
 800e988:	f7ff fb4a 	bl	800e020 <LmHandlerConfigure>
 800e98c:	0003      	movs	r3, r0
 800e98e:	e001      	b.n	800e994 <LmHandlerSetNetworkID+0x28>
  }
  else
  {
    /* Cannot change NetworkID in running state */
    return LORAMAC_HANDLER_ERROR;
 800e990:	2301      	movs	r3, #1
 800e992:	425b      	negs	r3, r3
  }
}
 800e994:	0018      	movs	r0, r3
 800e996:	46bd      	mov	sp, r7
 800e998:	b002      	add	sp, #8
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	2000014c 	.word	0x2000014c
 800e9a0:	2000064c 	.word	0x2000064c

0800e9a4 <LmHandlerGetDevAddr>:

int32_t LmHandlerGetDevAddr(uint32_t *devAddr)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  if (devAddr == NULL)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d102      	bne.n	800e9b8 <LmHandlerGetDevAddr+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	425b      	negs	r3, r3
 800e9b6:	e004      	b.n	800e9c2 <LmHandlerGetDevAddr+0x1e>
  }

  *devAddr = CommissioningParams.DevAddr;
 800e9b8:	4b04      	ldr	r3, [pc, #16]	; (800e9cc <LmHandlerGetDevAddr+0x28>)
 800e9ba:	695a      	ldr	r2, [r3, #20]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	601a      	str	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	0018      	movs	r0, r3
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	b002      	add	sp, #8
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	46c0      	nop			; (mov r8, r8)
 800e9cc:	2000014c 	.word	0x2000014c

0800e9d0 <LmHandlerSetDevAddr>:

int32_t LmHandlerSetDevAddr(uint32_t devAddr)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
#if ( STATIC_DEVICE_ADDRESS != 1 )
  /* Not yet joined */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e9d8:	f7ff fc72 	bl	800e2c0 <LmHandlerJoinStatus>
 800e9dc:	0003      	movs	r3, r0
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d008      	beq.n	800e9f4 <LmHandlerSetDevAddr+0x24>
  {
    CommissioningParams.DevAddr = devAddr;
 800e9e2:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <LmHandlerSetDevAddr+0x30>)
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	615a      	str	r2, [r3, #20]
    return LmHandlerConfigure(&LmHandlerParams);
 800e9e8:	4b06      	ldr	r3, [pc, #24]	; (800ea04 <LmHandlerSetDevAddr+0x34>)
 800e9ea:	0018      	movs	r0, r3
 800e9ec:	f7ff fb18 	bl	800e020 <LmHandlerConfigure>
 800e9f0:	0003      	movs	r3, r0
 800e9f2:	e001      	b.n	800e9f8 <LmHandlerSetDevAddr+0x28>
  }
  else
  {
    /* Cannot change DevAddr in running state */
    return LORAMAC_HANDLER_ERROR;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	425b      	negs	r3, r3
  }
#else /* STATIC_DEVICE_ADDRESS == 1 */
  return LORAMAC_HANDLER_ERROR;
#endif /* STATIC_DEVICE_ADDRESS */
}
 800e9f8:	0018      	movs	r0, r3
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	b002      	add	sp, #8
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	2000014c 	.word	0x2000014c
 800ea04:	2000064c 	.word	0x2000064c

0800ea08 <LmHandlerSetActiveRegion>:

int32_t LmHandlerSetActiveRegion(LoRaMacRegion_t region)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	0002      	movs	r2, r0
 800ea10:	1dfb      	adds	r3, r7, #7
 800ea12:	701a      	strb	r2, [r3, #0]
  /* Not yet joined */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800ea14:	f7ff fc54 	bl	800e2c0 <LmHandlerJoinStatus>
 800ea18:	0003      	movs	r3, r0
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d009      	beq.n	800ea32 <LmHandlerSetActiveRegion+0x2a>
  {
    LmHandlerParams.ActiveRegion = region;
 800ea1e:	4b08      	ldr	r3, [pc, #32]	; (800ea40 <LmHandlerSetActiveRegion+0x38>)
 800ea20:	1dfa      	adds	r2, r7, #7
 800ea22:	7812      	ldrb	r2, [r2, #0]
 800ea24:	701a      	strb	r2, [r3, #0]
    return LmHandlerConfigure(&LmHandlerParams);
 800ea26:	4b06      	ldr	r3, [pc, #24]	; (800ea40 <LmHandlerSetActiveRegion+0x38>)
 800ea28:	0018      	movs	r0, r3
 800ea2a:	f7ff faf9 	bl	800e020 <LmHandlerConfigure>
 800ea2e:	0003      	movs	r3, r0
 800ea30:	e001      	b.n	800ea36 <LmHandlerSetActiveRegion+0x2e>
  }
  else
  {
    /* Cannot change Region in running state */
    return LORAMAC_HANDLER_ERROR;
 800ea32:	2301      	movs	r3, #1
 800ea34:	425b      	negs	r3, r3
  }
}
 800ea36:	0018      	movs	r0, r3
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	b002      	add	sp, #8
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	46c0      	nop			; (mov r8, r8)
 800ea40:	2000064c 	.word	0x2000064c

0800ea44 <LmHandlerGetAdrEnable>:

int32_t LmHandlerGetAdrEnable(bool *adrEnable)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  if (adrEnable == NULL)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d102      	bne.n	800ea58 <LmHandlerGetAdrEnable+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800ea52:	2301      	movs	r3, #1
 800ea54:	425b      	negs	r3, r3
 800ea56:	e004      	b.n	800ea62 <LmHandlerGetAdrEnable+0x1e>
  }

  *adrEnable = LmHandlerParams.AdrEnable;
 800ea58:	4b04      	ldr	r3, [pc, #16]	; (800ea6c <LmHandlerGetAdrEnable+0x28>)
 800ea5a:	789a      	ldrb	r2, [r3, #2]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	0018      	movs	r0, r3
 800ea64:	46bd      	mov	sp, r7
 800ea66:	b002      	add	sp, #8
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	46c0      	nop			; (mov r8, r8)
 800ea6c:	2000064c 	.word	0x2000064c

0800ea70 <LmHandlerSetAdrEnable>:

int32_t LmHandlerSetAdrEnable(bool adrEnable)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b08c      	sub	sp, #48	; 0x30
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	0002      	movs	r2, r0
 800ea78:	1dfb      	adds	r3, r7, #7
 800ea7a:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  mibReq.Type = MIB_ADR;
 800ea7c:	210c      	movs	r1, #12
 800ea7e:	187b      	adds	r3, r7, r1
 800ea80:	2204      	movs	r2, #4
 800ea82:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = adrEnable;
 800ea84:	187b      	adds	r3, r7, r1
 800ea86:	1dfa      	adds	r2, r7, #7
 800ea88:	7812      	ldrb	r2, [r2, #0]
 800ea8a:	711a      	strb	r2, [r3, #4]
  if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ea8c:	187b      	adds	r3, r7, r1
 800ea8e:	0018      	movs	r0, r3
 800ea90:	f005 fbde 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800ea94:	1e03      	subs	r3, r0, #0
 800ea96:	d002      	beq.n	800ea9e <LmHandlerSetAdrEnable+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	425b      	negs	r3, r3
 800ea9c:	e004      	b.n	800eaa8 <LmHandlerSetAdrEnable+0x38>
  }
  LmHandlerParams.AdrEnable = adrEnable;
 800ea9e:	4b04      	ldr	r3, [pc, #16]	; (800eab0 <LmHandlerSetAdrEnable+0x40>)
 800eaa0:	1dfa      	adds	r2, r7, #7
 800eaa2:	7812      	ldrb	r2, [r2, #0]
 800eaa4:	709a      	strb	r2, [r3, #2]

  return LORAMAC_HANDLER_SUCCESS;
 800eaa6:	2300      	movs	r3, #0
}
 800eaa8:	0018      	movs	r0, r3
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	b00c      	add	sp, #48	; 0x30
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	2000064c 	.word	0x2000064c

0800eab4 <LmHandlerSetTxDatarate>:

int32_t LmHandlerSetTxDatarate(int8_t txDatarate)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b08c      	sub	sp, #48	; 0x30
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	0002      	movs	r2, r0
 800eabc:	1dfb      	adds	r3, r7, #7
 800eabe:	701a      	strb	r2, [r3, #0]
  if (LmHandlerParams.AdrEnable == true)
 800eac0:	4b10      	ldr	r3, [pc, #64]	; (800eb04 <LmHandlerSetTxDatarate+0x50>)
 800eac2:	789b      	ldrb	r3, [r3, #2]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d002      	beq.n	800eace <LmHandlerSetTxDatarate+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	425b      	negs	r3, r3
 800eacc:	e015      	b.n	800eafa <LmHandlerSetTxDatarate+0x46>
  }

  MibRequestConfirm_t mibReq;
  mibReq.Type = MIB_CHANNELS_DATARATE;
 800eace:	210c      	movs	r1, #12
 800ead0:	187b      	adds	r3, r7, r1
 800ead2:	221f      	movs	r2, #31
 800ead4:	701a      	strb	r2, [r3, #0]
  mibReq.Param.ChannelsDatarate = txDatarate;
 800ead6:	187b      	adds	r3, r7, r1
 800ead8:	1dfa      	adds	r2, r7, #7
 800eada:	7812      	ldrb	r2, [r2, #0]
 800eadc:	711a      	strb	r2, [r3, #4]
  if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800eade:	187b      	adds	r3, r7, r1
 800eae0:	0018      	movs	r0, r3
 800eae2:	f005 fbb5 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800eae6:	1e03      	subs	r3, r0, #0
 800eae8:	d002      	beq.n	800eaf0 <LmHandlerSetTxDatarate+0x3c>
  {
    return LORAMAC_HANDLER_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	425b      	negs	r3, r3
 800eaee:	e004      	b.n	800eafa <LmHandlerSetTxDatarate+0x46>
  }

  LmHandlerParams.TxDatarate = txDatarate;
 800eaf0:	4b04      	ldr	r3, [pc, #16]	; (800eb04 <LmHandlerSetTxDatarate+0x50>)
 800eaf2:	1dfa      	adds	r2, r7, #7
 800eaf4:	7812      	ldrb	r2, [r2, #0]
 800eaf6:	70da      	strb	r2, [r3, #3]

  return LORAMAC_HANDLER_SUCCESS;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	0018      	movs	r0, r3
 800eafc:	46bd      	mov	sp, r7
 800eafe:	b00c      	add	sp, #48	; 0x30
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	46c0      	nop			; (mov r8, r8)
 800eb04:	2000064c 	.word	0x2000064c

0800eb08 <LmHandlerGetDutyCycleEnable>:

int32_t LmHandlerGetDutyCycleEnable(bool *dutyCycleEnable)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  if (dutyCycleEnable == NULL)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d102      	bne.n	800eb1c <LmHandlerGetDutyCycleEnable+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800eb16:	2301      	movs	r3, #1
 800eb18:	425b      	negs	r3, r3
 800eb1a:	e004      	b.n	800eb26 <LmHandlerGetDutyCycleEnable+0x1e>
  }

  *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 800eb1c:	4b04      	ldr	r3, [pc, #16]	; (800eb30 <LmHandlerGetDutyCycleEnable+0x28>)
 800eb1e:	791a      	ldrb	r2, [r3, #4]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800eb24:	2300      	movs	r3, #0
}
 800eb26:	0018      	movs	r0, r3
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	b002      	add	sp, #8
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	46c0      	nop			; (mov r8, r8)
 800eb30:	2000064c 	.word	0x2000064c

0800eb34 <LmHandlerSetDutyCycleEnable>:

int32_t LmHandlerSetDutyCycleEnable(bool dutyCycleEnable)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	0002      	movs	r2, r0
 800eb3c:	1dfb      	adds	r3, r7, #7
 800eb3e:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 800eb40:	4b06      	ldr	r3, [pc, #24]	; (800eb5c <LmHandlerSetDutyCycleEnable+0x28>)
 800eb42:	1dfa      	adds	r2, r7, #7
 800eb44:	7812      	ldrb	r2, [r2, #0]
 800eb46:	711a      	strb	r2, [r3, #4]
  LoRaMacTestSetDutyCycleOn(dutyCycleEnable);
 800eb48:	1dfb      	adds	r3, r7, #7
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	0018      	movs	r0, r3
 800eb4e:	f006 f9ab 	bl	8014ea8 <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	0018      	movs	r0, r3
 800eb56:	46bd      	mov	sp, r7
 800eb58:	b002      	add	sp, #8
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	2000064c 	.word	0x2000064c

0800eb60 <LmHandlerGetRX2Params>:

int32_t LmHandlerGetRX2Params(RxChannelParams_t *rxParams)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b08c      	sub	sp, #48	; 0x30
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  if (rxParams == NULL)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <LmHandlerGetRX2Params+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	425b      	negs	r3, r3
 800eb72:	e016      	b.n	800eba2 <LmHandlerGetRX2Params+0x42>
  }

  MibRequestConfirm_t mibReq;

  mibReq.Type = MIB_RX2_CHANNEL;
 800eb74:	210c      	movs	r1, #12
 800eb76:	187b      	adds	r3, r7, r1
 800eb78:	2212      	movs	r2, #18
 800eb7a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800eb7c:	187b      	adds	r3, r7, r1
 800eb7e:	0018      	movs	r0, r3
 800eb80:	f005 fa08 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800eb84:	1e03      	subs	r3, r0, #0
 800eb86:	d002      	beq.n	800eb8e <LmHandlerGetRX2Params+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	425b      	negs	r3, r3
 800eb8c:	e009      	b.n	800eba2 <LmHandlerGetRX2Params+0x42>
  }

  rxParams->Frequency = mibReq.Param.Rx2Channel.Frequency;
 800eb8e:	210c      	movs	r1, #12
 800eb90:	187b      	adds	r3, r7, r1
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	601a      	str	r2, [r3, #0]
  rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
 800eb98:	187b      	adds	r3, r7, r1
 800eb9a:	7a1a      	ldrb	r2, [r3, #8]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	711a      	strb	r2, [r3, #4]
  return LORAMAC_HANDLER_SUCCESS;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	0018      	movs	r0, r3
 800eba4:	46bd      	mov	sp, r7
 800eba6:	b00c      	add	sp, #48	; 0x30
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <LmHandlerGetTxPower>:

int32_t LmHandlerGetTxPower(int8_t *txPower)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b08c      	sub	sp, #48	; 0x30
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (txPower == NULL)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d102      	bne.n	800ebbe <LmHandlerGetTxPower+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	425b      	negs	r3, r3
 800ebbc:	e013      	b.n	800ebe6 <LmHandlerGetTxPower+0x3c>
  }

  mibReq.Type = MIB_CHANNELS_TX_POWER;
 800ebbe:	210c      	movs	r1, #12
 800ebc0:	187b      	adds	r3, r7, r1
 800ebc2:	2220      	movs	r2, #32
 800ebc4:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ebc6:	187b      	adds	r3, r7, r1
 800ebc8:	0018      	movs	r0, r3
 800ebca:	f005 f9e3 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800ebce:	1e03      	subs	r3, r0, #0
 800ebd0:	d002      	beq.n	800ebd8 <LmHandlerGetTxPower+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	425b      	negs	r3, r3
 800ebd6:	e006      	b.n	800ebe6 <LmHandlerGetTxPower+0x3c>
  }

  *txPower = mibReq.Param.ChannelsTxPower;
 800ebd8:	230c      	movs	r3, #12
 800ebda:	18fb      	adds	r3, r7, r3
 800ebdc:	2204      	movs	r2, #4
 800ebde:	569a      	ldrsb	r2, [r3, r2]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	0018      	movs	r0, r3
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	b00c      	add	sp, #48	; 0x30
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <LmHandlerGetRx1Delay>:

int32_t LmHandlerGetRx1Delay(uint32_t *rxDelay)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b08c      	sub	sp, #48	; 0x30
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (rxDelay == NULL)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d102      	bne.n	800ec02 <LmHandlerGetRx1Delay+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	425b      	negs	r3, r3
 800ec00:	e012      	b.n	800ec28 <LmHandlerGetRx1Delay+0x3a>
  }

  mibReq.Type = MIB_RECEIVE_DELAY_1;
 800ec02:	210c      	movs	r1, #12
 800ec04:	187b      	adds	r3, r7, r1
 800ec06:	221a      	movs	r2, #26
 800ec08:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ec0a:	187b      	adds	r3, r7, r1
 800ec0c:	0018      	movs	r0, r3
 800ec0e:	f005 f9c1 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800ec12:	1e03      	subs	r3, r0, #0
 800ec14:	d002      	beq.n	800ec1c <LmHandlerGetRx1Delay+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800ec16:	2301      	movs	r3, #1
 800ec18:	425b      	negs	r3, r3
 800ec1a:	e005      	b.n	800ec28 <LmHandlerGetRx1Delay+0x3a>
  }

  *rxDelay = mibReq.Param.ReceiveDelay1;
 800ec1c:	230c      	movs	r3, #12
 800ec1e:	18fb      	adds	r3, r7, r3
 800ec20:	685a      	ldr	r2, [r3, #4]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	601a      	str	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	0018      	movs	r0, r3
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	b00c      	add	sp, #48	; 0x30
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <LmHandlerGetRx2Delay>:

int32_t LmHandlerGetRx2Delay(uint32_t *rxDelay)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08c      	sub	sp, #48	; 0x30
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (rxDelay == NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d102      	bne.n	800ec44 <LmHandlerGetRx2Delay+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	425b      	negs	r3, r3
 800ec42:	e012      	b.n	800ec6a <LmHandlerGetRx2Delay+0x3a>
  }

  mibReq.Type = MIB_RECEIVE_DELAY_2;
 800ec44:	210c      	movs	r1, #12
 800ec46:	187b      	adds	r3, r7, r1
 800ec48:	221b      	movs	r2, #27
 800ec4a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ec4c:	187b      	adds	r3, r7, r1
 800ec4e:	0018      	movs	r0, r3
 800ec50:	f005 f9a0 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800ec54:	1e03      	subs	r3, r0, #0
 800ec56:	d002      	beq.n	800ec5e <LmHandlerGetRx2Delay+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	425b      	negs	r3, r3
 800ec5c:	e005      	b.n	800ec6a <LmHandlerGetRx2Delay+0x3a>
  }

  *rxDelay = mibReq.Param.ReceiveDelay2;
 800ec5e:	230c      	movs	r3, #12
 800ec60:	18fb      	adds	r3, r7, r3
 800ec62:	685a      	ldr	r2, [r3, #4]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	601a      	str	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	0018      	movs	r0, r3
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	b00c      	add	sp, #48	; 0x30
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <LmHandlerGetJoinRx1Delay>:

int32_t LmHandlerGetJoinRx1Delay(uint32_t *rxDelay)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b08c      	sub	sp, #48	; 0x30
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (rxDelay == NULL)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d102      	bne.n	800ec86 <LmHandlerGetJoinRx1Delay+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	425b      	negs	r3, r3
 800ec84:	e012      	b.n	800ecac <LmHandlerGetJoinRx1Delay+0x3a>
  }

  mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 800ec86:	210c      	movs	r1, #12
 800ec88:	187b      	adds	r3, r7, r1
 800ec8a:	221c      	movs	r2, #28
 800ec8c:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ec8e:	187b      	adds	r3, r7, r1
 800ec90:	0018      	movs	r0, r3
 800ec92:	f005 f97f 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800ec96:	1e03      	subs	r3, r0, #0
 800ec98:	d002      	beq.n	800eca0 <LmHandlerGetJoinRx1Delay+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	425b      	negs	r3, r3
 800ec9e:	e005      	b.n	800ecac <LmHandlerGetJoinRx1Delay+0x3a>
  }

  *rxDelay = mibReq.Param.JoinAcceptDelay1;
 800eca0:	230c      	movs	r3, #12
 800eca2:	18fb      	adds	r3, r7, r3
 800eca4:	685a      	ldr	r2, [r3, #4]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	601a      	str	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	0018      	movs	r0, r3
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	b00c      	add	sp, #48	; 0x30
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <LmHandlerGetJoinRx2Delay>:

int32_t LmHandlerGetJoinRx2Delay(uint32_t *rxDelay)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b08c      	sub	sp, #48	; 0x30
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (rxDelay == NULL)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d102      	bne.n	800ecc8 <LmHandlerGetJoinRx2Delay+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	425b      	negs	r3, r3
 800ecc6:	e012      	b.n	800ecee <LmHandlerGetJoinRx2Delay+0x3a>
  }

  mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 800ecc8:	210c      	movs	r1, #12
 800ecca:	187b      	adds	r3, r7, r1
 800eccc:	221d      	movs	r2, #29
 800ecce:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ecd0:	187b      	adds	r3, r7, r1
 800ecd2:	0018      	movs	r0, r3
 800ecd4:	f005 f95e 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
 800ecd8:	1e03      	subs	r3, r0, #0
 800ecda:	d002      	beq.n	800ece2 <LmHandlerGetJoinRx2Delay+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	425b      	negs	r3, r3
 800ece0:	e005      	b.n	800ecee <LmHandlerGetJoinRx2Delay+0x3a>
  }

  *rxDelay = mibReq.Param.JoinAcceptDelay2;
 800ece2:	230c      	movs	r3, #12
 800ece4:	18fb      	adds	r3, r7, r3
 800ece6:	685a      	ldr	r2, [r3, #4]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	601a      	str	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	0018      	movs	r0, r3
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	b00c      	add	sp, #48	; 0x30
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <LmHandlerSetTxPower>:

int32_t LmHandlerSetTxPower(int8_t txPower)
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b08c      	sub	sp, #48	; 0x30
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	0002      	movs	r2, r0
 800ecfe:	1dfb      	adds	r3, r7, #7
 800ed00:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;

  mibReq.Type = MIB_CHANNELS_TX_POWER;
 800ed02:	210c      	movs	r1, #12
 800ed04:	187b      	adds	r3, r7, r1
 800ed06:	2220      	movs	r2, #32
 800ed08:	701a      	strb	r2, [r3, #0]
  mibReq.Param.ChannelsTxPower = txPower;
 800ed0a:	187b      	adds	r3, r7, r1
 800ed0c:	1dfa      	adds	r2, r7, #7
 800ed0e:	7812      	ldrb	r2, [r2, #0]
 800ed10:	711a      	strb	r2, [r3, #4]
  if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ed12:	187b      	adds	r3, r7, r1
 800ed14:	0018      	movs	r0, r3
 800ed16:	f005 fa9b 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800ed1a:	1e03      	subs	r3, r0, #0
 800ed1c:	d002      	beq.n	800ed24 <LmHandlerSetTxPower+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	425b      	negs	r3, r3
 800ed22:	e000      	b.n	800ed26 <LmHandlerSetTxPower+0x30>
  }

  return LORAMAC_HANDLER_SUCCESS;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	0018      	movs	r0, r3
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	b00c      	add	sp, #48	; 0x30
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <LmHandlerSetRX2Params>:

int32_t LmHandlerSetRX2Params(RxChannelParams_t *rxParams)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b08c      	sub	sp, #48	; 0x30
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;

  mibReq.Type = MIB_RX2_CHANNEL;
 800ed36:	210c      	movs	r1, #12
 800ed38:	187b      	adds	r3, r7, r1
 800ed3a:	2212      	movs	r2, #18
 800ed3c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.Rx2Channel.Frequency = rxParams->Frequency;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	187b      	adds	r3, r7, r1
 800ed44:	605a      	str	r2, [r3, #4]
  mibReq.Param.Rx2Channel.Datarate = rxParams->Datarate;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	791a      	ldrb	r2, [r3, #4]
 800ed4a:	187b      	adds	r3, r7, r1
 800ed4c:	721a      	strb	r2, [r3, #8]
  if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ed4e:	187b      	adds	r3, r7, r1
 800ed50:	0018      	movs	r0, r3
 800ed52:	f005 fa7d 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800ed56:	1e03      	subs	r3, r0, #0
 800ed58:	d002      	beq.n	800ed60 <LmHandlerSetRX2Params+0x32>
  {
    return LORAMAC_HANDLER_ERROR;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	425b      	negs	r3, r3
 800ed5e:	e000      	b.n	800ed62 <LmHandlerSetRX2Params+0x34>
  }

  return LORAMAC_HANDLER_SUCCESS;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	0018      	movs	r0, r3
 800ed64:	46bd      	mov	sp, r7
 800ed66:	b00c      	add	sp, #48	; 0x30
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <LmHandlerSetRx1Delay>:

int32_t LmHandlerSetRx1Delay(uint32_t rxDelay)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b08c      	sub	sp, #48	; 0x30
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  mibReq.Type = MIB_RECEIVE_DELAY_1;
 800ed72:	210c      	movs	r1, #12
 800ed74:	187b      	adds	r3, r7, r1
 800ed76:	221a      	movs	r2, #26
 800ed78:	701a      	strb	r2, [r3, #0]
  mibReq.Param.ReceiveDelay1 = rxDelay;
 800ed7a:	187b      	adds	r3, r7, r1
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	605a      	str	r2, [r3, #4]
  if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ed80:	187b      	adds	r3, r7, r1
 800ed82:	0018      	movs	r0, r3
 800ed84:	f005 fa64 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800ed88:	1e03      	subs	r3, r0, #0
 800ed8a:	d002      	beq.n	800ed92 <LmHandlerSetRx1Delay+0x28>
  {
    return LORAMAC_HANDLER_ERROR;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	425b      	negs	r3, r3
 800ed90:	e000      	b.n	800ed94 <LmHandlerSetRx1Delay+0x2a>
  }

  return LORAMAC_HANDLER_SUCCESS;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	0018      	movs	r0, r3
 800ed96:	46bd      	mov	sp, r7
 800ed98:	b00c      	add	sp, #48	; 0x30
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <LmHandlerSetRx2Delay>:

int32_t LmHandlerSetRx2Delay(uint32_t rxDelay)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b08c      	sub	sp, #48	; 0x30
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  mibReq.Type = MIB_RECEIVE_DELAY_2;
 800eda4:	210c      	movs	r1, #12
 800eda6:	187b      	adds	r3, r7, r1
 800eda8:	221b      	movs	r2, #27
 800edaa:	701a      	strb	r2, [r3, #0]
  mibReq.Param.ReceiveDelay2 = rxDelay;
 800edac:	187b      	adds	r3, r7, r1
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	605a      	str	r2, [r3, #4]
  if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800edb2:	187b      	adds	r3, r7, r1
 800edb4:	0018      	movs	r0, r3
 800edb6:	f005 fa4b 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800edba:	1e03      	subs	r3, r0, #0
 800edbc:	d002      	beq.n	800edc4 <LmHandlerSetRx2Delay+0x28>
  {
    return LORAMAC_HANDLER_ERROR;
 800edbe:	2301      	movs	r3, #1
 800edc0:	425b      	negs	r3, r3
 800edc2:	e000      	b.n	800edc6 <LmHandlerSetRx2Delay+0x2a>
  }

  return LORAMAC_HANDLER_SUCCESS;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	0018      	movs	r0, r3
 800edc8:	46bd      	mov	sp, r7
 800edca:	b00c      	add	sp, #48	; 0x30
 800edcc:	bd80      	pop	{r7, pc}

0800edce <LmHandlerSetJoinRx1Delay>:

int32_t LmHandlerSetJoinRx1Delay(uint32_t rxDelay)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b08c      	sub	sp, #48	; 0x30
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 800edd6:	210c      	movs	r1, #12
 800edd8:	187b      	adds	r3, r7, r1
 800edda:	221c      	movs	r2, #28
 800eddc:	701a      	strb	r2, [r3, #0]
  mibReq.Param.JoinAcceptDelay1 = rxDelay;
 800edde:	187b      	adds	r3, r7, r1
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	605a      	str	r2, [r3, #4]
  if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ede4:	187b      	adds	r3, r7, r1
 800ede6:	0018      	movs	r0, r3
 800ede8:	f005 fa32 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800edec:	1e03      	subs	r3, r0, #0
 800edee:	d002      	beq.n	800edf6 <LmHandlerSetJoinRx1Delay+0x28>
  {
    return LORAMAC_HANDLER_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	425b      	negs	r3, r3
 800edf4:	e000      	b.n	800edf8 <LmHandlerSetJoinRx1Delay+0x2a>
  }

  return LORAMAC_HANDLER_SUCCESS;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	0018      	movs	r0, r3
 800edfa:	46bd      	mov	sp, r7
 800edfc:	b00c      	add	sp, #48	; 0x30
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <LmHandlerSetJoinRx2Delay>:

int32_t LmHandlerSetJoinRx2Delay(uint32_t rxDelay)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b08c      	sub	sp, #48	; 0x30
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 800ee08:	210c      	movs	r1, #12
 800ee0a:	187b      	adds	r3, r7, r1
 800ee0c:	221d      	movs	r2, #29
 800ee0e:	701a      	strb	r2, [r3, #0]
  mibReq.Param.JoinAcceptDelay2 = rxDelay;
 800ee10:	187b      	adds	r3, r7, r1
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	605a      	str	r2, [r3, #4]
  if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800ee16:	187b      	adds	r3, r7, r1
 800ee18:	0018      	movs	r0, r3
 800ee1a:	f005 fa19 	bl	8014250 <LoRaMacMibSetRequestConfirm>
 800ee1e:	1e03      	subs	r3, r0, #0
 800ee20:	d002      	beq.n	800ee28 <LmHandlerSetJoinRx2Delay+0x28>
  {
    return LORAMAC_HANDLER_ERROR;
 800ee22:	2301      	movs	r3, #1
 800ee24:	425b      	negs	r3, r3
 800ee26:	e000      	b.n	800ee2a <LmHandlerSetJoinRx2Delay+0x2a>
  }

  return LORAMAC_HANDLER_SUCCESS;
 800ee28:	2300      	movs	r3, #0
}
 800ee2a:	0018      	movs	r0, r3
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	b00c      	add	sp, #48	; 0x30
 800ee30:	bd80      	pop	{r7, pc}

0800ee32 <LmHandlerGetPingPeriodicity>:

int32_t LmHandlerGetPingPeriodicity(uint8_t *pingPeriodicity)
{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b082      	sub	sp, #8
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
  }

  *pingPeriodicity = LmHandlerParams.PingPeriodicity;
  return LORAMAC_HANDLER_SUCCESS;
#else /* LORAMAC_CLASSB_ENABLED == 0 */
  return LORAMAC_HANDLER_ERROR;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	425b      	negs	r3, r3
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ee3e:	0018      	movs	r0, r3
 800ee40:	46bd      	mov	sp, r7
 800ee42:	b002      	add	sp, #8
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <LmHandlerSetPingPeriodicity>:

int32_t LmHandlerSetPingPeriodicity(uint8_t pingPeriodicity)
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b082      	sub	sp, #8
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	0002      	movs	r2, r0
 800ee4e:	1dfb      	adds	r3, r7, #7
 800ee50:	701a      	strb	r2, [r3, #0]
  {
    /* Cannot change Region in running state */
    return LmHandlerPingSlotReq(pingPeriodicity);
  }
#else /* LORAMAC_CLASSB_ENABLED == 0 */
  return LORAMAC_HANDLER_ERROR;
 800ee52:	2301      	movs	r3, #1
 800ee54:	425b      	negs	r3, r3
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ee56:	0018      	movs	r0, r3
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	b002      	add	sp, #8
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <LmHandlerGetBeaconState>:

int32_t LmHandlerGetBeaconState(BeaconState_t *beaconState)
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b082      	sub	sp, #8
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
  }

  *beaconState =  CtxClassB->BeaconCtx.BeaconState;
  return LORAMAC_HANDLER_SUCCESS;
#else /* LORAMAC_CLASSB_ENABLED == 0 */
  return LORAMAC_HANDLER_ERROR;
 800ee66:	2301      	movs	r3, #1
 800ee68:	425b      	negs	r3, r3
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ee6a:	0018      	movs	r0, r3
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	b002      	add	sp, #8
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <LmHandlerDeviceTimeReq>:

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800ee72:	b5b0      	push	{r4, r5, r7, lr}
 800ee74:	b086      	sub	sp, #24
 800ee76:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800ee78:	003b      	movs	r3, r7
 800ee7a:	220a      	movs	r2, #10
 800ee7c:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800ee7e:	2517      	movs	r5, #23
 800ee80:	197c      	adds	r4, r7, r5
 800ee82:	003b      	movs	r3, r7
 800ee84:	0018      	movs	r0, r3
 800ee86:	f005 fd69 	bl	801495c <LoRaMacMlmeRequest>
 800ee8a:	0003      	movs	r3, r0
 800ee8c:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800ee8e:	197b      	adds	r3, r7, r5
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d101      	bne.n	800ee9a <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800ee96:	2300      	movs	r3, #0
 800ee98:	e001      	b.n	800ee9e <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	425b      	negs	r3, r3
  }
}
 800ee9e:	0018      	movs	r0, r3
 800eea0:	46bd      	mov	sp, r7
 800eea2:	b006      	add	sp, #24
 800eea4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800eea8 <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1;
 800eeb0:	4b16      	ldr	r3, [pc, #88]	; (800ef0c <McpsConfirm+0x64>)
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	785a      	ldrb	r2, [r3, #1]
 800eeba:	4b14      	ldr	r3, [pc, #80]	; (800ef0c <McpsConfirm+0x64>)
 800eebc:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	789b      	ldrb	r3, [r3, #2]
 800eec2:	b25a      	sxtb	r2, r3
 800eec4:	4b11      	ldr	r3, [pc, #68]	; (800ef0c <McpsConfirm+0x64>)
 800eec6:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	68da      	ldr	r2, [r3, #12]
 800eecc:	4b0f      	ldr	r3, [pc, #60]	; (800ef0c <McpsConfirm+0x64>)
 800eece:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2203      	movs	r2, #3
 800eed4:	569a      	ldrsb	r2, [r3, r2]
 800eed6:	4b0d      	ldr	r3, [pc, #52]	; (800ef0c <McpsConfirm+0x64>)
 800eed8:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	691b      	ldr	r3, [r3, #16]
 800eede:	b2da      	uxtb	r2, r3
 800eee0:	4b0a      	ldr	r3, [pc, #40]	; (800ef0c <McpsConfirm+0x64>)
 800eee2:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	791b      	ldrb	r3, [r3, #4]
 800eee8:	001a      	movs	r2, r3
 800eeea:	4b08      	ldr	r3, [pc, #32]	; (800ef0c <McpsConfirm+0x64>)
 800eeec:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800eeee:	4b08      	ldr	r3, [pc, #32]	; (800ef10 <McpsConfirm+0x68>)
 800eef0:	691b      	ldr	r3, [r3, #16]
 800eef2:	4a06      	ldr	r2, [pc, #24]	; (800ef0c <McpsConfirm+0x64>)
 800eef4:	0010      	movs	r0, r2
 800eef6:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	0019      	movs	r1, r3
 800eefc:	2000      	movs	r0, #0
 800eefe:	f000 f907 	bl	800f110 <LmHandlerPackagesNotify>
}
 800ef02:	46c0      	nop			; (mov r8, r8)
 800ef04:	46bd      	mov	sp, r7
 800ef06:	b002      	add	sp, #8
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	46c0      	nop			; (mov r8, r8)
 800ef0c:	20000694 	.word	0x20000694
 800ef10:	20000654 	.word	0x20000654

0800ef14 <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800ef14:	b590      	push	{r4, r7, lr}
 800ef16:	b089      	sub	sp, #36	; 0x24
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800ef1c:	4b36      	ldr	r3, [pc, #216]	; (800eff8 <McpsIndication+0xe4>)
 800ef1e:	2201      	movs	r2, #1
 800ef20:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	785a      	ldrb	r2, [r3, #1]
 800ef26:	4b34      	ldr	r3, [pc, #208]	; (800eff8 <McpsIndication+0xe4>)
 800ef28:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800ef2a:	4b33      	ldr	r3, [pc, #204]	; (800eff8 <McpsIndication+0xe4>)
 800ef2c:	785b      	ldrb	r3, [r3, #1]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d15e      	bne.n	800eff0 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7b1b      	ldrb	r3, [r3, #12]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d02c      	beq.n	800ef94 <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	791b      	ldrb	r3, [r3, #4]
 800ef3e:	b25a      	sxtb	r2, r3
 800ef40:	4b2d      	ldr	r3, [pc, #180]	; (800eff8 <McpsIndication+0xe4>)
 800ef42:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	220e      	movs	r2, #14
 800ef48:	5e9b      	ldrsh	r3, [r3, r2]
 800ef4a:	b25a      	sxtb	r2, r3
 800ef4c:	4b2a      	ldr	r3, [pc, #168]	; (800eff8 <McpsIndication+0xe4>)
 800ef4e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2210      	movs	r2, #16
 800ef54:	569a      	ldrsb	r2, [r3, r2]
 800ef56:	4b28      	ldr	r3, [pc, #160]	; (800eff8 <McpsIndication+0xe4>)
 800ef58:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	695a      	ldr	r2, [r3, #20]
 800ef5e:	4b26      	ldr	r3, [pc, #152]	; (800eff8 <McpsIndication+0xe4>)
 800ef60:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7c5b      	ldrb	r3, [r3, #17]
 800ef66:	b25a      	sxtb	r2, r3
 800ef68:	4b23      	ldr	r3, [pc, #140]	; (800eff8 <McpsIndication+0xe4>)
 800ef6a:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	78da      	ldrb	r2, [r3, #3]
 800ef70:	2118      	movs	r1, #24
 800ef72:	187b      	adds	r3, r7, r1
 800ef74:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	7b1a      	ldrb	r2, [r3, #12]
 800ef7a:	187b      	adds	r3, r7, r1
 800ef7c:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	689a      	ldr	r2, [r3, #8]
 800ef82:	0008      	movs	r0, r1
 800ef84:	187b      	adds	r3, r7, r1
 800ef86:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800ef88:	4b1c      	ldr	r3, [pc, #112]	; (800effc <McpsIndication+0xe8>)
 800ef8a:	695b      	ldr	r3, [r3, #20]
 800ef8c:	491a      	ldr	r1, [pc, #104]	; (800eff8 <McpsIndication+0xe4>)
 800ef8e:	183a      	adds	r2, r7, r0
 800ef90:	0010      	movs	r0, r2
 800ef92:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	7f1b      	ldrb	r3, [r3, #28]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d006      	beq.n	800efaa <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800ef9c:	4b17      	ldr	r3, [pc, #92]	; (800effc <McpsIndication+0xe8>)
 800ef9e:	69db      	ldr	r3, [r3, #28]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d002      	beq.n	800efaa <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800efa4:	4b15      	ldr	r3, [pc, #84]	; (800effc <McpsIndication+0xe8>)
 800efa6:	69db      	ldr	r3, [r3, #28]
 800efa8:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	0019      	movs	r1, r3
 800efae:	2001      	movs	r0, #1
 800efb0:	f000 f8ae 	bl	800f110 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800efb4:	2417      	movs	r4, #23
 800efb6:	193b      	adds	r3, r7, r4
 800efb8:	0018      	movs	r0, r3
 800efba:	f7ff fbdb 	bl	800e774 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	795b      	ldrb	r3, [r3, #5]
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d115      	bne.n	800eff2 <McpsIndication+0xde>
 800efc6:	193b      	adds	r3, r7, r4
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d111      	bne.n	800eff2 <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800efce:	210c      	movs	r1, #12
 800efd0:	187b      	adds	r3, r7, r1
 800efd2:	2200      	movs	r2, #0
 800efd4:	701a      	strb	r2, [r3, #0]
 800efd6:	187b      	adds	r3, r7, r1
 800efd8:	2200      	movs	r2, #0
 800efda:	705a      	strb	r2, [r3, #1]
 800efdc:	187b      	adds	r3, r7, r1
 800efde:	2200      	movs	r2, #0
 800efe0:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800efe2:	1878      	adds	r0, r7, r1
 800efe4:	2301      	movs	r3, #1
 800efe6:	2200      	movs	r2, #0
 800efe8:	2100      	movs	r1, #0
 800efea:	f7ff fa11 	bl	800e410 <LmHandlerSend>
 800efee:	e000      	b.n	800eff2 <McpsIndication+0xde>
    return;
 800eff0:	46c0      	nop			; (mov r8, r8)
  }
}
 800eff2:	46bd      	mov	sp, r7
 800eff4:	b009      	add	sp, #36	; 0x24
 800eff6:	bd90      	pop	{r4, r7, pc}
 800eff8:	20000174 	.word	0x20000174
 800effc:	20000654 	.word	0x20000654

0800f000 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800f000:	b590      	push	{r4, r7, lr}
 800f002:	b08d      	sub	sp, #52	; 0x34
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800f008:	4b22      	ldr	r3, [pc, #136]	; (800f094 <MlmeConfirm+0x94>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	785a      	ldrb	r2, [r3, #1]
 800f012:	4b20      	ldr	r3, [pc, #128]	; (800f094 <MlmeConfirm+0x94>)
 800f014:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	0019      	movs	r1, r3
 800f01a:	2002      	movs	r0, #2
 800f01c:	f000 f878 	bl	800f110 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	2b0a      	cmp	r3, #10
 800f026:	d02c      	beq.n	800f082 <MlmeConfirm+0x82>
 800f028:	dc2d      	bgt.n	800f086 <MlmeConfirm+0x86>
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d002      	beq.n	800f034 <MlmeConfirm+0x34>
 800f02e:	2b04      	cmp	r3, #4
 800f030:	d02b      	beq.n	800f08a <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800f032:	e028      	b.n	800f086 <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800f034:	210c      	movs	r1, #12
 800f036:	187b      	adds	r3, r7, r1
 800f038:	2206      	movs	r2, #6
 800f03a:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800f03c:	000c      	movs	r4, r1
 800f03e:	187b      	adds	r3, r7, r1
 800f040:	0018      	movs	r0, r3
 800f042:	f004 ffa7 	bl	8013f94 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f046:	193b      	adds	r3, r7, r4
 800f048:	685a      	ldr	r2, [r3, #4]
 800f04a:	4b13      	ldr	r3, [pc, #76]	; (800f098 <MlmeConfirm+0x98>)
 800f04c:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800f04e:	4b13      	ldr	r3, [pc, #76]	; (800f09c <MlmeConfirm+0x9c>)
 800f050:	0018      	movs	r0, r3
 800f052:	f7ff fbb1 	bl	800e7b8 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	785b      	ldrb	r3, [r3, #1]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d108      	bne.n	800f070 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f05e:	4b0f      	ldr	r3, [pc, #60]	; (800f09c <MlmeConfirm+0x9c>)
 800f060:	2200      	movs	r2, #0
 800f062:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800f064:	4b0e      	ldr	r3, [pc, #56]	; (800f0a0 <MlmeConfirm+0xa0>)
 800f066:	785b      	ldrb	r3, [r3, #1]
 800f068:	0018      	movs	r0, r3
 800f06a:	f7ff faa3 	bl	800e5b4 <LmHandlerRequestClass>
 800f06e:	e002      	b.n	800f076 <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800f070:	4b0a      	ldr	r3, [pc, #40]	; (800f09c <MlmeConfirm+0x9c>)
 800f072:	22ff      	movs	r2, #255	; 0xff
 800f074:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800f076:	4b0b      	ldr	r3, [pc, #44]	; (800f0a4 <MlmeConfirm+0xa4>)
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	4a08      	ldr	r2, [pc, #32]	; (800f09c <MlmeConfirm+0x9c>)
 800f07c:	0010      	movs	r0, r2
 800f07e:	4798      	blx	r3
    break;
 800f080:	e004      	b.n	800f08c <MlmeConfirm+0x8c>
    break;
 800f082:	46c0      	nop			; (mov r8, r8)
 800f084:	e002      	b.n	800f08c <MlmeConfirm+0x8c>
      break;
 800f086:	46c0      	nop			; (mov r8, r8)
 800f088:	e000      	b.n	800f08c <MlmeConfirm+0x8c>
    break;
 800f08a:	46c0      	nop			; (mov r8, r8)
  }
}
 800f08c:	46c0      	nop			; (mov r8, r8)
 800f08e:	46bd      	mov	sp, r7
 800f090:	b00d      	add	sp, #52	; 0x34
 800f092:	bd90      	pop	{r4, r7, pc}
 800f094:	20000694 	.word	0x20000694
 800f098:	2000014c 	.word	0x2000014c
 800f09c:	20000170 	.word	0x20000170
 800f0a0:	2000064c 	.word	0x2000064c
 800f0a4:	20000654 	.word	0x20000654

0800f0a8 <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800f0b0:	4b05      	ldr	r3, [pc, #20]	; (800f0c8 <MlmeIndication+0x20>)
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	785a      	ldrb	r2, [r3, #1]
 800f0ba:	4b03      	ldr	r3, [pc, #12]	; (800f0c8 <MlmeIndication+0x20>)
 800f0bc:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800f0be:	46c0      	nop			; (mov r8, r8)
  }
}
 800f0c0:	46c0      	nop			; (mov r8, r8)
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	b002      	add	sp, #8
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	20000174 	.word	0x20000174

0800f0cc <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	0002      	movs	r2, r0
 800f0d4:	1dfb      	adds	r3, r7, #7
 800f0d6:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800f0d8:	1dfb      	adds	r3, r7, #7
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	2b04      	cmp	r3, #4
 800f0de:	d810      	bhi.n	800f102 <LmHandlerPackageIsInitialized+0x36>
 800f0e0:	1dfb      	adds	r3, r7, #7
 800f0e2:	781a      	ldrb	r2, [r3, #0]
 800f0e4:	4b09      	ldr	r3, [pc, #36]	; (800f10c <LmHandlerPackageIsInitialized+0x40>)
 800f0e6:	0092      	lsls	r2, r2, #2
 800f0e8:	58d3      	ldr	r3, [r2, r3]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d008      	beq.n	800f102 <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800f0f0:	1dfb      	adds	r3, r7, #7
 800f0f2:	781a      	ldrb	r2, [r3, #0]
 800f0f4:	4b05      	ldr	r3, [pc, #20]	; (800f10c <LmHandlerPackageIsInitialized+0x40>)
 800f0f6:	0092      	lsls	r2, r2, #2
 800f0f8:	58d3      	ldr	r3, [r2, r3]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	4798      	blx	r3
 800f0fe:	0003      	movs	r3, r0
 800f100:	e000      	b.n	800f104 <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800f102:	2300      	movs	r3, #0
  }
}
 800f104:	0018      	movs	r0, r3
 800f106:	46bd      	mov	sp, r7
 800f108:	b002      	add	sp, #8
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	20000638 	.word	0x20000638

0800f110 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	0002      	movs	r2, r0
 800f118:	6039      	str	r1, [r7, #0]
 800f11a:	1dfb      	adds	r3, r7, #7
 800f11c:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800f11e:	230f      	movs	r3, #15
 800f120:	18fb      	adds	r3, r7, r3
 800f122:	2200      	movs	r2, #0
 800f124:	701a      	strb	r2, [r3, #0]
 800f126:	e07b      	b.n	800f220 <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800f128:	230f      	movs	r3, #15
 800f12a:	18fb      	adds	r3, r7, r3
 800f12c:	2200      	movs	r2, #0
 800f12e:	569a      	ldrsb	r2, [r3, r2]
 800f130:	4b41      	ldr	r3, [pc, #260]	; (800f238 <LmHandlerPackagesNotify+0x128>)
 800f132:	0092      	lsls	r2, r2, #2
 800f134:	58d3      	ldr	r3, [r2, r3]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d100      	bne.n	800f13c <LmHandlerPackagesNotify+0x2c>
 800f13a:	e05f      	b.n	800f1fc <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800f13c:	1dfb      	adds	r3, r7, #7
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b02      	cmp	r3, #2
 800f142:	d046      	beq.n	800f1d2 <LmHandlerPackagesNotify+0xc2>
 800f144:	dc5c      	bgt.n	800f200 <LmHandlerPackagesNotify+0xf0>
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <LmHandlerPackagesNotify+0x40>
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d015      	beq.n	800f17a <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800f14e:	e057      	b.n	800f200 <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800f150:	210f      	movs	r1, #15
 800f152:	187b      	adds	r3, r7, r1
 800f154:	2200      	movs	r2, #0
 800f156:	569a      	ldrsb	r2, [r3, r2]
 800f158:	4b37      	ldr	r3, [pc, #220]	; (800f238 <LmHandlerPackagesNotify+0x128>)
 800f15a:	0092      	lsls	r2, r2, #2
 800f15c:	58d3      	ldr	r3, [r2, r3]
 800f15e:	695b      	ldr	r3, [r3, #20]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d04f      	beq.n	800f204 <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800f164:	187b      	adds	r3, r7, r1
 800f166:	2200      	movs	r2, #0
 800f168:	569a      	ldrsb	r2, [r3, r2]
 800f16a:	4b33      	ldr	r3, [pc, #204]	; (800f238 <LmHandlerPackagesNotify+0x128>)
 800f16c:	0092      	lsls	r2, r2, #2
 800f16e:	58d3      	ldr	r3, [r2, r3]
 800f170:	695b      	ldr	r3, [r3, #20]
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	0010      	movs	r0, r2
 800f176:	4798      	blx	r3
          break;
 800f178:	e044      	b.n	800f204 <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800f17a:	210f      	movs	r1, #15
 800f17c:	187b      	adds	r3, r7, r1
 800f17e:	2200      	movs	r2, #0
 800f180:	569a      	ldrsb	r2, [r3, r2]
 800f182:	4b2d      	ldr	r3, [pc, #180]	; (800f238 <LmHandlerPackagesNotify+0x128>)
 800f184:	0092      	lsls	r2, r2, #2
 800f186:	58d3      	ldr	r3, [r2, r3]
 800f188:	699b      	ldr	r3, [r3, #24]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d03c      	beq.n	800f208 <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800f18e:	187b      	adds	r3, r7, r1
 800f190:	2200      	movs	r2, #0
 800f192:	569a      	ldrsb	r2, [r3, r2]
 800f194:	4b28      	ldr	r3, [pc, #160]	; (800f238 <LmHandlerPackagesNotify+0x128>)
 800f196:	0092      	lsls	r2, r2, #2
 800f198:	58d3      	ldr	r3, [r2, r3]
 800f19a:	781a      	ldrb	r2, [r3, #0]
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d00a      	beq.n	800f1ba <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800f1a4:	187b      	adds	r3, r7, r1
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	b25b      	sxtb	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d12c      	bne.n	800f208 <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800f1ae:	4b22      	ldr	r3, [pc, #136]	; (800f238 <LmHandlerPackagesNotify+0x128>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	4798      	blx	r3
 800f1b6:	1e03      	subs	r3, r0, #0
 800f1b8:	d026      	beq.n	800f208 <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800f1ba:	230f      	movs	r3, #15
 800f1bc:	18fb      	adds	r3, r7, r3
 800f1be:	2200      	movs	r2, #0
 800f1c0:	569a      	ldrsb	r2, [r3, r2]
 800f1c2:	4b1d      	ldr	r3, [pc, #116]	; (800f238 <LmHandlerPackagesNotify+0x128>)
 800f1c4:	0092      	lsls	r2, r2, #2
 800f1c6:	58d3      	ldr	r3, [r2, r3]
 800f1c8:	699b      	ldr	r3, [r3, #24]
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	0010      	movs	r0, r2
 800f1ce:	4798      	blx	r3
          break;
 800f1d0:	e01a      	b.n	800f208 <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800f1d2:	210f      	movs	r1, #15
 800f1d4:	187b      	adds	r3, r7, r1
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	569a      	ldrsb	r2, [r3, r2]
 800f1da:	4b17      	ldr	r3, [pc, #92]	; (800f238 <LmHandlerPackagesNotify+0x128>)
 800f1dc:	0092      	lsls	r2, r2, #2
 800f1de:	58d3      	ldr	r3, [r2, r3]
 800f1e0:	69db      	ldr	r3, [r3, #28]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d012      	beq.n	800f20c <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800f1e6:	187b      	adds	r3, r7, r1
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	569a      	ldrsb	r2, [r3, r2]
 800f1ec:	4b12      	ldr	r3, [pc, #72]	; (800f238 <LmHandlerPackagesNotify+0x128>)
 800f1ee:	0092      	lsls	r2, r2, #2
 800f1f0:	58d3      	ldr	r3, [r2, r3]
 800f1f2:	69db      	ldr	r3, [r3, #28]
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	0010      	movs	r0, r2
 800f1f8:	4798      	blx	r3
          break;
 800f1fa:	e007      	b.n	800f20c <LmHandlerPackagesNotify+0xfc>
      }
    }
 800f1fc:	46c0      	nop			; (mov r8, r8)
 800f1fe:	e006      	b.n	800f20e <LmHandlerPackagesNotify+0xfe>
          break;
 800f200:	46c0      	nop			; (mov r8, r8)
 800f202:	e004      	b.n	800f20e <LmHandlerPackagesNotify+0xfe>
          break;
 800f204:	46c0      	nop			; (mov r8, r8)
 800f206:	e002      	b.n	800f20e <LmHandlerPackagesNotify+0xfe>
          break;
 800f208:	46c0      	nop			; (mov r8, r8)
 800f20a:	e000      	b.n	800f20e <LmHandlerPackagesNotify+0xfe>
          break;
 800f20c:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800f20e:	210f      	movs	r1, #15
 800f210:	187b      	adds	r3, r7, r1
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	b25b      	sxtb	r3, r3
 800f216:	b2db      	uxtb	r3, r3
 800f218:	3301      	adds	r3, #1
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	187b      	adds	r3, r7, r1
 800f21e:	701a      	strb	r2, [r3, #0]
 800f220:	230f      	movs	r3, #15
 800f222:	18fb      	adds	r3, r7, r3
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	b25b      	sxtb	r3, r3
 800f228:	2b04      	cmp	r3, #4
 800f22a:	dc00      	bgt.n	800f22e <LmHandlerPackagesNotify+0x11e>
 800f22c:	e77c      	b.n	800f128 <LmHandlerPackagesNotify+0x18>
  }
}
 800f22e:	46c0      	nop			; (mov r8, r8)
 800f230:	46c0      	nop			; (mov r8, r8)
 800f232:	46bd      	mov	sp, r7
 800f234:	b004      	add	sp, #16
 800f236:	bd80      	pop	{r7, pc}
 800f238:	20000638 	.word	0x20000638

0800f23c <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af02      	add	r7, sp, #8
 800f242:	0002      	movs	r2, r0
 800f244:	1dfb      	adds	r3, r7, #7
 800f246:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800f248:	1dfb      	adds	r3, r7, #7
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	4a06      	ldr	r2, [pc, #24]	; (800f268 <DisplayClassUpdate+0x2c>)
 800f24e:	5cd3      	ldrb	r3, [r2, r3]
 800f250:	001a      	movs	r2, r3
 800f252:	4b06      	ldr	r3, [pc, #24]	; (800f26c <DisplayClassUpdate+0x30>)
 800f254:	9200      	str	r2, [sp, #0]
 800f256:	2200      	movs	r2, #0
 800f258:	2100      	movs	r1, #0
 800f25a:	2002      	movs	r0, #2
 800f25c:	f00d fa4a 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f260:	46c0      	nop			; (mov r8, r8)
 800f262:	46bd      	mov	sp, r7
 800f264:	b002      	add	sp, #8
 800f266:	bd80      	pop	{r7, pc}
 800f268:	0802122c 	.word	0x0802122c
 800f26c:	08021210 	.word	0x08021210

0800f270 <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800f274:	4b01      	ldr	r3, [pc, #4]	; (800f27c <LmphCompliancePackageFactory+0xc>)
}
 800f276:	0018      	movs	r0, r3
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	2000018c 	.word	0x2000018c

0800f280 <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	1dfb      	adds	r3, r7, #7
 800f28c:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d010      	beq.n	800f2b6 <LmhpComplianceInit+0x36>
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00d      	beq.n	800f2b6 <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800f29a:	4b0c      	ldr	r3, [pc, #48]	; (800f2cc <LmhpComplianceInit+0x4c>)
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800f2a0:	4b0b      	ldr	r3, [pc, #44]	; (800f2d0 <LmhpComplianceInit+0x50>)
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800f2a6:	4b0a      	ldr	r3, [pc, #40]	; (800f2d0 <LmhpComplianceInit+0x50>)
 800f2a8:	1dfa      	adds	r2, r7, #7
 800f2aa:	7812      	ldrb	r2, [r2, #0]
 800f2ac:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800f2ae:	4b08      	ldr	r3, [pc, #32]	; (800f2d0 <LmhpComplianceInit+0x50>)
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	701a      	strb	r2, [r3, #0]
 800f2b4:	e006      	b.n	800f2c4 <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800f2b6:	4b05      	ldr	r3, [pc, #20]	; (800f2cc <LmhpComplianceInit+0x4c>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800f2bc:	4b04      	ldr	r3, [pc, #16]	; (800f2d0 <LmhpComplianceInit+0x50>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	701a      	strb	r2, [r3, #0]
  }
}
 800f2c2:	46c0      	nop			; (mov r8, r8)
 800f2c4:	46c0      	nop			; (mov r8, r8)
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	b004      	add	sp, #16
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	200007cc 	.word	0x200007cc
 800f2d0:	200007b8 	.word	0x200007b8

0800f2d4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800f2d8:	4b02      	ldr	r3, [pc, #8]	; (800f2e4 <LmhpComplianceIsInitialized+0x10>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
}
 800f2dc:	0018      	movs	r0, r3
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	46c0      	nop			; (mov r8, r8)
 800f2e4:	200007b8 	.word	0x200007b8

0800f2e8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800f2ec:	4b06      	ldr	r3, [pc, #24]	; (800f308 <LmhpComplianceIsRunning+0x20>)
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	4053      	eors	r3, r2
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d001      	beq.n	800f2fe <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	e001      	b.n	800f302 <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800f2fe:	4b02      	ldr	r3, [pc, #8]	; (800f308 <LmhpComplianceIsRunning+0x20>)
 800f300:	785b      	ldrb	r3, [r3, #1]
}
 800f302:	0018      	movs	r0, r3
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	200007b8 	.word	0x200007b8

0800f30c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800f314:	4b0e      	ldr	r3, [pc, #56]	; (800f350 <LmhpComplianceOnMcpsConfirm+0x44>)
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	2201      	movs	r2, #1
 800f31a:	4053      	eors	r3, r2
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d112      	bne.n	800f348 <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800f322:	4b0b      	ldr	r3, [pc, #44]	; (800f350 <LmhpComplianceOnMcpsConfirm+0x44>)
 800f324:	785b      	ldrb	r3, [r3, #1]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00f      	beq.n	800f34a <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d10b      	bne.n	800f34a <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800f336:	2b00      	cmp	r3, #0
 800f338:	d007      	beq.n	800f34a <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800f33a:	4b05      	ldr	r3, [pc, #20]	; (800f350 <LmhpComplianceOnMcpsConfirm+0x44>)
 800f33c:	899b      	ldrh	r3, [r3, #12]
 800f33e:	3301      	adds	r3, #1
 800f340:	b29a      	uxth	r2, r3
 800f342:	4b03      	ldr	r3, [pc, #12]	; (800f350 <LmhpComplianceOnMcpsConfirm+0x44>)
 800f344:	819a      	strh	r2, [r3, #12]
 800f346:	e000      	b.n	800f34a <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800f348:	46c0      	nop			; (mov r8, r8)
  }
}
 800f34a:	46bd      	mov	sp, r7
 800f34c:	b002      	add	sp, #8
 800f34e:	bd80      	pop	{r7, pc}
 800f350:	200007b8 	.word	0x200007b8

0800f354 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800f35c:	4b0d      	ldr	r3, [pc, #52]	; (800f394 <LmhpComplianceOnMlmeConfirm+0x40>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	2201      	movs	r2, #1
 800f362:	4053      	eors	r3, r2
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10f      	bne.n	800f38a <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	2b04      	cmp	r3, #4
 800f370:	d10c      	bne.n	800f38c <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800f372:	4b08      	ldr	r3, [pc, #32]	; (800f394 <LmhpComplianceOnMlmeConfirm+0x40>)
 800f374:	2201      	movs	r2, #1
 800f376:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	7a1a      	ldrb	r2, [r3, #8]
 800f37c:	4b05      	ldr	r3, [pc, #20]	; (800f394 <LmhpComplianceOnMlmeConfirm+0x40>)
 800f37e:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	7a5a      	ldrb	r2, [r3, #9]
 800f384:	4b03      	ldr	r3, [pc, #12]	; (800f394 <LmhpComplianceOnMlmeConfirm+0x40>)
 800f386:	741a      	strb	r2, [r3, #16]
 800f388:	e000      	b.n	800f38c <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800f38a:	46c0      	nop			; (mov r8, r8)
  }
}
 800f38c:	46bd      	mov	sp, r7
 800f38e:	b002      	add	sp, #8
 800f390:	bd80      	pop	{r7, pc}
 800f392:	46c0      	nop			; (mov r8, r8)
 800f394:	200007b8 	.word	0x200007b8

0800f398 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800f398:	b5b0      	push	{r4, r5, r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800f39e:	4b32      	ldr	r3, [pc, #200]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	4053      	eors	r3, r2
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d002      	beq.n	800f3b2 <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	425b      	negs	r3, r3
 800f3b0:	e056      	b.n	800f460 <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800f3b2:	4b2d      	ldr	r3, [pc, #180]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3b4:	7b9b      	ldrb	r3, [r3, #14]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d019      	beq.n	800f3ee <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800f3ba:	4b2b      	ldr	r3, [pc, #172]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3bc:	2200      	movs	r2, #0
 800f3be:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800f3c0:	4b29      	ldr	r3, [pc, #164]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3c2:	2203      	movs	r2, #3
 800f3c4:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800f3c6:	4b28      	ldr	r3, [pc, #160]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	2205      	movs	r2, #5
 800f3cc:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800f3ce:	4b26      	ldr	r3, [pc, #152]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	4a24      	ldr	r2, [pc, #144]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3d6:	7bd2      	ldrb	r2, [r2, #15]
 800f3d8:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800f3da:	4b23      	ldr	r3, [pc, #140]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	3302      	adds	r3, #2
 800f3e0:	4a21      	ldr	r2, [pc, #132]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3e2:	7c12      	ldrb	r2, [r2, #16]
 800f3e4:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800f3e6:	4b20      	ldr	r3, [pc, #128]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	709a      	strb	r2, [r3, #2]
 800f3ec:	e01c      	b.n	800f428 <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800f3ee:	4b1e      	ldr	r3, [pc, #120]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3f0:	789b      	ldrb	r3, [r3, #2]
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d005      	beq.n	800f402 <LmhpComplianceTxProcess+0x6a>
 800f3f6:	2b04      	cmp	r3, #4
 800f3f8:	d116      	bne.n	800f428 <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800f3fa:	4b1b      	ldr	r3, [pc, #108]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	709a      	strb	r2, [r3, #2]
        break;
 800f400:	e012      	b.n	800f428 <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800f402:	4b19      	ldr	r3, [pc, #100]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f404:	2202      	movs	r2, #2
 800f406:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800f408:	4b17      	ldr	r3, [pc, #92]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f40a:	899b      	ldrh	r3, [r3, #12]
 800f40c:	0a1b      	lsrs	r3, r3, #8
 800f40e:	b29a      	uxth	r2, r3
 800f410:	4b15      	ldr	r3, [pc, #84]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	b2d2      	uxtb	r2, r2
 800f416:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800f418:	4b13      	ldr	r3, [pc, #76]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f41a:	899a      	ldrh	r2, [r3, #12]
 800f41c:	4b12      	ldr	r3, [pc, #72]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	3301      	adds	r3, #1
 800f422:	b2d2      	uxtb	r2, r2
 800f424:	701a      	strb	r2, [r3, #0]
        break;
 800f426:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800f428:	2508      	movs	r5, #8
 800f42a:	197b      	adds	r3, r7, r5
 800f42c:	22e0      	movs	r2, #224	; 0xe0
 800f42e:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800f430:	4b0d      	ldr	r3, [pc, #52]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f432:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800f434:	197b      	adds	r3, r7, r5
 800f436:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800f438:	4b0b      	ldr	r3, [pc, #44]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f43a:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800f43c:	197b      	adds	r3, r7, r5
 800f43e:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800f440:	2300      	movs	r3, #0
 800f442:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800f444:	4b09      	ldr	r3, [pc, #36]	; (800f46c <LmhpComplianceTxProcess+0xd4>)
 800f446:	0018      	movs	r0, r3
 800f448:	f00e fa5c 	bl	801d904 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800f44c:	4b08      	ldr	r3, [pc, #32]	; (800f470 <LmhpComplianceTxProcess+0xd8>)
 800f44e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f450:	4b05      	ldr	r3, [pc, #20]	; (800f468 <LmhpComplianceTxProcess+0xd0>)
 800f452:	791b      	ldrb	r3, [r3, #4]
 800f454:	0019      	movs	r1, r3
 800f456:	1d3a      	adds	r2, r7, #4
 800f458:	1978      	adds	r0, r7, r5
 800f45a:	2301      	movs	r3, #1
 800f45c:	47a0      	blx	r4
 800f45e:	0003      	movs	r3, r0
                                             true);
}
 800f460:	0018      	movs	r0, r3
 800f462:	46bd      	mov	sp, r7
 800f464:	b004      	add	sp, #16
 800f466:	bdb0      	pop	{r4, r5, r7, pc}
 800f468:	200007b8 	.word	0x200007b8
 800f46c:	200007a0 	.word	0x200007a0
 800f470:	2000018c 	.word	0x2000018c

0800f474 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b0a2      	sub	sp, #136	; 0x88
 800f478:	af02      	add	r7, sp, #8
 800f47a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800f47c:	4be1      	ldr	r3, [pc, #900]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	2201      	movs	r2, #1
 800f482:	4053      	eors	r3, r2
 800f484:	b2db      	uxtb	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d000      	beq.n	800f48c <LmhpComplianceOnMcpsIndication+0x18>
 800f48a:	e1b2      	b.n	800f7f2 <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	7b5b      	ldrb	r3, [r3, #13]
 800f490:	2201      	movs	r2, #1
 800f492:	4053      	eors	r3, r2
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d000      	beq.n	800f49c <LmhpComplianceOnMcpsIndication+0x28>
 800f49a:	e1ac      	b.n	800f7f6 <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800f49c:	4bd9      	ldr	r3, [pc, #868]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f49e:	785b      	ldrb	r3, [r3, #1]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d00c      	beq.n	800f4be <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	7c9b      	ldrb	r3, [r3, #18]
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	4053      	eors	r3, r2
 800f4ac:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d005      	beq.n	800f4be <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800f4b2:	4bd4      	ldr	r3, [pc, #848]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f4b4:	899b      	ldrh	r3, [r3, #12]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	4bd2      	ldr	r3, [pc, #840]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f4bc:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	78db      	ldrb	r3, [r3, #3]
 800f4c2:	2be0      	cmp	r3, #224	; 0xe0
 800f4c4:	d000      	beq.n	800f4c8 <LmhpComplianceOnMcpsIndication+0x54>
 800f4c6:	e198      	b.n	800f7fa <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800f4c8:	4bce      	ldr	r3, [pc, #824]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f4ca:	785b      	ldrb	r3, [r3, #1]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	4053      	eors	r3, r2
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d063      	beq.n	800f59e <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	7b1b      	ldrb	r3, [r3, #12]
 800f4da:	2b04      	cmp	r3, #4
 800f4dc:	d000      	beq.n	800f4e0 <LmhpComplianceOnMcpsIndication+0x6c>
 800f4de:	e1a0      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	689b      	ldr	r3, [r3, #8]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d000      	beq.n	800f4ec <LmhpComplianceOnMcpsIndication+0x78>
 800f4ea:	e19a      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d000      	beq.n	800f4fa <LmhpComplianceOnMcpsIndication+0x86>
 800f4f8:	e193      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	3302      	adds	r3, #2
 800f500:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800f502:	2b01      	cmp	r3, #1
 800f504:	d000      	beq.n	800f508 <LmhpComplianceOnMcpsIndication+0x94>
 800f506:	e18c      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	3303      	adds	r3, #3
 800f50e:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800f510:	2b01      	cmp	r3, #1
 800f512:	d000      	beq.n	800f516 <LmhpComplianceOnMcpsIndication+0xa2>
 800f514:	e185      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800f516:	4bbb      	ldr	r3, [pc, #748]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f518:	2200      	movs	r2, #0
 800f51a:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800f51c:	4bb9      	ldr	r3, [pc, #740]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f51e:	22e0      	movs	r2, #224	; 0xe0
 800f520:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800f522:	4bb8      	ldr	r3, [pc, #736]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f524:	2202      	movs	r2, #2
 800f526:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800f528:	4bb6      	ldr	r3, [pc, #728]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f52a:	2200      	movs	r2, #0
 800f52c:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800f52e:	4bb5      	ldr	r3, [pc, #724]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f530:	2200      	movs	r2, #0
 800f532:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800f534:	4bb3      	ldr	r3, [pc, #716]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f536:	2200      	movs	r2, #0
 800f538:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800f53a:	4bb2      	ldr	r3, [pc, #712]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f53c:	2200      	movs	r2, #0
 800f53e:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800f540:	4bb0      	ldr	r3, [pc, #704]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f542:	2201      	movs	r2, #1
 800f544:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800f546:	4baf      	ldr	r3, [pc, #700]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f548:	2201      	movs	r2, #1
 800f54a:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800f54c:	2108      	movs	r1, #8
 800f54e:	187b      	adds	r3, r7, r1
 800f550:	2204      	movs	r2, #4
 800f552:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800f554:	187b      	adds	r3, r7, r1
 800f556:	2201      	movs	r2, #1
 800f558:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800f55a:	187b      	adds	r3, r7, r1
 800f55c:	0018      	movs	r0, r3
 800f55e:	f004 fe77 	bl	8014250 <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800f562:	2000      	movs	r0, #0
 800f564:	f005 fca0 	bl	8014ea8 <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800f568:	4ba7      	ldr	r3, [pc, #668]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d003      	beq.n	800f57a <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800f572:	4ba5      	ldr	r3, [pc, #660]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800f57a:	4ba4      	ldr	r3, [pc, #656]	; (800f80c <LmhpComplianceOnMcpsIndication+0x398>)
 800f57c:	2201      	movs	r2, #1
 800f57e:	4251      	negs	r1, r2
 800f580:	48a3      	ldr	r0, [pc, #652]	; (800f810 <LmhpComplianceOnMcpsIndication+0x39c>)
 800f582:	2200      	movs	r2, #0
 800f584:	9200      	str	r2, [sp, #0]
 800f586:	2200      	movs	r2, #0
 800f588:	f00e f984 	bl	801d894 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800f58c:	4aa1      	ldr	r2, [pc, #644]	; (800f814 <LmhpComplianceOnMcpsIndication+0x3a0>)
 800f58e:	4ba0      	ldr	r3, [pc, #640]	; (800f810 <LmhpComplianceOnMcpsIndication+0x39c>)
 800f590:	0011      	movs	r1, r2
 800f592:	0018      	movs	r0, r3
 800f594:	f00e faa6 	bl	801dae4 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800f598:	f7ff fefe 	bl	800f398 <LmhpComplianceTxProcess>
 800f59c:	e141      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	781a      	ldrb	r2, [r3, #0]
 800f5a4:	4b97      	ldr	r3, [pc, #604]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f5a6:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800f5a8:	4b96      	ldr	r3, [pc, #600]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f5aa:	789b      	ldrb	r3, [r3, #2]
 800f5ac:	2b0a      	cmp	r3, #10
 800f5ae:	d900      	bls.n	800f5b2 <LmhpComplianceOnMcpsIndication+0x13e>
 800f5b0:	e125      	b.n	800f7fe <LmhpComplianceOnMcpsIndication+0x38a>
 800f5b2:	009a      	lsls	r2, r3, #2
 800f5b4:	4b98      	ldr	r3, [pc, #608]	; (800f818 <LmhpComplianceOnMcpsIndication+0x3a4>)
 800f5b6:	18d3      	adds	r3, r2, r3
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800f5bc:	4b94      	ldr	r3, [pc, #592]	; (800f810 <LmhpComplianceOnMcpsIndication+0x39c>)
 800f5be:	0018      	movs	r0, r3
 800f5c0:	f00e fa18 	bl	801d9f4 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800f5c4:	4b8f      	ldr	r3, [pc, #572]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800f5ca:	4b8e      	ldr	r3, [pc, #568]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800f5d0:	2108      	movs	r1, #8
 800f5d2:	187b      	adds	r3, r7, r1
 800f5d4:	2204      	movs	r2, #4
 800f5d6:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f5d8:	4b8b      	ldr	r3, [pc, #556]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	781a      	ldrb	r2, [r3, #0]
 800f5de:	187b      	adds	r3, r7, r1
 800f5e0:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800f5e2:	187b      	adds	r3, r7, r1
 800f5e4:	0018      	movs	r0, r3
 800f5e6:	f004 fe33 	bl	8014250 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800f5ea:	4b87      	ldr	r3, [pc, #540]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	785b      	ldrb	r3, [r3, #1]
 800f5f0:	0018      	movs	r0, r3
 800f5f2:	f005 fc59 	bl	8014ea8 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800f5f6:	4b84      	ldr	r3, [pc, #528]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d100      	bne.n	800f602 <LmhpComplianceOnMcpsIndication+0x18e>
 800f600:	e10e      	b.n	800f820 <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800f602:	4b81      	ldr	r3, [pc, #516]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	689b      	ldr	r3, [r3, #8]
 800f608:	4798      	blx	r3
        }
      }
      break;
 800f60a:	e109      	b.n	800f820 <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800f60c:	4b7d      	ldr	r3, [pc, #500]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f60e:	2202      	movs	r2, #2
 800f610:	71da      	strb	r2, [r3, #7]
        break;
 800f612:	e106      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800f614:	4b7b      	ldr	r3, [pc, #492]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f616:	2201      	movs	r2, #1
 800f618:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800f61a:	4b7a      	ldr	r3, [pc, #488]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f61c:	2201      	movs	r2, #1
 800f61e:	709a      	strb	r2, [r3, #2]
        break;
 800f620:	e0ff      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800f622:	4b78      	ldr	r3, [pc, #480]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f624:	2200      	movs	r2, #0
 800f626:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800f628:	4b76      	ldr	r3, [pc, #472]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f62a:	2201      	movs	r2, #1
 800f62c:	709a      	strb	r2, [r3, #2]
        break;
 800f62e:	e0f8      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	7b1a      	ldrb	r2, [r3, #12]
 800f634:	4b73      	ldr	r3, [pc, #460]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f636:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800f638:	4b72      	ldr	r3, [pc, #456]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	2204      	movs	r2, #4
 800f63e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800f640:	237f      	movs	r3, #127	; 0x7f
 800f642:	18fb      	adds	r3, r7, r3
 800f644:	2201      	movs	r2, #1
 800f646:	701a      	strb	r2, [r3, #0]
 800f648:	e013      	b.n	800f672 <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	689a      	ldr	r2, [r3, #8]
 800f64e:	207f      	movs	r0, #127	; 0x7f
 800f650:	183b      	adds	r3, r7, r0
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	18d3      	adds	r3, r2, r3
 800f656:	781a      	ldrb	r2, [r3, #0]
 800f658:	4b6a      	ldr	r3, [pc, #424]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f65a:	6899      	ldr	r1, [r3, #8]
 800f65c:	183b      	adds	r3, r7, r0
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	18cb      	adds	r3, r1, r3
 800f662:	3201      	adds	r2, #1
 800f664:	b2d2      	uxtb	r2, r2
 800f666:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800f668:	183b      	adds	r3, r7, r0
 800f66a:	781a      	ldrb	r2, [r3, #0]
 800f66c:	183b      	adds	r3, r7, r0
 800f66e:	3201      	adds	r2, #1
 800f670:	701a      	strb	r2, [r3, #0]
 800f672:	4b64      	ldr	r3, [pc, #400]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f674:	799a      	ldrb	r2, [r3, #6]
 800f676:	4b63      	ldr	r3, [pc, #396]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f678:	79db      	ldrb	r3, [r3, #7]
 800f67a:	1c18      	adds	r0, r3, #0
 800f67c:	1c11      	adds	r1, r2, #0
 800f67e:	b2ca      	uxtb	r2, r1
 800f680:	b2c3      	uxtb	r3, r0
 800f682:	429a      	cmp	r2, r3
 800f684:	d900      	bls.n	800f688 <LmhpComplianceOnMcpsIndication+0x214>
 800f686:	1c01      	adds	r1, r0, #0
 800f688:	b2cb      	uxtb	r3, r1
 800f68a:	227f      	movs	r2, #127	; 0x7f
 800f68c:	18ba      	adds	r2, r7, r2
 800f68e:	7812      	ldrb	r2, [r2, #0]
 800f690:	429a      	cmp	r2, r3
 800f692:	d3da      	bcc.n	800f64a <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800f694:	e0c5      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800f696:	2168      	movs	r1, #104	; 0x68
 800f698:	187b      	adds	r3, r7, r1
 800f69a:	2204      	movs	r2, #4
 800f69c:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800f69e:	187b      	adds	r3, r7, r1
 800f6a0:	0018      	movs	r0, r3
 800f6a2:	f005 f95b 	bl	801495c <LoRaMacMlmeRequest>
      }
      break;
 800f6a6:	e0bc      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800f6a8:	4b59      	ldr	r3, [pc, #356]	; (800f810 <LmhpComplianceOnMcpsIndication+0x39c>)
 800f6aa:	0018      	movs	r0, r3
 800f6ac:	f00e f9a2 	bl	801d9f4 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800f6b0:	4b54      	ldr	r3, [pc, #336]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800f6b6:	4b53      	ldr	r3, [pc, #332]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800f6bc:	2108      	movs	r1, #8
 800f6be:	187b      	adds	r3, r7, r1
 800f6c0:	2204      	movs	r2, #4
 800f6c2:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f6c4:	4b50      	ldr	r3, [pc, #320]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	781a      	ldrb	r2, [r3, #0]
 800f6ca:	187b      	adds	r3, r7, r1
 800f6cc:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800f6ce:	187b      	adds	r3, r7, r1
 800f6d0:	0018      	movs	r0, r3
 800f6d2:	f004 fdbd 	bl	8014250 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800f6d6:	4b4c      	ldr	r3, [pc, #304]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	785b      	ldrb	r3, [r3, #1]
 800f6dc:	0018      	movs	r0, r3
 800f6de:	f005 fbe3 	bl	8014ea8 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800f6e2:	4b49      	ldr	r3, [pc, #292]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	689b      	ldr	r3, [r3, #8]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d003      	beq.n	800f6f4 <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800f6ec:	4b46      	ldr	r3, [pc, #280]	; (800f808 <LmhpComplianceOnMcpsIndication+0x394>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800f6f4:	4b49      	ldr	r3, [pc, #292]	; (800f81c <LmhpComplianceOnMcpsIndication+0x3a8>)
 800f6f6:	6a1b      	ldr	r3, [r3, #32]
 800f6f8:	2002      	movs	r0, #2
 800f6fa:	4798      	blx	r3
      }
      break;
 800f6fc:	e091      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	7b1b      	ldrb	r3, [r3, #12]
 800f702:	2b03      	cmp	r3, #3
 800f704:	d114      	bne.n	800f730 <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800f706:	2154      	movs	r1, #84	; 0x54
 800f708:	187b      	adds	r3, r7, r1
 800f70a:	2205      	movs	r2, #5
 800f70c:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	3301      	adds	r3, #1
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	021b      	lsls	r3, r3, #8
 800f718:	b21a      	sxth	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	689b      	ldr	r3, [r3, #8]
 800f71e:	3302      	adds	r3, #2
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	b21b      	sxth	r3, r3
 800f724:	4313      	orrs	r3, r2
 800f726:	b21b      	sxth	r3, r3
 800f728:	b29a      	uxth	r2, r3
 800f72a:	187b      	adds	r3, r7, r1
 800f72c:	809a      	strh	r2, [r3, #4]
 800f72e:	e031      	b.n	800f794 <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	7b1b      	ldrb	r3, [r3, #12]
 800f734:	2b07      	cmp	r3, #7
 800f736:	d12d      	bne.n	800f794 <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800f738:	2154      	movs	r1, #84	; 0x54
 800f73a:	187b      	adds	r3, r7, r1
 800f73c:	2206      	movs	r2, #6
 800f73e:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	3301      	adds	r3, #1
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	021b      	lsls	r3, r3, #8
 800f74a:	b21a      	sxth	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	689b      	ldr	r3, [r3, #8]
 800f750:	3302      	adds	r3, #2
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	b21b      	sxth	r3, r3
 800f756:	4313      	orrs	r3, r2
 800f758:	b21b      	sxth	r3, r3
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	187b      	adds	r3, r7, r1
 800f75e:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	3303      	adds	r3, #3
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	041a      	lsls	r2, r3, #16
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	3304      	adds	r3, #4
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	021b      	lsls	r3, r3, #8
 800f774:	431a      	orrs	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	3305      	adds	r3, #5
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	4313      	orrs	r3, r2
 800f780:	001a      	movs	r2, r3
 800f782:	2364      	movs	r3, #100	; 0x64
 800f784:	435a      	muls	r2, r3
 800f786:	187b      	adds	r3, r7, r1
 800f788:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	799a      	ldrb	r2, [r3, #6]
 800f790:	187b      	adds	r3, r7, r1
 800f792:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800f794:	2354      	movs	r3, #84	; 0x54
 800f796:	18fb      	adds	r3, r7, r3
 800f798:	0018      	movs	r0, r3
 800f79a:	f005 f8df 	bl	801495c <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800f79e:	4b19      	ldr	r3, [pc, #100]	; (800f804 <LmhpComplianceOnMcpsIndication+0x390>)
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	709a      	strb	r2, [r3, #2]
      }
      break;
 800f7a4:	e03d      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800f7a6:	2140      	movs	r1, #64	; 0x40
 800f7a8:	187b      	adds	r3, r7, r1
 800f7aa:	220a      	movs	r2, #10
 800f7ac:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800f7ae:	187b      	adds	r3, r7, r1
 800f7b0:	0018      	movs	r0, r3
 800f7b2:	f005 f8d3 	bl	801495c <LoRaMacMlmeRequest>
      }
      break;
 800f7b6:	e034      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800f7b8:	2108      	movs	r1, #8
 800f7ba:	187b      	adds	r3, r7, r1
 800f7bc:	2200      	movs	r2, #0
 800f7be:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	781a      	ldrb	r2, [r3, #0]
 800f7c8:	187b      	adds	r3, r7, r1
 800f7ca:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800f7cc:	187b      	adds	r3, r7, r1
 800f7ce:	0018      	movs	r0, r3
 800f7d0:	f004 fd3e 	bl	8014250 <LoRaMacMibSetRequestConfirm>
      }
      break;
 800f7d4:	e025      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800f7d6:	212c      	movs	r1, #44	; 0x2c
 800f7d8:	187b      	adds	r3, r7, r1
 800f7da:	220d      	movs	r2, #13
 800f7dc:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	785a      	ldrb	r2, [r3, #1]
 800f7e4:	187b      	adds	r3, r7, r1
 800f7e6:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800f7e8:	187b      	adds	r3, r7, r1
 800f7ea:	0018      	movs	r0, r3
 800f7ec:	f005 f8b6 	bl	801495c <LoRaMacMlmeRequest>
      }
      break;
 800f7f0:	e017      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800f7f2:	46c0      	nop			; (mov r8, r8)
 800f7f4:	e015      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800f7f6:	46c0      	nop			; (mov r8, r8)
 800f7f8:	e013      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800f7fa:	46c0      	nop			; (mov r8, r8)
 800f7fc:	e011      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800f7fe:	46c0      	nop			; (mov r8, r8)
 800f800:	e00f      	b.n	800f822 <LmhpComplianceOnMcpsIndication+0x3ae>
 800f802:	46c0      	nop			; (mov r8, r8)
 800f804:	200007b8 	.word	0x200007b8
 800f808:	200007cc 	.word	0x200007cc
 800f80c:	0800f833 	.word	0x0800f833
 800f810:	200007a0 	.word	0x200007a0
 800f814:	00004e20 	.word	0x00004e20
 800f818:	08021240 	.word	0x08021240
 800f81c:	2000018c 	.word	0x2000018c
      break;
 800f820:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800f822:	46bd      	mov	sp, r7
 800f824:	b020      	add	sp, #128	; 0x80
 800f826:	bd80      	pop	{r7, pc}

0800f828 <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800f82c:	46c0      	nop			; (mov r8, r8)
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}

0800f832 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	b082      	sub	sp, #8
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800f83a:	f7ff fdad 	bl	800f398 <LmhpComplianceTxProcess>
}
 800f83e:	46c0      	nop			; (mov r8, r8)
 800f840:	46bd      	mov	sp, r7
 800f842:	b002      	add	sp, #8
 800f844:	bd80      	pop	{r7, pc}

0800f846 <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b082      	sub	sp, #8
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	0002      	movs	r2, r0
 800f84e:	1dfb      	adds	r3, r7, #7
 800f850:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f852:	46c0      	nop			; (mov r8, r8)
 800f854:	46bd      	mov	sp, r7
 800f856:	b002      	add	sp, #8
 800f858:	bd80      	pop	{r7, pc}

0800f85a <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800f85e:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f860:	0018      	movs	r0, r3
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}

0800f866 <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800f866:	b580      	push	{r7, lr}
 800f868:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800f86a:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f86c:	0018      	movs	r0, r3
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
	...

0800f874 <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800f874:	b5b0      	push	{r4, r5, r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f87a:	f00e f9eb 	bl	801dc54 <UTIL_TIMER_GetCurrentTime>
 800f87e:	0002      	movs	r2, r0
 800f880:	4b17      	ldr	r3, [pc, #92]	; (800f8e0 <OnRadioTxDone+0x6c>)
 800f882:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f884:	4d17      	ldr	r5, [pc, #92]	; (800f8e4 <OnRadioTxDone+0x70>)
 800f886:	23ce      	movs	r3, #206	; 0xce
 800f888:	009c      	lsls	r4, r3, #2
 800f88a:	003b      	movs	r3, r7
 800f88c:	0018      	movs	r0, r3
 800f88e:	f00d fdc9 	bl	801d424 <SysTimeGet>
 800f892:	003a      	movs	r2, r7
 800f894:	192b      	adds	r3, r5, r4
 800f896:	ca03      	ldmia	r2!, {r0, r1}
 800f898:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f89a:	4b13      	ldr	r3, [pc, #76]	; (800f8e8 <OnRadioTxDone+0x74>)
 800f89c:	781a      	ldrb	r2, [r3, #0]
 800f89e:	2110      	movs	r1, #16
 800f8a0:	430a      	orrs	r2, r1
 800f8a2:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f8a4:	4a0f      	ldr	r2, [pc, #60]	; (800f8e4 <OnRadioTxDone+0x70>)
 800f8a6:	23d2      	movs	r3, #210	; 0xd2
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	58d3      	ldr	r3, [r2, r3]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00c      	beq.n	800f8ca <OnRadioTxDone+0x56>
 800f8b0:	4a0c      	ldr	r2, [pc, #48]	; (800f8e4 <OnRadioTxDone+0x70>)
 800f8b2:	23d2      	movs	r3, #210	; 0xd2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	58d3      	ldr	r3, [r2, r3]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d005      	beq.n	800f8ca <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f8be:	4a09      	ldr	r2, [pc, #36]	; (800f8e4 <OnRadioTxDone+0x70>)
 800f8c0:	23d2      	movs	r3, #210	; 0xd2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	58d3      	ldr	r3, [r2, r3]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f8ca:	4b08      	ldr	r3, [pc, #32]	; (800f8ec <OnRadioTxDone+0x78>)
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	2002      	movs	r0, #2
 800f8d2:	f00c ff0f 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f8d6:	46c0      	nop			; (mov r8, r8)
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	b002      	add	sp, #8
 800f8dc:	bdb0      	pop	{r4, r5, r7, pc}
 800f8de:	46c0      	nop			; (mov r8, r8)
 800f8e0:	20001a74 	.word	0x20001a74
 800f8e4:	200007d0 	.word	0x200007d0
 800f8e8:	20000e00 	.word	0x20000e00
 800f8ec:	0802127c 	.word	0x0802127c

0800f8f0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f8f0:	b5b0      	push	{r4, r5, r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	000c      	movs	r4, r1
 800f8fa:	0010      	movs	r0, r2
 800f8fc:	0019      	movs	r1, r3
 800f8fe:	250a      	movs	r5, #10
 800f900:	197b      	adds	r3, r7, r5
 800f902:	1c22      	adds	r2, r4, #0
 800f904:	801a      	strh	r2, [r3, #0]
 800f906:	2408      	movs	r4, #8
 800f908:	193b      	adds	r3, r7, r4
 800f90a:	1c02      	adds	r2, r0, #0
 800f90c:	801a      	strh	r2, [r3, #0]
 800f90e:	1dfb      	adds	r3, r7, #7
 800f910:	1c0a      	adds	r2, r1, #0
 800f912:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f914:	f00e f99e 	bl	801dc54 <UTIL_TIMER_GetCurrentTime>
 800f918:	0002      	movs	r2, r0
 800f91a:	4b19      	ldr	r3, [pc, #100]	; (800f980 <OnRadioRxDone+0x90>)
 800f91c:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800f91e:	4b18      	ldr	r3, [pc, #96]	; (800f980 <OnRadioRxDone+0x90>)
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800f924:	4b16      	ldr	r3, [pc, #88]	; (800f980 <OnRadioRxDone+0x90>)
 800f926:	197a      	adds	r2, r7, r5
 800f928:	8812      	ldrh	r2, [r2, #0]
 800f92a:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800f92c:	4b14      	ldr	r3, [pc, #80]	; (800f980 <OnRadioRxDone+0x90>)
 800f92e:	193a      	adds	r2, r7, r4
 800f930:	8812      	ldrh	r2, [r2, #0]
 800f932:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800f934:	4b12      	ldr	r3, [pc, #72]	; (800f980 <OnRadioRxDone+0x90>)
 800f936:	1dfa      	adds	r2, r7, #7
 800f938:	7812      	ldrb	r2, [r2, #0]
 800f93a:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f93c:	4b11      	ldr	r3, [pc, #68]	; (800f984 <OnRadioRxDone+0x94>)
 800f93e:	781a      	ldrb	r2, [r3, #0]
 800f940:	2108      	movs	r1, #8
 800f942:	430a      	orrs	r2, r1
 800f944:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f946:	4a10      	ldr	r2, [pc, #64]	; (800f988 <OnRadioRxDone+0x98>)
 800f948:	23d2      	movs	r3, #210	; 0xd2
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	58d3      	ldr	r3, [r2, r3]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00c      	beq.n	800f96c <OnRadioRxDone+0x7c>
 800f952:	4a0d      	ldr	r2, [pc, #52]	; (800f988 <OnRadioRxDone+0x98>)
 800f954:	23d2      	movs	r3, #210	; 0xd2
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	58d3      	ldr	r3, [r2, r3]
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d005      	beq.n	800f96c <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f960:	4a09      	ldr	r2, [pc, #36]	; (800f988 <OnRadioRxDone+0x98>)
 800f962:	23d2      	movs	r3, #210	; 0xd2
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	58d3      	ldr	r3, [r2, r3]
 800f968:	68db      	ldr	r3, [r3, #12]
 800f96a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f96c:	4b07      	ldr	r3, [pc, #28]	; (800f98c <OnRadioRxDone+0x9c>)
 800f96e:	2201      	movs	r2, #1
 800f970:	2100      	movs	r1, #0
 800f972:	2002      	movs	r0, #2
 800f974:	f00c febe 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f978:	46c0      	nop			; (mov r8, r8)
 800f97a:	46bd      	mov	sp, r7
 800f97c:	b004      	add	sp, #16
 800f97e:	bdb0      	pop	{r4, r5, r7, pc}
 800f980:	20001a78 	.word	0x20001a78
 800f984:	20000e00 	.word	0x20000e00
 800f988:	200007d0 	.word	0x200007d0
 800f98c:	0802128c 	.word	0x0802128c

0800f990 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f990:	b580      	push	{r7, lr}
 800f992:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f994:	4b10      	ldr	r3, [pc, #64]	; (800f9d8 <OnRadioTxTimeout+0x48>)
 800f996:	781a      	ldrb	r2, [r3, #0]
 800f998:	2104      	movs	r1, #4
 800f99a:	430a      	orrs	r2, r1
 800f99c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f99e:	4a0f      	ldr	r2, [pc, #60]	; (800f9dc <OnRadioTxTimeout+0x4c>)
 800f9a0:	23d2      	movs	r3, #210	; 0xd2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	58d3      	ldr	r3, [r2, r3]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00c      	beq.n	800f9c4 <OnRadioTxTimeout+0x34>
 800f9aa:	4a0c      	ldr	r2, [pc, #48]	; (800f9dc <OnRadioTxTimeout+0x4c>)
 800f9ac:	23d2      	movs	r3, #210	; 0xd2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	58d3      	ldr	r3, [r2, r3]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d005      	beq.n	800f9c4 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f9b8:	4a08      	ldr	r2, [pc, #32]	; (800f9dc <OnRadioTxTimeout+0x4c>)
 800f9ba:	23d2      	movs	r3, #210	; 0xd2
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	58d3      	ldr	r3, [r2, r3]
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f9c4:	4b06      	ldr	r3, [pc, #24]	; (800f9e0 <OnRadioTxTimeout+0x50>)
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	2100      	movs	r1, #0
 800f9ca:	2002      	movs	r0, #2
 800f9cc:	f00c fe92 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f9d0:	46c0      	nop			; (mov r8, r8)
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	46c0      	nop			; (mov r8, r8)
 800f9d8:	20000e00 	.word	0x20000e00
 800f9dc:	200007d0 	.word	0x200007d0
 800f9e0:	0802129c 	.word	0x0802129c

0800f9e4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f9e8:	4b0d      	ldr	r3, [pc, #52]	; (800fa20 <OnRadioRxError+0x3c>)
 800f9ea:	781a      	ldrb	r2, [r3, #0]
 800f9ec:	2102      	movs	r1, #2
 800f9ee:	430a      	orrs	r2, r1
 800f9f0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f9f2:	4a0c      	ldr	r2, [pc, #48]	; (800fa24 <OnRadioRxError+0x40>)
 800f9f4:	23d2      	movs	r3, #210	; 0xd2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	58d3      	ldr	r3, [r2, r3]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00c      	beq.n	800fa18 <OnRadioRxError+0x34>
 800f9fe:	4a09      	ldr	r2, [pc, #36]	; (800fa24 <OnRadioRxError+0x40>)
 800fa00:	23d2      	movs	r3, #210	; 0xd2
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	58d3      	ldr	r3, [r2, r3]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d005      	beq.n	800fa18 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fa0c:	4a05      	ldr	r2, [pc, #20]	; (800fa24 <OnRadioRxError+0x40>)
 800fa0e:	23d2      	movs	r3, #210	; 0xd2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	58d3      	ldr	r3, [r2, r3]
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	4798      	blx	r3
    }
}
 800fa18:	46c0      	nop			; (mov r8, r8)
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	46c0      	nop			; (mov r8, r8)
 800fa20:	20000e00 	.word	0x20000e00
 800fa24:	200007d0 	.word	0x200007d0

0800fa28 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800fa2c:	4b10      	ldr	r3, [pc, #64]	; (800fa70 <OnRadioRxTimeout+0x48>)
 800fa2e:	781a      	ldrb	r2, [r3, #0]
 800fa30:	2101      	movs	r1, #1
 800fa32:	430a      	orrs	r2, r1
 800fa34:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fa36:	4a0f      	ldr	r2, [pc, #60]	; (800fa74 <OnRadioRxTimeout+0x4c>)
 800fa38:	23d2      	movs	r3, #210	; 0xd2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	58d3      	ldr	r3, [r2, r3]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00c      	beq.n	800fa5c <OnRadioRxTimeout+0x34>
 800fa42:	4a0c      	ldr	r2, [pc, #48]	; (800fa74 <OnRadioRxTimeout+0x4c>)
 800fa44:	23d2      	movs	r3, #210	; 0xd2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	58d3      	ldr	r3, [r2, r3]
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d005      	beq.n	800fa5c <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fa50:	4a08      	ldr	r2, [pc, #32]	; (800fa74 <OnRadioRxTimeout+0x4c>)
 800fa52:	23d2      	movs	r3, #210	; 0xd2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	58d3      	ldr	r3, [r2, r3]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800fa5c:	4b06      	ldr	r3, [pc, #24]	; (800fa78 <OnRadioRxTimeout+0x50>)
 800fa5e:	2201      	movs	r2, #1
 800fa60:	2100      	movs	r1, #0
 800fa62:	2002      	movs	r0, #2
 800fa64:	f00c fe46 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800fa68:	46c0      	nop			; (mov r8, r8)
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	46c0      	nop			; (mov r8, r8)
 800fa70:	20000e00 	.word	0x20000e00
 800fa74:	200007d0 	.word	0x200007d0
 800fa78:	080212ac 	.word	0x080212ac

0800fa7c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fa80:	4b0a      	ldr	r3, [pc, #40]	; (800faac <UpdateRxSlotIdleState+0x30>)
 800fa82:	4a0b      	ldr	r2, [pc, #44]	; (800fab0 <UpdateRxSlotIdleState+0x34>)
 800fa84:	589b      	ldr	r3, [r3, r2]
 800fa86:	227c      	movs	r2, #124	; 0x7c
 800fa88:	5c9b      	ldrb	r3, [r3, r2]
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d005      	beq.n	800fa9a <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800fa8e:	4a07      	ldr	r2, [pc, #28]	; (800faac <UpdateRxSlotIdleState+0x30>)
 800fa90:	2390      	movs	r3, #144	; 0x90
 800fa92:	00db      	lsls	r3, r3, #3
 800fa94:	2106      	movs	r1, #6
 800fa96:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800fa98:	e004      	b.n	800faa4 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fa9a:	4a04      	ldr	r2, [pc, #16]	; (800faac <UpdateRxSlotIdleState+0x30>)
 800fa9c:	2390      	movs	r3, #144	; 0x90
 800fa9e:	00db      	lsls	r3, r3, #3
 800faa0:	2102      	movs	r1, #2
 800faa2:	54d1      	strb	r1, [r2, r3]
}
 800faa4:	46c0      	nop			; (mov r8, r8)
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	46c0      	nop			; (mov r8, r8)
 800faac:	200007d0 	.word	0x200007d0
 800fab0:	00000484 	.word	0x00000484

0800fab4 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800fab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fab6:	b08f      	sub	sp, #60	; 0x3c
 800fab8:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800faba:	4b59      	ldr	r3, [pc, #356]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fabc:	4a59      	ldr	r2, [pc, #356]	; (800fc24 <ProcessRadioTxDone+0x170>)
 800fabe:	589b      	ldr	r3, [r3, r2]
 800fac0:	227c      	movs	r2, #124	; 0x7c
 800fac2:	5c9b      	ldrb	r3, [r3, r2]
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	d002      	beq.n	800face <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800fac8:	4b57      	ldr	r3, [pc, #348]	; (800fc28 <ProcessRadioTxDone+0x174>)
 800faca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800facc:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800face:	4a54      	ldr	r2, [pc, #336]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fad0:	23ec      	movs	r3, #236	; 0xec
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	58d2      	ldr	r2, [r2, r3]
 800fad6:	4b55      	ldr	r3, [pc, #340]	; (800fc2c <ProcessRadioTxDone+0x178>)
 800fad8:	0011      	movs	r1, r2
 800fada:	0018      	movs	r0, r3
 800fadc:	f00e f802 	bl	801dae4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800fae0:	4b52      	ldr	r3, [pc, #328]	; (800fc2c <ProcessRadioTxDone+0x178>)
 800fae2:	0018      	movs	r0, r3
 800fae4:	f00d ff0e 	bl	801d904 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800fae8:	4a4d      	ldr	r2, [pc, #308]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800faea:	23ed      	movs	r3, #237	; 0xed
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	58d2      	ldr	r2, [r2, r3]
 800faf0:	4b4f      	ldr	r3, [pc, #316]	; (800fc30 <ProcessRadioTxDone+0x17c>)
 800faf2:	0011      	movs	r1, r2
 800faf4:	0018      	movs	r0, r3
 800faf6:	f00d fff5 	bl	801dae4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800fafa:	4b4d      	ldr	r3, [pc, #308]	; (800fc30 <ProcessRadioTxDone+0x17c>)
 800fafc:	0018      	movs	r0, r3
 800fafe:	f00d ff01 	bl	801d904 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800fb02:	4b47      	ldr	r3, [pc, #284]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fb04:	4a47      	ldr	r2, [pc, #284]	; (800fc24 <ProcessRadioTxDone+0x170>)
 800fb06:	589b      	ldr	r3, [r3, r2]
 800fb08:	227c      	movs	r2, #124	; 0x7c
 800fb0a:	5c9b      	ldrb	r3, [r3, r2]
 800fb0c:	2b02      	cmp	r3, #2
 800fb0e:	d004      	beq.n	800fb1a <ProcessRadioTxDone+0x66>
 800fb10:	4b43      	ldr	r3, [pc, #268]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fb12:	4a48      	ldr	r2, [pc, #288]	; (800fc34 <ProcessRadioTxDone+0x180>)
 800fb14:	5c9b      	ldrb	r3, [r3, r2]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d021      	beq.n	800fb5e <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800fb1a:	2120      	movs	r1, #32
 800fb1c:	187b      	adds	r3, r7, r1
 800fb1e:	2216      	movs	r2, #22
 800fb20:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fb22:	4b3f      	ldr	r3, [pc, #252]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fb24:	4a3f      	ldr	r2, [pc, #252]	; (800fc24 <ProcessRadioTxDone+0x170>)
 800fb26:	589b      	ldr	r3, [r3, r2]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	187a      	adds	r2, r7, r1
 800fb2c:	0011      	movs	r1, r2
 800fb2e:	0018      	movs	r0, r3
 800fb30:	f007 fccf 	bl	80174d2 <RegionGetPhyParam>
 800fb34:	0003      	movs	r3, r0
 800fb36:	001a      	movs	r2, r3
 800fb38:	211c      	movs	r1, #28
 800fb3a:	187b      	adds	r3, r7, r1
 800fb3c:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800fb3e:	4a38      	ldr	r2, [pc, #224]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fb40:	23ed      	movs	r3, #237	; 0xed
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	58d2      	ldr	r2, [r2, r3]
 800fb46:	187b      	adds	r3, r7, r1
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	18d2      	adds	r2, r2, r3
 800fb4c:	4b3a      	ldr	r3, [pc, #232]	; (800fc38 <ProcessRadioTxDone+0x184>)
 800fb4e:	0011      	movs	r1, r2
 800fb50:	0018      	movs	r0, r3
 800fb52:	f00d ffc7 	bl	801dae4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800fb56:	4b38      	ldr	r3, [pc, #224]	; (800fc38 <ProcessRadioTxDone+0x184>)
 800fb58:	0018      	movs	r0, r3
 800fb5a:	f00d fed3 	bl	801d904 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800fb5e:	4b30      	ldr	r3, [pc, #192]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fb60:	4a30      	ldr	r2, [pc, #192]	; (800fc24 <ProcessRadioTxDone+0x170>)
 800fb62:	589a      	ldr	r2, [r3, r2]
 800fb64:	4b35      	ldr	r3, [pc, #212]	; (800fc3c <ProcessRadioTxDone+0x188>)
 800fb66:	6819      	ldr	r1, [r3, #0]
 800fb68:	23a8      	movs	r3, #168	; 0xa8
 800fb6a:	005b      	lsls	r3, r3, #1
 800fb6c:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800fb6e:	4b2c      	ldr	r3, [pc, #176]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fb70:	4a33      	ldr	r2, [pc, #204]	; (800fc40 <ProcessRadioTxDone+0x18c>)
 800fb72:	5c9a      	ldrb	r2, [r3, r2]
 800fb74:	2408      	movs	r4, #8
 800fb76:	193b      	adds	r3, r7, r4
 800fb78:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800fb7a:	4b30      	ldr	r3, [pc, #192]	; (800fc3c <ProcessRadioTxDone+0x188>)
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	193b      	adds	r3, r7, r4
 800fb80:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800fb82:	2328      	movs	r3, #40	; 0x28
 800fb84:	18fb      	adds	r3, r7, r3
 800fb86:	0018      	movs	r0, r3
 800fb88:	f00d fc8e 	bl	801d4a8 <SysTimeGetMcuTime>
 800fb8c:	4b24      	ldr	r3, [pc, #144]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fb8e:	4a25      	ldr	r2, [pc, #148]	; (800fc24 <ProcessRadioTxDone+0x170>)
 800fb90:	5898      	ldr	r0, [r3, r2]
 800fb92:	193d      	adds	r5, r7, r4
 800fb94:	003e      	movs	r6, r7
 800fb96:	23ac      	movs	r3, #172	; 0xac
 800fb98:	0059      	lsls	r1, r3, #1
 800fb9a:	2328      	movs	r3, #40	; 0x28
 800fb9c:	18fa      	adds	r2, r7, r3
 800fb9e:	2404      	movs	r4, #4
 800fba0:	1843      	adds	r3, r0, r1
 800fba2:	191c      	adds	r4, r3, r4
 800fba4:	466b      	mov	r3, sp
 800fba6:	6824      	ldr	r4, [r4, #0]
 800fba8:	601c      	str	r4, [r3, #0]
 800fbaa:	5843      	ldr	r3, [r0, r1]
 800fbac:	6811      	ldr	r1, [r2, #0]
 800fbae:	6852      	ldr	r2, [r2, #4]
 800fbb0:	0030      	movs	r0, r6
 800fbb2:	f00d fbab 	bl	801d30c <SysTimeSub>
 800fbb6:	003a      	movs	r2, r7
 800fbb8:	002b      	movs	r3, r5
 800fbba:	330c      	adds	r3, #12
 800fbbc:	ca21      	ldmia	r2!, {r0, r5}
 800fbbe:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800fbc0:	4a17      	ldr	r2, [pc, #92]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fbc2:	2383      	movs	r3, #131	; 0x83
 800fbc4:	00db      	lsls	r3, r3, #3
 800fbc6:	58d2      	ldr	r2, [r2, r3]
 800fbc8:	2108      	movs	r1, #8
 800fbca:	187b      	adds	r3, r7, r1
 800fbcc:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800fbce:	187b      	adds	r3, r7, r1
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800fbd4:	4b12      	ldr	r3, [pc, #72]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fbd6:	4a13      	ldr	r2, [pc, #76]	; (800fc24 <ProcessRadioTxDone+0x170>)
 800fbd8:	589a      	ldr	r2, [r3, r2]
 800fbda:	23b2      	movs	r3, #178	; 0xb2
 800fbdc:	005b      	lsls	r3, r3, #1
 800fbde:	5cd3      	ldrb	r3, [r2, r3]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d102      	bne.n	800fbea <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800fbe4:	187b      	adds	r3, r7, r1
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800fbea:	4b0d      	ldr	r3, [pc, #52]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fbec:	4a0d      	ldr	r2, [pc, #52]	; (800fc24 <ProcessRadioTxDone+0x170>)
 800fbee:	589b      	ldr	r3, [r3, r2]
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	2208      	movs	r2, #8
 800fbf4:	18ba      	adds	r2, r7, r2
 800fbf6:	0011      	movs	r1, r2
 800fbf8:	0018      	movs	r0, r3
 800fbfa:	f007 fc92 	bl	8017522 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800fbfe:	4b08      	ldr	r3, [pc, #32]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fc00:	4a0c      	ldr	r2, [pc, #48]	; (800fc34 <ProcessRadioTxDone+0x180>)
 800fc02:	5c9b      	ldrb	r3, [r3, r2]
 800fc04:	2201      	movs	r2, #1
 800fc06:	4053      	eors	r3, r2
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d003      	beq.n	800fc16 <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fc0e:	4b04      	ldr	r3, [pc, #16]	; (800fc20 <ProcessRadioTxDone+0x16c>)
 800fc10:	4a0c      	ldr	r2, [pc, #48]	; (800fc44 <ProcessRadioTxDone+0x190>)
 800fc12:	2100      	movs	r1, #0
 800fc14:	5499      	strb	r1, [r3, r2]
    }
}
 800fc16:	46c0      	nop			; (mov r8, r8)
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	b00d      	add	sp, #52	; 0x34
 800fc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc1e:	46c0      	nop			; (mov r8, r8)
 800fc20:	200007d0 	.word	0x200007d0
 800fc24:	00000484 	.word	0x00000484
 800fc28:	08021740 	.word	0x08021740
 800fc2c:	20000b50 	.word	0x20000b50
 800fc30:	20000b68 	.word	0x20000b68
 800fc34:	00000414 	.word	0x00000414
 800fc38:	20000bc8 	.word	0x20000bc8
 800fc3c:	20001a74 	.word	0x20001a74
 800fc40:	00000415 	.word	0x00000415
 800fc44:	0000043d 	.word	0x0000043d

0800fc48 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800fc4c:	4a11      	ldr	r2, [pc, #68]	; (800fc94 <PrepareRxDoneAbort+0x4c>)
 800fc4e:	23d0      	movs	r3, #208	; 0xd0
 800fc50:	009b      	lsls	r3, r3, #2
 800fc52:	58d3      	ldr	r3, [r2, r3]
 800fc54:	2280      	movs	r2, #128	; 0x80
 800fc56:	431a      	orrs	r2, r3
 800fc58:	0011      	movs	r1, r2
 800fc5a:	4a0e      	ldr	r2, [pc, #56]	; (800fc94 <PrepareRxDoneAbort+0x4c>)
 800fc5c:	23d0      	movs	r3, #208	; 0xd0
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800fc62:	4b0c      	ldr	r3, [pc, #48]	; (800fc94 <PrepareRxDoneAbort+0x4c>)
 800fc64:	4a0c      	ldr	r2, [pc, #48]	; (800fc98 <PrepareRxDoneAbort+0x50>)
 800fc66:	5c9b      	ldrb	r3, [r3, r2]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	f001 f98d 	bl	8010f8c <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800fc72:	4b08      	ldr	r3, [pc, #32]	; (800fc94 <PrepareRxDoneAbort+0x4c>)
 800fc74:	4a09      	ldr	r2, [pc, #36]	; (800fc9c <PrepareRxDoneAbort+0x54>)
 800fc76:	5c99      	ldrb	r1, [r3, r2]
 800fc78:	2002      	movs	r0, #2
 800fc7a:	4301      	orrs	r1, r0
 800fc7c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fc7e:	4b05      	ldr	r3, [pc, #20]	; (800fc94 <PrepareRxDoneAbort+0x4c>)
 800fc80:	4a06      	ldr	r2, [pc, #24]	; (800fc9c <PrepareRxDoneAbort+0x54>)
 800fc82:	5c99      	ldrb	r1, [r3, r2]
 800fc84:	2020      	movs	r0, #32
 800fc86:	4301      	orrs	r1, r0
 800fc88:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800fc8a:	f7ff fef7 	bl	800fa7c <UpdateRxSlotIdleState>
}
 800fc8e:	46c0      	nop			; (mov r8, r8)
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	200007d0 	.word	0x200007d0
 800fc98:	00000414 	.word	0x00000414
 800fc9c:	00000481 	.word	0x00000481

0800fca0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800fca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fca2:	b0a7      	sub	sp, #156	; 0x9c
 800fca4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fca6:	2380      	movs	r3, #128	; 0x80
 800fca8:	18fb      	adds	r3, r7, r3
 800fcaa:	2213      	movs	r2, #19
 800fcac:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800fcae:	4bdf      	ldr	r3, [pc, #892]	; (801002c <ProcessRadioRxDone+0x38c>)
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800fcb4:	267a      	movs	r6, #122	; 0x7a
 800fcb6:	19bb      	adds	r3, r7, r6
 800fcb8:	4adc      	ldr	r2, [pc, #880]	; (801002c <ProcessRadioRxDone+0x38c>)
 800fcba:	8912      	ldrh	r2, [r2, #8]
 800fcbc:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800fcbe:	2478      	movs	r4, #120	; 0x78
 800fcc0:	193b      	adds	r3, r7, r4
 800fcc2:	4ada      	ldr	r2, [pc, #872]	; (801002c <ProcessRadioRxDone+0x38c>)
 800fcc4:	8952      	ldrh	r2, [r2, #10]
 800fcc6:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800fcc8:	2577      	movs	r5, #119	; 0x77
 800fcca:	197b      	adds	r3, r7, r5
 800fccc:	4ad7      	ldr	r2, [pc, #860]	; (801002c <ProcessRadioRxDone+0x38c>)
 800fcce:	7b12      	ldrb	r2, [r2, #12]
 800fcd0:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800fcd2:	2376      	movs	r3, #118	; 0x76
 800fcd4:	18fb      	adds	r3, r7, r3
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800fcde:	4bd4      	ldr	r3, [pc, #848]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fce0:	4ad4      	ldr	r2, [pc, #848]	; (8010034 <ProcessRadioRxDone+0x394>)
 800fce2:	589b      	ldr	r3, [r3, r2]
 800fce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fce6:	2284      	movs	r2, #132	; 0x84
 800fce8:	18ba      	adds	r2, r7, r2
 800fcea:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800fcec:	2383      	movs	r3, #131	; 0x83
 800fcee:	18fb      	adds	r3, r7, r3
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800fcf4:	2382      	movs	r3, #130	; 0x82
 800fcf6:	18fb      	adds	r3, r7, r3
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800fcfc:	4acc      	ldr	r2, [pc, #816]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fcfe:	2388      	movs	r3, #136	; 0x88
 800fd00:	00db      	lsls	r3, r3, #3
 800fd02:	2100      	movs	r1, #0
 800fd04:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800fd06:	4bca      	ldr	r3, [pc, #808]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd08:	193a      	adds	r2, r7, r4
 800fd0a:	49cb      	ldr	r1, [pc, #812]	; (8010038 <ProcessRadioRxDone+0x398>)
 800fd0c:	8812      	ldrh	r2, [r2, #0]
 800fd0e:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800fd10:	4bc7      	ldr	r3, [pc, #796]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd12:	197a      	adds	r2, r7, r5
 800fd14:	49c9      	ldr	r1, [pc, #804]	; (801003c <ProcessRadioRxDone+0x39c>)
 800fd16:	7812      	ldrb	r2, [r2, #0]
 800fd18:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800fd1a:	4ac5      	ldr	r2, [pc, #788]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd1c:	2390      	movs	r3, #144	; 0x90
 800fd1e:	00db      	lsls	r3, r3, #3
 800fd20:	5cd1      	ldrb	r1, [r2, r3]
 800fd22:	4bc3      	ldr	r3, [pc, #780]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd24:	4ac6      	ldr	r2, [pc, #792]	; (8010040 <ProcessRadioRxDone+0x3a0>)
 800fd26:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800fd28:	4bc1      	ldr	r3, [pc, #772]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd2a:	4ac6      	ldr	r2, [pc, #792]	; (8010044 <ProcessRadioRxDone+0x3a4>)
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800fd30:	4bbf      	ldr	r3, [pc, #764]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd32:	4ac5      	ldr	r2, [pc, #788]	; (8010048 <ProcessRadioRxDone+0x3a8>)
 800fd34:	2100      	movs	r1, #0
 800fd36:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800fd38:	4bbd      	ldr	r3, [pc, #756]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd3a:	4ac4      	ldr	r2, [pc, #784]	; (801004c <ProcessRadioRxDone+0x3ac>)
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800fd40:	4bbb      	ldr	r3, [pc, #748]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd42:	4ac3      	ldr	r2, [pc, #780]	; (8010050 <ProcessRadioRxDone+0x3b0>)
 800fd44:	2100      	movs	r1, #0
 800fd46:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800fd48:	4ab9      	ldr	r2, [pc, #740]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd4a:	2385      	movs	r3, #133	; 0x85
 800fd4c:	00db      	lsls	r3, r3, #3
 800fd4e:	2100      	movs	r1, #0
 800fd50:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800fd52:	4bb7      	ldr	r3, [pc, #732]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd54:	4abf      	ldr	r2, [pc, #764]	; (8010054 <ProcessRadioRxDone+0x3b4>)
 800fd56:	2100      	movs	r1, #0
 800fd58:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800fd5a:	4bb5      	ldr	r3, [pc, #724]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd5c:	4abe      	ldr	r2, [pc, #760]	; (8010058 <ProcessRadioRxDone+0x3b8>)
 800fd5e:	2100      	movs	r1, #0
 800fd60:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800fd62:	4ab3      	ldr	r2, [pc, #716]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd64:	2386      	movs	r3, #134	; 0x86
 800fd66:	00db      	lsls	r3, r3, #3
 800fd68:	2100      	movs	r1, #0
 800fd6a:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fd6c:	4bb0      	ldr	r3, [pc, #704]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd6e:	4abb      	ldr	r2, [pc, #748]	; (801005c <ProcessRadioRxDone+0x3bc>)
 800fd70:	2100      	movs	r1, #0
 800fd72:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800fd74:	4bae      	ldr	r3, [pc, #696]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd76:	4aba      	ldr	r2, [pc, #744]	; (8010060 <ProcessRadioRxDone+0x3c0>)
 800fd78:	2100      	movs	r1, #0
 800fd7a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fd7c:	4aac      	ldr	r2, [pc, #688]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fd7e:	2387      	movs	r3, #135	; 0x87
 800fd80:	00db      	lsls	r3, r3, #3
 800fd82:	2100      	movs	r1, #0
 800fd84:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800fd86:	4bb7      	ldr	r3, [pc, #732]	; (8010064 <ProcessRadioRxDone+0x3c4>)
 800fd88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd8a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800fd8c:	4bb6      	ldr	r3, [pc, #728]	; (8010068 <ProcessRadioRxDone+0x3c8>)
 800fd8e:	0018      	movs	r0, r3
 800fd90:	f00d fe30 	bl	801d9f4 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800fd94:	19bb      	adds	r3, r7, r6
 800fd96:	881a      	ldrh	r2, [r3, #0]
 800fd98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd9a:	0011      	movs	r1, r2
 800fd9c:	0018      	movs	r0, r3
 800fd9e:	f005 f9f1 	bl	8015184 <LoRaMacClassBRxBeacon>
 800fda2:	1e03      	subs	r3, r0, #0
 800fda4:	d00c      	beq.n	800fdc0 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800fda6:	4ba2      	ldr	r3, [pc, #648]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fda8:	193a      	adds	r2, r7, r4
 800fdaa:	49b0      	ldr	r1, [pc, #704]	; (801006c <ProcessRadioRxDone+0x3cc>)
 800fdac:	8812      	ldrh	r2, [r2, #0]
 800fdae:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800fdb0:	4a9f      	ldr	r2, [pc, #636]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fdb2:	1979      	adds	r1, r7, r5
 800fdb4:	238f      	movs	r3, #143	; 0x8f
 800fdb6:	00db      	lsls	r3, r3, #3
 800fdb8:	7809      	ldrb	r1, [r1, #0]
 800fdba:	54d1      	strb	r1, [r2, r3]
        return;
 800fdbc:	f000 fc9e 	bl	80106fc <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800fdc0:	4b9b      	ldr	r3, [pc, #620]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fdc2:	4a9c      	ldr	r2, [pc, #624]	; (8010034 <ProcessRadioRxDone+0x394>)
 800fdc4:	589b      	ldr	r3, [r3, r2]
 800fdc6:	227c      	movs	r2, #124	; 0x7c
 800fdc8:	5c9b      	ldrb	r3, [r3, r2]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d11c      	bne.n	800fe08 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fdce:	f005 f9eb 	bl	80151a8 <LoRaMacClassBIsPingExpected>
 800fdd2:	1e03      	subs	r3, r0, #0
 800fdd4:	d00a      	beq.n	800fdec <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	f005 f9a2 	bl	8015120 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fddc:	2000      	movs	r0, #0
 800fdde:	f005 f9c1 	bl	8015164 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fde2:	4b93      	ldr	r3, [pc, #588]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fde4:	4a96      	ldr	r2, [pc, #600]	; (8010040 <ProcessRadioRxDone+0x3a0>)
 800fde6:	2104      	movs	r1, #4
 800fde8:	5499      	strb	r1, [r3, r2]
 800fdea:	e00d      	b.n	800fe08 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fdec:	f005 f9e2 	bl	80151b4 <LoRaMacClassBIsMulticastExpected>
 800fdf0:	1e03      	subs	r3, r0, #0
 800fdf2:	d009      	beq.n	800fe08 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	f005 f99d 	bl	8015134 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	f005 f9ba 	bl	8015174 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fe00:	4b8b      	ldr	r3, [pc, #556]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fe02:	4a8f      	ldr	r2, [pc, #572]	; (8010040 <ProcessRadioRxDone+0x3a0>)
 800fe04:	2105      	movs	r1, #5
 800fe06:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fe08:	2276      	movs	r2, #118	; 0x76
 800fe0a:	18bb      	adds	r3, r7, r2
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	18ba      	adds	r2, r7, r2
 800fe10:	1c59      	adds	r1, r3, #1
 800fe12:	7011      	strb	r1, [r2, #0]
 800fe14:	001a      	movs	r2, r3
 800fe16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe18:	189b      	adds	r3, r3, r2
 800fe1a:	781a      	ldrb	r2, [r3, #0]
 800fe1c:	2174      	movs	r1, #116	; 0x74
 800fe1e:	187b      	adds	r3, r7, r1
 800fe20:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800fe22:	187b      	adds	r3, r7, r1
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	061b      	lsls	r3, r3, #24
 800fe28:	0f5b      	lsrs	r3, r3, #29
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b07      	cmp	r3, #7
 800fe2e:	d101      	bne.n	800fe34 <ProcessRadioRxDone+0x194>
 800fe30:	f000 fc0c 	bl	801064c <ProcessRadioRxDone+0x9ac>
 800fe34:	dd01      	ble.n	800fe3a <ProcessRadioRxDone+0x19a>
 800fe36:	f000 fc38 	bl	80106aa <ProcessRadioRxDone+0xa0a>
 800fe3a:	2b05      	cmp	r3, #5
 800fe3c:	d100      	bne.n	800fe40 <ProcessRadioRxDone+0x1a0>
 800fe3e:	e119      	b.n	8010074 <ProcessRadioRxDone+0x3d4>
 800fe40:	dd01      	ble.n	800fe46 <ProcessRadioRxDone+0x1a6>
 800fe42:	f000 fc32 	bl	80106aa <ProcessRadioRxDone+0xa0a>
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d004      	beq.n	800fe54 <ProcessRadioRxDone+0x1b4>
 800fe4a:	2b03      	cmp	r3, #3
 800fe4c:	d100      	bne.n	800fe50 <ProcessRadioRxDone+0x1b0>
 800fe4e:	e115      	b.n	801007c <ProcessRadioRxDone+0x3dc>
 800fe50:	f000 fc2b 	bl	80106aa <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800fe54:	237a      	movs	r3, #122	; 0x7a
 800fe56:	18fb      	adds	r3, r7, r3
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	2b10      	cmp	r3, #16
 800fe5c:	d807      	bhi.n	800fe6e <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe5e:	4b74      	ldr	r3, [pc, #464]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fe60:	4a83      	ldr	r2, [pc, #524]	; (8010070 <ProcessRadioRxDone+0x3d0>)
 800fe62:	2101      	movs	r1, #1
 800fe64:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fe66:	f7ff feef 	bl	800fc48 <PrepareRxDoneAbort>
                return;
 800fe6a:	f000 fc47 	bl	80106fc <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800fe6e:	2108      	movs	r1, #8
 800fe70:	187b      	adds	r3, r7, r1
 800fe72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe74:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800fe76:	237a      	movs	r3, #122	; 0x7a
 800fe78:	18fb      	adds	r3, r7, r3
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	b2da      	uxtb	r2, r3
 800fe7e:	187b      	adds	r3, r7, r1
 800fe80:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800fe82:	4b6b      	ldr	r3, [pc, #428]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fe84:	4a6b      	ldr	r2, [pc, #428]	; (8010034 <ProcessRadioRxDone+0x394>)
 800fe86:	589a      	ldr	r2, [r3, r2]
 800fe88:	23b2      	movs	r3, #178	; 0xb2
 800fe8a:	005b      	lsls	r3, r3, #1
 800fe8c:	5cd3      	ldrb	r3, [r2, r3]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d007      	beq.n	800fea2 <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe92:	4b67      	ldr	r3, [pc, #412]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fe94:	4a76      	ldr	r2, [pc, #472]	; (8010070 <ProcessRadioRxDone+0x3d0>)
 800fe96:	2101      	movs	r1, #1
 800fe98:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fe9a:	f7ff fed5 	bl	800fc48 <PrepareRxDoneAbort>
                return;
 800fe9e:	f000 fc2d 	bl	80106fc <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800fea2:	f7fe f86f 	bl	800df84 <SecureElementGetJoinEui>
 800fea6:	0001      	movs	r1, r0
 800fea8:	2680      	movs	r6, #128	; 0x80
 800feaa:	19bc      	adds	r4, r7, r6
 800feac:	2508      	movs	r5, #8
 800feae:	197b      	adds	r3, r7, r5
 800feb0:	001a      	movs	r2, r3
 800feb2:	20ff      	movs	r0, #255	; 0xff
 800feb4:	f006 fcba 	bl	801682c <LoRaMacCryptoHandleJoinAccept>
 800feb8:	0003      	movs	r3, r0
 800feba:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800febc:	19bb      	adds	r3, r7, r6
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d000      	beq.n	800fec6 <ProcessRadioRxDone+0x226>
 800fec4:	e0a7      	b.n	8010016 <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fec6:	002c      	movs	r4, r5
 800fec8:	193b      	adds	r3, r7, r4
 800feca:	7a59      	ldrb	r1, [r3, #9]
 800fecc:	4b58      	ldr	r3, [pc, #352]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fece:	4a59      	ldr	r2, [pc, #356]	; (8010034 <ProcessRadioRxDone+0x394>)
 800fed0:	589b      	ldr	r3, [r3, r2]
 800fed2:	000a      	movs	r2, r1
 800fed4:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800fed6:	4b56      	ldr	r3, [pc, #344]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fed8:	4a56      	ldr	r2, [pc, #344]	; (8010034 <ProcessRadioRxDone+0x394>)
 800feda:	589b      	ldr	r3, [r3, r2]
 800fedc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800fede:	193b      	adds	r3, r7, r4
 800fee0:	7a9b      	ldrb	r3, [r3, #10]
 800fee2:	021a      	lsls	r2, r3, #8
 800fee4:	4b52      	ldr	r3, [pc, #328]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fee6:	4853      	ldr	r0, [pc, #332]	; (8010034 <ProcessRadioRxDone+0x394>)
 800fee8:	581b      	ldr	r3, [r3, r0]
 800feea:	430a      	orrs	r2, r1
 800feec:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800feee:	4b50      	ldr	r3, [pc, #320]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fef0:	4a50      	ldr	r2, [pc, #320]	; (8010034 <ProcessRadioRxDone+0x394>)
 800fef2:	589b      	ldr	r3, [r3, r2]
 800fef4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800fef6:	193b      	adds	r3, r7, r4
 800fef8:	7adb      	ldrb	r3, [r3, #11]
 800fefa:	041a      	lsls	r2, r3, #16
 800fefc:	4b4c      	ldr	r3, [pc, #304]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fefe:	484d      	ldr	r0, [pc, #308]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff00:	581b      	ldr	r3, [r3, r0]
 800ff02:	430a      	orrs	r2, r1
 800ff04:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800ff06:	4b4a      	ldr	r3, [pc, #296]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff08:	4a4a      	ldr	r2, [pc, #296]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff0a:	589b      	ldr	r3, [r3, r2]
 800ff0c:	0020      	movs	r0, r4
 800ff0e:	183a      	adds	r2, r7, r0
 800ff10:	68d2      	ldr	r2, [r2, #12]
 800ff12:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ff14:	183b      	adds	r3, r7, r0
 800ff16:	7c1b      	ldrb	r3, [r3, #16]
 800ff18:	065b      	lsls	r3, r3, #25
 800ff1a:	0f5b      	lsrs	r3, r3, #29
 800ff1c:	b2d9      	uxtb	r1, r3
 800ff1e:	4b44      	ldr	r3, [pc, #272]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff20:	4a44      	ldr	r2, [pc, #272]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff22:	589b      	ldr	r3, [r3, r2]
 800ff24:	22a5      	movs	r2, #165	; 0xa5
 800ff26:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ff28:	183b      	adds	r3, r7, r0
 800ff2a:	7c1b      	ldrb	r3, [r3, #16]
 800ff2c:	071b      	lsls	r3, r3, #28
 800ff2e:	0f1b      	lsrs	r3, r3, #28
 800ff30:	b2d9      	uxtb	r1, r3
 800ff32:	4b3f      	ldr	r3, [pc, #252]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff34:	4a3f      	ldr	r2, [pc, #252]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff36:	589b      	ldr	r3, [r3, r2]
 800ff38:	22ac      	movs	r2, #172	; 0xac
 800ff3a:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ff3c:	183b      	adds	r3, r7, r0
 800ff3e:	7c1b      	ldrb	r3, [r3, #16]
 800ff40:	071b      	lsls	r3, r3, #28
 800ff42:	0f1b      	lsrs	r3, r3, #28
 800ff44:	b2d9      	uxtb	r1, r3
 800ff46:	4b3a      	ldr	r3, [pc, #232]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff48:	4a3a      	ldr	r2, [pc, #232]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff4a:	589b      	ldr	r3, [r3, r2]
 800ff4c:	22b4      	movs	r2, #180	; 0xb4
 800ff4e:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800ff50:	183b      	adds	r3, r7, r0
 800ff52:	7c59      	ldrb	r1, [r3, #17]
 800ff54:	4b36      	ldr	r3, [pc, #216]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff56:	4a37      	ldr	r2, [pc, #220]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff58:	589b      	ldr	r3, [r3, r2]
 800ff5a:	2294      	movs	r2, #148	; 0x94
 800ff5c:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800ff5e:	4b34      	ldr	r3, [pc, #208]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff60:	4a34      	ldr	r2, [pc, #208]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff62:	589b      	ldr	r3, [r3, r2]
 800ff64:	2294      	movs	r2, #148	; 0x94
 800ff66:	589b      	ldr	r3, [r3, r2]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d105      	bne.n	800ff78 <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800ff6c:	4b30      	ldr	r3, [pc, #192]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff6e:	4a31      	ldr	r2, [pc, #196]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff70:	589b      	ldr	r3, [r3, r2]
 800ff72:	2294      	movs	r2, #148	; 0x94
 800ff74:	2101      	movs	r1, #1
 800ff76:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800ff78:	4b2d      	ldr	r3, [pc, #180]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff7a:	4a2e      	ldr	r2, [pc, #184]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff7c:	589b      	ldr	r3, [r3, r2]
 800ff7e:	2294      	movs	r2, #148	; 0x94
 800ff80:	589a      	ldr	r2, [r3, r2]
 800ff82:	4b2b      	ldr	r3, [pc, #172]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff84:	492b      	ldr	r1, [pc, #172]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff86:	5859      	ldr	r1, [r3, r1]
 800ff88:	0013      	movs	r3, r2
 800ff8a:	015b      	lsls	r3, r3, #5
 800ff8c:	1a9b      	subs	r3, r3, r2
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	189b      	adds	r3, r3, r2
 800ff92:	00db      	lsls	r3, r3, #3
 800ff94:	001a      	movs	r2, r3
 800ff96:	2394      	movs	r3, #148	; 0x94
 800ff98:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800ff9a:	4b25      	ldr	r3, [pc, #148]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ff9c:	4a25      	ldr	r2, [pc, #148]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ff9e:	589b      	ldr	r3, [r3, r2]
 800ffa0:	2294      	movs	r2, #148	; 0x94
 800ffa2:	589b      	ldr	r3, [r3, r2]
 800ffa4:	4a22      	ldr	r2, [pc, #136]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ffa6:	4923      	ldr	r1, [pc, #140]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ffa8:	5852      	ldr	r2, [r2, r1]
 800ffaa:	21fa      	movs	r1, #250	; 0xfa
 800ffac:	0089      	lsls	r1, r1, #2
 800ffae:	468c      	mov	ip, r1
 800ffb0:	4463      	add	r3, ip
 800ffb2:	2198      	movs	r1, #152	; 0x98
 800ffb4:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800ffb6:	4b1e      	ldr	r3, [pc, #120]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ffb8:	4a1e      	ldr	r2, [pc, #120]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ffba:	589a      	ldr	r2, [r3, r2]
 800ffbc:	23b1      	movs	r3, #177	; 0xb1
 800ffbe:	005b      	lsls	r3, r3, #1
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ffc4:	216c      	movs	r1, #108	; 0x6c
 800ffc6:	187b      	adds	r3, r7, r1
 800ffc8:	2208      	movs	r2, #8
 800ffca:	18ba      	adds	r2, r7, r2
 800ffcc:	3212      	adds	r2, #18
 800ffce:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ffd0:	237a      	movs	r3, #122	; 0x7a
 800ffd2:	18fb      	adds	r3, r7, r3
 800ffd4:	881b      	ldrh	r3, [r3, #0]
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	3b11      	subs	r3, #17
 800ffda:	b2da      	uxtb	r2, r3
 800ffdc:	187b      	adds	r3, r7, r1
 800ffde:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800ffe0:	4b13      	ldr	r3, [pc, #76]	; (8010030 <ProcessRadioRxDone+0x390>)
 800ffe2:	4a14      	ldr	r2, [pc, #80]	; (8010034 <ProcessRadioRxDone+0x394>)
 800ffe4:	589b      	ldr	r3, [r3, r2]
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	187a      	adds	r2, r7, r1
 800ffea:	0011      	movs	r1, r2
 800ffec:	0018      	movs	r0, r3
 800ffee:	f007 faf4 	bl	80175da <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fff2:	4b0f      	ldr	r3, [pc, #60]	; (8010030 <ProcessRadioRxDone+0x390>)
 800fff4:	4a0f      	ldr	r2, [pc, #60]	; (8010034 <ProcessRadioRxDone+0x394>)
 800fff6:	589a      	ldr	r2, [r3, r2]
 800fff8:	23b2      	movs	r3, #178	; 0xb2
 800fffa:	005b      	lsls	r3, r3, #1
 800fffc:	2102      	movs	r1, #2
 800fffe:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010000:	2001      	movs	r0, #1
 8010002:	f005 fe49 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 8010006:	1e03      	subs	r3, r0, #0
 8010008:	d100      	bne.n	801000c <ProcessRadioRxDone+0x36c>
 801000a:	e355      	b.n	80106b8 <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 801000c:	2101      	movs	r1, #1
 801000e:	2000      	movs	r0, #0
 8010010:	f005 fda6 	bl	8015b60 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 8010014:	e350      	b.n	80106b8 <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010016:	2001      	movs	r0, #1
 8010018:	f005 fe3e 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 801001c:	1e03      	subs	r3, r0, #0
 801001e:	d100      	bne.n	8010022 <ProcessRadioRxDone+0x382>
 8010020:	e34a      	b.n	80106b8 <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010022:	2101      	movs	r1, #1
 8010024:	2007      	movs	r0, #7
 8010026:	f005 fd9b 	bl	8015b60 <LoRaMacConfirmQueueSetStatus>
            break;
 801002a:	e345      	b.n	80106b8 <ProcessRadioRxDone+0xa18>
 801002c:	20001a78 	.word	0x20001a78
 8010030:	200007d0 	.word	0x200007d0
 8010034:	00000484 	.word	0x00000484
 8010038:	0000042a 	.word	0x0000042a
 801003c:	0000042c 	.word	0x0000042c
 8010040:	0000042d 	.word	0x0000042d
 8010044:	0000041f 	.word	0x0000041f
 8010048:	0000041e 	.word	0x0000041e
 801004c:	00000421 	.word	0x00000421
 8010050:	00000424 	.word	0x00000424
 8010054:	00000429 	.word	0x00000429
 8010058:	0000042e 	.word	0x0000042e
 801005c:	0000041c 	.word	0x0000041c
 8010060:	00000434 	.word	0x00000434
 8010064:	08021740 	.word	0x08021740
 8010068:	20000b68 	.word	0x20000b68
 801006c:	00000476 	.word	0x00000476
 8010070:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010074:	4bd5      	ldr	r3, [pc, #852]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010076:	4ad6      	ldr	r2, [pc, #856]	; (80103d0 <ProcessRadioRxDone+0x730>)
 8010078:	2101      	movs	r1, #1
 801007a:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801007c:	4bd3      	ldr	r3, [pc, #844]	; (80103cc <ProcessRadioRxDone+0x72c>)
 801007e:	4ad5      	ldr	r2, [pc, #852]	; (80103d4 <ProcessRadioRxDone+0x734>)
 8010080:	589b      	ldr	r3, [r3, r2]
 8010082:	22b9      	movs	r2, #185	; 0xb9
 8010084:	5c9a      	ldrb	r2, [r3, r2]
 8010086:	2164      	movs	r1, #100	; 0x64
 8010088:	187b      	adds	r3, r7, r1
 801008a:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 801008c:	4acf      	ldr	r2, [pc, #828]	; (80103cc <ProcessRadioRxDone+0x72c>)
 801008e:	2384      	movs	r3, #132	; 0x84
 8010090:	00db      	lsls	r3, r3, #3
 8010092:	5cd3      	ldrb	r3, [r2, r3]
 8010094:	b25a      	sxtb	r2, r3
 8010096:	187b      	adds	r3, r7, r1
 8010098:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 801009a:	187b      	adds	r3, r7, r1
 801009c:	220d      	movs	r2, #13
 801009e:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 80100a0:	4bca      	ldr	r3, [pc, #808]	; (80103cc <ProcessRadioRxDone+0x72c>)
 80100a2:	4acc      	ldr	r2, [pc, #816]	; (80103d4 <ProcessRadioRxDone+0x734>)
 80100a4:	589b      	ldr	r3, [r3, r2]
 80100a6:	22ca      	movs	r2, #202	; 0xca
 80100a8:	5c9b      	ldrb	r3, [r3, r2]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d002      	beq.n	80100b4 <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80100ae:	187b      	adds	r3, r7, r1
 80100b0:	220e      	movs	r2, #14
 80100b2:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80100b4:	4bc5      	ldr	r3, [pc, #788]	; (80103cc <ProcessRadioRxDone+0x72c>)
 80100b6:	4ac7      	ldr	r2, [pc, #796]	; (80103d4 <ProcessRadioRxDone+0x734>)
 80100b8:	589b      	ldr	r3, [r3, r2]
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	2264      	movs	r2, #100	; 0x64
 80100be:	18ba      	adds	r2, r7, r2
 80100c0:	0011      	movs	r1, r2
 80100c2:	0018      	movs	r0, r3
 80100c4:	f007 fa05 	bl	80174d2 <RegionGetPhyParam>
 80100c8:	0003      	movs	r3, r0
 80100ca:	001a      	movs	r2, r3
 80100cc:	2360      	movs	r3, #96	; 0x60
 80100ce:	18fb      	adds	r3, r7, r3
 80100d0:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80100d2:	237a      	movs	r3, #122	; 0x7a
 80100d4:	18fb      	adds	r3, r7, r3
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	3b0d      	subs	r3, #13
 80100da:	b29b      	uxth	r3, r3
 80100dc:	b21b      	sxth	r3, r3
 80100de:	1c1a      	adds	r2, r3, #0
 80100e0:	b213      	sxth	r3, r2
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	da01      	bge.n	80100ea <ProcessRadioRxDone+0x44a>
 80100e6:	2300      	movs	r3, #0
 80100e8:	1c1a      	adds	r2, r3, #0
 80100ea:	b212      	sxth	r2, r2
 80100ec:	2360      	movs	r3, #96	; 0x60
 80100ee:	18fb      	adds	r3, r7, r3
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	b21b      	sxth	r3, r3
 80100f4:	429a      	cmp	r2, r3
 80100f6:	dc04      	bgt.n	8010102 <ProcessRadioRxDone+0x462>
 80100f8:	237a      	movs	r3, #122	; 0x7a
 80100fa:	18fb      	adds	r3, r7, r3
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	2b0b      	cmp	r3, #11
 8010100:	d806      	bhi.n	8010110 <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010102:	4bb2      	ldr	r3, [pc, #712]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010104:	4ab4      	ldr	r2, [pc, #720]	; (80103d8 <ProcessRadioRxDone+0x738>)
 8010106:	2101      	movs	r1, #1
 8010108:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 801010a:	f7ff fd9d 	bl	800fc48 <PrepareRxDoneAbort>
                return;
 801010e:	e2f5      	b.n	80106fc <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 8010110:	2130      	movs	r1, #48	; 0x30
 8010112:	187b      	adds	r3, r7, r1
 8010114:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010116:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 8010118:	237a      	movs	r3, #122	; 0x7a
 801011a:	18fb      	adds	r3, r7, r3
 801011c:	881b      	ldrh	r3, [r3, #0]
 801011e:	b2da      	uxtb	r2, r3
 8010120:	187b      	adds	r3, r7, r1
 8010122:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8010124:	187b      	adds	r3, r7, r1
 8010126:	4aad      	ldr	r2, [pc, #692]	; (80103dc <ProcessRadioRxDone+0x73c>)
 8010128:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 801012a:	0008      	movs	r0, r1
 801012c:	187b      	adds	r3, r7, r1
 801012e:	2228      	movs	r2, #40	; 0x28
 8010130:	21ff      	movs	r1, #255	; 0xff
 8010132:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8010134:	183b      	adds	r3, r7, r0
 8010136:	0018      	movs	r0, r3
 8010138:	f006 fee4 	bl	8016f04 <LoRaMacParserData>
 801013c:	1e03      	subs	r3, r0, #0
 801013e:	d006      	beq.n	801014e <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010140:	4ba2      	ldr	r3, [pc, #648]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010142:	4aa5      	ldr	r2, [pc, #660]	; (80103d8 <ProcessRadioRxDone+0x738>)
 8010144:	2101      	movs	r1, #1
 8010146:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8010148:	f7ff fd7e 	bl	800fc48 <PrepareRxDoneAbort>
                return;
 801014c:	e2d6      	b.n	80106fc <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 801014e:	2030      	movs	r0, #48	; 0x30
 8010150:	183b      	adds	r3, r7, r0
 8010152:	689a      	ldr	r2, [r3, #8]
 8010154:	4b9d      	ldr	r3, [pc, #628]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010156:	49a2      	ldr	r1, [pc, #648]	; (80103e0 <ProcessRadioRxDone+0x740>)
 8010158:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 801015a:	1cba      	adds	r2, r7, #2
 801015c:	183b      	adds	r3, r7, r0
 801015e:	0011      	movs	r1, r2
 8010160:	0018      	movs	r0, r3
 8010162:	f003 f861 	bl	8013228 <DetermineFrameType>
 8010166:	1e03      	subs	r3, r0, #0
 8010168:	d006      	beq.n	8010178 <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801016a:	4b98      	ldr	r3, [pc, #608]	; (80103cc <ProcessRadioRxDone+0x72c>)
 801016c:	4a9a      	ldr	r2, [pc, #616]	; (80103d8 <ProcessRadioRxDone+0x738>)
 801016e:	2101      	movs	r1, #1
 8010170:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8010172:	f7ff fd69 	bl	800fc48 <PrepareRxDoneAbort>
                return;
 8010176:	e2c1      	b.n	80106fc <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 8010178:	2383      	movs	r3, #131	; 0x83
 801017a:	18fb      	adds	r3, r7, r3
 801017c:	2200      	movs	r2, #0
 801017e:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 8010180:	2300      	movs	r3, #0
 8010182:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010184:	2381      	movs	r3, #129	; 0x81
 8010186:	18fb      	adds	r3, r7, r3
 8010188:	2200      	movs	r2, #0
 801018a:	701a      	strb	r2, [r3, #0]
 801018c:	e05b      	b.n	8010246 <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801018e:	4b8f      	ldr	r3, [pc, #572]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010190:	4a90      	ldr	r2, [pc, #576]	; (80103d4 <ProcessRadioRxDone+0x734>)
 8010192:	589a      	ldr	r2, [r3, r2]
 8010194:	2481      	movs	r4, #129	; 0x81
 8010196:	193b      	adds	r3, r7, r4
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	212c      	movs	r1, #44	; 0x2c
 801019c:	434b      	muls	r3, r1
 801019e:	18d3      	adds	r3, r2, r3
 80101a0:	3354      	adds	r3, #84	; 0x54
 80101a2:	681a      	ldr	r2, [r3, #0]
 80101a4:	2330      	movs	r3, #48	; 0x30
 80101a6:	18fb      	adds	r3, r7, r3
 80101a8:	689b      	ldr	r3, [r3, #8]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d145      	bne.n	801023a <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80101ae:	4b87      	ldr	r3, [pc, #540]	; (80103cc <ProcessRadioRxDone+0x72c>)
 80101b0:	4a88      	ldr	r2, [pc, #544]	; (80103d4 <ProcessRadioRxDone+0x734>)
 80101b2:	589a      	ldr	r2, [r3, r2]
 80101b4:	193b      	adds	r3, r7, r4
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	2152      	movs	r1, #82	; 0x52
 80101ba:	202c      	movs	r0, #44	; 0x2c
 80101bc:	4343      	muls	r3, r0
 80101be:	18d3      	adds	r3, r2, r3
 80101c0:	185b      	adds	r3, r3, r1
 80101c2:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d038      	beq.n	801023a <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 80101c8:	2383      	movs	r3, #131	; 0x83
 80101ca:	18fb      	adds	r3, r7, r3
 80101cc:	2201      	movs	r2, #1
 80101ce:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 80101d0:	4b7e      	ldr	r3, [pc, #504]	; (80103cc <ProcessRadioRxDone+0x72c>)
 80101d2:	4a80      	ldr	r2, [pc, #512]	; (80103d4 <ProcessRadioRxDone+0x734>)
 80101d4:	5899      	ldr	r1, [r3, r2]
 80101d6:	0025      	movs	r5, r4
 80101d8:	193b      	adds	r3, r7, r4
 80101da:	781a      	ldrb	r2, [r3, #0]
 80101dc:	2382      	movs	r3, #130	; 0x82
 80101de:	18fb      	adds	r3, r7, r3
 80101e0:	2053      	movs	r0, #83	; 0x53
 80101e2:	242c      	movs	r4, #44	; 0x2c
 80101e4:	4362      	muls	r2, r4
 80101e6:	188a      	adds	r2, r1, r2
 80101e8:	1812      	adds	r2, r2, r0
 80101ea:	7812      	ldrb	r2, [r2, #0]
 80101ec:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80101ee:	4b77      	ldr	r3, [pc, #476]	; (80103cc <ProcessRadioRxDone+0x72c>)
 80101f0:	4a78      	ldr	r2, [pc, #480]	; (80103d4 <ProcessRadioRxDone+0x734>)
 80101f2:	589a      	ldr	r2, [r3, r2]
 80101f4:	002c      	movs	r4, r5
 80101f6:	193b      	adds	r3, r7, r4
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	212c      	movs	r1, #44	; 0x2c
 80101fc:	434b      	muls	r3, r1
 80101fe:	18d3      	adds	r3, r2, r3
 8010200:	3370      	adds	r3, #112	; 0x70
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 8010208:	4b70      	ldr	r3, [pc, #448]	; (80103cc <ProcessRadioRxDone+0x72c>)
 801020a:	4a72      	ldr	r2, [pc, #456]	; (80103d4 <ProcessRadioRxDone+0x734>)
 801020c:	589a      	ldr	r2, [r3, r2]
 801020e:	193b      	adds	r3, r7, r4
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	212c      	movs	r1, #44	; 0x2c
 8010214:	434b      	muls	r3, r1
 8010216:	18d3      	adds	r3, r2, r3
 8010218:	3354      	adds	r3, #84	; 0x54
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2284      	movs	r2, #132	; 0x84
 801021e:	18ba      	adds	r2, r7, r2
 8010220:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8010222:	4b6a      	ldr	r3, [pc, #424]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010224:	4a6b      	ldr	r2, [pc, #428]	; (80103d4 <ProcessRadioRxDone+0x734>)
 8010226:	589b      	ldr	r3, [r3, r2]
 8010228:	227c      	movs	r2, #124	; 0x7c
 801022a:	5c9b      	ldrb	r3, [r3, r2]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d110      	bne.n	8010252 <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010230:	4b66      	ldr	r3, [pc, #408]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010232:	4a6c      	ldr	r2, [pc, #432]	; (80103e4 <ProcessRadioRxDone+0x744>)
 8010234:	2103      	movs	r1, #3
 8010236:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 8010238:	e00b      	b.n	8010252 <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801023a:	2181      	movs	r1, #129	; 0x81
 801023c:	187b      	adds	r3, r7, r1
 801023e:	781a      	ldrb	r2, [r3, #0]
 8010240:	187b      	adds	r3, r7, r1
 8010242:	3201      	adds	r2, #1
 8010244:	701a      	strb	r2, [r3, #0]
 8010246:	2381      	movs	r3, #129	; 0x81
 8010248:	18fb      	adds	r3, r7, r3
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d09e      	beq.n	801018e <ProcessRadioRxDone+0x4ee>
 8010250:	e000      	b.n	8010254 <ProcessRadioRxDone+0x5b4>
                    break;
 8010252:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010254:	2383      	movs	r3, #131	; 0x83
 8010256:	18fb      	adds	r3, r7, r3
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d119      	bne.n	8010292 <ProcessRadioRxDone+0x5f2>
 801025e:	1cbb      	adds	r3, r7, #2
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	2b03      	cmp	r3, #3
 8010264:	d10e      	bne.n	8010284 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010266:	2130      	movs	r1, #48	; 0x30
 8010268:	187b      	adds	r3, r7, r1
 801026a:	7b1b      	ldrb	r3, [r3, #12]
 801026c:	2220      	movs	r2, #32
 801026e:	4013      	ands	r3, r2
 8010270:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010272:	2b00      	cmp	r3, #0
 8010274:	d106      	bne.n	8010284 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8010276:	187b      	adds	r3, r7, r1
 8010278:	7b1b      	ldrb	r3, [r3, #12]
 801027a:	2240      	movs	r2, #64	; 0x40
 801027c:	4013      	ands	r3, r2
 801027e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010280:	2b00      	cmp	r3, #0
 8010282:	d006      	beq.n	8010292 <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010284:	4b51      	ldr	r3, [pc, #324]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010286:	4a54      	ldr	r2, [pc, #336]	; (80103d8 <ProcessRadioRxDone+0x738>)
 8010288:	2101      	movs	r1, #1
 801028a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 801028c:	f7ff fcdc 	bl	800fc48 <PrepareRxDoneAbort>
                return;
 8010290:	e234      	b.n	80106fc <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8010292:	2164      	movs	r1, #100	; 0x64
 8010294:	187b      	adds	r3, r7, r1
 8010296:	2215      	movs	r2, #21
 8010298:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801029a:	4b4c      	ldr	r3, [pc, #304]	; (80103cc <ProcessRadioRxDone+0x72c>)
 801029c:	4a4d      	ldr	r2, [pc, #308]	; (80103d4 <ProcessRadioRxDone+0x734>)
 801029e:	589b      	ldr	r3, [r3, r2]
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	187a      	adds	r2, r7, r1
 80102a4:	0011      	movs	r1, r2
 80102a6:	0018      	movs	r0, r3
 80102a8:	f007 f913 	bl	80174d2 <RegionGetPhyParam>
 80102ac:	0003      	movs	r3, r0
 80102ae:	001a      	movs	r2, r3
 80102b0:	2060      	movs	r0, #96	; 0x60
 80102b2:	183b      	adds	r3, r7, r0
 80102b4:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 80102b6:	1cbb      	adds	r3, r7, #2
 80102b8:	781d      	ldrb	r5, [r3, #0]
 80102ba:	4b44      	ldr	r3, [pc, #272]	; (80103cc <ProcessRadioRxDone+0x72c>)
 80102bc:	4a45      	ldr	r2, [pc, #276]	; (80103d4 <ProcessRadioRxDone+0x734>)
 80102be:	5899      	ldr	r1, [r3, r2]
 80102c0:	183b      	adds	r3, r7, r0
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	2280      	movs	r2, #128	; 0x80
 80102c8:	18bc      	adds	r4, r7, r2
 80102ca:	22b0      	movs	r2, #176	; 0xb0
 80102cc:	0052      	lsls	r2, r2, #1
 80102ce:	588e      	ldr	r6, [r1, r2]
 80102d0:	2130      	movs	r1, #48	; 0x30
 80102d2:	1879      	adds	r1, r7, r1
 80102d4:	2082      	movs	r0, #130	; 0x82
 80102d6:	183a      	adds	r2, r7, r0
 80102d8:	7810      	ldrb	r0, [r2, #0]
 80102da:	1d3a      	adds	r2, r7, #4
 80102dc:	9202      	str	r2, [sp, #8]
 80102de:	1cfa      	adds	r2, r7, #3
 80102e0:	9201      	str	r2, [sp, #4]
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	0033      	movs	r3, r6
 80102e6:	000a      	movs	r2, r1
 80102e8:	0029      	movs	r1, r5
 80102ea:	f000 fe91 	bl	8011010 <GetFCntDown>
 80102ee:	0003      	movs	r3, r0
 80102f0:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80102f2:	2280      	movs	r2, #128	; 0x80
 80102f4:	18bb      	adds	r3, r7, r2
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d040      	beq.n	801037e <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80102fc:	18bb      	adds	r3, r7, r2
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	2b07      	cmp	r3, #7
 8010302:	d126      	bne.n	8010352 <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8010304:	4b31      	ldr	r3, [pc, #196]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010306:	4a34      	ldr	r2, [pc, #208]	; (80103d8 <ProcessRadioRxDone+0x738>)
 8010308:	2108      	movs	r1, #8
 801030a:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 801030c:	4b2f      	ldr	r3, [pc, #188]	; (80103cc <ProcessRadioRxDone+0x72c>)
 801030e:	4a31      	ldr	r2, [pc, #196]	; (80103d4 <ProcessRadioRxDone+0x734>)
 8010310:	589a      	ldr	r2, [r3, r2]
 8010312:	23b1      	movs	r3, #177	; 0xb1
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	5cd3      	ldrb	r3, [r2, r3]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d128      	bne.n	801036e <ProcessRadioRxDone+0x6ce>
 801031c:	2374      	movs	r3, #116	; 0x74
 801031e:	18fb      	adds	r3, r7, r3
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	221f      	movs	r2, #31
 8010324:	4393      	bics	r3, r2
 8010326:	b2db      	uxtb	r3, r3
 8010328:	2ba0      	cmp	r3, #160	; 0xa0
 801032a:	d120      	bne.n	801036e <ProcessRadioRxDone+0x6ce>
 801032c:	4b27      	ldr	r3, [pc, #156]	; (80103cc <ProcessRadioRxDone+0x72c>)
 801032e:	4a29      	ldr	r2, [pc, #164]	; (80103d4 <ProcessRadioRxDone+0x734>)
 8010330:	589a      	ldr	r2, [r3, r2]
 8010332:	23b4      	movs	r3, #180	; 0xb4
 8010334:	005b      	lsls	r3, r3, #1
 8010336:	58d2      	ldr	r2, [r2, r3]
 8010338:	2130      	movs	r1, #48	; 0x30
 801033a:	187b      	adds	r3, r7, r1
 801033c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033e:	429a      	cmp	r2, r3
 8010340:	d115      	bne.n	801036e <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8010342:	4b22      	ldr	r3, [pc, #136]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010344:	4a23      	ldr	r2, [pc, #140]	; (80103d4 <ProcessRadioRxDone+0x734>)
 8010346:	589a      	ldr	r2, [r3, r2]
 8010348:	234c      	movs	r3, #76	; 0x4c
 801034a:	33ff      	adds	r3, #255	; 0xff
 801034c:	2101      	movs	r1, #1
 801034e:	54d1      	strb	r1, [r2, r3]
 8010350:	e00d      	b.n	801036e <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8010352:	2380      	movs	r3, #128	; 0x80
 8010354:	18fb      	adds	r3, r7, r3
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	2b08      	cmp	r3, #8
 801035a:	d104      	bne.n	8010366 <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 801035c:	4b1b      	ldr	r3, [pc, #108]	; (80103cc <ProcessRadioRxDone+0x72c>)
 801035e:	4a1e      	ldr	r2, [pc, #120]	; (80103d8 <ProcessRadioRxDone+0x738>)
 8010360:	210a      	movs	r1, #10
 8010362:	5499      	strb	r1, [r3, r2]
 8010364:	e003      	b.n	801036e <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010366:	4b19      	ldr	r3, [pc, #100]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010368:	4a1b      	ldr	r2, [pc, #108]	; (80103d8 <ProcessRadioRxDone+0x738>)
 801036a:	2101      	movs	r1, #1
 801036c:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801036e:	6879      	ldr	r1, [r7, #4]
 8010370:	4a16      	ldr	r2, [pc, #88]	; (80103cc <ProcessRadioRxDone+0x72c>)
 8010372:	2386      	movs	r3, #134	; 0x86
 8010374:	00db      	lsls	r3, r3, #3
 8010376:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8010378:	f7ff fc66 	bl	800fc48 <PrepareRxDoneAbort>
                return;
 801037c:	e1be      	b.n	80106fc <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 801037e:	1cfb      	adds	r3, r7, #3
 8010380:	781a      	ldrb	r2, [r3, #0]
 8010382:	687d      	ldr	r5, [r7, #4]
 8010384:	2680      	movs	r6, #128	; 0x80
 8010386:	19bc      	adds	r4, r7, r6
 8010388:	2384      	movs	r3, #132	; 0x84
 801038a:	18fb      	adds	r3, r7, r3
 801038c:	6819      	ldr	r1, [r3, #0]
 801038e:	2382      	movs	r3, #130	; 0x82
 8010390:	18fb      	adds	r3, r7, r3
 8010392:	7818      	ldrb	r0, [r3, #0]
 8010394:	2330      	movs	r3, #48	; 0x30
 8010396:	18fb      	adds	r3, r7, r3
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	002b      	movs	r3, r5
 801039c:	f006 fb9c 	bl	8016ad8 <LoRaMacCryptoUnsecureMessage>
 80103a0:	0003      	movs	r3, r0
 80103a2:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80103a4:	19bb      	adds	r3, r7, r6
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d01d      	beq.n	80103e8 <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80103ac:	19bb      	adds	r3, r7, r6
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	2b02      	cmp	r3, #2
 80103b2:	d104      	bne.n	80103be <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80103b4:	4b05      	ldr	r3, [pc, #20]	; (80103cc <ProcessRadioRxDone+0x72c>)
 80103b6:	4a08      	ldr	r2, [pc, #32]	; (80103d8 <ProcessRadioRxDone+0x738>)
 80103b8:	210b      	movs	r1, #11
 80103ba:	5499      	strb	r1, [r3, r2]
 80103bc:	e003      	b.n	80103c6 <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80103be:	4b03      	ldr	r3, [pc, #12]	; (80103cc <ProcessRadioRxDone+0x72c>)
 80103c0:	4a05      	ldr	r2, [pc, #20]	; (80103d8 <ProcessRadioRxDone+0x738>)
 80103c2:	210c      	movs	r1, #12
 80103c4:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 80103c6:	f7ff fc3f 	bl	800fc48 <PrepareRxDoneAbort>
                return;
 80103ca:	e197      	b.n	80106fc <ProcessRadioRxDone+0xa5c>
 80103cc:	200007d0 	.word	0x200007d0
 80103d0:	0000041c 	.word	0x0000041c
 80103d4:	00000484 	.word	0x00000484
 80103d8:	0000041d 	.word	0x0000041d
 80103dc:	20000a08 	.word	0x20000a08
 80103e0:	00000434 	.word	0x00000434
 80103e4:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80103e8:	4bc6      	ldr	r3, [pc, #792]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80103ea:	4ac7      	ldr	r2, [pc, #796]	; (8010708 <ProcessRadioRxDone+0xa68>)
 80103ec:	2100      	movs	r1, #0
 80103ee:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 80103f0:	4bc4      	ldr	r3, [pc, #784]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80103f2:	2283      	movs	r2, #131	; 0x83
 80103f4:	18ba      	adds	r2, r7, r2
 80103f6:	49c5      	ldr	r1, [pc, #788]	; (801070c <ProcessRadioRxDone+0xa6c>)
 80103f8:	7812      	ldrb	r2, [r2, #0]
 80103fa:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80103fc:	2030      	movs	r0, #48	; 0x30
 80103fe:	183b      	adds	r3, r7, r0
 8010400:	7b1b      	ldrb	r3, [r3, #12]
 8010402:	06db      	lsls	r3, r3, #27
 8010404:	0fdb      	lsrs	r3, r3, #31
 8010406:	b2db      	uxtb	r3, r3
 8010408:	0019      	movs	r1, r3
 801040a:	4bbe      	ldr	r3, [pc, #760]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801040c:	4ac0      	ldr	r2, [pc, #768]	; (8010710 <ProcessRadioRxDone+0xa70>)
 801040e:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 8010410:	4bbc      	ldr	r3, [pc, #752]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010412:	4ac0      	ldr	r2, [pc, #768]	; (8010714 <ProcessRadioRxDone+0xa74>)
 8010414:	2100      	movs	r1, #0
 8010416:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 8010418:	4aba      	ldr	r2, [pc, #744]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801041a:	2385      	movs	r3, #133	; 0x85
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	2100      	movs	r1, #0
 8010420:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010422:	6879      	ldr	r1, [r7, #4]
 8010424:	4ab7      	ldr	r2, [pc, #732]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010426:	2386      	movs	r3, #134	; 0x86
 8010428:	00db      	lsls	r3, r3, #3
 801042a:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801042c:	183b      	adds	r3, r7, r0
 801042e:	7b1b      	ldrb	r3, [r3, #12]
 8010430:	069b      	lsls	r3, r3, #26
 8010432:	0fdb      	lsrs	r3, r3, #31
 8010434:	b2db      	uxtb	r3, r3
 8010436:	1e5a      	subs	r2, r3, #1
 8010438:	4193      	sbcs	r3, r2
 801043a:	b2d9      	uxtb	r1, r3
 801043c:	4bb1      	ldr	r3, [pc, #708]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801043e:	4ab6      	ldr	r2, [pc, #728]	; (8010718 <ProcessRadioRxDone+0xa78>)
 8010440:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010442:	4bb0      	ldr	r3, [pc, #704]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010444:	4ab5      	ldr	r2, [pc, #724]	; (801071c <ProcessRadioRxDone+0xa7c>)
 8010446:	2100      	movs	r1, #0
 8010448:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801044a:	183b      	adds	r3, r7, r0
 801044c:	7b1b      	ldrb	r3, [r3, #12]
 801044e:	069b      	lsls	r3, r3, #26
 8010450:	0fdb      	lsrs	r3, r3, #31
 8010452:	b2db      	uxtb	r3, r3
 8010454:	1e5a      	subs	r2, r3, #1
 8010456:	4193      	sbcs	r3, r2
 8010458:	b2d9      	uxtb	r1, r3
 801045a:	4aaa      	ldr	r2, [pc, #680]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801045c:	2388      	movs	r3, #136	; 0x88
 801045e:	00db      	lsls	r3, r3, #3
 8010460:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8010462:	4ba8      	ldr	r3, [pc, #672]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010464:	4aae      	ldr	r2, [pc, #696]	; (8010720 <ProcessRadioRxDone+0xa80>)
 8010466:	5c9b      	ldrb	r3, [r3, r2]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d004      	beq.n	8010476 <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 801046c:	4ba5      	ldr	r3, [pc, #660]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801046e:	4aac      	ldr	r2, [pc, #688]	; (8010720 <ProcessRadioRxDone+0xa80>)
 8010470:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8010472:	2b01      	cmp	r3, #1
 8010474:	d105      	bne.n	8010482 <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8010476:	4ba3      	ldr	r3, [pc, #652]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010478:	4aaa      	ldr	r2, [pc, #680]	; (8010724 <ProcessRadioRxDone+0xa84>)
 801047a:	589b      	ldr	r3, [r3, r2]
 801047c:	2280      	movs	r2, #128	; 0x80
 801047e:	2100      	movs	r1, #0
 8010480:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8010482:	2383      	movs	r3, #131	; 0x83
 8010484:	18fb      	adds	r3, r7, r3
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d104      	bne.n	8010496 <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801048c:	4b9d      	ldr	r3, [pc, #628]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801048e:	4aa6      	ldr	r2, [pc, #664]	; (8010728 <ProcessRadioRxDone+0xa88>)
 8010490:	2102      	movs	r1, #2
 8010492:	5499      	strb	r1, [r3, r2]
 8010494:	e02f      	b.n	80104f6 <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8010496:	2374      	movs	r3, #116	; 0x74
 8010498:	18fb      	adds	r3, r7, r3
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	221f      	movs	r2, #31
 801049e:	4393      	bics	r3, r2
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	2ba0      	cmp	r3, #160	; 0xa0
 80104a4:	d11c      	bne.n	80104e0 <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 80104a6:	4b97      	ldr	r3, [pc, #604]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80104a8:	4a9e      	ldr	r2, [pc, #632]	; (8010724 <ProcessRadioRxDone+0xa84>)
 80104aa:	589a      	ldr	r2, [r3, r2]
 80104ac:	234c      	movs	r3, #76	; 0x4c
 80104ae:	33ff      	adds	r3, #255	; 0xff
 80104b0:	2101      	movs	r1, #1
 80104b2:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80104b4:	4b93      	ldr	r3, [pc, #588]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80104b6:	4a9b      	ldr	r2, [pc, #620]	; (8010724 <ProcessRadioRxDone+0xa84>)
 80104b8:	589a      	ldr	r2, [r3, r2]
 80104ba:	23b1      	movs	r3, #177	; 0xb1
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	5cd3      	ldrb	r3, [r2, r3]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d108      	bne.n	80104d6 <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 80104c4:	4b8f      	ldr	r3, [pc, #572]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80104c6:	4a97      	ldr	r2, [pc, #604]	; (8010724 <ProcessRadioRxDone+0xa84>)
 80104c8:	589a      	ldr	r2, [r3, r2]
 80104ca:	2330      	movs	r3, #48	; 0x30
 80104cc:	18fb      	adds	r3, r7, r3
 80104ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80104d0:	23b4      	movs	r3, #180	; 0xb4
 80104d2:	005b      	lsls	r3, r3, #1
 80104d4:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80104d6:	4b8b      	ldr	r3, [pc, #556]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80104d8:	4a93      	ldr	r2, [pc, #588]	; (8010728 <ProcessRadioRxDone+0xa88>)
 80104da:	2101      	movs	r1, #1
 80104dc:	5499      	strb	r1, [r3, r2]
 80104de:	e00a      	b.n	80104f6 <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 80104e0:	4b88      	ldr	r3, [pc, #544]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80104e2:	4a90      	ldr	r2, [pc, #576]	; (8010724 <ProcessRadioRxDone+0xa84>)
 80104e4:	589a      	ldr	r2, [r3, r2]
 80104e6:	234c      	movs	r3, #76	; 0x4c
 80104e8:	33ff      	adds	r3, #255	; 0xff
 80104ea:	2100      	movs	r1, #0
 80104ec:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80104ee:	4b85      	ldr	r3, [pc, #532]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80104f0:	4a8d      	ldr	r2, [pc, #564]	; (8010728 <ProcessRadioRxDone+0xa88>)
 80104f2:	2100      	movs	r1, #0
 80104f4:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80104f6:	4b83      	ldr	r3, [pc, #524]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80104f8:	4a89      	ldr	r2, [pc, #548]	; (8010720 <ProcessRadioRxDone+0xa80>)
 80104fa:	5c98      	ldrb	r0, [r3, r2]
 80104fc:	4b81      	ldr	r3, [pc, #516]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80104fe:	4a8b      	ldr	r2, [pc, #556]	; (801072c <ProcessRadioRxDone+0xa8c>)
 8010500:	5c9a      	ldrb	r2, [r3, r2]
 8010502:	2330      	movs	r3, #48	; 0x30
 8010504:	18fb      	adds	r3, r7, r3
 8010506:	7b1b      	ldrb	r3, [r3, #12]
 8010508:	1c19      	adds	r1, r3, #0
 801050a:	f002 f94f 	bl	80127ac <RemoveMacCommands>

            switch( fType )
 801050e:	1cbb      	adds	r3, r7, #2
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	2b03      	cmp	r3, #3
 8010514:	d100      	bne.n	8010518 <ProcessRadioRxDone+0x878>
 8010516:	e073      	b.n	8010600 <ProcessRadioRxDone+0x960>
 8010518:	dd00      	ble.n	801051c <ProcessRadioRxDone+0x87c>
 801051a:	e089      	b.n	8010630 <ProcessRadioRxDone+0x990>
 801051c:	2b02      	cmp	r3, #2
 801051e:	d055      	beq.n	80105cc <ProcessRadioRxDone+0x92c>
 8010520:	dd00      	ble.n	8010524 <ProcessRadioRxDone+0x884>
 8010522:	e085      	b.n	8010630 <ProcessRadioRxDone+0x990>
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <ProcessRadioRxDone+0x88e>
 8010528:	2b01      	cmp	r3, #1
 801052a:	d030      	beq.n	801058e <ProcessRadioRxDone+0x8ee>
 801052c:	e080      	b.n	8010630 <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 801052e:	2030      	movs	r0, #48	; 0x30
 8010530:	183b      	adds	r3, r7, r0
 8010532:	7b1b      	ldrb	r3, [r3, #12]
 8010534:	071b      	lsls	r3, r3, #28
 8010536:	0f1b      	lsrs	r3, r3, #28
 8010538:	b2db      	uxtb	r3, r3
 801053a:	001c      	movs	r4, r3
 801053c:	4b71      	ldr	r3, [pc, #452]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801053e:	4a78      	ldr	r2, [pc, #480]	; (8010720 <ProcessRadioRxDone+0xa80>)
 8010540:	5c9b      	ldrb	r3, [r3, r2]
 8010542:	2277      	movs	r2, #119	; 0x77
 8010544:	18ba      	adds	r2, r7, r2
 8010546:	2100      	movs	r1, #0
 8010548:	5651      	ldrsb	r1, [r2, r1]
 801054a:	0005      	movs	r5, r0
 801054c:	183a      	adds	r2, r7, r0
 801054e:	3210      	adds	r2, #16
 8010550:	0010      	movs	r0, r2
 8010552:	9300      	str	r3, [sp, #0]
 8010554:	000b      	movs	r3, r1
 8010556:	0022      	movs	r2, r4
 8010558:	2100      	movs	r1, #0
 801055a:	f000 ff4f 	bl	80113fc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801055e:	0028      	movs	r0, r5
 8010560:	183b      	adds	r3, r7, r0
 8010562:	2220      	movs	r2, #32
 8010564:	5c99      	ldrb	r1, [r3, r2]
 8010566:	4b67      	ldr	r3, [pc, #412]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010568:	4a71      	ldr	r2, [pc, #452]	; (8010730 <ProcessRadioRxDone+0xa90>)
 801056a:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801056c:	183b      	adds	r3, r7, r0
 801056e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010570:	4b64      	ldr	r3, [pc, #400]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010572:	4968      	ldr	r1, [pc, #416]	; (8010714 <ProcessRadioRxDone+0xa74>)
 8010574:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010576:	183b      	adds	r3, r7, r0
 8010578:	2228      	movs	r2, #40	; 0x28
 801057a:	5c99      	ldrb	r1, [r3, r2]
 801057c:	4a61      	ldr	r2, [pc, #388]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801057e:	2385      	movs	r3, #133	; 0x85
 8010580:	00db      	lsls	r3, r3, #3
 8010582:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 8010584:	4b5f      	ldr	r3, [pc, #380]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010586:	4a6b      	ldr	r2, [pc, #428]	; (8010734 <ProcessRadioRxDone+0xa94>)
 8010588:	2101      	movs	r1, #1
 801058a:	5499      	strb	r1, [r3, r2]
                    break;
 801058c:	e057      	b.n	801063e <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 801058e:	2030      	movs	r0, #48	; 0x30
 8010590:	183b      	adds	r3, r7, r0
 8010592:	7b1b      	ldrb	r3, [r3, #12]
 8010594:	071b      	lsls	r3, r3, #28
 8010596:	0f1b      	lsrs	r3, r3, #28
 8010598:	b2db      	uxtb	r3, r3
 801059a:	001c      	movs	r4, r3
 801059c:	4b59      	ldr	r3, [pc, #356]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801059e:	4a60      	ldr	r2, [pc, #384]	; (8010720 <ProcessRadioRxDone+0xa80>)
 80105a0:	5c9b      	ldrb	r3, [r3, r2]
 80105a2:	2277      	movs	r2, #119	; 0x77
 80105a4:	18ba      	adds	r2, r7, r2
 80105a6:	2100      	movs	r1, #0
 80105a8:	5651      	ldrsb	r1, [r2, r1]
 80105aa:	0005      	movs	r5, r0
 80105ac:	183a      	adds	r2, r7, r0
 80105ae:	3210      	adds	r2, #16
 80105b0:	0010      	movs	r0, r2
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	000b      	movs	r3, r1
 80105b6:	0022      	movs	r2, r4
 80105b8:	2100      	movs	r1, #0
 80105ba:	f000 ff1f 	bl	80113fc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80105be:	197b      	adds	r3, r7, r5
 80105c0:	2220      	movs	r2, #32
 80105c2:	5c99      	ldrb	r1, [r3, r2]
 80105c4:	4b4f      	ldr	r3, [pc, #316]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80105c6:	4a5a      	ldr	r2, [pc, #360]	; (8010730 <ProcessRadioRxDone+0xa90>)
 80105c8:	5499      	strb	r1, [r3, r2]
                    break;
 80105ca:	e038      	b.n	801063e <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80105cc:	2430      	movs	r4, #48	; 0x30
 80105ce:	193b      	adds	r3, r7, r4
 80105d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80105d2:	193b      	adds	r3, r7, r4
 80105d4:	2228      	movs	r2, #40	; 0x28
 80105d6:	5c99      	ldrb	r1, [r3, r2]
 80105d8:	4b4a      	ldr	r3, [pc, #296]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80105da:	4a51      	ldr	r2, [pc, #324]	; (8010720 <ProcessRadioRxDone+0xa80>)
 80105dc:	5c9b      	ldrb	r3, [r3, r2]
 80105de:	2277      	movs	r2, #119	; 0x77
 80105e0:	18ba      	adds	r2, r7, r2
 80105e2:	7812      	ldrb	r2, [r2, #0]
 80105e4:	b252      	sxtb	r2, r2
 80105e6:	9300      	str	r3, [sp, #0]
 80105e8:	0013      	movs	r3, r2
 80105ea:	000a      	movs	r2, r1
 80105ec:	2100      	movs	r1, #0
 80105ee:	f000 ff05 	bl	80113fc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80105f2:	193b      	adds	r3, r7, r4
 80105f4:	2220      	movs	r2, #32
 80105f6:	5c99      	ldrb	r1, [r3, r2]
 80105f8:	4b42      	ldr	r3, [pc, #264]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80105fa:	4a4d      	ldr	r2, [pc, #308]	; (8010730 <ProcessRadioRxDone+0xa90>)
 80105fc:	5499      	strb	r1, [r3, r2]
                    break;
 80105fe:	e01e      	b.n	801063e <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010600:	2030      	movs	r0, #48	; 0x30
 8010602:	183b      	adds	r3, r7, r0
 8010604:	2220      	movs	r2, #32
 8010606:	5c99      	ldrb	r1, [r3, r2]
 8010608:	4b3e      	ldr	r3, [pc, #248]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801060a:	4a49      	ldr	r2, [pc, #292]	; (8010730 <ProcessRadioRxDone+0xa90>)
 801060c:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801060e:	183b      	adds	r3, r7, r0
 8010610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010612:	4b3c      	ldr	r3, [pc, #240]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010614:	493f      	ldr	r1, [pc, #252]	; (8010714 <ProcessRadioRxDone+0xa74>)
 8010616:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010618:	183b      	adds	r3, r7, r0
 801061a:	2228      	movs	r2, #40	; 0x28
 801061c:	5c99      	ldrb	r1, [r3, r2]
 801061e:	4a39      	ldr	r2, [pc, #228]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010620:	2385      	movs	r3, #133	; 0x85
 8010622:	00db      	lsls	r3, r3, #3
 8010624:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 8010626:	4b37      	ldr	r3, [pc, #220]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010628:	4a42      	ldr	r2, [pc, #264]	; (8010734 <ProcessRadioRxDone+0xa94>)
 801062a:	2101      	movs	r1, #1
 801062c:	5499      	strb	r1, [r3, r2]
                    break;
 801062e:	e006      	b.n	801063e <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010630:	4b34      	ldr	r3, [pc, #208]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010632:	4a35      	ldr	r2, [pc, #212]	; (8010708 <ProcessRadioRxDone+0xa68>)
 8010634:	2101      	movs	r1, #1
 8010636:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 8010638:	f7ff fb06 	bl	800fc48 <PrepareRxDoneAbort>
                    break;
 801063c:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801063e:	4b31      	ldr	r3, [pc, #196]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010640:	4a3d      	ldr	r2, [pc, #244]	; (8010738 <ProcessRadioRxDone+0xa98>)
 8010642:	5c99      	ldrb	r1, [r3, r2]
 8010644:	2002      	movs	r0, #2
 8010646:	4301      	orrs	r1, r0
 8010648:	5499      	strb	r1, [r3, r2]

            break;
 801064a:	e036      	b.n	80106ba <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801064c:	2476      	movs	r4, #118	; 0x76
 801064e:	193b      	adds	r3, r7, r4
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010654:	18d1      	adds	r1, r2, r3
 8010656:	193b      	adds	r3, r7, r4
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	b29b      	uxth	r3, r3
 801065c:	257a      	movs	r5, #122	; 0x7a
 801065e:	197a      	adds	r2, r7, r5
 8010660:	8812      	ldrh	r2, [r2, #0]
 8010662:	1ad3      	subs	r3, r2, r3
 8010664:	b29a      	uxth	r2, r3
 8010666:	4b35      	ldr	r3, [pc, #212]	; (801073c <ProcessRadioRxDone+0xa9c>)
 8010668:	0018      	movs	r0, r3
 801066a:	f009 fbc1 	bl	8019df0 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801066e:	4b25      	ldr	r3, [pc, #148]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010670:	4a2d      	ldr	r2, [pc, #180]	; (8010728 <ProcessRadioRxDone+0xa88>)
 8010672:	2103      	movs	r1, #3
 8010674:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010676:	4b23      	ldr	r3, [pc, #140]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010678:	4a23      	ldr	r2, [pc, #140]	; (8010708 <ProcessRadioRxDone+0xa68>)
 801067a:	2100      	movs	r1, #0
 801067c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801067e:	4b21      	ldr	r3, [pc, #132]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010680:	4924      	ldr	r1, [pc, #144]	; (8010714 <ProcessRadioRxDone+0xa74>)
 8010682:	4a2e      	ldr	r2, [pc, #184]	; (801073c <ProcessRadioRxDone+0xa9c>)
 8010684:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8010686:	197b      	adds	r3, r7, r5
 8010688:	881b      	ldrh	r3, [r3, #0]
 801068a:	b2da      	uxtb	r2, r3
 801068c:	193b      	adds	r3, r7, r4
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	b2d9      	uxtb	r1, r3
 8010694:	4a1b      	ldr	r2, [pc, #108]	; (8010704 <ProcessRadioRxDone+0xa64>)
 8010696:	2385      	movs	r3, #133	; 0x85
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 801069c:	4b19      	ldr	r3, [pc, #100]	; (8010704 <ProcessRadioRxDone+0xa64>)
 801069e:	4a26      	ldr	r2, [pc, #152]	; (8010738 <ProcessRadioRxDone+0xa98>)
 80106a0:	5c99      	ldrb	r1, [r3, r2]
 80106a2:	2002      	movs	r0, #2
 80106a4:	4301      	orrs	r1, r0
 80106a6:	5499      	strb	r1, [r3, r2]
            break;
 80106a8:	e007      	b.n	80106ba <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80106aa:	4b16      	ldr	r3, [pc, #88]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80106ac:	4a16      	ldr	r2, [pc, #88]	; (8010708 <ProcessRadioRxDone+0xa68>)
 80106ae:	2101      	movs	r1, #1
 80106b0:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 80106b2:	f7ff fac9 	bl	800fc48 <PrepareRxDoneAbort>
            break;
 80106b6:	e000      	b.n	80106ba <ProcessRadioRxDone+0xa1a>
            break;
 80106b8:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 80106ba:	4b12      	ldr	r3, [pc, #72]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80106bc:	4a20      	ldr	r2, [pc, #128]	; (8010740 <ProcessRadioRxDone+0xaa0>)
 80106be:	5c9b      	ldrb	r3, [r3, r2]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d009      	beq.n	80106d8 <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80106c4:	4a0f      	ldr	r2, [pc, #60]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80106c6:	2388      	movs	r3, #136	; 0x88
 80106c8:	00db      	lsls	r3, r3, #3
 80106ca:	5cd3      	ldrb	r3, [r2, r3]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d00d      	beq.n	80106ec <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 80106d0:	2000      	movs	r0, #0
 80106d2:	f000 fc5b 	bl	8010f8c <OnAckTimeoutTimerEvent>
 80106d6:	e009      	b.n	80106ec <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80106d8:	4b0a      	ldr	r3, [pc, #40]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80106da:	4a12      	ldr	r2, [pc, #72]	; (8010724 <ProcessRadioRxDone+0xa84>)
 80106dc:	589b      	ldr	r3, [r3, r2]
 80106de:	227c      	movs	r2, #124	; 0x7c
 80106e0:	5c9b      	ldrb	r3, [r3, r2]
 80106e2:	2b02      	cmp	r3, #2
 80106e4:	d102      	bne.n	80106ec <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 80106e6:	2000      	movs	r0, #0
 80106e8:	f000 fc50 	bl	8010f8c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80106ec:	4b05      	ldr	r3, [pc, #20]	; (8010704 <ProcessRadioRxDone+0xa64>)
 80106ee:	4a12      	ldr	r2, [pc, #72]	; (8010738 <ProcessRadioRxDone+0xa98>)
 80106f0:	5c99      	ldrb	r1, [r3, r2]
 80106f2:	2020      	movs	r0, #32
 80106f4:	4301      	orrs	r1, r0
 80106f6:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 80106f8:	f7ff f9c0 	bl	800fa7c <UpdateRxSlotIdleState>
}
 80106fc:	46bd      	mov	sp, r7
 80106fe:	b023      	add	sp, #140	; 0x8c
 8010700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010702:	46c0      	nop			; (mov r8, r8)
 8010704:	200007d0 	.word	0x200007d0
 8010708:	0000041d 	.word	0x0000041d
 801070c:	0000041e 	.word	0x0000041e
 8010710:	00000421 	.word	0x00000421
 8010714:	00000424 	.word	0x00000424
 8010718:	0000042e 	.word	0x0000042e
 801071c:	0000043d 	.word	0x0000043d
 8010720:	0000042d 	.word	0x0000042d
 8010724:	00000484 	.word	0x00000484
 8010728:	0000041c 	.word	0x0000041c
 801072c:	0000043c 	.word	0x0000043c
 8010730:	0000041f 	.word	0x0000041f
 8010734:	00000429 	.word	0x00000429
 8010738:	00000481 	.word	0x00000481
 801073c:	20000a08 	.word	0x20000a08
 8010740:	00000414 	.word	0x00000414

08010744 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010744:	b580      	push	{r7, lr}
 8010746:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8010748:	4b12      	ldr	r3, [pc, #72]	; (8010794 <ProcessRadioTxTimeout+0x50>)
 801074a:	4a13      	ldr	r2, [pc, #76]	; (8010798 <ProcessRadioTxTimeout+0x54>)
 801074c:	589b      	ldr	r3, [r3, r2]
 801074e:	227c      	movs	r2, #124	; 0x7c
 8010750:	5c9b      	ldrb	r3, [r3, r2]
 8010752:	2b02      	cmp	r3, #2
 8010754:	d002      	beq.n	801075c <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 8010756:	4b11      	ldr	r3, [pc, #68]	; (801079c <ProcessRadioTxTimeout+0x58>)
 8010758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801075a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 801075c:	f7ff f98e 	bl	800fa7c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010760:	4b0c      	ldr	r3, [pc, #48]	; (8010794 <ProcessRadioTxTimeout+0x50>)
 8010762:	4a0f      	ldr	r2, [pc, #60]	; (80107a0 <ProcessRadioTxTimeout+0x5c>)
 8010764:	2102      	movs	r1, #2
 8010766:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010768:	2002      	movs	r0, #2
 801076a:	f005 fa5b 	bl	8015c24 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801076e:	4b09      	ldr	r3, [pc, #36]	; (8010794 <ProcessRadioTxTimeout+0x50>)
 8010770:	4a0c      	ldr	r2, [pc, #48]	; (80107a4 <ProcessRadioTxTimeout+0x60>)
 8010772:	5c9b      	ldrb	r3, [r3, r2]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d003      	beq.n	8010780 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 8010778:	4b06      	ldr	r3, [pc, #24]	; (8010794 <ProcessRadioTxTimeout+0x50>)
 801077a:	4a0b      	ldr	r2, [pc, #44]	; (80107a8 <ProcessRadioTxTimeout+0x64>)
 801077c:	2101      	movs	r1, #1
 801077e:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010780:	4b04      	ldr	r3, [pc, #16]	; (8010794 <ProcessRadioTxTimeout+0x50>)
 8010782:	4a0a      	ldr	r2, [pc, #40]	; (80107ac <ProcessRadioTxTimeout+0x68>)
 8010784:	5c99      	ldrb	r1, [r3, r2]
 8010786:	2020      	movs	r0, #32
 8010788:	4301      	orrs	r1, r0
 801078a:	5499      	strb	r1, [r3, r2]
}
 801078c:	46c0      	nop			; (mov r8, r8)
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	46c0      	nop			; (mov r8, r8)
 8010794:	200007d0 	.word	0x200007d0
 8010798:	00000484 	.word	0x00000484
 801079c:	08021740 	.word	0x08021740
 80107a0:	0000043d 	.word	0x0000043d
 80107a4:	00000414 	.word	0x00000414
 80107a8:	00000413 	.word	0x00000413
 80107ac:	00000481 	.word	0x00000481

080107b0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	0002      	movs	r2, r0
 80107b8:	1dfb      	adds	r3, r7, #7
 80107ba:	701a      	strb	r2, [r3, #0]
 80107bc:	1dbb      	adds	r3, r7, #6
 80107be:	1c0a      	adds	r2, r1, #0
 80107c0:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 80107c2:	230f      	movs	r3, #15
 80107c4:	18fb      	adds	r3, r7, r3
 80107c6:	2200      	movs	r2, #0
 80107c8:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80107ca:	4b4a      	ldr	r3, [pc, #296]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 80107cc:	4a4a      	ldr	r2, [pc, #296]	; (80108f8 <HandleRadioRxErrorTimeout+0x148>)
 80107ce:	589b      	ldr	r3, [r3, r2]
 80107d0:	227c      	movs	r2, #124	; 0x7c
 80107d2:	5c9b      	ldrb	r3, [r3, r2]
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	d002      	beq.n	80107de <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 80107d8:	4b48      	ldr	r3, [pc, #288]	; (80108fc <HandleRadioRxErrorTimeout+0x14c>)
 80107da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107dc:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80107de:	f004 fcdd 	bl	801519c <LoRaMacClassBIsBeaconExpected>
 80107e2:	1e03      	subs	r3, r0, #0
 80107e4:	d009      	beq.n	80107fa <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80107e6:	2002      	movs	r0, #2
 80107e8:	f004 fc90 	bl	801510c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80107ec:	2000      	movs	r0, #0
 80107ee:	f004 fcb1 	bl	8015154 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80107f2:	230f      	movs	r3, #15
 80107f4:	18fb      	adds	r3, r7, r3
 80107f6:	2201      	movs	r2, #1
 80107f8:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80107fa:	4b3e      	ldr	r3, [pc, #248]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 80107fc:	4a3e      	ldr	r2, [pc, #248]	; (80108f8 <HandleRadioRxErrorTimeout+0x148>)
 80107fe:	589b      	ldr	r3, [r3, r2]
 8010800:	227c      	movs	r2, #124	; 0x7c
 8010802:	5c9b      	ldrb	r3, [r3, r2]
 8010804:	2b01      	cmp	r3, #1
 8010806:	d11b      	bne.n	8010840 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010808:	f004 fcce 	bl	80151a8 <LoRaMacClassBIsPingExpected>
 801080c:	1e03      	subs	r3, r0, #0
 801080e:	d009      	beq.n	8010824 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010810:	2000      	movs	r0, #0
 8010812:	f004 fc85 	bl	8015120 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010816:	2000      	movs	r0, #0
 8010818:	f004 fca4 	bl	8015164 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801081c:	230f      	movs	r3, #15
 801081e:	18fb      	adds	r3, r7, r3
 8010820:	2201      	movs	r2, #1
 8010822:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010824:	f004 fcc6 	bl	80151b4 <LoRaMacClassBIsMulticastExpected>
 8010828:	1e03      	subs	r3, r0, #0
 801082a:	d009      	beq.n	8010840 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801082c:	2000      	movs	r0, #0
 801082e:	f004 fc81 	bl	8015134 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010832:	2000      	movs	r0, #0
 8010834:	f004 fc9e 	bl	8015174 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010838:	230f      	movs	r3, #15
 801083a:	18fb      	adds	r3, r7, r3
 801083c:	2201      	movs	r2, #1
 801083e:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 8010840:	230f      	movs	r3, #15
 8010842:	18fb      	adds	r3, r7, r3
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	2201      	movs	r2, #1
 8010848:	4053      	eors	r3, r2
 801084a:	b2db      	uxtb	r3, r3
 801084c:	2b00      	cmp	r3, #0
 801084e:	d04b      	beq.n	80108e8 <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010850:	4a28      	ldr	r2, [pc, #160]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 8010852:	2390      	movs	r3, #144	; 0x90
 8010854:	00db      	lsls	r3, r3, #3
 8010856:	5cd3      	ldrb	r3, [r2, r3]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d129      	bne.n	80108b0 <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 801085c:	4b25      	ldr	r3, [pc, #148]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 801085e:	4a28      	ldr	r2, [pc, #160]	; (8010900 <HandleRadioRxErrorTimeout+0x150>)
 8010860:	5c9b      	ldrb	r3, [r3, r2]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d004      	beq.n	8010870 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010866:	4b23      	ldr	r3, [pc, #140]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 8010868:	1dfa      	adds	r2, r7, #7
 801086a:	4926      	ldr	r1, [pc, #152]	; (8010904 <HandleRadioRxErrorTimeout+0x154>)
 801086c:	7812      	ldrb	r2, [r2, #0]
 801086e:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010870:	1dfb      	adds	r3, r7, #7
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	0018      	movs	r0, r3
 8010876:	f005 f9d5 	bl	8015c24 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 801087a:	4b1e      	ldr	r3, [pc, #120]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 801087c:	4a1e      	ldr	r2, [pc, #120]	; (80108f8 <HandleRadioRxErrorTimeout+0x148>)
 801087e:	589a      	ldr	r2, [r3, r2]
 8010880:	23a8      	movs	r3, #168	; 0xa8
 8010882:	005b      	lsls	r3, r3, #1
 8010884:	58d3      	ldr	r3, [r2, r3]
 8010886:	0018      	movs	r0, r3
 8010888:	f00d f9f8 	bl	801dc7c <UTIL_TIMER_GetElapsedTime>
 801088c:	0001      	movs	r1, r0
 801088e:	4a19      	ldr	r2, [pc, #100]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 8010890:	23ed      	movs	r3, #237	; 0xed
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	58d3      	ldr	r3, [r2, r3]
 8010896:	4299      	cmp	r1, r3
 8010898:	d326      	bcc.n	80108e8 <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801089a:	4b1b      	ldr	r3, [pc, #108]	; (8010908 <HandleRadioRxErrorTimeout+0x158>)
 801089c:	0018      	movs	r0, r3
 801089e:	f00d f8a9 	bl	801d9f4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80108a2:	4b14      	ldr	r3, [pc, #80]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 80108a4:	4a19      	ldr	r2, [pc, #100]	; (801090c <HandleRadioRxErrorTimeout+0x15c>)
 80108a6:	5c99      	ldrb	r1, [r3, r2]
 80108a8:	2020      	movs	r0, #32
 80108aa:	4301      	orrs	r1, r0
 80108ac:	5499      	strb	r1, [r3, r2]
 80108ae:	e01b      	b.n	80108e8 <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80108b0:	4b10      	ldr	r3, [pc, #64]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 80108b2:	4a13      	ldr	r2, [pc, #76]	; (8010900 <HandleRadioRxErrorTimeout+0x150>)
 80108b4:	5c9b      	ldrb	r3, [r3, r2]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d004      	beq.n	80108c4 <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80108ba:	4b0e      	ldr	r3, [pc, #56]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 80108bc:	1dba      	adds	r2, r7, #6
 80108be:	4911      	ldr	r1, [pc, #68]	; (8010904 <HandleRadioRxErrorTimeout+0x154>)
 80108c0:	7812      	ldrb	r2, [r2, #0]
 80108c2:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80108c4:	1dbb      	adds	r3, r7, #6
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	0018      	movs	r0, r3
 80108ca:	f005 f9ab 	bl	8015c24 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80108ce:	4b09      	ldr	r3, [pc, #36]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 80108d0:	4a09      	ldr	r2, [pc, #36]	; (80108f8 <HandleRadioRxErrorTimeout+0x148>)
 80108d2:	589b      	ldr	r3, [r3, r2]
 80108d4:	227c      	movs	r2, #124	; 0x7c
 80108d6:	5c9b      	ldrb	r3, [r3, r2]
 80108d8:	2b02      	cmp	r3, #2
 80108da:	d005      	beq.n	80108e8 <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80108dc:	4b05      	ldr	r3, [pc, #20]	; (80108f4 <HandleRadioRxErrorTimeout+0x144>)
 80108de:	4a0b      	ldr	r2, [pc, #44]	; (801090c <HandleRadioRxErrorTimeout+0x15c>)
 80108e0:	5c99      	ldrb	r1, [r3, r2]
 80108e2:	2020      	movs	r0, #32
 80108e4:	4301      	orrs	r1, r0
 80108e6:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 80108e8:	f7ff f8c8 	bl	800fa7c <UpdateRxSlotIdleState>
}
 80108ec:	46c0      	nop			; (mov r8, r8)
 80108ee:	46bd      	mov	sp, r7
 80108f0:	b004      	add	sp, #16
 80108f2:	bd80      	pop	{r7, pc}
 80108f4:	200007d0 	.word	0x200007d0
 80108f8:	00000484 	.word	0x00000484
 80108fc:	08021740 	.word	0x08021740
 8010900:	00000414 	.word	0x00000414
 8010904:	0000043d 	.word	0x0000043d
 8010908:	20000b68 	.word	0x20000b68
 801090c:	00000481 	.word	0x00000481

08010910 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8010914:	2106      	movs	r1, #6
 8010916:	2005      	movs	r0, #5
 8010918:	f7ff ff4a 	bl	80107b0 <HandleRadioRxErrorTimeout>
}
 801091c:	46c0      	nop			; (mov r8, r8)
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8010922:	b580      	push	{r7, lr}
 8010924:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8010926:	2104      	movs	r1, #4
 8010928:	2003      	movs	r0, #3
 801092a:	f7ff ff41 	bl	80107b0 <HandleRadioRxErrorTimeout>
}
 801092e:	46c0      	nop			; (mov r8, r8)
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801093a:	f3ef 8310 	mrs	r3, PRIMASK
 801093e:	607b      	str	r3, [r7, #4]
  return(result);
 8010940:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010942:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010944:	b672      	cpsid	i
}
 8010946:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 8010948:	4b1f      	ldr	r3, [pc, #124]	; (80109c8 <LoRaMacHandleIrqEvents+0x94>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801094e:	4b1e      	ldr	r3, [pc, #120]	; (80109c8 <LoRaMacHandleIrqEvents+0x94>)
 8010950:	2200      	movs	r2, #0
 8010952:	601a      	str	r2, [r3, #0]
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	f383 8810 	msr	PRIMASK, r3
}
 801095e:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d02c      	beq.n	80109c0 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 8010966:	003b      	movs	r3, r7
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2210      	movs	r2, #16
 801096c:	4013      	ands	r3, r2
 801096e:	b2db      	uxtb	r3, r3
 8010970:	2b00      	cmp	r3, #0
 8010972:	d001      	beq.n	8010978 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 8010974:	f7ff f89e 	bl	800fab4 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8010978:	003b      	movs	r3, r7
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	2208      	movs	r2, #8
 801097e:	4013      	ands	r3, r2
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	d001      	beq.n	801098a <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 8010986:	f7ff f98b 	bl	800fca0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801098a:	003b      	movs	r3, r7
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	2204      	movs	r2, #4
 8010990:	4013      	ands	r3, r2
 8010992:	b2db      	uxtb	r3, r3
 8010994:	2b00      	cmp	r3, #0
 8010996:	d001      	beq.n	801099c <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 8010998:	f7ff fed4 	bl	8010744 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 801099c:	003b      	movs	r3, r7
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	2202      	movs	r2, #2
 80109a2:	4013      	ands	r3, r2
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d001      	beq.n	80109ae <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 80109aa:	f7ff ffb1 	bl	8010910 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 80109ae:	003b      	movs	r3, r7
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	2201      	movs	r2, #1
 80109b4:	4013      	ands	r3, r2
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d001      	beq.n	80109c0 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 80109bc:	f7ff ffb1 	bl	8010922 <ProcessRadioRxTimeout>
        }
    }
}
 80109c0:	46c0      	nop			; (mov r8, r8)
 80109c2:	46bd      	mov	sp, r7
 80109c4:	b004      	add	sp, #16
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	20000e00 	.word	0x20000e00

080109cc <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	0002      	movs	r2, r0
 80109d4:	1dfb      	adds	r3, r7, #7
 80109d6:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 80109d8:	4b04      	ldr	r3, [pc, #16]	; (80109ec <LoRaMacEnableRequests+0x20>)
 80109da:	1dfa      	adds	r2, r7, #7
 80109dc:	4904      	ldr	r1, [pc, #16]	; (80109f0 <LoRaMacEnableRequests+0x24>)
 80109de:	7812      	ldrb	r2, [r2, #0]
 80109e0:	545a      	strb	r2, [r3, r1]
}
 80109e2:	46c0      	nop			; (mov r8, r8)
 80109e4:	46bd      	mov	sp, r7
 80109e6:	b002      	add	sp, #8
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	46c0      	nop			; (mov r8, r8)
 80109ec:	200007d0 	.word	0x200007d0
 80109f0:	00000482 	.word	0x00000482

080109f4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80109fa:	1d3b      	adds	r3, r7, #4
 80109fc:	4a2c      	ldr	r2, [pc, #176]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 80109fe:	492d      	ldr	r1, [pc, #180]	; (8010ab4 <LoRaMacHandleRequestEvents+0xc0>)
 8010a00:	5c52      	ldrb	r2, [r2, r1]
 8010a02:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010a04:	4a2a      	ldr	r2, [pc, #168]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 8010a06:	23d0      	movs	r3, #208	; 0xd0
 8010a08:	009b      	lsls	r3, r3, #2
 8010a0a:	58d3      	ldr	r3, [r2, r3]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d14a      	bne.n	8010aa6 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010a10:	4b27      	ldr	r3, [pc, #156]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 8010a12:	4a28      	ldr	r2, [pc, #160]	; (8010ab4 <LoRaMacHandleRequestEvents+0xc0>)
 8010a14:	5c9b      	ldrb	r3, [r3, r2]
 8010a16:	2201      	movs	r2, #1
 8010a18:	4013      	ands	r3, r2
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d005      	beq.n	8010a2c <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010a20:	4b23      	ldr	r3, [pc, #140]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 8010a22:	4a24      	ldr	r2, [pc, #144]	; (8010ab4 <LoRaMacHandleRequestEvents+0xc0>)
 8010a24:	5c99      	ldrb	r1, [r3, r2]
 8010a26:	2001      	movs	r0, #1
 8010a28:	4381      	bics	r1, r0
 8010a2a:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010a2c:	4b20      	ldr	r3, [pc, #128]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 8010a2e:	4a21      	ldr	r2, [pc, #132]	; (8010ab4 <LoRaMacHandleRequestEvents+0xc0>)
 8010a30:	5c9b      	ldrb	r3, [r3, r2]
 8010a32:	2204      	movs	r2, #4
 8010a34:	4013      	ands	r3, r2
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d005      	beq.n	8010a48 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010a3c:	4b1c      	ldr	r3, [pc, #112]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 8010a3e:	4a1d      	ldr	r2, [pc, #116]	; (8010ab4 <LoRaMacHandleRequestEvents+0xc0>)
 8010a40:	5c99      	ldrb	r1, [r3, r2]
 8010a42:	2004      	movs	r0, #4
 8010a44:	4381      	bics	r1, r0
 8010a46:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010a48:	2001      	movs	r0, #1
 8010a4a:	f7ff ffbf 	bl	80109cc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010a4e:	1d3b      	adds	r3, r7, #4
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	2201      	movs	r2, #1
 8010a54:	4013      	ands	r3, r2
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d007      	beq.n	8010a6c <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010a5c:	4a14      	ldr	r2, [pc, #80]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 8010a5e:	23d1      	movs	r3, #209	; 0xd1
 8010a60:	009b      	lsls	r3, r3, #2
 8010a62:	58d3      	ldr	r3, [r2, r3]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	4a14      	ldr	r2, [pc, #80]	; (8010ab8 <LoRaMacHandleRequestEvents+0xc4>)
 8010a68:	0010      	movs	r0, r2
 8010a6a:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010a6c:	1d3b      	adds	r3, r7, #4
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	2204      	movs	r2, #4
 8010a72:	4013      	ands	r3, r2
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00d      	beq.n	8010a96 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8010a7a:	4b10      	ldr	r3, [pc, #64]	; (8010abc <LoRaMacHandleRequestEvents+0xc8>)
 8010a7c:	0018      	movs	r0, r3
 8010a7e:	f005 f925 	bl	8015ccc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010a82:	f005 f985 	bl	8015d90 <LoRaMacConfirmQueueGetCnt>
 8010a86:	1e03      	subs	r3, r0, #0
 8010a88:	d005      	beq.n	8010a96 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010a8a:	4b09      	ldr	r3, [pc, #36]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 8010a8c:	4a09      	ldr	r2, [pc, #36]	; (8010ab4 <LoRaMacHandleRequestEvents+0xc0>)
 8010a8e:	5c99      	ldrb	r1, [r3, r2]
 8010a90:	2004      	movs	r0, #4
 8010a92:	4301      	orrs	r1, r0
 8010a94:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8010a96:	f004 fba8 	bl	80151ea <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8010a9a:	4b05      	ldr	r3, [pc, #20]	; (8010ab0 <LoRaMacHandleRequestEvents+0xbc>)
 8010a9c:	4a05      	ldr	r2, [pc, #20]	; (8010ab4 <LoRaMacHandleRequestEvents+0xc0>)
 8010a9e:	5c99      	ldrb	r1, [r3, r2]
 8010aa0:	2020      	movs	r0, #32
 8010aa2:	4381      	bics	r1, r0
 8010aa4:	5499      	strb	r1, [r3, r2]
    }
}
 8010aa6:	46c0      	nop			; (mov r8, r8)
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	b002      	add	sp, #8
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	46c0      	nop			; (mov r8, r8)
 8010ab0:	200007d0 	.word	0x200007d0
 8010ab4:	00000481 	.word	0x00000481
 8010ab8:	20000c0c 	.word	0x20000c0c
 8010abc:	20000c20 	.word	0x20000c20

08010ac0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 8010ac6:	4a0b      	ldr	r2, [pc, #44]	; (8010af4 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 8010ac8:	23d0      	movs	r3, #208	; 0xd0
 8010aca:	009b      	lsls	r3, r3, #2
 8010acc:	58d3      	ldr	r3, [r2, r3]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d10c      	bne.n	8010aec <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8010ad2:	1dfb      	adds	r3, r7, #7
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8010ad8:	1dfb      	adds	r3, r7, #7
 8010ada:	0018      	movs	r0, r3
 8010adc:	f004 fe94 	bl	8015808 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8010ae0:	1dfb      	adds	r3, r7, #7
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d001      	beq.n	8010aec <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 8010ae8:	f000 fc78 	bl	80113dc <SetMlmeScheduleUplinkIndication>
        }
    }
}
 8010aec:	46c0      	nop			; (mov r8, r8)
 8010aee:	46bd      	mov	sp, r7
 8010af0:	b002      	add	sp, #8
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	200007d0 	.word	0x200007d0

08010af8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b088      	sub	sp, #32
 8010afc:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010afe:	4b26      	ldr	r3, [pc, #152]	; (8010b98 <LoRaMacHandleIndicationEvents+0xa0>)
 8010b00:	4a26      	ldr	r2, [pc, #152]	; (8010b9c <LoRaMacHandleIndicationEvents+0xa4>)
 8010b02:	5c9b      	ldrb	r3, [r3, r2]
 8010b04:	2208      	movs	r2, #8
 8010b06:	4013      	ands	r3, r2
 8010b08:	b2db      	uxtb	r3, r3
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d00d      	beq.n	8010b2a <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010b0e:	4b22      	ldr	r3, [pc, #136]	; (8010b98 <LoRaMacHandleIndicationEvents+0xa0>)
 8010b10:	4a22      	ldr	r2, [pc, #136]	; (8010b9c <LoRaMacHandleIndicationEvents+0xa4>)
 8010b12:	5c99      	ldrb	r1, [r3, r2]
 8010b14:	2008      	movs	r0, #8
 8010b16:	4381      	bics	r1, r0
 8010b18:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8010b1a:	4a1f      	ldr	r2, [pc, #124]	; (8010b98 <LoRaMacHandleIndicationEvents+0xa0>)
 8010b1c:	23d1      	movs	r3, #209	; 0xd1
 8010b1e:	009b      	lsls	r3, r3, #2
 8010b20:	58d3      	ldr	r3, [r2, r3]
 8010b22:	68db      	ldr	r3, [r3, #12]
 8010b24:	4a1e      	ldr	r2, [pc, #120]	; (8010ba0 <LoRaMacHandleIndicationEvents+0xa8>)
 8010b26:	0010      	movs	r0, r2
 8010b28:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8010b2a:	4b1b      	ldr	r3, [pc, #108]	; (8010b98 <LoRaMacHandleIndicationEvents+0xa0>)
 8010b2c:	4a1b      	ldr	r2, [pc, #108]	; (8010b9c <LoRaMacHandleIndicationEvents+0xa4>)
 8010b2e:	5c9b      	ldrb	r3, [r3, r2]
 8010b30:	2210      	movs	r2, #16
 8010b32:	4013      	ands	r3, r2
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d013      	beq.n	8010b62 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8010b3a:	1d3b      	adds	r3, r7, #4
 8010b3c:	2207      	movs	r2, #7
 8010b3e:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010b40:	1d3b      	adds	r3, r7, #4
 8010b42:	2200      	movs	r2, #0
 8010b44:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8010b46:	4a14      	ldr	r2, [pc, #80]	; (8010b98 <LoRaMacHandleIndicationEvents+0xa0>)
 8010b48:	23d1      	movs	r3, #209	; 0xd1
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	58d3      	ldr	r3, [r2, r3]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	1d3a      	adds	r2, r7, #4
 8010b52:	0010      	movs	r0, r2
 8010b54:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8010b56:	4b10      	ldr	r3, [pc, #64]	; (8010b98 <LoRaMacHandleIndicationEvents+0xa0>)
 8010b58:	4a10      	ldr	r2, [pc, #64]	; (8010b9c <LoRaMacHandleIndicationEvents+0xa4>)
 8010b5a:	5c99      	ldrb	r1, [r3, r2]
 8010b5c:	2010      	movs	r0, #16
 8010b5e:	4381      	bics	r1, r0
 8010b60:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010b62:	4b0d      	ldr	r3, [pc, #52]	; (8010b98 <LoRaMacHandleIndicationEvents+0xa0>)
 8010b64:	4a0d      	ldr	r2, [pc, #52]	; (8010b9c <LoRaMacHandleIndicationEvents+0xa4>)
 8010b66:	5c9b      	ldrb	r3, [r3, r2]
 8010b68:	2202      	movs	r2, #2
 8010b6a:	4013      	ands	r3, r2
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d00d      	beq.n	8010b8e <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010b72:	4b09      	ldr	r3, [pc, #36]	; (8010b98 <LoRaMacHandleIndicationEvents+0xa0>)
 8010b74:	4a09      	ldr	r2, [pc, #36]	; (8010b9c <LoRaMacHandleIndicationEvents+0xa4>)
 8010b76:	5c99      	ldrb	r1, [r3, r2]
 8010b78:	2002      	movs	r0, #2
 8010b7a:	4381      	bics	r1, r0
 8010b7c:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8010b7e:	4a06      	ldr	r2, [pc, #24]	; (8010b98 <LoRaMacHandleIndicationEvents+0xa0>)
 8010b80:	23d1      	movs	r3, #209	; 0xd1
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	58d3      	ldr	r3, [r2, r3]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	4a06      	ldr	r2, [pc, #24]	; (8010ba4 <LoRaMacHandleIndicationEvents+0xac>)
 8010b8a:	0010      	movs	r0, r2
 8010b8c:	4798      	blx	r3
    }
}
 8010b8e:	46c0      	nop			; (mov r8, r8)
 8010b90:	46bd      	mov	sp, r7
 8010b92:	b008      	add	sp, #32
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	46c0      	nop			; (mov r8, r8)
 8010b98:	200007d0 	.word	0x200007d0
 8010b9c:	00000481 	.word	0x00000481
 8010ba0:	20000c34 	.word	0x20000c34
 8010ba4:	20000bec 	.word	0x20000bec

08010ba8 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8010ba8:	b590      	push	{r4, r7, lr}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010bae:	4b39      	ldr	r3, [pc, #228]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010bb0:	4a39      	ldr	r2, [pc, #228]	; (8010c98 <LoRaMacHandleMcpsRequest+0xf0>)
 8010bb2:	5c9b      	ldrb	r3, [r3, r2]
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	4013      	ands	r3, r2
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d066      	beq.n	8010c8c <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 8010bbe:	1dfb      	adds	r3, r7, #7
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 8010bc4:	1dbb      	adds	r3, r7, #6
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010bca:	4b32      	ldr	r3, [pc, #200]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010bcc:	4a33      	ldr	r2, [pc, #204]	; (8010c9c <LoRaMacHandleMcpsRequest+0xf4>)
 8010bce:	5c9b      	ldrb	r3, [r3, r2]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d004      	beq.n	8010bde <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010bd4:	4b2f      	ldr	r3, [pc, #188]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010bd6:	4a31      	ldr	r2, [pc, #196]	; (8010c9c <LoRaMacHandleMcpsRequest+0xf4>)
 8010bd8:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010bda:	2b03      	cmp	r3, #3
 8010bdc:	d105      	bne.n	8010bea <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010bde:	1dfc      	adds	r4, r7, #7
 8010be0:	f002 fb70 	bl	80132c4 <CheckRetransUnconfirmedUplink>
 8010be4:	0003      	movs	r3, r0
 8010be6:	7023      	strb	r3, [r4, #0]
 8010be8:	e026      	b.n	8010c38 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010bea:	4b2a      	ldr	r3, [pc, #168]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010bec:	4a2b      	ldr	r2, [pc, #172]	; (8010c9c <LoRaMacHandleMcpsRequest+0xf4>)
 8010bee:	5c9b      	ldrb	r3, [r3, r2]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d121      	bne.n	8010c38 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 8010bf4:	4b27      	ldr	r3, [pc, #156]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010bf6:	4a2a      	ldr	r2, [pc, #168]	; (8010ca0 <LoRaMacHandleMcpsRequest+0xf8>)
 8010bf8:	5c9b      	ldrb	r3, [r3, r2]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d019      	beq.n	8010c32 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010bfe:	1dfc      	adds	r4, r7, #7
 8010c00:	f002 fb94 	bl	801332c <CheckRetransConfirmedUplink>
 8010c04:	0003      	movs	r3, r0
 8010c06:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8010c08:	4b22      	ldr	r3, [pc, #136]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010c0a:	4a26      	ldr	r2, [pc, #152]	; (8010ca4 <LoRaMacHandleMcpsRequest+0xfc>)
 8010c0c:	589a      	ldr	r2, [r3, r2]
 8010c0e:	23b1      	movs	r3, #177	; 0xb1
 8010c10:	005b      	lsls	r3, r3, #1
 8010c12:	5cd3      	ldrb	r3, [r2, r3]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d10f      	bne.n	8010c38 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 8010c18:	1dfb      	adds	r3, r7, #7
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	4053      	eors	r3, r2
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d002      	beq.n	8010c2c <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 8010c26:	f002 fbf5 	bl	8013414 <AckTimeoutRetriesProcess>
 8010c2a:	e005      	b.n	8010c38 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8010c2c:	f002 fc40 	bl	80134b0 <AckTimeoutRetriesFinalize>
 8010c30:	e002      	b.n	8010c38 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8010c32:	1dbb      	adds	r3, r7, #6
 8010c34:	2201      	movs	r2, #1
 8010c36:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 8010c38:	1dfb      	adds	r3, r7, #7
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d011      	beq.n	8010c64 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010c40:	4b19      	ldr	r3, [pc, #100]	; (8010ca8 <LoRaMacHandleMcpsRequest+0x100>)
 8010c42:	0018      	movs	r0, r3
 8010c44:	f00c fed6 	bl	801d9f4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010c48:	4a12      	ldr	r2, [pc, #72]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010c4a:	23d0      	movs	r3, #208	; 0xd0
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	58d3      	ldr	r3, [r2, r3]
 8010c50:	2220      	movs	r2, #32
 8010c52:	4393      	bics	r3, r2
 8010c54:	0019      	movs	r1, r3
 8010c56:	4a0f      	ldr	r2, [pc, #60]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010c58:	23d0      	movs	r3, #208	; 0xd0
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 8010c5e:	f002 fb8d 	bl	801337c <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010c62:	e013      	b.n	8010c8c <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 8010c64:	1dbb      	adds	r3, r7, #6
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	2201      	movs	r2, #1
 8010c6a:	4053      	eors	r3, r2
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00c      	beq.n	8010c8c <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010c72:	4b08      	ldr	r3, [pc, #32]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010c74:	4a08      	ldr	r2, [pc, #32]	; (8010c98 <LoRaMacHandleMcpsRequest+0xf0>)
 8010c76:	5c99      	ldrb	r1, [r3, r2]
 8010c78:	2020      	movs	r0, #32
 8010c7a:	4381      	bics	r1, r0
 8010c7c:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 8010c7e:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <LoRaMacHandleMcpsRequest+0xec>)
 8010c80:	4a07      	ldr	r2, [pc, #28]	; (8010ca0 <LoRaMacHandleMcpsRequest+0xf8>)
 8010c82:	2100      	movs	r1, #0
 8010c84:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 8010c86:	2000      	movs	r0, #0
 8010c88:	f000 f8a2 	bl	8010dd0 <OnTxDelayedTimerEvent>
}
 8010c8c:	46c0      	nop			; (mov r8, r8)
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	b003      	add	sp, #12
 8010c92:	bd90      	pop	{r4, r7, pc}
 8010c94:	200007d0 	.word	0x200007d0
 8010c98:	00000481 	.word	0x00000481
 8010c9c:	0000043c 	.word	0x0000043c
 8010ca0:	00000413 	.word	0x00000413
 8010ca4:	00000484 	.word	0x00000484
 8010ca8:	20000b38 	.word	0x20000b38

08010cac <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010cb0:	4b1d      	ldr	r3, [pc, #116]	; (8010d28 <LoRaMacHandleMlmeRequest+0x7c>)
 8010cb2:	4a1e      	ldr	r2, [pc, #120]	; (8010d2c <LoRaMacHandleMlmeRequest+0x80>)
 8010cb4:	5c9b      	ldrb	r3, [r3, r2]
 8010cb6:	2204      	movs	r2, #4
 8010cb8:	4013      	ands	r3, r2
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d02f      	beq.n	8010d20 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010cc0:	2001      	movs	r0, #1
 8010cc2:	f004 ffe9 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 8010cc6:	1e03      	subs	r3, r0, #0
 8010cc8:	d015      	beq.n	8010cf6 <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010cca:	2001      	movs	r0, #1
 8010ccc:	f004 ff7c 	bl	8015bc8 <LoRaMacConfirmQueueGetStatus>
 8010cd0:	1e03      	subs	r3, r0, #0
 8010cd2:	d104      	bne.n	8010cde <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010cd4:	4a14      	ldr	r2, [pc, #80]	; (8010d28 <LoRaMacHandleMlmeRequest+0x7c>)
 8010cd6:	2382      	movs	r3, #130	; 0x82
 8010cd8:	00db      	lsls	r3, r3, #3
 8010cda:	2100      	movs	r1, #0
 8010cdc:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010cde:	4a12      	ldr	r2, [pc, #72]	; (8010d28 <LoRaMacHandleMlmeRequest+0x7c>)
 8010ce0:	23d0      	movs	r3, #208	; 0xd0
 8010ce2:	009b      	lsls	r3, r3, #2
 8010ce4:	58d3      	ldr	r3, [r2, r3]
 8010ce6:	2202      	movs	r2, #2
 8010ce8:	4393      	bics	r3, r2
 8010cea:	0019      	movs	r1, r3
 8010cec:	4a0e      	ldr	r2, [pc, #56]	; (8010d28 <LoRaMacHandleMlmeRequest+0x7c>)
 8010cee:	23d0      	movs	r3, #208	; 0xd0
 8010cf0:	009b      	lsls	r3, r3, #2
 8010cf2:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 8010cf4:	e014      	b.n	8010d20 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010cf6:	2005      	movs	r0, #5
 8010cf8:	f004 ffce 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 8010cfc:	1e03      	subs	r3, r0, #0
 8010cfe:	d104      	bne.n	8010d0a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8010d00:	2006      	movs	r0, #6
 8010d02:	f004 ffc9 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 8010d06:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010d08:	d00a      	beq.n	8010d20 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010d0a:	4a07      	ldr	r2, [pc, #28]	; (8010d28 <LoRaMacHandleMlmeRequest+0x7c>)
 8010d0c:	23d0      	movs	r3, #208	; 0xd0
 8010d0e:	009b      	lsls	r3, r3, #2
 8010d10:	58d3      	ldr	r3, [r2, r3]
 8010d12:	2202      	movs	r2, #2
 8010d14:	4393      	bics	r3, r2
 8010d16:	0019      	movs	r1, r3
 8010d18:	4a03      	ldr	r2, [pc, #12]	; (8010d28 <LoRaMacHandleMlmeRequest+0x7c>)
 8010d1a:	23d0      	movs	r3, #208	; 0xd0
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	50d1      	str	r1, [r2, r3]
}
 8010d20:	46c0      	nop			; (mov r8, r8)
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	46c0      	nop			; (mov r8, r8)
 8010d28:	200007d0 	.word	0x200007d0
 8010d2c:	00000481 	.word	0x00000481

08010d30 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010d34:	200c      	movs	r0, #12
 8010d36:	f004 ffaf 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 8010d3a:	1e03      	subs	r3, r0, #0
 8010d3c:	d01c      	beq.n	8010d78 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010d3e:	4b10      	ldr	r3, [pc, #64]	; (8010d80 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010d40:	4a10      	ldr	r2, [pc, #64]	; (8010d84 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010d42:	5c9b      	ldrb	r3, [r3, r2]
 8010d44:	2201      	movs	r2, #1
 8010d46:	4013      	ands	r3, r2
 8010d48:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d114      	bne.n	8010d78 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010d4e:	4b0c      	ldr	r3, [pc, #48]	; (8010d80 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010d50:	4a0c      	ldr	r2, [pc, #48]	; (8010d84 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010d52:	5c9b      	ldrb	r3, [r3, r2]
 8010d54:	2204      	movs	r2, #4
 8010d56:	4013      	ands	r3, r2
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00c      	beq.n	8010d78 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010d5e:	4a08      	ldr	r2, [pc, #32]	; (8010d80 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010d60:	23d0      	movs	r3, #208	; 0xd0
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	58d3      	ldr	r3, [r2, r3]
 8010d66:	2202      	movs	r2, #2
 8010d68:	4393      	bics	r3, r2
 8010d6a:	0019      	movs	r1, r3
 8010d6c:	4a04      	ldr	r2, [pc, #16]	; (8010d80 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010d6e:	23d0      	movs	r3, #208	; 0xd0
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	50d1      	str	r1, [r2, r3]
            return 0x01;
 8010d74:	2301      	movs	r3, #1
 8010d76:	e000      	b.n	8010d7a <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 8010d78:	2300      	movs	r3, #0
}
 8010d7a:	0018      	movs	r0, r3
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}
 8010d80:	200007d0 	.word	0x200007d0
 8010d84:	00000481 	.word	0x00000481

08010d88 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010d8c:	4a0f      	ldr	r2, [pc, #60]	; (8010dcc <LoRaMacCheckForRxAbort+0x44>)
 8010d8e:	23d0      	movs	r3, #208	; 0xd0
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	58d3      	ldr	r3, [r2, r3]
 8010d94:	2280      	movs	r2, #128	; 0x80
 8010d96:	4013      	ands	r3, r2
 8010d98:	d015      	beq.n	8010dc6 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8010d9a:	4a0c      	ldr	r2, [pc, #48]	; (8010dcc <LoRaMacCheckForRxAbort+0x44>)
 8010d9c:	23d0      	movs	r3, #208	; 0xd0
 8010d9e:	009b      	lsls	r3, r3, #2
 8010da0:	58d3      	ldr	r3, [r2, r3]
 8010da2:	2280      	movs	r2, #128	; 0x80
 8010da4:	4393      	bics	r3, r2
 8010da6:	0019      	movs	r1, r3
 8010da8:	4a08      	ldr	r2, [pc, #32]	; (8010dcc <LoRaMacCheckForRxAbort+0x44>)
 8010daa:	23d0      	movs	r3, #208	; 0xd0
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010db0:	4a06      	ldr	r2, [pc, #24]	; (8010dcc <LoRaMacCheckForRxAbort+0x44>)
 8010db2:	23d0      	movs	r3, #208	; 0xd0
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	58d3      	ldr	r3, [r2, r3]
 8010db8:	2202      	movs	r2, #2
 8010dba:	4393      	bics	r3, r2
 8010dbc:	0019      	movs	r1, r3
 8010dbe:	4a03      	ldr	r2, [pc, #12]	; (8010dcc <LoRaMacCheckForRxAbort+0x44>)
 8010dc0:	23d0      	movs	r3, #208	; 0xd0
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	50d1      	str	r1, [r2, r3]
    }
}
 8010dc6:	46c0      	nop			; (mov r8, r8)
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	200007d0 	.word	0x200007d0

08010dd0 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010dd8:	4b19      	ldr	r3, [pc, #100]	; (8010e40 <OnTxDelayedTimerEvent+0x70>)
 8010dda:	0018      	movs	r0, r3
 8010ddc:	f00c fe0a 	bl	801d9f4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010de0:	4a18      	ldr	r2, [pc, #96]	; (8010e44 <OnTxDelayedTimerEvent+0x74>)
 8010de2:	23d0      	movs	r3, #208	; 0xd0
 8010de4:	009b      	lsls	r3, r3, #2
 8010de6:	58d3      	ldr	r3, [r2, r3]
 8010de8:	2220      	movs	r2, #32
 8010dea:	4393      	bics	r3, r2
 8010dec:	0019      	movs	r1, r3
 8010dee:	4a15      	ldr	r2, [pc, #84]	; (8010e44 <OnTxDelayedTimerEvent+0x74>)
 8010df0:	23d0      	movs	r3, #208	; 0xd0
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010df6:	2001      	movs	r0, #1
 8010df8:	f001 fb5a 	bl	80124b0 <ScheduleTx>
 8010dfc:	1e03      	subs	r3, r0, #0
 8010dfe:	d01a      	beq.n	8010e36 <OnTxDelayedTimerEvent+0x66>
 8010e00:	2b0b      	cmp	r3, #11
 8010e02:	d018      	beq.n	8010e36 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010e04:	4b0f      	ldr	r3, [pc, #60]	; (8010e44 <OnTxDelayedTimerEvent+0x74>)
 8010e06:	4a10      	ldr	r2, [pc, #64]	; (8010e48 <OnTxDelayedTimerEvent+0x78>)
 8010e08:	589b      	ldr	r3, [r3, r2]
 8010e0a:	2285      	movs	r2, #133	; 0x85
 8010e0c:	569b      	ldrsb	r3, [r3, r2]
 8010e0e:	b2d9      	uxtb	r1, r3
 8010e10:	4b0c      	ldr	r3, [pc, #48]	; (8010e44 <OnTxDelayedTimerEvent+0x74>)
 8010e12:	4a0e      	ldr	r2, [pc, #56]	; (8010e4c <OnTxDelayedTimerEvent+0x7c>)
 8010e14:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010e16:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <OnTxDelayedTimerEvent+0x74>)
 8010e18:	4a0d      	ldr	r2, [pc, #52]	; (8010e50 <OnTxDelayedTimerEvent+0x80>)
 8010e1a:	5c99      	ldrb	r1, [r3, r2]
 8010e1c:	4b09      	ldr	r3, [pc, #36]	; (8010e44 <OnTxDelayedTimerEvent+0x74>)
 8010e1e:	4a0d      	ldr	r2, [pc, #52]	; (8010e54 <OnTxDelayedTimerEvent+0x84>)
 8010e20:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010e22:	4b08      	ldr	r3, [pc, #32]	; (8010e44 <OnTxDelayedTimerEvent+0x74>)
 8010e24:	4a0c      	ldr	r2, [pc, #48]	; (8010e58 <OnTxDelayedTimerEvent+0x88>)
 8010e26:	2109      	movs	r1, #9
 8010e28:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010e2a:	2009      	movs	r0, #9
 8010e2c:	f004 fefa 	bl	8015c24 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010e30:	f002 faa4 	bl	801337c <StopRetransmission>
            break;
 8010e34:	e000      	b.n	8010e38 <OnTxDelayedTimerEvent+0x68>
            break;
 8010e36:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8010e38:	46c0      	nop			; (mov r8, r8)
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	b002      	add	sp, #8
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	20000b38 	.word	0x20000b38
 8010e44:	200007d0 	.word	0x200007d0
 8010e48:	00000484 	.word	0x00000484
 8010e4c:	0000043e 	.word	0x0000043e
 8010e50:	00000412 	.word	0x00000412
 8010e54:	00000441 	.word	0x00000441
 8010e58:	0000043d 	.word	0x0000043d

08010e5c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010e64:	4b19      	ldr	r3, [pc, #100]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010e66:	4a1a      	ldr	r2, [pc, #104]	; (8010ed0 <OnRxWindow1TimerEvent+0x74>)
 8010e68:	5c99      	ldrb	r1, [r3, r2]
 8010e6a:	4a18      	ldr	r2, [pc, #96]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010e6c:	23ee      	movs	r3, #238	; 0xee
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8010e72:	4b16      	ldr	r3, [pc, #88]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010e74:	4a17      	ldr	r2, [pc, #92]	; (8010ed4 <OnRxWindow1TimerEvent+0x78>)
 8010e76:	589b      	ldr	r3, [r3, r2]
 8010e78:	22a5      	movs	r2, #165	; 0xa5
 8010e7a:	5c9b      	ldrb	r3, [r3, r2]
 8010e7c:	b259      	sxtb	r1, r3
 8010e7e:	4b13      	ldr	r3, [pc, #76]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010e80:	4a15      	ldr	r2, [pc, #84]	; (8010ed8 <OnRxWindow1TimerEvent+0x7c>)
 8010e82:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010e84:	4b11      	ldr	r3, [pc, #68]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010e86:	4a13      	ldr	r2, [pc, #76]	; (8010ed4 <OnRxWindow1TimerEvent+0x78>)
 8010e88:	589b      	ldr	r3, [r3, r2]
 8010e8a:	22b9      	movs	r2, #185	; 0xb9
 8010e8c:	5c99      	ldrb	r1, [r3, r2]
 8010e8e:	4a0f      	ldr	r2, [pc, #60]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010e90:	23f2      	movs	r3, #242	; 0xf2
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010e96:	4b0d      	ldr	r3, [pc, #52]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010e98:	4a0e      	ldr	r2, [pc, #56]	; (8010ed4 <OnRxWindow1TimerEvent+0x78>)
 8010e9a:	589b      	ldr	r3, [r3, r2]
 8010e9c:	22ca      	movs	r2, #202	; 0xca
 8010e9e:	5c99      	ldrb	r1, [r3, r2]
 8010ea0:	4b0a      	ldr	r3, [pc, #40]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010ea2:	4a0e      	ldr	r2, [pc, #56]	; (8010edc <OnRxWindow1TimerEvent+0x80>)
 8010ea4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010ea6:	4b09      	ldr	r3, [pc, #36]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010ea8:	4a0d      	ldr	r2, [pc, #52]	; (8010ee0 <OnRxWindow1TimerEvent+0x84>)
 8010eaa:	2100      	movs	r1, #0
 8010eac:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010eae:	4b07      	ldr	r3, [pc, #28]	; (8010ecc <OnRxWindow1TimerEvent+0x70>)
 8010eb0:	4a0c      	ldr	r2, [pc, #48]	; (8010ee4 <OnRxWindow1TimerEvent+0x88>)
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010eb6:	4a0c      	ldr	r2, [pc, #48]	; (8010ee8 <OnRxWindow1TimerEvent+0x8c>)
 8010eb8:	4b0c      	ldr	r3, [pc, #48]	; (8010eec <OnRxWindow1TimerEvent+0x90>)
 8010eba:	0011      	movs	r1, r2
 8010ebc:	0018      	movs	r0, r3
 8010ebe:	f001 fd9d 	bl	80129fc <RxWindowSetup>
}
 8010ec2:	46c0      	nop			; (mov r8, r8)
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	b002      	add	sp, #8
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	46c0      	nop			; (mov r8, r8)
 8010ecc:	200007d0 	.word	0x200007d0
 8010ed0:	00000415 	.word	0x00000415
 8010ed4:	00000484 	.word	0x00000484
 8010ed8:	000003bb 	.word	0x000003bb
 8010edc:	000003c9 	.word	0x000003c9
 8010ee0:	000003ca 	.word	0x000003ca
 8010ee4:	000003cb 	.word	0x000003cb
 8010ee8:	20000b88 	.word	0x20000b88
 8010eec:	20000b50 	.word	0x20000b50

08010ef0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010ef8:	4a1c      	ldr	r2, [pc, #112]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010efa:	2390      	movs	r3, #144	; 0x90
 8010efc:	00db      	lsls	r3, r3, #3
 8010efe:	5cd3      	ldrb	r3, [r2, r3]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d02f      	beq.n	8010f64 <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010f04:	4b19      	ldr	r3, [pc, #100]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f06:	4a1a      	ldr	r2, [pc, #104]	; (8010f70 <OnRxWindow2TimerEvent+0x80>)
 8010f08:	5c99      	ldrb	r1, [r3, r2]
 8010f0a:	4a18      	ldr	r2, [pc, #96]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f0c:	23f3      	movs	r3, #243	; 0xf3
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8010f12:	4b16      	ldr	r3, [pc, #88]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f14:	4a17      	ldr	r2, [pc, #92]	; (8010f74 <OnRxWindow2TimerEvent+0x84>)
 8010f16:	589b      	ldr	r3, [r3, r2]
 8010f18:	22a8      	movs	r2, #168	; 0xa8
 8010f1a:	5899      	ldr	r1, [r3, r2]
 8010f1c:	4a13      	ldr	r2, [pc, #76]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f1e:	23f4      	movs	r3, #244	; 0xf4
 8010f20:	009b      	lsls	r3, r3, #2
 8010f22:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010f24:	4b11      	ldr	r3, [pc, #68]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f26:	4a13      	ldr	r2, [pc, #76]	; (8010f74 <OnRxWindow2TimerEvent+0x84>)
 8010f28:	589b      	ldr	r3, [r3, r2]
 8010f2a:	22b9      	movs	r2, #185	; 0xb9
 8010f2c:	5c99      	ldrb	r1, [r3, r2]
 8010f2e:	4a0f      	ldr	r2, [pc, #60]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f30:	23f7      	movs	r3, #247	; 0xf7
 8010f32:	009b      	lsls	r3, r3, #2
 8010f34:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010f36:	4b0d      	ldr	r3, [pc, #52]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f38:	4a0e      	ldr	r2, [pc, #56]	; (8010f74 <OnRxWindow2TimerEvent+0x84>)
 8010f3a:	589b      	ldr	r3, [r3, r2]
 8010f3c:	22ca      	movs	r2, #202	; 0xca
 8010f3e:	5c99      	ldrb	r1, [r3, r2]
 8010f40:	4b0a      	ldr	r3, [pc, #40]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f42:	4a0d      	ldr	r2, [pc, #52]	; (8010f78 <OnRxWindow2TimerEvent+0x88>)
 8010f44:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010f46:	4b09      	ldr	r3, [pc, #36]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f48:	4a0c      	ldr	r2, [pc, #48]	; (8010f7c <OnRxWindow2TimerEvent+0x8c>)
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010f4e:	4b07      	ldr	r3, [pc, #28]	; (8010f6c <OnRxWindow2TimerEvent+0x7c>)
 8010f50:	4a0b      	ldr	r2, [pc, #44]	; (8010f80 <OnRxWindow2TimerEvent+0x90>)
 8010f52:	2101      	movs	r1, #1
 8010f54:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010f56:	4a0b      	ldr	r2, [pc, #44]	; (8010f84 <OnRxWindow2TimerEvent+0x94>)
 8010f58:	4b0b      	ldr	r3, [pc, #44]	; (8010f88 <OnRxWindow2TimerEvent+0x98>)
 8010f5a:	0011      	movs	r1, r2
 8010f5c:	0018      	movs	r0, r3
 8010f5e:	f001 fd4d 	bl	80129fc <RxWindowSetup>
 8010f62:	e000      	b.n	8010f66 <OnRxWindow2TimerEvent+0x76>
        return;
 8010f64:	46c0      	nop			; (mov r8, r8)
}
 8010f66:	46bd      	mov	sp, r7
 8010f68:	b002      	add	sp, #8
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	200007d0 	.word	0x200007d0
 8010f70:	00000415 	.word	0x00000415
 8010f74:	00000484 	.word	0x00000484
 8010f78:	000003dd 	.word	0x000003dd
 8010f7c:	000003de 	.word	0x000003de
 8010f80:	000003df 	.word	0x000003df
 8010f84:	20000b9c 	.word	0x20000b9c
 8010f88:	20000b68 	.word	0x20000b68

08010f8c <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010f94:	4b18      	ldr	r3, [pc, #96]	; (8010ff8 <OnAckTimeoutTimerEvent+0x6c>)
 8010f96:	0018      	movs	r0, r3
 8010f98:	f00c fd2c 	bl	801d9f4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010f9c:	4b17      	ldr	r3, [pc, #92]	; (8010ffc <OnAckTimeoutTimerEvent+0x70>)
 8010f9e:	4a18      	ldr	r2, [pc, #96]	; (8011000 <OnAckTimeoutTimerEvent+0x74>)
 8010fa0:	5c9b      	ldrb	r3, [r3, r2]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d003      	beq.n	8010fae <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 8010fa6:	4b15      	ldr	r3, [pc, #84]	; (8010ffc <OnAckTimeoutTimerEvent+0x70>)
 8010fa8:	4a16      	ldr	r2, [pc, #88]	; (8011004 <OnAckTimeoutTimerEvent+0x78>)
 8010faa:	2101      	movs	r1, #1
 8010fac:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8010fae:	4b13      	ldr	r3, [pc, #76]	; (8010ffc <OnAckTimeoutTimerEvent+0x70>)
 8010fb0:	4a15      	ldr	r2, [pc, #84]	; (8011008 <OnAckTimeoutTimerEvent+0x7c>)
 8010fb2:	589b      	ldr	r3, [r3, r2]
 8010fb4:	227c      	movs	r2, #124	; 0x7c
 8010fb6:	5c9b      	ldrb	r3, [r3, r2]
 8010fb8:	2b02      	cmp	r3, #2
 8010fba:	d105      	bne.n	8010fc8 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010fbc:	4b0f      	ldr	r3, [pc, #60]	; (8010ffc <OnAckTimeoutTimerEvent+0x70>)
 8010fbe:	4a13      	ldr	r2, [pc, #76]	; (801100c <OnAckTimeoutTimerEvent+0x80>)
 8010fc0:	5c99      	ldrb	r1, [r3, r2]
 8010fc2:	2020      	movs	r0, #32
 8010fc4:	4301      	orrs	r1, r0
 8010fc6:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010fc8:	4a0c      	ldr	r2, [pc, #48]	; (8010ffc <OnAckTimeoutTimerEvent+0x70>)
 8010fca:	23d2      	movs	r3, #210	; 0xd2
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	58d3      	ldr	r3, [r2, r3]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d00c      	beq.n	8010fee <OnAckTimeoutTimerEvent+0x62>
 8010fd4:	4a09      	ldr	r2, [pc, #36]	; (8010ffc <OnAckTimeoutTimerEvent+0x70>)
 8010fd6:	23d2      	movs	r3, #210	; 0xd2
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	58d3      	ldr	r3, [r2, r3]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d005      	beq.n	8010fee <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010fe2:	4a06      	ldr	r2, [pc, #24]	; (8010ffc <OnAckTimeoutTimerEvent+0x70>)
 8010fe4:	23d2      	movs	r3, #210	; 0xd2
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	58d3      	ldr	r3, [r2, r3]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	4798      	blx	r3
    }
}
 8010fee:	46c0      	nop			; (mov r8, r8)
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	b002      	add	sp, #8
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	46c0      	nop			; (mov r8, r8)
 8010ff8:	20000bc8 	.word	0x20000bc8
 8010ffc:	200007d0 	.word	0x200007d0
 8011000:	00000414 	.word	0x00000414
 8011004:	00000413 	.word	0x00000413
 8011008:	00000484 	.word	0x00000484
 801100c:	00000481 	.word	0x00000481

08011010 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011010:	b590      	push	{r4, r7, lr}
 8011012:	b085      	sub	sp, #20
 8011014:	af00      	add	r7, sp, #0
 8011016:	60ba      	str	r2, [r7, #8]
 8011018:	607b      	str	r3, [r7, #4]
 801101a:	230f      	movs	r3, #15
 801101c:	18fb      	adds	r3, r7, r3
 801101e:	1c02      	adds	r2, r0, #0
 8011020:	701a      	strb	r2, [r3, #0]
 8011022:	230e      	movs	r3, #14
 8011024:	18fb      	adds	r3, r7, r3
 8011026:	1c0a      	adds	r2, r1, #0
 8011028:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d005      	beq.n	801103c <GetFCntDown+0x2c>
 8011030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011032:	2b00      	cmp	r3, #0
 8011034:	d002      	beq.n	801103c <GetFCntDown+0x2c>
 8011036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011038:	2b00      	cmp	r3, #0
 801103a:	d101      	bne.n	8011040 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801103c:	230a      	movs	r3, #10
 801103e:	e033      	b.n	80110a8 <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8011040:	230f      	movs	r3, #15
 8011042:	18fb      	adds	r3, r7, r3
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d01a      	beq.n	8011080 <GetFCntDown+0x70>
 801104a:	2b01      	cmp	r3, #1
 801104c:	d11c      	bne.n	8011088 <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801104e:	1d3b      	adds	r3, r7, #4
 8011050:	789b      	ldrb	r3, [r3, #2]
 8011052:	2b01      	cmp	r3, #1
 8011054:	d110      	bne.n	8011078 <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8011056:	220e      	movs	r2, #14
 8011058:	18bb      	adds	r3, r7, r2
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d003      	beq.n	8011068 <GetFCntDown+0x58>
 8011060:	18bb      	adds	r3, r7, r2
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	2b03      	cmp	r3, #3
 8011066:	d103      	bne.n	8011070 <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 8011068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106a:	2202      	movs	r2, #2
 801106c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801106e:	e00d      	b.n	801108c <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 8011070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011072:	2201      	movs	r2, #1
 8011074:	701a      	strb	r2, [r3, #0]
            break;
 8011076:	e009      	b.n	801108c <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 8011078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107a:	2203      	movs	r2, #3
 801107c:	701a      	strb	r2, [r3, #0]
            break;
 801107e:	e005      	b.n	801108c <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8011080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011082:	2204      	movs	r2, #4
 8011084:	701a      	strb	r2, [r3, #0]
            break;
 8011086:	e001      	b.n	801108c <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011088:	2305      	movs	r3, #5
 801108a:	e00d      	b.n	80110a8 <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 801108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108e:	7818      	ldrb	r0, [r3, #0]
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	89db      	ldrh	r3, [r3, #14]
 8011094:	001c      	movs	r4, r3
 8011096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011098:	2320      	movs	r3, #32
 801109a:	18fb      	adds	r3, r7, r3
 801109c:	8819      	ldrh	r1, [r3, #0]
 801109e:	0013      	movs	r3, r2
 80110a0:	0022      	movs	r2, r4
 80110a2:	f005 faa1 	bl	80165e8 <LoRaMacCryptoGetFCntDown>
 80110a6:	0003      	movs	r3, r0
}
 80110a8:	0018      	movs	r0, r3
 80110aa:	46bd      	mov	sp, r7
 80110ac:	b005      	add	sp, #20
 80110ae:	bd90      	pop	{r4, r7, pc}

080110b0 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80110b0:	b5b0      	push	{r4, r5, r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	0002      	movs	r2, r0
 80110b8:	1dfb      	adds	r3, r7, #7
 80110ba:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80110bc:	230f      	movs	r3, #15
 80110be:	18fb      	adds	r3, r7, r3
 80110c0:	2203      	movs	r2, #3
 80110c2:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 80110c4:	4b82      	ldr	r3, [pc, #520]	; (80112d0 <SwitchClass+0x220>)
 80110c6:	4a83      	ldr	r2, [pc, #524]	; (80112d4 <SwitchClass+0x224>)
 80110c8:	589b      	ldr	r3, [r3, r2]
 80110ca:	227c      	movs	r2, #124	; 0x7c
 80110cc:	5c9b      	ldrb	r3, [r3, r2]
 80110ce:	2b02      	cmp	r3, #2
 80110d0:	d100      	bne.n	80110d4 <SwitchClass+0x24>
 80110d2:	e0de      	b.n	8011292 <SwitchClass+0x1e2>
 80110d4:	dd00      	ble.n	80110d8 <SwitchClass+0x28>
 80110d6:	e0f4      	b.n	80112c2 <SwitchClass+0x212>
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d003      	beq.n	80110e4 <SwitchClass+0x34>
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d100      	bne.n	80110e2 <SwitchClass+0x32>
 80110e0:	e0c2      	b.n	8011268 <SwitchClass+0x1b8>
 80110e2:	e0ee      	b.n	80112c2 <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80110e4:	1dfb      	adds	r3, r7, #7
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d10b      	bne.n	8011104 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80110ec:	4b78      	ldr	r3, [pc, #480]	; (80112d0 <SwitchClass+0x220>)
 80110ee:	4a79      	ldr	r2, [pc, #484]	; (80112d4 <SwitchClass+0x224>)
 80110f0:	589a      	ldr	r2, [r3, r2]
 80110f2:	4b77      	ldr	r3, [pc, #476]	; (80112d0 <SwitchClass+0x220>)
 80110f4:	4977      	ldr	r1, [pc, #476]	; (80112d4 <SwitchClass+0x224>)
 80110f6:	585b      	ldr	r3, [r3, r1]
 80110f8:	20b0      	movs	r0, #176	; 0xb0
 80110fa:	21a8      	movs	r1, #168	; 0xa8
 80110fc:	181b      	adds	r3, r3, r0
 80110fe:	1852      	adds	r2, r2, r1
 8011100:	ca03      	ldmia	r2!, {r0, r1}
 8011102:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8011104:	1dfb      	adds	r3, r7, #7
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	2b01      	cmp	r3, #1
 801110a:	d113      	bne.n	8011134 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 801110c:	250f      	movs	r5, #15
 801110e:	197c      	adds	r4, r7, r5
 8011110:	1dfb      	adds	r3, r7, #7
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	0018      	movs	r0, r3
 8011116:	f004 f86d 	bl	80151f4 <LoRaMacClassBSwitchClass>
 801111a:	0003      	movs	r3, r0
 801111c:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 801111e:	197b      	adds	r3, r7, r5
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d106      	bne.n	8011134 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 8011126:	4b6a      	ldr	r3, [pc, #424]	; (80112d0 <SwitchClass+0x220>)
 8011128:	4a6a      	ldr	r2, [pc, #424]	; (80112d4 <SwitchClass+0x224>)
 801112a:	589b      	ldr	r3, [r3, r2]
 801112c:	1dfa      	adds	r2, r7, #7
 801112e:	217c      	movs	r1, #124	; 0x7c
 8011130:	7812      	ldrb	r2, [r2, #0]
 8011132:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 8011134:	1dfb      	adds	r3, r7, #7
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	2b02      	cmp	r3, #2
 801113a:	d000      	beq.n	801113e <SwitchClass+0x8e>
 801113c:	e0bc      	b.n	80112b8 <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 801113e:	4b64      	ldr	r3, [pc, #400]	; (80112d0 <SwitchClass+0x220>)
 8011140:	4a64      	ldr	r2, [pc, #400]	; (80112d4 <SwitchClass+0x224>)
 8011142:	589b      	ldr	r3, [r3, r2]
 8011144:	1dfa      	adds	r2, r7, #7
 8011146:	217c      	movs	r1, #124	; 0x7c
 8011148:	7812      	ldrb	r2, [r2, #0]
 801114a:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801114c:	4860      	ldr	r0, [pc, #384]	; (80112d0 <SwitchClass+0x220>)
 801114e:	23f8      	movs	r3, #248	; 0xf8
 8011150:	009b      	lsls	r3, r3, #2
 8011152:	495f      	ldr	r1, [pc, #380]	; (80112d0 <SwitchClass+0x220>)
 8011154:	22f3      	movs	r2, #243	; 0xf3
 8011156:	0092      	lsls	r2, r2, #2
 8011158:	18c3      	adds	r3, r0, r3
 801115a:	188a      	adds	r2, r1, r2
 801115c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801115e:	c313      	stmia	r3!, {r0, r1, r4}
 8011160:	ca03      	ldmia	r2!, {r0, r1}
 8011162:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011164:	4b5a      	ldr	r3, [pc, #360]	; (80112d0 <SwitchClass+0x220>)
 8011166:	4a5c      	ldr	r2, [pc, #368]	; (80112d8 <SwitchClass+0x228>)
 8011168:	2102      	movs	r1, #2
 801116a:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801116c:	230e      	movs	r3, #14
 801116e:	18fb      	adds	r3, r7, r3
 8011170:	2200      	movs	r2, #0
 8011172:	701a      	strb	r2, [r3, #0]
 8011174:	e064      	b.n	8011240 <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8011176:	4b56      	ldr	r3, [pc, #344]	; (80112d0 <SwitchClass+0x220>)
 8011178:	4a56      	ldr	r2, [pc, #344]	; (80112d4 <SwitchClass+0x224>)
 801117a:	589a      	ldr	r2, [r3, r2]
 801117c:	240e      	movs	r4, #14
 801117e:	193b      	adds	r3, r7, r4
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	b25b      	sxtb	r3, r3
 8011184:	2152      	movs	r1, #82	; 0x52
 8011186:	202c      	movs	r0, #44	; 0x2c
 8011188:	4343      	muls	r3, r0
 801118a:	18d3      	adds	r3, r2, r3
 801118c:	185b      	adds	r3, r3, r1
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d04c      	beq.n	801122e <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8011194:	4b4e      	ldr	r3, [pc, #312]	; (80112d0 <SwitchClass+0x220>)
 8011196:	4a4f      	ldr	r2, [pc, #316]	; (80112d4 <SwitchClass+0x224>)
 8011198:	5899      	ldr	r1, [r3, r2]
 801119a:	193b      	adds	r3, r7, r4
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	b25b      	sxtb	r3, r3
 80111a0:	4a4b      	ldr	r2, [pc, #300]	; (80112d0 <SwitchClass+0x220>)
 80111a2:	484c      	ldr	r0, [pc, #304]	; (80112d4 <SwitchClass+0x224>)
 80111a4:	5812      	ldr	r2, [r2, r0]
 80111a6:	202c      	movs	r0, #44	; 0x2c
 80111a8:	4343      	muls	r3, r0
 80111aa:	18cb      	adds	r3, r1, r3
 80111ac:	3368      	adds	r3, #104	; 0x68
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	21b0      	movs	r1, #176	; 0xb0
 80111b2:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80111b4:	4b46      	ldr	r3, [pc, #280]	; (80112d0 <SwitchClass+0x220>)
 80111b6:	4a47      	ldr	r2, [pc, #284]	; (80112d4 <SwitchClass+0x224>)
 80111b8:	589a      	ldr	r2, [r3, r2]
 80111ba:	193b      	adds	r3, r7, r4
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	b25b      	sxtb	r3, r3
 80111c0:	216c      	movs	r1, #108	; 0x6c
 80111c2:	202c      	movs	r0, #44	; 0x2c
 80111c4:	4343      	muls	r3, r0
 80111c6:	18d3      	adds	r3, r2, r3
 80111c8:	185b      	adds	r3, r3, r1
 80111ca:	2100      	movs	r1, #0
 80111cc:	5659      	ldrsb	r1, [r3, r1]
 80111ce:	4b40      	ldr	r3, [pc, #256]	; (80112d0 <SwitchClass+0x220>)
 80111d0:	4a40      	ldr	r2, [pc, #256]	; (80112d4 <SwitchClass+0x224>)
 80111d2:	589b      	ldr	r3, [r3, r2]
 80111d4:	b2c9      	uxtb	r1, r1
 80111d6:	22b4      	movs	r2, #180	; 0xb4
 80111d8:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80111da:	4b3d      	ldr	r3, [pc, #244]	; (80112d0 <SwitchClass+0x220>)
 80111dc:	4a3f      	ldr	r2, [pc, #252]	; (80112dc <SwitchClass+0x22c>)
 80111de:	5c99      	ldrb	r1, [r3, r2]
 80111e0:	4a3b      	ldr	r2, [pc, #236]	; (80112d0 <SwitchClass+0x220>)
 80111e2:	23f8      	movs	r3, #248	; 0xf8
 80111e4:	009b      	lsls	r3, r3, #2
 80111e6:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80111e8:	4b39      	ldr	r3, [pc, #228]	; (80112d0 <SwitchClass+0x220>)
 80111ea:	4a3a      	ldr	r2, [pc, #232]	; (80112d4 <SwitchClass+0x224>)
 80111ec:	589b      	ldr	r3, [r3, r2]
 80111ee:	22b0      	movs	r2, #176	; 0xb0
 80111f0:	5899      	ldr	r1, [r3, r2]
 80111f2:	4a37      	ldr	r2, [pc, #220]	; (80112d0 <SwitchClass+0x220>)
 80111f4:	23f9      	movs	r3, #249	; 0xf9
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80111fa:	4b35      	ldr	r3, [pc, #212]	; (80112d0 <SwitchClass+0x220>)
 80111fc:	4a35      	ldr	r2, [pc, #212]	; (80112d4 <SwitchClass+0x224>)
 80111fe:	589b      	ldr	r3, [r3, r2]
 8011200:	22b9      	movs	r2, #185	; 0xb9
 8011202:	5c99      	ldrb	r1, [r3, r2]
 8011204:	4a32      	ldr	r2, [pc, #200]	; (80112d0 <SwitchClass+0x220>)
 8011206:	23fc      	movs	r3, #252	; 0xfc
 8011208:	009b      	lsls	r3, r3, #2
 801120a:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801120c:	4b30      	ldr	r3, [pc, #192]	; (80112d0 <SwitchClass+0x220>)
 801120e:	4a31      	ldr	r2, [pc, #196]	; (80112d4 <SwitchClass+0x224>)
 8011210:	589b      	ldr	r3, [r3, r2]
 8011212:	22ca      	movs	r2, #202	; 0xca
 8011214:	5c99      	ldrb	r1, [r3, r2]
 8011216:	4b2e      	ldr	r3, [pc, #184]	; (80112d0 <SwitchClass+0x220>)
 8011218:	4a31      	ldr	r2, [pc, #196]	; (80112e0 <SwitchClass+0x230>)
 801121a:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801121c:	4b2c      	ldr	r3, [pc, #176]	; (80112d0 <SwitchClass+0x220>)
 801121e:	4a2e      	ldr	r2, [pc, #184]	; (80112d8 <SwitchClass+0x228>)
 8011220:	2103      	movs	r1, #3
 8011222:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011224:	4b2a      	ldr	r3, [pc, #168]	; (80112d0 <SwitchClass+0x220>)
 8011226:	4a2f      	ldr	r2, [pc, #188]	; (80112e4 <SwitchClass+0x234>)
 8011228:	2101      	movs	r1, #1
 801122a:	5499      	strb	r1, [r3, r2]
                        break;
 801122c:	e00e      	b.n	801124c <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801122e:	210e      	movs	r1, #14
 8011230:	187b      	adds	r3, r7, r1
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	b25b      	sxtb	r3, r3
 8011236:	b2db      	uxtb	r3, r3
 8011238:	3301      	adds	r3, #1
 801123a:	b2da      	uxtb	r2, r3
 801123c:	187b      	adds	r3, r7, r1
 801123e:	701a      	strb	r2, [r3, #0]
 8011240:	230e      	movs	r3, #14
 8011242:	18fb      	adds	r3, r7, r3
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	b25b      	sxtb	r3, r3
 8011248:	2b00      	cmp	r3, #0
 801124a:	dd94      	ble.n	8011176 <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 801124c:	4b20      	ldr	r3, [pc, #128]	; (80112d0 <SwitchClass+0x220>)
 801124e:	4a26      	ldr	r2, [pc, #152]	; (80112e8 <SwitchClass+0x238>)
 8011250:	2100      	movs	r1, #0
 8011252:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8011254:	4b25      	ldr	r3, [pc, #148]	; (80112ec <SwitchClass+0x23c>)
 8011256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011258:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801125a:	f001 fc01 	bl	8012a60 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 801125e:	230f      	movs	r3, #15
 8011260:	18fb      	adds	r3, r7, r3
 8011262:	2200      	movs	r2, #0
 8011264:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011266:	e027      	b.n	80112b8 <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011268:	250f      	movs	r5, #15
 801126a:	197c      	adds	r4, r7, r5
 801126c:	1dfb      	adds	r3, r7, #7
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	0018      	movs	r0, r3
 8011272:	f003 ffbf 	bl	80151f4 <LoRaMacClassBSwitchClass>
 8011276:	0003      	movs	r3, r0
 8011278:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 801127a:	197b      	adds	r3, r7, r5
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d11c      	bne.n	80112bc <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8011282:	4b13      	ldr	r3, [pc, #76]	; (80112d0 <SwitchClass+0x220>)
 8011284:	4a13      	ldr	r2, [pc, #76]	; (80112d4 <SwitchClass+0x224>)
 8011286:	589b      	ldr	r3, [r3, r2]
 8011288:	1dfa      	adds	r2, r7, #7
 801128a:	217c      	movs	r1, #124	; 0x7c
 801128c:	7812      	ldrb	r2, [r2, #0]
 801128e:	545a      	strb	r2, [r3, r1]
            }
            break;
 8011290:	e014      	b.n	80112bc <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8011292:	1dfb      	adds	r3, r7, #7
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d112      	bne.n	80112c0 <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 801129a:	4b0d      	ldr	r3, [pc, #52]	; (80112d0 <SwitchClass+0x220>)
 801129c:	4a0d      	ldr	r2, [pc, #52]	; (80112d4 <SwitchClass+0x224>)
 801129e:	589b      	ldr	r3, [r3, r2]
 80112a0:	1dfa      	adds	r2, r7, #7
 80112a2:	217c      	movs	r1, #124	; 0x7c
 80112a4:	7812      	ldrb	r2, [r2, #0]
 80112a6:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80112a8:	4b10      	ldr	r3, [pc, #64]	; (80112ec <SwitchClass+0x23c>)
 80112aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ac:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80112ae:	230f      	movs	r3, #15
 80112b0:	18fb      	adds	r3, r7, r3
 80112b2:	2200      	movs	r2, #0
 80112b4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80112b6:	e003      	b.n	80112c0 <SwitchClass+0x210>
            break;
 80112b8:	46c0      	nop			; (mov r8, r8)
 80112ba:	e002      	b.n	80112c2 <SwitchClass+0x212>
            break;
 80112bc:	46c0      	nop			; (mov r8, r8)
 80112be:	e000      	b.n	80112c2 <SwitchClass+0x212>
            break;
 80112c0:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 80112c2:	230f      	movs	r3, #15
 80112c4:	18fb      	adds	r3, r7, r3
 80112c6:	781b      	ldrb	r3, [r3, #0]
}
 80112c8:	0018      	movs	r0, r3
 80112ca:	46bd      	mov	sp, r7
 80112cc:	b004      	add	sp, #16
 80112ce:	bdb0      	pop	{r4, r5, r7, pc}
 80112d0:	200007d0 	.word	0x200007d0
 80112d4:	00000484 	.word	0x00000484
 80112d8:	000003f3 	.word	0x000003f3
 80112dc:	00000415 	.word	0x00000415
 80112e0:	000003f1 	.word	0x000003f1
 80112e4:	000003f2 	.word	0x000003f2
 80112e8:	00000414 	.word	0x00000414
 80112ec:	08021740 	.word	0x08021740

080112f0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b086      	sub	sp, #24
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	0002      	movs	r2, r0
 80112f8:	1dfb      	adds	r3, r7, #7
 80112fa:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80112fc:	4b17      	ldr	r3, [pc, #92]	; (801135c <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 80112fe:	4a18      	ldr	r2, [pc, #96]	; (8011360 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8011300:	589b      	ldr	r3, [r3, r2]
 8011302:	22b8      	movs	r2, #184	; 0xb8
 8011304:	5c9a      	ldrb	r2, [r3, r2]
 8011306:	2110      	movs	r1, #16
 8011308:	187b      	adds	r3, r7, r1
 801130a:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 801130c:	187b      	adds	r3, r7, r1
 801130e:	1dfa      	adds	r2, r7, #7
 8011310:	7812      	ldrb	r2, [r2, #0]
 8011312:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011314:	187b      	adds	r3, r7, r1
 8011316:	220d      	movs	r2, #13
 8011318:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 801131a:	4b10      	ldr	r3, [pc, #64]	; (801135c <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 801131c:	4a10      	ldr	r2, [pc, #64]	; (8011360 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 801131e:	589b      	ldr	r3, [r3, r2]
 8011320:	22ca      	movs	r2, #202	; 0xca
 8011322:	5c9b      	ldrb	r3, [r3, r2]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d002      	beq.n	801132e <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011328:	187b      	adds	r3, r7, r1
 801132a:	220e      	movs	r2, #14
 801132c:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801132e:	4b0b      	ldr	r3, [pc, #44]	; (801135c <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8011330:	4a0b      	ldr	r2, [pc, #44]	; (8011360 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8011332:	589b      	ldr	r3, [r3, r2]
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	2210      	movs	r2, #16
 8011338:	18ba      	adds	r2, r7, r2
 801133a:	0011      	movs	r1, r2
 801133c:	0018      	movs	r0, r3
 801133e:	f006 f8c8 	bl	80174d2 <RegionGetPhyParam>
 8011342:	0003      	movs	r3, r0
 8011344:	001a      	movs	r2, r3
 8011346:	210c      	movs	r1, #12
 8011348:	187b      	adds	r3, r7, r1
 801134a:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 801134c:	187b      	adds	r3, r7, r1
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	b2db      	uxtb	r3, r3
}
 8011352:	0018      	movs	r0, r3
 8011354:	46bd      	mov	sp, r7
 8011356:	b006      	add	sp, #24
 8011358:	bd80      	pop	{r7, pc}
 801135a:	46c0      	nop			; (mov r8, r8)
 801135c:	200007d0 	.word	0x200007d0
 8011360:	00000484 	.word	0x00000484

08011364 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011364:	b5b0      	push	{r4, r5, r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	0004      	movs	r4, r0
 801136c:	0008      	movs	r0, r1
 801136e:	0011      	movs	r1, r2
 8011370:	1dfb      	adds	r3, r7, #7
 8011372:	1c22      	adds	r2, r4, #0
 8011374:	701a      	strb	r2, [r3, #0]
 8011376:	1dbb      	adds	r3, r7, #6
 8011378:	1c02      	adds	r2, r0, #0
 801137a:	701a      	strb	r2, [r3, #0]
 801137c:	1d7b      	adds	r3, r7, #5
 801137e:	1c0a      	adds	r2, r1, #0
 8011380:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 8011382:	250e      	movs	r5, #14
 8011384:	197b      	adds	r3, r7, r5
 8011386:	2200      	movs	r2, #0
 8011388:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 801138a:	240c      	movs	r4, #12
 801138c:	193b      	adds	r3, r7, r4
 801138e:	2200      	movs	r2, #0
 8011390:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011392:	1dbb      	adds	r3, r7, #6
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	b25b      	sxtb	r3, r3
 8011398:	0018      	movs	r0, r3
 801139a:	f7ff ffa9 	bl	80112f0 <GetMaxAppPayloadWithoutFOptsLength>
 801139e:	0003      	movs	r3, r0
 80113a0:	001a      	movs	r2, r3
 80113a2:	0028      	movs	r0, r5
 80113a4:	183b      	adds	r3, r7, r0
 80113a6:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80113a8:	1dfb      	adds	r3, r7, #7
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	b299      	uxth	r1, r3
 80113ae:	1d7b      	adds	r3, r7, #5
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	193b      	adds	r3, r7, r4
 80113b6:	188a      	adds	r2, r1, r2
 80113b8:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80113ba:	193a      	adds	r2, r7, r4
 80113bc:	183b      	adds	r3, r7, r0
 80113be:	8812      	ldrh	r2, [r2, #0]
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d805      	bhi.n	80113d2 <ValidatePayloadLength+0x6e>
 80113c6:	193b      	adds	r3, r7, r4
 80113c8:	881b      	ldrh	r3, [r3, #0]
 80113ca:	2bff      	cmp	r3, #255	; 0xff
 80113cc:	d801      	bhi.n	80113d2 <ValidatePayloadLength+0x6e>
    {
        return true;
 80113ce:	2301      	movs	r3, #1
 80113d0:	e000      	b.n	80113d4 <ValidatePayloadLength+0x70>
    }
    return false;
 80113d2:	2300      	movs	r3, #0
}
 80113d4:	0018      	movs	r0, r3
 80113d6:	46bd      	mov	sp, r7
 80113d8:	b004      	add	sp, #16
 80113da:	bdb0      	pop	{r4, r5, r7, pc}

080113dc <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80113e0:	4b04      	ldr	r3, [pc, #16]	; (80113f4 <SetMlmeScheduleUplinkIndication+0x18>)
 80113e2:	4a05      	ldr	r2, [pc, #20]	; (80113f8 <SetMlmeScheduleUplinkIndication+0x1c>)
 80113e4:	5c99      	ldrb	r1, [r3, r2]
 80113e6:	2010      	movs	r0, #16
 80113e8:	4301      	orrs	r1, r0
 80113ea:	5499      	strb	r1, [r3, r2]
}
 80113ec:	46c0      	nop			; (mov r8, r8)
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	46c0      	nop			; (mov r8, r8)
 80113f4:	200007d0 	.word	0x200007d0
 80113f8:	00000481 	.word	0x00000481

080113fc <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80113fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113fe:	b0a5      	sub	sp, #148	; 0x94
 8011400:	af02      	add	r7, sp, #8
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	000c      	movs	r4, r1
 8011406:	0010      	movs	r0, r2
 8011408:	0019      	movs	r1, r3
 801140a:	1cfb      	adds	r3, r7, #3
 801140c:	1c22      	adds	r2, r4, #0
 801140e:	701a      	strb	r2, [r3, #0]
 8011410:	1cbb      	adds	r3, r7, #2
 8011412:	1c02      	adds	r2, r0, #0
 8011414:	701a      	strb	r2, [r3, #0]
 8011416:	1c7b      	adds	r3, r7, #1
 8011418:	1c0a      	adds	r2, r1, #0
 801141a:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 801141c:	236b      	movs	r3, #107	; 0x6b
 801141e:	18fb      	adds	r3, r7, r3
 8011420:	2200      	movs	r2, #0
 8011422:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8011424:	2387      	movs	r3, #135	; 0x87
 8011426:	18fb      	adds	r3, r7, r3
 8011428:	2200      	movs	r2, #0
 801142a:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801142c:	2368      	movs	r3, #104	; 0x68
 801142e:	18fb      	adds	r3, r7, r3
 8011430:	2200      	movs	r2, #0
 8011432:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 8011434:	f000 fd58 	bl	8011ee8 <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8011438:	1cfb      	adds	r3, r7, #3
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	18d3      	adds	r3, r2, r3
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	0018      	movs	r0, r3
 8011444:	f004 fa06 	bl	8015854 <LoRaMacCommandsGetCmdSize>
 8011448:	0003      	movs	r3, r0
 801144a:	001a      	movs	r2, r3
 801144c:	1cfb      	adds	r3, r7, #3
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	18d2      	adds	r2, r2, r3
 8011452:	1cbb      	adds	r3, r7, #2
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	429a      	cmp	r2, r3
 8011458:	dd01      	ble.n	801145e <ProcessMacCommands+0x62>
 801145a:	f000 fd4e 	bl	8011efa <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801145e:	1cfb      	adds	r3, r7, #3
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	1cfa      	adds	r2, r7, #3
 8011464:	1c59      	adds	r1, r3, #1
 8011466:	7011      	strb	r1, [r2, #0]
 8011468:	001a      	movs	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	189b      	adds	r3, r3, r2
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	2b13      	cmp	r3, #19
 8011472:	d901      	bls.n	8011478 <ProcessMacCommands+0x7c>
 8011474:	f000 fd43 	bl	8011efe <ProcessMacCommands+0xb02>
 8011478:	009a      	lsls	r2, r3, #2
 801147a:	4bee      	ldr	r3, [pc, #952]	; (8011834 <ProcessMacCommands+0x438>)
 801147c:	18d3      	adds	r3, r2, r3
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8011482:	2004      	movs	r0, #4
 8011484:	f004 fc08 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 8011488:	1e03      	subs	r3, r0, #0
 801148a:	d101      	bne.n	8011490 <ProcessMacCommands+0x94>
 801148c:	f000 fd2c 	bl	8011ee8 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8011490:	2104      	movs	r1, #4
 8011492:	2000      	movs	r0, #0
 8011494:	f004 fb64 	bl	8015b60 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8011498:	1cfb      	adds	r3, r7, #3
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	1cfa      	adds	r2, r7, #3
 801149e:	1c59      	adds	r1, r3, #1
 80114a0:	7011      	strb	r1, [r2, #0]
 80114a2:	001a      	movs	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	189b      	adds	r3, r3, r2
 80114a8:	7819      	ldrb	r1, [r3, #0]
 80114aa:	4ae3      	ldr	r2, [pc, #908]	; (8011838 <ProcessMacCommands+0x43c>)
 80114ac:	238b      	movs	r3, #139	; 0x8b
 80114ae:	00db      	lsls	r3, r3, #3
 80114b0:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80114b2:	1cfb      	adds	r3, r7, #3
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	1cfa      	adds	r2, r7, #3
 80114b8:	1c59      	adds	r1, r3, #1
 80114ba:	7011      	strb	r1, [r2, #0]
 80114bc:	001a      	movs	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	189b      	adds	r3, r3, r2
 80114c2:	7819      	ldrb	r1, [r3, #0]
 80114c4:	4bdc      	ldr	r3, [pc, #880]	; (8011838 <ProcessMacCommands+0x43c>)
 80114c6:	4add      	ldr	r2, [pc, #884]	; (801183c <ProcessMacCommands+0x440>)
 80114c8:	5499      	strb	r1, [r3, r2]
                }
                break;
 80114ca:	f000 fd0d 	bl	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80114ce:	2657      	movs	r6, #87	; 0x57
 80114d0:	19bb      	adds	r3, r7, r6
 80114d2:	2200      	movs	r2, #0
 80114d4:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 80114d6:	2456      	movs	r4, #86	; 0x56
 80114d8:	193b      	adds	r3, r7, r4
 80114da:	2200      	movs	r2, #0
 80114dc:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 80114de:	2555      	movs	r5, #85	; 0x55
 80114e0:	197b      	adds	r3, r7, r5
 80114e2:	2200      	movs	r2, #0
 80114e4:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 80114e6:	2354      	movs	r3, #84	; 0x54
 80114e8:	18fb      	adds	r3, r7, r3
 80114ea:	2200      	movs	r2, #0
 80114ec:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 80114ee:	2187      	movs	r1, #135	; 0x87
 80114f0:	187b      	adds	r3, r7, r1
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	2201      	movs	r2, #1
 80114f6:	4053      	eors	r3, r2
 80114f8:	b2db      	uxtb	r3, r3
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d100      	bne.n	8011500 <ProcessMacCommands+0x104>
 80114fe:	e09d      	b.n	801163c <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 8011500:	187b      	adds	r3, r7, r1
 8011502:	2201      	movs	r2, #1
 8011504:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8011506:	1cfb      	adds	r3, r7, #3
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	3b01      	subs	r3, #1
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	18d2      	adds	r2, r2, r3
 8011510:	2158      	movs	r1, #88	; 0x58
 8011512:	187b      	adds	r3, r7, r1
 8011514:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8011516:	1cba      	adds	r2, r7, #2
 8011518:	1cfb      	adds	r3, r7, #3
 801151a:	7812      	ldrb	r2, [r2, #0]
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	1ad3      	subs	r3, r2, r3
 8011520:	b2db      	uxtb	r3, r3
 8011522:	3301      	adds	r3, #1
 8011524:	b2da      	uxtb	r2, r3
 8011526:	000d      	movs	r5, r1
 8011528:	197b      	adds	r3, r7, r5
 801152a:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 801152c:	4bc2      	ldr	r3, [pc, #776]	; (8011838 <ProcessMacCommands+0x43c>)
 801152e:	4ac4      	ldr	r2, [pc, #784]	; (8011840 <ProcessMacCommands+0x444>)
 8011530:	589b      	ldr	r3, [r3, r2]
 8011532:	227e      	movs	r2, #126	; 0x7e
 8011534:	5c9a      	ldrb	r2, [r3, r2]
 8011536:	197b      	adds	r3, r7, r5
 8011538:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801153a:	4bbf      	ldr	r3, [pc, #764]	; (8011838 <ProcessMacCommands+0x43c>)
 801153c:	4ac0      	ldr	r2, [pc, #768]	; (8011840 <ProcessMacCommands+0x444>)
 801153e:	589b      	ldr	r3, [r3, r2]
 8011540:	22b8      	movs	r2, #184	; 0xb8
 8011542:	5c9a      	ldrb	r2, [r3, r2]
 8011544:	197b      	adds	r3, r7, r5
 8011546:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011548:	4bbb      	ldr	r3, [pc, #748]	; (8011838 <ProcessMacCommands+0x43c>)
 801154a:	4abd      	ldr	r2, [pc, #756]	; (8011840 <ProcessMacCommands+0x444>)
 801154c:	589b      	ldr	r3, [r3, r2]
 801154e:	2285      	movs	r2, #133	; 0x85
 8011550:	569a      	ldrsb	r2, [r3, r2]
 8011552:	197b      	adds	r3, r7, r5
 8011554:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011556:	4bb8      	ldr	r3, [pc, #736]	; (8011838 <ProcessMacCommands+0x43c>)
 8011558:	4ab9      	ldr	r2, [pc, #740]	; (8011840 <ProcessMacCommands+0x444>)
 801155a:	589b      	ldr	r3, [r3, r2]
 801155c:	2284      	movs	r2, #132	; 0x84
 801155e:	569a      	ldrsb	r2, [r3, r2]
 8011560:	197b      	adds	r3, r7, r5
 8011562:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8011564:	4bb4      	ldr	r3, [pc, #720]	; (8011838 <ProcessMacCommands+0x43c>)
 8011566:	4ab6      	ldr	r2, [pc, #728]	; (8011840 <ProcessMacCommands+0x444>)
 8011568:	589b      	ldr	r3, [r3, r2]
 801156a:	22a4      	movs	r2, #164	; 0xa4
 801156c:	5c9a      	ldrb	r2, [r3, r2]
 801156e:	197b      	adds	r3, r7, r5
 8011570:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8011572:	4bb1      	ldr	r3, [pc, #708]	; (8011838 <ProcessMacCommands+0x43c>)
 8011574:	4ab2      	ldr	r2, [pc, #712]	; (8011840 <ProcessMacCommands+0x444>)
 8011576:	5899      	ldr	r1, [r3, r2]
 8011578:	197b      	adds	r3, r7, r5
 801157a:	22b0      	movs	r2, #176	; 0xb0
 801157c:	0052      	lsls	r2, r2, #1
 801157e:	588a      	ldr	r2, [r1, r2]
 8011580:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8011582:	4bad      	ldr	r3, [pc, #692]	; (8011838 <ProcessMacCommands+0x43c>)
 8011584:	4aae      	ldr	r2, [pc, #696]	; (8011840 <ProcessMacCommands+0x444>)
 8011586:	589b      	ldr	r3, [r3, r2]
 8011588:	7818      	ldrb	r0, [r3, #0]
 801158a:	193c      	adds	r4, r7, r4
 801158c:	19ba      	adds	r2, r7, r6
 801158e:	1979      	adds	r1, r7, r5
 8011590:	2354      	movs	r3, #84	; 0x54
 8011592:	18fb      	adds	r3, r7, r3
 8011594:	9301      	str	r3, [sp, #4]
 8011596:	2555      	movs	r5, #85	; 0x55
 8011598:	197b      	adds	r3, r7, r5
 801159a:	9300      	str	r3, [sp, #0]
 801159c:	0023      	movs	r3, r4
 801159e:	f006 f8a0 	bl	80176e2 <RegionLinkAdrReq>
 80115a2:	0003      	movs	r3, r0
 80115a4:	001a      	movs	r2, r3
 80115a6:	216b      	movs	r1, #107	; 0x6b
 80115a8:	187b      	adds	r3, r7, r1
 80115aa:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80115ac:	187b      	adds	r3, r7, r1
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	001a      	movs	r2, r3
 80115b2:	2307      	movs	r3, #7
 80115b4:	4013      	ands	r3, r2
 80115b6:	2b07      	cmp	r3, #7
 80115b8:	d117      	bne.n	80115ea <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 80115ba:	4b9f      	ldr	r3, [pc, #636]	; (8011838 <ProcessMacCommands+0x43c>)
 80115bc:	4aa0      	ldr	r2, [pc, #640]	; (8011840 <ProcessMacCommands+0x444>)
 80115be:	589b      	ldr	r3, [r3, r2]
 80115c0:	19ba      	adds	r2, r7, r6
 80115c2:	2100      	movs	r1, #0
 80115c4:	5651      	ldrsb	r1, [r2, r1]
 80115c6:	2285      	movs	r2, #133	; 0x85
 80115c8:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80115ca:	4b9b      	ldr	r3, [pc, #620]	; (8011838 <ProcessMacCommands+0x43c>)
 80115cc:	4a9c      	ldr	r2, [pc, #624]	; (8011840 <ProcessMacCommands+0x444>)
 80115ce:	589b      	ldr	r3, [r3, r2]
 80115d0:	2456      	movs	r4, #86	; 0x56
 80115d2:	193a      	adds	r2, r7, r4
 80115d4:	2100      	movs	r1, #0
 80115d6:	5651      	ldrsb	r1, [r2, r1]
 80115d8:	2284      	movs	r2, #132	; 0x84
 80115da:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80115dc:	4b96      	ldr	r3, [pc, #600]	; (8011838 <ProcessMacCommands+0x43c>)
 80115de:	4a98      	ldr	r2, [pc, #608]	; (8011840 <ProcessMacCommands+0x444>)
 80115e0:	589b      	ldr	r3, [r3, r2]
 80115e2:	197a      	adds	r2, r7, r5
 80115e4:	7811      	ldrb	r1, [r2, #0]
 80115e6:	22a4      	movs	r2, #164	; 0xa4
 80115e8:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80115ea:	2386      	movs	r3, #134	; 0x86
 80115ec:	18fb      	adds	r3, r7, r3
 80115ee:	2200      	movs	r2, #0
 80115f0:	701a      	strb	r2, [r3, #0]
 80115f2:	e00c      	b.n	801160e <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80115f4:	236b      	movs	r3, #107	; 0x6b
 80115f6:	18fb      	adds	r3, r7, r3
 80115f8:	2201      	movs	r2, #1
 80115fa:	0019      	movs	r1, r3
 80115fc:	2003      	movs	r0, #3
 80115fe:	f003 ffb9 	bl	8015574 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011602:	2186      	movs	r1, #134	; 0x86
 8011604:	187b      	adds	r3, r7, r1
 8011606:	781a      	ldrb	r2, [r3, #0]
 8011608:	187b      	adds	r3, r7, r1
 801160a:	3201      	adds	r2, #1
 801160c:	701a      	strb	r2, [r3, #0]
 801160e:	2454      	movs	r4, #84	; 0x54
 8011610:	193b      	adds	r3, r7, r4
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	2105      	movs	r1, #5
 8011616:	0018      	movs	r0, r3
 8011618:	f7ee fd7e 	bl	8000118 <__udivsi3>
 801161c:	0003      	movs	r3, r0
 801161e:	b2db      	uxtb	r3, r3
 8011620:	2286      	movs	r2, #134	; 0x86
 8011622:	18ba      	adds	r2, r7, r2
 8011624:	7812      	ldrb	r2, [r2, #0]
 8011626:	429a      	cmp	r2, r3
 8011628:	d3e4      	bcc.n	80115f4 <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 801162a:	193b      	adds	r3, r7, r4
 801162c:	781a      	ldrb	r2, [r3, #0]
 801162e:	1cfb      	adds	r3, r7, #3
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	18d3      	adds	r3, r2, r3
 8011634:	b2da      	uxtb	r2, r3
 8011636:	1cfb      	adds	r3, r7, #3
 8011638:	3a01      	subs	r2, #1
 801163a:	701a      	strb	r2, [r3, #0]
                }
                break;
 801163c:	46c0      	nop			; (mov r8, r8)
 801163e:	f000 fc53 	bl	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8011642:	1cfb      	adds	r3, r7, #3
 8011644:	781b      	ldrb	r3, [r3, #0]
 8011646:	1cfa      	adds	r2, r7, #3
 8011648:	1c59      	adds	r1, r3, #1
 801164a:	7011      	strb	r1, [r2, #0]
 801164c:	001a      	movs	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	189b      	adds	r3, r3, r2
 8011652:	781a      	ldrb	r2, [r3, #0]
 8011654:	4b78      	ldr	r3, [pc, #480]	; (8011838 <ProcessMacCommands+0x43c>)
 8011656:	497a      	ldr	r1, [pc, #488]	; (8011840 <ProcessMacCommands+0x444>)
 8011658:	585b      	ldr	r3, [r3, r1]
 801165a:	210f      	movs	r1, #15
 801165c:	400a      	ands	r2, r1
 801165e:	b2d1      	uxtb	r1, r2
 8011660:	22c8      	movs	r2, #200	; 0xc8
 8011662:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8011664:	4b74      	ldr	r3, [pc, #464]	; (8011838 <ProcessMacCommands+0x43c>)
 8011666:	4a76      	ldr	r2, [pc, #472]	; (8011840 <ProcessMacCommands+0x444>)
 8011668:	589b      	ldr	r3, [r3, r2]
 801166a:	22c8      	movs	r2, #200	; 0xc8
 801166c:	5c9b      	ldrb	r3, [r3, r2]
 801166e:	001a      	movs	r2, r3
 8011670:	2301      	movs	r3, #1
 8011672:	4093      	lsls	r3, r2
 8011674:	0019      	movs	r1, r3
 8011676:	4b70      	ldr	r3, [pc, #448]	; (8011838 <ProcessMacCommands+0x43c>)
 8011678:	4a71      	ldr	r2, [pc, #452]	; (8011840 <ProcessMacCommands+0x444>)
 801167a:	589a      	ldr	r2, [r3, r2]
 801167c:	b289      	uxth	r1, r1
 801167e:	23a6      	movs	r3, #166	; 0xa6
 8011680:	005b      	lsls	r3, r3, #1
 8011682:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8011684:	2368      	movs	r3, #104	; 0x68
 8011686:	18fb      	adds	r3, r7, r3
 8011688:	2200      	movs	r2, #0
 801168a:	0019      	movs	r1, r3
 801168c:	2004      	movs	r0, #4
 801168e:	f003 ff71 	bl	8015574 <LoRaMacCommandsAddCmd>
                break;
 8011692:	f000 fc29 	bl	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8011696:	256b      	movs	r5, #107	; 0x6b
 8011698:	197b      	adds	r3, r7, r5
 801169a:	2207      	movs	r2, #7
 801169c:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801169e:	1cfb      	adds	r3, r7, #3
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	18d3      	adds	r3, r2, r3
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	091b      	lsrs	r3, r3, #4
 80116aa:	b2db      	uxtb	r3, r3
 80116ac:	b25b      	sxtb	r3, r3
 80116ae:	2207      	movs	r2, #7
 80116b0:	4013      	ands	r3, r2
 80116b2:	b25a      	sxtb	r2, r3
 80116b4:	204c      	movs	r0, #76	; 0x4c
 80116b6:	183b      	adds	r3, r7, r0
 80116b8:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80116ba:	1cfb      	adds	r3, r7, #3
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	18d3      	adds	r3, r2, r3
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	b25b      	sxtb	r3, r3
 80116c6:	220f      	movs	r2, #15
 80116c8:	4013      	ands	r3, r2
 80116ca:	b25a      	sxtb	r2, r3
 80116cc:	183b      	adds	r3, r7, r0
 80116ce:	701a      	strb	r2, [r3, #0]
                macIndex++;
 80116d0:	1cfb      	adds	r3, r7, #3
 80116d2:	781a      	ldrb	r2, [r3, #0]
 80116d4:	1cfb      	adds	r3, r7, #3
 80116d6:	3201      	adds	r2, #1
 80116d8:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80116da:	1cfb      	adds	r3, r7, #3
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	1cfa      	adds	r2, r7, #3
 80116e0:	1c59      	adds	r1, r3, #1
 80116e2:	7011      	strb	r1, [r2, #0]
 80116e4:	001a      	movs	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	189b      	adds	r3, r3, r2
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	001a      	movs	r2, r3
 80116ee:	183b      	adds	r3, r7, r0
 80116f0:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80116f2:	1cfb      	adds	r3, r7, #3
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	1cfa      	adds	r2, r7, #3
 80116f8:	1c59      	adds	r1, r3, #1
 80116fa:	7011      	strb	r1, [r2, #0]
 80116fc:	001a      	movs	r2, r3
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	189b      	adds	r3, r3, r2
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	021a      	lsls	r2, r3, #8
 8011706:	183b      	adds	r3, r7, r0
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	431a      	orrs	r2, r3
 801170c:	183b      	adds	r3, r7, r0
 801170e:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011710:	1cfb      	adds	r3, r7, #3
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	1cfa      	adds	r2, r7, #3
 8011716:	1c59      	adds	r1, r3, #1
 8011718:	7011      	strb	r1, [r2, #0]
 801171a:	001a      	movs	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	189b      	adds	r3, r3, r2
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	041a      	lsls	r2, r3, #16
 8011724:	183b      	adds	r3, r7, r0
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	431a      	orrs	r2, r3
 801172a:	0004      	movs	r4, r0
 801172c:	193b      	adds	r3, r7, r4
 801172e:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 8011730:	193b      	adds	r3, r7, r4
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	2264      	movs	r2, #100	; 0x64
 8011736:	435a      	muls	r2, r3
 8011738:	193b      	adds	r3, r7, r4
 801173a:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 801173c:	4b3e      	ldr	r3, [pc, #248]	; (8011838 <ProcessMacCommands+0x43c>)
 801173e:	4a40      	ldr	r2, [pc, #256]	; (8011840 <ProcessMacCommands+0x444>)
 8011740:	589b      	ldr	r3, [r3, r2]
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	193a      	adds	r2, r7, r4
 8011746:	0011      	movs	r1, r2
 8011748:	0018      	movs	r0, r3
 801174a:	f005 ffe8 	bl	801771e <RegionRxParamSetupReq>
 801174e:	0003      	movs	r3, r0
 8011750:	001a      	movs	r2, r3
 8011752:	197b      	adds	r3, r7, r5
 8011754:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8011756:	197b      	adds	r3, r7, r5
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	001a      	movs	r2, r3
 801175c:	2307      	movs	r3, #7
 801175e:	4013      	ands	r3, r2
 8011760:	2b07      	cmp	r3, #7
 8011762:	d128      	bne.n	80117b6 <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8011764:	193b      	adds	r3, r7, r4
 8011766:	2100      	movs	r1, #0
 8011768:	5659      	ldrsb	r1, [r3, r1]
 801176a:	4b33      	ldr	r3, [pc, #204]	; (8011838 <ProcessMacCommands+0x43c>)
 801176c:	4a34      	ldr	r2, [pc, #208]	; (8011840 <ProcessMacCommands+0x444>)
 801176e:	589b      	ldr	r3, [r3, r2]
 8011770:	b2c9      	uxtb	r1, r1
 8011772:	22ac      	movs	r2, #172	; 0xac
 8011774:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8011776:	193b      	adds	r3, r7, r4
 8011778:	2100      	movs	r1, #0
 801177a:	5659      	ldrsb	r1, [r3, r1]
 801177c:	4b2e      	ldr	r3, [pc, #184]	; (8011838 <ProcessMacCommands+0x43c>)
 801177e:	4a30      	ldr	r2, [pc, #192]	; (8011840 <ProcessMacCommands+0x444>)
 8011780:	589b      	ldr	r3, [r3, r2]
 8011782:	b2c9      	uxtb	r1, r1
 8011784:	22b4      	movs	r2, #180	; 0xb4
 8011786:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8011788:	4b2b      	ldr	r3, [pc, #172]	; (8011838 <ProcessMacCommands+0x43c>)
 801178a:	4a2d      	ldr	r2, [pc, #180]	; (8011840 <ProcessMacCommands+0x444>)
 801178c:	589a      	ldr	r2, [r3, r2]
 801178e:	193b      	adds	r3, r7, r4
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	21a8      	movs	r1, #168	; 0xa8
 8011794:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8011796:	4b28      	ldr	r3, [pc, #160]	; (8011838 <ProcessMacCommands+0x43c>)
 8011798:	4a29      	ldr	r2, [pc, #164]	; (8011840 <ProcessMacCommands+0x444>)
 801179a:	589a      	ldr	r2, [r3, r2]
 801179c:	193b      	adds	r3, r7, r4
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	21b0      	movs	r1, #176	; 0xb0
 80117a2:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80117a4:	193b      	adds	r3, r7, r4
 80117a6:	2101      	movs	r1, #1
 80117a8:	5659      	ldrsb	r1, [r3, r1]
 80117aa:	4b23      	ldr	r3, [pc, #140]	; (8011838 <ProcessMacCommands+0x43c>)
 80117ac:	4a24      	ldr	r2, [pc, #144]	; (8011840 <ProcessMacCommands+0x444>)
 80117ae:	589b      	ldr	r3, [r3, r2]
 80117b0:	b2c9      	uxtb	r1, r1
 80117b2:	22a5      	movs	r2, #165	; 0xa5
 80117b4:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 80117b6:	236b      	movs	r3, #107	; 0x6b
 80117b8:	18fb      	adds	r3, r7, r3
 80117ba:	781a      	ldrb	r2, [r3, #0]
 80117bc:	2168      	movs	r1, #104	; 0x68
 80117be:	187b      	adds	r3, r7, r1
 80117c0:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80117c2:	187b      	adds	r3, r7, r1
 80117c4:	2201      	movs	r2, #1
 80117c6:	0019      	movs	r1, r3
 80117c8:	2005      	movs	r0, #5
 80117ca:	f003 fed3 	bl	8015574 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80117ce:	f7ff fe05 	bl	80113dc <SetMlmeScheduleUplinkIndication>
                break;
 80117d2:	46c0      	nop			; (mov r8, r8)
 80117d4:	e388      	b.n	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80117d6:	2185      	movs	r1, #133	; 0x85
 80117d8:	187b      	adds	r3, r7, r1
 80117da:	22ff      	movs	r2, #255	; 0xff
 80117dc:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80117de:	4a16      	ldr	r2, [pc, #88]	; (8011838 <ProcessMacCommands+0x43c>)
 80117e0:	23d2      	movs	r3, #210	; 0xd2
 80117e2:	009b      	lsls	r3, r3, #2
 80117e4:	58d3      	ldr	r3, [r2, r3]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d00f      	beq.n	801180a <ProcessMacCommands+0x40e>
 80117ea:	4a13      	ldr	r2, [pc, #76]	; (8011838 <ProcessMacCommands+0x43c>)
 80117ec:	23d2      	movs	r3, #210	; 0xd2
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	58d3      	ldr	r3, [r2, r3]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d008      	beq.n	801180a <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80117f8:	4a0f      	ldr	r2, [pc, #60]	; (8011838 <ProcessMacCommands+0x43c>)
 80117fa:	23d2      	movs	r3, #210	; 0xd2
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	58d3      	ldr	r3, [r2, r3]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	187c      	adds	r4, r7, r1
 8011804:	4798      	blx	r3
 8011806:	0003      	movs	r3, r0
 8011808:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 801180a:	2168      	movs	r1, #104	; 0x68
 801180c:	187b      	adds	r3, r7, r1
 801180e:	2285      	movs	r2, #133	; 0x85
 8011810:	18ba      	adds	r2, r7, r2
 8011812:	7812      	ldrb	r2, [r2, #0]
 8011814:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011816:	1c7b      	adds	r3, r7, #1
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	223f      	movs	r2, #63	; 0x3f
 801181c:	4013      	ands	r3, r2
 801181e:	b2da      	uxtb	r2, r3
 8011820:	187b      	adds	r3, r7, r1
 8011822:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011824:	187b      	adds	r3, r7, r1
 8011826:	2202      	movs	r2, #2
 8011828:	0019      	movs	r1, r3
 801182a:	2006      	movs	r0, #6
 801182c:	f003 fea2 	bl	8015574 <LoRaMacCommandsAddCmd>
                break;
 8011830:	e35a      	b.n	8011ee8 <ProcessMacCommands+0xaec>
 8011832:	46c0      	nop			; (mov r8, r8)
 8011834:	080212bc 	.word	0x080212bc
 8011838:	200007d0 	.word	0x200007d0
 801183c:	00000459 	.word	0x00000459
 8011840:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011844:	246b      	movs	r4, #107	; 0x6b
 8011846:	193b      	adds	r3, r7, r4
 8011848:	2203      	movs	r2, #3
 801184a:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 801184c:	1cfb      	adds	r3, r7, #3
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	1cfa      	adds	r2, r7, #3
 8011852:	1c59      	adds	r1, r3, #1
 8011854:	7011      	strb	r1, [r2, #0]
 8011856:	001a      	movs	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	189b      	adds	r3, r3, r2
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	b25a      	sxtb	r2, r3
 8011860:	2544      	movs	r5, #68	; 0x44
 8011862:	197b      	adds	r3, r7, r5
 8011864:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 8011866:	197b      	adds	r3, r7, r5
 8011868:	2038      	movs	r0, #56	; 0x38
 801186a:	183a      	adds	r2, r7, r0
 801186c:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801186e:	1cfb      	adds	r3, r7, #3
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	1cfa      	adds	r2, r7, #3
 8011874:	1c59      	adds	r1, r3, #1
 8011876:	7011      	strb	r1, [r2, #0]
 8011878:	001a      	movs	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	189b      	adds	r3, r3, r2
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	001a      	movs	r2, r3
 8011882:	183b      	adds	r3, r7, r0
 8011884:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011886:	1cfb      	adds	r3, r7, #3
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	1cfa      	adds	r2, r7, #3
 801188c:	1c59      	adds	r1, r3, #1
 801188e:	7011      	strb	r1, [r2, #0]
 8011890:	001a      	movs	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	189b      	adds	r3, r3, r2
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	021a      	lsls	r2, r3, #8
 801189a:	183b      	adds	r3, r7, r0
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	431a      	orrs	r2, r3
 80118a0:	183b      	adds	r3, r7, r0
 80118a2:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80118a4:	1cfb      	adds	r3, r7, #3
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	1cfa      	adds	r2, r7, #3
 80118aa:	1c59      	adds	r1, r3, #1
 80118ac:	7011      	strb	r1, [r2, #0]
 80118ae:	001a      	movs	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	189b      	adds	r3, r3, r2
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	041a      	lsls	r2, r3, #16
 80118b8:	183b      	adds	r3, r7, r0
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	431a      	orrs	r2, r3
 80118be:	183b      	adds	r3, r7, r0
 80118c0:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 80118c2:	183b      	adds	r3, r7, r0
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2264      	movs	r2, #100	; 0x64
 80118c8:	435a      	muls	r2, r3
 80118ca:	183b      	adds	r3, r7, r0
 80118cc:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 80118ce:	183b      	adds	r3, r7, r0
 80118d0:	2200      	movs	r2, #0
 80118d2:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 80118d4:	1cfb      	adds	r3, r7, #3
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	1cfa      	adds	r2, r7, #3
 80118da:	1c59      	adds	r1, r3, #1
 80118dc:	7011      	strb	r1, [r2, #0]
 80118de:	001a      	movs	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	189b      	adds	r3, r3, r2
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	b25a      	sxtb	r2, r3
 80118e8:	183b      	adds	r3, r7, r0
 80118ea:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 80118ec:	4ba0      	ldr	r3, [pc, #640]	; (8011b70 <ProcessMacCommands+0x774>)
 80118ee:	4aa1      	ldr	r2, [pc, #644]	; (8011b74 <ProcessMacCommands+0x778>)
 80118f0:	589b      	ldr	r3, [r3, r2]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	197a      	adds	r2, r7, r5
 80118f6:	0011      	movs	r1, r2
 80118f8:	0018      	movs	r0, r3
 80118fa:	f005 ff26 	bl	801774a <RegionNewChannelReq>
 80118fe:	0003      	movs	r3, r0
 8011900:	001a      	movs	r2, r3
 8011902:	193b      	adds	r3, r7, r4
 8011904:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 8011906:	193b      	adds	r3, r7, r4
 8011908:	781a      	ldrb	r2, [r3, #0]
 801190a:	2168      	movs	r1, #104	; 0x68
 801190c:	187b      	adds	r3, r7, r1
 801190e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011910:	187b      	adds	r3, r7, r1
 8011912:	2201      	movs	r2, #1
 8011914:	0019      	movs	r1, r3
 8011916:	2007      	movs	r0, #7
 8011918:	f003 fe2c 	bl	8015574 <LoRaMacCommandsAddCmd>
                break;
 801191c:	46c0      	nop			; (mov r8, r8)
 801191e:	e2e3      	b.n	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011920:	1cfb      	adds	r3, r7, #3
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	1cfa      	adds	r2, r7, #3
 8011926:	1c59      	adds	r1, r3, #1
 8011928:	7011      	strb	r1, [r2, #0]
 801192a:	001a      	movs	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	189b      	adds	r3, r3, r2
 8011930:	781a      	ldrb	r2, [r3, #0]
 8011932:	2084      	movs	r0, #132	; 0x84
 8011934:	183b      	adds	r3, r7, r0
 8011936:	210f      	movs	r1, #15
 8011938:	400a      	ands	r2, r1
 801193a:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 801193c:	183b      	adds	r3, r7, r0
 801193e:	781b      	ldrb	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d104      	bne.n	801194e <ProcessMacCommands+0x552>
                {
                    delay++;
 8011944:	183b      	adds	r3, r7, r0
 8011946:	781a      	ldrb	r2, [r3, #0]
 8011948:	183b      	adds	r3, r7, r0
 801194a:	3201      	adds	r2, #1
 801194c:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 801194e:	2384      	movs	r3, #132	; 0x84
 8011950:	18fb      	adds	r3, r7, r3
 8011952:	781a      	ldrb	r2, [r3, #0]
 8011954:	0013      	movs	r3, r2
 8011956:	015b      	lsls	r3, r3, #5
 8011958:	1a9b      	subs	r3, r3, r2
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	189b      	adds	r3, r3, r2
 801195e:	00db      	lsls	r3, r3, #3
 8011960:	0019      	movs	r1, r3
 8011962:	4b83      	ldr	r3, [pc, #524]	; (8011b70 <ProcessMacCommands+0x774>)
 8011964:	4a83      	ldr	r2, [pc, #524]	; (8011b74 <ProcessMacCommands+0x778>)
 8011966:	589b      	ldr	r3, [r3, r2]
 8011968:	2294      	movs	r2, #148	; 0x94
 801196a:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 801196c:	4b80      	ldr	r3, [pc, #512]	; (8011b70 <ProcessMacCommands+0x774>)
 801196e:	4a81      	ldr	r2, [pc, #516]	; (8011b74 <ProcessMacCommands+0x778>)
 8011970:	589b      	ldr	r3, [r3, r2]
 8011972:	2294      	movs	r2, #148	; 0x94
 8011974:	589b      	ldr	r3, [r3, r2]
 8011976:	4a7e      	ldr	r2, [pc, #504]	; (8011b70 <ProcessMacCommands+0x774>)
 8011978:	497e      	ldr	r1, [pc, #504]	; (8011b74 <ProcessMacCommands+0x778>)
 801197a:	5852      	ldr	r2, [r2, r1]
 801197c:	21fa      	movs	r1, #250	; 0xfa
 801197e:	0089      	lsls	r1, r1, #2
 8011980:	468c      	mov	ip, r1
 8011982:	4463      	add	r3, ip
 8011984:	2198      	movs	r1, #152	; 0x98
 8011986:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8011988:	2368      	movs	r3, #104	; 0x68
 801198a:	18fb      	adds	r3, r7, r3
 801198c:	2200      	movs	r2, #0
 801198e:	0019      	movs	r1, r3
 8011990:	2008      	movs	r0, #8
 8011992:	f003 fdef 	bl	8015574 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8011996:	f7ff fd21 	bl	80113dc <SetMlmeScheduleUplinkIndication>
                break;
 801199a:	e2a5      	b.n	8011ee8 <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801199c:	1cfb      	adds	r3, r7, #3
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	1cfa      	adds	r2, r7, #3
 80119a2:	1c59      	adds	r1, r3, #1
 80119a4:	7011      	strb	r1, [r2, #0]
 80119a6:	001a      	movs	r2, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	189a      	adds	r2, r3, r2
 80119ac:	2076      	movs	r0, #118	; 0x76
 80119ae:	183b      	adds	r3, r7, r0
 80119b0:	7812      	ldrb	r2, [r2, #0]
 80119b2:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 80119b4:	2134      	movs	r1, #52	; 0x34
 80119b6:	187b      	adds	r3, r7, r1
 80119b8:	2200      	movs	r2, #0
 80119ba:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 80119bc:	187b      	adds	r3, r7, r1
 80119be:	2200      	movs	r2, #0
 80119c0:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80119c2:	183b      	adds	r3, r7, r0
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	2220      	movs	r2, #32
 80119c8:	4013      	ands	r3, r2
 80119ca:	d002      	beq.n	80119d2 <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80119cc:	187b      	adds	r3, r7, r1
 80119ce:	2201      	movs	r2, #1
 80119d0:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80119d2:	2376      	movs	r3, #118	; 0x76
 80119d4:	18fb      	adds	r3, r7, r3
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	2210      	movs	r2, #16
 80119da:	4013      	ands	r3, r2
 80119dc:	d003      	beq.n	80119e6 <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80119de:	2334      	movs	r3, #52	; 0x34
 80119e0:	18fb      	adds	r3, r7, r3
 80119e2:	2201      	movs	r2, #1
 80119e4:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80119e6:	2376      	movs	r3, #118	; 0x76
 80119e8:	18fb      	adds	r3, r7, r3
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	220f      	movs	r2, #15
 80119ee:	4013      	ands	r3, r2
 80119f0:	b2da      	uxtb	r2, r3
 80119f2:	2434      	movs	r4, #52	; 0x34
 80119f4:	193b      	adds	r3, r7, r4
 80119f6:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80119f8:	4b5d      	ldr	r3, [pc, #372]	; (8011b70 <ProcessMacCommands+0x774>)
 80119fa:	4a5e      	ldr	r2, [pc, #376]	; (8011b74 <ProcessMacCommands+0x778>)
 80119fc:	589b      	ldr	r3, [r3, r2]
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	193a      	adds	r2, r7, r4
 8011a02:	0011      	movs	r1, r2
 8011a04:	0018      	movs	r0, r3
 8011a06:	f005 feb6 	bl	8017776 <RegionTxParamSetupReq>
 8011a0a:	0003      	movs	r3, r0
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	d050      	beq.n	8011ab2 <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8011a10:	4b57      	ldr	r3, [pc, #348]	; (8011b70 <ProcessMacCommands+0x774>)
 8011a12:	4a58      	ldr	r2, [pc, #352]	; (8011b74 <ProcessMacCommands+0x778>)
 8011a14:	589b      	ldr	r3, [r3, r2]
 8011a16:	193a      	adds	r2, r7, r4
 8011a18:	7811      	ldrb	r1, [r2, #0]
 8011a1a:	22b8      	movs	r2, #184	; 0xb8
 8011a1c:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011a1e:	4b54      	ldr	r3, [pc, #336]	; (8011b70 <ProcessMacCommands+0x774>)
 8011a20:	4a54      	ldr	r2, [pc, #336]	; (8011b74 <ProcessMacCommands+0x778>)
 8011a22:	589b      	ldr	r3, [r3, r2]
 8011a24:	193a      	adds	r2, r7, r4
 8011a26:	7851      	ldrb	r1, [r2, #1]
 8011a28:	22b9      	movs	r2, #185	; 0xb9
 8011a2a:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011a2c:	193b      	adds	r3, r7, r4
 8011a2e:	789b      	ldrb	r3, [r3, #2]
 8011a30:	001a      	movs	r2, r3
 8011a32:	4b51      	ldr	r3, [pc, #324]	; (8011b78 <ProcessMacCommands+0x77c>)
 8011a34:	5c9a      	ldrb	r2, [r3, r2]
 8011a36:	4b4e      	ldr	r3, [pc, #312]	; (8011b70 <ProcessMacCommands+0x774>)
 8011a38:	494e      	ldr	r1, [pc, #312]	; (8011b74 <ProcessMacCommands+0x778>)
 8011a3a:	585c      	ldr	r4, [r3, r1]
 8011a3c:	0010      	movs	r0, r2
 8011a3e:	f7ef f819 	bl	8000a74 <__aeabi_ui2f>
 8011a42:	1c03      	adds	r3, r0, #0
 8011a44:	22bc      	movs	r2, #188	; 0xbc
 8011a46:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011a48:	212c      	movs	r1, #44	; 0x2c
 8011a4a:	187b      	adds	r3, r7, r1
 8011a4c:	2202      	movs	r2, #2
 8011a4e:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011a50:	4b47      	ldr	r3, [pc, #284]	; (8011b70 <ProcessMacCommands+0x774>)
 8011a52:	4a48      	ldr	r2, [pc, #288]	; (8011b74 <ProcessMacCommands+0x778>)
 8011a54:	589b      	ldr	r3, [r3, r2]
 8011a56:	22b8      	movs	r2, #184	; 0xb8
 8011a58:	5c9a      	ldrb	r2, [r3, r2]
 8011a5a:	187b      	adds	r3, r7, r1
 8011a5c:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011a5e:	4b44      	ldr	r3, [pc, #272]	; (8011b70 <ProcessMacCommands+0x774>)
 8011a60:	4a44      	ldr	r2, [pc, #272]	; (8011b74 <ProcessMacCommands+0x778>)
 8011a62:	589b      	ldr	r3, [r3, r2]
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	187a      	adds	r2, r7, r1
 8011a68:	0011      	movs	r1, r2
 8011a6a:	0018      	movs	r0, r3
 8011a6c:	f005 fd31 	bl	80174d2 <RegionGetPhyParam>
 8011a70:	0003      	movs	r3, r0
 8011a72:	001a      	movs	r2, r3
 8011a74:	2128      	movs	r1, #40	; 0x28
 8011a76:	187b      	adds	r3, r7, r1
 8011a78:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011a7a:	187b      	adds	r3, r7, r1
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	b259      	sxtb	r1, r3
 8011a80:	4b3b      	ldr	r3, [pc, #236]	; (8011b70 <ProcessMacCommands+0x774>)
 8011a82:	4a3c      	ldr	r2, [pc, #240]	; (8011b74 <ProcessMacCommands+0x778>)
 8011a84:	589b      	ldr	r3, [r3, r2]
 8011a86:	2285      	movs	r2, #133	; 0x85
 8011a88:	5698      	ldrsb	r0, [r3, r2]
 8011a8a:	4b39      	ldr	r3, [pc, #228]	; (8011b70 <ProcessMacCommands+0x774>)
 8011a8c:	4a39      	ldr	r2, [pc, #228]	; (8011b74 <ProcessMacCommands+0x778>)
 8011a8e:	589b      	ldr	r3, [r3, r2]
 8011a90:	1c04      	adds	r4, r0, #0
 8011a92:	1c08      	adds	r0, r1, #0
 8011a94:	b241      	sxtb	r1, r0
 8011a96:	b262      	sxtb	r2, r4
 8011a98:	4291      	cmp	r1, r2
 8011a9a:	da00      	bge.n	8011a9e <ProcessMacCommands+0x6a2>
 8011a9c:	1c20      	adds	r0, r4, #0
 8011a9e:	b241      	sxtb	r1, r0
 8011aa0:	2285      	movs	r2, #133	; 0x85
 8011aa2:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011aa4:	2368      	movs	r3, #104	; 0x68
 8011aa6:	18fb      	adds	r3, r7, r3
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	0019      	movs	r1, r3
 8011aac:	2009      	movs	r0, #9
 8011aae:	f003 fd61 	bl	8015574 <LoRaMacCommandsAddCmd>
                }
                break;
 8011ab2:	46c0      	nop			; (mov r8, r8)
 8011ab4:	e218      	b.n	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011ab6:	246b      	movs	r4, #107	; 0x6b
 8011ab8:	193b      	adds	r3, r7, r4
 8011aba:	2203      	movs	r2, #3
 8011abc:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 8011abe:	1cfb      	adds	r3, r7, #3
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	1cfa      	adds	r2, r7, #3
 8011ac4:	1c59      	adds	r1, r3, #1
 8011ac6:	7011      	strb	r1, [r2, #0]
 8011ac8:	001a      	movs	r2, r3
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	189b      	adds	r3, r3, r2
 8011ace:	781a      	ldrb	r2, [r3, #0]
 8011ad0:	2020      	movs	r0, #32
 8011ad2:	183b      	adds	r3, r7, r0
 8011ad4:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011ad6:	1cfb      	adds	r3, r7, #3
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	1cfa      	adds	r2, r7, #3
 8011adc:	1c59      	adds	r1, r3, #1
 8011ade:	7011      	strb	r1, [r2, #0]
 8011ae0:	001a      	movs	r2, r3
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	189b      	adds	r3, r3, r2
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	001a      	movs	r2, r3
 8011aea:	183b      	adds	r3, r7, r0
 8011aec:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011aee:	1cfb      	adds	r3, r7, #3
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	1cfa      	adds	r2, r7, #3
 8011af4:	1c59      	adds	r1, r3, #1
 8011af6:	7011      	strb	r1, [r2, #0]
 8011af8:	001a      	movs	r2, r3
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	189b      	adds	r3, r3, r2
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	021a      	lsls	r2, r3, #8
 8011b02:	183b      	adds	r3, r7, r0
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	431a      	orrs	r2, r3
 8011b08:	183b      	adds	r3, r7, r0
 8011b0a:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011b0c:	1cfb      	adds	r3, r7, #3
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	1cfa      	adds	r2, r7, #3
 8011b12:	1c59      	adds	r1, r3, #1
 8011b14:	7011      	strb	r1, [r2, #0]
 8011b16:	001a      	movs	r2, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	189b      	adds	r3, r3, r2
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	041a      	lsls	r2, r3, #16
 8011b20:	183b      	adds	r3, r7, r0
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	431a      	orrs	r2, r3
 8011b26:	0001      	movs	r1, r0
 8011b28:	187b      	adds	r3, r7, r1
 8011b2a:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 8011b2c:	187b      	adds	r3, r7, r1
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	2264      	movs	r2, #100	; 0x64
 8011b32:	435a      	muls	r2, r3
 8011b34:	187b      	adds	r3, r7, r1
 8011b36:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8011b38:	4b0d      	ldr	r3, [pc, #52]	; (8011b70 <ProcessMacCommands+0x774>)
 8011b3a:	4a0e      	ldr	r2, [pc, #56]	; (8011b74 <ProcessMacCommands+0x778>)
 8011b3c:	589b      	ldr	r3, [r3, r2]
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	187a      	adds	r2, r7, r1
 8011b42:	0011      	movs	r1, r2
 8011b44:	0018      	movs	r0, r3
 8011b46:	f005 fe2c 	bl	80177a2 <RegionDlChannelReq>
 8011b4a:	0003      	movs	r3, r0
 8011b4c:	001a      	movs	r2, r3
 8011b4e:	193b      	adds	r3, r7, r4
 8011b50:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8011b52:	193b      	adds	r3, r7, r4
 8011b54:	781a      	ldrb	r2, [r3, #0]
 8011b56:	2168      	movs	r1, #104	; 0x68
 8011b58:	187b      	adds	r3, r7, r1
 8011b5a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8011b5c:	187b      	adds	r3, r7, r1
 8011b5e:	2201      	movs	r2, #1
 8011b60:	0019      	movs	r1, r3
 8011b62:	200a      	movs	r0, #10
 8011b64:	f003 fd06 	bl	8015574 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8011b68:	f7ff fc38 	bl	80113dc <SetMlmeScheduleUplinkIndication>
                break;
 8011b6c:	46c0      	nop			; (mov r8, r8)
 8011b6e:	e1bb      	b.n	8011ee8 <ProcessMacCommands+0xaec>
 8011b70:	200007d0 	.word	0x200007d0
 8011b74:	00000484 	.word	0x00000484
 8011b78:	0802126c 	.word	0x0802126c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011b7c:	200a      	movs	r0, #10
 8011b7e:	f004 f88b 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 8011b82:	1e03      	subs	r3, r0, #0
 8011b84:	d100      	bne.n	8011b88 <ProcessMacCommands+0x78c>
 8011b86:	e1af      	b.n	8011ee8 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011b88:	210a      	movs	r1, #10
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	f003 ffe8 	bl	8015b60 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8011b90:	2418      	movs	r4, #24
 8011b92:	193b      	adds	r3, r7, r4
 8011b94:	0018      	movs	r0, r3
 8011b96:	2308      	movs	r3, #8
 8011b98:	001a      	movs	r2, r3
 8011b9a:	2100      	movs	r1, #0
 8011b9c:	f00d f963 	bl	801ee66 <memset>
                    SysTime_t sysTime = { 0 };
 8011ba0:	2510      	movs	r5, #16
 8011ba2:	197b      	adds	r3, r7, r5
 8011ba4:	0018      	movs	r0, r3
 8011ba6:	2308      	movs	r3, #8
 8011ba8:	001a      	movs	r2, r3
 8011baa:	2100      	movs	r1, #0
 8011bac:	f00d f95b 	bl	801ee66 <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 8011bb0:	2608      	movs	r6, #8
 8011bb2:	19bb      	adds	r3, r7, r6
 8011bb4:	0018      	movs	r0, r3
 8011bb6:	2308      	movs	r3, #8
 8011bb8:	001a      	movs	r2, r3
 8011bba:	2100      	movs	r1, #0
 8011bbc:	f00d f953 	bl	801ee66 <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011bc0:	1cfb      	adds	r3, r7, #3
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	1cfa      	adds	r2, r7, #3
 8011bc6:	1c59      	adds	r1, r3, #1
 8011bc8:	7011      	strb	r1, [r2, #0]
 8011bca:	001a      	movs	r2, r3
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	189b      	adds	r3, r3, r2
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	001a      	movs	r2, r3
 8011bd4:	193b      	adds	r3, r7, r4
 8011bd6:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011bd8:	1cfb      	adds	r3, r7, #3
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	1cfa      	adds	r2, r7, #3
 8011bde:	1c59      	adds	r1, r3, #1
 8011be0:	7011      	strb	r1, [r2, #0]
 8011be2:	001a      	movs	r2, r3
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	189b      	adds	r3, r3, r2
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	021a      	lsls	r2, r3, #8
 8011bec:	193b      	adds	r3, r7, r4
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	431a      	orrs	r2, r3
 8011bf2:	0020      	movs	r0, r4
 8011bf4:	193b      	adds	r3, r7, r4
 8011bf6:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011bf8:	1cfb      	adds	r3, r7, #3
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	1cfa      	adds	r2, r7, #3
 8011bfe:	1c59      	adds	r1, r3, #1
 8011c00:	7011      	strb	r1, [r2, #0]
 8011c02:	001a      	movs	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	189b      	adds	r3, r3, r2
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	041a      	lsls	r2, r3, #16
 8011c0c:	183b      	adds	r3, r7, r0
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	431a      	orrs	r2, r3
 8011c12:	183b      	adds	r3, r7, r0
 8011c14:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011c16:	1cfb      	adds	r3, r7, #3
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	1cfa      	adds	r2, r7, #3
 8011c1c:	1c59      	adds	r1, r3, #1
 8011c1e:	7011      	strb	r1, [r2, #0]
 8011c20:	001a      	movs	r2, r3
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	189b      	adds	r3, r3, r2
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	061a      	lsls	r2, r3, #24
 8011c2a:	183b      	adds	r3, r7, r0
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	431a      	orrs	r2, r3
 8011c30:	183b      	adds	r3, r7, r0
 8011c32:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011c34:	1cfb      	adds	r3, r7, #3
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	1cfa      	adds	r2, r7, #3
 8011c3a:	1c59      	adds	r1, r3, #1
 8011c3c:	7011      	strb	r1, [r2, #0]
 8011c3e:	001a      	movs	r2, r3
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	189b      	adds	r3, r3, r2
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	b21a      	sxth	r2, r3
 8011c48:	183b      	adds	r3, r7, r0
 8011c4a:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011c4c:	0001      	movs	r1, r0
 8011c4e:	183b      	adds	r3, r7, r0
 8011c50:	2204      	movs	r2, #4
 8011c52:	5e9b      	ldrsh	r3, [r3, r2]
 8011c54:	001a      	movs	r2, r3
 8011c56:	0013      	movs	r3, r2
 8011c58:	015b      	lsls	r3, r3, #5
 8011c5a:	1a9b      	subs	r3, r3, r2
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	189b      	adds	r3, r3, r2
 8011c60:	00db      	lsls	r3, r3, #3
 8011c62:	121b      	asrs	r3, r3, #8
 8011c64:	b21a      	sxth	r2, r3
 8011c66:	187b      	adds	r3, r7, r1
 8011c68:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011c6a:	197a      	adds	r2, r7, r5
 8011c6c:	187b      	adds	r3, r7, r1
 8011c6e:	0010      	movs	r0, r2
 8011c70:	0019      	movs	r1, r3
 8011c72:	2308      	movs	r3, #8
 8011c74:	001a      	movs	r2, r3
 8011c76:	f00d f8ed 	bl	801ee54 <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011c7a:	197b      	adds	r3, r7, r5
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4aa2      	ldr	r2, [pc, #648]	; (8011f08 <ProcessMacCommands+0xb0c>)
 8011c80:	189a      	adds	r2, r3, r2
 8011c82:	002c      	movs	r4, r5
 8011c84:	197b      	adds	r3, r7, r5
 8011c86:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011c88:	19bb      	adds	r3, r7, r6
 8011c8a:	0018      	movs	r0, r3
 8011c8c:	f00b fbca 	bl	801d424 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8011c90:	236c      	movs	r3, #108	; 0x6c
 8011c92:	18fd      	adds	r5, r7, r3
 8011c94:	489d      	ldr	r0, [pc, #628]	; (8011f0c <ProcessMacCommands+0xb10>)
 8011c96:	23ce      	movs	r3, #206	; 0xce
 8011c98:	0099      	lsls	r1, r3, #2
 8011c9a:	0026      	movs	r6, r4
 8011c9c:	193a      	adds	r2, r7, r4
 8011c9e:	2404      	movs	r4, #4
 8011ca0:	1843      	adds	r3, r0, r1
 8011ca2:	191c      	adds	r4, r3, r4
 8011ca4:	466b      	mov	r3, sp
 8011ca6:	6824      	ldr	r4, [r4, #0]
 8011ca8:	601c      	str	r4, [r3, #0]
 8011caa:	5843      	ldr	r3, [r0, r1]
 8011cac:	6811      	ldr	r1, [r2, #0]
 8011cae:	6852      	ldr	r2, [r2, #4]
 8011cb0:	0028      	movs	r0, r5
 8011cb2:	f00b fb2b 	bl	801d30c <SysTimeSub>
 8011cb6:	0035      	movs	r5, r6
 8011cb8:	197c      	adds	r4, r7, r5
 8011cba:	236c      	movs	r3, #108	; 0x6c
 8011cbc:	18fb      	adds	r3, r7, r3
 8011cbe:	2608      	movs	r6, #8
 8011cc0:	19ba      	adds	r2, r7, r6
 8011cc2:	4669      	mov	r1, sp
 8011cc4:	6858      	ldr	r0, [r3, #4]
 8011cc6:	6008      	str	r0, [r1, #0]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	6811      	ldr	r1, [r2, #0]
 8011ccc:	6852      	ldr	r2, [r2, #4]
 8011cce:	0020      	movs	r0, r4
 8011cd0:	f00b fac6 	bl	801d260 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011cd4:	197b      	adds	r3, r7, r5
 8011cd6:	6818      	ldr	r0, [r3, #0]
 8011cd8:	6859      	ldr	r1, [r3, #4]
 8011cda:	f00b fb6b 	bl	801d3b4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011cde:	f003 fac5 	bl	801526c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011ce2:	4a8a      	ldr	r2, [pc, #552]	; (8011f0c <ProcessMacCommands+0xb10>)
 8011ce4:	2387      	movs	r3, #135	; 0x87
 8011ce6:	00db      	lsls	r3, r3, #3
 8011ce8:	2101      	movs	r1, #1
 8011cea:	54d1      	strb	r1, [r2, r3]
                }
                break;
 8011cec:	e0fc      	b.n	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011cee:	200d      	movs	r0, #13
 8011cf0:	f003 ffd2 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 8011cf4:	1e03      	subs	r3, r0, #0
 8011cf6:	d100      	bne.n	8011cfa <ProcessMacCommands+0x8fe>
 8011cf8:	e0f6      	b.n	8011ee8 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011cfa:	210d      	movs	r1, #13
 8011cfc:	2000      	movs	r0, #0
 8011cfe:	f003 ff2f 	bl	8015b60 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011d02:	4a82      	ldr	r2, [pc, #520]	; (8011f0c <ProcessMacCommands+0xb10>)
 8011d04:	2390      	movs	r3, #144	; 0x90
 8011d06:	00db      	lsls	r3, r3, #3
 8011d08:	5cd3      	ldrb	r3, [r2, r3]
 8011d0a:	2b04      	cmp	r3, #4
 8011d0c:	d100      	bne.n	8011d10 <ProcessMacCommands+0x914>
 8011d0e:	e0eb      	b.n	8011ee8 <ProcessMacCommands+0xaec>
 8011d10:	4a7e      	ldr	r2, [pc, #504]	; (8011f0c <ProcessMacCommands+0xb10>)
 8011d12:	2390      	movs	r3, #144	; 0x90
 8011d14:	00db      	lsls	r3, r3, #3
 8011d16:	5cd3      	ldrb	r3, [r2, r3]
 8011d18:	2b05      	cmp	r3, #5
 8011d1a:	d100      	bne.n	8011d1e <ProcessMacCommands+0x922>
 8011d1c:	e0e4      	b.n	8011ee8 <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011d1e:	f003 fa86 	bl	801522e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011d22:	e0e1      	b.n	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011d24:	207c      	movs	r0, #124	; 0x7c
 8011d26:	183b      	adds	r3, r7, r0
 8011d28:	2203      	movs	r2, #3
 8011d2a:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011d30:	1cfb      	adds	r3, r7, #3
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	1cfa      	adds	r2, r7, #3
 8011d36:	1c59      	adds	r1, r3, #1
 8011d38:	7011      	strb	r1, [r2, #0]
 8011d3a:	001a      	movs	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	189b      	adds	r3, r3, r2
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011d44:	1cfb      	adds	r3, r7, #3
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	1cfa      	adds	r2, r7, #3
 8011d4a:	1c59      	adds	r1, r3, #1
 8011d4c:	7011      	strb	r1, [r2, #0]
 8011d4e:	001a      	movs	r2, r3
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	189b      	adds	r3, r3, r2
 8011d54:	781b      	ldrb	r3, [r3, #0]
 8011d56:	021b      	lsls	r3, r3, #8
 8011d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011d5a:	4313      	orrs	r3, r2
 8011d5c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011d5e:	1cfb      	adds	r3, r7, #3
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	1cfa      	adds	r2, r7, #3
 8011d64:	1c59      	adds	r1, r3, #1
 8011d66:	7011      	strb	r1, [r2, #0]
 8011d68:	001a      	movs	r2, r3
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	189b      	adds	r3, r3, r2
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	041b      	lsls	r3, r3, #16
 8011d72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011d74:	4313      	orrs	r3, r2
 8011d76:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8011d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d7a:	2264      	movs	r2, #100	; 0x64
 8011d7c:	4353      	muls	r3, r2
 8011d7e:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011d80:	1cfb      	adds	r3, r7, #3
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	1cfa      	adds	r2, r7, #3
 8011d86:	1c59      	adds	r1, r3, #1
 8011d88:	7011      	strb	r1, [r2, #0]
 8011d8a:	001a      	movs	r2, r3
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	189b      	adds	r3, r3, r2
 8011d90:	781a      	ldrb	r2, [r3, #0]
 8011d92:	2677      	movs	r6, #119	; 0x77
 8011d94:	19bb      	adds	r3, r7, r6
 8011d96:	210f      	movs	r1, #15
 8011d98:	400a      	ands	r2, r1
 8011d9a:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011d9c:	0005      	movs	r5, r0
 8011d9e:	183c      	adds	r4, r7, r0
 8011da0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011da2:	19bb      	adds	r3, r7, r6
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	0011      	movs	r1, r2
 8011da8:	0018      	movs	r0, r3
 8011daa:	f003 fa45 	bl	8015238 <LoRaMacClassBPingSlotChannelReq>
 8011dae:	0003      	movs	r3, r0
 8011db0:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8011db2:	2168      	movs	r1, #104	; 0x68
 8011db4:	187b      	adds	r3, r7, r1
 8011db6:	197a      	adds	r2, r7, r5
 8011db8:	7812      	ldrb	r2, [r2, #0]
 8011dba:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8011dbc:	187b      	adds	r3, r7, r1
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	0019      	movs	r1, r3
 8011dc2:	2011      	movs	r0, #17
 8011dc4:	f003 fbd6 	bl	8015574 <LoRaMacCommandsAddCmd>
                break;
 8011dc8:	e08e      	b.n	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8011dca:	200e      	movs	r0, #14
 8011dcc:	f003 ff64 	bl	8015c98 <LoRaMacConfirmQueueIsCmdActive>
 8011dd0:	1e03      	subs	r3, r0, #0
 8011dd2:	d100      	bne.n	8011dd6 <ProcessMacCommands+0x9da>
 8011dd4:	e088      	b.n	8011ee8 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011dd6:	210e      	movs	r1, #14
 8011dd8:	2000      	movs	r0, #0
 8011dda:	f003 fec1 	bl	8015b60 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011dde:	207e      	movs	r0, #126	; 0x7e
 8011de0:	183b      	adds	r3, r7, r0
 8011de2:	2200      	movs	r2, #0
 8011de4:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 8011de6:	247d      	movs	r4, #125	; 0x7d
 8011de8:	193b      	adds	r3, r7, r4
 8011dea:	2200      	movs	r2, #0
 8011dec:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011dee:	1cfb      	adds	r3, r7, #3
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	1cfa      	adds	r2, r7, #3
 8011df4:	1c59      	adds	r1, r3, #1
 8011df6:	7011      	strb	r1, [r2, #0]
 8011df8:	001a      	movs	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	189b      	adds	r3, r3, r2
 8011dfe:	781a      	ldrb	r2, [r3, #0]
 8011e00:	183b      	adds	r3, r7, r0
 8011e02:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011e04:	1cfb      	adds	r3, r7, #3
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	1cfa      	adds	r2, r7, #3
 8011e0a:	1c59      	adds	r1, r3, #1
 8011e0c:	7011      	strb	r1, [r2, #0]
 8011e0e:	001a      	movs	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	189b      	adds	r3, r3, r2
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	021b      	lsls	r3, r3, #8
 8011e18:	b21a      	sxth	r2, r3
 8011e1a:	183b      	adds	r3, r7, r0
 8011e1c:	2100      	movs	r1, #0
 8011e1e:	5e5b      	ldrsh	r3, [r3, r1]
 8011e20:	4313      	orrs	r3, r2
 8011e22:	b21a      	sxth	r2, r3
 8011e24:	183b      	adds	r3, r7, r0
 8011e26:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 8011e28:	1cfb      	adds	r3, r7, #3
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	1cfa      	adds	r2, r7, #3
 8011e2e:	1c59      	adds	r1, r3, #1
 8011e30:	7011      	strb	r1, [r2, #0]
 8011e32:	001a      	movs	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	189a      	adds	r2, r3, r2
 8011e38:	193b      	adds	r3, r7, r4
 8011e3a:	7812      	ldrb	r2, [r2, #0]
 8011e3c:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011e3e:	4b34      	ldr	r3, [pc, #208]	; (8011f10 <ProcessMacCommands+0xb14>)
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	193b      	adds	r3, r7, r4
 8011e44:	7819      	ldrb	r1, [r3, #0]
 8011e46:	183b      	adds	r3, r7, r0
 8011e48:	881b      	ldrh	r3, [r3, #0]
 8011e4a:	0018      	movs	r0, r3
 8011e4c:	f003 fa00 	bl	8015250 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011e50:	e04a      	b.n	8011ee8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011e52:	2300      	movs	r3, #0
 8011e54:	2080      	movs	r0, #128	; 0x80
 8011e56:	183a      	adds	r2, r7, r0
 8011e58:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 8011e5a:	1cfb      	adds	r3, r7, #3
 8011e5c:	781b      	ldrb	r3, [r3, #0]
 8011e5e:	1cfa      	adds	r2, r7, #3
 8011e60:	1c59      	adds	r1, r3, #1
 8011e62:	7011      	strb	r1, [r2, #0]
 8011e64:	001a      	movs	r2, r3
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	189b      	adds	r3, r3, r2
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	183a      	adds	r2, r7, r0
 8011e6e:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011e70:	1cfb      	adds	r3, r7, #3
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	1cfa      	adds	r2, r7, #3
 8011e76:	1c59      	adds	r1, r3, #1
 8011e78:	7011      	strb	r1, [r2, #0]
 8011e7a:	001a      	movs	r2, r3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	189b      	adds	r3, r3, r2
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	021b      	lsls	r3, r3, #8
 8011e84:	183a      	adds	r2, r7, r0
 8011e86:	6812      	ldr	r2, [r2, #0]
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	183a      	adds	r2, r7, r0
 8011e8c:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011e8e:	1cfb      	adds	r3, r7, #3
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	1cfa      	adds	r2, r7, #3
 8011e94:	1c59      	adds	r1, r3, #1
 8011e96:	7011      	strb	r1, [r2, #0]
 8011e98:	001a      	movs	r2, r3
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	189b      	adds	r3, r3, r2
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	041b      	lsls	r3, r3, #16
 8011ea2:	183a      	adds	r2, r7, r0
 8011ea4:	6812      	ldr	r2, [r2, #0]
 8011ea6:	4313      	orrs	r3, r2
 8011ea8:	183a      	adds	r2, r7, r0
 8011eaa:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 8011eac:	183b      	adds	r3, r7, r0
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	2264      	movs	r2, #100	; 0x64
 8011eb2:	4353      	muls	r3, r2
 8011eb4:	183a      	adds	r2, r7, r0
 8011eb6:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011eb8:	183b      	adds	r3, r7, r0
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	0018      	movs	r0, r3
 8011ebe:	f003 f9da 	bl	8015276 <LoRaMacClassBBeaconFreqReq>
 8011ec2:	1e03      	subs	r3, r0, #0
 8011ec4:	d004      	beq.n	8011ed0 <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 8011ec6:	2368      	movs	r3, #104	; 0x68
 8011ec8:	18fb      	adds	r3, r7, r3
 8011eca:	2201      	movs	r2, #1
 8011ecc:	701a      	strb	r2, [r3, #0]
 8011ece:	e003      	b.n	8011ed8 <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011ed0:	2368      	movs	r3, #104	; 0x68
 8011ed2:	18fb      	adds	r3, r7, r3
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011ed8:	2368      	movs	r3, #104	; 0x68
 8011eda:	18fb      	adds	r3, r7, r3
 8011edc:	2201      	movs	r2, #1
 8011ede:	0019      	movs	r1, r3
 8011ee0:	2013      	movs	r0, #19
 8011ee2:	f003 fb47 	bl	8015574 <LoRaMacCommandsAddCmd>
                }
                break;
 8011ee6:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 8011ee8:	1cfa      	adds	r2, r7, #3
 8011eea:	1cbb      	adds	r3, r7, #2
 8011eec:	7812      	ldrb	r2, [r2, #0]
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d201      	bcs.n	8011ef8 <ProcessMacCommands+0xafc>
 8011ef4:	f7ff faa0 	bl	8011438 <ProcessMacCommands+0x3c>
 8011ef8:	e002      	b.n	8011f00 <ProcessMacCommands+0xb04>
            return;
 8011efa:	46c0      	nop			; (mov r8, r8)
 8011efc:	e000      	b.n	8011f00 <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011efe:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8011f00:	46bd      	mov	sp, r7
 8011f02:	b023      	add	sp, #140	; 0x8c
 8011f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f06:	46c0      	nop			; (mov r8, r8)
 8011f08:	12d53d80 	.word	0x12d53d80
 8011f0c:	200007d0 	.word	0x200007d0
 8011f10:	20001a78 	.word	0x20001a78

08011f14 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f16:	b08f      	sub	sp, #60	; 0x3c
 8011f18:	af02      	add	r7, sp, #8
 8011f1a:	60f8      	str	r0, [r7, #12]
 8011f1c:	0008      	movs	r0, r1
 8011f1e:	607a      	str	r2, [r7, #4]
 8011f20:	0019      	movs	r1, r3
 8011f22:	230b      	movs	r3, #11
 8011f24:	18fb      	adds	r3, r7, r3
 8011f26:	1c02      	adds	r2, r0, #0
 8011f28:	701a      	strb	r2, [r3, #0]
 8011f2a:	2308      	movs	r3, #8
 8011f2c:	18fb      	adds	r3, r7, r3
 8011f2e:	1c0a      	adds	r2, r1, #0
 8011f30:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f32:	232f      	movs	r3, #47	; 0x2f
 8011f34:	18fb      	adds	r3, r7, r3
 8011f36:	2203      	movs	r2, #3
 8011f38:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011f3a:	4b90      	ldr	r3, [pc, #576]	; (801217c <Send+0x268>)
 8011f3c:	4a90      	ldr	r2, [pc, #576]	; (8012180 <Send+0x26c>)
 8011f3e:	589a      	ldr	r2, [r3, r2]
 8011f40:	232e      	movs	r3, #46	; 0x2e
 8011f42:	18fb      	adds	r3, r7, r3
 8011f44:	2185      	movs	r1, #133	; 0x85
 8011f46:	5c52      	ldrb	r2, [r2, r1]
 8011f48:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011f4a:	4b8c      	ldr	r3, [pc, #560]	; (801217c <Send+0x268>)
 8011f4c:	4a8c      	ldr	r2, [pc, #560]	; (8012180 <Send+0x26c>)
 8011f4e:	589a      	ldr	r2, [r3, r2]
 8011f50:	232d      	movs	r3, #45	; 0x2d
 8011f52:	18fb      	adds	r3, r7, r3
 8011f54:	2184      	movs	r1, #132	; 0x84
 8011f56:	5c52      	ldrb	r2, [r2, r1]
 8011f58:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8011f5a:	4b88      	ldr	r3, [pc, #544]	; (801217c <Send+0x268>)
 8011f5c:	4a88      	ldr	r2, [pc, #544]	; (8012180 <Send+0x26c>)
 8011f5e:	589b      	ldr	r3, [r3, r2]
 8011f60:	2280      	movs	r2, #128	; 0x80
 8011f62:	589b      	ldr	r3, [r3, r2]
 8011f64:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011f66:	4b85      	ldr	r3, [pc, #532]	; (801217c <Send+0x268>)
 8011f68:	4a85      	ldr	r2, [pc, #532]	; (8012180 <Send+0x26c>)
 8011f6a:	589a      	ldr	r2, [r3, r2]
 8011f6c:	23b2      	movs	r3, #178	; 0xb2
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	5cd3      	ldrb	r3, [r2, r3]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d101      	bne.n	8011f7a <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011f76:	2307      	movs	r3, #7
 8011f78:	e0fb      	b.n	8012172 <Send+0x25e>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8011f7a:	4b80      	ldr	r3, [pc, #512]	; (801217c <Send+0x268>)
 8011f7c:	4a80      	ldr	r2, [pc, #512]	; (8012180 <Send+0x26c>)
 8011f7e:	589b      	ldr	r3, [r3, r2]
 8011f80:	22c8      	movs	r2, #200	; 0xc8
 8011f82:	5c9b      	ldrb	r3, [r3, r2]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d106      	bne.n	8011f96 <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8011f88:	4b7c      	ldr	r3, [pc, #496]	; (801217c <Send+0x268>)
 8011f8a:	4a7d      	ldr	r2, [pc, #500]	; (8012180 <Send+0x26c>)
 8011f8c:	589a      	ldr	r2, [r3, r2]
 8011f8e:	23aa      	movs	r3, #170	; 0xaa
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	2100      	movs	r1, #0
 8011f94:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 8011f96:	242c      	movs	r4, #44	; 0x2c
 8011f98:	193b      	adds	r3, r7, r4
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 8011f9e:	193b      	adds	r3, r7, r4
 8011fa0:	781a      	ldrb	r2, [r3, #0]
 8011fa2:	210f      	movs	r1, #15
 8011fa4:	438a      	bics	r2, r1
 8011fa6:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8011fa8:	4b74      	ldr	r3, [pc, #464]	; (801217c <Send+0x268>)
 8011faa:	4a75      	ldr	r2, [pc, #468]	; (8012180 <Send+0x26c>)
 8011fac:	589b      	ldr	r3, [r3, r2]
 8011fae:	227e      	movs	r2, #126	; 0x7e
 8011fb0:	5c9a      	ldrb	r2, [r3, r2]
 8011fb2:	193b      	adds	r3, r7, r4
 8011fb4:	01d0      	lsls	r0, r2, #7
 8011fb6:	781a      	ldrb	r2, [r3, #0]
 8011fb8:	217f      	movs	r1, #127	; 0x7f
 8011fba:	400a      	ands	r2, r1
 8011fbc:	1c11      	adds	r1, r2, #0
 8011fbe:	1c02      	adds	r2, r0, #0
 8011fc0:	430a      	orrs	r2, r1
 8011fc2:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011fc4:	4b6d      	ldr	r3, [pc, #436]	; (801217c <Send+0x268>)
 8011fc6:	4a6e      	ldr	r2, [pc, #440]	; (8012180 <Send+0x26c>)
 8011fc8:	589b      	ldr	r3, [r3, r2]
 8011fca:	227c      	movs	r2, #124	; 0x7c
 8011fcc:	5c9b      	ldrb	r3, [r3, r2]
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d105      	bne.n	8011fde <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 8011fd2:	193b      	adds	r3, r7, r4
 8011fd4:	781a      	ldrb	r2, [r3, #0]
 8011fd6:	2110      	movs	r1, #16
 8011fd8:	430a      	orrs	r2, r1
 8011fda:	701a      	strb	r2, [r3, #0]
 8011fdc:	e005      	b.n	8011fea <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011fde:	232c      	movs	r3, #44	; 0x2c
 8011fe0:	18fb      	adds	r3, r7, r3
 8011fe2:	781a      	ldrb	r2, [r3, #0]
 8011fe4:	2110      	movs	r1, #16
 8011fe6:	438a      	bics	r2, r1
 8011fe8:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8011fea:	4b64      	ldr	r3, [pc, #400]	; (801217c <Send+0x268>)
 8011fec:	4a64      	ldr	r2, [pc, #400]	; (8012180 <Send+0x26c>)
 8011fee:	589a      	ldr	r2, [r3, r2]
 8011ff0:	234c      	movs	r3, #76	; 0x4c
 8011ff2:	33ff      	adds	r3, #255	; 0xff
 8011ff4:	5cd3      	ldrb	r3, [r2, r3]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d005      	beq.n	8012006 <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 8011ffa:	232c      	movs	r3, #44	; 0x2c
 8011ffc:	18fb      	adds	r3, r7, r3
 8011ffe:	781a      	ldrb	r2, [r3, #0]
 8012000:	2120      	movs	r1, #32
 8012002:	430a      	orrs	r2, r1
 8012004:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8012006:	4b5d      	ldr	r3, [pc, #372]	; (801217c <Send+0x268>)
 8012008:	4a5d      	ldr	r2, [pc, #372]	; (8012180 <Send+0x26c>)
 801200a:	5899      	ldr	r1, [r3, r2]
 801200c:	2014      	movs	r0, #20
 801200e:	183b      	adds	r3, r7, r0
 8012010:	22b0      	movs	r2, #176	; 0xb0
 8012012:	0052      	lsls	r2, r2, #1
 8012014:	588a      	ldr	r2, [r1, r2]
 8012016:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 8012018:	0001      	movs	r1, r0
 801201a:	187b      	adds	r3, r7, r1
 801201c:	2201      	movs	r2, #1
 801201e:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012020:	242c      	movs	r4, #44	; 0x2c
 8012022:	193b      	adds	r3, r7, r4
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	061b      	lsls	r3, r3, #24
 8012028:	0fdb      	lsrs	r3, r3, #31
 801202a:	b2db      	uxtb	r3, r3
 801202c:	1e5a      	subs	r2, r3, #1
 801202e:	4193      	sbcs	r3, r2
 8012030:	b2da      	uxtb	r2, r3
 8012032:	187b      	adds	r3, r7, r1
 8012034:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8012036:	4b51      	ldr	r3, [pc, #324]	; (801217c <Send+0x268>)
 8012038:	4a51      	ldr	r2, [pc, #324]	; (8012180 <Send+0x26c>)
 801203a:	589b      	ldr	r3, [r3, r2]
 801203c:	2280      	movs	r2, #128	; 0x80
 801203e:	589a      	ldr	r2, [r3, r2]
 8012040:	0008      	movs	r0, r1
 8012042:	183b      	adds	r3, r7, r0
 8012044:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012046:	4a4d      	ldr	r2, [pc, #308]	; (801217c <Send+0x268>)
 8012048:	23fd      	movs	r3, #253	; 0xfd
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	5ad2      	ldrh	r2, [r2, r3]
 801204e:	183b      	adds	r3, r7, r0
 8012050:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012052:	4b4a      	ldr	r3, [pc, #296]	; (801217c <Send+0x268>)
 8012054:	4a4b      	ldr	r2, [pc, #300]	; (8012184 <Send+0x270>)
 8012056:	5a9a      	ldrh	r2, [r3, r2]
 8012058:	183b      	adds	r3, r7, r0
 801205a:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801205c:	4b47      	ldr	r3, [pc, #284]	; (801217c <Send+0x268>)
 801205e:	4a48      	ldr	r2, [pc, #288]	; (8012180 <Send+0x26c>)
 8012060:	589b      	ldr	r3, [r3, r2]
 8012062:	2285      	movs	r2, #133	; 0x85
 8012064:	569a      	ldrsb	r2, [r3, r2]
 8012066:	183b      	adds	r3, r7, r0
 8012068:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801206a:	4b44      	ldr	r3, [pc, #272]	; (801217c <Send+0x268>)
 801206c:	4a44      	ldr	r2, [pc, #272]	; (8012180 <Send+0x26c>)
 801206e:	589b      	ldr	r3, [r3, r2]
 8012070:	2284      	movs	r2, #132	; 0x84
 8012072:	569a      	ldrsb	r2, [r3, r2]
 8012074:	183b      	adds	r3, r7, r0
 8012076:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012078:	4b40      	ldr	r3, [pc, #256]	; (801217c <Send+0x268>)
 801207a:	4a41      	ldr	r2, [pc, #260]	; (8012180 <Send+0x26c>)
 801207c:	589b      	ldr	r3, [r3, r2]
 801207e:	22b8      	movs	r2, #184	; 0xb8
 8012080:	5c9a      	ldrb	r2, [r3, r2]
 8012082:	183b      	adds	r3, r7, r0
 8012084:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8012086:	4b3d      	ldr	r3, [pc, #244]	; (801217c <Send+0x268>)
 8012088:	4a3d      	ldr	r2, [pc, #244]	; (8012180 <Send+0x26c>)
 801208a:	589b      	ldr	r3, [r3, r2]
 801208c:	781a      	ldrb	r2, [r3, #0]
 801208e:	183b      	adds	r3, r7, r0
 8012090:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8012092:	4b3a      	ldr	r3, [pc, #232]	; (801217c <Send+0x268>)
 8012094:	4a3a      	ldr	r2, [pc, #232]	; (8012180 <Send+0x26c>)
 8012096:	589b      	ldr	r3, [r3, r2]
 8012098:	3385      	adds	r3, #133	; 0x85
 801209a:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 801209c:	4b37      	ldr	r3, [pc, #220]	; (801217c <Send+0x268>)
 801209e:	4a38      	ldr	r2, [pc, #224]	; (8012180 <Send+0x26c>)
 80120a0:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80120a2:	3384      	adds	r3, #132	; 0x84
 80120a4:	001a      	movs	r2, r3
 80120a6:	2328      	movs	r3, #40	; 0x28
 80120a8:	18fb      	adds	r3, r7, r3
 80120aa:	1838      	adds	r0, r7, r0
 80120ac:	f002 fff7 	bl	801509e <LoRaMacAdrCalcNext>
 80120b0:	0003      	movs	r3, r0
 80120b2:	0019      	movs	r1, r3
 80120b4:	0026      	movs	r6, r4
 80120b6:	193b      	adds	r3, r7, r4
 80120b8:	2201      	movs	r2, #1
 80120ba:	400a      	ands	r2, r1
 80120bc:	0190      	lsls	r0, r2, #6
 80120be:	781a      	ldrb	r2, [r3, #0]
 80120c0:	2140      	movs	r1, #64	; 0x40
 80120c2:	438a      	bics	r2, r1
 80120c4:	1c11      	adds	r1, r2, #0
 80120c6:	1c02      	adds	r2, r0, #0
 80120c8:	430a      	orrs	r2, r1
 80120ca:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80120cc:	222f      	movs	r2, #47	; 0x2f
 80120ce:	18bc      	adds	r4, r7, r2
 80120d0:	687d      	ldr	r5, [r7, #4]
 80120d2:	230b      	movs	r3, #11
 80120d4:	18fb      	adds	r3, r7, r3
 80120d6:	781a      	ldrb	r2, [r3, #0]
 80120d8:	19b9      	adds	r1, r7, r6
 80120da:	68f8      	ldr	r0, [r7, #12]
 80120dc:	2308      	movs	r3, #8
 80120de:	18fb      	adds	r3, r7, r3
 80120e0:	881b      	ldrh	r3, [r3, #0]
 80120e2:	9300      	str	r3, [sp, #0]
 80120e4:	002b      	movs	r3, r5
 80120e6:	f000 fd07 	bl	8012af8 <PrepareFrame>
 80120ea:	0003      	movs	r3, r0
 80120ec:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80120ee:	222f      	movs	r2, #47	; 0x2f
 80120f0:	18bb      	adds	r3, r7, r2
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d003      	beq.n	8012100 <Send+0x1ec>
 80120f8:	18bb      	adds	r3, r7, r2
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	2b0a      	cmp	r3, #10
 80120fe:	d10c      	bne.n	801211a <Send+0x206>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012100:	232f      	movs	r3, #47	; 0x2f
 8012102:	18fc      	adds	r4, r7, r3
 8012104:	2340      	movs	r3, #64	; 0x40
 8012106:	2208      	movs	r2, #8
 8012108:	4694      	mov	ip, r2
 801210a:	44bc      	add	ip, r7
 801210c:	4463      	add	r3, ip
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	0018      	movs	r0, r3
 8012112:	f000 f9cd 	bl	80124b0 <ScheduleTx>
 8012116:	0003      	movs	r3, r0
 8012118:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801211a:	232f      	movs	r3, #47	; 0x2f
 801211c:	18fb      	adds	r3, r7, r3
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d010      	beq.n	8012146 <Send+0x232>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8012124:	4b15      	ldr	r3, [pc, #84]	; (801217c <Send+0x268>)
 8012126:	4a16      	ldr	r2, [pc, #88]	; (8012180 <Send+0x26c>)
 8012128:	589b      	ldr	r3, [r3, r2]
 801212a:	222e      	movs	r2, #46	; 0x2e
 801212c:	18ba      	adds	r2, r7, r2
 801212e:	2185      	movs	r1, #133	; 0x85
 8012130:	7812      	ldrb	r2, [r2, #0]
 8012132:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8012134:	4b11      	ldr	r3, [pc, #68]	; (801217c <Send+0x268>)
 8012136:	4a12      	ldr	r2, [pc, #72]	; (8012180 <Send+0x26c>)
 8012138:	589b      	ldr	r3, [r3, r2]
 801213a:	222d      	movs	r2, #45	; 0x2d
 801213c:	18ba      	adds	r2, r7, r2
 801213e:	2184      	movs	r1, #132	; 0x84
 8012140:	7812      	ldrb	r2, [r2, #0]
 8012142:	545a      	strb	r2, [r3, r1]
 8012144:	e012      	b.n	801216c <Send+0x258>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 8012146:	4b0d      	ldr	r3, [pc, #52]	; (801217c <Send+0x268>)
 8012148:	4a0d      	ldr	r2, [pc, #52]	; (8012180 <Send+0x26c>)
 801214a:	589a      	ldr	r2, [r3, r2]
 801214c:	234c      	movs	r3, #76	; 0x4c
 801214e:	33ff      	adds	r3, #255	; 0xff
 8012150:	2100      	movs	r1, #0
 8012152:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8012154:	4b09      	ldr	r3, [pc, #36]	; (801217c <Send+0x268>)
 8012156:	4a0a      	ldr	r2, [pc, #40]	; (8012180 <Send+0x26c>)
 8012158:	589b      	ldr	r3, [r3, r2]
 801215a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801215c:	2180      	movs	r1, #128	; 0x80
 801215e:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012160:	f003 fa92 	bl	8015688 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012164:	1e03      	subs	r3, r0, #0
 8012166:	d001      	beq.n	801216c <Send+0x258>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012168:	2313      	movs	r3, #19
 801216a:	e002      	b.n	8012172 <Send+0x25e>
        }
    }
    return status;
 801216c:	232f      	movs	r3, #47	; 0x2f
 801216e:	18fb      	adds	r3, r7, r3
 8012170:	781b      	ldrb	r3, [r3, #0]
}
 8012172:	0018      	movs	r0, r3
 8012174:	46bd      	mov	sp, r7
 8012176:	b00d      	add	sp, #52	; 0x34
 8012178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801217a:	46c0      	nop			; (mov r8, r8)
 801217c:	200007d0 	.word	0x200007d0
 8012180:	00000484 	.word	0x00000484
 8012184:	000003f6 	.word	0x000003f6

08012188 <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 8012188:	b5b0      	push	{r4, r5, r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	0002      	movs	r2, r0
 8012190:	1dfb      	adds	r3, r7, #7
 8012192:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012194:	230e      	movs	r3, #14
 8012196:	18fb      	adds	r3, r7, r3
 8012198:	2200      	movs	r2, #0
 801219a:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 801219c:	240c      	movs	r4, #12
 801219e:	193b      	adds	r3, r7, r4
 80121a0:	2200      	movs	r2, #0
 80121a2:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 80121a4:	250f      	movs	r5, #15
 80121a6:	197b      	adds	r3, r7, r5
 80121a8:	2201      	movs	r2, #1
 80121aa:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 80121ac:	1dfb      	adds	r3, r7, #7
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	2bff      	cmp	r3, #255	; 0xff
 80121b2:	d130      	bne.n	8012216 <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80121b4:	2000      	movs	r0, #0
 80121b6:	f7fe ff7b 	bl	80110b0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80121ba:	4a21      	ldr	r2, [pc, #132]	; (8012240 <SendReJoinReq+0xb8>)
 80121bc:	2382      	movs	r3, #130	; 0x82
 80121be:	005b      	lsls	r3, r3, #1
 80121c0:	2100      	movs	r1, #0
 80121c2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80121c4:	4a1e      	ldr	r2, [pc, #120]	; (8012240 <SendReJoinReq+0xb8>)
 80121c6:	2384      	movs	r3, #132	; 0x84
 80121c8:	005b      	lsls	r3, r3, #1
 80121ca:	491e      	ldr	r1, [pc, #120]	; (8012244 <SendReJoinReq+0xbc>)
 80121cc:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80121ce:	4a1c      	ldr	r2, [pc, #112]	; (8012240 <SendReJoinReq+0xb8>)
 80121d0:	2386      	movs	r3, #134	; 0x86
 80121d2:	005b      	lsls	r3, r3, #1
 80121d4:	21ff      	movs	r1, #255	; 0xff
 80121d6:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80121d8:	193b      	adds	r3, r7, r4
 80121da:	781a      	ldrb	r2, [r3, #0]
 80121dc:	211f      	movs	r1, #31
 80121de:	400a      	ands	r2, r1
 80121e0:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80121e2:	193b      	adds	r3, r7, r4
 80121e4:	7819      	ldrb	r1, [r3, #0]
 80121e6:	4a16      	ldr	r2, [pc, #88]	; (8012240 <SendReJoinReq+0xb8>)
 80121e8:	230e      	movs	r3, #14
 80121ea:	33ff      	adds	r3, #255	; 0xff
 80121ec:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80121ee:	f7fb fec9 	bl	800df84 <SecureElementGetJoinEui>
 80121f2:	0001      	movs	r1, r0
 80121f4:	4b14      	ldr	r3, [pc, #80]	; (8012248 <SendReJoinReq+0xc0>)
 80121f6:	2208      	movs	r2, #8
 80121f8:	0018      	movs	r0, r3
 80121fa:	f007 fdf9 	bl	8019df0 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80121fe:	f7fb fe9d 	bl	800df3c <SecureElementGetDevEui>
 8012202:	0001      	movs	r1, r0
 8012204:	4b11      	ldr	r3, [pc, #68]	; (801224c <SendReJoinReq+0xc4>)
 8012206:	2208      	movs	r2, #8
 8012208:	0018      	movs	r0, r3
 801220a:	f007 fdf1 	bl	8019df0 <memcpy1>

            allowDelayedTx = false;
 801220e:	197b      	adds	r3, r7, r5
 8012210:	2200      	movs	r2, #0
 8012212:	701a      	strb	r2, [r3, #0]

            break;
 8012214:	e004      	b.n	8012220 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012216:	230e      	movs	r3, #14
 8012218:	18fb      	adds	r3, r7, r3
 801221a:	2202      	movs	r2, #2
 801221c:	701a      	strb	r2, [r3, #0]
            break;
 801221e:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012220:	250e      	movs	r5, #14
 8012222:	197c      	adds	r4, r7, r5
 8012224:	230f      	movs	r3, #15
 8012226:	18fb      	adds	r3, r7, r3
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	0018      	movs	r0, r3
 801222c:	f000 f940 	bl	80124b0 <ScheduleTx>
 8012230:	0003      	movs	r3, r0
 8012232:	7023      	strb	r3, [r4, #0]
    return status;
 8012234:	197b      	adds	r3, r7, r5
 8012236:	781b      	ldrb	r3, [r3, #0]
}
 8012238:	0018      	movs	r0, r3
 801223a:	46bd      	mov	sp, r7
 801223c:	b004      	add	sp, #16
 801223e:	bdb0      	pop	{r4, r5, r7, pc}
 8012240:	200007d0 	.word	0x200007d0
 8012244:	200007d2 	.word	0x200007d2
 8012248:	200008de 	.word	0x200008de
 801224c:	200008e6 	.word	0x200008e6

08012250 <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012250:	b580      	push	{r7, lr}
 8012252:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012254:	f002 ffa2 	bl	801519c <LoRaMacClassBIsBeaconExpected>
 8012258:	1e03      	subs	r3, r0, #0
 801225a:	d001      	beq.n	8012260 <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801225c:	230e      	movs	r3, #14
 801225e:	e013      	b.n	8012288 <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8012260:	4b0b      	ldr	r3, [pc, #44]	; (8012290 <CheckForClassBCollision+0x40>)
 8012262:	4a0c      	ldr	r2, [pc, #48]	; (8012294 <CheckForClassBCollision+0x44>)
 8012264:	589b      	ldr	r3, [r3, r2]
 8012266:	227c      	movs	r2, #124	; 0x7c
 8012268:	5c9b      	ldrb	r3, [r3, r2]
 801226a:	2b01      	cmp	r3, #1
 801226c:	d10b      	bne.n	8012286 <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801226e:	f002 ff9b 	bl	80151a8 <LoRaMacClassBIsPingExpected>
 8012272:	1e03      	subs	r3, r0, #0
 8012274:	d001      	beq.n	801227a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012276:	230f      	movs	r3, #15
 8012278:	e006      	b.n	8012288 <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801227a:	f002 ff9b 	bl	80151b4 <LoRaMacClassBIsMulticastExpected>
 801227e:	1e03      	subs	r3, r0, #0
 8012280:	d001      	beq.n	8012286 <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012282:	230f      	movs	r3, #15
 8012284:	e000      	b.n	8012288 <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 8012286:	2300      	movs	r3, #0
}
 8012288:	0018      	movs	r0, r3
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	46c0      	nop			; (mov r8, r8)
 8012290:	200007d0 	.word	0x200007d0
 8012294:	00000484 	.word	0x00000484

08012298 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8012298:	b5b0      	push	{r4, r5, r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801229e:	4b44      	ldr	r3, [pc, #272]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 80122a0:	4a44      	ldr	r2, [pc, #272]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 80122a2:	589b      	ldr	r3, [r3, r2]
 80122a4:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80122a6:	4b42      	ldr	r3, [pc, #264]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 80122a8:	4a42      	ldr	r2, [pc, #264]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 80122aa:	589b      	ldr	r3, [r3, r2]
 80122ac:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 80122ae:	4b40      	ldr	r3, [pc, #256]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 80122b0:	4a40      	ldr	r2, [pc, #256]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 80122b2:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80122b4:	22b9      	movs	r2, #185	; 0xb9
 80122b6:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80122b8:	4b3d      	ldr	r3, [pc, #244]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 80122ba:	4a3e      	ldr	r2, [pc, #248]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 80122bc:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80122be:	2285      	movs	r2, #133	; 0x85
 80122c0:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 80122c2:	4b3b      	ldr	r3, [pc, #236]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 80122c4:	4d3b      	ldr	r5, [pc, #236]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 80122c6:	595b      	ldr	r3, [r3, r5]
 80122c8:	25a5      	movs	r5, #165	; 0xa5
 80122ca:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80122cc:	b25b      	sxtb	r3, r3
 80122ce:	f005 fad1 	bl	8017874 <RegionApplyDrOffset>
 80122d2:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80122d4:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80122d6:	4b36      	ldr	r3, [pc, #216]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 80122d8:	4a36      	ldr	r2, [pc, #216]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 80122da:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80122dc:	228c      	movs	r2, #140	; 0x8c
 80122de:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 80122e0:	4b33      	ldr	r3, [pc, #204]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 80122e2:	4834      	ldr	r0, [pc, #208]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 80122e4:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80122e6:	2088      	movs	r0, #136	; 0x88
 80122e8:	5818      	ldr	r0, [r3, r0]
 80122ea:	4b33      	ldr	r3, [pc, #204]	; (80123b8 <ComputeRxWindowParameters+0x120>)
 80122ec:	9300      	str	r3, [sp, #0]
 80122ee:	0003      	movs	r3, r0
 80122f0:	0020      	movs	r0, r4
 80122f2:	f005 f99d 	bl	8017630 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80122f6:	4b2e      	ldr	r3, [pc, #184]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 80122f8:	4a2e      	ldr	r2, [pc, #184]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 80122fa:	589b      	ldr	r3, [r3, r2]
 80122fc:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 80122fe:	4b2c      	ldr	r3, [pc, #176]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 8012300:	4a2c      	ldr	r2, [pc, #176]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 8012302:	589b      	ldr	r3, [r3, r2]
 8012304:	22ac      	movs	r2, #172	; 0xac
 8012306:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012308:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 801230a:	4b29      	ldr	r3, [pc, #164]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 801230c:	4a29      	ldr	r2, [pc, #164]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 801230e:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012310:	228c      	movs	r2, #140	; 0x8c
 8012312:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8012314:	4b26      	ldr	r3, [pc, #152]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 8012316:	4c27      	ldr	r4, [pc, #156]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 8012318:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801231a:	2488      	movs	r4, #136	; 0x88
 801231c:	591c      	ldr	r4, [r3, r4]
 801231e:	4b27      	ldr	r3, [pc, #156]	; (80123bc <ComputeRxWindowParameters+0x124>)
 8012320:	9300      	str	r3, [sp, #0]
 8012322:	0023      	movs	r3, r4
 8012324:	f005 f984 	bl	8017630 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012328:	4b21      	ldr	r3, [pc, #132]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 801232a:	4a22      	ldr	r2, [pc, #136]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 801232c:	589b      	ldr	r3, [r3, r2]
 801232e:	2294      	movs	r2, #148	; 0x94
 8012330:	589b      	ldr	r3, [r3, r2]
 8012332:	491f      	ldr	r1, [pc, #124]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 8012334:	22f1      	movs	r2, #241	; 0xf1
 8012336:	0092      	lsls	r2, r2, #2
 8012338:	588a      	ldr	r2, [r1, r2]
 801233a:	1899      	adds	r1, r3, r2
 801233c:	4a1c      	ldr	r2, [pc, #112]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 801233e:	23ec      	movs	r3, #236	; 0xec
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012344:	4b1a      	ldr	r3, [pc, #104]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 8012346:	4a1b      	ldr	r2, [pc, #108]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 8012348:	589b      	ldr	r3, [r3, r2]
 801234a:	2298      	movs	r2, #152	; 0x98
 801234c:	589b      	ldr	r3, [r3, r2]
 801234e:	4918      	ldr	r1, [pc, #96]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 8012350:	22f6      	movs	r2, #246	; 0xf6
 8012352:	0092      	lsls	r2, r2, #2
 8012354:	588a      	ldr	r2, [r1, r2]
 8012356:	1899      	adds	r1, r3, r2
 8012358:	4a15      	ldr	r2, [pc, #84]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 801235a:	23ed      	movs	r3, #237	; 0xed
 801235c:	009b      	lsls	r3, r3, #2
 801235e:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8012360:	4b13      	ldr	r3, [pc, #76]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 8012362:	4a14      	ldr	r2, [pc, #80]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 8012364:	589a      	ldr	r2, [r3, r2]
 8012366:	23b2      	movs	r3, #178	; 0xb2
 8012368:	005b      	lsls	r3, r3, #1
 801236a:	5cd3      	ldrb	r3, [r2, r3]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d11b      	bne.n	80123a8 <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012370:	4b0f      	ldr	r3, [pc, #60]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 8012372:	4a10      	ldr	r2, [pc, #64]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 8012374:	589b      	ldr	r3, [r3, r2]
 8012376:	229c      	movs	r2, #156	; 0x9c
 8012378:	589b      	ldr	r3, [r3, r2]
 801237a:	490d      	ldr	r1, [pc, #52]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 801237c:	22f1      	movs	r2, #241	; 0xf1
 801237e:	0092      	lsls	r2, r2, #2
 8012380:	588a      	ldr	r2, [r1, r2]
 8012382:	1899      	adds	r1, r3, r2
 8012384:	4a0a      	ldr	r2, [pc, #40]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 8012386:	23ec      	movs	r3, #236	; 0xec
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801238c:	4b08      	ldr	r3, [pc, #32]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 801238e:	4a09      	ldr	r2, [pc, #36]	; (80123b4 <ComputeRxWindowParameters+0x11c>)
 8012390:	589b      	ldr	r3, [r3, r2]
 8012392:	22a0      	movs	r2, #160	; 0xa0
 8012394:	589b      	ldr	r3, [r3, r2]
 8012396:	4906      	ldr	r1, [pc, #24]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 8012398:	22f6      	movs	r2, #246	; 0xf6
 801239a:	0092      	lsls	r2, r2, #2
 801239c:	588a      	ldr	r2, [r1, r2]
 801239e:	1899      	adds	r1, r3, r2
 80123a0:	4a03      	ldr	r2, [pc, #12]	; (80123b0 <ComputeRxWindowParameters+0x118>)
 80123a2:	23ed      	movs	r3, #237	; 0xed
 80123a4:	009b      	lsls	r3, r3, #2
 80123a6:	50d1      	str	r1, [r2, r3]
    }
}
 80123a8:	46c0      	nop			; (mov r8, r8)
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bdb0      	pop	{r4, r5, r7, pc}
 80123ae:	46c0      	nop			; (mov r8, r8)
 80123b0:	200007d0 	.word	0x200007d0
 80123b4:	00000484 	.word	0x00000484
 80123b8:	20000b88 	.word	0x20000b88
 80123bc:	20000b9c 	.word	0x20000b9c

080123c0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80123c6:	2300      	movs	r3, #0
 80123c8:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80123ca:	4b15      	ldr	r3, [pc, #84]	; (8012420 <VerifyTxFrame+0x60>)
 80123cc:	4a15      	ldr	r2, [pc, #84]	; (8012424 <VerifyTxFrame+0x64>)
 80123ce:	589a      	ldr	r2, [r3, r2]
 80123d0:	23b2      	movs	r3, #178	; 0xb2
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	5cd3      	ldrb	r3, [r2, r3]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d01d      	beq.n	8012416 <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80123da:	1d3b      	adds	r3, r7, #4
 80123dc:	0018      	movs	r0, r3
 80123de:	f003 f99f 	bl	8015720 <LoRaMacCommandsGetSizeSerializedCmds>
 80123e2:	1e03      	subs	r3, r0, #0
 80123e4:	d001      	beq.n	80123ea <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80123e6:	2313      	movs	r3, #19
 80123e8:	e016      	b.n	8012418 <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 80123ea:	4b0d      	ldr	r3, [pc, #52]	; (8012420 <VerifyTxFrame+0x60>)
 80123ec:	4a0e      	ldr	r2, [pc, #56]	; (8012428 <VerifyTxFrame+0x68>)
 80123ee:	5c98      	ldrb	r0, [r3, r2]
 80123f0:	4b0b      	ldr	r3, [pc, #44]	; (8012420 <VerifyTxFrame+0x60>)
 80123f2:	4a0c      	ldr	r2, [pc, #48]	; (8012424 <VerifyTxFrame+0x64>)
 80123f4:	589b      	ldr	r3, [r3, r2]
 80123f6:	2285      	movs	r2, #133	; 0x85
 80123f8:	569b      	ldrsb	r3, [r3, r2]
 80123fa:	687a      	ldr	r2, [r7, #4]
 80123fc:	b2d2      	uxtb	r2, r2
 80123fe:	0019      	movs	r1, r3
 8012400:	f7fe ffb0 	bl	8011364 <ValidatePayloadLength>
 8012404:	0003      	movs	r3, r0
 8012406:	001a      	movs	r2, r3
 8012408:	2301      	movs	r3, #1
 801240a:	4053      	eors	r3, r2
 801240c:	b2db      	uxtb	r3, r3
 801240e:	2b00      	cmp	r3, #0
 8012410:	d001      	beq.n	8012416 <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8012412:	2308      	movs	r3, #8
 8012414:	e000      	b.n	8012418 <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 8012416:	2300      	movs	r3, #0
}
 8012418:	0018      	movs	r0, r3
 801241a:	46bd      	mov	sp, r7
 801241c:	b002      	add	sp, #8
 801241e:	bd80      	pop	{r7, pc}
 8012420:	200007d0 	.word	0x200007d0
 8012424:	00000484 	.word	0x00000484
 8012428:	00000237 	.word	0x00000237

0801242c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 801242c:	b590      	push	{r4, r7, lr}
 801242e:	b083      	sub	sp, #12
 8012430:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8012432:	4a1d      	ldr	r2, [pc, #116]	; (80124a8 <SerializeTxFrame+0x7c>)
 8012434:	2382      	movs	r3, #130	; 0x82
 8012436:	005b      	lsls	r3, r3, #1
 8012438:	5cd3      	ldrb	r3, [r2, r3]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d002      	beq.n	8012444 <SerializeTxFrame+0x18>
 801243e:	2b04      	cmp	r3, #4
 8012440:	d015      	beq.n	801246e <SerializeTxFrame+0x42>
 8012442:	e029      	b.n	8012498 <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012444:	1dfc      	adds	r4, r7, #7
 8012446:	4b19      	ldr	r3, [pc, #100]	; (80124ac <SerializeTxFrame+0x80>)
 8012448:	0018      	movs	r0, r3
 801244a:	f004 fe6b 	bl	8017124 <LoRaMacSerializerJoinRequest>
 801244e:	0003      	movs	r3, r0
 8012450:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012452:	1dfb      	adds	r3, r7, #7
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d001      	beq.n	801245e <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801245a:	2311      	movs	r3, #17
 801245c:	e01f      	b.n	801249e <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801245e:	4a12      	ldr	r2, [pc, #72]	; (80124a8 <SerializeTxFrame+0x7c>)
 8012460:	2386      	movs	r3, #134	; 0x86
 8012462:	005b      	lsls	r3, r3, #1
 8012464:	5cd3      	ldrb	r3, [r2, r3]
 8012466:	b29a      	uxth	r2, r3
 8012468:	4b0f      	ldr	r3, [pc, #60]	; (80124a8 <SerializeTxFrame+0x7c>)
 801246a:	801a      	strh	r2, [r3, #0]
            break;
 801246c:	e016      	b.n	801249c <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 801246e:	1dfc      	adds	r4, r7, #7
 8012470:	4b0e      	ldr	r3, [pc, #56]	; (80124ac <SerializeTxFrame+0x80>)
 8012472:	0018      	movs	r0, r3
 8012474:	f004 fef1 	bl	801725a <LoRaMacSerializerData>
 8012478:	0003      	movs	r3, r0
 801247a:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801247c:	1dfb      	adds	r3, r7, #7
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d001      	beq.n	8012488 <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012484:	2311      	movs	r3, #17
 8012486:	e00a      	b.n	801249e <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012488:	4a07      	ldr	r2, [pc, #28]	; (80124a8 <SerializeTxFrame+0x7c>)
 801248a:	2386      	movs	r3, #134	; 0x86
 801248c:	005b      	lsls	r3, r3, #1
 801248e:	5cd3      	ldrb	r3, [r2, r3]
 8012490:	b29a      	uxth	r2, r3
 8012492:	4b05      	ldr	r3, [pc, #20]	; (80124a8 <SerializeTxFrame+0x7c>)
 8012494:	801a      	strh	r2, [r3, #0]
            break;
 8012496:	e001      	b.n	801249c <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012498:	2303      	movs	r3, #3
 801249a:	e000      	b.n	801249e <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 801249c:	2300      	movs	r3, #0
}
 801249e:	0018      	movs	r0, r3
 80124a0:	46bd      	mov	sp, r7
 80124a2:	b003      	add	sp, #12
 80124a4:	bd90      	pop	{r4, r7, pc}
 80124a6:	46c0      	nop			; (mov r8, r8)
 80124a8:	200007d0 	.word	0x200007d0
 80124ac:	200008d8 	.word	0x200008d8

080124b0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80124b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124b2:	b091      	sub	sp, #68	; 0x44
 80124b4:	af02      	add	r7, sp, #8
 80124b6:	0002      	movs	r2, r0
 80124b8:	230f      	movs	r3, #15
 80124ba:	18fb      	adds	r3, r7, r3
 80124bc:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124be:	2537      	movs	r5, #55	; 0x37
 80124c0:	197b      	adds	r3, r7, r5
 80124c2:	2203      	movs	r2, #3
 80124c4:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80124c6:	197c      	adds	r4, r7, r5
 80124c8:	f7ff fec2 	bl	8012250 <CheckForClassBCollision>
 80124cc:	0003      	movs	r3, r0
 80124ce:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80124d0:	002a      	movs	r2, r5
 80124d2:	18bb      	adds	r3, r7, r2
 80124d4:	781b      	ldrb	r3, [r3, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d002      	beq.n	80124e0 <ScheduleTx+0x30>
    {
        return status;
 80124da:	18bb      	adds	r3, r7, r2
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	e0c3      	b.n	8012668 <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 80124e0:	f000 f940 	bl	8012764 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80124e4:	2537      	movs	r5, #55	; 0x37
 80124e6:	197c      	adds	r4, r7, r5
 80124e8:	f7ff ffa0 	bl	801242c <SerializeTxFrame>
 80124ec:	0003      	movs	r3, r0
 80124ee:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80124f0:	002a      	movs	r2, r5
 80124f2:	18bb      	adds	r3, r7, r2
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d002      	beq.n	8012500 <ScheduleTx+0x50>
    {
        return status;
 80124fa:	18bb      	adds	r3, r7, r2
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	e0b3      	b.n	8012668 <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8012500:	4b5b      	ldr	r3, [pc, #364]	; (8012670 <ScheduleTx+0x1c0>)
 8012502:	4a5c      	ldr	r2, [pc, #368]	; (8012674 <ScheduleTx+0x1c4>)
 8012504:	589a      	ldr	r2, [r3, r2]
 8012506:	23aa      	movs	r3, #170	; 0xaa
 8012508:	005b      	lsls	r3, r3, #1
 801250a:	58d2      	ldr	r2, [r2, r3]
 801250c:	2414      	movs	r4, #20
 801250e:	193b      	adds	r3, r7, r4
 8012510:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012512:	4b57      	ldr	r3, [pc, #348]	; (8012670 <ScheduleTx+0x1c0>)
 8012514:	4a57      	ldr	r2, [pc, #348]	; (8012674 <ScheduleTx+0x1c4>)
 8012516:	589b      	ldr	r3, [r3, r2]
 8012518:	2285      	movs	r2, #133	; 0x85
 801251a:	569a      	ldrsb	r2, [r3, r2]
 801251c:	193b      	adds	r3, r7, r4
 801251e:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8012520:	4b53      	ldr	r3, [pc, #332]	; (8012670 <ScheduleTx+0x1c0>)
 8012522:	4a54      	ldr	r2, [pc, #336]	; (8012674 <ScheduleTx+0x1c4>)
 8012524:	589b      	ldr	r3, [r3, r2]
 8012526:	22c9      	movs	r2, #201	; 0xc9
 8012528:	5c9a      	ldrb	r2, [r3, r2]
 801252a:	193b      	adds	r3, r7, r4
 801252c:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 801252e:	232c      	movs	r3, #44	; 0x2c
 8012530:	18fb      	adds	r3, r7, r3
 8012532:	0018      	movs	r0, r3
 8012534:	f00a ffb8 	bl	801d4a8 <SysTimeGetMcuTime>
 8012538:	4b4d      	ldr	r3, [pc, #308]	; (8012670 <ScheduleTx+0x1c0>)
 801253a:	4a4e      	ldr	r2, [pc, #312]	; (8012674 <ScheduleTx+0x1c4>)
 801253c:	5898      	ldr	r0, [r3, r2]
 801253e:	193d      	adds	r5, r7, r4
 8012540:	003e      	movs	r6, r7
 8012542:	23ac      	movs	r3, #172	; 0xac
 8012544:	0059      	lsls	r1, r3, #1
 8012546:	232c      	movs	r3, #44	; 0x2c
 8012548:	18fa      	adds	r2, r7, r3
 801254a:	2404      	movs	r4, #4
 801254c:	1843      	adds	r3, r0, r1
 801254e:	191c      	adds	r4, r3, r4
 8012550:	466b      	mov	r3, sp
 8012552:	6824      	ldr	r4, [r4, #0]
 8012554:	601c      	str	r4, [r3, #0]
 8012556:	5843      	ldr	r3, [r0, r1]
 8012558:	6811      	ldr	r1, [r2, #0]
 801255a:	6852      	ldr	r2, [r2, #4]
 801255c:	0030      	movs	r0, r6
 801255e:	f00a fed5 	bl	801d30c <SysTimeSub>
 8012562:	003a      	movs	r2, r7
 8012564:	002b      	movs	r3, r5
 8012566:	330c      	adds	r3, #12
 8012568:	ca21      	ldmia	r2!, {r0, r5}
 801256a:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 801256c:	4b40      	ldr	r3, [pc, #256]	; (8012670 <ScheduleTx+0x1c0>)
 801256e:	4a41      	ldr	r2, [pc, #260]	; (8012674 <ScheduleTx+0x1c4>)
 8012570:	589a      	ldr	r2, [r3, r2]
 8012572:	23a8      	movs	r3, #168	; 0xa8
 8012574:	005b      	lsls	r3, r3, #1
 8012576:	58d2      	ldr	r2, [r2, r3]
 8012578:	2114      	movs	r1, #20
 801257a:	187b      	adds	r3, r7, r1
 801257c:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 801257e:	187b      	adds	r3, r7, r1
 8012580:	2200      	movs	r2, #0
 8012582:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8012584:	187b      	adds	r3, r7, r1
 8012586:	2201      	movs	r2, #1
 8012588:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801258a:	4b39      	ldr	r3, [pc, #228]	; (8012670 <ScheduleTx+0x1c0>)
 801258c:	881a      	ldrh	r2, [r3, #0]
 801258e:	187b      	adds	r3, r7, r1
 8012590:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8012592:	4b37      	ldr	r3, [pc, #220]	; (8012670 <ScheduleTx+0x1c0>)
 8012594:	4a37      	ldr	r2, [pc, #220]	; (8012674 <ScheduleTx+0x1c4>)
 8012596:	589a      	ldr	r2, [r3, r2]
 8012598:	23b2      	movs	r3, #178	; 0xb2
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	5cd3      	ldrb	r3, [r2, r3]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d105      	bne.n	80125ae <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 80125a2:	187b      	adds	r3, r7, r1
 80125a4:	2201      	movs	r2, #1
 80125a6:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 80125a8:	187b      	adds	r3, r7, r1
 80125aa:	2200      	movs	r2, #0
 80125ac:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 80125ae:	4b30      	ldr	r3, [pc, #192]	; (8012670 <ScheduleTx+0x1c0>)
 80125b0:	4a30      	ldr	r2, [pc, #192]	; (8012674 <ScheduleTx+0x1c4>)
 80125b2:	589b      	ldr	r3, [r3, r2]
 80125b4:	7818      	ldrb	r0, [r3, #0]
 80125b6:	4b2e      	ldr	r3, [pc, #184]	; (8012670 <ScheduleTx+0x1c0>)
 80125b8:	4a2e      	ldr	r2, [pc, #184]	; (8012674 <ScheduleTx+0x1c4>)
 80125ba:	589b      	ldr	r3, [r3, r2]
 80125bc:	3355      	adds	r3, #85	; 0x55
 80125be:	33ff      	adds	r3, #255	; 0xff
 80125c0:	2637      	movs	r6, #55	; 0x37
 80125c2:	19bc      	adds	r4, r7, r6
 80125c4:	4d2c      	ldr	r5, [pc, #176]	; (8012678 <ScheduleTx+0x1c8>)
 80125c6:	4a2d      	ldr	r2, [pc, #180]	; (801267c <ScheduleTx+0x1cc>)
 80125c8:	2114      	movs	r1, #20
 80125ca:	1879      	adds	r1, r7, r1
 80125cc:	9300      	str	r3, [sp, #0]
 80125ce:	002b      	movs	r3, r5
 80125d0:	f005 f920 	bl	8017814 <RegionNextChannel>
 80125d4:	0003      	movs	r3, r0
 80125d6:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 80125d8:	19bb      	adds	r3, r7, r6
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d02c      	beq.n	801263a <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80125e0:	19bb      	adds	r3, r7, r6
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	2b0b      	cmp	r3, #11
 80125e6:	d124      	bne.n	8012632 <ScheduleTx+0x182>
 80125e8:	230f      	movs	r3, #15
 80125ea:	18fb      	adds	r3, r7, r3
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d01f      	beq.n	8012632 <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80125f2:	4a1f      	ldr	r2, [pc, #124]	; (8012670 <ScheduleTx+0x1c0>)
 80125f4:	2391      	movs	r3, #145	; 0x91
 80125f6:	00db      	lsls	r3, r3, #3
 80125f8:	58d3      	ldr	r3, [r2, r3]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d017      	beq.n	801262e <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80125fe:	4a1c      	ldr	r2, [pc, #112]	; (8012670 <ScheduleTx+0x1c0>)
 8012600:	23d0      	movs	r3, #208	; 0xd0
 8012602:	009b      	lsls	r3, r3, #2
 8012604:	58d3      	ldr	r3, [r2, r3]
 8012606:	2220      	movs	r2, #32
 8012608:	431a      	orrs	r2, r3
 801260a:	0011      	movs	r1, r2
 801260c:	4a18      	ldr	r2, [pc, #96]	; (8012670 <ScheduleTx+0x1c0>)
 801260e:	23d0      	movs	r3, #208	; 0xd0
 8012610:	009b      	lsls	r3, r3, #2
 8012612:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012614:	4a16      	ldr	r2, [pc, #88]	; (8012670 <ScheduleTx+0x1c0>)
 8012616:	2391      	movs	r3, #145	; 0x91
 8012618:	00db      	lsls	r3, r3, #3
 801261a:	58d2      	ldr	r2, [r2, r3]
 801261c:	4b18      	ldr	r3, [pc, #96]	; (8012680 <ScheduleTx+0x1d0>)
 801261e:	0011      	movs	r1, r2
 8012620:	0018      	movs	r0, r3
 8012622:	f00b fa5f 	bl	801dae4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8012626:	4b16      	ldr	r3, [pc, #88]	; (8012680 <ScheduleTx+0x1d0>)
 8012628:	0018      	movs	r0, r3
 801262a:	f00b f96b 	bl	801d904 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801262e:	2300      	movs	r3, #0
 8012630:	e01a      	b.n	8012668 <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8012632:	2337      	movs	r3, #55	; 0x37
 8012634:	18fb      	adds	r3, r7, r3
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	e016      	b.n	8012668 <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801263a:	f7ff fe2d 	bl	8012298 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801263e:	2537      	movs	r5, #55	; 0x37
 8012640:	197c      	adds	r4, r7, r5
 8012642:	f7ff febd 	bl	80123c0 <VerifyTxFrame>
 8012646:	0003      	movs	r3, r0
 8012648:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 801264a:	002a      	movs	r2, r5
 801264c:	18bb      	adds	r3, r7, r2
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d002      	beq.n	801265a <ScheduleTx+0x1aa>
    {
        return status;
 8012654:	18bb      	adds	r3, r7, r2
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	e006      	b.n	8012668 <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801265a:	4b05      	ldr	r3, [pc, #20]	; (8012670 <ScheduleTx+0x1c0>)
 801265c:	4a09      	ldr	r2, [pc, #36]	; (8012684 <ScheduleTx+0x1d4>)
 801265e:	5c9b      	ldrb	r3, [r3, r2]
 8012660:	0018      	movs	r0, r3
 8012662:	f000 fb99 	bl	8012d98 <SendFrameOnChannel>
 8012666:	0003      	movs	r3, r0
}
 8012668:	0018      	movs	r0, r3
 801266a:	46bd      	mov	sp, r7
 801266c:	b00f      	add	sp, #60	; 0x3c
 801266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012670:	200007d0 	.word	0x200007d0
 8012674:	00000484 	.word	0x00000484
 8012678:	20000c58 	.word	0x20000c58
 801267c:	20000be5 	.word	0x20000be5
 8012680:	20000b38 	.word	0x20000b38
 8012684:	00000415 	.word	0x00000415

08012688 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801268a:	b085      	sub	sp, #20
 801268c:	af00      	add	r7, sp, #0
 801268e:	0002      	movs	r2, r0
 8012690:	1dfb      	adds	r3, r7, #7
 8012692:	701a      	strb	r2, [r3, #0]
 8012694:	1dbb      	adds	r3, r7, #6
 8012696:	1c0a      	adds	r2, r1, #0
 8012698:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801269a:	230f      	movs	r3, #15
 801269c:	18fb      	adds	r3, r7, r3
 801269e:	2213      	movs	r2, #19
 80126a0:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 80126a2:	2300      	movs	r3, #0
 80126a4:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80126a6:	4a2c      	ldr	r2, [pc, #176]	; (8012758 <SecureFrame+0xd0>)
 80126a8:	2382      	movs	r3, #130	; 0x82
 80126aa:	005b      	lsls	r3, r3, #1
 80126ac:	5cd3      	ldrb	r3, [r2, r3]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d002      	beq.n	80126b8 <SecureFrame+0x30>
 80126b2:	2b04      	cmp	r3, #4
 80126b4:	d016      	beq.n	80126e4 <SecureFrame+0x5c>
 80126b6:	e047      	b.n	8012748 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80126b8:	250f      	movs	r5, #15
 80126ba:	197c      	adds	r4, r7, r5
 80126bc:	4b27      	ldr	r3, [pc, #156]	; (801275c <SecureFrame+0xd4>)
 80126be:	0018      	movs	r0, r3
 80126c0:	f004 f86a 	bl	8016798 <LoRaMacCryptoPrepareJoinRequest>
 80126c4:	0003      	movs	r3, r0
 80126c6:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80126c8:	197b      	adds	r3, r7, r5
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d001      	beq.n	80126d4 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80126d0:	2311      	movs	r3, #17
 80126d2:	e03c      	b.n	801274e <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80126d4:	4a20      	ldr	r2, [pc, #128]	; (8012758 <SecureFrame+0xd0>)
 80126d6:	2386      	movs	r3, #134	; 0x86
 80126d8:	005b      	lsls	r3, r3, #1
 80126da:	5cd3      	ldrb	r3, [r2, r3]
 80126dc:	b29a      	uxth	r2, r3
 80126de:	4b1e      	ldr	r3, [pc, #120]	; (8012758 <SecureFrame+0xd0>)
 80126e0:	801a      	strh	r2, [r3, #0]
            break;
 80126e2:	e033      	b.n	801274c <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80126e4:	2308      	movs	r3, #8
 80126e6:	18fb      	adds	r3, r7, r3
 80126e8:	0018      	movs	r0, r3
 80126ea:	f003 ff67 	bl	80165bc <LoRaMacCryptoGetFCntUp>
 80126ee:	1e03      	subs	r3, r0, #0
 80126f0:	d001      	beq.n	80126f6 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80126f2:	2312      	movs	r3, #18
 80126f4:	e02b      	b.n	801274e <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80126f6:	4a18      	ldr	r2, [pc, #96]	; (8012758 <SecureFrame+0xd0>)
 80126f8:	2382      	movs	r3, #130	; 0x82
 80126fa:	00db      	lsls	r3, r3, #3
 80126fc:	5cd3      	ldrb	r3, [r2, r3]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d104      	bne.n	801270c <SecureFrame+0x84>
 8012702:	4b15      	ldr	r3, [pc, #84]	; (8012758 <SecureFrame+0xd0>)
 8012704:	4a16      	ldr	r2, [pc, #88]	; (8012760 <SecureFrame+0xd8>)
 8012706:	5c9b      	ldrb	r3, [r3, r2]
 8012708:	2b01      	cmp	r3, #1
 801270a:	d902      	bls.n	8012712 <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	3b01      	subs	r3, #1
 8012710:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012712:	68b8      	ldr	r0, [r7, #8]
 8012714:	260f      	movs	r6, #15
 8012716:	19bc      	adds	r4, r7, r6
 8012718:	4d10      	ldr	r5, [pc, #64]	; (801275c <SecureFrame+0xd4>)
 801271a:	1dbb      	adds	r3, r7, #6
 801271c:	781a      	ldrb	r2, [r3, #0]
 801271e:	1dfb      	adds	r3, r7, #7
 8012720:	7819      	ldrb	r1, [r3, #0]
 8012722:	002b      	movs	r3, r5
 8012724:	f004 f942 	bl	80169ac <LoRaMacCryptoSecureMessage>
 8012728:	0003      	movs	r3, r0
 801272a:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801272c:	19bb      	adds	r3, r7, r6
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d001      	beq.n	8012738 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012734:	2311      	movs	r3, #17
 8012736:	e00a      	b.n	801274e <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012738:	4a07      	ldr	r2, [pc, #28]	; (8012758 <SecureFrame+0xd0>)
 801273a:	2386      	movs	r3, #134	; 0x86
 801273c:	005b      	lsls	r3, r3, #1
 801273e:	5cd3      	ldrb	r3, [r2, r3]
 8012740:	b29a      	uxth	r2, r3
 8012742:	4b05      	ldr	r3, [pc, #20]	; (8012758 <SecureFrame+0xd0>)
 8012744:	801a      	strh	r2, [r3, #0]
            break;
 8012746:	e001      	b.n	801274c <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012748:	2303      	movs	r3, #3
 801274a:	e000      	b.n	801274e <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 801274c:	2300      	movs	r3, #0
}
 801274e:	0018      	movs	r0, r3
 8012750:	46bd      	mov	sp, r7
 8012752:	b005      	add	sp, #20
 8012754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012756:	46c0      	nop			; (mov r8, r8)
 8012758:	200007d0 	.word	0x200007d0
 801275c:	200008d8 	.word	0x200008d8
 8012760:	00000412 	.word	0x00000412

08012764 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8012768:	4b0e      	ldr	r3, [pc, #56]	; (80127a4 <CalculateBackOff+0x40>)
 801276a:	4a0f      	ldr	r2, [pc, #60]	; (80127a8 <CalculateBackOff+0x44>)
 801276c:	589a      	ldr	r2, [r3, r2]
 801276e:	23aa      	movs	r3, #170	; 0xaa
 8012770:	005b      	lsls	r3, r3, #1
 8012772:	58d3      	ldr	r3, [r2, r3]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d111      	bne.n	801279c <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012778:	4b0a      	ldr	r3, [pc, #40]	; (80127a4 <CalculateBackOff+0x40>)
 801277a:	4a0b      	ldr	r2, [pc, #44]	; (80127a8 <CalculateBackOff+0x44>)
 801277c:	589a      	ldr	r2, [r3, r2]
 801277e:	23a6      	movs	r3, #166	; 0xa6
 8012780:	005b      	lsls	r3, r3, #1
 8012782:	5ad3      	ldrh	r3, [r2, r3]
 8012784:	3b01      	subs	r3, #1
 8012786:	4907      	ldr	r1, [pc, #28]	; (80127a4 <CalculateBackOff+0x40>)
 8012788:	2283      	movs	r2, #131	; 0x83
 801278a:	00d2      	lsls	r2, r2, #3
 801278c:	5889      	ldr	r1, [r1, r2]
 801278e:	4a05      	ldr	r2, [pc, #20]	; (80127a4 <CalculateBackOff+0x40>)
 8012790:	4805      	ldr	r0, [pc, #20]	; (80127a8 <CalculateBackOff+0x44>)
 8012792:	5812      	ldr	r2, [r2, r0]
 8012794:	4359      	muls	r1, r3
 8012796:	23aa      	movs	r3, #170	; 0xaa
 8012798:	005b      	lsls	r3, r3, #1
 801279a:	50d1      	str	r1, [r2, r3]
    }
}
 801279c:	46c0      	nop			; (mov r8, r8)
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	46c0      	nop			; (mov r8, r8)
 80127a4:	200007d0 	.word	0x200007d0
 80127a8:	00000484 	.word	0x00000484

080127ac <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	1d3b      	adds	r3, r7, #4
 80127b4:	7019      	strb	r1, [r3, #0]
 80127b6:	0011      	movs	r1, r2
 80127b8:	1dfb      	adds	r3, r7, #7
 80127ba:	1c02      	adds	r2, r0, #0
 80127bc:	701a      	strb	r2, [r3, #0]
 80127be:	1dbb      	adds	r3, r7, #6
 80127c0:	1c0a      	adds	r2, r1, #0
 80127c2:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80127c4:	1dfb      	adds	r3, r7, #7
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d003      	beq.n	80127d4 <RemoveMacCommands+0x28>
 80127cc:	1dfb      	adds	r3, r7, #7
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d10f      	bne.n	80127f4 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80127d4:	1dbb      	adds	r3, r7, #6
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	2b01      	cmp	r3, #1
 80127da:	d109      	bne.n	80127f0 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 80127dc:	1d3b      	adds	r3, r7, #4
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	2220      	movs	r2, #32
 80127e2:	4013      	ands	r3, r2
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d004      	beq.n	80127f4 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80127ea:	f002 ff75 	bl	80156d8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80127ee:	e001      	b.n	80127f4 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80127f0:	f002 ff72 	bl	80156d8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80127f4:	46c0      	nop			; (mov r8, r8)
 80127f6:	46bd      	mov	sp, r7
 80127f8:	b002      	add	sp, #8
 80127fa:	bd80      	pop	{r7, pc}

080127fc <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80127fc:	b590      	push	{r4, r7, lr}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8012802:	4b72      	ldr	r3, [pc, #456]	; (80129cc <ResetMacParameters+0x1d0>)
 8012804:	4a72      	ldr	r2, [pc, #456]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012806:	589a      	ldr	r2, [r3, r2]
 8012808:	23b2      	movs	r3, #178	; 0xb2
 801280a:	005b      	lsls	r3, r3, #1
 801280c:	2100      	movs	r1, #0
 801280e:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8012810:	4b6e      	ldr	r3, [pc, #440]	; (80129cc <ResetMacParameters+0x1d0>)
 8012812:	4a6f      	ldr	r2, [pc, #444]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012814:	589b      	ldr	r3, [r3, r2]
 8012816:	2280      	movs	r2, #128	; 0x80
 8012818:	2100      	movs	r1, #0
 801281a:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 801281c:	4a6b      	ldr	r2, [pc, #428]	; (80129cc <ResetMacParameters+0x1d0>)
 801281e:	2382      	movs	r3, #130	; 0x82
 8012820:	00db      	lsls	r3, r3, #3
 8012822:	2100      	movs	r1, #0
 8012824:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 8012826:	4b69      	ldr	r3, [pc, #420]	; (80129cc <ResetMacParameters+0x1d0>)
 8012828:	4a6a      	ldr	r2, [pc, #424]	; (80129d4 <ResetMacParameters+0x1d8>)
 801282a:	2101      	movs	r1, #1
 801282c:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 801282e:	4b67      	ldr	r3, [pc, #412]	; (80129cc <ResetMacParameters+0x1d0>)
 8012830:	4a69      	ldr	r2, [pc, #420]	; (80129d8 <ResetMacParameters+0x1dc>)
 8012832:	2101      	movs	r1, #1
 8012834:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8012836:	4b65      	ldr	r3, [pc, #404]	; (80129cc <ResetMacParameters+0x1d0>)
 8012838:	4a68      	ldr	r2, [pc, #416]	; (80129dc <ResetMacParameters+0x1e0>)
 801283a:	2100      	movs	r1, #0
 801283c:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 801283e:	4b63      	ldr	r3, [pc, #396]	; (80129cc <ResetMacParameters+0x1d0>)
 8012840:	4a63      	ldr	r2, [pc, #396]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012842:	589b      	ldr	r3, [r3, r2]
 8012844:	22c8      	movs	r2, #200	; 0xc8
 8012846:	2100      	movs	r1, #0
 8012848:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 801284a:	4b60      	ldr	r3, [pc, #384]	; (80129cc <ResetMacParameters+0x1d0>)
 801284c:	4a60      	ldr	r2, [pc, #384]	; (80129d0 <ResetMacParameters+0x1d4>)
 801284e:	589a      	ldr	r2, [r3, r2]
 8012850:	23a6      	movs	r3, #166	; 0xa6
 8012852:	005b      	lsls	r3, r3, #1
 8012854:	2101      	movs	r1, #1
 8012856:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8012858:	4b5c      	ldr	r3, [pc, #368]	; (80129cc <ResetMacParameters+0x1d0>)
 801285a:	4a5d      	ldr	r2, [pc, #372]	; (80129d0 <ResetMacParameters+0x1d4>)
 801285c:	589a      	ldr	r2, [r3, r2]
 801285e:	4b5b      	ldr	r3, [pc, #364]	; (80129cc <ResetMacParameters+0x1d0>)
 8012860:	495b      	ldr	r1, [pc, #364]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012862:	585b      	ldr	r3, [r3, r1]
 8012864:	2104      	movs	r1, #4
 8012866:	5651      	ldrsb	r1, [r2, r1]
 8012868:	2284      	movs	r2, #132	; 0x84
 801286a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 801286c:	4b57      	ldr	r3, [pc, #348]	; (80129cc <ResetMacParameters+0x1d0>)
 801286e:	4a58      	ldr	r2, [pc, #352]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012870:	589a      	ldr	r2, [r3, r2]
 8012872:	4b56      	ldr	r3, [pc, #344]	; (80129cc <ResetMacParameters+0x1d0>)
 8012874:	4956      	ldr	r1, [pc, #344]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012876:	585b      	ldr	r3, [r3, r1]
 8012878:	2105      	movs	r1, #5
 801287a:	5651      	ldrsb	r1, [r2, r1]
 801287c:	2285      	movs	r2, #133	; 0x85
 801287e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8012880:	4b52      	ldr	r3, [pc, #328]	; (80129cc <ResetMacParameters+0x1d0>)
 8012882:	4a53      	ldr	r2, [pc, #332]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012884:	589a      	ldr	r2, [r3, r2]
 8012886:	4b51      	ldr	r3, [pc, #324]	; (80129cc <ResetMacParameters+0x1d0>)
 8012888:	4951      	ldr	r1, [pc, #324]	; (80129d0 <ResetMacParameters+0x1d4>)
 801288a:	585b      	ldr	r3, [r3, r1]
 801288c:	2125      	movs	r1, #37	; 0x25
 801288e:	5c51      	ldrb	r1, [r2, r1]
 8012890:	22a5      	movs	r2, #165	; 0xa5
 8012892:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8012894:	4b4d      	ldr	r3, [pc, #308]	; (80129cc <ResetMacParameters+0x1d0>)
 8012896:	4a4e      	ldr	r2, [pc, #312]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012898:	589a      	ldr	r2, [r3, r2]
 801289a:	4b4c      	ldr	r3, [pc, #304]	; (80129cc <ResetMacParameters+0x1d0>)
 801289c:	494c      	ldr	r1, [pc, #304]	; (80129d0 <ResetMacParameters+0x1d4>)
 801289e:	585b      	ldr	r3, [r3, r1]
 80128a0:	21a8      	movs	r1, #168	; 0xa8
 80128a2:	185b      	adds	r3, r3, r1
 80128a4:	3228      	adds	r2, #40	; 0x28
 80128a6:	ca03      	ldmia	r2!, {r0, r1}
 80128a8:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80128aa:	4b48      	ldr	r3, [pc, #288]	; (80129cc <ResetMacParameters+0x1d0>)
 80128ac:	4a48      	ldr	r2, [pc, #288]	; (80129d0 <ResetMacParameters+0x1d4>)
 80128ae:	589a      	ldr	r2, [r3, r2]
 80128b0:	4b46      	ldr	r3, [pc, #280]	; (80129cc <ResetMacParameters+0x1d0>)
 80128b2:	4947      	ldr	r1, [pc, #284]	; (80129d0 <ResetMacParameters+0x1d4>)
 80128b4:	585b      	ldr	r3, [r3, r1]
 80128b6:	21b0      	movs	r1, #176	; 0xb0
 80128b8:	185b      	adds	r3, r3, r1
 80128ba:	3230      	adds	r2, #48	; 0x30
 80128bc:	ca03      	ldmia	r2!, {r0, r1}
 80128be:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 80128c0:	4b42      	ldr	r3, [pc, #264]	; (80129cc <ResetMacParameters+0x1d0>)
 80128c2:	4a43      	ldr	r2, [pc, #268]	; (80129d0 <ResetMacParameters+0x1d4>)
 80128c4:	589a      	ldr	r2, [r3, r2]
 80128c6:	4b41      	ldr	r3, [pc, #260]	; (80129cc <ResetMacParameters+0x1d0>)
 80128c8:	4941      	ldr	r1, [pc, #260]	; (80129d0 <ResetMacParameters+0x1d4>)
 80128ca:	585b      	ldr	r3, [r3, r1]
 80128cc:	2138      	movs	r1, #56	; 0x38
 80128ce:	5c51      	ldrb	r1, [r2, r1]
 80128d0:	22b8      	movs	r2, #184	; 0xb8
 80128d2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 80128d4:	4b3d      	ldr	r3, [pc, #244]	; (80129cc <ResetMacParameters+0x1d0>)
 80128d6:	4a3e      	ldr	r2, [pc, #248]	; (80129d0 <ResetMacParameters+0x1d4>)
 80128d8:	589a      	ldr	r2, [r3, r2]
 80128da:	4b3c      	ldr	r3, [pc, #240]	; (80129cc <ResetMacParameters+0x1d0>)
 80128dc:	493c      	ldr	r1, [pc, #240]	; (80129d0 <ResetMacParameters+0x1d4>)
 80128de:	585b      	ldr	r3, [r3, r1]
 80128e0:	2139      	movs	r1, #57	; 0x39
 80128e2:	5c51      	ldrb	r1, [r2, r1]
 80128e4:	22b9      	movs	r2, #185	; 0xb9
 80128e6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80128e8:	4b38      	ldr	r3, [pc, #224]	; (80129cc <ResetMacParameters+0x1d0>)
 80128ea:	4a39      	ldr	r2, [pc, #228]	; (80129d0 <ResetMacParameters+0x1d4>)
 80128ec:	589b      	ldr	r3, [r3, r2]
 80128ee:	4a37      	ldr	r2, [pc, #220]	; (80129cc <ResetMacParameters+0x1d0>)
 80128f0:	4937      	ldr	r1, [pc, #220]	; (80129d0 <ResetMacParameters+0x1d4>)
 80128f2:	5852      	ldr	r2, [r2, r1]
 80128f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128f6:	21bc      	movs	r1, #188	; 0xbc
 80128f8:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80128fa:	4b34      	ldr	r3, [pc, #208]	; (80129cc <ResetMacParameters+0x1d0>)
 80128fc:	4a34      	ldr	r2, [pc, #208]	; (80129d0 <ResetMacParameters+0x1d4>)
 80128fe:	589b      	ldr	r3, [r3, r2]
 8012900:	4a32      	ldr	r2, [pc, #200]	; (80129cc <ResetMacParameters+0x1d0>)
 8012902:	4933      	ldr	r1, [pc, #204]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012904:	5852      	ldr	r2, [r2, r1]
 8012906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012908:	21c0      	movs	r1, #192	; 0xc0
 801290a:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 801290c:	4b2f      	ldr	r3, [pc, #188]	; (80129cc <ResetMacParameters+0x1d0>)
 801290e:	4a34      	ldr	r2, [pc, #208]	; (80129e0 <ResetMacParameters+0x1e4>)
 8012910:	2100      	movs	r1, #0
 8012912:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8012914:	4b2d      	ldr	r3, [pc, #180]	; (80129cc <ResetMacParameters+0x1d0>)
 8012916:	4a2e      	ldr	r2, [pc, #184]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012918:	589a      	ldr	r2, [r3, r2]
 801291a:	234c      	movs	r3, #76	; 0x4c
 801291c:	33ff      	adds	r3, #255	; 0xff
 801291e:	2100      	movs	r1, #0
 8012920:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8012922:	003b      	movs	r3, r7
 8012924:	2201      	movs	r2, #1
 8012926:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8012928:	003b      	movs	r3, r7
 801292a:	2200      	movs	r2, #0
 801292c:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 801292e:	4b27      	ldr	r3, [pc, #156]	; (80129cc <ResetMacParameters+0x1d0>)
 8012930:	4a27      	ldr	r2, [pc, #156]	; (80129d0 <ResetMacParameters+0x1d4>)
 8012932:	589b      	ldr	r3, [r3, r2]
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	003a      	movs	r2, r7
 8012938:	0011      	movs	r1, r2
 801293a:	0018      	movs	r0, r3
 801293c:	f004 fe05 	bl	801754a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012940:	4b22      	ldr	r3, [pc, #136]	; (80129cc <ResetMacParameters+0x1d0>)
 8012942:	4a28      	ldr	r2, [pc, #160]	; (80129e4 <ResetMacParameters+0x1e8>)
 8012944:	2100      	movs	r1, #0
 8012946:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012948:	4b20      	ldr	r3, [pc, #128]	; (80129cc <ResetMacParameters+0x1d0>)
 801294a:	4a26      	ldr	r2, [pc, #152]	; (80129e4 <ResetMacParameters+0x1e8>)
 801294c:	5c99      	ldrb	r1, [r3, r2]
 801294e:	4a1f      	ldr	r2, [pc, #124]	; (80129cc <ResetMacParameters+0x1d0>)
 8012950:	23f3      	movs	r3, #243	; 0xf3
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8012956:	4b1d      	ldr	r3, [pc, #116]	; (80129cc <ResetMacParameters+0x1d0>)
 8012958:	4a1d      	ldr	r2, [pc, #116]	; (80129d0 <ResetMacParameters+0x1d4>)
 801295a:	589b      	ldr	r3, [r3, r2]
 801295c:	22a8      	movs	r2, #168	; 0xa8
 801295e:	5899      	ldr	r1, [r3, r2]
 8012960:	4a1a      	ldr	r2, [pc, #104]	; (80129cc <ResetMacParameters+0x1d0>)
 8012962:	23f4      	movs	r3, #244	; 0xf4
 8012964:	009b      	lsls	r3, r3, #2
 8012966:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8012968:	4b18      	ldr	r3, [pc, #96]	; (80129cc <ResetMacParameters+0x1d0>)
 801296a:	4a19      	ldr	r2, [pc, #100]	; (80129d0 <ResetMacParameters+0x1d4>)
 801296c:	589b      	ldr	r3, [r3, r2]
 801296e:	22b9      	movs	r2, #185	; 0xb9
 8012970:	5c99      	ldrb	r1, [r3, r2]
 8012972:	4a16      	ldr	r2, [pc, #88]	; (80129cc <ResetMacParameters+0x1d0>)
 8012974:	23f7      	movs	r3, #247	; 0xf7
 8012976:	009b      	lsls	r3, r3, #2
 8012978:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801297a:	4b14      	ldr	r3, [pc, #80]	; (80129cc <ResetMacParameters+0x1d0>)
 801297c:	4a14      	ldr	r2, [pc, #80]	; (80129d0 <ResetMacParameters+0x1d4>)
 801297e:	589b      	ldr	r3, [r3, r2]
 8012980:	22ca      	movs	r2, #202	; 0xca
 8012982:	5c99      	ldrb	r1, [r3, r2]
 8012984:	4b11      	ldr	r3, [pc, #68]	; (80129cc <ResetMacParameters+0x1d0>)
 8012986:	4a18      	ldr	r2, [pc, #96]	; (80129e8 <ResetMacParameters+0x1ec>)
 8012988:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 801298a:	4b10      	ldr	r3, [pc, #64]	; (80129cc <ResetMacParameters+0x1d0>)
 801298c:	4a17      	ldr	r2, [pc, #92]	; (80129ec <ResetMacParameters+0x1f0>)
 801298e:	2100      	movs	r1, #0
 8012990:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012992:	4b0e      	ldr	r3, [pc, #56]	; (80129cc <ResetMacParameters+0x1d0>)
 8012994:	4a16      	ldr	r2, [pc, #88]	; (80129f0 <ResetMacParameters+0x1f4>)
 8012996:	2101      	movs	r1, #1
 8012998:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801299a:	480c      	ldr	r0, [pc, #48]	; (80129cc <ResetMacParameters+0x1d0>)
 801299c:	23f8      	movs	r3, #248	; 0xf8
 801299e:	009b      	lsls	r3, r3, #2
 80129a0:	490a      	ldr	r1, [pc, #40]	; (80129cc <ResetMacParameters+0x1d0>)
 80129a2:	22f3      	movs	r2, #243	; 0xf3
 80129a4:	0092      	lsls	r2, r2, #2
 80129a6:	18c3      	adds	r3, r0, r3
 80129a8:	188a      	adds	r2, r1, r2
 80129aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80129ac:	c313      	stmia	r3!, {r0, r1, r4}
 80129ae:	ca03      	ldmia	r2!, {r0, r1}
 80129b0:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80129b2:	4b06      	ldr	r3, [pc, #24]	; (80129cc <ResetMacParameters+0x1d0>)
 80129b4:	4a0f      	ldr	r2, [pc, #60]	; (80129f4 <ResetMacParameters+0x1f8>)
 80129b6:	2101      	movs	r1, #1
 80129b8:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80129ba:	4b04      	ldr	r3, [pc, #16]	; (80129cc <ResetMacParameters+0x1d0>)
 80129bc:	4a0e      	ldr	r2, [pc, #56]	; (80129f8 <ResetMacParameters+0x1fc>)
 80129be:	2102      	movs	r1, #2
 80129c0:	5499      	strb	r1, [r3, r2]

}
 80129c2:	46c0      	nop			; (mov r8, r8)
 80129c4:	46bd      	mov	sp, r7
 80129c6:	b003      	add	sp, #12
 80129c8:	bd90      	pop	{r4, r7, pc}
 80129ca:	46c0      	nop			; (mov r8, r8)
 80129cc:	200007d0 	.word	0x200007d0
 80129d0:	00000484 	.word	0x00000484
 80129d4:	00000411 	.word	0x00000411
 80129d8:	00000412 	.word	0x00000412
 80129dc:	00000413 	.word	0x00000413
 80129e0:	00000414 	.word	0x00000414
 80129e4:	00000415 	.word	0x00000415
 80129e8:	000003dd 	.word	0x000003dd
 80129ec:	000003de 	.word	0x000003de
 80129f0:	000003df 	.word	0x000003df
 80129f4:	000003f2 	.word	0x000003f2
 80129f8:	000003f3 	.word	0x000003f3

080129fc <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	0018      	movs	r0, r3
 8012a0a:	f00a fff3 	bl	801d9f4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012a0e:	4b10      	ldr	r3, [pc, #64]	; (8012a50 <RxWindowSetup+0x54>)
 8012a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a12:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012a14:	4b0f      	ldr	r3, [pc, #60]	; (8012a54 <RxWindowSetup+0x58>)
 8012a16:	4a10      	ldr	r2, [pc, #64]	; (8012a58 <RxWindowSetup+0x5c>)
 8012a18:	589b      	ldr	r3, [r3, r2]
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	4a0f      	ldr	r2, [pc, #60]	; (8012a5c <RxWindowSetup+0x60>)
 8012a1e:	6839      	ldr	r1, [r7, #0]
 8012a20:	0018      	movs	r0, r3
 8012a22:	f004 fe29 	bl	8017678 <RegionRxConfig>
 8012a26:	1e03      	subs	r3, r0, #0
 8012a28:	d00e      	beq.n	8012a48 <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8012a2a:	4b09      	ldr	r3, [pc, #36]	; (8012a50 <RxWindowSetup+0x54>)
 8012a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a2e:	4a09      	ldr	r2, [pc, #36]	; (8012a54 <RxWindowSetup+0x58>)
 8012a30:	4909      	ldr	r1, [pc, #36]	; (8012a58 <RxWindowSetup+0x5c>)
 8012a32:	5852      	ldr	r2, [r2, r1]
 8012a34:	2190      	movs	r1, #144	; 0x90
 8012a36:	5852      	ldr	r2, [r2, r1]
 8012a38:	0010      	movs	r0, r2
 8012a3a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	7cd9      	ldrb	r1, [r3, #19]
 8012a40:	4a04      	ldr	r2, [pc, #16]	; (8012a54 <RxWindowSetup+0x58>)
 8012a42:	2390      	movs	r3, #144	; 0x90
 8012a44:	00db      	lsls	r3, r3, #3
 8012a46:	54d1      	strb	r1, [r2, r3]
    }
}
 8012a48:	46c0      	nop			; (mov r8, r8)
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	b002      	add	sp, #8
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	08021740 	.word	0x08021740
 8012a54:	200007d0 	.word	0x200007d0
 8012a58:	00000484 	.word	0x00000484
 8012a5c:	20000bf0 	.word	0x20000bf0

08012a60 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012a60:	b590      	push	{r4, r7, lr}
 8012a62:	b083      	sub	sp, #12
 8012a64:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012a66:	4b1d      	ldr	r3, [pc, #116]	; (8012adc <OpenContinuousRxCWindow+0x7c>)
 8012a68:	4a1d      	ldr	r2, [pc, #116]	; (8012ae0 <OpenContinuousRxCWindow+0x80>)
 8012a6a:	589b      	ldr	r3, [r3, r2]
 8012a6c:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8012a6e:	4b1b      	ldr	r3, [pc, #108]	; (8012adc <OpenContinuousRxCWindow+0x7c>)
 8012a70:	4a1b      	ldr	r2, [pc, #108]	; (8012ae0 <OpenContinuousRxCWindow+0x80>)
 8012a72:	589b      	ldr	r3, [r3, r2]
 8012a74:	22b4      	movs	r2, #180	; 0xb4
 8012a76:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012a78:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8012a7a:	4b18      	ldr	r3, [pc, #96]	; (8012adc <OpenContinuousRxCWindow+0x7c>)
 8012a7c:	4a18      	ldr	r2, [pc, #96]	; (8012ae0 <OpenContinuousRxCWindow+0x80>)
 8012a7e:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012a80:	228c      	movs	r2, #140	; 0x8c
 8012a82:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8012a84:	4b15      	ldr	r3, [pc, #84]	; (8012adc <OpenContinuousRxCWindow+0x7c>)
 8012a86:	4c16      	ldr	r4, [pc, #88]	; (8012ae0 <OpenContinuousRxCWindow+0x80>)
 8012a88:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012a8a:	2488      	movs	r4, #136	; 0x88
 8012a8c:	591c      	ldr	r4, [r3, r4]
 8012a8e:	4b15      	ldr	r3, [pc, #84]	; (8012ae4 <OpenContinuousRxCWindow+0x84>)
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	0023      	movs	r3, r4
 8012a94:	f004 fdcc 	bl	8017630 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012a98:	4b10      	ldr	r3, [pc, #64]	; (8012adc <OpenContinuousRxCWindow+0x7c>)
 8012a9a:	4a13      	ldr	r2, [pc, #76]	; (8012ae8 <OpenContinuousRxCWindow+0x88>)
 8012a9c:	2102      	movs	r1, #2
 8012a9e:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012aa0:	4b0e      	ldr	r3, [pc, #56]	; (8012adc <OpenContinuousRxCWindow+0x7c>)
 8012aa2:	4a12      	ldr	r2, [pc, #72]	; (8012aec <OpenContinuousRxCWindow+0x8c>)
 8012aa4:	2101      	movs	r1, #1
 8012aa6:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012aa8:	4b0c      	ldr	r3, [pc, #48]	; (8012adc <OpenContinuousRxCWindow+0x7c>)
 8012aaa:	4a0d      	ldr	r2, [pc, #52]	; (8012ae0 <OpenContinuousRxCWindow+0x80>)
 8012aac:	589b      	ldr	r3, [r3, r2]
 8012aae:	781b      	ldrb	r3, [r3, #0]
 8012ab0:	4a0f      	ldr	r2, [pc, #60]	; (8012af0 <OpenContinuousRxCWindow+0x90>)
 8012ab2:	490c      	ldr	r1, [pc, #48]	; (8012ae4 <OpenContinuousRxCWindow+0x84>)
 8012ab4:	0018      	movs	r0, r3
 8012ab6:	f004 fddf 	bl	8017678 <RegionRxConfig>
 8012aba:	1e03      	subs	r3, r0, #0
 8012abc:	d00a      	beq.n	8012ad4 <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 8012abe:	4b0d      	ldr	r3, [pc, #52]	; (8012af4 <OpenContinuousRxCWindow+0x94>)
 8012ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ac2:	2000      	movs	r0, #0
 8012ac4:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8012ac6:	4b05      	ldr	r3, [pc, #20]	; (8012adc <OpenContinuousRxCWindow+0x7c>)
 8012ac8:	4a07      	ldr	r2, [pc, #28]	; (8012ae8 <OpenContinuousRxCWindow+0x88>)
 8012aca:	5c99      	ldrb	r1, [r3, r2]
 8012acc:	4a03      	ldr	r2, [pc, #12]	; (8012adc <OpenContinuousRxCWindow+0x7c>)
 8012ace:	2390      	movs	r3, #144	; 0x90
 8012ad0:	00db      	lsls	r3, r3, #3
 8012ad2:	54d1      	strb	r1, [r2, r3]
    }
}
 8012ad4:	46c0      	nop			; (mov r8, r8)
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	b001      	add	sp, #4
 8012ada:	bd90      	pop	{r4, r7, pc}
 8012adc:	200007d0 	.word	0x200007d0
 8012ae0:	00000484 	.word	0x00000484
 8012ae4:	20000bb0 	.word	0x20000bb0
 8012ae8:	000003f3 	.word	0x000003f3
 8012aec:	000003f2 	.word	0x000003f2
 8012af0:	20000bf0 	.word	0x20000bf0
 8012af4:	08021740 	.word	0x08021740

08012af8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012af8:	b590      	push	{r4, r7, lr}
 8012afa:	b089      	sub	sp, #36	; 0x24
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	60f8      	str	r0, [r7, #12]
 8012b00:	60b9      	str	r1, [r7, #8]
 8012b02:	603b      	str	r3, [r7, #0]
 8012b04:	1dfb      	adds	r3, r7, #7
 8012b06:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 8012b08:	4b9a      	ldr	r3, [pc, #616]	; (8012d74 <PrepareFrame+0x27c>)
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012b0e:	4b99      	ldr	r3, [pc, #612]	; (8012d74 <PrepareFrame+0x27c>)
 8012b10:	4a99      	ldr	r2, [pc, #612]	; (8012d78 <PrepareFrame+0x280>)
 8012b12:	2100      	movs	r1, #0
 8012b14:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 8012b16:	2300      	movs	r3, #0
 8012b18:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012b1e:	231f      	movs	r3, #31
 8012b20:	18fb      	adds	r3, r7, r3
 8012b22:	2200      	movs	r2, #0
 8012b24:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d103      	bne.n	8012b34 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8012b2c:	2330      	movs	r3, #48	; 0x30
 8012b2e:	18fb      	adds	r3, r7, r3
 8012b30:	2200      	movs	r2, #0
 8012b32:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012b34:	2430      	movs	r4, #48	; 0x30
 8012b36:	193b      	adds	r3, r7, r4
 8012b38:	881a      	ldrh	r2, [r3, #0]
 8012b3a:	6839      	ldr	r1, [r7, #0]
 8012b3c:	4b8f      	ldr	r3, [pc, #572]	; (8012d7c <PrepareFrame+0x284>)
 8012b3e:	0018      	movs	r0, r3
 8012b40:	f007 f956 	bl	8019df0 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012b44:	193b      	adds	r3, r7, r4
 8012b46:	881b      	ldrh	r3, [r3, #0]
 8012b48:	b2d9      	uxtb	r1, r3
 8012b4a:	4b8a      	ldr	r3, [pc, #552]	; (8012d74 <PrepareFrame+0x27c>)
 8012b4c:	4a8c      	ldr	r2, [pc, #560]	; (8012d80 <PrepareFrame+0x288>)
 8012b4e:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	781a      	ldrb	r2, [r3, #0]
 8012b54:	4b87      	ldr	r3, [pc, #540]	; (8012d74 <PrepareFrame+0x27c>)
 8012b56:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	061b      	lsls	r3, r3, #24
 8012b5e:	0f5b      	lsrs	r3, r3, #29
 8012b60:	b2db      	uxtb	r3, r3
 8012b62:	2b07      	cmp	r3, #7
 8012b64:	d100      	bne.n	8012b68 <PrepareFrame+0x70>
 8012b66:	e0e0      	b.n	8012d2a <PrepareFrame+0x232>
 8012b68:	dd00      	ble.n	8012b6c <PrepareFrame+0x74>
 8012b6a:	e0f8      	b.n	8012d5e <PrepareFrame+0x266>
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d006      	beq.n	8012b7e <PrepareFrame+0x86>
 8012b70:	2b04      	cmp	r3, #4
 8012b72:	d000      	beq.n	8012b76 <PrepareFrame+0x7e>
 8012b74:	e0f3      	b.n	8012d5e <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8012b76:	4b7f      	ldr	r3, [pc, #508]	; (8012d74 <PrepareFrame+0x27c>)
 8012b78:	4a7f      	ldr	r2, [pc, #508]	; (8012d78 <PrepareFrame+0x280>)
 8012b7a:	2101      	movs	r1, #1
 8012b7c:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8012b7e:	4a7d      	ldr	r2, [pc, #500]	; (8012d74 <PrepareFrame+0x27c>)
 8012b80:	2382      	movs	r3, #130	; 0x82
 8012b82:	005b      	lsls	r3, r3, #1
 8012b84:	2104      	movs	r1, #4
 8012b86:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8012b88:	4a7a      	ldr	r2, [pc, #488]	; (8012d74 <PrepareFrame+0x27c>)
 8012b8a:	2384      	movs	r3, #132	; 0x84
 8012b8c:	005b      	lsls	r3, r3, #1
 8012b8e:	497d      	ldr	r1, [pc, #500]	; (8012d84 <PrepareFrame+0x28c>)
 8012b90:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012b92:	4a78      	ldr	r2, [pc, #480]	; (8012d74 <PrepareFrame+0x27c>)
 8012b94:	2386      	movs	r3, #134	; 0x86
 8012b96:	005b      	lsls	r3, r3, #1
 8012b98:	21ff      	movs	r1, #255	; 0xff
 8012b9a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	7819      	ldrb	r1, [r3, #0]
 8012ba0:	4a74      	ldr	r2, [pc, #464]	; (8012d74 <PrepareFrame+0x27c>)
 8012ba2:	230e      	movs	r3, #14
 8012ba4:	33ff      	adds	r3, #255	; 0xff
 8012ba6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012ba8:	4a72      	ldr	r2, [pc, #456]	; (8012d74 <PrepareFrame+0x27c>)
 8012baa:	1df9      	adds	r1, r7, #7
 8012bac:	2394      	movs	r3, #148	; 0x94
 8012bae:	005b      	lsls	r3, r3, #1
 8012bb0:	7809      	ldrb	r1, [r1, #0]
 8012bb2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8012bb4:	4b6f      	ldr	r3, [pc, #444]	; (8012d74 <PrepareFrame+0x27c>)
 8012bb6:	4a74      	ldr	r2, [pc, #464]	; (8012d88 <PrepareFrame+0x290>)
 8012bb8:	589b      	ldr	r3, [r3, r2]
 8012bba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012bbc:	4a6d      	ldr	r2, [pc, #436]	; (8012d74 <PrepareFrame+0x27c>)
 8012bbe:	2388      	movs	r3, #136	; 0x88
 8012bc0:	005b      	lsls	r3, r3, #1
 8012bc2:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	7819      	ldrb	r1, [r3, #0]
 8012bc8:	4a6a      	ldr	r2, [pc, #424]	; (8012d74 <PrepareFrame+0x27c>)
 8012bca:	238a      	movs	r3, #138	; 0x8a
 8012bcc:	005b      	lsls	r3, r3, #1
 8012bce:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8012bd0:	4b68      	ldr	r3, [pc, #416]	; (8012d74 <PrepareFrame+0x27c>)
 8012bd2:	4a6b      	ldr	r2, [pc, #428]	; (8012d80 <PrepareFrame+0x288>)
 8012bd4:	5c99      	ldrb	r1, [r3, r2]
 8012bd6:	4a67      	ldr	r2, [pc, #412]	; (8012d74 <PrepareFrame+0x27c>)
 8012bd8:	2398      	movs	r3, #152	; 0x98
 8012bda:	005b      	lsls	r3, r3, #1
 8012bdc:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8012bde:	4a65      	ldr	r2, [pc, #404]	; (8012d74 <PrepareFrame+0x27c>)
 8012be0:	2396      	movs	r3, #150	; 0x96
 8012be2:	005b      	lsls	r3, r3, #1
 8012be4:	4965      	ldr	r1, [pc, #404]	; (8012d7c <PrepareFrame+0x284>)
 8012be6:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012be8:	2318      	movs	r3, #24
 8012bea:	18fb      	adds	r3, r7, r3
 8012bec:	0018      	movs	r0, r3
 8012bee:	f003 fce5 	bl	80165bc <LoRaMacCryptoGetFCntUp>
 8012bf2:	1e03      	subs	r3, r0, #0
 8012bf4:	d001      	beq.n	8012bfa <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012bf6:	2312      	movs	r3, #18
 8012bf8:	e0b7      	b.n	8012d6a <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	b299      	uxth	r1, r3
 8012bfe:	4a5d      	ldr	r2, [pc, #372]	; (8012d74 <PrepareFrame+0x27c>)
 8012c00:	238b      	movs	r3, #139	; 0x8b
 8012c02:	005b      	lsls	r3, r3, #1
 8012c04:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8012c06:	4b5b      	ldr	r3, [pc, #364]	; (8012d74 <PrepareFrame+0x27c>)
 8012c08:	4a60      	ldr	r2, [pc, #384]	; (8012d8c <PrepareFrame+0x294>)
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 8012c0e:	4a59      	ldr	r2, [pc, #356]	; (8012d74 <PrepareFrame+0x27c>)
 8012c10:	2388      	movs	r3, #136	; 0x88
 8012c12:	00db      	lsls	r3, r3, #3
 8012c14:	2100      	movs	r1, #0
 8012c16:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012c18:	69b9      	ldr	r1, [r7, #24]
 8012c1a:	4a56      	ldr	r2, [pc, #344]	; (8012d74 <PrepareFrame+0x27c>)
 8012c1c:	2389      	movs	r3, #137	; 0x89
 8012c1e:	00db      	lsls	r3, r3, #3
 8012c20:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012c22:	2314      	movs	r3, #20
 8012c24:	18fb      	adds	r3, r7, r3
 8012c26:	0018      	movs	r0, r3
 8012c28:	f002 fd7a 	bl	8015720 <LoRaMacCommandsGetSizeSerializedCmds>
 8012c2c:	1e03      	subs	r3, r0, #0
 8012c2e:	d001      	beq.n	8012c34 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c30:	2313      	movs	r3, #19
 8012c32:	e09a      	b.n	8012d6a <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d100      	bne.n	8012c3c <PrepareFrame+0x144>
 8012c3a:	e092      	b.n	8012d62 <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8012c3c:	4b4d      	ldr	r3, [pc, #308]	; (8012d74 <PrepareFrame+0x27c>)
 8012c3e:	4a52      	ldr	r2, [pc, #328]	; (8012d88 <PrepareFrame+0x290>)
 8012c40:	589b      	ldr	r3, [r3, r2]
 8012c42:	2285      	movs	r2, #133	; 0x85
 8012c44:	569b      	ldrsb	r3, [r3, r2]
 8012c46:	221f      	movs	r2, #31
 8012c48:	18bc      	adds	r4, r7, r2
 8012c4a:	0018      	movs	r0, r3
 8012c4c:	f7fe fb50 	bl	80112f0 <GetMaxAppPayloadWithoutFOptsLength>
 8012c50:	0003      	movs	r3, r0
 8012c52:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012c54:	4b47      	ldr	r3, [pc, #284]	; (8012d74 <PrepareFrame+0x27c>)
 8012c56:	4a4a      	ldr	r2, [pc, #296]	; (8012d80 <PrepareFrame+0x288>)
 8012c58:	5c9b      	ldrb	r3, [r3, r2]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d024      	beq.n	8012ca8 <PrepareFrame+0x1b0>
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	2b0f      	cmp	r3, #15
 8012c62:	d821      	bhi.n	8012ca8 <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8012c64:	4a4a      	ldr	r2, [pc, #296]	; (8012d90 <PrepareFrame+0x298>)
 8012c66:	2314      	movs	r3, #20
 8012c68:	18fb      	adds	r3, r7, r3
 8012c6a:	0019      	movs	r1, r3
 8012c6c:	200f      	movs	r0, #15
 8012c6e:	f002 fd6d 	bl	801574c <LoRaMacCommandsSerializeCmds>
 8012c72:	1e03      	subs	r3, r0, #0
 8012c74:	d001      	beq.n	8012c7a <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c76:	2313      	movs	r3, #19
 8012c78:	e077      	b.n	8012d6a <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	1c1a      	adds	r2, r3, #0
 8012c7e:	230f      	movs	r3, #15
 8012c80:	4013      	ands	r3, r2
 8012c82:	b2da      	uxtb	r2, r3
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	210f      	movs	r1, #15
 8012c88:	400a      	ands	r2, r1
 8012c8a:	0010      	movs	r0, r2
 8012c8c:	781a      	ldrb	r2, [r3, #0]
 8012c8e:	210f      	movs	r1, #15
 8012c90:	438a      	bics	r2, r1
 8012c92:	1c11      	adds	r1, r2, #0
 8012c94:	1c02      	adds	r2, r0, #0
 8012c96:	430a      	orrs	r2, r1
 8012c98:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	7819      	ldrb	r1, [r3, #0]
 8012c9e:	4a35      	ldr	r2, [pc, #212]	; (8012d74 <PrepareFrame+0x27c>)
 8012ca0:	238a      	movs	r3, #138	; 0x8a
 8012ca2:	005b      	lsls	r3, r3, #1
 8012ca4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8012ca6:	e05c      	b.n	8012d62 <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012ca8:	4b32      	ldr	r3, [pc, #200]	; (8012d74 <PrepareFrame+0x27c>)
 8012caa:	4a35      	ldr	r2, [pc, #212]	; (8012d80 <PrepareFrame+0x288>)
 8012cac:	5c9b      	ldrb	r3, [r3, r2]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d015      	beq.n	8012cde <PrepareFrame+0x1e6>
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	2b0f      	cmp	r3, #15
 8012cb6:	d912      	bls.n	8012cde <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012cb8:	231f      	movs	r3, #31
 8012cba:	18fb      	adds	r3, r7, r3
 8012cbc:	7818      	ldrb	r0, [r3, #0]
 8012cbe:	4b2d      	ldr	r3, [pc, #180]	; (8012d74 <PrepareFrame+0x27c>)
 8012cc0:	4a31      	ldr	r2, [pc, #196]	; (8012d88 <PrepareFrame+0x290>)
 8012cc2:	589b      	ldr	r3, [r3, r2]
 8012cc4:	33cb      	adds	r3, #203	; 0xcb
 8012cc6:	001a      	movs	r2, r3
 8012cc8:	2314      	movs	r3, #20
 8012cca:	18fb      	adds	r3, r7, r3
 8012ccc:	0019      	movs	r1, r3
 8012cce:	f002 fd3d 	bl	801574c <LoRaMacCommandsSerializeCmds>
 8012cd2:	1e03      	subs	r3, r0, #0
 8012cd4:	d001      	beq.n	8012cda <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cd6:	2313      	movs	r3, #19
 8012cd8:	e047      	b.n	8012d6a <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012cda:	230a      	movs	r3, #10
 8012cdc:	e045      	b.n	8012d6a <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012cde:	231f      	movs	r3, #31
 8012ce0:	18fb      	adds	r3, r7, r3
 8012ce2:	7818      	ldrb	r0, [r3, #0]
 8012ce4:	4b23      	ldr	r3, [pc, #140]	; (8012d74 <PrepareFrame+0x27c>)
 8012ce6:	4a28      	ldr	r2, [pc, #160]	; (8012d88 <PrepareFrame+0x290>)
 8012ce8:	589b      	ldr	r3, [r3, r2]
 8012cea:	33cb      	adds	r3, #203	; 0xcb
 8012cec:	001a      	movs	r2, r3
 8012cee:	2314      	movs	r3, #20
 8012cf0:	18fb      	adds	r3, r7, r3
 8012cf2:	0019      	movs	r1, r3
 8012cf4:	f002 fd2a 	bl	801574c <LoRaMacCommandsSerializeCmds>
 8012cf8:	1e03      	subs	r3, r0, #0
 8012cfa:	d001      	beq.n	8012d00 <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cfc:	2313      	movs	r3, #19
 8012cfe:	e034      	b.n	8012d6a <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012d00:	4a1c      	ldr	r2, [pc, #112]	; (8012d74 <PrepareFrame+0x27c>)
 8012d02:	2394      	movs	r3, #148	; 0x94
 8012d04:	005b      	lsls	r3, r3, #1
 8012d06:	2100      	movs	r1, #0
 8012d08:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8012d0a:	4b1a      	ldr	r3, [pc, #104]	; (8012d74 <PrepareFrame+0x27c>)
 8012d0c:	4a1e      	ldr	r2, [pc, #120]	; (8012d88 <PrepareFrame+0x290>)
 8012d0e:	589b      	ldr	r3, [r3, r2]
 8012d10:	33cb      	adds	r3, #203	; 0xcb
 8012d12:	0019      	movs	r1, r3
 8012d14:	4a17      	ldr	r2, [pc, #92]	; (8012d74 <PrepareFrame+0x27c>)
 8012d16:	2396      	movs	r3, #150	; 0x96
 8012d18:	005b      	lsls	r3, r3, #1
 8012d1a:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	b2d9      	uxtb	r1, r3
 8012d20:	4a14      	ldr	r2, [pc, #80]	; (8012d74 <PrepareFrame+0x27c>)
 8012d22:	2398      	movs	r3, #152	; 0x98
 8012d24:	005b      	lsls	r3, r3, #1
 8012d26:	54d1      	strb	r1, [r2, r3]
            break;
 8012d28:	e01b      	b.n	8012d62 <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d01a      	beq.n	8012d66 <PrepareFrame+0x26e>
 8012d30:	4b10      	ldr	r3, [pc, #64]	; (8012d74 <PrepareFrame+0x27c>)
 8012d32:	4a13      	ldr	r2, [pc, #76]	; (8012d80 <PrepareFrame+0x288>)
 8012d34:	5c9b      	ldrb	r3, [r3, r2]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d015      	beq.n	8012d66 <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012d3a:	4816      	ldr	r0, [pc, #88]	; (8012d94 <PrepareFrame+0x29c>)
 8012d3c:	4b0d      	ldr	r3, [pc, #52]	; (8012d74 <PrepareFrame+0x27c>)
 8012d3e:	4a10      	ldr	r2, [pc, #64]	; (8012d80 <PrepareFrame+0x288>)
 8012d40:	5c9b      	ldrb	r3, [r3, r2]
 8012d42:	b29a      	uxth	r2, r3
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	0019      	movs	r1, r3
 8012d48:	f007 f852 	bl	8019df0 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012d4c:	4b09      	ldr	r3, [pc, #36]	; (8012d74 <PrepareFrame+0x27c>)
 8012d4e:	4a0c      	ldr	r2, [pc, #48]	; (8012d80 <PrepareFrame+0x288>)
 8012d50:	5c9b      	ldrb	r3, [r3, r2]
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	3301      	adds	r3, #1
 8012d56:	b29a      	uxth	r2, r3
 8012d58:	4b06      	ldr	r3, [pc, #24]	; (8012d74 <PrepareFrame+0x27c>)
 8012d5a:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012d5c:	e003      	b.n	8012d66 <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d5e:	2302      	movs	r3, #2
 8012d60:	e003      	b.n	8012d6a <PrepareFrame+0x272>
            break;
 8012d62:	46c0      	nop			; (mov r8, r8)
 8012d64:	e000      	b.n	8012d68 <PrepareFrame+0x270>
            break;
 8012d66:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 8012d68:	2300      	movs	r3, #0
}
 8012d6a:	0018      	movs	r0, r3
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	b009      	add	sp, #36	; 0x24
 8012d70:	bd90      	pop	{r4, r7, pc}
 8012d72:	46c0      	nop			; (mov r8, r8)
 8012d74:	200007d0 	.word	0x200007d0
 8012d78:	00000414 	.word	0x00000414
 8012d7c:	20000908 	.word	0x20000908
 8012d80:	00000237 	.word	0x00000237
 8012d84:	200007d2 	.word	0x200007d2
 8012d88:	00000484 	.word	0x00000484
 8012d8c:	00000441 	.word	0x00000441
 8012d90:	200008e8 	.word	0x200008e8
 8012d94:	200007d3 	.word	0x200007d3

08012d98 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012d98:	b5b0      	push	{r4, r5, r7, lr}
 8012d9a:	b08a      	sub	sp, #40	; 0x28
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	0002      	movs	r2, r0
 8012da0:	1dfb      	adds	r3, r7, #7
 8012da2:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012da4:	2327      	movs	r3, #39	; 0x27
 8012da6:	18fb      	adds	r3, r7, r3
 8012da8:	2203      	movs	r2, #3
 8012daa:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012dac:	240f      	movs	r4, #15
 8012dae:	193b      	adds	r3, r7, r4
 8012db0:	2200      	movs	r2, #0
 8012db2:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8012db4:	2110      	movs	r1, #16
 8012db6:	187b      	adds	r3, r7, r1
 8012db8:	1dfa      	adds	r2, r7, #7
 8012dba:	7812      	ldrb	r2, [r2, #0]
 8012dbc:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012dbe:	4b57      	ldr	r3, [pc, #348]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012dc0:	4a57      	ldr	r2, [pc, #348]	; (8012f20 <SendFrameOnChannel+0x188>)
 8012dc2:	589b      	ldr	r3, [r3, r2]
 8012dc4:	2285      	movs	r2, #133	; 0x85
 8012dc6:	569a      	ldrsb	r2, [r3, r2]
 8012dc8:	187b      	adds	r3, r7, r1
 8012dca:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012dcc:	4b53      	ldr	r3, [pc, #332]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012dce:	4a54      	ldr	r2, [pc, #336]	; (8012f20 <SendFrameOnChannel+0x188>)
 8012dd0:	589b      	ldr	r3, [r3, r2]
 8012dd2:	2284      	movs	r2, #132	; 0x84
 8012dd4:	569a      	ldrsb	r2, [r3, r2]
 8012dd6:	187b      	adds	r3, r7, r1
 8012dd8:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012dda:	4b50      	ldr	r3, [pc, #320]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012ddc:	4a50      	ldr	r2, [pc, #320]	; (8012f20 <SendFrameOnChannel+0x188>)
 8012dde:	589b      	ldr	r3, [r3, r2]
 8012de0:	22bc      	movs	r2, #188	; 0xbc
 8012de2:	589a      	ldr	r2, [r3, r2]
 8012de4:	187b      	adds	r3, r7, r1
 8012de6:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012de8:	4b4c      	ldr	r3, [pc, #304]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012dea:	4a4d      	ldr	r2, [pc, #308]	; (8012f20 <SendFrameOnChannel+0x188>)
 8012dec:	589b      	ldr	r3, [r3, r2]
 8012dee:	22c0      	movs	r2, #192	; 0xc0
 8012df0:	589a      	ldr	r2, [r3, r2]
 8012df2:	187b      	adds	r3, r7, r1
 8012df4:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012df6:	4b49      	ldr	r3, [pc, #292]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012df8:	881a      	ldrh	r2, [r3, #0]
 8012dfa:	187b      	adds	r3, r7, r1
 8012dfc:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012dfe:	4b47      	ldr	r3, [pc, #284]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e00:	4a47      	ldr	r2, [pc, #284]	; (8012f20 <SendFrameOnChannel+0x188>)
 8012e02:	589b      	ldr	r3, [r3, r2]
 8012e04:	7818      	ldrb	r0, [r3, #0]
 8012e06:	4b47      	ldr	r3, [pc, #284]	; (8012f24 <SendFrameOnChannel+0x18c>)
 8012e08:	193a      	adds	r2, r7, r4
 8012e0a:	1879      	adds	r1, r7, r1
 8012e0c:	f004 fc4e 	bl	80176ac <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e10:	4b42      	ldr	r3, [pc, #264]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e12:	4a45      	ldr	r2, [pc, #276]	; (8012f28 <SendFrameOnChannel+0x190>)
 8012e14:	2101      	movs	r1, #1
 8012e16:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012e18:	4b40      	ldr	r3, [pc, #256]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e1a:	4a41      	ldr	r2, [pc, #260]	; (8012f20 <SendFrameOnChannel+0x188>)
 8012e1c:	589b      	ldr	r3, [r3, r2]
 8012e1e:	2285      	movs	r2, #133	; 0x85
 8012e20:	569b      	ldrsb	r3, [r3, r2]
 8012e22:	b2d9      	uxtb	r1, r3
 8012e24:	4b3d      	ldr	r3, [pc, #244]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e26:	4a41      	ldr	r2, [pc, #260]	; (8012f2c <SendFrameOnChannel+0x194>)
 8012e28:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 8012e2a:	193b      	adds	r3, r7, r4
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	5659      	ldrsb	r1, [r3, r1]
 8012e30:	4b3a      	ldr	r3, [pc, #232]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e32:	4a3f      	ldr	r2, [pc, #252]	; (8012f30 <SendFrameOnChannel+0x198>)
 8012e34:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 8012e36:	1dfb      	adds	r3, r7, #7
 8012e38:	781a      	ldrb	r2, [r3, #0]
 8012e3a:	4b38      	ldr	r3, [pc, #224]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e3c:	493d      	ldr	r1, [pc, #244]	; (8012f34 <SendFrameOnChannel+0x19c>)
 8012e3e:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012e40:	4a36      	ldr	r2, [pc, #216]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e42:	2383      	movs	r3, #131	; 0x83
 8012e44:	00db      	lsls	r3, r3, #3
 8012e46:	58d2      	ldr	r2, [r2, r3]
 8012e48:	4b34      	ldr	r3, [pc, #208]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e4a:	493b      	ldr	r1, [pc, #236]	; (8012f38 <SendFrameOnChannel+0x1a0>)
 8012e4c:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012e4e:	4a33      	ldr	r2, [pc, #204]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e50:	2383      	movs	r3, #131	; 0x83
 8012e52:	00db      	lsls	r3, r3, #3
 8012e54:	58d2      	ldr	r2, [r2, r3]
 8012e56:	4b31      	ldr	r3, [pc, #196]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e58:	4938      	ldr	r1, [pc, #224]	; (8012f3c <SendFrameOnChannel+0x1a4>)
 8012e5a:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012e5c:	f002 f9b0 	bl	80151c0 <LoRaMacClassBIsBeaconModeActive>
 8012e60:	1e03      	subs	r3, r0, #0
 8012e62:	d00d      	beq.n	8012e80 <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012e64:	4a2d      	ldr	r2, [pc, #180]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e66:	2383      	movs	r3, #131	; 0x83
 8012e68:	00db      	lsls	r3, r3, #3
 8012e6a:	58d3      	ldr	r3, [r2, r3]
 8012e6c:	0018      	movs	r0, r3
 8012e6e:	f002 fa0b 	bl	8015288 <LoRaMacClassBIsUplinkCollision>
 8012e72:	0003      	movs	r3, r0
 8012e74:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 8012e76:	6a3b      	ldr	r3, [r7, #32]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d001      	beq.n	8012e80 <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012e7c:	2310      	movs	r3, #16
 8012e7e:	e048      	b.n	8012f12 <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8012e80:	4b26      	ldr	r3, [pc, #152]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e82:	4a27      	ldr	r2, [pc, #156]	; (8012f20 <SendFrameOnChannel+0x188>)
 8012e84:	589b      	ldr	r3, [r3, r2]
 8012e86:	227c      	movs	r2, #124	; 0x7c
 8012e88:	5c9b      	ldrb	r3, [r3, r2]
 8012e8a:	2b01      	cmp	r3, #1
 8012e8c:	d101      	bne.n	8012e92 <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8012e8e:	f002 fa04 	bl	801529a <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012e92:	f002 f9a5 	bl	80151e0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8012e96:	4b21      	ldr	r3, [pc, #132]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012e98:	4a21      	ldr	r2, [pc, #132]	; (8012f20 <SendFrameOnChannel+0x188>)
 8012e9a:	589b      	ldr	r3, [r3, r2]
 8012e9c:	2285      	movs	r2, #133	; 0x85
 8012e9e:	569b      	ldrsb	r3, [r3, r2]
 8012ea0:	b2da      	uxtb	r2, r3
 8012ea2:	4b1e      	ldr	r3, [pc, #120]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012ea4:	4926      	ldr	r1, [pc, #152]	; (8012f40 <SendFrameOnChannel+0x1a8>)
 8012ea6:	5c5b      	ldrb	r3, [r3, r1]
 8012ea8:	2527      	movs	r5, #39	; 0x27
 8012eaa:	197c      	adds	r4, r7, r5
 8012eac:	0019      	movs	r1, r3
 8012eae:	0010      	movs	r0, r2
 8012eb0:	f7ff fbea 	bl	8012688 <SecureFrame>
 8012eb4:	0003      	movs	r3, r0
 8012eb6:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8012eb8:	197b      	adds	r3, r7, r5
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d002      	beq.n	8012ec6 <SendFrameOnChannel+0x12e>
    {
        return status;
 8012ec0:	197b      	adds	r3, r7, r5
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	e025      	b.n	8012f12 <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012ec6:	4a15      	ldr	r2, [pc, #84]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012ec8:	23d0      	movs	r3, #208	; 0xd0
 8012eca:	009b      	lsls	r3, r3, #2
 8012ecc:	58d3      	ldr	r3, [r2, r3]
 8012ece:	2202      	movs	r2, #2
 8012ed0:	431a      	orrs	r2, r3
 8012ed2:	0011      	movs	r1, r2
 8012ed4:	4a11      	ldr	r2, [pc, #68]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012ed6:	23d0      	movs	r3, #208	; 0xd0
 8012ed8:	009b      	lsls	r3, r3, #2
 8012eda:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8012edc:	4b0f      	ldr	r3, [pc, #60]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012ede:	4a19      	ldr	r2, [pc, #100]	; (8012f44 <SendFrameOnChannel+0x1ac>)
 8012ee0:	5c9b      	ldrb	r3, [r3, r2]
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	4053      	eors	r3, r2
 8012ee6:	b2db      	uxtb	r3, r3
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d009      	beq.n	8012f00 <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012eec:	4a0b      	ldr	r2, [pc, #44]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012eee:	2382      	movs	r3, #130	; 0x82
 8012ef0:	00db      	lsls	r3, r3, #3
 8012ef2:	5cd3      	ldrb	r3, [r2, r3]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	b2d9      	uxtb	r1, r3
 8012ef8:	4a08      	ldr	r2, [pc, #32]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012efa:	2382      	movs	r3, #130	; 0x82
 8012efc:	00db      	lsls	r3, r3, #3
 8012efe:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012f00:	4b11      	ldr	r3, [pc, #68]	; (8012f48 <SendFrameOnChannel+0x1b0>)
 8012f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f04:	4a05      	ldr	r2, [pc, #20]	; (8012f1c <SendFrameOnChannel+0x184>)
 8012f06:	8812      	ldrh	r2, [r2, #0]
 8012f08:	b2d1      	uxtb	r1, r2
 8012f0a:	4a10      	ldr	r2, [pc, #64]	; (8012f4c <SendFrameOnChannel+0x1b4>)
 8012f0c:	0010      	movs	r0, r2
 8012f0e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012f10:	2300      	movs	r3, #0
}
 8012f12:	0018      	movs	r0, r3
 8012f14:	46bd      	mov	sp, r7
 8012f16:	b00a      	add	sp, #40	; 0x28
 8012f18:	bdb0      	pop	{r4, r5, r7, pc}
 8012f1a:	46c0      	nop			; (mov r8, r8)
 8012f1c:	200007d0 	.word	0x200007d0
 8012f20:	00000484 	.word	0x00000484
 8012f24:	20000be8 	.word	0x20000be8
 8012f28:	0000043d 	.word	0x0000043d
 8012f2c:	0000043e 	.word	0x0000043e
 8012f30:	0000043f 	.word	0x0000043f
 8012f34:	0000044c 	.word	0x0000044c
 8012f38:	00000444 	.word	0x00000444
 8012f3c:	00000454 	.word	0x00000454
 8012f40:	00000415 	.word	0x00000415
 8012f44:	00000414 	.word	0x00000414
 8012f48:	08021740 	.word	0x08021740
 8012f4c:	200007d2 	.word	0x200007d2

08012f50 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	0002      	movs	r2, r0
 8012f58:	1dbb      	adds	r3, r7, #6
 8012f5a:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8012f5c:	4b1f      	ldr	r3, [pc, #124]	; (8012fdc <SetTxContinuousWave+0x8c>)
 8012f5e:	4a20      	ldr	r2, [pc, #128]	; (8012fe0 <SetTxContinuousWave+0x90>)
 8012f60:	5c9a      	ldrb	r2, [r3, r2]
 8012f62:	2108      	movs	r1, #8
 8012f64:	187b      	adds	r3, r7, r1
 8012f66:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012f68:	4b1c      	ldr	r3, [pc, #112]	; (8012fdc <SetTxContinuousWave+0x8c>)
 8012f6a:	4a1e      	ldr	r2, [pc, #120]	; (8012fe4 <SetTxContinuousWave+0x94>)
 8012f6c:	589b      	ldr	r3, [r3, r2]
 8012f6e:	2285      	movs	r2, #133	; 0x85
 8012f70:	569a      	ldrsb	r2, [r3, r2]
 8012f72:	187b      	adds	r3, r7, r1
 8012f74:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012f76:	4b19      	ldr	r3, [pc, #100]	; (8012fdc <SetTxContinuousWave+0x8c>)
 8012f78:	4a1a      	ldr	r2, [pc, #104]	; (8012fe4 <SetTxContinuousWave+0x94>)
 8012f7a:	589b      	ldr	r3, [r3, r2]
 8012f7c:	2284      	movs	r2, #132	; 0x84
 8012f7e:	569a      	ldrsb	r2, [r3, r2]
 8012f80:	187b      	adds	r3, r7, r1
 8012f82:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012f84:	4b15      	ldr	r3, [pc, #84]	; (8012fdc <SetTxContinuousWave+0x8c>)
 8012f86:	4a17      	ldr	r2, [pc, #92]	; (8012fe4 <SetTxContinuousWave+0x94>)
 8012f88:	589b      	ldr	r3, [r3, r2]
 8012f8a:	22bc      	movs	r2, #188	; 0xbc
 8012f8c:	589a      	ldr	r2, [r3, r2]
 8012f8e:	187b      	adds	r3, r7, r1
 8012f90:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012f92:	4b12      	ldr	r3, [pc, #72]	; (8012fdc <SetTxContinuousWave+0x8c>)
 8012f94:	4a13      	ldr	r2, [pc, #76]	; (8012fe4 <SetTxContinuousWave+0x94>)
 8012f96:	589b      	ldr	r3, [r3, r2]
 8012f98:	22c0      	movs	r2, #192	; 0xc0
 8012f9a:	589a      	ldr	r2, [r3, r2]
 8012f9c:	187b      	adds	r3, r7, r1
 8012f9e:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 8012fa0:	187b      	adds	r3, r7, r1
 8012fa2:	1dba      	adds	r2, r7, #6
 8012fa4:	8812      	ldrh	r2, [r2, #0]
 8012fa6:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8012fa8:	4b0c      	ldr	r3, [pc, #48]	; (8012fdc <SetTxContinuousWave+0x8c>)
 8012faa:	4a0e      	ldr	r2, [pc, #56]	; (8012fe4 <SetTxContinuousWave+0x94>)
 8012fac:	589b      	ldr	r3, [r3, r2]
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	187a      	adds	r2, r7, r1
 8012fb2:	0011      	movs	r1, r2
 8012fb4:	0018      	movs	r0, r3
 8012fb6:	f004 fc48 	bl	801784a <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012fba:	4a08      	ldr	r2, [pc, #32]	; (8012fdc <SetTxContinuousWave+0x8c>)
 8012fbc:	23d0      	movs	r3, #208	; 0xd0
 8012fbe:	009b      	lsls	r3, r3, #2
 8012fc0:	58d3      	ldr	r3, [r2, r3]
 8012fc2:	2202      	movs	r2, #2
 8012fc4:	431a      	orrs	r2, r3
 8012fc6:	0011      	movs	r1, r2
 8012fc8:	4a04      	ldr	r2, [pc, #16]	; (8012fdc <SetTxContinuousWave+0x8c>)
 8012fca:	23d0      	movs	r3, #208	; 0xd0
 8012fcc:	009b      	lsls	r3, r3, #2
 8012fce:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8012fd0:	2300      	movs	r3, #0
}
 8012fd2:	0018      	movs	r0, r3
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	b006      	add	sp, #24
 8012fd8:	bd80      	pop	{r7, pc}
 8012fda:	46c0      	nop			; (mov r8, r8)
 8012fdc:	200007d0 	.word	0x200007d0
 8012fe0:	00000415 	.word	0x00000415
 8012fe4:	00000484 	.word	0x00000484

08012fe8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6039      	str	r1, [r7, #0]
 8012ff0:	0011      	movs	r1, r2
 8012ff2:	1dbb      	adds	r3, r7, #6
 8012ff4:	1c02      	adds	r2, r0, #0
 8012ff6:	801a      	strh	r2, [r3, #0]
 8012ff8:	1d7b      	adds	r3, r7, #5
 8012ffa:	1c0a      	adds	r2, r1, #0
 8012ffc:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012ffe:	4b0c      	ldr	r3, [pc, #48]	; (8013030 <SetTxContinuousWave1+0x48>)
 8013000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013002:	1d7a      	adds	r2, r7, #5
 8013004:	2100      	movs	r1, #0
 8013006:	5651      	ldrsb	r1, [r2, r1]
 8013008:	1dba      	adds	r2, r7, #6
 801300a:	8812      	ldrh	r2, [r2, #0]
 801300c:	6838      	ldr	r0, [r7, #0]
 801300e:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013010:	4a08      	ldr	r2, [pc, #32]	; (8013034 <SetTxContinuousWave1+0x4c>)
 8013012:	23d0      	movs	r3, #208	; 0xd0
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	58d3      	ldr	r3, [r2, r3]
 8013018:	2202      	movs	r2, #2
 801301a:	431a      	orrs	r2, r3
 801301c:	0011      	movs	r1, r2
 801301e:	4a05      	ldr	r2, [pc, #20]	; (8013034 <SetTxContinuousWave1+0x4c>)
 8013020:	23d0      	movs	r3, #208	; 0xd0
 8013022:	009b      	lsls	r3, r3, #2
 8013024:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8013026:	2300      	movs	r3, #0
}
 8013028:	0018      	movs	r0, r3
 801302a:	46bd      	mov	sp, r7
 801302c:	b002      	add	sp, #8
 801302e:	bd80      	pop	{r7, pc}
 8013030:	08021740 	.word	0x08021740
 8013034:	200007d0 	.word	0x200007d0

08013038 <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 801303e:	4b20      	ldr	r3, [pc, #128]	; (80130c0 <GetCtxs+0x88>)
 8013040:	4a20      	ldr	r2, [pc, #128]	; (80130c4 <GetCtxs+0x8c>)
 8013042:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8013044:	4b1e      	ldr	r3, [pc, #120]	; (80130c0 <GetCtxs+0x88>)
 8013046:	22b6      	movs	r2, #182	; 0xb6
 8013048:	0052      	lsls	r2, r2, #1
 801304a:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 801304c:	4b1e      	ldr	r3, [pc, #120]	; (80130c8 <GetCtxs+0x90>)
 801304e:	0018      	movs	r0, r3
 8013050:	f003 faa6 	bl	80165a0 <LoRaMacCryptoGetNvmCtx>
 8013054:	0002      	movs	r2, r0
 8013056:	4b1a      	ldr	r3, [pc, #104]	; (80130c0 <GetCtxs+0x88>)
 8013058:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 801305a:	2300      	movs	r3, #0
 801305c:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 801305e:	4b1b      	ldr	r3, [pc, #108]	; (80130cc <GetCtxs+0x94>)
 8013060:	4a1b      	ldr	r2, [pc, #108]	; (80130d0 <GetCtxs+0x98>)
 8013062:	589b      	ldr	r3, [r3, r2]
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	1d3a      	adds	r2, r7, #4
 8013068:	0011      	movs	r1, r2
 801306a:	0018      	movs	r0, r3
 801306c:	f004 fa82 	bl	8017574 <RegionGetNvmCtx>
 8013070:	0002      	movs	r2, r0
 8013072:	4b13      	ldr	r3, [pc, #76]	; (80130c0 <GetCtxs+0x88>)
 8013074:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8013076:	687a      	ldr	r2, [r7, #4]
 8013078:	4b11      	ldr	r3, [pc, #68]	; (80130c0 <GetCtxs+0x88>)
 801307a:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 801307c:	4b15      	ldr	r3, [pc, #84]	; (80130d4 <GetCtxs+0x9c>)
 801307e:	0018      	movs	r0, r3
 8013080:	f7fa fcf2 	bl	800da68 <SecureElementGetNvmCtx>
 8013084:	0002      	movs	r2, r0
 8013086:	4b0e      	ldr	r3, [pc, #56]	; (80130c0 <GetCtxs+0x88>)
 8013088:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 801308a:	4b13      	ldr	r3, [pc, #76]	; (80130d8 <GetCtxs+0xa0>)
 801308c:	0018      	movs	r0, r3
 801308e:	f002 fa63 	bl	8015558 <LoRaMacCommandsGetNvmCtx>
 8013092:	0002      	movs	r2, r0
 8013094:	4b0a      	ldr	r3, [pc, #40]	; (80130c0 <GetCtxs+0x88>)
 8013096:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8013098:	4b10      	ldr	r3, [pc, #64]	; (80130dc <GetCtxs+0xa4>)
 801309a:	0018      	movs	r0, r3
 801309c:	f002 f82a 	bl	80150f4 <LoRaMacClassBGetNvmCtx>
 80130a0:	0002      	movs	r2, r0
 80130a2:	4b07      	ldr	r3, [pc, #28]	; (80130c0 <GetCtxs+0x88>)
 80130a4:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 80130a6:	4b0e      	ldr	r3, [pc, #56]	; (80130e0 <GetCtxs+0xa8>)
 80130a8:	0018      	movs	r0, r3
 80130aa:	f002 fcf5 	bl	8015a98 <LoRaMacConfirmQueueGetNvmCtx>
 80130ae:	0002      	movs	r2, r0
 80130b0:	4b03      	ldr	r3, [pc, #12]	; (80130c0 <GetCtxs+0x88>)
 80130b2:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 80130b4:	4b02      	ldr	r3, [pc, #8]	; (80130c0 <GetCtxs+0x88>)
}
 80130b6:	0018      	movs	r0, r3
 80130b8:	46bd      	mov	sp, r7
 80130ba:	b002      	add	sp, #8
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	46c0      	nop			; (mov r8, r8)
 80130c0:	20000dc8 	.word	0x20000dc8
 80130c4:	20000c5c 	.word	0x20000c5c
 80130c8:	20000ddc 	.word	0x20000ddc
 80130cc:	200007d0 	.word	0x200007d0
 80130d0:	00000484 	.word	0x00000484
 80130d4:	20000de4 	.word	0x20000de4
 80130d8:	20000dec 	.word	0x20000dec
 80130dc:	20000df4 	.word	0x20000df4
 80130e0:	20000dfc 	.word	0x20000dfc

080130e4 <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b084      	sub	sp, #16
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d101      	bne.n	80130f6 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80130f2:	2303      	movs	r3, #3
 80130f4:	e086      	b.n	8013204 <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80130f6:	4a45      	ldr	r2, [pc, #276]	; (801320c <RestoreCtxs+0x128>)
 80130f8:	23d0      	movs	r3, #208	; 0xd0
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	58d3      	ldr	r3, [r2, r3]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d001      	beq.n	8013106 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8013102:	2301      	movs	r3, #1
 8013104:	e07e      	b.n	8013204 <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d008      	beq.n	8013120 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6819      	ldr	r1, [r3, #0]
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	b29a      	uxth	r2, r3
 8013118:	4b3d      	ldr	r3, [pc, #244]	; (8013210 <RestoreCtxs+0x12c>)
 801311a:	0018      	movs	r0, r3
 801311c:	f006 fe68 	bl	8019df0 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8013120:	2108      	movs	r1, #8
 8013122:	187b      	adds	r3, r7, r1
 8013124:	2203      	movs	r2, #3
 8013126:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	689a      	ldr	r2, [r3, #8]
 801312c:	187b      	adds	r3, r7, r1
 801312e:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8013130:	4b36      	ldr	r3, [pc, #216]	; (801320c <RestoreCtxs+0x128>)
 8013132:	4a38      	ldr	r2, [pc, #224]	; (8013214 <RestoreCtxs+0x130>)
 8013134:	589b      	ldr	r3, [r3, r2]
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	187a      	adds	r2, r7, r1
 801313a:	0011      	movs	r1, r2
 801313c:	0018      	movs	r0, r3
 801313e:	f004 fa04 	bl	801754a <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013142:	4b32      	ldr	r3, [pc, #200]	; (801320c <RestoreCtxs+0x128>)
 8013144:	4a34      	ldr	r2, [pc, #208]	; (8013218 <RestoreCtxs+0x134>)
 8013146:	5c99      	ldrb	r1, [r3, r2]
 8013148:	4a30      	ldr	r2, [pc, #192]	; (801320c <RestoreCtxs+0x128>)
 801314a:	23f8      	movs	r3, #248	; 0xf8
 801314c:	009b      	lsls	r3, r3, #2
 801314e:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8013150:	4b2e      	ldr	r3, [pc, #184]	; (801320c <RestoreCtxs+0x128>)
 8013152:	4a30      	ldr	r2, [pc, #192]	; (8013214 <RestoreCtxs+0x130>)
 8013154:	589b      	ldr	r3, [r3, r2]
 8013156:	22b0      	movs	r2, #176	; 0xb0
 8013158:	5899      	ldr	r1, [r3, r2]
 801315a:	4a2c      	ldr	r2, [pc, #176]	; (801320c <RestoreCtxs+0x128>)
 801315c:	23f9      	movs	r3, #249	; 0xf9
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013162:	4b2a      	ldr	r3, [pc, #168]	; (801320c <RestoreCtxs+0x128>)
 8013164:	4a2b      	ldr	r2, [pc, #172]	; (8013214 <RestoreCtxs+0x130>)
 8013166:	589b      	ldr	r3, [r3, r2]
 8013168:	22b9      	movs	r2, #185	; 0xb9
 801316a:	5c99      	ldrb	r1, [r3, r2]
 801316c:	4a27      	ldr	r2, [pc, #156]	; (801320c <RestoreCtxs+0x128>)
 801316e:	23fc      	movs	r3, #252	; 0xfc
 8013170:	009b      	lsls	r3, r3, #2
 8013172:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8013174:	4b25      	ldr	r3, [pc, #148]	; (801320c <RestoreCtxs+0x128>)
 8013176:	4a27      	ldr	r2, [pc, #156]	; (8013214 <RestoreCtxs+0x130>)
 8013178:	589b      	ldr	r3, [r3, r2]
 801317a:	22ca      	movs	r2, #202	; 0xca
 801317c:	5c99      	ldrb	r1, [r3, r2]
 801317e:	4b23      	ldr	r3, [pc, #140]	; (801320c <RestoreCtxs+0x128>)
 8013180:	4a26      	ldr	r2, [pc, #152]	; (801321c <RestoreCtxs+0x138>)
 8013182:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013184:	4b21      	ldr	r3, [pc, #132]	; (801320c <RestoreCtxs+0x128>)
 8013186:	4a26      	ldr	r2, [pc, #152]	; (8013220 <RestoreCtxs+0x13c>)
 8013188:	2101      	movs	r1, #1
 801318a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801318c:	4b1f      	ldr	r3, [pc, #124]	; (801320c <RestoreCtxs+0x128>)
 801318e:	4a25      	ldr	r2, [pc, #148]	; (8013224 <RestoreCtxs+0x140>)
 8013190:	2102      	movs	r1, #2
 8013192:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	699b      	ldr	r3, [r3, #24]
 8013198:	0018      	movs	r0, r3
 801319a:	f7fa fc4f 	bl	800da3c <SecureElementRestoreNvmCtx>
 801319e:	1e03      	subs	r3, r0, #0
 80131a0:	d001      	beq.n	80131a6 <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80131a2:	2311      	movs	r3, #17
 80131a4:	e02e      	b.n	8013204 <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	691b      	ldr	r3, [r3, #16]
 80131aa:	0018      	movs	r0, r3
 80131ac:	f003 f9e2 	bl	8016574 <LoRaMacCryptoRestoreNvmCtx>
 80131b0:	1e03      	subs	r3, r0, #0
 80131b2:	d001      	beq.n	80131b8 <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80131b4:	2311      	movs	r3, #17
 80131b6:	e025      	b.n	8013204 <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6a1b      	ldr	r3, [r3, #32]
 80131bc:	0018      	movs	r0, r3
 80131be:	f002 f9b5 	bl	801552c <LoRaMacCommandsRestoreNvmCtx>
 80131c2:	1e03      	subs	r3, r0, #0
 80131c4:	d001      	beq.n	80131ca <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80131c6:	2313      	movs	r3, #19
 80131c8:	e01c      	b.n	8013204 <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131ce:	0018      	movs	r0, r3
 80131d0:	f001 ff87 	bl	80150e2 <LoRaMacClassBRestoreNvmCtx>
 80131d4:	0003      	movs	r3, r0
 80131d6:	001a      	movs	r2, r3
 80131d8:	2301      	movs	r3, #1
 80131da:	4053      	eors	r3, r2
 80131dc:	b2db      	uxtb	r3, r3
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d001      	beq.n	80131e6 <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 80131e2:	2314      	movs	r3, #20
 80131e4:	e00e      	b.n	8013204 <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131ea:	0018      	movs	r0, r3
 80131ec:	f002 fc3e 	bl	8015a6c <LoRaMacConfirmQueueRestoreNvmCtx>
 80131f0:	0003      	movs	r3, r0
 80131f2:	001a      	movs	r2, r3
 80131f4:	2301      	movs	r3, #1
 80131f6:	4053      	eors	r3, r2
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d001      	beq.n	8013202 <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 80131fe:	2315      	movs	r3, #21
 8013200:	e000      	b.n	8013204 <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 8013202:	2300      	movs	r3, #0
}
 8013204:	0018      	movs	r0, r3
 8013206:	46bd      	mov	sp, r7
 8013208:	b004      	add	sp, #16
 801320a:	bd80      	pop	{r7, pc}
 801320c:	200007d0 	.word	0x200007d0
 8013210:	20000c5c 	.word	0x20000c5c
 8013214:	00000484 	.word	0x00000484
 8013218:	00000415 	.word	0x00000415
 801321c:	000003f1 	.word	0x000003f1
 8013220:	000003f2 	.word	0x000003f2
 8013224:	000003f3 	.word	0x000003f3

08013228 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d002      	beq.n	801323e <DetermineFrameType+0x16>
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d101      	bne.n	8013242 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801323e:	2303      	movs	r3, #3
 8013240:	e03b      	b.n	80132ba <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	7b1b      	ldrb	r3, [r3, #12]
 8013246:	220f      	movs	r2, #15
 8013248:	4013      	ands	r3, r2
 801324a:	b2db      	uxtb	r3, r3
 801324c:	2b00      	cmp	r3, #0
 801324e:	d008      	beq.n	8013262 <DetermineFrameType+0x3a>
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2220      	movs	r2, #32
 8013254:	5c9b      	ldrb	r3, [r3, r2]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d003      	beq.n	8013262 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	2200      	movs	r2, #0
 801325e:	701a      	strb	r2, [r3, #0]
 8013260:	e02a      	b.n	80132b8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2228      	movs	r2, #40	; 0x28
 8013266:	5c9b      	ldrb	r3, [r3, r2]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d103      	bne.n	8013274 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	2201      	movs	r2, #1
 8013270:	701a      	strb	r2, [r3, #0]
 8013272:	e021      	b.n	80132b8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	7b1b      	ldrb	r3, [r3, #12]
 8013278:	220f      	movs	r2, #15
 801327a:	4013      	ands	r3, r2
 801327c:	b2db      	uxtb	r3, r3
 801327e:	2b00      	cmp	r3, #0
 8013280:	d108      	bne.n	8013294 <DetermineFrameType+0x6c>
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2220      	movs	r2, #32
 8013286:	5c9b      	ldrb	r3, [r3, r2]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d103      	bne.n	8013294 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	2202      	movs	r2, #2
 8013290:	701a      	strb	r2, [r3, #0]
 8013292:	e011      	b.n	80132b8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	7b1b      	ldrb	r3, [r3, #12]
 8013298:	220f      	movs	r2, #15
 801329a:	4013      	ands	r3, r2
 801329c:	b2db      	uxtb	r3, r3
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d108      	bne.n	80132b4 <DetermineFrameType+0x8c>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2220      	movs	r2, #32
 80132a6:	5c9b      	ldrb	r3, [r3, r2]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d003      	beq.n	80132b4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	2203      	movs	r2, #3
 80132b0:	701a      	strb	r2, [r3, #0]
 80132b2:	e001      	b.n	80132b8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80132b4:	2317      	movs	r3, #23
 80132b6:	e000      	b.n	80132ba <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80132b8:	2300      	movs	r3, #0
}
 80132ba:	0018      	movs	r0, r3
 80132bc:	46bd      	mov	sp, r7
 80132be:	b002      	add	sp, #8
 80132c0:	bd80      	pop	{r7, pc}
	...

080132c4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80132c8:	4a14      	ldr	r2, [pc, #80]	; (801331c <CheckRetransUnconfirmedUplink+0x58>)
 80132ca:	2382      	movs	r3, #130	; 0x82
 80132cc:	00db      	lsls	r3, r3, #3
 80132ce:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 80132d0:	4b12      	ldr	r3, [pc, #72]	; (801331c <CheckRetransUnconfirmedUplink+0x58>)
 80132d2:	4913      	ldr	r1, [pc, #76]	; (8013320 <CheckRetransUnconfirmedUplink+0x5c>)
 80132d4:	585b      	ldr	r3, [r3, r1]
 80132d6:	21a4      	movs	r1, #164	; 0xa4
 80132d8:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 80132da:	429a      	cmp	r2, r3
 80132dc:	d301      	bcc.n	80132e2 <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 80132de:	2301      	movs	r3, #1
 80132e0:	e018      	b.n	8013314 <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80132e2:	4b0e      	ldr	r3, [pc, #56]	; (801331c <CheckRetransUnconfirmedUplink+0x58>)
 80132e4:	4a0f      	ldr	r2, [pc, #60]	; (8013324 <CheckRetransUnconfirmedUplink+0x60>)
 80132e6:	5c9b      	ldrb	r3, [r3, r2]
 80132e8:	2202      	movs	r2, #2
 80132ea:	4013      	ands	r3, r2
 80132ec:	b2db      	uxtb	r3, r3
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d00f      	beq.n	8013312 <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 80132f2:	4b0a      	ldr	r3, [pc, #40]	; (801331c <CheckRetransUnconfirmedUplink+0x58>)
 80132f4:	4a0a      	ldr	r2, [pc, #40]	; (8013320 <CheckRetransUnconfirmedUplink+0x5c>)
 80132f6:	589b      	ldr	r3, [r3, r2]
 80132f8:	227c      	movs	r2, #124	; 0x7c
 80132fa:	5c9b      	ldrb	r3, [r3, r2]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d101      	bne.n	8013304 <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 8013300:	2301      	movs	r3, #1
 8013302:	e007      	b.n	8013314 <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8013304:	4b05      	ldr	r3, [pc, #20]	; (801331c <CheckRetransUnconfirmedUplink+0x58>)
 8013306:	4a08      	ldr	r2, [pc, #32]	; (8013328 <CheckRetransUnconfirmedUplink+0x64>)
 8013308:	5c9b      	ldrb	r3, [r3, r2]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d101      	bne.n	8013312 <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 801330e:	2301      	movs	r3, #1
 8013310:	e000      	b.n	8013314 <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 8013312:	2300      	movs	r3, #0
}
 8013314:	0018      	movs	r0, r3
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	46c0      	nop			; (mov r8, r8)
 801331c:	200007d0 	.word	0x200007d0
 8013320:	00000484 	.word	0x00000484
 8013324:	00000481 	.word	0x00000481
 8013328:	0000042d 	.word	0x0000042d

0801332c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801332c:	b580      	push	{r7, lr}
 801332e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013330:	4b0e      	ldr	r3, [pc, #56]	; (801336c <CheckRetransConfirmedUplink+0x40>)
 8013332:	4a0f      	ldr	r2, [pc, #60]	; (8013370 <CheckRetransConfirmedUplink+0x44>)
 8013334:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8013336:	4b0d      	ldr	r3, [pc, #52]	; (801336c <CheckRetransConfirmedUplink+0x40>)
 8013338:	490e      	ldr	r1, [pc, #56]	; (8013374 <CheckRetransConfirmedUplink+0x48>)
 801333a:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 801333c:	429a      	cmp	r2, r3
 801333e:	d301      	bcc.n	8013344 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013340:	2301      	movs	r3, #1
 8013342:	e010      	b.n	8013366 <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013344:	4b09      	ldr	r3, [pc, #36]	; (801336c <CheckRetransConfirmedUplink+0x40>)
 8013346:	4a0c      	ldr	r2, [pc, #48]	; (8013378 <CheckRetransConfirmedUplink+0x4c>)
 8013348:	5c9b      	ldrb	r3, [r3, r2]
 801334a:	2202      	movs	r2, #2
 801334c:	4013      	ands	r3, r2
 801334e:	b2db      	uxtb	r3, r3
 8013350:	2b00      	cmp	r3, #0
 8013352:	d007      	beq.n	8013364 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013354:	4a05      	ldr	r2, [pc, #20]	; (801336c <CheckRetransConfirmedUplink+0x40>)
 8013356:	2388      	movs	r3, #136	; 0x88
 8013358:	00db      	lsls	r3, r3, #3
 801335a:	5cd3      	ldrb	r3, [r2, r3]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d001      	beq.n	8013364 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8013360:	2301      	movs	r3, #1
 8013362:	e000      	b.n	8013366 <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8013364:	2300      	movs	r3, #0
}
 8013366:	0018      	movs	r0, r3
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}
 801336c:	200007d0 	.word	0x200007d0
 8013370:	00000412 	.word	0x00000412
 8013374:	00000411 	.word	0x00000411
 8013378:	00000481 	.word	0x00000481

0801337c <StopRetransmission>:

static bool StopRetransmission( void )
{
 801337c:	b580      	push	{r7, lr}
 801337e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013380:	4b1e      	ldr	r3, [pc, #120]	; (80133fc <StopRetransmission+0x80>)
 8013382:	4a1f      	ldr	r2, [pc, #124]	; (8013400 <StopRetransmission+0x84>)
 8013384:	5c9b      	ldrb	r3, [r3, r2]
 8013386:	2202      	movs	r2, #2
 8013388:	4013      	ands	r3, r2
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d009      	beq.n	80133a4 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8013390:	4b1a      	ldr	r3, [pc, #104]	; (80133fc <StopRetransmission+0x80>)
 8013392:	4a1c      	ldr	r2, [pc, #112]	; (8013404 <StopRetransmission+0x88>)
 8013394:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013396:	2b00      	cmp	r3, #0
 8013398:	d013      	beq.n	80133c2 <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 801339a:	4b18      	ldr	r3, [pc, #96]	; (80133fc <StopRetransmission+0x80>)
 801339c:	4a19      	ldr	r2, [pc, #100]	; (8013404 <StopRetransmission+0x88>)
 801339e:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 80133a0:	2b01      	cmp	r3, #1
 80133a2:	d00e      	beq.n	80133c2 <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 80133a4:	4b15      	ldr	r3, [pc, #84]	; (80133fc <StopRetransmission+0x80>)
 80133a6:	4a18      	ldr	r2, [pc, #96]	; (8013408 <StopRetransmission+0x8c>)
 80133a8:	589b      	ldr	r3, [r3, r2]
 80133aa:	227e      	movs	r2, #126	; 0x7e
 80133ac:	5c9b      	ldrb	r3, [r3, r2]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d007      	beq.n	80133c2 <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 80133b2:	4b12      	ldr	r3, [pc, #72]	; (80133fc <StopRetransmission+0x80>)
 80133b4:	4a14      	ldr	r2, [pc, #80]	; (8013408 <StopRetransmission+0x8c>)
 80133b6:	589b      	ldr	r3, [r3, r2]
 80133b8:	2280      	movs	r2, #128	; 0x80
 80133ba:	589a      	ldr	r2, [r3, r2]
 80133bc:	3201      	adds	r2, #1
 80133be:	2180      	movs	r1, #128	; 0x80
 80133c0:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80133c2:	4a0e      	ldr	r2, [pc, #56]	; (80133fc <StopRetransmission+0x80>)
 80133c4:	2382      	movs	r3, #130	; 0x82
 80133c6:	00db      	lsls	r3, r3, #3
 80133c8:	2100      	movs	r1, #0
 80133ca:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 80133cc:	4b0b      	ldr	r3, [pc, #44]	; (80133fc <StopRetransmission+0x80>)
 80133ce:	4a0f      	ldr	r2, [pc, #60]	; (801340c <StopRetransmission+0x90>)
 80133d0:	2100      	movs	r1, #0
 80133d2:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 80133d4:	4b09      	ldr	r3, [pc, #36]	; (80133fc <StopRetransmission+0x80>)
 80133d6:	4a0e      	ldr	r2, [pc, #56]	; (8013410 <StopRetransmission+0x94>)
 80133d8:	2100      	movs	r1, #0
 80133da:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80133dc:	4a07      	ldr	r2, [pc, #28]	; (80133fc <StopRetransmission+0x80>)
 80133de:	23d0      	movs	r3, #208	; 0xd0
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	58d3      	ldr	r3, [r2, r3]
 80133e4:	2202      	movs	r2, #2
 80133e6:	4393      	bics	r3, r2
 80133e8:	0019      	movs	r1, r3
 80133ea:	4a04      	ldr	r2, [pc, #16]	; (80133fc <StopRetransmission+0x80>)
 80133ec:	23d0      	movs	r3, #208	; 0xd0
 80133ee:	009b      	lsls	r3, r3, #2
 80133f0:	50d1      	str	r1, [r2, r3]

    return true;
 80133f2:	2301      	movs	r3, #1
}
 80133f4:	0018      	movs	r0, r3
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	46c0      	nop			; (mov r8, r8)
 80133fc:	200007d0 	.word	0x200007d0
 8013400:	00000481 	.word	0x00000481
 8013404:	0000042d 	.word	0x0000042d
 8013408:	00000484 	.word	0x00000484
 801340c:	00000414 	.word	0x00000414
 8013410:	00000413 	.word	0x00000413

08013414 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801341a:	4b21      	ldr	r3, [pc, #132]	; (80134a0 <AckTimeoutRetriesProcess+0x8c>)
 801341c:	4a21      	ldr	r2, [pc, #132]	; (80134a4 <AckTimeoutRetriesProcess+0x90>)
 801341e:	5c9a      	ldrb	r2, [r3, r2]
 8013420:	4b1f      	ldr	r3, [pc, #124]	; (80134a0 <AckTimeoutRetriesProcess+0x8c>)
 8013422:	4921      	ldr	r1, [pc, #132]	; (80134a8 <AckTimeoutRetriesProcess+0x94>)
 8013424:	5c5b      	ldrb	r3, [r3, r1]
 8013426:	429a      	cmp	r2, r3
 8013428:	d236      	bcs.n	8013498 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801342a:	4b1d      	ldr	r3, [pc, #116]	; (80134a0 <AckTimeoutRetriesProcess+0x8c>)
 801342c:	4a1d      	ldr	r2, [pc, #116]	; (80134a4 <AckTimeoutRetriesProcess+0x90>)
 801342e:	5c9b      	ldrb	r3, [r3, r2]
 8013430:	3301      	adds	r3, #1
 8013432:	b2d9      	uxtb	r1, r3
 8013434:	4b1a      	ldr	r3, [pc, #104]	; (80134a0 <AckTimeoutRetriesProcess+0x8c>)
 8013436:	4a1b      	ldr	r2, [pc, #108]	; (80134a4 <AckTimeoutRetriesProcess+0x90>)
 8013438:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801343a:	4b19      	ldr	r3, [pc, #100]	; (80134a0 <AckTimeoutRetriesProcess+0x8c>)
 801343c:	4a19      	ldr	r2, [pc, #100]	; (80134a4 <AckTimeoutRetriesProcess+0x90>)
 801343e:	5c9b      	ldrb	r3, [r3, r2]
 8013440:	2201      	movs	r2, #1
 8013442:	4013      	ands	r3, r2
 8013444:	b2db      	uxtb	r3, r3
 8013446:	2b00      	cmp	r3, #0
 8013448:	d026      	beq.n	8013498 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801344a:	2108      	movs	r1, #8
 801344c:	187b      	adds	r3, r7, r1
 801344e:	2222      	movs	r2, #34	; 0x22
 8013450:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013452:	4b13      	ldr	r3, [pc, #76]	; (80134a0 <AckTimeoutRetriesProcess+0x8c>)
 8013454:	4a15      	ldr	r2, [pc, #84]	; (80134ac <AckTimeoutRetriesProcess+0x98>)
 8013456:	589b      	ldr	r3, [r3, r2]
 8013458:	22b8      	movs	r2, #184	; 0xb8
 801345a:	5c9a      	ldrb	r2, [r3, r2]
 801345c:	187b      	adds	r3, r7, r1
 801345e:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013460:	4b0f      	ldr	r3, [pc, #60]	; (80134a0 <AckTimeoutRetriesProcess+0x8c>)
 8013462:	4a12      	ldr	r2, [pc, #72]	; (80134ac <AckTimeoutRetriesProcess+0x98>)
 8013464:	589b      	ldr	r3, [r3, r2]
 8013466:	2285      	movs	r2, #133	; 0x85
 8013468:	569a      	ldrsb	r2, [r3, r2]
 801346a:	187b      	adds	r3, r7, r1
 801346c:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801346e:	4b0c      	ldr	r3, [pc, #48]	; (80134a0 <AckTimeoutRetriesProcess+0x8c>)
 8013470:	4a0e      	ldr	r2, [pc, #56]	; (80134ac <AckTimeoutRetriesProcess+0x98>)
 8013472:	589b      	ldr	r3, [r3, r2]
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	187a      	adds	r2, r7, r1
 8013478:	0011      	movs	r1, r2
 801347a:	0018      	movs	r0, r3
 801347c:	f004 f829 	bl	80174d2 <RegionGetPhyParam>
 8013480:	0003      	movs	r3, r0
 8013482:	001a      	movs	r2, r3
 8013484:	1d3b      	adds	r3, r7, #4
 8013486:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8013488:	1d3b      	adds	r3, r7, #4
 801348a:	6819      	ldr	r1, [r3, #0]
 801348c:	4b04      	ldr	r3, [pc, #16]	; (80134a0 <AckTimeoutRetriesProcess+0x8c>)
 801348e:	4a07      	ldr	r2, [pc, #28]	; (80134ac <AckTimeoutRetriesProcess+0x98>)
 8013490:	589b      	ldr	r3, [r3, r2]
 8013492:	b249      	sxtb	r1, r1
 8013494:	2285      	movs	r2, #133	; 0x85
 8013496:	5499      	strb	r1, [r3, r2]
        }
    }
}
 8013498:	46c0      	nop			; (mov r8, r8)
 801349a:	46bd      	mov	sp, r7
 801349c:	b004      	add	sp, #16
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	200007d0 	.word	0x200007d0
 80134a4:	00000412 	.word	0x00000412
 80134a8:	00000411 	.word	0x00000411
 80134ac:	00000484 	.word	0x00000484

080134b0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80134b6:	4a16      	ldr	r2, [pc, #88]	; (8013510 <AckTimeoutRetriesFinalize+0x60>)
 80134b8:	2388      	movs	r3, #136	; 0x88
 80134ba:	00db      	lsls	r3, r3, #3
 80134bc:	5cd3      	ldrb	r3, [r2, r3]
 80134be:	2201      	movs	r2, #1
 80134c0:	4053      	eors	r3, r2
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d018      	beq.n	80134fa <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80134c8:	003b      	movs	r3, r7
 80134ca:	2202      	movs	r2, #2
 80134cc:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 80134ce:	4b11      	ldr	r3, [pc, #68]	; (8013514 <AckTimeoutRetriesFinalize+0x64>)
 80134d0:	689a      	ldr	r2, [r3, #8]
 80134d2:	003b      	movs	r3, r7
 80134d4:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80134d6:	4b0e      	ldr	r3, [pc, #56]	; (8013510 <AckTimeoutRetriesFinalize+0x60>)
 80134d8:	4a0f      	ldr	r2, [pc, #60]	; (8013518 <AckTimeoutRetriesFinalize+0x68>)
 80134da:	589b      	ldr	r3, [r3, r2]
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	003a      	movs	r2, r7
 80134e0:	0011      	movs	r1, r2
 80134e2:	0018      	movs	r0, r3
 80134e4:	f004 f831 	bl	801754a <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80134e8:	4b09      	ldr	r3, [pc, #36]	; (8013510 <AckTimeoutRetriesFinalize+0x60>)
 80134ea:	4a0c      	ldr	r2, [pc, #48]	; (801351c <AckTimeoutRetriesFinalize+0x6c>)
 80134ec:	2100      	movs	r1, #0
 80134ee:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 80134f0:	4a07      	ldr	r2, [pc, #28]	; (8013510 <AckTimeoutRetriesFinalize+0x60>)
 80134f2:	2388      	movs	r3, #136	; 0x88
 80134f4:	00db      	lsls	r3, r3, #3
 80134f6:	2100      	movs	r1, #0
 80134f8:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80134fa:	4b05      	ldr	r3, [pc, #20]	; (8013510 <AckTimeoutRetriesFinalize+0x60>)
 80134fc:	4a08      	ldr	r2, [pc, #32]	; (8013520 <AckTimeoutRetriesFinalize+0x70>)
 80134fe:	5c99      	ldrb	r1, [r3, r2]
 8013500:	4b03      	ldr	r3, [pc, #12]	; (8013510 <AckTimeoutRetriesFinalize+0x60>)
 8013502:	4a08      	ldr	r2, [pc, #32]	; (8013524 <AckTimeoutRetriesFinalize+0x74>)
 8013504:	5499      	strb	r1, [r3, r2]
}
 8013506:	46c0      	nop			; (mov r8, r8)
 8013508:	46bd      	mov	sp, r7
 801350a:	b002      	add	sp, #8
 801350c:	bd80      	pop	{r7, pc}
 801350e:	46c0      	nop			; (mov r8, r8)
 8013510:	200007d0 	.word	0x200007d0
 8013514:	20000dc8 	.word	0x20000dc8
 8013518:	00000484 	.word	0x00000484
 801351c:	00000414 	.word	0x00000414
 8013520:	00000412 	.word	0x00000412
 8013524:	00000441 	.word	0x00000441

08013528 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	0002      	movs	r2, r0
 8013530:	1dfb      	adds	r3, r7, #7
 8013532:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8013534:	4a0c      	ldr	r2, [pc, #48]	; (8013568 <CallNvmCtxCallback+0x40>)
 8013536:	23d2      	movs	r3, #210	; 0xd2
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	58d3      	ldr	r3, [r2, r3]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d00f      	beq.n	8013560 <CallNvmCtxCallback+0x38>
 8013540:	4a09      	ldr	r2, [pc, #36]	; (8013568 <CallNvmCtxCallback+0x40>)
 8013542:	23d2      	movs	r3, #210	; 0xd2
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	58d3      	ldr	r3, [r2, r3]
 8013548:	689b      	ldr	r3, [r3, #8]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d008      	beq.n	8013560 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 801354e:	4a06      	ldr	r2, [pc, #24]	; (8013568 <CallNvmCtxCallback+0x40>)
 8013550:	23d2      	movs	r3, #210	; 0xd2
 8013552:	009b      	lsls	r3, r3, #2
 8013554:	58d3      	ldr	r3, [r2, r3]
 8013556:	689b      	ldr	r3, [r3, #8]
 8013558:	1dfa      	adds	r2, r7, #7
 801355a:	7812      	ldrb	r2, [r2, #0]
 801355c:	0010      	movs	r0, r2
 801355e:	4798      	blx	r3
    }
}
 8013560:	46c0      	nop			; (mov r8, r8)
 8013562:	46bd      	mov	sp, r7
 8013564:	b002      	add	sp, #8
 8013566:	bd80      	pop	{r7, pc}
 8013568:	200007d0 	.word	0x200007d0

0801356c <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 801356c:	b580      	push	{r7, lr}
 801356e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8013570:	2000      	movs	r0, #0
 8013572:	f7ff ffd9 	bl	8013528 <CallNvmCtxCallback>
}
 8013576:	46c0      	nop			; (mov r8, r8)
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 801357c:	b580      	push	{r7, lr}
 801357e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8013580:	2001      	movs	r0, #1
 8013582:	f7ff ffd1 	bl	8013528 <CallNvmCtxCallback>
}
 8013586:	46c0      	nop			; (mov r8, r8)
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 801358c:	b580      	push	{r7, lr}
 801358e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8013590:	2002      	movs	r0, #2
 8013592:	f7ff ffc9 	bl	8013528 <CallNvmCtxCallback>
}
 8013596:	46c0      	nop			; (mov r8, r8)
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 801359c:	b580      	push	{r7, lr}
 801359e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 80135a0:	2003      	movs	r0, #3
 80135a2:	f7ff ffc1 	bl	8013528 <CallNvmCtxCallback>
}
 80135a6:	46c0      	nop			; (mov r8, r8)
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 80135b0:	2004      	movs	r0, #4
 80135b2:	f7ff ffb9 	bl	8013528 <CallNvmCtxCallback>
}
 80135b6:	46c0      	nop			; (mov r8, r8)
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 80135c0:	2005      	movs	r0, #5
 80135c2:	f7ff ffb1 	bl	8013528 <CallNvmCtxCallback>
}
 80135c6:	46c0      	nop			; (mov r8, r8)
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 80135d0:	2006      	movs	r0, #6
 80135d2:	f7ff ffa9 	bl	8013528 <CallNvmCtxCallback>
}
 80135d6:	46c0      	nop			; (mov r8, r8)
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}

080135dc <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80135e0:	4b0a      	ldr	r3, [pc, #40]	; (801360c <IsRequestPending+0x30>)
 80135e2:	4a0b      	ldr	r2, [pc, #44]	; (8013610 <IsRequestPending+0x34>)
 80135e4:	5c9b      	ldrb	r3, [r3, r2]
 80135e6:	2204      	movs	r2, #4
 80135e8:	4013      	ands	r3, r2
 80135ea:	b2db      	uxtb	r3, r3
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d107      	bne.n	8013600 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80135f0:	4b06      	ldr	r3, [pc, #24]	; (801360c <IsRequestPending+0x30>)
 80135f2:	4a07      	ldr	r2, [pc, #28]	; (8013610 <IsRequestPending+0x34>)
 80135f4:	5c9b      	ldrb	r3, [r3, r2]
 80135f6:	2201      	movs	r2, #1
 80135f8:	4013      	ands	r3, r2
 80135fa:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d001      	beq.n	8013604 <IsRequestPending+0x28>
    {
        return 1;
 8013600:	2301      	movs	r3, #1
 8013602:	e000      	b.n	8013606 <IsRequestPending+0x2a>
    }
    return 0;
 8013604:	2300      	movs	r3, #0
}
 8013606:	0018      	movs	r0, r3
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	200007d0 	.word	0x200007d0
 8013610:	00000481 	.word	0x00000481

08013614 <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 8013614:	b580      	push	{r7, lr}
 8013616:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8013618:	4a08      	ldr	r2, [pc, #32]	; (801363c <LoRaMacIsBusy+0x28>)
 801361a:	23d0      	movs	r3, #208	; 0xd0
 801361c:	009b      	lsls	r3, r3, #2
 801361e:	58d3      	ldr	r3, [r2, r3]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d106      	bne.n	8013632 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8013624:	4b05      	ldr	r3, [pc, #20]	; (801363c <LoRaMacIsBusy+0x28>)
 8013626:	4a06      	ldr	r2, [pc, #24]	; (8013640 <LoRaMacIsBusy+0x2c>)
 8013628:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801362a:	2b01      	cmp	r3, #1
 801362c:	d101      	bne.n	8013632 <LoRaMacIsBusy+0x1e>
    {
        return false;
 801362e:	2300      	movs	r3, #0
 8013630:	e000      	b.n	8013634 <LoRaMacIsBusy+0x20>
    }
    return true;
 8013632:	2301      	movs	r3, #1
}
 8013634:	0018      	movs	r0, r3
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}
 801363a:	46c0      	nop			; (mov r8, r8)
 801363c:	200007d0 	.word	0x200007d0
 8013640:	00000482 	.word	0x00000482

08013644 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 801364a:	1dfb      	adds	r3, r7, #7
 801364c:	2200      	movs	r2, #0
 801364e:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8013650:	f7fd f970 	bl	8010934 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8013654:	f001 fe26 	bl	80152a4 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8013658:	4b1b      	ldr	r3, [pc, #108]	; (80136c8 <LoRaMacProcess+0x84>)
 801365a:	4a1c      	ldr	r2, [pc, #112]	; (80136cc <LoRaMacProcess+0x88>)
 801365c:	5c9b      	ldrb	r3, [r3, r2]
 801365e:	2220      	movs	r2, #32
 8013660:	4013      	ands	r3, r2
 8013662:	b2db      	uxtb	r3, r3
 8013664:	2b00      	cmp	r3, #0
 8013666:	d020      	beq.n	80136aa <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8013668:	2000      	movs	r0, #0
 801366a:	f7fd f9af 	bl	80109cc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 801366e:	f7fd fb8b 	bl	8010d88 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8013672:	f7ff ffb3 	bl	80135dc <IsRequestPending>
 8013676:	1e03      	subs	r3, r0, #0
 8013678:	d008      	beq.n	801368c <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801367a:	f7fd fb59 	bl	8010d30 <LoRaMacCheckForBeaconAcquisition>
 801367e:	0003      	movs	r3, r0
 8013680:	0019      	movs	r1, r3
 8013682:	1dfb      	adds	r3, r7, #7
 8013684:	1dfa      	adds	r2, r7, #7
 8013686:	7812      	ldrb	r2, [r2, #0]
 8013688:	430a      	orrs	r2, r1
 801368a:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 801368c:	1dfb      	adds	r3, r7, #7
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d103      	bne.n	801369c <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8013694:	f7fd fb0a 	bl	8010cac <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8013698:	f7fd fa86 	bl	8010ba8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 801369c:	f7fd f9aa 	bl	80109f4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 80136a0:	f7fd fa0e 	bl	8010ac0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80136a4:	2001      	movs	r0, #1
 80136a6:	f7fd f991 	bl	80109cc <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 80136aa:	f7fd fa25 	bl	8010af8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80136ae:	4a06      	ldr	r2, [pc, #24]	; (80136c8 <LoRaMacProcess+0x84>)
 80136b0:	2390      	movs	r3, #144	; 0x90
 80136b2:	00db      	lsls	r3, r3, #3
 80136b4:	5cd3      	ldrb	r3, [r2, r3]
 80136b6:	2b02      	cmp	r3, #2
 80136b8:	d101      	bne.n	80136be <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 80136ba:	f7ff f9d1 	bl	8012a60 <OpenContinuousRxCWindow>
    }
}
 80136be:	46c0      	nop			; (mov r8, r8)
 80136c0:	46bd      	mov	sp, r7
 80136c2:	b002      	add	sp, #8
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	46c0      	nop			; (mov r8, r8)
 80136c8:	200007d0 	.word	0x200007d0
 80136cc:	00000481 	.word	0x00000481

080136d0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80136d0:	b5b0      	push	{r4, r5, r7, lr}
 80136d2:	b098      	sub	sp, #96	; 0x60
 80136d4:	af02      	add	r7, sp, #8
 80136d6:	6178      	str	r0, [r7, #20]
 80136d8:	6139      	str	r1, [r7, #16]
 80136da:	230f      	movs	r3, #15
 80136dc:	18fb      	adds	r3, r7, r3
 80136de:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d002      	beq.n	80136ec <LoRaMacInitialization+0x1c>
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d101      	bne.n	80136f0 <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80136ec:	2303      	movs	r3, #3
 80136ee:	e35e      	b.n	8013dae <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d00b      	beq.n	8013710 <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d007      	beq.n	8013710 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013704:	2b00      	cmp	r3, #0
 8013706:	d003      	beq.n	8013710 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 8013708:	697b      	ldr	r3, [r7, #20]
 801370a:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801370c:	2b00      	cmp	r3, #0
 801370e:	d101      	bne.n	8013714 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013710:	2303      	movs	r3, #3
 8013712:	e34c      	b.n	8013dae <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013714:	230f      	movs	r3, #15
 8013716:	18fb      	adds	r3, r7, r3
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	0018      	movs	r0, r3
 801371c:	f003 fec8 	bl	80174b0 <RegionIsActive>
 8013720:	0003      	movs	r3, r0
 8013722:	001a      	movs	r2, r3
 8013724:	2301      	movs	r3, #1
 8013726:	4053      	eors	r3, r2
 8013728:	b2db      	uxtb	r3, r3
 801372a:	2b00      	cmp	r3, #0
 801372c:	d001      	beq.n	8013732 <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801372e:	2309      	movs	r3, #9
 8013730:	e33d      	b.n	8013dae <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8013732:	4afd      	ldr	r2, [pc, #1012]	; (8013b28 <LoRaMacInitialization+0x458>)
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	0011      	movs	r1, r2
 8013738:	0018      	movs	r0, r3
 801373a:	f002 f967 	bl	8015a0c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 801373e:	23b6      	movs	r3, #182	; 0xb6
 8013740:	005a      	lsls	r2, r3, #1
 8013742:	4bfa      	ldr	r3, [pc, #1000]	; (8013b2c <LoRaMacInitialization+0x45c>)
 8013744:	2100      	movs	r1, #0
 8013746:	0018      	movs	r0, r3
 8013748:	f006 fb90 	bl	8019e6c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801374c:	4af8      	ldr	r2, [pc, #992]	; (8013b30 <LoRaMacInitialization+0x460>)
 801374e:	4bf9      	ldr	r3, [pc, #996]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013750:	2100      	movs	r1, #0
 8013752:	0018      	movs	r0, r3
 8013754:	f006 fb8a 	bl	8019e6c <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 8013758:	4bf6      	ldr	r3, [pc, #984]	; (8013b34 <LoRaMacInitialization+0x464>)
 801375a:	49f7      	ldr	r1, [pc, #988]	; (8013b38 <LoRaMacInitialization+0x468>)
 801375c:	4af3      	ldr	r2, [pc, #972]	; (8013b2c <LoRaMacInitialization+0x45c>)
 801375e:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013760:	4bf4      	ldr	r3, [pc, #976]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013762:	4af6      	ldr	r2, [pc, #984]	; (8013b3c <LoRaMacInitialization+0x46c>)
 8013764:	2101      	movs	r1, #1
 8013766:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 8013768:	4bf2      	ldr	r3, [pc, #968]	; (8013b34 <LoRaMacInitialization+0x464>)
 801376a:	4af5      	ldr	r2, [pc, #980]	; (8013b40 <LoRaMacInitialization+0x470>)
 801376c:	2101      	movs	r1, #1
 801376e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8013770:	4bf0      	ldr	r3, [pc, #960]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013772:	4af1      	ldr	r2, [pc, #964]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013774:	589b      	ldr	r3, [r3, r2]
 8013776:	220f      	movs	r2, #15
 8013778:	18ba      	adds	r2, r7, r2
 801377a:	7812      	ldrb	r2, [r2, #0]
 801377c:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 801377e:	4bed      	ldr	r3, [pc, #948]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013780:	4aed      	ldr	r2, [pc, #948]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013782:	589b      	ldr	r3, [r3, r2]
 8013784:	227c      	movs	r2, #124	; 0x7c
 8013786:	2100      	movs	r1, #0
 8013788:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 801378a:	4bea      	ldr	r3, [pc, #936]	; (8013b34 <LoRaMacInitialization+0x464>)
 801378c:	4aea      	ldr	r2, [pc, #936]	; (8013b38 <LoRaMacInitialization+0x468>)
 801378e:	589b      	ldr	r3, [r3, r2]
 8013790:	22ca      	movs	r2, #202	; 0xca
 8013792:	2100      	movs	r1, #0
 8013794:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8013796:	4be7      	ldr	r3, [pc, #924]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013798:	4ae7      	ldr	r2, [pc, #924]	; (8013b38 <LoRaMacInitialization+0x468>)
 801379a:	589a      	ldr	r2, [r3, r2]
 801379c:	23b0      	movs	r3, #176	; 0xb0
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	49e8      	ldr	r1, [pc, #928]	; (8013b44 <LoRaMacInitialization+0x474>)
 80137a2:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80137a4:	2550      	movs	r5, #80	; 0x50
 80137a6:	197b      	adds	r3, r7, r5
 80137a8:	220f      	movs	r2, #15
 80137aa:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80137ac:	4be1      	ldr	r3, [pc, #900]	; (8013b34 <LoRaMacInitialization+0x464>)
 80137ae:	4ae2      	ldr	r2, [pc, #904]	; (8013b38 <LoRaMacInitialization+0x468>)
 80137b0:	589b      	ldr	r3, [r3, r2]
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	197a      	adds	r2, r7, r5
 80137b6:	0011      	movs	r1, r2
 80137b8:	0018      	movs	r0, r3
 80137ba:	f003 fe8a 	bl	80174d2 <RegionGetPhyParam>
 80137be:	0003      	movs	r3, r0
 80137c0:	001a      	movs	r2, r3
 80137c2:	244c      	movs	r4, #76	; 0x4c
 80137c4:	193b      	adds	r3, r7, r4
 80137c6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 80137c8:	193b      	adds	r3, r7, r4
 80137ca:	681a      	ldr	r2, [r3, #0]
 80137cc:	4bd9      	ldr	r3, [pc, #868]	; (8013b34 <LoRaMacInitialization+0x464>)
 80137ce:	49da      	ldr	r1, [pc, #872]	; (8013b38 <LoRaMacInitialization+0x468>)
 80137d0:	585b      	ldr	r3, [r3, r1]
 80137d2:	1e51      	subs	r1, r2, #1
 80137d4:	418a      	sbcs	r2, r1
 80137d6:	b2d1      	uxtb	r1, r2
 80137d8:	22c9      	movs	r2, #201	; 0xc9
 80137da:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80137dc:	197b      	adds	r3, r7, r5
 80137de:	220a      	movs	r2, #10
 80137e0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80137e2:	4bd4      	ldr	r3, [pc, #848]	; (8013b34 <LoRaMacInitialization+0x464>)
 80137e4:	4ad4      	ldr	r2, [pc, #848]	; (8013b38 <LoRaMacInitialization+0x468>)
 80137e6:	589b      	ldr	r3, [r3, r2]
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	197a      	adds	r2, r7, r5
 80137ec:	0011      	movs	r1, r2
 80137ee:	0018      	movs	r0, r3
 80137f0:	f003 fe6f 	bl	80174d2 <RegionGetPhyParam>
 80137f4:	0003      	movs	r3, r0
 80137f6:	001a      	movs	r2, r3
 80137f8:	193b      	adds	r3, r7, r4
 80137fa:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 80137fc:	193b      	adds	r3, r7, r4
 80137fe:	6819      	ldr	r1, [r3, #0]
 8013800:	4bcc      	ldr	r3, [pc, #816]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013802:	4acd      	ldr	r2, [pc, #820]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013804:	589b      	ldr	r3, [r3, r2]
 8013806:	b24a      	sxtb	r2, r1
 8013808:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 801380a:	197b      	adds	r3, r7, r5
 801380c:	2206      	movs	r2, #6
 801380e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013810:	4bc8      	ldr	r3, [pc, #800]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013812:	4ac9      	ldr	r2, [pc, #804]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013814:	589b      	ldr	r3, [r3, r2]
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	197a      	adds	r2, r7, r5
 801381a:	0011      	movs	r1, r2
 801381c:	0018      	movs	r0, r3
 801381e:	f003 fe58 	bl	80174d2 <RegionGetPhyParam>
 8013822:	0003      	movs	r3, r0
 8013824:	001a      	movs	r2, r3
 8013826:	193b      	adds	r3, r7, r4
 8013828:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 801382a:	193b      	adds	r3, r7, r4
 801382c:	6819      	ldr	r1, [r3, #0]
 801382e:	4bc1      	ldr	r3, [pc, #772]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013830:	4ac1      	ldr	r2, [pc, #772]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013832:	589b      	ldr	r3, [r3, r2]
 8013834:	b24a      	sxtb	r2, r1
 8013836:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013838:	197b      	adds	r3, r7, r5
 801383a:	2210      	movs	r2, #16
 801383c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801383e:	4bbd      	ldr	r3, [pc, #756]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013840:	4abd      	ldr	r2, [pc, #756]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013842:	589b      	ldr	r3, [r3, r2]
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	197a      	adds	r2, r7, r5
 8013848:	0011      	movs	r1, r2
 801384a:	0018      	movs	r0, r3
 801384c:	f003 fe41 	bl	80174d2 <RegionGetPhyParam>
 8013850:	0003      	movs	r3, r0
 8013852:	001a      	movs	r2, r3
 8013854:	193b      	adds	r3, r7, r4
 8013856:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8013858:	4bb6      	ldr	r3, [pc, #728]	; (8013b34 <LoRaMacInitialization+0x464>)
 801385a:	4ab7      	ldr	r2, [pc, #732]	; (8013b38 <LoRaMacInitialization+0x468>)
 801385c:	589b      	ldr	r3, [r3, r2]
 801385e:	193a      	adds	r2, r7, r4
 8013860:	6812      	ldr	r2, [r2, #0]
 8013862:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013864:	197b      	adds	r3, r7, r5
 8013866:	2211      	movs	r2, #17
 8013868:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801386a:	4bb2      	ldr	r3, [pc, #712]	; (8013b34 <LoRaMacInitialization+0x464>)
 801386c:	4ab2      	ldr	r2, [pc, #712]	; (8013b38 <LoRaMacInitialization+0x468>)
 801386e:	589b      	ldr	r3, [r3, r2]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	197a      	adds	r2, r7, r5
 8013874:	0011      	movs	r1, r2
 8013876:	0018      	movs	r0, r3
 8013878:	f003 fe2b 	bl	80174d2 <RegionGetPhyParam>
 801387c:	0003      	movs	r3, r0
 801387e:	001a      	movs	r2, r3
 8013880:	193b      	adds	r3, r7, r4
 8013882:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8013884:	4bab      	ldr	r3, [pc, #684]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013886:	4aac      	ldr	r2, [pc, #688]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013888:	589b      	ldr	r3, [r3, r2]
 801388a:	193a      	adds	r2, r7, r4
 801388c:	6812      	ldr	r2, [r2, #0]
 801388e:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8013890:	197b      	adds	r3, r7, r5
 8013892:	2212      	movs	r2, #18
 8013894:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013896:	4ba7      	ldr	r3, [pc, #668]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013898:	4aa7      	ldr	r2, [pc, #668]	; (8013b38 <LoRaMacInitialization+0x468>)
 801389a:	589b      	ldr	r3, [r3, r2]
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	197a      	adds	r2, r7, r5
 80138a0:	0011      	movs	r1, r2
 80138a2:	0018      	movs	r0, r3
 80138a4:	f003 fe15 	bl	80174d2 <RegionGetPhyParam>
 80138a8:	0003      	movs	r3, r0
 80138aa:	001a      	movs	r2, r3
 80138ac:	193b      	adds	r3, r7, r4
 80138ae:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80138b0:	4ba0      	ldr	r3, [pc, #640]	; (8013b34 <LoRaMacInitialization+0x464>)
 80138b2:	4aa1      	ldr	r2, [pc, #644]	; (8013b38 <LoRaMacInitialization+0x468>)
 80138b4:	589b      	ldr	r3, [r3, r2]
 80138b6:	193a      	adds	r2, r7, r4
 80138b8:	6812      	ldr	r2, [r2, #0]
 80138ba:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80138bc:	197b      	adds	r3, r7, r5
 80138be:	2213      	movs	r2, #19
 80138c0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80138c2:	4b9c      	ldr	r3, [pc, #624]	; (8013b34 <LoRaMacInitialization+0x464>)
 80138c4:	4a9c      	ldr	r2, [pc, #624]	; (8013b38 <LoRaMacInitialization+0x468>)
 80138c6:	589b      	ldr	r3, [r3, r2]
 80138c8:	781b      	ldrb	r3, [r3, #0]
 80138ca:	197a      	adds	r2, r7, r5
 80138cc:	0011      	movs	r1, r2
 80138ce:	0018      	movs	r0, r3
 80138d0:	f003 fdff 	bl	80174d2 <RegionGetPhyParam>
 80138d4:	0003      	movs	r3, r0
 80138d6:	001a      	movs	r2, r3
 80138d8:	193b      	adds	r3, r7, r4
 80138da:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80138dc:	4b95      	ldr	r3, [pc, #596]	; (8013b34 <LoRaMacInitialization+0x464>)
 80138de:	4a96      	ldr	r2, [pc, #600]	; (8013b38 <LoRaMacInitialization+0x468>)
 80138e0:	589b      	ldr	r3, [r3, r2]
 80138e2:	193a      	adds	r2, r7, r4
 80138e4:	6812      	ldr	r2, [r2, #0]
 80138e6:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80138e8:	197b      	adds	r3, r7, r5
 80138ea:	2214      	movs	r2, #20
 80138ec:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80138ee:	4b91      	ldr	r3, [pc, #580]	; (8013b34 <LoRaMacInitialization+0x464>)
 80138f0:	4a91      	ldr	r2, [pc, #580]	; (8013b38 <LoRaMacInitialization+0x468>)
 80138f2:	589b      	ldr	r3, [r3, r2]
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	197a      	adds	r2, r7, r5
 80138f8:	0011      	movs	r1, r2
 80138fa:	0018      	movs	r0, r3
 80138fc:	f003 fde9 	bl	80174d2 <RegionGetPhyParam>
 8013900:	0003      	movs	r3, r0
 8013902:	001a      	movs	r2, r3
 8013904:	193b      	adds	r3, r7, r4
 8013906:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8013908:	4b8a      	ldr	r3, [pc, #552]	; (8013b34 <LoRaMacInitialization+0x464>)
 801390a:	4a8b      	ldr	r2, [pc, #556]	; (8013b38 <LoRaMacInitialization+0x468>)
 801390c:	589b      	ldr	r3, [r3, r2]
 801390e:	193a      	adds	r2, r7, r4
 8013910:	6812      	ldr	r2, [r2, #0]
 8013912:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013914:	197b      	adds	r3, r7, r5
 8013916:	2217      	movs	r2, #23
 8013918:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801391a:	4b86      	ldr	r3, [pc, #536]	; (8013b34 <LoRaMacInitialization+0x464>)
 801391c:	4a86      	ldr	r2, [pc, #536]	; (8013b38 <LoRaMacInitialization+0x468>)
 801391e:	589b      	ldr	r3, [r3, r2]
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	197a      	adds	r2, r7, r5
 8013924:	0011      	movs	r1, r2
 8013926:	0018      	movs	r0, r3
 8013928:	f003 fdd3 	bl	80174d2 <RegionGetPhyParam>
 801392c:	0003      	movs	r3, r0
 801392e:	001a      	movs	r2, r3
 8013930:	193b      	adds	r3, r7, r4
 8013932:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013934:	193b      	adds	r3, r7, r4
 8013936:	6819      	ldr	r1, [r3, #0]
 8013938:	4b7e      	ldr	r3, [pc, #504]	; (8013b34 <LoRaMacInitialization+0x464>)
 801393a:	4a7f      	ldr	r2, [pc, #508]	; (8013b38 <LoRaMacInitialization+0x468>)
 801393c:	589b      	ldr	r3, [r3, r2]
 801393e:	b2c9      	uxtb	r1, r1
 8013940:	2225      	movs	r2, #37	; 0x25
 8013942:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013944:	197b      	adds	r3, r7, r5
 8013946:	2218      	movs	r2, #24
 8013948:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801394a:	4b7a      	ldr	r3, [pc, #488]	; (8013b34 <LoRaMacInitialization+0x464>)
 801394c:	4a7a      	ldr	r2, [pc, #488]	; (8013b38 <LoRaMacInitialization+0x468>)
 801394e:	589b      	ldr	r3, [r3, r2]
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	197a      	adds	r2, r7, r5
 8013954:	0011      	movs	r1, r2
 8013956:	0018      	movs	r0, r3
 8013958:	f003 fdbb 	bl	80174d2 <RegionGetPhyParam>
 801395c:	0003      	movs	r3, r0
 801395e:	001a      	movs	r2, r3
 8013960:	193b      	adds	r3, r7, r4
 8013962:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013964:	4b73      	ldr	r3, [pc, #460]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013966:	4a74      	ldr	r2, [pc, #464]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013968:	589b      	ldr	r3, [r3, r2]
 801396a:	193a      	adds	r2, r7, r4
 801396c:	6812      	ldr	r2, [r2, #0]
 801396e:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013970:	4b70      	ldr	r3, [pc, #448]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013972:	4a71      	ldr	r2, [pc, #452]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013974:	589b      	ldr	r3, [r3, r2]
 8013976:	193a      	adds	r2, r7, r4
 8013978:	6812      	ldr	r2, [r2, #0]
 801397a:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801397c:	197b      	adds	r3, r7, r5
 801397e:	2219      	movs	r2, #25
 8013980:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013982:	4b6c      	ldr	r3, [pc, #432]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013984:	4a6c      	ldr	r2, [pc, #432]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013986:	589b      	ldr	r3, [r3, r2]
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	197a      	adds	r2, r7, r5
 801398c:	0011      	movs	r1, r2
 801398e:	0018      	movs	r0, r3
 8013990:	f003 fd9f 	bl	80174d2 <RegionGetPhyParam>
 8013994:	0003      	movs	r3, r0
 8013996:	001a      	movs	r2, r3
 8013998:	193b      	adds	r3, r7, r4
 801399a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801399c:	193b      	adds	r3, r7, r4
 801399e:	6819      	ldr	r1, [r3, #0]
 80139a0:	4b64      	ldr	r3, [pc, #400]	; (8013b34 <LoRaMacInitialization+0x464>)
 80139a2:	4a65      	ldr	r2, [pc, #404]	; (8013b38 <LoRaMacInitialization+0x468>)
 80139a4:	589b      	ldr	r3, [r3, r2]
 80139a6:	b2c9      	uxtb	r1, r1
 80139a8:	222c      	movs	r2, #44	; 0x2c
 80139aa:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80139ac:	193b      	adds	r3, r7, r4
 80139ae:	6819      	ldr	r1, [r3, #0]
 80139b0:	4b60      	ldr	r3, [pc, #384]	; (8013b34 <LoRaMacInitialization+0x464>)
 80139b2:	4a61      	ldr	r2, [pc, #388]	; (8013b38 <LoRaMacInitialization+0x468>)
 80139b4:	589b      	ldr	r3, [r3, r2]
 80139b6:	b2c9      	uxtb	r1, r1
 80139b8:	2234      	movs	r2, #52	; 0x34
 80139ba:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80139bc:	197b      	adds	r3, r7, r5
 80139be:	221e      	movs	r2, #30
 80139c0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80139c2:	4b5c      	ldr	r3, [pc, #368]	; (8013b34 <LoRaMacInitialization+0x464>)
 80139c4:	4a5c      	ldr	r2, [pc, #368]	; (8013b38 <LoRaMacInitialization+0x468>)
 80139c6:	589b      	ldr	r3, [r3, r2]
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	197a      	adds	r2, r7, r5
 80139cc:	0011      	movs	r1, r2
 80139ce:	0018      	movs	r0, r3
 80139d0:	f003 fd7f 	bl	80174d2 <RegionGetPhyParam>
 80139d4:	0003      	movs	r3, r0
 80139d6:	001a      	movs	r2, r3
 80139d8:	193b      	adds	r3, r7, r4
 80139da:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80139dc:	193b      	adds	r3, r7, r4
 80139de:	6819      	ldr	r1, [r3, #0]
 80139e0:	4b54      	ldr	r3, [pc, #336]	; (8013b34 <LoRaMacInitialization+0x464>)
 80139e2:	4a55      	ldr	r2, [pc, #340]	; (8013b38 <LoRaMacInitialization+0x468>)
 80139e4:	589b      	ldr	r3, [r3, r2]
 80139e6:	b2c9      	uxtb	r1, r1
 80139e8:	2238      	movs	r2, #56	; 0x38
 80139ea:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80139ec:	197b      	adds	r3, r7, r5
 80139ee:	221f      	movs	r2, #31
 80139f0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80139f2:	4b50      	ldr	r3, [pc, #320]	; (8013b34 <LoRaMacInitialization+0x464>)
 80139f4:	4a50      	ldr	r2, [pc, #320]	; (8013b38 <LoRaMacInitialization+0x468>)
 80139f6:	589b      	ldr	r3, [r3, r2]
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	197a      	adds	r2, r7, r5
 80139fc:	0011      	movs	r1, r2
 80139fe:	0018      	movs	r0, r3
 8013a00:	f003 fd67 	bl	80174d2 <RegionGetPhyParam>
 8013a04:	0003      	movs	r3, r0
 8013a06:	001a      	movs	r2, r3
 8013a08:	193b      	adds	r3, r7, r4
 8013a0a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8013a0c:	193b      	adds	r3, r7, r4
 8013a0e:	6819      	ldr	r1, [r3, #0]
 8013a10:	4b48      	ldr	r3, [pc, #288]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013a12:	4a49      	ldr	r2, [pc, #292]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013a14:	589b      	ldr	r3, [r3, r2]
 8013a16:	b2c9      	uxtb	r1, r1
 8013a18:	2239      	movs	r2, #57	; 0x39
 8013a1a:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013a1c:	197b      	adds	r3, r7, r5
 8013a1e:	2220      	movs	r2, #32
 8013a20:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013a22:	4b44      	ldr	r3, [pc, #272]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013a24:	4a44      	ldr	r2, [pc, #272]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013a26:	589b      	ldr	r3, [r3, r2]
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	197a      	adds	r2, r7, r5
 8013a2c:	0011      	movs	r1, r2
 8013a2e:	0018      	movs	r0, r3
 8013a30:	f003 fd4f 	bl	80174d2 <RegionGetPhyParam>
 8013a34:	0003      	movs	r3, r0
 8013a36:	001a      	movs	r2, r3
 8013a38:	193b      	adds	r3, r7, r4
 8013a3a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013a3c:	4b3d      	ldr	r3, [pc, #244]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013a3e:	4a3e      	ldr	r2, [pc, #248]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013a40:	589b      	ldr	r3, [r3, r2]
 8013a42:	193a      	adds	r2, r7, r4
 8013a44:	6812      	ldr	r2, [r2, #0]
 8013a46:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013a48:	197b      	adds	r3, r7, r5
 8013a4a:	2221      	movs	r2, #33	; 0x21
 8013a4c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013a4e:	4b39      	ldr	r3, [pc, #228]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013a50:	4a39      	ldr	r2, [pc, #228]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013a52:	589b      	ldr	r3, [r3, r2]
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	197a      	adds	r2, r7, r5
 8013a58:	0011      	movs	r1, r2
 8013a5a:	0018      	movs	r0, r3
 8013a5c:	f003 fd39 	bl	80174d2 <RegionGetPhyParam>
 8013a60:	0003      	movs	r3, r0
 8013a62:	001a      	movs	r2, r3
 8013a64:	193b      	adds	r3, r7, r4
 8013a66:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013a68:	4b32      	ldr	r3, [pc, #200]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013a6a:	4a33      	ldr	r2, [pc, #204]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013a6c:	589b      	ldr	r3, [r3, r2]
 8013a6e:	193a      	adds	r2, r7, r4
 8013a70:	6812      	ldr	r2, [r2, #0]
 8013a72:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8013a74:	197b      	adds	r3, r7, r5
 8013a76:	220b      	movs	r2, #11
 8013a78:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013a7a:	4b2e      	ldr	r3, [pc, #184]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013a7c:	4a2e      	ldr	r2, [pc, #184]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013a7e:	589b      	ldr	r3, [r3, r2]
 8013a80:	781b      	ldrb	r3, [r3, #0]
 8013a82:	197a      	adds	r2, r7, r5
 8013a84:	0011      	movs	r1, r2
 8013a86:	0018      	movs	r0, r3
 8013a88:	f003 fd23 	bl	80174d2 <RegionGetPhyParam>
 8013a8c:	0003      	movs	r3, r0
 8013a8e:	001a      	movs	r2, r3
 8013a90:	193b      	adds	r3, r7, r4
 8013a92:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 8013a94:	193b      	adds	r3, r7, r4
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	b299      	uxth	r1, r3
 8013a9a:	4a26      	ldr	r2, [pc, #152]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013a9c:	23fd      	movs	r3, #253	; 0xfd
 8013a9e:	009b      	lsls	r3, r3, #2
 8013aa0:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013aa2:	197b      	adds	r3, r7, r5
 8013aa4:	220c      	movs	r2, #12
 8013aa6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013aa8:	4b22      	ldr	r3, [pc, #136]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013aaa:	4a23      	ldr	r2, [pc, #140]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013aac:	589b      	ldr	r3, [r3, r2]
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	197a      	adds	r2, r7, r5
 8013ab2:	0011      	movs	r1, r2
 8013ab4:	0018      	movs	r0, r3
 8013ab6:	f003 fd0c 	bl	80174d2 <RegionGetPhyParam>
 8013aba:	0003      	movs	r3, r0
 8013abc:	001a      	movs	r2, r3
 8013abe:	193b      	adds	r3, r7, r4
 8013ac0:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 8013ac2:	193b      	adds	r3, r7, r4
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	b299      	uxth	r1, r3
 8013ac8:	4b1a      	ldr	r3, [pc, #104]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013aca:	4a1f      	ldr	r2, [pc, #124]	; (8013b48 <LoRaMacInitialization+0x478>)
 8013acc:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8013ace:	4b19      	ldr	r3, [pc, #100]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013ad0:	4a19      	ldr	r2, [pc, #100]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013ad2:	589b      	ldr	r3, [r3, r2]
 8013ad4:	2224      	movs	r2, #36	; 0x24
 8013ad6:	2101      	movs	r1, #1
 8013ad8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8013ada:	4b16      	ldr	r3, [pc, #88]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013adc:	4a16      	ldr	r2, [pc, #88]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013ade:	589b      	ldr	r3, [r3, r2]
 8013ae0:	220a      	movs	r2, #10
 8013ae2:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8013ae4:	4b13      	ldr	r3, [pc, #76]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013ae6:	4a14      	ldr	r2, [pc, #80]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013ae8:	589b      	ldr	r3, [r3, r2]
 8013aea:	2206      	movs	r2, #6
 8013aec:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8013aee:	4b11      	ldr	r3, [pc, #68]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013af0:	4a11      	ldr	r2, [pc, #68]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013af2:	589b      	ldr	r3, [r3, r2]
 8013af4:	4a0f      	ldr	r2, [pc, #60]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013af6:	4910      	ldr	r1, [pc, #64]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013af8:	5852      	ldr	r2, [r2, r1]
 8013afa:	689b      	ldr	r3, [r3, #8]
 8013afc:	2188      	movs	r1, #136	; 0x88
 8013afe:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8013b00:	4b0c      	ldr	r3, [pc, #48]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013b02:	4a0d      	ldr	r2, [pc, #52]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013b04:	589a      	ldr	r2, [r3, r2]
 8013b06:	4b0b      	ldr	r3, [pc, #44]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013b08:	490b      	ldr	r1, [pc, #44]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013b0a:	585b      	ldr	r3, [r3, r1]
 8013b0c:	7b11      	ldrb	r1, [r2, #12]
 8013b0e:	228c      	movs	r2, #140	; 0x8c
 8013b10:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8013b12:	4b08      	ldr	r3, [pc, #32]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013b14:	4a08      	ldr	r2, [pc, #32]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013b16:	589b      	ldr	r3, [r3, r2]
 8013b18:	4a06      	ldr	r2, [pc, #24]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013b1a:	4907      	ldr	r1, [pc, #28]	; (8013b38 <LoRaMacInitialization+0x468>)
 8013b1c:	5852      	ldr	r2, [r2, r1]
 8013b1e:	691b      	ldr	r3, [r3, #16]
 8013b20:	2190      	movs	r1, #144	; 0x90
 8013b22:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8013b24:	4b03      	ldr	r3, [pc, #12]	; (8013b34 <LoRaMacInitialization+0x464>)
 8013b26:	e011      	b.n	8013b4c <LoRaMacInitialization+0x47c>
 8013b28:	080135cd 	.word	0x080135cd
 8013b2c:	20000c5c 	.word	0x20000c5c
 8013b30:	0000048c 	.word	0x0000048c
 8013b34:	200007d0 	.word	0x200007d0
 8013b38:	00000484 	.word	0x00000484
 8013b3c:	00000412 	.word	0x00000412
 8013b40:	00000411 	.word	0x00000411
 8013b44:	01000300 	.word	0x01000300
 8013b48:	000003f6 	.word	0x000003f6
 8013b4c:	4a9a      	ldr	r2, [pc, #616]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b4e:	589b      	ldr	r3, [r3, r2]
 8013b50:	4a9a      	ldr	r2, [pc, #616]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013b52:	4999      	ldr	r1, [pc, #612]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b54:	5852      	ldr	r2, [r2, r1]
 8013b56:	695b      	ldr	r3, [r3, #20]
 8013b58:	2194      	movs	r1, #148	; 0x94
 8013b5a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8013b5c:	4b97      	ldr	r3, [pc, #604]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013b5e:	4a96      	ldr	r2, [pc, #600]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b60:	589b      	ldr	r3, [r3, r2]
 8013b62:	4a96      	ldr	r2, [pc, #600]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013b64:	4994      	ldr	r1, [pc, #592]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b66:	5852      	ldr	r2, [r2, r1]
 8013b68:	699b      	ldr	r3, [r3, #24]
 8013b6a:	2198      	movs	r1, #152	; 0x98
 8013b6c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8013b6e:	4b93      	ldr	r3, [pc, #588]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013b70:	4a91      	ldr	r2, [pc, #580]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b72:	589b      	ldr	r3, [r3, r2]
 8013b74:	4a91      	ldr	r2, [pc, #580]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013b76:	4990      	ldr	r1, [pc, #576]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b78:	5852      	ldr	r2, [r2, r1]
 8013b7a:	69db      	ldr	r3, [r3, #28]
 8013b7c:	219c      	movs	r1, #156	; 0x9c
 8013b7e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8013b80:	4b8e      	ldr	r3, [pc, #568]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013b82:	4a8d      	ldr	r2, [pc, #564]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b84:	589b      	ldr	r3, [r3, r2]
 8013b86:	4a8d      	ldr	r2, [pc, #564]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013b88:	498b      	ldr	r1, [pc, #556]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b8a:	5852      	ldr	r2, [r2, r1]
 8013b8c:	6a1b      	ldr	r3, [r3, #32]
 8013b8e:	21a0      	movs	r1, #160	; 0xa0
 8013b90:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8013b92:	4b8a      	ldr	r3, [pc, #552]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013b94:	4a88      	ldr	r2, [pc, #544]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b96:	589a      	ldr	r2, [r3, r2]
 8013b98:	4b88      	ldr	r3, [pc, #544]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013b9a:	4987      	ldr	r1, [pc, #540]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013b9c:	585b      	ldr	r3, [r3, r1]
 8013b9e:	2124      	movs	r1, #36	; 0x24
 8013ba0:	5c51      	ldrb	r1, [r2, r1]
 8013ba2:	22a4      	movs	r2, #164	; 0xa4
 8013ba4:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013ba6:	211c      	movs	r1, #28
 8013ba8:	187b      	adds	r3, r7, r1
 8013baa:	2200      	movs	r2, #0
 8013bac:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8013bae:	187b      	adds	r3, r7, r1
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8013bb4:	4b81      	ldr	r3, [pc, #516]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013bb6:	4a80      	ldr	r2, [pc, #512]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013bb8:	589b      	ldr	r3, [r3, r2]
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	187a      	adds	r2, r7, r1
 8013bbe:	0011      	movs	r1, r2
 8013bc0:	0018      	movs	r0, r3
 8013bc2:	f003 fcc2 	bl	801754a <RegionInitDefaults>

    ResetMacParameters( );
 8013bc6:	f7fe fe19 	bl	80127fc <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8013bca:	4b7c      	ldr	r3, [pc, #496]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013bcc:	4a7a      	ldr	r2, [pc, #488]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013bce:	589b      	ldr	r3, [r3, r2]
 8013bd0:	227d      	movs	r2, #125	; 0x7d
 8013bd2:	2101      	movs	r1, #1
 8013bd4:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 8013bd6:	4a79      	ldr	r2, [pc, #484]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013bd8:	23d1      	movs	r3, #209	; 0xd1
 8013bda:	009b      	lsls	r3, r3, #2
 8013bdc:	6979      	ldr	r1, [r7, #20]
 8013bde:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 8013be0:	4a76      	ldr	r2, [pc, #472]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013be2:	23d2      	movs	r3, #210	; 0xd2
 8013be4:	009b      	lsls	r3, r3, #2
 8013be6:	6939      	ldr	r1, [r7, #16]
 8013be8:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 8013bea:	4b74      	ldr	r3, [pc, #464]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013bec:	4a74      	ldr	r2, [pc, #464]	; (8013dc0 <LoRaMacInitialization+0x6f0>)
 8013bee:	2100      	movs	r1, #0
 8013bf0:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 8013bf2:	4a72      	ldr	r2, [pc, #456]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013bf4:	23d0      	movs	r3, #208	; 0xd0
 8013bf6:	009b      	lsls	r3, r3, #2
 8013bf8:	2101      	movs	r1, #1
 8013bfa:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8013bfc:	4b6f      	ldr	r3, [pc, #444]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013bfe:	4a6e      	ldr	r2, [pc, #440]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013c00:	589a      	ldr	r2, [r3, r2]
 8013c02:	23a8      	movs	r3, #168	; 0xa8
 8013c04:	005b      	lsls	r3, r3, #1
 8013c06:	2100      	movs	r1, #0
 8013c08:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8013c0a:	4b6c      	ldr	r3, [pc, #432]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013c0c:	4a6a      	ldr	r2, [pc, #424]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013c0e:	589a      	ldr	r2, [r3, r2]
 8013c10:	23aa      	movs	r3, #170	; 0xaa
 8013c12:	005b      	lsls	r3, r3, #1
 8013c14:	2100      	movs	r1, #0
 8013c16:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013c18:	4b6a      	ldr	r3, [pc, #424]	; (8013dc4 <LoRaMacInitialization+0x6f4>)
 8013c1a:	2201      	movs	r2, #1
 8013c1c:	4251      	negs	r1, r2
 8013c1e:	486a      	ldr	r0, [pc, #424]	; (8013dc8 <LoRaMacInitialization+0x6f8>)
 8013c20:	2200      	movs	r2, #0
 8013c22:	9200      	str	r2, [sp, #0]
 8013c24:	2200      	movs	r2, #0
 8013c26:	f009 fe35 	bl	801d894 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013c2a:	4b68      	ldr	r3, [pc, #416]	; (8013dcc <LoRaMacInitialization+0x6fc>)
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	4251      	negs	r1, r2
 8013c30:	4867      	ldr	r0, [pc, #412]	; (8013dd0 <LoRaMacInitialization+0x700>)
 8013c32:	2200      	movs	r2, #0
 8013c34:	9200      	str	r2, [sp, #0]
 8013c36:	2200      	movs	r2, #0
 8013c38:	f009 fe2c 	bl	801d894 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013c3c:	4b65      	ldr	r3, [pc, #404]	; (8013dd4 <LoRaMacInitialization+0x704>)
 8013c3e:	2201      	movs	r2, #1
 8013c40:	4251      	negs	r1, r2
 8013c42:	4865      	ldr	r0, [pc, #404]	; (8013dd8 <LoRaMacInitialization+0x708>)
 8013c44:	2200      	movs	r2, #0
 8013c46:	9200      	str	r2, [sp, #0]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	f009 fe23 	bl	801d894 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013c4e:	4b63      	ldr	r3, [pc, #396]	; (8013ddc <LoRaMacInitialization+0x70c>)
 8013c50:	2201      	movs	r2, #1
 8013c52:	4251      	negs	r1, r2
 8013c54:	4862      	ldr	r0, [pc, #392]	; (8013de0 <LoRaMacInitialization+0x710>)
 8013c56:	2200      	movs	r2, #0
 8013c58:	9200      	str	r2, [sp, #0]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	f009 fe1a 	bl	801d894 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 8013c60:	4b56      	ldr	r3, [pc, #344]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013c62:	4a55      	ldr	r2, [pc, #340]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013c64:	589d      	ldr	r5, [r3, r2]
 8013c66:	23ac      	movs	r3, #172	; 0xac
 8013c68:	005c      	lsls	r4, r3, #1
 8013c6a:	003b      	movs	r3, r7
 8013c6c:	0018      	movs	r0, r3
 8013c6e:	f009 fc1b 	bl	801d4a8 <SysTimeGetMcuTime>
 8013c72:	003a      	movs	r2, r7
 8013c74:	192b      	adds	r3, r5, r4
 8013c76:	ca03      	ldmia	r2!, {r0, r1}
 8013c78:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8013c7a:	4a50      	ldr	r2, [pc, #320]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013c7c:	23d3      	movs	r3, #211	; 0xd3
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	4958      	ldr	r1, [pc, #352]	; (8013de4 <LoRaMacInitialization+0x714>)
 8013c82:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8013c84:	4a4d      	ldr	r2, [pc, #308]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013c86:	23d5      	movs	r3, #213	; 0xd5
 8013c88:	009b      	lsls	r3, r3, #2
 8013c8a:	4957      	ldr	r1, [pc, #348]	; (8013de8 <LoRaMacInitialization+0x718>)
 8013c8c:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8013c8e:	4a4b      	ldr	r2, [pc, #300]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013c90:	23d7      	movs	r3, #215	; 0xd7
 8013c92:	009b      	lsls	r3, r3, #2
 8013c94:	4955      	ldr	r1, [pc, #340]	; (8013dec <LoRaMacInitialization+0x71c>)
 8013c96:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013c98:	4a48      	ldr	r2, [pc, #288]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013c9a:	23d4      	movs	r3, #212	; 0xd4
 8013c9c:	009b      	lsls	r3, r3, #2
 8013c9e:	4954      	ldr	r1, [pc, #336]	; (8013df0 <LoRaMacInitialization+0x720>)
 8013ca0:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8013ca2:	4a46      	ldr	r2, [pc, #280]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013ca4:	23d6      	movs	r3, #214	; 0xd6
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	4952      	ldr	r1, [pc, #328]	; (8013df4 <LoRaMacInitialization+0x724>)
 8013caa:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8013cac:	4b52      	ldr	r3, [pc, #328]	; (8013df8 <LoRaMacInitialization+0x728>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	4a52      	ldr	r2, [pc, #328]	; (8013dfc <LoRaMacInitialization+0x72c>)
 8013cb2:	0010      	movs	r0, r2
 8013cb4:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8013cb6:	4b52      	ldr	r3, [pc, #328]	; (8013e00 <LoRaMacInitialization+0x730>)
 8013cb8:	0018      	movs	r0, r3
 8013cba:	f7f9 fcdf 	bl	800d67c <SecureElementInit>
 8013cbe:	1e03      	subs	r3, r0, #0
 8013cc0:	d001      	beq.n	8013cc6 <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013cc2:	2311      	movs	r3, #17
 8013cc4:	e073      	b.n	8013dae <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8013cc6:	4b4f      	ldr	r3, [pc, #316]	; (8013e04 <LoRaMacInitialization+0x734>)
 8013cc8:	0018      	movs	r0, r3
 8013cca:	f002 fc0d 	bl	80164e8 <LoRaMacCryptoInit>
 8013cce:	1e03      	subs	r3, r0, #0
 8013cd0:	d001      	beq.n	8013cd6 <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013cd2:	2311      	movs	r3, #17
 8013cd4:	e06b      	b.n	8013dae <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8013cd6:	4b4c      	ldr	r3, [pc, #304]	; (8013e08 <LoRaMacInitialization+0x738>)
 8013cd8:	0018      	movs	r0, r3
 8013cda:	f001 fc0d 	bl	80154f8 <LoRaMacCommandsInit>
 8013cde:	1e03      	subs	r3, r0, #0
 8013ce0:	d001      	beq.n	8013ce6 <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013ce2:	2313      	movs	r3, #19
 8013ce4:	e063      	b.n	8013dae <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8013ce6:	4b35      	ldr	r3, [pc, #212]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013ce8:	4a33      	ldr	r2, [pc, #204]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013cea:	589b      	ldr	r3, [r3, r2]
 8013cec:	3350      	adds	r3, #80	; 0x50
 8013cee:	0018      	movs	r0, r3
 8013cf0:	f002 fd10 	bl	8016714 <LoRaMacCryptoSetMulticastReference>
 8013cf4:	1e03      	subs	r3, r0, #0
 8013cf6:	d001      	beq.n	8013cfc <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013cf8:	2311      	movs	r3, #17
 8013cfa:	e058      	b.n	8013dae <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013cfc:	4b3e      	ldr	r3, [pc, #248]	; (8013df8 <LoRaMacInitialization+0x728>)
 8013cfe:	695b      	ldr	r3, [r3, #20]
 8013d00:	4798      	blx	r3
 8013d02:	0003      	movs	r3, r0
 8013d04:	0018      	movs	r0, r3
 8013d06:	f006 f84f 	bl	8019da8 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013d0a:	4b3b      	ldr	r3, [pc, #236]	; (8013df8 <LoRaMacInitialization+0x728>)
 8013d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d0e:	4a2b      	ldr	r2, [pc, #172]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013d10:	4929      	ldr	r1, [pc, #164]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013d12:	5852      	ldr	r2, [r2, r1]
 8013d14:	217d      	movs	r1, #125	; 0x7d
 8013d16:	5c52      	ldrb	r2, [r2, r1]
 8013d18:	0010      	movs	r0, r2
 8013d1a:	4798      	blx	r3
    Radio.Sleep( );
 8013d1c:	4b36      	ldr	r3, [pc, #216]	; (8013df8 <LoRaMacInitialization+0x728>)
 8013d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d20:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013d22:	2144      	movs	r1, #68	; 0x44
 8013d24:	187b      	adds	r3, r7, r1
 8013d26:	2200      	movs	r2, #0
 8013d28:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 8013d2a:	187b      	adds	r3, r7, r1
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d007      	beq.n	8013d46 <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	685a      	ldr	r2, [r3, #4]
 8013d3a:	187b      	adds	r3, r7, r1
 8013d3c:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	68da      	ldr	r2, [r3, #12]
 8013d42:	187b      	adds	r3, r7, r1
 8013d44:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013d46:	2124      	movs	r1, #36	; 0x24
 8013d48:	187b      	adds	r3, r7, r1
 8013d4a:	4a30      	ldr	r2, [pc, #192]	; (8013e0c <LoRaMacInitialization+0x73c>)
 8013d4c:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013d4e:	187b      	adds	r3, r7, r1
 8013d50:	4a2f      	ldr	r2, [pc, #188]	; (8013e10 <LoRaMacInitialization+0x740>)
 8013d52:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013d54:	187b      	adds	r3, r7, r1
 8013d56:	4a2f      	ldr	r2, [pc, #188]	; (8013e14 <LoRaMacInitialization+0x744>)
 8013d58:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013d5a:	187b      	adds	r3, r7, r1
 8013d5c:	4a2e      	ldr	r2, [pc, #184]	; (8013e18 <LoRaMacInitialization+0x748>)
 8013d5e:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8013d60:	4b16      	ldr	r3, [pc, #88]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013d62:	4a15      	ldr	r2, [pc, #84]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013d64:	589b      	ldr	r3, [r3, r2]
 8013d66:	334c      	adds	r3, #76	; 0x4c
 8013d68:	001a      	movs	r2, r3
 8013d6a:	187b      	adds	r3, r7, r1
 8013d6c:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8013d6e:	4b13      	ldr	r3, [pc, #76]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013d70:	4a11      	ldr	r2, [pc, #68]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013d72:	589b      	ldr	r3, [r3, r2]
 8013d74:	001a      	movs	r2, r3
 8013d76:	187b      	adds	r3, r7, r1
 8013d78:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8013d7a:	4b10      	ldr	r3, [pc, #64]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013d7c:	4a0e      	ldr	r2, [pc, #56]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013d7e:	589b      	ldr	r3, [r3, r2]
 8013d80:	3384      	adds	r3, #132	; 0x84
 8013d82:	001a      	movs	r2, r3
 8013d84:	187b      	adds	r3, r7, r1
 8013d86:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8013d88:	4b0c      	ldr	r3, [pc, #48]	; (8013dbc <LoRaMacInitialization+0x6ec>)
 8013d8a:	4a0b      	ldr	r2, [pc, #44]	; (8013db8 <LoRaMacInitialization+0x6e8>)
 8013d8c:	589b      	ldr	r3, [r3, r2]
 8013d8e:	3350      	adds	r3, #80	; 0x50
 8013d90:	001a      	movs	r2, r3
 8013d92:	0008      	movs	r0, r1
 8013d94:	187b      	adds	r3, r7, r1
 8013d96:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8013d98:	4a20      	ldr	r2, [pc, #128]	; (8013e1c <LoRaMacInitialization+0x74c>)
 8013d9a:	2344      	movs	r3, #68	; 0x44
 8013d9c:	18f9      	adds	r1, r7, r3
 8013d9e:	183b      	adds	r3, r7, r0
 8013da0:	0018      	movs	r0, r3
 8013da2:	f001 f994 	bl	80150ce <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013da6:	2001      	movs	r0, #1
 8013da8:	f7fc fe10 	bl	80109cc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8013dac:	2300      	movs	r3, #0
}
 8013dae:	0018      	movs	r0, r3
 8013db0:	46bd      	mov	sp, r7
 8013db2:	b016      	add	sp, #88	; 0x58
 8013db4:	bdb0      	pop	{r4, r5, r7, pc}
 8013db6:	46c0      	nop			; (mov r8, r8)
 8013db8:	00000484 	.word	0x00000484
 8013dbc:	200007d0 	.word	0x200007d0
 8013dc0:	00000481 	.word	0x00000481
 8013dc4:	08010dd1 	.word	0x08010dd1
 8013dc8:	20000b38 	.word	0x20000b38
 8013dcc:	08010e5d 	.word	0x08010e5d
 8013dd0:	20000b50 	.word	0x20000b50
 8013dd4:	08010ef1 	.word	0x08010ef1
 8013dd8:	20000b68 	.word	0x20000b68
 8013ddc:	08010f8d 	.word	0x08010f8d
 8013de0:	20000bc8 	.word	0x20000bc8
 8013de4:	0800f875 	.word	0x0800f875
 8013de8:	0800f8f1 	.word	0x0800f8f1
 8013dec:	0800f9e5 	.word	0x0800f9e5
 8013df0:	0800f991 	.word	0x0800f991
 8013df4:	0800fa29 	.word	0x0800fa29
 8013df8:	08021740 	.word	0x08021740
 8013dfc:	20000b1c 	.word	0x20000b1c
 8013e00:	0801359d 	.word	0x0801359d
 8013e04:	0801358d 	.word	0x0801358d
 8013e08:	080135ad 	.word	0x080135ad
 8013e0c:	20000c34 	.word	0x20000c34
 8013e10:	20000bec 	.word	0x20000bec
 8013e14:	20000c20 	.word	0x20000c20
 8013e18:	20000c51 	.word	0x20000c51
 8013e1c:	080135bd 	.word	0x080135bd

08013e20 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013e24:	4a04      	ldr	r2, [pc, #16]	; (8013e38 <LoRaMacStart+0x18>)
 8013e26:	23d0      	movs	r3, #208	; 0xd0
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	2100      	movs	r1, #0
 8013e2c:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8013e2e:	2300      	movs	r3, #0
}
 8013e30:	0018      	movs	r0, r3
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}
 8013e36:	46c0      	nop			; (mov r8, r8)
 8013e38:	200007d0 	.word	0x200007d0

08013e3c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013e3c:	b590      	push	{r4, r7, lr}
 8013e3e:	b08b      	sub	sp, #44	; 0x2c
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	0002      	movs	r2, r0
 8013e44:	6039      	str	r1, [r7, #0]
 8013e46:	1dfb      	adds	r3, r7, #7
 8013e48:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8013e4a:	4b4f      	ldr	r3, [pc, #316]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013e4c:	4a4f      	ldr	r2, [pc, #316]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013e4e:	589b      	ldr	r3, [r3, r2]
 8013e50:	2280      	movs	r2, #128	; 0x80
 8013e52:	589b      	ldr	r3, [r3, r2]
 8013e54:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8013e56:	4b4c      	ldr	r3, [pc, #304]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013e58:	4a4c      	ldr	r2, [pc, #304]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013e5a:	589b      	ldr	r3, [r3, r2]
 8013e5c:	2205      	movs	r2, #5
 8013e5e:	569a      	ldrsb	r2, [r3, r2]
 8013e60:	230f      	movs	r3, #15
 8013e62:	18fb      	adds	r3, r7, r3
 8013e64:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8013e66:	4b48      	ldr	r3, [pc, #288]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013e68:	4a48      	ldr	r2, [pc, #288]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013e6a:	589b      	ldr	r3, [r3, r2]
 8013e6c:	2204      	movs	r2, #4
 8013e6e:	569a      	ldrsb	r2, [r3, r2]
 8013e70:	230e      	movs	r3, #14
 8013e72:	18fb      	adds	r3, r7, r3
 8013e74:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 8013e76:	2300      	movs	r3, #0
 8013e78:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d101      	bne.n	8013e84 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e80:	2303      	movs	r3, #3
 8013e82:	e07d      	b.n	8013f80 <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8013e84:	4b40      	ldr	r3, [pc, #256]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013e86:	4a41      	ldr	r2, [pc, #260]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013e88:	5899      	ldr	r1, [r3, r2]
 8013e8a:	2014      	movs	r0, #20
 8013e8c:	183b      	adds	r3, r7, r0
 8013e8e:	22b0      	movs	r2, #176	; 0xb0
 8013e90:	0052      	lsls	r2, r2, #1
 8013e92:	588a      	ldr	r2, [r1, r2]
 8013e94:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 8013e96:	183b      	adds	r3, r7, r0
 8013e98:	2200      	movs	r2, #0
 8013e9a:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8013e9c:	4b3a      	ldr	r3, [pc, #232]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013e9e:	4a3b      	ldr	r2, [pc, #236]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013ea0:	589b      	ldr	r3, [r3, r2]
 8013ea2:	227e      	movs	r2, #126	; 0x7e
 8013ea4:	5c9a      	ldrb	r2, [r3, r2]
 8013ea6:	183b      	adds	r3, r7, r0
 8013ea8:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8013eaa:	4b37      	ldr	r3, [pc, #220]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013eac:	4a37      	ldr	r2, [pc, #220]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013eae:	589b      	ldr	r3, [r3, r2]
 8013eb0:	2280      	movs	r2, #128	; 0x80
 8013eb2:	589a      	ldr	r2, [r3, r2]
 8013eb4:	183b      	adds	r3, r7, r0
 8013eb6:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8013eb8:	4a33      	ldr	r2, [pc, #204]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013eba:	23fd      	movs	r3, #253	; 0xfd
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	5ad2      	ldrh	r2, [r2, r3]
 8013ec0:	183b      	adds	r3, r7, r0
 8013ec2:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8013ec4:	4b30      	ldr	r3, [pc, #192]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013ec6:	4a32      	ldr	r2, [pc, #200]	; (8013f90 <LoRaMacQueryTxPossible+0x154>)
 8013ec8:	5a9a      	ldrh	r2, [r3, r2]
 8013eca:	183b      	adds	r3, r7, r0
 8013ecc:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013ece:	4b2e      	ldr	r3, [pc, #184]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013ed0:	4a2e      	ldr	r2, [pc, #184]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013ed2:	589b      	ldr	r3, [r3, r2]
 8013ed4:	2285      	movs	r2, #133	; 0x85
 8013ed6:	569a      	ldrsb	r2, [r3, r2]
 8013ed8:	183b      	adds	r3, r7, r0
 8013eda:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013edc:	4b2a      	ldr	r3, [pc, #168]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013ede:	4a2b      	ldr	r2, [pc, #172]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013ee0:	589b      	ldr	r3, [r3, r2]
 8013ee2:	2284      	movs	r2, #132	; 0x84
 8013ee4:	569a      	ldrsb	r2, [r3, r2]
 8013ee6:	183b      	adds	r3, r7, r0
 8013ee8:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013eea:	4b27      	ldr	r3, [pc, #156]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013eec:	4a27      	ldr	r2, [pc, #156]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013eee:	589b      	ldr	r3, [r3, r2]
 8013ef0:	22b8      	movs	r2, #184	; 0xb8
 8013ef2:	5c9a      	ldrb	r2, [r3, r2]
 8013ef4:	183b      	adds	r3, r7, r0
 8013ef6:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8013ef8:	4b23      	ldr	r3, [pc, #140]	; (8013f88 <LoRaMacQueryTxPossible+0x14c>)
 8013efa:	4a24      	ldr	r2, [pc, #144]	; (8013f8c <LoRaMacQueryTxPossible+0x150>)
 8013efc:	589b      	ldr	r3, [r3, r2]
 8013efe:	781a      	ldrb	r2, [r3, #0]
 8013f00:	183b      	adds	r3, r7, r0
 8013f02:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8013f04:	2310      	movs	r3, #16
 8013f06:	18fb      	adds	r3, r7, r3
 8013f08:	220e      	movs	r2, #14
 8013f0a:	18ba      	adds	r2, r7, r2
 8013f0c:	240f      	movs	r4, #15
 8013f0e:	1939      	adds	r1, r7, r4
 8013f10:	1838      	adds	r0, r7, r0
 8013f12:	f001 f8c4 	bl	801509e <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013f16:	193b      	adds	r3, r7, r4
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	b25b      	sxtb	r3, r3
 8013f1c:	0018      	movs	r0, r3
 8013f1e:	f7fd f9e7 	bl	80112f0 <GetMaxAppPayloadWithoutFOptsLength>
 8013f22:	0003      	movs	r3, r0
 8013f24:	001a      	movs	r2, r3
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013f2a:	2308      	movs	r3, #8
 8013f2c:	18fb      	adds	r3, r7, r3
 8013f2e:	0018      	movs	r0, r3
 8013f30:	f001 fbf6 	bl	8015720 <LoRaMacCommandsGetSizeSerializedCmds>
 8013f34:	1e03      	subs	r3, r0, #0
 8013f36:	d001      	beq.n	8013f3c <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013f38:	2313      	movs	r3, #19
 8013f3a:	e021      	b.n	8013f80 <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	2b0f      	cmp	r3, #15
 8013f40:	d81a      	bhi.n	8013f78 <LoRaMacQueryTxPossible+0x13c>
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	785b      	ldrb	r3, [r3, #1]
 8013f46:	001a      	movs	r2, r3
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d314      	bcc.n	8013f78 <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	785a      	ldrb	r2, [r3, #1]
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	1ad3      	subs	r3, r2, r3
 8013f58:	b2da      	uxtb	r2, r3
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	785b      	ldrb	r3, [r3, #1]
 8013f62:	0019      	movs	r1, r3
 8013f64:	1dfb      	adds	r3, r7, #7
 8013f66:	781a      	ldrb	r2, [r3, #0]
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	18d3      	adds	r3, r2, r3
 8013f6c:	4299      	cmp	r1, r3
 8013f6e:	d301      	bcc.n	8013f74 <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 8013f70:	2300      	movs	r3, #0
 8013f72:	e005      	b.n	8013f80 <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013f74:	2308      	movs	r3, #8
 8013f76:	e003      	b.n	8013f80 <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013f7e:	2308      	movs	r3, #8
    }
}
 8013f80:	0018      	movs	r0, r3
 8013f82:	46bd      	mov	sp, r7
 8013f84:	b00b      	add	sp, #44	; 0x2c
 8013f86:	bd90      	pop	{r4, r7, pc}
 8013f88:	200007d0 	.word	0x200007d0
 8013f8c:	00000484 	.word	0x00000484
 8013f90:	000003f6 	.word	0x000003f6

08013f94 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013f94:	b590      	push	{r4, r7, lr}
 8013f96:	b087      	sub	sp, #28
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013f9c:	2317      	movs	r3, #23
 8013f9e:	18fb      	adds	r3, r7, r3
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d101      	bne.n	8013fae <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013faa:	2303      	movs	r3, #3
 8013fac:	e146      	b.n	801423c <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	781b      	ldrb	r3, [r3, #0]
 8013fb2:	2b28      	cmp	r3, #40	; 0x28
 8013fb4:	d900      	bls.n	8013fb8 <LoRaMacMibGetRequestConfirm+0x24>
 8013fb6:	e135      	b.n	8014224 <LoRaMacMibGetRequestConfirm+0x290>
 8013fb8:	009a      	lsls	r2, r3, #2
 8013fba:	4ba2      	ldr	r3, [pc, #648]	; (8014244 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013fbc:	18d3      	adds	r3, r2, r3
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8013fc2:	4ba1      	ldr	r3, [pc, #644]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013fc4:	4aa1      	ldr	r2, [pc, #644]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013fc6:	589b      	ldr	r3, [r3, r2]
 8013fc8:	227c      	movs	r2, #124	; 0x7c
 8013fca:	5c9a      	ldrb	r2, [r3, r2]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	711a      	strb	r2, [r3, #4]
            break;
 8013fd0:	e131      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8013fd2:	4b9d      	ldr	r3, [pc, #628]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013fd4:	4a9d      	ldr	r2, [pc, #628]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013fd6:	589a      	ldr	r2, [r3, r2]
 8013fd8:	23b2      	movs	r3, #178	; 0xb2
 8013fda:	005b      	lsls	r3, r3, #1
 8013fdc:	5cd2      	ldrb	r2, [r2, r3]
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	711a      	strb	r2, [r3, #4]
            break;
 8013fe2:	e128      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8013fe4:	f7f9 ffaa 	bl	800df3c <SecureElementGetDevEui>
 8013fe8:	0002      	movs	r2, r0
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	605a      	str	r2, [r3, #4]
            break;
 8013fee:	e122      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8013ff0:	f7f9 ffc8 	bl	800df84 <SecureElementGetJoinEui>
 8013ff4:	0002      	movs	r2, r0
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	605a      	str	r2, [r3, #4]
            break;
 8013ffa:	e11c      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8013ffc:	4b92      	ldr	r3, [pc, #584]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013ffe:	4a93      	ldr	r2, [pc, #588]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014000:	589b      	ldr	r3, [r3, r2]
 8014002:	227e      	movs	r2, #126	; 0x7e
 8014004:	5c9a      	ldrb	r2, [r3, r2]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	711a      	strb	r2, [r3, #4]
            break;
 801400a:	e114      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 801400c:	4b8e      	ldr	r3, [pc, #568]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801400e:	4a8f      	ldr	r2, [pc, #572]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014010:	589b      	ldr	r3, [r3, r2]
 8014012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	605a      	str	r2, [r3, #4]
            break;
 8014018:	e10d      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 801401a:	4b8b      	ldr	r3, [pc, #556]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801401c:	4a8b      	ldr	r2, [pc, #556]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801401e:	589b      	ldr	r3, [r3, r2]
 8014020:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	605a      	str	r2, [r3, #4]
            break;
 8014026:	e106      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8014028:	4b87      	ldr	r3, [pc, #540]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801402a:	4a88      	ldr	r2, [pc, #544]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801402c:	589b      	ldr	r3, [r3, r2]
 801402e:	227d      	movs	r2, #125	; 0x7d
 8014030:	5c9a      	ldrb	r2, [r3, r2]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	711a      	strb	r2, [r3, #4]
            break;
 8014036:	e0fe      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8014038:	4b83      	ldr	r3, [pc, #524]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801403a:	4a84      	ldr	r2, [pc, #528]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801403c:	589b      	ldr	r3, [r3, r2]
 801403e:	22ca      	movs	r2, #202	; 0xca
 8014040:	5c9a      	ldrb	r2, [r3, r2]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	711a      	strb	r2, [r3, #4]
            break;
 8014046:	e0f6      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014048:	2110      	movs	r1, #16
 801404a:	187b      	adds	r3, r7, r1
 801404c:	221d      	movs	r2, #29
 801404e:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8014050:	4b7d      	ldr	r3, [pc, #500]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014052:	4a7e      	ldr	r2, [pc, #504]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014054:	589b      	ldr	r3, [r3, r2]
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	187a      	adds	r2, r7, r1
 801405a:	0011      	movs	r1, r2
 801405c:	0018      	movs	r0, r3
 801405e:	f003 fa38 	bl	80174d2 <RegionGetPhyParam>
 8014062:	0003      	movs	r3, r0
 8014064:	001a      	movs	r2, r3
 8014066:	210c      	movs	r1, #12
 8014068:	187b      	adds	r3, r7, r1
 801406a:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 801406c:	187b      	adds	r3, r7, r1
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	605a      	str	r2, [r3, #4]
            break;
 8014074:	e0df      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8014076:	4b74      	ldr	r3, [pc, #464]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014078:	4a74      	ldr	r2, [pc, #464]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801407a:	589a      	ldr	r2, [r3, r2]
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	21a8      	movs	r1, #168	; 0xa8
 8014080:	3304      	adds	r3, #4
 8014082:	1852      	adds	r2, r2, r1
 8014084:	ca03      	ldmia	r2!, {r0, r1}
 8014086:	c303      	stmia	r3!, {r0, r1}
            break;
 8014088:	e0d5      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 801408a:	4b6f      	ldr	r3, [pc, #444]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801408c:	4a6f      	ldr	r2, [pc, #444]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801408e:	589a      	ldr	r2, [r3, r2]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	3304      	adds	r3, #4
 8014094:	3228      	adds	r2, #40	; 0x28
 8014096:	ca03      	ldmia	r2!, {r0, r1}
 8014098:	c303      	stmia	r3!, {r0, r1}
            break;
 801409a:	e0cc      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 801409c:	4b6a      	ldr	r3, [pc, #424]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801409e:	4a6b      	ldr	r2, [pc, #428]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80140a0:	589a      	ldr	r2, [r3, r2]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	21b0      	movs	r1, #176	; 0xb0
 80140a6:	3304      	adds	r3, #4
 80140a8:	1852      	adds	r2, r2, r1
 80140aa:	ca03      	ldmia	r2!, {r0, r1}
 80140ac:	c303      	stmia	r3!, {r0, r1}
            break;
 80140ae:	e0c2      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80140b0:	4b65      	ldr	r3, [pc, #404]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80140b2:	4a66      	ldr	r2, [pc, #408]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80140b4:	589a      	ldr	r2, [r3, r2]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	3304      	adds	r3, #4
 80140ba:	3230      	adds	r2, #48	; 0x30
 80140bc:	ca03      	ldmia	r2!, {r0, r1}
 80140be:	c303      	stmia	r3!, {r0, r1}
            break;
 80140c0:	e0b9      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80140c2:	2110      	movs	r1, #16
 80140c4:	187b      	adds	r3, r7, r1
 80140c6:	221b      	movs	r2, #27
 80140c8:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80140ca:	4b5f      	ldr	r3, [pc, #380]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80140cc:	4a5f      	ldr	r2, [pc, #380]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80140ce:	589b      	ldr	r3, [r3, r2]
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	187a      	adds	r2, r7, r1
 80140d4:	0011      	movs	r1, r2
 80140d6:	0018      	movs	r0, r3
 80140d8:	f003 f9fb 	bl	80174d2 <RegionGetPhyParam>
 80140dc:	0003      	movs	r3, r0
 80140de:	001a      	movs	r2, r3
 80140e0:	210c      	movs	r1, #12
 80140e2:	187b      	adds	r3, r7, r1
 80140e4:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80140e6:	187b      	adds	r3, r7, r1
 80140e8:	681a      	ldr	r2, [r3, #0]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	605a      	str	r2, [r3, #4]
            break;
 80140ee:	e0a2      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80140f0:	2110      	movs	r1, #16
 80140f2:	187b      	adds	r3, r7, r1
 80140f4:	221a      	movs	r2, #26
 80140f6:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80140f8:	4b53      	ldr	r3, [pc, #332]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80140fa:	4a54      	ldr	r2, [pc, #336]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80140fc:	589b      	ldr	r3, [r3, r2]
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	187a      	adds	r2, r7, r1
 8014102:	0011      	movs	r1, r2
 8014104:	0018      	movs	r0, r3
 8014106:	f003 f9e4 	bl	80174d2 <RegionGetPhyParam>
 801410a:	0003      	movs	r3, r0
 801410c:	001a      	movs	r2, r3
 801410e:	210c      	movs	r1, #12
 8014110:	187b      	adds	r3, r7, r1
 8014112:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8014114:	187b      	adds	r3, r7, r1
 8014116:	681a      	ldr	r2, [r3, #0]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	605a      	str	r2, [r3, #4]
            break;
 801411c:	e08b      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 801411e:	4b4a      	ldr	r3, [pc, #296]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014120:	4a4a      	ldr	r2, [pc, #296]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014122:	589b      	ldr	r3, [r3, r2]
 8014124:	22a4      	movs	r2, #164	; 0xa4
 8014126:	5c9a      	ldrb	r2, [r3, r2]
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	711a      	strb	r2, [r3, #4]
            break;
 801412c:	e083      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 801412e:	4b46      	ldr	r3, [pc, #280]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014130:	4a46      	ldr	r2, [pc, #280]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014132:	589b      	ldr	r3, [r3, r2]
 8014134:	2290      	movs	r2, #144	; 0x90
 8014136:	589a      	ldr	r2, [r3, r2]
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	605a      	str	r2, [r3, #4]
            break;
 801413c:	e07b      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 801413e:	4b42      	ldr	r3, [pc, #264]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014140:	4a42      	ldr	r2, [pc, #264]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014142:	589b      	ldr	r3, [r3, r2]
 8014144:	2294      	movs	r2, #148	; 0x94
 8014146:	589a      	ldr	r2, [r3, r2]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	605a      	str	r2, [r3, #4]
            break;
 801414c:	e073      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 801414e:	4b3e      	ldr	r3, [pc, #248]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014150:	4a3e      	ldr	r2, [pc, #248]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014152:	589b      	ldr	r3, [r3, r2]
 8014154:	2298      	movs	r2, #152	; 0x98
 8014156:	589a      	ldr	r2, [r3, r2]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	605a      	str	r2, [r3, #4]
            break;
 801415c:	e06b      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 801415e:	4b3a      	ldr	r3, [pc, #232]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014160:	4a3a      	ldr	r2, [pc, #232]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014162:	589b      	ldr	r3, [r3, r2]
 8014164:	229c      	movs	r2, #156	; 0x9c
 8014166:	589a      	ldr	r2, [r3, r2]
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	605a      	str	r2, [r3, #4]
            break;
 801416c:	e063      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 801416e:	4b36      	ldr	r3, [pc, #216]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014170:	4a36      	ldr	r2, [pc, #216]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014172:	589b      	ldr	r3, [r3, r2]
 8014174:	22a0      	movs	r2, #160	; 0xa0
 8014176:	589a      	ldr	r2, [r3, r2]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	605a      	str	r2, [r3, #4]
            break;
 801417c:	e05b      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 801417e:	4b32      	ldr	r3, [pc, #200]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014180:	4a32      	ldr	r2, [pc, #200]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014182:	589b      	ldr	r3, [r3, r2]
 8014184:	2205      	movs	r2, #5
 8014186:	569a      	ldrsb	r2, [r3, r2]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	711a      	strb	r2, [r3, #4]
            break;
 801418c:	e053      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801418e:	4b2e      	ldr	r3, [pc, #184]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8014190:	4a2e      	ldr	r2, [pc, #184]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014192:	589b      	ldr	r3, [r3, r2]
 8014194:	2285      	movs	r2, #133	; 0x85
 8014196:	569a      	ldrsb	r2, [r3, r2]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	711a      	strb	r2, [r3, #4]
            break;
 801419c:	e04b      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 801419e:	4b2a      	ldr	r3, [pc, #168]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80141a0:	4a2a      	ldr	r2, [pc, #168]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80141a2:	589b      	ldr	r3, [r3, r2]
 80141a4:	2204      	movs	r2, #4
 80141a6:	569a      	ldrsb	r2, [r3, r2]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	711a      	strb	r2, [r3, #4]
            break;
 80141ac:	e043      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80141ae:	4b26      	ldr	r3, [pc, #152]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80141b0:	4a26      	ldr	r2, [pc, #152]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80141b2:	589b      	ldr	r3, [r3, r2]
 80141b4:	2284      	movs	r2, #132	; 0x84
 80141b6:	569a      	ldrsb	r2, [r3, r2]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	711a      	strb	r2, [r3, #4]
            break;
 80141bc:	e03b      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 80141be:	4b22      	ldr	r3, [pc, #136]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80141c0:	4a22      	ldr	r2, [pc, #136]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80141c2:	589b      	ldr	r3, [r3, r2]
 80141c4:	2288      	movs	r2, #136	; 0x88
 80141c6:	589a      	ldr	r2, [r3, r2]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	605a      	str	r2, [r3, #4]
            break;
 80141cc:	e033      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 80141ce:	4b1e      	ldr	r3, [pc, #120]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80141d0:	4a1e      	ldr	r2, [pc, #120]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80141d2:	589b      	ldr	r3, [r3, r2]
 80141d4:	228c      	movs	r2, #140	; 0x8c
 80141d6:	5c9a      	ldrb	r2, [r3, r2]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	711a      	strb	r2, [r3, #4]
            break;
 80141dc:	e02b      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80141de:	4b1a      	ldr	r3, [pc, #104]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80141e0:	4a1a      	ldr	r2, [pc, #104]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80141e2:	589b      	ldr	r3, [r3, r2]
 80141e4:	22c0      	movs	r2, #192	; 0xc0
 80141e6:	589a      	ldr	r2, [r3, r2]
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	605a      	str	r2, [r3, #4]
            break;
 80141ec:	e023      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 80141ee:	f7fe ff23 	bl	8013038 <GetCtxs>
 80141f2:	0002      	movs	r2, r0
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	605a      	str	r2, [r3, #4]
            break;
 80141f8:	e01d      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80141fa:	4b13      	ldr	r3, [pc, #76]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80141fc:	4a13      	ldr	r2, [pc, #76]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80141fe:	589b      	ldr	r3, [r3, r2]
 8014200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	605a      	str	r2, [r3, #4]
            break;
 8014206:	e016      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 8014208:	4b0f      	ldr	r3, [pc, #60]	; (8014248 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801420a:	4a10      	ldr	r2, [pc, #64]	; (801424c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801420c:	5899      	ldr	r1, [r3, r2]
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	22b0      	movs	r2, #176	; 0xb0
 8014212:	0052      	lsls	r2, r2, #1
 8014214:	588a      	ldr	r2, [r1, r2]
 8014216:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014218:	687c      	ldr	r4, [r7, #4]
 801421a:	f003 fb55 	bl	80178c8 <RegionGetVersion>
 801421e:	0003      	movs	r3, r0
 8014220:	60a3      	str	r3, [r4, #8]
            break;
 8014222:	e008      	b.n	8014236 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014224:	2317      	movs	r3, #23
 8014226:	18fc      	adds	r4, r7, r3
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	0018      	movs	r0, r3
 801422c:	f000 ffed 	bl	801520a <LoRaMacClassBMibGetRequestConfirm>
 8014230:	0003      	movs	r3, r0
 8014232:	7023      	strb	r3, [r4, #0]
            break;
 8014234:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 8014236:	2317      	movs	r3, #23
 8014238:	18fb      	adds	r3, r7, r3
 801423a:	781b      	ldrb	r3, [r3, #0]
}
 801423c:	0018      	movs	r0, r3
 801423e:	46bd      	mov	sp, r7
 8014240:	b007      	add	sp, #28
 8014242:	bd90      	pop	{r4, r7, pc}
 8014244:	0802130c 	.word	0x0802130c
 8014248:	200007d0 	.word	0x200007d0
 801424c:	00000484 	.word	0x00000484

08014250 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014250:	b590      	push	{r4, r7, lr}
 8014252:	b087      	sub	sp, #28
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014258:	2317      	movs	r3, #23
 801425a:	18fb      	adds	r3, r7, r3
 801425c:	2200      	movs	r2, #0
 801425e:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d102      	bne.n	801426c <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014266:	2303      	movs	r3, #3
 8014268:	f000 fb74 	bl	8014954 <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801426c:	4ac3      	ldr	r2, [pc, #780]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 801426e:	23d0      	movs	r3, #208	; 0xd0
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	58d3      	ldr	r3, [r2, r3]
 8014274:	2202      	movs	r2, #2
 8014276:	4013      	ands	r3, r2
 8014278:	d002      	beq.n	8014280 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 801427a:	2301      	movs	r3, #1
 801427c:	f000 fb6a 	bl	8014954 <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	2b27      	cmp	r3, #39	; 0x27
 8014286:	d900      	bls.n	801428a <LoRaMacMibSetRequestConfirm+0x3a>
 8014288:	e333      	b.n	80148f2 <LoRaMacMibSetRequestConfirm+0x6a2>
 801428a:	009a      	lsls	r2, r3, #2
 801428c:	4bbc      	ldr	r3, [pc, #752]	; (8014580 <LoRaMacMibSetRequestConfirm+0x330>)
 801428e:	18d3      	adds	r3, r2, r3
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	791b      	ldrb	r3, [r3, #4]
 8014298:	2217      	movs	r2, #23
 801429a:	18bc      	adds	r4, r7, r2
 801429c:	0018      	movs	r0, r3
 801429e:	f7fc ff07 	bl	80110b0 <SwitchClass>
 80142a2:	0003      	movs	r3, r0
 80142a4:	7023      	strb	r3, [r4, #0]
            break;
 80142a6:	e34e      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	791b      	ldrb	r3, [r3, #4]
 80142ac:	2b02      	cmp	r3, #2
 80142ae:	d008      	beq.n	80142c2 <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 80142b0:	4bb2      	ldr	r3, [pc, #712]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 80142b2:	4ab4      	ldr	r2, [pc, #720]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 80142b4:	589a      	ldr	r2, [r3, r2]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	7919      	ldrb	r1, [r3, #4]
 80142ba:	23b2      	movs	r3, #178	; 0xb2
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80142c0:	e341      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142c2:	2317      	movs	r3, #23
 80142c4:	18fb      	adds	r3, r7, r3
 80142c6:	2203      	movs	r2, #3
 80142c8:	701a      	strb	r2, [r3, #0]
            break;
 80142ca:	e33c      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	0018      	movs	r0, r3
 80142d2:	f7f9 fe17 	bl	800df04 <SecureElementSetDevEui>
 80142d6:	1e03      	subs	r3, r0, #0
 80142d8:	d100      	bne.n	80142dc <LoRaMacMibSetRequestConfirm+0x8c>
 80142da:	e319      	b.n	8014910 <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142dc:	2317      	movs	r3, #23
 80142de:	18fb      	adds	r3, r7, r3
 80142e0:	2203      	movs	r2, #3
 80142e2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80142e4:	e314      	b.n	8014910 <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	0018      	movs	r0, r3
 80142ec:	f7f9 fe2e 	bl	800df4c <SecureElementSetJoinEui>
 80142f0:	1e03      	subs	r3, r0, #0
 80142f2:	d100      	bne.n	80142f6 <LoRaMacMibSetRequestConfirm+0xa6>
 80142f4:	e30e      	b.n	8014914 <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142f6:	2317      	movs	r3, #23
 80142f8:	18fb      	adds	r3, r7, r3
 80142fa:	2203      	movs	r2, #3
 80142fc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80142fe:	e309      	b.n	8014914 <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8014300:	4b9e      	ldr	r3, [pc, #632]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 8014302:	4aa0      	ldr	r2, [pc, #640]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 8014304:	589b      	ldr	r3, [r3, r2]
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	7911      	ldrb	r1, [r2, #4]
 801430a:	227e      	movs	r2, #126	; 0x7e
 801430c:	5499      	strb	r1, [r3, r2]
            break;
 801430e:	e31a      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8014310:	4b9a      	ldr	r3, [pc, #616]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 8014312:	4a9c      	ldr	r2, [pc, #624]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 8014314:	589b      	ldr	r3, [r3, r2]
 8014316:	687a      	ldr	r2, [r7, #4]
 8014318:	6852      	ldr	r2, [r2, #4]
 801431a:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 801431c:	e313      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 801431e:	4b97      	ldr	r3, [pc, #604]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 8014320:	4a98      	ldr	r2, [pc, #608]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 8014322:	589b      	ldr	r3, [r3, r2]
 8014324:	687a      	ldr	r2, [r7, #4]
 8014326:	6852      	ldr	r2, [r2, #4]
 8014328:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 801432a:	e30c      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d00a      	beq.n	801434a <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	0019      	movs	r1, r3
 801433a:	2000      	movs	r0, #0
 801433c:	f002 fa00 	bl	8016740 <LoRaMacCryptoSetKey>
 8014340:	1e03      	subs	r3, r0, #0
 8014342:	d100      	bne.n	8014346 <LoRaMacMibSetRequestConfirm+0xf6>
 8014344:	e2e8      	b.n	8014918 <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014346:	2311      	movs	r3, #17
 8014348:	e304      	b.n	8014954 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801434a:	2317      	movs	r3, #23
 801434c:	18fb      	adds	r3, r7, r3
 801434e:	2203      	movs	r2, #3
 8014350:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014352:	e2e1      	b.n	8014918 <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d00a      	beq.n	8014372 <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	685b      	ldr	r3, [r3, #4]
 8014360:	0019      	movs	r1, r3
 8014362:	2001      	movs	r0, #1
 8014364:	f002 f9ec 	bl	8016740 <LoRaMacCryptoSetKey>
 8014368:	1e03      	subs	r3, r0, #0
 801436a:	d100      	bne.n	801436e <LoRaMacMibSetRequestConfirm+0x11e>
 801436c:	e2d6      	b.n	801491c <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801436e:	2311      	movs	r3, #17
 8014370:	e2f0      	b.n	8014954 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014372:	2317      	movs	r3, #23
 8014374:	18fb      	adds	r3, r7, r3
 8014376:	2203      	movs	r2, #3
 8014378:	701a      	strb	r2, [r3, #0]
            }
            break;
 801437a:	e2cf      	b.n	801491c <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d00a      	beq.n	801439a <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	0019      	movs	r1, r3
 801438a:	2002      	movs	r0, #2
 801438c:	f002 f9d8 	bl	8016740 <LoRaMacCryptoSetKey>
 8014390:	1e03      	subs	r3, r0, #0
 8014392:	d100      	bne.n	8014396 <LoRaMacMibSetRequestConfirm+0x146>
 8014394:	e2c4      	b.n	8014920 <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014396:	2311      	movs	r3, #17
 8014398:	e2dc      	b.n	8014954 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801439a:	2317      	movs	r3, #23
 801439c:	18fb      	adds	r3, r7, r3
 801439e:	2203      	movs	r2, #3
 80143a0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80143a2:	e2bd      	b.n	8014920 <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d00a      	beq.n	80143c2 <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	0019      	movs	r1, r3
 80143b2:	2003      	movs	r0, #3
 80143b4:	f002 f9c4 	bl	8016740 <LoRaMacCryptoSetKey>
 80143b8:	1e03      	subs	r3, r0, #0
 80143ba:	d100      	bne.n	80143be <LoRaMacMibSetRequestConfirm+0x16e>
 80143bc:	e2b2      	b.n	8014924 <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80143be:	2311      	movs	r3, #17
 80143c0:	e2c8      	b.n	8014954 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143c2:	2317      	movs	r3, #23
 80143c4:	18fb      	adds	r3, r7, r3
 80143c6:	2203      	movs	r2, #3
 80143c8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80143ca:	e2ab      	b.n	8014924 <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	685b      	ldr	r3, [r3, #4]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d00a      	beq.n	80143ea <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	0019      	movs	r1, r3
 80143da:	207f      	movs	r0, #127	; 0x7f
 80143dc:	f002 f9b0 	bl	8016740 <LoRaMacCryptoSetKey>
 80143e0:	1e03      	subs	r3, r0, #0
 80143e2:	d100      	bne.n	80143e6 <LoRaMacMibSetRequestConfirm+0x196>
 80143e4:	e2a0      	b.n	8014928 <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80143e6:	2311      	movs	r3, #17
 80143e8:	e2b4      	b.n	8014954 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143ea:	2317      	movs	r3, #23
 80143ec:	18fb      	adds	r3, r7, r3
 80143ee:	2203      	movs	r2, #3
 80143f0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80143f2:	e299      	b.n	8014928 <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	685b      	ldr	r3, [r3, #4]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d00a      	beq.n	8014412 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	0019      	movs	r1, r3
 8014402:	2080      	movs	r0, #128	; 0x80
 8014404:	f002 f99c 	bl	8016740 <LoRaMacCryptoSetKey>
 8014408:	1e03      	subs	r3, r0, #0
 801440a:	d100      	bne.n	801440e <LoRaMacMibSetRequestConfirm+0x1be>
 801440c:	e28e      	b.n	801492c <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801440e:	2311      	movs	r3, #17
 8014410:	e2a0      	b.n	8014954 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014412:	2317      	movs	r3, #23
 8014414:	18fb      	adds	r3, r7, r3
 8014416:	2203      	movs	r2, #3
 8014418:	701a      	strb	r2, [r3, #0]
            }
            break;
 801441a:	e287      	b.n	801492c <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d00a      	beq.n	801443a <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	0019      	movs	r1, r3
 801442a:	2081      	movs	r0, #129	; 0x81
 801442c:	f002 f988 	bl	8016740 <LoRaMacCryptoSetKey>
 8014430:	1e03      	subs	r3, r0, #0
 8014432:	d100      	bne.n	8014436 <LoRaMacMibSetRequestConfirm+0x1e6>
 8014434:	e27c      	b.n	8014930 <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014436:	2311      	movs	r3, #17
 8014438:	e28c      	b.n	8014954 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801443a:	2317      	movs	r3, #23
 801443c:	18fb      	adds	r3, r7, r3
 801443e:	2203      	movs	r2, #3
 8014440:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014442:	e275      	b.n	8014930 <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d00a      	beq.n	8014462 <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	0019      	movs	r1, r3
 8014452:	2082      	movs	r0, #130	; 0x82
 8014454:	f002 f974 	bl	8016740 <LoRaMacCryptoSetKey>
 8014458:	1e03      	subs	r3, r0, #0
 801445a:	d100      	bne.n	801445e <LoRaMacMibSetRequestConfirm+0x20e>
 801445c:	e26a      	b.n	8014934 <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801445e:	2311      	movs	r3, #17
 8014460:	e278      	b.n	8014954 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014462:	2317      	movs	r3, #23
 8014464:	18fb      	adds	r3, r7, r3
 8014466:	2203      	movs	r2, #3
 8014468:	701a      	strb	r2, [r3, #0]
            }
            break;
 801446a:	e263      	b.n	8014934 <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801446c:	4b43      	ldr	r3, [pc, #268]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 801446e:	4a45      	ldr	r2, [pc, #276]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 8014470:	589b      	ldr	r3, [r3, r2]
 8014472:	687a      	ldr	r2, [r7, #4]
 8014474:	7911      	ldrb	r1, [r2, #4]
 8014476:	227d      	movs	r2, #125	; 0x7d
 8014478:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 801447a:	4b43      	ldr	r3, [pc, #268]	; (8014588 <LoRaMacMibSetRequestConfirm+0x338>)
 801447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801447e:	4a3f      	ldr	r2, [pc, #252]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 8014480:	4940      	ldr	r1, [pc, #256]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 8014482:	5852      	ldr	r2, [r2, r1]
 8014484:	217d      	movs	r1, #125	; 0x7d
 8014486:	5c52      	ldrb	r2, [r2, r1]
 8014488:	0010      	movs	r0, r2
 801448a:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801448c:	4b3e      	ldr	r3, [pc, #248]	; (8014588 <LoRaMacMibSetRequestConfirm+0x338>)
 801448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014490:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8014492:	e258      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014494:	4b39      	ldr	r3, [pc, #228]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 8014496:	4a3b      	ldr	r2, [pc, #236]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 8014498:	589b      	ldr	r3, [r3, r2]
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	7911      	ldrb	r1, [r2, #4]
 801449e:	22ca      	movs	r2, #202	; 0xca
 80144a0:	5499      	strb	r1, [r3, r2]
            break;
 80144a2:	e250      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	7a1b      	ldrb	r3, [r3, #8]
 80144a8:	b25a      	sxtb	r2, r3
 80144aa:	2108      	movs	r1, #8
 80144ac:	187b      	adds	r3, r7, r1
 80144ae:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80144b0:	4b32      	ldr	r3, [pc, #200]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 80144b2:	4a34      	ldr	r2, [pc, #208]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 80144b4:	589b      	ldr	r3, [r3, r2]
 80144b6:	22b9      	movs	r2, #185	; 0xb9
 80144b8:	5c9a      	ldrb	r2, [r3, r2]
 80144ba:	187b      	adds	r3, r7, r1
 80144bc:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 80144be:	4b2f      	ldr	r3, [pc, #188]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 80144c0:	4a30      	ldr	r2, [pc, #192]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 80144c2:	589b      	ldr	r3, [r3, r2]
 80144c4:	781b      	ldrb	r3, [r3, #0]
 80144c6:	1879      	adds	r1, r7, r1
 80144c8:	2207      	movs	r2, #7
 80144ca:	0018      	movs	r0, r3
 80144cc:	f003 f868 	bl	80175a0 <RegionVerify>
 80144d0:	0003      	movs	r3, r0
 80144d2:	001a      	movs	r2, r3
 80144d4:	2301      	movs	r3, #1
 80144d6:	4053      	eors	r3, r2
 80144d8:	b2db      	uxtb	r3, r3
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d004      	beq.n	80144e8 <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80144de:	2317      	movs	r3, #23
 80144e0:	18fb      	adds	r3, r7, r3
 80144e2:	2203      	movs	r2, #3
 80144e4:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80144e6:	e22e      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	685a      	ldr	r2, [r3, #4]
 80144ec:	2108      	movs	r1, #8
 80144ee:	187b      	adds	r3, r7, r1
 80144f0:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 80144f2:	4b22      	ldr	r3, [pc, #136]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 80144f4:	4a23      	ldr	r2, [pc, #140]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 80144f6:	589b      	ldr	r3, [r3, r2]
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	1879      	adds	r1, r7, r1
 80144fc:	2200      	movs	r2, #0
 80144fe:	0018      	movs	r0, r3
 8014500:	f003 f84e 	bl	80175a0 <RegionVerify>
 8014504:	0003      	movs	r3, r0
 8014506:	001a      	movs	r2, r3
 8014508:	2301      	movs	r3, #1
 801450a:	4053      	eors	r3, r2
 801450c:	b2db      	uxtb	r3, r3
 801450e:	2b00      	cmp	r3, #0
 8014510:	d004      	beq.n	801451c <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014512:	2317      	movs	r3, #23
 8014514:	18fb      	adds	r3, r7, r3
 8014516:	2203      	movs	r2, #3
 8014518:	701a      	strb	r2, [r3, #0]
            break;
 801451a:	e214      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801451c:	4b17      	ldr	r3, [pc, #92]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 801451e:	4a19      	ldr	r2, [pc, #100]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 8014520:	589b      	ldr	r3, [r3, r2]
 8014522:	21a8      	movs	r1, #168	; 0xa8
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	185b      	adds	r3, r3, r1
 8014528:	3204      	adds	r2, #4
 801452a:	ca03      	ldmia	r2!, {r0, r1}
 801452c:	c303      	stmia	r3!, {r0, r1}
            break;
 801452e:	e20a      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	7a1b      	ldrb	r3, [r3, #8]
 8014534:	b25a      	sxtb	r2, r3
 8014536:	2108      	movs	r1, #8
 8014538:	187b      	adds	r3, r7, r1
 801453a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801453c:	4b0f      	ldr	r3, [pc, #60]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 801453e:	4a11      	ldr	r2, [pc, #68]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 8014540:	589b      	ldr	r3, [r3, r2]
 8014542:	22b9      	movs	r2, #185	; 0xb9
 8014544:	5c9a      	ldrb	r2, [r3, r2]
 8014546:	187b      	adds	r3, r7, r1
 8014548:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 801454a:	4b0c      	ldr	r3, [pc, #48]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 801454c:	4a0d      	ldr	r2, [pc, #52]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 801454e:	589b      	ldr	r3, [r3, r2]
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	1879      	adds	r1, r7, r1
 8014554:	2207      	movs	r2, #7
 8014556:	0018      	movs	r0, r3
 8014558:	f003 f822 	bl	80175a0 <RegionVerify>
 801455c:	1e03      	subs	r3, r0, #0
 801455e:	d008      	beq.n	8014572 <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014560:	4b06      	ldr	r3, [pc, #24]	; (801457c <LoRaMacMibSetRequestConfirm+0x32c>)
 8014562:	4a08      	ldr	r2, [pc, #32]	; (8014584 <LoRaMacMibSetRequestConfirm+0x334>)
 8014564:	589b      	ldr	r3, [r3, r2]
 8014566:	687a      	ldr	r2, [r7, #4]
 8014568:	3328      	adds	r3, #40	; 0x28
 801456a:	3204      	adds	r2, #4
 801456c:	ca03      	ldmia	r2!, {r0, r1}
 801456e:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014570:	e1e9      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014572:	2317      	movs	r3, #23
 8014574:	18fb      	adds	r3, r7, r3
 8014576:	2203      	movs	r2, #3
 8014578:	701a      	strb	r2, [r3, #0]
            break;
 801457a:	e1e4      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
 801457c:	200007d0 	.word	0x200007d0
 8014580:	080213b0 	.word	0x080213b0
 8014584:	00000484 	.word	0x00000484
 8014588:	08021740 	.word	0x08021740
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	7a1b      	ldrb	r3, [r3, #8]
 8014590:	b25a      	sxtb	r2, r3
 8014592:	2108      	movs	r1, #8
 8014594:	187b      	adds	r3, r7, r1
 8014596:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8014598:	4bda      	ldr	r3, [pc, #872]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801459a:	4adb      	ldr	r2, [pc, #876]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801459c:	589b      	ldr	r3, [r3, r2]
 801459e:	22b9      	movs	r2, #185	; 0xb9
 80145a0:	5c9a      	ldrb	r2, [r3, r2]
 80145a2:	187b      	adds	r3, r7, r1
 80145a4:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80145a6:	4bd7      	ldr	r3, [pc, #860]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80145a8:	4ad7      	ldr	r2, [pc, #860]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80145aa:	589b      	ldr	r3, [r3, r2]
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	1879      	adds	r1, r7, r1
 80145b0:	2207      	movs	r2, #7
 80145b2:	0018      	movs	r0, r3
 80145b4:	f002 fff4 	bl	80175a0 <RegionVerify>
 80145b8:	1e03      	subs	r3, r0, #0
 80145ba:	d01f      	beq.n	80145fc <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80145bc:	4bd1      	ldr	r3, [pc, #836]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80145be:	4ad2      	ldr	r2, [pc, #840]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80145c0:	589b      	ldr	r3, [r3, r2]
 80145c2:	21b0      	movs	r1, #176	; 0xb0
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	185b      	adds	r3, r3, r1
 80145c8:	3204      	adds	r2, #4
 80145ca:	ca03      	ldmia	r2!, {r0, r1}
 80145cc:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80145ce:	4bcd      	ldr	r3, [pc, #820]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80145d0:	4acd      	ldr	r2, [pc, #820]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80145d2:	589b      	ldr	r3, [r3, r2]
 80145d4:	227c      	movs	r2, #124	; 0x7c
 80145d6:	5c9b      	ldrb	r3, [r3, r2]
 80145d8:	2b02      	cmp	r3, #2
 80145da:	d000      	beq.n	80145de <LoRaMacMibSetRequestConfirm+0x38e>
 80145dc:	e1ac      	b.n	8014938 <LoRaMacMibSetRequestConfirm+0x6e8>
 80145de:	4bc9      	ldr	r3, [pc, #804]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80145e0:	4ac9      	ldr	r2, [pc, #804]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80145e2:	589a      	ldr	r2, [r3, r2]
 80145e4:	23b2      	movs	r3, #178	; 0xb2
 80145e6:	005b      	lsls	r3, r3, #1
 80145e8:	5cd3      	ldrb	r3, [r2, r3]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d100      	bne.n	80145f0 <LoRaMacMibSetRequestConfirm+0x3a0>
 80145ee:	e1a3      	b.n	8014938 <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80145f0:	4bc6      	ldr	r3, [pc, #792]	; (801490c <LoRaMacMibSetRequestConfirm+0x6bc>)
 80145f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145f4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80145f6:	f7fe fa33 	bl	8012a60 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80145fa:	e19d      	b.n	8014938 <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80145fc:	2317      	movs	r3, #23
 80145fe:	18fb      	adds	r3, r7, r3
 8014600:	2203      	movs	r2, #3
 8014602:	701a      	strb	r2, [r3, #0]
            break;
 8014604:	e198      	b.n	8014938 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	7a1b      	ldrb	r3, [r3, #8]
 801460a:	b25a      	sxtb	r2, r3
 801460c:	2108      	movs	r1, #8
 801460e:	187b      	adds	r3, r7, r1
 8014610:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8014612:	4bbc      	ldr	r3, [pc, #752]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014614:	4abc      	ldr	r2, [pc, #752]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014616:	589b      	ldr	r3, [r3, r2]
 8014618:	22b9      	movs	r2, #185	; 0xb9
 801461a:	5c9a      	ldrb	r2, [r3, r2]
 801461c:	187b      	adds	r3, r7, r1
 801461e:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8014620:	4bb8      	ldr	r3, [pc, #736]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014622:	4ab9      	ldr	r2, [pc, #740]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014624:	589b      	ldr	r3, [r3, r2]
 8014626:	781b      	ldrb	r3, [r3, #0]
 8014628:	1879      	adds	r1, r7, r1
 801462a:	2207      	movs	r2, #7
 801462c:	0018      	movs	r0, r3
 801462e:	f002 ffb7 	bl	80175a0 <RegionVerify>
 8014632:	1e03      	subs	r3, r0, #0
 8014634:	d008      	beq.n	8014648 <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014636:	4bb3      	ldr	r3, [pc, #716]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014638:	4ab3      	ldr	r2, [pc, #716]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801463a:	589b      	ldr	r3, [r3, r2]
 801463c:	687a      	ldr	r2, [r7, #4]
 801463e:	3330      	adds	r3, #48	; 0x30
 8014640:	3204      	adds	r2, #4
 8014642:	ca03      	ldmia	r2!, {r0, r1}
 8014644:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014646:	e17e      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014648:	2317      	movs	r3, #23
 801464a:	18fb      	adds	r3, r7, r3
 801464c:	2203      	movs	r2, #3
 801464e:	701a      	strb	r2, [r3, #0]
            break;
 8014650:	e179      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	685a      	ldr	r2, [r3, #4]
 8014656:	210c      	movs	r1, #12
 8014658:	187b      	adds	r3, r7, r1
 801465a:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801465c:	187b      	adds	r3, r7, r1
 801465e:	2201      	movs	r2, #1
 8014660:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8014662:	4ba8      	ldr	r3, [pc, #672]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014664:	4aa8      	ldr	r2, [pc, #672]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014666:	589b      	ldr	r3, [r3, r2]
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	187a      	adds	r2, r7, r1
 801466c:	0011      	movs	r1, r2
 801466e:	0018      	movs	r0, r3
 8014670:	f002 ffc8 	bl	8017604 <RegionChanMaskSet>
 8014674:	0003      	movs	r3, r0
 8014676:	001a      	movs	r2, r3
 8014678:	2301      	movs	r3, #1
 801467a:	4053      	eors	r3, r2
 801467c:	b2db      	uxtb	r3, r3
 801467e:	2b00      	cmp	r3, #0
 8014680:	d100      	bne.n	8014684 <LoRaMacMibSetRequestConfirm+0x434>
 8014682:	e15b      	b.n	801493c <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014684:	2317      	movs	r3, #23
 8014686:	18fb      	adds	r3, r7, r3
 8014688:	2203      	movs	r2, #3
 801468a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801468c:	e156      	b.n	801493c <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	685a      	ldr	r2, [r3, #4]
 8014692:	210c      	movs	r1, #12
 8014694:	187b      	adds	r3, r7, r1
 8014696:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014698:	187b      	adds	r3, r7, r1
 801469a:	2200      	movs	r2, #0
 801469c:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 801469e:	4b99      	ldr	r3, [pc, #612]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80146a0:	4a99      	ldr	r2, [pc, #612]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80146a2:	589b      	ldr	r3, [r3, r2]
 80146a4:	781b      	ldrb	r3, [r3, #0]
 80146a6:	187a      	adds	r2, r7, r1
 80146a8:	0011      	movs	r1, r2
 80146aa:	0018      	movs	r0, r3
 80146ac:	f002 ffaa 	bl	8017604 <RegionChanMaskSet>
 80146b0:	0003      	movs	r3, r0
 80146b2:	001a      	movs	r2, r3
 80146b4:	2301      	movs	r3, #1
 80146b6:	4053      	eors	r3, r2
 80146b8:	b2db      	uxtb	r3, r3
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d100      	bne.n	80146c0 <LoRaMacMibSetRequestConfirm+0x470>
 80146be:	e13f      	b.n	8014940 <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146c0:	2317      	movs	r3, #23
 80146c2:	18fb      	adds	r3, r7, r3
 80146c4:	2203      	movs	r2, #3
 80146c6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80146c8:	e13a      	b.n	8014940 <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	791b      	ldrb	r3, [r3, #4]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d00b      	beq.n	80146ea <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80146d6:	2b0f      	cmp	r3, #15
 80146d8:	d807      	bhi.n	80146ea <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80146da:	4b8a      	ldr	r3, [pc, #552]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80146dc:	4a8a      	ldr	r2, [pc, #552]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80146de:	589b      	ldr	r3, [r3, r2]
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	7911      	ldrb	r1, [r2, #4]
 80146e4:	22a4      	movs	r2, #164	; 0xa4
 80146e6:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80146e8:	e12d      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146ea:	2317      	movs	r3, #23
 80146ec:	18fb      	adds	r3, r7, r3
 80146ee:	2203      	movs	r2, #3
 80146f0:	701a      	strb	r2, [r3, #0]
            break;
 80146f2:	e128      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80146f4:	4b83      	ldr	r3, [pc, #524]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80146f6:	4a84      	ldr	r2, [pc, #528]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80146f8:	589a      	ldr	r2, [r3, r2]
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	2190      	movs	r1, #144	; 0x90
 8014700:	5053      	str	r3, [r2, r1]
            break;
 8014702:	e120      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014704:	4b7f      	ldr	r3, [pc, #508]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014706:	4a80      	ldr	r2, [pc, #512]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014708:	589a      	ldr	r2, [r3, r2]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	2194      	movs	r1, #148	; 0x94
 8014710:	5053      	str	r3, [r2, r1]
            break;
 8014712:	e118      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014714:	4b7b      	ldr	r3, [pc, #492]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014716:	4a7c      	ldr	r2, [pc, #496]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014718:	589a      	ldr	r2, [r3, r2]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	2198      	movs	r1, #152	; 0x98
 8014720:	5053      	str	r3, [r2, r1]
            break;
 8014722:	e110      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014724:	4b77      	ldr	r3, [pc, #476]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014726:	4a78      	ldr	r2, [pc, #480]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014728:	589a      	ldr	r2, [r3, r2]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	219c      	movs	r1, #156	; 0x9c
 8014730:	5053      	str	r3, [r2, r1]
            break;
 8014732:	e108      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014734:	4b73      	ldr	r3, [pc, #460]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014736:	4a74      	ldr	r2, [pc, #464]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014738:	589a      	ldr	r2, [r3, r2]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	685b      	ldr	r3, [r3, #4]
 801473e:	21a0      	movs	r1, #160	; 0xa0
 8014740:	5053      	str	r3, [r2, r1]
            break;
 8014742:	e100      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2204      	movs	r2, #4
 8014748:	569a      	ldrsb	r2, [r3, r2]
 801474a:	2408      	movs	r4, #8
 801474c:	193b      	adds	r3, r7, r4
 801474e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8014750:	4b6c      	ldr	r3, [pc, #432]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014752:	4a6d      	ldr	r2, [pc, #436]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014754:	589b      	ldr	r3, [r3, r2]
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	1939      	adds	r1, r7, r4
 801475a:	2206      	movs	r2, #6
 801475c:	0018      	movs	r0, r3
 801475e:	f002 ff1f 	bl	80175a0 <RegionVerify>
 8014762:	1e03      	subs	r3, r0, #0
 8014764:	d007      	beq.n	8014776 <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014766:	4b67      	ldr	r3, [pc, #412]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014768:	4a67      	ldr	r2, [pc, #412]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801476a:	589b      	ldr	r3, [r3, r2]
 801476c:	193a      	adds	r2, r7, r4
 801476e:	7812      	ldrb	r2, [r2, #0]
 8014770:	b252      	sxtb	r2, r2
 8014772:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014774:	e0e7      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014776:	2317      	movs	r3, #23
 8014778:	18fb      	adds	r3, r7, r3
 801477a:	2203      	movs	r2, #3
 801477c:	701a      	strb	r2, [r3, #0]
            break;
 801477e:	e0e2      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2204      	movs	r2, #4
 8014784:	569a      	ldrsb	r2, [r3, r2]
 8014786:	2408      	movs	r4, #8
 8014788:	193b      	adds	r3, r7, r4
 801478a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801478c:	4b5d      	ldr	r3, [pc, #372]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801478e:	4a5e      	ldr	r2, [pc, #376]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014790:	589b      	ldr	r3, [r3, r2]
 8014792:	22b8      	movs	r2, #184	; 0xb8
 8014794:	5c9a      	ldrb	r2, [r3, r2]
 8014796:	193b      	adds	r3, r7, r4
 8014798:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 801479a:	4b5a      	ldr	r3, [pc, #360]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801479c:	4a5a      	ldr	r2, [pc, #360]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801479e:	589b      	ldr	r3, [r3, r2]
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	1939      	adds	r1, r7, r4
 80147a4:	2205      	movs	r2, #5
 80147a6:	0018      	movs	r0, r3
 80147a8:	f002 fefa 	bl	80175a0 <RegionVerify>
 80147ac:	1e03      	subs	r3, r0, #0
 80147ae:	d008      	beq.n	80147c2 <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80147b0:	4b54      	ldr	r3, [pc, #336]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80147b2:	4a55      	ldr	r2, [pc, #340]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80147b4:	589b      	ldr	r3, [r3, r2]
 80147b6:	193a      	adds	r2, r7, r4
 80147b8:	2100      	movs	r1, #0
 80147ba:	5651      	ldrsb	r1, [r2, r1]
 80147bc:	2285      	movs	r2, #133	; 0x85
 80147be:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80147c0:	e0c1      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147c2:	2317      	movs	r3, #23
 80147c4:	18fb      	adds	r3, r7, r3
 80147c6:	2203      	movs	r2, #3
 80147c8:	701a      	strb	r2, [r3, #0]
            break;
 80147ca:	e0bc      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	2204      	movs	r2, #4
 80147d0:	569a      	ldrsb	r2, [r3, r2]
 80147d2:	2408      	movs	r4, #8
 80147d4:	193b      	adds	r3, r7, r4
 80147d6:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 80147d8:	4b4a      	ldr	r3, [pc, #296]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80147da:	4a4b      	ldr	r2, [pc, #300]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80147dc:	589b      	ldr	r3, [r3, r2]
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	1939      	adds	r1, r7, r4
 80147e2:	220a      	movs	r2, #10
 80147e4:	0018      	movs	r0, r3
 80147e6:	f002 fedb 	bl	80175a0 <RegionVerify>
 80147ea:	1e03      	subs	r3, r0, #0
 80147ec:	d007      	beq.n	80147fe <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 80147ee:	4b45      	ldr	r3, [pc, #276]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80147f0:	4a45      	ldr	r2, [pc, #276]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80147f2:	589b      	ldr	r3, [r3, r2]
 80147f4:	193a      	adds	r2, r7, r4
 80147f6:	7812      	ldrb	r2, [r2, #0]
 80147f8:	b252      	sxtb	r2, r2
 80147fa:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80147fc:	e0a3      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147fe:	2317      	movs	r3, #23
 8014800:	18fb      	adds	r3, r7, r3
 8014802:	2203      	movs	r2, #3
 8014804:	701a      	strb	r2, [r3, #0]
            break;
 8014806:	e09e      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2204      	movs	r2, #4
 801480c:	569a      	ldrsb	r2, [r3, r2]
 801480e:	2408      	movs	r4, #8
 8014810:	193b      	adds	r3, r7, r4
 8014812:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8014814:	4b3b      	ldr	r3, [pc, #236]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014816:	4a3c      	ldr	r2, [pc, #240]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014818:	589b      	ldr	r3, [r3, r2]
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	1939      	adds	r1, r7, r4
 801481e:	2209      	movs	r2, #9
 8014820:	0018      	movs	r0, r3
 8014822:	f002 febd 	bl	80175a0 <RegionVerify>
 8014826:	1e03      	subs	r3, r0, #0
 8014828:	d008      	beq.n	801483c <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 801482a:	4b36      	ldr	r3, [pc, #216]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801482c:	4a36      	ldr	r2, [pc, #216]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801482e:	589b      	ldr	r3, [r3, r2]
 8014830:	193a      	adds	r2, r7, r4
 8014832:	2100      	movs	r1, #0
 8014834:	5651      	ldrsb	r1, [r2, r1]
 8014836:	2284      	movs	r2, #132	; 0x84
 8014838:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801483a:	e084      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801483c:	2317      	movs	r3, #23
 801483e:	18fb      	adds	r3, r7, r3
 8014840:	2203      	movs	r2, #3
 8014842:	701a      	strb	r2, [r3, #0]
            break;
 8014844:	e07f      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014846:	4b2f      	ldr	r3, [pc, #188]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014848:	4a2f      	ldr	r2, [pc, #188]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801484a:	589b      	ldr	r3, [r3, r2]
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	6852      	ldr	r2, [r2, #4]
 8014850:	609a      	str	r2, [r3, #8]
 8014852:	4a2c      	ldr	r2, [pc, #176]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014854:	492c      	ldr	r1, [pc, #176]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014856:	5852      	ldr	r2, [r2, r1]
 8014858:	689b      	ldr	r3, [r3, #8]
 801485a:	2188      	movs	r1, #136	; 0x88
 801485c:	5053      	str	r3, [r2, r1]
            break;
 801485e:	e072      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014860:	4b28      	ldr	r3, [pc, #160]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014862:	4a29      	ldr	r2, [pc, #164]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014864:	589b      	ldr	r3, [r3, r2]
 8014866:	687a      	ldr	r2, [r7, #4]
 8014868:	7912      	ldrb	r2, [r2, #4]
 801486a:	731a      	strb	r2, [r3, #12]
 801486c:	4a25      	ldr	r2, [pc, #148]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801486e:	4926      	ldr	r1, [pc, #152]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014870:	5852      	ldr	r2, [r2, r1]
 8014872:	7b19      	ldrb	r1, [r3, #12]
 8014874:	238c      	movs	r3, #140	; 0x8c
 8014876:	54d1      	strb	r1, [r2, r3]
            break;
 8014878:	e065      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801487a:	4b22      	ldr	r3, [pc, #136]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801487c:	4a22      	ldr	r2, [pc, #136]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801487e:	589a      	ldr	r2, [r3, r2]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	685b      	ldr	r3, [r3, #4]
 8014884:	21c0      	movs	r1, #192	; 0xc0
 8014886:	5053      	str	r3, [r2, r1]
            break;
 8014888:	e05d      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801488a:	4b1e      	ldr	r3, [pc, #120]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801488c:	4a1e      	ldr	r2, [pc, #120]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801488e:	589b      	ldr	r3, [r3, r2]
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	6852      	ldr	r2, [r2, #4]
 8014894:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 8014896:	e056      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	685b      	ldr	r3, [r3, #4]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d009      	beq.n	80148b4 <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	2217      	movs	r2, #23
 80148a6:	18bc      	adds	r4, r7, r2
 80148a8:	0018      	movs	r0, r3
 80148aa:	f7fe fc1b 	bl	80130e4 <RestoreCtxs>
 80148ae:	0003      	movs	r3, r0
 80148b0:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80148b2:	e048      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80148b4:	2317      	movs	r3, #23
 80148b6:	18fb      	adds	r3, r7, r3
 80148b8:	2203      	movs	r2, #3
 80148ba:	701a      	strb	r2, [r3, #0]
            break;
 80148bc:	e043      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	799b      	ldrb	r3, [r3, #6]
 80148c2:	2b01      	cmp	r3, #1
 80148c4:	d810      	bhi.n	80148e8 <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 80148c6:	4b0f      	ldr	r3, [pc, #60]	; (8014904 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80148c8:	4a0f      	ldr	r2, [pc, #60]	; (8014908 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80148ca:	5899      	ldr	r1, [r3, r2]
 80148cc:	23b0      	movs	r3, #176	; 0xb0
 80148ce:	005a      	lsls	r2, r3, #1
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	685b      	ldr	r3, [r3, #4]
 80148d4:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	0018      	movs	r0, r3
 80148dc:	f001 fe3a 	bl	8016554 <LoRaMacCryptoSetLrWanVersion>
 80148e0:	1e03      	subs	r3, r0, #0
 80148e2:	d02f      	beq.n	8014944 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80148e4:	2311      	movs	r3, #17
 80148e6:	e035      	b.n	8014954 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80148e8:	2317      	movs	r3, #23
 80148ea:	18fb      	adds	r3, r7, r3
 80148ec:	2203      	movs	r2, #3
 80148ee:	701a      	strb	r2, [r3, #0]
            }
            break;
 80148f0:	e028      	b.n	8014944 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80148f2:	2317      	movs	r3, #23
 80148f4:	18fc      	adds	r4, r7, r3
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	0018      	movs	r0, r3
 80148fa:	f000 fc8f 	bl	801521c <LoRaMacMibClassBSetRequestConfirm>
 80148fe:	0003      	movs	r3, r0
 8014900:	7023      	strb	r3, [r4, #0]
            break;
 8014902:	e020      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
 8014904:	200007d0 	.word	0x200007d0
 8014908:	00000484 	.word	0x00000484
 801490c:	08021740 	.word	0x08021740
            break;
 8014910:	46c0      	nop			; (mov r8, r8)
 8014912:	e018      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014914:	46c0      	nop			; (mov r8, r8)
 8014916:	e016      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014918:	46c0      	nop			; (mov r8, r8)
 801491a:	e014      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801491c:	46c0      	nop			; (mov r8, r8)
 801491e:	e012      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014920:	46c0      	nop			; (mov r8, r8)
 8014922:	e010      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014924:	46c0      	nop			; (mov r8, r8)
 8014926:	e00e      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014928:	46c0      	nop			; (mov r8, r8)
 801492a:	e00c      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801492c:	46c0      	nop			; (mov r8, r8)
 801492e:	e00a      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014930:	46c0      	nop			; (mov r8, r8)
 8014932:	e008      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014934:	46c0      	nop			; (mov r8, r8)
 8014936:	e006      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014938:	46c0      	nop			; (mov r8, r8)
 801493a:	e004      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801493c:	46c0      	nop			; (mov r8, r8)
 801493e:	e002      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014940:	46c0      	nop			; (mov r8, r8)
 8014942:	e000      	b.n	8014946 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014944:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 8014946:	f7fe fe19 	bl	801357c <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 801494a:	f7fe fe0f 	bl	801356c <EventMacNvmCtxChanged>
    return status;
 801494e:	2317      	movs	r3, #23
 8014950:	18fb      	adds	r3, r7, r3
 8014952:	781b      	ldrb	r3, [r3, #0]
}
 8014954:	0018      	movs	r0, r3
 8014956:	46bd      	mov	sp, r7
 8014958:	b007      	add	sp, #28
 801495a:	bd90      	pop	{r4, r7, pc}

0801495c <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801495c:	b5b0      	push	{r4, r5, r7, lr}
 801495e:	b086      	sub	sp, #24
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014964:	2317      	movs	r3, #23
 8014966:	18fb      	adds	r3, r7, r3
 8014968:	2202      	movs	r2, #2
 801496a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801496c:	230c      	movs	r3, #12
 801496e:	18fb      	adds	r3, r7, r3
 8014970:	2200      	movs	r2, #0
 8014972:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d101      	bne.n	801497e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801497a:	2303      	movs	r3, #3
 801497c:	e133      	b.n	8014be6 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 801497e:	f7fe fe49 	bl	8013614 <LoRaMacIsBusy>
 8014982:	1e03      	subs	r3, r0, #0
 8014984:	d001      	beq.n	801498a <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 8014986:	2301      	movs	r3, #1
 8014988:	e12d      	b.n	8014be6 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801498a:	f001 fa0b 	bl	8015da4 <LoRaMacConfirmQueueIsFull>
 801498e:	1e03      	subs	r3, r0, #0
 8014990:	d001      	beq.n	8014996 <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 8014992:	2301      	movs	r3, #1
 8014994:	e127      	b.n	8014be6 <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014996:	f001 f9fb 	bl	8015d90 <LoRaMacConfirmQueueGetCnt>
 801499a:	1e03      	subs	r3, r0, #0
 801499c:	d105      	bne.n	80149aa <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801499e:	4b94      	ldr	r3, [pc, #592]	; (8014bf0 <LoRaMacMlmeRequest+0x294>)
 80149a0:	2214      	movs	r2, #20
 80149a2:	2100      	movs	r1, #0
 80149a4:	0018      	movs	r0, r3
 80149a6:	f005 fa61 	bl	8019e6c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80149aa:	4b92      	ldr	r3, [pc, #584]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 80149ac:	4a92      	ldr	r2, [pc, #584]	; (8014bf8 <LoRaMacMlmeRequest+0x29c>)
 80149ae:	2101      	movs	r1, #1
 80149b0:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80149b2:	4b90      	ldr	r3, [pc, #576]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 80149b4:	4a91      	ldr	r2, [pc, #580]	; (8014bfc <LoRaMacMlmeRequest+0x2a0>)
 80149b6:	5c99      	ldrb	r1, [r3, r2]
 80149b8:	2004      	movs	r0, #4
 80149ba:	4301      	orrs	r1, r0
 80149bc:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	781a      	ldrb	r2, [r3, #0]
 80149c2:	2110      	movs	r1, #16
 80149c4:	187b      	adds	r3, r7, r1
 80149c6:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80149c8:	187b      	adds	r3, r7, r1
 80149ca:	2201      	movs	r2, #1
 80149cc:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 80149ce:	187b      	adds	r3, r7, r1
 80149d0:	2200      	movs	r2, #0
 80149d2:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	2b0e      	cmp	r3, #14
 80149da:	d900      	bls.n	80149de <LoRaMacMlmeRequest+0x82>
 80149dc:	e0d4      	b.n	8014b88 <LoRaMacMlmeRequest+0x22c>
 80149de:	009a      	lsls	r2, r3, #2
 80149e0:	4b87      	ldr	r3, [pc, #540]	; (8014c00 <LoRaMacMlmeRequest+0x2a4>)
 80149e2:	18d3      	adds	r3, r2, r3
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80149e8:	4a82      	ldr	r2, [pc, #520]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 80149ea:	23d0      	movs	r3, #208	; 0xd0
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	58d3      	ldr	r3, [r2, r3]
 80149f0:	2220      	movs	r2, #32
 80149f2:	4013      	ands	r3, r2
 80149f4:	d001      	beq.n	80149fa <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 80149f6:	2301      	movs	r3, #1
 80149f8:	e0f5      	b.n	8014be6 <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 80149fa:	f7fd feff 	bl	80127fc <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80149fe:	4b7d      	ldr	r3, [pc, #500]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 8014a00:	4a80      	ldr	r2, [pc, #512]	; (8014c04 <LoRaMacMlmeRequest+0x2a8>)
 8014a02:	589b      	ldr	r3, [r3, r2]
 8014a04:	7818      	ldrb	r0, [r3, #0]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	791b      	ldrb	r3, [r3, #4]
 8014a0a:	b259      	sxtb	r1, r3
 8014a0c:	4b79      	ldr	r3, [pc, #484]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 8014a0e:	4a7d      	ldr	r2, [pc, #500]	; (8014c04 <LoRaMacMlmeRequest+0x2a8>)
 8014a10:	589c      	ldr	r4, [r3, r2]
 8014a12:	2200      	movs	r2, #0
 8014a14:	f002 fedb 	bl	80177ce <RegionAlternateDr>
 8014a18:	0003      	movs	r3, r0
 8014a1a:	001a      	movs	r2, r3
 8014a1c:	2385      	movs	r3, #133	; 0x85
 8014a1e:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014a20:	2310      	movs	r3, #16
 8014a22:	18fb      	adds	r3, r7, r3
 8014a24:	2207      	movs	r2, #7
 8014a26:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 8014a28:	2517      	movs	r5, #23
 8014a2a:	197c      	adds	r4, r7, r5
 8014a2c:	20ff      	movs	r0, #255	; 0xff
 8014a2e:	f7fd fbab 	bl	8012188 <SendReJoinReq>
 8014a32:	0003      	movs	r3, r0
 8014a34:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 8014a36:	197b      	adds	r3, r7, r5
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d100      	bne.n	8014a40 <LoRaMacMlmeRequest+0xe4>
 8014a3e:	e0a5      	b.n	8014b8c <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014a40:	4b6c      	ldr	r3, [pc, #432]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 8014a42:	4a70      	ldr	r2, [pc, #448]	; (8014c04 <LoRaMacMlmeRequest+0x2a8>)
 8014a44:	589b      	ldr	r3, [r3, r2]
 8014a46:	7818      	ldrb	r0, [r3, #0]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	791b      	ldrb	r3, [r3, #4]
 8014a4c:	b259      	sxtb	r1, r3
 8014a4e:	4b69      	ldr	r3, [pc, #420]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 8014a50:	4a6c      	ldr	r2, [pc, #432]	; (8014c04 <LoRaMacMlmeRequest+0x2a8>)
 8014a52:	589c      	ldr	r4, [r3, r2]
 8014a54:	2201      	movs	r2, #1
 8014a56:	f002 feba 	bl	80177ce <RegionAlternateDr>
 8014a5a:	0003      	movs	r3, r0
 8014a5c:	001a      	movs	r2, r3
 8014a5e:	2385      	movs	r3, #133	; 0x85
 8014a60:	54e2      	strb	r2, [r4, r3]
            }
            break;
 8014a62:	e093      	b.n	8014b8c <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014a64:	2417      	movs	r4, #23
 8014a66:	193b      	adds	r3, r7, r4
 8014a68:	2200      	movs	r2, #0
 8014a6a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014a6c:	230c      	movs	r3, #12
 8014a6e:	18fb      	adds	r3, r7, r3
 8014a70:	2200      	movs	r2, #0
 8014a72:	0019      	movs	r1, r3
 8014a74:	2002      	movs	r0, #2
 8014a76:	f000 fd7d 	bl	8015574 <LoRaMacCommandsAddCmd>
 8014a7a:	1e03      	subs	r3, r0, #0
 8014a7c:	d100      	bne.n	8014a80 <LoRaMacMlmeRequest+0x124>
 8014a7e:	e087      	b.n	8014b90 <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014a80:	193b      	adds	r3, r7, r4
 8014a82:	2213      	movs	r2, #19
 8014a84:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014a86:	e083      	b.n	8014b90 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	889b      	ldrh	r3, [r3, #4]
 8014a8c:	2217      	movs	r2, #23
 8014a8e:	18bc      	adds	r4, r7, r2
 8014a90:	0018      	movs	r0, r3
 8014a92:	f7fe fa5d 	bl	8012f50 <SetTxContinuousWave>
 8014a96:	0003      	movs	r3, r0
 8014a98:	7023      	strb	r3, [r4, #0]
            break;
 8014a9a:	e080      	b.n	8014b9e <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	8898      	ldrh	r0, [r3, #4]
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6899      	ldr	r1, [r3, #8]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	7b1b      	ldrb	r3, [r3, #12]
 8014aa8:	2217      	movs	r2, #23
 8014aaa:	18bc      	adds	r4, r7, r2
 8014aac:	001a      	movs	r2, r3
 8014aae:	f7fe fa9b 	bl	8012fe8 <SetTxContinuousWave1>
 8014ab2:	0003      	movs	r3, r0
 8014ab4:	7023      	strb	r3, [r4, #0]
            break;
 8014ab6:	e072      	b.n	8014b9e <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014ab8:	2417      	movs	r4, #23
 8014aba:	193b      	adds	r3, r7, r4
 8014abc:	2200      	movs	r2, #0
 8014abe:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014ac0:	230c      	movs	r3, #12
 8014ac2:	18fb      	adds	r3, r7, r3
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	0019      	movs	r1, r3
 8014ac8:	200d      	movs	r0, #13
 8014aca:	f000 fd53 	bl	8015574 <LoRaMacCommandsAddCmd>
 8014ace:	1e03      	subs	r3, r0, #0
 8014ad0:	d060      	beq.n	8014b94 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014ad2:	193b      	adds	r3, r7, r4
 8014ad4:	2213      	movs	r2, #19
 8014ad6:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014ad8:	e05c      	b.n	8014b94 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8014ada:	4b46      	ldr	r3, [pc, #280]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 8014adc:	4a49      	ldr	r2, [pc, #292]	; (8014c04 <LoRaMacMlmeRequest+0x2a8>)
 8014ade:	589b      	ldr	r3, [r3, r2]
 8014ae0:	227c      	movs	r2, #124	; 0x7c
 8014ae2:	5c9b      	ldrb	r3, [r3, r2]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d157      	bne.n	8014b98 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014ae8:	2416      	movs	r4, #22
 8014aea:	193b      	adds	r3, r7, r4
 8014aec:	687a      	ldr	r2, [r7, #4]
 8014aee:	7912      	ldrb	r2, [r2, #4]
 8014af0:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	791b      	ldrb	r3, [r3, #4]
 8014af6:	075b      	lsls	r3, r3, #29
 8014af8:	0f5b      	lsrs	r3, r3, #29
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	0018      	movs	r0, r3
 8014afe:	f000 fb65 	bl	80151cc <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014b02:	210c      	movs	r1, #12
 8014b04:	187b      	adds	r3, r7, r1
 8014b06:	193a      	adds	r2, r7, r4
 8014b08:	7812      	ldrb	r2, [r2, #0]
 8014b0a:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8014b0c:	2417      	movs	r4, #23
 8014b0e:	193b      	adds	r3, r7, r4
 8014b10:	2200      	movs	r2, #0
 8014b12:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014b14:	187b      	adds	r3, r7, r1
 8014b16:	2201      	movs	r2, #1
 8014b18:	0019      	movs	r1, r3
 8014b1a:	2010      	movs	r0, #16
 8014b1c:	f000 fd2a 	bl	8015574 <LoRaMacCommandsAddCmd>
 8014b20:	1e03      	subs	r3, r0, #0
 8014b22:	d039      	beq.n	8014b98 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014b24:	193b      	adds	r3, r7, r4
 8014b26:	2213      	movs	r2, #19
 8014b28:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8014b2a:	e035      	b.n	8014b98 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014b2c:	2417      	movs	r4, #23
 8014b2e:	193b      	adds	r3, r7, r4
 8014b30:	2200      	movs	r2, #0
 8014b32:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014b34:	230c      	movs	r3, #12
 8014b36:	18fb      	adds	r3, r7, r3
 8014b38:	2200      	movs	r2, #0
 8014b3a:	0019      	movs	r1, r3
 8014b3c:	2012      	movs	r0, #18
 8014b3e:	f000 fd19 	bl	8015574 <LoRaMacCommandsAddCmd>
 8014b42:	1e03      	subs	r3, r0, #0
 8014b44:	d02a      	beq.n	8014b9c <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014b46:	193b      	adds	r3, r7, r4
 8014b48:	2213      	movs	r2, #19
 8014b4a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014b4c:	e026      	b.n	8014b9c <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014b4e:	2310      	movs	r3, #16
 8014b50:	18fb      	adds	r3, r7, r3
 8014b52:	2201      	movs	r2, #1
 8014b54:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014b56:	f000 faf7 	bl	8015148 <LoRaMacClassBIsAcquisitionInProgress>
 8014b5a:	0003      	movs	r3, r0
 8014b5c:	001a      	movs	r2, r3
 8014b5e:	2301      	movs	r3, #1
 8014b60:	4053      	eors	r3, r2
 8014b62:	b2db      	uxtb	r3, r3
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d00a      	beq.n	8014b7e <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014b68:	2000      	movs	r0, #0
 8014b6a:	f000 facf 	bl	801510c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014b6e:	2000      	movs	r0, #0
 8014b70:	f000 faf0 	bl	8015154 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014b74:	2317      	movs	r3, #23
 8014b76:	18fb      	adds	r3, r7, r3
 8014b78:	2200      	movs	r2, #0
 8014b7a:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014b7c:	e00f      	b.n	8014b9e <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 8014b7e:	2317      	movs	r3, #23
 8014b80:	18fb      	adds	r3, r7, r3
 8014b82:	2201      	movs	r2, #1
 8014b84:	701a      	strb	r2, [r3, #0]
            break;
 8014b86:	e00a      	b.n	8014b9e <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 8014b88:	46c0      	nop			; (mov r8, r8)
 8014b8a:	e008      	b.n	8014b9e <LoRaMacMlmeRequest+0x242>
            break;
 8014b8c:	46c0      	nop			; (mov r8, r8)
 8014b8e:	e006      	b.n	8014b9e <LoRaMacMlmeRequest+0x242>
            break;
 8014b90:	46c0      	nop			; (mov r8, r8)
 8014b92:	e004      	b.n	8014b9e <LoRaMacMlmeRequest+0x242>
            break;
 8014b94:	46c0      	nop			; (mov r8, r8)
 8014b96:	e002      	b.n	8014b9e <LoRaMacMlmeRequest+0x242>
            break;
 8014b98:	46c0      	nop			; (mov r8, r8)
 8014b9a:	e000      	b.n	8014b9e <LoRaMacMlmeRequest+0x242>
            break;
 8014b9c:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014b9e:	4a15      	ldr	r2, [pc, #84]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 8014ba0:	2391      	movs	r3, #145	; 0x91
 8014ba2:	00db      	lsls	r3, r3, #3
 8014ba4:	58d2      	ldr	r2, [r2, r3]
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014baa:	2317      	movs	r3, #23
 8014bac:	18fb      	adds	r3, r7, r3
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d00e      	beq.n	8014bd2 <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014bb4:	f001 f8ec 	bl	8015d90 <LoRaMacConfirmQueueGetCnt>
 8014bb8:	1e03      	subs	r3, r0, #0
 8014bba:	d111      	bne.n	8014be0 <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 8014bbc:	4b0d      	ldr	r3, [pc, #52]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 8014bbe:	4a12      	ldr	r2, [pc, #72]	; (8014c08 <LoRaMacMlmeRequest+0x2ac>)
 8014bc0:	2100      	movs	r1, #0
 8014bc2:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014bc4:	4b0b      	ldr	r3, [pc, #44]	; (8014bf4 <LoRaMacMlmeRequest+0x298>)
 8014bc6:	4a0d      	ldr	r2, [pc, #52]	; (8014bfc <LoRaMacMlmeRequest+0x2a0>)
 8014bc8:	5c99      	ldrb	r1, [r3, r2]
 8014bca:	2004      	movs	r0, #4
 8014bcc:	4381      	bics	r1, r0
 8014bce:	5499      	strb	r1, [r3, r2]
 8014bd0:	e006      	b.n	8014be0 <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014bd2:	2310      	movs	r3, #16
 8014bd4:	18fb      	adds	r3, r7, r3
 8014bd6:	0018      	movs	r0, r3
 8014bd8:	f000 ff6c 	bl	8015ab4 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8014bdc:	f7fe fcc6 	bl	801356c <EventMacNvmCtxChanged>
    }
    return status;
 8014be0:	2317      	movs	r3, #23
 8014be2:	18fb      	adds	r3, r7, r3
 8014be4:	781b      	ldrb	r3, [r3, #0]
}
 8014be6:	0018      	movs	r0, r3
 8014be8:	46bd      	mov	sp, r7
 8014bea:	b006      	add	sp, #24
 8014bec:	bdb0      	pop	{r4, r5, r7, pc}
 8014bee:	46c0      	nop			; (mov r8, r8)
 8014bf0:	20000c20 	.word	0x20000c20
 8014bf4:	200007d0 	.word	0x200007d0
 8014bf8:	00000451 	.word	0x00000451
 8014bfc:	00000481 	.word	0x00000481
 8014c00:	08021450 	.word	0x08021450
 8014c04:	00000484 	.word	0x00000484
 8014c08:	00000414 	.word	0x00000414

08014c0c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c0e:	b08d      	sub	sp, #52	; 0x34
 8014c10:	af02      	add	r7, sp, #8
 8014c12:	6078      	str	r0, [r7, #4]
 8014c14:	000a      	movs	r2, r1
 8014c16:	1cfb      	adds	r3, r7, #3
 8014c18:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014c1a:	2327      	movs	r3, #39	; 0x27
 8014c1c:	18fb      	adds	r3, r7, r3
 8014c1e:	2202      	movs	r2, #2
 8014c20:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014c22:	2326      	movs	r3, #38	; 0x26
 8014c24:	18fb      	adds	r3, r7, r3
 8014c26:	2200      	movs	r2, #0
 8014c28:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014c2a:	231d      	movs	r3, #29
 8014c2c:	18fb      	adds	r3, r7, r3
 8014c2e:	2200      	movs	r2, #0
 8014c30:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 8014c32:	231c      	movs	r3, #28
 8014c34:	18fb      	adds	r3, r7, r3
 8014c36:	2200      	movs	r2, #0
 8014c38:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d101      	bne.n	8014c44 <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014c40:	2303      	movs	r3, #3
 8014c42:	e11b      	b.n	8014e7c <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 8014c44:	f7fe fce6 	bl	8013614 <LoRaMacIsBusy>
 8014c48:	1e03      	subs	r3, r0, #0
 8014c4a:	d001      	beq.n	8014c50 <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	e115      	b.n	8014e7c <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 8014c50:	230c      	movs	r3, #12
 8014c52:	18fb      	adds	r3, r7, r3
 8014c54:	2200      	movs	r2, #0
 8014c56:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014c58:	4b8a      	ldr	r3, [pc, #552]	; (8014e84 <LoRaMacMcpsRequest+0x278>)
 8014c5a:	2214      	movs	r2, #20
 8014c5c:	2100      	movs	r1, #0
 8014c5e:	0018      	movs	r0, r3
 8014c60:	f005 f904 	bl	8019e6c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014c64:	4b88      	ldr	r3, [pc, #544]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014c66:	4a89      	ldr	r2, [pc, #548]	; (8014e8c <LoRaMacMcpsRequest+0x280>)
 8014c68:	2101      	movs	r1, #1
 8014c6a:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014c6c:	4b86      	ldr	r3, [pc, #536]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014c6e:	4a88      	ldr	r2, [pc, #544]	; (8014e90 <LoRaMacMcpsRequest+0x284>)
 8014c70:	2101      	movs	r1, #1
 8014c72:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	2b03      	cmp	r3, #3
 8014c7a:	d056      	beq.n	8014d2a <LoRaMacMcpsRequest+0x11e>
 8014c7c:	dc72      	bgt.n	8014d64 <LoRaMacMcpsRequest+0x158>
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d002      	beq.n	8014c88 <LoRaMacMcpsRequest+0x7c>
 8014c82:	2b01      	cmp	r3, #1
 8014c84:	d024      	beq.n	8014cd0 <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014c86:	e06d      	b.n	8014d64 <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 8014c88:	231c      	movs	r3, #28
 8014c8a:	18fb      	adds	r3, r7, r3
 8014c8c:	2201      	movs	r2, #1
 8014c8e:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8014c90:	4b7d      	ldr	r3, [pc, #500]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014c92:	4a80      	ldr	r2, [pc, #512]	; (8014e94 <LoRaMacMcpsRequest+0x288>)
 8014c94:	2101      	movs	r1, #1
 8014c96:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014c98:	230c      	movs	r3, #12
 8014c9a:	18fb      	adds	r3, r7, r3
 8014c9c:	781a      	ldrb	r2, [r3, #0]
 8014c9e:	211f      	movs	r1, #31
 8014ca0:	400a      	ands	r2, r1
 8014ca2:	1c11      	adds	r1, r2, #0
 8014ca4:	2240      	movs	r2, #64	; 0x40
 8014ca6:	430a      	orrs	r2, r1
 8014ca8:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8014caa:	2326      	movs	r3, #38	; 0x26
 8014cac:	18fb      	adds	r3, r7, r3
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	7912      	ldrb	r2, [r2, #4]
 8014cb2:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	689b      	ldr	r3, [r3, #8]
 8014cb8:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8014cba:	231e      	movs	r3, #30
 8014cbc:	18fb      	adds	r3, r7, r3
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	8992      	ldrh	r2, [r2, #12]
 8014cc2:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014cc4:	231d      	movs	r3, #29
 8014cc6:	18fb      	adds	r3, r7, r3
 8014cc8:	687a      	ldr	r2, [r7, #4]
 8014cca:	7b92      	ldrb	r2, [r2, #14]
 8014ccc:	701a      	strb	r2, [r3, #0]
            break;
 8014cce:	e04a      	b.n	8014d66 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8014cd0:	231c      	movs	r3, #28
 8014cd2:	18fb      	adds	r3, r7, r3
 8014cd4:	2201      	movs	r2, #1
 8014cd6:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	7bdb      	ldrb	r3, [r3, #15]
 8014cdc:	1c1a      	adds	r2, r3, #0
 8014cde:	b2d3      	uxtb	r3, r2
 8014ce0:	2b08      	cmp	r3, #8
 8014ce2:	d901      	bls.n	8014ce8 <LoRaMacMcpsRequest+0xdc>
 8014ce4:	2308      	movs	r3, #8
 8014ce6:	1c1a      	adds	r2, r3, #0
 8014ce8:	b2d1      	uxtb	r1, r2
 8014cea:	4b67      	ldr	r3, [pc, #412]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014cec:	4a69      	ldr	r2, [pc, #420]	; (8014e94 <LoRaMacMcpsRequest+0x288>)
 8014cee:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014cf0:	230c      	movs	r3, #12
 8014cf2:	18fb      	adds	r3, r7, r3
 8014cf4:	781a      	ldrb	r2, [r3, #0]
 8014cf6:	211f      	movs	r1, #31
 8014cf8:	400a      	ands	r2, r1
 8014cfa:	1c11      	adds	r1, r2, #0
 8014cfc:	2280      	movs	r2, #128	; 0x80
 8014cfe:	4252      	negs	r2, r2
 8014d00:	430a      	orrs	r2, r1
 8014d02:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8014d04:	2326      	movs	r3, #38	; 0x26
 8014d06:	18fb      	adds	r3, r7, r3
 8014d08:	687a      	ldr	r2, [r7, #4]
 8014d0a:	7912      	ldrb	r2, [r2, #4]
 8014d0c:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	689b      	ldr	r3, [r3, #8]
 8014d12:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014d14:	231e      	movs	r3, #30
 8014d16:	18fb      	adds	r3, r7, r3
 8014d18:	687a      	ldr	r2, [r7, #4]
 8014d1a:	8992      	ldrh	r2, [r2, #12]
 8014d1c:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014d1e:	231d      	movs	r3, #29
 8014d20:	18fb      	adds	r3, r7, r3
 8014d22:	687a      	ldr	r2, [r7, #4]
 8014d24:	7b92      	ldrb	r2, [r2, #14]
 8014d26:	701a      	strb	r2, [r3, #0]
            break;
 8014d28:	e01d      	b.n	8014d66 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8014d2a:	231c      	movs	r3, #28
 8014d2c:	18fb      	adds	r3, r7, r3
 8014d2e:	2201      	movs	r2, #1
 8014d30:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8014d32:	4b55      	ldr	r3, [pc, #340]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014d34:	4a57      	ldr	r2, [pc, #348]	; (8014e94 <LoRaMacMcpsRequest+0x288>)
 8014d36:	2101      	movs	r1, #1
 8014d38:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014d3a:	230c      	movs	r3, #12
 8014d3c:	18fb      	adds	r3, r7, r3
 8014d3e:	781a      	ldrb	r2, [r3, #0]
 8014d40:	2120      	movs	r1, #32
 8014d42:	4249      	negs	r1, r1
 8014d44:	430a      	orrs	r2, r1
 8014d46:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8014d4e:	231e      	movs	r3, #30
 8014d50:	18fb      	adds	r3, r7, r3
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	8912      	ldrh	r2, [r2, #8]
 8014d56:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8014d58:	231d      	movs	r3, #29
 8014d5a:	18fb      	adds	r3, r7, r3
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	7a92      	ldrb	r2, [r2, #10]
 8014d60:	701a      	strb	r2, [r3, #0]
            break;
 8014d62:	e000      	b.n	8014d66 <LoRaMacMcpsRequest+0x15a>
            break;
 8014d64:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014d66:	2114      	movs	r1, #20
 8014d68:	187b      	adds	r3, r7, r1
 8014d6a:	2202      	movs	r2, #2
 8014d6c:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014d6e:	4b46      	ldr	r3, [pc, #280]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014d70:	4a49      	ldr	r2, [pc, #292]	; (8014e98 <LoRaMacMcpsRequest+0x28c>)
 8014d72:	589b      	ldr	r3, [r3, r2]
 8014d74:	22b8      	movs	r2, #184	; 0xb8
 8014d76:	5c9a      	ldrb	r2, [r3, r2]
 8014d78:	187b      	adds	r3, r7, r1
 8014d7a:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8014d7c:	4b42      	ldr	r3, [pc, #264]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014d7e:	4a46      	ldr	r2, [pc, #280]	; (8014e98 <LoRaMacMcpsRequest+0x28c>)
 8014d80:	589b      	ldr	r3, [r3, r2]
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	187a      	adds	r2, r7, r1
 8014d86:	0011      	movs	r1, r2
 8014d88:	0018      	movs	r0, r3
 8014d8a:	f002 fba2 	bl	80174d2 <RegionGetPhyParam>
 8014d8e:	0003      	movs	r3, r0
 8014d90:	001a      	movs	r2, r3
 8014d92:	2110      	movs	r1, #16
 8014d94:	187b      	adds	r3, r7, r1
 8014d96:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014d98:	187b      	adds	r3, r7, r1
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	b259      	sxtb	r1, r3
 8014d9e:	231d      	movs	r3, #29
 8014da0:	18fa      	adds	r2, r7, r3
 8014da2:	18fb      	adds	r3, r7, r3
 8014da4:	1c0c      	adds	r4, r1, #0
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	b258      	sxtb	r0, r3
 8014daa:	b261      	sxtb	r1, r4
 8014dac:	4288      	cmp	r0, r1
 8014dae:	da00      	bge.n	8014db2 <LoRaMacMcpsRequest+0x1a6>
 8014db0:	1c23      	adds	r3, r4, #0
 8014db2:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8014db4:	231c      	movs	r3, #28
 8014db6:	18fb      	adds	r3, r7, r3
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d055      	beq.n	8014e6a <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8014dbe:	4b32      	ldr	r3, [pc, #200]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014dc0:	4a35      	ldr	r2, [pc, #212]	; (8014e98 <LoRaMacMcpsRequest+0x28c>)
 8014dc2:	589b      	ldr	r3, [r3, r2]
 8014dc4:	227e      	movs	r2, #126	; 0x7e
 8014dc6:	5c9b      	ldrb	r3, [r3, r2]
 8014dc8:	2201      	movs	r2, #1
 8014dca:	4053      	eors	r3, r2
 8014dcc:	b2db      	uxtb	r3, r3
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d022      	beq.n	8014e18 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 8014dd2:	2408      	movs	r4, #8
 8014dd4:	193b      	adds	r3, r7, r4
 8014dd6:	221d      	movs	r2, #29
 8014dd8:	18ba      	adds	r2, r7, r2
 8014dda:	7812      	ldrb	r2, [r2, #0]
 8014ddc:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014dde:	4b2a      	ldr	r3, [pc, #168]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014de0:	4a2d      	ldr	r2, [pc, #180]	; (8014e98 <LoRaMacMcpsRequest+0x28c>)
 8014de2:	589b      	ldr	r3, [r3, r2]
 8014de4:	22b8      	movs	r2, #184	; 0xb8
 8014de6:	5c9a      	ldrb	r2, [r3, r2]
 8014de8:	193b      	adds	r3, r7, r4
 8014dea:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8014dec:	4b26      	ldr	r3, [pc, #152]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014dee:	4a2a      	ldr	r2, [pc, #168]	; (8014e98 <LoRaMacMcpsRequest+0x28c>)
 8014df0:	589b      	ldr	r3, [r3, r2]
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	1939      	adds	r1, r7, r4
 8014df6:	2205      	movs	r2, #5
 8014df8:	0018      	movs	r0, r3
 8014dfa:	f002 fbd1 	bl	80175a0 <RegionVerify>
 8014dfe:	1e03      	subs	r3, r0, #0
 8014e00:	d008      	beq.n	8014e14 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014e02:	4b21      	ldr	r3, [pc, #132]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014e04:	4a24      	ldr	r2, [pc, #144]	; (8014e98 <LoRaMacMcpsRequest+0x28c>)
 8014e06:	589b      	ldr	r3, [r3, r2]
 8014e08:	193a      	adds	r2, r7, r4
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	5651      	ldrsb	r1, [r2, r1]
 8014e0e:	2285      	movs	r2, #133	; 0x85
 8014e10:	5499      	strb	r1, [r3, r2]
 8014e12:	e001      	b.n	8014e18 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014e14:	2303      	movs	r3, #3
 8014e16:	e031      	b.n	8014e7c <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014e18:	2627      	movs	r6, #39	; 0x27
 8014e1a:	19bc      	adds	r4, r7, r6
 8014e1c:	231e      	movs	r3, #30
 8014e1e:	18fb      	adds	r3, r7, r3
 8014e20:	881d      	ldrh	r5, [r3, #0]
 8014e22:	6a3a      	ldr	r2, [r7, #32]
 8014e24:	2326      	movs	r3, #38	; 0x26
 8014e26:	18fb      	adds	r3, r7, r3
 8014e28:	7819      	ldrb	r1, [r3, #0]
 8014e2a:	230c      	movs	r3, #12
 8014e2c:	18f8      	adds	r0, r7, r3
 8014e2e:	1cfb      	adds	r3, r7, #3
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	9300      	str	r3, [sp, #0]
 8014e34:	002b      	movs	r3, r5
 8014e36:	f7fd f86d 	bl	8011f14 <Send>
 8014e3a:	0003      	movs	r3, r0
 8014e3c:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8014e3e:	19bb      	adds	r3, r7, r6
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d10d      	bne.n	8014e62 <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	7819      	ldrb	r1, [r3, #0]
 8014e4a:	4b0f      	ldr	r3, [pc, #60]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014e4c:	4a13      	ldr	r2, [pc, #76]	; (8014e9c <LoRaMacMcpsRequest+0x290>)
 8014e4e:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014e50:	4b0d      	ldr	r3, [pc, #52]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014e52:	4a13      	ldr	r2, [pc, #76]	; (8014ea0 <LoRaMacMcpsRequest+0x294>)
 8014e54:	5c99      	ldrb	r1, [r3, r2]
 8014e56:	2001      	movs	r0, #1
 8014e58:	4301      	orrs	r1, r0
 8014e5a:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 8014e5c:	f7fe fb86 	bl	801356c <EventMacNvmCtxChanged>
 8014e60:	e003      	b.n	8014e6a <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014e62:	4b09      	ldr	r3, [pc, #36]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014e64:	4a0f      	ldr	r2, [pc, #60]	; (8014ea4 <LoRaMacMcpsRequest+0x298>)
 8014e66:	2100      	movs	r1, #0
 8014e68:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014e6a:	4a07      	ldr	r2, [pc, #28]	; (8014e88 <LoRaMacMcpsRequest+0x27c>)
 8014e6c:	2391      	movs	r3, #145	; 0x91
 8014e6e:	00db      	lsls	r3, r3, #3
 8014e70:	58d2      	ldr	r2, [r2, r3]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	611a      	str	r2, [r3, #16]

    return status;
 8014e76:	2327      	movs	r3, #39	; 0x27
 8014e78:	18fb      	adds	r3, r7, r3
 8014e7a:	781b      	ldrb	r3, [r3, #0]
}
 8014e7c:	0018      	movs	r0, r3
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	b00b      	add	sp, #44	; 0x2c
 8014e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e84:	20000c0c 	.word	0x20000c0c
 8014e88:	200007d0 	.word	0x200007d0
 8014e8c:	0000043d 	.word	0x0000043d
 8014e90:	00000412 	.word	0x00000412
 8014e94:	00000411 	.word	0x00000411
 8014e98:	00000484 	.word	0x00000484
 8014e9c:	0000043c 	.word	0x0000043c
 8014ea0:	00000481 	.word	0x00000481
 8014ea4:	00000414 	.word	0x00000414

08014ea8 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	0002      	movs	r2, r0
 8014eb0:	1dfb      	adds	r3, r7, #7
 8014eb2:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8014eb4:	210c      	movs	r1, #12
 8014eb6:	187b      	adds	r3, r7, r1
 8014eb8:	1dfa      	adds	r2, r7, #7
 8014eba:	7812      	ldrb	r2, [r2, #0]
 8014ebc:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8014ebe:	4b0b      	ldr	r3, [pc, #44]	; (8014eec <LoRaMacTestSetDutyCycleOn+0x44>)
 8014ec0:	4a0b      	ldr	r2, [pc, #44]	; (8014ef0 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014ec2:	589b      	ldr	r3, [r3, r2]
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	1879      	adds	r1, r7, r1
 8014ec8:	220f      	movs	r2, #15
 8014eca:	0018      	movs	r0, r3
 8014ecc:	f002 fb68 	bl	80175a0 <RegionVerify>
 8014ed0:	1e03      	subs	r3, r0, #0
 8014ed2:	d006      	beq.n	8014ee2 <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8014ed4:	4b05      	ldr	r3, [pc, #20]	; (8014eec <LoRaMacTestSetDutyCycleOn+0x44>)
 8014ed6:	4a06      	ldr	r2, [pc, #24]	; (8014ef0 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014ed8:	589b      	ldr	r3, [r3, r2]
 8014eda:	1dfa      	adds	r2, r7, #7
 8014edc:	21c9      	movs	r1, #201	; 0xc9
 8014ede:	7812      	ldrb	r2, [r2, #0]
 8014ee0:	545a      	strb	r2, [r3, r1]
    }
}
 8014ee2:	46c0      	nop			; (mov r8, r8)
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	b004      	add	sp, #16
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	46c0      	nop			; (mov r8, r8)
 8014eec:	200007d0 	.word	0x200007d0
 8014ef0:	00000484 	.word	0x00000484

08014ef4 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ef6:	b08b      	sub	sp, #44	; 0x2c
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	60f8      	str	r0, [r7, #12]
 8014efc:	60b9      	str	r1, [r7, #8]
 8014efe:	607a      	str	r2, [r7, #4]
 8014f00:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014f02:	2327      	movs	r3, #39	; 0x27
 8014f04:	18fb      	adds	r3, r7, r3
 8014f06:	2200      	movs	r2, #0
 8014f08:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8014f0a:	2426      	movs	r4, #38	; 0x26
 8014f0c:	193b      	adds	r3, r7, r4
 8014f0e:	68fa      	ldr	r2, [r7, #12]
 8014f10:	7c12      	ldrb	r2, [r2, #16]
 8014f12:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8014f14:	2325      	movs	r3, #37	; 0x25
 8014f16:	18fb      	adds	r3, r7, r3
 8014f18:	68fa      	ldr	r2, [r7, #12]
 8014f1a:	7c52      	ldrb	r2, [r2, #17]
 8014f1c:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	689a      	ldr	r2, [r3, #8]
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	795b      	ldrb	r3, [r3, #5]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d100      	bne.n	8014f30 <CalcNextV10X+0x3c>
 8014f2e:	e0a5      	b.n	801507c <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014f30:	211c      	movs	r1, #28
 8014f32:	187b      	adds	r3, r7, r1
 8014f34:	2202      	movs	r2, #2
 8014f36:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	7c9a      	ldrb	r2, [r3, #18]
 8014f3c:	187b      	adds	r3, r7, r1
 8014f3e:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	7cdb      	ldrb	r3, [r3, #19]
 8014f44:	187a      	adds	r2, r7, r1
 8014f46:	0011      	movs	r1, r2
 8014f48:	0018      	movs	r0, r3
 8014f4a:	f002 fac2 	bl	80174d2 <RegionGetPhyParam>
 8014f4e:	0003      	movs	r3, r0
 8014f50:	001a      	movs	r2, r3
 8014f52:	2118      	movs	r1, #24
 8014f54:	187b      	adds	r3, r7, r1
 8014f56:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 8014f58:	187b      	adds	r3, r7, r1
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	2124      	movs	r1, #36	; 0x24
 8014f5e:	187b      	adds	r3, r7, r1
 8014f60:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 8014f62:	193a      	adds	r2, r7, r4
 8014f64:	187b      	adds	r3, r7, r1
 8014f66:	1939      	adds	r1, r7, r4
 8014f68:	780c      	ldrb	r4, [r1, #0]
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	b258      	sxtb	r0, r3
 8014f6e:	b261      	sxtb	r1, r4
 8014f70:	4288      	cmp	r0, r1
 8014f72:	da00      	bge.n	8014f76 <CalcNextV10X+0x82>
 8014f74:	1c23      	adds	r3, r4, #0
 8014f76:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 8014f78:	2326      	movs	r3, #38	; 0x26
 8014f7a:	18fa      	adds	r2, r7, r3
 8014f7c:	2324      	movs	r3, #36	; 0x24
 8014f7e:	18fb      	adds	r3, r7, r3
 8014f80:	7812      	ldrb	r2, [r2, #0]
 8014f82:	b252      	sxtb	r2, r2
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	b25b      	sxtb	r3, r3
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d107      	bne.n	8014f9c <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8014f92:	2327      	movs	r3, #39	; 0x27
 8014f94:	18fb      	adds	r3, r7, r3
 8014f96:	2200      	movs	r2, #0
 8014f98:	701a      	strb	r2, [r3, #0]
 8014f9a:	e06f      	b.n	801507c <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	689b      	ldr	r3, [r3, #8]
 8014fa0:	68fa      	ldr	r2, [r7, #12]
 8014fa2:	8992      	ldrh	r2, [r2, #12]
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	d304      	bcc.n	8014fb2 <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 8014fa8:	2327      	movs	r3, #39	; 0x27
 8014faa:	18fb      	adds	r3, r7, r3
 8014fac:	2201      	movs	r2, #1
 8014fae:	701a      	strb	r2, [r3, #0]
 8014fb0:	e003      	b.n	8014fba <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 8014fb2:	2327      	movs	r3, #39	; 0x27
 8014fb4:	18fb      	adds	r3, r7, r3
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	689b      	ldr	r3, [r3, #8]
 8014fbe:	68fa      	ldr	r2, [r7, #12]
 8014fc0:	8992      	ldrh	r2, [r2, #12]
 8014fc2:	0011      	movs	r1, r2
 8014fc4:	68fa      	ldr	r2, [r7, #12]
 8014fc6:	89d2      	ldrh	r2, [r2, #14]
 8014fc8:	188a      	adds	r2, r1, r2
 8014fca:	4293      	cmp	r3, r2
 8014fcc:	d356      	bcc.n	801507c <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8014fce:	241c      	movs	r4, #28
 8014fd0:	193b      	adds	r3, r7, r4
 8014fd2:	2208      	movs	r2, #8
 8014fd4:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	7cdb      	ldrb	r3, [r3, #19]
 8014fda:	193a      	adds	r2, r7, r4
 8014fdc:	0011      	movs	r1, r2
 8014fde:	0018      	movs	r0, r3
 8014fe0:	f002 fa77 	bl	80174d2 <RegionGetPhyParam>
 8014fe4:	0003      	movs	r3, r0
 8014fe6:	001a      	movs	r2, r3
 8014fe8:	2518      	movs	r5, #24
 8014fea:	197b      	adds	r3, r7, r5
 8014fec:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8014fee:	197b      	adds	r3, r7, r5
 8014ff0:	681a      	ldr	r2, [r3, #0]
 8014ff2:	2325      	movs	r3, #37	; 0x25
 8014ff4:	18fb      	adds	r3, r7, r3
 8014ff6:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	689a      	ldr	r2, [r3, #8]
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	89db      	ldrh	r3, [r3, #14]
 8015000:	0019      	movs	r1, r3
 8015002:	0010      	movs	r0, r2
 8015004:	f7eb f90e 	bl	8000224 <__aeabi_uidivmod>
 8015008:	000b      	movs	r3, r1
 801500a:	2b01      	cmp	r3, #1
 801500c:	d136      	bne.n	801507c <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801500e:	193b      	adds	r3, r7, r4
 8015010:	2222      	movs	r2, #34	; 0x22
 8015012:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8015014:	193b      	adds	r3, r7, r4
 8015016:	2626      	movs	r6, #38	; 0x26
 8015018:	19ba      	adds	r2, r7, r6
 801501a:	7812      	ldrb	r2, [r2, #0]
 801501c:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	7c9a      	ldrb	r2, [r3, #18]
 8015022:	193b      	adds	r3, r7, r4
 8015024:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	7cdb      	ldrb	r3, [r3, #19]
 801502a:	193a      	adds	r2, r7, r4
 801502c:	0011      	movs	r1, r2
 801502e:	0018      	movs	r0, r3
 8015030:	f002 fa4f 	bl	80174d2 <RegionGetPhyParam>
 8015034:	0003      	movs	r3, r0
 8015036:	001a      	movs	r2, r3
 8015038:	197b      	adds	r3, r7, r5
 801503a:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 801503c:	197b      	adds	r3, r7, r5
 801503e:	681a      	ldr	r2, [r3, #0]
 8015040:	19bb      	adds	r3, r7, r6
 8015042:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8015044:	19ba      	adds	r2, r7, r6
 8015046:	2324      	movs	r3, #36	; 0x24
 8015048:	18fb      	adds	r3, r7, r3
 801504a:	7812      	ldrb	r2, [r2, #0]
 801504c:	b252      	sxtb	r2, r2
 801504e:	781b      	ldrb	r3, [r3, #0]
 8015050:	b25b      	sxtb	r3, r3
 8015052:	429a      	cmp	r2, r3
 8015054:	d112      	bne.n	801507c <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8015056:	2327      	movs	r3, #39	; 0x27
 8015058:	18fb      	adds	r3, r7, r3
 801505a:	2200      	movs	r2, #0
 801505c:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	791b      	ldrb	r3, [r3, #4]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d00a      	beq.n	801507c <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015066:	2110      	movs	r1, #16
 8015068:	187b      	adds	r3, r7, r1
 801506a:	2202      	movs	r2, #2
 801506c:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	7cdb      	ldrb	r3, [r3, #19]
 8015072:	187a      	adds	r2, r7, r1
 8015074:	0011      	movs	r1, r2
 8015076:	0018      	movs	r0, r3
 8015078:	f002 fa67 	bl	801754a <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	2226      	movs	r2, #38	; 0x26
 8015080:	18ba      	adds	r2, r7, r2
 8015082:	7812      	ldrb	r2, [r2, #0]
 8015084:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2225      	movs	r2, #37	; 0x25
 801508a:	18ba      	adds	r2, r7, r2
 801508c:	7812      	ldrb	r2, [r2, #0]
 801508e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015090:	2327      	movs	r3, #39	; 0x27
 8015092:	18fb      	adds	r3, r7, r3
 8015094:	781b      	ldrb	r3, [r3, #0]
}
 8015096:	0018      	movs	r0, r3
 8015098:	46bd      	mov	sp, r7
 801509a:	b00b      	add	sp, #44	; 0x2c
 801509c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801509e <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801509e:	b580      	push	{r7, lr}
 80150a0:	b084      	sub	sp, #16
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	60f8      	str	r0, [r7, #12]
 80150a6:	60b9      	str	r1, [r7, #8]
 80150a8:	607a      	str	r2, [r7, #4]
 80150aa:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	789b      	ldrb	r3, [r3, #2]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d107      	bne.n	80150c4 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	68b9      	ldr	r1, [r7, #8]
 80150ba:	68f8      	ldr	r0, [r7, #12]
 80150bc:	f7ff ff1a 	bl	8014ef4 <CalcNextV10X>
 80150c0:	0003      	movs	r3, r0
 80150c2:	e000      	b.n	80150c6 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80150c4:	2300      	movs	r3, #0
}
 80150c6:	0018      	movs	r0, r3
 80150c8:	46bd      	mov	sp, r7
 80150ca:	b004      	add	sp, #16
 80150cc:	bd80      	pop	{r7, pc}

080150ce <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 80150ce:	b580      	push	{r7, lr}
 80150d0:	b084      	sub	sp, #16
 80150d2:	af00      	add	r7, sp, #0
 80150d4:	60f8      	str	r0, [r7, #12]
 80150d6:	60b9      	str	r1, [r7, #8]
 80150d8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80150da:	46c0      	nop			; (mov r8, r8)
 80150dc:	46bd      	mov	sp, r7
 80150de:	b004      	add	sp, #16
 80150e0:	bd80      	pop	{r7, pc}

080150e2 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 80150e2:	b580      	push	{r7, lr}
 80150e4:	b082      	sub	sp, #8
 80150e6:	af00      	add	r7, sp, #0
 80150e8:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 80150ea:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 80150ec:	0018      	movs	r0, r3
 80150ee:	46bd      	mov	sp, r7
 80150f0:	b002      	add	sp, #8
 80150f2:	bd80      	pop	{r7, pc}

080150f4 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b082      	sub	sp, #8
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2200      	movs	r2, #0
 8015100:	601a      	str	r2, [r3, #0]
    return NULL;
 8015102:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015104:	0018      	movs	r0, r3
 8015106:	46bd      	mov	sp, r7
 8015108:	b002      	add	sp, #8
 801510a:	bd80      	pop	{r7, pc}

0801510c <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	0002      	movs	r2, r0
 8015114:	1dfb      	adds	r3, r7, #7
 8015116:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8015118:	46c0      	nop			; (mov r8, r8)
 801511a:	46bd      	mov	sp, r7
 801511c:	b002      	add	sp, #8
 801511e:	bd80      	pop	{r7, pc}

08015120 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	0002      	movs	r2, r0
 8015128:	1dfb      	adds	r3, r7, #7
 801512a:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 801512c:	46c0      	nop			; (mov r8, r8)
 801512e:	46bd      	mov	sp, r7
 8015130:	b002      	add	sp, #8
 8015132:	bd80      	pop	{r7, pc}

08015134 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	0002      	movs	r2, r0
 801513c:	1dfb      	adds	r3, r7, #7
 801513e:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8015140:	46c0      	nop			; (mov r8, r8)
 8015142:	46bd      	mov	sp, r7
 8015144:	b002      	add	sp, #8
 8015146:	bd80      	pop	{r7, pc}

08015148 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8015148:	b580      	push	{r7, lr}
 801514a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801514c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801514e:	0018      	movs	r0, r3
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}

08015154 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b082      	sub	sp, #8
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801515c:	46c0      	nop			; (mov r8, r8)
 801515e:	46bd      	mov	sp, r7
 8015160:	b002      	add	sp, #8
 8015162:	bd80      	pop	{r7, pc}

08015164 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b082      	sub	sp, #8
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801516c:	46c0      	nop			; (mov r8, r8)
 801516e:	46bd      	mov	sp, r7
 8015170:	b002      	add	sp, #8
 8015172:	bd80      	pop	{r7, pc}

08015174 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801517c:	46c0      	nop			; (mov r8, r8)
 801517e:	46bd      	mov	sp, r7
 8015180:	b002      	add	sp, #8
 8015182:	bd80      	pop	{r7, pc}

08015184 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	000a      	movs	r2, r1
 801518e:	1cbb      	adds	r3, r7, #2
 8015190:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015192:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015194:	0018      	movs	r0, r3
 8015196:	46bd      	mov	sp, r7
 8015198:	b002      	add	sp, #8
 801519a:	bd80      	pop	{r7, pc}

0801519c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801519c:	b580      	push	{r7, lr}
 801519e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80151a0:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80151a2:	0018      	movs	r0, r3
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}

080151a8 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80151ac:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80151ae:	0018      	movs	r0, r3
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}

080151b4 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80151b8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80151ba:	0018      	movs	r0, r3
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80151c4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80151c6:	0018      	movs	r0, r3
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	0002      	movs	r2, r0
 80151d4:	1dfb      	adds	r3, r7, #7
 80151d6:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80151d8:	46c0      	nop			; (mov r8, r8)
 80151da:	46bd      	mov	sp, r7
 80151dc:	b002      	add	sp, #8
 80151de:	bd80      	pop	{r7, pc}

080151e0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80151e4:	46c0      	nop			; (mov r8, r8)
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}

080151ea <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80151ea:	b580      	push	{r7, lr}
 80151ec:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80151ee:	46c0      	nop			; (mov r8, r8)
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bd80      	pop	{r7, pc}

080151f4 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b082      	sub	sp, #8
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	0002      	movs	r2, r0
 80151fc:	1dfb      	adds	r3, r7, #7
 80151fe:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015200:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8015202:	0018      	movs	r0, r3
 8015204:	46bd      	mov	sp, r7
 8015206:	b002      	add	sp, #8
 8015208:	bd80      	pop	{r7, pc}

0801520a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801520a:	b580      	push	{r7, lr}
 801520c:	b082      	sub	sp, #8
 801520e:	af00      	add	r7, sp, #0
 8015210:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015212:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8015214:	0018      	movs	r0, r3
 8015216:	46bd      	mov	sp, r7
 8015218:	b002      	add	sp, #8
 801521a:	bd80      	pop	{r7, pc}

0801521c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b082      	sub	sp, #8
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015224:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8015226:	0018      	movs	r0, r3
 8015228:	46bd      	mov	sp, r7
 801522a:	b002      	add	sp, #8
 801522c:	bd80      	pop	{r7, pc}

0801522e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801522e:	b580      	push	{r7, lr}
 8015230:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015232:	46c0      	nop			; (mov r8, r8)
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b082      	sub	sp, #8
 801523c:	af00      	add	r7, sp, #0
 801523e:	0002      	movs	r2, r0
 8015240:	6039      	str	r1, [r7, #0]
 8015242:	1dfb      	adds	r3, r7, #7
 8015244:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 8015246:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015248:	0018      	movs	r0, r3
 801524a:	46bd      	mov	sp, r7
 801524c:	b002      	add	sp, #8
 801524e:	bd80      	pop	{r7, pc}

08015250 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b082      	sub	sp, #8
 8015254:	af00      	add	r7, sp, #0
 8015256:	603a      	str	r2, [r7, #0]
 8015258:	1dbb      	adds	r3, r7, #6
 801525a:	1c02      	adds	r2, r0, #0
 801525c:	801a      	strh	r2, [r3, #0]
 801525e:	1d7b      	adds	r3, r7, #5
 8015260:	1c0a      	adds	r2, r1, #0
 8015262:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015264:	46c0      	nop			; (mov r8, r8)
 8015266:	46bd      	mov	sp, r7
 8015268:	b002      	add	sp, #8
 801526a:	bd80      	pop	{r7, pc}

0801526c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801526c:	b580      	push	{r7, lr}
 801526e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015270:	46c0      	nop			; (mov r8, r8)
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}

08015276 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015276:	b580      	push	{r7, lr}
 8015278:	b082      	sub	sp, #8
 801527a:	af00      	add	r7, sp, #0
 801527c:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 801527e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015280:	0018      	movs	r0, r3
 8015282:	46bd      	mov	sp, r7
 8015284:	b002      	add	sp, #8
 8015286:	bd80      	pop	{r7, pc}

08015288 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015290:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015292:	0018      	movs	r0, r3
 8015294:	46bd      	mov	sp, r7
 8015296:	b002      	add	sp, #8
 8015298:	bd80      	pop	{r7, pc}

0801529a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801529a:	b580      	push	{r7, lr}
 801529c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 801529e:	46c0      	nop			; (mov r8, r8)
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80152a8:	46c0      	nop			; (mov r8, r8)
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b084      	sub	sp, #16
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80152ba:	230e      	movs	r3, #14
 80152bc:	18fb      	adds	r3, r7, r3
 80152be:	2200      	movs	r2, #0
 80152c0:	801a      	strh	r2, [r3, #0]
 80152c2:	e00f      	b.n	80152e4 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 80152c4:	230e      	movs	r3, #14
 80152c6:	18fb      	adds	r3, r7, r3
 80152c8:	881b      	ldrh	r3, [r3, #0]
 80152ca:	68ba      	ldr	r2, [r7, #8]
 80152cc:	18d3      	adds	r3, r2, r3
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d001      	beq.n	80152d8 <IsSlotFree+0x2a>
        {
            return false;
 80152d4:	2300      	movs	r3, #0
 80152d6:	e00b      	b.n	80152f0 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80152d8:	210e      	movs	r1, #14
 80152da:	187b      	adds	r3, r7, r1
 80152dc:	881a      	ldrh	r2, [r3, #0]
 80152de:	187b      	adds	r3, r7, r1
 80152e0:	3201      	adds	r2, #1
 80152e2:	801a      	strh	r2, [r3, #0]
 80152e4:	230e      	movs	r3, #14
 80152e6:	18fb      	adds	r3, r7, r3
 80152e8:	881b      	ldrh	r3, [r3, #0]
 80152ea:	2b0f      	cmp	r3, #15
 80152ec:	d9ea      	bls.n	80152c4 <IsSlotFree+0x16>
        }
    }
    return true;
 80152ee:	2301      	movs	r3, #1
}
 80152f0:	0018      	movs	r0, r3
 80152f2:	46bd      	mov	sp, r7
 80152f4:	b004      	add	sp, #16
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80152fe:	1dfb      	adds	r3, r7, #7
 8015300:	2200      	movs	r2, #0
 8015302:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8015304:	e00a      	b.n	801531c <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 8015306:	1dfb      	adds	r3, r7, #7
 8015308:	781a      	ldrb	r2, [r3, #0]
 801530a:	1dfb      	adds	r3, r7, #7
 801530c:	3201      	adds	r2, #1
 801530e:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015310:	1dfb      	adds	r3, r7, #7
 8015312:	781b      	ldrb	r3, [r3, #0]
 8015314:	2b0f      	cmp	r3, #15
 8015316:	d101      	bne.n	801531c <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 8015318:	2300      	movs	r3, #0
 801531a:	e017      	b.n	801534c <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 801531c:	1dfb      	adds	r3, r7, #7
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	011b      	lsls	r3, r3, #4
 8015322:	3308      	adds	r3, #8
 8015324:	001a      	movs	r2, r3
 8015326:	4b0b      	ldr	r3, [pc, #44]	; (8015354 <MallocNewMacCommandSlot+0x5c>)
 8015328:	18d3      	adds	r3, r2, r3
 801532a:	0018      	movs	r0, r3
 801532c:	f7ff ffbf 	bl	80152ae <IsSlotFree>
 8015330:	0003      	movs	r3, r0
 8015332:	001a      	movs	r2, r3
 8015334:	2301      	movs	r3, #1
 8015336:	4053      	eors	r3, r2
 8015338:	b2db      	uxtb	r3, r3
 801533a:	2b00      	cmp	r3, #0
 801533c:	d1e3      	bne.n	8015306 <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 801533e:	1dfb      	adds	r3, r7, #7
 8015340:	781b      	ldrb	r3, [r3, #0]
 8015342:	011b      	lsls	r3, r3, #4
 8015344:	3308      	adds	r3, #8
 8015346:	001a      	movs	r2, r3
 8015348:	4b02      	ldr	r3, [pc, #8]	; (8015354 <MallocNewMacCommandSlot+0x5c>)
 801534a:	18d3      	adds	r3, r2, r3
}
 801534c:	0018      	movs	r0, r3
 801534e:	46bd      	mov	sp, r7
 8015350:	b002      	add	sp, #8
 8015352:	bd80      	pop	{r7, pc}
 8015354:	20000e08 	.word	0x20000e08

08015358 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d101      	bne.n	801536a <FreeMacCommandSlot+0x12>
    {
        return false;
 8015366:	2300      	movs	r3, #0
 8015368:	e006      	b.n	8015378 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	2210      	movs	r2, #16
 801536e:	2100      	movs	r1, #0
 8015370:	0018      	movs	r0, r3
 8015372:	f004 fd7b 	bl	8019e6c <memset1>

    return true;
 8015376:	2301      	movs	r3, #1
}
 8015378:	0018      	movs	r0, r3
 801537a:	46bd      	mov	sp, r7
 801537c:	b002      	add	sp, #8
 801537e:	bd80      	pop	{r7, pc}

08015380 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d101      	bne.n	8015392 <LinkedListInit+0x12>
    {
        return false;
 801538e:	2300      	movs	r3, #0
 8015390:	e006      	b.n	80153a0 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2200      	movs	r2, #0
 8015396:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2200      	movs	r2, #0
 801539c:	605a      	str	r2, [r3, #4]

    return true;
 801539e:	2301      	movs	r3, #1
}
 80153a0:	0018      	movs	r0, r3
 80153a2:	46bd      	mov	sp, r7
 80153a4:	b002      	add	sp, #8
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d002      	beq.n	80153be <LinkedListAdd+0x16>
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d101      	bne.n	80153c2 <LinkedListAdd+0x1a>
    {
        return false;
 80153be:	2300      	movs	r3, #0
 80153c0:	e015      	b.n	80153ee <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d102      	bne.n	80153d0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	683a      	ldr	r2, [r7, #0]
 80153ce:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d003      	beq.n	80153e0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	683a      	ldr	r2, [r7, #0]
 80153de:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	2200      	movs	r2, #0
 80153e4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	683a      	ldr	r2, [r7, #0]
 80153ea:	605a      	str	r2, [r3, #4]

    return true;
 80153ec:	2301      	movs	r3, #1
}
 80153ee:	0018      	movs	r0, r3
 80153f0:	46bd      	mov	sp, r7
 80153f2:	b002      	add	sp, #8
 80153f4:	bd80      	pop	{r7, pc}

080153f6 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80153f6:	b580      	push	{r7, lr}
 80153f8:	b084      	sub	sp, #16
 80153fa:	af00      	add	r7, sp, #0
 80153fc:	6078      	str	r0, [r7, #4]
 80153fe:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d002      	beq.n	801540c <LinkedListGetPrevious+0x16>
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d101      	bne.n	8015410 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801540c:	2300      	movs	r3, #0
 801540e:	e016      	b.n	801543e <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015416:	683a      	ldr	r2, [r7, #0]
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	429a      	cmp	r2, r3
 801541c:	d00c      	beq.n	8015438 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801541e:	e002      	b.n	8015426 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d007      	beq.n	801543c <LinkedListGetPrevious+0x46>
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	683a      	ldr	r2, [r7, #0]
 8015432:	429a      	cmp	r2, r3
 8015434:	d1f4      	bne.n	8015420 <LinkedListGetPrevious+0x2a>
 8015436:	e001      	b.n	801543c <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015438:	2300      	movs	r3, #0
 801543a:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801543c:	68fb      	ldr	r3, [r7, #12]
}
 801543e:	0018      	movs	r0, r3
 8015440:	46bd      	mov	sp, r7
 8015442:	b004      	add	sp, #16
 8015444:	bd80      	pop	{r7, pc}

08015446 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015446:	b580      	push	{r7, lr}
 8015448:	b084      	sub	sp, #16
 801544a:	af00      	add	r7, sp, #0
 801544c:	6078      	str	r0, [r7, #4]
 801544e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d002      	beq.n	801545c <LinkedListRemove+0x16>
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d101      	bne.n	8015460 <LinkedListRemove+0x1a>
    {
        return false;
 801545c:	2300      	movs	r3, #0
 801545e:	e023      	b.n	80154a8 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015460:	683a      	ldr	r2, [r7, #0]
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	0011      	movs	r1, r2
 8015466:	0018      	movs	r0, r3
 8015468:	f7ff ffc5 	bl	80153f6 <LinkedListGetPrevious>
 801546c:	0003      	movs	r3, r0
 801546e:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	683a      	ldr	r2, [r7, #0]
 8015476:	429a      	cmp	r2, r3
 8015478:	d103      	bne.n	8015482 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	681a      	ldr	r2, [r3, #0]
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	683a      	ldr	r2, [r7, #0]
 8015488:	429a      	cmp	r2, r3
 801548a:	d102      	bne.n	8015492 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	68fa      	ldr	r2, [r7, #12]
 8015490:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d003      	beq.n	80154a0 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	681a      	ldr	r2, [r3, #0]
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	2200      	movs	r2, #0
 80154a4:	601a      	str	r2, [r3, #0]

    return true;
 80154a6:	2301      	movs	r3, #1
}
 80154a8:	0018      	movs	r0, r3
 80154aa:	46bd      	mov	sp, r7
 80154ac:	b004      	add	sp, #16
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	0002      	movs	r2, r0
 80154b8:	1dfb      	adds	r3, r7, #7
 80154ba:	701a      	strb	r2, [r3, #0]
    switch( cid )
 80154bc:	1dfb      	adds	r3, r7, #7
 80154be:	781b      	ldrb	r3, [r3, #0]
 80154c0:	2b05      	cmp	r3, #5
 80154c2:	d003      	beq.n	80154cc <IsSticky+0x1c>
 80154c4:	db04      	blt.n	80154d0 <IsSticky+0x20>
 80154c6:	3b08      	subs	r3, #8
 80154c8:	2b02      	cmp	r3, #2
 80154ca:	d801      	bhi.n	80154d0 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80154cc:	2301      	movs	r3, #1
 80154ce:	e000      	b.n	80154d2 <IsSticky+0x22>
        default:
            return false;
 80154d0:	2300      	movs	r3, #0
    }
}
 80154d2:	0018      	movs	r0, r3
 80154d4:	46bd      	mov	sp, r7
 80154d6:	b002      	add	sp, #8
 80154d8:	bd80      	pop	{r7, pc}
	...

080154dc <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 80154e0:	4b04      	ldr	r3, [pc, #16]	; (80154f4 <NvmCtxCallback+0x18>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d002      	beq.n	80154ee <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 80154e8:	4b02      	ldr	r3, [pc, #8]	; (80154f4 <NvmCtxCallback+0x18>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	4798      	blx	r3
    }
}
 80154ee:	46c0      	nop			; (mov r8, r8)
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}
 80154f4:	20000e04 	.word	0x20000e04

080154f8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b082      	sub	sp, #8
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8015500:	4b08      	ldr	r3, [pc, #32]	; (8015524 <LoRaMacCommandsInit+0x2c>)
 8015502:	22fc      	movs	r2, #252	; 0xfc
 8015504:	2100      	movs	r1, #0
 8015506:	0018      	movs	r0, r3
 8015508:	f004 fcb0 	bl	8019e6c <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 801550c:	4b05      	ldr	r3, [pc, #20]	; (8015524 <LoRaMacCommandsInit+0x2c>)
 801550e:	0018      	movs	r0, r3
 8015510:	f7ff ff36 	bl	8015380 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8015514:	4b04      	ldr	r3, [pc, #16]	; (8015528 <LoRaMacCommandsInit+0x30>)
 8015516:	687a      	ldr	r2, [r7, #4]
 8015518:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 801551a:	2300      	movs	r3, #0
}
 801551c:	0018      	movs	r0, r3
 801551e:	46bd      	mov	sp, r7
 8015520:	b002      	add	sp, #8
 8015522:	bd80      	pop	{r7, pc}
 8015524:	20000e08 	.word	0x20000e08
 8015528:	20000e04 	.word	0x20000e04

0801552c <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d007      	beq.n	801554a <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 801553a:	6879      	ldr	r1, [r7, #4]
 801553c:	4b05      	ldr	r3, [pc, #20]	; (8015554 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 801553e:	22fc      	movs	r2, #252	; 0xfc
 8015540:	0018      	movs	r0, r3
 8015542:	f004 fc55 	bl	8019df0 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8015546:	2300      	movs	r3, #0
 8015548:	e000      	b.n	801554c <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801554a:	2301      	movs	r3, #1
    }
}
 801554c:	0018      	movs	r0, r3
 801554e:	46bd      	mov	sp, r7
 8015550:	b002      	add	sp, #8
 8015552:	bd80      	pop	{r7, pc}
 8015554:	20000e08 	.word	0x20000e08

08015558 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	22fc      	movs	r2, #252	; 0xfc
 8015564:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8015566:	4b02      	ldr	r3, [pc, #8]	; (8015570 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8015568:	0018      	movs	r0, r3
 801556a:	46bd      	mov	sp, r7
 801556c:	b002      	add	sp, #8
 801556e:	bd80      	pop	{r7, pc}
 8015570:	20000e08 	.word	0x20000e08

08015574 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015574:	b590      	push	{r4, r7, lr}
 8015576:	b087      	sub	sp, #28
 8015578:	af00      	add	r7, sp, #0
 801557a:	60b9      	str	r1, [r7, #8]
 801557c:	607a      	str	r2, [r7, #4]
 801557e:	230f      	movs	r3, #15
 8015580:	18fb      	adds	r3, r7, r3
 8015582:	1c02      	adds	r2, r0, #0
 8015584:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d101      	bne.n	8015590 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801558c:	2301      	movs	r3, #1
 801558e:	e03c      	b.n	801560a <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015590:	f7ff feb2 	bl	80152f8 <MallocNewMacCommandSlot>
 8015594:	0003      	movs	r3, r0
 8015596:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d101      	bne.n	80155a2 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801559e:	2302      	movs	r3, #2
 80155a0:	e033      	b.n	801560a <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 80155a2:	697a      	ldr	r2, [r7, #20]
 80155a4:	4b1b      	ldr	r3, [pc, #108]	; (8015614 <LoRaMacCommandsAddCmd+0xa0>)
 80155a6:	0011      	movs	r1, r2
 80155a8:	0018      	movs	r0, r3
 80155aa:	f7ff fefd 	bl	80153a8 <LinkedListAdd>
 80155ae:	0003      	movs	r3, r0
 80155b0:	001a      	movs	r2, r3
 80155b2:	2301      	movs	r3, #1
 80155b4:	4053      	eors	r3, r2
 80155b6:	b2db      	uxtb	r3, r3
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d001      	beq.n	80155c0 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 80155bc:	2305      	movs	r3, #5
 80155be:	e024      	b.n	801560a <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	240f      	movs	r4, #15
 80155c4:	193a      	adds	r2, r7, r4
 80155c6:	7812      	ldrb	r2, [r2, #0]
 80155c8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	687a      	ldr	r2, [r7, #4]
 80155ce:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	3305      	adds	r3, #5
 80155d4:	687a      	ldr	r2, [r7, #4]
 80155d6:	b292      	uxth	r2, r2
 80155d8:	68b9      	ldr	r1, [r7, #8]
 80155da:	0018      	movs	r0, r3
 80155dc:	f004 fc08 	bl	8019df0 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80155e0:	193b      	adds	r3, r7, r4
 80155e2:	781b      	ldrb	r3, [r3, #0]
 80155e4:	0018      	movs	r0, r3
 80155e6:	f7ff ff63 	bl	80154b0 <IsSticky>
 80155ea:	0003      	movs	r3, r0
 80155ec:	001a      	movs	r2, r3
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80155f2:	4b08      	ldr	r3, [pc, #32]	; (8015614 <LoRaMacCommandsAddCmd+0xa0>)
 80155f4:	22f8      	movs	r2, #248	; 0xf8
 80155f6:	589a      	ldr	r2, [r3, r2]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	18d3      	adds	r3, r2, r3
 80155fc:	1c5a      	adds	r2, r3, #1
 80155fe:	4b05      	ldr	r3, [pc, #20]	; (8015614 <LoRaMacCommandsAddCmd+0xa0>)
 8015600:	21f8      	movs	r1, #248	; 0xf8
 8015602:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8015604:	f7ff ff6a 	bl	80154dc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8015608:	2300      	movs	r3, #0
}
 801560a:	0018      	movs	r0, r3
 801560c:	46bd      	mov	sp, r7
 801560e:	b007      	add	sp, #28
 8015610:	bd90      	pop	{r4, r7, pc}
 8015612:	46c0      	nop			; (mov r8, r8)
 8015614:	20000e08 	.word	0x20000e08

08015618 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b082      	sub	sp, #8
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d101      	bne.n	801562a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015626:	2301      	movs	r3, #1
 8015628:	e028      	b.n	801567c <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	4b15      	ldr	r3, [pc, #84]	; (8015684 <LoRaMacCommandsRemoveCmd+0x6c>)
 801562e:	0011      	movs	r1, r2
 8015630:	0018      	movs	r0, r3
 8015632:	f7ff ff08 	bl	8015446 <LinkedListRemove>
 8015636:	0003      	movs	r3, r0
 8015638:	001a      	movs	r2, r3
 801563a:	2301      	movs	r3, #1
 801563c:	4053      	eors	r3, r2
 801563e:	b2db      	uxtb	r3, r3
 8015640:	2b00      	cmp	r3, #0
 8015642:	d001      	beq.n	8015648 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015644:	2303      	movs	r3, #3
 8015646:	e019      	b.n	801567c <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015648:	4b0e      	ldr	r3, [pc, #56]	; (8015684 <LoRaMacCommandsRemoveCmd+0x6c>)
 801564a:	22f8      	movs	r2, #248	; 0xf8
 801564c:	589a      	ldr	r2, [r3, r2]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	689b      	ldr	r3, [r3, #8]
 8015652:	1ad3      	subs	r3, r2, r3
 8015654:	1e5a      	subs	r2, r3, #1
 8015656:	4b0b      	ldr	r3, [pc, #44]	; (8015684 <LoRaMacCommandsRemoveCmd+0x6c>)
 8015658:	21f8      	movs	r1, #248	; 0xf8
 801565a:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	0018      	movs	r0, r3
 8015660:	f7ff fe7a 	bl	8015358 <FreeMacCommandSlot>
 8015664:	0003      	movs	r3, r0
 8015666:	001a      	movs	r2, r3
 8015668:	2301      	movs	r3, #1
 801566a:	4053      	eors	r3, r2
 801566c:	b2db      	uxtb	r3, r3
 801566e:	2b00      	cmp	r3, #0
 8015670:	d001      	beq.n	8015676 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015672:	2305      	movs	r3, #5
 8015674:	e002      	b.n	801567c <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8015676:	f7ff ff31 	bl	80154dc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801567a:	2300      	movs	r3, #0
}
 801567c:	0018      	movs	r0, r3
 801567e:	46bd      	mov	sp, r7
 8015680:	b002      	add	sp, #8
 8015682:	bd80      	pop	{r7, pc}
 8015684:	20000e08 	.word	0x20000e08

08015688 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b082      	sub	sp, #8
 801568c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801568e:	4b11      	ldr	r3, [pc, #68]	; (80156d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015694:	e013      	b.n	80156be <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	7b1b      	ldrb	r3, [r3, #12]
 801569a:	2201      	movs	r2, #1
 801569c:	4053      	eors	r3, r2
 801569e:	b2db      	uxtb	r3, r3
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d009      	beq.n	80156b8 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	0018      	movs	r0, r3
 80156ae:	f7ff ffb3 	bl	8015618 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80156b2:	683b      	ldr	r3, [r7, #0]
 80156b4:	607b      	str	r3, [r7, #4]
 80156b6:	e002      	b.n	80156be <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d1e8      	bne.n	8015696 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 80156c4:	f7ff ff0a 	bl	80154dc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80156c8:	2300      	movs	r3, #0
}
 80156ca:	0018      	movs	r0, r3
 80156cc:	46bd      	mov	sp, r7
 80156ce:	b002      	add	sp, #8
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	46c0      	nop			; (mov r8, r8)
 80156d4:	20000e08 	.word	0x20000e08

080156d8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 80156de:	4b0f      	ldr	r3, [pc, #60]	; (801571c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80156e4:	e00f      	b.n	8015706 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	791b      	ldrb	r3, [r3, #4]
 80156f0:	0018      	movs	r0, r3
 80156f2:	f7ff fedd 	bl	80154b0 <IsSticky>
 80156f6:	1e03      	subs	r3, r0, #0
 80156f8:	d003      	beq.n	8015702 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	0018      	movs	r0, r3
 80156fe:	f7ff ff8b 	bl	8015618 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015702:	683b      	ldr	r3, [r7, #0]
 8015704:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d1ec      	bne.n	80156e6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 801570c:	f7ff fee6 	bl	80154dc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8015710:	2300      	movs	r3, #0
}
 8015712:	0018      	movs	r0, r3
 8015714:	46bd      	mov	sp, r7
 8015716:	b002      	add	sp, #8
 8015718:	bd80      	pop	{r7, pc}
 801571a:	46c0      	nop			; (mov r8, r8)
 801571c:	20000e08 	.word	0x20000e08

08015720 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d101      	bne.n	8015732 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801572e:	2301      	movs	r3, #1
 8015730:	e005      	b.n	801573e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8015732:	4b05      	ldr	r3, [pc, #20]	; (8015748 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015734:	22f8      	movs	r2, #248	; 0xf8
 8015736:	589a      	ldr	r2, [r3, r2]
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801573c:	2300      	movs	r3, #0
}
 801573e:	0018      	movs	r0, r3
 8015740:	46bd      	mov	sp, r7
 8015742:	b002      	add	sp, #8
 8015744:	bd80      	pop	{r7, pc}
 8015746:	46c0      	nop			; (mov r8, r8)
 8015748:	20000e08 	.word	0x20000e08

0801574c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801574c:	b590      	push	{r4, r7, lr}
 801574e:	b089      	sub	sp, #36	; 0x24
 8015750:	af00      	add	r7, sp, #0
 8015752:	60f8      	str	r0, [r7, #12]
 8015754:	60b9      	str	r1, [r7, #8]
 8015756:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 8015758:	4b2a      	ldr	r3, [pc, #168]	; (8015804 <LoRaMacCommandsSerializeCmds+0xb8>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801575e:	231b      	movs	r3, #27
 8015760:	18fb      	adds	r3, r7, r3
 8015762:	2200      	movs	r2, #0
 8015764:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d002      	beq.n	8015772 <LoRaMacCommandsSerializeCmds+0x26>
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d12d      	bne.n	80157ce <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015772:	2301      	movs	r3, #1
 8015774:	e042      	b.n	80157fc <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015776:	241b      	movs	r4, #27
 8015778:	193b      	adds	r3, r7, r4
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	68fa      	ldr	r2, [r7, #12]
 801577e:	1ad2      	subs	r2, r2, r3
 8015780:	69fb      	ldr	r3, [r7, #28]
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	3301      	adds	r3, #1
 8015786:	429a      	cmp	r2, r3
 8015788:	d325      	bcc.n	80157d6 <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 801578a:	193b      	adds	r3, r7, r4
 801578c:	781b      	ldrb	r3, [r3, #0]
 801578e:	193a      	adds	r2, r7, r4
 8015790:	1c59      	adds	r1, r3, #1
 8015792:	7011      	strb	r1, [r2, #0]
 8015794:	001a      	movs	r2, r3
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	189b      	adds	r3, r3, r2
 801579a:	69fa      	ldr	r2, [r7, #28]
 801579c:	7912      	ldrb	r2, [r2, #4]
 801579e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80157a0:	193b      	adds	r3, r7, r4
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	687a      	ldr	r2, [r7, #4]
 80157a6:	18d0      	adds	r0, r2, r3
 80157a8:	69fb      	ldr	r3, [r7, #28]
 80157aa:	1d59      	adds	r1, r3, #5
 80157ac:	69fb      	ldr	r3, [r7, #28]
 80157ae:	689b      	ldr	r3, [r3, #8]
 80157b0:	b29b      	uxth	r3, r3
 80157b2:	001a      	movs	r2, r3
 80157b4:	f004 fb1c 	bl	8019df0 <memcpy1>
            itr += curElement->PayloadSize;
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	689b      	ldr	r3, [r3, #8]
 80157bc:	b2d9      	uxtb	r1, r3
 80157be:	193b      	adds	r3, r7, r4
 80157c0:	193a      	adds	r2, r7, r4
 80157c2:	7812      	ldrb	r2, [r2, #0]
 80157c4:	188a      	adds	r2, r1, r2
 80157c6:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80157c8:	69fb      	ldr	r3, [r7, #28]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d1d0      	bne.n	8015776 <LoRaMacCommandsSerializeCmds+0x2a>
 80157d4:	e00a      	b.n	80157ec <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 80157d6:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80157d8:	e008      	b.n	80157ec <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80157da:	69fb      	ldr	r3, [r7, #28]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	0018      	movs	r0, r3
 80157e4:	f7ff ff18 	bl	8015618 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d1f3      	bne.n	80157da <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	0018      	movs	r0, r3
 80157f6:	f7ff ff93 	bl	8015720 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80157fa:	2300      	movs	r3, #0
}
 80157fc:	0018      	movs	r0, r3
 80157fe:	46bd      	mov	sp, r7
 8015800:	b009      	add	sp, #36	; 0x24
 8015802:	bd90      	pop	{r4, r7, pc}
 8015804:	20000e08 	.word	0x20000e08

08015808 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b084      	sub	sp, #16
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d101      	bne.n	801581a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015816:	2301      	movs	r3, #1
 8015818:	e016      	b.n	8015848 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 801581a:	4b0d      	ldr	r3, [pc, #52]	; (8015850 <LoRaMacCommandsStickyCmdsPending+0x48>)
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2200      	movs	r2, #0
 8015824:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8015826:	e00b      	b.n	8015840 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	7b1b      	ldrb	r3, [r3, #12]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d004      	beq.n	801583a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2201      	movs	r2, #1
 8015834:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8015836:	2300      	movs	r3, #0
 8015838:	e006      	b.n	8015848 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d1f0      	bne.n	8015828 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015846:	2300      	movs	r3, #0
}
 8015848:	0018      	movs	r0, r3
 801584a:	46bd      	mov	sp, r7
 801584c:	b004      	add	sp, #16
 801584e:	bd80      	pop	{r7, pc}
 8015850:	20000e08 	.word	0x20000e08

08015854 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b084      	sub	sp, #16
 8015858:	af00      	add	r7, sp, #0
 801585a:	0002      	movs	r2, r0
 801585c:	1dfb      	adds	r3, r7, #7
 801585e:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 8015860:	230f      	movs	r3, #15
 8015862:	18fb      	adds	r3, r7, r3
 8015864:	2200      	movs	r2, #0
 8015866:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 8015868:	1dfb      	adds	r3, r7, #7
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	2b13      	cmp	r3, #19
 801586e:	d84a      	bhi.n	8015906 <LoRaMacCommandsGetCmdSize+0xb2>
 8015870:	009a      	lsls	r2, r3, #2
 8015872:	4b29      	ldr	r3, [pc, #164]	; (8015918 <LoRaMacCommandsGetCmdSize+0xc4>)
 8015874:	18d3      	adds	r3, r2, r3
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801587a:	230f      	movs	r3, #15
 801587c:	18fb      	adds	r3, r7, r3
 801587e:	2203      	movs	r2, #3
 8015880:	701a      	strb	r2, [r3, #0]
            break;
 8015882:	e041      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015884:	230f      	movs	r3, #15
 8015886:	18fb      	adds	r3, r7, r3
 8015888:	2205      	movs	r2, #5
 801588a:	701a      	strb	r2, [r3, #0]
            break;
 801588c:	e03c      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801588e:	230f      	movs	r3, #15
 8015890:	18fb      	adds	r3, r7, r3
 8015892:	2202      	movs	r2, #2
 8015894:	701a      	strb	r2, [r3, #0]
            break;
 8015896:	e037      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015898:	230f      	movs	r3, #15
 801589a:	18fb      	adds	r3, r7, r3
 801589c:	2205      	movs	r2, #5
 801589e:	701a      	strb	r2, [r3, #0]
            break;
 80158a0:	e032      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80158a2:	230f      	movs	r3, #15
 80158a4:	18fb      	adds	r3, r7, r3
 80158a6:	2201      	movs	r2, #1
 80158a8:	701a      	strb	r2, [r3, #0]
            break;
 80158aa:	e02d      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80158ac:	230f      	movs	r3, #15
 80158ae:	18fb      	adds	r3, r7, r3
 80158b0:	2206      	movs	r2, #6
 80158b2:	701a      	strb	r2, [r3, #0]
            break;
 80158b4:	e028      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80158b6:	230f      	movs	r3, #15
 80158b8:	18fb      	adds	r3, r7, r3
 80158ba:	2202      	movs	r2, #2
 80158bc:	701a      	strb	r2, [r3, #0]
            break;
 80158be:	e023      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80158c0:	230f      	movs	r3, #15
 80158c2:	18fb      	adds	r3, r7, r3
 80158c4:	2202      	movs	r2, #2
 80158c6:	701a      	strb	r2, [r3, #0]
            break;
 80158c8:	e01e      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80158ca:	230f      	movs	r3, #15
 80158cc:	18fb      	adds	r3, r7, r3
 80158ce:	2205      	movs	r2, #5
 80158d0:	701a      	strb	r2, [r3, #0]
            break;
 80158d2:	e019      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80158d4:	230f      	movs	r3, #15
 80158d6:	18fb      	adds	r3, r7, r3
 80158d8:	2206      	movs	r2, #6
 80158da:	701a      	strb	r2, [r3, #0]
            break;
 80158dc:	e014      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80158de:	230f      	movs	r3, #15
 80158e0:	18fb      	adds	r3, r7, r3
 80158e2:	2201      	movs	r2, #1
 80158e4:	701a      	strb	r2, [r3, #0]
            break;
 80158e6:	e00f      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80158e8:	230f      	movs	r3, #15
 80158ea:	18fb      	adds	r3, r7, r3
 80158ec:	2205      	movs	r2, #5
 80158ee:	701a      	strb	r2, [r3, #0]
            break;
 80158f0:	e00a      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80158f2:	230f      	movs	r3, #15
 80158f4:	18fb      	adds	r3, r7, r3
 80158f6:	2204      	movs	r2, #4
 80158f8:	701a      	strb	r2, [r3, #0]
            break;
 80158fa:	e005      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80158fc:	230f      	movs	r3, #15
 80158fe:	18fb      	adds	r3, r7, r3
 8015900:	2204      	movs	r2, #4
 8015902:	701a      	strb	r2, [r3, #0]
            break;
 8015904:	e000      	b.n	8015908 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015906:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 8015908:	230f      	movs	r3, #15
 801590a:	18fb      	adds	r3, r7, r3
 801590c:	781b      	ldrb	r3, [r3, #0]
}
 801590e:	0018      	movs	r0, r3
 8015910:	46bd      	mov	sp, r7
 8015912:	b004      	add	sp, #16
 8015914:	bd80      	pop	{r7, pc}
 8015916:	46c0      	nop			; (mov r8, r8)
 8015918:	0802149c 	.word	0x0802149c

0801591c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015924:	4b08      	ldr	r3, [pc, #32]	; (8015948 <IncreaseBufferPointer+0x2c>)
 8015926:	691b      	ldr	r3, [r3, #16]
 8015928:	3310      	adds	r3, #16
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	429a      	cmp	r2, r3
 801592e:	d103      	bne.n	8015938 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015930:	4b05      	ldr	r3, [pc, #20]	; (8015948 <IncreaseBufferPointer+0x2c>)
 8015932:	691b      	ldr	r3, [r3, #16]
 8015934:	607b      	str	r3, [r7, #4]
 8015936:	e002      	b.n	801593e <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	3304      	adds	r3, #4
 801593c:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801593e:	687b      	ldr	r3, [r7, #4]
}
 8015940:	0018      	movs	r0, r3
 8015942:	46bd      	mov	sp, r7
 8015944:	b002      	add	sp, #8
 8015946:	bd80      	pop	{r7, pc}
 8015948:	20000f1c 	.word	0x20000f1c

0801594c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b082      	sub	sp, #8
 8015950:	af00      	add	r7, sp, #0
 8015952:	0002      	movs	r2, r0
 8015954:	1dfb      	adds	r3, r7, #7
 8015956:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 8015958:	1dfb      	adds	r3, r7, #7
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d101      	bne.n	8015964 <IsListEmpty+0x18>
    {
        return true;
 8015960:	2301      	movs	r3, #1
 8015962:	e000      	b.n	8015966 <IsListEmpty+0x1a>
    }
    return false;
 8015964:	2300      	movs	r3, #0
}
 8015966:	0018      	movs	r0, r3
 8015968:	46bd      	mov	sp, r7
 801596a:	b002      	add	sp, #8
 801596c:	bd80      	pop	{r7, pc}

0801596e <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801596e:	b580      	push	{r7, lr}
 8015970:	b082      	sub	sp, #8
 8015972:	af00      	add	r7, sp, #0
 8015974:	0002      	movs	r2, r0
 8015976:	1dfb      	adds	r3, r7, #7
 8015978:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801597a:	1dfb      	adds	r3, r7, #7
 801597c:	781b      	ldrb	r3, [r3, #0]
 801597e:	2b04      	cmp	r3, #4
 8015980:	d901      	bls.n	8015986 <IsListFull+0x18>
    {
        return true;
 8015982:	2301      	movs	r3, #1
 8015984:	e000      	b.n	8015988 <IsListFull+0x1a>
    }
    return false;
 8015986:	2300      	movs	r3, #0
}
 8015988:	0018      	movs	r0, r3
 801598a:	46bd      	mov	sp, r7
 801598c:	b002      	add	sp, #8
 801598e:	bd80      	pop	{r7, pc}

08015990 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b086      	sub	sp, #24
 8015994:	af00      	add	r7, sp, #0
 8015996:	60b9      	str	r1, [r7, #8]
 8015998:	607a      	str	r2, [r7, #4]
 801599a:	230f      	movs	r3, #15
 801599c:	18fb      	adds	r3, r7, r3
 801599e:	1c02      	adds	r2, r0, #0
 80159a0:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 80159a2:	68bb      	ldr	r3, [r7, #8]
 80159a4:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80159a6:	4b18      	ldr	r3, [pc, #96]	; (8015a08 <GetElement+0x78>)
 80159a8:	691b      	ldr	r3, [r3, #16]
 80159aa:	7d1b      	ldrb	r3, [r3, #20]
 80159ac:	0018      	movs	r0, r3
 80159ae:	f7ff ffcd 	bl	801594c <IsListEmpty>
 80159b2:	1e03      	subs	r3, r0, #0
 80159b4:	d001      	beq.n	80159ba <GetElement+0x2a>
    {
        return NULL;
 80159b6:	2300      	movs	r3, #0
 80159b8:	e022      	b.n	8015a00 <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 80159ba:	2313      	movs	r3, #19
 80159bc:	18fb      	adds	r3, r7, r3
 80159be:	2200      	movs	r2, #0
 80159c0:	701a      	strb	r2, [r3, #0]
 80159c2:	e014      	b.n	80159ee <GetElement+0x5e>
    {
        if( element->Request == request )
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	781b      	ldrb	r3, [r3, #0]
 80159c8:	220f      	movs	r2, #15
 80159ca:	18ba      	adds	r2, r7, r2
 80159cc:	7812      	ldrb	r2, [r2, #0]
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d101      	bne.n	80159d6 <GetElement+0x46>
        {
            // We have found the element
            return element;
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	e014      	b.n	8015a00 <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	0018      	movs	r0, r3
 80159da:	f7ff ff9f 	bl	801591c <IncreaseBufferPointer>
 80159de:	0003      	movs	r3, r0
 80159e0:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 80159e2:	2113      	movs	r1, #19
 80159e4:	187b      	adds	r3, r7, r1
 80159e6:	781a      	ldrb	r2, [r3, #0]
 80159e8:	187b      	adds	r3, r7, r1
 80159ea:	3201      	adds	r2, #1
 80159ec:	701a      	strb	r2, [r3, #0]
 80159ee:	4b06      	ldr	r3, [pc, #24]	; (8015a08 <GetElement+0x78>)
 80159f0:	691b      	ldr	r3, [r3, #16]
 80159f2:	7d1b      	ldrb	r3, [r3, #20]
 80159f4:	2213      	movs	r2, #19
 80159f6:	18ba      	adds	r2, r7, r2
 80159f8:	7812      	ldrb	r2, [r2, #0]
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d3e2      	bcc.n	80159c4 <GetElement+0x34>
    }

    return NULL;
 80159fe:	2300      	movs	r3, #0
}
 8015a00:	0018      	movs	r0, r3
 8015a02:	46bd      	mov	sp, r7
 8015a04:	b006      	add	sp, #24
 8015a06:	bd80      	pop	{r7, pc}
 8015a08:	20000f1c 	.word	0x20000f1c

08015a0c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
 8015a14:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8015a16:	4b13      	ldr	r3, [pc, #76]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8015a1c:	4b11      	ldr	r3, [pc, #68]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a1e:	4a12      	ldr	r2, [pc, #72]	; (8015a68 <LoRaMacConfirmQueueInit+0x5c>)
 8015a20:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8015a22:	4b10      	ldr	r3, [pc, #64]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a24:	691b      	ldr	r3, [r3, #16]
 8015a26:	2200      	movs	r2, #0
 8015a28:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015a2a:	4b0e      	ldr	r3, [pc, #56]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a2c:	691b      	ldr	r3, [r3, #16]
 8015a2e:	001a      	movs	r2, r3
 8015a30:	4b0c      	ldr	r3, [pc, #48]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a32:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015a34:	4b0b      	ldr	r3, [pc, #44]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a36:	691b      	ldr	r3, [r3, #16]
 8015a38:	001a      	movs	r2, r3
 8015a3a:	4b0a      	ldr	r3, [pc, #40]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a3c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8015a3e:	4b09      	ldr	r3, [pc, #36]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a40:	691b      	ldr	r3, [r3, #16]
 8015a42:	2214      	movs	r2, #20
 8015a44:	21ff      	movs	r1, #255	; 0xff
 8015a46:	0018      	movs	r0, r3
 8015a48:	f004 fa10 	bl	8019e6c <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015a4c:	4b05      	ldr	r3, [pc, #20]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a4e:	691b      	ldr	r3, [r3, #16]
 8015a50:	2201      	movs	r2, #1
 8015a52:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8015a54:	4b03      	ldr	r3, [pc, #12]	; (8015a64 <LoRaMacConfirmQueueInit+0x58>)
 8015a56:	683a      	ldr	r2, [r7, #0]
 8015a58:	60da      	str	r2, [r3, #12]
}
 8015a5a:	46c0      	nop			; (mov r8, r8)
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	b002      	add	sp, #8
 8015a60:	bd80      	pop	{r7, pc}
 8015a62:	46c0      	nop			; (mov r8, r8)
 8015a64:	20000f1c 	.word	0x20000f1c
 8015a68:	20000f04 	.word	0x20000f04

08015a6c <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d007      	beq.n	8015a8a <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8015a7a:	6879      	ldr	r1, [r7, #4]
 8015a7c:	4b05      	ldr	r3, [pc, #20]	; (8015a94 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 8015a7e:	2216      	movs	r2, #22
 8015a80:	0018      	movs	r0, r3
 8015a82:	f004 f9b5 	bl	8019df0 <memcpy1>
        return true;
 8015a86:	2301      	movs	r3, #1
 8015a88:	e000      	b.n	8015a8c <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 8015a8a:	2300      	movs	r3, #0
    }
}
 8015a8c:	0018      	movs	r0, r3
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	b002      	add	sp, #8
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	20000f04 	.word	0x20000f04

08015a98 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b082      	sub	sp, #8
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2216      	movs	r2, #22
 8015aa4:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8015aa6:	4b02      	ldr	r3, [pc, #8]	; (8015ab0 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8015aa8:	0018      	movs	r0, r3
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	b002      	add	sp, #8
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	20000f04 	.word	0x20000f04

08015ab4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015abc:	4b17      	ldr	r3, [pc, #92]	; (8015b1c <LoRaMacConfirmQueueAdd+0x68>)
 8015abe:	691b      	ldr	r3, [r3, #16]
 8015ac0:	7d1b      	ldrb	r3, [r3, #20]
 8015ac2:	0018      	movs	r0, r3
 8015ac4:	f7ff ff53 	bl	801596e <IsListFull>
 8015ac8:	1e03      	subs	r3, r0, #0
 8015aca:	d001      	beq.n	8015ad0 <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 8015acc:	2300      	movs	r3, #0
 8015ace:	e021      	b.n	8015b14 <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015ad0:	4b12      	ldr	r3, [pc, #72]	; (8015b1c <LoRaMacConfirmQueueAdd+0x68>)
 8015ad2:	689b      	ldr	r3, [r3, #8]
 8015ad4:	687a      	ldr	r2, [r7, #4]
 8015ad6:	7812      	ldrb	r2, [r2, #0]
 8015ad8:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015ada:	4b10      	ldr	r3, [pc, #64]	; (8015b1c <LoRaMacConfirmQueueAdd+0x68>)
 8015adc:	689b      	ldr	r3, [r3, #8]
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	7852      	ldrb	r2, [r2, #1]
 8015ae2:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015ae4:	4b0d      	ldr	r3, [pc, #52]	; (8015b1c <LoRaMacConfirmQueueAdd+0x68>)
 8015ae6:	689b      	ldr	r3, [r3, #8]
 8015ae8:	687a      	ldr	r2, [r7, #4]
 8015aea:	78d2      	ldrb	r2, [r2, #3]
 8015aec:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015aee:	4b0b      	ldr	r3, [pc, #44]	; (8015b1c <LoRaMacConfirmQueueAdd+0x68>)
 8015af0:	689b      	ldr	r3, [r3, #8]
 8015af2:	2200      	movs	r2, #0
 8015af4:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8015af6:	4b09      	ldr	r3, [pc, #36]	; (8015b1c <LoRaMacConfirmQueueAdd+0x68>)
 8015af8:	691b      	ldr	r3, [r3, #16]
 8015afa:	7d1a      	ldrb	r2, [r3, #20]
 8015afc:	3201      	adds	r2, #1
 8015afe:	b2d2      	uxtb	r2, r2
 8015b00:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015b02:	4b06      	ldr	r3, [pc, #24]	; (8015b1c <LoRaMacConfirmQueueAdd+0x68>)
 8015b04:	689b      	ldr	r3, [r3, #8]
 8015b06:	0018      	movs	r0, r3
 8015b08:	f7ff ff08 	bl	801591c <IncreaseBufferPointer>
 8015b0c:	0002      	movs	r2, r0
 8015b0e:	4b03      	ldr	r3, [pc, #12]	; (8015b1c <LoRaMacConfirmQueueAdd+0x68>)
 8015b10:	609a      	str	r2, [r3, #8]

    return true;
 8015b12:	2301      	movs	r3, #1
}
 8015b14:	0018      	movs	r0, r3
 8015b16:	46bd      	mov	sp, r7
 8015b18:	b002      	add	sp, #8
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	20000f1c 	.word	0x20000f1c

08015b20 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015b24:	4b0d      	ldr	r3, [pc, #52]	; (8015b5c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015b26:	691b      	ldr	r3, [r3, #16]
 8015b28:	7d1b      	ldrb	r3, [r3, #20]
 8015b2a:	0018      	movs	r0, r3
 8015b2c:	f7ff ff0e 	bl	801594c <IsListEmpty>
 8015b30:	1e03      	subs	r3, r0, #0
 8015b32:	d001      	beq.n	8015b38 <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 8015b34:	2300      	movs	r3, #0
 8015b36:	e00e      	b.n	8015b56 <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8015b38:	4b08      	ldr	r3, [pc, #32]	; (8015b5c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015b3a:	691b      	ldr	r3, [r3, #16]
 8015b3c:	7d1a      	ldrb	r2, [r3, #20]
 8015b3e:	3a01      	subs	r2, #1
 8015b40:	b2d2      	uxtb	r2, r2
 8015b42:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015b44:	4b05      	ldr	r3, [pc, #20]	; (8015b5c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	0018      	movs	r0, r3
 8015b4a:	f7ff fee7 	bl	801591c <IncreaseBufferPointer>
 8015b4e:	0002      	movs	r2, r0
 8015b50:	4b02      	ldr	r3, [pc, #8]	; (8015b5c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015b52:	605a      	str	r2, [r3, #4]

    return true;
 8015b54:	2301      	movs	r3, #1
}
 8015b56:	0018      	movs	r0, r3
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}
 8015b5c:	20000f1c 	.word	0x20000f1c

08015b60 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b084      	sub	sp, #16
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	0002      	movs	r2, r0
 8015b68:	1dfb      	adds	r3, r7, #7
 8015b6a:	701a      	strb	r2, [r3, #0]
 8015b6c:	1dbb      	adds	r3, r7, #6
 8015b6e:	1c0a      	adds	r2, r1, #0
 8015b70:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8015b72:	2300      	movs	r3, #0
 8015b74:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015b76:	4b13      	ldr	r3, [pc, #76]	; (8015bc4 <LoRaMacConfirmQueueSetStatus+0x64>)
 8015b78:	691b      	ldr	r3, [r3, #16]
 8015b7a:	7d1b      	ldrb	r3, [r3, #20]
 8015b7c:	0018      	movs	r0, r3
 8015b7e:	f7ff fee5 	bl	801594c <IsListEmpty>
 8015b82:	0003      	movs	r3, r0
 8015b84:	001a      	movs	r2, r3
 8015b86:	2301      	movs	r3, #1
 8015b88:	4053      	eors	r3, r2
 8015b8a:	b2db      	uxtb	r3, r3
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d014      	beq.n	8015bba <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015b90:	4b0c      	ldr	r3, [pc, #48]	; (8015bc4 <LoRaMacConfirmQueueSetStatus+0x64>)
 8015b92:	6859      	ldr	r1, [r3, #4]
 8015b94:	4b0b      	ldr	r3, [pc, #44]	; (8015bc4 <LoRaMacConfirmQueueSetStatus+0x64>)
 8015b96:	689a      	ldr	r2, [r3, #8]
 8015b98:	1dbb      	adds	r3, r7, #6
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	0018      	movs	r0, r3
 8015b9e:	f7ff fef7 	bl	8015990 <GetElement>
 8015ba2:	0003      	movs	r3, r0
 8015ba4:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d006      	beq.n	8015bba <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	1dfa      	adds	r2, r7, #7
 8015bb0:	7812      	ldrb	r2, [r2, #0]
 8015bb2:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	2201      	movs	r2, #1
 8015bb8:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8015bba:	46c0      	nop			; (mov r8, r8)
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	b004      	add	sp, #16
 8015bc0:	bd80      	pop	{r7, pc}
 8015bc2:	46c0      	nop			; (mov r8, r8)
 8015bc4:	20000f1c 	.word	0x20000f1c

08015bc8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b084      	sub	sp, #16
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	0002      	movs	r2, r0
 8015bd0:	1dfb      	adds	r3, r7, #7
 8015bd2:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015bd8:	4b11      	ldr	r3, [pc, #68]	; (8015c20 <LoRaMacConfirmQueueGetStatus+0x58>)
 8015bda:	691b      	ldr	r3, [r3, #16]
 8015bdc:	7d1b      	ldrb	r3, [r3, #20]
 8015bde:	0018      	movs	r0, r3
 8015be0:	f7ff feb4 	bl	801594c <IsListEmpty>
 8015be4:	0003      	movs	r3, r0
 8015be6:	001a      	movs	r2, r3
 8015be8:	2301      	movs	r3, #1
 8015bea:	4053      	eors	r3, r2
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d010      	beq.n	8015c14 <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015bf2:	4b0b      	ldr	r3, [pc, #44]	; (8015c20 <LoRaMacConfirmQueueGetStatus+0x58>)
 8015bf4:	6859      	ldr	r1, [r3, #4]
 8015bf6:	4b0a      	ldr	r3, [pc, #40]	; (8015c20 <LoRaMacConfirmQueueGetStatus+0x58>)
 8015bf8:	689a      	ldr	r2, [r3, #8]
 8015bfa:	1dfb      	adds	r3, r7, #7
 8015bfc:	781b      	ldrb	r3, [r3, #0]
 8015bfe:	0018      	movs	r0, r3
 8015c00:	f7ff fec6 	bl	8015990 <GetElement>
 8015c04:	0003      	movs	r3, r0
 8015c06:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d002      	beq.n	8015c14 <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	785b      	ldrb	r3, [r3, #1]
 8015c12:	e000      	b.n	8015c16 <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015c14:	2301      	movs	r3, #1
}
 8015c16:	0018      	movs	r0, r3
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	b004      	add	sp, #16
 8015c1c:	bd80      	pop	{r7, pc}
 8015c1e:	46c0      	nop			; (mov r8, r8)
 8015c20:	20000f1c 	.word	0x20000f1c

08015c24 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b084      	sub	sp, #16
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	0002      	movs	r2, r0
 8015c2c:	1dfb      	adds	r3, r7, #7
 8015c2e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015c30:	4b18      	ldr	r3, [pc, #96]	; (8015c94 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015c32:	685b      	ldr	r3, [r3, #4]
 8015c34:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8015c36:	4b17      	ldr	r3, [pc, #92]	; (8015c94 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015c38:	691b      	ldr	r3, [r3, #16]
 8015c3a:	1dfa      	adds	r2, r7, #7
 8015c3c:	7812      	ldrb	r2, [r2, #0]
 8015c3e:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015c40:	4b14      	ldr	r3, [pc, #80]	; (8015c94 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015c42:	691b      	ldr	r3, [r3, #16]
 8015c44:	7d1b      	ldrb	r3, [r3, #20]
 8015c46:	0018      	movs	r0, r3
 8015c48:	f7ff fe80 	bl	801594c <IsListEmpty>
 8015c4c:	0003      	movs	r3, r0
 8015c4e:	001a      	movs	r2, r3
 8015c50:	2301      	movs	r3, #1
 8015c52:	4053      	eors	r3, r2
 8015c54:	b2db      	uxtb	r3, r3
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d018      	beq.n	8015c8c <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	1dfa      	adds	r2, r7, #7
 8015c5e:	7812      	ldrb	r2, [r2, #0]
 8015c60:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	78db      	ldrb	r3, [r3, #3]
 8015c66:	2201      	movs	r2, #1
 8015c68:	4053      	eors	r3, r2
 8015c6a:	b2db      	uxtb	r3, r3
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d002      	beq.n	8015c76 <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	2201      	movs	r2, #1
 8015c74:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	0018      	movs	r0, r3
 8015c7a:	f7ff fe4f 	bl	801591c <IncreaseBufferPointer>
 8015c7e:	0003      	movs	r3, r0
 8015c80:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015c82:	4b04      	ldr	r3, [pc, #16]	; (8015c94 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015c84:	689b      	ldr	r3, [r3, #8]
 8015c86:	68fa      	ldr	r2, [r7, #12]
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d1e6      	bne.n	8015c5a <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 8015c8c:	46c0      	nop			; (mov r8, r8)
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	b004      	add	sp, #16
 8015c92:	bd80      	pop	{r7, pc}
 8015c94:	20000f1c 	.word	0x20000f1c

08015c98 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	0002      	movs	r2, r0
 8015ca0:	1dfb      	adds	r3, r7, #7
 8015ca2:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8015ca4:	4b08      	ldr	r3, [pc, #32]	; (8015cc8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015ca6:	6859      	ldr	r1, [r3, #4]
 8015ca8:	4b07      	ldr	r3, [pc, #28]	; (8015cc8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015caa:	689a      	ldr	r2, [r3, #8]
 8015cac:	1dfb      	adds	r3, r7, #7
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	0018      	movs	r0, r3
 8015cb2:	f7ff fe6d 	bl	8015990 <GetElement>
 8015cb6:	1e03      	subs	r3, r0, #0
 8015cb8:	d001      	beq.n	8015cbe <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 8015cba:	2301      	movs	r3, #1
 8015cbc:	e000      	b.n	8015cc0 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 8015cbe:	2300      	movs	r3, #0
}
 8015cc0:	0018      	movs	r0, r3
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	b002      	add	sp, #8
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	20000f1c 	.word	0x20000f1c

08015ccc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b084      	sub	sp, #16
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8015cd4:	4b2d      	ldr	r3, [pc, #180]	; (8015d8c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015cd6:	691a      	ldr	r2, [r3, #16]
 8015cd8:	230e      	movs	r3, #14
 8015cda:	18fb      	adds	r3, r7, r3
 8015cdc:	7d12      	ldrb	r2, [r2, #20]
 8015cde:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 8015ce0:	230d      	movs	r3, #13
 8015ce2:	18fb      	adds	r3, r7, r3
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8015ce8:	230f      	movs	r3, #15
 8015cea:	18fb      	adds	r3, r7, r3
 8015cec:	2200      	movs	r2, #0
 8015cee:	701a      	strb	r2, [r3, #0]
 8015cf0:	e03f      	b.n	8015d72 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015cf2:	4b26      	ldr	r3, [pc, #152]	; (8015d8c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	781a      	ldrb	r2, [r3, #0]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015cfc:	4b23      	ldr	r3, [pc, #140]	; (8015d8c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	785a      	ldrb	r2, [r3, #1]
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015d06:	4b21      	ldr	r3, [pc, #132]	; (8015d8c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015d08:	685a      	ldr	r2, [r3, #4]
 8015d0a:	210d      	movs	r1, #13
 8015d0c:	187b      	adds	r3, r7, r1
 8015d0e:	7892      	ldrb	r2, [r2, #2]
 8015d10:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 8015d12:	187b      	adds	r3, r7, r1
 8015d14:	781b      	ldrb	r3, [r3, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d006      	beq.n	8015d28 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015d1a:	4b1c      	ldr	r3, [pc, #112]	; (8015d8c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	689b      	ldr	r3, [r3, #8]
 8015d20:	687a      	ldr	r2, [r7, #4]
 8015d22:	0010      	movs	r0, r2
 8015d24:	4798      	blx	r3
 8015d26:	e00f      	b.n	8015d48 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015d28:	4b18      	ldr	r3, [pc, #96]	; (8015d8c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	781a      	ldrb	r2, [r3, #0]
 8015d2e:	2108      	movs	r1, #8
 8015d30:	187b      	adds	r3, r7, r1
 8015d32:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015d34:	4b15      	ldr	r3, [pc, #84]	; (8015d8c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	785a      	ldrb	r2, [r3, #1]
 8015d3a:	187b      	adds	r3, r7, r1
 8015d3c:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015d3e:	4b13      	ldr	r3, [pc, #76]	; (8015d8c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	78da      	ldrb	r2, [r3, #3]
 8015d44:	187b      	adds	r3, r7, r1
 8015d46:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015d48:	f7ff feea 	bl	8015b20 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015d4c:	230d      	movs	r3, #13
 8015d4e:	18fb      	adds	r3, r7, r3
 8015d50:	781b      	ldrb	r3, [r3, #0]
 8015d52:	2201      	movs	r2, #1
 8015d54:	4053      	eors	r3, r2
 8015d56:	b2db      	uxtb	r3, r3
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d004      	beq.n	8015d66 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015d5c:	2308      	movs	r3, #8
 8015d5e:	18fb      	adds	r3, r7, r3
 8015d60:	0018      	movs	r0, r3
 8015d62:	f7ff fea7 	bl	8015ab4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015d66:	210f      	movs	r1, #15
 8015d68:	187b      	adds	r3, r7, r1
 8015d6a:	781a      	ldrb	r2, [r3, #0]
 8015d6c:	187b      	adds	r3, r7, r1
 8015d6e:	3201      	adds	r2, #1
 8015d70:	701a      	strb	r2, [r3, #0]
 8015d72:	230f      	movs	r3, #15
 8015d74:	18fa      	adds	r2, r7, r3
 8015d76:	230e      	movs	r3, #14
 8015d78:	18fb      	adds	r3, r7, r3
 8015d7a:	7812      	ldrb	r2, [r2, #0]
 8015d7c:	781b      	ldrb	r3, [r3, #0]
 8015d7e:	429a      	cmp	r2, r3
 8015d80:	d3b7      	bcc.n	8015cf2 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 8015d82:	46c0      	nop			; (mov r8, r8)
 8015d84:	46c0      	nop			; (mov r8, r8)
 8015d86:	46bd      	mov	sp, r7
 8015d88:	b004      	add	sp, #16
 8015d8a:	bd80      	pop	{r7, pc}
 8015d8c:	20000f1c 	.word	0x20000f1c

08015d90 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8015d94:	4b02      	ldr	r3, [pc, #8]	; (8015da0 <LoRaMacConfirmQueueGetCnt+0x10>)
 8015d96:	691b      	ldr	r3, [r3, #16]
 8015d98:	7d1b      	ldrb	r3, [r3, #20]
}
 8015d9a:	0018      	movs	r0, r3
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	20000f1c 	.word	0x20000f1c

08015da4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015da8:	4b06      	ldr	r3, [pc, #24]	; (8015dc4 <LoRaMacConfirmQueueIsFull+0x20>)
 8015daa:	691b      	ldr	r3, [r3, #16]
 8015dac:	7d1b      	ldrb	r3, [r3, #20]
 8015dae:	0018      	movs	r0, r3
 8015db0:	f7ff fddd 	bl	801596e <IsListFull>
 8015db4:	1e03      	subs	r3, r0, #0
 8015db6:	d001      	beq.n	8015dbc <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 8015db8:	2301      	movs	r3, #1
 8015dba:	e000      	b.n	8015dbe <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 8015dbc:	2300      	movs	r3, #0
    }
}
 8015dbe:	0018      	movs	r0, r3
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	20000f1c 	.word	0x20000f1c

08015dc8 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015dc8:	b590      	push	{r4, r7, lr}
 8015dca:	b08f      	sub	sp, #60	; 0x3c
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	0008      	movs	r0, r1
 8015dd2:	0011      	movs	r1, r2
 8015dd4:	607b      	str	r3, [r7, #4]
 8015dd6:	230a      	movs	r3, #10
 8015dd8:	18fb      	adds	r3, r7, r3
 8015dda:	1c02      	adds	r2, r0, #0
 8015ddc:	801a      	strh	r2, [r3, #0]
 8015dde:	2309      	movs	r3, #9
 8015de0:	18fb      	adds	r3, r7, r3
 8015de2:	1c0a      	adds	r2, r1, #0
 8015de4:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d101      	bne.n	8015df0 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015dec:	230a      	movs	r3, #10
 8015dee:	e0ae      	b.n	8015f4e <PayloadEncrypt+0x186>
    }

    uint8_t bufferIndex = 0;
 8015df0:	2337      	movs	r3, #55	; 0x37
 8015df2:	18fb      	adds	r3, r7, r3
 8015df4:	2200      	movs	r2, #0
 8015df6:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8015df8:	2334      	movs	r3, #52	; 0x34
 8015dfa:	18fb      	adds	r3, r7, r3
 8015dfc:	2201      	movs	r2, #1
 8015dfe:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8015e00:	2320      	movs	r3, #32
 8015e02:	18fb      	adds	r3, r7, r3
 8015e04:	2200      	movs	r2, #0
 8015e06:	601a      	str	r2, [r3, #0]
 8015e08:	3304      	adds	r3, #4
 8015e0a:	220c      	movs	r2, #12
 8015e0c:	2100      	movs	r1, #0
 8015e0e:	0018      	movs	r0, r3
 8015e10:	f009 f829 	bl	801ee66 <memset>
    uint8_t aBlock[16] = { 0 };
 8015e14:	2410      	movs	r4, #16
 8015e16:	193b      	adds	r3, r7, r4
 8015e18:	2200      	movs	r2, #0
 8015e1a:	601a      	str	r2, [r3, #0]
 8015e1c:	3304      	adds	r3, #4
 8015e1e:	220c      	movs	r2, #12
 8015e20:	2100      	movs	r1, #0
 8015e22:	0018      	movs	r0, r3
 8015e24:	f009 f81f 	bl	801ee66 <memset>

    aBlock[0] = 0x01;
 8015e28:	0021      	movs	r1, r4
 8015e2a:	187b      	adds	r3, r7, r1
 8015e2c:	2201      	movs	r2, #1
 8015e2e:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8015e30:	187a      	adds	r2, r7, r1
 8015e32:	2340      	movs	r3, #64	; 0x40
 8015e34:	2008      	movs	r0, #8
 8015e36:	4684      	mov	ip, r0
 8015e38:	44bc      	add	ip, r7
 8015e3a:	4463      	add	r3, ip
 8015e3c:	781b      	ldrb	r3, [r3, #0]
 8015e3e:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	b2da      	uxtb	r2, r3
 8015e44:	187b      	adds	r3, r7, r1
 8015e46:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	0a1b      	lsrs	r3, r3, #8
 8015e4c:	b2da      	uxtb	r2, r3
 8015e4e:	187b      	adds	r3, r7, r1
 8015e50:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	0c1b      	lsrs	r3, r3, #16
 8015e56:	b2da      	uxtb	r2, r3
 8015e58:	187b      	adds	r3, r7, r1
 8015e5a:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	0e1b      	lsrs	r3, r3, #24
 8015e60:	b2da      	uxtb	r2, r3
 8015e62:	187b      	adds	r3, r7, r1
 8015e64:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8015e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e68:	b2da      	uxtb	r2, r3
 8015e6a:	187b      	adds	r3, r7, r1
 8015e6c:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e70:	0a1b      	lsrs	r3, r3, #8
 8015e72:	b2da      	uxtb	r2, r3
 8015e74:	187b      	adds	r3, r7, r1
 8015e76:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e7a:	0c1b      	lsrs	r3, r3, #16
 8015e7c:	b2da      	uxtb	r2, r3
 8015e7e:	187b      	adds	r3, r7, r1
 8015e80:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e84:	0e1b      	lsrs	r3, r3, #24
 8015e86:	b2da      	uxtb	r2, r3
 8015e88:	187b      	adds	r3, r7, r1
 8015e8a:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 8015e8c:	e058      	b.n	8015f40 <PayloadEncrypt+0x178>
    {
        aBlock[15] = ctr & 0xFF;
 8015e8e:	2134      	movs	r1, #52	; 0x34
 8015e90:	187b      	adds	r3, r7, r1
 8015e92:	881b      	ldrh	r3, [r3, #0]
 8015e94:	b2da      	uxtb	r2, r3
 8015e96:	2010      	movs	r0, #16
 8015e98:	183b      	adds	r3, r7, r0
 8015e9a:	73da      	strb	r2, [r3, #15]
        ctr++;
 8015e9c:	187b      	adds	r3, r7, r1
 8015e9e:	881a      	ldrh	r2, [r3, #0]
 8015ea0:	187b      	adds	r3, r7, r1
 8015ea2:	3201      	adds	r2, #1
 8015ea4:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015ea6:	2320      	movs	r3, #32
 8015ea8:	18f9      	adds	r1, r7, r3
 8015eaa:	2309      	movs	r3, #9
 8015eac:	18fb      	adds	r3, r7, r3
 8015eae:	781a      	ldrb	r2, [r3, #0]
 8015eb0:	1838      	adds	r0, r7, r0
 8015eb2:	000b      	movs	r3, r1
 8015eb4:	2110      	movs	r1, #16
 8015eb6:	f7f7 fec2 	bl	800dc3e <SecureElementAesEncrypt>
 8015eba:	1e03      	subs	r3, r0, #0
 8015ebc:	d001      	beq.n	8015ec2 <PayloadEncrypt+0xfa>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ebe:	230f      	movs	r3, #15
 8015ec0:	e045      	b.n	8015f4e <PayloadEncrypt+0x186>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015ec2:	2333      	movs	r3, #51	; 0x33
 8015ec4:	18fb      	adds	r3, r7, r3
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	701a      	strb	r2, [r3, #0]
 8015eca:	e01f      	b.n	8015f0c <PayloadEncrypt+0x144>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015ecc:	2037      	movs	r0, #55	; 0x37
 8015ece:	183b      	adds	r3, r7, r0
 8015ed0:	781a      	ldrb	r2, [r3, #0]
 8015ed2:	2433      	movs	r4, #51	; 0x33
 8015ed4:	193b      	adds	r3, r7, r4
 8015ed6:	781b      	ldrb	r3, [r3, #0]
 8015ed8:	18d3      	adds	r3, r2, r3
 8015eda:	001a      	movs	r2, r3
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	189b      	adds	r3, r3, r2
 8015ee0:	7819      	ldrb	r1, [r3, #0]
 8015ee2:	193b      	adds	r3, r7, r4
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	2220      	movs	r2, #32
 8015ee8:	18ba      	adds	r2, r7, r2
 8015eea:	5cd2      	ldrb	r2, [r2, r3]
 8015eec:	183b      	adds	r3, r7, r0
 8015eee:	7818      	ldrb	r0, [r3, #0]
 8015ef0:	193b      	adds	r3, r7, r4
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	18c3      	adds	r3, r0, r3
 8015ef6:	0018      	movs	r0, r3
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	181b      	adds	r3, r3, r0
 8015efc:	404a      	eors	r2, r1
 8015efe:	b2d2      	uxtb	r2, r2
 8015f00:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015f02:	193b      	adds	r3, r7, r4
 8015f04:	781a      	ldrb	r2, [r3, #0]
 8015f06:	193b      	adds	r3, r7, r4
 8015f08:	3201      	adds	r2, #1
 8015f0a:	701a      	strb	r2, [r3, #0]
 8015f0c:	2333      	movs	r3, #51	; 0x33
 8015f0e:	18fb      	adds	r3, r7, r3
 8015f10:	781a      	ldrb	r2, [r3, #0]
 8015f12:	230a      	movs	r3, #10
 8015f14:	18fb      	adds	r3, r7, r3
 8015f16:	881b      	ldrh	r3, [r3, #0]
 8015f18:	b219      	sxth	r1, r3
 8015f1a:	2910      	cmp	r1, #16
 8015f1c:	dd00      	ble.n	8015f20 <PayloadEncrypt+0x158>
 8015f1e:	2310      	movs	r3, #16
 8015f20:	b21b      	sxth	r3, r3
 8015f22:	429a      	cmp	r2, r3
 8015f24:	dbd2      	blt.n	8015ecc <PayloadEncrypt+0x104>
        }
        size -= 16;
 8015f26:	210a      	movs	r1, #10
 8015f28:	187b      	adds	r3, r7, r1
 8015f2a:	881b      	ldrh	r3, [r3, #0]
 8015f2c:	3b10      	subs	r3, #16
 8015f2e:	b29a      	uxth	r2, r3
 8015f30:	187b      	adds	r3, r7, r1
 8015f32:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8015f34:	2237      	movs	r2, #55	; 0x37
 8015f36:	18bb      	adds	r3, r7, r2
 8015f38:	18ba      	adds	r2, r7, r2
 8015f3a:	7812      	ldrb	r2, [r2, #0]
 8015f3c:	3210      	adds	r2, #16
 8015f3e:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8015f40:	230a      	movs	r3, #10
 8015f42:	18fb      	adds	r3, r7, r3
 8015f44:	2200      	movs	r2, #0
 8015f46:	5e9b      	ldrsh	r3, [r3, r2]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	dca0      	bgt.n	8015e8e <PayloadEncrypt+0xc6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015f4c:	2300      	movs	r3, #0
}
 8015f4e:	0018      	movs	r0, r3
 8015f50:	46bd      	mov	sp, r7
 8015f52:	b00f      	add	sp, #60	; 0x3c
 8015f54:	bd90      	pop	{r4, r7, pc}

08015f56 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015f56:	b5b0      	push	{r4, r5, r7, lr}
 8015f58:	b082      	sub	sp, #8
 8015f5a:	af00      	add	r7, sp, #0
 8015f5c:	0005      	movs	r5, r0
 8015f5e:	000c      	movs	r4, r1
 8015f60:	0010      	movs	r0, r2
 8015f62:	0019      	movs	r1, r3
 8015f64:	1dbb      	adds	r3, r7, #6
 8015f66:	1c2a      	adds	r2, r5, #0
 8015f68:	801a      	strh	r2, [r3, #0]
 8015f6a:	1d7b      	adds	r3, r7, #5
 8015f6c:	1c22      	adds	r2, r4, #0
 8015f6e:	701a      	strb	r2, [r3, #0]
 8015f70:	1d3b      	adds	r3, r7, #4
 8015f72:	1c02      	adds	r2, r0, #0
 8015f74:	701a      	strb	r2, [r3, #0]
 8015f76:	1cfb      	adds	r3, r7, #3
 8015f78:	1c0a      	adds	r2, r1, #0
 8015f7a:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8015f7c:	6a3b      	ldr	r3, [r7, #32]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d101      	bne.n	8015f86 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f82:	230a      	movs	r3, #10
 8015f84:	e050      	b.n	8016028 <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 8015f86:	6a3b      	ldr	r3, [r7, #32]
 8015f88:	2249      	movs	r2, #73	; 0x49
 8015f8a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8015f8c:	6a3b      	ldr	r3, [r7, #32]
 8015f8e:	3301      	adds	r3, #1
 8015f90:	2200      	movs	r2, #0
 8015f92:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015f94:	6a3b      	ldr	r3, [r7, #32]
 8015f96:	3302      	adds	r3, #2
 8015f98:	2200      	movs	r2, #0
 8015f9a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015f9c:	6a3b      	ldr	r3, [r7, #32]
 8015f9e:	3303      	adds	r3, #3
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015fa4:	6a3b      	ldr	r3, [r7, #32]
 8015fa6:	3304      	adds	r3, #4
 8015fa8:	2200      	movs	r2, #0
 8015faa:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015fac:	6a3b      	ldr	r3, [r7, #32]
 8015fae:	3305      	adds	r3, #5
 8015fb0:	1cfa      	adds	r2, r7, #3
 8015fb2:	7812      	ldrb	r2, [r2, #0]
 8015fb4:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015fb6:	6a3b      	ldr	r3, [r7, #32]
 8015fb8:	3306      	adds	r3, #6
 8015fba:	69ba      	ldr	r2, [r7, #24]
 8015fbc:	b2d2      	uxtb	r2, r2
 8015fbe:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015fc0:	69bb      	ldr	r3, [r7, #24]
 8015fc2:	0a1a      	lsrs	r2, r3, #8
 8015fc4:	6a3b      	ldr	r3, [r7, #32]
 8015fc6:	3307      	adds	r3, #7
 8015fc8:	b2d2      	uxtb	r2, r2
 8015fca:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015fcc:	69bb      	ldr	r3, [r7, #24]
 8015fce:	0c1a      	lsrs	r2, r3, #16
 8015fd0:	6a3b      	ldr	r3, [r7, #32]
 8015fd2:	3308      	adds	r3, #8
 8015fd4:	b2d2      	uxtb	r2, r2
 8015fd6:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015fd8:	69bb      	ldr	r3, [r7, #24]
 8015fda:	0e1a      	lsrs	r2, r3, #24
 8015fdc:	6a3b      	ldr	r3, [r7, #32]
 8015fde:	3309      	adds	r3, #9
 8015fe0:	b2d2      	uxtb	r2, r2
 8015fe2:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015fe4:	6a3b      	ldr	r3, [r7, #32]
 8015fe6:	330a      	adds	r3, #10
 8015fe8:	69fa      	ldr	r2, [r7, #28]
 8015fea:	b2d2      	uxtb	r2, r2
 8015fec:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015fee:	69fb      	ldr	r3, [r7, #28]
 8015ff0:	0a1a      	lsrs	r2, r3, #8
 8015ff2:	6a3b      	ldr	r3, [r7, #32]
 8015ff4:	330b      	adds	r3, #11
 8015ff6:	b2d2      	uxtb	r2, r2
 8015ff8:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015ffa:	69fb      	ldr	r3, [r7, #28]
 8015ffc:	0c1a      	lsrs	r2, r3, #16
 8015ffe:	6a3b      	ldr	r3, [r7, #32]
 8016000:	330c      	adds	r3, #12
 8016002:	b2d2      	uxtb	r2, r2
 8016004:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016006:	69fb      	ldr	r3, [r7, #28]
 8016008:	0e1a      	lsrs	r2, r3, #24
 801600a:	6a3b      	ldr	r3, [r7, #32]
 801600c:	330d      	adds	r3, #13
 801600e:	b2d2      	uxtb	r2, r2
 8016010:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016012:	6a3b      	ldr	r3, [r7, #32]
 8016014:	330e      	adds	r3, #14
 8016016:	2200      	movs	r2, #0
 8016018:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801601a:	6a3b      	ldr	r3, [r7, #32]
 801601c:	330f      	adds	r3, #15
 801601e:	1dba      	adds	r2, r7, #6
 8016020:	8812      	ldrh	r2, [r2, #0]
 8016022:	b2d2      	uxtb	r2, r2
 8016024:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016026:	2300      	movs	r3, #0
}
 8016028:	0018      	movs	r0, r3
 801602a:	46bd      	mov	sp, r7
 801602c:	b002      	add	sp, #8
 801602e:	bdb0      	pop	{r4, r5, r7, pc}

08016030 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8016030:	b5b0      	push	{r4, r5, r7, lr}
 8016032:	b08a      	sub	sp, #40	; 0x28
 8016034:	af04      	add	r7, sp, #16
 8016036:	6078      	str	r0, [r7, #4]
 8016038:	000c      	movs	r4, r1
 801603a:	0010      	movs	r0, r2
 801603c:	0019      	movs	r1, r3
 801603e:	1cbb      	adds	r3, r7, #2
 8016040:	1c22      	adds	r2, r4, #0
 8016042:	801a      	strh	r2, [r3, #0]
 8016044:	1c7b      	adds	r3, r7, #1
 8016046:	1c02      	adds	r2, r0, #0
 8016048:	701a      	strb	r2, [r3, #0]
 801604a:	003b      	movs	r3, r7
 801604c:	1c0a      	adds	r2, r1, #0
 801604e:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d002      	beq.n	801605c <ComputeCmacB0+0x2c>
 8016056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016058:	2b00      	cmp	r3, #0
 801605a:	d101      	bne.n	8016060 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801605c:	230a      	movs	r3, #10
 801605e:	e02a      	b.n	80160b6 <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016060:	1cbb      	adds	r3, r7, #2
 8016062:	881a      	ldrh	r2, [r3, #0]
 8016064:	2380      	movs	r3, #128	; 0x80
 8016066:	005b      	lsls	r3, r3, #1
 8016068:	429a      	cmp	r2, r3
 801606a:	d901      	bls.n	8016070 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801606c:	230e      	movs	r3, #14
 801606e:	e022      	b.n	80160b6 <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016070:	2328      	movs	r3, #40	; 0x28
 8016072:	18fb      	adds	r3, r7, r3
 8016074:	781c      	ldrb	r4, [r3, #0]
 8016076:	003b      	movs	r3, r7
 8016078:	781a      	ldrb	r2, [r3, #0]
 801607a:	1c7b      	adds	r3, r7, #1
 801607c:	7819      	ldrb	r1, [r3, #0]
 801607e:	1cbb      	adds	r3, r7, #2
 8016080:	8818      	ldrh	r0, [r3, #0]
 8016082:	2508      	movs	r5, #8
 8016084:	197b      	adds	r3, r7, r5
 8016086:	9302      	str	r3, [sp, #8]
 8016088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801608a:	9301      	str	r3, [sp, #4]
 801608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801608e:	9300      	str	r3, [sp, #0]
 8016090:	0023      	movs	r3, r4
 8016092:	f7ff ff60 	bl	8015f56 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016096:	1c7b      	adds	r3, r7, #1
 8016098:	781c      	ldrb	r4, [r3, #0]
 801609a:	1cbb      	adds	r3, r7, #2
 801609c:	881a      	ldrh	r2, [r3, #0]
 801609e:	6879      	ldr	r1, [r7, #4]
 80160a0:	1978      	adds	r0, r7, r5
 80160a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160a4:	9300      	str	r3, [sp, #0]
 80160a6:	0023      	movs	r3, r4
 80160a8:	f7f7 fd66 	bl	800db78 <SecureElementComputeAesCmac>
 80160ac:	1e03      	subs	r3, r0, #0
 80160ae:	d001      	beq.n	80160b4 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80160b0:	230f      	movs	r3, #15
 80160b2:	e000      	b.n	80160b6 <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80160b4:	2300      	movs	r3, #0
}
 80160b6:	0018      	movs	r0, r3
 80160b8:	46bd      	mov	sp, r7
 80160ba:	b006      	add	sp, #24
 80160bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080160c0 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80160c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160c2:	b0cd      	sub	sp, #308	; 0x134
 80160c4:	af04      	add	r7, sp, #16
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	000c      	movs	r4, r1
 80160ca:	0010      	movs	r0, r2
 80160cc:	0019      	movs	r1, r3
 80160ce:	4b52      	ldr	r3, [pc, #328]	; (8016218 <VerifyCmacB0+0x158>)
 80160d0:	2290      	movs	r2, #144	; 0x90
 80160d2:	0052      	lsls	r2, r2, #1
 80160d4:	4694      	mov	ip, r2
 80160d6:	44bc      	add	ip, r7
 80160d8:	4463      	add	r3, ip
 80160da:	1c22      	adds	r2, r4, #0
 80160dc:	801a      	strh	r2, [r3, #0]
 80160de:	4b4f      	ldr	r3, [pc, #316]	; (801621c <VerifyCmacB0+0x15c>)
 80160e0:	2290      	movs	r2, #144	; 0x90
 80160e2:	0052      	lsls	r2, r2, #1
 80160e4:	4694      	mov	ip, r2
 80160e6:	44bc      	add	ip, r7
 80160e8:	4463      	add	r3, ip
 80160ea:	1c02      	adds	r2, r0, #0
 80160ec:	701a      	strb	r2, [r3, #0]
 80160ee:	4b4c      	ldr	r3, [pc, #304]	; (8016220 <VerifyCmacB0+0x160>)
 80160f0:	2290      	movs	r2, #144	; 0x90
 80160f2:	0052      	lsls	r2, r2, #1
 80160f4:	4694      	mov	ip, r2
 80160f6:	44bc      	add	ip, r7
 80160f8:	4463      	add	r3, ip
 80160fa:	1c0a      	adds	r2, r1, #0
 80160fc:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d101      	bne.n	8016108 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016104:	230a      	movs	r3, #10
 8016106:	e083      	b.n	8016210 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016108:	4b43      	ldr	r3, [pc, #268]	; (8016218 <VerifyCmacB0+0x158>)
 801610a:	2290      	movs	r2, #144	; 0x90
 801610c:	0052      	lsls	r2, r2, #1
 801610e:	4694      	mov	ip, r2
 8016110:	44bc      	add	ip, r7
 8016112:	4463      	add	r3, ip
 8016114:	881a      	ldrh	r2, [r3, #0]
 8016116:	2380      	movs	r3, #128	; 0x80
 8016118:	005b      	lsls	r3, r3, #1
 801611a:	429a      	cmp	r2, r3
 801611c:	d901      	bls.n	8016122 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801611e:	230e      	movs	r3, #14
 8016120:	e076      	b.n	8016210 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016122:	2388      	movs	r3, #136	; 0x88
 8016124:	005a      	lsls	r2, r3, #1
 8016126:	250c      	movs	r5, #12
 8016128:	197b      	adds	r3, r7, r5
 801612a:	2100      	movs	r1, #0
 801612c:	0018      	movs	r0, r3
 801612e:	f003 fe9d 	bl	8019e6c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016132:	2398      	movs	r3, #152	; 0x98
 8016134:	005b      	lsls	r3, r3, #1
 8016136:	2208      	movs	r2, #8
 8016138:	4694      	mov	ip, r2
 801613a:	44bc      	add	ip, r7
 801613c:	4463      	add	r3, ip
 801613e:	781c      	ldrb	r4, [r3, #0]
 8016140:	4b37      	ldr	r3, [pc, #220]	; (8016220 <VerifyCmacB0+0x160>)
 8016142:	2290      	movs	r2, #144	; 0x90
 8016144:	0052      	lsls	r2, r2, #1
 8016146:	4694      	mov	ip, r2
 8016148:	44bc      	add	ip, r7
 801614a:	4463      	add	r3, ip
 801614c:	781a      	ldrb	r2, [r3, #0]
 801614e:	4b33      	ldr	r3, [pc, #204]	; (801621c <VerifyCmacB0+0x15c>)
 8016150:	2190      	movs	r1, #144	; 0x90
 8016152:	0049      	lsls	r1, r1, #1
 8016154:	468c      	mov	ip, r1
 8016156:	44bc      	add	ip, r7
 8016158:	4463      	add	r3, ip
 801615a:	7819      	ldrb	r1, [r3, #0]
 801615c:	4b2e      	ldr	r3, [pc, #184]	; (8016218 <VerifyCmacB0+0x158>)
 801615e:	2090      	movs	r0, #144	; 0x90
 8016160:	0040      	lsls	r0, r0, #1
 8016162:	4684      	mov	ip, r0
 8016164:	44bc      	add	ip, r7
 8016166:	4463      	add	r3, ip
 8016168:	8818      	ldrh	r0, [r3, #0]
 801616a:	197b      	adds	r3, r7, r5
 801616c:	9302      	str	r3, [sp, #8]
 801616e:	239c      	movs	r3, #156	; 0x9c
 8016170:	005b      	lsls	r3, r3, #1
 8016172:	2608      	movs	r6, #8
 8016174:	46b4      	mov	ip, r6
 8016176:	44bc      	add	ip, r7
 8016178:	4463      	add	r3, ip
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	9301      	str	r3, [sp, #4]
 801617e:	239a      	movs	r3, #154	; 0x9a
 8016180:	005b      	lsls	r3, r3, #1
 8016182:	2608      	movs	r6, #8
 8016184:	46b4      	mov	ip, r6
 8016186:	44bc      	add	ip, r7
 8016188:	4463      	add	r3, ip
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	9300      	str	r3, [sp, #0]
 801618e:	0023      	movs	r3, r4
 8016190:	f7ff fee1 	bl	8015f56 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016194:	197b      	adds	r3, r7, r5
 8016196:	3310      	adds	r3, #16
 8016198:	4a1f      	ldr	r2, [pc, #124]	; (8016218 <VerifyCmacB0+0x158>)
 801619a:	2190      	movs	r1, #144	; 0x90
 801619c:	0049      	lsls	r1, r1, #1
 801619e:	468c      	mov	ip, r1
 80161a0:	44bc      	add	ip, r7
 80161a2:	4462      	add	r2, ip
 80161a4:	8812      	ldrh	r2, [r2, #0]
 80161a6:	6879      	ldr	r1, [r7, #4]
 80161a8:	0018      	movs	r0, r3
 80161aa:	f003 fe21 	bl	8019df0 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80161ae:	2620      	movs	r6, #32
 80161b0:	36ff      	adds	r6, #255	; 0xff
 80161b2:	19bb      	adds	r3, r7, r6
 80161b4:	2206      	movs	r2, #6
 80161b6:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80161b8:	4b17      	ldr	r3, [pc, #92]	; (8016218 <VerifyCmacB0+0x158>)
 80161ba:	2290      	movs	r2, #144	; 0x90
 80161bc:	0052      	lsls	r2, r2, #1
 80161be:	4694      	mov	ip, r2
 80161c0:	44bc      	add	ip, r7
 80161c2:	4463      	add	r3, ip
 80161c4:	881b      	ldrh	r3, [r3, #0]
 80161c6:	3310      	adds	r3, #16
 80161c8:	b299      	uxth	r1, r3
 80161ca:	19bc      	adds	r4, r7, r6
 80161cc:	4b13      	ldr	r3, [pc, #76]	; (801621c <VerifyCmacB0+0x15c>)
 80161ce:	2290      	movs	r2, #144	; 0x90
 80161d0:	0052      	lsls	r2, r2, #1
 80161d2:	4694      	mov	ip, r2
 80161d4:	44bc      	add	ip, r7
 80161d6:	4463      	add	r3, ip
 80161d8:	781b      	ldrb	r3, [r3, #0]
 80161da:	229e      	movs	r2, #158	; 0x9e
 80161dc:	0052      	lsls	r2, r2, #1
 80161de:	2008      	movs	r0, #8
 80161e0:	4684      	mov	ip, r0
 80161e2:	44bc      	add	ip, r7
 80161e4:	4462      	add	r2, ip
 80161e6:	6812      	ldr	r2, [r2, #0]
 80161e8:	1978      	adds	r0, r7, r5
 80161ea:	f7f7 fce6 	bl	800dbba <SecureElementVerifyAesCmac>
 80161ee:	0003      	movs	r3, r0
 80161f0:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 80161f2:	19bb      	adds	r3, r7, r6
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d101      	bne.n	80161fe <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80161fa:	2300      	movs	r3, #0
 80161fc:	e008      	b.n	8016210 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80161fe:	2320      	movs	r3, #32
 8016200:	33ff      	adds	r3, #255	; 0xff
 8016202:	18fb      	adds	r3, r7, r3
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	2b01      	cmp	r3, #1
 8016208:	d101      	bne.n	801620e <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801620a:	2301      	movs	r3, #1
 801620c:	e000      	b.n	8016210 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801620e:	230f      	movs	r3, #15
}
 8016210:	0018      	movs	r0, r3
 8016212:	46bd      	mov	sp, r7
 8016214:	b049      	add	sp, #292	; 0x124
 8016216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016218:	fffffee2 	.word	0xfffffee2
 801621c:	fffffee1 	.word	0xfffffee1
 8016220:	fffffee0 	.word	0xfffffee0

08016224 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b084      	sub	sp, #16
 8016228:	af00      	add	r7, sp, #0
 801622a:	0002      	movs	r2, r0
 801622c:	6039      	str	r1, [r7, #0]
 801622e:	1dfb      	adds	r3, r7, #7
 8016230:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016232:	230f      	movs	r3, #15
 8016234:	18fb      	adds	r3, r7, r3
 8016236:	2200      	movs	r2, #0
 8016238:	701a      	strb	r2, [r3, #0]
 801623a:	e018      	b.n	801626e <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801623c:	210f      	movs	r1, #15
 801623e:	187b      	adds	r3, r7, r1
 8016240:	781a      	ldrb	r2, [r3, #0]
 8016242:	4b10      	ldr	r3, [pc, #64]	; (8016284 <GetKeyAddrItem+0x60>)
 8016244:	0092      	lsls	r2, r2, #2
 8016246:	5cd3      	ldrb	r3, [r2, r3]
 8016248:	1dfa      	adds	r2, r7, #7
 801624a:	7812      	ldrb	r2, [r2, #0]
 801624c:	429a      	cmp	r2, r3
 801624e:	d108      	bne.n	8016262 <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 8016250:	187b      	adds	r3, r7, r1
 8016252:	781b      	ldrb	r3, [r3, #0]
 8016254:	009a      	lsls	r2, r3, #2
 8016256:	4b0b      	ldr	r3, [pc, #44]	; (8016284 <GetKeyAddrItem+0x60>)
 8016258:	18d2      	adds	r2, r2, r3
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801625e:	2300      	movs	r3, #0
 8016260:	e00b      	b.n	801627a <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016262:	210f      	movs	r1, #15
 8016264:	187b      	adds	r3, r7, r1
 8016266:	781a      	ldrb	r2, [r3, #0]
 8016268:	187b      	adds	r3, r7, r1
 801626a:	3201      	adds	r2, #1
 801626c:	701a      	strb	r2, [r3, #0]
 801626e:	230f      	movs	r3, #15
 8016270:	18fb      	adds	r3, r7, r3
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	2b01      	cmp	r3, #1
 8016276:	d9e1      	bls.n	801623c <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016278:	230c      	movs	r3, #12
}
 801627a:	0018      	movs	r0, r3
 801627c:	46bd      	mov	sp, r7
 801627e:	b004      	add	sp, #16
 8016280:	bd80      	pop	{r7, pc}
 8016282:	46c0      	nop			; (mov r8, r8)
 8016284:	200001b8 	.word	0x200001b8

08016288 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8016288:	b590      	push	{r4, r7, lr}
 801628a:	b089      	sub	sp, #36	; 0x24
 801628c:	af00      	add	r7, sp, #0
 801628e:	60b9      	str	r1, [r7, #8]
 8016290:	607a      	str	r2, [r7, #4]
 8016292:	603b      	str	r3, [r7, #0]
 8016294:	230f      	movs	r3, #15
 8016296:	18fb      	adds	r3, r7, r3
 8016298:	1c02      	adds	r2, r0, #0
 801629a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d005      	beq.n	80162ae <DeriveSessionKey10x+0x26>
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d002      	beq.n	80162ae <DeriveSessionKey10x+0x26>
 80162a8:	683b      	ldr	r3, [r7, #0]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d101      	bne.n	80162b2 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80162ae:	230a      	movs	r3, #10
 80162b0:	e043      	b.n	801633a <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 80162b2:	2310      	movs	r3, #16
 80162b4:	18fb      	adds	r3, r7, r3
 80162b6:	2200      	movs	r2, #0
 80162b8:	601a      	str	r2, [r3, #0]
 80162ba:	3304      	adds	r3, #4
 80162bc:	220c      	movs	r2, #12
 80162be:	2100      	movs	r1, #0
 80162c0:	0018      	movs	r0, r3
 80162c2:	f008 fdd0 	bl	801ee66 <memset>

    switch( keyID )
 80162c6:	230f      	movs	r3, #15
 80162c8:	18fb      	adds	r3, r7, r3
 80162ca:	781b      	ldrb	r3, [r3, #0]
 80162cc:	2b02      	cmp	r3, #2
 80162ce:	d002      	beq.n	80162d6 <DeriveSessionKey10x+0x4e>
 80162d0:	2b03      	cmp	r3, #3
 80162d2:	d005      	beq.n	80162e0 <DeriveSessionKey10x+0x58>
 80162d4:	e009      	b.n	80162ea <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80162d6:	2310      	movs	r3, #16
 80162d8:	18fb      	adds	r3, r7, r3
 80162da:	2201      	movs	r2, #1
 80162dc:	701a      	strb	r2, [r3, #0]
            break;
 80162de:	e006      	b.n	80162ee <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80162e0:	2310      	movs	r3, #16
 80162e2:	18fb      	adds	r3, r7, r3
 80162e4:	2202      	movs	r2, #2
 80162e6:	701a      	strb	r2, [r3, #0]
            break;
 80162e8:	e001      	b.n	80162ee <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80162ea:	230b      	movs	r3, #11
 80162ec:	e025      	b.n	801633a <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80162ee:	2410      	movs	r4, #16
 80162f0:	193b      	adds	r3, r7, r4
 80162f2:	3301      	adds	r3, #1
 80162f4:	68b9      	ldr	r1, [r7, #8]
 80162f6:	2203      	movs	r2, #3
 80162f8:	0018      	movs	r0, r3
 80162fa:	f003 fd79 	bl	8019df0 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 80162fe:	193b      	adds	r3, r7, r4
 8016300:	3304      	adds	r3, #4
 8016302:	6879      	ldr	r1, [r7, #4]
 8016304:	2203      	movs	r2, #3
 8016306:	0018      	movs	r0, r3
 8016308:	f003 fd72 	bl	8019df0 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 801630c:	193b      	adds	r3, r7, r4
 801630e:	3307      	adds	r3, #7
 8016310:	6839      	ldr	r1, [r7, #0]
 8016312:	2202      	movs	r2, #2
 8016314:	0018      	movs	r0, r3
 8016316:	f003 fd6b 	bl	8019df0 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801631a:	4b0a      	ldr	r3, [pc, #40]	; (8016344 <DeriveSessionKey10x+0xbc>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	220f      	movs	r2, #15
 8016320:	18ba      	adds	r2, r7, r2
 8016322:	7812      	ldrb	r2, [r2, #0]
 8016324:	1939      	adds	r1, r7, r4
 8016326:	6818      	ldr	r0, [r3, #0]
 8016328:	0013      	movs	r3, r2
 801632a:	2201      	movs	r2, #1
 801632c:	f7f7 fcf8 	bl	800dd20 <SecureElementDeriveAndStoreKey>
 8016330:	1e03      	subs	r3, r0, #0
 8016332:	d001      	beq.n	8016338 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016334:	230f      	movs	r3, #15
 8016336:	e000      	b.n	801633a <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016338:	2300      	movs	r3, #0
}
 801633a:	0018      	movs	r0, r3
 801633c:	46bd      	mov	sp, r7
 801633e:	b009      	add	sp, #36	; 0x24
 8016340:	bd90      	pop	{r4, r7, pc}
 8016342:	46c0      	nop			; (mov r8, r8)
 8016344:	20000f30 	.word	0x20000f30

08016348 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b082      	sub	sp, #8
 801634c:	af00      	add	r7, sp, #0
 801634e:	0002      	movs	r2, r0
 8016350:	6039      	str	r1, [r7, #0]
 8016352:	1dfb      	adds	r3, r7, #7
 8016354:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d101      	bne.n	8016360 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801635c:	230a      	movs	r3, #10
 801635e:	e039      	b.n	80163d4 <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 8016360:	1dfb      	adds	r3, r7, #7
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	2b04      	cmp	r3, #4
 8016366:	d02c      	beq.n	80163c2 <GetLastFcntDown+0x7a>
 8016368:	dc31      	bgt.n	80163ce <GetLastFcntDown+0x86>
 801636a:	2b03      	cmp	r3, #3
 801636c:	d01d      	beq.n	80163aa <GetLastFcntDown+0x62>
 801636e:	dc2e      	bgt.n	80163ce <GetLastFcntDown+0x86>
 8016370:	2b01      	cmp	r3, #1
 8016372:	d002      	beq.n	801637a <GetLastFcntDown+0x32>
 8016374:	2b02      	cmp	r3, #2
 8016376:	d00c      	beq.n	8016392 <GetLastFcntDown+0x4a>
 8016378:	e029      	b.n	80163ce <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 801637a:	4b18      	ldr	r3, [pc, #96]	; (80163dc <GetLastFcntDown+0x94>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	691a      	ldr	r2, [r3, #16]
 8016380:	683b      	ldr	r3, [r7, #0]
 8016382:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8016384:	4b15      	ldr	r3, [pc, #84]	; (80163dc <GetLastFcntDown+0x94>)
 8016386:	681a      	ldr	r2, [r3, #0]
 8016388:	4b14      	ldr	r3, [pc, #80]	; (80163dc <GetLastFcntDown+0x94>)
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	3210      	adds	r2, #16
 801638e:	621a      	str	r2, [r3, #32]
            break;
 8016390:	e01f      	b.n	80163d2 <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8016392:	4b12      	ldr	r3, [pc, #72]	; (80163dc <GetLastFcntDown+0x94>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	695a      	ldr	r2, [r3, #20]
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 801639c:	4b0f      	ldr	r3, [pc, #60]	; (80163dc <GetLastFcntDown+0x94>)
 801639e:	681a      	ldr	r2, [r3, #0]
 80163a0:	4b0e      	ldr	r3, [pc, #56]	; (80163dc <GetLastFcntDown+0x94>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	3214      	adds	r2, #20
 80163a6:	621a      	str	r2, [r3, #32]
            break;
 80163a8:	e013      	b.n	80163d2 <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 80163aa:	4b0c      	ldr	r3, [pc, #48]	; (80163dc <GetLastFcntDown+0x94>)
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	699a      	ldr	r2, [r3, #24]
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 80163b4:	4b09      	ldr	r3, [pc, #36]	; (80163dc <GetLastFcntDown+0x94>)
 80163b6:	681a      	ldr	r2, [r3, #0]
 80163b8:	4b08      	ldr	r3, [pc, #32]	; (80163dc <GetLastFcntDown+0x94>)
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	3218      	adds	r2, #24
 80163be:	621a      	str	r2, [r3, #32]
            break;
 80163c0:	e007      	b.n	80163d2 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 80163c2:	4b06      	ldr	r3, [pc, #24]	; (80163dc <GetLastFcntDown+0x94>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	69da      	ldr	r2, [r3, #28]
 80163c8:	683b      	ldr	r3, [r7, #0]
 80163ca:	601a      	str	r2, [r3, #0]
            break;
 80163cc:	e001      	b.n	80163d2 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80163ce:	2305      	movs	r3, #5
 80163d0:	e000      	b.n	80163d4 <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80163d2:	2300      	movs	r3, #0
}
 80163d4:	0018      	movs	r0, r3
 80163d6:	46bd      	mov	sp, r7
 80163d8:	b002      	add	sp, #8
 80163da:	bd80      	pop	{r7, pc}
 80163dc:	20000f30 	.word	0x20000f30

080163e0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b084      	sub	sp, #16
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	0002      	movs	r2, r0
 80163e8:	6039      	str	r1, [r7, #0]
 80163ea:	1dfb      	adds	r3, r7, #7
 80163ec:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 80163ee:	2300      	movs	r3, #0
 80163f0:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80163f2:	230c      	movs	r3, #12
 80163f4:	18fa      	adds	r2, r7, r3
 80163f6:	1dfb      	adds	r3, r7, #7
 80163f8:	781b      	ldrb	r3, [r3, #0]
 80163fa:	0011      	movs	r1, r2
 80163fc:	0018      	movs	r0, r3
 80163fe:	f7ff ffa3 	bl	8016348 <GetLastFcntDown>
 8016402:	1e03      	subs	r3, r0, #0
 8016404:	d001      	beq.n	801640a <CheckFCntDown+0x2a>
    {
        return false;
 8016406:	2300      	movs	r3, #0
 8016408:	e009      	b.n	801641e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	683a      	ldr	r2, [r7, #0]
 801640e:	429a      	cmp	r2, r3
 8016410:	d802      	bhi.n	8016418 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8016412:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016414:	3301      	adds	r3, #1
 8016416:	d101      	bne.n	801641c <CheckFCntDown+0x3c>
    {
        return true;
 8016418:	2301      	movs	r3, #1
 801641a:	e000      	b.n	801641e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801641c:	2300      	movs	r3, #0
    }
}
 801641e:	0018      	movs	r0, r3
 8016420:	46bd      	mov	sp, r7
 8016422:	b004      	add	sp, #16
 8016424:	bd80      	pop	{r7, pc}
	...

08016428 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016428:	b580      	push	{r7, lr}
 801642a:	b082      	sub	sp, #8
 801642c:	af00      	add	r7, sp, #0
 801642e:	0002      	movs	r2, r0
 8016430:	6039      	str	r1, [r7, #0]
 8016432:	1dfb      	adds	r3, r7, #7
 8016434:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8016436:	1dfb      	adds	r3, r7, #7
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	2b04      	cmp	r3, #4
 801643c:	d017      	beq.n	801646e <UpdateFCntDown+0x46>
 801643e:	dc1b      	bgt.n	8016478 <UpdateFCntDown+0x50>
 8016440:	2b03      	cmp	r3, #3
 8016442:	d00f      	beq.n	8016464 <UpdateFCntDown+0x3c>
 8016444:	dc18      	bgt.n	8016478 <UpdateFCntDown+0x50>
 8016446:	2b01      	cmp	r3, #1
 8016448:	d002      	beq.n	8016450 <UpdateFCntDown+0x28>
 801644a:	2b02      	cmp	r3, #2
 801644c:	d005      	beq.n	801645a <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 801644e:	e013      	b.n	8016478 <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8016450:	4b0d      	ldr	r3, [pc, #52]	; (8016488 <UpdateFCntDown+0x60>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	683a      	ldr	r2, [r7, #0]
 8016456:	611a      	str	r2, [r3, #16]
            break;
 8016458:	e00f      	b.n	801647a <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 801645a:	4b0b      	ldr	r3, [pc, #44]	; (8016488 <UpdateFCntDown+0x60>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	683a      	ldr	r2, [r7, #0]
 8016460:	615a      	str	r2, [r3, #20]
            break;
 8016462:	e00a      	b.n	801647a <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8016464:	4b08      	ldr	r3, [pc, #32]	; (8016488 <UpdateFCntDown+0x60>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	683a      	ldr	r2, [r7, #0]
 801646a:	619a      	str	r2, [r3, #24]
            break;
 801646c:	e005      	b.n	801647a <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 801646e:	4b06      	ldr	r3, [pc, #24]	; (8016488 <UpdateFCntDown+0x60>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	683a      	ldr	r2, [r7, #0]
 8016474:	61da      	str	r2, [r3, #28]
            break;
 8016476:	e000      	b.n	801647a <UpdateFCntDown+0x52>
            break;
 8016478:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801647a:	4b03      	ldr	r3, [pc, #12]	; (8016488 <UpdateFCntDown+0x60>)
 801647c:	685b      	ldr	r3, [r3, #4]
 801647e:	4798      	blx	r3
}
 8016480:	46c0      	nop			; (mov r8, r8)
 8016482:	46bd      	mov	sp, r7
 8016484:	b002      	add	sp, #8
 8016486:	bd80      	pop	{r7, pc}
 8016488:	20000f30 	.word	0x20000f30

0801648c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801648c:	b580      	push	{r7, lr}
 801648e:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8016490:	4b11      	ldr	r3, [pc, #68]	; (80164d8 <ResetFCnts+0x4c>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	2200      	movs	r2, #0
 8016496:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016498:	4b0f      	ldr	r3, [pc, #60]	; (80164d8 <ResetFCnts+0x4c>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	2201      	movs	r2, #1
 801649e:	4252      	negs	r2, r2
 80164a0:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80164a2:	4b0d      	ldr	r3, [pc, #52]	; (80164d8 <ResetFCnts+0x4c>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	2201      	movs	r2, #1
 80164a8:	4252      	negs	r2, r2
 80164aa:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80164ac:	4b0a      	ldr	r3, [pc, #40]	; (80164d8 <ResetFCnts+0x4c>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	2201      	movs	r2, #1
 80164b2:	4252      	negs	r2, r2
 80164b4:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 80164b6:	4b08      	ldr	r3, [pc, #32]	; (80164d8 <ResetFCnts+0x4c>)
 80164b8:	681a      	ldr	r2, [r3, #0]
 80164ba:	4b07      	ldr	r3, [pc, #28]	; (80164d8 <ResetFCnts+0x4c>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	3218      	adds	r2, #24
 80164c0:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 80164c2:	4b05      	ldr	r3, [pc, #20]	; (80164d8 <ResetFCnts+0x4c>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2201      	movs	r2, #1
 80164c8:	4252      	negs	r2, r2
 80164ca:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80164cc:	4b02      	ldr	r3, [pc, #8]	; (80164d8 <ResetFCnts+0x4c>)
 80164ce:	685b      	ldr	r3, [r3, #4]
 80164d0:	4798      	blx	r3
}
 80164d2:	46c0      	nop			; (mov r8, r8)
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	20000f30 	.word	0x20000f30

080164dc <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	af00      	add	r7, sp, #0
    return;
 80164e0:	46c0      	nop			; (mov r8, r8)
}
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}
	...

080164e8 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 80164f0:	4b15      	ldr	r3, [pc, #84]	; (8016548 <LoRaMacCryptoInit+0x60>)
 80164f2:	4a16      	ldr	r2, [pc, #88]	; (801654c <LoRaMacCryptoInit+0x64>)
 80164f4:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d003      	beq.n	8016504 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 80164fc:	4b12      	ldr	r3, [pc, #72]	; (8016548 <LoRaMacCryptoInit+0x60>)
 80164fe:	687a      	ldr	r2, [r7, #4]
 8016500:	605a      	str	r2, [r3, #4]
 8016502:	e002      	b.n	801650a <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8016504:	4b10      	ldr	r3, [pc, #64]	; (8016548 <LoRaMacCryptoInit+0x60>)
 8016506:	4a12      	ldr	r2, [pc, #72]	; (8016550 <LoRaMacCryptoInit+0x68>)
 8016508:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 801650a:	4b0f      	ldr	r3, [pc, #60]	; (8016548 <LoRaMacCryptoInit+0x60>)
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	2224      	movs	r2, #36	; 0x24
 8016510:	2100      	movs	r1, #0
 8016512:	0018      	movs	r0, r3
 8016514:	f003 fcaa 	bl	8019e6c <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8016518:	4b0b      	ldr	r3, [pc, #44]	; (8016548 <LoRaMacCryptoInit+0x60>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	2201      	movs	r2, #1
 801651e:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8016520:	4b09      	ldr	r3, [pc, #36]	; (8016548 <LoRaMacCryptoInit+0x60>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	2201      	movs	r2, #1
 8016526:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 8016528:	4b07      	ldr	r3, [pc, #28]	; (8016548 <LoRaMacCryptoInit+0x60>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2201      	movs	r2, #1
 801652e:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 8016530:	4b05      	ldr	r3, [pc, #20]	; (8016548 <LoRaMacCryptoInit+0x60>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	2200      	movs	r2, #0
 8016536:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016538:	f7ff ffa8 	bl	801648c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801653c:	2300      	movs	r3, #0
}
 801653e:	0018      	movs	r0, r3
 8016540:	46bd      	mov	sp, r7
 8016542:	b002      	add	sp, #8
 8016544:	bd80      	pop	{r7, pc}
 8016546:	46c0      	nop			; (mov r8, r8)
 8016548:	20000f30 	.word	0x20000f30
 801654c:	20000f38 	.word	0x20000f38
 8016550:	080164dd 	.word	0x080164dd

08016554 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b082      	sub	sp, #8
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 801655c:	4b04      	ldr	r3, [pc, #16]	; (8016570 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	687a      	ldr	r2, [r7, #4]
 8016562:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016564:	2300      	movs	r3, #0
}
 8016566:	0018      	movs	r0, r3
 8016568:	46bd      	mov	sp, r7
 801656a:	b002      	add	sp, #8
 801656c:	bd80      	pop	{r7, pc}
 801656e:	46c0      	nop			; (mov r8, r8)
 8016570:	20000f30 	.word	0x20000f30

08016574 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d007      	beq.n	8016592 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8016582:	6879      	ldr	r1, [r7, #4]
 8016584:	4b05      	ldr	r3, [pc, #20]	; (801659c <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8016586:	2224      	movs	r2, #36	; 0x24
 8016588:	0018      	movs	r0, r3
 801658a:	f003 fc31 	bl	8019df0 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 801658e:	2300      	movs	r3, #0
 8016590:	e000      	b.n	8016594 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016592:	230a      	movs	r3, #10
    }
}
 8016594:	0018      	movs	r0, r3
 8016596:	46bd      	mov	sp, r7
 8016598:	b002      	add	sp, #8
 801659a:	bd80      	pop	{r7, pc}
 801659c:	20000f38 	.word	0x20000f38

080165a0 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2224      	movs	r2, #36	; 0x24
 80165ac:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 80165ae:	4b02      	ldr	r3, [pc, #8]	; (80165b8 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 80165b0:	0018      	movs	r0, r3
 80165b2:	46bd      	mov	sp, r7
 80165b4:	b002      	add	sp, #8
 80165b6:	bd80      	pop	{r7, pc}
 80165b8:	20000f38 	.word	0x20000f38

080165bc <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b082      	sub	sp, #8
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d101      	bne.n	80165ce <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165ca:	230a      	movs	r3, #10
 80165cc:	e006      	b.n	80165dc <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 80165ce:	4b05      	ldr	r3, [pc, #20]	; (80165e4 <LoRaMacCryptoGetFCntUp+0x28>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	68db      	ldr	r3, [r3, #12]
 80165d4:	1c5a      	adds	r2, r3, #1
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80165da:	2300      	movs	r3, #0
}
 80165dc:	0018      	movs	r0, r3
 80165de:	46bd      	mov	sp, r7
 80165e0:	b002      	add	sp, #8
 80165e2:	bd80      	pop	{r7, pc}
 80165e4:	20000f30 	.word	0x20000f30

080165e8 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80165e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165ea:	b08d      	sub	sp, #52	; 0x34
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	61ba      	str	r2, [r7, #24]
 80165f0:	617b      	str	r3, [r7, #20]
 80165f2:	230f      	movs	r3, #15
 80165f4:	2210      	movs	r2, #16
 80165f6:	4694      	mov	ip, r2
 80165f8:	44bc      	add	ip, r7
 80165fa:	4463      	add	r3, ip
 80165fc:	1c02      	adds	r2, r0, #0
 80165fe:	701a      	strb	r2, [r3, #0]
 8016600:	230c      	movs	r3, #12
 8016602:	2210      	movs	r2, #16
 8016604:	4694      	mov	ip, r2
 8016606:	44bc      	add	ip, r7
 8016608:	4463      	add	r3, ip
 801660a:	1c0a      	adds	r2, r1, #0
 801660c:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 801660e:	2300      	movs	r3, #0
 8016610:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 8016612:	2300      	movs	r3, #0
 8016614:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016616:	231b      	movs	r3, #27
 8016618:	2210      	movs	r2, #16
 801661a:	4694      	mov	ip, r2
 801661c:	44bc      	add	ip, r7
 801661e:	4463      	add	r3, ip
 8016620:	2213      	movs	r2, #19
 8016622:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d101      	bne.n	801662e <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801662a:	230a      	movs	r3, #10
 801662c:	e06b      	b.n	8016706 <LoRaMacCryptoGetFCntDown+0x11e>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801662e:	221b      	movs	r2, #27
 8016630:	2110      	movs	r1, #16
 8016632:	187b      	adds	r3, r7, r1
 8016634:	189e      	adds	r6, r3, r2
 8016636:	2314      	movs	r3, #20
 8016638:	187a      	adds	r2, r7, r1
 801663a:	18d2      	adds	r2, r2, r3
 801663c:	230f      	movs	r3, #15
 801663e:	2010      	movs	r0, #16
 8016640:	4684      	mov	ip, r0
 8016642:	44bc      	add	ip, r7
 8016644:	4463      	add	r3, ip
 8016646:	781b      	ldrb	r3, [r3, #0]
 8016648:	0011      	movs	r1, r2
 801664a:	0018      	movs	r0, r3
 801664c:	f7ff fe7c 	bl	8016348 <GetLastFcntDown>
 8016650:	0003      	movs	r3, r0
 8016652:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016654:	221b      	movs	r2, #27
 8016656:	2110      	movs	r1, #16
 8016658:	187b      	adds	r3, r7, r1
 801665a:	189b      	adds	r3, r3, r2
 801665c:	781b      	ldrb	r3, [r3, #0]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d003      	beq.n	801666a <LoRaMacCryptoGetFCntDown+0x82>
    {
        return cryptoStatus;
 8016662:	187b      	adds	r3, r7, r1
 8016664:	189b      	adds	r3, r3, r2
 8016666:	781b      	ldrb	r3, [r3, #0]
 8016668:	e04d      	b.n	8016706 <LoRaMacCryptoGetFCntDown+0x11e>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666c:	3301      	adds	r3, #1
 801666e:	d103      	bne.n	8016678 <LoRaMacCryptoGetFCntDown+0x90>
    {
        *currentDown = frameFcnt;
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	69ba      	ldr	r2, [r7, #24]
 8016674:	601a      	str	r2, [r3, #0]
 8016676:	e020      	b.n	80166ba <LoRaMacCryptoGetFCntDown+0xd2>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801667a:	041b      	lsls	r3, r3, #16
 801667c:	0c1b      	lsrs	r3, r3, #16
 801667e:	69ba      	ldr	r2, [r7, #24]
 8016680:	1ad3      	subs	r3, r2, r3
 8016682:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8016684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016686:	2b00      	cmp	r3, #0
 8016688:	dd05      	ble.n	8016696 <LoRaMacCryptoGetFCntDown+0xae>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801668a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668e:	18d2      	adds	r2, r2, r3
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	601a      	str	r2, [r3, #0]
 8016694:	e011      	b.n	80166ba <LoRaMacCryptoGetFCntDown+0xd2>
        }
        else if( fCntDiff == 0 )
 8016696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016698:	2b00      	cmp	r3, #0
 801669a:	d104      	bne.n	80166a6 <LoRaMacCryptoGetFCntDown+0xbe>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801669c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80166a2:	2307      	movs	r3, #7
 80166a4:	e02f      	b.n	8016706 <LoRaMacCryptoGetFCntDown+0x11e>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80166a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a8:	0c1b      	lsrs	r3, r3, #16
 80166aa:	041a      	lsls	r2, r3, #16
 80166ac:	69bb      	ldr	r3, [r7, #24]
 80166ae:	18d3      	adds	r3, r2, r3
 80166b0:	2280      	movs	r2, #128	; 0x80
 80166b2:	0252      	lsls	r2, r2, #9
 80166b4:	189a      	adds	r2, r3, r2
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80166ba:	4b15      	ldr	r3, [pc, #84]	; (8016710 <LoRaMacCryptoGetFCntDown+0x128>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	789b      	ldrb	r3, [r3, #2]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d11f      	bne.n	8016704 <LoRaMacCryptoGetFCntDown+0x11c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	60bb      	str	r3, [r7, #8]
 80166ca:	2300      	movs	r3, #0
 80166cc:	60fb      	str	r3, [r7, #12]
 80166ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d0:	603b      	str	r3, [r7, #0]
 80166d2:	2300      	movs	r3, #0
 80166d4:	607b      	str	r3, [r7, #4]
 80166d6:	68ba      	ldr	r2, [r7, #8]
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	6838      	ldr	r0, [r7, #0]
 80166dc:	6879      	ldr	r1, [r7, #4]
 80166de:	1a12      	subs	r2, r2, r0
 80166e0:	418b      	sbcs	r3, r1
 80166e2:	210c      	movs	r1, #12
 80166e4:	2010      	movs	r0, #16
 80166e6:	4684      	mov	ip, r0
 80166e8:	44bc      	add	ip, r7
 80166ea:	4461      	add	r1, ip
 80166ec:	8809      	ldrh	r1, [r1, #0]
 80166ee:	b289      	uxth	r1, r1
 80166f0:	000c      	movs	r4, r1
 80166f2:	2100      	movs	r1, #0
 80166f4:	000d      	movs	r5, r1
 80166f6:	429d      	cmp	r5, r3
 80166f8:	dc04      	bgt.n	8016704 <LoRaMacCryptoGetFCntDown+0x11c>
 80166fa:	d101      	bne.n	8016700 <LoRaMacCryptoGetFCntDown+0x118>
 80166fc:	4294      	cmp	r4, r2
 80166fe:	d801      	bhi.n	8016704 <LoRaMacCryptoGetFCntDown+0x11c>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016700:	2308      	movs	r3, #8
 8016702:	e000      	b.n	8016706 <LoRaMacCryptoGetFCntDown+0x11e>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016704:	2300      	movs	r3, #0
}
 8016706:	0018      	movs	r0, r3
 8016708:	46bd      	mov	sp, r7
 801670a:	b00d      	add	sp, #52	; 0x34
 801670c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801670e:	46c0      	nop			; (mov r8, r8)
 8016710:	20000f30 	.word	0x20000f30

08016714 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d101      	bne.n	8016726 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016722:	230a      	movs	r3, #10
 8016724:	e006      	b.n	8016734 <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8016726:	4b05      	ldr	r3, [pc, #20]	; (801673c <LoRaMacCryptoSetMulticastReference+0x28>)
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	331c      	adds	r3, #28
 801672c:	001a      	movs	r2, r3
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 8016732:	2300      	movs	r3, #0
}
 8016734:	0018      	movs	r0, r3
 8016736:	46bd      	mov	sp, r7
 8016738:	b002      	add	sp, #8
 801673a:	bd80      	pop	{r7, pc}
 801673c:	20000f30 	.word	0x20000f30

08016740 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	0002      	movs	r2, r0
 8016748:	6039      	str	r1, [r7, #0]
 801674a:	1dfb      	adds	r3, r7, #7
 801674c:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801674e:	683a      	ldr	r2, [r7, #0]
 8016750:	1dfb      	adds	r3, r7, #7
 8016752:	781b      	ldrb	r3, [r3, #0]
 8016754:	0011      	movs	r1, r2
 8016756:	0018      	movs	r0, r3
 8016758:	f7f7 f994 	bl	800da84 <SecureElementSetKey>
 801675c:	1e03      	subs	r3, r0, #0
 801675e:	d001      	beq.n	8016764 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016760:	230f      	movs	r3, #15
 8016762:	e014      	b.n	801678e <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 8016764:	1dfb      	adds	r3, r7, #7
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d10f      	bne.n	801678c <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801676c:	1dfb      	adds	r3, r7, #7
 801676e:	781b      	ldrb	r3, [r3, #0]
 8016770:	0018      	movs	r0, r3
 8016772:	f000 fa79 	bl	8016c68 <LoRaMacCryptoDeriveMcRootKey>
 8016776:	1e03      	subs	r3, r0, #0
 8016778:	d001      	beq.n	801677e <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801677a:	230f      	movs	r3, #15
 801677c:	e007      	b.n	801678e <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801677e:	2004      	movs	r0, #4
 8016780:	f000 faa6 	bl	8016cd0 <LoRaMacCryptoDeriveMcKEKey>
 8016784:	1e03      	subs	r3, r0, #0
 8016786:	d001      	beq.n	801678c <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016788:	230f      	movs	r3, #15
 801678a:	e000      	b.n	801678e <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801678c:	2300      	movs	r3, #0
}
 801678e:	0018      	movs	r0, r3
 8016790:	46bd      	mov	sp, r7
 8016792:	b002      	add	sp, #8
 8016794:	bd80      	pop	{r7, pc}
	...

08016798 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b086      	sub	sp, #24
 801679c:	af02      	add	r7, sp, #8
 801679e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d101      	bne.n	80167aa <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80167a6:	230a      	movs	r3, #10
 80167a8:	e039      	b.n	801681e <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80167aa:	230f      	movs	r3, #15
 80167ac:	18fb      	adds	r3, r7, r3
 80167ae:	2201      	movs	r2, #1
 80167b0:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80167b2:	2300      	movs	r3, #0
 80167b4:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80167b6:	2308      	movs	r3, #8
 80167b8:	18fb      	adds	r3, r7, r3
 80167ba:	0018      	movs	r0, r3
 80167bc:	f7f7 fb8c 	bl	800ded8 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 80167c0:	68ba      	ldr	r2, [r7, #8]
 80167c2:	4b19      	ldr	r3, [pc, #100]	; (8016828 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	b292      	uxth	r2, r2
 80167c8:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80167ca:	4b17      	ldr	r3, [pc, #92]	; (8016828 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80167d0:	4b15      	ldr	r3, [pc, #84]	; (8016828 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	889a      	ldrh	r2, [r3, #4]
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	0018      	movs	r0, r3
 80167de:	f000 fca1 	bl	8017124 <LoRaMacSerializerJoinRequest>
 80167e2:	1e03      	subs	r3, r0, #0
 80167e4:	d001      	beq.n	80167ea <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80167e6:	2311      	movs	r3, #17
 80167e8:	e019      	b.n	801681e <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	6819      	ldr	r1, [r3, #0]
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	3318      	adds	r3, #24
 80167f2:	220f      	movs	r2, #15
 80167f4:	18ba      	adds	r2, r7, r2
 80167f6:	7812      	ldrb	r2, [r2, #0]
 80167f8:	9300      	str	r3, [sp, #0]
 80167fa:	0013      	movs	r3, r2
 80167fc:	2213      	movs	r2, #19
 80167fe:	2000      	movs	r0, #0
 8016800:	f7f7 f9ba 	bl	800db78 <SecureElementComputeAesCmac>
 8016804:	1e03      	subs	r3, r0, #0
 8016806:	d001      	beq.n	801680c <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016808:	230f      	movs	r3, #15
 801680a:	e008      	b.n	801681e <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	0018      	movs	r0, r3
 8016810:	f000 fc88 	bl	8017124 <LoRaMacSerializerJoinRequest>
 8016814:	1e03      	subs	r3, r0, #0
 8016816:	d001      	beq.n	801681c <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016818:	2311      	movs	r3, #17
 801681a:	e000      	b.n	801681e <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801681c:	2300      	movs	r3, #0
}
 801681e:	0018      	movs	r0, r3
 8016820:	46bd      	mov	sp, r7
 8016822:	b004      	add	sp, #16
 8016824:	bd80      	pop	{r7, pc}
 8016826:	46c0      	nop			; (mov r8, r8)
 8016828:	20000f30 	.word	0x20000f30

0801682c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801682c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801682e:	b095      	sub	sp, #84	; 0x54
 8016830:	af04      	add	r7, sp, #16
 8016832:	60b9      	str	r1, [r7, #8]
 8016834:	607a      	str	r2, [r7, #4]
 8016836:	230f      	movs	r3, #15
 8016838:	18fb      	adds	r3, r7, r3
 801683a:	1c02      	adds	r2, r0, #0
 801683c:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d002      	beq.n	801684a <LoRaMacCryptoHandleJoinAccept+0x1e>
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d101      	bne.n	801684e <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801684a:	230a      	movs	r3, #10
 801684c:	e0a7      	b.n	801699e <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801684e:	233f      	movs	r3, #63	; 0x3f
 8016850:	18fb      	adds	r3, r7, r3
 8016852:	2213      	movs	r2, #19
 8016854:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016856:	2614      	movs	r6, #20
 8016858:	19bb      	adds	r3, r7, r6
 801685a:	2200      	movs	r2, #0
 801685c:	601a      	str	r2, [r3, #0]
 801685e:	3304      	adds	r3, #4
 8016860:	221d      	movs	r2, #29
 8016862:	2100      	movs	r1, #0
 8016864:	0018      	movs	r0, r3
 8016866:	f008 fafe 	bl	801ee66 <memset>
    uint8_t versionMinor         = 0;
 801686a:	2313      	movs	r3, #19
 801686c:	18fb      	adds	r3, r7, r3
 801686e:	2200      	movs	r2, #0
 8016870:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 8016872:	4b4d      	ldr	r3, [pc, #308]	; (80169a8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	3304      	adds	r3, #4
 8016878:	63bb      	str	r3, [r7, #56]	; 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 801687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801687c:	781b      	ldrb	r3, [r3, #0]
 801687e:	b29c      	uxth	r4, r3
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681d      	ldr	r5, [r3, #0]
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	791b      	ldrb	r3, [r3, #4]
 8016888:	68b9      	ldr	r1, [r7, #8]
 801688a:	200f      	movs	r0, #15
 801688c:	183a      	adds	r2, r7, r0
 801688e:	7810      	ldrb	r0, [r2, #0]
 8016890:	2213      	movs	r2, #19
 8016892:	18ba      	adds	r2, r7, r2
 8016894:	9202      	str	r2, [sp, #8]
 8016896:	19ba      	adds	r2, r7, r6
 8016898:	9201      	str	r2, [sp, #4]
 801689a:	9300      	str	r3, [sp, #0]
 801689c:	002b      	movs	r3, r5
 801689e:	0022      	movs	r2, r4
 80168a0:	f7f7 fa93 	bl	800ddca <SecureElementProcessJoinAccept>
 80168a4:	1e03      	subs	r3, r0, #0
 80168a6:	d001      	beq.n	80168ac <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80168a8:	230f      	movs	r3, #15
 80168aa:	e078      	b.n	801699e <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	6818      	ldr	r0, [r3, #0]
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	791b      	ldrb	r3, [r3, #4]
 80168b4:	b29a      	uxth	r2, r3
 80168b6:	2314      	movs	r3, #20
 80168b8:	18fb      	adds	r3, r7, r3
 80168ba:	0019      	movs	r1, r3
 80168bc:	f003 fa98 	bl	8019df0 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	0018      	movs	r0, r3
 80168c4:	f000 fa2e 	bl	8016d24 <LoRaMacParserJoinAccept>
 80168c8:	1e03      	subs	r3, r0, #0
 80168ca:	d001      	beq.n	80168d0 <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80168cc:	2310      	movs	r3, #16
 80168ce:	e066      	b.n	801699e <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 80168d0:	253f      	movs	r5, #63	; 0x3f
 80168d2:	197c      	adds	r4, r7, r5
 80168d4:	2000      	movs	r0, #0
 80168d6:	f000 f9c7 	bl	8016c68 <LoRaMacCryptoDeriveMcRootKey>
 80168da:	0003      	movs	r3, r0
 80168dc:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80168de:	002a      	movs	r2, r5
 80168e0:	18bb      	adds	r3, r7, r2
 80168e2:	781b      	ldrb	r3, [r3, #0]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d002      	beq.n	80168ee <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 80168e8:	18bb      	adds	r3, r7, r2
 80168ea:	781b      	ldrb	r3, [r3, #0]
 80168ec:	e057      	b.n	801699e <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80168ee:	253f      	movs	r5, #63	; 0x3f
 80168f0:	197c      	adds	r4, r7, r5
 80168f2:	2004      	movs	r0, #4
 80168f4:	f000 f9ec 	bl	8016cd0 <LoRaMacCryptoDeriveMcKEKey>
 80168f8:	0003      	movs	r3, r0
 80168fa:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80168fc:	002a      	movs	r2, r5
 80168fe:	18bb      	adds	r3, r7, r2
 8016900:	781b      	ldrb	r3, [r3, #0]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d002      	beq.n	801690c <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 8016906:	18bb      	adds	r3, r7, r2
 8016908:	781b      	ldrb	r3, [r3, #0]
 801690a:	e048      	b.n	801699e <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	1d99      	adds	r1, r3, #6
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	3309      	adds	r3, #9
 8016914:	001a      	movs	r2, r3
 8016916:	4b24      	ldr	r3, [pc, #144]	; (80169a8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	3304      	adds	r3, #4
 801691c:	253f      	movs	r5, #63	; 0x3f
 801691e:	197c      	adds	r4, r7, r5
 8016920:	2003      	movs	r0, #3
 8016922:	f7ff fcb1 	bl	8016288 <DeriveSessionKey10x>
 8016926:	0003      	movs	r3, r0
 8016928:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801692a:	197b      	adds	r3, r7, r5
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d002      	beq.n	8016938 <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 8016932:	197b      	adds	r3, r7, r5
 8016934:	781b      	ldrb	r3, [r3, #0]
 8016936:	e032      	b.n	801699e <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	1d99      	adds	r1, r3, #6
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	3309      	adds	r3, #9
 8016940:	001a      	movs	r2, r3
 8016942:	4b19      	ldr	r3, [pc, #100]	; (80169a8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	3304      	adds	r3, #4
 8016948:	253f      	movs	r5, #63	; 0x3f
 801694a:	197c      	adds	r4, r7, r5
 801694c:	2002      	movs	r0, #2
 801694e:	f7ff fc9b 	bl	8016288 <DeriveSessionKey10x>
 8016952:	0003      	movs	r3, r0
 8016954:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016956:	197b      	adds	r3, r7, r5
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d002      	beq.n	8016964 <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 801695e:	197b      	adds	r3, r7, r5
 8016960:	781b      	ldrb	r3, [r3, #0]
 8016962:	e01c      	b.n	801699e <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 8016964:	4b10      	ldr	r3, [pc, #64]	; (80169a8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2213      	movs	r2, #19
 801696a:	18ba      	adds	r2, r7, r2
 801696c:	7812      	ldrb	r2, [r2, #0]
 801696e:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8016970:	4b0d      	ldr	r3, [pc, #52]	; (80169a8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	2200      	movs	r2, #0
 8016976:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016978:	4b0b      	ldr	r3, [pc, #44]	; (80169a8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	2201      	movs	r2, #1
 801697e:	4252      	negs	r2, r2
 8016980:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016982:	4b09      	ldr	r3, [pc, #36]	; (80169a8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	2201      	movs	r2, #1
 8016988:	4252      	negs	r2, r2
 801698a:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801698c:	4b06      	ldr	r3, [pc, #24]	; (80169a8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	2201      	movs	r2, #1
 8016992:	4252      	negs	r2, r2
 8016994:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 8016996:	4b04      	ldr	r3, [pc, #16]	; (80169a8 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016998:	685b      	ldr	r3, [r3, #4]
 801699a:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 801699c:	2300      	movs	r3, #0
}
 801699e:	0018      	movs	r0, r3
 80169a0:	46bd      	mov	sp, r7
 80169a2:	b011      	add	sp, #68	; 0x44
 80169a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169a6:	46c0      	nop			; (mov r8, r8)
 80169a8:	20000f30 	.word	0x20000f30

080169ac <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80169ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169ae:	b08b      	sub	sp, #44	; 0x2c
 80169b0:	af04      	add	r7, sp, #16
 80169b2:	60f8      	str	r0, [r7, #12]
 80169b4:	0008      	movs	r0, r1
 80169b6:	0011      	movs	r1, r2
 80169b8:	607b      	str	r3, [r7, #4]
 80169ba:	230b      	movs	r3, #11
 80169bc:	18fb      	adds	r3, r7, r3
 80169be:	1c02      	adds	r2, r0, #0
 80169c0:	701a      	strb	r2, [r3, #0]
 80169c2:	230a      	movs	r3, #10
 80169c4:	18fb      	adds	r3, r7, r3
 80169c6:	1c0a      	adds	r2, r1, #0
 80169c8:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80169ca:	2316      	movs	r3, #22
 80169cc:	18fb      	adds	r3, r7, r3
 80169ce:	2213      	movs	r2, #19
 80169d0:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80169d2:	2317      	movs	r3, #23
 80169d4:	18fb      	adds	r3, r7, r3
 80169d6:	2203      	movs	r2, #3
 80169d8:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d101      	bne.n	80169e4 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80169e0:	230a      	movs	r3, #10
 80169e2:	e072      	b.n	8016aca <LoRaMacCryptoSecureMessage+0x11e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 80169e4:	4b3b      	ldr	r3, [pc, #236]	; (8016ad4 <LoRaMacCryptoSecureMessage+0x128>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	68db      	ldr	r3, [r3, #12]
 80169ea:	68fa      	ldr	r2, [r7, #12]
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d201      	bcs.n	80169f4 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80169f0:	2306      	movs	r3, #6
 80169f2:	e06a      	b.n	8016aca <LoRaMacCryptoSecureMessage+0x11e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2220      	movs	r2, #32
 80169f8:	5c9b      	ldrb	r3, [r3, r2]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d103      	bne.n	8016a06 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80169fe:	2317      	movs	r3, #23
 8016a00:	18fb      	adds	r3, r7, r3
 8016a02:	2202      	movs	r2, #2
 8016a04:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8016a06:	4b33      	ldr	r3, [pc, #204]	; (8016ad4 <LoRaMacCryptoSecureMessage+0x128>)
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	68db      	ldr	r3, [r3, #12]
 8016a0c:	68fa      	ldr	r2, [r7, #12]
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d91c      	bls.n	8016a4c <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2228      	movs	r2, #40	; 0x28
 8016a1a:	5c9b      	ldrb	r3, [r3, r2]
 8016a1c:	b219      	sxth	r1, r3
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	689d      	ldr	r5, [r3, #8]
 8016a22:	2616      	movs	r6, #22
 8016a24:	19bc      	adds	r4, r7, r6
 8016a26:	2317      	movs	r3, #23
 8016a28:	18fb      	adds	r3, r7, r3
 8016a2a:	781a      	ldrb	r2, [r3, #0]
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	9301      	str	r3, [sp, #4]
 8016a30:	2300      	movs	r3, #0
 8016a32:	9300      	str	r3, [sp, #0]
 8016a34:	002b      	movs	r3, r5
 8016a36:	f7ff f9c7 	bl	8015dc8 <PayloadEncrypt>
 8016a3a:	0003      	movs	r3, r0
 8016a3c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016a3e:	19bb      	adds	r3, r7, r6
 8016a40:	781b      	ldrb	r3, [r3, #0]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d002      	beq.n	8016a4c <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 8016a46:	19bb      	adds	r3, r7, r6
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	e03e      	b.n	8016aca <LoRaMacCryptoSecureMessage+0x11e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	0018      	movs	r0, r3
 8016a50:	f000 fc03 	bl	801725a <LoRaMacSerializerData>
 8016a54:	1e03      	subs	r3, r0, #0
 8016a56:	d001      	beq.n	8016a5c <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016a58:	2311      	movs	r3, #17
 8016a5a:	e036      	b.n	8016aca <LoRaMacCryptoSecureMessage+0x11e>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016a5c:	2117      	movs	r1, #23
 8016a5e:	187b      	adds	r3, r7, r1
 8016a60:	2202      	movs	r2, #2
 8016a62:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6818      	ldr	r0, [r3, #0]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	791b      	ldrb	r3, [r3, #4]
 8016a6c:	b29b      	uxth	r3, r3
 8016a6e:	3b04      	subs	r3, #4
 8016a70:	b29d      	uxth	r5, r3
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	689b      	ldr	r3, [r3, #8]
 8016a76:	687a      	ldr	r2, [r7, #4]
 8016a78:	322c      	adds	r2, #44	; 0x2c
 8016a7a:	2616      	movs	r6, #22
 8016a7c:	19bc      	adds	r4, r7, r6
 8016a7e:	1879      	adds	r1, r7, r1
 8016a80:	7809      	ldrb	r1, [r1, #0]
 8016a82:	9203      	str	r2, [sp, #12]
 8016a84:	68fa      	ldr	r2, [r7, #12]
 8016a86:	9202      	str	r2, [sp, #8]
 8016a88:	9301      	str	r3, [sp, #4]
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	9300      	str	r3, [sp, #0]
 8016a8e:	2300      	movs	r3, #0
 8016a90:	000a      	movs	r2, r1
 8016a92:	0029      	movs	r1, r5
 8016a94:	f7ff facc 	bl	8016030 <ComputeCmacB0>
 8016a98:	0003      	movs	r3, r0
 8016a9a:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016a9c:	19bb      	adds	r3, r7, r6
 8016a9e:	781b      	ldrb	r3, [r3, #0]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d002      	beq.n	8016aaa <LoRaMacCryptoSecureMessage+0xfe>
        {
            return retval;
 8016aa4:	19bb      	adds	r3, r7, r6
 8016aa6:	781b      	ldrb	r3, [r3, #0]
 8016aa8:	e00f      	b.n	8016aca <LoRaMacCryptoSecureMessage+0x11e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	0018      	movs	r0, r3
 8016aae:	f000 fbd4 	bl	801725a <LoRaMacSerializerData>
 8016ab2:	1e03      	subs	r3, r0, #0
 8016ab4:	d001      	beq.n	8016aba <LoRaMacCryptoSecureMessage+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016ab6:	2311      	movs	r3, #17
 8016ab8:	e007      	b.n	8016aca <LoRaMacCryptoSecureMessage+0x11e>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8016aba:	4b06      	ldr	r3, [pc, #24]	; (8016ad4 <LoRaMacCryptoSecureMessage+0x128>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	68fa      	ldr	r2, [r7, #12]
 8016ac0:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8016ac2:	4b04      	ldr	r3, [pc, #16]	; (8016ad4 <LoRaMacCryptoSecureMessage+0x128>)
 8016ac4:	685b      	ldr	r3, [r3, #4]
 8016ac6:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8016ac8:	2300      	movs	r3, #0
}
 8016aca:	0018      	movs	r0, r3
 8016acc:	46bd      	mov	sp, r7
 8016ace:	b007      	add	sp, #28
 8016ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ad2:	46c0      	nop			; (mov r8, r8)
 8016ad4:	20000f30 	.word	0x20000f30

08016ad8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ada:	b08b      	sub	sp, #44	; 0x2c
 8016adc:	af04      	add	r7, sp, #16
 8016ade:	60b9      	str	r1, [r7, #8]
 8016ae0:	0011      	movs	r1, r2
 8016ae2:	607b      	str	r3, [r7, #4]
 8016ae4:	230f      	movs	r3, #15
 8016ae6:	18fb      	adds	r3, r7, r3
 8016ae8:	1c02      	adds	r2, r0, #0
 8016aea:	701a      	strb	r2, [r3, #0]
 8016aec:	230e      	movs	r3, #14
 8016aee:	18fb      	adds	r3, r7, r3
 8016af0:	1c0a      	adds	r2, r1, #0
 8016af2:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8016af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d101      	bne.n	8016afe <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016afa:	230a      	movs	r3, #10
 8016afc:	e0ae      	b.n	8016c5c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016afe:	687a      	ldr	r2, [r7, #4]
 8016b00:	230e      	movs	r3, #14
 8016b02:	18fb      	adds	r3, r7, r3
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	0011      	movs	r1, r2
 8016b08:	0018      	movs	r0, r3
 8016b0a:	f7ff fc69 	bl	80163e0 <CheckFCntDown>
 8016b0e:	0003      	movs	r3, r0
 8016b10:	001a      	movs	r2, r3
 8016b12:	2301      	movs	r3, #1
 8016b14:	4053      	eors	r3, r2
 8016b16:	b2db      	uxtb	r3, r3
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d001      	beq.n	8016b20 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016b1c:	2306      	movs	r3, #6
 8016b1e:	e09d      	b.n	8016c5c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016b20:	2315      	movs	r3, #21
 8016b22:	18fb      	adds	r3, r7, r3
 8016b24:	2213      	movs	r2, #19
 8016b26:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016b28:	2317      	movs	r3, #23
 8016b2a:	18fb      	adds	r3, r7, r3
 8016b2c:	2203      	movs	r2, #3
 8016b2e:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016b30:	2314      	movs	r3, #20
 8016b32:	18fb      	adds	r3, r7, r3
 8016b34:	2202      	movs	r2, #2
 8016b36:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b3a:	0018      	movs	r0, r3
 8016b3c:	f000 f9e2 	bl	8016f04 <LoRaMacParserData>
 8016b40:	1e03      	subs	r3, r0, #0
 8016b42:	d001      	beq.n	8016b48 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016b44:	2310      	movs	r3, #16
 8016b46:	e089      	b.n	8016c5c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016b48:	2515      	movs	r5, #21
 8016b4a:	197c      	adds	r4, r7, r5
 8016b4c:	2310      	movs	r3, #16
 8016b4e:	18fa      	adds	r2, r7, r3
 8016b50:	230f      	movs	r3, #15
 8016b52:	18fb      	adds	r3, r7, r3
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	0011      	movs	r1, r2
 8016b58:	0018      	movs	r0, r3
 8016b5a:	f7ff fb63 	bl	8016224 <GetKeyAddrItem>
 8016b5e:	0003      	movs	r3, r0
 8016b60:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016b62:	197b      	adds	r3, r7, r5
 8016b64:	781b      	ldrb	r3, [r3, #0]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d002      	beq.n	8016b70 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 8016b6a:	197b      	adds	r3, r7, r5
 8016b6c:	781b      	ldrb	r3, [r3, #0]
 8016b6e:	e075      	b.n	8016c5c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016b70:	693a      	ldr	r2, [r7, #16]
 8016b72:	2317      	movs	r3, #23
 8016b74:	18fb      	adds	r3, r7, r3
 8016b76:	7852      	ldrb	r2, [r2, #1]
 8016b78:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 8016b7a:	693a      	ldr	r2, [r7, #16]
 8016b7c:	2314      	movs	r3, #20
 8016b7e:	18fb      	adds	r3, r7, r3
 8016b80:	7892      	ldrb	r2, [r2, #2]
 8016b82:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b86:	689b      	ldr	r3, [r3, #8]
 8016b88:	68ba      	ldr	r2, [r7, #8]
 8016b8a:	429a      	cmp	r2, r3
 8016b8c:	d001      	beq.n	8016b92 <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016b8e:	2302      	movs	r3, #2
 8016b90:	e064      	b.n	8016c5c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b94:	7b1b      	ldrb	r3, [r3, #12]
 8016b96:	069b      	lsls	r3, r3, #26
 8016b98:	0fdb      	lsrs	r3, r3, #31
 8016b9a:	b2db      	uxtb	r3, r3
 8016b9c:	001a      	movs	r2, r3
 8016b9e:	2016      	movs	r0, #22
 8016ba0:	183b      	adds	r3, r7, r0
 8016ba2:	1e51      	subs	r1, r2, #1
 8016ba4:	418a      	sbcs	r2, r1
 8016ba6:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8016ba8:	4b2e      	ldr	r3, [pc, #184]	; (8016c64 <LoRaMacCryptoUnsecureMessage+0x18c>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	789b      	ldrb	r3, [r3, #2]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d102      	bne.n	8016bb8 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016bb2:	183b      	adds	r3, r7, r0
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bba:	6818      	ldr	r0, [r3, #0]
 8016bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bbe:	791b      	ldrb	r3, [r3, #4]
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	3b04      	subs	r3, #4
 8016bc4:	b299      	uxth	r1, r3
 8016bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bca:	2615      	movs	r6, #21
 8016bcc:	19bc      	adds	r4, r7, r6
 8016bce:	2216      	movs	r2, #22
 8016bd0:	18ba      	adds	r2, r7, r2
 8016bd2:	7815      	ldrb	r5, [r2, #0]
 8016bd4:	2214      	movs	r2, #20
 8016bd6:	18ba      	adds	r2, r7, r2
 8016bd8:	7812      	ldrb	r2, [r2, #0]
 8016bda:	9303      	str	r3, [sp, #12]
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	9302      	str	r3, [sp, #8]
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	9301      	str	r3, [sp, #4]
 8016be4:	2301      	movs	r3, #1
 8016be6:	9300      	str	r3, [sp, #0]
 8016be8:	002b      	movs	r3, r5
 8016bea:	f7ff fa69 	bl	80160c0 <VerifyCmacB0>
 8016bee:	0003      	movs	r3, r0
 8016bf0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016bf2:	19bb      	adds	r3, r7, r6
 8016bf4:	781b      	ldrb	r3, [r3, #0]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d002      	beq.n	8016c00 <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 8016bfa:	19bb      	adds	r3, r7, r6
 8016bfc:	781b      	ldrb	r3, [r3, #0]
 8016bfe:	e02d      	b.n	8016c5c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c02:	2220      	movs	r2, #32
 8016c04:	5c9b      	ldrb	r3, [r3, r2]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d103      	bne.n	8016c12 <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016c0a:	2317      	movs	r3, #23
 8016c0c:	18fb      	adds	r3, r7, r3
 8016c0e:	2202      	movs	r2, #2
 8016c10:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c14:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c18:	2228      	movs	r2, #40	; 0x28
 8016c1a:	5c9b      	ldrb	r3, [r3, r2]
 8016c1c:	b219      	sxth	r1, r3
 8016c1e:	2615      	movs	r6, #21
 8016c20:	19bc      	adds	r4, r7, r6
 8016c22:	68bd      	ldr	r5, [r7, #8]
 8016c24:	2317      	movs	r3, #23
 8016c26:	18fb      	adds	r3, r7, r3
 8016c28:	781a      	ldrb	r2, [r3, #0]
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	9301      	str	r3, [sp, #4]
 8016c2e:	2301      	movs	r3, #1
 8016c30:	9300      	str	r3, [sp, #0]
 8016c32:	002b      	movs	r3, r5
 8016c34:	f7ff f8c8 	bl	8015dc8 <PayloadEncrypt>
 8016c38:	0003      	movs	r3, r0
 8016c3a:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016c3c:	19bb      	adds	r3, r7, r6
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d002      	beq.n	8016c4a <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 8016c44:	19bb      	adds	r3, r7, r6
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	e008      	b.n	8016c5c <LoRaMacCryptoUnsecureMessage+0x184>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8016c4a:	687a      	ldr	r2, [r7, #4]
 8016c4c:	230e      	movs	r3, #14
 8016c4e:	18fb      	adds	r3, r7, r3
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	0011      	movs	r1, r2
 8016c54:	0018      	movs	r0, r3
 8016c56:	f7ff fbe7 	bl	8016428 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016c5a:	2300      	movs	r3, #0
}
 8016c5c:	0018      	movs	r0, r3
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	b007      	add	sp, #28
 8016c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c64:	20000f30 	.word	0x20000f30

08016c68 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8016c68:	b590      	push	{r4, r7, lr}
 8016c6a:	b087      	sub	sp, #28
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	0002      	movs	r2, r0
 8016c70:	1dfb      	adds	r3, r7, #7
 8016c72:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8016c74:	1dfb      	adds	r3, r7, #7
 8016c76:	781b      	ldrb	r3, [r3, #0]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d001      	beq.n	8016c80 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016c7c:	230b      	movs	r3, #11
 8016c7e:	e020      	b.n	8016cc2 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 8016c80:	2408      	movs	r4, #8
 8016c82:	193b      	adds	r3, r7, r4
 8016c84:	2200      	movs	r2, #0
 8016c86:	601a      	str	r2, [r3, #0]
 8016c88:	3304      	adds	r3, #4
 8016c8a:	220c      	movs	r2, #12
 8016c8c:	2100      	movs	r1, #0
 8016c8e:	0018      	movs	r0, r3
 8016c90:	f008 f8e9 	bl	801ee66 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8016c94:	4b0d      	ldr	r3, [pc, #52]	; (8016ccc <LoRaMacCryptoDeriveMcRootKey+0x64>)
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	789b      	ldrb	r3, [r3, #2]
 8016c9a:	2b01      	cmp	r3, #1
 8016c9c:	d102      	bne.n	8016ca4 <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 8016c9e:	193b      	adds	r3, r7, r4
 8016ca0:	2220      	movs	r2, #32
 8016ca2:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016ca4:	4b09      	ldr	r3, [pc, #36]	; (8016ccc <LoRaMacCryptoDeriveMcRootKey+0x64>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	1dfa      	adds	r2, r7, #7
 8016caa:	7812      	ldrb	r2, [r2, #0]
 8016cac:	2108      	movs	r1, #8
 8016cae:	1879      	adds	r1, r7, r1
 8016cb0:	6818      	ldr	r0, [r3, #0]
 8016cb2:	2304      	movs	r3, #4
 8016cb4:	f7f7 f834 	bl	800dd20 <SecureElementDeriveAndStoreKey>
 8016cb8:	1e03      	subs	r3, r0, #0
 8016cba:	d001      	beq.n	8016cc0 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cbc:	230f      	movs	r3, #15
 8016cbe:	e000      	b.n	8016cc2 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016cc0:	2300      	movs	r3, #0
}
 8016cc2:	0018      	movs	r0, r3
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	b007      	add	sp, #28
 8016cc8:	bd90      	pop	{r4, r7, pc}
 8016cca:	46c0      	nop			; (mov r8, r8)
 8016ccc:	20000f30 	.word	0x20000f30

08016cd0 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8016cd0:	b590      	push	{r4, r7, lr}
 8016cd2:	b087      	sub	sp, #28
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	0002      	movs	r2, r0
 8016cd8:	1dfb      	adds	r3, r7, #7
 8016cda:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016cdc:	1dfb      	adds	r3, r7, #7
 8016cde:	781b      	ldrb	r3, [r3, #0]
 8016ce0:	2b04      	cmp	r3, #4
 8016ce2:	d001      	beq.n	8016ce8 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016ce4:	230b      	movs	r3, #11
 8016ce6:	e017      	b.n	8016d18 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8016ce8:	2408      	movs	r4, #8
 8016cea:	193b      	adds	r3, r7, r4
 8016cec:	2200      	movs	r2, #0
 8016cee:	601a      	str	r2, [r3, #0]
 8016cf0:	3304      	adds	r3, #4
 8016cf2:	220c      	movs	r2, #12
 8016cf4:	2100      	movs	r1, #0
 8016cf6:	0018      	movs	r0, r3
 8016cf8:	f008 f8b5 	bl	801ee66 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016cfc:	4b08      	ldr	r3, [pc, #32]	; (8016d20 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	1dfa      	adds	r2, r7, #7
 8016d02:	7812      	ldrb	r2, [r2, #0]
 8016d04:	1939      	adds	r1, r7, r4
 8016d06:	6818      	ldr	r0, [r3, #0]
 8016d08:	237f      	movs	r3, #127	; 0x7f
 8016d0a:	f7f7 f809 	bl	800dd20 <SecureElementDeriveAndStoreKey>
 8016d0e:	1e03      	subs	r3, r0, #0
 8016d10:	d001      	beq.n	8016d16 <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d12:	230f      	movs	r3, #15
 8016d14:	e000      	b.n	8016d18 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016d16:	2300      	movs	r3, #0
}
 8016d18:	0018      	movs	r0, r3
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	b007      	add	sp, #28
 8016d1e:	bd90      	pop	{r4, r7, pc}
 8016d20:	20000f30 	.word	0x20000f30

08016d24 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016d24:	b590      	push	{r4, r7, lr}
 8016d26:	b085      	sub	sp, #20
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d003      	beq.n	8016d3a <LoRaMacParserJoinAccept+0x16>
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d101      	bne.n	8016d3e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016d3a:	2302      	movs	r3, #2
 8016d3c:	e0de      	b.n	8016efc <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8016d3e:	240e      	movs	r4, #14
 8016d40:	193b      	adds	r3, r7, r4
 8016d42:	2200      	movs	r2, #0
 8016d44:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	681a      	ldr	r2, [r3, #0]
 8016d4a:	193b      	adds	r3, r7, r4
 8016d4c:	881b      	ldrh	r3, [r3, #0]
 8016d4e:	1939      	adds	r1, r7, r4
 8016d50:	1c58      	adds	r0, r3, #1
 8016d52:	8008      	strh	r0, [r1, #0]
 8016d54:	18d3      	adds	r3, r2, r3
 8016d56:	781a      	ldrb	r2, [r3, #0]
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	1d98      	adds	r0, r3, #6
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681a      	ldr	r2, [r3, #0]
 8016d64:	193b      	adds	r3, r7, r4
 8016d66:	881b      	ldrh	r3, [r3, #0]
 8016d68:	18d3      	adds	r3, r2, r3
 8016d6a:	2203      	movs	r2, #3
 8016d6c:	0019      	movs	r1, r3
 8016d6e:	f003 f83f 	bl	8019df0 <memcpy1>
    bufItr = bufItr + 3;
 8016d72:	193b      	adds	r3, r7, r4
 8016d74:	193a      	adds	r2, r7, r4
 8016d76:	8812      	ldrh	r2, [r2, #0]
 8016d78:	3203      	adds	r2, #3
 8016d7a:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	3309      	adds	r3, #9
 8016d80:	0018      	movs	r0, r3
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	681a      	ldr	r2, [r3, #0]
 8016d86:	193b      	adds	r3, r7, r4
 8016d88:	881b      	ldrh	r3, [r3, #0]
 8016d8a:	18d3      	adds	r3, r2, r3
 8016d8c:	2203      	movs	r2, #3
 8016d8e:	0019      	movs	r1, r3
 8016d90:	f003 f82e 	bl	8019df0 <memcpy1>
    bufItr = bufItr + 3;
 8016d94:	193b      	adds	r3, r7, r4
 8016d96:	193a      	adds	r2, r7, r4
 8016d98:	8812      	ldrh	r2, [r2, #0]
 8016d9a:	3203      	adds	r2, #3
 8016d9c:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	681a      	ldr	r2, [r3, #0]
 8016da2:	193b      	adds	r3, r7, r4
 8016da4:	881b      	ldrh	r3, [r3, #0]
 8016da6:	1939      	adds	r1, r7, r4
 8016da8:	1c58      	adds	r0, r3, #1
 8016daa:	8008      	strh	r0, [r1, #0]
 8016dac:	18d3      	adds	r3, r2, r3
 8016dae:	781b      	ldrb	r3, [r3, #0]
 8016db0:	001a      	movs	r2, r3
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	681a      	ldr	r2, [r3, #0]
 8016dba:	193b      	adds	r3, r7, r4
 8016dbc:	881b      	ldrh	r3, [r3, #0]
 8016dbe:	1939      	adds	r1, r7, r4
 8016dc0:	1c58      	adds	r0, r3, #1
 8016dc2:	8008      	strh	r0, [r1, #0]
 8016dc4:	18d3      	adds	r3, r2, r3
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	021a      	lsls	r2, r3, #8
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	68db      	ldr	r3, [r3, #12]
 8016dce:	431a      	orrs	r2, r3
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681a      	ldr	r2, [r3, #0]
 8016dd8:	193b      	adds	r3, r7, r4
 8016dda:	881b      	ldrh	r3, [r3, #0]
 8016ddc:	1939      	adds	r1, r7, r4
 8016dde:	1c58      	adds	r0, r3, #1
 8016de0:	8008      	strh	r0, [r1, #0]
 8016de2:	18d3      	adds	r3, r2, r3
 8016de4:	781b      	ldrb	r3, [r3, #0]
 8016de6:	041a      	lsls	r2, r3, #16
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	68db      	ldr	r3, [r3, #12]
 8016dec:	431a      	orrs	r2, r3
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681a      	ldr	r2, [r3, #0]
 8016df6:	193b      	adds	r3, r7, r4
 8016df8:	881b      	ldrh	r3, [r3, #0]
 8016dfa:	1939      	adds	r1, r7, r4
 8016dfc:	1c58      	adds	r0, r3, #1
 8016dfe:	8008      	strh	r0, [r1, #0]
 8016e00:	18d3      	adds	r3, r2, r3
 8016e02:	781b      	ldrb	r3, [r3, #0]
 8016e04:	061a      	lsls	r2, r3, #24
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	68db      	ldr	r3, [r3, #12]
 8016e0a:	431a      	orrs	r2, r3
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	681a      	ldr	r2, [r3, #0]
 8016e14:	193b      	adds	r3, r7, r4
 8016e16:	881b      	ldrh	r3, [r3, #0]
 8016e18:	1939      	adds	r1, r7, r4
 8016e1a:	1c58      	adds	r0, r3, #1
 8016e1c:	8008      	strh	r0, [r1, #0]
 8016e1e:	18d3      	adds	r3, r2, r3
 8016e20:	781a      	ldrb	r2, [r3, #0]
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	681a      	ldr	r2, [r3, #0]
 8016e2a:	193b      	adds	r3, r7, r4
 8016e2c:	881b      	ldrh	r3, [r3, #0]
 8016e2e:	1939      	adds	r1, r7, r4
 8016e30:	1c58      	adds	r0, r3, #1
 8016e32:	8008      	strh	r0, [r1, #0]
 8016e34:	18d3      	adds	r3, r2, r3
 8016e36:	781a      	ldrb	r2, [r3, #0]
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	791b      	ldrb	r3, [r3, #4]
 8016e40:	1f1a      	subs	r2, r3, #4
 8016e42:	193b      	adds	r3, r7, r4
 8016e44:	881b      	ldrh	r3, [r3, #0]
 8016e46:	1ad3      	subs	r3, r2, r3
 8016e48:	2b10      	cmp	r3, #16
 8016e4a:	d111      	bne.n	8016e70 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	3312      	adds	r3, #18
 8016e50:	0018      	movs	r0, r3
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681a      	ldr	r2, [r3, #0]
 8016e56:	193b      	adds	r3, r7, r4
 8016e58:	881b      	ldrh	r3, [r3, #0]
 8016e5a:	18d3      	adds	r3, r2, r3
 8016e5c:	2210      	movs	r2, #16
 8016e5e:	0019      	movs	r1, r3
 8016e60:	f002 ffc6 	bl	8019df0 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8016e64:	193b      	adds	r3, r7, r4
 8016e66:	193a      	adds	r2, r7, r4
 8016e68:	8812      	ldrh	r2, [r2, #0]
 8016e6a:	3210      	adds	r2, #16
 8016e6c:	801a      	strh	r2, [r3, #0]
 8016e6e:	e00a      	b.n	8016e86 <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	791b      	ldrb	r3, [r3, #4]
 8016e74:	1f1a      	subs	r2, r3, #4
 8016e76:	230e      	movs	r3, #14
 8016e78:	18fb      	adds	r3, r7, r3
 8016e7a:	881b      	ldrh	r3, [r3, #0]
 8016e7c:	1ad3      	subs	r3, r2, r3
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	dd01      	ble.n	8016e86 <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 8016e82:	2301      	movs	r3, #1
 8016e84:	e03a      	b.n	8016efc <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	681a      	ldr	r2, [r3, #0]
 8016e8a:	240e      	movs	r4, #14
 8016e8c:	193b      	adds	r3, r7, r4
 8016e8e:	881b      	ldrh	r3, [r3, #0]
 8016e90:	1939      	adds	r1, r7, r4
 8016e92:	1c58      	adds	r0, r3, #1
 8016e94:	8008      	strh	r0, [r1, #0]
 8016e96:	18d3      	adds	r3, r2, r3
 8016e98:	781b      	ldrb	r3, [r3, #0]
 8016e9a:	001a      	movs	r2, r3
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681a      	ldr	r2, [r3, #0]
 8016ea4:	193b      	adds	r3, r7, r4
 8016ea6:	881b      	ldrh	r3, [r3, #0]
 8016ea8:	1939      	adds	r1, r7, r4
 8016eaa:	1c58      	adds	r0, r3, #1
 8016eac:	8008      	strh	r0, [r1, #0]
 8016eae:	18d3      	adds	r3, r2, r3
 8016eb0:	781b      	ldrb	r3, [r3, #0]
 8016eb2:	021a      	lsls	r2, r3, #8
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eb8:	431a      	orrs	r2, r3
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681a      	ldr	r2, [r3, #0]
 8016ec2:	193b      	adds	r3, r7, r4
 8016ec4:	881b      	ldrh	r3, [r3, #0]
 8016ec6:	1939      	adds	r1, r7, r4
 8016ec8:	1c58      	adds	r0, r3, #1
 8016eca:	8008      	strh	r0, [r1, #0]
 8016ecc:	18d3      	adds	r3, r2, r3
 8016ece:	781b      	ldrb	r3, [r3, #0]
 8016ed0:	041a      	lsls	r2, r3, #16
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ed6:	431a      	orrs	r2, r3
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681a      	ldr	r2, [r3, #0]
 8016ee0:	193b      	adds	r3, r7, r4
 8016ee2:	881b      	ldrh	r3, [r3, #0]
 8016ee4:	1939      	adds	r1, r7, r4
 8016ee6:	1c58      	adds	r0, r3, #1
 8016ee8:	8008      	strh	r0, [r1, #0]
 8016eea:	18d3      	adds	r3, r2, r3
 8016eec:	781b      	ldrb	r3, [r3, #0]
 8016eee:	061a      	lsls	r2, r3, #24
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ef4:	431a      	orrs	r2, r3
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016efa:	2300      	movs	r3, #0
}
 8016efc:	0018      	movs	r0, r3
 8016efe:	46bd      	mov	sp, r7
 8016f00:	b005      	add	sp, #20
 8016f02:	bd90      	pop	{r4, r7, pc}

08016f04 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016f04:	b590      	push	{r4, r7, lr}
 8016f06:	b085      	sub	sp, #20
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d003      	beq.n	8016f1a <LoRaMacParserData+0x16>
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d101      	bne.n	8016f1e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016f1a:	2302      	movs	r3, #2
 8016f1c:	e0fe      	b.n	801711c <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 8016f1e:	240e      	movs	r4, #14
 8016f20:	193b      	adds	r3, r7, r4
 8016f22:	2200      	movs	r2, #0
 8016f24:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681a      	ldr	r2, [r3, #0]
 8016f2a:	193b      	adds	r3, r7, r4
 8016f2c:	881b      	ldrh	r3, [r3, #0]
 8016f2e:	1939      	adds	r1, r7, r4
 8016f30:	1c58      	adds	r0, r3, #1
 8016f32:	8008      	strh	r0, [r1, #0]
 8016f34:	18d3      	adds	r3, r2, r3
 8016f36:	781a      	ldrb	r2, [r3, #0]
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	681a      	ldr	r2, [r3, #0]
 8016f40:	193b      	adds	r3, r7, r4
 8016f42:	881b      	ldrh	r3, [r3, #0]
 8016f44:	1939      	adds	r1, r7, r4
 8016f46:	1c58      	adds	r0, r3, #1
 8016f48:	8008      	strh	r0, [r1, #0]
 8016f4a:	18d3      	adds	r3, r2, r3
 8016f4c:	781b      	ldrb	r3, [r3, #0]
 8016f4e:	001a      	movs	r2, r3
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	681a      	ldr	r2, [r3, #0]
 8016f58:	193b      	adds	r3, r7, r4
 8016f5a:	881b      	ldrh	r3, [r3, #0]
 8016f5c:	1939      	adds	r1, r7, r4
 8016f5e:	1c58      	adds	r0, r3, #1
 8016f60:	8008      	strh	r0, [r1, #0]
 8016f62:	18d3      	adds	r3, r2, r3
 8016f64:	781b      	ldrb	r3, [r3, #0]
 8016f66:	021a      	lsls	r2, r3, #8
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	689b      	ldr	r3, [r3, #8]
 8016f6c:	431a      	orrs	r2, r3
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	681a      	ldr	r2, [r3, #0]
 8016f76:	193b      	adds	r3, r7, r4
 8016f78:	881b      	ldrh	r3, [r3, #0]
 8016f7a:	1939      	adds	r1, r7, r4
 8016f7c:	1c58      	adds	r0, r3, #1
 8016f7e:	8008      	strh	r0, [r1, #0]
 8016f80:	18d3      	adds	r3, r2, r3
 8016f82:	781b      	ldrb	r3, [r3, #0]
 8016f84:	041a      	lsls	r2, r3, #16
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	689b      	ldr	r3, [r3, #8]
 8016f8a:	431a      	orrs	r2, r3
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	681a      	ldr	r2, [r3, #0]
 8016f94:	193b      	adds	r3, r7, r4
 8016f96:	881b      	ldrh	r3, [r3, #0]
 8016f98:	1939      	adds	r1, r7, r4
 8016f9a:	1c58      	adds	r0, r3, #1
 8016f9c:	8008      	strh	r0, [r1, #0]
 8016f9e:	18d3      	adds	r3, r2, r3
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	061a      	lsls	r2, r3, #24
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	689b      	ldr	r3, [r3, #8]
 8016fa8:	431a      	orrs	r2, r3
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681a      	ldr	r2, [r3, #0]
 8016fb2:	193b      	adds	r3, r7, r4
 8016fb4:	881b      	ldrh	r3, [r3, #0]
 8016fb6:	1939      	adds	r1, r7, r4
 8016fb8:	1c58      	adds	r0, r3, #1
 8016fba:	8008      	strh	r0, [r1, #0]
 8016fbc:	18d3      	adds	r3, r2, r3
 8016fbe:	781a      	ldrb	r2, [r3, #0]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	681a      	ldr	r2, [r3, #0]
 8016fc8:	193b      	adds	r3, r7, r4
 8016fca:	881b      	ldrh	r3, [r3, #0]
 8016fcc:	1939      	adds	r1, r7, r4
 8016fce:	1c58      	adds	r0, r3, #1
 8016fd0:	8008      	strh	r0, [r1, #0]
 8016fd2:	18d3      	adds	r3, r2, r3
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	b29a      	uxth	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681a      	ldr	r2, [r3, #0]
 8016fe0:	193b      	adds	r3, r7, r4
 8016fe2:	881b      	ldrh	r3, [r3, #0]
 8016fe4:	1939      	adds	r1, r7, r4
 8016fe6:	1c58      	adds	r0, r3, #1
 8016fe8:	8008      	strh	r0, [r1, #0]
 8016fea:	18d3      	adds	r3, r2, r3
 8016fec:	781b      	ldrb	r3, [r3, #0]
 8016fee:	0219      	lsls	r1, r3, #8
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	89db      	ldrh	r3, [r3, #14]
 8016ff4:	b21a      	sxth	r2, r3
 8016ff6:	b20b      	sxth	r3, r1
 8016ff8:	4313      	orrs	r3, r2
 8016ffa:	b21b      	sxth	r3, r3
 8016ffc:	b29a      	uxth	r2, r3
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	3310      	adds	r3, #16
 8017006:	0018      	movs	r0, r3
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681a      	ldr	r2, [r3, #0]
 801700c:	193b      	adds	r3, r7, r4
 801700e:	881b      	ldrh	r3, [r3, #0]
 8017010:	18d1      	adds	r1, r2, r3
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	7b1b      	ldrb	r3, [r3, #12]
 8017016:	071b      	lsls	r3, r3, #28
 8017018:	0f1b      	lsrs	r3, r3, #28
 801701a:	b2db      	uxtb	r3, r3
 801701c:	b29b      	uxth	r3, r3
 801701e:	001a      	movs	r2, r3
 8017020:	f002 fee6 	bl	8019df0 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	7b1b      	ldrb	r3, [r3, #12]
 8017028:	071b      	lsls	r3, r3, #28
 801702a:	0f1b      	lsrs	r3, r3, #28
 801702c:	b2db      	uxtb	r3, r3
 801702e:	b299      	uxth	r1, r3
 8017030:	193b      	adds	r3, r7, r4
 8017032:	193a      	adds	r2, r7, r4
 8017034:	8812      	ldrh	r2, [r2, #0]
 8017036:	188a      	adds	r2, r1, r2
 8017038:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2220      	movs	r2, #32
 801703e:	2100      	movs	r1, #0
 8017040:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	2228      	movs	r2, #40	; 0x28
 8017046:	2100      	movs	r1, #0
 8017048:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	791b      	ldrb	r3, [r3, #4]
 801704e:	001a      	movs	r2, r3
 8017050:	193b      	adds	r3, r7, r4
 8017052:	881b      	ldrh	r3, [r3, #0]
 8017054:	1ad3      	subs	r3, r2, r3
 8017056:	2b04      	cmp	r3, #4
 8017058:	dd2e      	ble.n	80170b8 <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	681a      	ldr	r2, [r3, #0]
 801705e:	193b      	adds	r3, r7, r4
 8017060:	881b      	ldrh	r3, [r3, #0]
 8017062:	1939      	adds	r1, r7, r4
 8017064:	1c58      	adds	r0, r3, #1
 8017066:	8008      	strh	r0, [r1, #0]
 8017068:	18d3      	adds	r3, r2, r3
 801706a:	7819      	ldrb	r1, [r3, #0]
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2220      	movs	r2, #32
 8017070:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	791a      	ldrb	r2, [r3, #4]
 8017076:	193b      	adds	r3, r7, r4
 8017078:	881b      	ldrh	r3, [r3, #0]
 801707a:	b2db      	uxtb	r3, r3
 801707c:	1ad3      	subs	r3, r2, r3
 801707e:	b2db      	uxtb	r3, r3
 8017080:	3b04      	subs	r3, #4
 8017082:	b2d9      	uxtb	r1, r3
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2228      	movs	r2, #40	; 0x28
 8017088:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	681a      	ldr	r2, [r3, #0]
 8017092:	193b      	adds	r3, r7, r4
 8017094:	881b      	ldrh	r3, [r3, #0]
 8017096:	18d1      	adds	r1, r2, r3
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	2228      	movs	r2, #40	; 0x28
 801709c:	5c9b      	ldrb	r3, [r3, r2]
 801709e:	b29b      	uxth	r3, r3
 80170a0:	001a      	movs	r2, r3
 80170a2:	f002 fea5 	bl	8019df0 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	2228      	movs	r2, #40	; 0x28
 80170aa:	5c9b      	ldrb	r3, [r3, r2]
 80170ac:	b299      	uxth	r1, r3
 80170ae:	193b      	adds	r3, r7, r4
 80170b0:	193a      	adds	r2, r7, r4
 80170b2:	8812      	ldrh	r2, [r2, #0]
 80170b4:	188a      	adds	r2, r1, r2
 80170b6:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	681a      	ldr	r2, [r3, #0]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	791b      	ldrb	r3, [r3, #4]
 80170c0:	3b04      	subs	r3, #4
 80170c2:	18d3      	adds	r3, r2, r3
 80170c4:	781b      	ldrb	r3, [r3, #0]
 80170c6:	001a      	movs	r2, r3
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	6819      	ldr	r1, [r3, #0]
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	791b      	ldrb	r3, [r3, #4]
 80170d8:	3b03      	subs	r3, #3
 80170da:	18cb      	adds	r3, r1, r3
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	021b      	lsls	r3, r3, #8
 80170e0:	431a      	orrs	r2, r3
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	6819      	ldr	r1, [r3, #0]
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	791b      	ldrb	r3, [r3, #4]
 80170f2:	3b02      	subs	r3, #2
 80170f4:	18cb      	adds	r3, r1, r3
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	041b      	lsls	r3, r3, #16
 80170fa:	431a      	orrs	r2, r3
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	6819      	ldr	r1, [r3, #0]
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	791b      	ldrb	r3, [r3, #4]
 801710c:	3b01      	subs	r3, #1
 801710e:	18cb      	adds	r3, r1, r3
 8017110:	781b      	ldrb	r3, [r3, #0]
 8017112:	061b      	lsls	r3, r3, #24
 8017114:	431a      	orrs	r2, r3
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801711a:	2300      	movs	r3, #0
}
 801711c:	0018      	movs	r0, r3
 801711e:	46bd      	mov	sp, r7
 8017120:	b005      	add	sp, #20
 8017122:	bd90      	pop	{r4, r7, pc}

08017124 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8017124:	b5b0      	push	{r4, r5, r7, lr}
 8017126:	b084      	sub	sp, #16
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d003      	beq.n	801713a <LoRaMacSerializerJoinRequest+0x16>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d101      	bne.n	801713e <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801713a:	2301      	movs	r3, #1
 801713c:	e089      	b.n	8017252 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 801713e:	230e      	movs	r3, #14
 8017140:	18fb      	adds	r3, r7, r3
 8017142:	2200      	movs	r2, #0
 8017144:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	791b      	ldrb	r3, [r3, #4]
 801714a:	2b16      	cmp	r3, #22
 801714c:	d801      	bhi.n	8017152 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801714e:	2302      	movs	r3, #2
 8017150:	e07f      	b.n	8017252 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	240e      	movs	r4, #14
 8017158:	193b      	adds	r3, r7, r4
 801715a:	881b      	ldrh	r3, [r3, #0]
 801715c:	1939      	adds	r1, r7, r4
 801715e:	1c58      	adds	r0, r3, #1
 8017160:	8008      	strh	r0, [r1, #0]
 8017162:	18d3      	adds	r3, r2, r3
 8017164:	687a      	ldr	r2, [r7, #4]
 8017166:	7952      	ldrb	r2, [r2, #5]
 8017168:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	681a      	ldr	r2, [r3, #0]
 801716e:	193b      	adds	r3, r7, r4
 8017170:	881b      	ldrh	r3, [r3, #0]
 8017172:	18d0      	adds	r0, r2, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	3306      	adds	r3, #6
 8017178:	2208      	movs	r2, #8
 801717a:	0019      	movs	r1, r3
 801717c:	f002 fe54 	bl	8019e28 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8017180:	193b      	adds	r3, r7, r4
 8017182:	193a      	adds	r2, r7, r4
 8017184:	8812      	ldrh	r2, [r2, #0]
 8017186:	3208      	adds	r2, #8
 8017188:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681a      	ldr	r2, [r3, #0]
 801718e:	193b      	adds	r3, r7, r4
 8017190:	881b      	ldrh	r3, [r3, #0]
 8017192:	18d0      	adds	r0, r2, r3
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	330e      	adds	r3, #14
 8017198:	2208      	movs	r2, #8
 801719a:	0019      	movs	r1, r3
 801719c:	f002 fe44 	bl	8019e28 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80171a0:	193b      	adds	r3, r7, r4
 80171a2:	0025      	movs	r5, r4
 80171a4:	193a      	adds	r2, r7, r4
 80171a6:	8812      	ldrh	r2, [r2, #0]
 80171a8:	3208      	adds	r2, #8
 80171aa:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	8ad8      	ldrh	r0, [r3, #22]
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	681a      	ldr	r2, [r3, #0]
 80171b4:	197b      	adds	r3, r7, r5
 80171b6:	881b      	ldrh	r3, [r3, #0]
 80171b8:	1979      	adds	r1, r7, r5
 80171ba:	1c5c      	adds	r4, r3, #1
 80171bc:	800c      	strh	r4, [r1, #0]
 80171be:	18d3      	adds	r3, r2, r3
 80171c0:	b2c2      	uxtb	r2, r0
 80171c2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	8adb      	ldrh	r3, [r3, #22]
 80171c8:	0a1b      	lsrs	r3, r3, #8
 80171ca:	b298      	uxth	r0, r3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	197b      	adds	r3, r7, r5
 80171d2:	881b      	ldrh	r3, [r3, #0]
 80171d4:	1979      	adds	r1, r7, r5
 80171d6:	1c5c      	adds	r4, r3, #1
 80171d8:	800c      	strh	r4, [r1, #0]
 80171da:	18d3      	adds	r3, r2, r3
 80171dc:	b2c2      	uxtb	r2, r0
 80171de:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6998      	ldr	r0, [r3, #24]
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681a      	ldr	r2, [r3, #0]
 80171e8:	197b      	adds	r3, r7, r5
 80171ea:	881b      	ldrh	r3, [r3, #0]
 80171ec:	1979      	adds	r1, r7, r5
 80171ee:	1c5c      	adds	r4, r3, #1
 80171f0:	800c      	strh	r4, [r1, #0]
 80171f2:	18d3      	adds	r3, r2, r3
 80171f4:	b2c2      	uxtb	r2, r0
 80171f6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	699b      	ldr	r3, [r3, #24]
 80171fc:	0a18      	lsrs	r0, r3, #8
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	681a      	ldr	r2, [r3, #0]
 8017202:	197b      	adds	r3, r7, r5
 8017204:	881b      	ldrh	r3, [r3, #0]
 8017206:	1979      	adds	r1, r7, r5
 8017208:	1c5c      	adds	r4, r3, #1
 801720a:	800c      	strh	r4, [r1, #0]
 801720c:	18d3      	adds	r3, r2, r3
 801720e:	b2c2      	uxtb	r2, r0
 8017210:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	699b      	ldr	r3, [r3, #24]
 8017216:	0c18      	lsrs	r0, r3, #16
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681a      	ldr	r2, [r3, #0]
 801721c:	197b      	adds	r3, r7, r5
 801721e:	881b      	ldrh	r3, [r3, #0]
 8017220:	1979      	adds	r1, r7, r5
 8017222:	1c5c      	adds	r4, r3, #1
 8017224:	800c      	strh	r4, [r1, #0]
 8017226:	18d3      	adds	r3, r2, r3
 8017228:	b2c2      	uxtb	r2, r0
 801722a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	699b      	ldr	r3, [r3, #24]
 8017230:	0e18      	lsrs	r0, r3, #24
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	681a      	ldr	r2, [r3, #0]
 8017236:	197b      	adds	r3, r7, r5
 8017238:	881b      	ldrh	r3, [r3, #0]
 801723a:	1979      	adds	r1, r7, r5
 801723c:	1c5c      	adds	r4, r3, #1
 801723e:	800c      	strh	r4, [r1, #0]
 8017240:	18d3      	adds	r3, r2, r3
 8017242:	b2c2      	uxtb	r2, r0
 8017244:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017246:	197b      	adds	r3, r7, r5
 8017248:	881b      	ldrh	r3, [r3, #0]
 801724a:	b2da      	uxtb	r2, r3
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017250:	2300      	movs	r3, #0
}
 8017252:	0018      	movs	r0, r3
 8017254:	46bd      	mov	sp, r7
 8017256:	b004      	add	sp, #16
 8017258:	bdb0      	pop	{r4, r5, r7, pc}

0801725a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801725a:	b5b0      	push	{r4, r5, r7, lr}
 801725c:	b084      	sub	sp, #16
 801725e:	af00      	add	r7, sp, #0
 8017260:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d003      	beq.n	8017270 <LoRaMacSerializerData+0x16>
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d101      	bne.n	8017274 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017270:	2301      	movs	r3, #1
 8017272:	e119      	b.n	80174a8 <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 8017274:	230e      	movs	r3, #14
 8017276:	18fb      	adds	r3, r7, r3
 8017278:	2200      	movs	r2, #0
 801727a:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801727c:	200c      	movs	r0, #12
 801727e:	183b      	adds	r3, r7, r0
 8017280:	2208      	movs	r2, #8
 8017282:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	7b1b      	ldrb	r3, [r3, #12]
 8017288:	071b      	lsls	r3, r3, #28
 801728a:	0f1b      	lsrs	r3, r3, #28
 801728c:	b2db      	uxtb	r3, r3
 801728e:	b299      	uxth	r1, r3
 8017290:	183b      	adds	r3, r7, r0
 8017292:	183a      	adds	r2, r7, r0
 8017294:	8812      	ldrh	r2, [r2, #0]
 8017296:	188a      	adds	r2, r1, r2
 8017298:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	2228      	movs	r2, #40	; 0x28
 801729e:	5c9b      	ldrb	r3, [r3, r2]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d004      	beq.n	80172ae <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80172a4:	183b      	adds	r3, r7, r0
 80172a6:	183a      	adds	r2, r7, r0
 80172a8:	8812      	ldrh	r2, [r2, #0]
 80172aa:	3201      	adds	r2, #1
 80172ac:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	2228      	movs	r2, #40	; 0x28
 80172b2:	5c9b      	ldrb	r3, [r3, r2]
 80172b4:	b299      	uxth	r1, r3
 80172b6:	200c      	movs	r0, #12
 80172b8:	183b      	adds	r3, r7, r0
 80172ba:	183a      	adds	r2, r7, r0
 80172bc:	8812      	ldrh	r2, [r2, #0]
 80172be:	188a      	adds	r2, r1, r2
 80172c0:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80172c2:	0001      	movs	r1, r0
 80172c4:	187b      	adds	r3, r7, r1
 80172c6:	187a      	adds	r2, r7, r1
 80172c8:	8812      	ldrh	r2, [r2, #0]
 80172ca:	3204      	adds	r2, #4
 80172cc:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	791b      	ldrb	r3, [r3, #4]
 80172d2:	b29b      	uxth	r3, r3
 80172d4:	187a      	adds	r2, r7, r1
 80172d6:	8812      	ldrh	r2, [r2, #0]
 80172d8:	429a      	cmp	r2, r3
 80172da:	d901      	bls.n	80172e0 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80172dc:	2302      	movs	r3, #2
 80172de:	e0e3      	b.n	80174a8 <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	681a      	ldr	r2, [r3, #0]
 80172e4:	250e      	movs	r5, #14
 80172e6:	197b      	adds	r3, r7, r5
 80172e8:	881b      	ldrh	r3, [r3, #0]
 80172ea:	1979      	adds	r1, r7, r5
 80172ec:	1c58      	adds	r0, r3, #1
 80172ee:	8008      	strh	r0, [r1, #0]
 80172f0:	18d3      	adds	r3, r2, r3
 80172f2:	687a      	ldr	r2, [r7, #4]
 80172f4:	7952      	ldrb	r2, [r2, #5]
 80172f6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6898      	ldr	r0, [r3, #8]
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	681a      	ldr	r2, [r3, #0]
 8017300:	197b      	adds	r3, r7, r5
 8017302:	881b      	ldrh	r3, [r3, #0]
 8017304:	1979      	adds	r1, r7, r5
 8017306:	1c5c      	adds	r4, r3, #1
 8017308:	800c      	strh	r4, [r1, #0]
 801730a:	18d3      	adds	r3, r2, r3
 801730c:	b2c2      	uxtb	r2, r0
 801730e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	689b      	ldr	r3, [r3, #8]
 8017314:	0a18      	lsrs	r0, r3, #8
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681a      	ldr	r2, [r3, #0]
 801731a:	197b      	adds	r3, r7, r5
 801731c:	881b      	ldrh	r3, [r3, #0]
 801731e:	1979      	adds	r1, r7, r5
 8017320:	1c5c      	adds	r4, r3, #1
 8017322:	800c      	strh	r4, [r1, #0]
 8017324:	18d3      	adds	r3, r2, r3
 8017326:	b2c2      	uxtb	r2, r0
 8017328:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	689b      	ldr	r3, [r3, #8]
 801732e:	0c18      	lsrs	r0, r3, #16
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681a      	ldr	r2, [r3, #0]
 8017334:	197b      	adds	r3, r7, r5
 8017336:	881b      	ldrh	r3, [r3, #0]
 8017338:	1979      	adds	r1, r7, r5
 801733a:	1c5c      	adds	r4, r3, #1
 801733c:	800c      	strh	r4, [r1, #0]
 801733e:	18d3      	adds	r3, r2, r3
 8017340:	b2c2      	uxtb	r2, r0
 8017342:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	689b      	ldr	r3, [r3, #8]
 8017348:	0e18      	lsrs	r0, r3, #24
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	681a      	ldr	r2, [r3, #0]
 801734e:	197b      	adds	r3, r7, r5
 8017350:	881b      	ldrh	r3, [r3, #0]
 8017352:	1979      	adds	r1, r7, r5
 8017354:	1c5c      	adds	r4, r3, #1
 8017356:	800c      	strh	r4, [r1, #0]
 8017358:	18d3      	adds	r3, r2, r3
 801735a:	b2c2      	uxtb	r2, r0
 801735c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	681a      	ldr	r2, [r3, #0]
 8017362:	197b      	adds	r3, r7, r5
 8017364:	881b      	ldrh	r3, [r3, #0]
 8017366:	1979      	adds	r1, r7, r5
 8017368:	1c58      	adds	r0, r3, #1
 801736a:	8008      	strh	r0, [r1, #0]
 801736c:	18d3      	adds	r3, r2, r3
 801736e:	687a      	ldr	r2, [r7, #4]
 8017370:	7b12      	ldrb	r2, [r2, #12]
 8017372:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	89d8      	ldrh	r0, [r3, #14]
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	681a      	ldr	r2, [r3, #0]
 801737c:	197b      	adds	r3, r7, r5
 801737e:	881b      	ldrh	r3, [r3, #0]
 8017380:	1979      	adds	r1, r7, r5
 8017382:	1c5c      	adds	r4, r3, #1
 8017384:	800c      	strh	r4, [r1, #0]
 8017386:	18d3      	adds	r3, r2, r3
 8017388:	b2c2      	uxtb	r2, r0
 801738a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	89db      	ldrh	r3, [r3, #14]
 8017390:	0a1b      	lsrs	r3, r3, #8
 8017392:	b298      	uxth	r0, r3
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681a      	ldr	r2, [r3, #0]
 8017398:	197b      	adds	r3, r7, r5
 801739a:	881b      	ldrh	r3, [r3, #0]
 801739c:	1979      	adds	r1, r7, r5
 801739e:	1c5c      	adds	r4, r3, #1
 80173a0:	800c      	strh	r4, [r1, #0]
 80173a2:	18d3      	adds	r3, r2, r3
 80173a4:	b2c2      	uxtb	r2, r0
 80173a6:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	681a      	ldr	r2, [r3, #0]
 80173ac:	002c      	movs	r4, r5
 80173ae:	197b      	adds	r3, r7, r5
 80173b0:	881b      	ldrh	r3, [r3, #0]
 80173b2:	18d0      	adds	r0, r2, r3
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	3310      	adds	r3, #16
 80173b8:	0019      	movs	r1, r3
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	7b1b      	ldrb	r3, [r3, #12]
 80173be:	071b      	lsls	r3, r3, #28
 80173c0:	0f1b      	lsrs	r3, r3, #28
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	001a      	movs	r2, r3
 80173c8:	f002 fd12 	bl	8019df0 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	7b1b      	ldrb	r3, [r3, #12]
 80173d0:	071b      	lsls	r3, r3, #28
 80173d2:	0f1b      	lsrs	r3, r3, #28
 80173d4:	b2db      	uxtb	r3, r3
 80173d6:	b299      	uxth	r1, r3
 80173d8:	193b      	adds	r3, r7, r4
 80173da:	193a      	adds	r2, r7, r4
 80173dc:	8812      	ldrh	r2, [r2, #0]
 80173de:	188a      	adds	r2, r1, r2
 80173e0:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	2228      	movs	r2, #40	; 0x28
 80173e6:	5c9b      	ldrb	r3, [r3, r2]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d00b      	beq.n	8017404 <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681a      	ldr	r2, [r3, #0]
 80173f0:	193b      	adds	r3, r7, r4
 80173f2:	881b      	ldrh	r3, [r3, #0]
 80173f4:	1939      	adds	r1, r7, r4
 80173f6:	1c58      	adds	r0, r3, #1
 80173f8:	8008      	strh	r0, [r1, #0]
 80173fa:	18d3      	adds	r3, r2, r3
 80173fc:	687a      	ldr	r2, [r7, #4]
 80173fe:	2120      	movs	r1, #32
 8017400:	5c52      	ldrb	r2, [r2, r1]
 8017402:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	681a      	ldr	r2, [r3, #0]
 8017408:	240e      	movs	r4, #14
 801740a:	193b      	adds	r3, r7, r4
 801740c:	881b      	ldrh	r3, [r3, #0]
 801740e:	18d0      	adds	r0, r2, r3
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2228      	movs	r2, #40	; 0x28
 8017418:	5c9b      	ldrb	r3, [r3, r2]
 801741a:	b29b      	uxth	r3, r3
 801741c:	001a      	movs	r2, r3
 801741e:	f002 fce7 	bl	8019df0 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	2228      	movs	r2, #40	; 0x28
 8017426:	5c9b      	ldrb	r3, [r3, r2]
 8017428:	b299      	uxth	r1, r3
 801742a:	193b      	adds	r3, r7, r4
 801742c:	193a      	adds	r2, r7, r4
 801742e:	8812      	ldrh	r2, [r2, #0]
 8017430:	188a      	adds	r2, r1, r2
 8017432:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	681a      	ldr	r2, [r3, #0]
 801743c:	193b      	adds	r3, r7, r4
 801743e:	881b      	ldrh	r3, [r3, #0]
 8017440:	0025      	movs	r5, r4
 8017442:	1939      	adds	r1, r7, r4
 8017444:	1c5c      	adds	r4, r3, #1
 8017446:	800c      	strh	r4, [r1, #0]
 8017448:	18d3      	adds	r3, r2, r3
 801744a:	b2c2      	uxtb	r2, r0
 801744c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017452:	0a18      	lsrs	r0, r3, #8
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681a      	ldr	r2, [r3, #0]
 8017458:	197b      	adds	r3, r7, r5
 801745a:	881b      	ldrh	r3, [r3, #0]
 801745c:	1979      	adds	r1, r7, r5
 801745e:	1c5c      	adds	r4, r3, #1
 8017460:	800c      	strh	r4, [r1, #0]
 8017462:	18d3      	adds	r3, r2, r3
 8017464:	b2c2      	uxtb	r2, r0
 8017466:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801746c:	0c18      	lsrs	r0, r3, #16
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	681a      	ldr	r2, [r3, #0]
 8017472:	197b      	adds	r3, r7, r5
 8017474:	881b      	ldrh	r3, [r3, #0]
 8017476:	1979      	adds	r1, r7, r5
 8017478:	1c5c      	adds	r4, r3, #1
 801747a:	800c      	strh	r4, [r1, #0]
 801747c:	18d3      	adds	r3, r2, r3
 801747e:	b2c2      	uxtb	r2, r0
 8017480:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017486:	0e18      	lsrs	r0, r3, #24
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681a      	ldr	r2, [r3, #0]
 801748c:	197b      	adds	r3, r7, r5
 801748e:	881b      	ldrh	r3, [r3, #0]
 8017490:	1979      	adds	r1, r7, r5
 8017492:	1c5c      	adds	r4, r3, #1
 8017494:	800c      	strh	r4, [r1, #0]
 8017496:	18d3      	adds	r3, r2, r3
 8017498:	b2c2      	uxtb	r2, r0
 801749a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801749c:	197b      	adds	r3, r7, r5
 801749e:	881b      	ldrh	r3, [r3, #0]
 80174a0:	b2da      	uxtb	r2, r3
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80174a6:	2300      	movs	r3, #0
}
 80174a8:	0018      	movs	r0, r3
 80174aa:	46bd      	mov	sp, r7
 80174ac:	b004      	add	sp, #16
 80174ae:	bdb0      	pop	{r4, r5, r7, pc}

080174b0 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	0002      	movs	r2, r0
 80174b8:	1dfb      	adds	r3, r7, #7
 80174ba:	701a      	strb	r2, [r3, #0]
    switch( region )
 80174bc:	1dfb      	adds	r3, r7, #7
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	2b05      	cmp	r3, #5
 80174c2:	d101      	bne.n	80174c8 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80174c4:	2301      	movs	r3, #1
 80174c6:	e000      	b.n	80174ca <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80174c8:	2300      	movs	r3, #0
        }
    }
}
 80174ca:	0018      	movs	r0, r3
 80174cc:	46bd      	mov	sp, r7
 80174ce:	b002      	add	sp, #8
 80174d0:	bd80      	pop	{r7, pc}

080174d2 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80174d2:	b580      	push	{r7, lr}
 80174d4:	b084      	sub	sp, #16
 80174d6:	af00      	add	r7, sp, #0
 80174d8:	0002      	movs	r2, r0
 80174da:	6039      	str	r1, [r7, #0]
 80174dc:	1dfb      	adds	r3, r7, #7
 80174de:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 80174e0:	2308      	movs	r3, #8
 80174e2:	18fb      	adds	r3, r7, r3
 80174e4:	2200      	movs	r2, #0
 80174e6:	601a      	str	r2, [r3, #0]
    switch( region )
 80174e8:	1dfb      	adds	r3, r7, #7
 80174ea:	781b      	ldrb	r3, [r3, #0]
 80174ec:	2b05      	cmp	r3, #5
 80174ee:	d109      	bne.n	8017504 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80174f0:	683b      	ldr	r3, [r7, #0]
 80174f2:	0018      	movs	r0, r3
 80174f4:	f001 fa5e 	bl	80189b4 <RegionEU868GetPhyParam>
 80174f8:	0003      	movs	r3, r0
 80174fa:	001a      	movs	r2, r3
 80174fc:	230c      	movs	r3, #12
 80174fe:	18fb      	adds	r3, r7, r3
 8017500:	601a      	str	r2, [r3, #0]
 8017502:	e005      	b.n	8017510 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017504:	230c      	movs	r3, #12
 8017506:	18fb      	adds	r3, r7, r3
 8017508:	2208      	movs	r2, #8
 801750a:	18ba      	adds	r2, r7, r2
 801750c:	6812      	ldr	r2, [r2, #0]
 801750e:	601a      	str	r2, [r3, #0]
 8017510:	230c      	movs	r3, #12
 8017512:	18fb      	adds	r3, r7, r3
 8017514:	2200      	movs	r2, #0
 8017516:	681a      	ldr	r2, [r3, #0]
 8017518:	0013      	movs	r3, r2
        }
    }
}
 801751a:	0018      	movs	r0, r3
 801751c:	46bd      	mov	sp, r7
 801751e:	b004      	add	sp, #16
 8017520:	bd80      	pop	{r7, pc}

08017522 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017522:	b580      	push	{r7, lr}
 8017524:	b082      	sub	sp, #8
 8017526:	af00      	add	r7, sp, #0
 8017528:	0002      	movs	r2, r0
 801752a:	6039      	str	r1, [r7, #0]
 801752c:	1dfb      	adds	r3, r7, #7
 801752e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017530:	1dfb      	adds	r3, r7, #7
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	2b05      	cmp	r3, #5
 8017536:	d104      	bne.n	8017542 <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	0018      	movs	r0, r3
 801753c:	f001 fb5a 	bl	8018bf4 <RegionEU868SetBandTxDone>
 8017540:	e000      	b.n	8017544 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017542:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017544:	46bd      	mov	sp, r7
 8017546:	b002      	add	sp, #8
 8017548:	bd80      	pop	{r7, pc}

0801754a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801754a:	b580      	push	{r7, lr}
 801754c:	b082      	sub	sp, #8
 801754e:	af00      	add	r7, sp, #0
 8017550:	0002      	movs	r2, r0
 8017552:	6039      	str	r1, [r7, #0]
 8017554:	1dfb      	adds	r3, r7, #7
 8017556:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017558:	1dfb      	adds	r3, r7, #7
 801755a:	781b      	ldrb	r3, [r3, #0]
 801755c:	2b05      	cmp	r3, #5
 801755e:	d104      	bne.n	801756a <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	0018      	movs	r0, r3
 8017564:	f001 fb72 	bl	8018c4c <RegionEU868InitDefaults>
 8017568:	e000      	b.n	801756c <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801756a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801756c:	46c0      	nop			; (mov r8, r8)
 801756e:	46bd      	mov	sp, r7
 8017570:	b002      	add	sp, #8
 8017572:	bd80      	pop	{r7, pc}

08017574 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b082      	sub	sp, #8
 8017578:	af00      	add	r7, sp, #0
 801757a:	0002      	movs	r2, r0
 801757c:	6039      	str	r1, [r7, #0]
 801757e:	1dfb      	adds	r3, r7, #7
 8017580:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017582:	1dfb      	adds	r3, r7, #7
 8017584:	781b      	ldrb	r3, [r3, #0]
 8017586:	2b05      	cmp	r3, #5
 8017588:	d105      	bne.n	8017596 <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	0018      	movs	r0, r3
 801758e:	f001 fbf1 	bl	8018d74 <RegionEU868GetNvmCtx>
 8017592:	0003      	movs	r3, r0
 8017594:	e000      	b.n	8017598 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8017596:	2300      	movs	r3, #0
        }
    }
}
 8017598:	0018      	movs	r0, r3
 801759a:	46bd      	mov	sp, r7
 801759c:	b002      	add	sp, #8
 801759e:	bd80      	pop	{r7, pc}

080175a0 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b082      	sub	sp, #8
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6039      	str	r1, [r7, #0]
 80175a8:	0011      	movs	r1, r2
 80175aa:	1dfb      	adds	r3, r7, #7
 80175ac:	1c02      	adds	r2, r0, #0
 80175ae:	701a      	strb	r2, [r3, #0]
 80175b0:	1dbb      	adds	r3, r7, #6
 80175b2:	1c0a      	adds	r2, r1, #0
 80175b4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80175b6:	1dfb      	adds	r3, r7, #7
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	2b05      	cmp	r3, #5
 80175bc:	d108      	bne.n	80175d0 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80175be:	1dbb      	adds	r3, r7, #6
 80175c0:	781a      	ldrb	r2, [r3, #0]
 80175c2:	683b      	ldr	r3, [r7, #0]
 80175c4:	0011      	movs	r1, r2
 80175c6:	0018      	movs	r0, r3
 80175c8:	f001 fbe4 	bl	8018d94 <RegionEU868Verify>
 80175cc:	0003      	movs	r3, r0
 80175ce:	e000      	b.n	80175d2 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80175d0:	2300      	movs	r3, #0
        }
    }
}
 80175d2:	0018      	movs	r0, r3
 80175d4:	46bd      	mov	sp, r7
 80175d6:	b002      	add	sp, #8
 80175d8:	bd80      	pop	{r7, pc}

080175da <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80175da:	b580      	push	{r7, lr}
 80175dc:	b082      	sub	sp, #8
 80175de:	af00      	add	r7, sp, #0
 80175e0:	0002      	movs	r2, r0
 80175e2:	6039      	str	r1, [r7, #0]
 80175e4:	1dfb      	adds	r3, r7, #7
 80175e6:	701a      	strb	r2, [r3, #0]
    switch( region )
 80175e8:	1dfb      	adds	r3, r7, #7
 80175ea:	781b      	ldrb	r3, [r3, #0]
 80175ec:	2b05      	cmp	r3, #5
 80175ee:	d104      	bne.n	80175fa <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	0018      	movs	r0, r3
 80175f4:	f001 fc28 	bl	8018e48 <RegionEU868ApplyCFList>
 80175f8:	e000      	b.n	80175fc <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80175fa:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80175fc:	46c0      	nop			; (mov r8, r8)
 80175fe:	46bd      	mov	sp, r7
 8017600:	b002      	add	sp, #8
 8017602:	bd80      	pop	{r7, pc}

08017604 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
 801760a:	0002      	movs	r2, r0
 801760c:	6039      	str	r1, [r7, #0]
 801760e:	1dfb      	adds	r3, r7, #7
 8017610:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017612:	1dfb      	adds	r3, r7, #7
 8017614:	781b      	ldrb	r3, [r3, #0]
 8017616:	2b05      	cmp	r3, #5
 8017618:	d105      	bne.n	8017626 <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801761a:	683b      	ldr	r3, [r7, #0]
 801761c:	0018      	movs	r0, r3
 801761e:	f001 fca3 	bl	8018f68 <RegionEU868ChanMaskSet>
 8017622:	0003      	movs	r3, r0
 8017624:	e000      	b.n	8017628 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017626:	2300      	movs	r3, #0
        }
    }
}
 8017628:	0018      	movs	r0, r3
 801762a:	46bd      	mov	sp, r7
 801762c:	b002      	add	sp, #8
 801762e:	bd80      	pop	{r7, pc}

08017630 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017630:	b590      	push	{r4, r7, lr}
 8017632:	b083      	sub	sp, #12
 8017634:	af00      	add	r7, sp, #0
 8017636:	0004      	movs	r4, r0
 8017638:	0008      	movs	r0, r1
 801763a:	0011      	movs	r1, r2
 801763c:	603b      	str	r3, [r7, #0]
 801763e:	1dfb      	adds	r3, r7, #7
 8017640:	1c22      	adds	r2, r4, #0
 8017642:	701a      	strb	r2, [r3, #0]
 8017644:	1dbb      	adds	r3, r7, #6
 8017646:	1c02      	adds	r2, r0, #0
 8017648:	701a      	strb	r2, [r3, #0]
 801764a:	1d7b      	adds	r3, r7, #5
 801764c:	1c0a      	adds	r2, r1, #0
 801764e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017650:	1dfb      	adds	r3, r7, #7
 8017652:	781b      	ldrb	r3, [r3, #0]
 8017654:	2b05      	cmp	r3, #5
 8017656:	d10a      	bne.n	801766e <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017658:	69bc      	ldr	r4, [r7, #24]
 801765a:	683a      	ldr	r2, [r7, #0]
 801765c:	1d7b      	adds	r3, r7, #5
 801765e:	7819      	ldrb	r1, [r3, #0]
 8017660:	1dbb      	adds	r3, r7, #6
 8017662:	2000      	movs	r0, #0
 8017664:	5618      	ldrsb	r0, [r3, r0]
 8017666:	0023      	movs	r3, r4
 8017668:	f001 fca4 	bl	8018fb4 <RegionEU868ComputeRxWindowParameters>
 801766c:	e000      	b.n	8017670 <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801766e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017670:	46c0      	nop			; (mov r8, r8)
 8017672:	46bd      	mov	sp, r7
 8017674:	b003      	add	sp, #12
 8017676:	bd90      	pop	{r4, r7, pc}

08017678 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b084      	sub	sp, #16
 801767c:	af00      	add	r7, sp, #0
 801767e:	60b9      	str	r1, [r7, #8]
 8017680:	607a      	str	r2, [r7, #4]
 8017682:	210f      	movs	r1, #15
 8017684:	187b      	adds	r3, r7, r1
 8017686:	1c02      	adds	r2, r0, #0
 8017688:	701a      	strb	r2, [r3, #0]
    switch( region )
 801768a:	187b      	adds	r3, r7, r1
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	2b05      	cmp	r3, #5
 8017690:	d107      	bne.n	80176a2 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	0011      	movs	r1, r2
 8017698:	0018      	movs	r0, r3
 801769a:	f001 fced 	bl	8019078 <RegionEU868RxConfig>
 801769e:	0003      	movs	r3, r0
 80176a0:	e000      	b.n	80176a4 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80176a2:	2300      	movs	r3, #0
        }
    }
}
 80176a4:	0018      	movs	r0, r3
 80176a6:	46bd      	mov	sp, r7
 80176a8:	b004      	add	sp, #16
 80176aa:	bd80      	pop	{r7, pc}

080176ac <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	60b9      	str	r1, [r7, #8]
 80176b4:	607a      	str	r2, [r7, #4]
 80176b6:	603b      	str	r3, [r7, #0]
 80176b8:	210f      	movs	r1, #15
 80176ba:	187b      	adds	r3, r7, r1
 80176bc:	1c02      	adds	r2, r0, #0
 80176be:	701a      	strb	r2, [r3, #0]
    switch( region )
 80176c0:	187b      	adds	r3, r7, r1
 80176c2:	781b      	ldrb	r3, [r3, #0]
 80176c4:	2b05      	cmp	r3, #5
 80176c6:	d107      	bne.n	80176d8 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80176c8:	683a      	ldr	r2, [r7, #0]
 80176ca:	6879      	ldr	r1, [r7, #4]
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	0018      	movs	r0, r3
 80176d0:	f001 fdc6 	bl	8019260 <RegionEU868TxConfig>
 80176d4:	0003      	movs	r3, r0
 80176d6:	e000      	b.n	80176da <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80176d8:	2300      	movs	r3, #0
        }
    }
}
 80176da:	0018      	movs	r0, r3
 80176dc:	46bd      	mov	sp, r7
 80176de:	b004      	add	sp, #16
 80176e0:	bd80      	pop	{r7, pc}

080176e2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80176e2:	b590      	push	{r4, r7, lr}
 80176e4:	b087      	sub	sp, #28
 80176e6:	af02      	add	r7, sp, #8
 80176e8:	60b9      	str	r1, [r7, #8]
 80176ea:	607a      	str	r2, [r7, #4]
 80176ec:	603b      	str	r3, [r7, #0]
 80176ee:	210f      	movs	r1, #15
 80176f0:	187b      	adds	r3, r7, r1
 80176f2:	1c02      	adds	r2, r0, #0
 80176f4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80176f6:	187b      	adds	r3, r7, r1
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	2b05      	cmp	r3, #5
 80176fc:	d10a      	bne.n	8017714 <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80176fe:	6a3c      	ldr	r4, [r7, #32]
 8017700:	683a      	ldr	r2, [r7, #0]
 8017702:	6879      	ldr	r1, [r7, #4]
 8017704:	68b8      	ldr	r0, [r7, #8]
 8017706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017708:	9300      	str	r3, [sp, #0]
 801770a:	0023      	movs	r3, r4
 801770c:	f001 fe94 	bl	8019438 <RegionEU868LinkAdrReq>
 8017710:	0003      	movs	r3, r0
 8017712:	e000      	b.n	8017716 <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017714:	2300      	movs	r3, #0
        }
    }
}
 8017716:	0018      	movs	r0, r3
 8017718:	46bd      	mov	sp, r7
 801771a:	b005      	add	sp, #20
 801771c:	bd90      	pop	{r4, r7, pc}

0801771e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801771e:	b580      	push	{r7, lr}
 8017720:	b082      	sub	sp, #8
 8017722:	af00      	add	r7, sp, #0
 8017724:	0002      	movs	r2, r0
 8017726:	6039      	str	r1, [r7, #0]
 8017728:	1dfb      	adds	r3, r7, #7
 801772a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801772c:	1dfb      	adds	r3, r7, #7
 801772e:	781b      	ldrb	r3, [r3, #0]
 8017730:	2b05      	cmp	r3, #5
 8017732:	d105      	bne.n	8017740 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017734:	683b      	ldr	r3, [r7, #0]
 8017736:	0018      	movs	r0, r3
 8017738:	f001 ffd6 	bl	80196e8 <RegionEU868RxParamSetupReq>
 801773c:	0003      	movs	r3, r0
 801773e:	e000      	b.n	8017742 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017740:	2300      	movs	r3, #0
        }
    }
}
 8017742:	0018      	movs	r0, r3
 8017744:	46bd      	mov	sp, r7
 8017746:	b002      	add	sp, #8
 8017748:	bd80      	pop	{r7, pc}

0801774a <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801774a:	b580      	push	{r7, lr}
 801774c:	b082      	sub	sp, #8
 801774e:	af00      	add	r7, sp, #0
 8017750:	0002      	movs	r2, r0
 8017752:	6039      	str	r1, [r7, #0]
 8017754:	1dfb      	adds	r3, r7, #7
 8017756:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017758:	1dfb      	adds	r3, r7, #7
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	2b05      	cmp	r3, #5
 801775e:	d105      	bne.n	801776c <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	0018      	movs	r0, r3
 8017764:	f002 f809 	bl	801977a <RegionEU868NewChannelReq>
 8017768:	0003      	movs	r3, r0
 801776a:	e000      	b.n	801776e <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801776c:	2300      	movs	r3, #0
        }
    }
}
 801776e:	0018      	movs	r0, r3
 8017770:	46bd      	mov	sp, r7
 8017772:	b002      	add	sp, #8
 8017774:	bd80      	pop	{r7, pc}

08017776 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017776:	b580      	push	{r7, lr}
 8017778:	b082      	sub	sp, #8
 801777a:	af00      	add	r7, sp, #0
 801777c:	0002      	movs	r2, r0
 801777e:	6039      	str	r1, [r7, #0]
 8017780:	1dfb      	adds	r3, r7, #7
 8017782:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017784:	1dfb      	adds	r3, r7, #7
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	2b05      	cmp	r3, #5
 801778a:	d105      	bne.n	8017798 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801778c:	683b      	ldr	r3, [r7, #0]
 801778e:	0018      	movs	r0, r3
 8017790:	f002 f85b 	bl	801984a <RegionEU868TxParamSetupReq>
 8017794:	0003      	movs	r3, r0
 8017796:	e000      	b.n	801779a <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017798:	2300      	movs	r3, #0
        }
    }
}
 801779a:	0018      	movs	r0, r3
 801779c:	46bd      	mov	sp, r7
 801779e:	b002      	add	sp, #8
 80177a0:	bd80      	pop	{r7, pc}

080177a2 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80177a2:	b580      	push	{r7, lr}
 80177a4:	b082      	sub	sp, #8
 80177a6:	af00      	add	r7, sp, #0
 80177a8:	0002      	movs	r2, r0
 80177aa:	6039      	str	r1, [r7, #0]
 80177ac:	1dfb      	adds	r3, r7, #7
 80177ae:	701a      	strb	r2, [r3, #0]
    switch( region )
 80177b0:	1dfb      	adds	r3, r7, #7
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	2b05      	cmp	r3, #5
 80177b6:	d105      	bne.n	80177c4 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80177b8:	683b      	ldr	r3, [r7, #0]
 80177ba:	0018      	movs	r0, r3
 80177bc:	f002 f850 	bl	8019860 <RegionEU868DlChannelReq>
 80177c0:	0003      	movs	r3, r0
 80177c2:	e000      	b.n	80177c6 <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80177c4:	2300      	movs	r3, #0
        }
    }
}
 80177c6:	0018      	movs	r0, r3
 80177c8:	46bd      	mov	sp, r7
 80177ca:	b002      	add	sp, #8
 80177cc:	bd80      	pop	{r7, pc}

080177ce <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80177ce:	b590      	push	{r4, r7, lr}
 80177d0:	b083      	sub	sp, #12
 80177d2:	af00      	add	r7, sp, #0
 80177d4:	0004      	movs	r4, r0
 80177d6:	0008      	movs	r0, r1
 80177d8:	0011      	movs	r1, r2
 80177da:	1dfb      	adds	r3, r7, #7
 80177dc:	1c22      	adds	r2, r4, #0
 80177de:	701a      	strb	r2, [r3, #0]
 80177e0:	1dbb      	adds	r3, r7, #6
 80177e2:	1c02      	adds	r2, r0, #0
 80177e4:	701a      	strb	r2, [r3, #0]
 80177e6:	1d7b      	adds	r3, r7, #5
 80177e8:	1c0a      	adds	r2, r1, #0
 80177ea:	701a      	strb	r2, [r3, #0]
    switch( region )
 80177ec:	1dfb      	adds	r3, r7, #7
 80177ee:	781b      	ldrb	r3, [r3, #0]
 80177f0:	2b05      	cmp	r3, #5
 80177f2:	d10a      	bne.n	801780a <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80177f4:	1d7b      	adds	r3, r7, #5
 80177f6:	781a      	ldrb	r2, [r3, #0]
 80177f8:	1dbb      	adds	r3, r7, #6
 80177fa:	781b      	ldrb	r3, [r3, #0]
 80177fc:	b25b      	sxtb	r3, r3
 80177fe:	0011      	movs	r1, r2
 8017800:	0018      	movs	r0, r3
 8017802:	f002 f87b 	bl	80198fc <RegionEU868AlternateDr>
 8017806:	0003      	movs	r3, r0
 8017808:	e000      	b.n	801780c <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801780a:	2300      	movs	r3, #0
        }
    }
}
 801780c:	0018      	movs	r0, r3
 801780e:	46bd      	mov	sp, r7
 8017810:	b003      	add	sp, #12
 8017812:	bd90      	pop	{r4, r7, pc}

08017814 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b084      	sub	sp, #16
 8017818:	af00      	add	r7, sp, #0
 801781a:	60b9      	str	r1, [r7, #8]
 801781c:	607a      	str	r2, [r7, #4]
 801781e:	603b      	str	r3, [r7, #0]
 8017820:	210f      	movs	r1, #15
 8017822:	187b      	adds	r3, r7, r1
 8017824:	1c02      	adds	r2, r0, #0
 8017826:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017828:	187b      	adds	r3, r7, r1
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	2b05      	cmp	r3, #5
 801782e:	d107      	bne.n	8017840 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017830:	69bb      	ldr	r3, [r7, #24]
 8017832:	683a      	ldr	r2, [r7, #0]
 8017834:	6879      	ldr	r1, [r7, #4]
 8017836:	68b8      	ldr	r0, [r7, #8]
 8017838:	f002 f870 	bl	801991c <RegionEU868NextChannel>
 801783c:	0003      	movs	r3, r0
 801783e:	e000      	b.n	8017842 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017840:	2309      	movs	r3, #9
        }
    }
}
 8017842:	0018      	movs	r0, r3
 8017844:	46bd      	mov	sp, r7
 8017846:	b004      	add	sp, #16
 8017848:	bd80      	pop	{r7, pc}

0801784a <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 801784a:	b580      	push	{r7, lr}
 801784c:	b082      	sub	sp, #8
 801784e:	af00      	add	r7, sp, #0
 8017850:	0002      	movs	r2, r0
 8017852:	6039      	str	r1, [r7, #0]
 8017854:	1dfb      	adds	r3, r7, #7
 8017856:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017858:	1dfb      	adds	r3, r7, #7
 801785a:	781b      	ldrb	r3, [r3, #0]
 801785c:	2b05      	cmp	r3, #5
 801785e:	d104      	bne.n	801786a <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	0018      	movs	r0, r3
 8017864:	f002 fa04 	bl	8019c70 <RegionEU868SetContinuousWave>
 8017868:	e000      	b.n	801786c <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801786a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801786c:	46c0      	nop			; (mov r8, r8)
 801786e:	46bd      	mov	sp, r7
 8017870:	b002      	add	sp, #8
 8017872:	bd80      	pop	{r7, pc}

08017874 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017874:	b5b0      	push	{r4, r5, r7, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	af00      	add	r7, sp, #0
 801787a:	0005      	movs	r5, r0
 801787c:	000c      	movs	r4, r1
 801787e:	0010      	movs	r0, r2
 8017880:	0019      	movs	r1, r3
 8017882:	1dfb      	adds	r3, r7, #7
 8017884:	1c2a      	adds	r2, r5, #0
 8017886:	701a      	strb	r2, [r3, #0]
 8017888:	1dbb      	adds	r3, r7, #6
 801788a:	1c22      	adds	r2, r4, #0
 801788c:	701a      	strb	r2, [r3, #0]
 801788e:	1d7b      	adds	r3, r7, #5
 8017890:	1c02      	adds	r2, r0, #0
 8017892:	701a      	strb	r2, [r3, #0]
 8017894:	1d3b      	adds	r3, r7, #4
 8017896:	1c0a      	adds	r2, r1, #0
 8017898:	701a      	strb	r2, [r3, #0]
    switch( region )
 801789a:	1dfb      	adds	r3, r7, #7
 801789c:	781b      	ldrb	r3, [r3, #0]
 801789e:	2b05      	cmp	r3, #5
 80178a0:	d10c      	bne.n	80178bc <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80178a2:	1d3b      	adds	r3, r7, #4
 80178a4:	2200      	movs	r2, #0
 80178a6:	569a      	ldrsb	r2, [r3, r2]
 80178a8:	1d7b      	adds	r3, r7, #5
 80178aa:	2100      	movs	r1, #0
 80178ac:	5659      	ldrsb	r1, [r3, r1]
 80178ae:	1dbb      	adds	r3, r7, #6
 80178b0:	781b      	ldrb	r3, [r3, #0]
 80178b2:	0018      	movs	r0, r3
 80178b4:	f002 fa34 	bl	8019d20 <RegionEU868ApplyDrOffset>
 80178b8:	0003      	movs	r3, r0
 80178ba:	e001      	b.n	80178c0 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80178bc:	1d7b      	adds	r3, r7, #5
 80178be:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 80178c0:	0018      	movs	r0, r3
 80178c2:	46bd      	mov	sp, r7
 80178c4:	b002      	add	sp, #8
 80178c6:	bdb0      	pop	{r4, r5, r7, pc}

080178c8 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b082      	sub	sp, #8
 80178cc:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80178ce:	4b03      	ldr	r3, [pc, #12]	; (80178dc <RegionGetVersion+0x14>)
 80178d0:	607b      	str	r3, [r7, #4]

    return version;
 80178d2:	687b      	ldr	r3, [r7, #4]
}
 80178d4:	0018      	movs	r0, r3
 80178d6:	46bd      	mov	sp, r7
 80178d8:	b002      	add	sp, #8
 80178da:	bd80      	pop	{r7, pc}
 80178dc:	01000300 	.word	0x01000300

080178e0 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80178e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178e2:	b087      	sub	sp, #28
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	60f8      	str	r0, [r7, #12]
 80178e8:	0008      	movs	r0, r1
 80178ea:	0039      	movs	r1, r7
 80178ec:	600a      	str	r2, [r1, #0]
 80178ee:	604b      	str	r3, [r1, #4]
 80178f0:	230b      	movs	r3, #11
 80178f2:	18fb      	adds	r3, r7, r3
 80178f4:	1c02      	adds	r2, r0, #0
 80178f6:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 80178f8:	2514      	movs	r5, #20
 80178fa:	197c      	adds	r4, r7, r5
 80178fc:	003b      	movs	r3, r7
 80178fe:	6818      	ldr	r0, [r3, #0]
 8017900:	6859      	ldr	r1, [r3, #4]
 8017902:	f000 f91b 	bl	8017b3c <RegionCommonGetJoinDc>
 8017906:	0003      	movs	r3, r0
 8017908:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 801790a:	2616      	movs	r6, #22
 801790c:	19bb      	adds	r3, r7, r6
 801790e:	68fa      	ldr	r2, [r7, #12]
 8017910:	8812      	ldrh	r2, [r2, #0]
 8017912:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 8017914:	230b      	movs	r3, #11
 8017916:	18fb      	adds	r3, r7, r3
 8017918:	781b      	ldrb	r3, [r3, #0]
 801791a:	2201      	movs	r2, #1
 801791c:	4053      	eors	r3, r2
 801791e:	b2db      	uxtb	r3, r3
 8017920:	2b00      	cmp	r3, #0
 8017922:	d012      	beq.n	801794a <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8017924:	197c      	adds	r4, r7, r5
 8017926:	003b      	movs	r3, r7
 8017928:	6818      	ldr	r0, [r3, #0]
 801792a:	6859      	ldr	r1, [r3, #4]
 801792c:	f000 f906 	bl	8017b3c <RegionCommonGetJoinDc>
 8017930:	0003      	movs	r3, r0
 8017932:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017934:	19ba      	adds	r2, r7, r6
 8017936:	197b      	adds	r3, r7, r5
 8017938:	19b9      	adds	r1, r7, r6
 801793a:	880c      	ldrh	r4, [r1, #0]
 801793c:	881b      	ldrh	r3, [r3, #0]
 801793e:	b298      	uxth	r0, r3
 8017940:	b2a1      	uxth	r1, r4
 8017942:	4288      	cmp	r0, r1
 8017944:	d200      	bcs.n	8017948 <GetDutyCycle+0x68>
 8017946:	1c23      	adds	r3, r4, #0
 8017948:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801794a:	2216      	movs	r2, #22
 801794c:	18bb      	adds	r3, r7, r2
 801794e:	881b      	ldrh	r3, [r3, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d102      	bne.n	801795a <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 8017954:	18bb      	adds	r3, r7, r2
 8017956:	2201      	movs	r2, #1
 8017958:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 801795a:	2316      	movs	r3, #22
 801795c:	18fb      	adds	r3, r7, r3
 801795e:	881b      	ldrh	r3, [r3, #0]
}
 8017960:	0018      	movs	r0, r3
 8017962:	46bd      	mov	sp, r7
 8017964:	b007      	add	sp, #28
 8017966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017968 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801796a:	b087      	sub	sp, #28
 801796c:	af00      	add	r7, sp, #0
 801796e:	60f8      	str	r0, [r7, #12]
 8017970:	0008      	movs	r0, r1
 8017972:	0039      	movs	r1, r7
 8017974:	600a      	str	r2, [r1, #0]
 8017976:	604b      	str	r3, [r1, #4]
 8017978:	210b      	movs	r1, #11
 801797a:	187b      	adds	r3, r7, r1
 801797c:	1c02      	adds	r2, r0, #0
 801797e:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 8017980:	2614      	movs	r6, #20
 8017982:	19bb      	adds	r3, r7, r6
 8017984:	68fa      	ldr	r2, [r7, #12]
 8017986:	8812      	ldrh	r2, [r2, #0]
 8017988:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 801798a:	2317      	movs	r3, #23
 801798c:	18fb      	adds	r3, r7, r3
 801798e:	2201      	movs	r2, #1
 8017990:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017992:	19bc      	adds	r4, r7, r6
 8017994:	003b      	movs	r3, r7
 8017996:	000d      	movs	r5, r1
 8017998:	187a      	adds	r2, r7, r1
 801799a:	7811      	ldrb	r1, [r2, #0]
 801799c:	68f8      	ldr	r0, [r7, #12]
 801799e:	681a      	ldr	r2, [r3, #0]
 80179a0:	685b      	ldr	r3, [r3, #4]
 80179a2:	f7ff ff9d 	bl	80178e0 <GetDutyCycle>
 80179a6:	0003      	movs	r3, r0
 80179a8:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 80179aa:	197b      	adds	r3, r7, r5
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	2201      	movs	r2, #1
 80179b0:	4053      	eors	r3, r2
 80179b2:	b2db      	uxtb	r3, r3
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d00a      	beq.n	80179ce <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 80179b8:	19bb      	adds	r3, r7, r6
 80179ba:	881b      	ldrh	r3, [r3, #0]
 80179bc:	2164      	movs	r1, #100	; 0x64
 80179be:	0018      	movs	r0, r3
 80179c0:	f7e8 fbaa 	bl	8000118 <__udivsi3>
 80179c4:	0003      	movs	r3, r0
 80179c6:	b29a      	uxth	r2, r3
 80179c8:	2317      	movs	r3, #23
 80179ca:	18fb      	adds	r3, r7, r3
 80179cc:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 80179ce:	2317      	movs	r3, #23
 80179d0:	18fb      	adds	r3, r7, r3
 80179d2:	781b      	ldrb	r3, [r3, #0]
 80179d4:	4a09      	ldr	r2, [pc, #36]	; (80179fc <SetMaxTimeCredits+0x94>)
 80179d6:	4353      	muls	r3, r2
 80179d8:	001a      	movs	r2, r3
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	685b      	ldr	r3, [r3, #4]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d103      	bne.n	80179ee <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	68da      	ldr	r2, [r3, #12]
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 80179ee:	2314      	movs	r3, #20
 80179f0:	18fb      	adds	r3, r7, r3
 80179f2:	881b      	ldrh	r3, [r3, #0]
}
 80179f4:	0018      	movs	r0, r3
 80179f6:	46bd      	mov	sp, r7
 80179f8:	b007      	add	sp, #28
 80179fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179fc:	0036ee80 	.word	0x0036ee80

08017a00 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017a00:	b590      	push	{r4, r7, lr}
 8017a02:	b085      	sub	sp, #20
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
 8017a08:	000c      	movs	r4, r1
 8017a0a:	0010      	movs	r0, r2
 8017a0c:	0019      	movs	r1, r3
 8017a0e:	1cfb      	adds	r3, r7, #3
 8017a10:	1c22      	adds	r2, r4, #0
 8017a12:	701a      	strb	r2, [r3, #0]
 8017a14:	1cbb      	adds	r3, r7, #2
 8017a16:	1c02      	adds	r2, r0, #0
 8017a18:	701a      	strb	r2, [r3, #0]
 8017a1a:	1c7b      	adds	r3, r7, #1
 8017a1c:	1c0a      	adds	r2, r1, #0
 8017a1e:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 8017a20:	230e      	movs	r3, #14
 8017a22:	18fc      	adds	r4, r7, r3
 8017a24:	2320      	movs	r3, #32
 8017a26:	18fb      	adds	r3, r7, r3
 8017a28:	1cfa      	adds	r2, r7, #3
 8017a2a:	7811      	ldrb	r1, [r2, #0]
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	681a      	ldr	r2, [r3, #0]
 8017a30:	685b      	ldr	r3, [r3, #4]
 8017a32:	f7ff ff99 	bl	8017968 <SetMaxTimeCredits>
 8017a36:	0003      	movs	r3, r0
 8017a38:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8017a3a:	1cfb      	adds	r3, r7, #3
 8017a3c:	781b      	ldrb	r3, [r3, #0]
 8017a3e:	2201      	movs	r2, #1
 8017a40:	4053      	eors	r3, r2
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d012      	beq.n	8017a6e <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 8017a48:	1cbb      	adds	r3, r7, #2
 8017a4a:	781b      	ldrb	r3, [r3, #0]
 8017a4c:	2201      	movs	r2, #1
 8017a4e:	4053      	eors	r3, r2
 8017a50:	b2db      	uxtb	r3, r3
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d016      	beq.n	8017a84 <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 8017a56:	1c7b      	adds	r3, r7, #1
 8017a58:	781b      	ldrb	r3, [r3, #0]
 8017a5a:	2201      	movs	r2, #1
 8017a5c:	4053      	eors	r3, r2
 8017a5e:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d00f      	beq.n	8017a84 <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	68da      	ldr	r2, [r3, #12]
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	609a      	str	r2, [r3, #8]
 8017a6c:	e00a      	b.n	8017a84 <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017a6e:	1cbb      	adds	r3, r7, #2
 8017a70:	781b      	ldrb	r3, [r3, #0]
 8017a72:	2201      	movs	r2, #1
 8017a74:	4053      	eors	r3, r2
 8017a76:	b2db      	uxtb	r3, r3
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d003      	beq.n	8017a84 <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	68da      	ldr	r2, [r3, #12]
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	685b      	ldr	r3, [r3, #4]
 8017a88:	0018      	movs	r0, r3
 8017a8a:	f006 f8f7 	bl	801dc7c <UTIL_TIMER_GetElapsedTime>
 8017a8e:	0002      	movs	r2, r0
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	689b      	ldr	r3, [r3, #8]
 8017a94:	18d2      	adds	r2, r2, r3
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	689a      	ldr	r2, [r3, #8]
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	68db      	ldr	r3, [r3, #12]
 8017aa2:	429a      	cmp	r2, r3
 8017aa4:	d903      	bls.n	8017aae <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	68da      	ldr	r2, [r3, #12]
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ab2:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017ab4:	230e      	movs	r3, #14
 8017ab6:	18fb      	adds	r3, r7, r3
 8017ab8:	881b      	ldrh	r3, [r3, #0]
}
 8017aba:	0018      	movs	r0, r3
 8017abc:	46bd      	mov	sp, r7
 8017abe:	b005      	add	sp, #20
 8017ac0:	bd90      	pop	{r4, r7, pc}

08017ac2 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017ac2:	b580      	push	{r7, lr}
 8017ac4:	b084      	sub	sp, #16
 8017ac6:	af00      	add	r7, sp, #0
 8017ac8:	0002      	movs	r2, r0
 8017aca:	1dbb      	adds	r3, r7, #6
 8017acc:	801a      	strh	r2, [r3, #0]
 8017ace:	1d7b      	adds	r3, r7, #5
 8017ad0:	1c0a      	adds	r2, r1, #0
 8017ad2:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8017ad4:	230f      	movs	r3, #15
 8017ad6:	18fb      	adds	r3, r7, r3
 8017ad8:	2200      	movs	r2, #0
 8017ada:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017adc:	230e      	movs	r3, #14
 8017ade:	18fb      	adds	r3, r7, r3
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	701a      	strb	r2, [r3, #0]
 8017ae4:	e01b      	b.n	8017b1e <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017ae6:	1dbb      	adds	r3, r7, #6
 8017ae8:	881b      	ldrh	r3, [r3, #0]
 8017aea:	200e      	movs	r0, #14
 8017aec:	183a      	adds	r2, r7, r0
 8017aee:	7812      	ldrb	r2, [r2, #0]
 8017af0:	2101      	movs	r1, #1
 8017af2:	4091      	lsls	r1, r2
 8017af4:	000a      	movs	r2, r1
 8017af6:	401a      	ands	r2, r3
 8017af8:	183b      	adds	r3, r7, r0
 8017afa:	781b      	ldrb	r3, [r3, #0]
 8017afc:	2101      	movs	r1, #1
 8017afe:	4099      	lsls	r1, r3
 8017b00:	000b      	movs	r3, r1
 8017b02:	429a      	cmp	r2, r3
 8017b04:	d105      	bne.n	8017b12 <CountChannels+0x50>
        {
            nbActiveBits++;
 8017b06:	210f      	movs	r1, #15
 8017b08:	187b      	adds	r3, r7, r1
 8017b0a:	781a      	ldrb	r2, [r3, #0]
 8017b0c:	187b      	adds	r3, r7, r1
 8017b0e:	3201      	adds	r2, #1
 8017b10:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017b12:	210e      	movs	r1, #14
 8017b14:	187b      	adds	r3, r7, r1
 8017b16:	781a      	ldrb	r2, [r3, #0]
 8017b18:	187b      	adds	r3, r7, r1
 8017b1a:	3201      	adds	r2, #1
 8017b1c:	701a      	strb	r2, [r3, #0]
 8017b1e:	230e      	movs	r3, #14
 8017b20:	18fa      	adds	r2, r7, r3
 8017b22:	1d7b      	adds	r3, r7, #5
 8017b24:	7812      	ldrb	r2, [r2, #0]
 8017b26:	781b      	ldrb	r3, [r3, #0]
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	d3dc      	bcc.n	8017ae6 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8017b2c:	230f      	movs	r3, #15
 8017b2e:	18fb      	adds	r3, r7, r3
 8017b30:	781b      	ldrb	r3, [r3, #0]
}
 8017b32:	0018      	movs	r0, r3
 8017b34:	46bd      	mov	sp, r7
 8017b36:	b004      	add	sp, #16
 8017b38:	bd80      	pop	{r7, pc}
	...

08017b3c <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b084      	sub	sp, #16
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	003b      	movs	r3, r7
 8017b44:	6018      	str	r0, [r3, #0]
 8017b46:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 8017b48:	210e      	movs	r1, #14
 8017b4a:	187b      	adds	r3, r7, r1
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 8017b50:	003b      	movs	r3, r7
 8017b52:	681a      	ldr	r2, [r3, #0]
 8017b54:	23e1      	movs	r3, #225	; 0xe1
 8017b56:	011b      	lsls	r3, r3, #4
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d203      	bcs.n	8017b64 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8017b5c:	187b      	adds	r3, r7, r1
 8017b5e:	2264      	movs	r2, #100	; 0x64
 8017b60:	801a      	strh	r2, [r3, #0]
 8017b62:	e00e      	b.n	8017b82 <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 8017b64:	003b      	movs	r3, r7
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	4a09      	ldr	r2, [pc, #36]	; (8017b90 <RegionCommonGetJoinDc+0x54>)
 8017b6a:	4293      	cmp	r3, r2
 8017b6c:	d805      	bhi.n	8017b7a <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8017b6e:	230e      	movs	r3, #14
 8017b70:	18fb      	adds	r3, r7, r3
 8017b72:	22fa      	movs	r2, #250	; 0xfa
 8017b74:	0092      	lsls	r2, r2, #2
 8017b76:	801a      	strh	r2, [r3, #0]
 8017b78:	e003      	b.n	8017b82 <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8017b7a:	230e      	movs	r3, #14
 8017b7c:	18fb      	adds	r3, r7, r3
 8017b7e:	4a05      	ldr	r2, [pc, #20]	; (8017b94 <RegionCommonGetJoinDc+0x58>)
 8017b80:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8017b82:	230e      	movs	r3, #14
 8017b84:	18fb      	adds	r3, r7, r3
 8017b86:	881b      	ldrh	r3, [r3, #0]
}
 8017b88:	0018      	movs	r0, r3
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	b004      	add	sp, #16
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	00009aaf 	.word	0x00009aaf
 8017b94:	00002710 	.word	0x00002710

08017b98 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017b98:	b590      	push	{r4, r7, lr}
 8017b9a:	b085      	sub	sp, #20
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	0004      	movs	r4, r0
 8017ba0:	6039      	str	r1, [r7, #0]
 8017ba2:	0010      	movs	r0, r2
 8017ba4:	0019      	movs	r1, r3
 8017ba6:	1dfb      	adds	r3, r7, #7
 8017ba8:	1c22      	adds	r2, r4, #0
 8017baa:	701a      	strb	r2, [r3, #0]
 8017bac:	1dbb      	adds	r3, r7, #6
 8017bae:	1c02      	adds	r2, r0, #0
 8017bb0:	701a      	strb	r2, [r3, #0]
 8017bb2:	1d7b      	adds	r3, r7, #5
 8017bb4:	1c0a      	adds	r2, r1, #0
 8017bb6:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017bb8:	2320      	movs	r3, #32
 8017bba:	18fb      	adds	r3, r7, r3
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	569a      	ldrsb	r2, [r3, r2]
 8017bc0:	1d7b      	adds	r3, r7, #5
 8017bc2:	2100      	movs	r1, #0
 8017bc4:	5659      	ldrsb	r1, [r3, r1]
 8017bc6:	1dbb      	adds	r3, r7, #6
 8017bc8:	781b      	ldrb	r3, [r3, #0]
 8017bca:	b25b      	sxtb	r3, r3
 8017bcc:	0018      	movs	r0, r3
 8017bce:	f000 f87c 	bl	8017cca <RegionCommonValueInRange>
 8017bd2:	1e03      	subs	r3, r0, #0
 8017bd4:	d101      	bne.n	8017bda <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	e073      	b.n	8017cc2 <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017bda:	230f      	movs	r3, #15
 8017bdc:	18fb      	adds	r3, r7, r3
 8017bde:	2200      	movs	r2, #0
 8017be0:	701a      	strb	r2, [r3, #0]
 8017be2:	230e      	movs	r3, #14
 8017be4:	18fb      	adds	r3, r7, r3
 8017be6:	2200      	movs	r2, #0
 8017be8:	701a      	strb	r2, [r3, #0]
 8017bea:	e062      	b.n	8017cb2 <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017bec:	230d      	movs	r3, #13
 8017bee:	18fb      	adds	r3, r7, r3
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	701a      	strb	r2, [r3, #0]
 8017bf4:	e04c      	b.n	8017c90 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017bf6:	230e      	movs	r3, #14
 8017bf8:	18fb      	adds	r3, r7, r3
 8017bfa:	781b      	ldrb	r3, [r3, #0]
 8017bfc:	005b      	lsls	r3, r3, #1
 8017bfe:	683a      	ldr	r2, [r7, #0]
 8017c00:	18d3      	adds	r3, r2, r3
 8017c02:	881b      	ldrh	r3, [r3, #0]
 8017c04:	001a      	movs	r2, r3
 8017c06:	200d      	movs	r0, #13
 8017c08:	183b      	adds	r3, r7, r0
 8017c0a:	781b      	ldrb	r3, [r3, #0]
 8017c0c:	411a      	asrs	r2, r3
 8017c0e:	0013      	movs	r3, r2
 8017c10:	2201      	movs	r2, #1
 8017c12:	4013      	ands	r3, r2
 8017c14:	d036      	beq.n	8017c84 <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017c16:	240f      	movs	r4, #15
 8017c18:	193b      	adds	r3, r7, r4
 8017c1a:	781a      	ldrb	r2, [r3, #0]
 8017c1c:	183b      	adds	r3, r7, r0
 8017c1e:	781b      	ldrb	r3, [r3, #0]
 8017c20:	18d3      	adds	r3, r2, r3
 8017c22:	001a      	movs	r2, r3
 8017c24:	0013      	movs	r3, r2
 8017c26:	005b      	lsls	r3, r3, #1
 8017c28:	189b      	adds	r3, r3, r2
 8017c2a:	009b      	lsls	r3, r3, #2
 8017c2c:	001a      	movs	r2, r3
 8017c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c30:	189b      	adds	r3, r3, r2
 8017c32:	7a1b      	ldrb	r3, [r3, #8]
 8017c34:	011b      	lsls	r3, r3, #4
 8017c36:	b25b      	sxtb	r3, r3
 8017c38:	111b      	asrs	r3, r3, #4
 8017c3a:	b25b      	sxtb	r3, r3
 8017c3c:	001a      	movs	r2, r3
 8017c3e:	230f      	movs	r3, #15
 8017c40:	4013      	ands	r3, r2
 8017c42:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017c44:	193b      	adds	r3, r7, r4
 8017c46:	781a      	ldrb	r2, [r3, #0]
 8017c48:	183b      	adds	r3, r7, r0
 8017c4a:	781b      	ldrb	r3, [r3, #0]
 8017c4c:	18d3      	adds	r3, r2, r3
 8017c4e:	001a      	movs	r2, r3
 8017c50:	0013      	movs	r3, r2
 8017c52:	005b      	lsls	r3, r3, #1
 8017c54:	189b      	adds	r3, r3, r2
 8017c56:	009b      	lsls	r3, r3, #2
 8017c58:	001a      	movs	r2, r3
 8017c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5c:	189b      	adds	r3, r3, r2
 8017c5e:	7a1b      	ldrb	r3, [r3, #8]
 8017c60:	b25b      	sxtb	r3, r3
 8017c62:	111b      	asrs	r3, r3, #4
 8017c64:	b25b      	sxtb	r3, r3
 8017c66:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017c68:	230f      	movs	r3, #15
 8017c6a:	4013      	ands	r3, r2
 8017c6c:	b25a      	sxtb	r2, r3
 8017c6e:	1dbb      	adds	r3, r7, #6
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	b25b      	sxtb	r3, r3
 8017c74:	0018      	movs	r0, r3
 8017c76:	f000 f828 	bl	8017cca <RegionCommonValueInRange>
 8017c7a:	0003      	movs	r3, r0
 8017c7c:	2b01      	cmp	r3, #1
 8017c7e:	d101      	bne.n	8017c84 <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017c80:	2301      	movs	r3, #1
 8017c82:	e01e      	b.n	8017cc2 <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 8017c84:	210d      	movs	r1, #13
 8017c86:	187b      	adds	r3, r7, r1
 8017c88:	781a      	ldrb	r2, [r3, #0]
 8017c8a:	187b      	adds	r3, r7, r1
 8017c8c:	3201      	adds	r2, #1
 8017c8e:	701a      	strb	r2, [r3, #0]
 8017c90:	230d      	movs	r3, #13
 8017c92:	18fb      	adds	r3, r7, r3
 8017c94:	781b      	ldrb	r3, [r3, #0]
 8017c96:	2b0f      	cmp	r3, #15
 8017c98:	d9ad      	bls.n	8017bf6 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017c9a:	220f      	movs	r2, #15
 8017c9c:	18bb      	adds	r3, r7, r2
 8017c9e:	18ba      	adds	r2, r7, r2
 8017ca0:	7812      	ldrb	r2, [r2, #0]
 8017ca2:	3210      	adds	r2, #16
 8017ca4:	701a      	strb	r2, [r3, #0]
 8017ca6:	210e      	movs	r1, #14
 8017ca8:	187b      	adds	r3, r7, r1
 8017caa:	781a      	ldrb	r2, [r3, #0]
 8017cac:	187b      	adds	r3, r7, r1
 8017cae:	3201      	adds	r2, #1
 8017cb0:	701a      	strb	r2, [r3, #0]
 8017cb2:	230f      	movs	r3, #15
 8017cb4:	18fa      	adds	r2, r7, r3
 8017cb6:	1dfb      	adds	r3, r7, #7
 8017cb8:	7812      	ldrb	r2, [r2, #0]
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	429a      	cmp	r2, r3
 8017cbe:	d395      	bcc.n	8017bec <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8017cc0:	2300      	movs	r3, #0
}
 8017cc2:	0018      	movs	r0, r3
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	b005      	add	sp, #20
 8017cc8:	bd90      	pop	{r4, r7, pc}

08017cca <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017cca:	b590      	push	{r4, r7, lr}
 8017ccc:	b083      	sub	sp, #12
 8017cce:	af00      	add	r7, sp, #0
 8017cd0:	0004      	movs	r4, r0
 8017cd2:	0008      	movs	r0, r1
 8017cd4:	0011      	movs	r1, r2
 8017cd6:	1dfb      	adds	r3, r7, #7
 8017cd8:	1c22      	adds	r2, r4, #0
 8017cda:	701a      	strb	r2, [r3, #0]
 8017cdc:	1dbb      	adds	r3, r7, #6
 8017cde:	1c02      	adds	r2, r0, #0
 8017ce0:	701a      	strb	r2, [r3, #0]
 8017ce2:	1d7b      	adds	r3, r7, #5
 8017ce4:	1c0a      	adds	r2, r1, #0
 8017ce6:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8017ce8:	1dfa      	adds	r2, r7, #7
 8017cea:	1dbb      	adds	r3, r7, #6
 8017cec:	7812      	ldrb	r2, [r2, #0]
 8017cee:	b252      	sxtb	r2, r2
 8017cf0:	781b      	ldrb	r3, [r3, #0]
 8017cf2:	b25b      	sxtb	r3, r3
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	db09      	blt.n	8017d0c <RegionCommonValueInRange+0x42>
 8017cf8:	1dfa      	adds	r2, r7, #7
 8017cfa:	1d7b      	adds	r3, r7, #5
 8017cfc:	7812      	ldrb	r2, [r2, #0]
 8017cfe:	b252      	sxtb	r2, r2
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	b25b      	sxtb	r3, r3
 8017d04:	429a      	cmp	r2, r3
 8017d06:	dc01      	bgt.n	8017d0c <RegionCommonValueInRange+0x42>
    {
        return 1;
 8017d08:	2301      	movs	r3, #1
 8017d0a:	e000      	b.n	8017d0e <RegionCommonValueInRange+0x44>
    }
    return 0;
 8017d0c:	2300      	movs	r3, #0
}
 8017d0e:	0018      	movs	r0, r3
 8017d10:	46bd      	mov	sp, r7
 8017d12:	b003      	add	sp, #12
 8017d14:	bd90      	pop	{r4, r7, pc}

08017d16 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017d16:	b580      	push	{r7, lr}
 8017d18:	b084      	sub	sp, #16
 8017d1a:	af00      	add	r7, sp, #0
 8017d1c:	6078      	str	r0, [r7, #4]
 8017d1e:	0008      	movs	r0, r1
 8017d20:	0011      	movs	r1, r2
 8017d22:	1cfb      	adds	r3, r7, #3
 8017d24:	1c02      	adds	r2, r0, #0
 8017d26:	701a      	strb	r2, [r3, #0]
 8017d28:	1cbb      	adds	r3, r7, #2
 8017d2a:	1c0a      	adds	r2, r1, #0
 8017d2c:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8017d2e:	210f      	movs	r1, #15
 8017d30:	187b      	adds	r3, r7, r1
 8017d32:	1cfa      	adds	r2, r7, #3
 8017d34:	7812      	ldrb	r2, [r2, #0]
 8017d36:	0912      	lsrs	r2, r2, #4
 8017d38:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017d3a:	1cbb      	adds	r3, r7, #2
 8017d3c:	781b      	ldrb	r3, [r3, #0]
 8017d3e:	091b      	lsrs	r3, r3, #4
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	187a      	adds	r2, r7, r1
 8017d44:	7812      	ldrb	r2, [r2, #0]
 8017d46:	429a      	cmp	r2, r3
 8017d48:	d805      	bhi.n	8017d56 <RegionCommonChanDisable+0x40>
 8017d4a:	1cfa      	adds	r2, r7, #3
 8017d4c:	1cbb      	adds	r3, r7, #2
 8017d4e:	7812      	ldrb	r2, [r2, #0]
 8017d50:	781b      	ldrb	r3, [r3, #0]
 8017d52:	429a      	cmp	r2, r3
 8017d54:	d301      	bcc.n	8017d5a <RegionCommonChanDisable+0x44>
    {
        return false;
 8017d56:	2300      	movs	r3, #0
 8017d58:	e01b      	b.n	8017d92 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017d5a:	200f      	movs	r0, #15
 8017d5c:	183b      	adds	r3, r7, r0
 8017d5e:	781b      	ldrb	r3, [r3, #0]
 8017d60:	005b      	lsls	r3, r3, #1
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	18d3      	adds	r3, r2, r3
 8017d66:	881b      	ldrh	r3, [r3, #0]
 8017d68:	b21b      	sxth	r3, r3
 8017d6a:	1cfa      	adds	r2, r7, #3
 8017d6c:	7812      	ldrb	r2, [r2, #0]
 8017d6e:	210f      	movs	r1, #15
 8017d70:	400a      	ands	r2, r1
 8017d72:	2101      	movs	r1, #1
 8017d74:	4091      	lsls	r1, r2
 8017d76:	000a      	movs	r2, r1
 8017d78:	b212      	sxth	r2, r2
 8017d7a:	43d2      	mvns	r2, r2
 8017d7c:	b212      	sxth	r2, r2
 8017d7e:	4013      	ands	r3, r2
 8017d80:	b219      	sxth	r1, r3
 8017d82:	183b      	adds	r3, r7, r0
 8017d84:	781b      	ldrb	r3, [r3, #0]
 8017d86:	005b      	lsls	r3, r3, #1
 8017d88:	687a      	ldr	r2, [r7, #4]
 8017d8a:	18d3      	adds	r3, r2, r3
 8017d8c:	b28a      	uxth	r2, r1
 8017d8e:	801a      	strh	r2, [r3, #0]

    return true;
 8017d90:	2301      	movs	r3, #1
}
 8017d92:	0018      	movs	r0, r3
 8017d94:	46bd      	mov	sp, r7
 8017d96:	b004      	add	sp, #16
 8017d98:	bd80      	pop	{r7, pc}

08017d9a <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017d9a:	b590      	push	{r4, r7, lr}
 8017d9c:	b085      	sub	sp, #20
 8017d9e:	af00      	add	r7, sp, #0
 8017da0:	6078      	str	r0, [r7, #4]
 8017da2:	0008      	movs	r0, r1
 8017da4:	0011      	movs	r1, r2
 8017da6:	1cfb      	adds	r3, r7, #3
 8017da8:	1c02      	adds	r2, r0, #0
 8017daa:	701a      	strb	r2, [r3, #0]
 8017dac:	1cbb      	adds	r3, r7, #2
 8017dae:	1c0a      	adds	r2, r1, #0
 8017db0:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8017db2:	230f      	movs	r3, #15
 8017db4:	18fb      	adds	r3, r7, r3
 8017db6:	2200      	movs	r2, #0
 8017db8:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d101      	bne.n	8017dc4 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	e027      	b.n	8017e14 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017dc4:	230e      	movs	r3, #14
 8017dc6:	18fb      	adds	r3, r7, r3
 8017dc8:	1cfa      	adds	r2, r7, #3
 8017dca:	7812      	ldrb	r2, [r2, #0]
 8017dcc:	701a      	strb	r2, [r3, #0]
 8017dce:	e017      	b.n	8017e00 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017dd0:	240e      	movs	r4, #14
 8017dd2:	193b      	adds	r3, r7, r4
 8017dd4:	781b      	ldrb	r3, [r3, #0]
 8017dd6:	005b      	lsls	r3, r3, #1
 8017dd8:	687a      	ldr	r2, [r7, #4]
 8017dda:	18d3      	adds	r3, r2, r3
 8017ddc:	881b      	ldrh	r3, [r3, #0]
 8017dde:	2110      	movs	r1, #16
 8017de0:	0018      	movs	r0, r3
 8017de2:	f7ff fe6e 	bl	8017ac2 <CountChannels>
 8017de6:	0003      	movs	r3, r0
 8017de8:	0019      	movs	r1, r3
 8017dea:	220f      	movs	r2, #15
 8017dec:	18bb      	adds	r3, r7, r2
 8017dee:	18ba      	adds	r2, r7, r2
 8017df0:	7812      	ldrb	r2, [r2, #0]
 8017df2:	188a      	adds	r2, r1, r2
 8017df4:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017df6:	193b      	adds	r3, r7, r4
 8017df8:	781a      	ldrb	r2, [r3, #0]
 8017dfa:	193b      	adds	r3, r7, r4
 8017dfc:	3201      	adds	r2, #1
 8017dfe:	701a      	strb	r2, [r3, #0]
 8017e00:	230e      	movs	r3, #14
 8017e02:	18fa      	adds	r2, r7, r3
 8017e04:	1cbb      	adds	r3, r7, #2
 8017e06:	7812      	ldrb	r2, [r2, #0]
 8017e08:	781b      	ldrb	r3, [r3, #0]
 8017e0a:	429a      	cmp	r2, r3
 8017e0c:	d3e0      	bcc.n	8017dd0 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8017e0e:	230f      	movs	r3, #15
 8017e10:	18fb      	adds	r3, r7, r3
 8017e12:	781b      	ldrb	r3, [r3, #0]
}
 8017e14:	0018      	movs	r0, r3
 8017e16:	46bd      	mov	sp, r7
 8017e18:	b005      	add	sp, #20
 8017e1a:	bd90      	pop	{r4, r7, pc}

08017e1c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b086      	sub	sp, #24
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	60f8      	str	r0, [r7, #12]
 8017e24:	60b9      	str	r1, [r7, #8]
 8017e26:	1dfb      	adds	r3, r7, #7
 8017e28:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d020      	beq.n	8017e72 <RegionCommonChanMaskCopy+0x56>
 8017e30:	68bb      	ldr	r3, [r7, #8]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d01d      	beq.n	8017e72 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017e36:	2317      	movs	r3, #23
 8017e38:	18fb      	adds	r3, r7, r3
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	701a      	strb	r2, [r3, #0]
 8017e3e:	e011      	b.n	8017e64 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017e40:	2017      	movs	r0, #23
 8017e42:	183b      	adds	r3, r7, r0
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	005b      	lsls	r3, r3, #1
 8017e48:	68ba      	ldr	r2, [r7, #8]
 8017e4a:	18d2      	adds	r2, r2, r3
 8017e4c:	183b      	adds	r3, r7, r0
 8017e4e:	781b      	ldrb	r3, [r3, #0]
 8017e50:	005b      	lsls	r3, r3, #1
 8017e52:	68f9      	ldr	r1, [r7, #12]
 8017e54:	18cb      	adds	r3, r1, r3
 8017e56:	8812      	ldrh	r2, [r2, #0]
 8017e58:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017e5a:	183b      	adds	r3, r7, r0
 8017e5c:	781a      	ldrb	r2, [r3, #0]
 8017e5e:	183b      	adds	r3, r7, r0
 8017e60:	3201      	adds	r2, #1
 8017e62:	701a      	strb	r2, [r3, #0]
 8017e64:	2317      	movs	r3, #23
 8017e66:	18fa      	adds	r2, r7, r3
 8017e68:	1dfb      	adds	r3, r7, #7
 8017e6a:	7812      	ldrb	r2, [r2, #0]
 8017e6c:	781b      	ldrb	r3, [r3, #0]
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	d3e6      	bcc.n	8017e40 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8017e72:	46c0      	nop			; (mov r8, r8)
 8017e74:	46bd      	mov	sp, r7
 8017e76:	b006      	add	sp, #24
 8017e78:	bd80      	pop	{r7, pc}

08017e7a <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017e7a:	b082      	sub	sp, #8
 8017e7c:	b5b0      	push	{r4, r5, r7, lr}
 8017e7e:	b086      	sub	sp, #24
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	0011      	movs	r1, r2
 8017e88:	2204      	movs	r2, #4
 8017e8a:	2028      	movs	r0, #40	; 0x28
 8017e8c:	4684      	mov	ip, r0
 8017e8e:	44bc      	add	ip, r7
 8017e90:	4462      	add	r2, ip
 8017e92:	6013      	str	r3, [r2, #0]
 8017e94:	1dfb      	adds	r3, r7, #7
 8017e96:	1c0a      	adds	r2, r1, #0
 8017e98:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017e9a:	2516      	movs	r5, #22
 8017e9c:	197c      	adds	r4, r7, r5
 8017e9e:	2304      	movs	r3, #4
 8017ea0:	2228      	movs	r2, #40	; 0x28
 8017ea2:	4694      	mov	ip, r2
 8017ea4:	44bc      	add	ip, r7
 8017ea6:	4463      	add	r3, ip
 8017ea8:	1dfa      	adds	r2, r7, #7
 8017eaa:	7811      	ldrb	r1, [r2, #0]
 8017eac:	68f8      	ldr	r0, [r7, #12]
 8017eae:	681a      	ldr	r2, [r3, #0]
 8017eb0:	685b      	ldr	r3, [r3, #4]
 8017eb2:	f7ff fd15 	bl	80178e0 <GetDutyCycle>
 8017eb6:	0003      	movs	r3, r0
 8017eb8:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	689a      	ldr	r2, [r3, #8]
 8017ebe:	197b      	adds	r3, r7, r5
 8017ec0:	881b      	ldrh	r3, [r3, #0]
 8017ec2:	68b9      	ldr	r1, [r7, #8]
 8017ec4:	434b      	muls	r3, r1
 8017ec6:	429a      	cmp	r2, r3
 8017ec8:	d909      	bls.n	8017ede <RegionCommonSetBandTxDone+0x64>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	689a      	ldr	r2, [r3, #8]
 8017ece:	197b      	adds	r3, r7, r5
 8017ed0:	881b      	ldrh	r3, [r3, #0]
 8017ed2:	68b9      	ldr	r1, [r7, #8]
 8017ed4:	434b      	muls	r3, r1
 8017ed6:	1ad2      	subs	r2, r2, r3
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017edc:	e002      	b.n	8017ee4 <RegionCommonSetBandTxDone+0x6a>
        band->TimeCredits = 0;
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	609a      	str	r2, [r3, #8]
}
 8017ee4:	46c0      	nop			; (mov r8, r8)
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	b006      	add	sp, #24
 8017eea:	bcb0      	pop	{r4, r5, r7}
 8017eec:	bc08      	pop	{r3}
 8017eee:	b002      	add	sp, #8
 8017ef0:	4718      	bx	r3

08017ef2 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ef4:	46c6      	mov	lr, r8
 8017ef6:	b500      	push	{lr}
 8017ef8:	b08c      	sub	sp, #48	; 0x30
 8017efa:	af04      	add	r7, sp, #16
 8017efc:	0004      	movs	r4, r0
 8017efe:	6039      	str	r1, [r7, #0]
 8017f00:	0010      	movs	r0, r2
 8017f02:	0019      	movs	r1, r3
 8017f04:	1dfb      	adds	r3, r7, #7
 8017f06:	1c22      	adds	r2, r4, #0
 8017f08:	701a      	strb	r2, [r3, #0]
 8017f0a:	1dbb      	adds	r3, r7, #6
 8017f0c:	1c02      	adds	r2, r0, #0
 8017f0e:	701a      	strb	r2, [r3, #0]
 8017f10:	1d7b      	adds	r3, r7, #5
 8017f12:	1c0a      	adds	r2, r1, #0
 8017f14:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017f16:	2301      	movs	r3, #1
 8017f18:	425b      	negs	r3, r3
 8017f1a:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017f1c:	f005 fe9a 	bl	801dc54 <UTIL_TIMER_GetCurrentTime>
 8017f20:	0003      	movs	r3, r0
 8017f22:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 8017f24:	2300      	movs	r3, #0
 8017f26:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 8017f28:	230e      	movs	r3, #14
 8017f2a:	18fb      	adds	r3, r7, r3
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 8017f30:	231b      	movs	r3, #27
 8017f32:	18fb      	adds	r3, r7, r3
 8017f34:	2200      	movs	r2, #0
 8017f36:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 8017f38:	231a      	movs	r3, #26
 8017f3a:	18fb      	adds	r3, r7, r3
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	701a      	strb	r2, [r3, #0]
 8017f40:	e089      	b.n	8018056 <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017f42:	231a      	movs	r3, #26
 8017f44:	18fb      	adds	r3, r7, r3
 8017f46:	781a      	ldrb	r2, [r3, #0]
 8017f48:	0013      	movs	r3, r2
 8017f4a:	009b      	lsls	r3, r3, #2
 8017f4c:	189b      	adds	r3, r3, r2
 8017f4e:	009b      	lsls	r3, r3, #2
 8017f50:	001a      	movs	r2, r3
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	469c      	mov	ip, r3
 8017f56:	4494      	add	ip, r2
 8017f58:	220e      	movs	r2, #14
 8017f5a:	18bc      	adds	r4, r7, r2
 8017f5c:	2138      	movs	r1, #56	; 0x38
 8017f5e:	000a      	movs	r2, r1
 8017f60:	187b      	adds	r3, r7, r1
 8017f62:	781e      	ldrb	r6, [r3, #0]
 8017f64:	1d7b      	adds	r3, r7, #5
 8017f66:	781d      	ldrb	r5, [r3, #0]
 8017f68:	1dfb      	adds	r3, r7, #7
 8017f6a:	781b      	ldrb	r3, [r3, #0]
 8017f6c:	4698      	mov	r8, r3
 8017f6e:	697b      	ldr	r3, [r7, #20]
 8017f70:	9302      	str	r3, [sp, #8]
 8017f72:	2304      	movs	r3, #4
 8017f74:	18ba      	adds	r2, r7, r2
 8017f76:	18d2      	adds	r2, r2, r3
 8017f78:	466b      	mov	r3, sp
 8017f7a:	ca03      	ldmia	r2!, {r0, r1}
 8017f7c:	c303      	stmia	r3!, {r0, r1}
 8017f7e:	0033      	movs	r3, r6
 8017f80:	002a      	movs	r2, r5
 8017f82:	4641      	mov	r1, r8
 8017f84:	4660      	mov	r0, ip
 8017f86:	f7ff fd3b 	bl	8017a00 <UpdateTimeCredits>
 8017f8a:	0003      	movs	r3, r0
 8017f8c:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017f8e:	220e      	movs	r2, #14
 8017f90:	18bb      	adds	r3, r7, r2
 8017f92:	881a      	ldrh	r2, [r3, #0]
 8017f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f96:	4353      	muls	r3, r2
 8017f98:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017f9a:	231a      	movs	r3, #26
 8017f9c:	18fb      	adds	r3, r7, r3
 8017f9e:	781a      	ldrb	r2, [r3, #0]
 8017fa0:	0013      	movs	r3, r2
 8017fa2:	009b      	lsls	r3, r3, #2
 8017fa4:	189b      	adds	r3, r3, r2
 8017fa6:	009b      	lsls	r3, r3, #2
 8017fa8:	001a      	movs	r2, r3
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	189b      	adds	r3, r3, r2
 8017fae:	689b      	ldr	r3, [r3, #8]
 8017fb0:	693a      	ldr	r2, [r7, #16]
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	d306      	bcc.n	8017fc4 <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 8017fb6:	1d7b      	adds	r3, r7, #5
 8017fb8:	781b      	ldrb	r3, [r3, #0]
 8017fba:	2201      	movs	r2, #1
 8017fbc:	4053      	eors	r3, r2
 8017fbe:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d012      	beq.n	8017fea <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 8017fc4:	231a      	movs	r3, #26
 8017fc6:	18fb      	adds	r3, r7, r3
 8017fc8:	781a      	ldrb	r2, [r3, #0]
 8017fca:	0013      	movs	r3, r2
 8017fcc:	009b      	lsls	r3, r3, #2
 8017fce:	189b      	adds	r3, r3, r2
 8017fd0:	009b      	lsls	r3, r3, #2
 8017fd2:	001a      	movs	r2, r3
 8017fd4:	683b      	ldr	r3, [r7, #0]
 8017fd6:	189b      	adds	r3, r3, r2
 8017fd8:	2201      	movs	r2, #1
 8017fda:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017fdc:	211b      	movs	r1, #27
 8017fde:	187b      	adds	r3, r7, r1
 8017fe0:	781a      	ldrb	r2, [r3, #0]
 8017fe2:	187b      	adds	r3, r7, r1
 8017fe4:	3201      	adds	r2, #1
 8017fe6:	701a      	strb	r2, [r3, #0]
 8017fe8:	e02f      	b.n	801804a <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017fea:	211a      	movs	r1, #26
 8017fec:	187b      	adds	r3, r7, r1
 8017fee:	781a      	ldrb	r2, [r3, #0]
 8017ff0:	0013      	movs	r3, r2
 8017ff2:	009b      	lsls	r3, r3, #2
 8017ff4:	189b      	adds	r3, r3, r2
 8017ff6:	009b      	lsls	r3, r3, #2
 8017ff8:	001a      	movs	r2, r3
 8017ffa:	683b      	ldr	r3, [r7, #0]
 8017ffc:	189b      	adds	r3, r3, r2
 8017ffe:	2200      	movs	r2, #0
 8018000:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 8018002:	187b      	adds	r3, r7, r1
 8018004:	781a      	ldrb	r2, [r3, #0]
 8018006:	0013      	movs	r3, r2
 8018008:	009b      	lsls	r3, r3, #2
 801800a:	189b      	adds	r3, r3, r2
 801800c:	009b      	lsls	r3, r3, #2
 801800e:	001a      	movs	r2, r3
 8018010:	683b      	ldr	r3, [r7, #0]
 8018012:	189b      	adds	r3, r3, r2
 8018014:	68db      	ldr	r3, [r3, #12]
 8018016:	693a      	ldr	r2, [r7, #16]
 8018018:	429a      	cmp	r2, r3
 801801a:	d216      	bcs.n	801804a <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801801c:	187b      	adds	r3, r7, r1
 801801e:	781a      	ldrb	r2, [r3, #0]
 8018020:	0013      	movs	r3, r2
 8018022:	009b      	lsls	r3, r3, #2
 8018024:	189b      	adds	r3, r3, r2
 8018026:	009b      	lsls	r3, r3, #2
 8018028:	001a      	movs	r2, r3
 801802a:	683b      	ldr	r3, [r7, #0]
 801802c:	189b      	adds	r3, r3, r2
 801802e:	689b      	ldr	r3, [r3, #8]
 8018030:	693a      	ldr	r2, [r7, #16]
 8018032:	1ad2      	subs	r2, r2, r3
 8018034:	69fb      	ldr	r3, [r7, #28]
 8018036:	4293      	cmp	r3, r2
 8018038:	d900      	bls.n	801803c <RegionCommonUpdateBandTimeOff+0x14a>
 801803a:	0013      	movs	r3, r2
 801803c:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801803e:	211b      	movs	r1, #27
 8018040:	187b      	adds	r3, r7, r1
 8018042:	781a      	ldrb	r2, [r3, #0]
 8018044:	187b      	adds	r3, r7, r1
 8018046:	3201      	adds	r2, #1
 8018048:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 801804a:	211a      	movs	r1, #26
 801804c:	187b      	adds	r3, r7, r1
 801804e:	781a      	ldrb	r2, [r3, #0]
 8018050:	187b      	adds	r3, r7, r1
 8018052:	3201      	adds	r2, #1
 8018054:	701a      	strb	r2, [r3, #0]
 8018056:	231a      	movs	r3, #26
 8018058:	18fa      	adds	r2, r7, r3
 801805a:	1dbb      	adds	r3, r7, #6
 801805c:	7812      	ldrb	r2, [r2, #0]
 801805e:	781b      	ldrb	r3, [r3, #0]
 8018060:	429a      	cmp	r2, r3
 8018062:	d200      	bcs.n	8018066 <RegionCommonUpdateBandTimeOff+0x174>
 8018064:	e76d      	b.n	8017f42 <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 8018066:	231b      	movs	r3, #27
 8018068:	18fb      	adds	r3, r7, r3
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d102      	bne.n	8018076 <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8018070:	2301      	movs	r3, #1
 8018072:	425b      	negs	r3, r3
 8018074:	e000      	b.n	8018078 <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 8018076:	69fb      	ldr	r3, [r7, #28]
}
 8018078:	0018      	movs	r0, r3
 801807a:	46bd      	mov	sp, r7
 801807c:	b008      	add	sp, #32
 801807e:	bc80      	pop	{r7}
 8018080:	46b8      	mov	r8, r7
 8018082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018084 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b084      	sub	sp, #16
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
 801808c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801808e:	210f      	movs	r1, #15
 8018090:	187b      	adds	r3, r7, r1
 8018092:	2200      	movs	r2, #0
 8018094:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	781b      	ldrb	r3, [r3, #0]
 801809a:	2b03      	cmp	r3, #3
 801809c:	d140      	bne.n	8018120 <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	3301      	adds	r3, #1
 80180a2:	781b      	ldrb	r3, [r3, #0]
 80180a4:	b25a      	sxtb	r2, r3
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	785b      	ldrb	r3, [r3, #1]
 80180ae:	b25b      	sxtb	r3, r3
 80180b0:	220f      	movs	r2, #15
 80180b2:	4013      	ands	r3, r2
 80180b4:	b25a      	sxtb	r2, r3
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80180ba:	683b      	ldr	r3, [r7, #0]
 80180bc:	785b      	ldrb	r3, [r3, #1]
 80180be:	b25b      	sxtb	r3, r3
 80180c0:	b2db      	uxtb	r3, r3
 80180c2:	091b      	lsrs	r3, r3, #4
 80180c4:	b2db      	uxtb	r3, r3
 80180c6:	b25a      	sxtb	r2, r3
 80180c8:	683b      	ldr	r3, [r7, #0]
 80180ca:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	3302      	adds	r3, #2
 80180d0:	781b      	ldrb	r3, [r3, #0]
 80180d2:	b29a      	uxth	r2, r3
 80180d4:	683b      	ldr	r3, [r7, #0]
 80180d6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80180d8:	683b      	ldr	r3, [r7, #0]
 80180da:	889b      	ldrh	r3, [r3, #4]
 80180dc:	b21a      	sxth	r2, r3
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	3303      	adds	r3, #3
 80180e2:	781b      	ldrb	r3, [r3, #0]
 80180e4:	021b      	lsls	r3, r3, #8
 80180e6:	b21b      	sxth	r3, r3
 80180e8:	4313      	orrs	r3, r2
 80180ea:	b21b      	sxth	r3, r3
 80180ec:	b29a      	uxth	r2, r3
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	791a      	ldrb	r2, [r3, #4]
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80180fa:	683b      	ldr	r3, [r7, #0]
 80180fc:	781b      	ldrb	r3, [r3, #0]
 80180fe:	091b      	lsrs	r3, r3, #4
 8018100:	b2db      	uxtb	r3, r3
 8018102:	2207      	movs	r2, #7
 8018104:	4013      	ands	r3, r2
 8018106:	b2da      	uxtb	r2, r3
 8018108:	683b      	ldr	r3, [r7, #0]
 801810a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801810c:	683b      	ldr	r3, [r7, #0]
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	220f      	movs	r2, #15
 8018112:	4013      	ands	r3, r2
 8018114:	b2da      	uxtb	r2, r3
 8018116:	683b      	ldr	r3, [r7, #0]
 8018118:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801811a:	187b      	adds	r3, r7, r1
 801811c:	2205      	movs	r2, #5
 801811e:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8018120:	230f      	movs	r3, #15
 8018122:	18fb      	adds	r3, r7, r3
 8018124:	781b      	ldrb	r3, [r3, #0]
}
 8018126:	0018      	movs	r0, r3
 8018128:	46bd      	mov	sp, r7
 801812a:	b004      	add	sp, #16
 801812c:	bd80      	pop	{r7, pc}

0801812e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801812e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018130:	b089      	sub	sp, #36	; 0x24
 8018132:	af02      	add	r7, sp, #8
 8018134:	60f8      	str	r0, [r7, #12]
 8018136:	60b9      	str	r1, [r7, #8]
 8018138:	607a      	str	r2, [r7, #4]
 801813a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801813c:	2317      	movs	r3, #23
 801813e:	18fb      	adds	r3, r7, r3
 8018140:	68fa      	ldr	r2, [r7, #12]
 8018142:	7912      	ldrb	r2, [r2, #4]
 8018144:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8018146:	2116      	movs	r1, #22
 8018148:	187b      	adds	r3, r7, r1
 801814a:	68fa      	ldr	r2, [r7, #12]
 801814c:	7992      	ldrb	r2, [r2, #6]
 801814e:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8018150:	2015      	movs	r0, #21
 8018152:	183b      	adds	r3, r7, r0
 8018154:	68fa      	ldr	r2, [r7, #12]
 8018156:	79d2      	ldrb	r2, [r2, #7]
 8018158:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	7a1a      	ldrb	r2, [r3, #8]
 801815e:	2414      	movs	r4, #20
 8018160:	193b      	adds	r3, r7, r4
 8018162:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	795b      	ldrb	r3, [r3, #5]
 8018168:	2201      	movs	r2, #1
 801816a:	4053      	eors	r3, r2
 801816c:	b2db      	uxtb	r3, r3
 801816e:	2b00      	cmp	r3, #0
 8018170:	d00b      	beq.n	801818a <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8018172:	193b      	adds	r3, r7, r4
 8018174:	68fa      	ldr	r2, [r7, #12]
 8018176:	7ad2      	ldrb	r2, [r2, #11]
 8018178:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 801817a:	187b      	adds	r3, r7, r1
 801817c:	68fa      	ldr	r2, [r7, #12]
 801817e:	7a52      	ldrb	r2, [r2, #9]
 8018180:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8018182:	183b      	adds	r3, r7, r0
 8018184:	68fa      	ldr	r2, [r7, #12]
 8018186:	7a92      	ldrb	r2, [r2, #10]
 8018188:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 801818a:	2617      	movs	r6, #23
 801818c:	19bb      	adds	r3, r7, r6
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d046      	beq.n	8018222 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	7b18      	ldrb	r0, [r3, #12]
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	691c      	ldr	r4, [r3, #16]
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	2514      	movs	r5, #20
 80181a0:	575d      	ldrsb	r5, [r3, r5]
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	2215      	movs	r2, #21
 80181a6:	569a      	ldrsb	r2, [r3, r2]
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	699b      	ldr	r3, [r3, #24]
 80181ac:	2116      	movs	r1, #22
 80181ae:	1879      	adds	r1, r7, r1
 80181b0:	7809      	ldrb	r1, [r1, #0]
 80181b2:	b249      	sxtb	r1, r1
 80181b4:	9301      	str	r3, [sp, #4]
 80181b6:	9200      	str	r2, [sp, #0]
 80181b8:	002b      	movs	r3, r5
 80181ba:	000a      	movs	r2, r1
 80181bc:	0021      	movs	r1, r4
 80181be:	f7ff fceb 	bl	8017b98 <RegionCommonChanVerifyDr>
 80181c2:	0003      	movs	r3, r0
 80181c4:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80181c6:	2301      	movs	r3, #1
 80181c8:	4053      	eors	r3, r2
 80181ca:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d005      	beq.n	80181dc <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 80181d0:	19bb      	adds	r3, r7, r6
 80181d2:	19ba      	adds	r2, r7, r6
 80181d4:	7812      	ldrb	r2, [r2, #0]
 80181d6:	2102      	movs	r1, #2
 80181d8:	438a      	bics	r2, r1
 80181da:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	211d      	movs	r1, #29
 80181e0:	5659      	ldrsb	r1, [r3, r1]
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	221c      	movs	r2, #28
 80181e6:	569a      	ldrsb	r2, [r3, r2]
 80181e8:	2415      	movs	r4, #21
 80181ea:	193b      	adds	r3, r7, r4
 80181ec:	781b      	ldrb	r3, [r3, #0]
 80181ee:	b25b      	sxtb	r3, r3
 80181f0:	0018      	movs	r0, r3
 80181f2:	f7ff fd6a 	bl	8017cca <RegionCommonValueInRange>
 80181f6:	1e03      	subs	r3, r0, #0
 80181f8:	d113      	bne.n	8018222 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	7f5b      	ldrb	r3, [r3, #29]
 80181fe:	b25b      	sxtb	r3, r3
 8018200:	193a      	adds	r2, r7, r4
 8018202:	7812      	ldrb	r2, [r2, #0]
 8018204:	b252      	sxtb	r2, r2
 8018206:	429a      	cmp	r2, r3
 8018208:	da04      	bge.n	8018214 <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801820a:	193b      	adds	r3, r7, r4
 801820c:	68fa      	ldr	r2, [r7, #12]
 801820e:	7f52      	ldrb	r2, [r2, #29]
 8018210:	701a      	strb	r2, [r3, #0]
 8018212:	e006      	b.n	8018222 <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018214:	2217      	movs	r2, #23
 8018216:	18bb      	adds	r3, r7, r2
 8018218:	18ba      	adds	r2, r7, r2
 801821a:	7812      	ldrb	r2, [r2, #0]
 801821c:	2104      	movs	r1, #4
 801821e:	438a      	bics	r2, r1
 8018220:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018222:	2317      	movs	r3, #23
 8018224:	18fb      	adds	r3, r7, r3
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	2b07      	cmp	r3, #7
 801822a:	d108      	bne.n	801823e <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 801822c:	2214      	movs	r2, #20
 801822e:	18bb      	adds	r3, r7, r2
 8018230:	781b      	ldrb	r3, [r3, #0]
 8018232:	b25b      	sxtb	r3, r3
 8018234:	2b00      	cmp	r3, #0
 8018236:	d102      	bne.n	801823e <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8018238:	18bb      	adds	r3, r7, r2
 801823a:	2201      	movs	r2, #1
 801823c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 801823e:	68bb      	ldr	r3, [r7, #8]
 8018240:	2216      	movs	r2, #22
 8018242:	18ba      	adds	r2, r7, r2
 8018244:	7812      	ldrb	r2, [r2, #0]
 8018246:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2215      	movs	r2, #21
 801824c:	18ba      	adds	r2, r7, r2
 801824e:	7812      	ldrb	r2, [r2, #0]
 8018250:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8018252:	2314      	movs	r3, #20
 8018254:	18fb      	adds	r3, r7, r3
 8018256:	781a      	ldrb	r2, [r3, #0]
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	701a      	strb	r2, [r3, #0]

    return status;
 801825c:	2317      	movs	r3, #23
 801825e:	18fb      	adds	r3, r7, r3
 8018260:	781b      	ldrb	r3, [r3, #0]
}
 8018262:	0018      	movs	r0, r3
 8018264:	46bd      	mov	sp, r7
 8018266:	b007      	add	sp, #28
 8018268:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801826c <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b082      	sub	sp, #8
 8018270:	af00      	add	r7, sp, #0
 8018272:	0002      	movs	r2, r0
 8018274:	6039      	str	r1, [r7, #0]
 8018276:	1dfb      	adds	r3, r7, #7
 8018278:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 801827a:	6839      	ldr	r1, [r7, #0]
 801827c:	4806      	ldr	r0, [pc, #24]	; (8018298 <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 801827e:	f7e7 ff4b 	bl	8000118 <__udivsi3>
 8018282:	0003      	movs	r3, r0
 8018284:	001a      	movs	r2, r3
 8018286:	1dfb      	adds	r3, r7, #7
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	409a      	lsls	r2, r3
 801828c:	0013      	movs	r3, r2
}
 801828e:	0018      	movs	r0, r3
 8018290:	46bd      	mov	sp, r7
 8018292:	b002      	add	sp, #8
 8018294:	bd80      	pop	{r7, pc}
 8018296:	46c0      	nop			; (mov r8, r8)
 8018298:	3b9aca00 	.word	0x3b9aca00

0801829c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b082      	sub	sp, #8
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	0002      	movs	r2, r0
 80182a4:	1dfb      	adds	r3, r7, #7
 80182a6:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 80182a8:	4b02      	ldr	r3, [pc, #8]	; (80182b4 <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 80182aa:	0018      	movs	r0, r3
 80182ac:	46bd      	mov	sp, r7
 80182ae:	b002      	add	sp, #8
 80182b0:	bd80      	pop	{r7, pc}
 80182b2:	46c0      	nop			; (mov r8, r8)
 80182b4:	00027100 	.word	0x00027100

080182b8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 80182b8:	b5b0      	push	{r4, r5, r7, lr}
 80182ba:	b084      	sub	sp, #16
 80182bc:	af00      	add	r7, sp, #0
 80182be:	60f8      	str	r0, [r7, #12]
 80182c0:	607a      	str	r2, [r7, #4]
 80182c2:	603b      	str	r3, [r7, #0]
 80182c4:	200b      	movs	r0, #11
 80182c6:	183b      	adds	r3, r7, r0
 80182c8:	1c0a      	adds	r2, r1, #0
 80182ca:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 80182cc:	0002      	movs	r2, r0
 80182ce:	18bb      	adds	r3, r7, r2
 80182d0:	781d      	ldrb	r5, [r3, #0]
 80182d2:	18bb      	adds	r3, r7, r2
 80182d4:	781b      	ldrb	r3, [r3, #0]
 80182d6:	4a1c      	ldr	r2, [pc, #112]	; (8018348 <RegionCommonComputeRxWindowParameters+0x90>)
 80182d8:	4694      	mov	ip, r2
 80182da:	4463      	add	r3, ip
 80182dc:	005c      	lsls	r4, r3, #1
 80182de:	6879      	ldr	r1, [r7, #4]
 80182e0:	000a      	movs	r2, r1
 80182e2:	0152      	lsls	r2, r2, #5
 80182e4:	1a52      	subs	r2, r2, r1
 80182e6:	0193      	lsls	r3, r2, #6
 80182e8:	1a9b      	subs	r3, r3, r2
 80182ea:	00db      	lsls	r3, r3, #3
 80182ec:	185b      	adds	r3, r3, r1
 80182ee:	01db      	lsls	r3, r3, #7
 80182f0:	001a      	movs	r2, r3
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	18d3      	adds	r3, r2, r3
 80182f6:	3b01      	subs	r3, #1
 80182f8:	68f9      	ldr	r1, [r7, #12]
 80182fa:	0018      	movs	r0, r3
 80182fc:	f7e7 ff0c 	bl	8000118 <__udivsi3>
 8018300:	0003      	movs	r3, r0
 8018302:	18e2      	adds	r2, r4, r3
 8018304:	002b      	movs	r3, r5
 8018306:	4293      	cmp	r3, r2
 8018308:	d200      	bcs.n	801830c <RegionCommonComputeRxWindowParameters+0x54>
 801830a:	0013      	movs	r3, r2
 801830c:	6a3a      	ldr	r2, [r7, #32]
 801830e:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	009a      	lsls	r2, r3, #2
 8018314:	6a3b      	ldr	r3, [r7, #32]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	68f9      	ldr	r1, [r7, #12]
 801831a:	434b      	muls	r3, r1
 801831c:	085b      	lsrs	r3, r3, #1
 801831e:	1ad3      	subs	r3, r2, r3
 8018320:	4a0a      	ldr	r2, [pc, #40]	; (801834c <RegionCommonComputeRxWindowParameters+0x94>)
 8018322:	4694      	mov	ip, r2
 8018324:	4463      	add	r3, ip
 8018326:	490a      	ldr	r1, [pc, #40]	; (8018350 <RegionCommonComputeRxWindowParameters+0x98>)
 8018328:	0018      	movs	r0, r3
 801832a:	f7e7 ff7f 	bl	800022c <__divsi3>
 801832e:	0003      	movs	r3, r0
 8018330:	001a      	movs	r2, r3
 8018332:	683b      	ldr	r3, [r7, #0]
 8018334:	1ad3      	subs	r3, r2, r3
 8018336:	3b01      	subs	r3, #1
 8018338:	001a      	movs	r2, r3
 801833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801833c:	601a      	str	r2, [r3, #0]
}
 801833e:	46c0      	nop			; (mov r8, r8)
 8018340:	46bd      	mov	sp, r7
 8018342:	b004      	add	sp, #16
 8018344:	bdb0      	pop	{r4, r5, r7, pc}
 8018346:	46c0      	nop			; (mov r8, r8)
 8018348:	7ffffffc 	.word	0x7ffffffc
 801834c:	000f423f 	.word	0x000f423f
 8018350:	000f4240 	.word	0x000f4240

08018354 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018354:	b5b0      	push	{r4, r5, r7, lr}
 8018356:	b086      	sub	sp, #24
 8018358:	af00      	add	r7, sp, #0
 801835a:	60b9      	str	r1, [r7, #8]
 801835c:	607a      	str	r2, [r7, #4]
 801835e:	210f      	movs	r1, #15
 8018360:	187b      	adds	r3, r7, r1
 8018362:	1c02      	adds	r2, r0, #0
 8018364:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 8018366:	2417      	movs	r4, #23
 8018368:	193b      	adds	r3, r7, r4
 801836a:	2200      	movs	r2, #0
 801836c:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801836e:	187b      	adds	r3, r7, r1
 8018370:	781b      	ldrb	r3, [r3, #0]
 8018372:	b25b      	sxtb	r3, r3
 8018374:	005b      	lsls	r3, r3, #1
 8018376:	0018      	movs	r0, r3
 8018378:	f7e8 fb7c 	bl	8000a74 <__aeabi_ui2f>
 801837c:	1c03      	adds	r3, r0, #0
 801837e:	1c19      	adds	r1, r3, #0
 8018380:	68b8      	ldr	r0, [r7, #8]
 8018382:	f7e8 f9af 	bl	80006e4 <__aeabi_fsub>
 8018386:	1c03      	adds	r3, r0, #0
 8018388:	6879      	ldr	r1, [r7, #4]
 801838a:	1c18      	adds	r0, r3, #0
 801838c:	f7e8 f9aa 	bl	80006e4 <__aeabi_fsub>
 8018390:	1c03      	adds	r3, r0, #0
 8018392:	1c18      	adds	r0, r3, #0
 8018394:	f7ea f9a4 	bl	80026e0 <__aeabi_f2d>
 8018398:	0002      	movs	r2, r0
 801839a:	000b      	movs	r3, r1
 801839c:	0010      	movs	r0, r2
 801839e:	0019      	movs	r1, r3
 80183a0:	f006 fd7a 	bl	801ee98 <floor>
 80183a4:	0002      	movs	r2, r0
 80183a6:	000b      	movs	r3, r1
 80183a8:	0025      	movs	r5, r4
 80183aa:	193c      	adds	r4, r7, r4
 80183ac:	0010      	movs	r0, r2
 80183ae:	0019      	movs	r1, r3
 80183b0:	f7ea f90a 	bl	80025c8 <__aeabi_d2iz>
 80183b4:	0003      	movs	r3, r0
 80183b6:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 80183b8:	197b      	adds	r3, r7, r5
 80183ba:	781b      	ldrb	r3, [r3, #0]
 80183bc:	b25b      	sxtb	r3, r3
}
 80183be:	0018      	movs	r0, r3
 80183c0:	46bd      	mov	sp, r7
 80183c2:	b006      	add	sp, #24
 80183c4:	bdb0      	pop	{r4, r5, r7, pc}

080183c6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80183c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183c8:	b087      	sub	sp, #28
 80183ca:	af00      	add	r7, sp, #0
 80183cc:	60f8      	str	r0, [r7, #12]
 80183ce:	60b9      	str	r1, [r7, #8]
 80183d0:	607a      	str	r2, [r7, #4]
 80183d2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80183d4:	2317      	movs	r3, #23
 80183d6:	18fb      	adds	r3, r7, r3
 80183d8:	2200      	movs	r2, #0
 80183da:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 80183dc:	2316      	movs	r3, #22
 80183de:	18fb      	adds	r3, r7, r3
 80183e0:	2200      	movs	r2, #0
 80183e2:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80183e4:	2315      	movs	r3, #21
 80183e6:	18fb      	adds	r3, r7, r3
 80183e8:	2200      	movs	r2, #0
 80183ea:	701a      	strb	r2, [r3, #0]
 80183ec:	2314      	movs	r3, #20
 80183ee:	18fb      	adds	r3, r7, r3
 80183f0:	2200      	movs	r2, #0
 80183f2:	701a      	strb	r2, [r3, #0]
 80183f4:	e0bf      	b.n	8018576 <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80183f6:	2313      	movs	r3, #19
 80183f8:	18fb      	adds	r3, r7, r3
 80183fa:	2200      	movs	r2, #0
 80183fc:	701a      	strb	r2, [r3, #0]
 80183fe:	e0a8      	b.n	8018552 <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	685a      	ldr	r2, [r3, #4]
 8018404:	2314      	movs	r3, #20
 8018406:	18fb      	adds	r3, r7, r3
 8018408:	781b      	ldrb	r3, [r3, #0]
 801840a:	005b      	lsls	r3, r3, #1
 801840c:	18d3      	adds	r3, r2, r3
 801840e:	881b      	ldrh	r3, [r3, #0]
 8018410:	001a      	movs	r2, r3
 8018412:	2013      	movs	r0, #19
 8018414:	183b      	adds	r3, r7, r0
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	411a      	asrs	r2, r3
 801841a:	0013      	movs	r3, r2
 801841c:	2201      	movs	r2, #1
 801841e:	4013      	ands	r3, r2
 8018420:	d100      	bne.n	8018424 <RegionCommonCountNbOfEnabledChannels+0x5e>
 8018422:	e090      	b.n	8018546 <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	689a      	ldr	r2, [r3, #8]
 8018428:	2315      	movs	r3, #21
 801842a:	18fb      	adds	r3, r7, r3
 801842c:	7819      	ldrb	r1, [r3, #0]
 801842e:	183b      	adds	r3, r7, r0
 8018430:	781b      	ldrb	r3, [r3, #0]
 8018432:	18cb      	adds	r3, r1, r3
 8018434:	0019      	movs	r1, r3
 8018436:	000b      	movs	r3, r1
 8018438:	005b      	lsls	r3, r3, #1
 801843a:	185b      	adds	r3, r3, r1
 801843c:	009b      	lsls	r3, r3, #2
 801843e:	18d3      	adds	r3, r2, r3
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d100      	bne.n	8018448 <RegionCommonCountNbOfEnabledChannels+0x82>
 8018446:	e079      	b.n	801853c <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	781b      	ldrb	r3, [r3, #0]
 801844c:	2201      	movs	r2, #1
 801844e:	4053      	eors	r3, r2
 8018450:	b2db      	uxtb	r3, r3
 8018452:	2b00      	cmp	r3, #0
 8018454:	d00d      	beq.n	8018472 <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801845a:	2b00      	cmp	r3, #0
 801845c:	d009      	beq.n	8018472 <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	8a5b      	ldrh	r3, [r3, #18]
 8018462:	001a      	movs	r2, r3
 8018464:	183b      	adds	r3, r7, r0
 8018466:	781b      	ldrb	r3, [r3, #0]
 8018468:	411a      	asrs	r2, r3
 801846a:	0013      	movs	r3, r2
 801846c:	2201      	movs	r2, #1
 801846e:	4013      	ands	r3, r2
 8018470:	d066      	beq.n	8018540 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	785b      	ldrb	r3, [r3, #1]
 8018476:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	689a      	ldr	r2, [r3, #8]
 801847c:	2515      	movs	r5, #21
 801847e:	197b      	adds	r3, r7, r5
 8018480:	7819      	ldrb	r1, [r3, #0]
 8018482:	2613      	movs	r6, #19
 8018484:	19bb      	adds	r3, r7, r6
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	18cb      	adds	r3, r1, r3
 801848a:	0019      	movs	r1, r3
 801848c:	000b      	movs	r3, r1
 801848e:	005b      	lsls	r3, r3, #1
 8018490:	185b      	adds	r3, r3, r1
 8018492:	009b      	lsls	r3, r3, #2
 8018494:	18d3      	adds	r3, r2, r3
 8018496:	7a1b      	ldrb	r3, [r3, #8]
 8018498:	011b      	lsls	r3, r3, #4
 801849a:	b25b      	sxtb	r3, r3
 801849c:	111b      	asrs	r3, r3, #4
 801849e:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80184a0:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	689a      	ldr	r2, [r3, #8]
 80184a6:	197b      	adds	r3, r7, r5
 80184a8:	7819      	ldrb	r1, [r3, #0]
 80184aa:	19bb      	adds	r3, r7, r6
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	18cb      	adds	r3, r1, r3
 80184b0:	0019      	movs	r1, r3
 80184b2:	000b      	movs	r3, r1
 80184b4:	005b      	lsls	r3, r3, #1
 80184b6:	185b      	adds	r3, r3, r1
 80184b8:	009b      	lsls	r3, r3, #2
 80184ba:	18d3      	adds	r3, r2, r3
 80184bc:	7a1b      	ldrb	r3, [r3, #8]
 80184be:	b25b      	sxtb	r3, r3
 80184c0:	111b      	asrs	r3, r3, #4
 80184c2:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80184c4:	001a      	movs	r2, r3
 80184c6:	0021      	movs	r1, r4
 80184c8:	f7ff fbff 	bl	8017cca <RegionCommonValueInRange>
 80184cc:	1e03      	subs	r3, r0, #0
 80184ce:	d039      	beq.n	8018544 <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	68da      	ldr	r2, [r3, #12]
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	6899      	ldr	r1, [r3, #8]
 80184d8:	197b      	adds	r3, r7, r5
 80184da:	7818      	ldrb	r0, [r3, #0]
 80184dc:	19bb      	adds	r3, r7, r6
 80184de:	781b      	ldrb	r3, [r3, #0]
 80184e0:	18c3      	adds	r3, r0, r3
 80184e2:	0018      	movs	r0, r3
 80184e4:	0003      	movs	r3, r0
 80184e6:	005b      	lsls	r3, r3, #1
 80184e8:	181b      	adds	r3, r3, r0
 80184ea:	009b      	lsls	r3, r3, #2
 80184ec:	18cb      	adds	r3, r1, r3
 80184ee:	7a5b      	ldrb	r3, [r3, #9]
 80184f0:	0019      	movs	r1, r3
 80184f2:	000b      	movs	r3, r1
 80184f4:	009b      	lsls	r3, r3, #2
 80184f6:	185b      	adds	r3, r3, r1
 80184f8:	009b      	lsls	r3, r3, #2
 80184fa:	18d3      	adds	r3, r2, r3
 80184fc:	7c1b      	ldrb	r3, [r3, #16]
 80184fe:	2201      	movs	r2, #1
 8018500:	4053      	eors	r3, r2
 8018502:	b2db      	uxtb	r3, r3
 8018504:	2b00      	cmp	r3, #0
 8018506:	d006      	beq.n	8018516 <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018508:	2116      	movs	r1, #22
 801850a:	187b      	adds	r3, r7, r1
 801850c:	781a      	ldrb	r2, [r3, #0]
 801850e:	187b      	adds	r3, r7, r1
 8018510:	3201      	adds	r2, #1
 8018512:	701a      	strb	r2, [r3, #0]
                    continue;
 8018514:	e017      	b.n	8018546 <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018516:	2217      	movs	r2, #23
 8018518:	18bb      	adds	r3, r7, r2
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	18ba      	adds	r2, r7, r2
 801851e:	1c59      	adds	r1, r3, #1
 8018520:	7011      	strb	r1, [r2, #0]
 8018522:	001a      	movs	r2, r3
 8018524:	68bb      	ldr	r3, [r7, #8]
 8018526:	189b      	adds	r3, r3, r2
 8018528:	2215      	movs	r2, #21
 801852a:	18b9      	adds	r1, r7, r2
 801852c:	2213      	movs	r2, #19
 801852e:	18ba      	adds	r2, r7, r2
 8018530:	7809      	ldrb	r1, [r1, #0]
 8018532:	7812      	ldrb	r2, [r2, #0]
 8018534:	188a      	adds	r2, r1, r2
 8018536:	b2d2      	uxtb	r2, r2
 8018538:	701a      	strb	r2, [r3, #0]
 801853a:	e004      	b.n	8018546 <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 801853c:	46c0      	nop			; (mov r8, r8)
 801853e:	e002      	b.n	8018546 <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 8018540:	46c0      	nop			; (mov r8, r8)
 8018542:	e000      	b.n	8018546 <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8018544:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8018546:	2113      	movs	r1, #19
 8018548:	187b      	adds	r3, r7, r1
 801854a:	781a      	ldrb	r2, [r3, #0]
 801854c:	187b      	adds	r3, r7, r1
 801854e:	3201      	adds	r2, #1
 8018550:	701a      	strb	r2, [r3, #0]
 8018552:	2313      	movs	r3, #19
 8018554:	18fb      	adds	r3, r7, r3
 8018556:	781b      	ldrb	r3, [r3, #0]
 8018558:	2b0f      	cmp	r3, #15
 801855a:	d800      	bhi.n	801855e <RegionCommonCountNbOfEnabledChannels+0x198>
 801855c:	e750      	b.n	8018400 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801855e:	2215      	movs	r2, #21
 8018560:	18bb      	adds	r3, r7, r2
 8018562:	18ba      	adds	r2, r7, r2
 8018564:	7812      	ldrb	r2, [r2, #0]
 8018566:	3210      	adds	r2, #16
 8018568:	701a      	strb	r2, [r3, #0]
 801856a:	2114      	movs	r1, #20
 801856c:	187b      	adds	r3, r7, r1
 801856e:	781a      	ldrb	r2, [r3, #0]
 8018570:	187b      	adds	r3, r7, r1
 8018572:	3201      	adds	r2, #1
 8018574:	701a      	strb	r2, [r3, #0]
 8018576:	2315      	movs	r3, #21
 8018578:	18fb      	adds	r3, r7, r3
 801857a:	781b      	ldrb	r3, [r3, #0]
 801857c:	b29a      	uxth	r2, r3
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	8a1b      	ldrh	r3, [r3, #16]
 8018582:	429a      	cmp	r2, r3
 8018584:	d200      	bcs.n	8018588 <RegionCommonCountNbOfEnabledChannels+0x1c2>
 8018586:	e736      	b.n	80183f6 <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	2217      	movs	r2, #23
 801858c:	18ba      	adds	r2, r7, r2
 801858e:	7812      	ldrb	r2, [r2, #0]
 8018590:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	2216      	movs	r2, #22
 8018596:	18ba      	adds	r2, r7, r2
 8018598:	7812      	ldrb	r2, [r2, #0]
 801859a:	701a      	strb	r2, [r3, #0]
}
 801859c:	46c0      	nop			; (mov r8, r8)
 801859e:	46bd      	mov	sp, r7
 80185a0:	b007      	add	sp, #28
 80185a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080185a4 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80185a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185a6:	46c6      	mov	lr, r8
 80185a8:	b500      	push	{lr}
 80185aa:	b08a      	sub	sp, #40	; 0x28
 80185ac:	af04      	add	r7, sp, #16
 80185ae:	60f8      	str	r0, [r7, #12]
 80185b0:	60b9      	str	r1, [r7, #8]
 80185b2:	607a      	str	r2, [r7, #4]
 80185b4:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	685b      	ldr	r3, [r3, #4]
 80185ba:	0018      	movs	r0, r3
 80185bc:	f005 fb5e 	bl	801dc7c <UTIL_TIMER_GetElapsedTime>
 80185c0:	0003      	movs	r3, r0
 80185c2:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	1ad2      	subs	r2, r2, r3
 80185cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ce:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80185d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d2:	2201      	movs	r2, #1
 80185d4:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80185d6:	683b      	ldr	r3, [r7, #0]
 80185d8:	2200      	movs	r2, #0
 80185da:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	685b      	ldr	r3, [r3, #4]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d004      	beq.n	80185ee <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80185e8:	697a      	ldr	r2, [r7, #20]
 80185ea:	429a      	cmp	r2, r3
 80185ec:	d32b      	bcc.n	8018646 <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	2200      	movs	r2, #0
 80185f2:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	69db      	ldr	r3, [r3, #28]
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018600:	68dc      	ldr	r4, [r3, #12]
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	7a5d      	ldrb	r5, [r3, #9]
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	7a1e      	ldrb	r6, [r3, #8]
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	7d1b      	ldrb	r3, [r3, #20]
 801860e:	4698      	mov	r8, r3
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	699b      	ldr	r3, [r3, #24]
 8018614:	9303      	str	r3, [sp, #12]
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	2204      	movs	r2, #4
 801861a:	446a      	add	r2, sp
 801861c:	330c      	adds	r3, #12
 801861e:	cb03      	ldmia	r3!, {r0, r1}
 8018620:	c203      	stmia	r2!, {r0, r1}
 8018622:	4643      	mov	r3, r8
 8018624:	9300      	str	r3, [sp, #0]
 8018626:	0033      	movs	r3, r6
 8018628:	002a      	movs	r2, r5
 801862a:	0021      	movs	r1, r4
 801862c:	4660      	mov	r0, ip
 801862e:	f7ff fc60 	bl	8017ef2 <RegionCommonUpdateBandTimeOff>
 8018632:	0002      	movs	r2, r0
 8018634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018636:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	69d8      	ldr	r0, [r3, #28]
 801863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801863e:	683a      	ldr	r2, [r7, #0]
 8018640:	6879      	ldr	r1, [r7, #4]
 8018642:	f7ff fec0 	bl	80183c6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018646:	683b      	ldr	r3, [r7, #0]
 8018648:	781b      	ldrb	r3, [r3, #0]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d004      	beq.n	8018658 <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 801864e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018650:	2200      	movs	r2, #0
 8018652:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018654:	2300      	movs	r3, #0
 8018656:	e006      	b.n	8018666 <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 8018658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d001      	beq.n	8018664 <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018660:	230b      	movs	r3, #11
 8018662:	e000      	b.n	8018666 <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018664:	230c      	movs	r3, #12
    }
}
 8018666:	0018      	movs	r0, r3
 8018668:	46bd      	mov	sp, r7
 801866a:	b006      	add	sp, #24
 801866c:	bc80      	pop	{r7}
 801866e:	46b8      	mov	r8, r7
 8018670:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018674 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018674:	b5b0      	push	{r4, r5, r7, lr}
 8018676:	b08c      	sub	sp, #48	; 0x30
 8018678:	af04      	add	r7, sp, #16
 801867a:	6039      	str	r1, [r7, #0]
 801867c:	0011      	movs	r1, r2
 801867e:	1dfb      	adds	r3, r7, #7
 8018680:	1c02      	adds	r2, r0, #0
 8018682:	701a      	strb	r2, [r3, #0]
 8018684:	1dbb      	adds	r3, r7, #6
 8018686:	1c0a      	adds	r2, r1, #0
 8018688:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 801868a:	2108      	movs	r1, #8
 801868c:	187b      	adds	r3, r7, r1
 801868e:	4a17      	ldr	r2, [pc, #92]	; (80186ec <RegionCommonRxConfigPrint+0x78>)
 8018690:	ca31      	ldmia	r2!, {r0, r4, r5}
 8018692:	c331      	stmia	r3!, {r0, r4, r5}
 8018694:	ca31      	ldmia	r2!, {r0, r4, r5}
 8018696:	c331      	stmia	r3!, {r0, r4, r5}

    if ( rxSlot < RX_SLOT_NONE )
 8018698:	1dfb      	adds	r3, r7, #7
 801869a:	781b      	ldrb	r3, [r3, #0]
 801869c:	2b05      	cmp	r3, #5
 801869e:	d813      	bhi.n	80186c8 <RegionCommonRxConfigPrint+0x54>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 80186a0:	1dfb      	adds	r3, r7, #7
 80186a2:	781a      	ldrb	r2, [r3, #0]
 80186a4:	187b      	adds	r3, r7, r1
 80186a6:	0092      	lsls	r2, r2, #2
 80186a8:	58d3      	ldr	r3, [r2, r3]
 80186aa:	1dba      	adds	r2, r7, #6
 80186ac:	7812      	ldrb	r2, [r2, #0]
 80186ae:	b252      	sxtb	r2, r2
 80186b0:	490f      	ldr	r1, [pc, #60]	; (80186f0 <RegionCommonRxConfigPrint+0x7c>)
 80186b2:	9202      	str	r2, [sp, #8]
 80186b4:	683a      	ldr	r2, [r7, #0]
 80186b6:	9201      	str	r2, [sp, #4]
 80186b8:	9300      	str	r3, [sp, #0]
 80186ba:	000b      	movs	r3, r1
 80186bc:	2201      	movs	r2, #1
 80186be:	2100      	movs	r1, #0
 80186c0:	2002      	movs	r0, #2
 80186c2:	f004 f817 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80186c6:	e00c      	b.n	80186e2 <RegionCommonRxConfigPrint+0x6e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80186c8:	1dbb      	adds	r3, r7, #6
 80186ca:	781b      	ldrb	r3, [r3, #0]
 80186cc:	b25b      	sxtb	r3, r3
 80186ce:	4a09      	ldr	r2, [pc, #36]	; (80186f4 <RegionCommonRxConfigPrint+0x80>)
 80186d0:	9301      	str	r3, [sp, #4]
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	9300      	str	r3, [sp, #0]
 80186d6:	0013      	movs	r3, r2
 80186d8:	2201      	movs	r2, #1
 80186da:	2100      	movs	r1, #0
 80186dc:	2002      	movs	r0, #2
 80186de:	f004 f809 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
}
 80186e2:	46c0      	nop			; (mov r8, r8)
 80186e4:	46bd      	mov	sp, r7
 80186e6:	b008      	add	sp, #32
 80186e8:	bdb0      	pop	{r4, r5, r7, pc}
 80186ea:	46c0      	nop			; (mov r8, r8)
 80186ec:	08021578 	.word	0x08021578
 80186f0:	0802153c 	.word	0x0802153c
 80186f4:	0802155c 	.word	0x0802155c

080186f8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b084      	sub	sp, #16
 80186fc:	af02      	add	r7, sp, #8
 80186fe:	6078      	str	r0, [r7, #4]
 8018700:	000a      	movs	r2, r1
 8018702:	1cfb      	adds	r3, r7, #3
 8018704:	701a      	strb	r2, [r3, #0]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018706:	1cfb      	adds	r3, r7, #3
 8018708:	781b      	ldrb	r3, [r3, #0]
 801870a:	b25b      	sxtb	r3, r3
 801870c:	4a06      	ldr	r2, [pc, #24]	; (8018728 <RegionCommonTxConfigPrint+0x30>)
 801870e:	9301      	str	r3, [sp, #4]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	9300      	str	r3, [sp, #0]
 8018714:	0013      	movs	r3, r2
 8018716:	2201      	movs	r2, #1
 8018718:	2100      	movs	r1, #0
 801871a:	2002      	movs	r0, #2
 801871c:	f003 ffea 	bl	801c6f4 <UTIL_ADV_TRACE_COND_FSend>
}
 8018720:	46c0      	nop			; (mov r8, r8)
 8018722:	46bd      	mov	sp, r7
 8018724:	b002      	add	sp, #8
 8018726:	bd80      	pop	{r7, pc}
 8018728:	08021590 	.word	0x08021590

0801872c <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 801872c:	b580      	push	{r7, lr}
 801872e:	b084      	sub	sp, #16
 8018730:	af00      	add	r7, sp, #0
 8018732:	0002      	movs	r2, r0
 8018734:	1dfb      	adds	r3, r7, #7
 8018736:	701a      	strb	r2, [r3, #0]
 8018738:	1dbb      	adds	r3, r7, #6
 801873a:	1c0a      	adds	r2, r1, #0
 801873c:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 801873e:	210f      	movs	r1, #15
 8018740:	187b      	adds	r3, r7, r1
 8018742:	2200      	movs	r2, #0
 8018744:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8018746:	1dfa      	adds	r2, r7, #7
 8018748:	1dbb      	adds	r3, r7, #6
 801874a:	7812      	ldrb	r2, [r2, #0]
 801874c:	b252      	sxtb	r2, r2
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	b25b      	sxtb	r3, r3
 8018752:	429a      	cmp	r2, r3
 8018754:	d104      	bne.n	8018760 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 8018756:	187b      	adds	r3, r7, r1
 8018758:	1dba      	adds	r2, r7, #6
 801875a:	7812      	ldrb	r2, [r2, #0]
 801875c:	701a      	strb	r2, [r3, #0]
 801875e:	e005      	b.n	801876c <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 8018760:	1dfb      	adds	r3, r7, #7
 8018762:	781a      	ldrb	r2, [r3, #0]
 8018764:	230f      	movs	r3, #15
 8018766:	18fb      	adds	r3, r7, r3
 8018768:	3a01      	subs	r2, #1
 801876a:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 801876c:	230f      	movs	r3, #15
 801876e:	18fb      	adds	r3, r7, r3
 8018770:	781b      	ldrb	r3, [r3, #0]
 8018772:	b25b      	sxtb	r3, r3
}
 8018774:	0018      	movs	r0, r3
 8018776:	46bd      	mov	sp, r7
 8018778:	b004      	add	sp, #16
 801877a:	bd80      	pop	{r7, pc}

0801877c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b082      	sub	sp, #8
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8018784:	4b09      	ldr	r3, [pc, #36]	; (80187ac <GetBandwidth+0x30>)
 8018786:	687a      	ldr	r2, [r7, #4]
 8018788:	0092      	lsls	r2, r2, #2
 801878a:	58d3      	ldr	r3, [r2, r3]
 801878c:	4a08      	ldr	r2, [pc, #32]	; (80187b0 <GetBandwidth+0x34>)
 801878e:	4293      	cmp	r3, r2
 8018790:	d004      	beq.n	801879c <GetBandwidth+0x20>
 8018792:	4a08      	ldr	r2, [pc, #32]	; (80187b4 <GetBandwidth+0x38>)
 8018794:	4293      	cmp	r3, r2
 8018796:	d003      	beq.n	80187a0 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8018798:	2300      	movs	r3, #0
 801879a:	e002      	b.n	80187a2 <GetBandwidth+0x26>
        case 250000:
            return 1;
 801879c:	2301      	movs	r3, #1
 801879e:	e000      	b.n	80187a2 <GetBandwidth+0x26>
        case 500000:
            return 2;
 80187a0:	2302      	movs	r3, #2
    }
}
 80187a2:	0018      	movs	r0, r3
 80187a4:	46bd      	mov	sp, r7
 80187a6:	b002      	add	sp, #8
 80187a8:	bd80      	pop	{r7, pc}
 80187aa:	46c0      	nop			; (mov r8, r8)
 80187ac:	080215c4 	.word	0x080215c4
 80187b0:	0003d090 	.word	0x0003d090
 80187b4:	0007a120 	.word	0x0007a120

080187b8 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80187b8:	b590      	push	{r4, r7, lr}
 80187ba:	b085      	sub	sp, #20
 80187bc:	af00      	add	r7, sp, #0
 80187be:	0004      	movs	r4, r0
 80187c0:	0008      	movs	r0, r1
 80187c2:	0011      	movs	r1, r2
 80187c4:	603b      	str	r3, [r7, #0]
 80187c6:	1dfb      	adds	r3, r7, #7
 80187c8:	1c22      	adds	r2, r4, #0
 80187ca:	701a      	strb	r2, [r3, #0]
 80187cc:	1dbb      	adds	r3, r7, #6
 80187ce:	1c02      	adds	r2, r0, #0
 80187d0:	701a      	strb	r2, [r3, #0]
 80187d2:	1d7b      	adds	r3, r7, #5
 80187d4:	1c0a      	adds	r2, r1, #0
 80187d6:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 80187d8:	210f      	movs	r1, #15
 80187da:	187b      	adds	r3, r7, r1
 80187dc:	1dfa      	adds	r2, r7, #7
 80187de:	7812      	ldrb	r2, [r2, #0]
 80187e0:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80187e2:	187a      	adds	r2, r7, r1
 80187e4:	1dbb      	adds	r3, r7, #6
 80187e6:	1df9      	adds	r1, r7, #7
 80187e8:	780c      	ldrb	r4, [r1, #0]
 80187ea:	781b      	ldrb	r3, [r3, #0]
 80187ec:	b258      	sxtb	r0, r3
 80187ee:	b261      	sxtb	r1, r4
 80187f0:	4288      	cmp	r0, r1
 80187f2:	da00      	bge.n	80187f6 <LimitTxPower+0x3e>
 80187f4:	1c23      	adds	r3, r4, #0
 80187f6:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 80187f8:	230f      	movs	r3, #15
 80187fa:	18fb      	adds	r3, r7, r3
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	b25b      	sxtb	r3, r3
}
 8018800:	0018      	movs	r0, r3
 8018802:	46bd      	mov	sp, r7
 8018804:	b005      	add	sp, #20
 8018806:	bd90      	pop	{r4, r7, pc}

08018808 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b082      	sub	sp, #8
 801880c:	af00      	add	r7, sp, #0
 801880e:	6078      	str	r0, [r7, #4]
 8018810:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018812:	4b2e      	ldr	r3, [pc, #184]	; (80188cc <VerifyRfFreq+0xc4>)
 8018814:	6a1b      	ldr	r3, [r3, #32]
 8018816:	687a      	ldr	r2, [r7, #4]
 8018818:	0010      	movs	r0, r2
 801881a:	4798      	blx	r3
 801881c:	0003      	movs	r3, r0
 801881e:	001a      	movs	r2, r3
 8018820:	2301      	movs	r3, #1
 8018822:	4053      	eors	r3, r2
 8018824:	b2db      	uxtb	r3, r3
 8018826:	2b00      	cmp	r3, #0
 8018828:	d001      	beq.n	801882e <VerifyRfFreq+0x26>
    {
        return false;
 801882a:	2300      	movs	r3, #0
 801882c:	e04a      	b.n	80188c4 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	4a27      	ldr	r2, [pc, #156]	; (80188d0 <VerifyRfFreq+0xc8>)
 8018832:	4293      	cmp	r3, r2
 8018834:	d907      	bls.n	8018846 <VerifyRfFreq+0x3e>
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	4a26      	ldr	r2, [pc, #152]	; (80188d4 <VerifyRfFreq+0xcc>)
 801883a:	4293      	cmp	r3, r2
 801883c:	d803      	bhi.n	8018846 <VerifyRfFreq+0x3e>
    {
        *band = 2;
 801883e:	683b      	ldr	r3, [r7, #0]
 8018840:	2202      	movs	r2, #2
 8018842:	701a      	strb	r2, [r3, #0]
 8018844:	e03d      	b.n	80188c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	4a22      	ldr	r2, [pc, #136]	; (80188d4 <VerifyRfFreq+0xcc>)
 801884a:	4293      	cmp	r3, r2
 801884c:	d907      	bls.n	801885e <VerifyRfFreq+0x56>
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	4a21      	ldr	r2, [pc, #132]	; (80188d8 <VerifyRfFreq+0xd0>)
 8018852:	4293      	cmp	r3, r2
 8018854:	d803      	bhi.n	801885e <VerifyRfFreq+0x56>
    {
        *band = 0;
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	2200      	movs	r2, #0
 801885a:	701a      	strb	r2, [r3, #0]
 801885c:	e031      	b.n	80188c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	4a1d      	ldr	r2, [pc, #116]	; (80188d8 <VerifyRfFreq+0xd0>)
 8018862:	4293      	cmp	r3, r2
 8018864:	d907      	bls.n	8018876 <VerifyRfFreq+0x6e>
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	4a1c      	ldr	r2, [pc, #112]	; (80188dc <VerifyRfFreq+0xd4>)
 801886a:	4293      	cmp	r3, r2
 801886c:	d803      	bhi.n	8018876 <VerifyRfFreq+0x6e>
    {
        *band = 1;
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	2201      	movs	r2, #1
 8018872:	701a      	strb	r2, [r3, #0]
 8018874:	e025      	b.n	80188c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	4a19      	ldr	r2, [pc, #100]	; (80188e0 <VerifyRfFreq+0xd8>)
 801887a:	4293      	cmp	r3, r2
 801887c:	d907      	bls.n	801888e <VerifyRfFreq+0x86>
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	4a18      	ldr	r2, [pc, #96]	; (80188e4 <VerifyRfFreq+0xdc>)
 8018882:	4293      	cmp	r3, r2
 8018884:	d803      	bhi.n	801888e <VerifyRfFreq+0x86>
    {
        *band = 5;
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	2205      	movs	r2, #5
 801888a:	701a      	strb	r2, [r3, #0]
 801888c:	e019      	b.n	80188c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	4a15      	ldr	r2, [pc, #84]	; (80188e8 <VerifyRfFreq+0xe0>)
 8018892:	4293      	cmp	r3, r2
 8018894:	d907      	bls.n	80188a6 <VerifyRfFreq+0x9e>
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	4a14      	ldr	r2, [pc, #80]	; (80188ec <VerifyRfFreq+0xe4>)
 801889a:	4293      	cmp	r3, r2
 801889c:	d803      	bhi.n	80188a6 <VerifyRfFreq+0x9e>
    {
        *band = 3;
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	2203      	movs	r2, #3
 80188a2:	701a      	strb	r2, [r3, #0]
 80188a4:	e00d      	b.n	80188c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	4a11      	ldr	r2, [pc, #68]	; (80188f0 <VerifyRfFreq+0xe8>)
 80188aa:	4293      	cmp	r3, r2
 80188ac:	d907      	bls.n	80188be <VerifyRfFreq+0xb6>
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	4a10      	ldr	r2, [pc, #64]	; (80188f4 <VerifyRfFreq+0xec>)
 80188b2:	4293      	cmp	r3, r2
 80188b4:	d803      	bhi.n	80188be <VerifyRfFreq+0xb6>
    {
        *band = 4;
 80188b6:	683b      	ldr	r3, [r7, #0]
 80188b8:	2204      	movs	r2, #4
 80188ba:	701a      	strb	r2, [r3, #0]
 80188bc:	e001      	b.n	80188c2 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 80188be:	2300      	movs	r3, #0
 80188c0:	e000      	b.n	80188c4 <VerifyRfFreq+0xbc>
    }
    return true;
 80188c2:	2301      	movs	r3, #1
}
 80188c4:	0018      	movs	r0, r3
 80188c6:	46bd      	mov	sp, r7
 80188c8:	b002      	add	sp, #8
 80188ca:	bd80      	pop	{r7, pc}
 80188cc:	08021740 	.word	0x08021740
 80188d0:	337055bf 	.word	0x337055bf
 80188d4:	338eda3f 	.word	0x338eda3f
 80188d8:	33bca100 	.word	0x33bca100
 80188dc:	33c5c8c0 	.word	0x33c5c8c0
 80188e0:	33c74f5f 	.word	0x33c74f5f
 80188e4:	33cef080 	.word	0x33cef080
 80188e8:	33d1fdbf 	.word	0x33d1fdbf
 80188ec:	33d5ce50 	.word	0x33d5ce50
 80188f0:	33d6919f 	.word	0x33d6919f
 80188f4:	33db2580 	.word	0x33db2580

080188f8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80188f8:	b5b0      	push	{r4, r5, r7, lr}
 80188fa:	b08a      	sub	sp, #40	; 0x28
 80188fc:	af04      	add	r7, sp, #16
 80188fe:	0002      	movs	r2, r0
 8018900:	1dfb      	adds	r3, r7, #7
 8018902:	701a      	strb	r2, [r3, #0]
 8018904:	1d3b      	adds	r3, r7, #4
 8018906:	1c0a      	adds	r2, r1, #0
 8018908:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 801890a:	1dfb      	adds	r3, r7, #7
 801890c:	781b      	ldrb	r3, [r3, #0]
 801890e:	b25b      	sxtb	r3, r3
 8018910:	4a26      	ldr	r2, [pc, #152]	; (80189ac <GetTimeOnAir+0xb4>)
 8018912:	5cd2      	ldrb	r2, [r2, r3]
 8018914:	2513      	movs	r5, #19
 8018916:	197b      	adds	r3, r7, r5
 8018918:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 801891a:	1dfb      	adds	r3, r7, #7
 801891c:	781b      	ldrb	r3, [r3, #0]
 801891e:	b25b      	sxtb	r3, r3
 8018920:	0018      	movs	r0, r3
 8018922:	f7ff ff2b 	bl	801877c <GetBandwidth>
 8018926:	0003      	movs	r3, r0
 8018928:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801892a:	2300      	movs	r3, #0
 801892c:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801892e:	1dfb      	adds	r3, r7, #7
 8018930:	781b      	ldrb	r3, [r3, #0]
 8018932:	b25b      	sxtb	r3, r3
 8018934:	2b07      	cmp	r3, #7
 8018936:	d11d      	bne.n	8018974 <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018938:	4b1d      	ldr	r3, [pc, #116]	; (80189b0 <GetTimeOnAir+0xb8>)
 801893a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801893c:	197b      	adds	r3, r7, r5
 801893e:	2200      	movs	r2, #0
 8018940:	569a      	ldrsb	r2, [r3, r2]
 8018942:	0013      	movs	r3, r2
 8018944:	015b      	lsls	r3, r3, #5
 8018946:	1a9b      	subs	r3, r3, r2
 8018948:	009b      	lsls	r3, r3, #2
 801894a:	189b      	adds	r3, r3, r2
 801894c:	00db      	lsls	r3, r3, #3
 801894e:	0018      	movs	r0, r3
 8018950:	1d3b      	adds	r3, r7, #4
 8018952:	881b      	ldrh	r3, [r3, #0]
 8018954:	b2db      	uxtb	r3, r3
 8018956:	68f9      	ldr	r1, [r7, #12]
 8018958:	2201      	movs	r2, #1
 801895a:	9203      	str	r2, [sp, #12]
 801895c:	9302      	str	r3, [sp, #8]
 801895e:	2300      	movs	r3, #0
 8018960:	9301      	str	r3, [sp, #4]
 8018962:	2305      	movs	r3, #5
 8018964:	9300      	str	r3, [sp, #0]
 8018966:	2300      	movs	r3, #0
 8018968:	0002      	movs	r2, r0
 801896a:	2000      	movs	r0, #0
 801896c:	47a0      	blx	r4
 801896e:	0003      	movs	r3, r0
 8018970:	617b      	str	r3, [r7, #20]
 8018972:	e015      	b.n	80189a0 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018974:	4b0e      	ldr	r3, [pc, #56]	; (80189b0 <GetTimeOnAir+0xb8>)
 8018976:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018978:	2313      	movs	r3, #19
 801897a:	18fb      	adds	r3, r7, r3
 801897c:	2200      	movs	r2, #0
 801897e:	569a      	ldrsb	r2, [r3, r2]
 8018980:	1d3b      	adds	r3, r7, #4
 8018982:	881b      	ldrh	r3, [r3, #0]
 8018984:	b2db      	uxtb	r3, r3
 8018986:	68f9      	ldr	r1, [r7, #12]
 8018988:	2001      	movs	r0, #1
 801898a:	9003      	str	r0, [sp, #12]
 801898c:	9302      	str	r3, [sp, #8]
 801898e:	2300      	movs	r3, #0
 8018990:	9301      	str	r3, [sp, #4]
 8018992:	2308      	movs	r3, #8
 8018994:	9300      	str	r3, [sp, #0]
 8018996:	2301      	movs	r3, #1
 8018998:	2001      	movs	r0, #1
 801899a:	47a0      	blx	r4
 801899c:	0003      	movs	r3, r0
 801899e:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 80189a0:	697b      	ldr	r3, [r7, #20]
}
 80189a2:	0018      	movs	r0, r3
 80189a4:	46bd      	mov	sp, r7
 80189a6:	b006      	add	sp, #24
 80189a8:	bdb0      	pop	{r4, r5, r7, pc}
 80189aa:	46c0      	nop			; (mov r8, r8)
 80189ac:	080215bc 	.word	0x080215bc
 80189b0:	08021740 	.word	0x08021740

080189b4 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b084      	sub	sp, #16
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80189bc:	2308      	movs	r3, #8
 80189be:	18fb      	adds	r3, r7, r3
 80189c0:	2200      	movs	r2, #0
 80189c2:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	781b      	ldrb	r3, [r3, #0]
 80189c8:	2b39      	cmp	r3, #57	; 0x39
 80189ca:	d900      	bls.n	80189ce <RegionEU868GetPhyParam+0x1a>
 80189cc:	e0e9      	b.n	8018ba2 <RegionEU868GetPhyParam+0x1ee>
 80189ce:	009a      	lsls	r2, r3, #2
 80189d0:	4b7b      	ldr	r3, [pc, #492]	; (8018bc0 <RegionEU868GetPhyParam+0x20c>)
 80189d2:	18d3      	adds	r3, r2, r3
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80189d8:	2308      	movs	r3, #8
 80189da:	18fb      	adds	r3, r7, r3
 80189dc:	2200      	movs	r2, #0
 80189de:	601a      	str	r2, [r3, #0]
            break;
 80189e0:	e0e0      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80189e2:	2308      	movs	r3, #8
 80189e4:	18fb      	adds	r3, r7, r3
 80189e6:	2200      	movs	r2, #0
 80189e8:	601a      	str	r2, [r3, #0]
            break;
 80189ea:	e0db      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80189ec:	2308      	movs	r3, #8
 80189ee:	18fb      	adds	r3, r7, r3
 80189f0:	2200      	movs	r2, #0
 80189f2:	601a      	str	r2, [r3, #0]
            break;
 80189f4:	e0d6      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	785b      	ldrb	r3, [r3, #1]
 80189fa:	b25b      	sxtb	r3, r3
 80189fc:	2100      	movs	r1, #0
 80189fe:	0018      	movs	r0, r3
 8018a00:	f7ff fe94 	bl	801872c <GetNextLowerTxDr>
 8018a04:	0003      	movs	r3, r0
 8018a06:	001a      	movs	r2, r3
 8018a08:	2308      	movs	r3, #8
 8018a0a:	18fb      	adds	r3, r7, r3
 8018a0c:	601a      	str	r2, [r3, #0]
            break;
 8018a0e:	e0c9      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018a10:	2308      	movs	r3, #8
 8018a12:	18fb      	adds	r3, r7, r3
 8018a14:	2200      	movs	r2, #0
 8018a16:	601a      	str	r2, [r3, #0]
            break;
 8018a18:	e0c4      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018a1a:	2308      	movs	r3, #8
 8018a1c:	18fb      	adds	r3, r7, r3
 8018a1e:	2200      	movs	r2, #0
 8018a20:	601a      	str	r2, [r3, #0]
            break;
 8018a22:	e0bf      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8018a24:	2308      	movs	r3, #8
 8018a26:	18fb      	adds	r3, r7, r3
 8018a28:	2240      	movs	r2, #64	; 0x40
 8018a2a:	601a      	str	r2, [r3, #0]
            break;
 8018a2c:	e0ba      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8018a2e:	2308      	movs	r3, #8
 8018a30:	18fb      	adds	r3, r7, r3
 8018a32:	2220      	movs	r2, #32
 8018a34:	601a      	str	r2, [r3, #0]
            break;
 8018a36:	e0b5      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	785b      	ldrb	r3, [r3, #1]
 8018a3c:	b25b      	sxtb	r3, r3
 8018a3e:	001a      	movs	r2, r3
 8018a40:	4b60      	ldr	r3, [pc, #384]	; (8018bc4 <RegionEU868GetPhyParam+0x210>)
 8018a42:	5c9b      	ldrb	r3, [r3, r2]
 8018a44:	001a      	movs	r2, r3
 8018a46:	2308      	movs	r3, #8
 8018a48:	18fb      	adds	r3, r7, r3
 8018a4a:	601a      	str	r2, [r3, #0]
            break;
 8018a4c:	e0aa      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	785b      	ldrb	r3, [r3, #1]
 8018a52:	b25b      	sxtb	r3, r3
 8018a54:	001a      	movs	r2, r3
 8018a56:	4b5c      	ldr	r3, [pc, #368]	; (8018bc8 <RegionEU868GetPhyParam+0x214>)
 8018a58:	5c9b      	ldrb	r3, [r3, r2]
 8018a5a:	001a      	movs	r2, r3
 8018a5c:	2308      	movs	r3, #8
 8018a5e:	18fb      	adds	r3, r7, r3
 8018a60:	601a      	str	r2, [r3, #0]
            break;
 8018a62:	e09f      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018a64:	2308      	movs	r3, #8
 8018a66:	18fb      	adds	r3, r7, r3
 8018a68:	2201      	movs	r2, #1
 8018a6a:	601a      	str	r2, [r3, #0]
            break;
 8018a6c:	e09a      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018a6e:	2308      	movs	r3, #8
 8018a70:	18fb      	adds	r3, r7, r3
 8018a72:	4a56      	ldr	r2, [pc, #344]	; (8018bcc <RegionEU868GetPhyParam+0x218>)
 8018a74:	601a      	str	r2, [r3, #0]
            break;
 8018a76:	e095      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8018a78:	2308      	movs	r3, #8
 8018a7a:	18fb      	adds	r3, r7, r3
 8018a7c:	22fa      	movs	r2, #250	; 0xfa
 8018a7e:	0092      	lsls	r2, r2, #2
 8018a80:	601a      	str	r2, [r3, #0]
            break;
 8018a82:	e08f      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8018a84:	2308      	movs	r3, #8
 8018a86:	18fb      	adds	r3, r7, r3
 8018a88:	22fa      	movs	r2, #250	; 0xfa
 8018a8a:	00d2      	lsls	r2, r2, #3
 8018a8c:	601a      	str	r2, [r3, #0]
            break;
 8018a8e:	e089      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8018a90:	2308      	movs	r3, #8
 8018a92:	18fb      	adds	r3, r7, r3
 8018a94:	4a4e      	ldr	r2, [pc, #312]	; (8018bd0 <RegionEU868GetPhyParam+0x21c>)
 8018a96:	601a      	str	r2, [r3, #0]
            break;
 8018a98:	e084      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8018a9a:	2308      	movs	r3, #8
 8018a9c:	18fb      	adds	r3, r7, r3
 8018a9e:	4a4d      	ldr	r2, [pc, #308]	; (8018bd4 <RegionEU868GetPhyParam+0x220>)
 8018aa0:	601a      	str	r2, [r3, #0]
            break;
 8018aa2:	e07f      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8018aa4:	2308      	movs	r3, #8
 8018aa6:	18fb      	adds	r3, r7, r3
 8018aa8:	2280      	movs	r2, #128	; 0x80
 8018aaa:	01d2      	lsls	r2, r2, #7
 8018aac:	601a      	str	r2, [r3, #0]
            break;
 8018aae:	e079      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8018ab0:	23fa      	movs	r3, #250	; 0xfa
 8018ab2:	009b      	lsls	r3, r3, #2
 8018ab4:	4a48      	ldr	r2, [pc, #288]	; (8018bd8 <RegionEU868GetPhyParam+0x224>)
 8018ab6:	0019      	movs	r1, r3
 8018ab8:	0010      	movs	r0, r2
 8018aba:	f001 f983 	bl	8019dc4 <randr>
 8018abe:	0003      	movs	r3, r0
 8018ac0:	22fa      	movs	r2, #250	; 0xfa
 8018ac2:	00d2      	lsls	r2, r2, #3
 8018ac4:	4694      	mov	ip, r2
 8018ac6:	4463      	add	r3, ip
 8018ac8:	001a      	movs	r2, r3
 8018aca:	2308      	movs	r3, #8
 8018acc:	18fb      	adds	r3, r7, r3
 8018ace:	601a      	str	r2, [r3, #0]
            break;
 8018ad0:	e068      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8018ad2:	2308      	movs	r3, #8
 8018ad4:	18fb      	adds	r3, r7, r3
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	601a      	str	r2, [r3, #0]
            break;
 8018ada:	e063      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018adc:	2308      	movs	r3, #8
 8018ade:	18fb      	adds	r3, r7, r3
 8018ae0:	4a3e      	ldr	r2, [pc, #248]	; (8018bdc <RegionEU868GetPhyParam+0x228>)
 8018ae2:	601a      	str	r2, [r3, #0]
            break;
 8018ae4:	e05e      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018ae6:	2308      	movs	r3, #8
 8018ae8:	18fb      	adds	r3, r7, r3
 8018aea:	2200      	movs	r2, #0
 8018aec:	601a      	str	r2, [r3, #0]
            break;
 8018aee:	e059      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8018af0:	2308      	movs	r3, #8
 8018af2:	18fb      	adds	r3, r7, r3
 8018af4:	4a3a      	ldr	r2, [pc, #232]	; (8018be0 <RegionEU868GetPhyParam+0x22c>)
 8018af6:	601a      	str	r2, [r3, #0]
            break;
 8018af8:	e054      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8018afa:	2308      	movs	r3, #8
 8018afc:	18fb      	adds	r3, r7, r3
 8018afe:	4a39      	ldr	r2, [pc, #228]	; (8018be4 <RegionEU868GetPhyParam+0x230>)
 8018b00:	601a      	str	r2, [r3, #0]
            break;
 8018b02:	e04f      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018b04:	2308      	movs	r3, #8
 8018b06:	18fb      	adds	r3, r7, r3
 8018b08:	2210      	movs	r2, #16
 8018b0a:	601a      	str	r2, [r3, #0]
            break;
 8018b0c:	e04a      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8018b0e:	2308      	movs	r3, #8
 8018b10:	18fb      	adds	r3, r7, r3
 8018b12:	4a35      	ldr	r2, [pc, #212]	; (8018be8 <RegionEU868GetPhyParam+0x234>)
 8018b14:	601a      	str	r2, [r3, #0]
            break;
 8018b16:	e045      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8018b18:	2308      	movs	r3, #8
 8018b1a:	18fb      	adds	r3, r7, r3
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	601a      	str	r2, [r3, #0]
            break;
 8018b20:	e040      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018b22:	2308      	movs	r3, #8
 8018b24:	18fb      	adds	r3, r7, r3
 8018b26:	2283      	movs	r2, #131	; 0x83
 8018b28:	05d2      	lsls	r2, r2, #23
 8018b2a:	601a      	str	r2, [r3, #0]
            break;
 8018b2c:	e03a      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018b2e:	2308      	movs	r3, #8
 8018b30:	18fb      	adds	r3, r7, r3
 8018b32:	4a2e      	ldr	r2, [pc, #184]	; (8018bec <RegionEU868GetPhyParam+0x238>)
 8018b34:	601a      	str	r2, [r3, #0]
            break;
 8018b36:	e035      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018b38:	2308      	movs	r3, #8
 8018b3a:	18fb      	adds	r3, r7, r3
 8018b3c:	4a27      	ldr	r2, [pc, #156]	; (8018bdc <RegionEU868GetPhyParam+0x228>)
 8018b3e:	601a      	str	r2, [r3, #0]
            break;
 8018b40:	e030      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018b42:	2108      	movs	r1, #8
 8018b44:	187b      	adds	r3, r7, r1
 8018b46:	2211      	movs	r2, #17
 8018b48:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018b4a:	187b      	adds	r3, r7, r1
 8018b4c:	2202      	movs	r2, #2
 8018b4e:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018b50:	187b      	adds	r3, r7, r1
 8018b52:	2200      	movs	r2, #0
 8018b54:	709a      	strb	r2, [r3, #2]
            break;
 8018b56:	e025      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018b58:	2308      	movs	r3, #8
 8018b5a:	18fb      	adds	r3, r7, r3
 8018b5c:	2203      	movs	r2, #3
 8018b5e:	601a      	str	r2, [r3, #0]
            break;
 8018b60:	e020      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018b62:	2308      	movs	r3, #8
 8018b64:	18fb      	adds	r3, r7, r3
 8018b66:	4a1d      	ldr	r2, [pc, #116]	; (8018bdc <RegionEU868GetPhyParam+0x228>)
 8018b68:	601a      	str	r2, [r3, #0]
            break;
 8018b6a:	e01b      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018b6c:	2308      	movs	r3, #8
 8018b6e:	18fb      	adds	r3, r7, r3
 8018b70:	2203      	movs	r2, #3
 8018b72:	601a      	str	r2, [r3, #0]
            break;
 8018b74:	e016      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	785b      	ldrb	r3, [r3, #1]
 8018b7a:	b25b      	sxtb	r3, r3
 8018b7c:	001a      	movs	r2, r3
 8018b7e:	4b1c      	ldr	r3, [pc, #112]	; (8018bf0 <RegionEU868GetPhyParam+0x23c>)
 8018b80:	5c9b      	ldrb	r3, [r3, r2]
 8018b82:	001a      	movs	r2, r3
 8018b84:	2308      	movs	r3, #8
 8018b86:	18fb      	adds	r3, r7, r3
 8018b88:	601a      	str	r2, [r3, #0]
            break;
 8018b8a:	e00b      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	785b      	ldrb	r3, [r3, #1]
 8018b90:	b25b      	sxtb	r3, r3
 8018b92:	0018      	movs	r0, r3
 8018b94:	f7ff fdf2 	bl	801877c <GetBandwidth>
 8018b98:	0002      	movs	r2, r0
 8018b9a:	2308      	movs	r3, #8
 8018b9c:	18fb      	adds	r3, r7, r3
 8018b9e:	601a      	str	r2, [r3, #0]
            break;
 8018ba0:	e000      	b.n	8018ba4 <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 8018ba2:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8018ba4:	210c      	movs	r1, #12
 8018ba6:	187b      	adds	r3, r7, r1
 8018ba8:	2208      	movs	r2, #8
 8018baa:	18ba      	adds	r2, r7, r2
 8018bac:	6812      	ldr	r2, [r2, #0]
 8018bae:	601a      	str	r2, [r3, #0]
 8018bb0:	187b      	adds	r3, r7, r1
 8018bb2:	2200      	movs	r2, #0
 8018bb4:	681a      	ldr	r2, [r3, #0]
 8018bb6:	0013      	movs	r3, r2
}
 8018bb8:	0018      	movs	r0, r3
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	b004      	add	sp, #16
 8018bbe:	bd80      	pop	{r7, pc}
 8018bc0:	080215f4 	.word	0x080215f4
 8018bc4:	080215e4 	.word	0x080215e4
 8018bc8:	080215ec 	.word	0x080215ec
 8018bcc:	00000bb8 	.word	0x00000bb8
 8018bd0:	00001388 	.word	0x00001388
 8018bd4:	00001770 	.word	0x00001770
 8018bd8:	fffffc18 	.word	0xfffffc18
 8018bdc:	33d3e608 	.word	0x33d3e608
 8018be0:	20001094 	.word	0x20001094
 8018be4:	20001096 	.word	0x20001096
 8018be8:	20000f5c 	.word	0x20000f5c
 8018bec:	4009999a 	.word	0x4009999a
 8018bf0:	080215bc 	.word	0x080215bc

08018bf4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018bf4:	b5b0      	push	{r4, r5, r7, lr}
 8018bf6:	b084      	sub	sp, #16
 8018bf8:	af02      	add	r7, sp, #8
 8018bfa:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	781b      	ldrb	r3, [r3, #0]
 8018c00:	0019      	movs	r1, r3
 8018c02:	4a11      	ldr	r2, [pc, #68]	; (8018c48 <RegionEU868SetBandTxDone+0x54>)
 8018c04:	000b      	movs	r3, r1
 8018c06:	005b      	lsls	r3, r3, #1
 8018c08:	185b      	adds	r3, r3, r1
 8018c0a:	009b      	lsls	r3, r3, #2
 8018c0c:	18d3      	adds	r3, r2, r3
 8018c0e:	3309      	adds	r3, #9
 8018c10:	781b      	ldrb	r3, [r3, #0]
 8018c12:	001a      	movs	r2, r3
 8018c14:	0013      	movs	r3, r2
 8018c16:	009b      	lsls	r3, r3, #2
 8018c18:	189b      	adds	r3, r3, r2
 8018c1a:	009b      	lsls	r3, r3, #2
 8018c1c:	33c0      	adds	r3, #192	; 0xc0
 8018c1e:	001a      	movs	r2, r3
 8018c20:	4b09      	ldr	r3, [pc, #36]	; (8018c48 <RegionEU868SetBandTxDone+0x54>)
 8018c22:	18d0      	adds	r0, r2, r3
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	689c      	ldr	r4, [r3, #8]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	785d      	ldrb	r5, [r3, #1]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	466a      	mov	r2, sp
 8018c30:	6919      	ldr	r1, [r3, #16]
 8018c32:	6011      	str	r1, [r2, #0]
 8018c34:	68db      	ldr	r3, [r3, #12]
 8018c36:	002a      	movs	r2, r5
 8018c38:	0021      	movs	r1, r4
 8018c3a:	f7ff f91e 	bl	8017e7a <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8018c3e:	46c0      	nop			; (mov r8, r8)
 8018c40:	46bd      	mov	sp, r7
 8018c42:	b002      	add	sp, #8
 8018c44:	bdb0      	pop	{r4, r5, r7, pc}
 8018c46:	46c0      	nop			; (mov r8, r8)
 8018c48:	20000f5c 	.word	0x20000f5c

08018c4c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018c4c:	b590      	push	{r4, r7, lr}
 8018c4e:	b0ab      	sub	sp, #172	; 0xac
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018c54:	2430      	movs	r4, #48	; 0x30
 8018c56:	193b      	adds	r3, r7, r4
 8018c58:	0018      	movs	r0, r3
 8018c5a:	2378      	movs	r3, #120	; 0x78
 8018c5c:	001a      	movs	r2, r3
 8018c5e:	2100      	movs	r1, #0
 8018c60:	f006 f901 	bl	801ee66 <memset>
 8018c64:	0021      	movs	r1, r4
 8018c66:	187b      	adds	r3, r7, r1
 8018c68:	2264      	movs	r2, #100	; 0x64
 8018c6a:	801a      	strh	r2, [r3, #0]
 8018c6c:	187b      	adds	r3, r7, r1
 8018c6e:	2264      	movs	r2, #100	; 0x64
 8018c70:	829a      	strh	r2, [r3, #20]
 8018c72:	187b      	adds	r3, r7, r1
 8018c74:	22fa      	movs	r2, #250	; 0xfa
 8018c76:	0092      	lsls	r2, r2, #2
 8018c78:	851a      	strh	r2, [r3, #40]	; 0x28
 8018c7a:	187b      	adds	r3, r7, r1
 8018c7c:	220a      	movs	r2, #10
 8018c7e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8018c80:	0008      	movs	r0, r1
 8018c82:	187b      	adds	r3, r7, r1
 8018c84:	2250      	movs	r2, #80	; 0x50
 8018c86:	2164      	movs	r1, #100	; 0x64
 8018c88:	5299      	strh	r1, [r3, r2]
 8018c8a:	183b      	adds	r3, r7, r0
 8018c8c:	2264      	movs	r2, #100	; 0x64
 8018c8e:	21fa      	movs	r1, #250	; 0xfa
 8018c90:	0089      	lsls	r1, r1, #2
 8018c92:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	791b      	ldrb	r3, [r3, #4]
 8018c98:	2b03      	cmp	r3, #3
 8018c9a:	d048      	beq.n	8018d2e <RegionEU868InitDefaults+0xe2>
 8018c9c:	dc54      	bgt.n	8018d48 <RegionEU868InitDefaults+0xfc>
 8018c9e:	2b02      	cmp	r3, #2
 8018ca0:	d036      	beq.n	8018d10 <RegionEU868InitDefaults+0xc4>
 8018ca2:	dc51      	bgt.n	8018d48 <RegionEU868InitDefaults+0xfc>
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d002      	beq.n	8018cae <RegionEU868InitDefaults+0x62>
 8018ca8:	2b01      	cmp	r3, #1
 8018caa:	d021      	beq.n	8018cf0 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 8018cac:	e04c      	b.n	8018d48 <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018cae:	2330      	movs	r3, #48	; 0x30
 8018cb0:	18f9      	adds	r1, r7, r3
 8018cb2:	4b29      	ldr	r3, [pc, #164]	; (8018d58 <RegionEU868InitDefaults+0x10c>)
 8018cb4:	2278      	movs	r2, #120	; 0x78
 8018cb6:	0018      	movs	r0, r3
 8018cb8:	f001 f89a 	bl	8019df0 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018cbc:	4b27      	ldr	r3, [pc, #156]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018cbe:	4a28      	ldr	r2, [pc, #160]	; (8018d60 <RegionEU868InitDefaults+0x114>)
 8018cc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018cc2:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018cc4:	4b25      	ldr	r3, [pc, #148]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018cc6:	4a27      	ldr	r2, [pc, #156]	; (8018d64 <RegionEU868InitDefaults+0x118>)
 8018cc8:	330c      	adds	r3, #12
 8018cca:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018ccc:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018cce:	4b23      	ldr	r3, [pc, #140]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018cd0:	4a25      	ldr	r2, [pc, #148]	; (8018d68 <RegionEU868InitDefaults+0x11c>)
 8018cd2:	3318      	adds	r3, #24
 8018cd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018cd6:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018cd8:	4a20      	ldr	r2, [pc, #128]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018cda:	239d      	movs	r3, #157	; 0x9d
 8018cdc:	005b      	lsls	r3, r3, #1
 8018cde:	2107      	movs	r1, #7
 8018ce0:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018ce2:	4922      	ldr	r1, [pc, #136]	; (8018d6c <RegionEU868InitDefaults+0x120>)
 8018ce4:	4b22      	ldr	r3, [pc, #136]	; (8018d70 <RegionEU868InitDefaults+0x124>)
 8018ce6:	2201      	movs	r2, #1
 8018ce8:	0018      	movs	r0, r3
 8018cea:	f7ff f897 	bl	8017e1c <RegionCommonChanMaskCopy>
            break;
 8018cee:	e02e      	b.n	8018d4e <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 8018cf0:	4b1a      	ldr	r3, [pc, #104]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 8018cf6:	4b19      	ldr	r3, [pc, #100]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018cf8:	2200      	movs	r2, #0
 8018cfa:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 8018cfc:	4b17      	ldr	r3, [pc, #92]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018cfe:	2200      	movs	r2, #0
 8018d00:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018d02:	491a      	ldr	r1, [pc, #104]	; (8018d6c <RegionEU868InitDefaults+0x120>)
 8018d04:	4b1a      	ldr	r3, [pc, #104]	; (8018d70 <RegionEU868InitDefaults+0x124>)
 8018d06:	2201      	movs	r2, #1
 8018d08:	0018      	movs	r0, r3
 8018d0a:	f7ff f887 	bl	8017e1c <RegionCommonChanMaskCopy>
            break;
 8018d0e:	e01e      	b.n	8018d4e <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8018d10:	4a12      	ldr	r2, [pc, #72]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018d12:	239c      	movs	r3, #156	; 0x9c
 8018d14:	005b      	lsls	r3, r3, #1
 8018d16:	5ad2      	ldrh	r2, [r2, r3]
 8018d18:	4910      	ldr	r1, [pc, #64]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018d1a:	239d      	movs	r3, #157	; 0x9d
 8018d1c:	005b      	lsls	r3, r3, #1
 8018d1e:	5acb      	ldrh	r3, [r1, r3]
 8018d20:	4313      	orrs	r3, r2
 8018d22:	b299      	uxth	r1, r3
 8018d24:	4a0d      	ldr	r2, [pc, #52]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018d26:	239c      	movs	r3, #156	; 0x9c
 8018d28:	005b      	lsls	r3, r3, #1
 8018d2a:	52d1      	strh	r1, [r2, r3]
            break;
 8018d2c:	e00f      	b.n	8018d4e <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d00a      	beq.n	8018d4c <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	6819      	ldr	r1, [r3, #0]
 8018d3a:	239e      	movs	r3, #158	; 0x9e
 8018d3c:	005a      	lsls	r2, r3, #1
 8018d3e:	4b07      	ldr	r3, [pc, #28]	; (8018d5c <RegionEU868InitDefaults+0x110>)
 8018d40:	0018      	movs	r0, r3
 8018d42:	f001 f855 	bl	8019df0 <memcpy1>
            break;
 8018d46:	e001      	b.n	8018d4c <RegionEU868InitDefaults+0x100>
            break;
 8018d48:	46c0      	nop			; (mov r8, r8)
 8018d4a:	e000      	b.n	8018d4e <RegionEU868InitDefaults+0x102>
            break;
 8018d4c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018d4e:	46c0      	nop			; (mov r8, r8)
 8018d50:	46bd      	mov	sp, r7
 8018d52:	b02b      	add	sp, #172	; 0xac
 8018d54:	bd90      	pop	{r4, r7, pc}
 8018d56:	46c0      	nop			; (mov r8, r8)
 8018d58:	2000101c 	.word	0x2000101c
 8018d5c:	20000f5c 	.word	0x20000f5c
 8018d60:	080216dc 	.word	0x080216dc
 8018d64:	080216e8 	.word	0x080216e8
 8018d68:	080216f4 	.word	0x080216f4
 8018d6c:	20001096 	.word	0x20001096
 8018d70:	20001094 	.word	0x20001094

08018d74 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b082      	sub	sp, #8
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	229e      	movs	r2, #158	; 0x9e
 8018d80:	0052      	lsls	r2, r2, #1
 8018d82:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8018d84:	4b02      	ldr	r3, [pc, #8]	; (8018d90 <RegionEU868GetNvmCtx+0x1c>)
}
 8018d86:	0018      	movs	r0, r3
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	b002      	add	sp, #8
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	46c0      	nop			; (mov r8, r8)
 8018d90:	20000f5c 	.word	0x20000f5c

08018d94 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b084      	sub	sp, #16
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]
 8018d9c:	000a      	movs	r2, r1
 8018d9e:	1cfb      	adds	r3, r7, #3
 8018da0:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 8018da2:	1cfb      	adds	r3, r7, #3
 8018da4:	781b      	ldrb	r3, [r3, #0]
 8018da6:	2b0f      	cmp	r3, #15
 8018da8:	d847      	bhi.n	8018e3a <RegionEU868Verify+0xa6>
 8018daa:	009a      	lsls	r2, r3, #2
 8018dac:	4b25      	ldr	r3, [pc, #148]	; (8018e44 <RegionEU868Verify+0xb0>)
 8018dae:	18d3      	adds	r3, r2, r3
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018db4:	210f      	movs	r1, #15
 8018db6:	187b      	adds	r3, r7, r1
 8018db8:	2200      	movs	r2, #0
 8018dba:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	187a      	adds	r2, r7, r1
 8018dc2:	0011      	movs	r1, r2
 8018dc4:	0018      	movs	r0, r3
 8018dc6:	f7ff fd1f 	bl	8018808 <VerifyRfFreq>
 8018dca:	0003      	movs	r3, r0
 8018dcc:	e036      	b.n	8018e3c <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	781b      	ldrb	r3, [r3, #0]
 8018dd2:	b25b      	sxtb	r3, r3
 8018dd4:	2207      	movs	r2, #7
 8018dd6:	2100      	movs	r1, #0
 8018dd8:	0018      	movs	r0, r3
 8018dda:	f7fe ff76 	bl	8017cca <RegionCommonValueInRange>
 8018dde:	0003      	movs	r3, r0
 8018de0:	1e5a      	subs	r2, r3, #1
 8018de2:	4193      	sbcs	r3, r2
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	e029      	b.n	8018e3c <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	781b      	ldrb	r3, [r3, #0]
 8018dec:	b25b      	sxtb	r3, r3
 8018dee:	2205      	movs	r2, #5
 8018df0:	2100      	movs	r1, #0
 8018df2:	0018      	movs	r0, r3
 8018df4:	f7fe ff69 	bl	8017cca <RegionCommonValueInRange>
 8018df8:	0003      	movs	r3, r0
 8018dfa:	1e5a      	subs	r2, r3, #1
 8018dfc:	4193      	sbcs	r3, r2
 8018dfe:	b2db      	uxtb	r3, r3
 8018e00:	e01c      	b.n	8018e3c <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	781b      	ldrb	r3, [r3, #0]
 8018e06:	b25b      	sxtb	r3, r3
 8018e08:	2207      	movs	r2, #7
 8018e0a:	2100      	movs	r1, #0
 8018e0c:	0018      	movs	r0, r3
 8018e0e:	f7fe ff5c 	bl	8017cca <RegionCommonValueInRange>
 8018e12:	0003      	movs	r3, r0
 8018e14:	1e5a      	subs	r2, r3, #1
 8018e16:	4193      	sbcs	r3, r2
 8018e18:	b2db      	uxtb	r3, r3
 8018e1a:	e00f      	b.n	8018e3c <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	781b      	ldrb	r3, [r3, #0]
 8018e20:	b25b      	sxtb	r3, r3
 8018e22:	2207      	movs	r2, #7
 8018e24:	2100      	movs	r1, #0
 8018e26:	0018      	movs	r0, r3
 8018e28:	f7fe ff4f 	bl	8017cca <RegionCommonValueInRange>
 8018e2c:	0003      	movs	r3, r0
 8018e2e:	1e5a      	subs	r2, r3, #1
 8018e30:	4193      	sbcs	r3, r2
 8018e32:	b2db      	uxtb	r3, r3
 8018e34:	e002      	b.n	8018e3c <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8018e36:	2301      	movs	r3, #1
 8018e38:	e000      	b.n	8018e3c <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 8018e3a:	2300      	movs	r3, #0
    }
}
 8018e3c:	0018      	movs	r0, r3
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	b004      	add	sp, #16
 8018e42:	bd80      	pop	{r7, pc}
 8018e44:	08021700 	.word	0x08021700

08018e48 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018e48:	b590      	push	{r4, r7, lr}
 8018e4a:	b08b      	sub	sp, #44	; 0x2c
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018e50:	2318      	movs	r3, #24
 8018e52:	18fb      	adds	r3, r7, r3
 8018e54:	2250      	movs	r2, #80	; 0x50
 8018e56:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	791b      	ldrb	r3, [r3, #4]
 8018e5c:	2b10      	cmp	r3, #16
 8018e5e:	d000      	beq.n	8018e62 <RegionEU868ApplyCFList+0x1a>
 8018e60:	e07c      	b.n	8018f5c <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	330f      	adds	r3, #15
 8018e68:	781b      	ldrb	r3, [r3, #0]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d000      	beq.n	8018e70 <RegionEU868ApplyCFList+0x28>
 8018e6e:	e077      	b.n	8018f60 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018e70:	2327      	movs	r3, #39	; 0x27
 8018e72:	18fb      	adds	r3, r7, r3
 8018e74:	2200      	movs	r2, #0
 8018e76:	701a      	strb	r2, [r3, #0]
 8018e78:	2326      	movs	r3, #38	; 0x26
 8018e7a:	18fb      	adds	r3, r7, r3
 8018e7c:	2203      	movs	r2, #3
 8018e7e:	701a      	strb	r2, [r3, #0]
 8018e80:	e066      	b.n	8018f50 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8018e82:	2326      	movs	r3, #38	; 0x26
 8018e84:	18fb      	adds	r3, r7, r3
 8018e86:	781b      	ldrb	r3, [r3, #0]
 8018e88:	2b07      	cmp	r3, #7
 8018e8a:	d82e      	bhi.n	8018eea <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	681a      	ldr	r2, [r3, #0]
 8018e90:	2427      	movs	r4, #39	; 0x27
 8018e92:	193b      	adds	r3, r7, r4
 8018e94:	781b      	ldrb	r3, [r3, #0]
 8018e96:	18d3      	adds	r3, r2, r3
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	001a      	movs	r2, r3
 8018e9c:	2018      	movs	r0, #24
 8018e9e:	183b      	adds	r3, r7, r0
 8018ea0:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8018ea2:	183b      	adds	r3, r7, r0
 8018ea4:	681a      	ldr	r2, [r3, #0]
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	6819      	ldr	r1, [r3, #0]
 8018eaa:	193b      	adds	r3, r7, r4
 8018eac:	781b      	ldrb	r3, [r3, #0]
 8018eae:	3301      	adds	r3, #1
 8018eb0:	18cb      	adds	r3, r1, r3
 8018eb2:	781b      	ldrb	r3, [r3, #0]
 8018eb4:	021b      	lsls	r3, r3, #8
 8018eb6:	431a      	orrs	r2, r3
 8018eb8:	183b      	adds	r3, r7, r0
 8018eba:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8018ebc:	183b      	adds	r3, r7, r0
 8018ebe:	681a      	ldr	r2, [r3, #0]
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	6819      	ldr	r1, [r3, #0]
 8018ec4:	193b      	adds	r3, r7, r4
 8018ec6:	781b      	ldrb	r3, [r3, #0]
 8018ec8:	3302      	adds	r3, #2
 8018eca:	18cb      	adds	r3, r1, r3
 8018ecc:	781b      	ldrb	r3, [r3, #0]
 8018ece:	041b      	lsls	r3, r3, #16
 8018ed0:	431a      	orrs	r2, r3
 8018ed2:	183b      	adds	r3, r7, r0
 8018ed4:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8018ed6:	183b      	adds	r3, r7, r0
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	2264      	movs	r2, #100	; 0x64
 8018edc:	435a      	muls	r2, r3
 8018ede:	183b      	adds	r3, r7, r0
 8018ee0:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018ee2:	183b      	adds	r3, r7, r0
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	605a      	str	r2, [r3, #4]
 8018ee8:	e009      	b.n	8018efe <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8018eea:	2118      	movs	r1, #24
 8018eec:	187b      	adds	r3, r7, r1
 8018eee:	2200      	movs	r2, #0
 8018ef0:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8018ef2:	187b      	adds	r3, r7, r1
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8018ef8:	187b      	adds	r3, r7, r1
 8018efa:	2200      	movs	r2, #0
 8018efc:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8018efe:	2218      	movs	r2, #24
 8018f00:	18bb      	adds	r3, r7, r2
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d00d      	beq.n	8018f24 <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8018f08:	2110      	movs	r1, #16
 8018f0a:	187b      	adds	r3, r7, r1
 8018f0c:	18ba      	adds	r2, r7, r2
 8018f0e:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8018f10:	187b      	adds	r3, r7, r1
 8018f12:	2226      	movs	r2, #38	; 0x26
 8018f14:	18ba      	adds	r2, r7, r2
 8018f16:	7812      	ldrb	r2, [r2, #0]
 8018f18:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018f1a:	187b      	adds	r3, r7, r1
 8018f1c:	0018      	movs	r0, r3
 8018f1e:	f000 fdb5 	bl	8019a8c <RegionEU868ChannelAdd>
 8018f22:	e009      	b.n	8018f38 <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018f24:	210c      	movs	r1, #12
 8018f26:	187b      	adds	r3, r7, r1
 8018f28:	2226      	movs	r2, #38	; 0x26
 8018f2a:	18ba      	adds	r2, r7, r2
 8018f2c:	7812      	ldrb	r2, [r2, #0]
 8018f2e:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8018f30:	187b      	adds	r3, r7, r1
 8018f32:	0018      	movs	r0, r3
 8018f34:	f000 fe6e 	bl	8019c14 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018f38:	2227      	movs	r2, #39	; 0x27
 8018f3a:	18bb      	adds	r3, r7, r2
 8018f3c:	18ba      	adds	r2, r7, r2
 8018f3e:	7812      	ldrb	r2, [r2, #0]
 8018f40:	3203      	adds	r2, #3
 8018f42:	701a      	strb	r2, [r3, #0]
 8018f44:	2126      	movs	r1, #38	; 0x26
 8018f46:	187b      	adds	r3, r7, r1
 8018f48:	781a      	ldrb	r2, [r3, #0]
 8018f4a:	187b      	adds	r3, r7, r1
 8018f4c:	3201      	adds	r2, #1
 8018f4e:	701a      	strb	r2, [r3, #0]
 8018f50:	2326      	movs	r3, #38	; 0x26
 8018f52:	18fb      	adds	r3, r7, r3
 8018f54:	781b      	ldrb	r3, [r3, #0]
 8018f56:	2b0f      	cmp	r3, #15
 8018f58:	d993      	bls.n	8018e82 <RegionEU868ApplyCFList+0x3a>
 8018f5a:	e002      	b.n	8018f62 <RegionEU868ApplyCFList+0x11a>
        return;
 8018f5c:	46c0      	nop			; (mov r8, r8)
 8018f5e:	e000      	b.n	8018f62 <RegionEU868ApplyCFList+0x11a>
        return;
 8018f60:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018f62:	46bd      	mov	sp, r7
 8018f64:	b00b      	add	sp, #44	; 0x2c
 8018f66:	bd90      	pop	{r4, r7, pc}

08018f68 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b082      	sub	sp, #8
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	791b      	ldrb	r3, [r3, #4]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d002      	beq.n	8018f7e <RegionEU868ChanMaskSet+0x16>
 8018f78:	2b01      	cmp	r3, #1
 8018f7a:	d008      	beq.n	8018f8e <RegionEU868ChanMaskSet+0x26>
 8018f7c:	e00f      	b.n	8018f9e <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	6819      	ldr	r1, [r3, #0]
 8018f82:	4b0a      	ldr	r3, [pc, #40]	; (8018fac <RegionEU868ChanMaskSet+0x44>)
 8018f84:	2201      	movs	r2, #1
 8018f86:	0018      	movs	r0, r3
 8018f88:	f7fe ff48 	bl	8017e1c <RegionCommonChanMaskCopy>
            break;
 8018f8c:	e009      	b.n	8018fa2 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	6819      	ldr	r1, [r3, #0]
 8018f92:	4b07      	ldr	r3, [pc, #28]	; (8018fb0 <RegionEU868ChanMaskSet+0x48>)
 8018f94:	2201      	movs	r2, #1
 8018f96:	0018      	movs	r0, r3
 8018f98:	f7fe ff40 	bl	8017e1c <RegionCommonChanMaskCopy>
            break;
 8018f9c:	e001      	b.n	8018fa2 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	e000      	b.n	8018fa4 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 8018fa2:	2301      	movs	r3, #1
}
 8018fa4:	0018      	movs	r0, r3
 8018fa6:	46bd      	mov	sp, r7
 8018fa8:	b002      	add	sp, #8
 8018faa:	bd80      	pop	{r7, pc}
 8018fac:	20001094 	.word	0x20001094
 8018fb0:	20001096 	.word	0x20001096

08018fb4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018fb4:	b5b0      	push	{r4, r5, r7, lr}
 8018fb6:	b088      	sub	sp, #32
 8018fb8:	af02      	add	r7, sp, #8
 8018fba:	60ba      	str	r2, [r7, #8]
 8018fbc:	607b      	str	r3, [r7, #4]
 8018fbe:	240f      	movs	r4, #15
 8018fc0:	193b      	adds	r3, r7, r4
 8018fc2:	1c02      	adds	r2, r0, #0
 8018fc4:	701a      	strb	r2, [r3, #0]
 8018fc6:	230e      	movs	r3, #14
 8018fc8:	18fb      	adds	r3, r7, r3
 8018fca:	1c0a      	adds	r2, r1, #0
 8018fcc:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8018fd2:	193b      	adds	r3, r7, r4
 8018fd4:	781b      	ldrb	r3, [r3, #0]
 8018fd6:	b25a      	sxtb	r2, r3
 8018fd8:	2a07      	cmp	r2, #7
 8018fda:	dd00      	ble.n	8018fde <RegionEU868ComputeRxWindowParameters+0x2a>
 8018fdc:	2307      	movs	r3, #7
 8018fde:	b25a      	sxtb	r2, r3
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	785b      	ldrb	r3, [r3, #1]
 8018fe8:	b25b      	sxtb	r3, r3
 8018fea:	0018      	movs	r0, r3
 8018fec:	f7ff fbc6 	bl	801877c <GetBandwidth>
 8018ff0:	0003      	movs	r3, r0
 8018ff2:	b2da      	uxtb	r2, r3
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	785b      	ldrb	r3, [r3, #1]
 8018ffc:	b25b      	sxtb	r3, r3
 8018ffe:	2b07      	cmp	r3, #7
 8019000:	d10b      	bne.n	801901a <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	785b      	ldrb	r3, [r3, #1]
 8019006:	b25b      	sxtb	r3, r3
 8019008:	001a      	movs	r2, r3
 801900a:	4b18      	ldr	r3, [pc, #96]	; (801906c <RegionEU868ComputeRxWindowParameters+0xb8>)
 801900c:	5c9b      	ldrb	r3, [r3, r2]
 801900e:	0018      	movs	r0, r3
 8019010:	f7ff f944 	bl	801829c <RegionCommonComputeSymbolTimeFsk>
 8019014:	0003      	movs	r3, r0
 8019016:	617b      	str	r3, [r7, #20]
 8019018:	e011      	b.n	801903e <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	785b      	ldrb	r3, [r3, #1]
 801901e:	b25b      	sxtb	r3, r3
 8019020:	001a      	movs	r2, r3
 8019022:	4b12      	ldr	r3, [pc, #72]	; (801906c <RegionEU868ComputeRxWindowParameters+0xb8>)
 8019024:	5c98      	ldrb	r0, [r3, r2]
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	785b      	ldrb	r3, [r3, #1]
 801902a:	b25b      	sxtb	r3, r3
 801902c:	001a      	movs	r2, r3
 801902e:	4b10      	ldr	r3, [pc, #64]	; (8019070 <RegionEU868ComputeRxWindowParameters+0xbc>)
 8019030:	0092      	lsls	r2, r2, #2
 8019032:	58d3      	ldr	r3, [r2, r3]
 8019034:	0019      	movs	r1, r3
 8019036:	f7ff f919 	bl	801826c <RegionCommonComputeSymbolTimeLoRa>
 801903a:	0003      	movs	r3, r0
 801903c:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801903e:	4b0d      	ldr	r3, [pc, #52]	; (8019074 <RegionEU868ComputeRxWindowParameters+0xc0>)
 8019040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019042:	4798      	blx	r3
 8019044:	0005      	movs	r5, r0
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	3308      	adds	r3, #8
 801904a:	687a      	ldr	r2, [r7, #4]
 801904c:	320c      	adds	r2, #12
 801904e:	68bc      	ldr	r4, [r7, #8]
 8019050:	210e      	movs	r1, #14
 8019052:	1879      	adds	r1, r7, r1
 8019054:	7809      	ldrb	r1, [r1, #0]
 8019056:	6978      	ldr	r0, [r7, #20]
 8019058:	9201      	str	r2, [sp, #4]
 801905a:	9300      	str	r3, [sp, #0]
 801905c:	002b      	movs	r3, r5
 801905e:	0022      	movs	r2, r4
 8019060:	f7ff f92a 	bl	80182b8 <RegionCommonComputeRxWindowParameters>
}
 8019064:	46c0      	nop			; (mov r8, r8)
 8019066:	46bd      	mov	sp, r7
 8019068:	b006      	add	sp, #24
 801906a:	bdb0      	pop	{r4, r5, r7, pc}
 801906c:	080215bc 	.word	0x080215bc
 8019070:	080215c4 	.word	0x080215c4
 8019074:	08021740 	.word	0x08021740

08019078 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801907a:	b091      	sub	sp, #68	; 0x44
 801907c:	af0a      	add	r7, sp, #40	; 0x28
 801907e:	6078      	str	r0, [r7, #4]
 8019080:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8019082:	230f      	movs	r3, #15
 8019084:	18fb      	adds	r3, r7, r3
 8019086:	687a      	ldr	r2, [r7, #4]
 8019088:	7852      	ldrb	r2, [r2, #1]
 801908a:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 801908c:	2316      	movs	r3, #22
 801908e:	18fb      	adds	r3, r7, r3
 8019090:	2200      	movs	r2, #0
 8019092:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8019094:	230e      	movs	r3, #14
 8019096:	18fb      	adds	r3, r7, r3
 8019098:	2200      	movs	r2, #0
 801909a:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	685b      	ldr	r3, [r3, #4]
 80190a0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80190a2:	4b68      	ldr	r3, [pc, #416]	; (8019244 <RegionEU868RxConfig+0x1cc>)
 80190a4:	685b      	ldr	r3, [r3, #4]
 80190a6:	4798      	blx	r3
 80190a8:	1e03      	subs	r3, r0, #0
 80190aa:	d001      	beq.n	80190b0 <RegionEU868RxConfig+0x38>
    {
        return false;
 80190ac:	2300      	movs	r3, #0
 80190ae:	e0c4      	b.n	801923a <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	7cdb      	ldrb	r3, [r3, #19]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d122      	bne.n	80190fe <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	781b      	ldrb	r3, [r3, #0]
 80190bc:	0019      	movs	r1, r3
 80190be:	4a62      	ldr	r2, [pc, #392]	; (8019248 <RegionEU868RxConfig+0x1d0>)
 80190c0:	000b      	movs	r3, r1
 80190c2:	005b      	lsls	r3, r3, #1
 80190c4:	185b      	adds	r3, r3, r1
 80190c6:	009b      	lsls	r3, r3, #2
 80190c8:	589b      	ldr	r3, [r3, r2]
 80190ca:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	781b      	ldrb	r3, [r3, #0]
 80190d0:	0019      	movs	r1, r3
 80190d2:	4a5d      	ldr	r2, [pc, #372]	; (8019248 <RegionEU868RxConfig+0x1d0>)
 80190d4:	000b      	movs	r3, r1
 80190d6:	005b      	lsls	r3, r3, #1
 80190d8:	185b      	adds	r3, r3, r1
 80190da:	009b      	lsls	r3, r3, #2
 80190dc:	18d3      	adds	r3, r2, r3
 80190de:	3304      	adds	r3, #4
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d00b      	beq.n	80190fe <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	781b      	ldrb	r3, [r3, #0]
 80190ea:	0019      	movs	r1, r3
 80190ec:	4a56      	ldr	r2, [pc, #344]	; (8019248 <RegionEU868RxConfig+0x1d0>)
 80190ee:	000b      	movs	r3, r1
 80190f0:	005b      	lsls	r3, r3, #1
 80190f2:	185b      	adds	r3, r3, r1
 80190f4:	009b      	lsls	r3, r3, #2
 80190f6:	18d3      	adds	r3, r2, r3
 80190f8:	3304      	adds	r3, #4
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80190fe:	240f      	movs	r4, #15
 8019100:	193b      	adds	r3, r7, r4
 8019102:	781b      	ldrb	r3, [r3, #0]
 8019104:	b25b      	sxtb	r3, r3
 8019106:	4a51      	ldr	r2, [pc, #324]	; (801924c <RegionEU868RxConfig+0x1d4>)
 8019108:	5cd2      	ldrb	r2, [r2, r3]
 801910a:	250e      	movs	r5, #14
 801910c:	197b      	adds	r3, r7, r5
 801910e:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8019110:	4b4c      	ldr	r3, [pc, #304]	; (8019244 <RegionEU868RxConfig+0x1cc>)
 8019112:	68db      	ldr	r3, [r3, #12]
 8019114:	693a      	ldr	r2, [r7, #16]
 8019116:	0010      	movs	r0, r2
 8019118:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801911a:	193b      	adds	r3, r7, r4
 801911c:	781b      	ldrb	r3, [r3, #0]
 801911e:	b25b      	sxtb	r3, r3
 8019120:	2b07      	cmp	r3, #7
 8019122:	d12e      	bne.n	8019182 <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 8019124:	2117      	movs	r1, #23
 8019126:	187b      	adds	r3, r7, r1
 8019128:	2200      	movs	r2, #0
 801912a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801912c:	4b45      	ldr	r3, [pc, #276]	; (8019244 <RegionEU868RxConfig+0x1cc>)
 801912e:	699c      	ldr	r4, [r3, #24]
 8019130:	197b      	adds	r3, r7, r5
 8019132:	2200      	movs	r2, #0
 8019134:	569a      	ldrsb	r2, [r3, r2]
 8019136:	0013      	movs	r3, r2
 8019138:	015b      	lsls	r3, r3, #5
 801913a:	1a9b      	subs	r3, r3, r2
 801913c:	009b      	lsls	r3, r3, #2
 801913e:	189b      	adds	r3, r3, r2
 8019140:	00db      	lsls	r3, r3, #3
 8019142:	001e      	movs	r6, r3
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	689b      	ldr	r3, [r3, #8]
 8019148:	b29b      	uxth	r3, r3
 801914a:	687a      	ldr	r2, [r7, #4]
 801914c:	7c92      	ldrb	r2, [r2, #18]
 801914e:	4d40      	ldr	r5, [pc, #256]	; (8019250 <RegionEU868RxConfig+0x1d8>)
 8019150:	1879      	adds	r1, r7, r1
 8019152:	7808      	ldrb	r0, [r1, #0]
 8019154:	9209      	str	r2, [sp, #36]	; 0x24
 8019156:	2200      	movs	r2, #0
 8019158:	9208      	str	r2, [sp, #32]
 801915a:	2200      	movs	r2, #0
 801915c:	9207      	str	r2, [sp, #28]
 801915e:	2200      	movs	r2, #0
 8019160:	9206      	str	r2, [sp, #24]
 8019162:	2201      	movs	r2, #1
 8019164:	9205      	str	r2, [sp, #20]
 8019166:	2200      	movs	r2, #0
 8019168:	9204      	str	r2, [sp, #16]
 801916a:	2200      	movs	r2, #0
 801916c:	9203      	str	r2, [sp, #12]
 801916e:	9302      	str	r3, [sp, #8]
 8019170:	2305      	movs	r3, #5
 8019172:	9301      	str	r3, [sp, #4]
 8019174:	4b37      	ldr	r3, [pc, #220]	; (8019254 <RegionEU868RxConfig+0x1dc>)
 8019176:	9300      	str	r3, [sp, #0]
 8019178:	2300      	movs	r3, #0
 801917a:	0032      	movs	r2, r6
 801917c:	0029      	movs	r1, r5
 801917e:	47a0      	blx	r4
 8019180:	e029      	b.n	80191d6 <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 8019182:	2117      	movs	r1, #23
 8019184:	187b      	adds	r3, r7, r1
 8019186:	2201      	movs	r2, #1
 8019188:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801918a:	4b2e      	ldr	r3, [pc, #184]	; (8019244 <RegionEU868RxConfig+0x1cc>)
 801918c:	699c      	ldr	r4, [r3, #24]
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	789b      	ldrb	r3, [r3, #2]
 8019192:	001e      	movs	r6, r3
 8019194:	230e      	movs	r3, #14
 8019196:	18fb      	adds	r3, r7, r3
 8019198:	2500      	movs	r5, #0
 801919a:	575d      	ldrsb	r5, [r3, r5]
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	689b      	ldr	r3, [r3, #8]
 80191a0:	b29b      	uxth	r3, r3
 80191a2:	687a      	ldr	r2, [r7, #4]
 80191a4:	7c92      	ldrb	r2, [r2, #18]
 80191a6:	1879      	adds	r1, r7, r1
 80191a8:	7808      	ldrb	r0, [r1, #0]
 80191aa:	9209      	str	r2, [sp, #36]	; 0x24
 80191ac:	2201      	movs	r2, #1
 80191ae:	9208      	str	r2, [sp, #32]
 80191b0:	2200      	movs	r2, #0
 80191b2:	9207      	str	r2, [sp, #28]
 80191b4:	2200      	movs	r2, #0
 80191b6:	9206      	str	r2, [sp, #24]
 80191b8:	2200      	movs	r2, #0
 80191ba:	9205      	str	r2, [sp, #20]
 80191bc:	2200      	movs	r2, #0
 80191be:	9204      	str	r2, [sp, #16]
 80191c0:	2200      	movs	r2, #0
 80191c2:	9203      	str	r2, [sp, #12]
 80191c4:	9302      	str	r3, [sp, #8]
 80191c6:	2308      	movs	r3, #8
 80191c8:	9301      	str	r3, [sp, #4]
 80191ca:	2300      	movs	r3, #0
 80191cc:	9300      	str	r3, [sp, #0]
 80191ce:	2301      	movs	r3, #1
 80191d0:	002a      	movs	r2, r5
 80191d2:	0031      	movs	r1, r6
 80191d4:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	7c5b      	ldrb	r3, [r3, #17]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d009      	beq.n	80191f2 <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80191de:	230f      	movs	r3, #15
 80191e0:	18fb      	adds	r3, r7, r3
 80191e2:	2200      	movs	r2, #0
 80191e4:	569a      	ldrsb	r2, [r3, r2]
 80191e6:	2316      	movs	r3, #22
 80191e8:	18fb      	adds	r3, r7, r3
 80191ea:	491b      	ldr	r1, [pc, #108]	; (8019258 <RegionEU868RxConfig+0x1e0>)
 80191ec:	5c8a      	ldrb	r2, [r1, r2]
 80191ee:	701a      	strb	r2, [r3, #0]
 80191f0:	e008      	b.n	8019204 <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80191f2:	230f      	movs	r3, #15
 80191f4:	18fb      	adds	r3, r7, r3
 80191f6:	2200      	movs	r2, #0
 80191f8:	569a      	ldrsb	r2, [r3, r2]
 80191fa:	2316      	movs	r3, #22
 80191fc:	18fb      	adds	r3, r7, r3
 80191fe:	4917      	ldr	r1, [pc, #92]	; (801925c <RegionEU868RxConfig+0x1e4>)
 8019200:	5c8a      	ldrb	r2, [r1, r2]
 8019202:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8019204:	4b0f      	ldr	r3, [pc, #60]	; (8019244 <RegionEU868RxConfig+0x1cc>)
 8019206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019208:	2216      	movs	r2, #22
 801920a:	18ba      	adds	r2, r7, r2
 801920c:	7812      	ldrb	r2, [r2, #0]
 801920e:	320d      	adds	r2, #13
 8019210:	b2d1      	uxtb	r1, r2
 8019212:	2217      	movs	r2, #23
 8019214:	18ba      	adds	r2, r7, r2
 8019216:	7812      	ldrb	r2, [r2, #0]
 8019218:	0010      	movs	r0, r2
 801921a:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	7cd8      	ldrb	r0, [r3, #19]
 8019220:	240f      	movs	r4, #15
 8019222:	193b      	adds	r3, r7, r4
 8019224:	2200      	movs	r2, #0
 8019226:	569a      	ldrsb	r2, [r3, r2]
 8019228:	693b      	ldr	r3, [r7, #16]
 801922a:	0019      	movs	r1, r3
 801922c:	f7ff fa22 	bl	8018674 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8019230:	683b      	ldr	r3, [r7, #0]
 8019232:	193a      	adds	r2, r7, r4
 8019234:	7812      	ldrb	r2, [r2, #0]
 8019236:	701a      	strb	r2, [r3, #0]
    return true;
 8019238:	2301      	movs	r3, #1
}
 801923a:	0018      	movs	r0, r3
 801923c:	46bd      	mov	sp, r7
 801923e:	b007      	add	sp, #28
 8019240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019242:	46c0      	nop			; (mov r8, r8)
 8019244:	08021740 	.word	0x08021740
 8019248:	20000f5c 	.word	0x20000f5c
 801924c:	080215bc 	.word	0x080215bc
 8019250:	0000c350 	.word	0x0000c350
 8019254:	00014585 	.word	0x00014585
 8019258:	080215ec 	.word	0x080215ec
 801925c:	080215e4 	.word	0x080215e4

08019260 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019262:	b093      	sub	sp, #76	; 0x4c
 8019264:	af0a      	add	r7, sp, #40	; 0x28
 8019266:	60f8      	str	r0, [r7, #12]
 8019268:	60b9      	str	r1, [r7, #8]
 801926a:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	785b      	ldrb	r3, [r3, #1]
 8019270:	b25b      	sxtb	r3, r3
 8019272:	001a      	movs	r2, r3
 8019274:	4b6b      	ldr	r3, [pc, #428]	; (8019424 <RegionEU868TxConfig+0x1c4>)
 8019276:	5c9a      	ldrb	r2, [r3, r2]
 8019278:	251e      	movs	r5, #30
 801927a:	197b      	adds	r3, r7, r5
 801927c:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	2002      	movs	r0, #2
 8019282:	5618      	ldrsb	r0, [r3, r0]
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	781b      	ldrb	r3, [r3, #0]
 8019288:	0019      	movs	r1, r3
 801928a:	4a67      	ldr	r2, [pc, #412]	; (8019428 <RegionEU868TxConfig+0x1c8>)
 801928c:	000b      	movs	r3, r1
 801928e:	005b      	lsls	r3, r3, #1
 8019290:	185b      	adds	r3, r3, r1
 8019292:	009b      	lsls	r3, r3, #2
 8019294:	18d3      	adds	r3, r2, r3
 8019296:	3309      	adds	r3, #9
 8019298:	781b      	ldrb	r3, [r3, #0]
 801929a:	001c      	movs	r4, r3
 801929c:	4a62      	ldr	r2, [pc, #392]	; (8019428 <RegionEU868TxConfig+0x1c8>)
 801929e:	21c2      	movs	r1, #194	; 0xc2
 80192a0:	0023      	movs	r3, r4
 80192a2:	009b      	lsls	r3, r3, #2
 80192a4:	191b      	adds	r3, r3, r4
 80192a6:	009b      	lsls	r3, r3, #2
 80192a8:	18d3      	adds	r3, r2, r3
 80192aa:	185b      	adds	r3, r3, r1
 80192ac:	2100      	movs	r1, #0
 80192ae:	5659      	ldrsb	r1, [r3, r1]
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	2201      	movs	r2, #1
 80192b4:	569a      	ldrsb	r2, [r3, r2]
 80192b6:	261d      	movs	r6, #29
 80192b8:	19bc      	adds	r4, r7, r6
 80192ba:	4b5c      	ldr	r3, [pc, #368]	; (801942c <RegionEU868TxConfig+0x1cc>)
 80192bc:	f7ff fa7c 	bl	80187b8 <LimitTxPower>
 80192c0:	0003      	movs	r3, r0
 80192c2:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	785b      	ldrb	r3, [r3, #1]
 80192c8:	b25b      	sxtb	r3, r3
 80192ca:	0018      	movs	r0, r3
 80192cc:	f7ff fa56 	bl	801877c <GetBandwidth>
 80192d0:	0003      	movs	r3, r0
 80192d2:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80192d4:	2017      	movs	r0, #23
 80192d6:	183b      	adds	r3, r7, r0
 80192d8:	2200      	movs	r2, #0
 80192da:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	6859      	ldr	r1, [r3, #4]
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	689a      	ldr	r2, [r3, #8]
 80192e4:	183c      	adds	r4, r7, r0
 80192e6:	19bb      	adds	r3, r7, r6
 80192e8:	781b      	ldrb	r3, [r3, #0]
 80192ea:	b25b      	sxtb	r3, r3
 80192ec:	0018      	movs	r0, r3
 80192ee:	f7ff f831 	bl	8018354 <RegionCommonComputeTxPower>
 80192f2:	0003      	movs	r3, r0
 80192f4:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80192f6:	4b4e      	ldr	r3, [pc, #312]	; (8019430 <RegionEU868TxConfig+0x1d0>)
 80192f8:	68da      	ldr	r2, [r3, #12]
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	781b      	ldrb	r3, [r3, #0]
 80192fe:	0018      	movs	r0, r3
 8019300:	4949      	ldr	r1, [pc, #292]	; (8019428 <RegionEU868TxConfig+0x1c8>)
 8019302:	0003      	movs	r3, r0
 8019304:	005b      	lsls	r3, r3, #1
 8019306:	181b      	adds	r3, r3, r0
 8019308:	009b      	lsls	r3, r3, #2
 801930a:	585b      	ldr	r3, [r3, r1]
 801930c:	0018      	movs	r0, r3
 801930e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	785b      	ldrb	r3, [r3, #1]
 8019314:	b25b      	sxtb	r3, r3
 8019316:	2b07      	cmp	r3, #7
 8019318:	d12e      	bne.n	8019378 <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801931a:	231f      	movs	r3, #31
 801931c:	18fb      	adds	r3, r7, r3
 801931e:	2200      	movs	r2, #0
 8019320:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019322:	4b43      	ldr	r3, [pc, #268]	; (8019430 <RegionEU868TxConfig+0x1d0>)
 8019324:	69dc      	ldr	r4, [r3, #28]
 8019326:	197b      	adds	r3, r7, r5
 8019328:	2200      	movs	r2, #0
 801932a:	569a      	ldrsb	r2, [r3, r2]
 801932c:	0013      	movs	r3, r2
 801932e:	015b      	lsls	r3, r3, #5
 8019330:	1a9b      	subs	r3, r3, r2
 8019332:	009b      	lsls	r3, r3, #2
 8019334:	189b      	adds	r3, r3, r2
 8019336:	00db      	lsls	r3, r3, #3
 8019338:	001e      	movs	r6, r3
 801933a:	69ba      	ldr	r2, [r7, #24]
 801933c:	4d3d      	ldr	r5, [pc, #244]	; (8019434 <RegionEU868TxConfig+0x1d4>)
 801933e:	2017      	movs	r0, #23
 8019340:	183b      	adds	r3, r7, r0
 8019342:	2100      	movs	r1, #0
 8019344:	5659      	ldrsb	r1, [r3, r1]
 8019346:	231f      	movs	r3, #31
 8019348:	18fb      	adds	r3, r7, r3
 801934a:	7818      	ldrb	r0, [r3, #0]
 801934c:	23fa      	movs	r3, #250	; 0xfa
 801934e:	011b      	lsls	r3, r3, #4
 8019350:	9308      	str	r3, [sp, #32]
 8019352:	2300      	movs	r3, #0
 8019354:	9307      	str	r3, [sp, #28]
 8019356:	2300      	movs	r3, #0
 8019358:	9306      	str	r3, [sp, #24]
 801935a:	2300      	movs	r3, #0
 801935c:	9305      	str	r3, [sp, #20]
 801935e:	2301      	movs	r3, #1
 8019360:	9304      	str	r3, [sp, #16]
 8019362:	2300      	movs	r3, #0
 8019364:	9303      	str	r3, [sp, #12]
 8019366:	2305      	movs	r3, #5
 8019368:	9302      	str	r3, [sp, #8]
 801936a:	2300      	movs	r3, #0
 801936c:	9301      	str	r3, [sp, #4]
 801936e:	9600      	str	r6, [sp, #0]
 8019370:	0013      	movs	r3, r2
 8019372:	002a      	movs	r2, r5
 8019374:	47a0      	blx	r4
 8019376:	e025      	b.n	80193c4 <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 8019378:	201f      	movs	r0, #31
 801937a:	183b      	adds	r3, r7, r0
 801937c:	2201      	movs	r2, #1
 801937e:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8019380:	4b2b      	ldr	r3, [pc, #172]	; (8019430 <RegionEU868TxConfig+0x1d0>)
 8019382:	69dc      	ldr	r4, [r3, #28]
 8019384:	231e      	movs	r3, #30
 8019386:	18fb      	adds	r3, r7, r3
 8019388:	781b      	ldrb	r3, [r3, #0]
 801938a:	b25b      	sxtb	r3, r3
 801938c:	69bd      	ldr	r5, [r7, #24]
 801938e:	2217      	movs	r2, #23
 8019390:	18ba      	adds	r2, r7, r2
 8019392:	2100      	movs	r1, #0
 8019394:	5651      	ldrsb	r1, [r2, r1]
 8019396:	183a      	adds	r2, r7, r0
 8019398:	7810      	ldrb	r0, [r2, #0]
 801939a:	22fa      	movs	r2, #250	; 0xfa
 801939c:	0112      	lsls	r2, r2, #4
 801939e:	9208      	str	r2, [sp, #32]
 80193a0:	2200      	movs	r2, #0
 80193a2:	9207      	str	r2, [sp, #28]
 80193a4:	2200      	movs	r2, #0
 80193a6:	9206      	str	r2, [sp, #24]
 80193a8:	2200      	movs	r2, #0
 80193aa:	9205      	str	r2, [sp, #20]
 80193ac:	2201      	movs	r2, #1
 80193ae:	9204      	str	r2, [sp, #16]
 80193b0:	2200      	movs	r2, #0
 80193b2:	9203      	str	r2, [sp, #12]
 80193b4:	2208      	movs	r2, #8
 80193b6:	9202      	str	r2, [sp, #8]
 80193b8:	2201      	movs	r2, #1
 80193ba:	9201      	str	r2, [sp, #4]
 80193bc:	9300      	str	r3, [sp, #0]
 80193be:	002b      	movs	r3, r5
 80193c0:	2200      	movs	r2, #0
 80193c2:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	781b      	ldrb	r3, [r3, #0]
 80193c8:	0019      	movs	r1, r3
 80193ca:	4a17      	ldr	r2, [pc, #92]	; (8019428 <RegionEU868TxConfig+0x1c8>)
 80193cc:	000b      	movs	r3, r1
 80193ce:	005b      	lsls	r3, r3, #1
 80193d0:	185b      	adds	r3, r3, r1
 80193d2:	009b      	lsls	r3, r3, #2
 80193d4:	589a      	ldr	r2, [r3, r2]
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	785b      	ldrb	r3, [r3, #1]
 80193da:	b25b      	sxtb	r3, r3
 80193dc:	0019      	movs	r1, r3
 80193de:	0010      	movs	r0, r2
 80193e0:	f7ff f98a 	bl	80186f8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	2201      	movs	r2, #1
 80193e8:	569a      	ldrsb	r2, [r3, r2]
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	899b      	ldrh	r3, [r3, #12]
 80193ee:	0019      	movs	r1, r3
 80193f0:	0010      	movs	r0, r2
 80193f2:	f7ff fa81 	bl	80188f8 <GetTimeOnAir>
 80193f6:	0002      	movs	r2, r0
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80193fc:	4b0c      	ldr	r3, [pc, #48]	; (8019430 <RegionEU868TxConfig+0x1d0>)
 80193fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019400:	68fa      	ldr	r2, [r7, #12]
 8019402:	8992      	ldrh	r2, [r2, #12]
 8019404:	b2d1      	uxtb	r1, r2
 8019406:	221f      	movs	r2, #31
 8019408:	18ba      	adds	r2, r7, r2
 801940a:	7812      	ldrb	r2, [r2, #0]
 801940c:	0010      	movs	r0, r2
 801940e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019410:	68bb      	ldr	r3, [r7, #8]
 8019412:	221d      	movs	r2, #29
 8019414:	18ba      	adds	r2, r7, r2
 8019416:	7812      	ldrb	r2, [r2, #0]
 8019418:	701a      	strb	r2, [r3, #0]
    return true;
 801941a:	2301      	movs	r3, #1
}
 801941c:	0018      	movs	r0, r3
 801941e:	46bd      	mov	sp, r7
 8019420:	b009      	add	sp, #36	; 0x24
 8019422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019424:	080215bc 	.word	0x080215bc
 8019428:	20000f5c 	.word	0x20000f5c
 801942c:	20001094 	.word	0x20001094
 8019430:	08021740 	.word	0x08021740
 8019434:	000061a8 	.word	0x000061a8

08019438 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801943a:	b093      	sub	sp, #76	; 0x4c
 801943c:	af00      	add	r7, sp, #0
 801943e:	60f8      	str	r0, [r7, #12]
 8019440:	60b9      	str	r1, [r7, #8]
 8019442:	607a      	str	r2, [r7, #4]
 8019444:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019446:	2347      	movs	r3, #71	; 0x47
 8019448:	18fb      	adds	r3, r7, r3
 801944a:	2207      	movs	r2, #7
 801944c:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801944e:	233c      	movs	r3, #60	; 0x3c
 8019450:	18fb      	adds	r3, r7, r3
 8019452:	0018      	movs	r0, r3
 8019454:	2306      	movs	r3, #6
 8019456:	001a      	movs	r2, r3
 8019458:	2100      	movs	r1, #0
 801945a:	f005 fd04 	bl	801ee66 <memset>
    uint8_t nextIndex = 0;
 801945e:	2344      	movs	r3, #68	; 0x44
 8019460:	18fb      	adds	r3, r7, r3
 8019462:	2200      	movs	r2, #0
 8019464:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8019466:	2346      	movs	r3, #70	; 0x46
 8019468:	18fb      	adds	r3, r7, r3
 801946a:	2200      	movs	r2, #0
 801946c:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 801946e:	233a      	movs	r3, #58	; 0x3a
 8019470:	18fb      	adds	r3, r7, r3
 8019472:	2200      	movs	r2, #0
 8019474:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019476:	e098      	b.n	80195aa <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	685a      	ldr	r2, [r3, #4]
 801947c:	2546      	movs	r5, #70	; 0x46
 801947e:	197b      	adds	r3, r7, r5
 8019480:	781b      	ldrb	r3, [r3, #0]
 8019482:	18d3      	adds	r3, r2, r3
 8019484:	2644      	movs	r6, #68	; 0x44
 8019486:	19bc      	adds	r4, r7, r6
 8019488:	203c      	movs	r0, #60	; 0x3c
 801948a:	183a      	adds	r2, r7, r0
 801948c:	0011      	movs	r1, r2
 801948e:	0018      	movs	r0, r3
 8019490:	f7fe fdf8 	bl	8018084 <RegionCommonParseLinkAdrReq>
 8019494:	0003      	movs	r3, r0
 8019496:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8019498:	0032      	movs	r2, r6
 801949a:	18bb      	adds	r3, r7, r2
 801949c:	781b      	ldrb	r3, [r3, #0]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d100      	bne.n	80194a4 <RegionEU868LinkAdrReq+0x6c>
 80194a2:	e08b      	b.n	80195bc <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80194a4:	197b      	adds	r3, r7, r5
 80194a6:	1979      	adds	r1, r7, r5
 80194a8:	18ba      	adds	r2, r7, r2
 80194aa:	7809      	ldrb	r1, [r1, #0]
 80194ac:	7812      	ldrb	r2, [r2, #0]
 80194ae:	188a      	adds	r2, r1, r2
 80194b0:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80194b2:	2147      	movs	r1, #71	; 0x47
 80194b4:	187b      	adds	r3, r7, r1
 80194b6:	2207      	movs	r2, #7
 80194b8:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80194ba:	203c      	movs	r0, #60	; 0x3c
 80194bc:	183b      	adds	r3, r7, r0
 80194be:	889a      	ldrh	r2, [r3, #4]
 80194c0:	243a      	movs	r4, #58	; 0x3a
 80194c2:	193b      	adds	r3, r7, r4
 80194c4:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80194c6:	183b      	adds	r3, r7, r0
 80194c8:	78db      	ldrb	r3, [r3, #3]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d10a      	bne.n	80194e4 <RegionEU868LinkAdrReq+0xac>
 80194ce:	193b      	adds	r3, r7, r4
 80194d0:	881b      	ldrh	r3, [r3, #0]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d106      	bne.n	80194e4 <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 80194d6:	187b      	adds	r3, r7, r1
 80194d8:	187a      	adds	r2, r7, r1
 80194da:	7812      	ldrb	r2, [r2, #0]
 80194dc:	2101      	movs	r1, #1
 80194de:	438a      	bics	r2, r1
 80194e0:	701a      	strb	r2, [r3, #0]
 80194e2:	e062      	b.n	80195aa <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80194e4:	223c      	movs	r2, #60	; 0x3c
 80194e6:	18bb      	adds	r3, r7, r2
 80194e8:	78db      	ldrb	r3, [r3, #3]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d003      	beq.n	80194f6 <RegionEU868LinkAdrReq+0xbe>
 80194ee:	18bb      	adds	r3, r7, r2
 80194f0:	78db      	ldrb	r3, [r3, #3]
 80194f2:	2b05      	cmp	r3, #5
 80194f4:	d904      	bls.n	8019500 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80194f6:	233c      	movs	r3, #60	; 0x3c
 80194f8:	18fb      	adds	r3, r7, r3
 80194fa:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80194fc:	2b06      	cmp	r3, #6
 80194fe:	d907      	bls.n	8019510 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8019500:	2247      	movs	r2, #71	; 0x47
 8019502:	18bb      	adds	r3, r7, r2
 8019504:	18ba      	adds	r2, r7, r2
 8019506:	7812      	ldrb	r2, [r2, #0]
 8019508:	2101      	movs	r1, #1
 801950a:	438a      	bics	r2, r1
 801950c:	701a      	strb	r2, [r3, #0]
 801950e:	e04c      	b.n	80195aa <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019510:	2345      	movs	r3, #69	; 0x45
 8019512:	18fb      	adds	r3, r7, r3
 8019514:	2200      	movs	r2, #0
 8019516:	701a      	strb	r2, [r3, #0]
 8019518:	e042      	b.n	80195a0 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801951a:	233c      	movs	r3, #60	; 0x3c
 801951c:	18fb      	adds	r3, r7, r3
 801951e:	78db      	ldrb	r3, [r3, #3]
 8019520:	2b06      	cmp	r3, #6
 8019522:	d11a      	bne.n	801955a <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8019524:	2045      	movs	r0, #69	; 0x45
 8019526:	183b      	adds	r3, r7, r0
 8019528:	781a      	ldrb	r2, [r3, #0]
 801952a:	496d      	ldr	r1, [pc, #436]	; (80196e0 <RegionEU868LinkAdrReq+0x2a8>)
 801952c:	0013      	movs	r3, r2
 801952e:	005b      	lsls	r3, r3, #1
 8019530:	189b      	adds	r3, r3, r2
 8019532:	009b      	lsls	r3, r3, #2
 8019534:	585b      	ldr	r3, [r3, r1]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d02c      	beq.n	8019594 <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 801953a:	183b      	adds	r3, r7, r0
 801953c:	781b      	ldrb	r3, [r3, #0]
 801953e:	2201      	movs	r2, #1
 8019540:	409a      	lsls	r2, r3
 8019542:	0013      	movs	r3, r2
 8019544:	b21a      	sxth	r2, r3
 8019546:	213a      	movs	r1, #58	; 0x3a
 8019548:	187b      	adds	r3, r7, r1
 801954a:	881b      	ldrh	r3, [r3, #0]
 801954c:	b21b      	sxth	r3, r3
 801954e:	4313      	orrs	r3, r2
 8019550:	b21b      	sxth	r3, r3
 8019552:	b29a      	uxth	r2, r3
 8019554:	187b      	adds	r3, r7, r1
 8019556:	801a      	strh	r2, [r3, #0]
 8019558:	e01c      	b.n	8019594 <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801955a:	233a      	movs	r3, #58	; 0x3a
 801955c:	18fb      	adds	r3, r7, r3
 801955e:	881b      	ldrh	r3, [r3, #0]
 8019560:	001a      	movs	r2, r3
 8019562:	2145      	movs	r1, #69	; 0x45
 8019564:	187b      	adds	r3, r7, r1
 8019566:	781b      	ldrb	r3, [r3, #0]
 8019568:	411a      	asrs	r2, r3
 801956a:	0013      	movs	r3, r2
 801956c:	2201      	movs	r2, #1
 801956e:	4013      	ands	r3, r2
 8019570:	d010      	beq.n	8019594 <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8019572:	187b      	adds	r3, r7, r1
 8019574:	781a      	ldrb	r2, [r3, #0]
 8019576:	495a      	ldr	r1, [pc, #360]	; (80196e0 <RegionEU868LinkAdrReq+0x2a8>)
 8019578:	0013      	movs	r3, r2
 801957a:	005b      	lsls	r3, r3, #1
 801957c:	189b      	adds	r3, r3, r2
 801957e:	009b      	lsls	r3, r3, #2
 8019580:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019582:	2b00      	cmp	r3, #0
 8019584:	d106      	bne.n	8019594 <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019586:	2247      	movs	r2, #71	; 0x47
 8019588:	18bb      	adds	r3, r7, r2
 801958a:	18ba      	adds	r2, r7, r2
 801958c:	7812      	ldrb	r2, [r2, #0]
 801958e:	2101      	movs	r1, #1
 8019590:	438a      	bics	r2, r1
 8019592:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019594:	2145      	movs	r1, #69	; 0x45
 8019596:	187b      	adds	r3, r7, r1
 8019598:	781a      	ldrb	r2, [r3, #0]
 801959a:	187b      	adds	r3, r7, r1
 801959c:	3201      	adds	r2, #1
 801959e:	701a      	strb	r2, [r3, #0]
 80195a0:	2345      	movs	r3, #69	; 0x45
 80195a2:	18fb      	adds	r3, r7, r3
 80195a4:	781b      	ldrb	r3, [r3, #0]
 80195a6:	2b0f      	cmp	r3, #15
 80195a8:	d9b7      	bls.n	801951a <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	7a1b      	ldrb	r3, [r3, #8]
 80195ae:	2246      	movs	r2, #70	; 0x46
 80195b0:	18ba      	adds	r2, r7, r2
 80195b2:	7812      	ldrb	r2, [r2, #0]
 80195b4:	429a      	cmp	r2, r3
 80195b6:	d200      	bcs.n	80195ba <RegionEU868LinkAdrReq+0x182>
 80195b8:	e75e      	b.n	8019478 <RegionEU868LinkAdrReq+0x40>
 80195ba:	e000      	b.n	80195be <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 80195bc:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80195be:	2134      	movs	r1, #52	; 0x34
 80195c0:	187b      	adds	r3, r7, r1
 80195c2:	2202      	movs	r2, #2
 80195c4:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	7a5a      	ldrb	r2, [r3, #9]
 80195ca:	187b      	adds	r3, r7, r1
 80195cc:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80195ce:	187b      	adds	r3, r7, r1
 80195d0:	0018      	movs	r0, r3
 80195d2:	f7ff f9ef 	bl	80189b4 <RegionEU868GetPhyParam>
 80195d6:	0003      	movs	r3, r0
 80195d8:	001a      	movs	r2, r3
 80195da:	2030      	movs	r0, #48	; 0x30
 80195dc:	183b      	adds	r3, r7, r0
 80195de:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80195e0:	2110      	movs	r1, #16
 80195e2:	187b      	adds	r3, r7, r1
 80195e4:	2447      	movs	r4, #71	; 0x47
 80195e6:	193a      	adds	r2, r7, r4
 80195e8:	7812      	ldrb	r2, [r2, #0]
 80195ea:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	7a9a      	ldrb	r2, [r3, #10]
 80195f0:	187b      	adds	r3, r7, r1
 80195f2:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80195f4:	253c      	movs	r5, #60	; 0x3c
 80195f6:	197b      	adds	r3, r7, r5
 80195f8:	2201      	movs	r2, #1
 80195fa:	569a      	ldrsb	r2, [r3, r2]
 80195fc:	187b      	adds	r3, r7, r1
 80195fe:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019600:	197b      	adds	r3, r7, r5
 8019602:	2202      	movs	r2, #2
 8019604:	569a      	ldrsb	r2, [r3, r2]
 8019606:	187b      	adds	r3, r7, r1
 8019608:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801960a:	197b      	adds	r3, r7, r5
 801960c:	781a      	ldrb	r2, [r3, #0]
 801960e:	187b      	adds	r3, r7, r1
 8019610:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	220b      	movs	r2, #11
 8019616:	569a      	ldrsb	r2, [r3, r2]
 8019618:	187b      	adds	r3, r7, r1
 801961a:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	220c      	movs	r2, #12
 8019620:	569a      	ldrsb	r2, [r3, r2]
 8019622:	187b      	adds	r3, r7, r1
 8019624:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	7b5b      	ldrb	r3, [r3, #13]
 801962a:	b25a      	sxtb	r2, r3
 801962c:	187b      	adds	r3, r7, r1
 801962e:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019630:	187b      	adds	r3, r7, r1
 8019632:	2210      	movs	r2, #16
 8019634:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019636:	187b      	adds	r3, r7, r1
 8019638:	223a      	movs	r2, #58	; 0x3a
 801963a:	18ba      	adds	r2, r7, r2
 801963c:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801963e:	183b      	adds	r3, r7, r0
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	b25a      	sxtb	r2, r3
 8019644:	0008      	movs	r0, r1
 8019646:	183b      	adds	r3, r7, r0
 8019648:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801964a:	183b      	adds	r3, r7, r0
 801964c:	2207      	movs	r2, #7
 801964e:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8019650:	183b      	adds	r3, r7, r0
 8019652:	4a23      	ldr	r2, [pc, #140]	; (80196e0 <RegionEU868LinkAdrReq+0x2a8>)
 8019654:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019656:	183b      	adds	r3, r7, r0
 8019658:	2207      	movs	r2, #7
 801965a:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801965c:	183b      	adds	r3, r7, r0
 801965e:	2200      	movs	r2, #0
 8019660:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019662:	183b      	adds	r3, r7, r0
 8019664:	68fa      	ldr	r2, [r7, #12]
 8019666:	6812      	ldr	r2, [r2, #0]
 8019668:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801966a:	0026      	movs	r6, r4
 801966c:	193c      	adds	r4, r7, r4
 801966e:	0029      	movs	r1, r5
 8019670:	187d      	adds	r5, r7, r1
 8019672:	187b      	adds	r3, r7, r1
 8019674:	1c9a      	adds	r2, r3, #2
 8019676:	187b      	adds	r3, r7, r1
 8019678:	1c59      	adds	r1, r3, #1
 801967a:	1838      	adds	r0, r7, r0
 801967c:	002b      	movs	r3, r5
 801967e:	f7fe fd56 	bl	801812e <RegionCommonLinkAdrReqVerifyParams>
 8019682:	0003      	movs	r3, r0
 8019684:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019686:	19bb      	adds	r3, r7, r6
 8019688:	781b      	ldrb	r3, [r3, #0]
 801968a:	2b07      	cmp	r3, #7
 801968c:	d10c      	bne.n	80196a8 <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 801968e:	4b15      	ldr	r3, [pc, #84]	; (80196e4 <RegionEU868LinkAdrReq+0x2ac>)
 8019690:	2202      	movs	r2, #2
 8019692:	2100      	movs	r1, #0
 8019694:	0018      	movs	r0, r3
 8019696:	f000 fbe9 	bl	8019e6c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 801969a:	223a      	movs	r2, #58	; 0x3a
 801969c:	18bb      	adds	r3, r7, r2
 801969e:	8819      	ldrh	r1, [r3, #0]
 80196a0:	4a0f      	ldr	r2, [pc, #60]	; (80196e0 <RegionEU868LinkAdrReq+0x2a8>)
 80196a2:	239c      	movs	r3, #156	; 0x9c
 80196a4:	005b      	lsls	r3, r3, #1
 80196a6:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80196a8:	213c      	movs	r1, #60	; 0x3c
 80196aa:	187b      	adds	r3, r7, r1
 80196ac:	2201      	movs	r2, #1
 80196ae:	569a      	ldrsb	r2, [r3, r2]
 80196b0:	68bb      	ldr	r3, [r7, #8]
 80196b2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80196b4:	187b      	adds	r3, r7, r1
 80196b6:	2202      	movs	r2, #2
 80196b8:	569a      	ldrsb	r2, [r3, r2]
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80196be:	187b      	adds	r3, r7, r1
 80196c0:	781a      	ldrb	r2, [r3, #0]
 80196c2:	683b      	ldr	r3, [r7, #0]
 80196c4:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80196c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80196c8:	2246      	movs	r2, #70	; 0x46
 80196ca:	18ba      	adds	r2, r7, r2
 80196cc:	7812      	ldrb	r2, [r2, #0]
 80196ce:	701a      	strb	r2, [r3, #0]

    return status;
 80196d0:	2347      	movs	r3, #71	; 0x47
 80196d2:	18fb      	adds	r3, r7, r3
 80196d4:	781b      	ldrb	r3, [r3, #0]
}
 80196d6:	0018      	movs	r0, r3
 80196d8:	46bd      	mov	sp, r7
 80196da:	b013      	add	sp, #76	; 0x4c
 80196dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196de:	46c0      	nop			; (mov r8, r8)
 80196e0:	20000f5c 	.word	0x20000f5c
 80196e4:	20001094 	.word	0x20001094

080196e8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80196e8:	b590      	push	{r4, r7, lr}
 80196ea:	b085      	sub	sp, #20
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80196f0:	240f      	movs	r4, #15
 80196f2:	193b      	adds	r3, r7, r4
 80196f4:	2207      	movs	r2, #7
 80196f6:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 80196f8:	210e      	movs	r1, #14
 80196fa:	187b      	adds	r3, r7, r1
 80196fc:	2200      	movs	r2, #0
 80196fe:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	685b      	ldr	r3, [r3, #4]
 8019704:	187a      	adds	r2, r7, r1
 8019706:	0011      	movs	r1, r2
 8019708:	0018      	movs	r0, r3
 801970a:	f7ff f87d 	bl	8018808 <VerifyRfFreq>
 801970e:	0003      	movs	r3, r0
 8019710:	001a      	movs	r2, r3
 8019712:	2301      	movs	r3, #1
 8019714:	4053      	eors	r3, r2
 8019716:	b2db      	uxtb	r3, r3
 8019718:	2b00      	cmp	r3, #0
 801971a:	d005      	beq.n	8019728 <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 801971c:	193b      	adds	r3, r7, r4
 801971e:	193a      	adds	r2, r7, r4
 8019720:	7812      	ldrb	r2, [r2, #0]
 8019722:	2101      	movs	r1, #1
 8019724:	438a      	bics	r2, r1
 8019726:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	781b      	ldrb	r3, [r3, #0]
 801972c:	b25b      	sxtb	r3, r3
 801972e:	2207      	movs	r2, #7
 8019730:	2100      	movs	r1, #0
 8019732:	0018      	movs	r0, r3
 8019734:	f7fe fac9 	bl	8017cca <RegionCommonValueInRange>
 8019738:	1e03      	subs	r3, r0, #0
 801973a:	d106      	bne.n	801974a <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 801973c:	220f      	movs	r2, #15
 801973e:	18bb      	adds	r3, r7, r2
 8019740:	18ba      	adds	r2, r7, r2
 8019742:	7812      	ldrb	r2, [r2, #0]
 8019744:	2102      	movs	r1, #2
 8019746:	438a      	bics	r2, r1
 8019748:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	785b      	ldrb	r3, [r3, #1]
 801974e:	b25b      	sxtb	r3, r3
 8019750:	2205      	movs	r2, #5
 8019752:	2100      	movs	r1, #0
 8019754:	0018      	movs	r0, r3
 8019756:	f7fe fab8 	bl	8017cca <RegionCommonValueInRange>
 801975a:	1e03      	subs	r3, r0, #0
 801975c:	d106      	bne.n	801976c <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801975e:	220f      	movs	r2, #15
 8019760:	18bb      	adds	r3, r7, r2
 8019762:	18ba      	adds	r2, r7, r2
 8019764:	7812      	ldrb	r2, [r2, #0]
 8019766:	2104      	movs	r1, #4
 8019768:	438a      	bics	r2, r1
 801976a:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801976c:	230f      	movs	r3, #15
 801976e:	18fb      	adds	r3, r7, r3
 8019770:	781b      	ldrb	r3, [r3, #0]
}
 8019772:	0018      	movs	r0, r3
 8019774:	46bd      	mov	sp, r7
 8019776:	b005      	add	sp, #20
 8019778:	bd90      	pop	{r4, r7, pc}

0801977a <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801977a:	b590      	push	{r4, r7, lr}
 801977c:	b087      	sub	sp, #28
 801977e:	af00      	add	r7, sp, #0
 8019780:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019782:	2417      	movs	r4, #23
 8019784:	193b      	adds	r3, r7, r4
 8019786:	2203      	movs	r2, #3
 8019788:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d118      	bne.n	80197c6 <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	791b      	ldrb	r3, [r3, #4]
 8019798:	b25b      	sxtb	r3, r3
 801979a:	b2da      	uxtb	r2, r3
 801979c:	2108      	movs	r1, #8
 801979e:	187b      	adds	r3, r7, r1
 80197a0:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80197a2:	187b      	adds	r3, r7, r1
 80197a4:	0018      	movs	r0, r3
 80197a6:	f000 fa35 	bl	8019c14 <RegionEU868ChannelsRemove>
 80197aa:	0003      	movs	r3, r0
 80197ac:	001a      	movs	r2, r3
 80197ae:	2301      	movs	r3, #1
 80197b0:	4053      	eors	r3, r2
 80197b2:	b2db      	uxtb	r3, r3
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d041      	beq.n	801983c <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 80197b8:	193b      	adds	r3, r7, r4
 80197ba:	193a      	adds	r2, r7, r4
 80197bc:	7812      	ldrb	r2, [r2, #0]
 80197be:	2103      	movs	r1, #3
 80197c0:	438a      	bics	r2, r1
 80197c2:	701a      	strb	r2, [r3, #0]
 80197c4:	e03a      	b.n	801983c <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	681a      	ldr	r2, [r3, #0]
 80197ca:	210c      	movs	r1, #12
 80197cc:	187b      	adds	r3, r7, r1
 80197ce:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	791b      	ldrb	r3, [r3, #4]
 80197d4:	b25b      	sxtb	r3, r3
 80197d6:	b2da      	uxtb	r2, r3
 80197d8:	187b      	adds	r3, r7, r1
 80197da:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80197dc:	187b      	adds	r3, r7, r1
 80197de:	0018      	movs	r0, r3
 80197e0:	f000 f954 	bl	8019a8c <RegionEU868ChannelAdd>
 80197e4:	0003      	movs	r3, r0
 80197e6:	2b06      	cmp	r3, #6
 80197e8:	d017      	beq.n	801981a <RegionEU868NewChannelReq+0xa0>
 80197ea:	dc1e      	bgt.n	801982a <RegionEU868NewChannelReq+0xb0>
 80197ec:	2b05      	cmp	r3, #5
 80197ee:	d00c      	beq.n	801980a <RegionEU868NewChannelReq+0x90>
 80197f0:	dc1b      	bgt.n	801982a <RegionEU868NewChannelReq+0xb0>
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d021      	beq.n	801983a <RegionEU868NewChannelReq+0xc0>
 80197f6:	2b04      	cmp	r3, #4
 80197f8:	d117      	bne.n	801982a <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80197fa:	2217      	movs	r2, #23
 80197fc:	18bb      	adds	r3, r7, r2
 80197fe:	18ba      	adds	r2, r7, r2
 8019800:	7812      	ldrb	r2, [r2, #0]
 8019802:	2101      	movs	r1, #1
 8019804:	438a      	bics	r2, r1
 8019806:	701a      	strb	r2, [r3, #0]
                break;
 8019808:	e018      	b.n	801983c <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801980a:	2217      	movs	r2, #23
 801980c:	18bb      	adds	r3, r7, r2
 801980e:	18ba      	adds	r2, r7, r2
 8019810:	7812      	ldrb	r2, [r2, #0]
 8019812:	2102      	movs	r1, #2
 8019814:	438a      	bics	r2, r1
 8019816:	701a      	strb	r2, [r3, #0]
                break;
 8019818:	e010      	b.n	801983c <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801981a:	2217      	movs	r2, #23
 801981c:	18bb      	adds	r3, r7, r2
 801981e:	18ba      	adds	r2, r7, r2
 8019820:	7812      	ldrb	r2, [r2, #0]
 8019822:	2103      	movs	r1, #3
 8019824:	438a      	bics	r2, r1
 8019826:	701a      	strb	r2, [r3, #0]
                break;
 8019828:	e008      	b.n	801983c <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 801982a:	2217      	movs	r2, #23
 801982c:	18bb      	adds	r3, r7, r2
 801982e:	18ba      	adds	r2, r7, r2
 8019830:	7812      	ldrb	r2, [r2, #0]
 8019832:	2103      	movs	r1, #3
 8019834:	438a      	bics	r2, r1
 8019836:	701a      	strb	r2, [r3, #0]
                break;
 8019838:	e000      	b.n	801983c <RegionEU868NewChannelReq+0xc2>
                break;
 801983a:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 801983c:	2317      	movs	r3, #23
 801983e:	18fb      	adds	r3, r7, r3
 8019840:	781b      	ldrb	r3, [r3, #0]
}
 8019842:	0018      	movs	r0, r3
 8019844:	46bd      	mov	sp, r7
 8019846:	b007      	add	sp, #28
 8019848:	bd90      	pop	{r4, r7, pc}

0801984a <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801984a:	b580      	push	{r7, lr}
 801984c:	b082      	sub	sp, #8
 801984e:	af00      	add	r7, sp, #0
 8019850:	6078      	str	r0, [r7, #4]
    return -1;
 8019852:	2301      	movs	r3, #1
 8019854:	425b      	negs	r3, r3
}
 8019856:	0018      	movs	r0, r3
 8019858:	46bd      	mov	sp, r7
 801985a:	b002      	add	sp, #8
 801985c:	bd80      	pop	{r7, pc}
	...

08019860 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019860:	b590      	push	{r4, r7, lr}
 8019862:	b085      	sub	sp, #20
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019868:	240f      	movs	r4, #15
 801986a:	193b      	adds	r3, r7, r4
 801986c:	2203      	movs	r2, #3
 801986e:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8019870:	210e      	movs	r1, #14
 8019872:	187b      	adds	r3, r7, r1
 8019874:	2200      	movs	r2, #0
 8019876:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	685b      	ldr	r3, [r3, #4]
 801987c:	187a      	adds	r2, r7, r1
 801987e:	0011      	movs	r1, r2
 8019880:	0018      	movs	r0, r3
 8019882:	f7fe ffc1 	bl	8018808 <VerifyRfFreq>
 8019886:	0003      	movs	r3, r0
 8019888:	001a      	movs	r2, r3
 801988a:	2301      	movs	r3, #1
 801988c:	4053      	eors	r3, r2
 801988e:	b2db      	uxtb	r3, r3
 8019890:	2b00      	cmp	r3, #0
 8019892:	d005      	beq.n	80198a0 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019894:	193b      	adds	r3, r7, r4
 8019896:	193a      	adds	r2, r7, r4
 8019898:	7812      	ldrb	r2, [r2, #0]
 801989a:	2101      	movs	r1, #1
 801989c:	438a      	bics	r2, r1
 801989e:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	781b      	ldrb	r3, [r3, #0]
 80198a4:	0019      	movs	r1, r3
 80198a6:	4a14      	ldr	r2, [pc, #80]	; (80198f8 <RegionEU868DlChannelReq+0x98>)
 80198a8:	000b      	movs	r3, r1
 80198aa:	005b      	lsls	r3, r3, #1
 80198ac:	185b      	adds	r3, r3, r1
 80198ae:	009b      	lsls	r3, r3, #2
 80198b0:	589b      	ldr	r3, [r3, r2]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d106      	bne.n	80198c4 <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 80198b6:	220f      	movs	r2, #15
 80198b8:	18bb      	adds	r3, r7, r2
 80198ba:	18ba      	adds	r2, r7, r2
 80198bc:	7812      	ldrb	r2, [r2, #0]
 80198be:	2102      	movs	r1, #2
 80198c0:	438a      	bics	r2, r1
 80198c2:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80198c4:	230f      	movs	r3, #15
 80198c6:	18fb      	adds	r3, r7, r3
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	2b03      	cmp	r3, #3
 80198cc:	d10c      	bne.n	80198e8 <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	781b      	ldrb	r3, [r3, #0]
 80198d2:	0018      	movs	r0, r3
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	685a      	ldr	r2, [r3, #4]
 80198d8:	4907      	ldr	r1, [pc, #28]	; (80198f8 <RegionEU868DlChannelReq+0x98>)
 80198da:	0003      	movs	r3, r0
 80198dc:	005b      	lsls	r3, r3, #1
 80198de:	181b      	adds	r3, r3, r0
 80198e0:	009b      	lsls	r3, r3, #2
 80198e2:	18cb      	adds	r3, r1, r3
 80198e4:	3304      	adds	r3, #4
 80198e6:	601a      	str	r2, [r3, #0]
    }

    return status;
 80198e8:	230f      	movs	r3, #15
 80198ea:	18fb      	adds	r3, r7, r3
 80198ec:	781b      	ldrb	r3, [r3, #0]
}
 80198ee:	0018      	movs	r0, r3
 80198f0:	46bd      	mov	sp, r7
 80198f2:	b005      	add	sp, #20
 80198f4:	bd90      	pop	{r4, r7, pc}
 80198f6:	46c0      	nop			; (mov r8, r8)
 80198f8:	20000f5c 	.word	0x20000f5c

080198fc <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b082      	sub	sp, #8
 8019900:	af00      	add	r7, sp, #0
 8019902:	0002      	movs	r2, r0
 8019904:	1dfb      	adds	r3, r7, #7
 8019906:	701a      	strb	r2, [r3, #0]
 8019908:	1dbb      	adds	r3, r7, #6
 801990a:	1c0a      	adds	r2, r1, #0
 801990c:	701a      	strb	r2, [r3, #0]
    return currentDr;
 801990e:	1dfb      	adds	r3, r7, #7
 8019910:	781b      	ldrb	r3, [r3, #0]
 8019912:	b25b      	sxtb	r3, r3
}
 8019914:	0018      	movs	r0, r3
 8019916:	46bd      	mov	sp, r7
 8019918:	b002      	add	sp, #8
 801991a:	bd80      	pop	{r7, pc}

0801991c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801991c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801991e:	b099      	sub	sp, #100	; 0x64
 8019920:	af02      	add	r7, sp, #8
 8019922:	60f8      	str	r0, [r7, #12]
 8019924:	60b9      	str	r1, [r7, #8]
 8019926:	607a      	str	r2, [r7, #4]
 8019928:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801992a:	2356      	movs	r3, #86	; 0x56
 801992c:	18fb      	adds	r3, r7, r3
 801992e:	2200      	movs	r2, #0
 8019930:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 8019932:	2355      	movs	r3, #85	; 0x55
 8019934:	18fb      	adds	r3, r7, r3
 8019936:	2200      	movs	r2, #0
 8019938:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801993a:	2344      	movs	r3, #68	; 0x44
 801993c:	18fb      	adds	r3, r7, r3
 801993e:	2200      	movs	r2, #0
 8019940:	601a      	str	r2, [r3, #0]
 8019942:	3304      	adds	r3, #4
 8019944:	220c      	movs	r2, #12
 8019946:	2100      	movs	r1, #0
 8019948:	0018      	movs	r0, r3
 801994a:	f005 fa8c 	bl	801ee66 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801994e:	2357      	movs	r3, #87	; 0x57
 8019950:	18fb      	adds	r3, r7, r3
 8019952:	220c      	movs	r2, #12
 8019954:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8019956:	4b4a      	ldr	r3, [pc, #296]	; (8019a80 <RegionEU868NextChannel+0x164>)
 8019958:	2201      	movs	r2, #1
 801995a:	2100      	movs	r1, #0
 801995c:	0018      	movs	r0, r3
 801995e:	f7fe fa1c 	bl	8017d9a <RegionCommonCountChannels>
 8019962:	1e03      	subs	r3, r0, #0
 8019964:	d10a      	bne.n	801997c <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019966:	4a47      	ldr	r2, [pc, #284]	; (8019a84 <RegionEU868NextChannel+0x168>)
 8019968:	239c      	movs	r3, #156	; 0x9c
 801996a:	005b      	lsls	r3, r3, #1
 801996c:	5ad3      	ldrh	r3, [r2, r3]
 801996e:	2207      	movs	r2, #7
 8019970:	4313      	orrs	r3, r2
 8019972:	b299      	uxth	r1, r3
 8019974:	4a43      	ldr	r2, [pc, #268]	; (8019a84 <RegionEU868NextChannel+0x168>)
 8019976:	239c      	movs	r3, #156	; 0x9c
 8019978:	005b      	lsls	r3, r3, #1
 801997a:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	7a5a      	ldrb	r2, [r3, #9]
 8019980:	2110      	movs	r1, #16
 8019982:	187b      	adds	r3, r7, r1
 8019984:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	7a1b      	ldrb	r3, [r3, #8]
 801998a:	b25b      	sxtb	r3, r3
 801998c:	b2da      	uxtb	r2, r3
 801998e:	187b      	adds	r3, r7, r1
 8019990:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 8019992:	000d      	movs	r5, r1
 8019994:	197b      	adds	r3, r7, r5
 8019996:	4a3a      	ldr	r2, [pc, #232]	; (8019a80 <RegionEU868NextChannel+0x164>)
 8019998:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 801999a:	197b      	adds	r3, r7, r5
 801999c:	4a39      	ldr	r2, [pc, #228]	; (8019a84 <RegionEU868NextChannel+0x168>)
 801999e:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 80199a0:	197b      	adds	r3, r7, r5
 80199a2:	4a39      	ldr	r2, [pc, #228]	; (8019a88 <RegionEU868NextChannel+0x16c>)
 80199a4:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80199a6:	197b      	adds	r3, r7, r5
 80199a8:	2210      	movs	r2, #16
 80199aa:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 80199ac:	197b      	adds	r3, r7, r5
 80199ae:	2207      	movs	r2, #7
 80199b0:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	681a      	ldr	r2, [r3, #0]
 80199b6:	2424      	movs	r4, #36	; 0x24
 80199b8:	193b      	adds	r3, r7, r4
 80199ba:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	685a      	ldr	r2, [r3, #4]
 80199c0:	193b      	adds	r3, r7, r4
 80199c2:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	7a9a      	ldrb	r2, [r3, #10]
 80199c8:	193b      	adds	r3, r7, r4
 80199ca:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80199cc:	193b      	adds	r3, r7, r4
 80199ce:	2206      	movs	r2, #6
 80199d0:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80199d2:	193b      	adds	r3, r7, r4
 80199d4:	68fa      	ldr	r2, [r7, #12]
 80199d6:	330c      	adds	r3, #12
 80199d8:	320c      	adds	r2, #12
 80199da:	ca03      	ldmia	r2!, {r0, r1}
 80199dc:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	7d1a      	ldrb	r2, [r3, #20]
 80199e2:	193b      	adds	r3, r7, r4
 80199e4:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	2208      	movs	r2, #8
 80199ea:	569a      	ldrsb	r2, [r3, r2]
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	8adb      	ldrh	r3, [r3, #22]
 80199f0:	0019      	movs	r1, r3
 80199f2:	0010      	movs	r0, r2
 80199f4:	f7fe ff80 	bl	80188f8 <GetTimeOnAir>
 80199f8:	0002      	movs	r2, r0
 80199fa:	0020      	movs	r0, r4
 80199fc:	183b      	adds	r3, r7, r0
 80199fe:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019a00:	183b      	adds	r3, r7, r0
 8019a02:	197a      	adds	r2, r7, r5
 8019a04:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019a06:	2657      	movs	r6, #87	; 0x57
 8019a08:	19bc      	adds	r4, r7, r6
 8019a0a:	2356      	movs	r3, #86	; 0x56
 8019a0c:	18fd      	adds	r5, r7, r3
 8019a0e:	2244      	movs	r2, #68	; 0x44
 8019a10:	18ba      	adds	r2, r7, r2
 8019a12:	6839      	ldr	r1, [r7, #0]
 8019a14:	1838      	adds	r0, r7, r0
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	9301      	str	r3, [sp, #4]
 8019a1a:	2355      	movs	r3, #85	; 0x55
 8019a1c:	18fb      	adds	r3, r7, r3
 8019a1e:	9300      	str	r3, [sp, #0]
 8019a20:	002b      	movs	r3, r5
 8019a22:	f7fe fdbf 	bl	80185a4 <RegionCommonIdentifyChannels>
 8019a26:	0003      	movs	r3, r0
 8019a28:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019a2a:	19bb      	adds	r3, r7, r6
 8019a2c:	781b      	ldrb	r3, [r3, #0]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d10e      	bne.n	8019a50 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019a32:	2356      	movs	r3, #86	; 0x56
 8019a34:	18fb      	adds	r3, r7, r3
 8019a36:	781b      	ldrb	r3, [r3, #0]
 8019a38:	3b01      	subs	r3, #1
 8019a3a:	0019      	movs	r1, r3
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	f000 f9c1 	bl	8019dc4 <randr>
 8019a42:	0002      	movs	r2, r0
 8019a44:	2344      	movs	r3, #68	; 0x44
 8019a46:	18fb      	adds	r3, r7, r3
 8019a48:	5c9a      	ldrb	r2, [r3, r2]
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	701a      	strb	r2, [r3, #0]
 8019a4e:	e00f      	b.n	8019a70 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019a50:	2357      	movs	r3, #87	; 0x57
 8019a52:	18fb      	adds	r3, r7, r3
 8019a54:	781b      	ldrb	r3, [r3, #0]
 8019a56:	2b0c      	cmp	r3, #12
 8019a58:	d10a      	bne.n	8019a70 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019a5a:	4a0a      	ldr	r2, [pc, #40]	; (8019a84 <RegionEU868NextChannel+0x168>)
 8019a5c:	239c      	movs	r3, #156	; 0x9c
 8019a5e:	005b      	lsls	r3, r3, #1
 8019a60:	5ad3      	ldrh	r3, [r2, r3]
 8019a62:	2207      	movs	r2, #7
 8019a64:	4313      	orrs	r3, r2
 8019a66:	b299      	uxth	r1, r3
 8019a68:	4a06      	ldr	r2, [pc, #24]	; (8019a84 <RegionEU868NextChannel+0x168>)
 8019a6a:	239c      	movs	r3, #156	; 0x9c
 8019a6c:	005b      	lsls	r3, r3, #1
 8019a6e:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 8019a70:	2357      	movs	r3, #87	; 0x57
 8019a72:	18fb      	adds	r3, r7, r3
 8019a74:	781b      	ldrb	r3, [r3, #0]
}
 8019a76:	0018      	movs	r0, r3
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	b017      	add	sp, #92	; 0x5c
 8019a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a7e:	46c0      	nop			; (mov r8, r8)
 8019a80:	20001094 	.word	0x20001094
 8019a84:	20000f5c 	.word	0x20000f5c
 8019a88:	2000101c 	.word	0x2000101c

08019a8c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019a8c:	b590      	push	{r4, r7, lr}
 8019a8e:	b085      	sub	sp, #20
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8019a94:	230c      	movs	r3, #12
 8019a96:	18fb      	adds	r3, r7, r3
 8019a98:	2200      	movs	r2, #0
 8019a9a:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8019a9c:	230f      	movs	r3, #15
 8019a9e:	18fb      	adds	r3, r7, r3
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8019aa4:	230e      	movs	r3, #14
 8019aa6:	18fb      	adds	r3, r7, r3
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8019aac:	210d      	movs	r1, #13
 8019aae:	187b      	adds	r3, r7, r1
 8019ab0:	687a      	ldr	r2, [r7, #4]
 8019ab2:	7912      	ldrb	r2, [r2, #4]
 8019ab4:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019ab6:	187b      	adds	r3, r7, r1
 8019ab8:	781b      	ldrb	r3, [r3, #0]
 8019aba:	2b02      	cmp	r3, #2
 8019abc:	d801      	bhi.n	8019ac2 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019abe:	2306      	movs	r3, #6
 8019ac0:	e0a1      	b.n	8019c06 <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019ac2:	230d      	movs	r3, #13
 8019ac4:	18fb      	adds	r3, r7, r3
 8019ac6:	781b      	ldrb	r3, [r3, #0]
 8019ac8:	2b0f      	cmp	r3, #15
 8019aca:	d901      	bls.n	8019ad0 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019acc:	2303      	movs	r3, #3
 8019ace:	e09a      	b.n	8019c06 <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	7a1b      	ldrb	r3, [r3, #8]
 8019ad6:	011b      	lsls	r3, r3, #4
 8019ad8:	b25b      	sxtb	r3, r3
 8019ada:	111b      	asrs	r3, r3, #4
 8019adc:	b25b      	sxtb	r3, r3
 8019ade:	2207      	movs	r2, #7
 8019ae0:	2100      	movs	r1, #0
 8019ae2:	0018      	movs	r0, r3
 8019ae4:	f7fe f8f1 	bl	8017cca <RegionCommonValueInRange>
 8019ae8:	1e03      	subs	r3, r0, #0
 8019aea:	d103      	bne.n	8019af4 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8019aec:	230f      	movs	r3, #15
 8019aee:	18fb      	adds	r3, r7, r3
 8019af0:	2201      	movs	r2, #1
 8019af2:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	7a1b      	ldrb	r3, [r3, #8]
 8019afa:	b25b      	sxtb	r3, r3
 8019afc:	111b      	asrs	r3, r3, #4
 8019afe:	b25b      	sxtb	r3, r3
 8019b00:	2207      	movs	r2, #7
 8019b02:	2100      	movs	r1, #0
 8019b04:	0018      	movs	r0, r3
 8019b06:	f7fe f8e0 	bl	8017cca <RegionCommonValueInRange>
 8019b0a:	1e03      	subs	r3, r0, #0
 8019b0c:	d103      	bne.n	8019b16 <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8019b0e:	230f      	movs	r3, #15
 8019b10:	18fb      	adds	r3, r7, r3
 8019b12:	2201      	movs	r2, #1
 8019b14:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	7a1b      	ldrb	r3, [r3, #8]
 8019b1c:	011b      	lsls	r3, r3, #4
 8019b1e:	b25b      	sxtb	r3, r3
 8019b20:	111b      	asrs	r3, r3, #4
 8019b22:	b25a      	sxtb	r2, r3
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	7a1b      	ldrb	r3, [r3, #8]
 8019b2a:	b25b      	sxtb	r3, r3
 8019b2c:	111b      	asrs	r3, r3, #4
 8019b2e:	b25b      	sxtb	r3, r3
 8019b30:	429a      	cmp	r2, r3
 8019b32:	dd03      	ble.n	8019b3c <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8019b34:	230f      	movs	r3, #15
 8019b36:	18fb      	adds	r3, r7, r3
 8019b38:	2201      	movs	r2, #1
 8019b3a:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019b3c:	240e      	movs	r4, #14
 8019b3e:	193b      	adds	r3, r7, r4
 8019b40:	781b      	ldrb	r3, [r3, #0]
 8019b42:	2201      	movs	r2, #1
 8019b44:	4053      	eors	r3, r2
 8019b46:	b2db      	uxtb	r3, r3
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d012      	beq.n	8019b72 <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	220c      	movs	r2, #12
 8019b54:	18ba      	adds	r2, r7, r2
 8019b56:	0011      	movs	r1, r2
 8019b58:	0018      	movs	r0, r3
 8019b5a:	f7fe fe55 	bl	8018808 <VerifyRfFreq>
 8019b5e:	0003      	movs	r3, r0
 8019b60:	001a      	movs	r2, r3
 8019b62:	2301      	movs	r3, #1
 8019b64:	4053      	eors	r3, r2
 8019b66:	b2db      	uxtb	r3, r3
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d002      	beq.n	8019b72 <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 8019b6c:	193b      	adds	r3, r7, r4
 8019b6e:	2201      	movs	r2, #1
 8019b70:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019b72:	230f      	movs	r3, #15
 8019b74:	18fb      	adds	r3, r7, r3
 8019b76:	781b      	ldrb	r3, [r3, #0]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d006      	beq.n	8019b8a <RegionEU868ChannelAdd+0xfe>
 8019b7c:	230e      	movs	r3, #14
 8019b7e:	18fb      	adds	r3, r7, r3
 8019b80:	781b      	ldrb	r3, [r3, #0]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d001      	beq.n	8019b8a <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019b86:	2306      	movs	r3, #6
 8019b88:	e03d      	b.n	8019c06 <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 8019b8a:	230f      	movs	r3, #15
 8019b8c:	18fb      	adds	r3, r7, r3
 8019b8e:	781b      	ldrb	r3, [r3, #0]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d001      	beq.n	8019b98 <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019b94:	2305      	movs	r3, #5
 8019b96:	e036      	b.n	8019c06 <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 8019b98:	230e      	movs	r3, #14
 8019b9a:	18fb      	adds	r3, r7, r3
 8019b9c:	781b      	ldrb	r3, [r3, #0]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d001      	beq.n	8019ba6 <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019ba2:	2304      	movs	r3, #4
 8019ba4:	e02f      	b.n	8019c06 <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8019ba6:	240d      	movs	r4, #13
 8019ba8:	193b      	adds	r3, r7, r4
 8019baa:	781a      	ldrb	r2, [r3, #0]
 8019bac:	0013      	movs	r3, r2
 8019bae:	005b      	lsls	r3, r3, #1
 8019bb0:	189b      	adds	r3, r3, r2
 8019bb2:	009b      	lsls	r3, r3, #2
 8019bb4:	4a16      	ldr	r2, [pc, #88]	; (8019c10 <RegionEU868ChannelAdd+0x184>)
 8019bb6:	1898      	adds	r0, r3, r2
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	220c      	movs	r2, #12
 8019bbe:	0019      	movs	r1, r3
 8019bc0:	f000 f916 	bl	8019df0 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8019bc4:	193b      	adds	r3, r7, r4
 8019bc6:	781a      	ldrb	r2, [r3, #0]
 8019bc8:	230c      	movs	r3, #12
 8019bca:	18fb      	adds	r3, r7, r3
 8019bcc:	7818      	ldrb	r0, [r3, #0]
 8019bce:	4910      	ldr	r1, [pc, #64]	; (8019c10 <RegionEU868ChannelAdd+0x184>)
 8019bd0:	0013      	movs	r3, r2
 8019bd2:	005b      	lsls	r3, r3, #1
 8019bd4:	189b      	adds	r3, r3, r2
 8019bd6:	009b      	lsls	r3, r3, #2
 8019bd8:	18cb      	adds	r3, r1, r3
 8019bda:	3309      	adds	r3, #9
 8019bdc:	1c02      	adds	r2, r0, #0
 8019bde:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8019be0:	4a0b      	ldr	r2, [pc, #44]	; (8019c10 <RegionEU868ChannelAdd+0x184>)
 8019be2:	239c      	movs	r3, #156	; 0x9c
 8019be4:	005b      	lsls	r3, r3, #1
 8019be6:	5ad3      	ldrh	r3, [r2, r3]
 8019be8:	b21a      	sxth	r2, r3
 8019bea:	193b      	adds	r3, r7, r4
 8019bec:	781b      	ldrb	r3, [r3, #0]
 8019bee:	2101      	movs	r1, #1
 8019bf0:	4099      	lsls	r1, r3
 8019bf2:	000b      	movs	r3, r1
 8019bf4:	b21b      	sxth	r3, r3
 8019bf6:	4313      	orrs	r3, r2
 8019bf8:	b21b      	sxth	r3, r3
 8019bfa:	b299      	uxth	r1, r3
 8019bfc:	4a04      	ldr	r2, [pc, #16]	; (8019c10 <RegionEU868ChannelAdd+0x184>)
 8019bfe:	239c      	movs	r3, #156	; 0x9c
 8019c00:	005b      	lsls	r3, r3, #1
 8019c02:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8019c04:	2300      	movs	r3, #0
}
 8019c06:	0018      	movs	r0, r3
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	b005      	add	sp, #20
 8019c0c:	bd90      	pop	{r4, r7, pc}
 8019c0e:	46c0      	nop			; (mov r8, r8)
 8019c10:	20000f5c 	.word	0x20000f5c

08019c14 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019c14:	b590      	push	{r4, r7, lr}
 8019c16:	b087      	sub	sp, #28
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8019c1c:	2117      	movs	r1, #23
 8019c1e:	187b      	adds	r3, r7, r1
 8019c20:	687a      	ldr	r2, [r7, #4]
 8019c22:	7812      	ldrb	r2, [r2, #0]
 8019c24:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019c26:	187b      	adds	r3, r7, r1
 8019c28:	781b      	ldrb	r3, [r3, #0]
 8019c2a:	2b02      	cmp	r3, #2
 8019c2c:	d801      	bhi.n	8019c32 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8019c2e:	2300      	movs	r3, #0
 8019c30:	e015      	b.n	8019c5e <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019c32:	2417      	movs	r4, #23
 8019c34:	193b      	adds	r3, r7, r4
 8019c36:	781a      	ldrb	r2, [r3, #0]
 8019c38:	490b      	ldr	r1, [pc, #44]	; (8019c68 <RegionEU868ChannelsRemove+0x54>)
 8019c3a:	0013      	movs	r3, r2
 8019c3c:	005b      	lsls	r3, r3, #1
 8019c3e:	189b      	adds	r3, r3, r2
 8019c40:	009b      	lsls	r3, r3, #2
 8019c42:	18cb      	adds	r3, r1, r3
 8019c44:	220c      	movs	r2, #12
 8019c46:	2100      	movs	r1, #0
 8019c48:	0018      	movs	r0, r3
 8019c4a:	f005 f90c 	bl	801ee66 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019c4e:	193b      	adds	r3, r7, r4
 8019c50:	7819      	ldrb	r1, [r3, #0]
 8019c52:	4b06      	ldr	r3, [pc, #24]	; (8019c6c <RegionEU868ChannelsRemove+0x58>)
 8019c54:	2210      	movs	r2, #16
 8019c56:	0018      	movs	r0, r3
 8019c58:	f7fe f85d 	bl	8017d16 <RegionCommonChanDisable>
 8019c5c:	0003      	movs	r3, r0
}
 8019c5e:	0018      	movs	r0, r3
 8019c60:	46bd      	mov	sp, r7
 8019c62:	b007      	add	sp, #28
 8019c64:	bd90      	pop	{r4, r7, pc}
 8019c66:	46c0      	nop			; (mov r8, r8)
 8019c68:	20000f5c 	.word	0x20000f5c
 8019c6c:	20001094 	.word	0x20001094

08019c70 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c72:	b085      	sub	sp, #20
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2002      	movs	r0, #2
 8019c7c:	5618      	ldrsb	r0, [r3, r0]
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	781b      	ldrb	r3, [r3, #0]
 8019c82:	0019      	movs	r1, r3
 8019c84:	4a23      	ldr	r2, [pc, #140]	; (8019d14 <RegionEU868SetContinuousWave+0xa4>)
 8019c86:	000b      	movs	r3, r1
 8019c88:	005b      	lsls	r3, r3, #1
 8019c8a:	185b      	adds	r3, r3, r1
 8019c8c:	009b      	lsls	r3, r3, #2
 8019c8e:	18d3      	adds	r3, r2, r3
 8019c90:	3309      	adds	r3, #9
 8019c92:	781b      	ldrb	r3, [r3, #0]
 8019c94:	001c      	movs	r4, r3
 8019c96:	4a1f      	ldr	r2, [pc, #124]	; (8019d14 <RegionEU868SetContinuousWave+0xa4>)
 8019c98:	21c2      	movs	r1, #194	; 0xc2
 8019c9a:	0023      	movs	r3, r4
 8019c9c:	009b      	lsls	r3, r3, #2
 8019c9e:	191b      	adds	r3, r3, r4
 8019ca0:	009b      	lsls	r3, r3, #2
 8019ca2:	18d3      	adds	r3, r2, r3
 8019ca4:	185b      	adds	r3, r3, r1
 8019ca6:	2100      	movs	r1, #0
 8019ca8:	5659      	ldrsb	r1, [r3, r1]
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	2201      	movs	r2, #1
 8019cae:	569a      	ldrsb	r2, [r3, r2]
 8019cb0:	260f      	movs	r6, #15
 8019cb2:	19bc      	adds	r4, r7, r6
 8019cb4:	4b18      	ldr	r3, [pc, #96]	; (8019d18 <RegionEU868SetContinuousWave+0xa8>)
 8019cb6:	f7fe fd7f 	bl	80187b8 <LimitTxPower>
 8019cba:	0003      	movs	r3, r0
 8019cbc:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8019cbe:	200e      	movs	r0, #14
 8019cc0:	183b      	adds	r3, r7, r0
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	781b      	ldrb	r3, [r3, #0]
 8019cca:	0019      	movs	r1, r3
 8019ccc:	4a11      	ldr	r2, [pc, #68]	; (8019d14 <RegionEU868SetContinuousWave+0xa4>)
 8019cce:	000b      	movs	r3, r1
 8019cd0:	005b      	lsls	r3, r3, #1
 8019cd2:	185b      	adds	r3, r3, r1
 8019cd4:	009b      	lsls	r3, r3, #2
 8019cd6:	589b      	ldr	r3, [r3, r2]
 8019cd8:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	6859      	ldr	r1, [r3, #4]
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	689a      	ldr	r2, [r3, #8]
 8019ce2:	0005      	movs	r5, r0
 8019ce4:	183c      	adds	r4, r7, r0
 8019ce6:	19bb      	adds	r3, r7, r6
 8019ce8:	781b      	ldrb	r3, [r3, #0]
 8019cea:	b25b      	sxtb	r3, r3
 8019cec:	0018      	movs	r0, r3
 8019cee:	f7fe fb31 	bl	8018354 <RegionCommonComputeTxPower>
 8019cf2:	0003      	movs	r3, r0
 8019cf4:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019cf6:	4b09      	ldr	r3, [pc, #36]	; (8019d1c <RegionEU868SetContinuousWave+0xac>)
 8019cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019cfa:	687a      	ldr	r2, [r7, #4]
 8019cfc:	8994      	ldrh	r4, [r2, #12]
 8019cfe:	197a      	adds	r2, r7, r5
 8019d00:	2100      	movs	r1, #0
 8019d02:	5651      	ldrsb	r1, [r2, r1]
 8019d04:	68b8      	ldr	r0, [r7, #8]
 8019d06:	0022      	movs	r2, r4
 8019d08:	4798      	blx	r3
}
 8019d0a:	46c0      	nop			; (mov r8, r8)
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	b005      	add	sp, #20
 8019d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d12:	46c0      	nop			; (mov r8, r8)
 8019d14:	20000f5c 	.word	0x20000f5c
 8019d18:	20001094 	.word	0x20001094
 8019d1c:	08021740 	.word	0x08021740

08019d20 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019d20:	b590      	push	{r4, r7, lr}
 8019d22:	b085      	sub	sp, #20
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	0004      	movs	r4, r0
 8019d28:	0008      	movs	r0, r1
 8019d2a:	0011      	movs	r1, r2
 8019d2c:	1dfb      	adds	r3, r7, #7
 8019d2e:	1c22      	adds	r2, r4, #0
 8019d30:	701a      	strb	r2, [r3, #0]
 8019d32:	1dbb      	adds	r3, r7, #6
 8019d34:	1c02      	adds	r2, r0, #0
 8019d36:	701a      	strb	r2, [r3, #0]
 8019d38:	1d7b      	adds	r3, r7, #5
 8019d3a:	1c0a      	adds	r2, r1, #0
 8019d3c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8019d3e:	1dbb      	adds	r3, r7, #6
 8019d40:	781a      	ldrb	r2, [r3, #0]
 8019d42:	1d7b      	adds	r3, r7, #5
 8019d44:	781b      	ldrb	r3, [r3, #0]
 8019d46:	1ad3      	subs	r3, r2, r3
 8019d48:	b2da      	uxtb	r2, r3
 8019d4a:	210f      	movs	r1, #15
 8019d4c:	187b      	adds	r3, r7, r1
 8019d4e:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8019d50:	000a      	movs	r2, r1
 8019d52:	18bb      	adds	r3, r7, r2
 8019d54:	781b      	ldrb	r3, [r3, #0]
 8019d56:	2b7f      	cmp	r3, #127	; 0x7f
 8019d58:	d902      	bls.n	8019d60 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8019d5a:	18bb      	adds	r3, r7, r2
 8019d5c:	2200      	movs	r2, #0
 8019d5e:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8019d60:	230f      	movs	r3, #15
 8019d62:	18fb      	adds	r3, r7, r3
 8019d64:	781b      	ldrb	r3, [r3, #0]
}
 8019d66:	0018      	movs	r0, r3
 8019d68:	46bd      	mov	sp, r7
 8019d6a:	b005      	add	sp, #20
 8019d6c:	bd90      	pop	{r4, r7, pc}
	...

08019d70 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019d74:	4b08      	ldr	r3, [pc, #32]	; (8019d98 <rand1+0x28>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	4a08      	ldr	r2, [pc, #32]	; (8019d9c <rand1+0x2c>)
 8019d7a:	4353      	muls	r3, r2
 8019d7c:	4a08      	ldr	r2, [pc, #32]	; (8019da0 <rand1+0x30>)
 8019d7e:	189a      	adds	r2, r3, r2
 8019d80:	4b05      	ldr	r3, [pc, #20]	; (8019d98 <rand1+0x28>)
 8019d82:	601a      	str	r2, [r3, #0]
 8019d84:	4b04      	ldr	r3, [pc, #16]	; (8019d98 <rand1+0x28>)
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	4906      	ldr	r1, [pc, #24]	; (8019da4 <rand1+0x34>)
 8019d8a:	0018      	movs	r0, r3
 8019d8c:	f7e6 fa4a 	bl	8000224 <__aeabi_uidivmod>
 8019d90:	000b      	movs	r3, r1
}
 8019d92:	0018      	movs	r0, r3
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}
 8019d98:	200001c0 	.word	0x200001c0
 8019d9c:	41c64e6d 	.word	0x41c64e6d
 8019da0:	00003039 	.word	0x00003039
 8019da4:	7fffffff 	.word	0x7fffffff

08019da8 <srand1>:

void srand1( uint32_t seed )
{
 8019da8:	b580      	push	{r7, lr}
 8019daa:	b082      	sub	sp, #8
 8019dac:	af00      	add	r7, sp, #0
 8019dae:	6078      	str	r0, [r7, #4]
    next = seed;
 8019db0:	4b03      	ldr	r3, [pc, #12]	; (8019dc0 <srand1+0x18>)
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	601a      	str	r2, [r3, #0]
}
 8019db6:	46c0      	nop			; (mov r8, r8)
 8019db8:	46bd      	mov	sp, r7
 8019dba:	b002      	add	sp, #8
 8019dbc:	bd80      	pop	{r7, pc}
 8019dbe:	46c0      	nop			; (mov r8, r8)
 8019dc0:	200001c0 	.word	0x200001c0

08019dc4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b082      	sub	sp, #8
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
 8019dcc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019dce:	f7ff ffcf 	bl	8019d70 <rand1>
 8019dd2:	683a      	ldr	r2, [r7, #0]
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	1ad3      	subs	r3, r2, r3
 8019dd8:	3301      	adds	r3, #1
 8019dda:	0019      	movs	r1, r3
 8019ddc:	f7e6 fb0c 	bl	80003f8 <__aeabi_idivmod>
 8019de0:	000b      	movs	r3, r1
 8019de2:	001a      	movs	r2, r3
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	18d3      	adds	r3, r2, r3
}
 8019de8:	0018      	movs	r0, r3
 8019dea:	46bd      	mov	sp, r7
 8019dec:	b002      	add	sp, #8
 8019dee:	bd80      	pop	{r7, pc}

08019df0 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b084      	sub	sp, #16
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	60f8      	str	r0, [r7, #12]
 8019df8:	60b9      	str	r1, [r7, #8]
 8019dfa:	1dbb      	adds	r3, r7, #6
 8019dfc:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8019dfe:	e007      	b.n	8019e10 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019e00:	68ba      	ldr	r2, [r7, #8]
 8019e02:	1c53      	adds	r3, r2, #1
 8019e04:	60bb      	str	r3, [r7, #8]
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	1c59      	adds	r1, r3, #1
 8019e0a:	60f9      	str	r1, [r7, #12]
 8019e0c:	7812      	ldrb	r2, [r2, #0]
 8019e0e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e10:	1dbb      	adds	r3, r7, #6
 8019e12:	881b      	ldrh	r3, [r3, #0]
 8019e14:	1dba      	adds	r2, r7, #6
 8019e16:	1e59      	subs	r1, r3, #1
 8019e18:	8011      	strh	r1, [r2, #0]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d1f0      	bne.n	8019e00 <memcpy1+0x10>
    }
}
 8019e1e:	46c0      	nop			; (mov r8, r8)
 8019e20:	46c0      	nop			; (mov r8, r8)
 8019e22:	46bd      	mov	sp, r7
 8019e24:	b004      	add	sp, #16
 8019e26:	bd80      	pop	{r7, pc}

08019e28 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b084      	sub	sp, #16
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	60f8      	str	r0, [r7, #12]
 8019e30:	60b9      	str	r1, [r7, #8]
 8019e32:	1dbb      	adds	r3, r7, #6
 8019e34:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8019e36:	1dbb      	adds	r3, r7, #6
 8019e38:	881b      	ldrh	r3, [r3, #0]
 8019e3a:	3b01      	subs	r3, #1
 8019e3c:	68fa      	ldr	r2, [r7, #12]
 8019e3e:	18d3      	adds	r3, r2, r3
 8019e40:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019e42:	e007      	b.n	8019e54 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8019e44:	68ba      	ldr	r2, [r7, #8]
 8019e46:	1c53      	adds	r3, r2, #1
 8019e48:	60bb      	str	r3, [r7, #8]
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	1e59      	subs	r1, r3, #1
 8019e4e:	60f9      	str	r1, [r7, #12]
 8019e50:	7812      	ldrb	r2, [r2, #0]
 8019e52:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e54:	1dbb      	adds	r3, r7, #6
 8019e56:	881b      	ldrh	r3, [r3, #0]
 8019e58:	1dba      	adds	r2, r7, #6
 8019e5a:	1e59      	subs	r1, r3, #1
 8019e5c:	8011      	strh	r1, [r2, #0]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d1f0      	bne.n	8019e44 <memcpyr+0x1c>
    }
}
 8019e62:	46c0      	nop			; (mov r8, r8)
 8019e64:	46c0      	nop			; (mov r8, r8)
 8019e66:	46bd      	mov	sp, r7
 8019e68:	b004      	add	sp, #16
 8019e6a:	bd80      	pop	{r7, pc}

08019e6c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b082      	sub	sp, #8
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
 8019e74:	0008      	movs	r0, r1
 8019e76:	0011      	movs	r1, r2
 8019e78:	1cfb      	adds	r3, r7, #3
 8019e7a:	1c02      	adds	r2, r0, #0
 8019e7c:	701a      	strb	r2, [r3, #0]
 8019e7e:	003b      	movs	r3, r7
 8019e80:	1c0a      	adds	r2, r1, #0
 8019e82:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8019e84:	e005      	b.n	8019e92 <memset1+0x26>
    {
        *dst++ = value;
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	1c5a      	adds	r2, r3, #1
 8019e8a:	607a      	str	r2, [r7, #4]
 8019e8c:	1cfa      	adds	r2, r7, #3
 8019e8e:	7812      	ldrb	r2, [r2, #0]
 8019e90:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e92:	003b      	movs	r3, r7
 8019e94:	881b      	ldrh	r3, [r3, #0]
 8019e96:	003a      	movs	r2, r7
 8019e98:	1e59      	subs	r1, r3, #1
 8019e9a:	8011      	strh	r1, [r2, #0]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d1f2      	bne.n	8019e86 <memset1+0x1a>
    }
}
 8019ea0:	46c0      	nop			; (mov r8, r8)
 8019ea2:	46c0      	nop			; (mov r8, r8)
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	b002      	add	sp, #8
 8019ea8:	bd80      	pop	{r7, pc}
	...

08019eac <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 8019eac:	b590      	push	{r4, r7, lr}
 8019eae:	b087      	sub	sp, #28
 8019eb0:	af02      	add	r7, sp, #8
 8019eb2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8019eb4:	4b34      	ldr	r3, [pc, #208]	; (8019f88 <SX1276Init+0xdc>)
 8019eb6:	687a      	ldr	r2, [r7, #4]
 8019eb8:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8019eba:	4b34      	ldr	r3, [pc, #208]	; (8019f8c <SX1276Init+0xe0>)
 8019ebc:	2201      	movs	r2, #1
 8019ebe:	4251      	negs	r1, r2
 8019ec0:	4833      	ldr	r0, [pc, #204]	; (8019f90 <SX1276Init+0xe4>)
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	9200      	str	r2, [sp, #0]
 8019ec6:	2200      	movs	r2, #0
 8019ec8:	f003 fce4 	bl	801d894 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8019ecc:	4b2f      	ldr	r3, [pc, #188]	; (8019f8c <SX1276Init+0xe0>)
 8019ece:	2201      	movs	r2, #1
 8019ed0:	4251      	negs	r1, r2
 8019ed2:	4830      	ldr	r0, [pc, #192]	; (8019f94 <SX1276Init+0xe8>)
 8019ed4:	2200      	movs	r2, #0
 8019ed6:	9200      	str	r2, [sp, #0]
 8019ed8:	2200      	movs	r2, #0
 8019eda:	f003 fcdb 	bl	801d894 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8019ede:	4b2b      	ldr	r3, [pc, #172]	; (8019f8c <SX1276Init+0xe0>)
 8019ee0:	2201      	movs	r2, #1
 8019ee2:	4251      	negs	r1, r2
 8019ee4:	482c      	ldr	r0, [pc, #176]	; (8019f98 <SX1276Init+0xec>)
 8019ee6:	2200      	movs	r2, #0
 8019ee8:	9200      	str	r2, [sp, #0]
 8019eea:	2200      	movs	r2, #0
 8019eec:	f003 fcd2 	bl	801d894 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 8019ef0:	2001      	movs	r0, #1
 8019ef2:	f7ec fe95 	bl	8006c20 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 8019ef6:	f001 fbef 	bl	801b6d8 <SX1276Reset>

    RxChainCalibration( );
 8019efa:	f000 f937 	bl	801a16c <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8019efe:	2000      	movs	r0, #0
 8019f00:	f001 fbf1 	bl	801b6e6 <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 8019f04:	4b25      	ldr	r3, [pc, #148]	; (8019f9c <SX1276Init+0xf0>)
 8019f06:	0018      	movs	r0, r3
 8019f08:	f7ec ffea 	bl	8006ee0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019f0c:	230f      	movs	r3, #15
 8019f0e:	18fb      	adds	r3, r7, r3
 8019f10:	2200      	movs	r2, #0
 8019f12:	701a      	strb	r2, [r3, #0]
 8019f14:	e025      	b.n	8019f62 <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8019f16:	240f      	movs	r4, #15
 8019f18:	193b      	adds	r3, r7, r4
 8019f1a:	781a      	ldrb	r2, [r3, #0]
 8019f1c:	4920      	ldr	r1, [pc, #128]	; (8019fa0 <SX1276Init+0xf4>)
 8019f1e:	0013      	movs	r3, r2
 8019f20:	005b      	lsls	r3, r3, #1
 8019f22:	189b      	adds	r3, r3, r2
 8019f24:	5c5b      	ldrb	r3, [r3, r1]
 8019f26:	0018      	movs	r0, r3
 8019f28:	f001 fc4a 	bl	801b7c0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8019f2c:	193b      	adds	r3, r7, r4
 8019f2e:	781a      	ldrb	r2, [r3, #0]
 8019f30:	491b      	ldr	r1, [pc, #108]	; (8019fa0 <SX1276Init+0xf4>)
 8019f32:	0013      	movs	r3, r2
 8019f34:	005b      	lsls	r3, r3, #1
 8019f36:	189b      	adds	r3, r3, r2
 8019f38:	18cb      	adds	r3, r1, r3
 8019f3a:	3301      	adds	r3, #1
 8019f3c:	781b      	ldrb	r3, [r3, #0]
 8019f3e:	0018      	movs	r0, r3
 8019f40:	193b      	adds	r3, r7, r4
 8019f42:	781a      	ldrb	r2, [r3, #0]
 8019f44:	4916      	ldr	r1, [pc, #88]	; (8019fa0 <SX1276Init+0xf4>)
 8019f46:	0013      	movs	r3, r2
 8019f48:	005b      	lsls	r3, r3, #1
 8019f4a:	189b      	adds	r3, r3, r2
 8019f4c:	18cb      	adds	r3, r1, r3
 8019f4e:	3302      	adds	r3, #2
 8019f50:	781b      	ldrb	r3, [r3, #0]
 8019f52:	0019      	movs	r1, r3
 8019f54:	f001 fc8e 	bl	801b874 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019f58:	193b      	adds	r3, r7, r4
 8019f5a:	781a      	ldrb	r2, [r3, #0]
 8019f5c:	193b      	adds	r3, r7, r4
 8019f5e:	3201      	adds	r2, #1
 8019f60:	701a      	strb	r2, [r3, #0]
 8019f62:	230f      	movs	r3, #15
 8019f64:	18fb      	adds	r3, r7, r3
 8019f66:	781b      	ldrb	r3, [r3, #0]
 8019f68:	2b0f      	cmp	r3, #15
 8019f6a:	d9d4      	bls.n	8019f16 <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 8019f6c:	2000      	movs	r0, #0
 8019f6e:	f001 fc27 	bl	801b7c0 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8019f72:	4b0c      	ldr	r3, [pc, #48]	; (8019fa4 <SX1276Init+0xf8>)
 8019f74:	2200      	movs	r2, #0
 8019f76:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8019f78:	f7ec fe4c 	bl	8006c14 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8019f7c:	0003      	movs	r3, r0
 8019f7e:	3302      	adds	r3, #2
}
 8019f80:	0018      	movs	r0, r3
 8019f82:	46bd      	mov	sp, r7
 8019f84:	b005      	add	sp, #20
 8019f86:	bd90      	pop	{r4, r7, pc}
 8019f88:	20001098 	.word	0x20001098
 8019f8c:	0801bced 	.word	0x0801bced
 8019f90:	20001a88 	.word	0x20001a88
 8019f94:	20001b20 	.word	0x20001b20
 8019f98:	20001aa0 	.word	0x20001aa0
 8019f9c:	200001c4 	.word	0x200001c4
 8019fa0:	080217ac 	.word	0x080217ac
 8019fa4:	20001ab8 	.word	0x20001ab8

08019fa8 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8019fac:	4b02      	ldr	r3, [pc, #8]	; (8019fb8 <SX1276GetStatus+0x10>)
 8019fae:	791b      	ldrb	r3, [r3, #4]
}
 8019fb0:	0018      	movs	r0, r3
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bd80      	pop	{r7, pc}
 8019fb6:	46c0      	nop			; (mov r8, r8)
 8019fb8:	20001ab8 	.word	0x20001ab8

08019fbc <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8019fbc:	b590      	push	{r4, r7, lr}
 8019fbe:	b087      	sub	sp, #28
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8019fc4:	4b1d      	ldr	r3, [pc, #116]	; (801a03c <SX1276SetChannel+0x80>)
 8019fc6:	687a      	ldr	r2, [r7, #4]
 8019fc8:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	491c      	ldr	r1, [pc, #112]	; (801a040 <SX1276SetChannel+0x84>)
 8019fce:	0018      	movs	r0, r3
 8019fd0:	f7e6 f8a2 	bl	8000118 <__udivsi3>
 8019fd4:	0003      	movs	r3, r0
 8019fd6:	617b      	str	r3, [r7, #20]
 8019fd8:	6979      	ldr	r1, [r7, #20]
 8019fda:	000b      	movs	r3, r1
 8019fdc:	015b      	lsls	r3, r3, #5
 8019fde:	1a5b      	subs	r3, r3, r1
 8019fe0:	019a      	lsls	r2, r3, #6
 8019fe2:	1ad2      	subs	r2, r2, r3
 8019fe4:	00d2      	lsls	r2, r2, #3
 8019fe6:	1853      	adds	r3, r2, r1
 8019fe8:	687a      	ldr	r2, [r7, #4]
 8019fea:	1ad3      	subs	r3, r2, r3
 8019fec:	613b      	str	r3, [r7, #16]
 8019fee:	697b      	ldr	r3, [r7, #20]
 8019ff0:	021c      	lsls	r4, r3, #8
 8019ff2:	693b      	ldr	r3, [r7, #16]
 8019ff4:	021b      	lsls	r3, r3, #8
 8019ff6:	4a13      	ldr	r2, [pc, #76]	; (801a044 <SX1276SetChannel+0x88>)
 8019ff8:	4694      	mov	ip, r2
 8019ffa:	4463      	add	r3, ip
 8019ffc:	4910      	ldr	r1, [pc, #64]	; (801a040 <SX1276SetChannel+0x84>)
 8019ffe:	0018      	movs	r0, r3
 801a000:	f7e6 f88a 	bl	8000118 <__udivsi3>
 801a004:	0003      	movs	r3, r0
 801a006:	18e3      	adds	r3, r4, r3
 801a008:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	0c1b      	lsrs	r3, r3, #16
 801a00e:	b2db      	uxtb	r3, r3
 801a010:	0019      	movs	r1, r3
 801a012:	2006      	movs	r0, #6
 801a014:	f001 fc2e 	bl	801b874 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	0a1b      	lsrs	r3, r3, #8
 801a01c:	b2db      	uxtb	r3, r3
 801a01e:	0019      	movs	r1, r3
 801a020:	2007      	movs	r0, #7
 801a022:	f001 fc27 	bl	801b874 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	b2db      	uxtb	r3, r3
 801a02a:	0019      	movs	r1, r3
 801a02c:	2008      	movs	r0, #8
 801a02e:	f001 fc21 	bl	801b874 <SX1276Write>
}
 801a032:	46c0      	nop			; (mov r8, r8)
 801a034:	46bd      	mov	sp, r7
 801a036:	b007      	add	sp, #28
 801a038:	bd90      	pop	{r4, r7, pc}
 801a03a:	46c0      	nop			; (mov r8, r8)
 801a03c:	20001ab8 	.word	0x20001ab8
 801a040:	00003d09 	.word	0x00003d09
 801a044:	00001e84 	.word	0x00001e84

0801a048 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a048:	b5b0      	push	{r4, r5, r7, lr}
 801a04a:	b086      	sub	sp, #24
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	60f8      	str	r0, [r7, #12]
 801a050:	60b9      	str	r1, [r7, #8]
 801a052:	603b      	str	r3, [r7, #0]
 801a054:	1dbb      	adds	r3, r7, #6
 801a056:	801a      	strh	r2, [r3, #0]
    bool status = true;
 801a058:	2317      	movs	r3, #23
 801a05a:	18fb      	adds	r3, r7, r3
 801a05c:	2201      	movs	r2, #1
 801a05e:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801a060:	2314      	movs	r3, #20
 801a062:	18fb      	adds	r3, r7, r3
 801a064:	2200      	movs	r2, #0
 801a066:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 801a068:	2300      	movs	r3, #0
 801a06a:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 801a06c:	f001 f80a 	bl	801b084 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 801a070:	2000      	movs	r0, #0
 801a072:	f001 fba5 	bl	801b7c0 <SX1276SetModem>

    SX1276SetChannel( freq );
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	0018      	movs	r0, r3
 801a07a:	f7ff ff9f 	bl	8019fbc <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 801a07e:	68bb      	ldr	r3, [r7, #8]
 801a080:	0018      	movs	r0, r3
 801a082:	f001 fd05 	bl	801ba90 <GetFskBandwidthRegValue>
 801a086:	0003      	movs	r3, r0
 801a088:	0019      	movs	r1, r3
 801a08a:	2012      	movs	r0, #18
 801a08c:	f001 fbf2 	bl	801b874 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 801a090:	68bb      	ldr	r3, [r7, #8]
 801a092:	0018      	movs	r0, r3
 801a094:	f001 fcfc 	bl	801ba90 <GetFskBandwidthRegValue>
 801a098:	0003      	movs	r3, r0
 801a09a:	0019      	movs	r1, r3
 801a09c:	2013      	movs	r0, #19
 801a09e:	f001 fbe9 	bl	801b874 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801a0a2:	2005      	movs	r0, #5
 801a0a4:	f001 fb1f 	bl	801b6e6 <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 801a0a8:	2001      	movs	r0, #1
 801a0aa:	f7ec f9c0 	bl	800642e <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a0ae:	f003 fdd1 	bl	801dc54 <UTIL_TIMER_GetCurrentTime>
 801a0b2:	0003      	movs	r3, r0
 801a0b4:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a0b6:	e013      	b.n	801a0e0 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 801a0b8:	2514      	movs	r5, #20
 801a0ba:	197c      	adds	r4, r7, r5
 801a0bc:	2000      	movs	r0, #0
 801a0be:	f001 fabf 	bl	801b640 <SX1276ReadRssi>
 801a0c2:	0003      	movs	r3, r0
 801a0c4:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 801a0c6:	197a      	adds	r2, r7, r5
 801a0c8:	1dbb      	adds	r3, r7, #6
 801a0ca:	2100      	movs	r1, #0
 801a0cc:	5e52      	ldrsh	r2, [r2, r1]
 801a0ce:	2100      	movs	r1, #0
 801a0d0:	5e5b      	ldrsh	r3, [r3, r1]
 801a0d2:	429a      	cmp	r2, r3
 801a0d4:	dd04      	ble.n	801a0e0 <SX1276IsChannelFree+0x98>
        {
            status = false;
 801a0d6:	2317      	movs	r3, #23
 801a0d8:	18fb      	adds	r3, r7, r3
 801a0da:	2200      	movs	r2, #0
 801a0dc:	701a      	strb	r2, [r3, #0]
            break;
 801a0de:	e007      	b.n	801a0f0 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a0e0:	693b      	ldr	r3, [r7, #16]
 801a0e2:	0018      	movs	r0, r3
 801a0e4:	f003 fdca 	bl	801dc7c <UTIL_TIMER_GetElapsedTime>
 801a0e8:	0002      	movs	r2, r0
 801a0ea:	683b      	ldr	r3, [r7, #0]
 801a0ec:	4293      	cmp	r3, r2
 801a0ee:	d8e3      	bhi.n	801a0b8 <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 801a0f0:	f000 ffc8 	bl	801b084 <SX1276SetSleep>
    return status;
 801a0f4:	2317      	movs	r3, #23
 801a0f6:	18fb      	adds	r3, r7, r3
 801a0f8:	781b      	ldrb	r3, [r3, #0]
}
 801a0fa:	0018      	movs	r0, r3
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	b006      	add	sp, #24
 801a100:	bdb0      	pop	{r4, r5, r7, pc}

0801a102 <SX1276Random>:

uint32_t SX1276Random( void )
{
 801a102:	b580      	push	{r7, lr}
 801a104:	b082      	sub	sp, #8
 801a106:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 801a108:	2300      	movs	r3, #0
 801a10a:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 801a10c:	2001      	movs	r0, #1
 801a10e:	f001 fb57 	bl	801b7c0 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a112:	21ff      	movs	r1, #255	; 0xff
 801a114:	2011      	movs	r0, #17
 801a116:	f001 fbad 	bl	801b874 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801a11a:	2005      	movs	r0, #5
 801a11c:	f001 fae3 	bl	801b6e6 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 801a120:	1dfb      	adds	r3, r7, #7
 801a122:	2200      	movs	r2, #0
 801a124:	701a      	strb	r2, [r3, #0]
 801a126:	e015      	b.n	801a154 <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 801a128:	2001      	movs	r0, #1
 801a12a:	f7ec f980 	bl	800642e <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 801a12e:	202c      	movs	r0, #44	; 0x2c
 801a130:	f001 fbb1 	bl	801b896 <SX1276Read>
 801a134:	0003      	movs	r3, r0
 801a136:	001a      	movs	r2, r3
 801a138:	2301      	movs	r3, #1
 801a13a:	401a      	ands	r2, r3
 801a13c:	1dfb      	adds	r3, r7, #7
 801a13e:	781b      	ldrb	r3, [r3, #0]
 801a140:	409a      	lsls	r2, r3
 801a142:	0013      	movs	r3, r2
 801a144:	683a      	ldr	r2, [r7, #0]
 801a146:	4313      	orrs	r3, r2
 801a148:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 801a14a:	1dfb      	adds	r3, r7, #7
 801a14c:	781a      	ldrb	r2, [r3, #0]
 801a14e:	1dfb      	adds	r3, r7, #7
 801a150:	3201      	adds	r2, #1
 801a152:	701a      	strb	r2, [r3, #0]
 801a154:	1dfb      	adds	r3, r7, #7
 801a156:	781b      	ldrb	r3, [r3, #0]
 801a158:	2b1f      	cmp	r3, #31
 801a15a:	d9e5      	bls.n	801a128 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 801a15c:	f000 ff92 	bl	801b084 <SX1276SetSleep>

    return rnd;
 801a160:	683b      	ldr	r3, [r7, #0]
}
 801a162:	0018      	movs	r0, r3
 801a164:	46bd      	mov	sp, r7
 801a166:	b002      	add	sp, #8
 801a168:	bd80      	pop	{r7, pc}
	...

0801a16c <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 801a16c:	b590      	push	{r4, r7, lr}
 801a16e:	b087      	sub	sp, #28
 801a170:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 801a172:	2317      	movs	r3, #23
 801a174:	18fc      	adds	r4, r7, r3
 801a176:	2009      	movs	r0, #9
 801a178:	f001 fb8d 	bl	801b896 <SX1276Read>
 801a17c:	0003      	movs	r3, r0
 801a17e:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801a180:	2006      	movs	r0, #6
 801a182:	f001 fb88 	bl	801b896 <SX1276Read>
 801a186:	0003      	movs	r3, r0
 801a188:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801a18a:	2007      	movs	r0, #7
 801a18c:	f001 fb83 	bl	801b896 <SX1276Read>
 801a190:	0003      	movs	r3, r0
 801a192:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801a194:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 801a196:	2008      	movs	r0, #8
 801a198:	f001 fb7d 	bl	801b896 <SX1276Read>
 801a19c:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801a19e:	4323      	orrs	r3, r4
 801a1a0:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 801a1a2:	693b      	ldr	r3, [r7, #16]
 801a1a4:	0a1b      	lsrs	r3, r3, #8
 801a1a6:	60fb      	str	r3, [r7, #12]
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	021b      	lsls	r3, r3, #8
 801a1ac:	693a      	ldr	r2, [r7, #16]
 801a1ae:	1ad3      	subs	r3, r2, r3
 801a1b0:	60bb      	str	r3, [r7, #8]
 801a1b2:	68f9      	ldr	r1, [r7, #12]
 801a1b4:	000b      	movs	r3, r1
 801a1b6:	015b      	lsls	r3, r3, #5
 801a1b8:	1a5b      	subs	r3, r3, r1
 801a1ba:	019a      	lsls	r2, r3, #6
 801a1bc:	1ad2      	subs	r2, r2, r3
 801a1be:	00d2      	lsls	r2, r2, #3
 801a1c0:	1850      	adds	r0, r2, r1
 801a1c2:	68b9      	ldr	r1, [r7, #8]
 801a1c4:	000b      	movs	r3, r1
 801a1c6:	015b      	lsls	r3, r3, #5
 801a1c8:	1a5b      	subs	r3, r3, r1
 801a1ca:	019a      	lsls	r2, r3, #6
 801a1cc:	1ad2      	subs	r2, r2, r3
 801a1ce:	00d2      	lsls	r2, r2, #3
 801a1d0:	1853      	adds	r3, r2, r1
 801a1d2:	3380      	adds	r3, #128	; 0x80
 801a1d4:	0a1b      	lsrs	r3, r3, #8
 801a1d6:	18c3      	adds	r3, r0, r3
 801a1d8:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 801a1da:	2100      	movs	r1, #0
 801a1dc:	2009      	movs	r0, #9
 801a1de:	f001 fb49 	bl	801b874 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801a1e2:	203b      	movs	r0, #59	; 0x3b
 801a1e4:	f001 fb57 	bl	801b896 <SX1276Read>
 801a1e8:	0003      	movs	r3, r0
 801a1ea:	001a      	movs	r2, r3
 801a1ec:	2340      	movs	r3, #64	; 0x40
 801a1ee:	4313      	orrs	r3, r2
 801a1f0:	b2db      	uxtb	r3, r3
 801a1f2:	0019      	movs	r1, r3
 801a1f4:	203b      	movs	r0, #59	; 0x3b
 801a1f6:	f001 fb3d 	bl	801b874 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801a1fa:	46c0      	nop			; (mov r8, r8)
 801a1fc:	203b      	movs	r0, #59	; 0x3b
 801a1fe:	f001 fb4a 	bl	801b896 <SX1276Read>
 801a202:	0003      	movs	r3, r0
 801a204:	001a      	movs	r2, r3
 801a206:	2320      	movs	r3, #32
 801a208:	4013      	ands	r3, r2
 801a20a:	2b20      	cmp	r3, #32
 801a20c:	d0f6      	beq.n	801a1fc <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 801a20e:	4b14      	ldr	r3, [pc, #80]	; (801a260 <RxChainCalibration+0xf4>)
 801a210:	0018      	movs	r0, r3
 801a212:	f7ff fed3 	bl	8019fbc <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801a216:	203b      	movs	r0, #59	; 0x3b
 801a218:	f001 fb3d 	bl	801b896 <SX1276Read>
 801a21c:	0003      	movs	r3, r0
 801a21e:	001a      	movs	r2, r3
 801a220:	2340      	movs	r3, #64	; 0x40
 801a222:	4313      	orrs	r3, r2
 801a224:	b2db      	uxtb	r3, r3
 801a226:	0019      	movs	r1, r3
 801a228:	203b      	movs	r0, #59	; 0x3b
 801a22a:	f001 fb23 	bl	801b874 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801a22e:	46c0      	nop			; (mov r8, r8)
 801a230:	203b      	movs	r0, #59	; 0x3b
 801a232:	f001 fb30 	bl	801b896 <SX1276Read>
 801a236:	0003      	movs	r3, r0
 801a238:	001a      	movs	r2, r3
 801a23a:	2320      	movs	r3, #32
 801a23c:	4013      	ands	r3, r2
 801a23e:	2b20      	cmp	r3, #32
 801a240:	d0f6      	beq.n	801a230 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 801a242:	2317      	movs	r3, #23
 801a244:	18fb      	adds	r3, r7, r3
 801a246:	781b      	ldrb	r3, [r3, #0]
 801a248:	0019      	movs	r1, r3
 801a24a:	2009      	movs	r0, #9
 801a24c:	f001 fb12 	bl	801b874 <SX1276Write>
    SX1276SetChannel( initialFreq );
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	0018      	movs	r0, r3
 801a254:	f7ff feb2 	bl	8019fbc <SX1276SetChannel>
}
 801a258:	46c0      	nop			; (mov r8, r8)
 801a25a:	46bd      	mov	sp, r7
 801a25c:	b007      	add	sp, #28
 801a25e:	bd90      	pop	{r4, r7, pc}
 801a260:	33bca100 	.word	0x33bca100

0801a264 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 801a264:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a266:	46c6      	mov	lr, r8
 801a268:	b500      	push	{lr}
 801a26a:	b084      	sub	sp, #16
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	60b9      	str	r1, [r7, #8]
 801a270:	607a      	str	r2, [r7, #4]
 801a272:	0019      	movs	r1, r3
 801a274:	240f      	movs	r4, #15
 801a276:	193b      	adds	r3, r7, r4
 801a278:	1c02      	adds	r2, r0, #0
 801a27a:	701a      	strb	r2, [r3, #0]
 801a27c:	230e      	movs	r3, #14
 801a27e:	18fb      	adds	r3, r7, r3
 801a280:	1c0a      	adds	r2, r1, #0
 801a282:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801a284:	193b      	adds	r3, r7, r4
 801a286:	781b      	ldrb	r3, [r3, #0]
 801a288:	0018      	movs	r0, r3
 801a28a:	f001 fa99 	bl	801b7c0 <SX1276SetModem>

    switch( modem )
 801a28e:	193b      	adds	r3, r7, r4
 801a290:	781b      	ldrb	r3, [r3, #0]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d003      	beq.n	801a29e <SX1276SetRxConfig+0x3a>
 801a296:	2b01      	cmp	r3, #1
 801a298:	d100      	bne.n	801a29c <SX1276SetRxConfig+0x38>
 801a29a:	e0fb      	b.n	801a494 <SX1276SetRxConfig+0x230>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 801a29c:	e26e      	b.n	801a77c <SX1276SetRxConfig+0x518>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 801a29e:	4bbd      	ldr	r3, [pc, #756]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a2a0:	68ba      	ldr	r2, [r7, #8]
 801a2a2:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 801a2a4:	4bbb      	ldr	r3, [pc, #748]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a2a6:	687a      	ldr	r2, [r7, #4]
 801a2a8:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 801a2aa:	4bba      	ldr	r3, [pc, #744]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a2ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a2ae:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 801a2b0:	4bb8      	ldr	r3, [pc, #736]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a2b2:	222c      	movs	r2, #44	; 0x2c
 801a2b4:	2108      	movs	r1, #8
 801a2b6:	468c      	mov	ip, r1
 801a2b8:	44bc      	add	ip, r7
 801a2ba:	4462      	add	r2, ip
 801a2bc:	2122      	movs	r1, #34	; 0x22
 801a2be:	7812      	ldrb	r2, [r2, #0]
 801a2c0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 801a2c2:	4bb4      	ldr	r3, [pc, #720]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a2c4:	2130      	movs	r1, #48	; 0x30
 801a2c6:	2408      	movs	r4, #8
 801a2c8:	193a      	adds	r2, r7, r4
 801a2ca:	1852      	adds	r2, r2, r1
 801a2cc:	2123      	movs	r1, #35	; 0x23
 801a2ce:	7812      	ldrb	r2, [r2, #0]
 801a2d0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801a2d2:	4bb0      	ldr	r3, [pc, #704]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a2d4:	2034      	movs	r0, #52	; 0x34
 801a2d6:	193a      	adds	r2, r7, r4
 801a2d8:	1812      	adds	r2, r2, r0
 801a2da:	2124      	movs	r1, #36	; 0x24
 801a2dc:	7812      	ldrb	r2, [r2, #0]
 801a2de:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801a2e0:	4bac      	ldr	r3, [pc, #688]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a2e2:	2220      	movs	r2, #32
 801a2e4:	2020      	movs	r0, #32
 801a2e6:	4684      	mov	ip, r0
 801a2e8:	2108      	movs	r1, #8
 801a2ea:	4688      	mov	r8, r1
 801a2ec:	44b8      	add	r8, r7
 801a2ee:	44c4      	add	ip, r8
 801a2f0:	4462      	add	r2, ip
 801a2f2:	2125      	movs	r1, #37	; 0x25
 801a2f4:	7812      	ldrb	r2, [r2, #0]
 801a2f6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 801a2f8:	4ba6      	ldr	r3, [pc, #664]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a2fa:	2224      	movs	r2, #36	; 0x24
 801a2fc:	2020      	movs	r0, #32
 801a2fe:	4684      	mov	ip, r0
 801a300:	2108      	movs	r1, #8
 801a302:	4688      	mov	r8, r1
 801a304:	44b8      	add	r8, r7
 801a306:	44c4      	add	ip, r8
 801a308:	4462      	add	r2, ip
 801a30a:	2126      	movs	r1, #38	; 0x26
 801a30c:	7812      	ldrb	r2, [r2, #0]
 801a30e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 801a310:	4ba0      	ldr	r3, [pc, #640]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a312:	2624      	movs	r6, #36	; 0x24
 801a314:	193a      	adds	r2, r7, r4
 801a316:	1992      	adds	r2, r2, r6
 801a318:	8812      	ldrh	r2, [r2, #0]
 801a31a:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 801a31c:	2328      	movs	r3, #40	; 0x28
 801a31e:	2208      	movs	r2, #8
 801a320:	4694      	mov	ip, r2
 801a322:	44bc      	add	ip, r7
 801a324:	4463      	add	r3, ip
 801a326:	881b      	ldrh	r3, [r3, #0]
 801a328:	0018      	movs	r0, r3
 801a32a:	f7e8 f983 	bl	8002634 <__aeabi_i2d>
 801a32e:	0004      	movs	r4, r0
 801a330:	000d      	movs	r5, r1
 801a332:	6878      	ldr	r0, [r7, #4]
 801a334:	f7e8 f9ae 	bl	8002694 <__aeabi_ui2d>
 801a338:	0002      	movs	r2, r0
 801a33a:	000b      	movs	r3, r1
 801a33c:	2000      	movs	r0, #0
 801a33e:	4996      	ldr	r1, [pc, #600]	; (801a598 <SX1276SetRxConfig+0x334>)
 801a340:	f7e6 ff3e 	bl	80011c0 <__aeabi_ddiv>
 801a344:	0002      	movs	r2, r0
 801a346:	000b      	movs	r3, r1
 801a348:	0010      	movs	r0, r2
 801a34a:	0019      	movs	r1, r3
 801a34c:	2200      	movs	r2, #0
 801a34e:	4b93      	ldr	r3, [pc, #588]	; (801a59c <SX1276SetRxConfig+0x338>)
 801a350:	f7e7 fb3c 	bl	80019cc <__aeabi_dmul>
 801a354:	0002      	movs	r2, r0
 801a356:	000b      	movs	r3, r1
 801a358:	0020      	movs	r0, r4
 801a35a:	0029      	movs	r1, r5
 801a35c:	f7e7 fb36 	bl	80019cc <__aeabi_dmul>
 801a360:	0002      	movs	r2, r0
 801a362:	000b      	movs	r3, r1
 801a364:	0010      	movs	r0, r2
 801a366:	0019      	movs	r1, r3
 801a368:	2200      	movs	r2, #0
 801a36a:	4b8d      	ldr	r3, [pc, #564]	; (801a5a0 <SX1276SetRxConfig+0x33c>)
 801a36c:	f7e7 fb2e 	bl	80019cc <__aeabi_dmul>
 801a370:	0002      	movs	r2, r0
 801a372:	000b      	movs	r3, r1
 801a374:	0010      	movs	r0, r2
 801a376:	0019      	movs	r1, r3
 801a378:	f7e6 f8ca 	bl	8000510 <__aeabi_d2uiz>
 801a37c:	0002      	movs	r2, r0
 801a37e:	4b85      	ldr	r3, [pc, #532]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a380:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 801a382:	6878      	ldr	r0, [r7, #4]
 801a384:	f7e8 f986 	bl	8002694 <__aeabi_ui2d>
 801a388:	0002      	movs	r2, r0
 801a38a:	000b      	movs	r3, r1
 801a38c:	2000      	movs	r0, #0
 801a38e:	4985      	ldr	r1, [pc, #532]	; (801a5a4 <SX1276SetRxConfig+0x340>)
 801a390:	f7e6 ff16 	bl	80011c0 <__aeabi_ddiv>
 801a394:	0002      	movs	r2, r0
 801a396:	000b      	movs	r3, r1
 801a398:	0010      	movs	r0, r2
 801a39a:	0019      	movs	r1, r3
 801a39c:	f7e6 f8b8 	bl	8000510 <__aeabi_d2uiz>
 801a3a0:	0003      	movs	r3, r0
 801a3a2:	b29b      	uxth	r3, r3
 801a3a4:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	0a1b      	lsrs	r3, r3, #8
 801a3aa:	b2db      	uxtb	r3, r3
 801a3ac:	0019      	movs	r1, r3
 801a3ae:	2002      	movs	r0, #2
 801a3b0:	f001 fa60 	bl	801b874 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	b2db      	uxtb	r3, r3
 801a3b8:	0019      	movs	r1, r3
 801a3ba:	2003      	movs	r0, #3
 801a3bc:	f001 fa5a 	bl	801b874 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	0018      	movs	r0, r3
 801a3c4:	f001 fb64 	bl	801ba90 <GetFskBandwidthRegValue>
 801a3c8:	0003      	movs	r3, r0
 801a3ca:	0019      	movs	r1, r3
 801a3cc:	2012      	movs	r0, #18
 801a3ce:	f001 fa51 	bl	801b874 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 801a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d4:	0018      	movs	r0, r3
 801a3d6:	f001 fb5b 	bl	801ba90 <GetFskBandwidthRegValue>
 801a3da:	0003      	movs	r3, r0
 801a3dc:	0019      	movs	r1, r3
 801a3de:	2013      	movs	r0, #19
 801a3e0:	f001 fa48 	bl	801b874 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801a3e4:	2408      	movs	r4, #8
 801a3e6:	193b      	adds	r3, r7, r4
 801a3e8:	199b      	adds	r3, r3, r6
 801a3ea:	881b      	ldrh	r3, [r3, #0]
 801a3ec:	0a1b      	lsrs	r3, r3, #8
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	b2db      	uxtb	r3, r3
 801a3f2:	0019      	movs	r1, r3
 801a3f4:	2025      	movs	r0, #37	; 0x25
 801a3f6:	f001 fa3d 	bl	801b874 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801a3fa:	193b      	adds	r3, r7, r4
 801a3fc:	199b      	adds	r3, r3, r6
 801a3fe:	881b      	ldrh	r3, [r3, #0]
 801a400:	b2db      	uxtb	r3, r3
 801a402:	0019      	movs	r1, r3
 801a404:	2026      	movs	r0, #38	; 0x26
 801a406:	f001 fa35 	bl	801b874 <SX1276Write>
            if( fixLen == 1 )
 801a40a:	222c      	movs	r2, #44	; 0x2c
 801a40c:	193b      	adds	r3, r7, r4
 801a40e:	189b      	adds	r3, r3, r2
 801a410:	781b      	ldrb	r3, [r3, #0]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d008      	beq.n	801a428 <SX1276SetRxConfig+0x1c4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 801a416:	2130      	movs	r1, #48	; 0x30
 801a418:	193b      	adds	r3, r7, r4
 801a41a:	185b      	adds	r3, r3, r1
 801a41c:	781b      	ldrb	r3, [r3, #0]
 801a41e:	0019      	movs	r1, r3
 801a420:	2032      	movs	r0, #50	; 0x32
 801a422:	f001 fa27 	bl	801b874 <SX1276Write>
 801a426:	e003      	b.n	801a430 <SX1276SetRxConfig+0x1cc>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 801a428:	21ff      	movs	r1, #255	; 0xff
 801a42a:	2032      	movs	r0, #50	; 0x32
 801a42c:	f001 fa22 	bl	801b874 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801a430:	2030      	movs	r0, #48	; 0x30
 801a432:	f001 fa30 	bl	801b896 <SX1276Read>
 801a436:	0003      	movs	r3, r0
 801a438:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801a43a:	226f      	movs	r2, #111	; 0x6f
 801a43c:	4013      	ands	r3, r2
 801a43e:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801a440:	232c      	movs	r3, #44	; 0x2c
 801a442:	2108      	movs	r1, #8
 801a444:	468c      	mov	ip, r1
 801a446:	44bc      	add	ip, r7
 801a448:	4463      	add	r3, ip
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d001      	beq.n	801a454 <SX1276SetRxConfig+0x1f0>
 801a450:	2300      	movs	r3, #0
 801a452:	e001      	b.n	801a458 <SX1276SetRxConfig+0x1f4>
 801a454:	2380      	movs	r3, #128	; 0x80
 801a456:	425b      	negs	r3, r3
 801a458:	4313      	orrs	r3, r2
 801a45a:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801a45c:	2334      	movs	r3, #52	; 0x34
 801a45e:	2108      	movs	r1, #8
 801a460:	468c      	mov	ip, r1
 801a462:	44bc      	add	ip, r7
 801a464:	4463      	add	r3, ip
 801a466:	781b      	ldrb	r3, [r3, #0]
 801a468:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801a46a:	b25b      	sxtb	r3, r3
 801a46c:	4313      	orrs	r3, r2
 801a46e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801a470:	b2db      	uxtb	r3, r3
 801a472:	0019      	movs	r1, r3
 801a474:	2030      	movs	r0, #48	; 0x30
 801a476:	f001 f9fd 	bl	801b874 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801a47a:	2031      	movs	r0, #49	; 0x31
 801a47c:	f001 fa0b 	bl	801b896 <SX1276Read>
 801a480:	0003      	movs	r3, r0
 801a482:	001a      	movs	r2, r3
 801a484:	2340      	movs	r3, #64	; 0x40
 801a486:	4313      	orrs	r3, r2
 801a488:	b2db      	uxtb	r3, r3
 801a48a:	0019      	movs	r1, r3
 801a48c:	2031      	movs	r0, #49	; 0x31
 801a48e:	f001 f9f1 	bl	801b874 <SX1276Write>
        break;
 801a492:	e173      	b.n	801a77c <SX1276SetRxConfig+0x518>
            if( bandwidth > 2 )
 801a494:	68bb      	ldr	r3, [r7, #8]
 801a496:	2b02      	cmp	r3, #2
 801a498:	d900      	bls.n	801a49c <SX1276SetRxConfig+0x238>
                while( 1 );
 801a49a:	e7fe      	b.n	801a49a <SX1276SetRxConfig+0x236>
            bandwidth += 7;
 801a49c:	68bb      	ldr	r3, [r7, #8]
 801a49e:	3307      	adds	r3, #7
 801a4a0:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801a4a2:	4b3c      	ldr	r3, [pc, #240]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a4a4:	68ba      	ldr	r2, [r7, #8]
 801a4a6:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801a4a8:	4b3a      	ldr	r3, [pc, #232]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a4aa:	687a      	ldr	r2, [r7, #4]
 801a4ac:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801a4ae:	4b39      	ldr	r3, [pc, #228]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a4b0:	220e      	movs	r2, #14
 801a4b2:	18ba      	adds	r2, r7, r2
 801a4b4:	214d      	movs	r1, #77	; 0x4d
 801a4b6:	7812      	ldrb	r2, [r2, #0]
 801a4b8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801a4ba:	4b36      	ldr	r3, [pc, #216]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a4bc:	2224      	movs	r2, #36	; 0x24
 801a4be:	2108      	movs	r1, #8
 801a4c0:	468c      	mov	ip, r1
 801a4c2:	44bc      	add	ip, r7
 801a4c4:	4462      	add	r2, ip
 801a4c6:	214e      	movs	r1, #78	; 0x4e
 801a4c8:	8812      	ldrh	r2, [r2, #0]
 801a4ca:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801a4cc:	4b31      	ldr	r3, [pc, #196]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a4ce:	222c      	movs	r2, #44	; 0x2c
 801a4d0:	2108      	movs	r1, #8
 801a4d2:	468c      	mov	ip, r1
 801a4d4:	44bc      	add	ip, r7
 801a4d6:	4462      	add	r2, ip
 801a4d8:	2150      	movs	r1, #80	; 0x50
 801a4da:	7812      	ldrb	r2, [r2, #0]
 801a4dc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 801a4de:	4b2d      	ldr	r3, [pc, #180]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a4e0:	2230      	movs	r2, #48	; 0x30
 801a4e2:	2108      	movs	r1, #8
 801a4e4:	468c      	mov	ip, r1
 801a4e6:	44bc      	add	ip, r7
 801a4e8:	4462      	add	r2, ip
 801a4ea:	2151      	movs	r1, #81	; 0x51
 801a4ec:	7812      	ldrb	r2, [r2, #0]
 801a4ee:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801a4f0:	4b28      	ldr	r3, [pc, #160]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a4f2:	2234      	movs	r2, #52	; 0x34
 801a4f4:	2108      	movs	r1, #8
 801a4f6:	468c      	mov	ip, r1
 801a4f8:	44bc      	add	ip, r7
 801a4fa:	4462      	add	r2, ip
 801a4fc:	2152      	movs	r1, #82	; 0x52
 801a4fe:	7812      	ldrb	r2, [r2, #0]
 801a500:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801a502:	4b24      	ldr	r3, [pc, #144]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a504:	2238      	movs	r2, #56	; 0x38
 801a506:	2108      	movs	r1, #8
 801a508:	468c      	mov	ip, r1
 801a50a:	44bc      	add	ip, r7
 801a50c:	4462      	add	r2, ip
 801a50e:	2153      	movs	r1, #83	; 0x53
 801a510:	7812      	ldrb	r2, [r2, #0]
 801a512:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801a514:	4b1f      	ldr	r3, [pc, #124]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a516:	223c      	movs	r2, #60	; 0x3c
 801a518:	2108      	movs	r1, #8
 801a51a:	468c      	mov	ip, r1
 801a51c:	44bc      	add	ip, r7
 801a51e:	4462      	add	r2, ip
 801a520:	2154      	movs	r1, #84	; 0x54
 801a522:	7812      	ldrb	r2, [r2, #0]
 801a524:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801a526:	4b1b      	ldr	r3, [pc, #108]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a528:	2220      	movs	r2, #32
 801a52a:	2120      	movs	r1, #32
 801a52c:	468c      	mov	ip, r1
 801a52e:	2108      	movs	r1, #8
 801a530:	4688      	mov	r8, r1
 801a532:	44b8      	add	r8, r7
 801a534:	44c4      	add	ip, r8
 801a536:	4462      	add	r2, ip
 801a538:	2155      	movs	r1, #85	; 0x55
 801a53a:	7812      	ldrb	r2, [r2, #0]
 801a53c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 801a53e:	4b15      	ldr	r3, [pc, #84]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a540:	2224      	movs	r2, #36	; 0x24
 801a542:	2120      	movs	r1, #32
 801a544:	468c      	mov	ip, r1
 801a546:	2108      	movs	r1, #8
 801a548:	4688      	mov	r8, r1
 801a54a:	44b8      	add	r8, r7
 801a54c:	44c4      	add	ip, r8
 801a54e:	4462      	add	r2, ip
 801a550:	2156      	movs	r1, #86	; 0x56
 801a552:	7812      	ldrb	r2, [r2, #0]
 801a554:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	2b0c      	cmp	r3, #12
 801a55a:	d902      	bls.n	801a562 <SX1276SetRxConfig+0x2fe>
                datarate = 12;
 801a55c:	230c      	movs	r3, #12
 801a55e:	607b      	str	r3, [r7, #4]
 801a560:	e004      	b.n	801a56c <SX1276SetRxConfig+0x308>
            else if( datarate < 6 )
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	2b05      	cmp	r3, #5
 801a566:	d801      	bhi.n	801a56c <SX1276SetRxConfig+0x308>
                datarate = 6;
 801a568:	2306      	movs	r3, #6
 801a56a:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a56c:	68bb      	ldr	r3, [r7, #8]
 801a56e:	2b07      	cmp	r3, #7
 801a570:	d105      	bne.n	801a57e <SX1276SetRxConfig+0x31a>
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	2b0b      	cmp	r3, #11
 801a576:	d008      	beq.n	801a58a <SX1276SetRxConfig+0x326>
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	2b0c      	cmp	r3, #12
 801a57c:	d005      	beq.n	801a58a <SX1276SetRxConfig+0x326>
 801a57e:	68bb      	ldr	r3, [r7, #8]
 801a580:	2b08      	cmp	r3, #8
 801a582:	d111      	bne.n	801a5a8 <SX1276SetRxConfig+0x344>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	2b0c      	cmp	r3, #12
 801a588:	d10e      	bne.n	801a5a8 <SX1276SetRxConfig+0x344>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801a58a:	4b02      	ldr	r3, [pc, #8]	; (801a594 <SX1276SetRxConfig+0x330>)
 801a58c:	224c      	movs	r2, #76	; 0x4c
 801a58e:	2101      	movs	r1, #1
 801a590:	5499      	strb	r1, [r3, r2]
 801a592:	e00d      	b.n	801a5b0 <SX1276SetRxConfig+0x34c>
 801a594:	20001ab8 	.word	0x20001ab8
 801a598:	3ff00000 	.word	0x3ff00000
 801a59c:	40200000 	.word	0x40200000
 801a5a0:	408f4000 	.word	0x408f4000
 801a5a4:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801a5a8:	4b77      	ldr	r3, [pc, #476]	; (801a788 <SX1276SetRxConfig+0x524>)
 801a5aa:	224c      	movs	r2, #76	; 0x4c
 801a5ac:	2100      	movs	r1, #0
 801a5ae:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801a5b0:	201d      	movs	r0, #29
 801a5b2:	f001 f970 	bl	801b896 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	b2db      	uxtb	r3, r3
 801a5ba:	011b      	lsls	r3, r3, #4
 801a5bc:	b2da      	uxtb	r2, r3
 801a5be:	230e      	movs	r3, #14
 801a5c0:	18fb      	adds	r3, r7, r3
 801a5c2:	781b      	ldrb	r3, [r3, #0]
 801a5c4:	18db      	adds	r3, r3, r3
 801a5c6:	b2db      	uxtb	r3, r3
 801a5c8:	4313      	orrs	r3, r2
 801a5ca:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a5cc:	242c      	movs	r4, #44	; 0x2c
 801a5ce:	2608      	movs	r6, #8
 801a5d0:	19bb      	adds	r3, r7, r6
 801a5d2:	191b      	adds	r3, r3, r4
 801a5d4:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a5d6:	4313      	orrs	r3, r2
 801a5d8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a5da:	0019      	movs	r1, r3
 801a5dc:	201d      	movs	r0, #29
 801a5de:	f001 f949 	bl	801b874 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801a5e2:	201e      	movs	r0, #30
 801a5e4:	f001 f957 	bl	801b896 <SX1276Read>
 801a5e8:	0003      	movs	r3, r0
 801a5ea:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 801a5ec:	2308      	movs	r3, #8
 801a5ee:	4013      	ands	r3, r2
 801a5f0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	b2db      	uxtb	r3, r3
 801a5f6:	011b      	lsls	r3, r3, #4
 801a5f8:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 801a5fa:	4313      	orrs	r3, r2
 801a5fc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801a5fe:	2334      	movs	r3, #52	; 0x34
 801a600:	2108      	movs	r1, #8
 801a602:	468c      	mov	ip, r1
 801a604:	44bc      	add	ip, r7
 801a606:	4463      	add	r3, ip
 801a608:	781b      	ldrb	r3, [r3, #0]
 801a60a:	009b      	lsls	r3, r3, #2
 801a60c:	b2db      	uxtb	r3, r3
 801a60e:	4313      	orrs	r3, r2
 801a610:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 801a612:	2528      	movs	r5, #40	; 0x28
 801a614:	19bb      	adds	r3, r7, r6
 801a616:	195b      	adds	r3, r3, r5
 801a618:	881b      	ldrh	r3, [r3, #0]
 801a61a:	0a1b      	lsrs	r3, r3, #8
 801a61c:	b29b      	uxth	r3, r3
 801a61e:	b2db      	uxtb	r3, r3
 801a620:	2103      	movs	r1, #3
 801a622:	400b      	ands	r3, r1
 801a624:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801a626:	4313      	orrs	r3, r2
 801a628:	b2db      	uxtb	r3, r3
 801a62a:	0019      	movs	r1, r3
 801a62c:	201e      	movs	r0, #30
 801a62e:	f001 f921 	bl	801b874 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801a632:	2026      	movs	r0, #38	; 0x26
 801a634:	f001 f92f 	bl	801b896 <SX1276Read>
 801a638:	0003      	movs	r3, r0
 801a63a:	b25b      	sxtb	r3, r3
 801a63c:	2208      	movs	r2, #8
 801a63e:	4393      	bics	r3, r2
 801a640:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801a642:	4b51      	ldr	r3, [pc, #324]	; (801a788 <SX1276SetRxConfig+0x524>)
 801a644:	214c      	movs	r1, #76	; 0x4c
 801a646:	5c5b      	ldrb	r3, [r3, r1]
 801a648:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801a64a:	b25b      	sxtb	r3, r3
 801a64c:	4313      	orrs	r3, r2
 801a64e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801a650:	b2db      	uxtb	r3, r3
 801a652:	0019      	movs	r1, r3
 801a654:	2026      	movs	r0, #38	; 0x26
 801a656:	f001 f90d 	bl	801b874 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 801a65a:	19bb      	adds	r3, r7, r6
 801a65c:	195b      	adds	r3, r3, r5
 801a65e:	881b      	ldrh	r3, [r3, #0]
 801a660:	b2db      	uxtb	r3, r3
 801a662:	0019      	movs	r1, r3
 801a664:	201f      	movs	r0, #31
 801a666:	f001 f905 	bl	801b874 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801a66a:	2524      	movs	r5, #36	; 0x24
 801a66c:	19bb      	adds	r3, r7, r6
 801a66e:	195b      	adds	r3, r3, r5
 801a670:	881b      	ldrh	r3, [r3, #0]
 801a672:	0a1b      	lsrs	r3, r3, #8
 801a674:	b29b      	uxth	r3, r3
 801a676:	b2db      	uxtb	r3, r3
 801a678:	0019      	movs	r1, r3
 801a67a:	2020      	movs	r0, #32
 801a67c:	f001 f8fa 	bl	801b874 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801a680:	19bb      	adds	r3, r7, r6
 801a682:	195b      	adds	r3, r3, r5
 801a684:	881b      	ldrh	r3, [r3, #0]
 801a686:	b2db      	uxtb	r3, r3
 801a688:	0019      	movs	r1, r3
 801a68a:	2021      	movs	r0, #33	; 0x21
 801a68c:	f001 f8f2 	bl	801b874 <SX1276Write>
            if( fixLen == 1 )
 801a690:	19bb      	adds	r3, r7, r6
 801a692:	191b      	adds	r3, r3, r4
 801a694:	781b      	ldrb	r3, [r3, #0]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d009      	beq.n	801a6ae <SX1276SetRxConfig+0x44a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 801a69a:	2330      	movs	r3, #48	; 0x30
 801a69c:	2208      	movs	r2, #8
 801a69e:	4694      	mov	ip, r2
 801a6a0:	44bc      	add	ip, r7
 801a6a2:	4463      	add	r3, ip
 801a6a4:	781b      	ldrb	r3, [r3, #0]
 801a6a6:	0019      	movs	r1, r3
 801a6a8:	2022      	movs	r0, #34	; 0x22
 801a6aa:	f001 f8e3 	bl	801b874 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a6ae:	4b36      	ldr	r3, [pc, #216]	; (801a788 <SX1276SetRxConfig+0x524>)
 801a6b0:	2253      	movs	r2, #83	; 0x53
 801a6b2:	5c9b      	ldrb	r3, [r3, r2]
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d013      	beq.n	801a6e0 <SX1276SetRxConfig+0x47c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801a6b8:	2044      	movs	r0, #68	; 0x44
 801a6ba:	f001 f8ec 	bl	801b896 <SX1276Read>
 801a6be:	0003      	movs	r3, r0
 801a6c0:	001a      	movs	r2, r3
 801a6c2:	2380      	movs	r3, #128	; 0x80
 801a6c4:	425b      	negs	r3, r3
 801a6c6:	4313      	orrs	r3, r2
 801a6c8:	b2db      	uxtb	r3, r3
 801a6ca:	0019      	movs	r1, r3
 801a6cc:	2044      	movs	r0, #68	; 0x44
 801a6ce:	f001 f8d1 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801a6d2:	4b2d      	ldr	r3, [pc, #180]	; (801a788 <SX1276SetRxConfig+0x524>)
 801a6d4:	2254      	movs	r2, #84	; 0x54
 801a6d6:	5c9b      	ldrb	r3, [r3, r2]
 801a6d8:	0019      	movs	r1, r3
 801a6da:	2024      	movs	r0, #36	; 0x24
 801a6dc:	f001 f8ca 	bl	801b874 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 801a6e0:	68bb      	ldr	r3, [r7, #8]
 801a6e2:	2b09      	cmp	r3, #9
 801a6e4:	d10d      	bne.n	801a702 <SX1276SetRxConfig+0x49e>
 801a6e6:	4b28      	ldr	r3, [pc, #160]	; (801a788 <SX1276SetRxConfig+0x524>)
 801a6e8:	689b      	ldr	r3, [r3, #8]
 801a6ea:	4a28      	ldr	r2, [pc, #160]	; (801a78c <SX1276SetRxConfig+0x528>)
 801a6ec:	4293      	cmp	r3, r2
 801a6ee:	d908      	bls.n	801a702 <SX1276SetRxConfig+0x49e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 801a6f0:	2102      	movs	r1, #2
 801a6f2:	2036      	movs	r0, #54	; 0x36
 801a6f4:	f001 f8be 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 801a6f8:	2164      	movs	r1, #100	; 0x64
 801a6fa:	203a      	movs	r0, #58	; 0x3a
 801a6fc:	f001 f8ba 	bl	801b874 <SX1276Write>
 801a700:	e00f      	b.n	801a722 <SX1276SetRxConfig+0x4be>
            else if( bandwidth == 9 )
 801a702:	68bb      	ldr	r3, [r7, #8]
 801a704:	2b09      	cmp	r3, #9
 801a706:	d108      	bne.n	801a71a <SX1276SetRxConfig+0x4b6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 801a708:	2102      	movs	r1, #2
 801a70a:	2036      	movs	r0, #54	; 0x36
 801a70c:	f001 f8b2 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 801a710:	217f      	movs	r1, #127	; 0x7f
 801a712:	203a      	movs	r0, #58	; 0x3a
 801a714:	f001 f8ae 	bl	801b874 <SX1276Write>
 801a718:	e003      	b.n	801a722 <SX1276SetRxConfig+0x4be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 801a71a:	2103      	movs	r1, #3
 801a71c:	2036      	movs	r0, #54	; 0x36
 801a71e:	f001 f8a9 	bl	801b874 <SX1276Write>
            if( datarate == 6 )
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	2b06      	cmp	r3, #6
 801a726:	d114      	bne.n	801a752 <SX1276SetRxConfig+0x4ee>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a728:	2031      	movs	r0, #49	; 0x31
 801a72a:	f001 f8b4 	bl	801b896 <SX1276Read>
 801a72e:	0003      	movs	r3, r0
 801a730:	b25b      	sxtb	r3, r3
 801a732:	2207      	movs	r2, #7
 801a734:	4393      	bics	r3, r2
 801a736:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a738:	2205      	movs	r2, #5
 801a73a:	4313      	orrs	r3, r2
 801a73c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a73e:	b2db      	uxtb	r3, r3
 801a740:	0019      	movs	r1, r3
 801a742:	2031      	movs	r0, #49	; 0x31
 801a744:	f001 f896 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a748:	210c      	movs	r1, #12
 801a74a:	2037      	movs	r0, #55	; 0x37
 801a74c:	f001 f892 	bl	801b874 <SX1276Write>
        break;
 801a750:	e013      	b.n	801a77a <SX1276SetRxConfig+0x516>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a752:	2031      	movs	r0, #49	; 0x31
 801a754:	f001 f89f 	bl	801b896 <SX1276Read>
 801a758:	0003      	movs	r3, r0
 801a75a:	b25b      	sxtb	r3, r3
 801a75c:	2207      	movs	r2, #7
 801a75e:	4393      	bics	r3, r2
 801a760:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a762:	2203      	movs	r2, #3
 801a764:	4313      	orrs	r3, r2
 801a766:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a768:	b2db      	uxtb	r3, r3
 801a76a:	0019      	movs	r1, r3
 801a76c:	2031      	movs	r0, #49	; 0x31
 801a76e:	f001 f881 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a772:	210a      	movs	r1, #10
 801a774:	2037      	movs	r0, #55	; 0x37
 801a776:	f001 f87d 	bl	801b874 <SX1276Write>
        break;
 801a77a:	46c0      	nop			; (mov r8, r8)
}
 801a77c:	46c0      	nop			; (mov r8, r8)
 801a77e:	46bd      	mov	sp, r7
 801a780:	b004      	add	sp, #16
 801a782:	bc80      	pop	{r7}
 801a784:	46b8      	mov	r8, r7
 801a786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a788:	20001ab8 	.word	0x20001ab8
 801a78c:	1f4add40 	.word	0x1f4add40

0801a790 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a790:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a792:	46c6      	mov	lr, r8
 801a794:	b500      	push	{lr}
 801a796:	b084      	sub	sp, #16
 801a798:	af00      	add	r7, sp, #0
 801a79a:	60ba      	str	r2, [r7, #8]
 801a79c:	607b      	str	r3, [r7, #4]
 801a79e:	240f      	movs	r4, #15
 801a7a0:	193b      	adds	r3, r7, r4
 801a7a2:	1c02      	adds	r2, r0, #0
 801a7a4:	701a      	strb	r2, [r3, #0]
 801a7a6:	230e      	movs	r3, #14
 801a7a8:	18fb      	adds	r3, r7, r3
 801a7aa:	1c0a      	adds	r2, r1, #0
 801a7ac:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 801a7ae:	4bb6      	ldr	r3, [pc, #728]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a7b0:	791b      	ldrb	r3, [r3, #4]
 801a7b2:	2b01      	cmp	r3, #1
 801a7b4:	d108      	bne.n	801a7c8 <SX1276SetTxConfig+0x38>
 801a7b6:	193b      	adds	r3, r7, r4
 801a7b8:	781b      	ldrb	r3, [r3, #0]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d104      	bne.n	801a7c8 <SX1276SetTxConfig+0x38>
    {
        SX1276SetSleep( );
 801a7be:	f000 fc61 	bl	801b084 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 801a7c2:	2001      	movs	r0, #1
 801a7c4:	f7eb fe33 	bl	800642e <HAL_Delay>
    }

    SX1276SetModem( modem );
 801a7c8:	240f      	movs	r4, #15
 801a7ca:	193b      	adds	r3, r7, r4
 801a7cc:	781b      	ldrb	r3, [r3, #0]
 801a7ce:	0018      	movs	r0, r3
 801a7d0:	f000 fff6 	bl	801b7c0 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 801a7d4:	230e      	movs	r3, #14
 801a7d6:	18fb      	adds	r3, r7, r3
 801a7d8:	781b      	ldrb	r3, [r3, #0]
 801a7da:	b25b      	sxtb	r3, r3
 801a7dc:	0018      	movs	r0, r3
 801a7de:	f000 fb3f 	bl	801ae60 <SX1276SetRfTxPower>
    //power = 5;// 5 , 14 , 17
    switch( modem )
 801a7e2:	193b      	adds	r3, r7, r4
 801a7e4:	781b      	ldrb	r3, [r3, #0]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d003      	beq.n	801a7f2 <SX1276SetTxConfig+0x62>
 801a7ea:	2b01      	cmp	r3, #1
 801a7ec:	d100      	bne.n	801a7f0 <SX1276SetTxConfig+0x60>
 801a7ee:	e0c1      	b.n	801a974 <SX1276SetTxConfig+0x1e4>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 801a7f0:	e208      	b.n	801ac04 <SX1276SetTxConfig+0x474>
            SX1276.Settings.Fsk.Power = power;
 801a7f2:	4ba5      	ldr	r3, [pc, #660]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a7f4:	220e      	movs	r2, #14
 801a7f6:	18ba      	adds	r2, r7, r2
 801a7f8:	7812      	ldrb	r2, [r2, #0]
 801a7fa:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 801a7fc:	4ba2      	ldr	r3, [pc, #648]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a7fe:	68ba      	ldr	r2, [r7, #8]
 801a800:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 801a802:	4ba1      	ldr	r3, [pc, #644]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a804:	687a      	ldr	r2, [r7, #4]
 801a806:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 801a808:	4b9f      	ldr	r3, [pc, #636]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a80a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a80c:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 801a80e:	4b9e      	ldr	r3, [pc, #632]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a810:	2420      	movs	r4, #32
 801a812:	2608      	movs	r6, #8
 801a814:	2208      	movs	r2, #8
 801a816:	18ba      	adds	r2, r7, r2
 801a818:	1992      	adds	r2, r2, r6
 801a81a:	1912      	adds	r2, r2, r4
 801a81c:	8812      	ldrh	r2, [r2, #0]
 801a81e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 801a820:	4b99      	ldr	r3, [pc, #612]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a822:	2524      	movs	r5, #36	; 0x24
 801a824:	2208      	movs	r2, #8
 801a826:	18ba      	adds	r2, r7, r2
 801a828:	1992      	adds	r2, r2, r6
 801a82a:	1952      	adds	r2, r2, r5
 801a82c:	2122      	movs	r1, #34	; 0x22
 801a82e:	7812      	ldrb	r2, [r2, #0]
 801a830:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801a832:	4b95      	ldr	r3, [pc, #596]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a834:	2228      	movs	r2, #40	; 0x28
 801a836:	2108      	movs	r1, #8
 801a838:	468c      	mov	ip, r1
 801a83a:	2108      	movs	r1, #8
 801a83c:	4688      	mov	r8, r1
 801a83e:	44b8      	add	r8, r7
 801a840:	44c4      	add	ip, r8
 801a842:	4462      	add	r2, ip
 801a844:	2124      	movs	r1, #36	; 0x24
 801a846:	7812      	ldrb	r2, [r2, #0]
 801a848:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801a84a:	4b8f      	ldr	r3, [pc, #572]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a84c:	2234      	movs	r2, #52	; 0x34
 801a84e:	2108      	movs	r1, #8
 801a850:	468c      	mov	ip, r1
 801a852:	2108      	movs	r1, #8
 801a854:	4688      	mov	r8, r1
 801a856:	44b8      	add	r8, r7
 801a858:	44c4      	add	ip, r8
 801a85a:	4462      	add	r2, ip
 801a85c:	2125      	movs	r1, #37	; 0x25
 801a85e:	7812      	ldrb	r2, [r2, #0]
 801a860:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 801a862:	4b89      	ldr	r3, [pc, #548]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a866:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 801a868:	68b8      	ldr	r0, [r7, #8]
 801a86a:	f7e7 ff13 	bl	8002694 <__aeabi_ui2d>
 801a86e:	2200      	movs	r2, #0
 801a870:	4b86      	ldr	r3, [pc, #536]	; (801aa8c <SX1276SetTxConfig+0x2fc>)
 801a872:	f7e6 fca5 	bl	80011c0 <__aeabi_ddiv>
 801a876:	0002      	movs	r2, r0
 801a878:	000b      	movs	r3, r1
 801a87a:	0010      	movs	r0, r2
 801a87c:	0019      	movs	r1, r3
 801a87e:	f7e5 fe47 	bl	8000510 <__aeabi_d2uiz>
 801a882:	0003      	movs	r3, r0
 801a884:	b29b      	uxth	r3, r3
 801a886:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 801a888:	68bb      	ldr	r3, [r7, #8]
 801a88a:	0a1b      	lsrs	r3, r3, #8
 801a88c:	b2db      	uxtb	r3, r3
 801a88e:	0019      	movs	r1, r3
 801a890:	2004      	movs	r0, #4
 801a892:	f000 ffef 	bl	801b874 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 801a896:	68bb      	ldr	r3, [r7, #8]
 801a898:	b2db      	uxtb	r3, r3
 801a89a:	0019      	movs	r1, r3
 801a89c:	2005      	movs	r0, #5
 801a89e:	f000 ffe9 	bl	801b874 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 801a8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a8a4:	f7e7 fef6 	bl	8002694 <__aeabi_ui2d>
 801a8a8:	0002      	movs	r2, r0
 801a8aa:	000b      	movs	r3, r1
 801a8ac:	2000      	movs	r0, #0
 801a8ae:	4978      	ldr	r1, [pc, #480]	; (801aa90 <SX1276SetTxConfig+0x300>)
 801a8b0:	f7e6 fc86 	bl	80011c0 <__aeabi_ddiv>
 801a8b4:	0002      	movs	r2, r0
 801a8b6:	000b      	movs	r3, r1
 801a8b8:	0010      	movs	r0, r2
 801a8ba:	0019      	movs	r1, r3
 801a8bc:	f7e5 fe28 	bl	8000510 <__aeabi_d2uiz>
 801a8c0:	0003      	movs	r3, r0
 801a8c2:	b29b      	uxth	r3, r3
 801a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801a8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8c8:	0a1b      	lsrs	r3, r3, #8
 801a8ca:	b2db      	uxtb	r3, r3
 801a8cc:	0019      	movs	r1, r3
 801a8ce:	2002      	movs	r0, #2
 801a8d0:	f000 ffd0 	bl	801b874 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8d6:	b2db      	uxtb	r3, r3
 801a8d8:	0019      	movs	r1, r3
 801a8da:	2003      	movs	r0, #3
 801a8dc:	f000 ffca 	bl	801b874 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a8e0:	2308      	movs	r3, #8
 801a8e2:	18fb      	adds	r3, r7, r3
 801a8e4:	199b      	adds	r3, r3, r6
 801a8e6:	191b      	adds	r3, r3, r4
 801a8e8:	881b      	ldrh	r3, [r3, #0]
 801a8ea:	0a1b      	lsrs	r3, r3, #8
 801a8ec:	b29b      	uxth	r3, r3
 801a8ee:	b2db      	uxtb	r3, r3
 801a8f0:	0019      	movs	r1, r3
 801a8f2:	2025      	movs	r0, #37	; 0x25
 801a8f4:	f000 ffbe 	bl	801b874 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 801a8f8:	2308      	movs	r3, #8
 801a8fa:	18fb      	adds	r3, r7, r3
 801a8fc:	199b      	adds	r3, r3, r6
 801a8fe:	191b      	adds	r3, r3, r4
 801a900:	881b      	ldrh	r3, [r3, #0]
 801a902:	b2db      	uxtb	r3, r3
 801a904:	0019      	movs	r1, r3
 801a906:	2026      	movs	r0, #38	; 0x26
 801a908:	f000 ffb4 	bl	801b874 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801a90c:	2030      	movs	r0, #48	; 0x30
 801a90e:	f000 ffc2 	bl	801b896 <SX1276Read>
 801a912:	0003      	movs	r3, r0
 801a914:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801a916:	226f      	movs	r2, #111	; 0x6f
 801a918:	4013      	ands	r3, r2
 801a91a:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801a91c:	2308      	movs	r3, #8
 801a91e:	18fb      	adds	r3, r7, r3
 801a920:	199b      	adds	r3, r3, r6
 801a922:	195b      	adds	r3, r3, r5
 801a924:	781b      	ldrb	r3, [r3, #0]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d001      	beq.n	801a92e <SX1276SetTxConfig+0x19e>
 801a92a:	2300      	movs	r3, #0
 801a92c:	e001      	b.n	801a932 <SX1276SetTxConfig+0x1a2>
 801a92e:	2380      	movs	r3, #128	; 0x80
 801a930:	425b      	negs	r3, r3
 801a932:	4313      	orrs	r3, r2
 801a934:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801a936:	2328      	movs	r3, #40	; 0x28
 801a938:	2108      	movs	r1, #8
 801a93a:	468c      	mov	ip, r1
 801a93c:	2108      	movs	r1, #8
 801a93e:	4688      	mov	r8, r1
 801a940:	44b8      	add	r8, r7
 801a942:	44c4      	add	ip, r8
 801a944:	4463      	add	r3, ip
 801a946:	781b      	ldrb	r3, [r3, #0]
 801a948:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801a94a:	b25b      	sxtb	r3, r3
 801a94c:	4313      	orrs	r3, r2
 801a94e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801a950:	b2db      	uxtb	r3, r3
 801a952:	0019      	movs	r1, r3
 801a954:	2030      	movs	r0, #48	; 0x30
 801a956:	f000 ff8d 	bl	801b874 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801a95a:	2031      	movs	r0, #49	; 0x31
 801a95c:	f000 ff9b 	bl	801b896 <SX1276Read>
 801a960:	0003      	movs	r3, r0
 801a962:	001a      	movs	r2, r3
 801a964:	2340      	movs	r3, #64	; 0x40
 801a966:	4313      	orrs	r3, r2
 801a968:	b2db      	uxtb	r3, r3
 801a96a:	0019      	movs	r1, r3
 801a96c:	2031      	movs	r0, #49	; 0x31
 801a96e:	f000 ff81 	bl	801b874 <SX1276Write>
        break;
 801a972:	e147      	b.n	801ac04 <SX1276SetTxConfig+0x474>
            SX1276.Settings.LoRa.Power = power;
 801a974:	4b44      	ldr	r3, [pc, #272]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a976:	220e      	movs	r2, #14
 801a978:	18ba      	adds	r2, r7, r2
 801a97a:	2140      	movs	r1, #64	; 0x40
 801a97c:	7812      	ldrb	r2, [r2, #0]
 801a97e:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	2b02      	cmp	r3, #2
 801a984:	d900      	bls.n	801a988 <SX1276SetTxConfig+0x1f8>
                while( 1 );
 801a986:	e7fe      	b.n	801a986 <SX1276SetTxConfig+0x1f6>
            bandwidth += 7;
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	3307      	adds	r3, #7
 801a98c:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801a98e:	4b3e      	ldr	r3, [pc, #248]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a990:	687a      	ldr	r2, [r7, #4]
 801a992:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801a994:	4b3c      	ldr	r3, [pc, #240]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a998:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801a99a:	4b3b      	ldr	r3, [pc, #236]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a99c:	221c      	movs	r2, #28
 801a99e:	2108      	movs	r1, #8
 801a9a0:	468c      	mov	ip, r1
 801a9a2:	2108      	movs	r1, #8
 801a9a4:	4688      	mov	r8, r1
 801a9a6:	44b8      	add	r8, r7
 801a9a8:	44c4      	add	ip, r8
 801a9aa:	4462      	add	r2, ip
 801a9ac:	214d      	movs	r1, #77	; 0x4d
 801a9ae:	7812      	ldrb	r2, [r2, #0]
 801a9b0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801a9b2:	4b35      	ldr	r3, [pc, #212]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a9b4:	2220      	movs	r2, #32
 801a9b6:	2108      	movs	r1, #8
 801a9b8:	468c      	mov	ip, r1
 801a9ba:	2108      	movs	r1, #8
 801a9bc:	4688      	mov	r8, r1
 801a9be:	44b8      	add	r8, r7
 801a9c0:	44c4      	add	ip, r8
 801a9c2:	4462      	add	r2, ip
 801a9c4:	214e      	movs	r1, #78	; 0x4e
 801a9c6:	8812      	ldrh	r2, [r2, #0]
 801a9c8:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801a9ca:	4b2f      	ldr	r3, [pc, #188]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a9cc:	2224      	movs	r2, #36	; 0x24
 801a9ce:	2108      	movs	r1, #8
 801a9d0:	468c      	mov	ip, r1
 801a9d2:	2108      	movs	r1, #8
 801a9d4:	4688      	mov	r8, r1
 801a9d6:	44b8      	add	r8, r7
 801a9d8:	44c4      	add	ip, r8
 801a9da:	4462      	add	r2, ip
 801a9dc:	2150      	movs	r1, #80	; 0x50
 801a9de:	7812      	ldrb	r2, [r2, #0]
 801a9e0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801a9e2:	4b29      	ldr	r3, [pc, #164]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a9e4:	222c      	movs	r2, #44	; 0x2c
 801a9e6:	2108      	movs	r1, #8
 801a9e8:	468c      	mov	ip, r1
 801a9ea:	2108      	movs	r1, #8
 801a9ec:	4688      	mov	r8, r1
 801a9ee:	44b8      	add	r8, r7
 801a9f0:	44c4      	add	ip, r8
 801a9f2:	4462      	add	r2, ip
 801a9f4:	2153      	movs	r1, #83	; 0x53
 801a9f6:	7812      	ldrb	r2, [r2, #0]
 801a9f8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801a9fa:	4b23      	ldr	r3, [pc, #140]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801a9fc:	2230      	movs	r2, #48	; 0x30
 801a9fe:	2108      	movs	r1, #8
 801aa00:	468c      	mov	ip, r1
 801aa02:	2108      	movs	r1, #8
 801aa04:	4688      	mov	r8, r1
 801aa06:	44b8      	add	r8, r7
 801aa08:	44c4      	add	ip, r8
 801aa0a:	4462      	add	r2, ip
 801aa0c:	2154      	movs	r1, #84	; 0x54
 801aa0e:	7812      	ldrb	r2, [r2, #0]
 801aa10:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801aa12:	4b1d      	ldr	r3, [pc, #116]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801aa14:	2228      	movs	r2, #40	; 0x28
 801aa16:	2108      	movs	r1, #8
 801aa18:	468c      	mov	ip, r1
 801aa1a:	2108      	movs	r1, #8
 801aa1c:	4688      	mov	r8, r1
 801aa1e:	44b8      	add	r8, r7
 801aa20:	44c4      	add	ip, r8
 801aa22:	4462      	add	r2, ip
 801aa24:	2152      	movs	r1, #82	; 0x52
 801aa26:	7812      	ldrb	r2, [r2, #0]
 801aa28:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801aa2a:	4b17      	ldr	r3, [pc, #92]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801aa2c:	2234      	movs	r2, #52	; 0x34
 801aa2e:	2108      	movs	r1, #8
 801aa30:	468c      	mov	ip, r1
 801aa32:	2108      	movs	r1, #8
 801aa34:	4688      	mov	r8, r1
 801aa36:	44b8      	add	r8, r7
 801aa38:	44c4      	add	ip, r8
 801aa3a:	4462      	add	r2, ip
 801aa3c:	2155      	movs	r1, #85	; 0x55
 801aa3e:	7812      	ldrb	r2, [r2, #0]
 801aa40:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 801aa42:	4b11      	ldr	r3, [pc, #68]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801aa44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801aa46:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 801aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa4a:	2b0c      	cmp	r3, #12
 801aa4c:	d902      	bls.n	801aa54 <SX1276SetTxConfig+0x2c4>
                datarate = 12;
 801aa4e:	230c      	movs	r3, #12
 801aa50:	62bb      	str	r3, [r7, #40]	; 0x28
 801aa52:	e004      	b.n	801aa5e <SX1276SetTxConfig+0x2ce>
            else if( datarate < 6 )
 801aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa56:	2b05      	cmp	r3, #5
 801aa58:	d801      	bhi.n	801aa5e <SX1276SetTxConfig+0x2ce>
                datarate = 6;
 801aa5a:	2306      	movs	r3, #6
 801aa5c:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	2b07      	cmp	r3, #7
 801aa62:	d105      	bne.n	801aa70 <SX1276SetTxConfig+0x2e0>
 801aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa66:	2b0b      	cmp	r3, #11
 801aa68:	d008      	beq.n	801aa7c <SX1276SetTxConfig+0x2ec>
 801aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa6c:	2b0c      	cmp	r3, #12
 801aa6e:	d005      	beq.n	801aa7c <SX1276SetTxConfig+0x2ec>
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	2b08      	cmp	r3, #8
 801aa74:	d10e      	bne.n	801aa94 <SX1276SetTxConfig+0x304>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801aa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa78:	2b0c      	cmp	r3, #12
 801aa7a:	d10b      	bne.n	801aa94 <SX1276SetTxConfig+0x304>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801aa7c:	4b02      	ldr	r3, [pc, #8]	; (801aa88 <SX1276SetTxConfig+0x2f8>)
 801aa7e:	224c      	movs	r2, #76	; 0x4c
 801aa80:	2101      	movs	r1, #1
 801aa82:	5499      	strb	r1, [r3, r2]
 801aa84:	e00a      	b.n	801aa9c <SX1276SetTxConfig+0x30c>
 801aa86:	46c0      	nop			; (mov r8, r8)
 801aa88:	20001ab8 	.word	0x20001ab8
 801aa8c:	404e8480 	.word	0x404e8480
 801aa90:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801aa94:	4b5e      	ldr	r3, [pc, #376]	; (801ac10 <SX1276SetTxConfig+0x480>)
 801aa96:	224c      	movs	r2, #76	; 0x4c
 801aa98:	2100      	movs	r1, #0
 801aa9a:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801aa9c:	4b5c      	ldr	r3, [pc, #368]	; (801ac10 <SX1276SetTxConfig+0x480>)
 801aa9e:	2253      	movs	r2, #83	; 0x53
 801aaa0:	5c9b      	ldrb	r3, [r3, r2]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d013      	beq.n	801aace <SX1276SetTxConfig+0x33e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801aaa6:	2044      	movs	r0, #68	; 0x44
 801aaa8:	f000 fef5 	bl	801b896 <SX1276Read>
 801aaac:	0003      	movs	r3, r0
 801aaae:	001a      	movs	r2, r3
 801aab0:	2380      	movs	r3, #128	; 0x80
 801aab2:	425b      	negs	r3, r3
 801aab4:	4313      	orrs	r3, r2
 801aab6:	b2db      	uxtb	r3, r3
 801aab8:	0019      	movs	r1, r3
 801aaba:	2044      	movs	r0, #68	; 0x44
 801aabc:	f000 feda 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801aac0:	4b53      	ldr	r3, [pc, #332]	; (801ac10 <SX1276SetTxConfig+0x480>)
 801aac2:	2254      	movs	r2, #84	; 0x54
 801aac4:	5c9b      	ldrb	r3, [r3, r2]
 801aac6:	0019      	movs	r1, r3
 801aac8:	2024      	movs	r0, #36	; 0x24
 801aaca:	f000 fed3 	bl	801b874 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801aace:	201d      	movs	r0, #29
 801aad0:	f000 fee1 	bl	801b896 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	b2db      	uxtb	r3, r3
 801aad8:	011b      	lsls	r3, r3, #4
 801aada:	b2da      	uxtb	r2, r3
 801aadc:	231c      	movs	r3, #28
 801aade:	2108      	movs	r1, #8
 801aae0:	468c      	mov	ip, r1
 801aae2:	2108      	movs	r1, #8
 801aae4:	4688      	mov	r8, r1
 801aae6:	44b8      	add	r8, r7
 801aae8:	44c4      	add	ip, r8
 801aaea:	4463      	add	r3, ip
 801aaec:	781b      	ldrb	r3, [r3, #0]
 801aaee:	18db      	adds	r3, r3, r3
 801aaf0:	b2db      	uxtb	r3, r3
 801aaf2:	4313      	orrs	r3, r2
 801aaf4:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801aaf6:	2324      	movs	r3, #36	; 0x24
 801aaf8:	2108      	movs	r1, #8
 801aafa:	468c      	mov	ip, r1
 801aafc:	2108      	movs	r1, #8
 801aafe:	4688      	mov	r8, r1
 801ab00:	44b8      	add	r8, r7
 801ab02:	44c4      	add	ip, r8
 801ab04:	4463      	add	r3, ip
 801ab06:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801ab08:	4313      	orrs	r3, r2
 801ab0a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801ab0c:	0019      	movs	r1, r3
 801ab0e:	201d      	movs	r0, #29
 801ab10:	f000 feb0 	bl	801b874 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801ab14:	201e      	movs	r0, #30
 801ab16:	f000 febe 	bl	801b896 <SX1276Read>
 801ab1a:	0003      	movs	r3, r0
 801ab1c:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801ab1e:	230b      	movs	r3, #11
 801ab20:	4013      	ands	r3, r2
 801ab22:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab26:	b2db      	uxtb	r3, r3
 801ab28:	011b      	lsls	r3, r3, #4
 801ab2a:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 801ab2c:	4313      	orrs	r3, r2
 801ab2e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801ab30:	2328      	movs	r3, #40	; 0x28
 801ab32:	2108      	movs	r1, #8
 801ab34:	468c      	mov	ip, r1
 801ab36:	2108      	movs	r1, #8
 801ab38:	4688      	mov	r8, r1
 801ab3a:	44b8      	add	r8, r7
 801ab3c:	44c4      	add	ip, r8
 801ab3e:	4463      	add	r3, ip
 801ab40:	781b      	ldrb	r3, [r3, #0]
 801ab42:	009b      	lsls	r3, r3, #2
 801ab44:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801ab46:	4313      	orrs	r3, r2
 801ab48:	b2db      	uxtb	r3, r3
 801ab4a:	0019      	movs	r1, r3
 801ab4c:	201e      	movs	r0, #30
 801ab4e:	f000 fe91 	bl	801b874 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801ab52:	2026      	movs	r0, #38	; 0x26
 801ab54:	f000 fe9f 	bl	801b896 <SX1276Read>
 801ab58:	0003      	movs	r3, r0
 801ab5a:	b25b      	sxtb	r3, r3
 801ab5c:	2208      	movs	r2, #8
 801ab5e:	4393      	bics	r3, r2
 801ab60:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801ab62:	4b2b      	ldr	r3, [pc, #172]	; (801ac10 <SX1276SetTxConfig+0x480>)
 801ab64:	214c      	movs	r1, #76	; 0x4c
 801ab66:	5c5b      	ldrb	r3, [r3, r1]
 801ab68:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801ab6a:	b25b      	sxtb	r3, r3
 801ab6c:	4313      	orrs	r3, r2
 801ab6e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801ab70:	b2db      	uxtb	r3, r3
 801ab72:	0019      	movs	r1, r3
 801ab74:	2026      	movs	r0, #38	; 0x26
 801ab76:	f000 fe7d 	bl	801b874 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801ab7a:	2420      	movs	r4, #32
 801ab7c:	2508      	movs	r5, #8
 801ab7e:	2308      	movs	r3, #8
 801ab80:	18fb      	adds	r3, r7, r3
 801ab82:	195b      	adds	r3, r3, r5
 801ab84:	191b      	adds	r3, r3, r4
 801ab86:	881b      	ldrh	r3, [r3, #0]
 801ab88:	0a1b      	lsrs	r3, r3, #8
 801ab8a:	b29b      	uxth	r3, r3
 801ab8c:	b2db      	uxtb	r3, r3
 801ab8e:	0019      	movs	r1, r3
 801ab90:	2020      	movs	r0, #32
 801ab92:	f000 fe6f 	bl	801b874 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801ab96:	2308      	movs	r3, #8
 801ab98:	18fb      	adds	r3, r7, r3
 801ab9a:	195b      	adds	r3, r3, r5
 801ab9c:	191b      	adds	r3, r3, r4
 801ab9e:	881b      	ldrh	r3, [r3, #0]
 801aba0:	b2db      	uxtb	r3, r3
 801aba2:	0019      	movs	r1, r3
 801aba4:	2021      	movs	r0, #33	; 0x21
 801aba6:	f000 fe65 	bl	801b874 <SX1276Write>
            if( datarate == 6 )
 801abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abac:	2b06      	cmp	r3, #6
 801abae:	d114      	bne.n	801abda <SX1276SetTxConfig+0x44a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801abb0:	2031      	movs	r0, #49	; 0x31
 801abb2:	f000 fe70 	bl	801b896 <SX1276Read>
 801abb6:	0003      	movs	r3, r0
 801abb8:	b25b      	sxtb	r3, r3
 801abba:	2207      	movs	r2, #7
 801abbc:	4393      	bics	r3, r2
 801abbe:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801abc0:	2205      	movs	r2, #5
 801abc2:	4313      	orrs	r3, r2
 801abc4:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801abc6:	b2db      	uxtb	r3, r3
 801abc8:	0019      	movs	r1, r3
 801abca:	2031      	movs	r0, #49	; 0x31
 801abcc:	f000 fe52 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801abd0:	210c      	movs	r1, #12
 801abd2:	2037      	movs	r0, #55	; 0x37
 801abd4:	f000 fe4e 	bl	801b874 <SX1276Write>
        break;
 801abd8:	e013      	b.n	801ac02 <SX1276SetTxConfig+0x472>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801abda:	2031      	movs	r0, #49	; 0x31
 801abdc:	f000 fe5b 	bl	801b896 <SX1276Read>
 801abe0:	0003      	movs	r3, r0
 801abe2:	b25b      	sxtb	r3, r3
 801abe4:	2207      	movs	r2, #7
 801abe6:	4393      	bics	r3, r2
 801abe8:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801abea:	2203      	movs	r2, #3
 801abec:	4313      	orrs	r3, r2
 801abee:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801abf0:	b2db      	uxtb	r3, r3
 801abf2:	0019      	movs	r1, r3
 801abf4:	2031      	movs	r0, #49	; 0x31
 801abf6:	f000 fe3d 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801abfa:	210a      	movs	r1, #10
 801abfc:	2037      	movs	r0, #55	; 0x37
 801abfe:	f000 fe39 	bl	801b874 <SX1276Write>
        break;
 801ac02:	46c0      	nop			; (mov r8, r8)
}
 801ac04:	46c0      	nop			; (mov r8, r8)
 801ac06:	46bd      	mov	sp, r7
 801ac08:	b004      	add	sp, #16
 801ac0a:	bc80      	pop	{r7}
 801ac0c:	46b8      	mov	r8, r7
 801ac0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac10:	20001ab8 	.word	0x20001ab8

0801ac14 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801ac14:	b590      	push	{r4, r7, lr}
 801ac16:	b08b      	sub	sp, #44	; 0x2c
 801ac18:	af04      	add	r7, sp, #16
 801ac1a:	60b9      	str	r1, [r7, #8]
 801ac1c:	607a      	str	r2, [r7, #4]
 801ac1e:	0019      	movs	r1, r3
 801ac20:	240f      	movs	r4, #15
 801ac22:	193b      	adds	r3, r7, r4
 801ac24:	1c02      	adds	r2, r0, #0
 801ac26:	701a      	strb	r2, [r3, #0]
 801ac28:	230e      	movs	r3, #14
 801ac2a:	18fb      	adds	r3, r7, r3
 801ac2c:	1c0a      	adds	r2, r1, #0
 801ac2e:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 801ac30:	2300      	movs	r3, #0
 801ac32:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801ac34:	2301      	movs	r3, #1
 801ac36:	613b      	str	r3, [r7, #16]

    switch( modem )
 801ac38:	193b      	adds	r3, r7, r4
 801ac3a:	781b      	ldrb	r3, [r3, #0]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d002      	beq.n	801ac46 <SX1276GetTimeOnAir+0x32>
 801ac40:	2b01      	cmp	r3, #1
 801ac42:	d01a      	beq.n	801ac7a <SX1276GetTimeOnAir+0x66>
 801ac44:	e03f      	b.n	801acc6 <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 801ac46:	2334      	movs	r3, #52	; 0x34
 801ac48:	18fb      	adds	r3, r7, r3
 801ac4a:	781c      	ldrb	r4, [r3, #0]
 801ac4c:	2330      	movs	r3, #48	; 0x30
 801ac4e:	18fb      	adds	r3, r7, r3
 801ac50:	781a      	ldrb	r2, [r3, #0]
 801ac52:	232c      	movs	r3, #44	; 0x2c
 801ac54:	18fb      	adds	r3, r7, r3
 801ac56:	7819      	ldrb	r1, [r3, #0]
 801ac58:	2328      	movs	r3, #40	; 0x28
 801ac5a:	18fb      	adds	r3, r7, r3
 801ac5c:	8818      	ldrh	r0, [r3, #0]
 801ac5e:	0023      	movs	r3, r4
 801ac60:	f000 ff7e 	bl	801bb60 <SX1276GetGfskTimeOnAirNumerator>
 801ac64:	0002      	movs	r2, r0
 801ac66:	0013      	movs	r3, r2
 801ac68:	015b      	lsls	r3, r3, #5
 801ac6a:	1a9b      	subs	r3, r3, r2
 801ac6c:	009b      	lsls	r3, r3, #2
 801ac6e:	189b      	adds	r3, r3, r2
 801ac70:	00db      	lsls	r3, r3, #3
 801ac72:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	613b      	str	r3, [r7, #16]
        }
        break;
 801ac78:	e025      	b.n	801acc6 <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 801ac7a:	2328      	movs	r3, #40	; 0x28
 801ac7c:	18fb      	adds	r3, r7, r3
 801ac7e:	881c      	ldrh	r4, [r3, #0]
 801ac80:	230e      	movs	r3, #14
 801ac82:	18fb      	adds	r3, r7, r3
 801ac84:	781a      	ldrb	r2, [r3, #0]
 801ac86:	6879      	ldr	r1, [r7, #4]
 801ac88:	68b8      	ldr	r0, [r7, #8]
 801ac8a:	2334      	movs	r3, #52	; 0x34
 801ac8c:	18fb      	adds	r3, r7, r3
 801ac8e:	781b      	ldrb	r3, [r3, #0]
 801ac90:	9302      	str	r3, [sp, #8]
 801ac92:	2330      	movs	r3, #48	; 0x30
 801ac94:	18fb      	adds	r3, r7, r3
 801ac96:	781b      	ldrb	r3, [r3, #0]
 801ac98:	9301      	str	r3, [sp, #4]
 801ac9a:	232c      	movs	r3, #44	; 0x2c
 801ac9c:	18fb      	adds	r3, r7, r3
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	9300      	str	r3, [sp, #0]
 801aca2:	0023      	movs	r3, r4
 801aca4:	f000 ff96 	bl	801bbd4 <SX1276GetLoRaTimeOnAirNumerator>
 801aca8:	0002      	movs	r2, r0
 801acaa:	0013      	movs	r3, r2
 801acac:	015b      	lsls	r3, r3, #5
 801acae:	1a9b      	subs	r3, r3, r2
 801acb0:	009b      	lsls	r3, r3, #2
 801acb2:	189b      	adds	r3, r3, r2
 801acb4:	00db      	lsls	r3, r3, #3
 801acb6:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 801acb8:	68bb      	ldr	r3, [r7, #8]
 801acba:	0018      	movs	r0, r3
 801acbc:	f000 ff1e 	bl	801bafc <SX1276GetLoRaBandwidthInHz>
 801acc0:	0003      	movs	r3, r0
 801acc2:	613b      	str	r3, [r7, #16]
        }
        break;
 801acc4:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 801acc6:	697a      	ldr	r2, [r7, #20]
 801acc8:	693b      	ldr	r3, [r7, #16]
 801acca:	18d3      	adds	r3, r2, r3
 801accc:	3b01      	subs	r3, #1
 801acce:	6939      	ldr	r1, [r7, #16]
 801acd0:	0018      	movs	r0, r3
 801acd2:	f7e5 fa21 	bl	8000118 <__udivsi3>
 801acd6:	0003      	movs	r3, r0
}
 801acd8:	0018      	movs	r0, r3
 801acda:	46bd      	mov	sp, r7
 801acdc:	b007      	add	sp, #28
 801acde:	bd90      	pop	{r4, r7, pc}

0801ace0 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 801ace0:	b580      	push	{r7, lr}
 801ace2:	b084      	sub	sp, #16
 801ace4:	af00      	add	r7, sp, #0
 801ace6:	6078      	str	r0, [r7, #4]
 801ace8:	000a      	movs	r2, r1
 801acea:	1cfb      	adds	r3, r7, #3
 801acec:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 801acee:	2300      	movs	r3, #0
 801acf0:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 801acf2:	4b59      	ldr	r3, [pc, #356]	; (801ae58 <SX1276Send+0x178>)
 801acf4:	795b      	ldrb	r3, [r3, #5]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d002      	beq.n	801ad00 <SX1276Send+0x20>
 801acfa:	2b01      	cmp	r3, #1
 801acfc:	d04c      	beq.n	801ad98 <SX1276Send+0xb8>
 801acfe:	e0a2      	b.n	801ae46 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801ad00:	4b55      	ldr	r3, [pc, #340]	; (801ae58 <SX1276Send+0x178>)
 801ad02:	2200      	movs	r2, #0
 801ad04:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801ad06:	1cfb      	adds	r3, r7, #3
 801ad08:	781b      	ldrb	r3, [r3, #0]
 801ad0a:	b29a      	uxth	r2, r3
 801ad0c:	4b52      	ldr	r3, [pc, #328]	; (801ae58 <SX1276Send+0x178>)
 801ad0e:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 801ad10:	4b51      	ldr	r3, [pc, #324]	; (801ae58 <SX1276Send+0x178>)
 801ad12:	2222      	movs	r2, #34	; 0x22
 801ad14:	5c9b      	ldrb	r3, [r3, r2]
 801ad16:	2201      	movs	r2, #1
 801ad18:	4053      	eors	r3, r2
 801ad1a:	b2db      	uxtb	r3, r3
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d005      	beq.n	801ad2c <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 801ad20:	1cfb      	adds	r3, r7, #3
 801ad22:	2101      	movs	r1, #1
 801ad24:	0018      	movs	r0, r3
 801ad26:	f000 fe31 	bl	801b98c <SX1276WriteFifo>
 801ad2a:	e005      	b.n	801ad38 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801ad2c:	1cfb      	adds	r3, r7, #3
 801ad2e:	781b      	ldrb	r3, [r3, #0]
 801ad30:	0019      	movs	r1, r3
 801ad32:	2032      	movs	r0, #50	; 0x32
 801ad34:	f000 fd9e 	bl	801b874 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801ad38:	1cfb      	adds	r3, r7, #3
 801ad3a:	781b      	ldrb	r3, [r3, #0]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d009      	beq.n	801ad54 <SX1276Send+0x74>
 801ad40:	1cfb      	adds	r3, r7, #3
 801ad42:	781b      	ldrb	r3, [r3, #0]
 801ad44:	2b40      	cmp	r3, #64	; 0x40
 801ad46:	d805      	bhi.n	801ad54 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801ad48:	1cfb      	adds	r3, r7, #3
 801ad4a:	7819      	ldrb	r1, [r3, #0]
 801ad4c:	4b42      	ldr	r3, [pc, #264]	; (801ae58 <SX1276Send+0x178>)
 801ad4e:	223f      	movs	r2, #63	; 0x3f
 801ad50:	5499      	strb	r1, [r3, r2]
 801ad52:	e00b      	b.n	801ad6c <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 801ad54:	1cfb      	adds	r3, r7, #3
 801ad56:	781b      	ldrb	r3, [r3, #0]
 801ad58:	b29a      	uxth	r2, r3
 801ad5a:	6879      	ldr	r1, [r7, #4]
 801ad5c:	4b3f      	ldr	r3, [pc, #252]	; (801ae5c <SX1276Send+0x17c>)
 801ad5e:	0018      	movs	r0, r3
 801ad60:	f002 f852 	bl	801ce08 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801ad64:	4b3c      	ldr	r3, [pc, #240]	; (801ae58 <SX1276Send+0x178>)
 801ad66:	223f      	movs	r2, #63	; 0x3f
 801ad68:	2120      	movs	r1, #32
 801ad6a:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801ad6c:	4b3a      	ldr	r3, [pc, #232]	; (801ae58 <SX1276Send+0x178>)
 801ad6e:	223f      	movs	r2, #63	; 0x3f
 801ad70:	5c9a      	ldrb	r2, [r3, r2]
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	0011      	movs	r1, r2
 801ad76:	0018      	movs	r0, r3
 801ad78:	f000 fe08 	bl	801b98c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801ad7c:	4b36      	ldr	r3, [pc, #216]	; (801ae58 <SX1276Send+0x178>)
 801ad7e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801ad80:	4b35      	ldr	r3, [pc, #212]	; (801ae58 <SX1276Send+0x178>)
 801ad82:	213f      	movs	r1, #63	; 0x3f
 801ad84:	5c5b      	ldrb	r3, [r3, r1]
 801ad86:	b29b      	uxth	r3, r3
 801ad88:	18d3      	adds	r3, r2, r3
 801ad8a:	b29a      	uxth	r2, r3
 801ad8c:	4b32      	ldr	r3, [pc, #200]	; (801ae58 <SX1276Send+0x178>)
 801ad8e:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801ad90:	4b31      	ldr	r3, [pc, #196]	; (801ae58 <SX1276Send+0x178>)
 801ad92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad94:	60fb      	str	r3, [r7, #12]
        }
        break;
 801ad96:	e056      	b.n	801ae46 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801ad98:	4b2f      	ldr	r3, [pc, #188]	; (801ae58 <SX1276Send+0x178>)
 801ad9a:	2255      	movs	r2, #85	; 0x55
 801ad9c:	5c9b      	ldrb	r3, [r3, r2]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d011      	beq.n	801adc6 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801ada2:	2033      	movs	r0, #51	; 0x33
 801ada4:	f000 fd77 	bl	801b896 <SX1276Read>
 801ada8:	0003      	movs	r3, r0
 801adaa:	001a      	movs	r2, r3
 801adac:	2341      	movs	r3, #65	; 0x41
 801adae:	439a      	bics	r2, r3
 801adb0:	0013      	movs	r3, r2
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	0019      	movs	r1, r3
 801adb6:	2033      	movs	r0, #51	; 0x33
 801adb8:	f000 fd5c 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801adbc:	2119      	movs	r1, #25
 801adbe:	203b      	movs	r0, #59	; 0x3b
 801adc0:	f000 fd58 	bl	801b874 <SX1276Write>
 801adc4:	e013      	b.n	801adee <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801adc6:	2033      	movs	r0, #51	; 0x33
 801adc8:	f000 fd65 	bl	801b896 <SX1276Read>
 801adcc:	0003      	movs	r3, r0
 801adce:	b25b      	sxtb	r3, r3
 801add0:	2241      	movs	r2, #65	; 0x41
 801add2:	4393      	bics	r3, r2
 801add4:	b25b      	sxtb	r3, r3
 801add6:	2201      	movs	r2, #1
 801add8:	4313      	orrs	r3, r2
 801adda:	b25b      	sxtb	r3, r3
 801addc:	b2db      	uxtb	r3, r3
 801adde:	0019      	movs	r1, r3
 801ade0:	2033      	movs	r0, #51	; 0x33
 801ade2:	f000 fd47 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801ade6:	211d      	movs	r1, #29
 801ade8:	203b      	movs	r0, #59	; 0x3b
 801adea:	f000 fd43 	bl	801b874 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 801adee:	1cfb      	adds	r3, r7, #3
 801adf0:	7819      	ldrb	r1, [r3, #0]
 801adf2:	4b19      	ldr	r3, [pc, #100]	; (801ae58 <SX1276Send+0x178>)
 801adf4:	2264      	movs	r2, #100	; 0x64
 801adf6:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801adf8:	1cfb      	adds	r3, r7, #3
 801adfa:	781b      	ldrb	r3, [r3, #0]
 801adfc:	0019      	movs	r1, r3
 801adfe:	2022      	movs	r0, #34	; 0x22
 801ae00:	f000 fd38 	bl	801b874 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 801ae04:	2100      	movs	r1, #0
 801ae06:	200e      	movs	r0, #14
 801ae08:	f000 fd34 	bl	801b874 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801ae0c:	2100      	movs	r1, #0
 801ae0e:	200d      	movs	r0, #13
 801ae10:	f000 fd30 	bl	801b874 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 801ae14:	2001      	movs	r0, #1
 801ae16:	f000 fd3e 	bl	801b896 <SX1276Read>
 801ae1a:	0003      	movs	r3, r0
 801ae1c:	001a      	movs	r2, r3
 801ae1e:	23f8      	movs	r3, #248	; 0xf8
 801ae20:	439a      	bics	r2, r3
 801ae22:	1e13      	subs	r3, r2, #0
 801ae24:	d104      	bne.n	801ae30 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801ae26:	f000 f94f 	bl	801b0c8 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 801ae2a:	2001      	movs	r0, #1
 801ae2c:	f7eb faff 	bl	800642e <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 801ae30:	1cfb      	adds	r3, r7, #3
 801ae32:	781a      	ldrb	r2, [r3, #0]
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	0011      	movs	r1, r2
 801ae38:	0018      	movs	r0, r3
 801ae3a:	f000 fda7 	bl	801b98c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801ae3e:	4b06      	ldr	r3, [pc, #24]	; (801ae58 <SX1276Send+0x178>)
 801ae40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae42:	60fb      	str	r3, [r7, #12]
        }
        break;
 801ae44:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	0018      	movs	r0, r3
 801ae4a:	f000 faf3 	bl	801b434 <SX1276SetTx>
}
 801ae4e:	46c0      	nop			; (mov r8, r8)
 801ae50:	46bd      	mov	sp, r7
 801ae52:	b004      	add	sp, #16
 801ae54:	bd80      	pop	{r7, pc}
 801ae56:	46c0      	nop			; (mov r8, r8)
 801ae58:	20001ab8 	.word	0x20001ab8
 801ae5c:	2000109c 	.word	0x2000109c

0801ae60 <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 801ae60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae62:	b085      	sub	sp, #20
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	0002      	movs	r2, r0
 801ae68:	1dfb      	adds	r3, r7, #7
 801ae6a:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 801ae6c:	210f      	movs	r1, #15
 801ae6e:	187b      	adds	r3, r7, r1
 801ae70:	2200      	movs	r2, #0
 801ae72:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801ae74:	250e      	movs	r5, #14
 801ae76:	197b      	adds	r3, r7, r5
 801ae78:	2200      	movs	r2, #0
 801ae7a:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 801ae7c:	260d      	movs	r6, #13
 801ae7e:	19bb      	adds	r3, r7, r6
 801ae80:	2200      	movs	r2, #0
 801ae82:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 801ae84:	187c      	adds	r4, r7, r1
 801ae86:	2009      	movs	r0, #9
 801ae88:	f000 fd05 	bl	801b896 <SX1276Read>
 801ae8c:	0003      	movs	r3, r0
 801ae8e:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 801ae90:	197c      	adds	r4, r7, r5
 801ae92:	204d      	movs	r0, #77	; 0x4d
 801ae94:	f000 fcff 	bl	801b896 <SX1276Read>
 801ae98:	0003      	movs	r3, r0
 801ae9a:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 801ae9c:	4b78      	ldr	r3, [pc, #480]	; (801b080 <SX1276SetRfTxPower+0x220>)
 801ae9e:	689b      	ldr	r3, [r3, #8]
 801aea0:	0018      	movs	r0, r3
 801aea2:	f7ec f871 	bl	8006f88 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 801aea6:	0003      	movs	r3, r0
 801aea8:	2b03      	cmp	r3, #3
 801aeaa:	d01f      	beq.n	801aeec <SX1276SetRfTxPower+0x8c>
 801aeac:	dc23      	bgt.n	801aef6 <SX1276SetRfTxPower+0x96>
 801aeae:	2b02      	cmp	r3, #2
 801aeb0:	d008      	beq.n	801aec4 <SX1276SetRfTxPower+0x64>
 801aeb2:	dc20      	bgt.n	801aef6 <SX1276SetRfTxPower+0x96>
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d00a      	beq.n	801aece <SX1276SetRfTxPower+0x6e>
 801aeb8:	2b01      	cmp	r3, #1
 801aeba:	d11c      	bne.n	801aef6 <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 801aebc:	19bb      	adds	r3, r7, r6
 801aebe:	2200      	movs	r2, #0
 801aec0:	701a      	strb	r2, [r3, #0]
        break;
 801aec2:	e019      	b.n	801aef8 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 801aec4:	230d      	movs	r3, #13
 801aec6:	18fb      	adds	r3, r7, r3
 801aec8:	2280      	movs	r2, #128	; 0x80
 801aeca:	701a      	strb	r2, [r3, #0]
        break;
 801aecc:	e014      	b.n	801aef8 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 801aece:	1dfb      	adds	r3, r7, #7
 801aed0:	781b      	ldrb	r3, [r3, #0]
 801aed2:	b25b      	sxtb	r3, r3
 801aed4:	2b0e      	cmp	r3, #14
 801aed6:	dd04      	ble.n	801aee2 <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 801aed8:	230d      	movs	r3, #13
 801aeda:	18fb      	adds	r3, r7, r3
 801aedc:	2280      	movs	r2, #128	; 0x80
 801aede:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 801aee0:	e00a      	b.n	801aef8 <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 801aee2:	230d      	movs	r3, #13
 801aee4:	18fb      	adds	r3, r7, r3
 801aee6:	2200      	movs	r2, #0
 801aee8:	701a      	strb	r2, [r3, #0]
        break;
 801aeea:	e005      	b.n	801aef8 <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 801aeec:	230d      	movs	r3, #13
 801aeee:	18fb      	adds	r3, r7, r3
 801aef0:	2280      	movs	r2, #128	; 0x80
 801aef2:	701a      	strb	r2, [r3, #0]
          break;
 801aef4:	e000      	b.n	801aef8 <SX1276SetRfTxPower+0x98>
        default:
        break;
 801aef6:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 801aef8:	210f      	movs	r1, #15
 801aefa:	187b      	adds	r3, r7, r1
 801aefc:	781b      	ldrb	r3, [r3, #0]
 801aefe:	b25b      	sxtb	r3, r3
 801af00:	227f      	movs	r2, #127	; 0x7f
 801af02:	4013      	ands	r3, r2
 801af04:	b25a      	sxtb	r2, r3
 801af06:	230d      	movs	r3, #13
 801af08:	18fb      	adds	r3, r7, r3
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	b25b      	sxtb	r3, r3
 801af0e:	4313      	orrs	r3, r2
 801af10:	b25a      	sxtb	r2, r3
 801af12:	187b      	adds	r3, r7, r1
 801af14:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801af16:	187b      	adds	r3, r7, r1
 801af18:	781b      	ldrb	r3, [r3, #0]
 801af1a:	b25b      	sxtb	r3, r3
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	da67      	bge.n	801aff0 <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 801af20:	1dfb      	adds	r3, r7, #7
 801af22:	781b      	ldrb	r3, [r3, #0]
 801af24:	b25b      	sxtb	r3, r3
 801af26:	2b11      	cmp	r3, #17
 801af28:	dd07      	ble.n	801af3a <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801af2a:	220e      	movs	r2, #14
 801af2c:	18bb      	adds	r3, r7, r2
 801af2e:	18ba      	adds	r2, r7, r2
 801af30:	7812      	ldrb	r2, [r2, #0]
 801af32:	2107      	movs	r1, #7
 801af34:	430a      	orrs	r2, r1
 801af36:	701a      	strb	r2, [r3, #0]
 801af38:	e00b      	b.n	801af52 <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801af3a:	210e      	movs	r1, #14
 801af3c:	187b      	adds	r3, r7, r1
 801af3e:	781b      	ldrb	r3, [r3, #0]
 801af40:	b25b      	sxtb	r3, r3
 801af42:	2207      	movs	r2, #7
 801af44:	4393      	bics	r3, r2
 801af46:	b25b      	sxtb	r3, r3
 801af48:	2204      	movs	r2, #4
 801af4a:	4313      	orrs	r3, r2
 801af4c:	b25a      	sxtb	r2, r3
 801af4e:	187b      	adds	r3, r7, r1
 801af50:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801af52:	230e      	movs	r3, #14
 801af54:	18fb      	adds	r3, r7, r3
 801af56:	781b      	ldrb	r3, [r3, #0]
 801af58:	2207      	movs	r2, #7
 801af5a:	4013      	ands	r3, r2
 801af5c:	2b07      	cmp	r3, #7
 801af5e:	d123      	bne.n	801afa8 <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 801af60:	1dfb      	adds	r3, r7, #7
 801af62:	781b      	ldrb	r3, [r3, #0]
 801af64:	b25b      	sxtb	r3, r3
 801af66:	2b04      	cmp	r3, #4
 801af68:	dc02      	bgt.n	801af70 <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 801af6a:	1dfb      	adds	r3, r7, #7
 801af6c:	2205      	movs	r2, #5
 801af6e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801af70:	1dfb      	adds	r3, r7, #7
 801af72:	781b      	ldrb	r3, [r3, #0]
 801af74:	b25b      	sxtb	r3, r3
 801af76:	2b14      	cmp	r3, #20
 801af78:	dd02      	ble.n	801af80 <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 801af7a:	1dfb      	adds	r3, r7, #7
 801af7c:	2214      	movs	r2, #20
 801af7e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801af80:	200f      	movs	r0, #15
 801af82:	183b      	adds	r3, r7, r0
 801af84:	781b      	ldrb	r3, [r3, #0]
 801af86:	b25b      	sxtb	r3, r3
 801af88:	220f      	movs	r2, #15
 801af8a:	4393      	bics	r3, r2
 801af8c:	b25a      	sxtb	r2, r3
 801af8e:	1dfb      	adds	r3, r7, #7
 801af90:	781b      	ldrb	r3, [r3, #0]
 801af92:	3b05      	subs	r3, #5
 801af94:	b2db      	uxtb	r3, r3
 801af96:	b25b      	sxtb	r3, r3
 801af98:	210f      	movs	r1, #15
 801af9a:	400b      	ands	r3, r1
 801af9c:	b25b      	sxtb	r3, r3
 801af9e:	4313      	orrs	r3, r2
 801afa0:	b25a      	sxtb	r2, r3
 801afa2:	183b      	adds	r3, r7, r0
 801afa4:	701a      	strb	r2, [r3, #0]
 801afa6:	e059      	b.n	801b05c <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 801afa8:	1dfb      	adds	r3, r7, #7
 801afaa:	781b      	ldrb	r3, [r3, #0]
 801afac:	b25b      	sxtb	r3, r3
 801afae:	2b01      	cmp	r3, #1
 801afb0:	dc02      	bgt.n	801afb8 <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 801afb2:	1dfb      	adds	r3, r7, #7
 801afb4:	2202      	movs	r2, #2
 801afb6:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801afb8:	1dfb      	adds	r3, r7, #7
 801afba:	781b      	ldrb	r3, [r3, #0]
 801afbc:	b25b      	sxtb	r3, r3
 801afbe:	2b11      	cmp	r3, #17
 801afc0:	dd02      	ble.n	801afc8 <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 801afc2:	1dfb      	adds	r3, r7, #7
 801afc4:	2211      	movs	r2, #17
 801afc6:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801afc8:	200f      	movs	r0, #15
 801afca:	183b      	adds	r3, r7, r0
 801afcc:	781b      	ldrb	r3, [r3, #0]
 801afce:	b25b      	sxtb	r3, r3
 801afd0:	220f      	movs	r2, #15
 801afd2:	4393      	bics	r3, r2
 801afd4:	b25a      	sxtb	r2, r3
 801afd6:	1dfb      	adds	r3, r7, #7
 801afd8:	781b      	ldrb	r3, [r3, #0]
 801afda:	3b02      	subs	r3, #2
 801afdc:	b2db      	uxtb	r3, r3
 801afde:	b25b      	sxtb	r3, r3
 801afe0:	210f      	movs	r1, #15
 801afe2:	400b      	ands	r3, r1
 801afe4:	b25b      	sxtb	r3, r3
 801afe6:	4313      	orrs	r3, r2
 801afe8:	b25a      	sxtb	r2, r3
 801afea:	183b      	adds	r3, r7, r0
 801afec:	701a      	strb	r2, [r3, #0]
 801afee:	e035      	b.n	801b05c <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 801aff0:	1dfb      	adds	r3, r7, #7
 801aff2:	781b      	ldrb	r3, [r3, #0]
 801aff4:	b25b      	sxtb	r3, r3
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	dd18      	ble.n	801b02c <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 801affa:	1dfb      	adds	r3, r7, #7
 801affc:	781b      	ldrb	r3, [r3, #0]
 801affe:	b25b      	sxtb	r3, r3
 801b000:	2b0f      	cmp	r3, #15
 801b002:	dd02      	ble.n	801b00a <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 801b004:	1dfb      	adds	r3, r7, #7
 801b006:	220f      	movs	r2, #15
 801b008:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 801b00a:	210f      	movs	r1, #15
 801b00c:	187b      	adds	r3, r7, r1
 801b00e:	781b      	ldrb	r3, [r3, #0]
 801b010:	b25b      	sxtb	r3, r3
 801b012:	227f      	movs	r2, #127	; 0x7f
 801b014:	4393      	bics	r3, r2
 801b016:	b25b      	sxtb	r3, r3
 801b018:	2270      	movs	r2, #112	; 0x70
 801b01a:	4313      	orrs	r3, r2
 801b01c:	b25a      	sxtb	r2, r3
 801b01e:	1dfb      	adds	r3, r7, #7
 801b020:	781b      	ldrb	r3, [r3, #0]
 801b022:	4313      	orrs	r3, r2
 801b024:	b25a      	sxtb	r2, r3
 801b026:	187b      	adds	r3, r7, r1
 801b028:	701a      	strb	r2, [r3, #0]
 801b02a:	e017      	b.n	801b05c <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 801b02c:	1dfb      	adds	r3, r7, #7
 801b02e:	781b      	ldrb	r3, [r3, #0]
 801b030:	b25b      	sxtb	r3, r3
 801b032:	3304      	adds	r3, #4
 801b034:	da02      	bge.n	801b03c <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 801b036:	1dfb      	adds	r3, r7, #7
 801b038:	22fc      	movs	r2, #252	; 0xfc
 801b03a:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 801b03c:	210f      	movs	r1, #15
 801b03e:	187b      	adds	r3, r7, r1
 801b040:	781b      	ldrb	r3, [r3, #0]
 801b042:	b25b      	sxtb	r3, r3
 801b044:	227f      	movs	r2, #127	; 0x7f
 801b046:	4393      	bics	r3, r2
 801b048:	b25a      	sxtb	r2, r3
 801b04a:	1dfb      	adds	r3, r7, #7
 801b04c:	781b      	ldrb	r3, [r3, #0]
 801b04e:	3304      	adds	r3, #4
 801b050:	b2db      	uxtb	r3, r3
 801b052:	b25b      	sxtb	r3, r3
 801b054:	4313      	orrs	r3, r2
 801b056:	b25a      	sxtb	r2, r3
 801b058:	187b      	adds	r3, r7, r1
 801b05a:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801b05c:	230f      	movs	r3, #15
 801b05e:	18fb      	adds	r3, r7, r3
 801b060:	781b      	ldrb	r3, [r3, #0]
 801b062:	0019      	movs	r1, r3
 801b064:	2009      	movs	r0, #9
 801b066:	f000 fc05 	bl	801b874 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801b06a:	230e      	movs	r3, #14
 801b06c:	18fb      	adds	r3, r7, r3
 801b06e:	781b      	ldrb	r3, [r3, #0]
 801b070:	0019      	movs	r1, r3
 801b072:	204d      	movs	r0, #77	; 0x4d
 801b074:	f000 fbfe 	bl	801b874 <SX1276Write>
}
 801b078:	46c0      	nop			; (mov r8, r8)
 801b07a:	46bd      	mov	sp, r7
 801b07c:	b005      	add	sp, #20
 801b07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b080:	20001ab8 	.word	0x20001ab8

0801b084 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801b084:	b580      	push	{r7, lr}
 801b086:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 801b088:	4b0b      	ldr	r3, [pc, #44]	; (801b0b8 <SX1276SetSleep+0x34>)
 801b08a:	0018      	movs	r0, r3
 801b08c:	f002 fcb2 	bl	801d9f4 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801b090:	4b0a      	ldr	r3, [pc, #40]	; (801b0bc <SX1276SetSleep+0x38>)
 801b092:	0018      	movs	r0, r3
 801b094:	f002 fcae 	bl	801d9f4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801b098:	4b09      	ldr	r3, [pc, #36]	; (801b0c0 <SX1276SetSleep+0x3c>)
 801b09a:	0018      	movs	r0, r3
 801b09c:	f002 fcaa 	bl	801d9f4 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b0a0:	2000      	movs	r0, #0
 801b0a2:	f000 fb20 	bl	801b6e6 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 801b0a6:	2000      	movs	r0, #0
 801b0a8:	f7eb fdba 	bl	8006c20 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 801b0ac:	4b05      	ldr	r3, [pc, #20]	; (801b0c4 <SX1276SetSleep+0x40>)
 801b0ae:	2200      	movs	r2, #0
 801b0b0:	711a      	strb	r2, [r3, #4]
}
 801b0b2:	46c0      	nop			; (mov r8, r8)
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	bd80      	pop	{r7, pc}
 801b0b8:	20001b20 	.word	0x20001b20
 801b0bc:	20001a88 	.word	0x20001a88
 801b0c0:	20001aa0 	.word	0x20001aa0
 801b0c4:	20001ab8 	.word	0x20001ab8

0801b0c8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 801b0cc:	4b0a      	ldr	r3, [pc, #40]	; (801b0f8 <SX1276SetStby+0x30>)
 801b0ce:	0018      	movs	r0, r3
 801b0d0:	f002 fc90 	bl	801d9f4 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801b0d4:	4b09      	ldr	r3, [pc, #36]	; (801b0fc <SX1276SetStby+0x34>)
 801b0d6:	0018      	movs	r0, r3
 801b0d8:	f002 fc8c 	bl	801d9f4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801b0dc:	4b08      	ldr	r3, [pc, #32]	; (801b100 <SX1276SetStby+0x38>)
 801b0de:	0018      	movs	r0, r3
 801b0e0:	f002 fc88 	bl	801d9f4 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801b0e4:	2001      	movs	r0, #1
 801b0e6:	f000 fafe 	bl	801b6e6 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801b0ea:	4b06      	ldr	r3, [pc, #24]	; (801b104 <SX1276SetStby+0x3c>)
 801b0ec:	2200      	movs	r2, #0
 801b0ee:	711a      	strb	r2, [r3, #4]
}
 801b0f0:	46c0      	nop			; (mov r8, r8)
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd80      	pop	{r7, pc}
 801b0f6:	46c0      	nop			; (mov r8, r8)
 801b0f8:	20001b20 	.word	0x20001b20
 801b0fc:	20001a88 	.word	0x20001a88
 801b100:	20001aa0 	.word	0x20001aa0
 801b104:	20001ab8 	.word	0x20001ab8

0801b108 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b084      	sub	sp, #16
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 801b110:	230f      	movs	r3, #15
 801b112:	18fb      	adds	r3, r7, r3
 801b114:	2200      	movs	r2, #0
 801b116:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 801b118:	4bba      	ldr	r3, [pc, #744]	; (801b404 <SX1276SetRx+0x2fc>)
 801b11a:	0018      	movs	r0, r3
 801b11c:	f002 fc6a 	bl	801d9f4 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 801b120:	4bb9      	ldr	r3, [pc, #740]	; (801b408 <SX1276SetRx+0x300>)
 801b122:	795b      	ldrb	r3, [r3, #5]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d002      	beq.n	801b12e <SX1276SetRx+0x26>
 801b128:	2b01      	cmp	r3, #1
 801b12a:	d041      	beq.n	801b1b0 <SX1276SetRx+0xa8>
 801b12c:	e127      	b.n	801b37e <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801b12e:	230f      	movs	r3, #15
 801b130:	18fb      	adds	r3, r7, r3
 801b132:	4ab5      	ldr	r2, [pc, #724]	; (801b408 <SX1276SetRx+0x300>)
 801b134:	2126      	movs	r1, #38	; 0x26
 801b136:	5c52      	ldrb	r2, [r2, r1]
 801b138:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801b13a:	2040      	movs	r0, #64	; 0x40
 801b13c:	f000 fbab 	bl	801b896 <SX1276Read>
 801b140:	0003      	movs	r3, r0
 801b142:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801b144:	2203      	movs	r2, #3
 801b146:	4013      	ands	r3, r2
 801b148:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801b14a:	220c      	movs	r2, #12
 801b14c:	4313      	orrs	r3, r2
 801b14e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801b150:	b2db      	uxtb	r3, r3
 801b152:	0019      	movs	r1, r3
 801b154:	2040      	movs	r0, #64	; 0x40
 801b156:	f000 fb8d 	bl	801b874 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801b15a:	2041      	movs	r0, #65	; 0x41
 801b15c:	f000 fb9b 	bl	801b896 <SX1276Read>
 801b160:	0003      	movs	r3, r0
 801b162:	001a      	movs	r2, r3
 801b164:	233f      	movs	r3, #63	; 0x3f
 801b166:	425b      	negs	r3, r3
 801b168:	4313      	orrs	r3, r2
 801b16a:	b2db      	uxtb	r3, r3
 801b16c:	0019      	movs	r1, r3
 801b16e:	2041      	movs	r0, #65	; 0x41
 801b170:	f000 fb80 	bl	801b874 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801b174:	2035      	movs	r0, #53	; 0x35
 801b176:	f000 fb8e 	bl	801b896 <SX1276Read>
 801b17a:	0003      	movs	r3, r0
 801b17c:	001a      	movs	r2, r3
 801b17e:	233f      	movs	r3, #63	; 0x3f
 801b180:	4013      	ands	r3, r2
 801b182:	b2d9      	uxtb	r1, r3
 801b184:	4ba0      	ldr	r3, [pc, #640]	; (801b408 <SX1276SetRx+0x300>)
 801b186:	223e      	movs	r2, #62	; 0x3e
 801b188:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801b18a:	211e      	movs	r1, #30
 801b18c:	200d      	movs	r0, #13
 801b18e:	f000 fb71 	bl	801b874 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b192:	4b9d      	ldr	r3, [pc, #628]	; (801b408 <SX1276SetRx+0x300>)
 801b194:	2230      	movs	r2, #48	; 0x30
 801b196:	2100      	movs	r1, #0
 801b198:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b19a:	4b9b      	ldr	r3, [pc, #620]	; (801b408 <SX1276SetRx+0x300>)
 801b19c:	2231      	movs	r2, #49	; 0x31
 801b19e:	2100      	movs	r1, #0
 801b1a0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b1a2:	4b99      	ldr	r3, [pc, #612]	; (801b408 <SX1276SetRx+0x300>)
 801b1a4:	2200      	movs	r2, #0
 801b1a6:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801b1a8:	4b97      	ldr	r3, [pc, #604]	; (801b408 <SX1276SetRx+0x300>)
 801b1aa:	2200      	movs	r2, #0
 801b1ac:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801b1ae:	e0e6      	b.n	801b37e <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801b1b0:	4b95      	ldr	r3, [pc, #596]	; (801b408 <SX1276SetRx+0x300>)
 801b1b2:	2255      	movs	r2, #85	; 0x55
 801b1b4:	5c9b      	ldrb	r3, [r3, r2]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d010      	beq.n	801b1dc <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801b1ba:	2033      	movs	r0, #51	; 0x33
 801b1bc:	f000 fb6b 	bl	801b896 <SX1276Read>
 801b1c0:	0003      	movs	r3, r0
 801b1c2:	001a      	movs	r2, r3
 801b1c4:	2341      	movs	r3, #65	; 0x41
 801b1c6:	4313      	orrs	r3, r2
 801b1c8:	b2db      	uxtb	r3, r3
 801b1ca:	0019      	movs	r1, r3
 801b1cc:	2033      	movs	r0, #51	; 0x33
 801b1ce:	f000 fb51 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801b1d2:	2119      	movs	r1, #25
 801b1d4:	203b      	movs	r0, #59	; 0x3b
 801b1d6:	f000 fb4d 	bl	801b874 <SX1276Write>
 801b1da:	e013      	b.n	801b204 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801b1dc:	2033      	movs	r0, #51	; 0x33
 801b1de:	f000 fb5a 	bl	801b896 <SX1276Read>
 801b1e2:	0003      	movs	r3, r0
 801b1e4:	b25b      	sxtb	r3, r3
 801b1e6:	2241      	movs	r2, #65	; 0x41
 801b1e8:	4393      	bics	r3, r2
 801b1ea:	b25b      	sxtb	r3, r3
 801b1ec:	2201      	movs	r2, #1
 801b1ee:	4313      	orrs	r3, r2
 801b1f0:	b25b      	sxtb	r3, r3
 801b1f2:	b2db      	uxtb	r3, r3
 801b1f4:	0019      	movs	r1, r3
 801b1f6:	2033      	movs	r0, #51	; 0x33
 801b1f8:	f000 fb3c 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801b1fc:	211d      	movs	r1, #29
 801b1fe:	203b      	movs	r0, #59	; 0x3b
 801b200:	f000 fb38 	bl	801b874 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801b204:	4b80      	ldr	r3, [pc, #512]	; (801b408 <SX1276SetRx+0x300>)
 801b206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b208:	2b08      	cmp	r3, #8
 801b20a:	d900      	bls.n	801b20e <SX1276SetRx+0x106>
 801b20c:	e075      	b.n	801b2fa <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801b20e:	2031      	movs	r0, #49	; 0x31
 801b210:	f000 fb41 	bl	801b896 <SX1276Read>
 801b214:	0003      	movs	r3, r0
 801b216:	001a      	movs	r2, r3
 801b218:	237f      	movs	r3, #127	; 0x7f
 801b21a:	4013      	ands	r3, r2
 801b21c:	b2db      	uxtb	r3, r3
 801b21e:	0019      	movs	r1, r3
 801b220:	2031      	movs	r0, #49	; 0x31
 801b222:	f000 fb27 	bl	801b874 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801b226:	2100      	movs	r1, #0
 801b228:	2030      	movs	r0, #48	; 0x30
 801b22a:	f000 fb23 	bl	801b874 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801b22e:	4b76      	ldr	r3, [pc, #472]	; (801b408 <SX1276SetRx+0x300>)
 801b230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b232:	2b08      	cmp	r3, #8
 801b234:	d86e      	bhi.n	801b314 <SX1276SetRx+0x20c>
 801b236:	009a      	lsls	r2, r3, #2
 801b238:	4b74      	ldr	r3, [pc, #464]	; (801b40c <SX1276SetRx+0x304>)
 801b23a:	18d3      	adds	r3, r2, r3
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801b240:	2148      	movs	r1, #72	; 0x48
 801b242:	202f      	movs	r0, #47	; 0x2f
 801b244:	f000 fb16 	bl	801b874 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801b248:	4b6f      	ldr	r3, [pc, #444]	; (801b408 <SX1276SetRx+0x300>)
 801b24a:	689b      	ldr	r3, [r3, #8]
 801b24c:	4a70      	ldr	r2, [pc, #448]	; (801b410 <SX1276SetRx+0x308>)
 801b24e:	4694      	mov	ip, r2
 801b250:	4463      	add	r3, ip
 801b252:	0018      	movs	r0, r3
 801b254:	f7fe feb2 	bl	8019fbc <SX1276SetChannel>
                    break;
 801b258:	e05c      	b.n	801b314 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801b25a:	2144      	movs	r1, #68	; 0x44
 801b25c:	202f      	movs	r0, #47	; 0x2f
 801b25e:	f000 fb09 	bl	801b874 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801b262:	4b69      	ldr	r3, [pc, #420]	; (801b408 <SX1276SetRx+0x300>)
 801b264:	689b      	ldr	r3, [r3, #8]
 801b266:	4a6b      	ldr	r2, [pc, #428]	; (801b414 <SX1276SetRx+0x30c>)
 801b268:	4694      	mov	ip, r2
 801b26a:	4463      	add	r3, ip
 801b26c:	0018      	movs	r0, r3
 801b26e:	f7fe fea5 	bl	8019fbc <SX1276SetChannel>
                    break;
 801b272:	e04f      	b.n	801b314 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801b274:	2144      	movs	r1, #68	; 0x44
 801b276:	202f      	movs	r0, #47	; 0x2f
 801b278:	f000 fafc 	bl	801b874 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801b27c:	4b62      	ldr	r3, [pc, #392]	; (801b408 <SX1276SetRx+0x300>)
 801b27e:	689b      	ldr	r3, [r3, #8]
 801b280:	4a65      	ldr	r2, [pc, #404]	; (801b418 <SX1276SetRx+0x310>)
 801b282:	4694      	mov	ip, r2
 801b284:	4463      	add	r3, ip
 801b286:	0018      	movs	r0, r3
 801b288:	f7fe fe98 	bl	8019fbc <SX1276SetChannel>
                    break;
 801b28c:	e042      	b.n	801b314 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801b28e:	2144      	movs	r1, #68	; 0x44
 801b290:	202f      	movs	r0, #47	; 0x2f
 801b292:	f000 faef 	bl	801b874 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801b296:	4b5c      	ldr	r3, [pc, #368]	; (801b408 <SX1276SetRx+0x300>)
 801b298:	689b      	ldr	r3, [r3, #8]
 801b29a:	4a60      	ldr	r2, [pc, #384]	; (801b41c <SX1276SetRx+0x314>)
 801b29c:	4694      	mov	ip, r2
 801b29e:	4463      	add	r3, ip
 801b2a0:	0018      	movs	r0, r3
 801b2a2:	f7fe fe8b 	bl	8019fbc <SX1276SetChannel>
                    break;
 801b2a6:	e035      	b.n	801b314 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801b2a8:	2144      	movs	r1, #68	; 0x44
 801b2aa:	202f      	movs	r0, #47	; 0x2f
 801b2ac:	f000 fae2 	bl	801b874 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801b2b0:	4b55      	ldr	r3, [pc, #340]	; (801b408 <SX1276SetRx+0x300>)
 801b2b2:	689b      	ldr	r3, [r3, #8]
 801b2b4:	4a5a      	ldr	r2, [pc, #360]	; (801b420 <SX1276SetRx+0x318>)
 801b2b6:	4694      	mov	ip, r2
 801b2b8:	4463      	add	r3, ip
 801b2ba:	0018      	movs	r0, r3
 801b2bc:	f7fe fe7e 	bl	8019fbc <SX1276SetChannel>
                    break;
 801b2c0:	e028      	b.n	801b314 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801b2c2:	2144      	movs	r1, #68	; 0x44
 801b2c4:	202f      	movs	r0, #47	; 0x2f
 801b2c6:	f000 fad5 	bl	801b874 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801b2ca:	4b4f      	ldr	r3, [pc, #316]	; (801b408 <SX1276SetRx+0x300>)
 801b2cc:	689b      	ldr	r3, [r3, #8]
 801b2ce:	4a55      	ldr	r2, [pc, #340]	; (801b424 <SX1276SetRx+0x31c>)
 801b2d0:	4694      	mov	ip, r2
 801b2d2:	4463      	add	r3, ip
 801b2d4:	0018      	movs	r0, r3
 801b2d6:	f7fe fe71 	bl	8019fbc <SX1276SetChannel>
                    break;
 801b2da:	e01b      	b.n	801b314 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801b2dc:	2140      	movs	r1, #64	; 0x40
 801b2de:	202f      	movs	r0, #47	; 0x2f
 801b2e0:	f000 fac8 	bl	801b874 <SX1276Write>
                    break;
 801b2e4:	e016      	b.n	801b314 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801b2e6:	2140      	movs	r1, #64	; 0x40
 801b2e8:	202f      	movs	r0, #47	; 0x2f
 801b2ea:	f000 fac3 	bl	801b874 <SX1276Write>
                    break;
 801b2ee:	e011      	b.n	801b314 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801b2f0:	2140      	movs	r1, #64	; 0x40
 801b2f2:	202f      	movs	r0, #47	; 0x2f
 801b2f4:	f000 fabe 	bl	801b874 <SX1276Write>
                    break;
 801b2f8:	e00c      	b.n	801b314 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801b2fa:	2031      	movs	r0, #49	; 0x31
 801b2fc:	f000 facb 	bl	801b896 <SX1276Read>
 801b300:	0003      	movs	r3, r0
 801b302:	001a      	movs	r2, r3
 801b304:	2380      	movs	r3, #128	; 0x80
 801b306:	425b      	negs	r3, r3
 801b308:	4313      	orrs	r3, r2
 801b30a:	b2db      	uxtb	r3, r3
 801b30c:	0019      	movs	r1, r3
 801b30e:	2031      	movs	r0, #49	; 0x31
 801b310:	f000 fab0 	bl	801b874 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801b314:	230f      	movs	r3, #15
 801b316:	18fb      	adds	r3, r7, r3
 801b318:	4a3b      	ldr	r2, [pc, #236]	; (801b408 <SX1276SetRx+0x300>)
 801b31a:	2156      	movs	r1, #86	; 0x56
 801b31c:	5c52      	ldrb	r2, [r2, r1]
 801b31e:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801b320:	4b39      	ldr	r3, [pc, #228]	; (801b408 <SX1276SetRx+0x300>)
 801b322:	2253      	movs	r2, #83	; 0x53
 801b324:	5c9b      	ldrb	r3, [r3, r2]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d010      	beq.n	801b34c <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801b32a:	211d      	movs	r1, #29
 801b32c:	2011      	movs	r0, #17
 801b32e:	f000 faa1 	bl	801b874 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801b332:	2040      	movs	r0, #64	; 0x40
 801b334:	f000 faaf 	bl	801b896 <SX1276Read>
 801b338:	0003      	movs	r3, r0
 801b33a:	001a      	movs	r2, r3
 801b33c:	2333      	movs	r3, #51	; 0x33
 801b33e:	4013      	ands	r3, r2
 801b340:	b2db      	uxtb	r3, r3
 801b342:	0019      	movs	r1, r3
 801b344:	2040      	movs	r0, #64	; 0x40
 801b346:	f000 fa95 	bl	801b874 <SX1276Write>
 801b34a:	e00f      	b.n	801b36c <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801b34c:	211f      	movs	r1, #31
 801b34e:	2011      	movs	r0, #17
 801b350:	f000 fa90 	bl	801b874 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801b354:	2040      	movs	r0, #64	; 0x40
 801b356:	f000 fa9e 	bl	801b896 <SX1276Read>
 801b35a:	0003      	movs	r3, r0
 801b35c:	001a      	movs	r2, r3
 801b35e:	233f      	movs	r3, #63	; 0x3f
 801b360:	4013      	ands	r3, r2
 801b362:	b2db      	uxtb	r3, r3
 801b364:	0019      	movs	r1, r3
 801b366:	2040      	movs	r0, #64	; 0x40
 801b368:	f000 fa84 	bl	801b874 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801b36c:	2100      	movs	r1, #0
 801b36e:	200f      	movs	r0, #15
 801b370:	f000 fa80 	bl	801b874 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801b374:	2100      	movs	r1, #0
 801b376:	200d      	movs	r0, #13
 801b378:	f000 fa7c 	bl	801b874 <SX1276Write>
        }
        break;
 801b37c:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801b37e:	2380      	movs	r3, #128	; 0x80
 801b380:	005a      	lsls	r2, r3, #1
 801b382:	4b29      	ldr	r3, [pc, #164]	; (801b428 <SX1276SetRx+0x320>)
 801b384:	2100      	movs	r1, #0
 801b386:	0018      	movs	r0, r3
 801b388:	f003 fd6d 	bl	801ee66 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801b38c:	4b1e      	ldr	r3, [pc, #120]	; (801b408 <SX1276SetRx+0x300>)
 801b38e:	2201      	movs	r2, #1
 801b390:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	2b00      	cmp	r3, #0
 801b396:	d009      	beq.n	801b3ac <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801b398:	687a      	ldr	r2, [r7, #4]
 801b39a:	4b24      	ldr	r3, [pc, #144]	; (801b42c <SX1276SetRx+0x324>)
 801b39c:	0011      	movs	r1, r2
 801b39e:	0018      	movs	r0, r3
 801b3a0:	f002 fba0 	bl	801dae4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801b3a4:	4b21      	ldr	r3, [pc, #132]	; (801b42c <SX1276SetRx+0x324>)
 801b3a6:	0018      	movs	r0, r3
 801b3a8:	f002 faac 	bl	801d904 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801b3ac:	4b16      	ldr	r3, [pc, #88]	; (801b408 <SX1276SetRx+0x300>)
 801b3ae:	795b      	ldrb	r3, [r3, #5]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d116      	bne.n	801b3e2 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801b3b4:	2005      	movs	r0, #5
 801b3b6:	f000 f996 	bl	801b6e6 <SX1276SetOpMode>

        if( rxContinuous == false )
 801b3ba:	230f      	movs	r3, #15
 801b3bc:	18fb      	adds	r3, r7, r3
 801b3be:	781b      	ldrb	r3, [r3, #0]
 801b3c0:	2201      	movs	r2, #1
 801b3c2:	4053      	eors	r3, r2
 801b3c4:	b2db      	uxtb	r3, r3
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d017      	beq.n	801b3fa <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801b3ca:	4b0f      	ldr	r3, [pc, #60]	; (801b408 <SX1276SetRx+0x300>)
 801b3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3ce:	4b18      	ldr	r3, [pc, #96]	; (801b430 <SX1276SetRx+0x328>)
 801b3d0:	0011      	movs	r1, r2
 801b3d2:	0018      	movs	r0, r3
 801b3d4:	f002 fb86 	bl	801dae4 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 801b3d8:	4b15      	ldr	r3, [pc, #84]	; (801b430 <SX1276SetRx+0x328>)
 801b3da:	0018      	movs	r0, r3
 801b3dc:	f002 fa92 	bl	801d904 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801b3e0:	e00b      	b.n	801b3fa <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 801b3e2:	230f      	movs	r3, #15
 801b3e4:	18fb      	adds	r3, r7, r3
 801b3e6:	781b      	ldrb	r3, [r3, #0]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d003      	beq.n	801b3f4 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801b3ec:	2005      	movs	r0, #5
 801b3ee:	f000 f97a 	bl	801b6e6 <SX1276SetOpMode>
}
 801b3f2:	e002      	b.n	801b3fa <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801b3f4:	2006      	movs	r0, #6
 801b3f6:	f000 f976 	bl	801b6e6 <SX1276SetOpMode>
}
 801b3fa:	46c0      	nop			; (mov r8, r8)
 801b3fc:	46bd      	mov	sp, r7
 801b3fe:	b004      	add	sp, #16
 801b400:	bd80      	pop	{r7, pc}
 801b402:	46c0      	nop			; (mov r8, r8)
 801b404:	20001a88 	.word	0x20001a88
 801b408:	20001ab8 	.word	0x20001ab8
 801b40c:	0802188c 	.word	0x0802188c
 801b410:	00001e82 	.word	0x00001e82
 801b414:	000028b4 	.word	0x000028b4
 801b418:	00003d04 	.word	0x00003d04
 801b41c:	0000515e 	.word	0x0000515e
 801b420:	00007a12 	.word	0x00007a12
 801b424:	0000a2c6 	.word	0x0000a2c6
 801b428:	2000109c 	.word	0x2000109c
 801b42c:	20001b20 	.word	0x20001b20
 801b430:	20001aa0 	.word	0x20001aa0

0801b434 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 801b434:	b580      	push	{r7, lr}
 801b436:	b082      	sub	sp, #8
 801b438:	af00      	add	r7, sp, #0
 801b43a:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 801b43c:	4b38      	ldr	r3, [pc, #224]	; (801b520 <SX1276SetTx+0xec>)
 801b43e:	0018      	movs	r0, r3
 801b440:	f002 fad8 	bl	801d9f4 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801b444:	687a      	ldr	r2, [r7, #4]
 801b446:	4b37      	ldr	r3, [pc, #220]	; (801b524 <SX1276SetTx+0xf0>)
 801b448:	0011      	movs	r1, r2
 801b44a:	0018      	movs	r0, r3
 801b44c:	f002 fb4a 	bl	801dae4 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 801b450:	4b35      	ldr	r3, [pc, #212]	; (801b528 <SX1276SetTx+0xf4>)
 801b452:	795b      	ldrb	r3, [r3, #5]
 801b454:	2b00      	cmp	r3, #0
 801b456:	d002      	beq.n	801b45e <SX1276SetTx+0x2a>
 801b458:	2b01      	cmp	r3, #1
 801b45a:	d024      	beq.n	801b4a6 <SX1276SetTx+0x72>
 801b45c:	e052      	b.n	801b504 <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801b45e:	2040      	movs	r0, #64	; 0x40
 801b460:	f000 fa19 	bl	801b896 <SX1276Read>
 801b464:	0003      	movs	r3, r0
 801b466:	001a      	movs	r2, r3
 801b468:	2303      	movs	r3, #3
 801b46a:	4013      	ands	r3, r2
 801b46c:	b2db      	uxtb	r3, r3
 801b46e:	0019      	movs	r1, r3
 801b470:	2040      	movs	r0, #64	; 0x40
 801b472:	f000 f9ff 	bl	801b874 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801b476:	2041      	movs	r0, #65	; 0x41
 801b478:	f000 fa0d 	bl	801b896 <SX1276Read>
 801b47c:	0003      	movs	r3, r0
 801b47e:	001a      	movs	r2, r3
 801b480:	233e      	movs	r3, #62	; 0x3e
 801b482:	4013      	ands	r3, r2
 801b484:	b2db      	uxtb	r3, r3
 801b486:	0019      	movs	r1, r3
 801b488:	2041      	movs	r0, #65	; 0x41
 801b48a:	f000 f9f3 	bl	801b874 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801b48e:	2035      	movs	r0, #53	; 0x35
 801b490:	f000 fa01 	bl	801b896 <SX1276Read>
 801b494:	0003      	movs	r3, r0
 801b496:	001a      	movs	r2, r3
 801b498:	233f      	movs	r3, #63	; 0x3f
 801b49a:	4013      	ands	r3, r2
 801b49c:	b2d9      	uxtb	r1, r3
 801b49e:	4b22      	ldr	r3, [pc, #136]	; (801b528 <SX1276SetTx+0xf4>)
 801b4a0:	223e      	movs	r2, #62	; 0x3e
 801b4a2:	5499      	strb	r1, [r3, r2]
        }
        break;
 801b4a4:	e02e      	b.n	801b504 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801b4a6:	4b20      	ldr	r3, [pc, #128]	; (801b528 <SX1276SetTx+0xf4>)
 801b4a8:	2253      	movs	r2, #83	; 0x53
 801b4aa:	5c9b      	ldrb	r3, [r3, r2]
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d014      	beq.n	801b4da <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801b4b0:	21f5      	movs	r1, #245	; 0xf5
 801b4b2:	2011      	movs	r0, #17
 801b4b4:	f000 f9de 	bl	801b874 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801b4b8:	2040      	movs	r0, #64	; 0x40
 801b4ba:	f000 f9ec 	bl	801b896 <SX1276Read>
 801b4be:	0003      	movs	r3, r0
 801b4c0:	b25b      	sxtb	r3, r3
 801b4c2:	2233      	movs	r2, #51	; 0x33
 801b4c4:	4013      	ands	r3, r2
 801b4c6:	b25b      	sxtb	r3, r3
 801b4c8:	2240      	movs	r2, #64	; 0x40
 801b4ca:	4313      	orrs	r3, r2
 801b4cc:	b25b      	sxtb	r3, r3
 801b4ce:	b2db      	uxtb	r3, r3
 801b4d0:	0019      	movs	r1, r3
 801b4d2:	2040      	movs	r0, #64	; 0x40
 801b4d4:	f000 f9ce 	bl	801b874 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801b4d8:	e013      	b.n	801b502 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801b4da:	21f7      	movs	r1, #247	; 0xf7
 801b4dc:	2011      	movs	r0, #17
 801b4de:	f000 f9c9 	bl	801b874 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801b4e2:	2040      	movs	r0, #64	; 0x40
 801b4e4:	f000 f9d7 	bl	801b896 <SX1276Read>
 801b4e8:	0003      	movs	r3, r0
 801b4ea:	b25b      	sxtb	r3, r3
 801b4ec:	223f      	movs	r2, #63	; 0x3f
 801b4ee:	4013      	ands	r3, r2
 801b4f0:	b25b      	sxtb	r3, r3
 801b4f2:	2240      	movs	r2, #64	; 0x40
 801b4f4:	4313      	orrs	r3, r2
 801b4f6:	b25b      	sxtb	r3, r3
 801b4f8:	b2db      	uxtb	r3, r3
 801b4fa:	0019      	movs	r1, r3
 801b4fc:	2040      	movs	r0, #64	; 0x40
 801b4fe:	f000 f9b9 	bl	801b874 <SX1276Write>
        break;
 801b502:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801b504:	4b08      	ldr	r3, [pc, #32]	; (801b528 <SX1276SetTx+0xf4>)
 801b506:	2202      	movs	r2, #2
 801b508:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801b50a:	4b06      	ldr	r3, [pc, #24]	; (801b524 <SX1276SetTx+0xf0>)
 801b50c:	0018      	movs	r0, r3
 801b50e:	f002 f9f9 	bl	801d904 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801b512:	2003      	movs	r0, #3
 801b514:	f000 f8e7 	bl	801b6e6 <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801b518:	46c0      	nop			; (mov r8, r8)
 801b51a:	46bd      	mov	sp, r7
 801b51c:	b002      	add	sp, #8
 801b51e:	bd80      	pop	{r7, pc}
 801b520:	20001b20 	.word	0x20001b20
 801b524:	20001a88 	.word	0x20001a88
 801b528:	20001ab8 	.word	0x20001ab8

0801b52c <SX1276StartCad>:

void SX1276StartCad( void )
{
 801b52c:	b580      	push	{r7, lr}
 801b52e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801b530:	4b11      	ldr	r3, [pc, #68]	; (801b578 <SX1276StartCad+0x4c>)
 801b532:	795b      	ldrb	r3, [r3, #5]
 801b534:	2b00      	cmp	r3, #0
 801b536:	d01a      	beq.n	801b56e <SX1276StartCad+0x42>
 801b538:	2b01      	cmp	r3, #1
 801b53a:	d000      	beq.n	801b53e <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801b53c:	e018      	b.n	801b570 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801b53e:	21fa      	movs	r1, #250	; 0xfa
 801b540:	2011      	movs	r0, #17
 801b542:	f000 f997 	bl	801b874 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801b546:	2040      	movs	r0, #64	; 0x40
 801b548:	f000 f9a5 	bl	801b896 <SX1276Read>
 801b54c:	0003      	movs	r3, r0
 801b54e:	001a      	movs	r2, r3
 801b550:	2303      	movs	r3, #3
 801b552:	439a      	bics	r2, r3
 801b554:	0013      	movs	r3, r2
 801b556:	b2db      	uxtb	r3, r3
 801b558:	0019      	movs	r1, r3
 801b55a:	2040      	movs	r0, #64	; 0x40
 801b55c:	f000 f98a 	bl	801b874 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801b560:	4b05      	ldr	r3, [pc, #20]	; (801b578 <SX1276StartCad+0x4c>)
 801b562:	2203      	movs	r2, #3
 801b564:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801b566:	2007      	movs	r0, #7
 801b568:	f000 f8bd 	bl	801b6e6 <SX1276SetOpMode>
        break;
 801b56c:	e000      	b.n	801b570 <SX1276StartCad+0x44>
        break;
 801b56e:	46c0      	nop			; (mov r8, r8)
    }
}
 801b570:	46c0      	nop			; (mov r8, r8)
 801b572:	46bd      	mov	sp, r7
 801b574:	bd80      	pop	{r7, pc}
 801b576:	46c0      	nop			; (mov r8, r8)
 801b578:	20001ab8 	.word	0x20001ab8

0801b57c <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801b57c:	b580      	push	{r7, lr}
 801b57e:	b08e      	sub	sp, #56	; 0x38
 801b580:	af0a      	add	r7, sp, #40	; 0x28
 801b582:	6078      	str	r0, [r7, #4]
 801b584:	0008      	movs	r0, r1
 801b586:	0011      	movs	r1, r2
 801b588:	1cfb      	adds	r3, r7, #3
 801b58a:	1c02      	adds	r2, r0, #0
 801b58c:	701a      	strb	r2, [r3, #0]
 801b58e:	003b      	movs	r3, r7
 801b590:	1c0a      	adds	r2, r1, #0
 801b592:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801b594:	003b      	movs	r3, r7
 801b596:	881a      	ldrh	r2, [r3, #0]
 801b598:	0013      	movs	r3, r2
 801b59a:	015b      	lsls	r3, r3, #5
 801b59c:	1a9b      	subs	r3, r3, r2
 801b59e:	009b      	lsls	r3, r3, #2
 801b5a0:	189b      	adds	r3, r3, r2
 801b5a2:	00db      	lsls	r3, r3, #3
 801b5a4:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	0018      	movs	r0, r3
 801b5aa:	f7fe fd07 	bl	8019fbc <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801b5ae:	1cfb      	adds	r3, r7, #3
 801b5b0:	2100      	movs	r1, #0
 801b5b2:	5659      	ldrsb	r1, [r3, r1]
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	9308      	str	r3, [sp, #32]
 801b5b8:	2300      	movs	r3, #0
 801b5ba:	9307      	str	r3, [sp, #28]
 801b5bc:	2300      	movs	r3, #0
 801b5be:	9306      	str	r3, [sp, #24]
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	9305      	str	r3, [sp, #20]
 801b5c4:	2300      	movs	r3, #0
 801b5c6:	9304      	str	r3, [sp, #16]
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	9303      	str	r3, [sp, #12]
 801b5cc:	2305      	movs	r3, #5
 801b5ce:	9302      	str	r3, [sp, #8]
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	9301      	str	r3, [sp, #4]
 801b5d4:	2396      	movs	r3, #150	; 0x96
 801b5d6:	015b      	lsls	r3, r3, #5
 801b5d8:	9300      	str	r3, [sp, #0]
 801b5da:	2300      	movs	r3, #0
 801b5dc:	2200      	movs	r2, #0
 801b5de:	2000      	movs	r0, #0
 801b5e0:	f7ff f8d6 	bl	801a790 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801b5e4:	2031      	movs	r0, #49	; 0x31
 801b5e6:	f000 f956 	bl	801b896 <SX1276Read>
 801b5ea:	0003      	movs	r3, r0
 801b5ec:	001a      	movs	r2, r3
 801b5ee:	2340      	movs	r3, #64	; 0x40
 801b5f0:	439a      	bics	r2, r3
 801b5f2:	0013      	movs	r3, r2
 801b5f4:	b2db      	uxtb	r3, r3
 801b5f6:	0019      	movs	r1, r3
 801b5f8:	2031      	movs	r0, #49	; 0x31
 801b5fa:	f000 f93b 	bl	801b874 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801b5fe:	21f0      	movs	r1, #240	; 0xf0
 801b600:	2040      	movs	r0, #64	; 0x40
 801b602:	f000 f937 	bl	801b874 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801b606:	21a0      	movs	r1, #160	; 0xa0
 801b608:	2041      	movs	r0, #65	; 0x41
 801b60a:	f000 f933 	bl	801b874 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801b60e:	68fa      	ldr	r2, [r7, #12]
 801b610:	4b09      	ldr	r3, [pc, #36]	; (801b638 <SX1276SetTxContinuousWave+0xbc>)
 801b612:	0011      	movs	r1, r2
 801b614:	0018      	movs	r0, r3
 801b616:	f002 fa65 	bl	801dae4 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801b61a:	4b08      	ldr	r3, [pc, #32]	; (801b63c <SX1276SetTxContinuousWave+0xc0>)
 801b61c:	2202      	movs	r2, #2
 801b61e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801b620:	4b05      	ldr	r3, [pc, #20]	; (801b638 <SX1276SetTxContinuousWave+0xbc>)
 801b622:	0018      	movs	r0, r3
 801b624:	f002 f96e 	bl	801d904 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801b628:	2003      	movs	r0, #3
 801b62a:	f000 f85c 	bl	801b6e6 <SX1276SetOpMode>
}
 801b62e:	46c0      	nop			; (mov r8, r8)
 801b630:	46bd      	mov	sp, r7
 801b632:	b004      	add	sp, #16
 801b634:	bd80      	pop	{r7, pc}
 801b636:	46c0      	nop			; (mov r8, r8)
 801b638:	20001a88 	.word	0x20001a88
 801b63c:	20001ab8 	.word	0x20001ab8

0801b640 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801b640:	b580      	push	{r7, lr}
 801b642:	b084      	sub	sp, #16
 801b644:	af00      	add	r7, sp, #0
 801b646:	0002      	movs	r2, r0
 801b648:	1dfb      	adds	r3, r7, #7
 801b64a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801b64c:	230e      	movs	r3, #14
 801b64e:	18fb      	adds	r3, r7, r3
 801b650:	2200      	movs	r2, #0
 801b652:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801b654:	1dfb      	adds	r3, r7, #7
 801b656:	781b      	ldrb	r3, [r3, #0]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d002      	beq.n	801b662 <SX1276ReadRssi+0x22>
 801b65c:	2b01      	cmp	r3, #1
 801b65e:	d00d      	beq.n	801b67c <SX1276ReadRssi+0x3c>
 801b660:	e027      	b.n	801b6b2 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801b662:	2011      	movs	r0, #17
 801b664:	f000 f917 	bl	801b896 <SX1276Read>
 801b668:	0003      	movs	r3, r0
 801b66a:	085b      	lsrs	r3, r3, #1
 801b66c:	b2db      	uxtb	r3, r3
 801b66e:	b29b      	uxth	r3, r3
 801b670:	425b      	negs	r3, r3
 801b672:	b29a      	uxth	r2, r3
 801b674:	230e      	movs	r3, #14
 801b676:	18fb      	adds	r3, r7, r3
 801b678:	801a      	strh	r2, [r3, #0]
        break;
 801b67a:	e020      	b.n	801b6be <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b67c:	4b14      	ldr	r3, [pc, #80]	; (801b6d0 <SX1276ReadRssi+0x90>)
 801b67e:	689b      	ldr	r3, [r3, #8]
 801b680:	4a14      	ldr	r2, [pc, #80]	; (801b6d4 <SX1276ReadRssi+0x94>)
 801b682:	4293      	cmp	r3, r2
 801b684:	d90a      	bls.n	801b69c <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801b686:	201b      	movs	r0, #27
 801b688:	f000 f905 	bl	801b896 <SX1276Read>
 801b68c:	0003      	movs	r3, r0
 801b68e:	b29b      	uxth	r3, r3
 801b690:	3b9d      	subs	r3, #157	; 0x9d
 801b692:	b29a      	uxth	r2, r3
 801b694:	230e      	movs	r3, #14
 801b696:	18fb      	adds	r3, r7, r3
 801b698:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801b69a:	e010      	b.n	801b6be <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801b69c:	201b      	movs	r0, #27
 801b69e:	f000 f8fa 	bl	801b896 <SX1276Read>
 801b6a2:	0003      	movs	r3, r0
 801b6a4:	b29b      	uxth	r3, r3
 801b6a6:	3ba4      	subs	r3, #164	; 0xa4
 801b6a8:	b29a      	uxth	r2, r3
 801b6aa:	230e      	movs	r3, #14
 801b6ac:	18fb      	adds	r3, r7, r3
 801b6ae:	801a      	strh	r2, [r3, #0]
        break;
 801b6b0:	e005      	b.n	801b6be <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801b6b2:	230e      	movs	r3, #14
 801b6b4:	18fb      	adds	r3, r7, r3
 801b6b6:	2201      	movs	r2, #1
 801b6b8:	4252      	negs	r2, r2
 801b6ba:	801a      	strh	r2, [r3, #0]
        break;
 801b6bc:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801b6be:	230e      	movs	r3, #14
 801b6c0:	18fb      	adds	r3, r7, r3
 801b6c2:	2200      	movs	r2, #0
 801b6c4:	5e9b      	ldrsh	r3, [r3, r2]
}
 801b6c6:	0018      	movs	r0, r3
 801b6c8:	46bd      	mov	sp, r7
 801b6ca:	b004      	add	sp, #16
 801b6cc:	bd80      	pop	{r7, pc}
 801b6ce:	46c0      	nop			; (mov r8, r8)
 801b6d0:	20001ab8 	.word	0x20001ab8
 801b6d4:	1f4add40 	.word	0x1f4add40

0801b6d8 <SX1276Reset>:

static void SX1276Reset( void )
{
 801b6d8:	b580      	push	{r7, lr}
 801b6da:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801b6dc:	f7eb fcbe 	bl	800705c <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801b6e0:	46c0      	nop			; (mov r8, r8)
 801b6e2:	46bd      	mov	sp, r7
 801b6e4:	bd80      	pop	{r7, pc}

0801b6e6 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801b6e6:	b5b0      	push	{r4, r5, r7, lr}
 801b6e8:	b084      	sub	sp, #16
 801b6ea:	af00      	add	r7, sp, #0
 801b6ec:	0002      	movs	r2, r0
 801b6ee:	1dfb      	adds	r3, r7, #7
 801b6f0:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801b6f2:	1dfb      	adds	r3, r7, #7
 801b6f4:	781b      	ldrb	r3, [r3, #0]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d118      	bne.n	801b72c <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801b6fa:	2001      	movs	r0, #1
 801b6fc:	f000 f8cb 	bl	801b896 <SX1276Read>
 801b700:	0003      	movs	r3, r0
 801b702:	b25b      	sxtb	r3, r3
 801b704:	2207      	movs	r2, #7
 801b706:	4393      	bics	r3, r2
 801b708:	b25a      	sxtb	r2, r3
 801b70a:	1dfb      	adds	r3, r7, #7
 801b70c:	781b      	ldrb	r3, [r3, #0]
 801b70e:	b25b      	sxtb	r3, r3
 801b710:	4313      	orrs	r3, r2
 801b712:	b25b      	sxtb	r3, r3
 801b714:	b2db      	uxtb	r3, r3
 801b716:	0019      	movs	r1, r3
 801b718:	2001      	movs	r0, #1
 801b71a:	f000 f8ab 	bl	801b874 <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801b71e:	2000      	movs	r0, #0
 801b720:	f7eb fc3c 	bl	8006f9c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801b724:	2000      	movs	r0, #0
 801b726:	f7eb fa7b 	bl	8006c20 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801b72a:	e044      	b.n	801b7b6 <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801b72c:	1dfb      	adds	r3, r7, #7
 801b72e:	781b      	ldrb	r3, [r3, #0]
 801b730:	2b05      	cmp	r3, #5
 801b732:	d118      	bne.n	801b766 <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801b734:	2001      	movs	r0, #1
 801b736:	f7eb fa73 	bl	8006c20 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801b73a:	2001      	movs	r0, #1
 801b73c:	f7eb fc2e 	bl	8006f9c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801b740:	2001      	movs	r0, #1
 801b742:	f000 f8a8 	bl	801b896 <SX1276Read>
 801b746:	0003      	movs	r3, r0
 801b748:	b25b      	sxtb	r3, r3
 801b74a:	2207      	movs	r2, #7
 801b74c:	4393      	bics	r3, r2
 801b74e:	b25a      	sxtb	r2, r3
 801b750:	1dfb      	adds	r3, r7, #7
 801b752:	781b      	ldrb	r3, [r3, #0]
 801b754:	b25b      	sxtb	r3, r3
 801b756:	4313      	orrs	r3, r2
 801b758:	b25b      	sxtb	r3, r3
 801b75a:	b2db      	uxtb	r3, r3
 801b75c:	0019      	movs	r1, r3
 801b75e:	2001      	movs	r0, #1
 801b760:	f000 f888 	bl	801b874 <SX1276Write>
}
 801b764:	e027      	b.n	801b7b6 <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801b766:	250f      	movs	r5, #15
 801b768:	197c      	adds	r4, r7, r5
 801b76a:	2009      	movs	r0, #9
 801b76c:	f000 f893 	bl	801b896 <SX1276Read>
 801b770:	0003      	movs	r3, r0
 801b772:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801b774:	2001      	movs	r0, #1
 801b776:	f7eb fa53 	bl	8006c20 <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801b77a:	197b      	adds	r3, r7, r5
 801b77c:	781b      	ldrb	r3, [r3, #0]
 801b77e:	b25b      	sxtb	r3, r3
 801b780:	2b00      	cmp	r3, #0
 801b782:	da03      	bge.n	801b78c <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801b784:	2003      	movs	r0, #3
 801b786:	f7eb fc09 	bl	8006f9c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801b78a:	e002      	b.n	801b792 <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801b78c:	2002      	movs	r0, #2
 801b78e:	f7eb fc05 	bl	8006f9c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801b792:	2001      	movs	r0, #1
 801b794:	f000 f87f 	bl	801b896 <SX1276Read>
 801b798:	0003      	movs	r3, r0
 801b79a:	b25b      	sxtb	r3, r3
 801b79c:	2207      	movs	r2, #7
 801b79e:	4393      	bics	r3, r2
 801b7a0:	b25a      	sxtb	r2, r3
 801b7a2:	1dfb      	adds	r3, r7, #7
 801b7a4:	781b      	ldrb	r3, [r3, #0]
 801b7a6:	b25b      	sxtb	r3, r3
 801b7a8:	4313      	orrs	r3, r2
 801b7aa:	b25b      	sxtb	r3, r3
 801b7ac:	b2db      	uxtb	r3, r3
 801b7ae:	0019      	movs	r1, r3
 801b7b0:	2001      	movs	r0, #1
 801b7b2:	f000 f85f 	bl	801b874 <SX1276Write>
}
 801b7b6:	46c0      	nop			; (mov r8, r8)
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	b004      	add	sp, #16
 801b7bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b7c0 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b082      	sub	sp, #8
 801b7c4:	af00      	add	r7, sp, #0
 801b7c6:	0002      	movs	r2, r0
 801b7c8:	1dfb      	adds	r3, r7, #7
 801b7ca:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801b7cc:	2001      	movs	r0, #1
 801b7ce:	f000 f862 	bl	801b896 <SX1276Read>
 801b7d2:	0003      	movs	r3, r0
 801b7d4:	b25b      	sxtb	r3, r3
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	da03      	bge.n	801b7e2 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801b7da:	4b25      	ldr	r3, [pc, #148]	; (801b870 <SX1276SetModem+0xb0>)
 801b7dc:	2201      	movs	r2, #1
 801b7de:	715a      	strb	r2, [r3, #5]
 801b7e0:	e002      	b.n	801b7e8 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801b7e2:	4b23      	ldr	r3, [pc, #140]	; (801b870 <SX1276SetModem+0xb0>)
 801b7e4:	2200      	movs	r2, #0
 801b7e6:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801b7e8:	4b21      	ldr	r3, [pc, #132]	; (801b870 <SX1276SetModem+0xb0>)
 801b7ea:	795b      	ldrb	r3, [r3, #5]
 801b7ec:	1dfa      	adds	r2, r7, #7
 801b7ee:	7812      	ldrb	r2, [r2, #0]
 801b7f0:	429a      	cmp	r2, r3
 801b7f2:	d038      	beq.n	801b866 <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801b7f4:	4b1e      	ldr	r3, [pc, #120]	; (801b870 <SX1276SetModem+0xb0>)
 801b7f6:	1dfa      	adds	r2, r7, #7
 801b7f8:	7812      	ldrb	r2, [r2, #0]
 801b7fa:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801b7fc:	4b1c      	ldr	r3, [pc, #112]	; (801b870 <SX1276SetModem+0xb0>)
 801b7fe:	795b      	ldrb	r3, [r3, #5]
 801b800:	2b01      	cmp	r3, #1
 801b802:	d017      	beq.n	801b834 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b804:	2000      	movs	r0, #0
 801b806:	f7ff ff6e 	bl	801b6e6 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801b80a:	2001      	movs	r0, #1
 801b80c:	f000 f843 	bl	801b896 <SX1276Read>
 801b810:	0003      	movs	r3, r0
 801b812:	001a      	movs	r2, r3
 801b814:	237f      	movs	r3, #127	; 0x7f
 801b816:	4013      	ands	r3, r2
 801b818:	b2db      	uxtb	r3, r3
 801b81a:	0019      	movs	r1, r3
 801b81c:	2001      	movs	r0, #1
 801b81e:	f000 f829 	bl	801b874 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801b822:	2100      	movs	r1, #0
 801b824:	2040      	movs	r0, #64	; 0x40
 801b826:	f000 f825 	bl	801b874 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801b82a:	2130      	movs	r1, #48	; 0x30
 801b82c:	2041      	movs	r0, #65	; 0x41
 801b82e:	f000 f821 	bl	801b874 <SX1276Write>
        break;
 801b832:	e019      	b.n	801b868 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b834:	2000      	movs	r0, #0
 801b836:	f7ff ff56 	bl	801b6e6 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801b83a:	2001      	movs	r0, #1
 801b83c:	f000 f82b 	bl	801b896 <SX1276Read>
 801b840:	0003      	movs	r3, r0
 801b842:	001a      	movs	r2, r3
 801b844:	2380      	movs	r3, #128	; 0x80
 801b846:	425b      	negs	r3, r3
 801b848:	4313      	orrs	r3, r2
 801b84a:	b2db      	uxtb	r3, r3
 801b84c:	0019      	movs	r1, r3
 801b84e:	2001      	movs	r0, #1
 801b850:	f000 f810 	bl	801b874 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801b854:	2100      	movs	r1, #0
 801b856:	2040      	movs	r0, #64	; 0x40
 801b858:	f000 f80c 	bl	801b874 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801b85c:	2100      	movs	r1, #0
 801b85e:	2041      	movs	r0, #65	; 0x41
 801b860:	f000 f808 	bl	801b874 <SX1276Write>
        break;
 801b864:	e000      	b.n	801b868 <SX1276SetModem+0xa8>
        return;
 801b866:	46c0      	nop			; (mov r8, r8)
    }
}
 801b868:	46bd      	mov	sp, r7
 801b86a:	b002      	add	sp, #8
 801b86c:	bd80      	pop	{r7, pc}
 801b86e:	46c0      	nop			; (mov r8, r8)
 801b870:	20001ab8 	.word	0x20001ab8

0801b874 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801b874:	b580      	push	{r7, lr}
 801b876:	b082      	sub	sp, #8
 801b878:	af00      	add	r7, sp, #0
 801b87a:	6078      	str	r0, [r7, #4]
 801b87c:	000a      	movs	r2, r1
 801b87e:	1cfb      	adds	r3, r7, #3
 801b880:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801b882:	1cf9      	adds	r1, r7, #3
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	2201      	movs	r2, #1
 801b888:	0018      	movs	r0, r3
 801b88a:	f000 f815 	bl	801b8b8 <SX1276WriteBuffer>
}
 801b88e:	46c0      	nop			; (mov r8, r8)
 801b890:	46bd      	mov	sp, r7
 801b892:	b002      	add	sp, #8
 801b894:	bd80      	pop	{r7, pc}

0801b896 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801b896:	b590      	push	{r4, r7, lr}
 801b898:	b085      	sub	sp, #20
 801b89a:	af00      	add	r7, sp, #0
 801b89c:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801b89e:	240f      	movs	r4, #15
 801b8a0:	1939      	adds	r1, r7, r4
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	2201      	movs	r2, #1
 801b8a6:	0018      	movs	r0, r3
 801b8a8:	f000 f83a 	bl	801b920 <SX1276ReadBuffer>
    return data;
 801b8ac:	193b      	adds	r3, r7, r4
 801b8ae:	781b      	ldrb	r3, [r3, #0]
}
 801b8b0:	0018      	movs	r0, r3
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	b005      	add	sp, #20
 801b8b6:	bd90      	pop	{r4, r7, pc}

0801b8b8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801b8b8:	b590      	push	{r4, r7, lr}
 801b8ba:	b087      	sub	sp, #28
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	60f8      	str	r0, [r7, #12]
 801b8c0:	60b9      	str	r1, [r7, #8]
 801b8c2:	1dfb      	adds	r3, r7, #7
 801b8c4:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801b8c6:	2000      	movs	r0, #0
 801b8c8:	f7eb fc1a 	bl	8007100 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	b29b      	uxth	r3, r3
 801b8d0:	2280      	movs	r2, #128	; 0x80
 801b8d2:	4313      	orrs	r3, r2
 801b8d4:	b29b      	uxth	r3, r3
 801b8d6:	0018      	movs	r0, r3
 801b8d8:	f7eb fbff 	bl	80070da <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801b8dc:	2317      	movs	r3, #23
 801b8de:	18fb      	adds	r3, r7, r3
 801b8e0:	2200      	movs	r2, #0
 801b8e2:	701a      	strb	r2, [r3, #0]
 801b8e4:	e00e      	b.n	801b904 <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801b8e6:	2417      	movs	r4, #23
 801b8e8:	193b      	adds	r3, r7, r4
 801b8ea:	781b      	ldrb	r3, [r3, #0]
 801b8ec:	68ba      	ldr	r2, [r7, #8]
 801b8ee:	18d3      	adds	r3, r2, r3
 801b8f0:	781b      	ldrb	r3, [r3, #0]
 801b8f2:	b29b      	uxth	r3, r3
 801b8f4:	0018      	movs	r0, r3
 801b8f6:	f7eb fbf0 	bl	80070da <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801b8fa:	193b      	adds	r3, r7, r4
 801b8fc:	781a      	ldrb	r2, [r3, #0]
 801b8fe:	193b      	adds	r3, r7, r4
 801b900:	3201      	adds	r2, #1
 801b902:	701a      	strb	r2, [r3, #0]
 801b904:	2317      	movs	r3, #23
 801b906:	18fa      	adds	r2, r7, r3
 801b908:	1dfb      	adds	r3, r7, #7
 801b90a:	7812      	ldrb	r2, [r2, #0]
 801b90c:	781b      	ldrb	r3, [r3, #0]
 801b90e:	429a      	cmp	r2, r3
 801b910:	d3e9      	bcc.n	801b8e6 <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b912:	2001      	movs	r0, #1
 801b914:	f7eb fbf4 	bl	8007100 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b918:	46c0      	nop			; (mov r8, r8)
 801b91a:	46bd      	mov	sp, r7
 801b91c:	b007      	add	sp, #28
 801b91e:	bd90      	pop	{r4, r7, pc}

0801b920 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b086      	sub	sp, #24
 801b924:	af00      	add	r7, sp, #0
 801b926:	60f8      	str	r0, [r7, #12]
 801b928:	60b9      	str	r1, [r7, #8]
 801b92a:	1dfb      	adds	r3, r7, #7
 801b92c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801b92e:	2000      	movs	r0, #0
 801b930:	f7eb fbe6 	bl	8007100 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	b29b      	uxth	r3, r3
 801b938:	227f      	movs	r2, #127	; 0x7f
 801b93a:	4013      	ands	r3, r2
 801b93c:	b29b      	uxth	r3, r3
 801b93e:	0018      	movs	r0, r3
 801b940:	f7eb fbcb 	bl	80070da <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801b944:	2317      	movs	r3, #23
 801b946:	18fb      	adds	r3, r7, r3
 801b948:	2200      	movs	r2, #0
 801b94a:	701a      	strb	r2, [r3, #0]
 801b94c:	e010      	b.n	801b970 <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801b94e:	2000      	movs	r0, #0
 801b950:	f7eb fbc3 	bl	80070da <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801b954:	0003      	movs	r3, r0
 801b956:	0019      	movs	r1, r3
 801b958:	2017      	movs	r0, #23
 801b95a:	183b      	adds	r3, r7, r0
 801b95c:	781b      	ldrb	r3, [r3, #0]
 801b95e:	68ba      	ldr	r2, [r7, #8]
 801b960:	18d3      	adds	r3, r2, r3
 801b962:	b2ca      	uxtb	r2, r1
 801b964:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b966:	183b      	adds	r3, r7, r0
 801b968:	781a      	ldrb	r2, [r3, #0]
 801b96a:	183b      	adds	r3, r7, r0
 801b96c:	3201      	adds	r2, #1
 801b96e:	701a      	strb	r2, [r3, #0]
 801b970:	2317      	movs	r3, #23
 801b972:	18fa      	adds	r2, r7, r3
 801b974:	1dfb      	adds	r3, r7, #7
 801b976:	7812      	ldrb	r2, [r2, #0]
 801b978:	781b      	ldrb	r3, [r3, #0]
 801b97a:	429a      	cmp	r2, r3
 801b97c:	d3e7      	bcc.n	801b94e <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b97e:	2001      	movs	r0, #1
 801b980:	f7eb fbbe 	bl	8007100 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b984:	46c0      	nop			; (mov r8, r8)
 801b986:	46bd      	mov	sp, r7
 801b988:	b006      	add	sp, #24
 801b98a:	bd80      	pop	{r7, pc}

0801b98c <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b082      	sub	sp, #8
 801b990:	af00      	add	r7, sp, #0
 801b992:	6078      	str	r0, [r7, #4]
 801b994:	000a      	movs	r2, r1
 801b996:	1cfb      	adds	r3, r7, #3
 801b998:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801b99a:	1cfb      	adds	r3, r7, #3
 801b99c:	781a      	ldrb	r2, [r3, #0]
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	0019      	movs	r1, r3
 801b9a2:	2000      	movs	r0, #0
 801b9a4:	f7ff ff88 	bl	801b8b8 <SX1276WriteBuffer>
}
 801b9a8:	46c0      	nop			; (mov r8, r8)
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	b002      	add	sp, #8
 801b9ae:	bd80      	pop	{r7, pc}

0801b9b0 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801b9b0:	b580      	push	{r7, lr}
 801b9b2:	b082      	sub	sp, #8
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]
 801b9b8:	000a      	movs	r2, r1
 801b9ba:	1cfb      	adds	r3, r7, #3
 801b9bc:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801b9be:	1cfb      	adds	r3, r7, #3
 801b9c0:	781a      	ldrb	r2, [r3, #0]
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	0019      	movs	r1, r3
 801b9c6:	2000      	movs	r0, #0
 801b9c8:	f7ff ffaa 	bl	801b920 <SX1276ReadBuffer>
}
 801b9cc:	46c0      	nop			; (mov r8, r8)
 801b9ce:	46bd      	mov	sp, r7
 801b9d0:	b002      	add	sp, #8
 801b9d2:	bd80      	pop	{r7, pc}

0801b9d4 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b082      	sub	sp, #8
 801b9d8:	af00      	add	r7, sp, #0
 801b9da:	0002      	movs	r2, r0
 801b9dc:	1dfb      	adds	r3, r7, #7
 801b9de:	701a      	strb	r2, [r3, #0]
 801b9e0:	1dbb      	adds	r3, r7, #6
 801b9e2:	1c0a      	adds	r2, r1, #0
 801b9e4:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801b9e6:	1dfb      	adds	r3, r7, #7
 801b9e8:	781b      	ldrb	r3, [r3, #0]
 801b9ea:	0018      	movs	r0, r3
 801b9ec:	f7ff fee8 	bl	801b7c0 <SX1276SetModem>

    switch( modem )
 801b9f0:	1dfb      	adds	r3, r7, #7
 801b9f2:	781b      	ldrb	r3, [r3, #0]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d002      	beq.n	801b9fe <SX1276SetMaxPayloadLength+0x2a>
 801b9f8:	2b01      	cmp	r3, #1
 801b9fa:	d00f      	beq.n	801ba1c <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801b9fc:	e016      	b.n	801ba2c <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801b9fe:	4b0d      	ldr	r3, [pc, #52]	; (801ba34 <SX1276SetMaxPayloadLength+0x60>)
 801ba00:	2222      	movs	r2, #34	; 0x22
 801ba02:	5c9b      	ldrb	r3, [r3, r2]
 801ba04:	2201      	movs	r2, #1
 801ba06:	4053      	eors	r3, r2
 801ba08:	b2db      	uxtb	r3, r3
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d00d      	beq.n	801ba2a <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801ba0e:	1dbb      	adds	r3, r7, #6
 801ba10:	781b      	ldrb	r3, [r3, #0]
 801ba12:	0019      	movs	r1, r3
 801ba14:	2032      	movs	r0, #50	; 0x32
 801ba16:	f7ff ff2d 	bl	801b874 <SX1276Write>
        break;
 801ba1a:	e006      	b.n	801ba2a <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801ba1c:	1dbb      	adds	r3, r7, #6
 801ba1e:	781b      	ldrb	r3, [r3, #0]
 801ba20:	0019      	movs	r1, r3
 801ba22:	2023      	movs	r0, #35	; 0x23
 801ba24:	f7ff ff26 	bl	801b874 <SX1276Write>
        break;
 801ba28:	e000      	b.n	801ba2c <SX1276SetMaxPayloadLength+0x58>
        break;
 801ba2a:	46c0      	nop			; (mov r8, r8)
}
 801ba2c:	46c0      	nop			; (mov r8, r8)
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	b002      	add	sp, #8
 801ba32:	bd80      	pop	{r7, pc}
 801ba34:	20001ab8 	.word	0x20001ab8

0801ba38 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b082      	sub	sp, #8
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	0002      	movs	r2, r0
 801ba40:	1dfb      	adds	r3, r7, #7
 801ba42:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801ba44:	2001      	movs	r0, #1
 801ba46:	f7ff febb 	bl	801b7c0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801ba4a:	4b0b      	ldr	r3, [pc, #44]	; (801ba78 <SX1276SetPublicNetwork+0x40>)
 801ba4c:	1dfa      	adds	r2, r7, #7
 801ba4e:	215c      	movs	r1, #92	; 0x5c
 801ba50:	7812      	ldrb	r2, [r2, #0]
 801ba52:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801ba54:	1dfb      	adds	r3, r7, #7
 801ba56:	781b      	ldrb	r3, [r3, #0]
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d004      	beq.n	801ba66 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801ba5c:	2134      	movs	r1, #52	; 0x34
 801ba5e:	2039      	movs	r0, #57	; 0x39
 801ba60:	f7ff ff08 	bl	801b874 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801ba64:	e003      	b.n	801ba6e <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801ba66:	2112      	movs	r1, #18
 801ba68:	2039      	movs	r0, #57	; 0x39
 801ba6a:	f7ff ff03 	bl	801b874 <SX1276Write>
}
 801ba6e:	46c0      	nop			; (mov r8, r8)
 801ba70:	46bd      	mov	sp, r7
 801ba72:	b002      	add	sp, #8
 801ba74:	bd80      	pop	{r7, pc}
 801ba76:	46c0      	nop			; (mov r8, r8)
 801ba78:	20001ab8 	.word	0x20001ab8

0801ba7c <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801ba80:	f7eb f8c8 	bl	8006c14 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801ba84:	0003      	movs	r3, r0
 801ba86:	3302      	adds	r3, #2
}
 801ba88:	0018      	movs	r0, r3
 801ba8a:	46bd      	mov	sp, r7
 801ba8c:	bd80      	pop	{r7, pc}
	...

0801ba90 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b084      	sub	sp, #16
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801ba98:	230f      	movs	r3, #15
 801ba9a:	18fb      	adds	r3, r7, r3
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	701a      	strb	r2, [r3, #0]
 801baa0:	e01f      	b.n	801bae2 <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801baa2:	210f      	movs	r1, #15
 801baa4:	187b      	adds	r3, r7, r1
 801baa6:	781a      	ldrb	r2, [r3, #0]
 801baa8:	4b13      	ldr	r3, [pc, #76]	; (801baf8 <GetFskBandwidthRegValue+0x68>)
 801baaa:	00d2      	lsls	r2, r2, #3
 801baac:	58d3      	ldr	r3, [r2, r3]
 801baae:	687a      	ldr	r2, [r7, #4]
 801bab0:	429a      	cmp	r2, r3
 801bab2:	d310      	bcc.n	801bad6 <GetFskBandwidthRegValue+0x46>
 801bab4:	187b      	adds	r3, r7, r1
 801bab6:	781b      	ldrb	r3, [r3, #0]
 801bab8:	1c5a      	adds	r2, r3, #1
 801baba:	4b0f      	ldr	r3, [pc, #60]	; (801baf8 <GetFskBandwidthRegValue+0x68>)
 801babc:	00d2      	lsls	r2, r2, #3
 801babe:	58d3      	ldr	r3, [r2, r3]
 801bac0:	687a      	ldr	r2, [r7, #4]
 801bac2:	429a      	cmp	r2, r3
 801bac4:	d207      	bcs.n	801bad6 <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801bac6:	187b      	adds	r3, r7, r1
 801bac8:	781b      	ldrb	r3, [r3, #0]
 801baca:	4a0b      	ldr	r2, [pc, #44]	; (801baf8 <GetFskBandwidthRegValue+0x68>)
 801bacc:	00db      	lsls	r3, r3, #3
 801bace:	18d3      	adds	r3, r2, r3
 801bad0:	3304      	adds	r3, #4
 801bad2:	781b      	ldrb	r3, [r3, #0]
 801bad4:	e00b      	b.n	801baee <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801bad6:	210f      	movs	r1, #15
 801bad8:	187b      	adds	r3, r7, r1
 801bada:	781a      	ldrb	r2, [r3, #0]
 801badc:	187b      	adds	r3, r7, r1
 801bade:	3201      	adds	r2, #1
 801bae0:	701a      	strb	r2, [r3, #0]
 801bae2:	230f      	movs	r3, #15
 801bae4:	18fb      	adds	r3, r7, r3
 801bae6:	781b      	ldrb	r3, [r3, #0]
 801bae8:	2b14      	cmp	r3, #20
 801baea:	d9da      	bls.n	801baa2 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801baec:	e7fe      	b.n	801baec <GetFskBandwidthRegValue+0x5c>
}
 801baee:	0018      	movs	r0, r3
 801baf0:	46bd      	mov	sp, r7
 801baf2:	b004      	add	sp, #16
 801baf4:	bd80      	pop	{r7, pc}
 801baf6:	46c0      	nop			; (mov r8, r8)
 801baf8:	080217dc 	.word	0x080217dc

0801bafc <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801bafc:	b580      	push	{r7, lr}
 801bafe:	b084      	sub	sp, #16
 801bb00:	af00      	add	r7, sp, #0
 801bb02:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801bb04:	2300      	movs	r3, #0
 801bb06:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	2b03      	cmp	r3, #3
 801bb0c:	d018      	beq.n	801bb40 <SX1276GetLoRaBandwidthInHz+0x44>
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	2b03      	cmp	r3, #3
 801bb12:	d818      	bhi.n	801bb46 <SX1276GetLoRaBandwidthInHz+0x4a>
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	2b02      	cmp	r3, #2
 801bb18:	d00f      	beq.n	801bb3a <SX1276GetLoRaBandwidthInHz+0x3e>
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	2b02      	cmp	r3, #2
 801bb1e:	d812      	bhi.n	801bb46 <SX1276GetLoRaBandwidthInHz+0x4a>
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d003      	beq.n	801bb2e <SX1276GetLoRaBandwidthInHz+0x32>
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	2b01      	cmp	r3, #1
 801bb2a:	d003      	beq.n	801bb34 <SX1276GetLoRaBandwidthInHz+0x38>
 801bb2c:	e00b      	b.n	801bb46 <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801bb2e:	4b08      	ldr	r3, [pc, #32]	; (801bb50 <SX1276GetLoRaBandwidthInHz+0x54>)
 801bb30:	60fb      	str	r3, [r7, #12]
        break;
 801bb32:	e008      	b.n	801bb46 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801bb34:	4b07      	ldr	r3, [pc, #28]	; (801bb54 <SX1276GetLoRaBandwidthInHz+0x58>)
 801bb36:	60fb      	str	r3, [r7, #12]
        break;
 801bb38:	e005      	b.n	801bb46 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801bb3a:	4b07      	ldr	r3, [pc, #28]	; (801bb58 <SX1276GetLoRaBandwidthInHz+0x5c>)
 801bb3c:	60fb      	str	r3, [r7, #12]
        break;
 801bb3e:	e002      	b.n	801bb46 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801bb40:	4b06      	ldr	r3, [pc, #24]	; (801bb5c <SX1276GetLoRaBandwidthInHz+0x60>)
 801bb42:	60fb      	str	r3, [r7, #12]
            break;
 801bb44:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801bb46:	68fb      	ldr	r3, [r7, #12]
}
 801bb48:	0018      	movs	r0, r3
 801bb4a:	46bd      	mov	sp, r7
 801bb4c:	b004      	add	sp, #16
 801bb4e:	bd80      	pop	{r7, pc}
 801bb50:	0001e848 	.word	0x0001e848
 801bb54:	0003d090 	.word	0x0003d090
 801bb58:	0007a120 	.word	0x0007a120
 801bb5c:	0000f424 	.word	0x0000f424

0801bb60 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801bb60:	b5b0      	push	{r4, r5, r7, lr}
 801bb62:	b084      	sub	sp, #16
 801bb64:	af00      	add	r7, sp, #0
 801bb66:	0005      	movs	r5, r0
 801bb68:	000c      	movs	r4, r1
 801bb6a:	0010      	movs	r0, r2
 801bb6c:	0019      	movs	r1, r3
 801bb6e:	1dbb      	adds	r3, r7, #6
 801bb70:	1c2a      	adds	r2, r5, #0
 801bb72:	801a      	strh	r2, [r3, #0]
 801bb74:	1d7b      	adds	r3, r7, #5
 801bb76:	1c22      	adds	r2, r4, #0
 801bb78:	701a      	strb	r2, [r3, #0]
 801bb7a:	1d3b      	adds	r3, r7, #4
 801bb7c:	1c02      	adds	r2, r0, #0
 801bb7e:	701a      	strb	r2, [r3, #0]
 801bb80:	1cfb      	adds	r3, r7, #3
 801bb82:	1c0a      	adds	r2, r1, #0
 801bb84:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801bb86:	230f      	movs	r3, #15
 801bb88:	18fb      	adds	r3, r7, r3
 801bb8a:	2203      	movs	r2, #3
 801bb8c:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801bb8e:	1dbb      	adds	r3, r7, #6
 801bb90:	881b      	ldrh	r3, [r3, #0]
 801bb92:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801bb94:	1d7b      	adds	r3, r7, #5
 801bb96:	781b      	ldrb	r3, [r3, #0]
 801bb98:	2101      	movs	r1, #1
 801bb9a:	404b      	eors	r3, r1
 801bb9c:	b2db      	uxtb	r3, r3
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d001      	beq.n	801bba6 <SX1276GetGfskTimeOnAirNumerator+0x46>
 801bba2:	2308      	movs	r3, #8
 801bba4:	e000      	b.n	801bba8 <SX1276GetGfskTimeOnAirNumerator+0x48>
 801bba6:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801bba8:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801bbaa:	230f      	movs	r3, #15
 801bbac:	18fb      	adds	r3, r7, r3
 801bbae:	781b      	ldrb	r3, [r3, #0]
 801bbb0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801bbb2:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801bbb4:	1d3b      	adds	r3, r7, #4
 801bbb6:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801bbb8:	1cfb      	adds	r3, r7, #3
 801bbba:	781b      	ldrb	r3, [r3, #0]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d001      	beq.n	801bbc4 <SX1276GetGfskTimeOnAirNumerator+0x64>
 801bbc0:	2302      	movs	r3, #2
 801bbc2:	e000      	b.n	801bbc6 <SX1276GetGfskTimeOnAirNumerator+0x66>
 801bbc4:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801bbc6:	185b      	adds	r3, r3, r1
               ) << 3 
 801bbc8:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801bbca:	18d3      	adds	r3, r2, r3
             );
}
 801bbcc:	0018      	movs	r0, r3
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	b004      	add	sp, #16
 801bbd2:	bdb0      	pop	{r4, r5, r7, pc}

0801bbd4 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b08a      	sub	sp, #40	; 0x28
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	60f8      	str	r0, [r7, #12]
 801bbdc:	60b9      	str	r1, [r7, #8]
 801bbde:	0019      	movs	r1, r3
 801bbe0:	1dfb      	adds	r3, r7, #7
 801bbe2:	701a      	strb	r2, [r3, #0]
 801bbe4:	1d3b      	adds	r3, r7, #4
 801bbe6:	1c0a      	adds	r2, r1, #0
 801bbe8:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801bbea:	1dfb      	adds	r3, r7, #7
 801bbec:	781b      	ldrb	r3, [r3, #0]
 801bbee:	3304      	adds	r3, #4
 801bbf0:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801bbf2:	2327      	movs	r3, #39	; 0x27
 801bbf4:	18fb      	adds	r3, r7, r3
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801bbfa:	68bb      	ldr	r3, [r7, #8]
 801bbfc:	2b05      	cmp	r3, #5
 801bbfe:	d002      	beq.n	801bc06 <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801bc00:	68bb      	ldr	r3, [r7, #8]
 801bc02:	2b06      	cmp	r3, #6
 801bc04:	d106      	bne.n	801bc14 <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801bc06:	1d3b      	adds	r3, r7, #4
 801bc08:	881b      	ldrh	r3, [r3, #0]
 801bc0a:	2b0b      	cmp	r3, #11
 801bc0c:	d802      	bhi.n	801bc14 <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801bc0e:	1d3b      	adds	r3, r7, #4
 801bc10:	220c      	movs	r2, #12
 801bc12:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d105      	bne.n	801bc26 <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801bc1a:	68bb      	ldr	r3, [r7, #8]
 801bc1c:	2b0b      	cmp	r3, #11
 801bc1e:	d008      	beq.n	801bc32 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801bc20:	68bb      	ldr	r3, [r7, #8]
 801bc22:	2b0c      	cmp	r3, #12
 801bc24:	d005      	beq.n	801bc32 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	2b01      	cmp	r3, #1
 801bc2a:	d106      	bne.n	801bc3a <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bc2c:	68bb      	ldr	r3, [r7, #8]
 801bc2e:	2b0c      	cmp	r3, #12
 801bc30:	d103      	bne.n	801bc3a <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801bc32:	2327      	movs	r3, #39	; 0x27
 801bc34:	18fb      	adds	r3, r7, r3
 801bc36:	2201      	movs	r2, #1
 801bc38:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801bc3a:	2334      	movs	r3, #52	; 0x34
 801bc3c:	18fb      	adds	r3, r7, r3
 801bc3e:	781b      	ldrb	r3, [r3, #0]
 801bc40:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801bc42:	2338      	movs	r3, #56	; 0x38
 801bc44:	18fb      	adds	r3, r7, r3
 801bc46:	781b      	ldrb	r3, [r3, #0]
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d001      	beq.n	801bc50 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801bc4c:	2310      	movs	r3, #16
 801bc4e:	e000      	b.n	801bc52 <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801bc50:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801bc52:	189b      	adds	r3, r3, r2
 801bc54:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801bc56:	68bb      	ldr	r3, [r7, #8]
 801bc58:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801bc5a:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801bc5c:	2330      	movs	r3, #48	; 0x30
 801bc5e:	18fb      	adds	r3, r7, r3
 801bc60:	781b      	ldrb	r3, [r3, #0]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d001      	beq.n	801bc6a <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801bc66:	2300      	movs	r3, #0
 801bc68:	e000      	b.n	801bc6c <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801bc6a:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801bc6c:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801bc6e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801bc70:	68bb      	ldr	r3, [r7, #8]
 801bc72:	2b06      	cmp	r3, #6
 801bc74:	d803      	bhi.n	801bc7e <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801bc76:	68bb      	ldr	r3, [r7, #8]
 801bc78:	009b      	lsls	r3, r3, #2
 801bc7a:	623b      	str	r3, [r7, #32]
 801bc7c:	e00f      	b.n	801bc9e <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801bc7e:	69fb      	ldr	r3, [r7, #28]
 801bc80:	3308      	adds	r3, #8
 801bc82:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801bc84:	2327      	movs	r3, #39	; 0x27
 801bc86:	18fb      	adds	r3, r7, r3
 801bc88:	781b      	ldrb	r3, [r3, #0]
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d004      	beq.n	801bc98 <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801bc8e:	68bb      	ldr	r3, [r7, #8]
 801bc90:	3b02      	subs	r3, #2
 801bc92:	009b      	lsls	r3, r3, #2
 801bc94:	623b      	str	r3, [r7, #32]
 801bc96:	e002      	b.n	801bc9e <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801bc98:	68bb      	ldr	r3, [r7, #8]
 801bc9a:	009b      	lsls	r3, r3, #2
 801bc9c:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801bc9e:	69fb      	ldr	r3, [r7, #28]
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	da01      	bge.n	801bca8 <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801bca4:	2300      	movs	r3, #0
 801bca6:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801bca8:	69fa      	ldr	r2, [r7, #28]
 801bcaa:	6a3b      	ldr	r3, [r7, #32]
 801bcac:	18d3      	adds	r3, r2, r3
 801bcae:	3b01      	subs	r3, #1
 801bcb0:	6a39      	ldr	r1, [r7, #32]
 801bcb2:	0018      	movs	r0, r3
 801bcb4:	f7e4 faba 	bl	800022c <__divsi3>
 801bcb8:	0003      	movs	r3, r0
 801bcba:	001a      	movs	r2, r3
 801bcbc:	697b      	ldr	r3, [r7, #20]
 801bcbe:	435a      	muls	r2, r3
 801bcc0:	1d3b      	adds	r3, r7, #4
 801bcc2:	881b      	ldrh	r3, [r3, #0]
 801bcc4:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801bcc6:	330c      	adds	r3, #12
 801bcc8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801bcca:	68bb      	ldr	r3, [r7, #8]
 801bccc:	2b06      	cmp	r3, #6
 801bcce:	d802      	bhi.n	801bcd6 <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801bcd0:	69bb      	ldr	r3, [r7, #24]
 801bcd2:	3302      	adds	r3, #2
 801bcd4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801bcd6:	69bb      	ldr	r3, [r7, #24]
 801bcd8:	009b      	lsls	r3, r3, #2
 801bcda:	1c5a      	adds	r2, r3, #1
 801bcdc:	68bb      	ldr	r3, [r7, #8]
 801bcde:	3b02      	subs	r3, #2
 801bce0:	409a      	lsls	r2, r3
 801bce2:	0013      	movs	r3, r2
}
 801bce4:	0018      	movs	r0, r3
 801bce6:	46bd      	mov	sp, r7
 801bce8:	b00a      	add	sp, #40	; 0x28
 801bcea:	bd80      	pop	{r7, pc}

0801bcec <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801bcec:	b590      	push	{r4, r7, lr}
 801bcee:	b085      	sub	sp, #20
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801bcf4:	4b4f      	ldr	r3, [pc, #316]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801bcf6:	791b      	ldrb	r3, [r3, #4]
 801bcf8:	2b01      	cmp	r3, #1
 801bcfa:	d002      	beq.n	801bd02 <SX1276OnTimeoutIrq+0x16>
 801bcfc:	2b02      	cmp	r3, #2
 801bcfe:	d041      	beq.n	801bd84 <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801bd00:	e094      	b.n	801be2c <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801bd02:	4b4c      	ldr	r3, [pc, #304]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801bd04:	795b      	ldrb	r3, [r3, #5]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d12e      	bne.n	801bd68 <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801bd0a:	4b4a      	ldr	r3, [pc, #296]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801bd0c:	2230      	movs	r2, #48	; 0x30
 801bd0e:	2100      	movs	r1, #0
 801bd10:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801bd12:	4b48      	ldr	r3, [pc, #288]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801bd14:	2231      	movs	r2, #49	; 0x31
 801bd16:	2100      	movs	r1, #0
 801bd18:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801bd1a:	4b46      	ldr	r3, [pc, #280]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801bd1c:	2200      	movs	r2, #0
 801bd1e:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801bd20:	4b44      	ldr	r3, [pc, #272]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801bd22:	2200      	movs	r2, #0
 801bd24:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801bd26:	210b      	movs	r1, #11
 801bd28:	203e      	movs	r0, #62	; 0x3e
 801bd2a:	f7ff fda3 	bl	801b874 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801bd2e:	2110      	movs	r1, #16
 801bd30:	203f      	movs	r0, #63	; 0x3f
 801bd32:	f7ff fd9f 	bl	801b874 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801bd36:	4b3f      	ldr	r3, [pc, #252]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801bd38:	2226      	movs	r2, #38	; 0x26
 801bd3a:	5c9b      	ldrb	r3, [r3, r2]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d00c      	beq.n	801bd5a <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801bd40:	200d      	movs	r0, #13
 801bd42:	f7ff fda8 	bl	801b896 <SX1276Read>
 801bd46:	0003      	movs	r3, r0
 801bd48:	001a      	movs	r2, r3
 801bd4a:	2340      	movs	r3, #64	; 0x40
 801bd4c:	4313      	orrs	r3, r2
 801bd4e:	b2db      	uxtb	r3, r3
 801bd50:	0019      	movs	r1, r3
 801bd52:	200d      	movs	r0, #13
 801bd54:	f7ff fd8e 	bl	801b874 <SX1276Write>
 801bd58:	e006      	b.n	801bd68 <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801bd5a:	4b36      	ldr	r3, [pc, #216]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801bd5c:	2200      	movs	r2, #0
 801bd5e:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801bd60:	4b35      	ldr	r3, [pc, #212]	; (801be38 <SX1276OnTimeoutIrq+0x14c>)
 801bd62:	0018      	movs	r0, r3
 801bd64:	f001 fe46 	bl	801d9f4 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801bd68:	4b34      	ldr	r3, [pc, #208]	; (801be3c <SX1276OnTimeoutIrq+0x150>)
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d05a      	beq.n	801be26 <SX1276OnTimeoutIrq+0x13a>
 801bd70:	4b32      	ldr	r3, [pc, #200]	; (801be3c <SX1276OnTimeoutIrq+0x150>)
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	68db      	ldr	r3, [r3, #12]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d055      	beq.n	801be26 <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801bd7a:	4b30      	ldr	r3, [pc, #192]	; (801be3c <SX1276OnTimeoutIrq+0x150>)
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	68db      	ldr	r3, [r3, #12]
 801bd80:	4798      	blx	r3
        break;
 801bd82:	e050      	b.n	801be26 <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801bd84:	f7ff fca8 	bl	801b6d8 <SX1276Reset>
        RxChainCalibration( );
 801bd88:	f7fe f9f0 	bl	801a16c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801bd8c:	2000      	movs	r0, #0
 801bd8e:	f7ff fcaa 	bl	801b6e6 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801bd92:	230f      	movs	r3, #15
 801bd94:	18fb      	adds	r3, r7, r3
 801bd96:	2200      	movs	r2, #0
 801bd98:	701a      	strb	r2, [r3, #0]
 801bd9a:	e025      	b.n	801bde8 <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801bd9c:	240f      	movs	r4, #15
 801bd9e:	193b      	adds	r3, r7, r4
 801bda0:	781a      	ldrb	r2, [r3, #0]
 801bda2:	4927      	ldr	r1, [pc, #156]	; (801be40 <SX1276OnTimeoutIrq+0x154>)
 801bda4:	0013      	movs	r3, r2
 801bda6:	005b      	lsls	r3, r3, #1
 801bda8:	189b      	adds	r3, r3, r2
 801bdaa:	5c5b      	ldrb	r3, [r3, r1]
 801bdac:	0018      	movs	r0, r3
 801bdae:	f7ff fd07 	bl	801b7c0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801bdb2:	193b      	adds	r3, r7, r4
 801bdb4:	781a      	ldrb	r2, [r3, #0]
 801bdb6:	4922      	ldr	r1, [pc, #136]	; (801be40 <SX1276OnTimeoutIrq+0x154>)
 801bdb8:	0013      	movs	r3, r2
 801bdba:	005b      	lsls	r3, r3, #1
 801bdbc:	189b      	adds	r3, r3, r2
 801bdbe:	18cb      	adds	r3, r1, r3
 801bdc0:	3301      	adds	r3, #1
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	0018      	movs	r0, r3
 801bdc6:	193b      	adds	r3, r7, r4
 801bdc8:	781a      	ldrb	r2, [r3, #0]
 801bdca:	491d      	ldr	r1, [pc, #116]	; (801be40 <SX1276OnTimeoutIrq+0x154>)
 801bdcc:	0013      	movs	r3, r2
 801bdce:	005b      	lsls	r3, r3, #1
 801bdd0:	189b      	adds	r3, r3, r2
 801bdd2:	18cb      	adds	r3, r1, r3
 801bdd4:	3302      	adds	r3, #2
 801bdd6:	781b      	ldrb	r3, [r3, #0]
 801bdd8:	0019      	movs	r1, r3
 801bdda:	f7ff fd4b 	bl	801b874 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801bdde:	193b      	adds	r3, r7, r4
 801bde0:	781a      	ldrb	r2, [r3, #0]
 801bde2:	193b      	adds	r3, r7, r4
 801bde4:	3201      	adds	r2, #1
 801bde6:	701a      	strb	r2, [r3, #0]
 801bde8:	230f      	movs	r3, #15
 801bdea:	18fb      	adds	r3, r7, r3
 801bdec:	781b      	ldrb	r3, [r3, #0]
 801bdee:	2b0f      	cmp	r3, #15
 801bdf0:	d9d4      	bls.n	801bd9c <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801bdf2:	2000      	movs	r0, #0
 801bdf4:	f7ff fce4 	bl	801b7c0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801bdf8:	4b0e      	ldr	r3, [pc, #56]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801bdfa:	225c      	movs	r2, #92	; 0x5c
 801bdfc:	5c9b      	ldrb	r3, [r3, r2]
 801bdfe:	0018      	movs	r0, r3
 801be00:	f7ff fe1a 	bl	801ba38 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801be04:	4b0b      	ldr	r3, [pc, #44]	; (801be34 <SX1276OnTimeoutIrq+0x148>)
 801be06:	2200      	movs	r2, #0
 801be08:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801be0a:	4b0c      	ldr	r3, [pc, #48]	; (801be3c <SX1276OnTimeoutIrq+0x150>)
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d00b      	beq.n	801be2a <SX1276OnTimeoutIrq+0x13e>
 801be12:	4b0a      	ldr	r3, [pc, #40]	; (801be3c <SX1276OnTimeoutIrq+0x150>)
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	685b      	ldr	r3, [r3, #4]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d006      	beq.n	801be2a <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801be1c:	4b07      	ldr	r3, [pc, #28]	; (801be3c <SX1276OnTimeoutIrq+0x150>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	685b      	ldr	r3, [r3, #4]
 801be22:	4798      	blx	r3
        break;
 801be24:	e001      	b.n	801be2a <SX1276OnTimeoutIrq+0x13e>
        break;
 801be26:	46c0      	nop			; (mov r8, r8)
 801be28:	e000      	b.n	801be2c <SX1276OnTimeoutIrq+0x140>
        break;
 801be2a:	46c0      	nop			; (mov r8, r8)
    }
}
 801be2c:	46c0      	nop			; (mov r8, r8)
 801be2e:	46bd      	mov	sp, r7
 801be30:	b005      	add	sp, #20
 801be32:	bd90      	pop	{r4, r7, pc}
 801be34:	20001ab8 	.word	0x20001ab8
 801be38:	20001aa0 	.word	0x20001aa0
 801be3c:	20001098 	.word	0x20001098
 801be40:	080217ac 	.word	0x080217ac

0801be44 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801be44:	b590      	push	{r4, r7, lr}
 801be46:	b083      	sub	sp, #12
 801be48:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801be4a:	1d7b      	adds	r3, r7, #5
 801be4c:	2200      	movs	r2, #0
 801be4e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801be50:	4bc3      	ldr	r3, [pc, #780]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801be52:	791b      	ldrb	r3, [r3, #4]
 801be54:	2b01      	cmp	r3, #1
 801be56:	d003      	beq.n	801be60 <SX1276OnDio0Irq+0x1c>
 801be58:	2b02      	cmp	r3, #2
 801be5a:	d100      	bne.n	801be5e <SX1276OnDio0Irq+0x1a>
 801be5c:	e1e2      	b.n	801c224 <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801be5e:	e1ff      	b.n	801c260 <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801be60:	4bbf      	ldr	r3, [pc, #764]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801be62:	795b      	ldrb	r3, [r3, #5]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d003      	beq.n	801be70 <SX1276OnDio0Irq+0x2c>
 801be68:	2b01      	cmp	r3, #1
 801be6a:	d100      	bne.n	801be6e <SX1276OnDio0Irq+0x2a>
 801be6c:	e0e2      	b.n	801c034 <SX1276OnDio0Irq+0x1f0>
                break;
 801be6e:	e1d8      	b.n	801c222 <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801be70:	4bbb      	ldr	r3, [pc, #748]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801be72:	2224      	movs	r2, #36	; 0x24
 801be74:	5c9b      	ldrb	r3, [r3, r2]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d052      	beq.n	801bf20 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801be7a:	203f      	movs	r0, #63	; 0x3f
 801be7c:	f7ff fd0b 	bl	801b896 <SX1276Read>
 801be80:	0003      	movs	r3, r0
 801be82:	001a      	movs	r2, r3
 801be84:	1d7b      	adds	r3, r7, #5
 801be86:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801be88:	1d7b      	adds	r3, r7, #5
 801be8a:	781b      	ldrb	r3, [r3, #0]
 801be8c:	b2db      	uxtb	r3, r3
 801be8e:	001a      	movs	r2, r3
 801be90:	2302      	movs	r3, #2
 801be92:	4013      	ands	r3, r2
 801be94:	2b02      	cmp	r3, #2
 801be96:	d043      	beq.n	801bf20 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801be98:	210b      	movs	r1, #11
 801be9a:	203e      	movs	r0, #62	; 0x3e
 801be9c:	f7ff fcea 	bl	801b874 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801bea0:	2110      	movs	r1, #16
 801bea2:	203f      	movs	r0, #63	; 0x3f
 801bea4:	f7ff fce6 	bl	801b874 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801bea8:	4bae      	ldr	r3, [pc, #696]	; (801c164 <SX1276OnDio0Irq+0x320>)
 801beaa:	0018      	movs	r0, r3
 801beac:	f001 fda2 	bl	801d9f4 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801beb0:	4bab      	ldr	r3, [pc, #684]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801beb2:	2226      	movs	r2, #38	; 0x26
 801beb4:	5c9b      	ldrb	r3, [r3, r2]
 801beb6:	2201      	movs	r2, #1
 801beb8:	4053      	eors	r3, r2
 801beba:	b2db      	uxtb	r3, r3
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d007      	beq.n	801bed0 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801bec0:	4ba9      	ldr	r3, [pc, #676]	; (801c168 <SX1276OnDio0Irq+0x324>)
 801bec2:	0018      	movs	r0, r3
 801bec4:	f001 fd96 	bl	801d9f4 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801bec8:	4ba5      	ldr	r3, [pc, #660]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801beca:	2200      	movs	r2, #0
 801becc:	711a      	strb	r2, [r3, #4]
 801bece:	e00b      	b.n	801bee8 <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801bed0:	200d      	movs	r0, #13
 801bed2:	f7ff fce0 	bl	801b896 <SX1276Read>
 801bed6:	0003      	movs	r3, r0
 801bed8:	001a      	movs	r2, r3
 801beda:	2340      	movs	r3, #64	; 0x40
 801bedc:	4313      	orrs	r3, r2
 801bede:	b2db      	uxtb	r3, r3
 801bee0:	0019      	movs	r1, r3
 801bee2:	200d      	movs	r0, #13
 801bee4:	f7ff fcc6 	bl	801b874 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801bee8:	4ba0      	ldr	r3, [pc, #640]	; (801c16c <SX1276OnDio0Irq+0x328>)
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	2b00      	cmp	r3, #0
 801beee:	d008      	beq.n	801bf02 <SX1276OnDio0Irq+0xbe>
 801bef0:	4b9e      	ldr	r3, [pc, #632]	; (801c16c <SX1276OnDio0Irq+0x328>)
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	691b      	ldr	r3, [r3, #16]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d003      	beq.n	801bf02 <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801befa:	4b9c      	ldr	r3, [pc, #624]	; (801c16c <SX1276OnDio0Irq+0x328>)
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	691b      	ldr	r3, [r3, #16]
 801bf00:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801bf02:	4b97      	ldr	r3, [pc, #604]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf04:	2230      	movs	r2, #48	; 0x30
 801bf06:	2100      	movs	r1, #0
 801bf08:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801bf0a:	4b95      	ldr	r3, [pc, #596]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf0c:	2231      	movs	r2, #49	; 0x31
 801bf0e:	2100      	movs	r1, #0
 801bf10:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801bf12:	4b93      	ldr	r3, [pc, #588]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf14:	2200      	movs	r2, #0
 801bf16:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801bf18:	4b91      	ldr	r3, [pc, #580]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf1a:	2200      	movs	r2, #0
 801bf1c:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801bf1e:	e180      	b.n	801c222 <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801bf20:	4b8f      	ldr	r3, [pc, #572]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf22:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d12d      	bne.n	801bf84 <SX1276OnDio0Irq+0x140>
 801bf28:	4b8d      	ldr	r3, [pc, #564]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf2a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d129      	bne.n	801bf84 <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801bf30:	4b8b      	ldr	r3, [pc, #556]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf32:	2222      	movs	r2, #34	; 0x22
 801bf34:	5c9b      	ldrb	r3, [r3, r2]
 801bf36:	2201      	movs	r2, #1
 801bf38:	4053      	eors	r3, r2
 801bf3a:	b2db      	uxtb	r3, r3
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d005      	beq.n	801bf4c <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801bf40:	4b8b      	ldr	r3, [pc, #556]	; (801c170 <SX1276OnDio0Irq+0x32c>)
 801bf42:	2101      	movs	r1, #1
 801bf44:	0018      	movs	r0, r3
 801bf46:	f7ff fd33 	bl	801b9b0 <SX1276ReadFifo>
 801bf4a:	e006      	b.n	801bf5a <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801bf4c:	2032      	movs	r0, #50	; 0x32
 801bf4e:	f7ff fca2 	bl	801b896 <SX1276Read>
 801bf52:	0003      	movs	r3, r0
 801bf54:	b29a      	uxth	r2, r3
 801bf56:	4b82      	ldr	r3, [pc, #520]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf58:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bf5a:	4b81      	ldr	r3, [pc, #516]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf5c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bf5e:	001a      	movs	r2, r3
 801bf60:	4b84      	ldr	r3, [pc, #528]	; (801c174 <SX1276OnDio0Irq+0x330>)
 801bf62:	18d0      	adds	r0, r2, r3
 801bf64:	4b7e      	ldr	r3, [pc, #504]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf66:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bf68:	b2da      	uxtb	r2, r3
 801bf6a:	4b7d      	ldr	r3, [pc, #500]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf6c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bf6e:	b2db      	uxtb	r3, r3
 801bf70:	1ad3      	subs	r3, r2, r3
 801bf72:	b2db      	uxtb	r3, r3
 801bf74:	0019      	movs	r1, r3
 801bf76:	f7ff fd1b 	bl	801b9b0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bf7a:	4b79      	ldr	r3, [pc, #484]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf7c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801bf7e:	4b78      	ldr	r3, [pc, #480]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf80:	879a      	strh	r2, [r3, #60]	; 0x3c
 801bf82:	e013      	b.n	801bfac <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bf84:	4b76      	ldr	r3, [pc, #472]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf86:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bf88:	001a      	movs	r2, r3
 801bf8a:	4b7a      	ldr	r3, [pc, #488]	; (801c174 <SX1276OnDio0Irq+0x330>)
 801bf8c:	18d0      	adds	r0, r2, r3
 801bf8e:	4b74      	ldr	r3, [pc, #464]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf90:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bf92:	b2da      	uxtb	r2, r3
 801bf94:	4b72      	ldr	r3, [pc, #456]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bf96:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bf98:	b2db      	uxtb	r3, r3
 801bf9a:	1ad3      	subs	r3, r2, r3
 801bf9c:	b2db      	uxtb	r3, r3
 801bf9e:	0019      	movs	r1, r3
 801bfa0:	f7ff fd06 	bl	801b9b0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bfa4:	4b6e      	ldr	r3, [pc, #440]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bfa6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801bfa8:	4b6d      	ldr	r3, [pc, #436]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bfaa:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801bfac:	4b6d      	ldr	r3, [pc, #436]	; (801c164 <SX1276OnDio0Irq+0x320>)
 801bfae:	0018      	movs	r0, r3
 801bfb0:	f001 fd20 	bl	801d9f4 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801bfb4:	4b6a      	ldr	r3, [pc, #424]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bfb6:	2226      	movs	r2, #38	; 0x26
 801bfb8:	5c9b      	ldrb	r3, [r3, r2]
 801bfba:	2201      	movs	r2, #1
 801bfbc:	4053      	eors	r3, r2
 801bfbe:	b2db      	uxtb	r3, r3
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d007      	beq.n	801bfd4 <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801bfc4:	4b66      	ldr	r3, [pc, #408]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801bfc6:	2200      	movs	r2, #0
 801bfc8:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801bfca:	4b67      	ldr	r3, [pc, #412]	; (801c168 <SX1276OnDio0Irq+0x324>)
 801bfcc:	0018      	movs	r0, r3
 801bfce:	f001 fd11 	bl	801d9f4 <UTIL_TIMER_Stop>
 801bfd2:	e00b      	b.n	801bfec <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801bfd4:	200d      	movs	r0, #13
 801bfd6:	f7ff fc5e 	bl	801b896 <SX1276Read>
 801bfda:	0003      	movs	r3, r0
 801bfdc:	001a      	movs	r2, r3
 801bfde:	2340      	movs	r3, #64	; 0x40
 801bfe0:	4313      	orrs	r3, r2
 801bfe2:	b2db      	uxtb	r3, r3
 801bfe4:	0019      	movs	r1, r3
 801bfe6:	200d      	movs	r0, #13
 801bfe8:	f7ff fc44 	bl	801b874 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801bfec:	4b5f      	ldr	r3, [pc, #380]	; (801c16c <SX1276OnDio0Irq+0x328>)
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d010      	beq.n	801c016 <SX1276OnDio0Irq+0x1d2>
 801bff4:	4b5d      	ldr	r3, [pc, #372]	; (801c16c <SX1276OnDio0Irq+0x328>)
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	689b      	ldr	r3, [r3, #8]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d00b      	beq.n	801c016 <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801bffe:	4b5b      	ldr	r3, [pc, #364]	; (801c16c <SX1276OnDio0Irq+0x328>)
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	689c      	ldr	r4, [r3, #8]
 801c004:	4b56      	ldr	r3, [pc, #344]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c006:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801c008:	4b55      	ldr	r3, [pc, #340]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c00a:	2232      	movs	r2, #50	; 0x32
 801c00c:	569b      	ldrsb	r3, [r3, r2]
 801c00e:	b21a      	sxth	r2, r3
 801c010:	4858      	ldr	r0, [pc, #352]	; (801c174 <SX1276OnDio0Irq+0x330>)
 801c012:	2300      	movs	r3, #0
 801c014:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801c016:	4b52      	ldr	r3, [pc, #328]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c018:	2230      	movs	r2, #48	; 0x30
 801c01a:	2100      	movs	r1, #0
 801c01c:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801c01e:	4b50      	ldr	r3, [pc, #320]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c020:	2231      	movs	r2, #49	; 0x31
 801c022:	2100      	movs	r1, #0
 801c024:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801c026:	4b4e      	ldr	r3, [pc, #312]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c028:	2200      	movs	r2, #0
 801c02a:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801c02c:	4b4c      	ldr	r3, [pc, #304]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c02e:	2200      	movs	r2, #0
 801c030:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801c032:	e0f6      	b.n	801c222 <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801c034:	2140      	movs	r1, #64	; 0x40
 801c036:	2012      	movs	r0, #18
 801c038:	f7ff fc1c 	bl	801b874 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801c03c:	2012      	movs	r0, #18
 801c03e:	f7ff fc2a 	bl	801b896 <SX1276Read>
 801c042:	0003      	movs	r3, r0
 801c044:	001a      	movs	r2, r3
 801c046:	1d7b      	adds	r3, r7, #5
 801c048:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801c04a:	1d7b      	adds	r3, r7, #5
 801c04c:	781b      	ldrb	r3, [r3, #0]
 801c04e:	b2db      	uxtb	r3, r3
 801c050:	001a      	movs	r2, r3
 801c052:	2320      	movs	r3, #32
 801c054:	4013      	ands	r3, r2
 801c056:	2b20      	cmp	r3, #32
 801c058:	d122      	bne.n	801c0a0 <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801c05a:	2120      	movs	r1, #32
 801c05c:	2012      	movs	r0, #18
 801c05e:	f7ff fc09 	bl	801b874 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801c062:	4b3f      	ldr	r3, [pc, #252]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c064:	2256      	movs	r2, #86	; 0x56
 801c066:	5c9b      	ldrb	r3, [r3, r2]
 801c068:	2201      	movs	r2, #1
 801c06a:	4053      	eors	r3, r2
 801c06c:	b2db      	uxtb	r3, r3
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d002      	beq.n	801c078 <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801c072:	4b3b      	ldr	r3, [pc, #236]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c074:	2200      	movs	r2, #0
 801c076:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801c078:	4b3a      	ldr	r3, [pc, #232]	; (801c164 <SX1276OnDio0Irq+0x320>)
 801c07a:	0018      	movs	r0, r3
 801c07c:	f001 fcba 	bl	801d9f4 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801c080:	4b3a      	ldr	r3, [pc, #232]	; (801c16c <SX1276OnDio0Irq+0x328>)
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d100      	bne.n	801c08a <SX1276OnDio0Irq+0x246>
 801c088:	e0c8      	b.n	801c21c <SX1276OnDio0Irq+0x3d8>
 801c08a:	4b38      	ldr	r3, [pc, #224]	; (801c16c <SX1276OnDio0Irq+0x328>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	691b      	ldr	r3, [r3, #16]
 801c090:	2b00      	cmp	r3, #0
 801c092:	d100      	bne.n	801c096 <SX1276OnDio0Irq+0x252>
 801c094:	e0c2      	b.n	801c21c <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801c096:	4b35      	ldr	r3, [pc, #212]	; (801c16c <SX1276OnDio0Irq+0x328>)
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	691b      	ldr	r3, [r3, #16]
 801c09c:	4798      	blx	r3
                        break;
 801c09e:	e0bd      	b.n	801c21c <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801c0a0:	2019      	movs	r0, #25
 801c0a2:	f7ff fbf8 	bl	801b896 <SX1276Read>
 801c0a6:	0003      	movs	r3, r0
 801c0a8:	b25b      	sxtb	r3, r3
 801c0aa:	3302      	adds	r3, #2
 801c0ac:	109b      	asrs	r3, r3, #2
 801c0ae:	b259      	sxtb	r1, r3
 801c0b0:	4b2b      	ldr	r3, [pc, #172]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c0b2:	2260      	movs	r2, #96	; 0x60
 801c0b4:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801c0b6:	201a      	movs	r0, #26
 801c0b8:	f7ff fbed 	bl	801b896 <SX1276Read>
 801c0bc:	0003      	movs	r3, r0
 801c0be:	001a      	movs	r2, r3
 801c0c0:	1dbb      	adds	r3, r7, #6
 801c0c2:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801c0c4:	4b26      	ldr	r3, [pc, #152]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c0c6:	2260      	movs	r2, #96	; 0x60
 801c0c8:	569b      	ldrsb	r3, [r3, r2]
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	da32      	bge.n	801c134 <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801c0ce:	4b24      	ldr	r3, [pc, #144]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c0d0:	689b      	ldr	r3, [r3, #8]
 801c0d2:	4a29      	ldr	r2, [pc, #164]	; (801c178 <SX1276OnDio0Irq+0x334>)
 801c0d4:	4293      	cmp	r3, r2
 801c0d6:	d916      	bls.n	801c106 <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801c0d8:	1dbb      	adds	r3, r7, #6
 801c0da:	2200      	movs	r2, #0
 801c0dc:	5e9b      	ldrsh	r3, [r3, r2]
 801c0de:	111b      	asrs	r3, r3, #4
 801c0e0:	b21b      	sxth	r3, r3
 801c0e2:	b29a      	uxth	r2, r3
 801c0e4:	1dbb      	adds	r3, r7, #6
 801c0e6:	881b      	ldrh	r3, [r3, #0]
 801c0e8:	18d3      	adds	r3, r2, r3
 801c0ea:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801c0ec:	4b1c      	ldr	r3, [pc, #112]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c0ee:	2160      	movs	r1, #96	; 0x60
 801c0f0:	565b      	ldrsb	r3, [r3, r1]
 801c0f2:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801c0f4:	18d3      	adds	r3, r2, r3
 801c0f6:	b29b      	uxth	r3, r3
 801c0f8:	3b9d      	subs	r3, #157	; 0x9d
 801c0fa:	b29b      	uxth	r3, r3
 801c0fc:	b219      	sxth	r1, r3
 801c0fe:	4b18      	ldr	r3, [pc, #96]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c100:	2262      	movs	r2, #98	; 0x62
 801c102:	5299      	strh	r1, [r3, r2]
 801c104:	e04a      	b.n	801c19c <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801c106:	1dbb      	adds	r3, r7, #6
 801c108:	2200      	movs	r2, #0
 801c10a:	5e9b      	ldrsh	r3, [r3, r2]
 801c10c:	111b      	asrs	r3, r3, #4
 801c10e:	b21b      	sxth	r3, r3
 801c110:	b29a      	uxth	r2, r3
 801c112:	1dbb      	adds	r3, r7, #6
 801c114:	881b      	ldrh	r3, [r3, #0]
 801c116:	18d3      	adds	r3, r2, r3
 801c118:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801c11a:	4b11      	ldr	r3, [pc, #68]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c11c:	2160      	movs	r1, #96	; 0x60
 801c11e:	565b      	ldrsb	r3, [r3, r1]
 801c120:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801c122:	18d3      	adds	r3, r2, r3
 801c124:	b29b      	uxth	r3, r3
 801c126:	3ba4      	subs	r3, #164	; 0xa4
 801c128:	b29b      	uxth	r3, r3
 801c12a:	b219      	sxth	r1, r3
 801c12c:	4b0c      	ldr	r3, [pc, #48]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c12e:	2262      	movs	r2, #98	; 0x62
 801c130:	5299      	strh	r1, [r3, r2]
 801c132:	e033      	b.n	801c19c <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801c134:	4b0a      	ldr	r3, [pc, #40]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c136:	689b      	ldr	r3, [r3, #8]
 801c138:	4a0f      	ldr	r2, [pc, #60]	; (801c178 <SX1276OnDio0Irq+0x334>)
 801c13a:	4293      	cmp	r3, r2
 801c13c:	d91e      	bls.n	801c17c <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801c13e:	1dbb      	adds	r3, r7, #6
 801c140:	2200      	movs	r2, #0
 801c142:	5e9b      	ldrsh	r3, [r3, r2]
 801c144:	111b      	asrs	r3, r3, #4
 801c146:	b21b      	sxth	r3, r3
 801c148:	b29a      	uxth	r2, r3
 801c14a:	1dbb      	adds	r3, r7, #6
 801c14c:	881b      	ldrh	r3, [r3, #0]
 801c14e:	18d3      	adds	r3, r2, r3
 801c150:	b29b      	uxth	r3, r3
 801c152:	3b9d      	subs	r3, #157	; 0x9d
 801c154:	b29b      	uxth	r3, r3
 801c156:	b219      	sxth	r1, r3
 801c158:	4b01      	ldr	r3, [pc, #4]	; (801c160 <SX1276OnDio0Irq+0x31c>)
 801c15a:	2262      	movs	r2, #98	; 0x62
 801c15c:	5299      	strh	r1, [r3, r2]
 801c15e:	e01d      	b.n	801c19c <SX1276OnDio0Irq+0x358>
 801c160:	20001ab8 	.word	0x20001ab8
 801c164:	20001b20 	.word	0x20001b20
 801c168:	20001aa0 	.word	0x20001aa0
 801c16c:	20001098 	.word	0x20001098
 801c170:	20001af2 	.word	0x20001af2
 801c174:	2000109c 	.word	0x2000109c
 801c178:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801c17c:	1dbb      	adds	r3, r7, #6
 801c17e:	2200      	movs	r2, #0
 801c180:	5e9b      	ldrsh	r3, [r3, r2]
 801c182:	111b      	asrs	r3, r3, #4
 801c184:	b21b      	sxth	r3, r3
 801c186:	b29a      	uxth	r2, r3
 801c188:	1dbb      	adds	r3, r7, #6
 801c18a:	881b      	ldrh	r3, [r3, #0]
 801c18c:	18d3      	adds	r3, r2, r3
 801c18e:	b29b      	uxth	r3, r3
 801c190:	3ba4      	subs	r3, #164	; 0xa4
 801c192:	b29b      	uxth	r3, r3
 801c194:	b219      	sxth	r1, r3
 801c196:	4b34      	ldr	r3, [pc, #208]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c198:	2262      	movs	r2, #98	; 0x62
 801c19a:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801c19c:	2013      	movs	r0, #19
 801c19e:	f7ff fb7a 	bl	801b896 <SX1276Read>
 801c1a2:	0003      	movs	r3, r0
 801c1a4:	0019      	movs	r1, r3
 801c1a6:	4b30      	ldr	r3, [pc, #192]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c1a8:	2264      	movs	r2, #100	; 0x64
 801c1aa:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801c1ac:	2010      	movs	r0, #16
 801c1ae:	f7ff fb72 	bl	801b896 <SX1276Read>
 801c1b2:	0003      	movs	r3, r0
 801c1b4:	0019      	movs	r1, r3
 801c1b6:	200d      	movs	r0, #13
 801c1b8:	f7ff fb5c 	bl	801b874 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801c1bc:	4b2a      	ldr	r3, [pc, #168]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c1be:	2264      	movs	r2, #100	; 0x64
 801c1c0:	5c9a      	ldrb	r2, [r3, r2]
 801c1c2:	4b2a      	ldr	r3, [pc, #168]	; (801c26c <SX1276OnDio0Irq+0x428>)
 801c1c4:	0011      	movs	r1, r2
 801c1c6:	0018      	movs	r0, r3
 801c1c8:	f7ff fbf2 	bl	801b9b0 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801c1cc:	4b26      	ldr	r3, [pc, #152]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c1ce:	2256      	movs	r2, #86	; 0x56
 801c1d0:	5c9b      	ldrb	r3, [r3, r2]
 801c1d2:	2201      	movs	r2, #1
 801c1d4:	4053      	eors	r3, r2
 801c1d6:	b2db      	uxtb	r3, r3
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d002      	beq.n	801c1e2 <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801c1dc:	4b22      	ldr	r3, [pc, #136]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c1de:	2200      	movs	r2, #0
 801c1e0:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801c1e2:	4b23      	ldr	r3, [pc, #140]	; (801c270 <SX1276OnDio0Irq+0x42c>)
 801c1e4:	0018      	movs	r0, r3
 801c1e6:	f001 fc05 	bl	801d9f4 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801c1ea:	4b22      	ldr	r3, [pc, #136]	; (801c274 <SX1276OnDio0Irq+0x430>)
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d016      	beq.n	801c220 <SX1276OnDio0Irq+0x3dc>
 801c1f2:	4b20      	ldr	r3, [pc, #128]	; (801c274 <SX1276OnDio0Irq+0x430>)
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	689b      	ldr	r3, [r3, #8]
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d011      	beq.n	801c220 <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801c1fc:	4b1d      	ldr	r3, [pc, #116]	; (801c274 <SX1276OnDio0Irq+0x430>)
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	689c      	ldr	r4, [r3, #8]
 801c202:	4b19      	ldr	r3, [pc, #100]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c204:	2264      	movs	r2, #100	; 0x64
 801c206:	5c9b      	ldrb	r3, [r3, r2]
 801c208:	b299      	uxth	r1, r3
 801c20a:	4b17      	ldr	r3, [pc, #92]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c20c:	2262      	movs	r2, #98	; 0x62
 801c20e:	5e9a      	ldrsh	r2, [r3, r2]
 801c210:	4b15      	ldr	r3, [pc, #84]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c212:	2060      	movs	r0, #96	; 0x60
 801c214:	561b      	ldrsb	r3, [r3, r0]
 801c216:	4815      	ldr	r0, [pc, #84]	; (801c26c <SX1276OnDio0Irq+0x428>)
 801c218:	47a0      	blx	r4
                break;
 801c21a:	e001      	b.n	801c220 <SX1276OnDio0Irq+0x3dc>
                        break;
 801c21c:	46c0      	nop			; (mov r8, r8)
 801c21e:	e01f      	b.n	801c260 <SX1276OnDio0Irq+0x41c>
                break;
 801c220:	46c0      	nop			; (mov r8, r8)
            break;
 801c222:	e01d      	b.n	801c260 <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801c224:	4b14      	ldr	r3, [pc, #80]	; (801c278 <SX1276OnDio0Irq+0x434>)
 801c226:	0018      	movs	r0, r3
 801c228:	f001 fbe4 	bl	801d9f4 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801c22c:	4b0e      	ldr	r3, [pc, #56]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c22e:	795b      	ldrb	r3, [r3, #5]
 801c230:	2b01      	cmp	r3, #1
 801c232:	d103      	bne.n	801c23c <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801c234:	2108      	movs	r1, #8
 801c236:	2012      	movs	r0, #18
 801c238:	f7ff fb1c 	bl	801b874 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801c23c:	4b0a      	ldr	r3, [pc, #40]	; (801c268 <SX1276OnDio0Irq+0x424>)
 801c23e:	2200      	movs	r2, #0
 801c240:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801c242:	4b0c      	ldr	r3, [pc, #48]	; (801c274 <SX1276OnDio0Irq+0x430>)
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d008      	beq.n	801c25c <SX1276OnDio0Irq+0x418>
 801c24a:	4b0a      	ldr	r3, [pc, #40]	; (801c274 <SX1276OnDio0Irq+0x430>)
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d003      	beq.n	801c25c <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801c254:	4b07      	ldr	r3, [pc, #28]	; (801c274 <SX1276OnDio0Irq+0x430>)
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	4798      	blx	r3
                break;
 801c25c:	46c0      	nop			; (mov r8, r8)
            break;
 801c25e:	46c0      	nop			; (mov r8, r8)
    }
}
 801c260:	46c0      	nop			; (mov r8, r8)
 801c262:	46bd      	mov	sp, r7
 801c264:	b003      	add	sp, #12
 801c266:	bd90      	pop	{r4, r7, pc}
 801c268:	20001ab8 	.word	0x20001ab8
 801c26c:	2000109c 	.word	0x2000109c
 801c270:	20001b20 	.word	0x20001b20
 801c274:	20001098 	.word	0x20001098
 801c278:	20001a88 	.word	0x20001a88

0801c27c <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801c27c:	b580      	push	{r7, lr}
 801c27e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801c280:	4b6c      	ldr	r3, [pc, #432]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c282:	791b      	ldrb	r3, [r3, #4]
 801c284:	2b01      	cmp	r3, #1
 801c286:	d003      	beq.n	801c290 <SX1276OnDio1Irq+0x14>
 801c288:	2b02      	cmp	r3, #2
 801c28a:	d100      	bne.n	801c28e <SX1276OnDio1Irq+0x12>
 801c28c:	e08b      	b.n	801c3a6 <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801c28e:	e0ce      	b.n	801c42e <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801c290:	4b68      	ldr	r3, [pc, #416]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c292:	795b      	ldrb	r3, [r3, #5]
 801c294:	2b00      	cmp	r3, #0
 801c296:	d002      	beq.n	801c29e <SX1276OnDio1Irq+0x22>
 801c298:	2b01      	cmp	r3, #1
 801c29a:	d061      	beq.n	801c360 <SX1276OnDio1Irq+0xe4>
                break;
 801c29c:	e082      	b.n	801c3a4 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801c29e:	f7ea ff4b 	bl	8007138 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801c2a2:	1e03      	subs	r3, r0, #0
 801c2a4:	d100      	bne.n	801c2a8 <SX1276OnDio1Irq+0x2c>
 801c2a6:	e078      	b.n	801c39a <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801c2a8:	4b63      	ldr	r3, [pc, #396]	; (801c438 <SX1276OnDio1Irq+0x1bc>)
 801c2aa:	0018      	movs	r0, r3
 801c2ac:	f001 fba2 	bl	801d9f4 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801c2b0:	4b60      	ldr	r3, [pc, #384]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c2b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d118      	bne.n	801c2ea <SX1276OnDio1Irq+0x6e>
 801c2b8:	4b5e      	ldr	r3, [pc, #376]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c2ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d114      	bne.n	801c2ea <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801c2c0:	4b5c      	ldr	r3, [pc, #368]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c2c2:	2222      	movs	r2, #34	; 0x22
 801c2c4:	5c9b      	ldrb	r3, [r3, r2]
 801c2c6:	2201      	movs	r2, #1
 801c2c8:	4053      	eors	r3, r2
 801c2ca:	b2db      	uxtb	r3, r3
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d005      	beq.n	801c2dc <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801c2d0:	4b5a      	ldr	r3, [pc, #360]	; (801c43c <SX1276OnDio1Irq+0x1c0>)
 801c2d2:	2101      	movs	r1, #1
 801c2d4:	0018      	movs	r0, r3
 801c2d6:	f7ff fb6b 	bl	801b9b0 <SX1276ReadFifo>
 801c2da:	e006      	b.n	801c2ea <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801c2dc:	2032      	movs	r0, #50	; 0x32
 801c2de:	f7ff fada 	bl	801b896 <SX1276Read>
 801c2e2:	0003      	movs	r3, r0
 801c2e4:	b29a      	uxth	r2, r3
 801c2e6:	4b53      	ldr	r3, [pc, #332]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c2e8:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801c2ea:	4b52      	ldr	r3, [pc, #328]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c2ec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c2ee:	001a      	movs	r2, r3
 801c2f0:	4b50      	ldr	r3, [pc, #320]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c2f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c2f4:	1ad3      	subs	r3, r2, r3
 801c2f6:	4a4f      	ldr	r2, [pc, #316]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c2f8:	213e      	movs	r1, #62	; 0x3e
 801c2fa:	5c52      	ldrb	r2, [r2, r1]
 801c2fc:	4293      	cmp	r3, r2
 801c2fe:	db1a      	blt.n	801c336 <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801c300:	4b4c      	ldr	r3, [pc, #304]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c302:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c304:	001a      	movs	r2, r3
 801c306:	4b4e      	ldr	r3, [pc, #312]	; (801c440 <SX1276OnDio1Irq+0x1c4>)
 801c308:	18d2      	adds	r2, r2, r3
 801c30a:	4b4a      	ldr	r3, [pc, #296]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c30c:	213e      	movs	r1, #62	; 0x3e
 801c30e:	5c5b      	ldrb	r3, [r3, r1]
 801c310:	3b01      	subs	r3, #1
 801c312:	b2db      	uxtb	r3, r3
 801c314:	0019      	movs	r1, r3
 801c316:	0010      	movs	r0, r2
 801c318:	f7ff fb4a 	bl	801b9b0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801c31c:	4b45      	ldr	r3, [pc, #276]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c31e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801c320:	4b44      	ldr	r3, [pc, #272]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c322:	213e      	movs	r1, #62	; 0x3e
 801c324:	5c5b      	ldrb	r3, [r3, r1]
 801c326:	b29b      	uxth	r3, r3
 801c328:	18d3      	adds	r3, r2, r3
 801c32a:	b29b      	uxth	r3, r3
 801c32c:	3b01      	subs	r3, #1
 801c32e:	b29a      	uxth	r2, r3
 801c330:	4b40      	ldr	r3, [pc, #256]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c332:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801c334:	e036      	b.n	801c3a4 <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801c336:	4b3f      	ldr	r3, [pc, #252]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c338:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c33a:	001a      	movs	r2, r3
 801c33c:	4b40      	ldr	r3, [pc, #256]	; (801c440 <SX1276OnDio1Irq+0x1c4>)
 801c33e:	18d0      	adds	r0, r2, r3
 801c340:	4b3c      	ldr	r3, [pc, #240]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c342:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c344:	b2da      	uxtb	r2, r3
 801c346:	4b3b      	ldr	r3, [pc, #236]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c348:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c34a:	b2db      	uxtb	r3, r3
 801c34c:	1ad3      	subs	r3, r2, r3
 801c34e:	b2db      	uxtb	r3, r3
 801c350:	0019      	movs	r1, r3
 801c352:	f7ff fb2d 	bl	801b9b0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801c356:	4b37      	ldr	r3, [pc, #220]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c358:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801c35a:	4b36      	ldr	r3, [pc, #216]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c35c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801c35e:	e021      	b.n	801c3a4 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801c360:	f7ea feea 	bl	8007138 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801c364:	1e03      	subs	r3, r0, #0
 801c366:	d01a      	beq.n	801c39e <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801c368:	4b36      	ldr	r3, [pc, #216]	; (801c444 <SX1276OnDio1Irq+0x1c8>)
 801c36a:	0018      	movs	r0, r3
 801c36c:	f001 fb42 	bl	801d9f4 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801c370:	2180      	movs	r1, #128	; 0x80
 801c372:	2012      	movs	r0, #18
 801c374:	f7ff fa7e 	bl	801b874 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801c378:	4b2e      	ldr	r3, [pc, #184]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c37a:	2200      	movs	r2, #0
 801c37c:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801c37e:	4b32      	ldr	r3, [pc, #200]	; (801c448 <SX1276OnDio1Irq+0x1cc>)
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d00d      	beq.n	801c3a2 <SX1276OnDio1Irq+0x126>
 801c386:	4b30      	ldr	r3, [pc, #192]	; (801c448 <SX1276OnDio1Irq+0x1cc>)
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	68db      	ldr	r3, [r3, #12]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d008      	beq.n	801c3a2 <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801c390:	4b2d      	ldr	r3, [pc, #180]	; (801c448 <SX1276OnDio1Irq+0x1cc>)
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	68db      	ldr	r3, [r3, #12]
 801c396:	4798      	blx	r3
                break;
 801c398:	e003      	b.n	801c3a2 <SX1276OnDio1Irq+0x126>
                    break;
 801c39a:	46c0      	nop			; (mov r8, r8)
 801c39c:	e047      	b.n	801c42e <SX1276OnDio1Irq+0x1b2>
                    break;
 801c39e:	46c0      	nop			; (mov r8, r8)
 801c3a0:	e045      	b.n	801c42e <SX1276OnDio1Irq+0x1b2>
                break;
 801c3a2:	46c0      	nop			; (mov r8, r8)
            break;
 801c3a4:	e043      	b.n	801c42e <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801c3a6:	4b23      	ldr	r3, [pc, #140]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3a8:	795b      	ldrb	r3, [r3, #5]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d13b      	bne.n	801c426 <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801c3ae:	f7ea fec3 	bl	8007138 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801c3b2:	0003      	movs	r3, r0
 801c3b4:	2b01      	cmp	r3, #1
 801c3b6:	d038      	beq.n	801c42a <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801c3b8:	4b1e      	ldr	r3, [pc, #120]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3ba:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c3bc:	001a      	movs	r2, r3
 801c3be:	4b1d      	ldr	r3, [pc, #116]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c3c2:	1ad3      	subs	r3, r2, r3
 801c3c4:	4a1b      	ldr	r2, [pc, #108]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3c6:	213f      	movs	r1, #63	; 0x3f
 801c3c8:	5c52      	ldrb	r2, [r2, r1]
 801c3ca:	4293      	cmp	r3, r2
 801c3cc:	dd16      	ble.n	801c3fc <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801c3ce:	4b19      	ldr	r3, [pc, #100]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c3d2:	001a      	movs	r2, r3
 801c3d4:	4b1a      	ldr	r3, [pc, #104]	; (801c440 <SX1276OnDio1Irq+0x1c4>)
 801c3d6:	18d2      	adds	r2, r2, r3
 801c3d8:	4b16      	ldr	r3, [pc, #88]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3da:	213f      	movs	r1, #63	; 0x3f
 801c3dc:	5c5b      	ldrb	r3, [r3, r1]
 801c3de:	0019      	movs	r1, r3
 801c3e0:	0010      	movs	r0, r2
 801c3e2:	f7ff fad3 	bl	801b98c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801c3e6:	4b13      	ldr	r3, [pc, #76]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3e8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801c3ea:	4b12      	ldr	r3, [pc, #72]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3ec:	213f      	movs	r1, #63	; 0x3f
 801c3ee:	5c5b      	ldrb	r3, [r3, r1]
 801c3f0:	b29b      	uxth	r3, r3
 801c3f2:	18d3      	adds	r3, r2, r3
 801c3f4:	b29a      	uxth	r2, r3
 801c3f6:	4b0f      	ldr	r3, [pc, #60]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3f8:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801c3fa:	e017      	b.n	801c42c <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801c3fc:	4b0d      	ldr	r3, [pc, #52]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c3fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c400:	001a      	movs	r2, r3
 801c402:	4b0f      	ldr	r3, [pc, #60]	; (801c440 <SX1276OnDio1Irq+0x1c4>)
 801c404:	18d0      	adds	r0, r2, r3
 801c406:	4b0b      	ldr	r3, [pc, #44]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c408:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c40a:	b2da      	uxtb	r2, r3
 801c40c:	4b09      	ldr	r3, [pc, #36]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c40e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801c410:	b2db      	uxtb	r3, r3
 801c412:	1ad3      	subs	r3, r2, r3
 801c414:	b2db      	uxtb	r3, r3
 801c416:	0019      	movs	r1, r3
 801c418:	f7ff fab8 	bl	801b98c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801c41c:	4b05      	ldr	r3, [pc, #20]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c41e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801c420:	4b04      	ldr	r3, [pc, #16]	; (801c434 <SX1276OnDio1Irq+0x1b8>)
 801c422:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801c424:	e002      	b.n	801c42c <SX1276OnDio1Irq+0x1b0>
                break;
 801c426:	46c0      	nop			; (mov r8, r8)
 801c428:	e000      	b.n	801c42c <SX1276OnDio1Irq+0x1b0>
                    break;
 801c42a:	46c0      	nop			; (mov r8, r8)
            break;
 801c42c:	46c0      	nop			; (mov r8, r8)
    }
}
 801c42e:	46c0      	nop			; (mov r8, r8)
 801c430:	46bd      	mov	sp, r7
 801c432:	bd80      	pop	{r7, pc}
 801c434:	20001ab8 	.word	0x20001ab8
 801c438:	20001aa0 	.word	0x20001aa0
 801c43c:	20001af2 	.word	0x20001af2
 801c440:	2000109c 	.word	0x2000109c
 801c444:	20001b20 	.word	0x20001b20
 801c448:	20001098 	.word	0x20001098

0801c44c <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801c44c:	b590      	push	{r4, r7, lr}
 801c44e:	b085      	sub	sp, #20
 801c450:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801c452:	2300      	movs	r3, #0
 801c454:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801c456:	4b5d      	ldr	r3, [pc, #372]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c458:	791b      	ldrb	r3, [r3, #4]
 801c45a:	2b01      	cmp	r3, #1
 801c45c:	d003      	beq.n	801c466 <SX1276OnDio2Irq+0x1a>
 801c45e:	2b02      	cmp	r3, #2
 801c460:	d100      	bne.n	801c464 <SX1276OnDio2Irq+0x18>
 801c462:	e083      	b.n	801c56c <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801c464:	e0ae      	b.n	801c5c4 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801c466:	4b59      	ldr	r3, [pc, #356]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c468:	795b      	ldrb	r3, [r3, #5]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d002      	beq.n	801c474 <SX1276OnDio2Irq+0x28>
 801c46e:	2b01      	cmp	r3, #1
 801c470:	d058      	beq.n	801c524 <SX1276OnDio2Irq+0xd8>
                break;
 801c472:	e07a      	b.n	801c56a <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801c474:	4b55      	ldr	r3, [pc, #340]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c476:	2230      	movs	r2, #48	; 0x30
 801c478:	2101      	movs	r1, #1
 801c47a:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801c47c:	4b53      	ldr	r3, [pc, #332]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c47e:	2230      	movs	r2, #48	; 0x30
 801c480:	5c9b      	ldrb	r3, [r3, r2]
 801c482:	2b00      	cmp	r3, #0
 801c484:	d06e      	beq.n	801c564 <SX1276OnDio2Irq+0x118>
 801c486:	4b51      	ldr	r3, [pc, #324]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c488:	2231      	movs	r2, #49	; 0x31
 801c48a:	5c9b      	ldrb	r3, [r3, r2]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d169      	bne.n	801c564 <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801c490:	4b4f      	ldr	r3, [pc, #316]	; (801c5d0 <SX1276OnDio2Irq+0x184>)
 801c492:	0018      	movs	r0, r3
 801c494:	f001 faae 	bl	801d9f4 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801c498:	4b4c      	ldr	r3, [pc, #304]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c49a:	2231      	movs	r2, #49	; 0x31
 801c49c:	2101      	movs	r1, #1
 801c49e:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801c4a0:	2011      	movs	r0, #17
 801c4a2:	f7ff f9f8 	bl	801b896 <SX1276Read>
 801c4a6:	0003      	movs	r3, r0
 801c4a8:	085b      	lsrs	r3, r3, #1
 801c4aa:	b2db      	uxtb	r3, r3
 801c4ac:	425b      	negs	r3, r3
 801c4ae:	b2db      	uxtb	r3, r3
 801c4b0:	b259      	sxtb	r1, r3
 801c4b2:	4b46      	ldr	r3, [pc, #280]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c4b4:	2232      	movs	r2, #50	; 0x32
 801c4b6:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801c4b8:	201b      	movs	r0, #27
 801c4ba:	f7ff f9ec 	bl	801b896 <SX1276Read>
 801c4be:	0003      	movs	r3, r0
 801c4c0:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801c4c2:	201c      	movs	r0, #28
 801c4c4:	f7ff f9e7 	bl	801b896 <SX1276Read>
 801c4c8:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801c4ca:	4323      	orrs	r3, r4
 801c4cc:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	0a1b      	lsrs	r3, r3, #8
 801c4d2:	60bb      	str	r3, [r7, #8]
 801c4d4:	68bb      	ldr	r3, [r7, #8]
 801c4d6:	021b      	lsls	r3, r3, #8
 801c4d8:	68fa      	ldr	r2, [r7, #12]
 801c4da:	1ad3      	subs	r3, r2, r3
 801c4dc:	607b      	str	r3, [r7, #4]
 801c4de:	68b9      	ldr	r1, [r7, #8]
 801c4e0:	000b      	movs	r3, r1
 801c4e2:	015b      	lsls	r3, r3, #5
 801c4e4:	1a5b      	subs	r3, r3, r1
 801c4e6:	019a      	lsls	r2, r3, #6
 801c4e8:	1ad2      	subs	r2, r2, r3
 801c4ea:	00d2      	lsls	r2, r2, #3
 801c4ec:	1850      	adds	r0, r2, r1
 801c4ee:	6879      	ldr	r1, [r7, #4]
 801c4f0:	000b      	movs	r3, r1
 801c4f2:	015b      	lsls	r3, r3, #5
 801c4f4:	1a5b      	subs	r3, r3, r1
 801c4f6:	019a      	lsls	r2, r3, #6
 801c4f8:	1ad2      	subs	r2, r2, r3
 801c4fa:	00d2      	lsls	r2, r2, #3
 801c4fc:	1853      	adds	r3, r2, r1
 801c4fe:	3380      	adds	r3, #128	; 0x80
 801c500:	0a1b      	lsrs	r3, r3, #8
 801c502:	18c3      	adds	r3, r0, r3
 801c504:	001a      	movs	r2, r3
 801c506:	4b31      	ldr	r3, [pc, #196]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c508:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801c50a:	200c      	movs	r0, #12
 801c50c:	f7ff f9c3 	bl	801b896 <SX1276Read>
 801c510:	0003      	movs	r3, r0
 801c512:	095b      	lsrs	r3, r3, #5
 801c514:	b2db      	uxtb	r3, r3
 801c516:	2207      	movs	r2, #7
 801c518:	4013      	ands	r3, r2
 801c51a:	b2d9      	uxtb	r1, r3
 801c51c:	4b2b      	ldr	r3, [pc, #172]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c51e:	2238      	movs	r2, #56	; 0x38
 801c520:	5499      	strb	r1, [r3, r2]
                break;
 801c522:	e01f      	b.n	801c564 <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801c524:	4b29      	ldr	r3, [pc, #164]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c526:	2253      	movs	r2, #83	; 0x53
 801c528:	5c9b      	ldrb	r3, [r3, r2]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d01c      	beq.n	801c568 <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801c52e:	2102      	movs	r1, #2
 801c530:	2012      	movs	r0, #18
 801c532:	f7ff f99f 	bl	801b874 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801c536:	4b27      	ldr	r3, [pc, #156]	; (801c5d4 <SX1276OnDio2Irq+0x188>)
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d014      	beq.n	801c568 <SX1276OnDio2Irq+0x11c>
 801c53e:	4b25      	ldr	r3, [pc, #148]	; (801c5d4 <SX1276OnDio2Irq+0x188>)
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	695b      	ldr	r3, [r3, #20]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d00f      	beq.n	801c568 <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801c548:	4b22      	ldr	r3, [pc, #136]	; (801c5d4 <SX1276OnDio2Irq+0x188>)
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	695c      	ldr	r4, [r3, #20]
 801c54e:	201c      	movs	r0, #28
 801c550:	f7ff f9a1 	bl	801b896 <SX1276Read>
 801c554:	0003      	movs	r3, r0
 801c556:	001a      	movs	r2, r3
 801c558:	233f      	movs	r3, #63	; 0x3f
 801c55a:	4013      	ands	r3, r2
 801c55c:	b2db      	uxtb	r3, r3
 801c55e:	0018      	movs	r0, r3
 801c560:	47a0      	blx	r4
                break;
 801c562:	e001      	b.n	801c568 <SX1276OnDio2Irq+0x11c>
                break;
 801c564:	46c0      	nop			; (mov r8, r8)
 801c566:	e02d      	b.n	801c5c4 <SX1276OnDio2Irq+0x178>
                break;
 801c568:	46c0      	nop			; (mov r8, r8)
            break;
 801c56a:	e02b      	b.n	801c5c4 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801c56c:	4b17      	ldr	r3, [pc, #92]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c56e:	795b      	ldrb	r3, [r3, #5]
 801c570:	2b00      	cmp	r3, #0
 801c572:	d021      	beq.n	801c5b8 <SX1276OnDio2Irq+0x16c>
 801c574:	2b01      	cmp	r3, #1
 801c576:	d121      	bne.n	801c5bc <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801c578:	4b14      	ldr	r3, [pc, #80]	; (801c5cc <SX1276OnDio2Irq+0x180>)
 801c57a:	2253      	movs	r2, #83	; 0x53
 801c57c:	5c9b      	ldrb	r3, [r3, r2]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d01e      	beq.n	801c5c0 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801c582:	2102      	movs	r1, #2
 801c584:	2012      	movs	r0, #18
 801c586:	f7ff f975 	bl	801b874 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801c58a:	4b12      	ldr	r3, [pc, #72]	; (801c5d4 <SX1276OnDio2Irq+0x188>)
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d016      	beq.n	801c5c0 <SX1276OnDio2Irq+0x174>
 801c592:	4b10      	ldr	r3, [pc, #64]	; (801c5d4 <SX1276OnDio2Irq+0x188>)
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	695b      	ldr	r3, [r3, #20]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d011      	beq.n	801c5c0 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801c59c:	4b0d      	ldr	r3, [pc, #52]	; (801c5d4 <SX1276OnDio2Irq+0x188>)
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	695c      	ldr	r4, [r3, #20]
 801c5a2:	201c      	movs	r0, #28
 801c5a4:	f7ff f977 	bl	801b896 <SX1276Read>
 801c5a8:	0003      	movs	r3, r0
 801c5aa:	001a      	movs	r2, r3
 801c5ac:	233f      	movs	r3, #63	; 0x3f
 801c5ae:	4013      	ands	r3, r2
 801c5b0:	b2db      	uxtb	r3, r3
 801c5b2:	0018      	movs	r0, r3
 801c5b4:	47a0      	blx	r4
                break;
 801c5b6:	e003      	b.n	801c5c0 <SX1276OnDio2Irq+0x174>
                break;
 801c5b8:	46c0      	nop			; (mov r8, r8)
 801c5ba:	e002      	b.n	801c5c2 <SX1276OnDio2Irq+0x176>
                break;
 801c5bc:	46c0      	nop			; (mov r8, r8)
 801c5be:	e000      	b.n	801c5c2 <SX1276OnDio2Irq+0x176>
                break;
 801c5c0:	46c0      	nop			; (mov r8, r8)
            break;
 801c5c2:	46c0      	nop			; (mov r8, r8)
    }
}
 801c5c4:	46c0      	nop			; (mov r8, r8)
 801c5c6:	46bd      	mov	sp, r7
 801c5c8:	b005      	add	sp, #20
 801c5ca:	bd90      	pop	{r4, r7, pc}
 801c5cc:	20001ab8 	.word	0x20001ab8
 801c5d0:	20001aa0 	.word	0x20001aa0
 801c5d4:	20001098 	.word	0x20001098

0801c5d8 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801c5d8:	b580      	push	{r7, lr}
 801c5da:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801c5dc:	4b1d      	ldr	r3, [pc, #116]	; (801c654 <SX1276OnDio3Irq+0x7c>)
 801c5de:	795b      	ldrb	r3, [r3, #5]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d031      	beq.n	801c648 <SX1276OnDio3Irq+0x70>
 801c5e4:	2b01      	cmp	r3, #1
 801c5e6:	d000      	beq.n	801c5ea <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801c5e8:	e031      	b.n	801c64e <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801c5ea:	2012      	movs	r0, #18
 801c5ec:	f7ff f953 	bl	801b896 <SX1276Read>
 801c5f0:	0003      	movs	r3, r0
 801c5f2:	001a      	movs	r2, r3
 801c5f4:	2301      	movs	r3, #1
 801c5f6:	4013      	ands	r3, r2
 801c5f8:	2b01      	cmp	r3, #1
 801c5fa:	d112      	bne.n	801c622 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801c5fc:	2105      	movs	r1, #5
 801c5fe:	2012      	movs	r0, #18
 801c600:	f7ff f938 	bl	801b874 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801c604:	4b14      	ldr	r3, [pc, #80]	; (801c658 <SX1276OnDio3Irq+0x80>)
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d01f      	beq.n	801c64c <SX1276OnDio3Irq+0x74>
 801c60c:	4b12      	ldr	r3, [pc, #72]	; (801c658 <SX1276OnDio3Irq+0x80>)
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	699b      	ldr	r3, [r3, #24]
 801c612:	2b00      	cmp	r3, #0
 801c614:	d01a      	beq.n	801c64c <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801c616:	4b10      	ldr	r3, [pc, #64]	; (801c658 <SX1276OnDio3Irq+0x80>)
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	699b      	ldr	r3, [r3, #24]
 801c61c:	2001      	movs	r0, #1
 801c61e:	4798      	blx	r3
        break;
 801c620:	e014      	b.n	801c64c <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801c622:	2104      	movs	r1, #4
 801c624:	2012      	movs	r0, #18
 801c626:	f7ff f925 	bl	801b874 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801c62a:	4b0b      	ldr	r3, [pc, #44]	; (801c658 <SX1276OnDio3Irq+0x80>)
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d00c      	beq.n	801c64c <SX1276OnDio3Irq+0x74>
 801c632:	4b09      	ldr	r3, [pc, #36]	; (801c658 <SX1276OnDio3Irq+0x80>)
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	699b      	ldr	r3, [r3, #24]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d007      	beq.n	801c64c <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801c63c:	4b06      	ldr	r3, [pc, #24]	; (801c658 <SX1276OnDio3Irq+0x80>)
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	699b      	ldr	r3, [r3, #24]
 801c642:	2000      	movs	r0, #0
 801c644:	4798      	blx	r3
        break;
 801c646:	e001      	b.n	801c64c <SX1276OnDio3Irq+0x74>
        break;
 801c648:	46c0      	nop			; (mov r8, r8)
 801c64a:	e000      	b.n	801c64e <SX1276OnDio3Irq+0x76>
        break;
 801c64c:	46c0      	nop			; (mov r8, r8)
    }
}
 801c64e:	46c0      	nop			; (mov r8, r8)
 801c650:	46bd      	mov	sp, r7
 801c652:	bd80      	pop	{r7, pc}
 801c654:	20001ab8 	.word	0x20001ab8
 801c658:	20001098 	.word	0x20001098

0801c65c <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801c65c:	b580      	push	{r7, lr}
 801c65e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801c660:	4b0b      	ldr	r3, [pc, #44]	; (801c690 <SX1276OnDio4Irq+0x34>)
 801c662:	795b      	ldrb	r3, [r3, #5]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d002      	beq.n	801c66e <SX1276OnDio4Irq+0x12>
 801c668:	2b01      	cmp	r3, #1
 801c66a:	d00a      	beq.n	801c682 <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801c66c:	e00c      	b.n	801c688 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801c66e:	4b08      	ldr	r3, [pc, #32]	; (801c690 <SX1276OnDio4Irq+0x34>)
 801c670:	2230      	movs	r2, #48	; 0x30
 801c672:	5c9b      	ldrb	r3, [r3, r2]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d106      	bne.n	801c686 <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801c678:	4b05      	ldr	r3, [pc, #20]	; (801c690 <SX1276OnDio4Irq+0x34>)
 801c67a:	2230      	movs	r2, #48	; 0x30
 801c67c:	2101      	movs	r1, #1
 801c67e:	5499      	strb	r1, [r3, r2]
        break;
 801c680:	e001      	b.n	801c686 <SX1276OnDio4Irq+0x2a>
        break;
 801c682:	46c0      	nop			; (mov r8, r8)
 801c684:	e000      	b.n	801c688 <SX1276OnDio4Irq+0x2c>
        break;
 801c686:	46c0      	nop			; (mov r8, r8)
    }
}
 801c688:	46c0      	nop			; (mov r8, r8)
 801c68a:	46bd      	mov	sp, r7
 801c68c:	bd80      	pop	{r7, pc}
 801c68e:	46c0      	nop			; (mov r8, r8)
 801c690:	20001ab8 	.word	0x20001ab8

0801c694 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c694:	b580      	push	{r7, lr}
 801c696:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c698:	4b0a      	ldr	r3, [pc, #40]	; (801c6c4 <UTIL_ADV_TRACE_Init+0x30>)
 801c69a:	2218      	movs	r2, #24
 801c69c:	2100      	movs	r1, #0
 801c69e:	0018      	movs	r0, r3
 801c6a0:	f000 fbd2 	bl	801ce48 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c6a4:	2380      	movs	r3, #128	; 0x80
 801c6a6:	00da      	lsls	r2, r3, #3
 801c6a8:	4b07      	ldr	r3, [pc, #28]	; (801c6c8 <UTIL_ADV_TRACE_Init+0x34>)
 801c6aa:	2100      	movs	r1, #0
 801c6ac:	0018      	movs	r0, r3
 801c6ae:	f000 fbcb 	bl	801ce48 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c6b2:	4b06      	ldr	r3, [pc, #24]	; (801c6cc <UTIL_ADV_TRACE_Init+0x38>)
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	4a06      	ldr	r2, [pc, #24]	; (801c6d0 <UTIL_ADV_TRACE_Init+0x3c>)
 801c6b8:	0010      	movs	r0, r2
 801c6ba:	4798      	blx	r3
 801c6bc:	0003      	movs	r3, r0
}
 801c6be:	0018      	movs	r0, r3
 801c6c0:	46bd      	mov	sp, r7
 801c6c2:	bd80      	pop	{r7, pc}
 801c6c4:	2000119c 	.word	0x2000119c
 801c6c8:	200011b4 	.word	0x200011b4
 801c6cc:	08020a70 	.word	0x08020a70
 801c6d0:	0801c989 	.word	0x0801c989

0801c6d4 <UTIL_ADV_TRACE_StartRxProcess>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_StartRxProcess(void (*UserCallback)(uint8_t *PData, uint16_t Size, uint8_t Error))
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b082      	sub	sp, #8
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
  /* start the RX process */
  return UTIL_TraceDriver.StartRx(UserCallback);
 801c6dc:	4b04      	ldr	r3, [pc, #16]	; (801c6f0 <UTIL_ADV_TRACE_StartRxProcess+0x1c>)
 801c6de:	689b      	ldr	r3, [r3, #8]
 801c6e0:	687a      	ldr	r2, [r7, #4]
 801c6e2:	0010      	movs	r0, r2
 801c6e4:	4798      	blx	r3
 801c6e6:	0003      	movs	r3, r0
}
 801c6e8:	0018      	movs	r0, r3
 801c6ea:	46bd      	mov	sp, r7
 801c6ec:	b002      	add	sp, #8
 801c6ee:	bd80      	pop	{r7, pc}
 801c6f0:	08020a70 	.word	0x08020a70

0801c6f4 <UTIL_ADV_TRACE_COND_FSend>:

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c6f4:	b408      	push	{r3}
 801c6f6:	b590      	push	{r4, r7, lr}
 801c6f8:	b08c      	sub	sp, #48	; 0x30
 801c6fa:	af00      	add	r7, sp, #0
 801c6fc:	60f8      	str	r0, [r7, #12]
 801c6fe:	60b9      	str	r1, [r7, #8]
 801c700:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c702:	2316      	movs	r3, #22
 801c704:	18fb      	adds	r3, r7, r3
 801c706:	2200      	movs	r2, #0
 801c708:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c70a:	232c      	movs	r3, #44	; 0x2c
 801c70c:	18fb      	adds	r3, r7, r3
 801c70e:	2200      	movs	r2, #0
 801c710:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c712:	4b41      	ldr	r3, [pc, #260]	; (801c818 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801c714:	7a1b      	ldrb	r3, [r3, #8]
 801c716:	001a      	movs	r2, r3
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	4293      	cmp	r3, r2
 801c71c:	d902      	bls.n	801c724 <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c71e:	2305      	movs	r3, #5
 801c720:	425b      	negs	r3, r3
 801c722:	e072      	b.n	801c80a <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c724:	4b3c      	ldr	r3, [pc, #240]	; (801c818 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801c726:	68db      	ldr	r3, [r3, #12]
 801c728:	68ba      	ldr	r2, [r7, #8]
 801c72a:	4013      	ands	r3, r2
 801c72c:	68ba      	ldr	r2, [r7, #8]
 801c72e:	429a      	cmp	r2, r3
 801c730:	d002      	beq.n	801c738 <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c732:	2306      	movs	r3, #6
 801c734:	425b      	negs	r3, r3
 801c736:	e068      	b.n	801c80a <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c738:	4b37      	ldr	r3, [pc, #220]	; (801c818 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801c73a:	685b      	ldr	r3, [r3, #4]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d00a      	beq.n	801c756 <UTIL_ADV_TRACE_COND_FSend+0x62>
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d007      	beq.n	801c756 <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c746:	4b34      	ldr	r3, [pc, #208]	; (801c818 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801c748:	685b      	ldr	r3, [r3, #4]
 801c74a:	2216      	movs	r2, #22
 801c74c:	18b9      	adds	r1, r7, r2
 801c74e:	2218      	movs	r2, #24
 801c750:	18ba      	adds	r2, r7, r2
 801c752:	0010      	movs	r0, r2
 801c754:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c756:	2340      	movs	r3, #64	; 0x40
 801c758:	18fb      	adds	r3, r7, r3
 801c75a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c75e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c760:	2180      	movs	r1, #128	; 0x80
 801c762:	0089      	lsls	r1, r1, #2
 801c764:	482d      	ldr	r0, [pc, #180]	; (801c81c <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801c766:	f002 fa37 	bl	801ebd8 <tiny_vsnprintf_like>
 801c76a:	0002      	movs	r2, r0
 801c76c:	242c      	movs	r4, #44	; 0x2c
 801c76e:	193b      	adds	r3, r7, r4
 801c770:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801c772:	f000 fa2d 	bl	801cbd0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c776:	2316      	movs	r3, #22
 801c778:	18fb      	adds	r3, r7, r3
 801c77a:	881a      	ldrh	r2, [r3, #0]
 801c77c:	193b      	adds	r3, r7, r4
 801c77e:	881b      	ldrh	r3, [r3, #0]
 801c780:	18d3      	adds	r3, r2, r3
 801c782:	b29b      	uxth	r3, r3
 801c784:	2214      	movs	r2, #20
 801c786:	18ba      	adds	r2, r7, r2
 801c788:	0011      	movs	r1, r2
 801c78a:	0018      	movs	r0, r3
 801c78c:	f000 f986 	bl	801ca9c <TRACE_AllocateBufer>
 801c790:	0003      	movs	r3, r0
 801c792:	3301      	adds	r3, #1
 801c794:	d035      	beq.n	801c802 <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c796:	232e      	movs	r3, #46	; 0x2e
 801c798:	18fb      	adds	r3, r7, r3
 801c79a:	2200      	movs	r2, #0
 801c79c:	801a      	strh	r2, [r3, #0]
 801c79e:	e016      	b.n	801c7ce <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c7a0:	202e      	movs	r0, #46	; 0x2e
 801c7a2:	183b      	adds	r3, r7, r0
 801c7a4:	881b      	ldrh	r3, [r3, #0]
 801c7a6:	2414      	movs	r4, #20
 801c7a8:	193a      	adds	r2, r7, r4
 801c7aa:	8812      	ldrh	r2, [r2, #0]
 801c7ac:	0011      	movs	r1, r2
 801c7ae:	2218      	movs	r2, #24
 801c7b0:	18ba      	adds	r2, r7, r2
 801c7b2:	5cd2      	ldrb	r2, [r2, r3]
 801c7b4:	4b1a      	ldr	r3, [pc, #104]	; (801c820 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801c7b6:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801c7b8:	193b      	adds	r3, r7, r4
 801c7ba:	881b      	ldrh	r3, [r3, #0]
 801c7bc:	3301      	adds	r3, #1
 801c7be:	b29a      	uxth	r2, r3
 801c7c0:	193b      	adds	r3, r7, r4
 801c7c2:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c7c4:	183b      	adds	r3, r7, r0
 801c7c6:	881a      	ldrh	r2, [r3, #0]
 801c7c8:	183b      	adds	r3, r7, r0
 801c7ca:	3201      	adds	r2, #1
 801c7cc:	801a      	strh	r2, [r3, #0]
 801c7ce:	2316      	movs	r3, #22
 801c7d0:	18fb      	adds	r3, r7, r3
 801c7d2:	881b      	ldrh	r3, [r3, #0]
 801c7d4:	222e      	movs	r2, #46	; 0x2e
 801c7d6:	18ba      	adds	r2, r7, r2
 801c7d8:	8812      	ldrh	r2, [r2, #0]
 801c7da:	429a      	cmp	r2, r3
 801c7dc:	d3e0      	bcc.n	801c7a0 <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c7de:	2314      	movs	r3, #20
 801c7e0:	18fb      	adds	r3, r7, r3
 801c7e2:	881b      	ldrh	r3, [r3, #0]
 801c7e4:	001a      	movs	r2, r3
 801c7e6:	4b0e      	ldr	r3, [pc, #56]	; (801c820 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801c7e8:	18d0      	adds	r0, r2, r3
 801c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c7ee:	2180      	movs	r1, #128	; 0x80
 801c7f0:	0089      	lsls	r1, r1, #2
 801c7f2:	f002 f9f1 	bl	801ebd8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c7f6:	f000 fa07 	bl	801cc08 <TRACE_UnLock>

    return TRACE_Send();
 801c7fa:	f000 f83b 	bl	801c874 <TRACE_Send>
 801c7fe:	0003      	movs	r3, r0
 801c800:	e003      	b.n	801c80a <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c802:	f000 fa01 	bl	801cc08 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c806:	2303      	movs	r3, #3
 801c808:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c80a:	0018      	movs	r0, r3
 801c80c:	46bd      	mov	sp, r7
 801c80e:	b00c      	add	sp, #48	; 0x30
 801c810:	bc90      	pop	{r4, r7}
 801c812:	bc08      	pop	{r3}
 801c814:	b001      	add	sp, #4
 801c816:	4718      	bx	r3
 801c818:	2000119c 	.word	0x2000119c
 801c81c:	200015b4 	.word	0x200015b4
 801c820:	200011b4 	.word	0x200011b4

0801c824 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c824:	b580      	push	{r7, lr}
 801c826:	b082      	sub	sp, #8
 801c828:	af00      	add	r7, sp, #0
 801c82a:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801c82c:	4b03      	ldr	r3, [pc, #12]	; (801c83c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c82e:	687a      	ldr	r2, [r7, #4]
 801c830:	605a      	str	r2, [r3, #4]
}
 801c832:	46c0      	nop			; (mov r8, r8)
 801c834:	46bd      	mov	sp, r7
 801c836:	b002      	add	sp, #8
 801c838:	bd80      	pop	{r7, pc}
 801c83a:	46c0      	nop			; (mov r8, r8)
 801c83c:	2000119c 	.word	0x2000119c

0801c840 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c840:	b580      	push	{r7, lr}
 801c842:	b082      	sub	sp, #8
 801c844:	af00      	add	r7, sp, #0
 801c846:	0002      	movs	r2, r0
 801c848:	1dfb      	adds	r3, r7, #7
 801c84a:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c84c:	4b03      	ldr	r3, [pc, #12]	; (801c85c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c84e:	1dfa      	adds	r2, r7, #7
 801c850:	7812      	ldrb	r2, [r2, #0]
 801c852:	721a      	strb	r2, [r3, #8]
}
 801c854:	46c0      	nop			; (mov r8, r8)
 801c856:	46bd      	mov	sp, r7
 801c858:	b002      	add	sp, #8
 801c85a:	bd80      	pop	{r7, pc}
 801c85c:	2000119c 	.word	0x2000119c

0801c860 <UTIL_ADV_TRACE_GetVerboseLevel>:

uint8_t UTIL_ADV_TRACE_GetVerboseLevel(void)
{
 801c860:	b580      	push	{r7, lr}
 801c862:	af00      	add	r7, sp, #0
	return ADV_TRACE_Ctx.CurrentVerboseLevel;
 801c864:	4b02      	ldr	r3, [pc, #8]	; (801c870 <UTIL_ADV_TRACE_GetVerboseLevel+0x10>)
 801c866:	7a1b      	ldrb	r3, [r3, #8]
}
 801c868:	0018      	movs	r0, r3
 801c86a:	46bd      	mov	sp, r7
 801c86c:	bd80      	pop	{r7, pc}
 801c86e:	46c0      	nop			; (mov r8, r8)
 801c870:	2000119c 	.word	0x2000119c

0801c874 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c874:	b590      	push	{r4, r7, lr}
 801c876:	b089      	sub	sp, #36	; 0x24
 801c878:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801c87a:	231f      	movs	r3, #31
 801c87c:	18fb      	adds	r3, r7, r3
 801c87e:	2200      	movs	r2, #0
 801c880:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801c882:	2300      	movs	r3, #0
 801c884:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c886:	f3ef 8310 	mrs	r3, PRIMASK
 801c88a:	613b      	str	r3, [r7, #16]
  return(result);
 801c88c:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801c88e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c890:	b672      	cpsid	i
}
 801c892:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801c894:	f000 f9d4 	bl	801cc40 <TRACE_IsLocked>
 801c898:	1e03      	subs	r3, r0, #0
 801c89a:	d160      	bne.n	801c95e <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801c89c:	f000 f998 	bl	801cbd0 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c8a0:	4b36      	ldr	r3, [pc, #216]	; (801c97c <TRACE_Send+0x108>)
 801c8a2:	8a1a      	ldrh	r2, [r3, #16]
 801c8a4:	4b35      	ldr	r3, [pc, #212]	; (801c97c <TRACE_Send+0x108>)
 801c8a6:	8a5b      	ldrh	r3, [r3, #18]
 801c8a8:	429a      	cmp	r2, r3
 801c8aa:	d050      	beq.n	801c94e <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c8ac:	4b33      	ldr	r3, [pc, #204]	; (801c97c <TRACE_Send+0x108>)
 801c8ae:	789b      	ldrb	r3, [r3, #2]
 801c8b0:	2b01      	cmp	r3, #1
 801c8b2:	d117      	bne.n	801c8e4 <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c8b4:	4b31      	ldr	r3, [pc, #196]	; (801c97c <TRACE_Send+0x108>)
 801c8b6:	881a      	ldrh	r2, [r3, #0]
 801c8b8:	4b30      	ldr	r3, [pc, #192]	; (801c97c <TRACE_Send+0x108>)
 801c8ba:	8a1b      	ldrh	r3, [r3, #16]
 801c8bc:	1ad3      	subs	r3, r2, r3
 801c8be:	b29a      	uxth	r2, r3
 801c8c0:	4b2e      	ldr	r3, [pc, #184]	; (801c97c <TRACE_Send+0x108>)
 801c8c2:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c8c4:	4b2d      	ldr	r3, [pc, #180]	; (801c97c <TRACE_Send+0x108>)
 801c8c6:	2202      	movs	r2, #2
 801c8c8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c8ca:	4b2c      	ldr	r3, [pc, #176]	; (801c97c <TRACE_Send+0x108>)
 801c8cc:	2200      	movs	r2, #0
 801c8ce:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801c8d0:	4b2a      	ldr	r3, [pc, #168]	; (801c97c <TRACE_Send+0x108>)
 801c8d2:	8a9b      	ldrh	r3, [r3, #20]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d105      	bne.n	801c8e4 <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c8d8:	4b28      	ldr	r3, [pc, #160]	; (801c97c <TRACE_Send+0x108>)
 801c8da:	2200      	movs	r2, #0
 801c8dc:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c8de:	4b27      	ldr	r3, [pc, #156]	; (801c97c <TRACE_Send+0x108>)
 801c8e0:	2200      	movs	r2, #0
 801c8e2:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c8e4:	4b25      	ldr	r3, [pc, #148]	; (801c97c <TRACE_Send+0x108>)
 801c8e6:	789b      	ldrb	r3, [r3, #2]
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	d116      	bne.n	801c91a <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c8ec:	4b23      	ldr	r3, [pc, #140]	; (801c97c <TRACE_Send+0x108>)
 801c8ee:	8a5a      	ldrh	r2, [r3, #18]
 801c8f0:	4b22      	ldr	r3, [pc, #136]	; (801c97c <TRACE_Send+0x108>)
 801c8f2:	8a1b      	ldrh	r3, [r3, #16]
 801c8f4:	429a      	cmp	r2, r3
 801c8f6:	d908      	bls.n	801c90a <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c8f8:	4b20      	ldr	r3, [pc, #128]	; (801c97c <TRACE_Send+0x108>)
 801c8fa:	8a5a      	ldrh	r2, [r3, #18]
 801c8fc:	4b1f      	ldr	r3, [pc, #124]	; (801c97c <TRACE_Send+0x108>)
 801c8fe:	8a1b      	ldrh	r3, [r3, #16]
 801c900:	1ad3      	subs	r3, r2, r3
 801c902:	b29a      	uxth	r2, r3
 801c904:	4b1d      	ldr	r3, [pc, #116]	; (801c97c <TRACE_Send+0x108>)
 801c906:	829a      	strh	r2, [r3, #20]
 801c908:	e007      	b.n	801c91a <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c90a:	4b1c      	ldr	r3, [pc, #112]	; (801c97c <TRACE_Send+0x108>)
 801c90c:	8a1b      	ldrh	r3, [r3, #16]
 801c90e:	2280      	movs	r2, #128	; 0x80
 801c910:	00d2      	lsls	r2, r2, #3
 801c912:	1ad3      	subs	r3, r2, r3
 801c914:	b29a      	uxth	r2, r3
 801c916:	4b19      	ldr	r3, [pc, #100]	; (801c97c <TRACE_Send+0x108>)
 801c918:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c91a:	4b18      	ldr	r3, [pc, #96]	; (801c97c <TRACE_Send+0x108>)
 801c91c:	8a1b      	ldrh	r3, [r3, #16]
 801c91e:	001a      	movs	r2, r3
 801c920:	4b17      	ldr	r3, [pc, #92]	; (801c980 <TRACE_Send+0x10c>)
 801c922:	18d3      	adds	r3, r2, r3
 801c924:	61bb      	str	r3, [r7, #24]
 801c926:	697b      	ldr	r3, [r7, #20]
 801c928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c92a:	68fb      	ldr	r3, [r7, #12]
 801c92c:	f383 8810 	msr	PRIMASK, r3
}
 801c930:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801c932:	f7e9 fd43 	bl	80063bc <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c936:	4b13      	ldr	r3, [pc, #76]	; (801c984 <TRACE_Send+0x110>)
 801c938:	68db      	ldr	r3, [r3, #12]
 801c93a:	4a10      	ldr	r2, [pc, #64]	; (801c97c <TRACE_Send+0x108>)
 801c93c:	8a91      	ldrh	r1, [r2, #20]
 801c93e:	221f      	movs	r2, #31
 801c940:	18bc      	adds	r4, r7, r2
 801c942:	69ba      	ldr	r2, [r7, #24]
 801c944:	0010      	movs	r0, r2
 801c946:	4798      	blx	r3
 801c948:	0003      	movs	r3, r0
 801c94a:	7023      	strb	r3, [r4, #0]
 801c94c:	e00d      	b.n	801c96a <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801c94e:	f000 f95b 	bl	801cc08 <TRACE_UnLock>
 801c952:	697b      	ldr	r3, [r7, #20]
 801c954:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c956:	68bb      	ldr	r3, [r7, #8]
 801c958:	f383 8810 	msr	PRIMASK, r3
}
 801c95c:	e005      	b.n	801c96a <TRACE_Send+0xf6>
 801c95e:	697b      	ldr	r3, [r7, #20]
 801c960:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	f383 8810 	msr	PRIMASK, r3
}
 801c968:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801c96a:	231f      	movs	r3, #31
 801c96c:	18fb      	adds	r3, r7, r3
 801c96e:	781b      	ldrb	r3, [r3, #0]
 801c970:	b25b      	sxtb	r3, r3
}
 801c972:	0018      	movs	r0, r3
 801c974:	46bd      	mov	sp, r7
 801c976:	b009      	add	sp, #36	; 0x24
 801c978:	bd90      	pop	{r4, r7, pc}
 801c97a:	46c0      	nop			; (mov r8, r8)
 801c97c:	2000119c 	.word	0x2000119c
 801c980:	200011b4 	.word	0x200011b4
 801c984:	08020a70 	.word	0x08020a70

0801c988 <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801c988:	b580      	push	{r7, lr}
 801c98a:	b086      	sub	sp, #24
 801c98c:	af00      	add	r7, sp, #0
 801c98e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c990:	f3ef 8310 	mrs	r3, PRIMASK
 801c994:	613b      	str	r3, [r7, #16]
  return(result);
 801c996:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c998:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c99a:	b672      	cpsid	i
}
 801c99c:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c99e:	4b3c      	ldr	r3, [pc, #240]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9a0:	789b      	ldrb	r3, [r3, #2]
 801c9a2:	2b02      	cmp	r3, #2
 801c9a4:	d106      	bne.n	801c9b4 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c9a6:	4b3a      	ldr	r3, [pc, #232]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c9ac:	4b38      	ldr	r3, [pc, #224]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9ae:	2200      	movs	r2, #0
 801c9b0:	821a      	strh	r2, [r3, #16]
 801c9b2:	e00a      	b.n	801c9ca <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c9b4:	4b36      	ldr	r3, [pc, #216]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9b6:	8a1a      	ldrh	r2, [r3, #16]
 801c9b8:	4b35      	ldr	r3, [pc, #212]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9ba:	8a9b      	ldrh	r3, [r3, #20]
 801c9bc:	18d3      	adds	r3, r2, r3
 801c9be:	b29b      	uxth	r3, r3
 801c9c0:	059b      	lsls	r3, r3, #22
 801c9c2:	0d9b      	lsrs	r3, r3, #22
 801c9c4:	b29a      	uxth	r2, r3
 801c9c6:	4b32      	ldr	r3, [pc, #200]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9c8:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c9ca:	4b31      	ldr	r3, [pc, #196]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9cc:	8a1a      	ldrh	r2, [r3, #16]
 801c9ce:	4b30      	ldr	r3, [pc, #192]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9d0:	8a5b      	ldrh	r3, [r3, #18]
 801c9d2:	429a      	cmp	r2, r3
 801c9d4:	d04c      	beq.n	801ca70 <TRACE_TxCpltCallback+0xe8>
 801c9d6:	4b2e      	ldr	r3, [pc, #184]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9d8:	8adb      	ldrh	r3, [r3, #22]
 801c9da:	2b01      	cmp	r3, #1
 801c9dc:	d148      	bne.n	801ca70 <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c9de:	4b2c      	ldr	r3, [pc, #176]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9e0:	789b      	ldrb	r3, [r3, #2]
 801c9e2:	2b01      	cmp	r3, #1
 801c9e4:	d117      	bne.n	801ca16 <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c9e6:	4b2a      	ldr	r3, [pc, #168]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9e8:	881a      	ldrh	r2, [r3, #0]
 801c9ea:	4b29      	ldr	r3, [pc, #164]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9ec:	8a1b      	ldrh	r3, [r3, #16]
 801c9ee:	1ad3      	subs	r3, r2, r3
 801c9f0:	b29a      	uxth	r2, r3
 801c9f2:	4b27      	ldr	r3, [pc, #156]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9f4:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c9f6:	4b26      	ldr	r3, [pc, #152]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9f8:	2202      	movs	r2, #2
 801c9fa:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c9fc:	4b24      	ldr	r3, [pc, #144]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801c9fe:	2200      	movs	r2, #0
 801ca00:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801ca02:	4b23      	ldr	r3, [pc, #140]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca04:	8a9b      	ldrh	r3, [r3, #20]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d105      	bne.n	801ca16 <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ca0a:	4b21      	ldr	r3, [pc, #132]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ca10:	4b1f      	ldr	r3, [pc, #124]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca12:	2200      	movs	r2, #0
 801ca14:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ca16:	4b1e      	ldr	r3, [pc, #120]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca18:	789b      	ldrb	r3, [r3, #2]
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d116      	bne.n	801ca4c <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ca1e:	4b1c      	ldr	r3, [pc, #112]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca20:	8a5a      	ldrh	r2, [r3, #18]
 801ca22:	4b1b      	ldr	r3, [pc, #108]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca24:	8a1b      	ldrh	r3, [r3, #16]
 801ca26:	429a      	cmp	r2, r3
 801ca28:	d908      	bls.n	801ca3c <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ca2a:	4b19      	ldr	r3, [pc, #100]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca2c:	8a5a      	ldrh	r2, [r3, #18]
 801ca2e:	4b18      	ldr	r3, [pc, #96]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca30:	8a1b      	ldrh	r3, [r3, #16]
 801ca32:	1ad3      	subs	r3, r2, r3
 801ca34:	b29a      	uxth	r2, r3
 801ca36:	4b16      	ldr	r3, [pc, #88]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca38:	829a      	strh	r2, [r3, #20]
 801ca3a:	e007      	b.n	801ca4c <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ca3c:	4b14      	ldr	r3, [pc, #80]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca3e:	8a1b      	ldrh	r3, [r3, #16]
 801ca40:	2280      	movs	r2, #128	; 0x80
 801ca42:	00d2      	lsls	r2, r2, #3
 801ca44:	1ad3      	subs	r3, r2, r3
 801ca46:	b29a      	uxth	r2, r3
 801ca48:	4b11      	ldr	r3, [pc, #68]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca4a:	829a      	strh	r2, [r3, #20]
 801ca4c:	697b      	ldr	r3, [r7, #20]
 801ca4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	f383 8810 	msr	PRIMASK, r3
}
 801ca56:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801ca58:	4b0e      	ldr	r3, [pc, #56]	; (801ca94 <TRACE_TxCpltCallback+0x10c>)
 801ca5a:	68db      	ldr	r3, [r3, #12]
 801ca5c:	4a0c      	ldr	r2, [pc, #48]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca5e:	8a12      	ldrh	r2, [r2, #16]
 801ca60:	0011      	movs	r1, r2
 801ca62:	4a0d      	ldr	r2, [pc, #52]	; (801ca98 <TRACE_TxCpltCallback+0x110>)
 801ca64:	1888      	adds	r0, r1, r2
 801ca66:	4a0a      	ldr	r2, [pc, #40]	; (801ca90 <TRACE_TxCpltCallback+0x108>)
 801ca68:	8a92      	ldrh	r2, [r2, #20]
 801ca6a:	0011      	movs	r1, r2
 801ca6c:	4798      	blx	r3
 801ca6e:	e00a      	b.n	801ca86 <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801ca70:	f7e9 fcad 	bl	80063ce <UTIL_ADV_TRACE_PostSendHook>
 801ca74:	697b      	ldr	r3, [r7, #20]
 801ca76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca78:	68bb      	ldr	r3, [r7, #8]
 801ca7a:	f383 8810 	msr	PRIMASK, r3
}
 801ca7e:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801ca80:	f000 f8c2 	bl	801cc08 <TRACE_UnLock>
  }
}
 801ca84:	46c0      	nop			; (mov r8, r8)
 801ca86:	46c0      	nop			; (mov r8, r8)
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	b006      	add	sp, #24
 801ca8c:	bd80      	pop	{r7, pc}
 801ca8e:	46c0      	nop			; (mov r8, r8)
 801ca90:	2000119c 	.word	0x2000119c
 801ca94:	08020a70 	.word	0x08020a70
 801ca98:	200011b4 	.word	0x200011b4

0801ca9c <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	b086      	sub	sp, #24
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	0002      	movs	r2, r0
 801caa4:	6039      	str	r1, [r7, #0]
 801caa6:	1dbb      	adds	r3, r7, #6
 801caa8:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801caaa:	2314      	movs	r3, #20
 801caac:	18fb      	adds	r3, r7, r3
 801caae:	2201      	movs	r2, #1
 801cab0:	4252      	negs	r2, r2
 801cab2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cab4:	f3ef 8310 	mrs	r3, PRIMASK
 801cab8:	60fb      	str	r3, [r7, #12]
  return(result);
 801caba:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cabc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cabe:	b672      	cpsid	i
}
 801cac0:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cac2:	4b42      	ldr	r3, [pc, #264]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cac4:	8a5a      	ldrh	r2, [r3, #18]
 801cac6:	4b41      	ldr	r3, [pc, #260]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cac8:	8a1b      	ldrh	r3, [r3, #16]
 801caca:	429a      	cmp	r2, r3
 801cacc:	d123      	bne.n	801cb16 <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cace:	4b3f      	ldr	r3, [pc, #252]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cad0:	8a5a      	ldrh	r2, [r3, #18]
 801cad2:	2016      	movs	r0, #22
 801cad4:	183b      	adds	r3, r7, r0
 801cad6:	2180      	movs	r1, #128	; 0x80
 801cad8:	00c9      	lsls	r1, r1, #3
 801cada:	1a8a      	subs	r2, r1, r2
 801cadc:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cade:	1dba      	adds	r2, r7, #6
 801cae0:	0001      	movs	r1, r0
 801cae2:	187b      	adds	r3, r7, r1
 801cae4:	8812      	ldrh	r2, [r2, #0]
 801cae6:	881b      	ldrh	r3, [r3, #0]
 801cae8:	429a      	cmp	r2, r3
 801caea:	d346      	bcc.n	801cb7a <TRACE_AllocateBufer+0xde>
 801caec:	4b37      	ldr	r3, [pc, #220]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801caee:	8a1b      	ldrh	r3, [r3, #16]
 801caf0:	1dba      	adds	r2, r7, #6
 801caf2:	8812      	ldrh	r2, [r2, #0]
 801caf4:	429a      	cmp	r2, r3
 801caf6:	d240      	bcs.n	801cb7a <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801caf8:	4b34      	ldr	r3, [pc, #208]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cafa:	2201      	movs	r2, #1
 801cafc:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cafe:	4b33      	ldr	r3, [pc, #204]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb00:	8a5a      	ldrh	r2, [r3, #18]
 801cb02:	4b32      	ldr	r3, [pc, #200]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb04:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cb06:	187b      	adds	r3, r7, r1
 801cb08:	4a30      	ldr	r2, [pc, #192]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb0a:	8a12      	ldrh	r2, [r2, #16]
 801cb0c:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cb0e:	4b2f      	ldr	r3, [pc, #188]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb10:	2200      	movs	r2, #0
 801cb12:	825a      	strh	r2, [r3, #18]
 801cb14:	e031      	b.n	801cb7a <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cb16:	4b2d      	ldr	r3, [pc, #180]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb18:	8a5a      	ldrh	r2, [r3, #18]
 801cb1a:	4b2c      	ldr	r3, [pc, #176]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb1c:	8a1b      	ldrh	r3, [r3, #16]
 801cb1e:	429a      	cmp	r2, r3
 801cb20:	d923      	bls.n	801cb6a <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cb22:	4b2a      	ldr	r3, [pc, #168]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb24:	8a5a      	ldrh	r2, [r3, #18]
 801cb26:	2016      	movs	r0, #22
 801cb28:	183b      	adds	r3, r7, r0
 801cb2a:	2180      	movs	r1, #128	; 0x80
 801cb2c:	00c9      	lsls	r1, r1, #3
 801cb2e:	1a8a      	subs	r2, r1, r2
 801cb30:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801cb32:	1dba      	adds	r2, r7, #6
 801cb34:	0001      	movs	r1, r0
 801cb36:	187b      	adds	r3, r7, r1
 801cb38:	8812      	ldrh	r2, [r2, #0]
 801cb3a:	881b      	ldrh	r3, [r3, #0]
 801cb3c:	429a      	cmp	r2, r3
 801cb3e:	d31c      	bcc.n	801cb7a <TRACE_AllocateBufer+0xde>
 801cb40:	4b22      	ldr	r3, [pc, #136]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb42:	8a1b      	ldrh	r3, [r3, #16]
 801cb44:	1dba      	adds	r2, r7, #6
 801cb46:	8812      	ldrh	r2, [r2, #0]
 801cb48:	429a      	cmp	r2, r3
 801cb4a:	d216      	bcs.n	801cb7a <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cb4c:	4b1f      	ldr	r3, [pc, #124]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb4e:	2201      	movs	r2, #1
 801cb50:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cb52:	4b1e      	ldr	r3, [pc, #120]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb54:	8a5a      	ldrh	r2, [r3, #18]
 801cb56:	4b1d      	ldr	r3, [pc, #116]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb58:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cb5a:	187b      	adds	r3, r7, r1
 801cb5c:	4a1b      	ldr	r2, [pc, #108]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb5e:	8a12      	ldrh	r2, [r2, #16]
 801cb60:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cb62:	4b1a      	ldr	r3, [pc, #104]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb64:	2200      	movs	r2, #0
 801cb66:	825a      	strh	r2, [r3, #18]
 801cb68:	e007      	b.n	801cb7a <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801cb6a:	4b18      	ldr	r3, [pc, #96]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb6c:	8a19      	ldrh	r1, [r3, #16]
 801cb6e:	4b17      	ldr	r3, [pc, #92]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb70:	8a5a      	ldrh	r2, [r3, #18]
 801cb72:	2316      	movs	r3, #22
 801cb74:	18fb      	adds	r3, r7, r3
 801cb76:	1a8a      	subs	r2, r1, r2
 801cb78:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801cb7a:	2316      	movs	r3, #22
 801cb7c:	18fa      	adds	r2, r7, r3
 801cb7e:	1dbb      	adds	r3, r7, #6
 801cb80:	8812      	ldrh	r2, [r2, #0]
 801cb82:	881b      	ldrh	r3, [r3, #0]
 801cb84:	429a      	cmp	r2, r3
 801cb86:	d912      	bls.n	801cbae <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801cb88:	4b10      	ldr	r3, [pc, #64]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb8a:	8a5a      	ldrh	r2, [r3, #18]
 801cb8c:	683b      	ldr	r3, [r7, #0]
 801cb8e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cb90:	4b0e      	ldr	r3, [pc, #56]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cb92:	8a5a      	ldrh	r2, [r3, #18]
 801cb94:	1dbb      	adds	r3, r7, #6
 801cb96:	881b      	ldrh	r3, [r3, #0]
 801cb98:	18d3      	adds	r3, r2, r3
 801cb9a:	b29b      	uxth	r3, r3
 801cb9c:	059b      	lsls	r3, r3, #22
 801cb9e:	0d9b      	lsrs	r3, r3, #22
 801cba0:	b29a      	uxth	r2, r3
 801cba2:	4b0a      	ldr	r3, [pc, #40]	; (801cbcc <TRACE_AllocateBufer+0x130>)
 801cba4:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801cba6:	2314      	movs	r3, #20
 801cba8:	18fb      	adds	r3, r7, r3
 801cbaa:	2200      	movs	r2, #0
 801cbac:	801a      	strh	r2, [r3, #0]
 801cbae:	693b      	ldr	r3, [r7, #16]
 801cbb0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbb2:	68bb      	ldr	r3, [r7, #8]
 801cbb4:	f383 8810 	msr	PRIMASK, r3
}
 801cbb8:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801cbba:	2314      	movs	r3, #20
 801cbbc:	18fb      	adds	r3, r7, r3
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	5e9b      	ldrsh	r3, [r3, r2]
}
 801cbc2:	0018      	movs	r0, r3
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	b006      	add	sp, #24
 801cbc8:	bd80      	pop	{r7, pc}
 801cbca:	46c0      	nop			; (mov r8, r8)
 801cbcc:	2000119c 	.word	0x2000119c

0801cbd0 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	b084      	sub	sp, #16
 801cbd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbd6:	f3ef 8310 	mrs	r3, PRIMASK
 801cbda:	607b      	str	r3, [r7, #4]
  return(result);
 801cbdc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cbde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cbe0:	b672      	cpsid	i
}
 801cbe2:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801cbe4:	4b07      	ldr	r3, [pc, #28]	; (801cc04 <TRACE_Lock+0x34>)
 801cbe6:	8adb      	ldrh	r3, [r3, #22]
 801cbe8:	3301      	adds	r3, #1
 801cbea:	b29a      	uxth	r2, r3
 801cbec:	4b05      	ldr	r3, [pc, #20]	; (801cc04 <TRACE_Lock+0x34>)
 801cbee:	82da      	strh	r2, [r3, #22]
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbf4:	68bb      	ldr	r3, [r7, #8]
 801cbf6:	f383 8810 	msr	PRIMASK, r3
}
 801cbfa:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cbfc:	46c0      	nop			; (mov r8, r8)
 801cbfe:	46bd      	mov	sp, r7
 801cc00:	b004      	add	sp, #16
 801cc02:	bd80      	pop	{r7, pc}
 801cc04:	2000119c 	.word	0x2000119c

0801cc08 <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b084      	sub	sp, #16
 801cc0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc0e:	f3ef 8310 	mrs	r3, PRIMASK
 801cc12:	607b      	str	r3, [r7, #4]
  return(result);
 801cc14:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cc16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc18:	b672      	cpsid	i
}
 801cc1a:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801cc1c:	4b07      	ldr	r3, [pc, #28]	; (801cc3c <TRACE_UnLock+0x34>)
 801cc1e:	8adb      	ldrh	r3, [r3, #22]
 801cc20:	3b01      	subs	r3, #1
 801cc22:	b29a      	uxth	r2, r3
 801cc24:	4b05      	ldr	r3, [pc, #20]	; (801cc3c <TRACE_UnLock+0x34>)
 801cc26:	82da      	strh	r2, [r3, #22]
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc2c:	68bb      	ldr	r3, [r7, #8]
 801cc2e:	f383 8810 	msr	PRIMASK, r3
}
 801cc32:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cc34:	46c0      	nop			; (mov r8, r8)
 801cc36:	46bd      	mov	sp, r7
 801cc38:	b004      	add	sp, #16
 801cc3a:	bd80      	pop	{r7, pc}
 801cc3c:	2000119c 	.word	0x2000119c

0801cc40 <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801cc40:	b580      	push	{r7, lr}
 801cc42:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801cc44:	4b03      	ldr	r3, [pc, #12]	; (801cc54 <TRACE_IsLocked+0x14>)
 801cc46:	8adb      	ldrh	r3, [r3, #22]
 801cc48:	1e5a      	subs	r2, r3, #1
 801cc4a:	4193      	sbcs	r3, r2
 801cc4c:	b2db      	uxtb	r3, r3
}
 801cc4e:	0018      	movs	r0, r3
 801cc50:	46bd      	mov	sp, r7
 801cc52:	bd80      	pop	{r7, pc}
 801cc54:	2000119c 	.word	0x2000119c

0801cc58 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801cc5c:	4b04      	ldr	r3, [pc, #16]	; (801cc70 <UTIL_LPM_Init+0x18>)
 801cc5e:	2200      	movs	r2, #0
 801cc60:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801cc62:	4b04      	ldr	r3, [pc, #16]	; (801cc74 <UTIL_LPM_Init+0x1c>)
 801cc64:	2200      	movs	r2, #0
 801cc66:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801cc68:	46c0      	nop			; (mov r8, r8)
 801cc6a:	46bd      	mov	sp, r7
 801cc6c:	bd80      	pop	{r7, pc}
 801cc6e:	46c0      	nop			; (mov r8, r8)
 801cc70:	200017b4 	.word	0x200017b4
 801cc74:	200017b8 	.word	0x200017b8

0801cc78 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	b086      	sub	sp, #24
 801cc7c:	af00      	add	r7, sp, #0
 801cc7e:	6078      	str	r0, [r7, #4]
 801cc80:	000a      	movs	r2, r1
 801cc82:	1cfb      	adds	r3, r7, #3
 801cc84:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc86:	f3ef 8310 	mrs	r3, PRIMASK
 801cc8a:	613b      	str	r3, [r7, #16]
  return(result);
 801cc8c:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801cc8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc90:	b672      	cpsid	i
}
 801cc92:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801cc94:	1cfb      	adds	r3, r7, #3
 801cc96:	781b      	ldrb	r3, [r3, #0]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d008      	beq.n	801ccae <UTIL_LPM_SetStopMode+0x36>
 801cc9c:	2b01      	cmp	r3, #1
 801cc9e:	d10e      	bne.n	801ccbe <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801cca0:	4b0c      	ldr	r3, [pc, #48]	; (801ccd4 <UTIL_LPM_SetStopMode+0x5c>)
 801cca2:	681a      	ldr	r2, [r3, #0]
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	431a      	orrs	r2, r3
 801cca8:	4b0a      	ldr	r3, [pc, #40]	; (801ccd4 <UTIL_LPM_SetStopMode+0x5c>)
 801ccaa:	601a      	str	r2, [r3, #0]
      break;
 801ccac:	e008      	b.n	801ccc0 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	43da      	mvns	r2, r3
 801ccb2:	4b08      	ldr	r3, [pc, #32]	; (801ccd4 <UTIL_LPM_SetStopMode+0x5c>)
 801ccb4:	681b      	ldr	r3, [r3, #0]
 801ccb6:	401a      	ands	r2, r3
 801ccb8:	4b06      	ldr	r3, [pc, #24]	; (801ccd4 <UTIL_LPM_SetStopMode+0x5c>)
 801ccba:	601a      	str	r2, [r3, #0]
      break;
 801ccbc:	e000      	b.n	801ccc0 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801ccbe:	46c0      	nop			; (mov r8, r8)
 801ccc0:	697b      	ldr	r3, [r7, #20]
 801ccc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	f383 8810 	msr	PRIMASK, r3
}
 801ccca:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cccc:	46c0      	nop			; (mov r8, r8)
 801ccce:	46bd      	mov	sp, r7
 801ccd0:	b006      	add	sp, #24
 801ccd2:	bd80      	pop	{r7, pc}
 801ccd4:	200017b4 	.word	0x200017b4

0801ccd8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ccd8:	b580      	push	{r7, lr}
 801ccda:	b086      	sub	sp, #24
 801ccdc:	af00      	add	r7, sp, #0
 801ccde:	6078      	str	r0, [r7, #4]
 801cce0:	000a      	movs	r2, r1
 801cce2:	1cfb      	adds	r3, r7, #3
 801cce4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cce6:	f3ef 8310 	mrs	r3, PRIMASK
 801ccea:	613b      	str	r3, [r7, #16]
  return(result);
 801ccec:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ccee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ccf0:	b672      	cpsid	i
}
 801ccf2:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801ccf4:	1cfb      	adds	r3, r7, #3
 801ccf6:	781b      	ldrb	r3, [r3, #0]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d008      	beq.n	801cd0e <UTIL_LPM_SetOffMode+0x36>
 801ccfc:	2b01      	cmp	r3, #1
 801ccfe:	d10e      	bne.n	801cd1e <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801cd00:	4b0c      	ldr	r3, [pc, #48]	; (801cd34 <UTIL_LPM_SetOffMode+0x5c>)
 801cd02:	681a      	ldr	r2, [r3, #0]
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	431a      	orrs	r2, r3
 801cd08:	4b0a      	ldr	r3, [pc, #40]	; (801cd34 <UTIL_LPM_SetOffMode+0x5c>)
 801cd0a:	601a      	str	r2, [r3, #0]
      break;
 801cd0c:	e008      	b.n	801cd20 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	43da      	mvns	r2, r3
 801cd12:	4b08      	ldr	r3, [pc, #32]	; (801cd34 <UTIL_LPM_SetOffMode+0x5c>)
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	401a      	ands	r2, r3
 801cd18:	4b06      	ldr	r3, [pc, #24]	; (801cd34 <UTIL_LPM_SetOffMode+0x5c>)
 801cd1a:	601a      	str	r2, [r3, #0]
      break;
 801cd1c:	e000      	b.n	801cd20 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801cd1e:	46c0      	nop			; (mov r8, r8)
 801cd20:	697b      	ldr	r3, [r7, #20]
 801cd22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	f383 8810 	msr	PRIMASK, r3
}
 801cd2a:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cd2c:	46c0      	nop			; (mov r8, r8)
 801cd2e:	46bd      	mov	sp, r7
 801cd30:	b006      	add	sp, #24
 801cd32:	bd80      	pop	{r7, pc}
 801cd34:	200017b8 	.word	0x200017b8

0801cd38 <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b084      	sub	sp, #16
 801cd3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd3e:	f3ef 8310 	mrs	r3, PRIMASK
 801cd42:	607b      	str	r3, [r7, #4]
  return(result);
 801cd44:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801cd46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd48:	b672      	cpsid	i
}
 801cd4a:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801cd4c:	4b11      	ldr	r3, [pc, #68]	; (801cd94 <UTIL_LPM_GetMode+0x5c>)
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d004      	beq.n	801cd5e <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801cd54:	230f      	movs	r3, #15
 801cd56:	18fb      	adds	r3, r7, r3
 801cd58:	2200      	movs	r2, #0
 801cd5a:	701a      	strb	r2, [r3, #0]
 801cd5c:	e00c      	b.n	801cd78 <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801cd5e:	4b0e      	ldr	r3, [pc, #56]	; (801cd98 <UTIL_LPM_GetMode+0x60>)
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d004      	beq.n	801cd70 <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801cd66:	230f      	movs	r3, #15
 801cd68:	18fb      	adds	r3, r7, r3
 801cd6a:	2201      	movs	r2, #1
 801cd6c:	701a      	strb	r2, [r3, #0]
 801cd6e:	e003      	b.n	801cd78 <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801cd70:	230f      	movs	r3, #15
 801cd72:	18fb      	adds	r3, r7, r3
 801cd74:	2202      	movs	r2, #2
 801cd76:	701a      	strb	r2, [r3, #0]
 801cd78:	68bb      	ldr	r3, [r7, #8]
 801cd7a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd7c:	683b      	ldr	r3, [r7, #0]
 801cd7e:	f383 8810 	msr	PRIMASK, r3
}
 801cd82:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801cd84:	230f      	movs	r3, #15
 801cd86:	18fb      	adds	r3, r7, r3
 801cd88:	781b      	ldrb	r3, [r3, #0]
}
 801cd8a:	0018      	movs	r0, r3
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	b004      	add	sp, #16
 801cd90:	bd80      	pop	{r7, pc}
 801cd92:	46c0      	nop			; (mov r8, r8)
 801cd94:	200017b4 	.word	0x200017b4
 801cd98:	200017b8 	.word	0x200017b8

0801cd9c <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801cd9c:	b580      	push	{r7, lr}
 801cd9e:	b084      	sub	sp, #16
 801cda0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cda2:	f3ef 8310 	mrs	r3, PRIMASK
 801cda6:	60bb      	str	r3, [r7, #8]
  return(result);
 801cda8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801cdaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdac:	b672      	cpsid	i
}
 801cdae:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801cdb0:	4b12      	ldr	r3, [pc, #72]	; (801cdfc <UTIL_LPM_EnterLowPower+0x60>)
 801cdb2:	681b      	ldr	r3, [r3, #0]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d006      	beq.n	801cdc6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801cdb8:	4b11      	ldr	r3, [pc, #68]	; (801ce00 <UTIL_LPM_EnterLowPower+0x64>)
 801cdba:	681b      	ldr	r3, [r3, #0]
 801cdbc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801cdbe:	4b10      	ldr	r3, [pc, #64]	; (801ce00 <UTIL_LPM_EnterLowPower+0x64>)
 801cdc0:	685b      	ldr	r3, [r3, #4]
 801cdc2:	4798      	blx	r3
 801cdc4:	e010      	b.n	801cde8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801cdc6:	4b0f      	ldr	r3, [pc, #60]	; (801ce04 <UTIL_LPM_EnterLowPower+0x68>)
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d006      	beq.n	801cddc <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801cdce:	4b0c      	ldr	r3, [pc, #48]	; (801ce00 <UTIL_LPM_EnterLowPower+0x64>)
 801cdd0:	689b      	ldr	r3, [r3, #8]
 801cdd2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801cdd4:	4b0a      	ldr	r3, [pc, #40]	; (801ce00 <UTIL_LPM_EnterLowPower+0x64>)
 801cdd6:	68db      	ldr	r3, [r3, #12]
 801cdd8:	4798      	blx	r3
 801cdda:	e005      	b.n	801cde8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801cddc:	4b08      	ldr	r3, [pc, #32]	; (801ce00 <UTIL_LPM_EnterLowPower+0x64>)
 801cdde:	691b      	ldr	r3, [r3, #16]
 801cde0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801cde2:	4b07      	ldr	r3, [pc, #28]	; (801ce00 <UTIL_LPM_EnterLowPower+0x64>)
 801cde4:	695b      	ldr	r3, [r3, #20]
 801cde6:	4798      	blx	r3
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	f383 8810 	msr	PRIMASK, r3
}
 801cdf2:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801cdf4:	46c0      	nop			; (mov r8, r8)
 801cdf6:	46bd      	mov	sp, r7
 801cdf8:	b004      	add	sp, #16
 801cdfa:	bd80      	pop	{r7, pc}
 801cdfc:	200017b4 	.word	0x200017b4
 801ce00:	08020a40 	.word	0x08020a40
 801ce04:	200017b8 	.word	0x200017b8

0801ce08 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	b086      	sub	sp, #24
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	60f8      	str	r0, [r7, #12]
 801ce10:	60b9      	str	r1, [r7, #8]
 801ce12:	1dbb      	adds	r3, r7, #6
 801ce14:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801ce1a:	68bb      	ldr	r3, [r7, #8]
 801ce1c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801ce1e:	e007      	b.n	801ce30 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801ce20:	693a      	ldr	r2, [r7, #16]
 801ce22:	1c53      	adds	r3, r2, #1
 801ce24:	613b      	str	r3, [r7, #16]
 801ce26:	697b      	ldr	r3, [r7, #20]
 801ce28:	1c59      	adds	r1, r3, #1
 801ce2a:	6179      	str	r1, [r7, #20]
 801ce2c:	7812      	ldrb	r2, [r2, #0]
 801ce2e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ce30:	1dbb      	adds	r3, r7, #6
 801ce32:	881b      	ldrh	r3, [r3, #0]
 801ce34:	1dba      	adds	r2, r7, #6
 801ce36:	1e59      	subs	r1, r3, #1
 801ce38:	8011      	strh	r1, [r2, #0]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d1f0      	bne.n	801ce20 <UTIL_MEM_cpy_8+0x18>
    }
}
 801ce3e:	46c0      	nop			; (mov r8, r8)
 801ce40:	46c0      	nop			; (mov r8, r8)
 801ce42:	46bd      	mov	sp, r7
 801ce44:	b006      	add	sp, #24
 801ce46:	bd80      	pop	{r7, pc}

0801ce48 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	b084      	sub	sp, #16
 801ce4c:	af00      	add	r7, sp, #0
 801ce4e:	6078      	str	r0, [r7, #4]
 801ce50:	0008      	movs	r0, r1
 801ce52:	0011      	movs	r1, r2
 801ce54:	1cfb      	adds	r3, r7, #3
 801ce56:	1c02      	adds	r2, r0, #0
 801ce58:	701a      	strb	r2, [r3, #0]
 801ce5a:	003b      	movs	r3, r7
 801ce5c:	1c0a      	adds	r2, r1, #0
 801ce5e:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801ce64:	e005      	b.n	801ce72 <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	1c5a      	adds	r2, r3, #1
 801ce6a:	60fa      	str	r2, [r7, #12]
 801ce6c:	1cfa      	adds	r2, r7, #3
 801ce6e:	7812      	ldrb	r2, [r2, #0]
 801ce70:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ce72:	003b      	movs	r3, r7
 801ce74:	881b      	ldrh	r3, [r3, #0]
 801ce76:	003a      	movs	r2, r7
 801ce78:	1e59      	subs	r1, r3, #1
 801ce7a:	8011      	strh	r1, [r2, #0]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d1f2      	bne.n	801ce66 <UTIL_MEM_set_8+0x1e>
  }
}
 801ce80:	46c0      	nop			; (mov r8, r8)
 801ce82:	46c0      	nop			; (mov r8, r8)
 801ce84:	46bd      	mov	sp, r7
 801ce86:	b004      	add	sp, #16
 801ce88:	bd80      	pop	{r7, pc}
	...

0801ce8c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801ce8c:	b580      	push	{r7, lr}
 801ce8e:	b08c      	sub	sp, #48	; 0x30
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801ce94:	4b66      	ldr	r3, [pc, #408]	; (801d030 <UTIL_SEQ_Run+0x1a4>)
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801ce9a:	4b65      	ldr	r3, [pc, #404]	; (801d030 <UTIL_SEQ_Run+0x1a4>)
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	687a      	ldr	r2, [r7, #4]
 801cea0:	401a      	ands	r2, r3
 801cea2:	4b63      	ldr	r3, [pc, #396]	; (801d030 <UTIL_SEQ_Run+0x1a4>)
 801cea4:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801cea6:	e086      	b.n	801cfb6 <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801cea8:	2300      	movs	r3, #0
 801ceaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801ceac:	e002      	b.n	801ceb4 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801ceae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ceb0:	3301      	adds	r3, #1
 801ceb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801ceb4:	4b5f      	ldr	r3, [pc, #380]	; (801d034 <UTIL_SEQ_Run+0x1a8>)
 801ceb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ceb8:	00d2      	lsls	r2, r2, #3
 801ceba:	58d2      	ldr	r2, [r2, r3]
 801cebc:	4b5e      	ldr	r3, [pc, #376]	; (801d038 <UTIL_SEQ_Run+0x1ac>)
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	401a      	ands	r2, r3
 801cec2:	4b5b      	ldr	r3, [pc, #364]	; (801d030 <UTIL_SEQ_Run+0x1a4>)
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	4013      	ands	r3, r2
 801cec8:	d0f1      	beq.n	801ceae <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801ceca:	4b5a      	ldr	r3, [pc, #360]	; (801d034 <UTIL_SEQ_Run+0x1a8>)
 801cecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cece:	00d2      	lsls	r2, r2, #3
 801ced0:	58d2      	ldr	r2, [r2, r3]
 801ced2:	4b59      	ldr	r3, [pc, #356]	; (801d038 <UTIL_SEQ_Run+0x1ac>)
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	401a      	ands	r2, r3
 801ced8:	4b55      	ldr	r3, [pc, #340]	; (801d030 <UTIL_SEQ_Run+0x1a4>)
 801ceda:	681b      	ldr	r3, [r3, #0]
 801cedc:	4013      	ands	r3, r2
 801cede:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801cee0:	4a54      	ldr	r2, [pc, #336]	; (801d034 <UTIL_SEQ_Run+0x1a8>)
 801cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cee4:	00db      	lsls	r3, r3, #3
 801cee6:	18d3      	adds	r3, r2, r3
 801cee8:	3304      	adds	r3, #4
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ceee:	4013      	ands	r3, r2
 801cef0:	d107      	bne.n	801cf02 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801cef2:	4a50      	ldr	r2, [pc, #320]	; (801d034 <UTIL_SEQ_Run+0x1a8>)
 801cef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cef6:	00db      	lsls	r3, r3, #3
 801cef8:	18d3      	adds	r3, r2, r3
 801cefa:	3304      	adds	r3, #4
 801cefc:	2201      	movs	r2, #1
 801cefe:	4252      	negs	r2, r2
 801cf00:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801cf02:	4a4c      	ldr	r2, [pc, #304]	; (801d034 <UTIL_SEQ_Run+0x1a8>)
 801cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf06:	00db      	lsls	r3, r3, #3
 801cf08:	18d3      	adds	r3, r2, r3
 801cf0a:	3304      	adds	r3, #4
 801cf0c:	681b      	ldr	r3, [r3, #0]
 801cf0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf10:	4013      	ands	r3, r2
 801cf12:	0018      	movs	r0, r3
 801cf14:	f000 f962 	bl	801d1dc <SEQ_BitPosition>
 801cf18:	0003      	movs	r3, r0
 801cf1a:	001a      	movs	r2, r3
 801cf1c:	4b47      	ldr	r3, [pc, #284]	; (801d03c <UTIL_SEQ_Run+0x1b0>)
 801cf1e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801cf20:	4a44      	ldr	r2, [pc, #272]	; (801d034 <UTIL_SEQ_Run+0x1a8>)
 801cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf24:	00db      	lsls	r3, r3, #3
 801cf26:	18d3      	adds	r3, r2, r3
 801cf28:	3304      	adds	r3, #4
 801cf2a:	681a      	ldr	r2, [r3, #0]
 801cf2c:	4b43      	ldr	r3, [pc, #268]	; (801d03c <UTIL_SEQ_Run+0x1b0>)
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	2101      	movs	r1, #1
 801cf32:	4099      	lsls	r1, r3
 801cf34:	000b      	movs	r3, r1
 801cf36:	43db      	mvns	r3, r3
 801cf38:	401a      	ands	r2, r3
 801cf3a:	493e      	ldr	r1, [pc, #248]	; (801d034 <UTIL_SEQ_Run+0x1a8>)
 801cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf3e:	00db      	lsls	r3, r3, #3
 801cf40:	18cb      	adds	r3, r1, r3
 801cf42:	3304      	adds	r3, #4
 801cf44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf46:	f3ef 8310 	mrs	r3, PRIMASK
 801cf4a:	61bb      	str	r3, [r7, #24]
  return(result);
 801cf4c:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cf4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf50:	b672      	cpsid	i
}
 801cf52:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801cf54:	4b39      	ldr	r3, [pc, #228]	; (801d03c <UTIL_SEQ_Run+0x1b0>)
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	2201      	movs	r2, #1
 801cf5a:	409a      	lsls	r2, r3
 801cf5c:	0013      	movs	r3, r2
 801cf5e:	43da      	mvns	r2, r3
 801cf60:	4b37      	ldr	r3, [pc, #220]	; (801d040 <UTIL_SEQ_Run+0x1b4>)
 801cf62:	681b      	ldr	r3, [r3, #0]
 801cf64:	401a      	ands	r2, r3
 801cf66:	4b36      	ldr	r3, [pc, #216]	; (801d040 <UTIL_SEQ_Run+0x1b4>)
 801cf68:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801cf6a:	2302      	movs	r3, #2
 801cf6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cf6e:	e013      	b.n	801cf98 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801cf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf72:	1e5a      	subs	r2, r3, #1
 801cf74:	4b2f      	ldr	r3, [pc, #188]	; (801d034 <UTIL_SEQ_Run+0x1a8>)
 801cf76:	00d2      	lsls	r2, r2, #3
 801cf78:	58d1      	ldr	r1, [r2, r3]
 801cf7a:	4b30      	ldr	r3, [pc, #192]	; (801d03c <UTIL_SEQ_Run+0x1b0>)
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	2201      	movs	r2, #1
 801cf80:	409a      	lsls	r2, r3
 801cf82:	0013      	movs	r3, r2
 801cf84:	43db      	mvns	r3, r3
 801cf86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cf88:	3a01      	subs	r2, #1
 801cf8a:	4019      	ands	r1, r3
 801cf8c:	4b29      	ldr	r3, [pc, #164]	; (801d034 <UTIL_SEQ_Run+0x1a8>)
 801cf8e:	00d2      	lsls	r2, r2, #3
 801cf90:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf94:	3b01      	subs	r3, #1
 801cf96:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d1e8      	bne.n	801cf70 <UTIL_SEQ_Run+0xe4>
 801cf9e:	6a3b      	ldr	r3, [r7, #32]
 801cfa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfa2:	697b      	ldr	r3, [r7, #20]
 801cfa4:	f383 8810 	msr	PRIMASK, r3
}
 801cfa8:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801cfaa:	4b24      	ldr	r3, [pc, #144]	; (801d03c <UTIL_SEQ_Run+0x1b0>)
 801cfac:	681a      	ldr	r2, [r3, #0]
 801cfae:	4b25      	ldr	r3, [pc, #148]	; (801d044 <UTIL_SEQ_Run+0x1b8>)
 801cfb0:	0092      	lsls	r2, r2, #2
 801cfb2:	58d3      	ldr	r3, [r2, r3]
 801cfb4:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801cfb6:	4b22      	ldr	r3, [pc, #136]	; (801d040 <UTIL_SEQ_Run+0x1b4>)
 801cfb8:	681a      	ldr	r2, [r3, #0]
 801cfba:	4b1f      	ldr	r3, [pc, #124]	; (801d038 <UTIL_SEQ_Run+0x1ac>)
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	401a      	ands	r2, r3
 801cfc0:	4b1b      	ldr	r3, [pc, #108]	; (801d030 <UTIL_SEQ_Run+0x1a4>)
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	4013      	ands	r3, r2
 801cfc6:	d006      	beq.n	801cfd6 <UTIL_SEQ_Run+0x14a>
 801cfc8:	4b1f      	ldr	r3, [pc, #124]	; (801d048 <UTIL_SEQ_Run+0x1bc>)
 801cfca:	681a      	ldr	r2, [r3, #0]
 801cfcc:	4b1f      	ldr	r3, [pc, #124]	; (801d04c <UTIL_SEQ_Run+0x1c0>)
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	4013      	ands	r3, r2
 801cfd2:	d100      	bne.n	801cfd6 <UTIL_SEQ_Run+0x14a>
 801cfd4:	e768      	b.n	801cea8 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801cfd6:	4b19      	ldr	r3, [pc, #100]	; (801d03c <UTIL_SEQ_Run+0x1b0>)
 801cfd8:	2201      	movs	r2, #1
 801cfda:	4252      	negs	r2, r2
 801cfdc:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801cfde:	f000 f8f3 	bl	801d1c8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cfe2:	f3ef 8310 	mrs	r3, PRIMASK
 801cfe6:	613b      	str	r3, [r7, #16]
  return(result);
 801cfe8:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801cfea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cfec:	b672      	cpsid	i
}
 801cfee:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801cff0:	4b13      	ldr	r3, [pc, #76]	; (801d040 <UTIL_SEQ_Run+0x1b4>)
 801cff2:	681a      	ldr	r2, [r3, #0]
 801cff4:	4b10      	ldr	r3, [pc, #64]	; (801d038 <UTIL_SEQ_Run+0x1ac>)
 801cff6:	681b      	ldr	r3, [r3, #0]
 801cff8:	401a      	ands	r2, r3
 801cffa:	4b0d      	ldr	r3, [pc, #52]	; (801d030 <UTIL_SEQ_Run+0x1a4>)
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	4013      	ands	r3, r2
 801d000:	d107      	bne.n	801d012 <UTIL_SEQ_Run+0x186>
 801d002:	4b11      	ldr	r3, [pc, #68]	; (801d048 <UTIL_SEQ_Run+0x1bc>)
 801d004:	681a      	ldr	r2, [r3, #0]
 801d006:	4b11      	ldr	r3, [pc, #68]	; (801d04c <UTIL_SEQ_Run+0x1c0>)
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	4013      	ands	r3, r2
 801d00c:	d101      	bne.n	801d012 <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801d00e:	f7e9 f871 	bl	80060f4 <UTIL_SEQ_Idle>
 801d012:	69fb      	ldr	r3, [r7, #28]
 801d014:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	f383 8810 	msr	PRIMASK, r3
}
 801d01c:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801d01e:	f000 f8d8 	bl	801d1d2 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801d022:	4b03      	ldr	r3, [pc, #12]	; (801d030 <UTIL_SEQ_Run+0x1a4>)
 801d024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d026:	601a      	str	r2, [r3, #0]

  return;
 801d028:	46c0      	nop			; (mov r8, r8)
}
 801d02a:	46bd      	mov	sp, r7
 801d02c:	b00c      	add	sp, #48	; 0x30
 801d02e:	bd80      	pop	{r7, pc}
 801d030:	200001e0 	.word	0x200001e0
 801d034:	2000184c 	.word	0x2000184c
 801d038:	200001dc 	.word	0x200001dc
 801d03c:	200017c8 	.word	0x200017c8
 801d040:	200017bc 	.word	0x200017bc
 801d044:	200017cc 	.word	0x200017cc
 801d048:	200017c0 	.word	0x200017c0
 801d04c:	200017c4 	.word	0x200017c4

0801d050 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801d050:	b580      	push	{r7, lr}
 801d052:	b088      	sub	sp, #32
 801d054:	af00      	add	r7, sp, #0
 801d056:	60f8      	str	r0, [r7, #12]
 801d058:	60b9      	str	r1, [r7, #8]
 801d05a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d05c:	f3ef 8310 	mrs	r3, PRIMASK
 801d060:	617b      	str	r3, [r7, #20]
  return(result);
 801d062:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801d064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d066:	b672      	cpsid	i
}
 801d068:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	0018      	movs	r0, r3
 801d06e:	f000 f8b5 	bl	801d1dc <SEQ_BitPosition>
 801d072:	0003      	movs	r3, r0
 801d074:	001a      	movs	r2, r3
 801d076:	4b07      	ldr	r3, [pc, #28]	; (801d094 <UTIL_SEQ_RegTask+0x44>)
 801d078:	0092      	lsls	r2, r2, #2
 801d07a:	6879      	ldr	r1, [r7, #4]
 801d07c:	50d1      	str	r1, [r2, r3]
 801d07e:	69fb      	ldr	r3, [r7, #28]
 801d080:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d082:	69bb      	ldr	r3, [r7, #24]
 801d084:	f383 8810 	msr	PRIMASK, r3
}
 801d088:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801d08a:	46c0      	nop			; (mov r8, r8)
}
 801d08c:	46bd      	mov	sp, r7
 801d08e:	b008      	add	sp, #32
 801d090:	bd80      	pop	{r7, pc}
 801d092:	46c0      	nop			; (mov r8, r8)
 801d094:	200017cc 	.word	0x200017cc

0801d098 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801d098:	b580      	push	{r7, lr}
 801d09a:	b086      	sub	sp, #24
 801d09c:	af00      	add	r7, sp, #0
 801d09e:	6078      	str	r0, [r7, #4]
 801d0a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0a2:	f3ef 8310 	mrs	r3, PRIMASK
 801d0a6:	60fb      	str	r3, [r7, #12]
  return(result);
 801d0a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d0aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0ac:	b672      	cpsid	i
}
 801d0ae:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801d0b0:	4b0d      	ldr	r3, [pc, #52]	; (801d0e8 <UTIL_SEQ_SetTask+0x50>)
 801d0b2:	681a      	ldr	r2, [r3, #0]
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	431a      	orrs	r2, r3
 801d0b8:	4b0b      	ldr	r3, [pc, #44]	; (801d0e8 <UTIL_SEQ_SetTask+0x50>)
 801d0ba:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801d0bc:	4b0b      	ldr	r3, [pc, #44]	; (801d0ec <UTIL_SEQ_SetTask+0x54>)
 801d0be:	683a      	ldr	r2, [r7, #0]
 801d0c0:	00d2      	lsls	r2, r2, #3
 801d0c2:	58d2      	ldr	r2, [r2, r3]
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	431a      	orrs	r2, r3
 801d0c8:	0011      	movs	r1, r2
 801d0ca:	4b08      	ldr	r3, [pc, #32]	; (801d0ec <UTIL_SEQ_SetTask+0x54>)
 801d0cc:	683a      	ldr	r2, [r7, #0]
 801d0ce:	00d2      	lsls	r2, r2, #3
 801d0d0:	50d1      	str	r1, [r2, r3]
 801d0d2:	697b      	ldr	r3, [r7, #20]
 801d0d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0d6:	693b      	ldr	r3, [r7, #16]
 801d0d8:	f383 8810 	msr	PRIMASK, r3
}
 801d0dc:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d0de:	46c0      	nop			; (mov r8, r8)
}
 801d0e0:	46bd      	mov	sp, r7
 801d0e2:	b006      	add	sp, #24
 801d0e4:	bd80      	pop	{r7, pc}
 801d0e6:	46c0      	nop			; (mov r8, r8)
 801d0e8:	200017bc 	.word	0x200017bc
 801d0ec:	2000184c 	.word	0x2000184c

0801d0f0 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b086      	sub	sp, #24
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0f8:	f3ef 8310 	mrs	r3, PRIMASK
 801d0fc:	60fb      	str	r3, [r7, #12]
  return(result);
 801d0fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d100:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d102:	b672      	cpsid	i
}
 801d104:	46c0      	nop			; (mov r8, r8)

  EvtSet |= EvtId_bm;
 801d106:	4b08      	ldr	r3, [pc, #32]	; (801d128 <UTIL_SEQ_SetEvt+0x38>)
 801d108:	681a      	ldr	r2, [r3, #0]
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	431a      	orrs	r2, r3
 801d10e:	4b06      	ldr	r3, [pc, #24]	; (801d128 <UTIL_SEQ_SetEvt+0x38>)
 801d110:	601a      	str	r2, [r3, #0]
 801d112:	697b      	ldr	r3, [r7, #20]
 801d114:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d116:	693b      	ldr	r3, [r7, #16]
 801d118:	f383 8810 	msr	PRIMASK, r3
}
 801d11c:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d11e:	46c0      	nop			; (mov r8, r8)
}
 801d120:	46bd      	mov	sp, r7
 801d122:	b006      	add	sp, #24
 801d124:	bd80      	pop	{r7, pc}
 801d126:	46c0      	nop			; (mov r8, r8)
 801d128:	200017c0 	.word	0x200017c0

0801d12c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801d12c:	b580      	push	{r7, lr}
 801d12e:	b086      	sub	sp, #24
 801d130:	af00      	add	r7, sp, #0
 801d132:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801d134:	4b1a      	ldr	r3, [pc, #104]	; (801d1a0 <UTIL_SEQ_WaitEvt+0x74>)
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801d13a:	4b19      	ldr	r3, [pc, #100]	; (801d1a0 <UTIL_SEQ_WaitEvt+0x74>)
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	3301      	adds	r3, #1
 801d140:	d102      	bne.n	801d148 <UTIL_SEQ_WaitEvt+0x1c>
  {
    wait_task_idx = 0;
 801d142:	2300      	movs	r3, #0
 801d144:	617b      	str	r3, [r7, #20]
 801d146:	e005      	b.n	801d154 <UTIL_SEQ_WaitEvt+0x28>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 801d148:	4b15      	ldr	r3, [pc, #84]	; (801d1a0 <UTIL_SEQ_WaitEvt+0x74>)
 801d14a:	681b      	ldr	r3, [r3, #0]
 801d14c:	2201      	movs	r2, #1
 801d14e:	409a      	lsls	r2, r3
 801d150:	0013      	movs	r3, r2
 801d152:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801d154:	4b13      	ldr	r3, [pc, #76]	; (801d1a4 <UTIL_SEQ_WaitEvt+0x78>)
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 801d15a:	4b12      	ldr	r3, [pc, #72]	; (801d1a4 <UTIL_SEQ_WaitEvt+0x78>)
 801d15c:	687a      	ldr	r2, [r7, #4]
 801d15e:	601a      	str	r2, [r3, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 801d160:	e006      	b.n	801d170 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 801d162:	4b10      	ldr	r3, [pc, #64]	; (801d1a4 <UTIL_SEQ_WaitEvt+0x78>)
 801d164:	681a      	ldr	r2, [r3, #0]
 801d166:	697b      	ldr	r3, [r7, #20]
 801d168:	0011      	movs	r1, r2
 801d16a:	0018      	movs	r0, r3
 801d16c:	f000 f81e 	bl	801d1ac <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 801d170:	4b0d      	ldr	r3, [pc, #52]	; (801d1a8 <UTIL_SEQ_WaitEvt+0x7c>)
 801d172:	681a      	ldr	r2, [r3, #0]
 801d174:	4b0b      	ldr	r3, [pc, #44]	; (801d1a4 <UTIL_SEQ_WaitEvt+0x78>)
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	4013      	ands	r3, r2
 801d17a:	d0f2      	beq.n	801d162 <UTIL_SEQ_WaitEvt+0x36>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801d17c:	4b08      	ldr	r3, [pc, #32]	; (801d1a0 <UTIL_SEQ_WaitEvt+0x74>)
 801d17e:	693a      	ldr	r2, [r7, #16]
 801d180:	601a      	str	r2, [r3, #0]

  EvtSet &= (~EvtWaited);
 801d182:	4b08      	ldr	r3, [pc, #32]	; (801d1a4 <UTIL_SEQ_WaitEvt+0x78>)
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	43da      	mvns	r2, r3
 801d188:	4b07      	ldr	r3, [pc, #28]	; (801d1a8 <UTIL_SEQ_WaitEvt+0x7c>)
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	401a      	ands	r2, r3
 801d18e:	4b06      	ldr	r3, [pc, #24]	; (801d1a8 <UTIL_SEQ_WaitEvt+0x7c>)
 801d190:	601a      	str	r2, [r3, #0]
  EvtWaited = event_waited_id_backup;
 801d192:	4b04      	ldr	r3, [pc, #16]	; (801d1a4 <UTIL_SEQ_WaitEvt+0x78>)
 801d194:	68fa      	ldr	r2, [r7, #12]
 801d196:	601a      	str	r2, [r3, #0]

  return;
 801d198:	46c0      	nop			; (mov r8, r8)
}
 801d19a:	46bd      	mov	sp, r7
 801d19c:	b006      	add	sp, #24
 801d19e:	bd80      	pop	{r7, pc}
 801d1a0:	200017c8 	.word	0x200017c8
 801d1a4:	200017c4 	.word	0x200017c4
 801d1a8:	200017c0 	.word	0x200017c0

0801d1ac <UTIL_SEQ_EvtIdle>:
{
  return (EvtSet & EvtWaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 801d1ac:	b580      	push	{r7, lr}
 801d1ae:	b082      	sub	sp, #8
 801d1b0:	af00      	add	r7, sp, #0
 801d1b2:	6078      	str	r0, [r7, #4]
 801d1b4:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(~TaskId_bm);
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	43db      	mvns	r3, r3
 801d1ba:	0018      	movs	r0, r3
 801d1bc:	f7ff fe66 	bl	801ce8c <UTIL_SEQ_Run>
  return;
 801d1c0:	46c0      	nop			; (mov r8, r8)
}
 801d1c2:	46bd      	mov	sp, r7
 801d1c4:	b002      	add	sp, #8
 801d1c6:	bd80      	pop	{r7, pc}

0801d1c8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d1cc:	46c0      	nop			; (mov r8, r8)
}
 801d1ce:	46bd      	mov	sp, r7
 801d1d0:	bd80      	pop	{r7, pc}

0801d1d2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801d1d2:	b580      	push	{r7, lr}
 801d1d4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d1d6:	46c0      	nop			; (mov r8, r8)
}
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	bd80      	pop	{r7, pc}

0801d1dc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801d1dc:	b580      	push	{r7, lr}
 801d1de:	b084      	sub	sp, #16
 801d1e0:	af00      	add	r7, sp, #0
 801d1e2:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801d1e4:	210f      	movs	r1, #15
 801d1e6:	187b      	adds	r3, r7, r1
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	0c1b      	lsrs	r3, r3, #16
 801d1f0:	041b      	lsls	r3, r3, #16
 801d1f2:	d105      	bne.n	801d200 <SEQ_BitPosition+0x24>
 801d1f4:	187b      	adds	r3, r7, r1
 801d1f6:	2210      	movs	r2, #16
 801d1f8:	701a      	strb	r2, [r3, #0]
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	041b      	lsls	r3, r3, #16
 801d1fe:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	0e1b      	lsrs	r3, r3, #24
 801d204:	061b      	lsls	r3, r3, #24
 801d206:	d108      	bne.n	801d21a <SEQ_BitPosition+0x3e>
 801d208:	220f      	movs	r2, #15
 801d20a:	18bb      	adds	r3, r7, r2
 801d20c:	18ba      	adds	r2, r7, r2
 801d20e:	7812      	ldrb	r2, [r2, #0]
 801d210:	3208      	adds	r2, #8
 801d212:	701a      	strb	r2, [r3, #0]
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	021b      	lsls	r3, r3, #8
 801d218:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	0f1b      	lsrs	r3, r3, #28
 801d21e:	071b      	lsls	r3, r3, #28
 801d220:	d108      	bne.n	801d234 <SEQ_BitPosition+0x58>
 801d222:	220f      	movs	r2, #15
 801d224:	18bb      	adds	r3, r7, r2
 801d226:	18ba      	adds	r2, r7, r2
 801d228:	7812      	ldrb	r2, [r2, #0]
 801d22a:	3204      	adds	r2, #4
 801d22c:	701a      	strb	r2, [r3, #0]
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	011b      	lsls	r3, r3, #4
 801d232:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	0f1b      	lsrs	r3, r3, #28
 801d238:	4a08      	ldr	r2, [pc, #32]	; (801d25c <SEQ_BitPosition+0x80>)
 801d23a:	5cd1      	ldrb	r1, [r2, r3]
 801d23c:	200f      	movs	r0, #15
 801d23e:	183b      	adds	r3, r7, r0
 801d240:	183a      	adds	r2, r7, r0
 801d242:	7812      	ldrb	r2, [r2, #0]
 801d244:	188a      	adds	r2, r1, r2
 801d246:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801d248:	183b      	adds	r3, r7, r0
 801d24a:	781b      	ldrb	r3, [r3, #0]
 801d24c:	221f      	movs	r2, #31
 801d24e:	1ad3      	subs	r3, r2, r3
 801d250:	b2db      	uxtb	r3, r3
}
 801d252:	0018      	movs	r0, r3
 801d254:	46bd      	mov	sp, r7
 801d256:	b004      	add	sp, #16
 801d258:	bd80      	pop	{r7, pc}
 801d25a:	46c0      	nop			; (mov r8, r8)
 801d25c:	080218b0 	.word	0x080218b0

0801d260 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d260:	b082      	sub	sp, #8
 801d262:	b580      	push	{r7, lr}
 801d264:	b086      	sub	sp, #24
 801d266:	af00      	add	r7, sp, #0
 801d268:	60f8      	str	r0, [r7, #12]
 801d26a:	1d38      	adds	r0, r7, #4
 801d26c:	6001      	str	r1, [r0, #0]
 801d26e:	6042      	str	r2, [r0, #4]
 801d270:	2204      	movs	r2, #4
 801d272:	2120      	movs	r1, #32
 801d274:	468c      	mov	ip, r1
 801d276:	44bc      	add	ip, r7
 801d278:	4462      	add	r2, ip
 801d27a:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d27c:	2110      	movs	r1, #16
 801d27e:	187b      	adds	r3, r7, r1
 801d280:	2200      	movs	r2, #0
 801d282:	601a      	str	r2, [r3, #0]
 801d284:	187b      	adds	r3, r7, r1
 801d286:	2200      	movs	r2, #0
 801d288:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801d28a:	1d3b      	adds	r3, r7, #4
 801d28c:	681a      	ldr	r2, [r3, #0]
 801d28e:	2304      	movs	r3, #4
 801d290:	2020      	movs	r0, #32
 801d292:	4684      	mov	ip, r0
 801d294:	44bc      	add	ip, r7
 801d296:	4463      	add	r3, ip
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	18d2      	adds	r2, r2, r3
 801d29c:	187b      	adds	r3, r7, r1
 801d29e:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d2a0:	1d3b      	adds	r3, r7, #4
 801d2a2:	2204      	movs	r2, #4
 801d2a4:	5e9b      	ldrsh	r3, [r3, r2]
 801d2a6:	b29a      	uxth	r2, r3
 801d2a8:	2304      	movs	r3, #4
 801d2aa:	2020      	movs	r0, #32
 801d2ac:	4684      	mov	ip, r0
 801d2ae:	44bc      	add	ip, r7
 801d2b0:	4463      	add	r3, ip
 801d2b2:	2004      	movs	r0, #4
 801d2b4:	5e1b      	ldrsh	r3, [r3, r0]
 801d2b6:	b29b      	uxth	r3, r3
 801d2b8:	18d3      	adds	r3, r2, r3
 801d2ba:	b29b      	uxth	r3, r3
 801d2bc:	b21a      	sxth	r2, r3
 801d2be:	187b      	adds	r3, r7, r1
 801d2c0:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801d2c2:	187b      	adds	r3, r7, r1
 801d2c4:	2204      	movs	r2, #4
 801d2c6:	5e9a      	ldrsh	r2, [r3, r2]
 801d2c8:	23fa      	movs	r3, #250	; 0xfa
 801d2ca:	009b      	lsls	r3, r3, #2
 801d2cc:	429a      	cmp	r2, r3
 801d2ce:	db0f      	blt.n	801d2f0 <SysTimeAdd+0x90>
  {
    c.Seconds++;
 801d2d0:	187b      	adds	r3, r7, r1
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	1c5a      	adds	r2, r3, #1
 801d2d6:	187b      	adds	r3, r7, r1
 801d2d8:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801d2da:	187b      	adds	r3, r7, r1
 801d2dc:	2204      	movs	r2, #4
 801d2de:	5e9b      	ldrsh	r3, [r3, r2]
 801d2e0:	b29b      	uxth	r3, r3
 801d2e2:	4a09      	ldr	r2, [pc, #36]	; (801d308 <SysTimeAdd+0xa8>)
 801d2e4:	4694      	mov	ip, r2
 801d2e6:	4463      	add	r3, ip
 801d2e8:	b29b      	uxth	r3, r3
 801d2ea:	b21a      	sxth	r2, r3
 801d2ec:	187b      	adds	r3, r7, r1
 801d2ee:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	2210      	movs	r2, #16
 801d2f4:	18ba      	adds	r2, r7, r2
 801d2f6:	ca03      	ldmia	r2!, {r0, r1}
 801d2f8:	c303      	stmia	r3!, {r0, r1}
}
 801d2fa:	68f8      	ldr	r0, [r7, #12]
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	b006      	add	sp, #24
 801d300:	bc80      	pop	{r7}
 801d302:	bc08      	pop	{r3}
 801d304:	b002      	add	sp, #8
 801d306:	4718      	bx	r3
 801d308:	fffffc18 	.word	0xfffffc18

0801d30c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d30c:	b082      	sub	sp, #8
 801d30e:	b580      	push	{r7, lr}
 801d310:	b086      	sub	sp, #24
 801d312:	af00      	add	r7, sp, #0
 801d314:	60f8      	str	r0, [r7, #12]
 801d316:	1d38      	adds	r0, r7, #4
 801d318:	6001      	str	r1, [r0, #0]
 801d31a:	6042      	str	r2, [r0, #4]
 801d31c:	2204      	movs	r2, #4
 801d31e:	2120      	movs	r1, #32
 801d320:	468c      	mov	ip, r1
 801d322:	44bc      	add	ip, r7
 801d324:	4462      	add	r2, ip
 801d326:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d328:	2110      	movs	r1, #16
 801d32a:	187b      	adds	r3, r7, r1
 801d32c:	2200      	movs	r2, #0
 801d32e:	601a      	str	r2, [r3, #0]
 801d330:	187b      	adds	r3, r7, r1
 801d332:	2200      	movs	r2, #0
 801d334:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801d336:	1d3b      	adds	r3, r7, #4
 801d338:	681a      	ldr	r2, [r3, #0]
 801d33a:	2304      	movs	r3, #4
 801d33c:	2020      	movs	r0, #32
 801d33e:	4684      	mov	ip, r0
 801d340:	44bc      	add	ip, r7
 801d342:	4463      	add	r3, ip
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	1ad2      	subs	r2, r2, r3
 801d348:	187b      	adds	r3, r7, r1
 801d34a:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d34c:	1d3b      	adds	r3, r7, #4
 801d34e:	2204      	movs	r2, #4
 801d350:	5e9b      	ldrsh	r3, [r3, r2]
 801d352:	b29a      	uxth	r2, r3
 801d354:	2304      	movs	r3, #4
 801d356:	2020      	movs	r0, #32
 801d358:	4684      	mov	ip, r0
 801d35a:	44bc      	add	ip, r7
 801d35c:	4463      	add	r3, ip
 801d35e:	2004      	movs	r0, #4
 801d360:	5e1b      	ldrsh	r3, [r3, r0]
 801d362:	b29b      	uxth	r3, r3
 801d364:	1ad3      	subs	r3, r2, r3
 801d366:	b29b      	uxth	r3, r3
 801d368:	b21a      	sxth	r2, r3
 801d36a:	187b      	adds	r3, r7, r1
 801d36c:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801d36e:	187b      	adds	r3, r7, r1
 801d370:	2204      	movs	r2, #4
 801d372:	5e9b      	ldrsh	r3, [r3, r2]
 801d374:	2b00      	cmp	r3, #0
 801d376:	da10      	bge.n	801d39a <SysTimeSub+0x8e>
  {
    c.Seconds--;
 801d378:	187b      	adds	r3, r7, r1
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	1e5a      	subs	r2, r3, #1
 801d37e:	187b      	adds	r3, r7, r1
 801d380:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801d382:	187b      	adds	r3, r7, r1
 801d384:	2204      	movs	r2, #4
 801d386:	5e9b      	ldrsh	r3, [r3, r2]
 801d388:	b29b      	uxth	r3, r3
 801d38a:	22fa      	movs	r2, #250	; 0xfa
 801d38c:	0092      	lsls	r2, r2, #2
 801d38e:	4694      	mov	ip, r2
 801d390:	4463      	add	r3, ip
 801d392:	b29b      	uxth	r3, r3
 801d394:	b21a      	sxth	r2, r3
 801d396:	187b      	adds	r3, r7, r1
 801d398:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	2210      	movs	r2, #16
 801d39e:	18ba      	adds	r2, r7, r2
 801d3a0:	ca03      	ldmia	r2!, {r0, r1}
 801d3a2:	c303      	stmia	r3!, {r0, r1}
}
 801d3a4:	68f8      	ldr	r0, [r7, #12]
 801d3a6:	46bd      	mov	sp, r7
 801d3a8:	b006      	add	sp, #24
 801d3aa:	bc80      	pop	{r7}
 801d3ac:	bc08      	pop	{r3}
 801d3ae:	b002      	add	sp, #8
 801d3b0:	4718      	bx	r3
	...

0801d3b4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d3b4:	b5b0      	push	{r4, r5, r7, lr}
 801d3b6:	b088      	sub	sp, #32
 801d3b8:	af02      	add	r7, sp, #8
 801d3ba:	003b      	movs	r3, r7
 801d3bc:	6018      	str	r0, [r3, #0]
 801d3be:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d3c0:	2108      	movs	r1, #8
 801d3c2:	187b      	adds	r3, r7, r1
 801d3c4:	2200      	movs	r2, #0
 801d3c6:	601a      	str	r2, [r3, #0]
 801d3c8:	187b      	adds	r3, r7, r1
 801d3ca:	2200      	movs	r2, #0
 801d3cc:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d3ce:	4b14      	ldr	r3, [pc, #80]	; (801d420 <SysTimeSet+0x6c>)
 801d3d0:	691b      	ldr	r3, [r3, #16]
 801d3d2:	000c      	movs	r4, r1
 801d3d4:	187a      	adds	r2, r7, r1
 801d3d6:	3204      	adds	r2, #4
 801d3d8:	0010      	movs	r0, r2
 801d3da:	4798      	blx	r3
 801d3dc:	0002      	movs	r2, r0
 801d3de:	0021      	movs	r1, r4
 801d3e0:	187b      	adds	r3, r7, r1
 801d3e2:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d3e4:	2510      	movs	r5, #16
 801d3e6:	197c      	adds	r4, r7, r5
 801d3e8:	187b      	adds	r3, r7, r1
 801d3ea:	003a      	movs	r2, r7
 801d3ec:	4669      	mov	r1, sp
 801d3ee:	6858      	ldr	r0, [r3, #4]
 801d3f0:	6008      	str	r0, [r1, #0]
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	6811      	ldr	r1, [r2, #0]
 801d3f6:	6852      	ldr	r2, [r2, #4]
 801d3f8:	0020      	movs	r0, r4
 801d3fa:	f7ff ff87 	bl	801d30c <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d3fe:	4b08      	ldr	r3, [pc, #32]	; (801d420 <SysTimeSet+0x6c>)
 801d400:	681a      	ldr	r2, [r3, #0]
 801d402:	197b      	adds	r3, r7, r5
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	0018      	movs	r0, r3
 801d408:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d40a:	4b05      	ldr	r3, [pc, #20]	; (801d420 <SysTimeSet+0x6c>)
 801d40c:	689b      	ldr	r3, [r3, #8]
 801d40e:	197a      	adds	r2, r7, r5
 801d410:	2104      	movs	r1, #4
 801d412:	5e52      	ldrsh	r2, [r2, r1]
 801d414:	0010      	movs	r0, r2
 801d416:	4798      	blx	r3
}
 801d418:	46c0      	nop			; (mov r8, r8)
 801d41a:	46bd      	mov	sp, r7
 801d41c:	b006      	add	sp, #24
 801d41e:	bdb0      	pop	{r4, r5, r7, pc}
 801d420:	08020a2c 	.word	0x08020a2c

0801d424 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d424:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d426:	b08b      	sub	sp, #44	; 0x2c
 801d428:	af02      	add	r7, sp, #8
 801d42a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d42c:	2518      	movs	r5, #24
 801d42e:	197b      	adds	r3, r7, r5
 801d430:	2200      	movs	r2, #0
 801d432:	601a      	str	r2, [r3, #0]
 801d434:	197b      	adds	r3, r7, r5
 801d436:	2200      	movs	r2, #0
 801d438:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d43a:	2410      	movs	r4, #16
 801d43c:	193b      	adds	r3, r7, r4
 801d43e:	2200      	movs	r2, #0
 801d440:	601a      	str	r2, [r3, #0]
 801d442:	193b      	adds	r3, r7, r4
 801d444:	2200      	movs	r2, #0
 801d446:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d448:	4b16      	ldr	r3, [pc, #88]	; (801d4a4 <SysTimeGet+0x80>)
 801d44a:	691b      	ldr	r3, [r3, #16]
 801d44c:	197a      	adds	r2, r7, r5
 801d44e:	3204      	adds	r2, #4
 801d450:	0010      	movs	r0, r2
 801d452:	4798      	blx	r3
 801d454:	0002      	movs	r2, r0
 801d456:	197b      	adds	r3, r7, r5
 801d458:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d45a:	4b12      	ldr	r3, [pc, #72]	; (801d4a4 <SysTimeGet+0x80>)
 801d45c:	68db      	ldr	r3, [r3, #12]
 801d45e:	4798      	blx	r3
 801d460:	0003      	movs	r3, r0
 801d462:	b21a      	sxth	r2, r3
 801d464:	2608      	movs	r6, #8
 801d466:	19bb      	adds	r3, r7, r6
 801d468:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d46a:	4b0e      	ldr	r3, [pc, #56]	; (801d4a4 <SysTimeGet+0x80>)
 801d46c:	685b      	ldr	r3, [r3, #4]
 801d46e:	4798      	blx	r3
 801d470:	0002      	movs	r2, r0
 801d472:	0031      	movs	r1, r6
 801d474:	187b      	adds	r3, r7, r1
 801d476:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d478:	0026      	movs	r6, r4
 801d47a:	193c      	adds	r4, r7, r4
 801d47c:	197b      	adds	r3, r7, r5
 801d47e:	187a      	adds	r2, r7, r1
 801d480:	4669      	mov	r1, sp
 801d482:	6858      	ldr	r0, [r3, #4]
 801d484:	6008      	str	r0, [r1, #0]
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	6811      	ldr	r1, [r2, #0]
 801d48a:	6852      	ldr	r2, [r2, #4]
 801d48c:	0020      	movs	r0, r4
 801d48e:	f7ff fee7 	bl	801d260 <SysTimeAdd>

  return sysTime;
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	19ba      	adds	r2, r7, r6
 801d496:	ca03      	ldmia	r2!, {r0, r1}
 801d498:	c303      	stmia	r3!, {r0, r1}
}
 801d49a:	6878      	ldr	r0, [r7, #4]
 801d49c:	46bd      	mov	sp, r7
 801d49e:	b009      	add	sp, #36	; 0x24
 801d4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4a2:	46c0      	nop			; (mov r8, r8)
 801d4a4:	08020a2c 	.word	0x08020a2c

0801d4a8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d4a8:	b590      	push	{r4, r7, lr}
 801d4aa:	b085      	sub	sp, #20
 801d4ac:	af00      	add	r7, sp, #0
 801d4ae:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d4b0:	2108      	movs	r1, #8
 801d4b2:	187b      	adds	r3, r7, r1
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	601a      	str	r2, [r3, #0]
 801d4b8:	187b      	adds	r3, r7, r1
 801d4ba:	2200      	movs	r2, #0
 801d4bc:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d4be:	4b09      	ldr	r3, [pc, #36]	; (801d4e4 <SysTimeGetMcuTime+0x3c>)
 801d4c0:	691b      	ldr	r3, [r3, #16]
 801d4c2:	000c      	movs	r4, r1
 801d4c4:	187a      	adds	r2, r7, r1
 801d4c6:	3204      	adds	r2, #4
 801d4c8:	0010      	movs	r0, r2
 801d4ca:	4798      	blx	r3
 801d4cc:	0002      	movs	r2, r0
 801d4ce:	193b      	adds	r3, r7, r4
 801d4d0:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	193a      	adds	r2, r7, r4
 801d4d6:	ca03      	ldmia	r2!, {r0, r1}
 801d4d8:	c303      	stmia	r3!, {r0, r1}
}
 801d4da:	6878      	ldr	r0, [r7, #4]
 801d4dc:	46bd      	mov	sp, r7
 801d4de:	b005      	add	sp, #20
 801d4e0:	bd90      	pop	{r4, r7, pc}
 801d4e2:	46c0      	nop			; (mov r8, r8)
 801d4e4:	08020a2c 	.word	0x08020a2c

0801d4e8 <SysTimeLocalTime>:
        ( ( uint32_t )localtime->tm_hour * TM_SECONDS_IN_1HOUR ) );
  return nbsecs - CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS;
}

void SysTimeLocalTime( const uint32_t timestamp, struct tm *localtime )
{
 801d4e8:	b590      	push	{r4, r7, lr}
 801d4ea:	b08d      	sub	sp, #52	; 0x34
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
 801d4f0:	6039      	str	r1, [r7, #0]
  uint32_t correctionMonth[4] =
 801d4f2:	231c      	movs	r3, #28
 801d4f4:	18fb      	adds	r3, r7, r3
 801d4f6:	4a56      	ldr	r2, [pc, #344]	; (801d650 <SysTimeLocalTime+0x168>)
 801d4f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 801d4fa:	c313      	stmia	r3!, {r0, r1, r4}
 801d4fc:	6812      	ldr	r2, [r2, #0]
 801d4fe:	601a      	str	r2, [r3, #0]
    DAYS_IN_MONTH_CORRECTION_LEAP,
    DAYS_IN_MONTH_CORRECTION_NORM,
    DAYS_IN_MONTH_CORRECTION_NORM,
    DAYS_IN_MONTH_CORRECTION_NORM
  };
  uint32_t weekDays = 1; // Monday 1st January 1968
 801d500:	2301      	movs	r3, #1
 801d502:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t minutes;
  uint32_t days;
  uint32_t divOut;
  uint32_t divReminder;

  CalendarDiv86400( timestamp + CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS, &days, &seconds );
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	4a53      	ldr	r2, [pc, #332]	; (801d654 <SysTimeLocalTime+0x16c>)
 801d508:	4694      	mov	ip, r2
 801d50a:	4463      	add	r3, ip
 801d50c:	2218      	movs	r2, #24
 801d50e:	18ba      	adds	r2, r7, r2
 801d510:	2110      	movs	r1, #16
 801d512:	1879      	adds	r1, r7, r1
 801d514:	0018      	movs	r0, r3
 801d516:	f000 f8f9 	bl	801d70c <CalendarDiv86400>

  // Calculates seconds
  CalendarDiv60( seconds, &minutes, &divReminder );
 801d51a:	69bb      	ldr	r3, [r7, #24]
 801d51c:	2408      	movs	r4, #8
 801d51e:	193a      	adds	r2, r7, r4
 801d520:	2114      	movs	r1, #20
 801d522:	1879      	adds	r1, r7, r1
 801d524:	0018      	movs	r0, r3
 801d526:	f000 f967 	bl	801d7f8 <CalendarDiv60>
  localtime->tm_sec = ( uint8_t )divReminder;
 801d52a:	68bb      	ldr	r3, [r7, #8]
 801d52c:	b2db      	uxtb	r3, r3
 801d52e:	001a      	movs	r2, r3
 801d530:	683b      	ldr	r3, [r7, #0]
 801d532:	601a      	str	r2, [r3, #0]

  // Calculates minutes and hours
  CalendarDiv60( minutes, &divOut, &divReminder);
 801d534:	697b      	ldr	r3, [r7, #20]
 801d536:	193a      	adds	r2, r7, r4
 801d538:	210c      	movs	r1, #12
 801d53a:	1879      	adds	r1, r7, r1
 801d53c:	0018      	movs	r0, r3
 801d53e:	f000 f95b 	bl	801d7f8 <CalendarDiv60>
  localtime->tm_min = ( uint8_t )divReminder;
 801d542:	68bb      	ldr	r3, [r7, #8]
 801d544:	b2db      	uxtb	r3, r3
 801d546:	001a      	movs	r2, r3
 801d548:	683b      	ldr	r3, [r7, #0]
 801d54a:	605a      	str	r2, [r3, #4]
  localtime->tm_hour = ( uint8_t )divOut;
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	b2db      	uxtb	r3, r3
 801d550:	001a      	movs	r2, r3
 801d552:	683b      	ldr	r3, [r7, #0]
 801d554:	609a      	str	r2, [r3, #8]

  // Calculates year
  localtime->tm_year = DIV_365_25( days );
 801d556:	693b      	ldr	r3, [r7, #16]
 801d558:	4a3f      	ldr	r2, [pc, #252]	; (801d658 <SysTimeLocalTime+0x170>)
 801d55a:	4353      	muls	r3, r2
 801d55c:	4a3f      	ldr	r2, [pc, #252]	; (801d65c <SysTimeLocalTime+0x174>)
 801d55e:	4694      	mov	ip, r2
 801d560:	4463      	add	r3, ip
 801d562:	0e5b      	lsrs	r3, r3, #25
 801d564:	001a      	movs	r2, r3
 801d566:	683b      	ldr	r3, [r7, #0]
 801d568:	615a      	str	r2, [r3, #20]
  days-= DIVC_BY_4( ( TM_DAYS_IN_YEAR * 3 + TM_DAYS_IN_LEAP_YEAR ) * localtime->tm_year );
 801d56a:	693a      	ldr	r2, [r7, #16]
 801d56c:	683b      	ldr	r3, [r7, #0]
 801d56e:	695b      	ldr	r3, [r3, #20]
 801d570:	0019      	movs	r1, r3
 801d572:	4b3b      	ldr	r3, [pc, #236]	; (801d660 <SysTimeLocalTime+0x178>)
 801d574:	434b      	muls	r3, r1
 801d576:	3303      	adds	r3, #3
 801d578:	089b      	lsrs	r3, r3, #2
 801d57a:	1ad3      	subs	r3, r2, r3
 801d57c:	613b      	str	r3, [r7, #16]

  localtime->tm_yday = days;
 801d57e:	693b      	ldr	r3, [r7, #16]
 801d580:	001a      	movs	r2, r3
 801d582:	683b      	ldr	r3, [r7, #0]
 801d584:	61da      	str	r2, [r3, #28]

  // Calculates month
  localtime->tm_mon = CalendarGetMonth( days, localtime->tm_year );
 801d586:	693a      	ldr	r2, [r7, #16]
 801d588:	683b      	ldr	r3, [r7, #0]
 801d58a:	695b      	ldr	r3, [r3, #20]
 801d58c:	0019      	movs	r1, r3
 801d58e:	0010      	movs	r0, r2
 801d590:	f000 f86a 	bl	801d668 <CalendarGetMonth>
 801d594:	0003      	movs	r3, r0
 801d596:	001a      	movs	r2, r3
 801d598:	683b      	ldr	r3, [r7, #0]
 801d59a:	611a      	str	r2, [r3, #16]

  // calculates weekdays
  weekDays += DIVC_BY_4( ( localtime->tm_year * 5 ) );
 801d59c:	683b      	ldr	r3, [r7, #0]
 801d59e:	695a      	ldr	r2, [r3, #20]
 801d5a0:	0013      	movs	r3, r2
 801d5a2:	009b      	lsls	r3, r3, #2
 801d5a4:	189b      	adds	r3, r3, r2
 801d5a6:	3303      	adds	r3, #3
 801d5a8:	109b      	asrs	r3, r3, #2
 801d5aa:	001a      	movs	r2, r3
 801d5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5ae:	189b      	adds	r3, r3, r2
 801d5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  weekDays += days;
 801d5b2:	693b      	ldr	r3, [r7, #16]
 801d5b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5b6:	18d3      	adds	r3, r2, r3
 801d5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  localtime->tm_wday = MODULO_7( weekDays );
 801d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5bc:	1c5a      	adds	r2, r3, #1
 801d5be:	0013      	movs	r3, r2
 801d5c0:	00db      	lsls	r3, r3, #3
 801d5c2:	189b      	adds	r3, r3, r2
 801d5c4:	00db      	lsls	r3, r3, #3
 801d5c6:	189b      	adds	r3, r3, r2
 801d5c8:	0259      	lsls	r1, r3, #9
 801d5ca:	185b      	adds	r3, r3, r1
 801d5cc:	00db      	lsls	r3, r3, #3
 801d5ce:	189b      	adds	r3, r3, r2
 801d5d0:	0d5a      	lsrs	r2, r3, #21
 801d5d2:	0013      	movs	r3, r2
 801d5d4:	00db      	lsls	r3, r3, #3
 801d5d6:	1a9b      	subs	r3, r3, r2
 801d5d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5da:	1ad3      	subs	r3, r2, r3
 801d5dc:	001a      	movs	r2, r3
 801d5de:	683b      	ldr	r3, [r7, #0]
 801d5e0:	619a      	str	r2, [r3, #24]

  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
        ( ( ( correctionMonth[localtime->tm_year % 4] >> ( ( localtime->tm_mon ) * 2 ) ) & 0x03 ) ) );
 801d5e2:	683b      	ldr	r3, [r7, #0]
 801d5e4:	695b      	ldr	r3, [r3, #20]
 801d5e6:	4a1f      	ldr	r2, [pc, #124]	; (801d664 <SysTimeLocalTime+0x17c>)
 801d5e8:	4013      	ands	r3, r2
 801d5ea:	d504      	bpl.n	801d5f6 <SysTimeLocalTime+0x10e>
 801d5ec:	3b01      	subs	r3, #1
 801d5ee:	2204      	movs	r2, #4
 801d5f0:	4252      	negs	r2, r2
 801d5f2:	4313      	orrs	r3, r2
 801d5f4:	3301      	adds	r3, #1
 801d5f6:	001a      	movs	r2, r3
 801d5f8:	231c      	movs	r3, #28
 801d5fa:	18fb      	adds	r3, r7, r3
 801d5fc:	0092      	lsls	r2, r2, #2
 801d5fe:	58d2      	ldr	r2, [r2, r3]
 801d600:	683b      	ldr	r3, [r7, #0]
 801d602:	691b      	ldr	r3, [r3, #16]
 801d604:	005b      	lsls	r3, r3, #1
 801d606:	40da      	lsrs	r2, r3
 801d608:	0013      	movs	r3, r2
 801d60a:	2203      	movs	r2, #3
 801d60c:	4013      	ands	r3, r2
 801d60e:	0019      	movs	r1, r3
  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
 801d610:	683b      	ldr	r3, [r7, #0]
 801d612:	691a      	ldr	r2, [r3, #16]
 801d614:	0013      	movs	r3, r2
 801d616:	011b      	lsls	r3, r3, #4
 801d618:	1a9b      	subs	r3, r3, r2
 801d61a:	009b      	lsls	r3, r3, #2
 801d61c:	189b      	adds	r3, r3, r2
 801d61e:	3301      	adds	r3, #1
 801d620:	105b      	asrs	r3, r3, #1
 801d622:	1aca      	subs	r2, r1, r3
 801d624:	693b      	ldr	r3, [r7, #16]
 801d626:	18d3      	adds	r3, r2, r3
 801d628:	613b      	str	r3, [r7, #16]

  // Convert 0 to 1 indexed.
  localtime->tm_mday = days + 1;
 801d62a:	693b      	ldr	r3, [r7, #16]
 801d62c:	3301      	adds	r3, #1
 801d62e:	001a      	movs	r2, r3
 801d630:	683b      	ldr	r3, [r7, #0]
 801d632:	60da      	str	r2, [r3, #12]

  localtime->tm_year += CALC_REF_YEAR;
 801d634:	683b      	ldr	r3, [r7, #0]
 801d636:	695b      	ldr	r3, [r3, #20]
 801d638:	3344      	adds	r3, #68	; 0x44
 801d63a:	001a      	movs	r2, r3
 801d63c:	683b      	ldr	r3, [r7, #0]
 801d63e:	615a      	str	r2, [r3, #20]

  localtime->tm_isdst = -1;
 801d640:	683b      	ldr	r3, [r7, #0]
 801d642:	2201      	movs	r2, #1
 801d644:	4252      	negs	r2, r2
 801d646:	621a      	str	r2, [r3, #32]
}
 801d648:	46c0      	nop			; (mov r8, r8)
 801d64a:	46bd      	mov	sp, r7
 801d64c:	b00d      	add	sp, #52	; 0x34
 801d64e:	bd90      	pop	{r4, r7, pc}
 801d650:	080218dc 	.word	0x080218dc
 801d654:	03c3b880 	.word	0x03c3b880
 801d658:	000166db 	.word	0x000166db
 801d65c:	000058de 	.word	0x000058de
 801d660:	000005b5 	.word	0x000005b5
 801d664:	80000003 	.word	0x80000003

0801d668 <CalendarGetMonth>:
  *  @addtogroup SYSTIME_private_function
  *
  *  @{
  */
static uint32_t CalendarGetMonth( uint32_t days, uint32_t year )
{
 801d668:	b580      	push	{r7, lr}
 801d66a:	b084      	sub	sp, #16
 801d66c:	af00      	add	r7, sp, #0
 801d66e:	6078      	str	r0, [r7, #4]
 801d670:	6039      	str	r1, [r7, #0]
  uint32_t month;
  if( ( year % 4 ) == 0 )
 801d672:	683b      	ldr	r3, [r7, #0]
 801d674:	2203      	movs	r2, #3
 801d676:	4013      	ands	r3, r2
 801d678:	d121      	bne.n	801d6be <CalendarGetMonth+0x56>
  {   /*leap year*/
    if( days < END_OF_FEBRUARY_LEAP )
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	2b3b      	cmp	r3, #59	; 0x3b
 801d67e:	d807      	bhi.n	801d690 <CalendarGetMonth+0x28>
    {   // January or February
      // month =  days * 2 / ( 30 + 31 );
      month = CalendarDiv61( days * 2 );
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	005b      	lsls	r3, r3, #1
 801d684:	0018      	movs	r0, r3
 801d686:	f000 f885 	bl	801d794 <CalendarDiv61>
 801d68a:	0003      	movs	r3, r0
 801d68c:	60fb      	str	r3, [r7, #12]
 801d68e:	e037      	b.n	801d700 <CalendarGetMonth+0x98>
    }
    else if( days < END_OF_JULY_LEAP )
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	2bd4      	cmp	r3, #212	; 0xd4
 801d694:	d809      	bhi.n	801d6aa <CalendarGetMonth+0x42>
    {
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_LEAP ) * 2 ) + 2;
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	3b3c      	subs	r3, #60	; 0x3c
 801d69a:	005b      	lsls	r3, r3, #1
 801d69c:	0018      	movs	r0, r3
 801d69e:	f000 f879 	bl	801d794 <CalendarDiv61>
 801d6a2:	0003      	movs	r3, r0
 801d6a4:	3302      	adds	r3, #2
 801d6a6:	60fb      	str	r3, [r7, #12]
 801d6a8:	e02a      	b.n	801d700 <CalendarGetMonth+0x98>
    }
    else
    {
      month = CalendarDiv61( ( days - END_OF_JULY_LEAP ) * 2 ) + 7;
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	3bd5      	subs	r3, #213	; 0xd5
 801d6ae:	005b      	lsls	r3, r3, #1
 801d6b0:	0018      	movs	r0, r3
 801d6b2:	f000 f86f 	bl	801d794 <CalendarDiv61>
 801d6b6:	0003      	movs	r3, r0
 801d6b8:	3307      	adds	r3, #7
 801d6ba:	60fb      	str	r3, [r7, #12]
 801d6bc:	e020      	b.n	801d700 <CalendarGetMonth+0x98>
    }
  }
  else
  {
    if( days < END_OF_FEBRUARY_NORM )
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	2b3a      	cmp	r3, #58	; 0x3a
 801d6c2:	d807      	bhi.n	801d6d4 <CalendarGetMonth+0x6c>
    {   // January or February
      month = CalendarDiv61( days * 2 );
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	005b      	lsls	r3, r3, #1
 801d6c8:	0018      	movs	r0, r3
 801d6ca:	f000 f863 	bl	801d794 <CalendarDiv61>
 801d6ce:	0003      	movs	r3, r0
 801d6d0:	60fb      	str	r3, [r7, #12]
 801d6d2:	e015      	b.n	801d700 <CalendarGetMonth+0x98>
    }
    else if( days < END_OF_JULY_NORM )
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	2bd3      	cmp	r3, #211	; 0xd3
 801d6d8:	d809      	bhi.n	801d6ee <CalendarGetMonth+0x86>
    {
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_NORM ) * 2 ) + 2;
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	3b3b      	subs	r3, #59	; 0x3b
 801d6de:	005b      	lsls	r3, r3, #1
 801d6e0:	0018      	movs	r0, r3
 801d6e2:	f000 f857 	bl	801d794 <CalendarDiv61>
 801d6e6:	0003      	movs	r3, r0
 801d6e8:	3302      	adds	r3, #2
 801d6ea:	60fb      	str	r3, [r7, #12]
 801d6ec:	e008      	b.n	801d700 <CalendarGetMonth+0x98>
    }
    else
    {
      month = CalendarDiv61( ( days - END_OF_JULY_NORM ) * 2 ) + 7;
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	3bd4      	subs	r3, #212	; 0xd4
 801d6f2:	005b      	lsls	r3, r3, #1
 801d6f4:	0018      	movs	r0, r3
 801d6f6:	f000 f84d 	bl	801d794 <CalendarDiv61>
 801d6fa:	0003      	movs	r3, r0
 801d6fc:	3307      	adds	r3, #7
 801d6fe:	60fb      	str	r3, [r7, #12]
    }
  }
  return month;
 801d700:	68fb      	ldr	r3, [r7, #12]
}
 801d702:	0018      	movs	r0, r3
 801d704:	46bd      	mov	sp, r7
 801d706:	b004      	add	sp, #16
 801d708:	bd80      	pop	{r7, pc}
	...

0801d70c <CalendarDiv86400>:

static void CalendarDiv86400( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 801d70c:	b580      	push	{r7, lr}
 801d70e:	b086      	sub	sp, #24
 801d710:	af00      	add	r7, sp, #0
 801d712:	60f8      	str	r0, [r7, #12]
 801d714:	60b9      	str	r1, [r7, #8]
 801d716:	607a      	str	r2, [r7, #4]
#if 0
  *remainder = in % SECONDS_IN_1DAY;
  *out     = in / SECONDS_IN_1DAY;
#else
  uint32_t outTemp = 0;
 801d718:	2300      	movs	r3, #0
 801d71a:	617b      	str	r3, [r7, #20]
  uint32_t divResult = DIV_APPROX_86400( in );
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	0c9a      	lsrs	r2, r3, #18
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	0c5b      	lsrs	r3, r3, #17
 801d724:	18d3      	adds	r3, r2, r3
 801d726:	613b      	str	r3, [r7, #16]

  while( divResult >=1 )
 801d728:	e016      	b.n	801d758 <CalendarDiv86400+0x4c>
  {
    outTemp += divResult;
 801d72a:	697a      	ldr	r2, [r7, #20]
 801d72c:	693b      	ldr	r3, [r7, #16]
 801d72e:	18d3      	adds	r3, r2, r3
 801d730:	617b      	str	r3, [r7, #20]
    in -= divResult * 86400;
 801d732:	693a      	ldr	r2, [r7, #16]
 801d734:	0013      	movs	r3, r2
 801d736:	005b      	lsls	r3, r3, #1
 801d738:	189b      	adds	r3, r3, r2
 801d73a:	011a      	lsls	r2, r3, #4
 801d73c:	1ad2      	subs	r2, r2, r3
 801d73e:	0113      	lsls	r3, r2, #4
 801d740:	1a9b      	subs	r3, r3, r2
 801d742:	01db      	lsls	r3, r3, #7
 801d744:	001a      	movs	r2, r3
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	1a9b      	subs	r3, r3, r2
 801d74a:	60fb      	str	r3, [r7, #12]
    divResult= DIV_APPROX_86400( in );
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	0c9a      	lsrs	r2, r3, #18
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	0c5b      	lsrs	r3, r3, #17
 801d754:	18d3      	adds	r3, r2, r3
 801d756:	613b      	str	r3, [r7, #16]
  while( divResult >=1 )
 801d758:	693b      	ldr	r3, [r7, #16]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d1e5      	bne.n	801d72a <CalendarDiv86400+0x1e>
  }
  if( in >= 86400 )
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	4a0a      	ldr	r2, [pc, #40]	; (801d78c <CalendarDiv86400+0x80>)
 801d762:	4293      	cmp	r3, r2
 801d764:	d907      	bls.n	801d776 <CalendarDiv86400+0x6a>
  {
    outTemp += 1;
 801d766:	697b      	ldr	r3, [r7, #20]
 801d768:	3301      	adds	r3, #1
 801d76a:	617b      	str	r3, [r7, #20]
    in -= 86400;
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	4a08      	ldr	r2, [pc, #32]	; (801d790 <CalendarDiv86400+0x84>)
 801d770:	4694      	mov	ip, r2
 801d772:	4463      	add	r3, ip
 801d774:	60fb      	str	r3, [r7, #12]
  }

  *remainder = in;
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	68fa      	ldr	r2, [r7, #12]
 801d77a:	601a      	str	r2, [r3, #0]
  *out = outTemp;
 801d77c:	68bb      	ldr	r3, [r7, #8]
 801d77e:	697a      	ldr	r2, [r7, #20]
 801d780:	601a      	str	r2, [r3, #0]
#endif
}
 801d782:	46c0      	nop			; (mov r8, r8)
 801d784:	46bd      	mov	sp, r7
 801d786:	b006      	add	sp, #24
 801d788:	bd80      	pop	{r7, pc}
 801d78a:	46c0      	nop			; (mov r8, r8)
 801d78c:	0001517f 	.word	0x0001517f
 801d790:	fffeae80 	.word	0xfffeae80

0801d794 <CalendarDiv61>:

static uint32_t CalendarDiv61( uint32_t in )
{
 801d794:	b580      	push	{r7, lr}
 801d796:	b084      	sub	sp, #16
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
#if 0
  return( in / 61 );
#else
  uint32_t outTemp = 0;
 801d79c:	2300      	movs	r3, #0
 801d79e:	60fb      	str	r3, [r7, #12]
  uint32_t divResult = DIV_APPROX_61( in );
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	4a14      	ldr	r2, [pc, #80]	; (801d7f4 <CalendarDiv61+0x60>)
 801d7a4:	4353      	muls	r3, r2
 801d7a6:	0d9b      	lsrs	r3, r3, #22
 801d7a8:	60bb      	str	r3, [r7, #8]
  while( divResult >=1 )
 801d7aa:	e011      	b.n	801d7d0 <CalendarDiv61+0x3c>
  {
    outTemp += divResult;
 801d7ac:	68fa      	ldr	r2, [r7, #12]
 801d7ae:	68bb      	ldr	r3, [r7, #8]
 801d7b0:	18d3      	adds	r3, r2, r3
 801d7b2:	60fb      	str	r3, [r7, #12]
    in -= divResult * 61;
 801d7b4:	68ba      	ldr	r2, [r7, #8]
 801d7b6:	0013      	movs	r3, r2
 801d7b8:	011b      	lsls	r3, r3, #4
 801d7ba:	1a9b      	subs	r3, r3, r2
 801d7bc:	009b      	lsls	r3, r3, #2
 801d7be:	189b      	adds	r3, r3, r2
 801d7c0:	687a      	ldr	r2, [r7, #4]
 801d7c2:	1ad3      	subs	r3, r2, r3
 801d7c4:	607b      	str	r3, [r7, #4]
    divResult = DIV_APPROX_61( in );
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	4a0a      	ldr	r2, [pc, #40]	; (801d7f4 <CalendarDiv61+0x60>)
 801d7ca:	4353      	muls	r3, r2
 801d7cc:	0d9b      	lsrs	r3, r3, #22
 801d7ce:	60bb      	str	r3, [r7, #8]
  while( divResult >=1 )
 801d7d0:	68bb      	ldr	r3, [r7, #8]
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d1ea      	bne.n	801d7ac <CalendarDiv61+0x18>
  }
  if( in >= 61 )
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	2b3c      	cmp	r3, #60	; 0x3c
 801d7da:	d905      	bls.n	801d7e8 <CalendarDiv61+0x54>
  {
    outTemp += 1;
 801d7dc:	68fb      	ldr	r3, [r7, #12]
 801d7de:	3301      	adds	r3, #1
 801d7e0:	60fb      	str	r3, [r7, #12]
    in -= 61;
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	3b3d      	subs	r3, #61	; 0x3d
 801d7e6:	607b      	str	r3, [r7, #4]
  }
  return outTemp;
 801d7e8:	68fb      	ldr	r3, [r7, #12]
#endif
}
 801d7ea:	0018      	movs	r0, r3
 801d7ec:	46bd      	mov	sp, r7
 801d7ee:	b004      	add	sp, #16
 801d7f0:	bd80      	pop	{r7, pc}
 801d7f2:	46c0      	nop			; (mov r8, r8)
 801d7f4:	00010c97 	.word	0x00010c97

0801d7f8 <CalendarDiv60>:

static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 801d7f8:	b580      	push	{r7, lr}
 801d7fa:	b086      	sub	sp, #24
 801d7fc:	af00      	add	r7, sp, #0
 801d7fe:	60f8      	str	r0, [r7, #12]
 801d800:	60b9      	str	r1, [r7, #8]
 801d802:	607a      	str	r2, [r7, #4]
#if 0
  *remainder = in % 60;
  *out     = in / 60;
#else
  uint32_t outTemp = 0;
 801d804:	2300      	movs	r3, #0
 801d806:	617b      	str	r3, [r7, #20]
  uint32_t divResult = DIV_APPROX_60( in );
 801d808:	68fa      	ldr	r2, [r7, #12]
 801d80a:	0013      	movs	r3, r2
 801d80c:	011b      	lsls	r3, r3, #4
 801d80e:	189b      	adds	r3, r3, r2
 801d810:	021a      	lsls	r2, r3, #8
 801d812:	189b      	adds	r3, r3, r2
 801d814:	009b      	lsls	r3, r3, #2
 801d816:	0d1b      	lsrs	r3, r3, #20
 801d818:	613b      	str	r3, [r7, #16]

  while( divResult >=1 )
 801d81a:	e015      	b.n	801d848 <CalendarDiv60+0x50>
  {
    outTemp += divResult;
 801d81c:	697a      	ldr	r2, [r7, #20]
 801d81e:	693b      	ldr	r3, [r7, #16]
 801d820:	18d3      	adds	r3, r2, r3
 801d822:	617b      	str	r3, [r7, #20]
    in -= divResult * 60;
 801d824:	693a      	ldr	r2, [r7, #16]
 801d826:	0013      	movs	r3, r2
 801d828:	011b      	lsls	r3, r3, #4
 801d82a:	1a9b      	subs	r3, r3, r2
 801d82c:	009b      	lsls	r3, r3, #2
 801d82e:	001a      	movs	r2, r3
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	1a9b      	subs	r3, r3, r2
 801d834:	60fb      	str	r3, [r7, #12]
    divResult = DIV_APPROX_60( in );
 801d836:	68fa      	ldr	r2, [r7, #12]
 801d838:	0013      	movs	r3, r2
 801d83a:	011b      	lsls	r3, r3, #4
 801d83c:	189b      	adds	r3, r3, r2
 801d83e:	021a      	lsls	r2, r3, #8
 801d840:	189b      	adds	r3, r3, r2
 801d842:	009b      	lsls	r3, r3, #2
 801d844:	0d1b      	lsrs	r3, r3, #20
 801d846:	613b      	str	r3, [r7, #16]
  while( divResult >=1 )
 801d848:	693b      	ldr	r3, [r7, #16]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d1e6      	bne.n	801d81c <CalendarDiv60+0x24>
  }
  if( in >= 60 )
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	2b3b      	cmp	r3, #59	; 0x3b
 801d852:	d905      	bls.n	801d860 <CalendarDiv60+0x68>
  {
    outTemp += 1;
 801d854:	697b      	ldr	r3, [r7, #20]
 801d856:	3301      	adds	r3, #1
 801d858:	617b      	str	r3, [r7, #20]
    in -= 60;
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	3b3c      	subs	r3, #60	; 0x3c
 801d85e:	60fb      	str	r3, [r7, #12]
  }
  *remainder = in;
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	68fa      	ldr	r2, [r7, #12]
 801d864:	601a      	str	r2, [r3, #0]
  *out = outTemp;
 801d866:	68bb      	ldr	r3, [r7, #8]
 801d868:	697a      	ldr	r2, [r7, #20]
 801d86a:	601a      	str	r2, [r3, #0]
#endif
}
 801d86c:	46c0      	nop			; (mov r8, r8)
 801d86e:	46bd      	mov	sp, r7
 801d870:	b006      	add	sp, #24
 801d872:	bd80      	pop	{r7, pc}

0801d874 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801d874:	b580      	push	{r7, lr}
 801d876:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801d878:	4b04      	ldr	r3, [pc, #16]	; (801d88c <UTIL_TIMER_Init+0x18>)
 801d87a:	2200      	movs	r2, #0
 801d87c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801d87e:	4b04      	ldr	r3, [pc, #16]	; (801d890 <UTIL_TIMER_Init+0x1c>)
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	4798      	blx	r3
 801d884:	0003      	movs	r3, r0
}
 801d886:	0018      	movs	r0, r3
 801d888:	46bd      	mov	sp, r7
 801d88a:	bd80      	pop	{r7, pc}
 801d88c:	2000185c 	.word	0x2000185c
 801d890:	08020a00 	.word	0x08020a00

0801d894 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801d894:	b580      	push	{r7, lr}
 801d896:	b084      	sub	sp, #16
 801d898:	af00      	add	r7, sp, #0
 801d89a:	60f8      	str	r0, [r7, #12]
 801d89c:	60b9      	str	r1, [r7, #8]
 801d89e:	603b      	str	r3, [r7, #0]
 801d8a0:	1dfb      	adds	r3, r7, #7
 801d8a2:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d025      	beq.n	801d8f6 <UTIL_TIMER_Create+0x62>
 801d8aa:	683b      	ldr	r3, [r7, #0]
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d022      	beq.n	801d8f6 <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801d8b6:	4b12      	ldr	r3, [pc, #72]	; (801d900 <UTIL_TIMER_Create+0x6c>)
 801d8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8ba:	68ba      	ldr	r2, [r7, #8]
 801d8bc:	0010      	movs	r0, r2
 801d8be:	4798      	blx	r3
 801d8c0:	0002      	movs	r2, r0
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	2200      	movs	r2, #0
 801d8ca:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	2200      	movs	r2, #0
 801d8d0:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	2200      	movs	r2, #0
 801d8d6:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801d8d8:	68fb      	ldr	r3, [r7, #12]
 801d8da:	683a      	ldr	r2, [r7, #0]
 801d8dc:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	69ba      	ldr	r2, [r7, #24]
 801d8e2:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	1dfa      	adds	r2, r7, #7
 801d8e8:	7812      	ldrb	r2, [r2, #0]
 801d8ea:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	2200      	movs	r2, #0
 801d8f0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801d8f2:	2300      	movs	r3, #0
 801d8f4:	e000      	b.n	801d8f8 <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801d8f6:	2301      	movs	r3, #1
  }
}
 801d8f8:	0018      	movs	r0, r3
 801d8fa:	46bd      	mov	sp, r7
 801d8fc:	b004      	add	sp, #16
 801d8fe:	bd80      	pop	{r7, pc}
 801d900:	08020a00 	.word	0x08020a00

0801d904 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801d904:	b580      	push	{r7, lr}
 801d906:	b08a      	sub	sp, #40	; 0x28
 801d908:	af00      	add	r7, sp, #0
 801d90a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d90c:	2327      	movs	r3, #39	; 0x27
 801d90e:	18fb      	adds	r3, r7, r3
 801d910:	2200      	movs	r2, #0
 801d912:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	2b00      	cmp	r3, #0
 801d918:	d05d      	beq.n	801d9d6 <UTIL_TIMER_Start+0xd2>
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	0018      	movs	r0, r3
 801d91e:	f000 f9cb 	bl	801dcb8 <TimerExists>
 801d922:	0003      	movs	r3, r0
 801d924:	001a      	movs	r2, r3
 801d926:	2301      	movs	r3, #1
 801d928:	4053      	eors	r3, r2
 801d92a:	b2db      	uxtb	r3, r3
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	d052      	beq.n	801d9d6 <UTIL_TIMER_Start+0xd2>
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	7a5b      	ldrb	r3, [r3, #9]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d14e      	bne.n	801d9d6 <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d938:	f3ef 8310 	mrs	r3, PRIMASK
 801d93c:	613b      	str	r3, [r7, #16]
  return(result);
 801d93e:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d942:	b672      	cpsid	i
}
 801d944:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	685b      	ldr	r3, [r3, #4]
 801d94a:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801d94c:	4b27      	ldr	r3, [pc, #156]	; (801d9ec <UTIL_TIMER_Start+0xe8>)
 801d94e:	6a1b      	ldr	r3, [r3, #32]
 801d950:	4798      	blx	r3
 801d952:	0003      	movs	r3, r0
 801d954:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801d956:	6a3a      	ldr	r2, [r7, #32]
 801d958:	69bb      	ldr	r3, [r7, #24]
 801d95a:	429a      	cmp	r2, r3
 801d95c:	d201      	bcs.n	801d962 <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801d95e:	69bb      	ldr	r3, [r7, #24]
 801d960:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	6a3a      	ldr	r2, [r7, #32]
 801d966:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	2200      	movs	r2, #0
 801d96c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	2201      	movs	r2, #1
 801d972:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	2200      	movs	r2, #0
 801d978:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801d97a:	4b1d      	ldr	r3, [pc, #116]	; (801d9f0 <UTIL_TIMER_Start+0xec>)
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d107      	bne.n	801d992 <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801d982:	4b1a      	ldr	r3, [pc, #104]	; (801d9ec <UTIL_TIMER_Start+0xe8>)
 801d984:	691b      	ldr	r3, [r3, #16]
 801d986:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	0018      	movs	r0, r3
 801d98c:	f000 fa08 	bl	801dda0 <TimerInsertNewHeadTimer>
 801d990:	e01a      	b.n	801d9c8 <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801d992:	4b16      	ldr	r3, [pc, #88]	; (801d9ec <UTIL_TIMER_Start+0xe8>)
 801d994:	699b      	ldr	r3, [r3, #24]
 801d996:	4798      	blx	r3
 801d998:	0003      	movs	r3, r0
 801d99a:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	681a      	ldr	r2, [r3, #0]
 801d9a0:	697b      	ldr	r3, [r7, #20]
 801d9a2:	18d2      	adds	r2, r2, r3
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	681a      	ldr	r2, [r3, #0]
 801d9ac:	4b10      	ldr	r3, [pc, #64]	; (801d9f0 <UTIL_TIMER_Start+0xec>)
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	429a      	cmp	r2, r3
 801d9b4:	d204      	bcs.n	801d9c0 <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801d9b6:	687b      	ldr	r3, [r7, #4]
 801d9b8:	0018      	movs	r0, r3
 801d9ba:	f000 f9f1 	bl	801dda0 <TimerInsertNewHeadTimer>
 801d9be:	e003      	b.n	801d9c8 <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	0018      	movs	r0, r3
 801d9c4:	f000 f9be 	bl	801dd44 <TimerInsertTimer>
 801d9c8:	69fb      	ldr	r3, [r7, #28]
 801d9ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	f383 8810 	msr	PRIMASK, r3
}
 801d9d2:	46c0      	nop			; (mov r8, r8)
  {
 801d9d4:	e003      	b.n	801d9de <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801d9d6:	2327      	movs	r3, #39	; 0x27
 801d9d8:	18fb      	adds	r3, r7, r3
 801d9da:	2201      	movs	r2, #1
 801d9dc:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801d9de:	2327      	movs	r3, #39	; 0x27
 801d9e0:	18fb      	adds	r3, r7, r3
 801d9e2:	781b      	ldrb	r3, [r3, #0]
}
 801d9e4:	0018      	movs	r0, r3
 801d9e6:	46bd      	mov	sp, r7
 801d9e8:	b00a      	add	sp, #40	; 0x28
 801d9ea:	bd80      	pop	{r7, pc}
 801d9ec:	08020a00 	.word	0x08020a00
 801d9f0:	2000185c 	.word	0x2000185c

0801d9f4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801d9f4:	b580      	push	{r7, lr}
 801d9f6:	b088      	sub	sp, #32
 801d9f8:	af00      	add	r7, sp, #0
 801d9fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d9fc:	231f      	movs	r3, #31
 801d9fe:	18fb      	adds	r3, r7, r3
 801da00:	2200      	movs	r2, #0
 801da02:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	2b00      	cmp	r3, #0
 801da08:	d05d      	beq.n	801dac6 <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da0a:	f3ef 8310 	mrs	r3, PRIMASK
 801da0e:	60fb      	str	r3, [r7, #12]
  return(result);
 801da10:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801da12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801da14:	b672      	cpsid	i
}
 801da16:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801da18:	4b30      	ldr	r3, [pc, #192]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801da1e:	4b2f      	ldr	r3, [pc, #188]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	2201      	movs	r2, #1
 801da28:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801da2a:	4b2c      	ldr	r3, [pc, #176]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da2c:	681b      	ldr	r3, [r3, #0]
 801da2e:	2b00      	cmp	r3, #0
 801da30:	d043      	beq.n	801daba <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	2200      	movs	r2, #0
 801da36:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801da38:	4b28      	ldr	r3, [pc, #160]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	687a      	ldr	r2, [r7, #4]
 801da3e:	429a      	cmp	r2, r3
 801da40:	d134      	bne.n	801daac <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801da42:	4b26      	ldr	r3, [pc, #152]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	2200      	movs	r2, #0
 801da48:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801da4a:	4b24      	ldr	r3, [pc, #144]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	695b      	ldr	r3, [r3, #20]
 801da50:	2b00      	cmp	r3, #0
 801da52:	d00a      	beq.n	801da6a <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801da54:	4b21      	ldr	r3, [pc, #132]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	695a      	ldr	r2, [r3, #20]
 801da5a:	4b20      	ldr	r3, [pc, #128]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da5c:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801da5e:	4b1f      	ldr	r3, [pc, #124]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	0018      	movs	r0, r3
 801da64:	f000 f944 	bl	801dcf0 <TimerSetTimeout>
 801da68:	e023      	b.n	801dab2 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801da6a:	4b1d      	ldr	r3, [pc, #116]	; (801dae0 <UTIL_TIMER_Stop+0xec>)
 801da6c:	68db      	ldr	r3, [r3, #12]
 801da6e:	4798      	blx	r3
            TimerListHead = NULL;
 801da70:	4b1a      	ldr	r3, [pc, #104]	; (801dadc <UTIL_TIMER_Stop+0xe8>)
 801da72:	2200      	movs	r2, #0
 801da74:	601a      	str	r2, [r3, #0]
 801da76:	e01c      	b.n	801dab2 <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801da78:	697a      	ldr	r2, [r7, #20]
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	429a      	cmp	r2, r3
 801da7e:	d110      	bne.n	801daa2 <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801da80:	697b      	ldr	r3, [r7, #20]
 801da82:	695b      	ldr	r3, [r3, #20]
 801da84:	2b00      	cmp	r3, #0
 801da86:	d006      	beq.n	801da96 <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801da88:	697b      	ldr	r3, [r7, #20]
 801da8a:	695b      	ldr	r3, [r3, #20]
 801da8c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801da8e:	69bb      	ldr	r3, [r7, #24]
 801da90:	697a      	ldr	r2, [r7, #20]
 801da92:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801da94:	e00d      	b.n	801dab2 <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801da96:	2300      	movs	r3, #0
 801da98:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801da9a:	69bb      	ldr	r3, [r7, #24]
 801da9c:	697a      	ldr	r2, [r7, #20]
 801da9e:	615a      	str	r2, [r3, #20]
            break;
 801daa0:	e007      	b.n	801dab2 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801daa2:	697b      	ldr	r3, [r7, #20]
 801daa4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801daa6:	697b      	ldr	r3, [r7, #20]
 801daa8:	695b      	ldr	r3, [r3, #20]
 801daaa:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801daac:	697b      	ldr	r3, [r7, #20]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d1e2      	bne.n	801da78 <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801dab2:	231f      	movs	r3, #31
 801dab4:	18fb      	adds	r3, r7, r3
 801dab6:	2200      	movs	r2, #0
 801dab8:	701a      	strb	r2, [r3, #0]
 801daba:	693b      	ldr	r3, [r7, #16]
 801dabc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dabe:	68bb      	ldr	r3, [r7, #8]
 801dac0:	f383 8810 	msr	PRIMASK, r3
}
 801dac4:	e003      	b.n	801dace <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801dac6:	231f      	movs	r3, #31
 801dac8:	18fb      	adds	r3, r7, r3
 801daca:	2201      	movs	r2, #1
 801dacc:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801dace:	231f      	movs	r3, #31
 801dad0:	18fb      	adds	r3, r7, r3
 801dad2:	781b      	ldrb	r3, [r3, #0]
}
 801dad4:	0018      	movs	r0, r3
 801dad6:	46bd      	mov	sp, r7
 801dad8:	b008      	add	sp, #32
 801dada:	bd80      	pop	{r7, pc}
 801dadc:	2000185c 	.word	0x2000185c
 801dae0:	08020a00 	.word	0x08020a00

0801dae4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801dae4:	b590      	push	{r4, r7, lr}
 801dae6:	b085      	sub	sp, #20
 801dae8:	af00      	add	r7, sp, #0
 801daea:	6078      	str	r0, [r7, #4]
 801daec:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801daee:	210f      	movs	r1, #15
 801daf0:	187b      	adds	r3, r7, r1
 801daf2:	2200      	movs	r2, #0
 801daf4:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d103      	bne.n	801db04 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801dafc:	187b      	adds	r3, r7, r1
 801dafe:	2201      	movs	r2, #1
 801db00:	701a      	strb	r2, [r3, #0]
 801db02:	e019      	b.n	801db38 <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801db04:	4b10      	ldr	r3, [pc, #64]	; (801db48 <UTIL_TIMER_SetPeriod+0x64>)
 801db06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db08:	683a      	ldr	r2, [r7, #0]
 801db0a:	0010      	movs	r0, r2
 801db0c:	4798      	blx	r3
 801db0e:	0002      	movs	r2, r0
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	0018      	movs	r0, r3
 801db18:	f000 f8ce 	bl	801dcb8 <TimerExists>
 801db1c:	1e03      	subs	r3, r0, #0
 801db1e:	d00b      	beq.n	801db38 <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	0018      	movs	r0, r3
 801db24:	f7ff ff66 	bl	801d9f4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801db28:	230f      	movs	r3, #15
 801db2a:	18fc      	adds	r4, r7, r3
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	0018      	movs	r0, r3
 801db30:	f7ff fee8 	bl	801d904 <UTIL_TIMER_Start>
 801db34:	0003      	movs	r3, r0
 801db36:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801db38:	230f      	movs	r3, #15
 801db3a:	18fb      	adds	r3, r7, r3
 801db3c:	781b      	ldrb	r3, [r3, #0]
}
 801db3e:	0018      	movs	r0, r3
 801db40:	46bd      	mov	sp, r7
 801db42:	b005      	add	sp, #20
 801db44:	bd90      	pop	{r4, r7, pc}
 801db46:	46c0      	nop			; (mov r8, r8)
 801db48:	08020a00 	.word	0x08020a00

0801db4c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801db4c:	b590      	push	{r4, r7, lr}
 801db4e:	b089      	sub	sp, #36	; 0x24
 801db50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db52:	f3ef 8310 	mrs	r3, PRIMASK
 801db56:	60bb      	str	r3, [r7, #8]
  return(result);
 801db58:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801db5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801db5c:	b672      	cpsid	i
}
 801db5e:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801db60:	4b3a      	ldr	r3, [pc, #232]	; (801dc4c <UTIL_TIMER_IRQ_Handler+0x100>)
 801db62:	695b      	ldr	r3, [r3, #20]
 801db64:	4798      	blx	r3
 801db66:	0003      	movs	r3, r0
 801db68:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801db6a:	4b38      	ldr	r3, [pc, #224]	; (801dc4c <UTIL_TIMER_IRQ_Handler+0x100>)
 801db6c:	691b      	ldr	r3, [r3, #16]
 801db6e:	4798      	blx	r3
 801db70:	0003      	movs	r3, r0
 801db72:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801db74:	693a      	ldr	r2, [r7, #16]
 801db76:	697b      	ldr	r3, [r7, #20]
 801db78:	1ad3      	subs	r3, r2, r3
 801db7a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801db7c:	4b34      	ldr	r3, [pc, #208]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	2b00      	cmp	r3, #0
 801db82:	d038      	beq.n	801dbf6 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801db84:	4b32      	ldr	r3, [pc, #200]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801db86:	681b      	ldr	r3, [r3, #0]
 801db88:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801db8a:	69fb      	ldr	r3, [r7, #28]
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	68fa      	ldr	r2, [r7, #12]
 801db90:	429a      	cmp	r2, r3
 801db92:	d206      	bcs.n	801dba2 <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801db94:	69fb      	ldr	r3, [r7, #28]
 801db96:	681a      	ldr	r2, [r3, #0]
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	1ad2      	subs	r2, r2, r3
 801db9c:	69fb      	ldr	r3, [r7, #28]
 801db9e:	601a      	str	r2, [r3, #0]
 801dba0:	e002      	b.n	801dba8 <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801dba2:	69fb      	ldr	r3, [r7, #28]
 801dba4:	2200      	movs	r2, #0
 801dba6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801dba8:	69fb      	ldr	r3, [r7, #28]
 801dbaa:	695b      	ldr	r3, [r3, #20]
 801dbac:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801dbae:	69fb      	ldr	r3, [r7, #28]
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d1ea      	bne.n	801db8a <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dbb4:	e01f      	b.n	801dbf6 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801dbb6:	4b26      	ldr	r3, [pc, #152]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801dbb8:	681b      	ldr	r3, [r3, #0]
 801dbba:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801dbbc:	4b24      	ldr	r3, [pc, #144]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	695a      	ldr	r2, [r3, #20]
 801dbc2:	4b23      	ldr	r3, [pc, #140]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801dbc4:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801dbc6:	69fb      	ldr	r3, [r7, #28]
 801dbc8:	2200      	movs	r2, #0
 801dbca:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801dbcc:	69fb      	ldr	r3, [r7, #28]
 801dbce:	2200      	movs	r2, #0
 801dbd0:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801dbd2:	69fb      	ldr	r3, [r7, #28]
 801dbd4:	68da      	ldr	r2, [r3, #12]
 801dbd6:	69fb      	ldr	r3, [r7, #28]
 801dbd8:	691b      	ldr	r3, [r3, #16]
 801dbda:	0018      	movs	r0, r3
 801dbdc:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801dbde:	69fb      	ldr	r3, [r7, #28]
 801dbe0:	7adb      	ldrb	r3, [r3, #11]
 801dbe2:	2b01      	cmp	r3, #1
 801dbe4:	d107      	bne.n	801dbf6 <UTIL_TIMER_IRQ_Handler+0xaa>
 801dbe6:	69fb      	ldr	r3, [r7, #28]
 801dbe8:	7a9b      	ldrb	r3, [r3, #10]
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d103      	bne.n	801dbf6 <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801dbee:	69fb      	ldr	r3, [r7, #28]
 801dbf0:	0018      	movs	r0, r3
 801dbf2:	f7ff fe87 	bl	801d904 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dbf6:	4b16      	ldr	r3, [pc, #88]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801dbf8:	681b      	ldr	r3, [r3, #0]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d00d      	beq.n	801dc1a <UTIL_TIMER_IRQ_Handler+0xce>
 801dbfe:	4b14      	ldr	r3, [pc, #80]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801dc00:	681b      	ldr	r3, [r3, #0]
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d0d6      	beq.n	801dbb6 <UTIL_TIMER_IRQ_Handler+0x6a>
 801dc08:	4b11      	ldr	r3, [pc, #68]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	681c      	ldr	r4, [r3, #0]
 801dc0e:	4b0f      	ldr	r3, [pc, #60]	; (801dc4c <UTIL_TIMER_IRQ_Handler+0x100>)
 801dc10:	699b      	ldr	r3, [r3, #24]
 801dc12:	4798      	blx	r3
 801dc14:	0003      	movs	r3, r0
 801dc16:	429c      	cmp	r4, r3
 801dc18:	d3cd      	bcc.n	801dbb6 <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801dc1a:	4b0d      	ldr	r3, [pc, #52]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	d009      	beq.n	801dc36 <UTIL_TIMER_IRQ_Handler+0xea>
 801dc22:	4b0b      	ldr	r3, [pc, #44]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	7a1b      	ldrb	r3, [r3, #8]
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d104      	bne.n	801dc36 <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801dc2c:	4b08      	ldr	r3, [pc, #32]	; (801dc50 <UTIL_TIMER_IRQ_Handler+0x104>)
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	0018      	movs	r0, r3
 801dc32:	f000 f85d 	bl	801dcf0 <TimerSetTimeout>
 801dc36:	69bb      	ldr	r3, [r7, #24]
 801dc38:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	f383 8810 	msr	PRIMASK, r3
}
 801dc40:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801dc42:	46c0      	nop			; (mov r8, r8)
 801dc44:	46bd      	mov	sp, r7
 801dc46:	b009      	add	sp, #36	; 0x24
 801dc48:	bd90      	pop	{r4, r7, pc}
 801dc4a:	46c0      	nop			; (mov r8, r8)
 801dc4c:	08020a00 	.word	0x08020a00
 801dc50:	2000185c 	.word	0x2000185c

0801dc54 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801dc54:	b580      	push	{r7, lr}
 801dc56:	b082      	sub	sp, #8
 801dc58:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801dc5a:	4b07      	ldr	r3, [pc, #28]	; (801dc78 <UTIL_TIMER_GetCurrentTime+0x24>)
 801dc5c:	69db      	ldr	r3, [r3, #28]
 801dc5e:	4798      	blx	r3
 801dc60:	0003      	movs	r3, r0
 801dc62:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801dc64:	4b04      	ldr	r3, [pc, #16]	; (801dc78 <UTIL_TIMER_GetCurrentTime+0x24>)
 801dc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc68:	687a      	ldr	r2, [r7, #4]
 801dc6a:	0010      	movs	r0, r2
 801dc6c:	4798      	blx	r3
 801dc6e:	0003      	movs	r3, r0
}
 801dc70:	0018      	movs	r0, r3
 801dc72:	46bd      	mov	sp, r7
 801dc74:	b002      	add	sp, #8
 801dc76:	bd80      	pop	{r7, pc}
 801dc78:	08020a00 	.word	0x08020a00

0801dc7c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801dc7c:	b580      	push	{r7, lr}
 801dc7e:	b084      	sub	sp, #16
 801dc80:	af00      	add	r7, sp, #0
 801dc82:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801dc84:	4b0b      	ldr	r3, [pc, #44]	; (801dcb4 <UTIL_TIMER_GetElapsedTime+0x38>)
 801dc86:	69db      	ldr	r3, [r3, #28]
 801dc88:	4798      	blx	r3
 801dc8a:	0003      	movs	r3, r0
 801dc8c:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801dc8e:	4b09      	ldr	r3, [pc, #36]	; (801dcb4 <UTIL_TIMER_GetElapsedTime+0x38>)
 801dc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc92:	687a      	ldr	r2, [r7, #4]
 801dc94:	0010      	movs	r0, r2
 801dc96:	4798      	blx	r3
 801dc98:	0003      	movs	r3, r0
 801dc9a:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801dc9c:	4b05      	ldr	r3, [pc, #20]	; (801dcb4 <UTIL_TIMER_GetElapsedTime+0x38>)
 801dc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dca0:	68f9      	ldr	r1, [r7, #12]
 801dca2:	68ba      	ldr	r2, [r7, #8]
 801dca4:	1a8a      	subs	r2, r1, r2
 801dca6:	0010      	movs	r0, r2
 801dca8:	4798      	blx	r3
 801dcaa:	0003      	movs	r3, r0
}
 801dcac:	0018      	movs	r0, r3
 801dcae:	46bd      	mov	sp, r7
 801dcb0:	b004      	add	sp, #16
 801dcb2:	bd80      	pop	{r7, pc}
 801dcb4:	08020a00 	.word	0x08020a00

0801dcb8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801dcb8:	b580      	push	{r7, lr}
 801dcba:	b084      	sub	sp, #16
 801dcbc:	af00      	add	r7, sp, #0
 801dcbe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801dcc0:	4b0a      	ldr	r3, [pc, #40]	; (801dcec <TimerExists+0x34>)
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801dcc6:	e008      	b.n	801dcda <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801dcc8:	68fa      	ldr	r2, [r7, #12]
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	429a      	cmp	r2, r3
 801dcce:	d101      	bne.n	801dcd4 <TimerExists+0x1c>
    {
      return true;
 801dcd0:	2301      	movs	r3, #1
 801dcd2:	e006      	b.n	801dce2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801dcd4:	68fb      	ldr	r3, [r7, #12]
 801dcd6:	695b      	ldr	r3, [r3, #20]
 801dcd8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d1f3      	bne.n	801dcc8 <TimerExists+0x10>
  }
  return false;
 801dce0:	2300      	movs	r3, #0
}
 801dce2:	0018      	movs	r0, r3
 801dce4:	46bd      	mov	sp, r7
 801dce6:	b004      	add	sp, #16
 801dce8:	bd80      	pop	{r7, pc}
 801dcea:	46c0      	nop			; (mov r8, r8)
 801dcec:	2000185c 	.word	0x2000185c

0801dcf0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801dcf0:	b590      	push	{r4, r7, lr}
 801dcf2:	b085      	sub	sp, #20
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801dcf8:	4b11      	ldr	r3, [pc, #68]	; (801dd40 <TimerSetTimeout+0x50>)
 801dcfa:	6a1b      	ldr	r3, [r3, #32]
 801dcfc:	4798      	blx	r3
 801dcfe:	0003      	movs	r3, r0
 801dd00:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	2201      	movs	r2, #1
 801dd06:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	681c      	ldr	r4, [r3, #0]
 801dd0c:	4b0c      	ldr	r3, [pc, #48]	; (801dd40 <TimerSetTimeout+0x50>)
 801dd0e:	699b      	ldr	r3, [r3, #24]
 801dd10:	4798      	blx	r3
 801dd12:	0002      	movs	r2, r0
 801dd14:	68fb      	ldr	r3, [r7, #12]
 801dd16:	18d3      	adds	r3, r2, r3
 801dd18:	429c      	cmp	r4, r3
 801dd1a:	d207      	bcs.n	801dd2c <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801dd1c:	4b08      	ldr	r3, [pc, #32]	; (801dd40 <TimerSetTimeout+0x50>)
 801dd1e:	699b      	ldr	r3, [r3, #24]
 801dd20:	4798      	blx	r3
 801dd22:	0002      	movs	r2, r0
 801dd24:	68fb      	ldr	r3, [r7, #12]
 801dd26:	18d2      	adds	r2, r2, r3
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801dd2c:	4b04      	ldr	r3, [pc, #16]	; (801dd40 <TimerSetTimeout+0x50>)
 801dd2e:	689a      	ldr	r2, [r3, #8]
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	0018      	movs	r0, r3
 801dd36:	4790      	blx	r2
}
 801dd38:	46c0      	nop			; (mov r8, r8)
 801dd3a:	46bd      	mov	sp, r7
 801dd3c:	b005      	add	sp, #20
 801dd3e:	bd90      	pop	{r4, r7, pc}
 801dd40:	08020a00 	.word	0x08020a00

0801dd44 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b084      	sub	sp, #16
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801dd4c:	4b13      	ldr	r3, [pc, #76]	; (801dd9c <TimerInsertTimer+0x58>)
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801dd52:	4b12      	ldr	r3, [pc, #72]	; (801dd9c <TimerInsertTimer+0x58>)
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	695b      	ldr	r3, [r3, #20]
 801dd58:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801dd5a:	e012      	b.n	801dd82 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	681a      	ldr	r2, [r3, #0]
 801dd60:	68bb      	ldr	r3, [r7, #8]
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	429a      	cmp	r2, r3
 801dd66:	d905      	bls.n	801dd74 <TimerInsertTimer+0x30>
    {
        cur = next;
 801dd68:	68bb      	ldr	r3, [r7, #8]
 801dd6a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801dd6c:	68bb      	ldr	r3, [r7, #8]
 801dd6e:	695b      	ldr	r3, [r3, #20]
 801dd70:	60bb      	str	r3, [r7, #8]
 801dd72:	e006      	b.n	801dd82 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	687a      	ldr	r2, [r7, #4]
 801dd78:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	68ba      	ldr	r2, [r7, #8]
 801dd7e:	615a      	str	r2, [r3, #20]
        return;
 801dd80:	e009      	b.n	801dd96 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	695b      	ldr	r3, [r3, #20]
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d1e8      	bne.n	801dd5c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801dd8a:	68fb      	ldr	r3, [r7, #12]
 801dd8c:	687a      	ldr	r2, [r7, #4]
 801dd8e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	2200      	movs	r2, #0
 801dd94:	615a      	str	r2, [r3, #20]
}
 801dd96:	46bd      	mov	sp, r7
 801dd98:	b004      	add	sp, #16
 801dd9a:	bd80      	pop	{r7, pc}
 801dd9c:	2000185c 	.word	0x2000185c

0801dda0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801dda0:	b580      	push	{r7, lr}
 801dda2:	b084      	sub	sp, #16
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801dda8:	4b0b      	ldr	r3, [pc, #44]	; (801ddd8 <TimerInsertNewHeadTimer+0x38>)
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ddae:	68fb      	ldr	r3, [r7, #12]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d002      	beq.n	801ddba <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	2200      	movs	r2, #0
 801ddb8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	68fa      	ldr	r2, [r7, #12]
 801ddbe:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ddc0:	4b05      	ldr	r3, [pc, #20]	; (801ddd8 <TimerInsertNewHeadTimer+0x38>)
 801ddc2:	687a      	ldr	r2, [r7, #4]
 801ddc4:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801ddc6:	4b04      	ldr	r3, [pc, #16]	; (801ddd8 <TimerInsertNewHeadTimer+0x38>)
 801ddc8:	681b      	ldr	r3, [r3, #0]
 801ddca:	0018      	movs	r0, r3
 801ddcc:	f7ff ff90 	bl	801dcf0 <TimerSetTimeout>
}
 801ddd0:	46c0      	nop			; (mov r8, r8)
 801ddd2:	46bd      	mov	sp, r7
 801ddd4:	b004      	add	sp, #16
 801ddd6:	bd80      	pop	{r7, pc}
 801ddd8:	2000185c 	.word	0x2000185c

0801dddc <tiny_vfscanf>:
 * vfscanf
 */

static inline int
VFSCANF(const char *str, const char *fmt0, va_list ap)
{
 801dddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddde:	46c6      	mov	lr, r8
 801dde0:	b500      	push	{lr}
 801dde2:	4ce7      	ldr	r4, [pc, #924]	; (801e180 <tiny_vfscanf+0x3a4>)
 801dde4:	44a5      	add	sp, r4
 801dde6:	af00      	add	r7, sp, #0
 801dde8:	63f8      	str	r0, [r7, #60]	; 0x3c
 801ddea:	63b9      	str	r1, [r7, #56]	; 0x38
 801ddec:	637a      	str	r2, [r7, #52]	; 0x34
  u_char *fmt = (u_char *)fmt0;
 801ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ddf0:	2291      	movs	r2, #145	; 0x91
 801ddf2:	0092      	lsls	r2, r2, #2
 801ddf4:	2128      	movs	r1, #40	; 0x28
 801ddf6:	468c      	mov	ip, r1
 801ddf8:	2108      	movs	r1, #8
 801ddfa:	4688      	mov	r8, r1
 801ddfc:	44b8      	add	r8, r7
 801ddfe:	44c4      	add	ip, r8
 801de00:	4462      	add	r2, ip
 801de02:	6013      	str	r3, [r2, #0]
#else  
  static short basefix[17] =
    { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
#endif
    
   fp_p = str;
 801de04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de06:	2289      	movs	r2, #137	; 0x89
 801de08:	0092      	lsls	r2, r2, #2
 801de0a:	2128      	movs	r1, #40	; 0x28
 801de0c:	468c      	mov	ip, r1
 801de0e:	2108      	movs	r1, #8
 801de10:	4688      	mov	r8, r1
 801de12:	44b8      	add	r8, r7
 801de14:	44c4      	add	ip, r8
 801de16:	4462      	add	r2, ip
 801de18:	6013      	str	r3, [r2, #0]
  fp_r = strlen(str);
 801de1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de1c:	0018      	movs	r0, r3
 801de1e:	f7e2 f973 	bl	8000108 <strlen>
 801de22:	0003      	movs	r3, r0
 801de24:	2288      	movs	r2, #136	; 0x88
 801de26:	0092      	lsls	r2, r2, #2
 801de28:	2128      	movs	r1, #40	; 0x28
 801de2a:	468c      	mov	ip, r1
 801de2c:	2108      	movs	r1, #8
 801de2e:	4688      	mov	r8, r1
 801de30:	44b8      	add	r8, r7
 801de32:	44c4      	add	ip, r8
 801de34:	4462      	add	r2, ip
 801de36:	6013      	str	r3, [r2, #0]

  nassigned = 0;
 801de38:	2300      	movs	r3, #0
 801de3a:	228c      	movs	r2, #140	; 0x8c
 801de3c:	0092      	lsls	r2, r2, #2
 801de3e:	2128      	movs	r1, #40	; 0x28
 801de40:	468c      	mov	ip, r1
 801de42:	2108      	movs	r1, #8
 801de44:	4688      	mov	r8, r1
 801de46:	44b8      	add	r8, r7
 801de48:	44c4      	add	ip, r8
 801de4a:	4462      	add	r2, ip
 801de4c:	6013      	str	r3, [r2, #0]
  nread = 0;
 801de4e:	2300      	movs	r3, #0
 801de50:	228b      	movs	r2, #139	; 0x8b
 801de52:	0092      	lsls	r2, r2, #2
 801de54:	2128      	movs	r1, #40	; 0x28
 801de56:	468c      	mov	ip, r1
 801de58:	2108      	movs	r1, #8
 801de5a:	4688      	mov	r8, r1
 801de5c:	44b8      	add	r8, r7
 801de5e:	44c4      	add	ip, r8
 801de60:	4462      	add	r2, ip
 801de62:	6013      	str	r3, [r2, #0]
  base = 0;    /* XXX just to keep gcc happy */
 801de64:	2300      	movs	r3, #0
 801de66:	228a      	movs	r2, #138	; 0x8a
 801de68:	0092      	lsls	r2, r2, #2
 801de6a:	2128      	movs	r1, #40	; 0x28
 801de6c:	468c      	mov	ip, r1
 801de6e:	2108      	movs	r1, #8
 801de70:	4688      	mov	r8, r1
 801de72:	44b8      	add	r8, r7
 801de74:	44c4      	add	ip, r8
 801de76:	4462      	add	r2, ip
 801de78:	6013      	str	r3, [r2, #0]
  for (;;) {
    c = *fmt++;
 801de7a:	2191      	movs	r1, #145	; 0x91
 801de7c:	0089      	lsls	r1, r1, #2
 801de7e:	2028      	movs	r0, #40	; 0x28
 801de80:	2308      	movs	r3, #8
 801de82:	18fb      	adds	r3, r7, r3
 801de84:	181b      	adds	r3, r3, r0
 801de86:	185b      	adds	r3, r3, r1
 801de88:	681a      	ldr	r2, [r3, #0]
 801de8a:	1c53      	adds	r3, r2, #1
 801de8c:	2428      	movs	r4, #40	; 0x28
 801de8e:	46a4      	mov	ip, r4
 801de90:	2408      	movs	r4, #8
 801de92:	46a0      	mov	r8, r4
 801de94:	44b8      	add	r8, r7
 801de96:	44c4      	add	ip, r8
 801de98:	4461      	add	r1, ip
 801de9a:	600b      	str	r3, [r1, #0]
 801de9c:	7813      	ldrb	r3, [r2, #0]
 801de9e:	2290      	movs	r2, #144	; 0x90
 801dea0:	0092      	lsls	r2, r2, #2
 801dea2:	2108      	movs	r1, #8
 801dea4:	1879      	adds	r1, r7, r1
 801dea6:	1809      	adds	r1, r1, r0
 801dea8:	1889      	adds	r1, r1, r2
 801deaa:	600b      	str	r3, [r1, #0]
    if (c == 0)
 801deac:	2308      	movs	r3, #8
 801deae:	18fb      	adds	r3, r7, r3
 801deb0:	181b      	adds	r3, r3, r0
 801deb2:	189b      	adds	r3, r3, r2
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	d10b      	bne.n	801ded2 <tiny_vfscanf+0xf6>
      return (nassigned);
 801deba:	238c      	movs	r3, #140	; 0x8c
 801debc:	009b      	lsls	r3, r3, #2
 801debe:	2228      	movs	r2, #40	; 0x28
 801dec0:	4694      	mov	ip, r2
 801dec2:	2208      	movs	r2, #8
 801dec4:	4690      	mov	r8, r2
 801dec6:	44b8      	add	r8, r7
 801dec8:	44c4      	add	ip, r8
 801deca:	4463      	add	r3, ip
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	f000 fd4d 	bl	801e96c <tiny_vfscanf+0xb90>
          isspace(*fp_p))
        nread++, fp_r--, fp_p++;
      continue;
    }
#endif
    if (c != '%')
 801ded2:	2390      	movs	r3, #144	; 0x90
 801ded4:	009b      	lsls	r3, r3, #2
 801ded6:	2228      	movs	r2, #40	; 0x28
 801ded8:	4694      	mov	ip, r2
 801deda:	2208      	movs	r2, #8
 801dedc:	4690      	mov	r8, r2
 801dede:	44b8      	add	r8, r7
 801dee0:	44c4      	add	ip, r8
 801dee2:	4463      	add	r3, ip
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	2b25      	cmp	r3, #37	; 0x25
 801dee8:	d171      	bne.n	801dfce <tiny_vfscanf+0x1f2>
      goto literal;
    width = 0;
 801deea:	2300      	movs	r3, #0
 801deec:	228f      	movs	r2, #143	; 0x8f
 801deee:	0092      	lsls	r2, r2, #2
 801def0:	2128      	movs	r1, #40	; 0x28
 801def2:	468c      	mov	ip, r1
 801def4:	2108      	movs	r1, #8
 801def6:	4688      	mov	r8, r1
 801def8:	44b8      	add	r8, r7
 801defa:	44c4      	add	ip, r8
 801defc:	4462      	add	r2, ip
 801defe:	6013      	str	r3, [r2, #0]
    flags = 0;
 801df00:	2300      	movs	r3, #0
 801df02:	228d      	movs	r2, #141	; 0x8d
 801df04:	0092      	lsls	r2, r2, #2
 801df06:	2128      	movs	r1, #40	; 0x28
 801df08:	468c      	mov	ip, r1
 801df0a:	2108      	movs	r1, #8
 801df0c:	4688      	mov	r8, r1
 801df0e:	44b8      	add	r8, r7
 801df10:	44c4      	add	ip, r8
 801df12:	4462      	add	r2, ip
 801df14:	6013      	str	r3, [r2, #0]
    /*
     * switch on the format.  continue if done;
     * break once format type is derived.
     */
again:    c = *fmt++;
 801df16:	2191      	movs	r1, #145	; 0x91
 801df18:	0089      	lsls	r1, r1, #2
 801df1a:	2028      	movs	r0, #40	; 0x28
 801df1c:	2308      	movs	r3, #8
 801df1e:	18fb      	adds	r3, r7, r3
 801df20:	181b      	adds	r3, r3, r0
 801df22:	185b      	adds	r3, r3, r1
 801df24:	681a      	ldr	r2, [r3, #0]
 801df26:	1c53      	adds	r3, r2, #1
 801df28:	2428      	movs	r4, #40	; 0x28
 801df2a:	46a4      	mov	ip, r4
 801df2c:	2408      	movs	r4, #8
 801df2e:	46a0      	mov	r8, r4
 801df30:	44b8      	add	r8, r7
 801df32:	44c4      	add	ip, r8
 801df34:	4461      	add	r1, ip
 801df36:	600b      	str	r3, [r1, #0]
 801df38:	7813      	ldrb	r3, [r2, #0]
 801df3a:	2290      	movs	r2, #144	; 0x90
 801df3c:	0092      	lsls	r2, r2, #2
 801df3e:	2108      	movs	r1, #8
 801df40:	1879      	adds	r1, r7, r1
 801df42:	1809      	adds	r1, r1, r0
 801df44:	1889      	adds	r1, r1, r2
 801df46:	600b      	str	r3, [r1, #0]
    switch (c) {
 801df48:	0001      	movs	r1, r0
 801df4a:	2308      	movs	r3, #8
 801df4c:	18fb      	adds	r3, r7, r3
 801df4e:	185b      	adds	r3, r3, r1
 801df50:	189b      	adds	r3, r3, r2
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	2b78      	cmp	r3, #120	; 0x78
 801df56:	dd00      	ble.n	801df5a <tiny_vfscanf+0x17e>
 801df58:	e167      	b.n	801e22a <tiny_vfscanf+0x44e>
 801df5a:	2308      	movs	r3, #8
 801df5c:	18fb      	adds	r3, r7, r3
 801df5e:	185b      	adds	r3, r3, r1
 801df60:	189b      	adds	r3, r3, r2
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	2b44      	cmp	r3, #68	; 0x44
 801df66:	da1f      	bge.n	801dfa8 <tiny_vfscanf+0x1cc>
 801df68:	2308      	movs	r3, #8
 801df6a:	18fb      	adds	r3, r7, r3
 801df6c:	185b      	adds	r3, r3, r1
 801df6e:	189b      	adds	r3, r3, r2
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	2b39      	cmp	r3, #57	; 0x39
 801df74:	dd00      	ble.n	801df78 <tiny_vfscanf+0x19c>
 801df76:	e158      	b.n	801e22a <tiny_vfscanf+0x44e>
 801df78:	2308      	movs	r3, #8
 801df7a:	18fb      	adds	r3, r7, r3
 801df7c:	185b      	adds	r3, r3, r1
 801df7e:	189b      	adds	r3, r3, r2
 801df80:	681b      	ldr	r3, [r3, #0]
 801df82:	2b30      	cmp	r3, #48	; 0x30
 801df84:	db00      	blt.n	801df88 <tiny_vfscanf+0x1ac>
 801df86:	e0b6      	b.n	801e0f6 <tiny_vfscanf+0x31a>
 801df88:	2308      	movs	r3, #8
 801df8a:	18fb      	adds	r3, r7, r3
 801df8c:	185b      	adds	r3, r3, r1
 801df8e:	189b      	adds	r3, r3, r2
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	2b00      	cmp	r3, #0
 801df94:	d100      	bne.n	801df98 <tiny_vfscanf+0x1bc>
 801df96:	e145      	b.n	801e224 <tiny_vfscanf+0x448>
 801df98:	2308      	movs	r3, #8
 801df9a:	18fb      	adds	r3, r7, r3
 801df9c:	185b      	adds	r3, r3, r1
 801df9e:	189b      	adds	r3, r3, r2
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	2b25      	cmp	r3, #37	; 0x25
 801dfa4:	d014      	beq.n	801dfd0 <tiny_vfscanf+0x1f4>
      if (isupper(c))
        flags |= LONG;
      c = CT_INT;
      base = 10;
#endif
      break;
 801dfa6:	e140      	b.n	801e22a <tiny_vfscanf+0x44e>
 801dfa8:	2390      	movs	r3, #144	; 0x90
 801dfaa:	009b      	lsls	r3, r3, #2
 801dfac:	2228      	movs	r2, #40	; 0x28
 801dfae:	4694      	mov	ip, r2
 801dfb0:	2208      	movs	r2, #8
 801dfb2:	4690      	mov	r8, r2
 801dfb4:	44b8      	add	r8, r7
 801dfb6:	44c4      	add	ip, r8
 801dfb8:	4463      	add	r3, ip
 801dfba:	681b      	ldr	r3, [r3, #0]
 801dfbc:	3b44      	subs	r3, #68	; 0x44
 801dfbe:	2b34      	cmp	r3, #52	; 0x34
 801dfc0:	d900      	bls.n	801dfc4 <tiny_vfscanf+0x1e8>
 801dfc2:	e132      	b.n	801e22a <tiny_vfscanf+0x44e>
 801dfc4:	009a      	lsls	r2, r3, #2
 801dfc6:	4b6f      	ldr	r3, [pc, #444]	; (801e184 <tiny_vfscanf+0x3a8>)
 801dfc8:	18d3      	adds	r3, r2, r3
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	469f      	mov	pc, r3
      goto literal;
 801dfce:	46c0      	nop			; (mov r8, r8)
      if (fp_r <= 0 && __srefill(fp))
 801dfd0:	2188      	movs	r1, #136	; 0x88
 801dfd2:	0089      	lsls	r1, r1, #2
 801dfd4:	2628      	movs	r6, #40	; 0x28
 801dfd6:	2308      	movs	r3, #8
 801dfd8:	18fb      	adds	r3, r7, r3
 801dfda:	199b      	adds	r3, r3, r6
 801dfdc:	185b      	adds	r3, r3, r1
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	dc01      	bgt.n	801dfe8 <tiny_vfscanf+0x20c>
 801dfe4:	f000 fc9f 	bl	801e926 <tiny_vfscanf+0xb4a>
      if (*fp_p != c)
 801dfe8:	2089      	movs	r0, #137	; 0x89
 801dfea:	0080      	lsls	r0, r0, #2
 801dfec:	2308      	movs	r3, #8
 801dfee:	18fb      	adds	r3, r7, r3
 801dff0:	199b      	adds	r3, r3, r6
 801dff2:	181b      	adds	r3, r3, r0
 801dff4:	681b      	ldr	r3, [r3, #0]
 801dff6:	781b      	ldrb	r3, [r3, #0]
 801dff8:	001a      	movs	r2, r3
 801dffa:	2390      	movs	r3, #144	; 0x90
 801dffc:	009b      	lsls	r3, r3, #2
 801dffe:	2428      	movs	r4, #40	; 0x28
 801e000:	46a4      	mov	ip, r4
 801e002:	2408      	movs	r4, #8
 801e004:	46a0      	mov	r8, r4
 801e006:	44b8      	add	r8, r7
 801e008:	44c4      	add	ip, r8
 801e00a:	4463      	add	r3, ip
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	4293      	cmp	r3, r2
 801e010:	d001      	beq.n	801e016 <tiny_vfscanf+0x23a>
 801e012:	f000 fc9e 	bl	801e952 <tiny_vfscanf+0xb76>
      fp_r--, fp_p++;
 801e016:	2308      	movs	r3, #8
 801e018:	18fb      	adds	r3, r7, r3
 801e01a:	199b      	adds	r3, r3, r6
 801e01c:	185b      	adds	r3, r3, r1
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	3b01      	subs	r3, #1
 801e022:	2208      	movs	r2, #8
 801e024:	18ba      	adds	r2, r7, r2
 801e026:	1992      	adds	r2, r2, r6
 801e028:	1852      	adds	r2, r2, r1
 801e02a:	6013      	str	r3, [r2, #0]
 801e02c:	2308      	movs	r3, #8
 801e02e:	18fb      	adds	r3, r7, r3
 801e030:	199b      	adds	r3, r3, r6
 801e032:	181b      	adds	r3, r3, r0
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	3301      	adds	r3, #1
 801e038:	2208      	movs	r2, #8
 801e03a:	18ba      	adds	r2, r7, r2
 801e03c:	1992      	adds	r2, r2, r6
 801e03e:	1812      	adds	r2, r2, r0
 801e040:	6013      	str	r3, [r2, #0]
      nread++;
 801e042:	228b      	movs	r2, #139	; 0x8b
 801e044:	0092      	lsls	r2, r2, #2
 801e046:	2308      	movs	r3, #8
 801e048:	18fb      	adds	r3, r7, r3
 801e04a:	199b      	adds	r3, r3, r6
 801e04c:	189b      	adds	r3, r3, r2
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	3301      	adds	r3, #1
 801e052:	2128      	movs	r1, #40	; 0x28
 801e054:	468c      	mov	ip, r1
 801e056:	2108      	movs	r1, #8
 801e058:	4688      	mov	r8, r1
 801e05a:	44b8      	add	r8, r7
 801e05c:	44c4      	add	ip, r8
 801e05e:	4462      	add	r2, ip
 801e060:	6013      	str	r3, [r2, #0]
      continue;
 801e062:	f000 fc5e 	bl	801e922 <tiny_vfscanf+0xb46>
      if (*fmt == 'h') {
 801e066:	2291      	movs	r2, #145	; 0x91
 801e068:	0092      	lsls	r2, r2, #2
 801e06a:	2028      	movs	r0, #40	; 0x28
 801e06c:	2308      	movs	r3, #8
 801e06e:	18fb      	adds	r3, r7, r3
 801e070:	181b      	adds	r3, r3, r0
 801e072:	189b      	adds	r3, r3, r2
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	781b      	ldrb	r3, [r3, #0]
 801e078:	2b68      	cmp	r3, #104	; 0x68
 801e07a:	d11c      	bne.n	801e0b6 <tiny_vfscanf+0x2da>
        fmt++;
 801e07c:	2308      	movs	r3, #8
 801e07e:	18fb      	adds	r3, r7, r3
 801e080:	181b      	adds	r3, r3, r0
 801e082:	189b      	adds	r3, r3, r2
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	3301      	adds	r3, #1
 801e088:	2128      	movs	r1, #40	; 0x28
 801e08a:	468c      	mov	ip, r1
 801e08c:	2108      	movs	r1, #8
 801e08e:	4688      	mov	r8, r1
 801e090:	44b8      	add	r8, r7
 801e092:	44c4      	add	ip, r8
 801e094:	4462      	add	r2, ip
 801e096:	6013      	str	r3, [r2, #0]
        flags |= SHORTSHORT;
 801e098:	218d      	movs	r1, #141	; 0x8d
 801e09a:	0089      	lsls	r1, r1, #2
 801e09c:	2308      	movs	r3, #8
 801e09e:	18fb      	adds	r3, r7, r3
 801e0a0:	181b      	adds	r3, r3, r0
 801e0a2:	185b      	adds	r3, r3, r1
 801e0a4:	681a      	ldr	r2, [r3, #0]
 801e0a6:	2308      	movs	r3, #8
 801e0a8:	4313      	orrs	r3, r2
 801e0aa:	2208      	movs	r2, #8
 801e0ac:	18ba      	adds	r2, r7, r2
 801e0ae:	1812      	adds	r2, r2, r0
 801e0b0:	1852      	adds	r2, r2, r1
 801e0b2:	6013      	str	r3, [r2, #0]
 801e0b4:	e72f      	b.n	801df16 <tiny_vfscanf+0x13a>
        flags |= SHORT;
 801e0b6:	218d      	movs	r1, #141	; 0x8d
 801e0b8:	0089      	lsls	r1, r1, #2
 801e0ba:	2028      	movs	r0, #40	; 0x28
 801e0bc:	2308      	movs	r3, #8
 801e0be:	18fb      	adds	r3, r7, r3
 801e0c0:	181b      	adds	r3, r3, r0
 801e0c2:	185b      	adds	r3, r3, r1
 801e0c4:	681a      	ldr	r2, [r3, #0]
 801e0c6:	2304      	movs	r3, #4
 801e0c8:	4313      	orrs	r3, r2
 801e0ca:	2208      	movs	r2, #8
 801e0cc:	18ba      	adds	r2, r7, r2
 801e0ce:	1812      	adds	r2, r2, r0
 801e0d0:	1852      	adds	r2, r2, r1
 801e0d2:	6013      	str	r3, [r2, #0]
      goto again;
 801e0d4:	e71f      	b.n	801df16 <tiny_vfscanf+0x13a>
      flags |= LONG;
 801e0d6:	218d      	movs	r1, #141	; 0x8d
 801e0d8:	0089      	lsls	r1, r1, #2
 801e0da:	2028      	movs	r0, #40	; 0x28
 801e0dc:	2308      	movs	r3, #8
 801e0de:	18fb      	adds	r3, r7, r3
 801e0e0:	181b      	adds	r3, r3, r0
 801e0e2:	185b      	adds	r3, r3, r1
 801e0e4:	681a      	ldr	r2, [r3, #0]
 801e0e6:	2301      	movs	r3, #1
 801e0e8:	4313      	orrs	r3, r2
 801e0ea:	2208      	movs	r2, #8
 801e0ec:	18ba      	adds	r2, r7, r2
 801e0ee:	1812      	adds	r2, r2, r0
 801e0f0:	1852      	adds	r2, r2, r1
 801e0f2:	6013      	str	r3, [r2, #0]
      goto again;
 801e0f4:	e70f      	b.n	801df16 <tiny_vfscanf+0x13a>
      width = width * 10 + c - '0';
 801e0f6:	218f      	movs	r1, #143	; 0x8f
 801e0f8:	0089      	lsls	r1, r1, #2
 801e0fa:	2028      	movs	r0, #40	; 0x28
 801e0fc:	2308      	movs	r3, #8
 801e0fe:	18fb      	adds	r3, r7, r3
 801e100:	181b      	adds	r3, r3, r0
 801e102:	185b      	adds	r3, r3, r1
 801e104:	681a      	ldr	r2, [r3, #0]
 801e106:	0013      	movs	r3, r2
 801e108:	009b      	lsls	r3, r3, #2
 801e10a:	189b      	adds	r3, r3, r2
 801e10c:	005b      	lsls	r3, r3, #1
 801e10e:	001a      	movs	r2, r3
 801e110:	2390      	movs	r3, #144	; 0x90
 801e112:	009b      	lsls	r3, r3, #2
 801e114:	2628      	movs	r6, #40	; 0x28
 801e116:	46b4      	mov	ip, r6
 801e118:	2408      	movs	r4, #8
 801e11a:	46a0      	mov	r8, r4
 801e11c:	44b8      	add	r8, r7
 801e11e:	44c4      	add	ip, r8
 801e120:	4463      	add	r3, ip
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	18d3      	adds	r3, r2, r3
 801e126:	3b30      	subs	r3, #48	; 0x30
 801e128:	2208      	movs	r2, #8
 801e12a:	18ba      	adds	r2, r7, r2
 801e12c:	1812      	adds	r2, r2, r0
 801e12e:	1852      	adds	r2, r2, r1
 801e130:	6013      	str	r3, [r2, #0]
      goto again;
 801e132:	e6f0      	b.n	801df16 <tiny_vfscanf+0x13a>
      flags |= LONG;
 801e134:	218d      	movs	r1, #141	; 0x8d
 801e136:	0089      	lsls	r1, r1, #2
 801e138:	2028      	movs	r0, #40	; 0x28
 801e13a:	2308      	movs	r3, #8
 801e13c:	18fb      	adds	r3, r7, r3
 801e13e:	181b      	adds	r3, r3, r0
 801e140:	185b      	adds	r3, r3, r1
 801e142:	681a      	ldr	r2, [r3, #0]
 801e144:	2301      	movs	r3, #1
 801e146:	4313      	orrs	r3, r2
 801e148:	2208      	movs	r2, #8
 801e14a:	18ba      	adds	r2, r7, r2
 801e14c:	1812      	adds	r2, r2, r0
 801e14e:	1852      	adds	r2, r2, r1
 801e150:	6013      	str	r3, [r2, #0]
      c = CT_INT;
 801e152:	2303      	movs	r3, #3
 801e154:	2290      	movs	r2, #144	; 0x90
 801e156:	0092      	lsls	r2, r2, #2
 801e158:	2128      	movs	r1, #40	; 0x28
 801e15a:	468c      	mov	ip, r1
 801e15c:	2108      	movs	r1, #8
 801e15e:	4688      	mov	r8, r1
 801e160:	44b8      	add	r8, r7
 801e162:	44c4      	add	ip, r8
 801e164:	4462      	add	r2, ip
 801e166:	6013      	str	r3, [r2, #0]
      base = 10;
 801e168:	230a      	movs	r3, #10
 801e16a:	228a      	movs	r2, #138	; 0x8a
 801e16c:	0092      	lsls	r2, r2, #2
 801e16e:	2128      	movs	r1, #40	; 0x28
 801e170:	468c      	mov	ip, r1
 801e172:	2108      	movs	r1, #8
 801e174:	4688      	mov	r8, r1
 801e176:	44b8      	add	r8, r7
 801e178:	44c4      	add	ip, r8
 801e17a:	4462      	add	r2, ip
 801e17c:	6013      	str	r3, [r2, #0]
      break;
 801e17e:	e055      	b.n	801e22c <tiny_vfscanf+0x450>
 801e180:	fffffd88 	.word	0xfffffd88
 801e184:	080218ec 	.word	0x080218ec
      c = CT_INT;
 801e188:	2303      	movs	r3, #3
 801e18a:	2290      	movs	r2, #144	; 0x90
 801e18c:	0092      	lsls	r2, r2, #2
 801e18e:	2128      	movs	r1, #40	; 0x28
 801e190:	468c      	mov	ip, r1
 801e192:	2108      	movs	r1, #8
 801e194:	4688      	mov	r8, r1
 801e196:	44b8      	add	r8, r7
 801e198:	44c4      	add	ip, r8
 801e19a:	4462      	add	r2, ip
 801e19c:	6013      	str	r3, [r2, #0]
      flags |= UNSIGNED;
 801e19e:	218d      	movs	r1, #141	; 0x8d
 801e1a0:	0089      	lsls	r1, r1, #2
 801e1a2:	2028      	movs	r0, #40	; 0x28
 801e1a4:	2308      	movs	r3, #8
 801e1a6:	18fb      	adds	r3, r7, r3
 801e1a8:	181b      	adds	r3, r3, r0
 801e1aa:	185b      	adds	r3, r3, r1
 801e1ac:	681a      	ldr	r2, [r3, #0]
 801e1ae:	2380      	movs	r3, #128	; 0x80
 801e1b0:	011b      	lsls	r3, r3, #4
 801e1b2:	4313      	orrs	r3, r2
 801e1b4:	2208      	movs	r2, #8
 801e1b6:	18ba      	adds	r2, r7, r2
 801e1b8:	1812      	adds	r2, r2, r0
 801e1ba:	1852      	adds	r2, r2, r1
 801e1bc:	6013      	str	r3, [r2, #0]
      base = 10;
 801e1be:	230a      	movs	r3, #10
 801e1c0:	228a      	movs	r2, #138	; 0x8a
 801e1c2:	0092      	lsls	r2, r2, #2
 801e1c4:	2128      	movs	r1, #40	; 0x28
 801e1c6:	468c      	mov	ip, r1
 801e1c8:	2108      	movs	r1, #8
 801e1ca:	4688      	mov	r8, r1
 801e1cc:	44b8      	add	r8, r7
 801e1ce:	44c4      	add	ip, r8
 801e1d0:	4462      	add	r2, ip
 801e1d2:	6013      	str	r3, [r2, #0]
      break;
 801e1d4:	e02a      	b.n	801e22c <tiny_vfscanf+0x450>
      c = CT_INT;
 801e1d6:	2303      	movs	r3, #3
 801e1d8:	2290      	movs	r2, #144	; 0x90
 801e1da:	0092      	lsls	r2, r2, #2
 801e1dc:	2128      	movs	r1, #40	; 0x28
 801e1de:	468c      	mov	ip, r1
 801e1e0:	2108      	movs	r1, #8
 801e1e2:	4688      	mov	r8, r1
 801e1e4:	44b8      	add	r8, r7
 801e1e6:	44c4      	add	ip, r8
 801e1e8:	4462      	add	r2, ip
 801e1ea:	6013      	str	r3, [r2, #0]
      flags |= UNSIGNED;
 801e1ec:	218d      	movs	r1, #141	; 0x8d
 801e1ee:	0089      	lsls	r1, r1, #2
 801e1f0:	2028      	movs	r0, #40	; 0x28
 801e1f2:	2308      	movs	r3, #8
 801e1f4:	18fb      	adds	r3, r7, r3
 801e1f6:	181b      	adds	r3, r3, r0
 801e1f8:	185b      	adds	r3, r3, r1
 801e1fa:	681a      	ldr	r2, [r3, #0]
 801e1fc:	2380      	movs	r3, #128	; 0x80
 801e1fe:	011b      	lsls	r3, r3, #4
 801e200:	4313      	orrs	r3, r2
 801e202:	2208      	movs	r2, #8
 801e204:	18ba      	adds	r2, r7, r2
 801e206:	1812      	adds	r2, r2, r0
 801e208:	1852      	adds	r2, r2, r1
 801e20a:	6013      	str	r3, [r2, #0]
      base = 16;
 801e20c:	2310      	movs	r3, #16
 801e20e:	228a      	movs	r2, #138	; 0x8a
 801e210:	0092      	lsls	r2, r2, #2
 801e212:	2128      	movs	r1, #40	; 0x28
 801e214:	468c      	mov	ip, r1
 801e216:	2108      	movs	r1, #8
 801e218:	4688      	mov	r8, r1
 801e21a:	44b8      	add	r8, r7
 801e21c:	44c4      	add	ip, r8
 801e21e:	4462      	add	r2, ip
 801e220:	6013      	str	r3, [r2, #0]
      break;
 801e222:	e003      	b.n	801e22c <tiny_vfscanf+0x450>
      return (EOF);
 801e224:	2301      	movs	r3, #1
 801e226:	425b      	negs	r3, r3
 801e228:	e3a0      	b.n	801e96c <tiny_vfscanf+0xb90>
      break;
 801e22a:	46c0      	nop			; (mov r8, r8)
    }

    /*
     * We have a conversion that requires input.
     */
    if (fp_r <= 0 && __srefill(fp))
 801e22c:	2388      	movs	r3, #136	; 0x88
 801e22e:	009b      	lsls	r3, r3, #2
 801e230:	2228      	movs	r2, #40	; 0x28
 801e232:	4694      	mov	ip, r2
 801e234:	2208      	movs	r2, #8
 801e236:	4690      	mov	r8, r2
 801e238:	44b8      	add	r8, r7
 801e23a:	44c4      	add	ip, r8
 801e23c:	4463      	add	r3, ip
 801e23e:	681b      	ldr	r3, [r3, #0]
 801e240:	2b00      	cmp	r3, #0
 801e242:	dc00      	bgt.n	801e246 <tiny_vfscanf+0x46a>
 801e244:	e371      	b.n	801e92a <tiny_vfscanf+0xb4e>
#endif
    
    /*
     * Do the conversion.
     */
    switch (c) {
 801e246:	2390      	movs	r3, #144	; 0x90
 801e248:	009b      	lsls	r3, r3, #2
 801e24a:	2228      	movs	r2, #40	; 0x28
 801e24c:	4694      	mov	ip, r2
 801e24e:	2208      	movs	r2, #8
 801e250:	4690      	mov	r8, r2
 801e252:	44b8      	add	r8, r7
 801e254:	44c4      	add	ip, r8
 801e256:	4463      	add	r3, ip
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	2b03      	cmp	r3, #3
 801e25c:	d000      	beq.n	801e260 <tiny_vfscanf+0x484>
 801e25e:	e60c      	b.n	801de7a <tiny_vfscanf+0x9e>
#ifdef hardway
      if (width == 0 || width > sizeof(buf) - 1)
        width = sizeof(buf) - 1;
#else
      /* size_t is unsigned, hence this optimisation */
      if (--width > sizeof(buf) - 2)
 801e260:	218f      	movs	r1, #143	; 0x8f
 801e262:	0089      	lsls	r1, r1, #2
 801e264:	2028      	movs	r0, #40	; 0x28
 801e266:	2308      	movs	r3, #8
 801e268:	18fb      	adds	r3, r7, r3
 801e26a:	181b      	adds	r3, r3, r0
 801e26c:	185b      	adds	r3, r3, r1
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	3b01      	subs	r3, #1
 801e272:	2208      	movs	r2, #8
 801e274:	18ba      	adds	r2, r7, r2
 801e276:	1812      	adds	r2, r2, r0
 801e278:	1852      	adds	r2, r2, r1
 801e27a:	6013      	str	r3, [r2, #0]
 801e27c:	2308      	movs	r3, #8
 801e27e:	18fb      	adds	r3, r7, r3
 801e280:	181b      	adds	r3, r3, r0
 801e282:	185b      	adds	r3, r3, r1
 801e284:	681a      	ldr	r2, [r3, #0]
 801e286:	2380      	movs	r3, #128	; 0x80
 801e288:	009b      	lsls	r3, r3, #2
 801e28a:	429a      	cmp	r2, r3
 801e28c:	d305      	bcc.n	801e29a <tiny_vfscanf+0x4be>
        width = sizeof(buf) - 2;
 801e28e:	4bd3      	ldr	r3, [pc, #844]	; (801e5dc <tiny_vfscanf+0x800>)
 801e290:	2208      	movs	r2, #8
 801e292:	18ba      	adds	r2, r7, r2
 801e294:	1812      	adds	r2, r2, r0
 801e296:	1852      	adds	r2, r2, r1
 801e298:	6013      	str	r3, [r2, #0]
      width++;
 801e29a:	228f      	movs	r2, #143	; 0x8f
 801e29c:	0092      	lsls	r2, r2, #2
 801e29e:	2028      	movs	r0, #40	; 0x28
 801e2a0:	2308      	movs	r3, #8
 801e2a2:	18fb      	adds	r3, r7, r3
 801e2a4:	181b      	adds	r3, r3, r0
 801e2a6:	189b      	adds	r3, r3, r2
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	3301      	adds	r3, #1
 801e2ac:	2128      	movs	r1, #40	; 0x28
 801e2ae:	468c      	mov	ip, r1
 801e2b0:	2108      	movs	r1, #8
 801e2b2:	4688      	mov	r8, r1
 801e2b4:	44b8      	add	r8, r7
 801e2b6:	44c4      	add	ip, r8
 801e2b8:	4462      	add	r2, ip
 801e2ba:	6013      	str	r3, [r2, #0]
#endif

#ifdef TINY_NO_OX
      flags |= SIGNOK | NDIGITS;
 801e2bc:	218d      	movs	r1, #141	; 0x8d
 801e2be:	0089      	lsls	r1, r1, #2
 801e2c0:	2308      	movs	r3, #8
 801e2c2:	18fb      	adds	r3, r7, r3
 801e2c4:	181b      	adds	r3, r3, r0
 801e2c6:	185b      	adds	r3, r3, r1
 801e2c8:	681a      	ldr	r2, [r3, #0]
 801e2ca:	23a0      	movs	r3, #160	; 0xa0
 801e2cc:	01db      	lsls	r3, r3, #7
 801e2ce:	4313      	orrs	r3, r2
 801e2d0:	2208      	movs	r2, #8
 801e2d2:	18ba      	adds	r2, r7, r2
 801e2d4:	1812      	adds	r2, r2, r0
 801e2d6:	1852      	adds	r2, r2, r1
 801e2d8:	6013      	str	r3, [r2, #0]
#else
      flags |= SIGNOK | NDIGITS | NZDIGITS;
#endif
      
      sign_minus = 0;
 801e2da:	2300      	movs	r3, #0
 801e2dc:	2285      	movs	r2, #133	; 0x85
 801e2de:	0092      	lsls	r2, r2, #2
 801e2e0:	2128      	movs	r1, #40	; 0x28
 801e2e2:	468c      	mov	ip, r1
 801e2e4:	2108      	movs	r1, #8
 801e2e6:	4688      	mov	r8, r1
 801e2e8:	44b8      	add	r8, r7
 801e2ea:	44c4      	add	ip, r8
 801e2ec:	4462      	add	r2, ip
 801e2ee:	6013      	str	r3, [r2, #0]
      value = 0;
 801e2f0:	2200      	movs	r2, #0
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	2186      	movs	r1, #134	; 0x86
 801e2f6:	0089      	lsls	r1, r1, #2
 801e2f8:	2028      	movs	r0, #40	; 0x28
 801e2fa:	4684      	mov	ip, r0
 801e2fc:	2008      	movs	r0, #8
 801e2fe:	4680      	mov	r8, r0
 801e300:	44b8      	add	r8, r7
 801e302:	44c4      	add	ip, r8
 801e304:	4461      	add	r1, ip
 801e306:	600a      	str	r2, [r1, #0]
 801e308:	604b      	str	r3, [r1, #4]
      for (p = buf; width; width--) {
 801e30a:	2310      	movs	r3, #16
 801e30c:	2228      	movs	r2, #40	; 0x28
 801e30e:	4694      	mov	ip, r2
 801e310:	2208      	movs	r2, #8
 801e312:	4690      	mov	r8, r2
 801e314:	44b8      	add	r8, r7
 801e316:	44c4      	add	ip, r8
 801e318:	4463      	add	r3, ip
 801e31a:	228e      	movs	r2, #142	; 0x8e
 801e31c:	0092      	lsls	r2, r2, #2
 801e31e:	2128      	movs	r1, #40	; 0x28
 801e320:	468c      	mov	ip, r1
 801e322:	2108      	movs	r1, #8
 801e324:	4688      	mov	r8, r1
 801e326:	44b8      	add	r8, r7
 801e328:	44c4      	add	ip, r8
 801e32a:	4462      	add	r2, ip
 801e32c:	6013      	str	r3, [r2, #0]
 801e32e:	e1af      	b.n	801e690 <tiny_vfscanf+0x8b4>
        c = *fp_p;
 801e330:	2389      	movs	r3, #137	; 0x89
 801e332:	009b      	lsls	r3, r3, #2
 801e334:	2228      	movs	r2, #40	; 0x28
 801e336:	4694      	mov	ip, r2
 801e338:	2208      	movs	r2, #8
 801e33a:	4690      	mov	r8, r2
 801e33c:	44b8      	add	r8, r7
 801e33e:	44c4      	add	ip, r8
 801e340:	4463      	add	r3, ip
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	781b      	ldrb	r3, [r3, #0]
 801e346:	2290      	movs	r2, #144	; 0x90
 801e348:	0092      	lsls	r2, r2, #2
 801e34a:	2028      	movs	r0, #40	; 0x28
 801e34c:	2108      	movs	r1, #8
 801e34e:	1879      	adds	r1, r7, r1
 801e350:	1809      	adds	r1, r1, r0
 801e352:	1889      	adds	r1, r1, r2
 801e354:	600b      	str	r3, [r1, #0]
 801e356:	2308      	movs	r3, #8
 801e358:	18fb      	adds	r3, r7, r3
 801e35a:	181b      	adds	r3, r3, r0
 801e35c:	189b      	adds	r3, r3, r2
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	3b2b      	subs	r3, #43	; 0x2b
 801e362:	2b3b      	cmp	r3, #59	; 0x3b
 801e364:	d900      	bls.n	801e368 <tiny_vfscanf+0x58c>
 801e366:	e1a1      	b.n	801e6ac <tiny_vfscanf+0x8d0>
 801e368:	009a      	lsls	r2, r3, #2
 801e36a:	4b9d      	ldr	r3, [pc, #628]	; (801e5e0 <tiny_vfscanf+0x804>)
 801e36c:	18d3      	adds	r3, r2, r3
 801e36e:	681b      	ldr	r3, [r3, #0]
 801e370:	469f      	mov	pc, r3
        /* we only support base 10 and 16 */
        case '1': case '2': case '3':
        case '4': case '5': case '6': case '7':
        case '8': case '9':
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 801e372:	218d      	movs	r1, #141	; 0x8d
 801e374:	0089      	lsls	r1, r1, #2
 801e376:	2028      	movs	r0, #40	; 0x28
 801e378:	2308      	movs	r3, #8
 801e37a:	18fb      	adds	r3, r7, r3
 801e37c:	181b      	adds	r3, r3, r0
 801e37e:	185b      	adds	r3, r3, r1
 801e380:	681a      	ldr	r2, [r3, #0]
 801e382:	4b98      	ldr	r3, [pc, #608]	; (801e5e4 <tiny_vfscanf+0x808>)
 801e384:	4013      	ands	r3, r2
 801e386:	2208      	movs	r2, #8
 801e388:	18ba      	adds	r2, r7, r2
 801e38a:	1812      	adds	r2, r2, r0
 801e38c:	1852      	adds	r2, r2, r1
 801e38e:	6013      	str	r3, [r2, #0]
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - '0';
 801e390:	238a      	movs	r3, #138	; 0x8a
 801e392:	009b      	lsls	r3, r3, #2
 801e394:	2228      	movs	r2, #40	; 0x28
 801e396:	4694      	mov	ip, r2
 801e398:	2208      	movs	r2, #8
 801e39a:	4690      	mov	r8, r2
 801e39c:	44b8      	add	r8, r7
 801e39e:	44c4      	add	ip, r8
 801e3a0:	4463      	add	r3, ip
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	62bb      	str	r3, [r7, #40]	; 0x28
 801e3a6:	17db      	asrs	r3, r3, #31
 801e3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e3aa:	2686      	movs	r6, #134	; 0x86
 801e3ac:	00b6      	lsls	r6, r6, #2
 801e3ae:	0004      	movs	r4, r0
 801e3b0:	2308      	movs	r3, #8
 801e3b2:	18fb      	adds	r3, r7, r3
 801e3b4:	181b      	adds	r3, r3, r0
 801e3b6:	199b      	adds	r3, r3, r6
 801e3b8:	681a      	ldr	r2, [r3, #0]
 801e3ba:	685b      	ldr	r3, [r3, #4]
 801e3bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e3be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e3c0:	f7e2 f87e 	bl	80004c0 <__aeabi_lmul>
 801e3c4:	0002      	movs	r2, r0
 801e3c6:	000b      	movs	r3, r1
 801e3c8:	0010      	movs	r0, r2
 801e3ca:	0019      	movs	r1, r3
 801e3cc:	2390      	movs	r3, #144	; 0x90
 801e3ce:	009b      	lsls	r3, r3, #2
 801e3d0:	2228      	movs	r2, #40	; 0x28
 801e3d2:	4694      	mov	ip, r2
 801e3d4:	2208      	movs	r2, #8
 801e3d6:	4690      	mov	r8, r2
 801e3d8:	44b8      	add	r8, r7
 801e3da:	44c4      	add	ip, r8
 801e3dc:	4463      	add	r3, ip
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	603b      	str	r3, [r7, #0]
 801e3e2:	17db      	asrs	r3, r3, #31
 801e3e4:	607b      	str	r3, [r7, #4]
 801e3e6:	683a      	ldr	r2, [r7, #0]
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	1880      	adds	r0, r0, r2
 801e3ec:	4159      	adcs	r1, r3
 801e3ee:	2230      	movs	r2, #48	; 0x30
 801e3f0:	4252      	negs	r2, r2
 801e3f2:	17d3      	asrs	r3, r2, #31
 801e3f4:	1812      	adds	r2, r2, r0
 801e3f6:	414b      	adcs	r3, r1
 801e3f8:	0020      	movs	r0, r4
 801e3fa:	2108      	movs	r1, #8
 801e3fc:	1879      	adds	r1, r7, r1
 801e3fe:	1809      	adds	r1, r1, r0
 801e400:	1989      	adds	r1, r1, r6
 801e402:	600a      	str	r2, [r1, #0]
 801e404:	604b      	str	r3, [r1, #4]
          goto ok;
 801e406:	e0f1      	b.n	801e5ec <tiny_vfscanf+0x810>
          
        /* letters ok iff hex */
        case 'A': case 'B': case 'C':
        case 'D': case 'E': case 'F':
          /* no need to fix base here */
          if (base <= 10)
 801e408:	218a      	movs	r1, #138	; 0x8a
 801e40a:	0089      	lsls	r1, r1, #2
 801e40c:	2628      	movs	r6, #40	; 0x28
 801e40e:	2308      	movs	r3, #8
 801e410:	18fb      	adds	r3, r7, r3
 801e412:	199b      	adds	r3, r3, r6
 801e414:	185b      	adds	r3, r3, r1
 801e416:	681b      	ldr	r3, [r3, #0]
 801e418:	2b0a      	cmp	r3, #10
 801e41a:	dc00      	bgt.n	801e41e <tiny_vfscanf+0x642>
 801e41c:	e0d7      	b.n	801e5ce <tiny_vfscanf+0x7f2>
            break;  /* not legal here */
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 801e41e:	208d      	movs	r0, #141	; 0x8d
 801e420:	0080      	lsls	r0, r0, #2
 801e422:	2308      	movs	r3, #8
 801e424:	18fb      	adds	r3, r7, r3
 801e426:	199b      	adds	r3, r3, r6
 801e428:	181b      	adds	r3, r3, r0
 801e42a:	681a      	ldr	r2, [r3, #0]
 801e42c:	4b6d      	ldr	r3, [pc, #436]	; (801e5e4 <tiny_vfscanf+0x808>)
 801e42e:	4013      	ands	r3, r2
 801e430:	2208      	movs	r2, #8
 801e432:	18ba      	adds	r2, r7, r2
 801e434:	1992      	adds	r2, r2, r6
 801e436:	1812      	adds	r2, r2, r0
 801e438:	6013      	str	r3, [r2, #0]
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'A' + 10;
 801e43a:	0032      	movs	r2, r6
 801e43c:	2308      	movs	r3, #8
 801e43e:	18fb      	adds	r3, r7, r3
 801e440:	199b      	adds	r3, r3, r6
 801e442:	185b      	adds	r3, r3, r1
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	623b      	str	r3, [r7, #32]
 801e448:	17db      	asrs	r3, r3, #31
 801e44a:	627b      	str	r3, [r7, #36]	; 0x24
 801e44c:	2686      	movs	r6, #134	; 0x86
 801e44e:	00b6      	lsls	r6, r6, #2
 801e450:	0014      	movs	r4, r2
 801e452:	2308      	movs	r3, #8
 801e454:	18fb      	adds	r3, r7, r3
 801e456:	189b      	adds	r3, r3, r2
 801e458:	199b      	adds	r3, r3, r6
 801e45a:	681a      	ldr	r2, [r3, #0]
 801e45c:	685b      	ldr	r3, [r3, #4]
 801e45e:	6a38      	ldr	r0, [r7, #32]
 801e460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e462:	f7e2 f82d 	bl	80004c0 <__aeabi_lmul>
 801e466:	0002      	movs	r2, r0
 801e468:	000b      	movs	r3, r1
 801e46a:	0010      	movs	r0, r2
 801e46c:	0019      	movs	r1, r3
 801e46e:	2390      	movs	r3, #144	; 0x90
 801e470:	009b      	lsls	r3, r3, #2
 801e472:	2228      	movs	r2, #40	; 0x28
 801e474:	4694      	mov	ip, r2
 801e476:	2208      	movs	r2, #8
 801e478:	4690      	mov	r8, r2
 801e47a:	44b8      	add	r8, r7
 801e47c:	44c4      	add	ip, r8
 801e47e:	4463      	add	r3, ip
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	61bb      	str	r3, [r7, #24]
 801e484:	17db      	asrs	r3, r3, #31
 801e486:	61fb      	str	r3, [r7, #28]
 801e488:	69ba      	ldr	r2, [r7, #24]
 801e48a:	69fb      	ldr	r3, [r7, #28]
 801e48c:	1880      	adds	r0, r0, r2
 801e48e:	4159      	adcs	r1, r3
 801e490:	2237      	movs	r2, #55	; 0x37
 801e492:	4252      	negs	r2, r2
 801e494:	17d3      	asrs	r3, r2, #31
 801e496:	1812      	adds	r2, r2, r0
 801e498:	414b      	adcs	r3, r1
 801e49a:	0021      	movs	r1, r4
 801e49c:	2008      	movs	r0, #8
 801e49e:	4684      	mov	ip, r0
 801e4a0:	44bc      	add	ip, r7
 801e4a2:	4461      	add	r1, ip
 801e4a4:	1989      	adds	r1, r1, r6
 801e4a6:	600a      	str	r2, [r1, #0]
 801e4a8:	604b      	str	r3, [r1, #4]
          goto ok;          
 801e4aa:	e09f      	b.n	801e5ec <tiny_vfscanf+0x810>
        
        case 'a': case 'b': case 'c':
        case 'd': case 'e': case 'f':
          /* no need to fix base here */
          if (base <= 10)
 801e4ac:	218a      	movs	r1, #138	; 0x8a
 801e4ae:	0089      	lsls	r1, r1, #2
 801e4b0:	2628      	movs	r6, #40	; 0x28
 801e4b2:	2308      	movs	r3, #8
 801e4b4:	18fb      	adds	r3, r7, r3
 801e4b6:	199b      	adds	r3, r3, r6
 801e4b8:	185b      	adds	r3, r3, r1
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	2b0a      	cmp	r3, #10
 801e4be:	dc00      	bgt.n	801e4c2 <tiny_vfscanf+0x6e6>
 801e4c0:	e087      	b.n	801e5d2 <tiny_vfscanf+0x7f6>
            break;  /* not legal here */
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 801e4c2:	208d      	movs	r0, #141	; 0x8d
 801e4c4:	0080      	lsls	r0, r0, #2
 801e4c6:	2308      	movs	r3, #8
 801e4c8:	18fb      	adds	r3, r7, r3
 801e4ca:	199b      	adds	r3, r3, r6
 801e4cc:	181b      	adds	r3, r3, r0
 801e4ce:	681a      	ldr	r2, [r3, #0]
 801e4d0:	4b44      	ldr	r3, [pc, #272]	; (801e5e4 <tiny_vfscanf+0x808>)
 801e4d2:	4013      	ands	r3, r2
 801e4d4:	2208      	movs	r2, #8
 801e4d6:	18ba      	adds	r2, r7, r2
 801e4d8:	1992      	adds	r2, r2, r6
 801e4da:	1812      	adds	r2, r2, r0
 801e4dc:	6013      	str	r3, [r2, #0]
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'a' + 10;
 801e4de:	0032      	movs	r2, r6
 801e4e0:	2308      	movs	r3, #8
 801e4e2:	18fb      	adds	r3, r7, r3
 801e4e4:	199b      	adds	r3, r3, r6
 801e4e6:	185b      	adds	r3, r3, r1
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	613b      	str	r3, [r7, #16]
 801e4ec:	17db      	asrs	r3, r3, #31
 801e4ee:	617b      	str	r3, [r7, #20]
 801e4f0:	2686      	movs	r6, #134	; 0x86
 801e4f2:	00b6      	lsls	r6, r6, #2
 801e4f4:	0014      	movs	r4, r2
 801e4f6:	2308      	movs	r3, #8
 801e4f8:	18fb      	adds	r3, r7, r3
 801e4fa:	189b      	adds	r3, r3, r2
 801e4fc:	199b      	adds	r3, r3, r6
 801e4fe:	681a      	ldr	r2, [r3, #0]
 801e500:	685b      	ldr	r3, [r3, #4]
 801e502:	6938      	ldr	r0, [r7, #16]
 801e504:	6979      	ldr	r1, [r7, #20]
 801e506:	f7e1 ffdb 	bl	80004c0 <__aeabi_lmul>
 801e50a:	0002      	movs	r2, r0
 801e50c:	000b      	movs	r3, r1
 801e50e:	0010      	movs	r0, r2
 801e510:	0019      	movs	r1, r3
 801e512:	2390      	movs	r3, #144	; 0x90
 801e514:	009b      	lsls	r3, r3, #2
 801e516:	2228      	movs	r2, #40	; 0x28
 801e518:	4694      	mov	ip, r2
 801e51a:	2208      	movs	r2, #8
 801e51c:	4690      	mov	r8, r2
 801e51e:	44b8      	add	r8, r7
 801e520:	44c4      	add	ip, r8
 801e522:	4463      	add	r3, ip
 801e524:	681b      	ldr	r3, [r3, #0]
 801e526:	60bb      	str	r3, [r7, #8]
 801e528:	17db      	asrs	r3, r3, #31
 801e52a:	60fb      	str	r3, [r7, #12]
 801e52c:	68ba      	ldr	r2, [r7, #8]
 801e52e:	68fb      	ldr	r3, [r7, #12]
 801e530:	1880      	adds	r0, r0, r2
 801e532:	4159      	adcs	r1, r3
 801e534:	2257      	movs	r2, #87	; 0x57
 801e536:	4252      	negs	r2, r2
 801e538:	17d3      	asrs	r3, r2, #31
 801e53a:	1812      	adds	r2, r2, r0
 801e53c:	414b      	adcs	r3, r1
 801e53e:	0021      	movs	r1, r4
 801e540:	2008      	movs	r0, #8
 801e542:	4684      	mov	ip, r0
 801e544:	44bc      	add	ip, r7
 801e546:	4461      	add	r1, ip
 801e548:	1989      	adds	r1, r1, r6
 801e54a:	600a      	str	r2, [r1, #0]
 801e54c:	604b      	str	r3, [r1, #4]
          goto ok;
 801e54e:	e04d      	b.n	801e5ec <tiny_vfscanf+0x810>

        /* sign ok only as first character */
        case '-':
          if (!(flags & HAVESIGN)) {
 801e550:	238d      	movs	r3, #141	; 0x8d
 801e552:	009b      	lsls	r3, r3, #2
 801e554:	2228      	movs	r2, #40	; 0x28
 801e556:	4694      	mov	ip, r2
 801e558:	2208      	movs	r2, #8
 801e55a:	4690      	mov	r8, r2
 801e55c:	44b8      	add	r8, r7
 801e55e:	44c4      	add	ip, r8
 801e560:	4463      	add	r3, ip
 801e562:	681a      	ldr	r2, [r3, #0]
 801e564:	2380      	movs	r3, #128	; 0x80
 801e566:	019b      	lsls	r3, r3, #6
 801e568:	4013      	ands	r3, r2
 801e56a:	d10a      	bne.n	801e582 <tiny_vfscanf+0x7a6>
            sign_minus = 1;
 801e56c:	2301      	movs	r3, #1
 801e56e:	2285      	movs	r2, #133	; 0x85
 801e570:	0092      	lsls	r2, r2, #2
 801e572:	2128      	movs	r1, #40	; 0x28
 801e574:	468c      	mov	ip, r1
 801e576:	2108      	movs	r1, #8
 801e578:	4688      	mov	r8, r1
 801e57a:	44b8      	add	r8, r7
 801e57c:	44c4      	add	ip, r8
 801e57e:	4462      	add	r2, ip
 801e580:	6013      	str	r3, [r2, #0]
          }
          /* FALLTHROUGH */
        case '+':
          if (flags & SIGNOK) {
 801e582:	218d      	movs	r1, #141	; 0x8d
 801e584:	0089      	lsls	r1, r1, #2
 801e586:	2028      	movs	r0, #40	; 0x28
 801e588:	2308      	movs	r3, #8
 801e58a:	18fb      	adds	r3, r7, r3
 801e58c:	181b      	adds	r3, r3, r0
 801e58e:	185b      	adds	r3, r3, r1
 801e590:	681a      	ldr	r2, [r3, #0]
 801e592:	2380      	movs	r3, #128	; 0x80
 801e594:	015b      	lsls	r3, r3, #5
 801e596:	4013      	ands	r3, r2
 801e598:	d01d      	beq.n	801e5d6 <tiny_vfscanf+0x7fa>
            flags &= ~SIGNOK;
 801e59a:	2308      	movs	r3, #8
 801e59c:	18fb      	adds	r3, r7, r3
 801e59e:	181b      	adds	r3, r3, r0
 801e5a0:	185b      	adds	r3, r3, r1
 801e5a2:	681a      	ldr	r2, [r3, #0]
 801e5a4:	4b10      	ldr	r3, [pc, #64]	; (801e5e8 <tiny_vfscanf+0x80c>)
 801e5a6:	4013      	ands	r3, r2
 801e5a8:	2208      	movs	r2, #8
 801e5aa:	18ba      	adds	r2, r7, r2
 801e5ac:	1812      	adds	r2, r2, r0
 801e5ae:	1852      	adds	r2, r2, r1
 801e5b0:	6013      	str	r3, [r2, #0]
            flags |= HAVESIGN;
 801e5b2:	2308      	movs	r3, #8
 801e5b4:	18fb      	adds	r3, r7, r3
 801e5b6:	181b      	adds	r3, r3, r0
 801e5b8:	185b      	adds	r3, r3, r1
 801e5ba:	681a      	ldr	r2, [r3, #0]
 801e5bc:	2380      	movs	r3, #128	; 0x80
 801e5be:	019b      	lsls	r3, r3, #6
 801e5c0:	4313      	orrs	r3, r2
 801e5c2:	2208      	movs	r2, #8
 801e5c4:	18ba      	adds	r2, r7, r2
 801e5c6:	1812      	adds	r2, r2, r0
 801e5c8:	1852      	adds	r2, r2, r1
 801e5ca:	6013      	str	r3, [r2, #0]
            goto ok;
 801e5cc:	e00e      	b.n	801e5ec <tiny_vfscanf+0x810>
            break;  /* not legal here */
 801e5ce:	46c0      	nop			; (mov r8, r8)
 801e5d0:	e06c      	b.n	801e6ac <tiny_vfscanf+0x8d0>
            break;  /* not legal here */
 801e5d2:	46c0      	nop			; (mov r8, r8)
 801e5d4:	e06a      	b.n	801e6ac <tiny_vfscanf+0x8d0>
          }
          break;
 801e5d6:	46c0      	nop			; (mov r8, r8)

        /*
         * If we got here, c is not a legal character
         * for a number.  Stop accumulating digits.
         */
        break;
 801e5d8:	e068      	b.n	801e6ac <tiny_vfscanf+0x8d0>
 801e5da:	46c0      	nop			; (mov r8, r8)
 801e5dc:	000001ff 	.word	0x000001ff
 801e5e0:	080219c0 	.word	0x080219c0
 801e5e4:	ffffafff 	.word	0xffffafff
 801e5e8:	ffffefff 	.word	0xffffefff
    ok:
        /*
         * c is legal: store it and look at the next.
         */
        *p++ = c;
 801e5ec:	218e      	movs	r1, #142	; 0x8e
 801e5ee:	0089      	lsls	r1, r1, #2
 801e5f0:	2028      	movs	r0, #40	; 0x28
 801e5f2:	2308      	movs	r3, #8
 801e5f4:	18fb      	adds	r3, r7, r3
 801e5f6:	181b      	adds	r3, r3, r0
 801e5f8:	185b      	adds	r3, r3, r1
 801e5fa:	681a      	ldr	r2, [r3, #0]
 801e5fc:	1c53      	adds	r3, r2, #1
 801e5fe:	2628      	movs	r6, #40	; 0x28
 801e600:	46b4      	mov	ip, r6
 801e602:	2408      	movs	r4, #8
 801e604:	46a0      	mov	r8, r4
 801e606:	44b8      	add	r8, r7
 801e608:	44c4      	add	ip, r8
 801e60a:	4461      	add	r1, ip
 801e60c:	600b      	str	r3, [r1, #0]
 801e60e:	2390      	movs	r3, #144	; 0x90
 801e610:	009b      	lsls	r3, r3, #2
 801e612:	2128      	movs	r1, #40	; 0x28
 801e614:	468c      	mov	ip, r1
 801e616:	2108      	movs	r1, #8
 801e618:	4688      	mov	r8, r1
 801e61a:	44b8      	add	r8, r7
 801e61c:	44c4      	add	ip, r8
 801e61e:	4463      	add	r3, ip
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	b2db      	uxtb	r3, r3
 801e624:	7013      	strb	r3, [r2, #0]
        if (--fp_r > 0)
 801e626:	2288      	movs	r2, #136	; 0x88
 801e628:	0092      	lsls	r2, r2, #2
 801e62a:	2308      	movs	r3, #8
 801e62c:	18fb      	adds	r3, r7, r3
 801e62e:	181b      	adds	r3, r3, r0
 801e630:	189b      	adds	r3, r3, r2
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	3b01      	subs	r3, #1
 801e636:	2108      	movs	r1, #8
 801e638:	1879      	adds	r1, r7, r1
 801e63a:	1809      	adds	r1, r1, r0
 801e63c:	1889      	adds	r1, r1, r2
 801e63e:	600b      	str	r3, [r1, #0]
 801e640:	0001      	movs	r1, r0
 801e642:	2308      	movs	r3, #8
 801e644:	18fb      	adds	r3, r7, r3
 801e646:	181b      	adds	r3, r3, r0
 801e648:	189b      	adds	r3, r3, r2
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	dd2f      	ble.n	801e6b0 <tiny_vfscanf+0x8d4>
          fp_p++;
 801e650:	2289      	movs	r2, #137	; 0x89
 801e652:	0092      	lsls	r2, r2, #2
 801e654:	2308      	movs	r3, #8
 801e656:	18fb      	adds	r3, r7, r3
 801e658:	185b      	adds	r3, r3, r1
 801e65a:	189b      	adds	r3, r3, r2
 801e65c:	681b      	ldr	r3, [r3, #0]
 801e65e:	3301      	adds	r3, #1
 801e660:	2028      	movs	r0, #40	; 0x28
 801e662:	4684      	mov	ip, r0
 801e664:	2008      	movs	r0, #8
 801e666:	4680      	mov	r8, r0
 801e668:	44b8      	add	r8, r7
 801e66a:	44c4      	add	ip, r8
 801e66c:	4462      	add	r2, ip
 801e66e:	6013      	str	r3, [r2, #0]
      for (p = buf; width; width--) {
 801e670:	228f      	movs	r2, #143	; 0x8f
 801e672:	0092      	lsls	r2, r2, #2
 801e674:	2308      	movs	r3, #8
 801e676:	18fb      	adds	r3, r7, r3
 801e678:	185b      	adds	r3, r3, r1
 801e67a:	189b      	adds	r3, r3, r2
 801e67c:	681b      	ldr	r3, [r3, #0]
 801e67e:	3b01      	subs	r3, #1
 801e680:	2128      	movs	r1, #40	; 0x28
 801e682:	468c      	mov	ip, r1
 801e684:	2108      	movs	r1, #8
 801e686:	4688      	mov	r8, r1
 801e688:	44b8      	add	r8, r7
 801e68a:	44c4      	add	ip, r8
 801e68c:	4462      	add	r2, ip
 801e68e:	6013      	str	r3, [r2, #0]
 801e690:	238f      	movs	r3, #143	; 0x8f
 801e692:	009b      	lsls	r3, r3, #2
 801e694:	2228      	movs	r2, #40	; 0x28
 801e696:	4694      	mov	ip, r2
 801e698:	2208      	movs	r2, #8
 801e69a:	4690      	mov	r8, r2
 801e69c:	44b8      	add	r8, r7
 801e69e:	44c4      	add	ip, r8
 801e6a0:	4463      	add	r3, ip
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	d000      	beq.n	801e6aa <tiny_vfscanf+0x8ce>
 801e6a8:	e642      	b.n	801e330 <tiny_vfscanf+0x554>
 801e6aa:	e002      	b.n	801e6b2 <tiny_vfscanf+0x8d6>
        break;
 801e6ac:	46c0      	nop			; (mov r8, r8)
 801e6ae:	e000      	b.n	801e6b2 <tiny_vfscanf+0x8d6>
        else if (__srefill(fp))
          break;    /* EOF */
 801e6b0:	46c0      	nop			; (mov r8, r8)
       * If we had only a sign, it is no good; push
       * back the sign.  If the number ends in `x',
       * it was [sign] '0' 'x', so push back the x
       * and treat it as [sign] '0'.
       */
      if (flags & NDIGITS) {
 801e6b2:	238d      	movs	r3, #141	; 0x8d
 801e6b4:	009b      	lsls	r3, r3, #2
 801e6b6:	2228      	movs	r2, #40	; 0x28
 801e6b8:	4694      	mov	ip, r2
 801e6ba:	2208      	movs	r2, #8
 801e6bc:	4690      	mov	r8, r2
 801e6be:	44b8      	add	r8, r7
 801e6c0:	44c4      	add	ip, r8
 801e6c2:	4463      	add	r3, ip
 801e6c4:	681a      	ldr	r2, [r3, #0]
 801e6c6:	2380      	movs	r3, #128	; 0x80
 801e6c8:	01db      	lsls	r3, r3, #7
 801e6ca:	4013      	ands	r3, r2
 801e6cc:	d060      	beq.n	801e790 <tiny_vfscanf+0x9b4>
        if (p > buf)
 801e6ce:	2310      	movs	r3, #16
 801e6d0:	2228      	movs	r2, #40	; 0x28
 801e6d2:	4694      	mov	ip, r2
 801e6d4:	2208      	movs	r2, #8
 801e6d6:	4690      	mov	r8, r2
 801e6d8:	44b8      	add	r8, r7
 801e6da:	44c4      	add	ip, r8
 801e6dc:	4463      	add	r3, ip
 801e6de:	218e      	movs	r1, #142	; 0x8e
 801e6e0:	0089      	lsls	r1, r1, #2
 801e6e2:	2028      	movs	r0, #40	; 0x28
 801e6e4:	2208      	movs	r2, #8
 801e6e6:	18ba      	adds	r2, r7, r2
 801e6e8:	1812      	adds	r2, r2, r0
 801e6ea:	1852      	adds	r2, r2, r1
 801e6ec:	6812      	ldr	r2, [r2, #0]
 801e6ee:	429a      	cmp	r2, r3
 801e6f0:	d800      	bhi.n	801e6f4 <tiny_vfscanf+0x918>
 801e6f2:	e130      	b.n	801e956 <tiny_vfscanf+0xb7a>
        {
          --c;
 801e6f4:	2290      	movs	r2, #144	; 0x90
 801e6f6:	0092      	lsls	r2, r2, #2
 801e6f8:	2308      	movs	r3, #8
 801e6fa:	18fb      	adds	r3, r7, r3
 801e6fc:	181b      	adds	r3, r3, r0
 801e6fe:	189b      	adds	r3, r3, r2
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	3b01      	subs	r3, #1
 801e704:	0004      	movs	r4, r0
 801e706:	2508      	movs	r5, #8
 801e708:	46ac      	mov	ip, r5
 801e70a:	44bc      	add	ip, r7
 801e70c:	4460      	add	r0, ip
 801e70e:	1880      	adds	r0, r0, r2
 801e710:	6003      	str	r3, [r0, #0]
          --p;
 801e712:	0020      	movs	r0, r4
 801e714:	2308      	movs	r3, #8
 801e716:	18fb      	adds	r3, r7, r3
 801e718:	181b      	adds	r3, r3, r0
 801e71a:	185b      	adds	r3, r3, r1
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	3b01      	subs	r3, #1
 801e720:	2428      	movs	r4, #40	; 0x28
 801e722:	46a4      	mov	ip, r4
 801e724:	2408      	movs	r4, #8
 801e726:	46a0      	mov	r8, r4
 801e728:	44b8      	add	r8, r7
 801e72a:	44c4      	add	ip, r8
 801e72c:	4461      	add	r1, ip
 801e72e:	600b      	str	r3, [r1, #0]
          ungetc(c++, fp);
 801e730:	0001      	movs	r1, r0
 801e732:	2308      	movs	r3, #8
 801e734:	18fb      	adds	r3, r7, r3
 801e736:	185b      	adds	r3, r3, r1
 801e738:	189b      	adds	r3, r3, r2
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	3301      	adds	r3, #1
 801e73e:	2028      	movs	r0, #40	; 0x28
 801e740:	4684      	mov	ip, r0
 801e742:	2008      	movs	r0, #8
 801e744:	4680      	mov	r8, r0
 801e746:	44b8      	add	r8, r7
 801e748:	44c4      	add	ip, r8
 801e74a:	4462      	add	r2, ip
 801e74c:	6013      	str	r3, [r2, #0]
 801e74e:	2289      	movs	r2, #137	; 0x89
 801e750:	0092      	lsls	r2, r2, #2
 801e752:	2308      	movs	r3, #8
 801e754:	18fb      	adds	r3, r7, r3
 801e756:	185b      	adds	r3, r3, r1
 801e758:	189b      	adds	r3, r3, r2
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	3b01      	subs	r3, #1
 801e75e:	2028      	movs	r0, #40	; 0x28
 801e760:	4684      	mov	ip, r0
 801e762:	2008      	movs	r0, #8
 801e764:	4680      	mov	r8, r0
 801e766:	44b8      	add	r8, r7
 801e768:	44c4      	add	ip, r8
 801e76a:	4462      	add	r2, ip
 801e76c:	6013      	str	r3, [r2, #0]
 801e76e:	2288      	movs	r2, #136	; 0x88
 801e770:	0092      	lsls	r2, r2, #2
 801e772:	2308      	movs	r3, #8
 801e774:	18fb      	adds	r3, r7, r3
 801e776:	185b      	adds	r3, r3, r1
 801e778:	189b      	adds	r3, r3, r2
 801e77a:	681b      	ldr	r3, [r3, #0]
 801e77c:	3301      	adds	r3, #1
 801e77e:	2128      	movs	r1, #40	; 0x28
 801e780:	468c      	mov	ip, r1
 801e782:	2108      	movs	r1, #8
 801e784:	4688      	mov	r8, r1
 801e786:	44b8      	add	r8, r7
 801e788:	44c4      	add	ip, r8
 801e78a:	4462      	add	r2, ip
 801e78c:	6013      	str	r3, [r2, #0]
          /* There is a dummy post-increment to 
             avoid an unused value warning */
        }
        goto match_failure;
 801e78e:	e0e2      	b.n	801e956 <tiny_vfscanf+0xb7a>
      {
#else
      if ((flags & SUPPRESS) == 0) {
#endif

        *p = '\0';
 801e790:	238e      	movs	r3, #142	; 0x8e
 801e792:	009b      	lsls	r3, r3, #2
 801e794:	2228      	movs	r2, #40	; 0x28
 801e796:	4694      	mov	ip, r2
 801e798:	2208      	movs	r2, #8
 801e79a:	4690      	mov	r8, r2
 801e79c:	44b8      	add	r8, r7
 801e79e:	44c4      	add	ip, r8
 801e7a0:	4463      	add	r3, ip
 801e7a2:	681a      	ldr	r2, [r3, #0]
 801e7a4:	2300      	movs	r3, #0
 801e7a6:	7013      	strb	r3, [r2, #0]
        if (sign_minus)
 801e7a8:	2385      	movs	r3, #133	; 0x85
 801e7aa:	009b      	lsls	r3, r3, #2
 801e7ac:	2228      	movs	r2, #40	; 0x28
 801e7ae:	4694      	mov	ip, r2
 801e7b0:	2208      	movs	r2, #8
 801e7b2:	4690      	mov	r8, r2
 801e7b4:	44b8      	add	r8, r7
 801e7b6:	44c4      	add	ip, r8
 801e7b8:	4463      	add	r3, ip
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d014      	beq.n	801e7ea <tiny_vfscanf+0xa0e>
          value = -value;
 801e7c0:	2686      	movs	r6, #134	; 0x86
 801e7c2:	00b6      	lsls	r6, r6, #2
 801e7c4:	2128      	movs	r1, #40	; 0x28
 801e7c6:	000c      	movs	r4, r1
 801e7c8:	2308      	movs	r3, #8
 801e7ca:	18fb      	adds	r3, r7, r3
 801e7cc:	185b      	adds	r3, r3, r1
 801e7ce:	199b      	adds	r3, r3, r6
 801e7d0:	6818      	ldr	r0, [r3, #0]
 801e7d2:	6859      	ldr	r1, [r3, #4]
 801e7d4:	2300      	movs	r3, #0
 801e7d6:	4242      	negs	r2, r0
 801e7d8:	418b      	sbcs	r3, r1
 801e7da:	0021      	movs	r1, r4
 801e7dc:	2008      	movs	r0, #8
 801e7de:	4684      	mov	ip, r0
 801e7e0:	44bc      	add	ip, r7
 801e7e2:	4461      	add	r1, ip
 801e7e4:	1989      	adds	r1, r1, r6
 801e7e6:	600a      	str	r2, [r1, #0]
 801e7e8:	604b      	str	r3, [r1, #4]
          *va_arg(ap, size_t *) = value;
        else if (flags & PTRINT)
          *va_arg(ap, ptrdiff_t *) = value;
        else 
#endif
        if (flags & LONG)
 801e7ea:	238d      	movs	r3, #141	; 0x8d
 801e7ec:	009b      	lsls	r3, r3, #2
 801e7ee:	2228      	movs	r2, #40	; 0x28
 801e7f0:	4694      	mov	ip, r2
 801e7f2:	2208      	movs	r2, #8
 801e7f4:	4690      	mov	r8, r2
 801e7f6:	44b8      	add	r8, r7
 801e7f8:	44c4      	add	ip, r8
 801e7fa:	4463      	add	r3, ip
 801e7fc:	681a      	ldr	r2, [r3, #0]
 801e7fe:	2301      	movs	r3, #1
 801e800:	4013      	ands	r3, r2
 801e802:	d00f      	beq.n	801e824 <tiny_vfscanf+0xa48>
          *va_arg(ap, long *) = value;
 801e804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e806:	1d13      	adds	r3, r2, #4
 801e808:	637b      	str	r3, [r7, #52]	; 0x34
 801e80a:	6812      	ldr	r2, [r2, #0]
 801e80c:	2386      	movs	r3, #134	; 0x86
 801e80e:	009b      	lsls	r3, r3, #2
 801e810:	2128      	movs	r1, #40	; 0x28
 801e812:	468c      	mov	ip, r1
 801e814:	2108      	movs	r1, #8
 801e816:	4688      	mov	r8, r1
 801e818:	44b8      	add	r8, r7
 801e81a:	44c4      	add	ip, r8
 801e81c:	4463      	add	r3, ip
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	6013      	str	r3, [r2, #0]
 801e822:	e04e      	b.n	801e8c2 <tiny_vfscanf+0xae6>
        else if (flags & SHORT)
 801e824:	238d      	movs	r3, #141	; 0x8d
 801e826:	009b      	lsls	r3, r3, #2
 801e828:	2228      	movs	r2, #40	; 0x28
 801e82a:	4694      	mov	ip, r2
 801e82c:	2208      	movs	r2, #8
 801e82e:	4690      	mov	r8, r2
 801e830:	44b8      	add	r8, r7
 801e832:	44c4      	add	ip, r8
 801e834:	4463      	add	r3, ip
 801e836:	681a      	ldr	r2, [r3, #0]
 801e838:	2304      	movs	r3, #4
 801e83a:	4013      	ands	r3, r2
 801e83c:	d012      	beq.n	801e864 <tiny_vfscanf+0xa88>
          *va_arg(ap, short *) = value;
 801e83e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e840:	1d13      	adds	r3, r2, #4
 801e842:	637b      	str	r3, [r7, #52]	; 0x34
 801e844:	6811      	ldr	r1, [r2, #0]
 801e846:	2386      	movs	r3, #134	; 0x86
 801e848:	009b      	lsls	r3, r3, #2
 801e84a:	2228      	movs	r2, #40	; 0x28
 801e84c:	4694      	mov	ip, r2
 801e84e:	2208      	movs	r2, #8
 801e850:	4690      	mov	r8, r2
 801e852:	44b8      	add	r8, r7
 801e854:	44c4      	add	ip, r8
 801e856:	4463      	add	r3, ip
 801e858:	681a      	ldr	r2, [r3, #0]
 801e85a:	685b      	ldr	r3, [r3, #4]
 801e85c:	1c13      	adds	r3, r2, #0
 801e85e:	b21b      	sxth	r3, r3
 801e860:	800b      	strh	r3, [r1, #0]
 801e862:	e02e      	b.n	801e8c2 <tiny_vfscanf+0xae6>
        else if (flags & SHORTSHORT)
 801e864:	238d      	movs	r3, #141	; 0x8d
 801e866:	009b      	lsls	r3, r3, #2
 801e868:	2228      	movs	r2, #40	; 0x28
 801e86a:	4694      	mov	ip, r2
 801e86c:	2208      	movs	r2, #8
 801e86e:	4690      	mov	r8, r2
 801e870:	44b8      	add	r8, r7
 801e872:	44c4      	add	ip, r8
 801e874:	4463      	add	r3, ip
 801e876:	681a      	ldr	r2, [r3, #0]
 801e878:	2308      	movs	r3, #8
 801e87a:	4013      	ands	r3, r2
 801e87c:	d012      	beq.n	801e8a4 <tiny_vfscanf+0xac8>
          *va_arg(ap, char *) = value;
 801e87e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e880:	1d13      	adds	r3, r2, #4
 801e882:	637b      	str	r3, [r7, #52]	; 0x34
 801e884:	6811      	ldr	r1, [r2, #0]
 801e886:	2386      	movs	r3, #134	; 0x86
 801e888:	009b      	lsls	r3, r3, #2
 801e88a:	2228      	movs	r2, #40	; 0x28
 801e88c:	4694      	mov	ip, r2
 801e88e:	2208      	movs	r2, #8
 801e890:	4690      	mov	r8, r2
 801e892:	44b8      	add	r8, r7
 801e894:	44c4      	add	ip, r8
 801e896:	4463      	add	r3, ip
 801e898:	681a      	ldr	r2, [r3, #0]
 801e89a:	685b      	ldr	r3, [r3, #4]
 801e89c:	1c13      	adds	r3, r2, #0
 801e89e:	b2db      	uxtb	r3, r3
 801e8a0:	700b      	strb	r3, [r1, #0]
 801e8a2:	e00e      	b.n	801e8c2 <tiny_vfscanf+0xae6>
        else
          *va_arg(ap, int *) = value;
 801e8a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e8a6:	1d13      	adds	r3, r2, #4
 801e8a8:	637b      	str	r3, [r7, #52]	; 0x34
 801e8aa:	6812      	ldr	r2, [r2, #0]
 801e8ac:	2386      	movs	r3, #134	; 0x86
 801e8ae:	009b      	lsls	r3, r3, #2
 801e8b0:	2128      	movs	r1, #40	; 0x28
 801e8b2:	468c      	mov	ip, r1
 801e8b4:	2108      	movs	r1, #8
 801e8b6:	4688      	mov	r8, r1
 801e8b8:	44b8      	add	r8, r7
 801e8ba:	44c4      	add	ip, r8
 801e8bc:	4463      	add	r3, ip
 801e8be:	681b      	ldr	r3, [r3, #0]
 801e8c0:	6013      	str	r3, [r2, #0]
        nassigned++;
 801e8c2:	228c      	movs	r2, #140	; 0x8c
 801e8c4:	0092      	lsls	r2, r2, #2
 801e8c6:	2128      	movs	r1, #40	; 0x28
 801e8c8:	2308      	movs	r3, #8
 801e8ca:	18fb      	adds	r3, r7, r3
 801e8cc:	185b      	adds	r3, r3, r1
 801e8ce:	189b      	adds	r3, r3, r2
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	3301      	adds	r3, #1
 801e8d4:	2028      	movs	r0, #40	; 0x28
 801e8d6:	4684      	mov	ip, r0
 801e8d8:	2008      	movs	r0, #8
 801e8da:	4680      	mov	r8, r0
 801e8dc:	44b8      	add	r8, r7
 801e8de:	44c4      	add	ip, r8
 801e8e0:	4462      	add	r2, ip
 801e8e2:	6013      	str	r3, [r2, #0]
      }
      nread += p - buf;
 801e8e4:	2310      	movs	r3, #16
 801e8e6:	0008      	movs	r0, r1
 801e8e8:	2208      	movs	r2, #8
 801e8ea:	18ba      	adds	r2, r7, r2
 801e8ec:	1852      	adds	r2, r2, r1
 801e8ee:	18d2      	adds	r2, r2, r3
 801e8f0:	238e      	movs	r3, #142	; 0x8e
 801e8f2:	009b      	lsls	r3, r3, #2
 801e8f4:	2128      	movs	r1, #40	; 0x28
 801e8f6:	468c      	mov	ip, r1
 801e8f8:	2108      	movs	r1, #8
 801e8fa:	4688      	mov	r8, r1
 801e8fc:	44b8      	add	r8, r7
 801e8fe:	44c4      	add	ip, r8
 801e900:	4463      	add	r3, ip
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	1a9a      	subs	r2, r3, r2
 801e906:	218b      	movs	r1, #139	; 0x8b
 801e908:	0089      	lsls	r1, r1, #2
 801e90a:	2308      	movs	r3, #8
 801e90c:	18fb      	adds	r3, r7, r3
 801e90e:	181b      	adds	r3, r3, r0
 801e910:	185b      	adds	r3, r3, r1
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	189b      	adds	r3, r3, r2
 801e916:	2208      	movs	r2, #8
 801e918:	18ba      	adds	r2, r7, r2
 801e91a:	1812      	adds	r2, r2, r0
 801e91c:	1852      	adds	r2, r2, r1
 801e91e:	6013      	str	r3, [r2, #0]
      break;
 801e920:	46c0      	nop			; (mov r8, r8)
    c = *fmt++;
 801e922:	f7ff faaa 	bl	801de7a <tiny_vfscanf+0x9e>
        goto input_failure;
 801e926:	46c0      	nop			; (mov r8, r8)
 801e928:	e000      	b.n	801e92c <tiny_vfscanf+0xb50>
      goto input_failure;
 801e92a:	46c0      	nop			; (mov r8, r8)
      break;
#endif /* FLOATING_POINT */
    }
  }
input_failure:
  return (nassigned ? nassigned : -1);
 801e92c:	228c      	movs	r2, #140	; 0x8c
 801e92e:	0092      	lsls	r2, r2, #2
 801e930:	2128      	movs	r1, #40	; 0x28
 801e932:	2308      	movs	r3, #8
 801e934:	18fb      	adds	r3, r7, r3
 801e936:	185b      	adds	r3, r3, r1
 801e938:	189b      	adds	r3, r3, r2
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d005      	beq.n	801e94c <tiny_vfscanf+0xb70>
 801e940:	2308      	movs	r3, #8
 801e942:	18fb      	adds	r3, r7, r3
 801e944:	185b      	adds	r3, r3, r1
 801e946:	189b      	adds	r3, r3, r2
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	e00f      	b.n	801e96c <tiny_vfscanf+0xb90>
 801e94c:	2301      	movs	r3, #1
 801e94e:	425b      	negs	r3, r3
 801e950:	e00c      	b.n	801e96c <tiny_vfscanf+0xb90>
        goto match_failure;
 801e952:	46c0      	nop			; (mov r8, r8)
 801e954:	e000      	b.n	801e958 <tiny_vfscanf+0xb7c>
        goto match_failure;
 801e956:	46c0      	nop			; (mov r8, r8)
match_failure:
  return (nassigned);
 801e958:	238c      	movs	r3, #140	; 0x8c
 801e95a:	009b      	lsls	r3, r3, #2
 801e95c:	2228      	movs	r2, #40	; 0x28
 801e95e:	4694      	mov	ip, r2
 801e960:	2208      	movs	r2, #8
 801e962:	4690      	mov	r8, r2
 801e964:	44b8      	add	r8, r7
 801e966:	44c4      	add	ip, r8
 801e968:	4463      	add	r3, ip
 801e96a:	681b      	ldr	r3, [r3, #0]
}
 801e96c:	0018      	movs	r0, r3
 801e96e:	46bd      	mov	sp, r7
 801e970:	239e      	movs	r3, #158	; 0x9e
 801e972:	009b      	lsls	r3, r3, #2
 801e974:	449d      	add	sp, r3
 801e976:	bc80      	pop	{r7}
 801e978:	46b8      	mov	r8, r7
 801e97a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e97c <tiny_sscanf>:
}
#endif

int
tiny_sscanf(const char *str, const char *fmt, ...)
{
 801e97c:	b40e      	push	{r1, r2, r3}
 801e97e:	b580      	push	{r7, lr}
 801e980:	b085      	sub	sp, #20
 801e982:	af00      	add	r7, sp, #0
 801e984:	6078      	str	r0, [r7, #4]
  int ret;
  va_list ap;
  
  va_start(ap, fmt);
 801e986:	2320      	movs	r3, #32
 801e988:	18fb      	adds	r3, r7, r3
 801e98a:	60bb      	str	r3, [r7, #8]
  ret = tiny_vfscanf(str, fmt, ap);
 801e98c:	68ba      	ldr	r2, [r7, #8]
 801e98e:	69f9      	ldr	r1, [r7, #28]
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	0018      	movs	r0, r3
 801e994:	f7ff fa22 	bl	801dddc <tiny_vfscanf>
 801e998:	0003      	movs	r3, r0
 801e99a:	60fb      	str	r3, [r7, #12]
  va_end(ap);
  return (ret);
 801e99c:	68fb      	ldr	r3, [r7, #12]
}
 801e99e:	0018      	movs	r0, r3
 801e9a0:	46bd      	mov	sp, r7
 801e9a2:	b005      	add	sp, #20
 801e9a4:	bc80      	pop	{r7}
 801e9a6:	bc08      	pop	{r3}
 801e9a8:	b003      	add	sp, #12
 801e9aa:	4718      	bx	r3

0801e9ac <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801e9ac:	b580      	push	{r7, lr}
 801e9ae:	b084      	sub	sp, #16
 801e9b0:	af00      	add	r7, sp, #0
 801e9b2:	6078      	str	r0, [r7, #4]
  int i = 0;
 801e9b4:	2300      	movs	r3, #0
 801e9b6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801e9b8:	e00e      	b.n	801e9d8 <ee_skip_atoi+0x2c>
 801e9ba:	68fa      	ldr	r2, [r7, #12]
 801e9bc:	0013      	movs	r3, r2
 801e9be:	009b      	lsls	r3, r3, #2
 801e9c0:	189b      	adds	r3, r3, r2
 801e9c2:	005b      	lsls	r3, r3, #1
 801e9c4:	0018      	movs	r0, r3
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	1c59      	adds	r1, r3, #1
 801e9cc:	687a      	ldr	r2, [r7, #4]
 801e9ce:	6011      	str	r1, [r2, #0]
 801e9d0:	781b      	ldrb	r3, [r3, #0]
 801e9d2:	18c3      	adds	r3, r0, r3
 801e9d4:	3b30      	subs	r3, #48	; 0x30
 801e9d6:	60fb      	str	r3, [r7, #12]
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	781b      	ldrb	r3, [r3, #0]
 801e9de:	2b2f      	cmp	r3, #47	; 0x2f
 801e9e0:	d904      	bls.n	801e9ec <ee_skip_atoi+0x40>
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	781b      	ldrb	r3, [r3, #0]
 801e9e8:	2b39      	cmp	r3, #57	; 0x39
 801e9ea:	d9e6      	bls.n	801e9ba <ee_skip_atoi+0xe>
  return i;
 801e9ec:	68fb      	ldr	r3, [r7, #12]
}
 801e9ee:	0018      	movs	r0, r3
 801e9f0:	46bd      	mov	sp, r7
 801e9f2:	b004      	add	sp, #16
 801e9f4:	bd80      	pop	{r7, pc}
	...

0801e9f8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801e9f8:	b580      	push	{r7, lr}
 801e9fa:	b098      	sub	sp, #96	; 0x60
 801e9fc:	af00      	add	r7, sp, #0
 801e9fe:	60f8      	str	r0, [r7, #12]
 801ea00:	60b9      	str	r1, [r7, #8]
 801ea02:	607a      	str	r2, [r7, #4]
 801ea04:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801ea06:	4b72      	ldr	r3, [pc, #456]	; (801ebd0 <ee_number+0x1d8>)
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ea0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ea0e:	2240      	movs	r2, #64	; 0x40
 801ea10:	4013      	ands	r3, r2
 801ea12:	d002      	beq.n	801ea1a <ee_number+0x22>
 801ea14:	4b6f      	ldr	r3, [pc, #444]	; (801ebd4 <ee_number+0x1dc>)
 801ea16:	681b      	ldr	r3, [r3, #0]
 801ea18:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ea1a:	683b      	ldr	r3, [r7, #0]
 801ea1c:	2b01      	cmp	r3, #1
 801ea1e:	dd02      	ble.n	801ea26 <ee_number+0x2e>
 801ea20:	683b      	ldr	r3, [r7, #0]
 801ea22:	2b24      	cmp	r3, #36	; 0x24
 801ea24:	dd01      	ble.n	801ea2a <ee_number+0x32>
 801ea26:	2300      	movs	r3, #0
 801ea28:	e0cd      	b.n	801ebc6 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801ea2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ea2c:	2201      	movs	r2, #1
 801ea2e:	4013      	ands	r3, r2
 801ea30:	d001      	beq.n	801ea36 <ee_number+0x3e>
 801ea32:	2230      	movs	r2, #48	; 0x30
 801ea34:	e000      	b.n	801ea38 <ee_number+0x40>
 801ea36:	2220      	movs	r2, #32
 801ea38:	2353      	movs	r3, #83	; 0x53
 801ea3a:	18fb      	adds	r3, r7, r3
 801ea3c:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801ea3e:	215f      	movs	r1, #95	; 0x5f
 801ea40:	187b      	adds	r3, r7, r1
 801ea42:	2200      	movs	r2, #0
 801ea44:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801ea46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ea48:	2202      	movs	r2, #2
 801ea4a:	4013      	ands	r3, r2
 801ea4c:	d00b      	beq.n	801ea66 <ee_number+0x6e>
  {
    if (num < 0)
 801ea4e:	687b      	ldr	r3, [r7, #4]
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	da08      	bge.n	801ea66 <ee_number+0x6e>
    {
      sign = '-';
 801ea54:	187b      	adds	r3, r7, r1
 801ea56:	222d      	movs	r2, #45	; 0x2d
 801ea58:	701a      	strb	r2, [r3, #0]
      num = -num;
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	425b      	negs	r3, r3
 801ea5e:	607b      	str	r3, [r7, #4]
      size--;
 801ea60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ea62:	3b01      	subs	r3, #1
 801ea64:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801ea66:	2300      	movs	r3, #0
 801ea68:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d120      	bne.n	801eab2 <ee_number+0xba>
    tmp[i++] = '0';
 801ea70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea72:	1c5a      	adds	r2, r3, #1
 801ea74:	657a      	str	r2, [r7, #84]	; 0x54
 801ea76:	2210      	movs	r2, #16
 801ea78:	18ba      	adds	r2, r7, r2
 801ea7a:	2130      	movs	r1, #48	; 0x30
 801ea7c:	54d1      	strb	r1, [r2, r3]
 801ea7e:	e01b      	b.n	801eab8 <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	683a      	ldr	r2, [r7, #0]
 801ea84:	0011      	movs	r1, r2
 801ea86:	0018      	movs	r0, r3
 801ea88:	f7e1 fbcc 	bl	8000224 <__aeabi_uidivmod>
 801ea8c:	000b      	movs	r3, r1
 801ea8e:	001a      	movs	r2, r3
 801ea90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ea92:	189a      	adds	r2, r3, r2
 801ea94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea96:	1c59      	adds	r1, r3, #1
 801ea98:	6579      	str	r1, [r7, #84]	; 0x54
 801ea9a:	7811      	ldrb	r1, [r2, #0]
 801ea9c:	2210      	movs	r2, #16
 801ea9e:	18ba      	adds	r2, r7, r2
 801eaa0:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	683a      	ldr	r2, [r7, #0]
 801eaa6:	0011      	movs	r1, r2
 801eaa8:	0018      	movs	r0, r3
 801eaaa:	f7e1 fb35 	bl	8000118 <__udivsi3>
 801eaae:	0003      	movs	r3, r0
 801eab0:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	d1e3      	bne.n	801ea80 <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801eab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801eaba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eabc:	429a      	cmp	r2, r3
 801eabe:	dd01      	ble.n	801eac4 <ee_number+0xcc>
 801eac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eac2:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801eac4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eac8:	1ad3      	subs	r3, r2, r3
 801eaca:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801eacc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801eace:	2201      	movs	r2, #1
 801ead0:	4013      	ands	r3, r2
 801ead2:	d112      	bne.n	801eafa <ee_number+0x102>
 801ead4:	e00c      	b.n	801eaf0 <ee_number+0xf8>
 801ead6:	68fb      	ldr	r3, [r7, #12]
 801ead8:	1c5a      	adds	r2, r3, #1
 801eada:	60fa      	str	r2, [r7, #12]
 801eadc:	2220      	movs	r2, #32
 801eade:	701a      	strb	r2, [r3, #0]
 801eae0:	68bb      	ldr	r3, [r7, #8]
 801eae2:	3b01      	subs	r3, #1
 801eae4:	60bb      	str	r3, [r7, #8]
 801eae6:	68bb      	ldr	r3, [r7, #8]
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	d101      	bne.n	801eaf0 <ee_number+0xf8>
 801eaec:	68fb      	ldr	r3, [r7, #12]
 801eaee:	e06a      	b.n	801ebc6 <ee_number+0x1ce>
 801eaf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eaf2:	1e5a      	subs	r2, r3, #1
 801eaf4:	66ba      	str	r2, [r7, #104]	; 0x68
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	dced      	bgt.n	801ead6 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801eafa:	215f      	movs	r1, #95	; 0x5f
 801eafc:	187b      	adds	r3, r7, r1
 801eafe:	781b      	ldrb	r3, [r3, #0]
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	d01c      	beq.n	801eb3e <ee_number+0x146>
 801eb04:	68fb      	ldr	r3, [r7, #12]
 801eb06:	1c5a      	adds	r2, r3, #1
 801eb08:	60fa      	str	r2, [r7, #12]
 801eb0a:	187a      	adds	r2, r7, r1
 801eb0c:	7812      	ldrb	r2, [r2, #0]
 801eb0e:	701a      	strb	r2, [r3, #0]
 801eb10:	68bb      	ldr	r3, [r7, #8]
 801eb12:	3b01      	subs	r3, #1
 801eb14:	60bb      	str	r3, [r7, #8]
 801eb16:	68bb      	ldr	r3, [r7, #8]
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	d110      	bne.n	801eb3e <ee_number+0x146>
 801eb1c:	68fb      	ldr	r3, [r7, #12]
 801eb1e:	e052      	b.n	801ebc6 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	1c5a      	adds	r2, r3, #1
 801eb24:	60fa      	str	r2, [r7, #12]
 801eb26:	2253      	movs	r2, #83	; 0x53
 801eb28:	18ba      	adds	r2, r7, r2
 801eb2a:	7812      	ldrb	r2, [r2, #0]
 801eb2c:	701a      	strb	r2, [r3, #0]
 801eb2e:	68bb      	ldr	r3, [r7, #8]
 801eb30:	3b01      	subs	r3, #1
 801eb32:	60bb      	str	r3, [r7, #8]
 801eb34:	68bb      	ldr	r3, [r7, #8]
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d101      	bne.n	801eb3e <ee_number+0x146>
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	e043      	b.n	801ebc6 <ee_number+0x1ce>
 801eb3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eb40:	1e5a      	subs	r2, r3, #1
 801eb42:	66ba      	str	r2, [r7, #104]	; 0x68
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	dceb      	bgt.n	801eb20 <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801eb48:	e00c      	b.n	801eb64 <ee_number+0x16c>
 801eb4a:	68fb      	ldr	r3, [r7, #12]
 801eb4c:	1c5a      	adds	r2, r3, #1
 801eb4e:	60fa      	str	r2, [r7, #12]
 801eb50:	2230      	movs	r2, #48	; 0x30
 801eb52:	701a      	strb	r2, [r3, #0]
 801eb54:	68bb      	ldr	r3, [r7, #8]
 801eb56:	3b01      	subs	r3, #1
 801eb58:	60bb      	str	r3, [r7, #8]
 801eb5a:	68bb      	ldr	r3, [r7, #8]
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d101      	bne.n	801eb64 <ee_number+0x16c>
 801eb60:	68fb      	ldr	r3, [r7, #12]
 801eb62:	e030      	b.n	801ebc6 <ee_number+0x1ce>
 801eb64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb66:	1e5a      	subs	r2, r3, #1
 801eb68:	66fa      	str	r2, [r7, #108]	; 0x6c
 801eb6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801eb6c:	429a      	cmp	r2, r3
 801eb6e:	dbec      	blt.n	801eb4a <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801eb70:	e010      	b.n	801eb94 <ee_number+0x19c>
 801eb72:	68fb      	ldr	r3, [r7, #12]
 801eb74:	1c5a      	adds	r2, r3, #1
 801eb76:	60fa      	str	r2, [r7, #12]
 801eb78:	2210      	movs	r2, #16
 801eb7a:	18b9      	adds	r1, r7, r2
 801eb7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801eb7e:	188a      	adds	r2, r1, r2
 801eb80:	7812      	ldrb	r2, [r2, #0]
 801eb82:	701a      	strb	r2, [r3, #0]
 801eb84:	68bb      	ldr	r3, [r7, #8]
 801eb86:	3b01      	subs	r3, #1
 801eb88:	60bb      	str	r3, [r7, #8]
 801eb8a:	68bb      	ldr	r3, [r7, #8]
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d101      	bne.n	801eb94 <ee_number+0x19c>
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	e018      	b.n	801ebc6 <ee_number+0x1ce>
 801eb94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eb96:	1e5a      	subs	r2, r3, #1
 801eb98:	657a      	str	r2, [r7, #84]	; 0x54
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	dce9      	bgt.n	801eb72 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801eb9e:	e00c      	b.n	801ebba <ee_number+0x1c2>
 801eba0:	68fb      	ldr	r3, [r7, #12]
 801eba2:	1c5a      	adds	r2, r3, #1
 801eba4:	60fa      	str	r2, [r7, #12]
 801eba6:	2220      	movs	r2, #32
 801eba8:	701a      	strb	r2, [r3, #0]
 801ebaa:	68bb      	ldr	r3, [r7, #8]
 801ebac:	3b01      	subs	r3, #1
 801ebae:	60bb      	str	r3, [r7, #8]
 801ebb0:	68bb      	ldr	r3, [r7, #8]
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d101      	bne.n	801ebba <ee_number+0x1c2>
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	e005      	b.n	801ebc6 <ee_number+0x1ce>
 801ebba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ebbc:	1e5a      	subs	r2, r3, #1
 801ebbe:	66ba      	str	r2, [r7, #104]	; 0x68
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	dced      	bgt.n	801eba0 <ee_number+0x1a8>

  return str;
 801ebc4:	68fb      	ldr	r3, [r7, #12]
}
 801ebc6:	0018      	movs	r0, r3
 801ebc8:	46bd      	mov	sp, r7
 801ebca:	b018      	add	sp, #96	; 0x60
 801ebcc:	bd80      	pop	{r7, pc}
 801ebce:	46c0      	nop			; (mov r8, r8)
 801ebd0:	200001e4 	.word	0x200001e4
 801ebd4:	200001e8 	.word	0x200001e8

0801ebd8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801ebd8:	b590      	push	{r4, r7, lr}
 801ebda:	b093      	sub	sp, #76	; 0x4c
 801ebdc:	af04      	add	r7, sp, #16
 801ebde:	60f8      	str	r0, [r7, #12]
 801ebe0:	60b9      	str	r1, [r7, #8]
 801ebe2:	607a      	str	r2, [r7, #4]
 801ebe4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801ebe6:	68bb      	ldr	r3, [r7, #8]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	dc01      	bgt.n	801ebf0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801ebec:	2300      	movs	r3, #0
 801ebee:	e104      	b.n	801edfa <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ebf0:	68fb      	ldr	r3, [r7, #12]
 801ebf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ebf4:	e0ec      	b.n	801edd0 <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801ebf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ebf8:	68fb      	ldr	r3, [r7, #12]
 801ebfa:	1ad2      	subs	r2, r2, r3
 801ebfc:	68bb      	ldr	r3, [r7, #8]
 801ebfe:	3b01      	subs	r3, #1
 801ec00:	429a      	cmp	r2, r3
 801ec02:	db00      	blt.n	801ec06 <tiny_vsnprintf_like+0x2e>
 801ec04:	e0f2      	b.n	801edec <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	781b      	ldrb	r3, [r3, #0]
 801ec0a:	2b25      	cmp	r3, #37	; 0x25
 801ec0c:	d006      	beq.n	801ec1c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801ec0e:	687a      	ldr	r2, [r7, #4]
 801ec10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ec12:	1c59      	adds	r1, r3, #1
 801ec14:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ec16:	7812      	ldrb	r2, [r2, #0]
 801ec18:	701a      	strb	r2, [r3, #0]
      continue;
 801ec1a:	e0d6      	b.n	801edca <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801ec1c:	2300      	movs	r3, #0
 801ec1e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	3301      	adds	r3, #1
 801ec24:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	781b      	ldrb	r3, [r3, #0]
 801ec2a:	2b30      	cmp	r3, #48	; 0x30
 801ec2c:	d103      	bne.n	801ec36 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801ec2e:	6a3b      	ldr	r3, [r7, #32]
 801ec30:	2201      	movs	r2, #1
 801ec32:	4313      	orrs	r3, r2
 801ec34:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801ec36:	2301      	movs	r3, #1
 801ec38:	425b      	negs	r3, r3
 801ec3a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	781b      	ldrb	r3, [r3, #0]
 801ec40:	2b2f      	cmp	r3, #47	; 0x2f
 801ec42:	d909      	bls.n	801ec58 <tiny_vsnprintf_like+0x80>
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	781b      	ldrb	r3, [r3, #0]
 801ec48:	2b39      	cmp	r3, #57	; 0x39
 801ec4a:	d805      	bhi.n	801ec58 <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801ec4c:	1d3b      	adds	r3, r7, #4
 801ec4e:	0018      	movs	r0, r3
 801ec50:	f7ff feac 	bl	801e9ac <ee_skip_atoi>
 801ec54:	0003      	movs	r3, r0
 801ec56:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801ec58:	2301      	movs	r3, #1
 801ec5a:	425b      	negs	r3, r3
 801ec5c:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801ec5e:	2301      	movs	r3, #1
 801ec60:	425b      	negs	r3, r3
 801ec62:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801ec64:	230a      	movs	r3, #10
 801ec66:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	781b      	ldrb	r3, [r3, #0]
 801ec6c:	3b58      	subs	r3, #88	; 0x58
 801ec6e:	2b20      	cmp	r3, #32
 801ec70:	d854      	bhi.n	801ed1c <tiny_vsnprintf_like+0x144>
 801ec72:	009a      	lsls	r2, r3, #2
 801ec74:	4b63      	ldr	r3, [pc, #396]	; (801ee04 <tiny_vsnprintf_like+0x22c>)
 801ec76:	18d3      	adds	r3, r2, r3
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ec7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ec7e:	1c5a      	adds	r2, r3, #1
 801ec80:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ec82:	2220      	movs	r2, #32
 801ec84:	701a      	strb	r2, [r3, #0]
 801ec86:	69fb      	ldr	r3, [r7, #28]
 801ec88:	3b01      	subs	r3, #1
 801ec8a:	61fb      	str	r3, [r7, #28]
 801ec8c:	69fb      	ldr	r3, [r7, #28]
 801ec8e:	2b00      	cmp	r3, #0
 801ec90:	dcf4      	bgt.n	801ec7c <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801ec92:	683b      	ldr	r3, [r7, #0]
 801ec94:	1d1a      	adds	r2, r3, #4
 801ec96:	603a      	str	r2, [r7, #0]
 801ec98:	6819      	ldr	r1, [r3, #0]
 801ec9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ec9c:	1c5a      	adds	r2, r3, #1
 801ec9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801eca0:	b2ca      	uxtb	r2, r1
 801eca2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801eca4:	e091      	b.n	801edca <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801eca6:	683b      	ldr	r3, [r7, #0]
 801eca8:	1d1a      	adds	r2, r3, #4
 801ecaa:	603a      	str	r2, [r7, #0]
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801ecb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d101      	bne.n	801ecba <tiny_vsnprintf_like+0xe2>
 801ecb6:	4b54      	ldr	r3, [pc, #336]	; (801ee08 <tiny_vsnprintf_like+0x230>)
 801ecb8:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecbc:	0018      	movs	r0, r3
 801ecbe:	f7e1 fa23 	bl	8000108 <strlen>
 801ecc2:	0003      	movs	r3, r0
 801ecc4:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801ecc6:	e004      	b.n	801ecd2 <tiny_vsnprintf_like+0xfa>
 801ecc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ecca:	1c5a      	adds	r2, r3, #1
 801eccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ecce:	2220      	movs	r2, #32
 801ecd0:	701a      	strb	r2, [r3, #0]
 801ecd2:	69fb      	ldr	r3, [r7, #28]
 801ecd4:	1e5a      	subs	r2, r3, #1
 801ecd6:	61fa      	str	r2, [r7, #28]
 801ecd8:	693a      	ldr	r2, [r7, #16]
 801ecda:	429a      	cmp	r2, r3
 801ecdc:	dbf4      	blt.n	801ecc8 <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ecde:	2300      	movs	r3, #0
 801ece0:	62bb      	str	r3, [r7, #40]	; 0x28
 801ece2:	e00a      	b.n	801ecfa <tiny_vsnprintf_like+0x122>
 801ece4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ece6:	1c53      	adds	r3, r2, #1
 801ece8:	627b      	str	r3, [r7, #36]	; 0x24
 801ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ecec:	1c59      	adds	r1, r3, #1
 801ecee:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ecf0:	7812      	ldrb	r2, [r2, #0]
 801ecf2:	701a      	strb	r2, [r3, #0]
 801ecf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ecf6:	3301      	adds	r3, #1
 801ecf8:	62bb      	str	r3, [r7, #40]	; 0x28
 801ecfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ecfc:	693b      	ldr	r3, [r7, #16]
 801ecfe:	429a      	cmp	r2, r3
 801ed00:	dbf0      	blt.n	801ece4 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801ed02:	e062      	b.n	801edca <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801ed04:	6a3b      	ldr	r3, [r7, #32]
 801ed06:	2240      	movs	r2, #64	; 0x40
 801ed08:	4313      	orrs	r3, r2
 801ed0a:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801ed0c:	2310      	movs	r3, #16
 801ed0e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801ed10:	e02d      	b.n	801ed6e <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801ed12:	6a3b      	ldr	r3, [r7, #32]
 801ed14:	2202      	movs	r2, #2
 801ed16:	4313      	orrs	r3, r2
 801ed18:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801ed1a:	e025      	b.n	801ed68 <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	781b      	ldrb	r3, [r3, #0]
 801ed20:	2b25      	cmp	r3, #37	; 0x25
 801ed22:	d004      	beq.n	801ed2e <tiny_vsnprintf_like+0x156>
 801ed24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed26:	1c5a      	adds	r2, r3, #1
 801ed28:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ed2a:	2225      	movs	r2, #37	; 0x25
 801ed2c:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801ed2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ed30:	68fb      	ldr	r3, [r7, #12]
 801ed32:	1ad2      	subs	r2, r2, r3
 801ed34:	68bb      	ldr	r3, [r7, #8]
 801ed36:	3b01      	subs	r3, #1
 801ed38:	429a      	cmp	r2, r3
 801ed3a:	da17      	bge.n	801ed6c <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	781b      	ldrb	r3, [r3, #0]
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	d006      	beq.n	801ed52 <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801ed44:	687a      	ldr	r2, [r7, #4]
 801ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed48:	1c59      	adds	r1, r3, #1
 801ed4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ed4c:	7812      	ldrb	r2, [r2, #0]
 801ed4e:	701a      	strb	r2, [r3, #0]
 801ed50:	e002      	b.n	801ed58 <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	3b01      	subs	r3, #1
 801ed56:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801ed58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ed5a:	68fb      	ldr	r3, [r7, #12]
 801ed5c:	1ad2      	subs	r2, r2, r3
 801ed5e:	68bb      	ldr	r3, [r7, #8]
 801ed60:	3b01      	subs	r3, #1
 801ed62:	429a      	cmp	r2, r3
 801ed64:	db30      	blt.n	801edc8 <tiny_vsnprintf_like+0x1f0>
 801ed66:	e002      	b.n	801ed6e <tiny_vsnprintf_like+0x196>
        break;
 801ed68:	46c0      	nop			; (mov r8, r8)
 801ed6a:	e000      	b.n	801ed6e <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801ed6c:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801ed6e:	697b      	ldr	r3, [r7, #20]
 801ed70:	2b6c      	cmp	r3, #108	; 0x6c
 801ed72:	d105      	bne.n	801ed80 <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801ed74:	683b      	ldr	r3, [r7, #0]
 801ed76:	1d1a      	adds	r2, r3, #4
 801ed78:	603a      	str	r2, [r7, #0]
 801ed7a:	681b      	ldr	r3, [r3, #0]
 801ed7c:	637b      	str	r3, [r7, #52]	; 0x34
 801ed7e:	e00e      	b.n	801ed9e <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801ed80:	6a3b      	ldr	r3, [r7, #32]
 801ed82:	2202      	movs	r2, #2
 801ed84:	4013      	ands	r3, r2
 801ed86:	d005      	beq.n	801ed94 <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801ed88:	683b      	ldr	r3, [r7, #0]
 801ed8a:	1d1a      	adds	r2, r3, #4
 801ed8c:	603a      	str	r2, [r7, #0]
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	637b      	str	r3, [r7, #52]	; 0x34
 801ed92:	e004      	b.n	801ed9e <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801ed94:	683b      	ldr	r3, [r7, #0]
 801ed96:	1d1a      	adds	r2, r3, #4
 801ed98:	603a      	str	r2, [r7, #0]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ed9e:	68bb      	ldr	r3, [r7, #8]
 801eda0:	1e5a      	subs	r2, r3, #1
 801eda2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	1acb      	subs	r3, r1, r3
 801eda8:	1ad1      	subs	r1, r2, r3
 801edaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801edac:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801edae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801edb0:	6a3b      	ldr	r3, [r7, #32]
 801edb2:	9302      	str	r3, [sp, #8]
 801edb4:	69bb      	ldr	r3, [r7, #24]
 801edb6:	9301      	str	r3, [sp, #4]
 801edb8:	69fb      	ldr	r3, [r7, #28]
 801edba:	9300      	str	r3, [sp, #0]
 801edbc:	0023      	movs	r3, r4
 801edbe:	f7ff fe1b 	bl	801e9f8 <ee_number>
 801edc2:	0003      	movs	r3, r0
 801edc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801edc6:	e000      	b.n	801edca <tiny_vsnprintf_like+0x1f2>
        continue;
 801edc8:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	3301      	adds	r3, #1
 801edce:	607b      	str	r3, [r7, #4]
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	781b      	ldrb	r3, [r3, #0]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d000      	beq.n	801edda <tiny_vsnprintf_like+0x202>
 801edd8:	e70d      	b.n	801ebf6 <tiny_vsnprintf_like+0x1e>
 801edda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801eddc:	68fb      	ldr	r3, [r7, #12]
 801edde:	1ad2      	subs	r2, r2, r3
 801ede0:	68bb      	ldr	r3, [r7, #8]
 801ede2:	3b01      	subs	r3, #1
 801ede4:	429a      	cmp	r2, r3
 801ede6:	db00      	blt.n	801edea <tiny_vsnprintf_like+0x212>
 801ede8:	e705      	b.n	801ebf6 <tiny_vsnprintf_like+0x1e>
 801edea:	e000      	b.n	801edee <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801edec:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801edee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801edf0:	2200      	movs	r2, #0
 801edf2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801edf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	1ad3      	subs	r3, r2, r3
}
 801edfa:	0018      	movs	r0, r3
 801edfc:	46bd      	mov	sp, r7
 801edfe:	b00f      	add	sp, #60	; 0x3c
 801ee00:	bd90      	pop	{r4, r7, pc}
 801ee02:	46c0      	nop			; (mov r8, r8)
 801ee04:	08021b08 	.word	0x08021b08
 801ee08:	08021b00 	.word	0x08021b00

0801ee0c <__libc_init_array>:
 801ee0c:	b570      	push	{r4, r5, r6, lr}
 801ee0e:	2600      	movs	r6, #0
 801ee10:	4d0c      	ldr	r5, [pc, #48]	; (801ee44 <__libc_init_array+0x38>)
 801ee12:	4c0d      	ldr	r4, [pc, #52]	; (801ee48 <__libc_init_array+0x3c>)
 801ee14:	1b64      	subs	r4, r4, r5
 801ee16:	10a4      	asrs	r4, r4, #2
 801ee18:	42a6      	cmp	r6, r4
 801ee1a:	d109      	bne.n	801ee30 <__libc_init_array+0x24>
 801ee1c:	2600      	movs	r6, #0
 801ee1e:	f000 f8c5 	bl	801efac <_init>
 801ee22:	4d0a      	ldr	r5, [pc, #40]	; (801ee4c <__libc_init_array+0x40>)
 801ee24:	4c0a      	ldr	r4, [pc, #40]	; (801ee50 <__libc_init_array+0x44>)
 801ee26:	1b64      	subs	r4, r4, r5
 801ee28:	10a4      	asrs	r4, r4, #2
 801ee2a:	42a6      	cmp	r6, r4
 801ee2c:	d105      	bne.n	801ee3a <__libc_init_array+0x2e>
 801ee2e:	bd70      	pop	{r4, r5, r6, pc}
 801ee30:	00b3      	lsls	r3, r6, #2
 801ee32:	58eb      	ldr	r3, [r5, r3]
 801ee34:	4798      	blx	r3
 801ee36:	3601      	adds	r6, #1
 801ee38:	e7ee      	b.n	801ee18 <__libc_init_array+0xc>
 801ee3a:	00b3      	lsls	r3, r6, #2
 801ee3c:	58eb      	ldr	r3, [r5, r3]
 801ee3e:	4798      	blx	r3
 801ee40:	3601      	adds	r6, #1
 801ee42:	e7f2      	b.n	801ee2a <__libc_init_array+0x1e>
 801ee44:	08021c14 	.word	0x08021c14
 801ee48:	08021c14 	.word	0x08021c14
 801ee4c:	08021c14 	.word	0x08021c14
 801ee50:	08021c18 	.word	0x08021c18

0801ee54 <memcpy>:
 801ee54:	2300      	movs	r3, #0
 801ee56:	b510      	push	{r4, lr}
 801ee58:	429a      	cmp	r2, r3
 801ee5a:	d100      	bne.n	801ee5e <memcpy+0xa>
 801ee5c:	bd10      	pop	{r4, pc}
 801ee5e:	5ccc      	ldrb	r4, [r1, r3]
 801ee60:	54c4      	strb	r4, [r0, r3]
 801ee62:	3301      	adds	r3, #1
 801ee64:	e7f8      	b.n	801ee58 <memcpy+0x4>

0801ee66 <memset>:
 801ee66:	0003      	movs	r3, r0
 801ee68:	1882      	adds	r2, r0, r2
 801ee6a:	4293      	cmp	r3, r2
 801ee6c:	d100      	bne.n	801ee70 <memset+0xa>
 801ee6e:	4770      	bx	lr
 801ee70:	7019      	strb	r1, [r3, #0]
 801ee72:	3301      	adds	r3, #1
 801ee74:	e7f9      	b.n	801ee6a <memset+0x4>

0801ee76 <strncmp>:
 801ee76:	b530      	push	{r4, r5, lr}
 801ee78:	0005      	movs	r5, r0
 801ee7a:	1e10      	subs	r0, r2, #0
 801ee7c:	d00b      	beq.n	801ee96 <strncmp+0x20>
 801ee7e:	2400      	movs	r4, #0
 801ee80:	3a01      	subs	r2, #1
 801ee82:	5d2b      	ldrb	r3, [r5, r4]
 801ee84:	5d08      	ldrb	r0, [r1, r4]
 801ee86:	4283      	cmp	r3, r0
 801ee88:	d104      	bne.n	801ee94 <strncmp+0x1e>
 801ee8a:	4294      	cmp	r4, r2
 801ee8c:	d002      	beq.n	801ee94 <strncmp+0x1e>
 801ee8e:	3401      	adds	r4, #1
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d1f6      	bne.n	801ee82 <strncmp+0xc>
 801ee94:	1a18      	subs	r0, r3, r0
 801ee96:	bd30      	pop	{r4, r5, pc}

0801ee98 <floor>:
 801ee98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ee9a:	004b      	lsls	r3, r1, #1
 801ee9c:	4a3d      	ldr	r2, [pc, #244]	; (801ef94 <floor+0xfc>)
 801ee9e:	0d5b      	lsrs	r3, r3, #21
 801eea0:	189f      	adds	r7, r3, r2
 801eea2:	4684      	mov	ip, r0
 801eea4:	000e      	movs	r6, r1
 801eea6:	000d      	movs	r5, r1
 801eea8:	0004      	movs	r4, r0
 801eeaa:	9001      	str	r0, [sp, #4]
 801eeac:	2f13      	cmp	r7, #19
 801eeae:	dc34      	bgt.n	801ef1a <floor+0x82>
 801eeb0:	2f00      	cmp	r7, #0
 801eeb2:	da16      	bge.n	801eee2 <floor+0x4a>
 801eeb4:	4a38      	ldr	r2, [pc, #224]	; (801ef98 <floor+0x100>)
 801eeb6:	4b39      	ldr	r3, [pc, #228]	; (801ef9c <floor+0x104>)
 801eeb8:	4660      	mov	r0, ip
 801eeba:	0031      	movs	r1, r6
 801eebc:	f7e1 fe16 	bl	8000aec <__aeabi_dadd>
 801eec0:	2200      	movs	r2, #0
 801eec2:	2300      	movs	r3, #0
 801eec4:	f7e1 fac8 	bl	8000458 <__aeabi_dcmpgt>
 801eec8:	2800      	cmp	r0, #0
 801eeca:	d007      	beq.n	801eedc <floor+0x44>
 801eecc:	2e00      	cmp	r6, #0
 801eece:	da5d      	bge.n	801ef8c <floor+0xf4>
 801eed0:	0073      	lsls	r3, r6, #1
 801eed2:	085b      	lsrs	r3, r3, #1
 801eed4:	431c      	orrs	r4, r3
 801eed6:	d001      	beq.n	801eedc <floor+0x44>
 801eed8:	2400      	movs	r4, #0
 801eeda:	4d31      	ldr	r5, [pc, #196]	; (801efa0 <floor+0x108>)
 801eedc:	46a4      	mov	ip, r4
 801eede:	002e      	movs	r6, r5
 801eee0:	e029      	b.n	801ef36 <floor+0x9e>
 801eee2:	4b30      	ldr	r3, [pc, #192]	; (801efa4 <floor+0x10c>)
 801eee4:	413b      	asrs	r3, r7
 801eee6:	9300      	str	r3, [sp, #0]
 801eee8:	400b      	ands	r3, r1
 801eeea:	4303      	orrs	r3, r0
 801eeec:	d023      	beq.n	801ef36 <floor+0x9e>
 801eeee:	4a2a      	ldr	r2, [pc, #168]	; (801ef98 <floor+0x100>)
 801eef0:	4b2a      	ldr	r3, [pc, #168]	; (801ef9c <floor+0x104>)
 801eef2:	4660      	mov	r0, ip
 801eef4:	0031      	movs	r1, r6
 801eef6:	f7e1 fdf9 	bl	8000aec <__aeabi_dadd>
 801eefa:	2200      	movs	r2, #0
 801eefc:	2300      	movs	r3, #0
 801eefe:	f7e1 faab 	bl	8000458 <__aeabi_dcmpgt>
 801ef02:	2800      	cmp	r0, #0
 801ef04:	d0ea      	beq.n	801eedc <floor+0x44>
 801ef06:	2e00      	cmp	r6, #0
 801ef08:	da03      	bge.n	801ef12 <floor+0x7a>
 801ef0a:	2380      	movs	r3, #128	; 0x80
 801ef0c:	035b      	lsls	r3, r3, #13
 801ef0e:	413b      	asrs	r3, r7
 801ef10:	18f5      	adds	r5, r6, r3
 801ef12:	9b00      	ldr	r3, [sp, #0]
 801ef14:	2400      	movs	r4, #0
 801ef16:	439d      	bics	r5, r3
 801ef18:	e7e0      	b.n	801eedc <floor+0x44>
 801ef1a:	2f33      	cmp	r7, #51	; 0x33
 801ef1c:	dd0f      	ble.n	801ef3e <floor+0xa6>
 801ef1e:	2380      	movs	r3, #128	; 0x80
 801ef20:	00db      	lsls	r3, r3, #3
 801ef22:	429f      	cmp	r7, r3
 801ef24:	d107      	bne.n	801ef36 <floor+0x9e>
 801ef26:	0002      	movs	r2, r0
 801ef28:	000b      	movs	r3, r1
 801ef2a:	4660      	mov	r0, ip
 801ef2c:	0031      	movs	r1, r6
 801ef2e:	f7e1 fddd 	bl	8000aec <__aeabi_dadd>
 801ef32:	4684      	mov	ip, r0
 801ef34:	000e      	movs	r6, r1
 801ef36:	4660      	mov	r0, ip
 801ef38:	0031      	movs	r1, r6
 801ef3a:	b003      	add	sp, #12
 801ef3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef3e:	4a1a      	ldr	r2, [pc, #104]	; (801efa8 <floor+0x110>)
 801ef40:	189b      	adds	r3, r3, r2
 801ef42:	2201      	movs	r2, #1
 801ef44:	4252      	negs	r2, r2
 801ef46:	40da      	lsrs	r2, r3
 801ef48:	9200      	str	r2, [sp, #0]
 801ef4a:	4210      	tst	r0, r2
 801ef4c:	d0f3      	beq.n	801ef36 <floor+0x9e>
 801ef4e:	4a12      	ldr	r2, [pc, #72]	; (801ef98 <floor+0x100>)
 801ef50:	4b12      	ldr	r3, [pc, #72]	; (801ef9c <floor+0x104>)
 801ef52:	4660      	mov	r0, ip
 801ef54:	0031      	movs	r1, r6
 801ef56:	f7e1 fdc9 	bl	8000aec <__aeabi_dadd>
 801ef5a:	2200      	movs	r2, #0
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	f7e1 fa7b 	bl	8000458 <__aeabi_dcmpgt>
 801ef62:	2800      	cmp	r0, #0
 801ef64:	d0ba      	beq.n	801eedc <floor+0x44>
 801ef66:	2e00      	cmp	r6, #0
 801ef68:	da02      	bge.n	801ef70 <floor+0xd8>
 801ef6a:	2f14      	cmp	r7, #20
 801ef6c:	d103      	bne.n	801ef76 <floor+0xde>
 801ef6e:	3501      	adds	r5, #1
 801ef70:	9b00      	ldr	r3, [sp, #0]
 801ef72:	439c      	bics	r4, r3
 801ef74:	e7b2      	b.n	801eedc <floor+0x44>
 801ef76:	2334      	movs	r3, #52	; 0x34
 801ef78:	1bdf      	subs	r7, r3, r7
 801ef7a:	3b33      	subs	r3, #51	; 0x33
 801ef7c:	40bb      	lsls	r3, r7
 801ef7e:	18e4      	adds	r4, r4, r3
 801ef80:	9b01      	ldr	r3, [sp, #4]
 801ef82:	429c      	cmp	r4, r3
 801ef84:	419b      	sbcs	r3, r3
 801ef86:	425b      	negs	r3, r3
 801ef88:	18f5      	adds	r5, r6, r3
 801ef8a:	e7f1      	b.n	801ef70 <floor+0xd8>
 801ef8c:	2400      	movs	r4, #0
 801ef8e:	0025      	movs	r5, r4
 801ef90:	e7a4      	b.n	801eedc <floor+0x44>
 801ef92:	46c0      	nop			; (mov r8, r8)
 801ef94:	fffffc01 	.word	0xfffffc01
 801ef98:	8800759c 	.word	0x8800759c
 801ef9c:	7e37e43c 	.word	0x7e37e43c
 801efa0:	bff00000 	.word	0xbff00000
 801efa4:	000fffff 	.word	0x000fffff
 801efa8:	fffffbed 	.word	0xfffffbed

0801efac <_init>:
 801efac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efae:	46c0      	nop			; (mov r8, r8)
 801efb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801efb2:	bc08      	pop	{r3}
 801efb4:	469e      	mov	lr, r3
 801efb6:	4770      	bx	lr

0801efb8 <_fini>:
 801efb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efba:	46c0      	nop			; (mov r8, r8)
 801efbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801efbe:	bc08      	pop	{r3}
 801efc0:	469e      	mov	lr, r3
 801efc2:	4770      	bx	lr
