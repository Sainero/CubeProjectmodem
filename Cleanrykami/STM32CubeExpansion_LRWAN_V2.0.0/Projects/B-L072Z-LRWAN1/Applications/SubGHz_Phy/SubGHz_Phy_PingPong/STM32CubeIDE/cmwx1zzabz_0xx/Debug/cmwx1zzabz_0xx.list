
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007980  08007980  00017980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007db8  08007db8  00017db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000044  20000000  08007dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007cc  20000044  08007e00  00020044  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000810  08007e00  00020810  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d407  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000600a  00000000  00000000  0003d473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001370  00000000  00000000  00043480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ad0  00000000  00000000  000447f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001d15d  00000000  00000000  000462c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000262a4  00000000  00000000  0006341d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0009f078  00000000  00000000  000896c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00128739  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003820  00000000  00000000  0012878c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0000e6e6  00000000  00000000  0012bfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000044 	.word	0x20000044
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007968 	.word	0x08007968

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000048 	.word	0x20000048
 8000104:	08007968 	.word	0x08007968

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_uldivmod>:
 8000454:	2b00      	cmp	r3, #0
 8000456:	d111      	bne.n	800047c <__aeabi_uldivmod+0x28>
 8000458:	2a00      	cmp	r2, #0
 800045a:	d10f      	bne.n	800047c <__aeabi_uldivmod+0x28>
 800045c:	2900      	cmp	r1, #0
 800045e:	d100      	bne.n	8000462 <__aeabi_uldivmod+0xe>
 8000460:	2800      	cmp	r0, #0
 8000462:	d002      	beq.n	800046a <__aeabi_uldivmod+0x16>
 8000464:	2100      	movs	r1, #0
 8000466:	43c9      	mvns	r1, r1
 8000468:	0008      	movs	r0, r1
 800046a:	b407      	push	{r0, r1, r2}
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <__aeabi_uldivmod+0x24>)
 800046e:	a102      	add	r1, pc, #8	; (adr r1, 8000478 <__aeabi_uldivmod+0x24>)
 8000470:	1840      	adds	r0, r0, r1
 8000472:	9002      	str	r0, [sp, #8]
 8000474:	bd03      	pop	{r0, r1, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	ffffffd9 	.word	0xffffffd9
 800047c:	b403      	push	{r0, r1}
 800047e:	4668      	mov	r0, sp
 8000480:	b501      	push	{r0, lr}
 8000482:	9802      	ldr	r0, [sp, #8]
 8000484:	f000 f852 	bl	800052c <__udivmoddi4>
 8000488:	9b01      	ldr	r3, [sp, #4]
 800048a:	469e      	mov	lr, r3
 800048c:	b002      	add	sp, #8
 800048e:	bc0c      	pop	{r2, r3}
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_lmul>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	46ce      	mov	lr, r9
 8000498:	4647      	mov	r7, r8
 800049a:	b580      	push	{r7, lr}
 800049c:	0007      	movs	r7, r0
 800049e:	4699      	mov	r9, r3
 80004a0:	0c3b      	lsrs	r3, r7, #16
 80004a2:	469c      	mov	ip, r3
 80004a4:	0413      	lsls	r3, r2, #16
 80004a6:	0c1b      	lsrs	r3, r3, #16
 80004a8:	001d      	movs	r5, r3
 80004aa:	000e      	movs	r6, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	0400      	lsls	r0, r0, #16
 80004b0:	0c14      	lsrs	r4, r2, #16
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	4345      	muls	r5, r0
 80004b6:	434b      	muls	r3, r1
 80004b8:	4360      	muls	r0, r4
 80004ba:	4361      	muls	r1, r4
 80004bc:	18c0      	adds	r0, r0, r3
 80004be:	0c2c      	lsrs	r4, r5, #16
 80004c0:	1820      	adds	r0, r4, r0
 80004c2:	468c      	mov	ip, r1
 80004c4:	4283      	cmp	r3, r0
 80004c6:	d903      	bls.n	80004d0 <__aeabi_lmul+0x3c>
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	025b      	lsls	r3, r3, #9
 80004cc:	4698      	mov	r8, r3
 80004ce:	44c4      	add	ip, r8
 80004d0:	4649      	mov	r1, r9
 80004d2:	4379      	muls	r1, r7
 80004d4:	4372      	muls	r2, r6
 80004d6:	0c03      	lsrs	r3, r0, #16
 80004d8:	4463      	add	r3, ip
 80004da:	042d      	lsls	r5, r5, #16
 80004dc:	0c2d      	lsrs	r5, r5, #16
 80004de:	18c9      	adds	r1, r1, r3
 80004e0:	0400      	lsls	r0, r0, #16
 80004e2:	1940      	adds	r0, r0, r5
 80004e4:	1889      	adds	r1, r1, r2
 80004e6:	bcc0      	pop	{r6, r7}
 80004e8:	46b9      	mov	r9, r7
 80004ea:	46b0      	mov	r8, r6
 80004ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_d2uiz>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	2200      	movs	r2, #0
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <__aeabi_d2uiz+0x38>)
 80004f6:	0004      	movs	r4, r0
 80004f8:	000d      	movs	r5, r1
 80004fa:	f001 fa97 	bl	8001a2c <__aeabi_dcmpge>
 80004fe:	2800      	cmp	r0, #0
 8000500:	d104      	bne.n	800050c <__aeabi_d2uiz+0x1c>
 8000502:	0020      	movs	r0, r4
 8000504:	0029      	movs	r1, r5
 8000506:	f001 f9d1 	bl	80018ac <__aeabi_d2iz>
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <__aeabi_d2uiz+0x38>)
 800050e:	2200      	movs	r2, #0
 8000510:	0020      	movs	r0, r4
 8000512:	0029      	movs	r1, r5
 8000514:	f000 fe38 	bl	8001188 <__aeabi_dsub>
 8000518:	f001 f9c8 	bl	80018ac <__aeabi_d2iz>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	061b      	lsls	r3, r3, #24
 8000520:	469c      	mov	ip, r3
 8000522:	4460      	add	r0, ip
 8000524:	e7f1      	b.n	800050a <__aeabi_d2uiz+0x1a>
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	41e00000 	.word	0x41e00000

0800052c <__udivmoddi4>:
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	4657      	mov	r7, sl
 8000530:	464e      	mov	r6, r9
 8000532:	4645      	mov	r5, r8
 8000534:	46de      	mov	lr, fp
 8000536:	b5e0      	push	{r5, r6, r7, lr}
 8000538:	0004      	movs	r4, r0
 800053a:	000d      	movs	r5, r1
 800053c:	4692      	mov	sl, r2
 800053e:	4699      	mov	r9, r3
 8000540:	b083      	sub	sp, #12
 8000542:	428b      	cmp	r3, r1
 8000544:	d830      	bhi.n	80005a8 <__udivmoddi4+0x7c>
 8000546:	d02d      	beq.n	80005a4 <__udivmoddi4+0x78>
 8000548:	4649      	mov	r1, r9
 800054a:	4650      	mov	r0, sl
 800054c:	f001 fa96 	bl	8001a7c <__clzdi2>
 8000550:	0029      	movs	r1, r5
 8000552:	0006      	movs	r6, r0
 8000554:	0020      	movs	r0, r4
 8000556:	f001 fa91 	bl	8001a7c <__clzdi2>
 800055a:	1a33      	subs	r3, r6, r0
 800055c:	4698      	mov	r8, r3
 800055e:	3b20      	subs	r3, #32
 8000560:	469b      	mov	fp, r3
 8000562:	d433      	bmi.n	80005cc <__udivmoddi4+0xa0>
 8000564:	465a      	mov	r2, fp
 8000566:	4653      	mov	r3, sl
 8000568:	4093      	lsls	r3, r2
 800056a:	4642      	mov	r2, r8
 800056c:	001f      	movs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d83a      	bhi.n	80005ee <__udivmoddi4+0xc2>
 8000578:	42af      	cmp	r7, r5
 800057a:	d100      	bne.n	800057e <__udivmoddi4+0x52>
 800057c:	e078      	b.n	8000670 <__udivmoddi4+0x144>
 800057e:	465b      	mov	r3, fp
 8000580:	1ba4      	subs	r4, r4, r6
 8000582:	41bd      	sbcs	r5, r7
 8000584:	2b00      	cmp	r3, #0
 8000586:	da00      	bge.n	800058a <__udivmoddi4+0x5e>
 8000588:	e075      	b.n	8000676 <__udivmoddi4+0x14a>
 800058a:	2200      	movs	r2, #0
 800058c:	2300      	movs	r3, #0
 800058e:	9200      	str	r2, [sp, #0]
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2301      	movs	r3, #1
 8000594:	465a      	mov	r2, fp
 8000596:	4093      	lsls	r3, r2
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2301      	movs	r3, #1
 800059c:	4642      	mov	r2, r8
 800059e:	4093      	lsls	r3, r2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	e028      	b.n	80005f6 <__udivmoddi4+0xca>
 80005a4:	4282      	cmp	r2, r0
 80005a6:	d9cf      	bls.n	8000548 <__udivmoddi4+0x1c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <__udivmoddi4+0x8e>
 80005b6:	601c      	str	r4, [r3, #0]
 80005b8:	605d      	str	r5, [r3, #4]
 80005ba:	9800      	ldr	r0, [sp, #0]
 80005bc:	9901      	ldr	r1, [sp, #4]
 80005be:	b003      	add	sp, #12
 80005c0:	bcf0      	pop	{r4, r5, r6, r7}
 80005c2:	46bb      	mov	fp, r7
 80005c4:	46b2      	mov	sl, r6
 80005c6:	46a9      	mov	r9, r5
 80005c8:	46a0      	mov	r8, r4
 80005ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005cc:	4642      	mov	r2, r8
 80005ce:	2320      	movs	r3, #32
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	4652      	mov	r2, sl
 80005d4:	40da      	lsrs	r2, r3
 80005d6:	4641      	mov	r1, r8
 80005d8:	0013      	movs	r3, r2
 80005da:	464a      	mov	r2, r9
 80005dc:	408a      	lsls	r2, r1
 80005de:	0017      	movs	r7, r2
 80005e0:	4642      	mov	r2, r8
 80005e2:	431f      	orrs	r7, r3
 80005e4:	4653      	mov	r3, sl
 80005e6:	4093      	lsls	r3, r2
 80005e8:	001e      	movs	r6, r3
 80005ea:	42af      	cmp	r7, r5
 80005ec:	d9c4      	bls.n	8000578 <__udivmoddi4+0x4c>
 80005ee:	2200      	movs	r2, #0
 80005f0:	2300      	movs	r3, #0
 80005f2:	9200      	str	r2, [sp, #0]
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	4643      	mov	r3, r8
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0d9      	beq.n	80005b0 <__udivmoddi4+0x84>
 80005fc:	07fb      	lsls	r3, r7, #31
 80005fe:	0872      	lsrs	r2, r6, #1
 8000600:	431a      	orrs	r2, r3
 8000602:	4646      	mov	r6, r8
 8000604:	087b      	lsrs	r3, r7, #1
 8000606:	e00e      	b.n	8000626 <__udivmoddi4+0xfa>
 8000608:	42ab      	cmp	r3, r5
 800060a:	d101      	bne.n	8000610 <__udivmoddi4+0xe4>
 800060c:	42a2      	cmp	r2, r4
 800060e:	d80c      	bhi.n	800062a <__udivmoddi4+0xfe>
 8000610:	1aa4      	subs	r4, r4, r2
 8000612:	419d      	sbcs	r5, r3
 8000614:	2001      	movs	r0, #1
 8000616:	1924      	adds	r4, r4, r4
 8000618:	416d      	adcs	r5, r5
 800061a:	2100      	movs	r1, #0
 800061c:	3e01      	subs	r6, #1
 800061e:	1824      	adds	r4, r4, r0
 8000620:	414d      	adcs	r5, r1
 8000622:	2e00      	cmp	r6, #0
 8000624:	d006      	beq.n	8000634 <__udivmoddi4+0x108>
 8000626:	42ab      	cmp	r3, r5
 8000628:	d9ee      	bls.n	8000608 <__udivmoddi4+0xdc>
 800062a:	3e01      	subs	r6, #1
 800062c:	1924      	adds	r4, r4, r4
 800062e:	416d      	adcs	r5, r5
 8000630:	2e00      	cmp	r6, #0
 8000632:	d1f8      	bne.n	8000626 <__udivmoddi4+0xfa>
 8000634:	9800      	ldr	r0, [sp, #0]
 8000636:	9901      	ldr	r1, [sp, #4]
 8000638:	465b      	mov	r3, fp
 800063a:	1900      	adds	r0, r0, r4
 800063c:	4169      	adcs	r1, r5
 800063e:	2b00      	cmp	r3, #0
 8000640:	db24      	blt.n	800068c <__udivmoddi4+0x160>
 8000642:	002b      	movs	r3, r5
 8000644:	465a      	mov	r2, fp
 8000646:	4644      	mov	r4, r8
 8000648:	40d3      	lsrs	r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	40e2      	lsrs	r2, r4
 800064e:	001c      	movs	r4, r3
 8000650:	465b      	mov	r3, fp
 8000652:	0015      	movs	r5, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	db2a      	blt.n	80006ae <__udivmoddi4+0x182>
 8000658:	0026      	movs	r6, r4
 800065a:	409e      	lsls	r6, r3
 800065c:	0033      	movs	r3, r6
 800065e:	0026      	movs	r6, r4
 8000660:	4647      	mov	r7, r8
 8000662:	40be      	lsls	r6, r7
 8000664:	0032      	movs	r2, r6
 8000666:	1a80      	subs	r0, r0, r2
 8000668:	4199      	sbcs	r1, r3
 800066a:	9000      	str	r0, [sp, #0]
 800066c:	9101      	str	r1, [sp, #4]
 800066e:	e79f      	b.n	80005b0 <__udivmoddi4+0x84>
 8000670:	42a3      	cmp	r3, r4
 8000672:	d8bc      	bhi.n	80005ee <__udivmoddi4+0xc2>
 8000674:	e783      	b.n	800057e <__udivmoddi4+0x52>
 8000676:	4642      	mov	r2, r8
 8000678:	2320      	movs	r3, #32
 800067a:	2100      	movs	r1, #0
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	2200      	movs	r2, #0
 8000680:	9100      	str	r1, [sp, #0]
 8000682:	9201      	str	r2, [sp, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	40da      	lsrs	r2, r3
 8000688:	9201      	str	r2, [sp, #4]
 800068a:	e786      	b.n	800059a <__udivmoddi4+0x6e>
 800068c:	4642      	mov	r2, r8
 800068e:	2320      	movs	r3, #32
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	4646      	mov	r6, r8
 8000696:	409a      	lsls	r2, r3
 8000698:	0023      	movs	r3, r4
 800069a:	40f3      	lsrs	r3, r6
 800069c:	4644      	mov	r4, r8
 800069e:	4313      	orrs	r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	40e2      	lsrs	r2, r4
 80006a4:	001c      	movs	r4, r3
 80006a6:	465b      	mov	r3, fp
 80006a8:	0015      	movs	r5, r2
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dad4      	bge.n	8000658 <__udivmoddi4+0x12c>
 80006ae:	4642      	mov	r2, r8
 80006b0:	002f      	movs	r7, r5
 80006b2:	2320      	movs	r3, #32
 80006b4:	0026      	movs	r6, r4
 80006b6:	4097      	lsls	r7, r2
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	40de      	lsrs	r6, r3
 80006bc:	003b      	movs	r3, r7
 80006be:	4333      	orrs	r3, r6
 80006c0:	e7cd      	b.n	800065e <__udivmoddi4+0x132>
 80006c2:	46c0      	nop			; (mov r8, r8)

080006c4 <__aeabi_ddiv>:
 80006c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c6:	4657      	mov	r7, sl
 80006c8:	464e      	mov	r6, r9
 80006ca:	4645      	mov	r5, r8
 80006cc:	46de      	mov	lr, fp
 80006ce:	b5e0      	push	{r5, r6, r7, lr}
 80006d0:	4681      	mov	r9, r0
 80006d2:	0005      	movs	r5, r0
 80006d4:	030c      	lsls	r4, r1, #12
 80006d6:	0048      	lsls	r0, r1, #1
 80006d8:	4692      	mov	sl, r2
 80006da:	001f      	movs	r7, r3
 80006dc:	b085      	sub	sp, #20
 80006de:	0b24      	lsrs	r4, r4, #12
 80006e0:	0d40      	lsrs	r0, r0, #21
 80006e2:	0fce      	lsrs	r6, r1, #31
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d100      	bne.n	80006ea <__aeabi_ddiv+0x26>
 80006e8:	e156      	b.n	8000998 <__aeabi_ddiv+0x2d4>
 80006ea:	4bd4      	ldr	r3, [pc, #848]	; (8000a3c <__aeabi_ddiv+0x378>)
 80006ec:	4298      	cmp	r0, r3
 80006ee:	d100      	bne.n	80006f2 <__aeabi_ddiv+0x2e>
 80006f0:	e172      	b.n	80009d8 <__aeabi_ddiv+0x314>
 80006f2:	0f6b      	lsrs	r3, r5, #29
 80006f4:	00e4      	lsls	r4, r4, #3
 80006f6:	431c      	orrs	r4, r3
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	041b      	lsls	r3, r3, #16
 80006fc:	4323      	orrs	r3, r4
 80006fe:	4698      	mov	r8, r3
 8000700:	4bcf      	ldr	r3, [pc, #828]	; (8000a40 <__aeabi_ddiv+0x37c>)
 8000702:	00ed      	lsls	r5, r5, #3
 8000704:	469b      	mov	fp, r3
 8000706:	2300      	movs	r3, #0
 8000708:	4699      	mov	r9, r3
 800070a:	4483      	add	fp, r0
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	033c      	lsls	r4, r7, #12
 8000710:	007b      	lsls	r3, r7, #1
 8000712:	4650      	mov	r0, sl
 8000714:	0b24      	lsrs	r4, r4, #12
 8000716:	0d5b      	lsrs	r3, r3, #21
 8000718:	0fff      	lsrs	r7, r7, #31
 800071a:	2b00      	cmp	r3, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_ddiv+0x5c>
 800071e:	e11f      	b.n	8000960 <__aeabi_ddiv+0x29c>
 8000720:	4ac6      	ldr	r2, [pc, #792]	; (8000a3c <__aeabi_ddiv+0x378>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d100      	bne.n	8000728 <__aeabi_ddiv+0x64>
 8000726:	e162      	b.n	80009ee <__aeabi_ddiv+0x32a>
 8000728:	49c5      	ldr	r1, [pc, #788]	; (8000a40 <__aeabi_ddiv+0x37c>)
 800072a:	0f42      	lsrs	r2, r0, #29
 800072c:	468c      	mov	ip, r1
 800072e:	00e4      	lsls	r4, r4, #3
 8000730:	4659      	mov	r1, fp
 8000732:	4314      	orrs	r4, r2
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	4463      	add	r3, ip
 8000738:	0412      	lsls	r2, r2, #16
 800073a:	1acb      	subs	r3, r1, r3
 800073c:	4314      	orrs	r4, r2
 800073e:	469b      	mov	fp, r3
 8000740:	00c2      	lsls	r2, r0, #3
 8000742:	2000      	movs	r0, #0
 8000744:	0033      	movs	r3, r6
 8000746:	407b      	eors	r3, r7
 8000748:	469a      	mov	sl, r3
 800074a:	464b      	mov	r3, r9
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d827      	bhi.n	80007a0 <__aeabi_ddiv+0xdc>
 8000750:	49bc      	ldr	r1, [pc, #752]	; (8000a44 <__aeabi_ddiv+0x380>)
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	58cb      	ldr	r3, [r1, r3]
 8000756:	469f      	mov	pc, r3
 8000758:	46b2      	mov	sl, r6
 800075a:	9b00      	ldr	r3, [sp, #0]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d016      	beq.n	800078e <__aeabi_ddiv+0xca>
 8000760:	2b03      	cmp	r3, #3
 8000762:	d100      	bne.n	8000766 <__aeabi_ddiv+0xa2>
 8000764:	e28e      	b.n	8000c84 <__aeabi_ddiv+0x5c0>
 8000766:	2b01      	cmp	r3, #1
 8000768:	d000      	beq.n	800076c <__aeabi_ddiv+0xa8>
 800076a:	e0d9      	b.n	8000920 <__aeabi_ddiv+0x25c>
 800076c:	2300      	movs	r3, #0
 800076e:	2400      	movs	r4, #0
 8000770:	2500      	movs	r5, #0
 8000772:	4652      	mov	r2, sl
 8000774:	051b      	lsls	r3, r3, #20
 8000776:	4323      	orrs	r3, r4
 8000778:	07d2      	lsls	r2, r2, #31
 800077a:	4313      	orrs	r3, r2
 800077c:	0028      	movs	r0, r5
 800077e:	0019      	movs	r1, r3
 8000780:	b005      	add	sp, #20
 8000782:	bcf0      	pop	{r4, r5, r6, r7}
 8000784:	46bb      	mov	fp, r7
 8000786:	46b2      	mov	sl, r6
 8000788:	46a9      	mov	r9, r5
 800078a:	46a0      	mov	r8, r4
 800078c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078e:	2400      	movs	r4, #0
 8000790:	2500      	movs	r5, #0
 8000792:	4baa      	ldr	r3, [pc, #680]	; (8000a3c <__aeabi_ddiv+0x378>)
 8000794:	e7ed      	b.n	8000772 <__aeabi_ddiv+0xae>
 8000796:	46ba      	mov	sl, r7
 8000798:	46a0      	mov	r8, r4
 800079a:	0015      	movs	r5, r2
 800079c:	9000      	str	r0, [sp, #0]
 800079e:	e7dc      	b.n	800075a <__aeabi_ddiv+0x96>
 80007a0:	4544      	cmp	r4, r8
 80007a2:	d200      	bcs.n	80007a6 <__aeabi_ddiv+0xe2>
 80007a4:	e1c7      	b.n	8000b36 <__aeabi_ddiv+0x472>
 80007a6:	d100      	bne.n	80007aa <__aeabi_ddiv+0xe6>
 80007a8:	e1c2      	b.n	8000b30 <__aeabi_ddiv+0x46c>
 80007aa:	2301      	movs	r3, #1
 80007ac:	425b      	negs	r3, r3
 80007ae:	469c      	mov	ip, r3
 80007b0:	002e      	movs	r6, r5
 80007b2:	4640      	mov	r0, r8
 80007b4:	2500      	movs	r5, #0
 80007b6:	44e3      	add	fp, ip
 80007b8:	0223      	lsls	r3, r4, #8
 80007ba:	0e14      	lsrs	r4, r2, #24
 80007bc:	431c      	orrs	r4, r3
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	4699      	mov	r9, r3
 80007c2:	0423      	lsls	r3, r4, #16
 80007c4:	0c1f      	lsrs	r7, r3, #16
 80007c6:	0212      	lsls	r2, r2, #8
 80007c8:	4649      	mov	r1, r9
 80007ca:	9200      	str	r2, [sp, #0]
 80007cc:	9701      	str	r7, [sp, #4]
 80007ce:	f7ff fd51 	bl	8000274 <__aeabi_uidivmod>
 80007d2:	0002      	movs	r2, r0
 80007d4:	437a      	muls	r2, r7
 80007d6:	040b      	lsls	r3, r1, #16
 80007d8:	0c31      	lsrs	r1, r6, #16
 80007da:	4680      	mov	r8, r0
 80007dc:	4319      	orrs	r1, r3
 80007de:	428a      	cmp	r2, r1
 80007e0:	d907      	bls.n	80007f2 <__aeabi_ddiv+0x12e>
 80007e2:	2301      	movs	r3, #1
 80007e4:	425b      	negs	r3, r3
 80007e6:	469c      	mov	ip, r3
 80007e8:	1909      	adds	r1, r1, r4
 80007ea:	44e0      	add	r8, ip
 80007ec:	428c      	cmp	r4, r1
 80007ee:	d800      	bhi.n	80007f2 <__aeabi_ddiv+0x12e>
 80007f0:	e207      	b.n	8000c02 <__aeabi_ddiv+0x53e>
 80007f2:	1a88      	subs	r0, r1, r2
 80007f4:	4649      	mov	r1, r9
 80007f6:	f7ff fd3d 	bl	8000274 <__aeabi_uidivmod>
 80007fa:	0409      	lsls	r1, r1, #16
 80007fc:	468c      	mov	ip, r1
 80007fe:	0431      	lsls	r1, r6, #16
 8000800:	4666      	mov	r6, ip
 8000802:	9a01      	ldr	r2, [sp, #4]
 8000804:	0c09      	lsrs	r1, r1, #16
 8000806:	4342      	muls	r2, r0
 8000808:	0003      	movs	r3, r0
 800080a:	4331      	orrs	r1, r6
 800080c:	428a      	cmp	r2, r1
 800080e:	d904      	bls.n	800081a <__aeabi_ddiv+0x156>
 8000810:	1909      	adds	r1, r1, r4
 8000812:	3b01      	subs	r3, #1
 8000814:	428c      	cmp	r4, r1
 8000816:	d800      	bhi.n	800081a <__aeabi_ddiv+0x156>
 8000818:	e1ed      	b.n	8000bf6 <__aeabi_ddiv+0x532>
 800081a:	1a88      	subs	r0, r1, r2
 800081c:	4642      	mov	r2, r8
 800081e:	0412      	lsls	r2, r2, #16
 8000820:	431a      	orrs	r2, r3
 8000822:	4690      	mov	r8, r2
 8000824:	4641      	mov	r1, r8
 8000826:	9b00      	ldr	r3, [sp, #0]
 8000828:	040e      	lsls	r6, r1, #16
 800082a:	0c1b      	lsrs	r3, r3, #16
 800082c:	001f      	movs	r7, r3
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	9b00      	ldr	r3, [sp, #0]
 8000832:	0c36      	lsrs	r6, r6, #16
 8000834:	041b      	lsls	r3, r3, #16
 8000836:	0c19      	lsrs	r1, r3, #16
 8000838:	000b      	movs	r3, r1
 800083a:	4373      	muls	r3, r6
 800083c:	0c12      	lsrs	r2, r2, #16
 800083e:	437e      	muls	r6, r7
 8000840:	9103      	str	r1, [sp, #12]
 8000842:	4351      	muls	r1, r2
 8000844:	437a      	muls	r2, r7
 8000846:	0c1f      	lsrs	r7, r3, #16
 8000848:	46bc      	mov	ip, r7
 800084a:	1876      	adds	r6, r6, r1
 800084c:	4466      	add	r6, ip
 800084e:	42b1      	cmp	r1, r6
 8000850:	d903      	bls.n	800085a <__aeabi_ddiv+0x196>
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	0249      	lsls	r1, r1, #9
 8000856:	468c      	mov	ip, r1
 8000858:	4462      	add	r2, ip
 800085a:	0c31      	lsrs	r1, r6, #16
 800085c:	188a      	adds	r2, r1, r2
 800085e:	0431      	lsls	r1, r6, #16
 8000860:	041e      	lsls	r6, r3, #16
 8000862:	0c36      	lsrs	r6, r6, #16
 8000864:	198e      	adds	r6, r1, r6
 8000866:	4290      	cmp	r0, r2
 8000868:	d302      	bcc.n	8000870 <__aeabi_ddiv+0x1ac>
 800086a:	d112      	bne.n	8000892 <__aeabi_ddiv+0x1ce>
 800086c:	42b5      	cmp	r5, r6
 800086e:	d210      	bcs.n	8000892 <__aeabi_ddiv+0x1ce>
 8000870:	4643      	mov	r3, r8
 8000872:	1e59      	subs	r1, r3, #1
 8000874:	9b00      	ldr	r3, [sp, #0]
 8000876:	469c      	mov	ip, r3
 8000878:	4465      	add	r5, ip
 800087a:	001f      	movs	r7, r3
 800087c:	429d      	cmp	r5, r3
 800087e:	419b      	sbcs	r3, r3
 8000880:	425b      	negs	r3, r3
 8000882:	191b      	adds	r3, r3, r4
 8000884:	18c0      	adds	r0, r0, r3
 8000886:	4284      	cmp	r4, r0
 8000888:	d200      	bcs.n	800088c <__aeabi_ddiv+0x1c8>
 800088a:	e1a0      	b.n	8000bce <__aeabi_ddiv+0x50a>
 800088c:	d100      	bne.n	8000890 <__aeabi_ddiv+0x1cc>
 800088e:	e19b      	b.n	8000bc8 <__aeabi_ddiv+0x504>
 8000890:	4688      	mov	r8, r1
 8000892:	1bae      	subs	r6, r5, r6
 8000894:	42b5      	cmp	r5, r6
 8000896:	41ad      	sbcs	r5, r5
 8000898:	1a80      	subs	r0, r0, r2
 800089a:	426d      	negs	r5, r5
 800089c:	1b40      	subs	r0, r0, r5
 800089e:	4284      	cmp	r4, r0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_ddiv+0x1e0>
 80008a2:	e1d5      	b.n	8000c50 <__aeabi_ddiv+0x58c>
 80008a4:	4649      	mov	r1, r9
 80008a6:	f7ff fce5 	bl	8000274 <__aeabi_uidivmod>
 80008aa:	9a01      	ldr	r2, [sp, #4]
 80008ac:	040b      	lsls	r3, r1, #16
 80008ae:	4342      	muls	r2, r0
 80008b0:	0c31      	lsrs	r1, r6, #16
 80008b2:	0005      	movs	r5, r0
 80008b4:	4319      	orrs	r1, r3
 80008b6:	428a      	cmp	r2, r1
 80008b8:	d900      	bls.n	80008bc <__aeabi_ddiv+0x1f8>
 80008ba:	e16c      	b.n	8000b96 <__aeabi_ddiv+0x4d2>
 80008bc:	1a88      	subs	r0, r1, r2
 80008be:	4649      	mov	r1, r9
 80008c0:	f7ff fcd8 	bl	8000274 <__aeabi_uidivmod>
 80008c4:	9a01      	ldr	r2, [sp, #4]
 80008c6:	0436      	lsls	r6, r6, #16
 80008c8:	4342      	muls	r2, r0
 80008ca:	0409      	lsls	r1, r1, #16
 80008cc:	0c36      	lsrs	r6, r6, #16
 80008ce:	0003      	movs	r3, r0
 80008d0:	430e      	orrs	r6, r1
 80008d2:	42b2      	cmp	r2, r6
 80008d4:	d900      	bls.n	80008d8 <__aeabi_ddiv+0x214>
 80008d6:	e153      	b.n	8000b80 <__aeabi_ddiv+0x4bc>
 80008d8:	9803      	ldr	r0, [sp, #12]
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	0002      	movs	r2, r0
 80008de:	042d      	lsls	r5, r5, #16
 80008e0:	431d      	orrs	r5, r3
 80008e2:	9f02      	ldr	r7, [sp, #8]
 80008e4:	042b      	lsls	r3, r5, #16
 80008e6:	0c1b      	lsrs	r3, r3, #16
 80008e8:	435a      	muls	r2, r3
 80008ea:	437b      	muls	r3, r7
 80008ec:	469c      	mov	ip, r3
 80008ee:	0c29      	lsrs	r1, r5, #16
 80008f0:	4348      	muls	r0, r1
 80008f2:	0c13      	lsrs	r3, r2, #16
 80008f4:	4484      	add	ip, r0
 80008f6:	4463      	add	r3, ip
 80008f8:	4379      	muls	r1, r7
 80008fa:	4298      	cmp	r0, r3
 80008fc:	d903      	bls.n	8000906 <__aeabi_ddiv+0x242>
 80008fe:	2080      	movs	r0, #128	; 0x80
 8000900:	0240      	lsls	r0, r0, #9
 8000902:	4684      	mov	ip, r0
 8000904:	4461      	add	r1, ip
 8000906:	0c18      	lsrs	r0, r3, #16
 8000908:	0412      	lsls	r2, r2, #16
 800090a:	041b      	lsls	r3, r3, #16
 800090c:	0c12      	lsrs	r2, r2, #16
 800090e:	1841      	adds	r1, r0, r1
 8000910:	189b      	adds	r3, r3, r2
 8000912:	428e      	cmp	r6, r1
 8000914:	d200      	bcs.n	8000918 <__aeabi_ddiv+0x254>
 8000916:	e0ff      	b.n	8000b18 <__aeabi_ddiv+0x454>
 8000918:	d100      	bne.n	800091c <__aeabi_ddiv+0x258>
 800091a:	e0fa      	b.n	8000b12 <__aeabi_ddiv+0x44e>
 800091c:	2301      	movs	r3, #1
 800091e:	431d      	orrs	r5, r3
 8000920:	4a49      	ldr	r2, [pc, #292]	; (8000a48 <__aeabi_ddiv+0x384>)
 8000922:	445a      	add	r2, fp
 8000924:	2a00      	cmp	r2, #0
 8000926:	dc00      	bgt.n	800092a <__aeabi_ddiv+0x266>
 8000928:	e0aa      	b.n	8000a80 <__aeabi_ddiv+0x3bc>
 800092a:	076b      	lsls	r3, r5, #29
 800092c:	d000      	beq.n	8000930 <__aeabi_ddiv+0x26c>
 800092e:	e13d      	b.n	8000bac <__aeabi_ddiv+0x4e8>
 8000930:	08ed      	lsrs	r5, r5, #3
 8000932:	4643      	mov	r3, r8
 8000934:	01db      	lsls	r3, r3, #7
 8000936:	d506      	bpl.n	8000946 <__aeabi_ddiv+0x282>
 8000938:	4642      	mov	r2, r8
 800093a:	4b44      	ldr	r3, [pc, #272]	; (8000a4c <__aeabi_ddiv+0x388>)
 800093c:	401a      	ands	r2, r3
 800093e:	4690      	mov	r8, r2
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	00d2      	lsls	r2, r2, #3
 8000944:	445a      	add	r2, fp
 8000946:	4b42      	ldr	r3, [pc, #264]	; (8000a50 <__aeabi_ddiv+0x38c>)
 8000948:	429a      	cmp	r2, r3
 800094a:	dd00      	ble.n	800094e <__aeabi_ddiv+0x28a>
 800094c:	e71f      	b.n	800078e <__aeabi_ddiv+0xca>
 800094e:	4643      	mov	r3, r8
 8000950:	075b      	lsls	r3, r3, #29
 8000952:	431d      	orrs	r5, r3
 8000954:	4643      	mov	r3, r8
 8000956:	0552      	lsls	r2, r2, #21
 8000958:	025c      	lsls	r4, r3, #9
 800095a:	0b24      	lsrs	r4, r4, #12
 800095c:	0d53      	lsrs	r3, r2, #21
 800095e:	e708      	b.n	8000772 <__aeabi_ddiv+0xae>
 8000960:	4652      	mov	r2, sl
 8000962:	4322      	orrs	r2, r4
 8000964:	d100      	bne.n	8000968 <__aeabi_ddiv+0x2a4>
 8000966:	e07b      	b.n	8000a60 <__aeabi_ddiv+0x39c>
 8000968:	2c00      	cmp	r4, #0
 800096a:	d100      	bne.n	800096e <__aeabi_ddiv+0x2aa>
 800096c:	e0fa      	b.n	8000b64 <__aeabi_ddiv+0x4a0>
 800096e:	0020      	movs	r0, r4
 8000970:	f001 f866 	bl	8001a40 <__clzsi2>
 8000974:	0002      	movs	r2, r0
 8000976:	3a0b      	subs	r2, #11
 8000978:	231d      	movs	r3, #29
 800097a:	0001      	movs	r1, r0
 800097c:	1a9b      	subs	r3, r3, r2
 800097e:	4652      	mov	r2, sl
 8000980:	3908      	subs	r1, #8
 8000982:	40da      	lsrs	r2, r3
 8000984:	408c      	lsls	r4, r1
 8000986:	4314      	orrs	r4, r2
 8000988:	4652      	mov	r2, sl
 800098a:	408a      	lsls	r2, r1
 800098c:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <__aeabi_ddiv+0x390>)
 800098e:	4458      	add	r0, fp
 8000990:	469b      	mov	fp, r3
 8000992:	4483      	add	fp, r0
 8000994:	2000      	movs	r0, #0
 8000996:	e6d5      	b.n	8000744 <__aeabi_ddiv+0x80>
 8000998:	464b      	mov	r3, r9
 800099a:	4323      	orrs	r3, r4
 800099c:	4698      	mov	r8, r3
 800099e:	d044      	beq.n	8000a2a <__aeabi_ddiv+0x366>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_ddiv+0x2e2>
 80009a4:	e0ce      	b.n	8000b44 <__aeabi_ddiv+0x480>
 80009a6:	0020      	movs	r0, r4
 80009a8:	f001 f84a 	bl	8001a40 <__clzsi2>
 80009ac:	0001      	movs	r1, r0
 80009ae:	0002      	movs	r2, r0
 80009b0:	390b      	subs	r1, #11
 80009b2:	231d      	movs	r3, #29
 80009b4:	1a5b      	subs	r3, r3, r1
 80009b6:	4649      	mov	r1, r9
 80009b8:	0010      	movs	r0, r2
 80009ba:	40d9      	lsrs	r1, r3
 80009bc:	3808      	subs	r0, #8
 80009be:	4084      	lsls	r4, r0
 80009c0:	000b      	movs	r3, r1
 80009c2:	464d      	mov	r5, r9
 80009c4:	4323      	orrs	r3, r4
 80009c6:	4698      	mov	r8, r3
 80009c8:	4085      	lsls	r5, r0
 80009ca:	4823      	ldr	r0, [pc, #140]	; (8000a58 <__aeabi_ddiv+0x394>)
 80009cc:	1a83      	subs	r3, r0, r2
 80009ce:	469b      	mov	fp, r3
 80009d0:	2300      	movs	r3, #0
 80009d2:	4699      	mov	r9, r3
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	e69a      	b.n	800070e <__aeabi_ddiv+0x4a>
 80009d8:	464b      	mov	r3, r9
 80009da:	4323      	orrs	r3, r4
 80009dc:	4698      	mov	r8, r3
 80009de:	d11d      	bne.n	8000a1c <__aeabi_ddiv+0x358>
 80009e0:	2308      	movs	r3, #8
 80009e2:	4699      	mov	r9, r3
 80009e4:	3b06      	subs	r3, #6
 80009e6:	2500      	movs	r5, #0
 80009e8:	4683      	mov	fp, r0
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	e68f      	b.n	800070e <__aeabi_ddiv+0x4a>
 80009ee:	4652      	mov	r2, sl
 80009f0:	4322      	orrs	r2, r4
 80009f2:	d109      	bne.n	8000a08 <__aeabi_ddiv+0x344>
 80009f4:	2302      	movs	r3, #2
 80009f6:	4649      	mov	r1, r9
 80009f8:	4319      	orrs	r1, r3
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <__aeabi_ddiv+0x398>)
 80009fc:	4689      	mov	r9, r1
 80009fe:	469c      	mov	ip, r3
 8000a00:	2400      	movs	r4, #0
 8000a02:	2002      	movs	r0, #2
 8000a04:	44e3      	add	fp, ip
 8000a06:	e69d      	b.n	8000744 <__aeabi_ddiv+0x80>
 8000a08:	2303      	movs	r3, #3
 8000a0a:	464a      	mov	r2, r9
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <__aeabi_ddiv+0x398>)
 8000a10:	4691      	mov	r9, r2
 8000a12:	469c      	mov	ip, r3
 8000a14:	4652      	mov	r2, sl
 8000a16:	2003      	movs	r0, #3
 8000a18:	44e3      	add	fp, ip
 8000a1a:	e693      	b.n	8000744 <__aeabi_ddiv+0x80>
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	4699      	mov	r9, r3
 8000a20:	3b09      	subs	r3, #9
 8000a22:	46a0      	mov	r8, r4
 8000a24:	4683      	mov	fp, r0
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	e671      	b.n	800070e <__aeabi_ddiv+0x4a>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	2300      	movs	r3, #0
 8000a30:	469b      	mov	fp, r3
 8000a32:	3301      	adds	r3, #1
 8000a34:	2500      	movs	r5, #0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	e669      	b.n	800070e <__aeabi_ddiv+0x4a>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	000007ff 	.word	0x000007ff
 8000a40:	fffffc01 	.word	0xfffffc01
 8000a44:	08007bfc 	.word	0x08007bfc
 8000a48:	000003ff 	.word	0x000003ff
 8000a4c:	feffffff 	.word	0xfeffffff
 8000a50:	000007fe 	.word	0x000007fe
 8000a54:	000003f3 	.word	0x000003f3
 8000a58:	fffffc0d 	.word	0xfffffc0d
 8000a5c:	fffff801 	.word	0xfffff801
 8000a60:	4649      	mov	r1, r9
 8000a62:	2301      	movs	r3, #1
 8000a64:	4319      	orrs	r1, r3
 8000a66:	4689      	mov	r9, r1
 8000a68:	2400      	movs	r4, #0
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	e66a      	b.n	8000744 <__aeabi_ddiv+0x80>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2480      	movs	r4, #128	; 0x80
 8000a72:	469a      	mov	sl, r3
 8000a74:	2500      	movs	r5, #0
 8000a76:	4b8a      	ldr	r3, [pc, #552]	; (8000ca0 <__aeabi_ddiv+0x5dc>)
 8000a78:	0324      	lsls	r4, r4, #12
 8000a7a:	e67a      	b.n	8000772 <__aeabi_ddiv+0xae>
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	426d      	negs	r5, r5
 8000a80:	2301      	movs	r3, #1
 8000a82:	1a9b      	subs	r3, r3, r2
 8000a84:	2b38      	cmp	r3, #56	; 0x38
 8000a86:	dd00      	ble.n	8000a8a <__aeabi_ddiv+0x3c6>
 8000a88:	e670      	b.n	800076c <__aeabi_ddiv+0xa8>
 8000a8a:	2b1f      	cmp	r3, #31
 8000a8c:	dc00      	bgt.n	8000a90 <__aeabi_ddiv+0x3cc>
 8000a8e:	e0bf      	b.n	8000c10 <__aeabi_ddiv+0x54c>
 8000a90:	211f      	movs	r1, #31
 8000a92:	4249      	negs	r1, r1
 8000a94:	1a8a      	subs	r2, r1, r2
 8000a96:	4641      	mov	r1, r8
 8000a98:	40d1      	lsrs	r1, r2
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	2b20      	cmp	r3, #32
 8000a9e:	d004      	beq.n	8000aaa <__aeabi_ddiv+0x3e6>
 8000aa0:	4641      	mov	r1, r8
 8000aa2:	4b80      	ldr	r3, [pc, #512]	; (8000ca4 <__aeabi_ddiv+0x5e0>)
 8000aa4:	445b      	add	r3, fp
 8000aa6:	4099      	lsls	r1, r3
 8000aa8:	430d      	orrs	r5, r1
 8000aaa:	1e6b      	subs	r3, r5, #1
 8000aac:	419d      	sbcs	r5, r3
 8000aae:	2307      	movs	r3, #7
 8000ab0:	432a      	orrs	r2, r5
 8000ab2:	001d      	movs	r5, r3
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	4015      	ands	r5, r2
 8000ab8:	4213      	tst	r3, r2
 8000aba:	d100      	bne.n	8000abe <__aeabi_ddiv+0x3fa>
 8000abc:	e0d4      	b.n	8000c68 <__aeabi_ddiv+0x5a4>
 8000abe:	210f      	movs	r1, #15
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4011      	ands	r1, r2
 8000ac4:	2904      	cmp	r1, #4
 8000ac6:	d100      	bne.n	8000aca <__aeabi_ddiv+0x406>
 8000ac8:	e0cb      	b.n	8000c62 <__aeabi_ddiv+0x59e>
 8000aca:	1d11      	adds	r1, r2, #4
 8000acc:	4291      	cmp	r1, r2
 8000ace:	4192      	sbcs	r2, r2
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	189b      	adds	r3, r3, r2
 8000ad4:	000a      	movs	r2, r1
 8000ad6:	0219      	lsls	r1, r3, #8
 8000ad8:	d400      	bmi.n	8000adc <__aeabi_ddiv+0x418>
 8000ada:	e0c2      	b.n	8000c62 <__aeabi_ddiv+0x59e>
 8000adc:	2301      	movs	r3, #1
 8000ade:	2400      	movs	r4, #0
 8000ae0:	2500      	movs	r5, #0
 8000ae2:	e646      	b.n	8000772 <__aeabi_ddiv+0xae>
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	4641      	mov	r1, r8
 8000ae8:	031b      	lsls	r3, r3, #12
 8000aea:	4219      	tst	r1, r3
 8000aec:	d008      	beq.n	8000b00 <__aeabi_ddiv+0x43c>
 8000aee:	421c      	tst	r4, r3
 8000af0:	d106      	bne.n	8000b00 <__aeabi_ddiv+0x43c>
 8000af2:	431c      	orrs	r4, r3
 8000af4:	0324      	lsls	r4, r4, #12
 8000af6:	46ba      	mov	sl, r7
 8000af8:	0015      	movs	r5, r2
 8000afa:	4b69      	ldr	r3, [pc, #420]	; (8000ca0 <__aeabi_ddiv+0x5dc>)
 8000afc:	0b24      	lsrs	r4, r4, #12
 8000afe:	e638      	b.n	8000772 <__aeabi_ddiv+0xae>
 8000b00:	2480      	movs	r4, #128	; 0x80
 8000b02:	4643      	mov	r3, r8
 8000b04:	0324      	lsls	r4, r4, #12
 8000b06:	431c      	orrs	r4, r3
 8000b08:	0324      	lsls	r4, r4, #12
 8000b0a:	46b2      	mov	sl, r6
 8000b0c:	4b64      	ldr	r3, [pc, #400]	; (8000ca0 <__aeabi_ddiv+0x5dc>)
 8000b0e:	0b24      	lsrs	r4, r4, #12
 8000b10:	e62f      	b.n	8000772 <__aeabi_ddiv+0xae>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_ddiv+0x454>
 8000b16:	e703      	b.n	8000920 <__aeabi_ddiv+0x25c>
 8000b18:	19a6      	adds	r6, r4, r6
 8000b1a:	1e68      	subs	r0, r5, #1
 8000b1c:	42a6      	cmp	r6, r4
 8000b1e:	d200      	bcs.n	8000b22 <__aeabi_ddiv+0x45e>
 8000b20:	e08d      	b.n	8000c3e <__aeabi_ddiv+0x57a>
 8000b22:	428e      	cmp	r6, r1
 8000b24:	d200      	bcs.n	8000b28 <__aeabi_ddiv+0x464>
 8000b26:	e0a3      	b.n	8000c70 <__aeabi_ddiv+0x5ac>
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x468>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x5d0>
 8000b2c:	0005      	movs	r5, r0
 8000b2e:	e6f5      	b.n	800091c <__aeabi_ddiv+0x258>
 8000b30:	42aa      	cmp	r2, r5
 8000b32:	d900      	bls.n	8000b36 <__aeabi_ddiv+0x472>
 8000b34:	e639      	b.n	80007aa <__aeabi_ddiv+0xe6>
 8000b36:	4643      	mov	r3, r8
 8000b38:	07de      	lsls	r6, r3, #31
 8000b3a:	0858      	lsrs	r0, r3, #1
 8000b3c:	086b      	lsrs	r3, r5, #1
 8000b3e:	431e      	orrs	r6, r3
 8000b40:	07ed      	lsls	r5, r5, #31
 8000b42:	e639      	b.n	80007b8 <__aeabi_ddiv+0xf4>
 8000b44:	4648      	mov	r0, r9
 8000b46:	f000 ff7b 	bl	8001a40 <__clzsi2>
 8000b4a:	0001      	movs	r1, r0
 8000b4c:	0002      	movs	r2, r0
 8000b4e:	3115      	adds	r1, #21
 8000b50:	3220      	adds	r2, #32
 8000b52:	291c      	cmp	r1, #28
 8000b54:	dc00      	bgt.n	8000b58 <__aeabi_ddiv+0x494>
 8000b56:	e72c      	b.n	80009b2 <__aeabi_ddiv+0x2ee>
 8000b58:	464b      	mov	r3, r9
 8000b5a:	3808      	subs	r0, #8
 8000b5c:	4083      	lsls	r3, r0
 8000b5e:	2500      	movs	r5, #0
 8000b60:	4698      	mov	r8, r3
 8000b62:	e732      	b.n	80009ca <__aeabi_ddiv+0x306>
 8000b64:	f000 ff6c 	bl	8001a40 <__clzsi2>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	3215      	adds	r2, #21
 8000b6e:	3020      	adds	r0, #32
 8000b70:	2a1c      	cmp	r2, #28
 8000b72:	dc00      	bgt.n	8000b76 <__aeabi_ddiv+0x4b2>
 8000b74:	e700      	b.n	8000978 <__aeabi_ddiv+0x2b4>
 8000b76:	4654      	mov	r4, sl
 8000b78:	3b08      	subs	r3, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	409c      	lsls	r4, r3
 8000b7e:	e705      	b.n	800098c <__aeabi_ddiv+0x2c8>
 8000b80:	1936      	adds	r6, r6, r4
 8000b82:	3b01      	subs	r3, #1
 8000b84:	42b4      	cmp	r4, r6
 8000b86:	d900      	bls.n	8000b8a <__aeabi_ddiv+0x4c6>
 8000b88:	e6a6      	b.n	80008d8 <__aeabi_ddiv+0x214>
 8000b8a:	42b2      	cmp	r2, r6
 8000b8c:	d800      	bhi.n	8000b90 <__aeabi_ddiv+0x4cc>
 8000b8e:	e6a3      	b.n	80008d8 <__aeabi_ddiv+0x214>
 8000b90:	1e83      	subs	r3, r0, #2
 8000b92:	1936      	adds	r6, r6, r4
 8000b94:	e6a0      	b.n	80008d8 <__aeabi_ddiv+0x214>
 8000b96:	1909      	adds	r1, r1, r4
 8000b98:	3d01      	subs	r5, #1
 8000b9a:	428c      	cmp	r4, r1
 8000b9c:	d900      	bls.n	8000ba0 <__aeabi_ddiv+0x4dc>
 8000b9e:	e68d      	b.n	80008bc <__aeabi_ddiv+0x1f8>
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	d800      	bhi.n	8000ba6 <__aeabi_ddiv+0x4e2>
 8000ba4:	e68a      	b.n	80008bc <__aeabi_ddiv+0x1f8>
 8000ba6:	1e85      	subs	r5, r0, #2
 8000ba8:	1909      	adds	r1, r1, r4
 8000baa:	e687      	b.n	80008bc <__aeabi_ddiv+0x1f8>
 8000bac:	230f      	movs	r3, #15
 8000bae:	402b      	ands	r3, r5
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_ddiv+0x4f2>
 8000bb4:	e6bc      	b.n	8000930 <__aeabi_ddiv+0x26c>
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	425b      	negs	r3, r3
 8000bba:	42ab      	cmp	r3, r5
 8000bbc:	419b      	sbcs	r3, r3
 8000bbe:	3504      	adds	r5, #4
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	08ed      	lsrs	r5, r5, #3
 8000bc4:	4498      	add	r8, r3
 8000bc6:	e6b4      	b.n	8000932 <__aeabi_ddiv+0x26e>
 8000bc8:	42af      	cmp	r7, r5
 8000bca:	d900      	bls.n	8000bce <__aeabi_ddiv+0x50a>
 8000bcc:	e660      	b.n	8000890 <__aeabi_ddiv+0x1cc>
 8000bce:	4282      	cmp	r2, r0
 8000bd0:	d804      	bhi.n	8000bdc <__aeabi_ddiv+0x518>
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_ddiv+0x512>
 8000bd4:	e65c      	b.n	8000890 <__aeabi_ddiv+0x1cc>
 8000bd6:	42ae      	cmp	r6, r5
 8000bd8:	d800      	bhi.n	8000bdc <__aeabi_ddiv+0x518>
 8000bda:	e659      	b.n	8000890 <__aeabi_ddiv+0x1cc>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	425b      	negs	r3, r3
 8000be0:	469c      	mov	ip, r3
 8000be2:	9b00      	ldr	r3, [sp, #0]
 8000be4:	44e0      	add	r8, ip
 8000be6:	469c      	mov	ip, r3
 8000be8:	4465      	add	r5, ip
 8000bea:	429d      	cmp	r5, r3
 8000bec:	419b      	sbcs	r3, r3
 8000bee:	425b      	negs	r3, r3
 8000bf0:	191b      	adds	r3, r3, r4
 8000bf2:	18c0      	adds	r0, r0, r3
 8000bf4:	e64d      	b.n	8000892 <__aeabi_ddiv+0x1ce>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	d800      	bhi.n	8000bfc <__aeabi_ddiv+0x538>
 8000bfa:	e60e      	b.n	800081a <__aeabi_ddiv+0x156>
 8000bfc:	1e83      	subs	r3, r0, #2
 8000bfe:	1909      	adds	r1, r1, r4
 8000c00:	e60b      	b.n	800081a <__aeabi_ddiv+0x156>
 8000c02:	428a      	cmp	r2, r1
 8000c04:	d800      	bhi.n	8000c08 <__aeabi_ddiv+0x544>
 8000c06:	e5f4      	b.n	80007f2 <__aeabi_ddiv+0x12e>
 8000c08:	1e83      	subs	r3, r0, #2
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	1909      	adds	r1, r1, r4
 8000c0e:	e5f0      	b.n	80007f2 <__aeabi_ddiv+0x12e>
 8000c10:	4925      	ldr	r1, [pc, #148]	; (8000ca8 <__aeabi_ddiv+0x5e4>)
 8000c12:	0028      	movs	r0, r5
 8000c14:	4459      	add	r1, fp
 8000c16:	408d      	lsls	r5, r1
 8000c18:	4642      	mov	r2, r8
 8000c1a:	408a      	lsls	r2, r1
 8000c1c:	1e69      	subs	r1, r5, #1
 8000c1e:	418d      	sbcs	r5, r1
 8000c20:	4641      	mov	r1, r8
 8000c22:	40d8      	lsrs	r0, r3
 8000c24:	40d9      	lsrs	r1, r3
 8000c26:	4302      	orrs	r2, r0
 8000c28:	432a      	orrs	r2, r5
 8000c2a:	000b      	movs	r3, r1
 8000c2c:	0751      	lsls	r1, r2, #29
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_ddiv+0x56e>
 8000c30:	e751      	b.n	8000ad6 <__aeabi_ddiv+0x412>
 8000c32:	210f      	movs	r1, #15
 8000c34:	4011      	ands	r1, r2
 8000c36:	2904      	cmp	r1, #4
 8000c38:	d000      	beq.n	8000c3c <__aeabi_ddiv+0x578>
 8000c3a:	e746      	b.n	8000aca <__aeabi_ddiv+0x406>
 8000c3c:	e74b      	b.n	8000ad6 <__aeabi_ddiv+0x412>
 8000c3e:	0005      	movs	r5, r0
 8000c40:	428e      	cmp	r6, r1
 8000c42:	d000      	beq.n	8000c46 <__aeabi_ddiv+0x582>
 8000c44:	e66a      	b.n	800091c <__aeabi_ddiv+0x258>
 8000c46:	9a00      	ldr	r2, [sp, #0]
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_ddiv+0x58a>
 8000c4c:	e666      	b.n	800091c <__aeabi_ddiv+0x258>
 8000c4e:	e667      	b.n	8000920 <__aeabi_ddiv+0x25c>
 8000c50:	4a16      	ldr	r2, [pc, #88]	; (8000cac <__aeabi_ddiv+0x5e8>)
 8000c52:	445a      	add	r2, fp
 8000c54:	2a00      	cmp	r2, #0
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_ddiv+0x596>
 8000c58:	e710      	b.n	8000a7c <__aeabi_ddiv+0x3b8>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	4498      	add	r8, r3
 8000c60:	e667      	b.n	8000932 <__aeabi_ddiv+0x26e>
 8000c62:	075d      	lsls	r5, r3, #29
 8000c64:	025b      	lsls	r3, r3, #9
 8000c66:	0b1c      	lsrs	r4, r3, #12
 8000c68:	08d2      	lsrs	r2, r2, #3
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	4315      	orrs	r5, r2
 8000c6e:	e580      	b.n	8000772 <__aeabi_ddiv+0xae>
 8000c70:	9800      	ldr	r0, [sp, #0]
 8000c72:	3d02      	subs	r5, #2
 8000c74:	0042      	lsls	r2, r0, #1
 8000c76:	4282      	cmp	r2, r0
 8000c78:	41bf      	sbcs	r7, r7
 8000c7a:	427f      	negs	r7, r7
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	1936      	adds	r6, r6, r4
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	e7dd      	b.n	8000c40 <__aeabi_ddiv+0x57c>
 8000c84:	2480      	movs	r4, #128	; 0x80
 8000c86:	4643      	mov	r3, r8
 8000c88:	0324      	lsls	r4, r4, #12
 8000c8a:	431c      	orrs	r4, r3
 8000c8c:	0324      	lsls	r4, r4, #12
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__aeabi_ddiv+0x5dc>)
 8000c90:	0b24      	lsrs	r4, r4, #12
 8000c92:	e56e      	b.n	8000772 <__aeabi_ddiv+0xae>
 8000c94:	9a00      	ldr	r2, [sp, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3ea      	bcc.n	8000c70 <__aeabi_ddiv+0x5ac>
 8000c9a:	0005      	movs	r5, r0
 8000c9c:	e7d3      	b.n	8000c46 <__aeabi_ddiv+0x582>
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	000007ff 	.word	0x000007ff
 8000ca4:	0000043e 	.word	0x0000043e
 8000ca8:	0000041e 	.word	0x0000041e
 8000cac:	000003ff 	.word	0x000003ff

08000cb0 <__aeabi_dmul>:
 8000cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cb2:	4657      	mov	r7, sl
 8000cb4:	464e      	mov	r6, r9
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	46de      	mov	lr, fp
 8000cba:	b5e0      	push	{r5, r6, r7, lr}
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	030c      	lsls	r4, r1, #12
 8000cc0:	004b      	lsls	r3, r1, #1
 8000cc2:	0006      	movs	r6, r0
 8000cc4:	4692      	mov	sl, r2
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	0b24      	lsrs	r4, r4, #12
 8000cca:	0d5b      	lsrs	r3, r3, #21
 8000ccc:	0fcf      	lsrs	r7, r1, #31
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dmul+0x24>
 8000cd2:	e15c      	b.n	8000f8e <__aeabi_dmul+0x2de>
 8000cd4:	4ad9      	ldr	r2, [pc, #868]	; (800103c <__aeabi_dmul+0x38c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dmul+0x2c>
 8000cda:	e175      	b.n	8000fc8 <__aeabi_dmul+0x318>
 8000cdc:	0f42      	lsrs	r2, r0, #29
 8000cde:	00e4      	lsls	r4, r4, #3
 8000ce0:	4314      	orrs	r4, r2
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	0412      	lsls	r2, r2, #16
 8000ce6:	4314      	orrs	r4, r2
 8000ce8:	4ad5      	ldr	r2, [pc, #852]	; (8001040 <__aeabi_dmul+0x390>)
 8000cea:	00c5      	lsls	r5, r0, #3
 8000cec:	4694      	mov	ip, r2
 8000cee:	4463      	add	r3, ip
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	4699      	mov	r9, r3
 8000cf6:	469b      	mov	fp, r3
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	4642      	mov	r2, r8
 8000cfc:	031e      	lsls	r6, r3, #12
 8000cfe:	0fd2      	lsrs	r2, r2, #31
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4650      	mov	r0, sl
 8000d04:	4690      	mov	r8, r2
 8000d06:	0b36      	lsrs	r6, r6, #12
 8000d08:	0d5b      	lsrs	r3, r3, #21
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dmul+0x5e>
 8000d0c:	e120      	b.n	8000f50 <__aeabi_dmul+0x2a0>
 8000d0e:	4acb      	ldr	r2, [pc, #812]	; (800103c <__aeabi_dmul+0x38c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dmul+0x66>
 8000d14:	e162      	b.n	8000fdc <__aeabi_dmul+0x32c>
 8000d16:	49ca      	ldr	r1, [pc, #808]	; (8001040 <__aeabi_dmul+0x390>)
 8000d18:	0f42      	lsrs	r2, r0, #29
 8000d1a:	468c      	mov	ip, r1
 8000d1c:	9900      	ldr	r1, [sp, #0]
 8000d1e:	4463      	add	r3, ip
 8000d20:	00f6      	lsls	r6, r6, #3
 8000d22:	468c      	mov	ip, r1
 8000d24:	4316      	orrs	r6, r2
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	449c      	add	ip, r3
 8000d2a:	0412      	lsls	r2, r2, #16
 8000d2c:	4663      	mov	r3, ip
 8000d2e:	4316      	orrs	r6, r2
 8000d30:	00c2      	lsls	r2, r0, #3
 8000d32:	2000      	movs	r0, #0
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	9900      	ldr	r1, [sp, #0]
 8000d38:	4643      	mov	r3, r8
 8000d3a:	3101      	adds	r1, #1
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	4649      	mov	r1, r9
 8000d40:	407b      	eors	r3, r7
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	290f      	cmp	r1, #15
 8000d46:	d826      	bhi.n	8000d96 <__aeabi_dmul+0xe6>
 8000d48:	4bbe      	ldr	r3, [pc, #760]	; (8001044 <__aeabi_dmul+0x394>)
 8000d4a:	0089      	lsls	r1, r1, #2
 8000d4c:	5859      	ldr	r1, [r3, r1]
 8000d4e:	468f      	mov	pc, r1
 8000d50:	4643      	mov	r3, r8
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	0034      	movs	r4, r6
 8000d56:	0015      	movs	r5, r2
 8000d58:	4683      	mov	fp, r0
 8000d5a:	465b      	mov	r3, fp
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d016      	beq.n	8000d8e <__aeabi_dmul+0xde>
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dmul+0xb6>
 8000d64:	e203      	b.n	800116e <__aeabi_dmul+0x4be>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dmul+0xbc>
 8000d6a:	e0cd      	b.n	8000f08 <__aeabi_dmul+0x258>
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2400      	movs	r4, #0
 8000d70:	2500      	movs	r5, #0
 8000d72:	9b01      	ldr	r3, [sp, #4]
 8000d74:	0512      	lsls	r2, r2, #20
 8000d76:	4322      	orrs	r2, r4
 8000d78:	07db      	lsls	r3, r3, #31
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	0011      	movs	r1, r2
 8000d80:	b007      	add	sp, #28
 8000d82:	bcf0      	pop	{r4, r5, r6, r7}
 8000d84:	46bb      	mov	fp, r7
 8000d86:	46b2      	mov	sl, r6
 8000d88:	46a9      	mov	r9, r5
 8000d8a:	46a0      	mov	r8, r4
 8000d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8e:	2400      	movs	r4, #0
 8000d90:	2500      	movs	r5, #0
 8000d92:	4aaa      	ldr	r2, [pc, #680]	; (800103c <__aeabi_dmul+0x38c>)
 8000d94:	e7ed      	b.n	8000d72 <__aeabi_dmul+0xc2>
 8000d96:	0c28      	lsrs	r0, r5, #16
 8000d98:	042d      	lsls	r5, r5, #16
 8000d9a:	0c2d      	lsrs	r5, r5, #16
 8000d9c:	002b      	movs	r3, r5
 8000d9e:	0c11      	lsrs	r1, r2, #16
 8000da0:	0412      	lsls	r2, r2, #16
 8000da2:	0c12      	lsrs	r2, r2, #16
 8000da4:	4353      	muls	r3, r2
 8000da6:	4698      	mov	r8, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	002f      	movs	r7, r5
 8000dac:	4343      	muls	r3, r0
 8000dae:	4699      	mov	r9, r3
 8000db0:	434f      	muls	r7, r1
 8000db2:	444f      	add	r7, r9
 8000db4:	46bb      	mov	fp, r7
 8000db6:	4647      	mov	r7, r8
 8000db8:	000b      	movs	r3, r1
 8000dba:	0c3f      	lsrs	r7, r7, #16
 8000dbc:	46ba      	mov	sl, r7
 8000dbe:	4343      	muls	r3, r0
 8000dc0:	44da      	add	sl, fp
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	45d1      	cmp	r9, sl
 8000dc6:	d904      	bls.n	8000dd2 <__aeabi_dmul+0x122>
 8000dc8:	2780      	movs	r7, #128	; 0x80
 8000dca:	027f      	lsls	r7, r7, #9
 8000dcc:	46b9      	mov	r9, r7
 8000dce:	444b      	add	r3, r9
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	0c1b      	lsrs	r3, r3, #16
 8000dd6:	469b      	mov	fp, r3
 8000dd8:	4653      	mov	r3, sl
 8000dda:	041f      	lsls	r7, r3, #16
 8000ddc:	4643      	mov	r3, r8
 8000dde:	041b      	lsls	r3, r3, #16
 8000de0:	0c1b      	lsrs	r3, r3, #16
 8000de2:	4698      	mov	r8, r3
 8000de4:	003b      	movs	r3, r7
 8000de6:	4443      	add	r3, r8
 8000de8:	9304      	str	r3, [sp, #16]
 8000dea:	0c33      	lsrs	r3, r6, #16
 8000dec:	0436      	lsls	r6, r6, #16
 8000dee:	0c36      	lsrs	r6, r6, #16
 8000df0:	4698      	mov	r8, r3
 8000df2:	0033      	movs	r3, r6
 8000df4:	4343      	muls	r3, r0
 8000df6:	4699      	mov	r9, r3
 8000df8:	4643      	mov	r3, r8
 8000dfa:	4343      	muls	r3, r0
 8000dfc:	002f      	movs	r7, r5
 8000dfe:	469a      	mov	sl, r3
 8000e00:	4643      	mov	r3, r8
 8000e02:	4377      	muls	r7, r6
 8000e04:	435d      	muls	r5, r3
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	444d      	add	r5, r9
 8000e0a:	1945      	adds	r5, r0, r5
 8000e0c:	45a9      	cmp	r9, r5
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_dmul+0x168>
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	025b      	lsls	r3, r3, #9
 8000e14:	4699      	mov	r9, r3
 8000e16:	44ca      	add	sl, r9
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0c28      	lsrs	r0, r5, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	042d      	lsls	r5, r5, #16
 8000e20:	19ed      	adds	r5, r5, r7
 8000e22:	0c27      	lsrs	r7, r4, #16
 8000e24:	0424      	lsls	r4, r4, #16
 8000e26:	0c24      	lsrs	r4, r4, #16
 8000e28:	0003      	movs	r3, r0
 8000e2a:	0020      	movs	r0, r4
 8000e2c:	4350      	muls	r0, r2
 8000e2e:	437a      	muls	r2, r7
 8000e30:	4691      	mov	r9, r2
 8000e32:	003a      	movs	r2, r7
 8000e34:	4453      	add	r3, sl
 8000e36:	9305      	str	r3, [sp, #20]
 8000e38:	0c03      	lsrs	r3, r0, #16
 8000e3a:	469a      	mov	sl, r3
 8000e3c:	434a      	muls	r2, r1
 8000e3e:	4361      	muls	r1, r4
 8000e40:	4449      	add	r1, r9
 8000e42:	4451      	add	r1, sl
 8000e44:	44ab      	add	fp, r5
 8000e46:	4589      	cmp	r9, r1
 8000e48:	d903      	bls.n	8000e52 <__aeabi_dmul+0x1a2>
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	025b      	lsls	r3, r3, #9
 8000e4e:	4699      	mov	r9, r3
 8000e50:	444a      	add	r2, r9
 8000e52:	0400      	lsls	r0, r0, #16
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	0c00      	lsrs	r0, r0, #16
 8000e58:	0409      	lsls	r1, r1, #16
 8000e5a:	1809      	adds	r1, r1, r0
 8000e5c:	0020      	movs	r0, r4
 8000e5e:	4699      	mov	r9, r3
 8000e60:	4643      	mov	r3, r8
 8000e62:	4370      	muls	r0, r6
 8000e64:	435c      	muls	r4, r3
 8000e66:	437e      	muls	r6, r7
 8000e68:	435f      	muls	r7, r3
 8000e6a:	0c03      	lsrs	r3, r0, #16
 8000e6c:	4698      	mov	r8, r3
 8000e6e:	19a4      	adds	r4, r4, r6
 8000e70:	4444      	add	r4, r8
 8000e72:	444a      	add	r2, r9
 8000e74:	9703      	str	r7, [sp, #12]
 8000e76:	42a6      	cmp	r6, r4
 8000e78:	d904      	bls.n	8000e84 <__aeabi_dmul+0x1d4>
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	025b      	lsls	r3, r3, #9
 8000e7e:	4698      	mov	r8, r3
 8000e80:	4447      	add	r7, r8
 8000e82:	9703      	str	r7, [sp, #12]
 8000e84:	0423      	lsls	r3, r4, #16
 8000e86:	9e02      	ldr	r6, [sp, #8]
 8000e88:	469a      	mov	sl, r3
 8000e8a:	9b05      	ldr	r3, [sp, #20]
 8000e8c:	445e      	add	r6, fp
 8000e8e:	4698      	mov	r8, r3
 8000e90:	42ae      	cmp	r6, r5
 8000e92:	41ad      	sbcs	r5, r5
 8000e94:	1876      	adds	r6, r6, r1
 8000e96:	428e      	cmp	r6, r1
 8000e98:	4189      	sbcs	r1, r1
 8000e9a:	0400      	lsls	r0, r0, #16
 8000e9c:	0c00      	lsrs	r0, r0, #16
 8000e9e:	4450      	add	r0, sl
 8000ea0:	4440      	add	r0, r8
 8000ea2:	426d      	negs	r5, r5
 8000ea4:	1947      	adds	r7, r0, r5
 8000ea6:	46b8      	mov	r8, r7
 8000ea8:	4693      	mov	fp, r2
 8000eaa:	4249      	negs	r1, r1
 8000eac:	4689      	mov	r9, r1
 8000eae:	44c3      	add	fp, r8
 8000eb0:	44d9      	add	r9, fp
 8000eb2:	4298      	cmp	r0, r3
 8000eb4:	4180      	sbcs	r0, r0
 8000eb6:	45a8      	cmp	r8, r5
 8000eb8:	41ad      	sbcs	r5, r5
 8000eba:	4593      	cmp	fp, r2
 8000ebc:	4192      	sbcs	r2, r2
 8000ebe:	4589      	cmp	r9, r1
 8000ec0:	4189      	sbcs	r1, r1
 8000ec2:	426d      	negs	r5, r5
 8000ec4:	4240      	negs	r0, r0
 8000ec6:	4328      	orrs	r0, r5
 8000ec8:	0c24      	lsrs	r4, r4, #16
 8000eca:	4252      	negs	r2, r2
 8000ecc:	4249      	negs	r1, r1
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	9b03      	ldr	r3, [sp, #12]
 8000ed2:	1900      	adds	r0, r0, r4
 8000ed4:	1880      	adds	r0, r0, r2
 8000ed6:	18c7      	adds	r7, r0, r3
 8000ed8:	464b      	mov	r3, r9
 8000eda:	0ddc      	lsrs	r4, r3, #23
 8000edc:	9b04      	ldr	r3, [sp, #16]
 8000ede:	0275      	lsls	r5, r6, #9
 8000ee0:	431d      	orrs	r5, r3
 8000ee2:	1e6a      	subs	r2, r5, #1
 8000ee4:	4195      	sbcs	r5, r2
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	0df6      	lsrs	r6, r6, #23
 8000eea:	027f      	lsls	r7, r7, #9
 8000eec:	4335      	orrs	r5, r6
 8000eee:	025a      	lsls	r2, r3, #9
 8000ef0:	433c      	orrs	r4, r7
 8000ef2:	4315      	orrs	r5, r2
 8000ef4:	01fb      	lsls	r3, r7, #7
 8000ef6:	d400      	bmi.n	8000efa <__aeabi_dmul+0x24a>
 8000ef8:	e11c      	b.n	8001134 <__aeabi_dmul+0x484>
 8000efa:	2101      	movs	r1, #1
 8000efc:	086a      	lsrs	r2, r5, #1
 8000efe:	400d      	ands	r5, r1
 8000f00:	4315      	orrs	r5, r2
 8000f02:	07e2      	lsls	r2, r4, #31
 8000f04:	4315      	orrs	r5, r2
 8000f06:	0864      	lsrs	r4, r4, #1
 8000f08:	494f      	ldr	r1, [pc, #316]	; (8001048 <__aeabi_dmul+0x398>)
 8000f0a:	4461      	add	r1, ip
 8000f0c:	2900      	cmp	r1, #0
 8000f0e:	dc00      	bgt.n	8000f12 <__aeabi_dmul+0x262>
 8000f10:	e0b0      	b.n	8001074 <__aeabi_dmul+0x3c4>
 8000f12:	076b      	lsls	r3, r5, #29
 8000f14:	d009      	beq.n	8000f2a <__aeabi_dmul+0x27a>
 8000f16:	220f      	movs	r2, #15
 8000f18:	402a      	ands	r2, r5
 8000f1a:	2a04      	cmp	r2, #4
 8000f1c:	d005      	beq.n	8000f2a <__aeabi_dmul+0x27a>
 8000f1e:	1d2a      	adds	r2, r5, #4
 8000f20:	42aa      	cmp	r2, r5
 8000f22:	41ad      	sbcs	r5, r5
 8000f24:	426d      	negs	r5, r5
 8000f26:	1964      	adds	r4, r4, r5
 8000f28:	0015      	movs	r5, r2
 8000f2a:	01e3      	lsls	r3, r4, #7
 8000f2c:	d504      	bpl.n	8000f38 <__aeabi_dmul+0x288>
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	4a46      	ldr	r2, [pc, #280]	; (800104c <__aeabi_dmul+0x39c>)
 8000f32:	00c9      	lsls	r1, r1, #3
 8000f34:	4014      	ands	r4, r2
 8000f36:	4461      	add	r1, ip
 8000f38:	4a45      	ldr	r2, [pc, #276]	; (8001050 <__aeabi_dmul+0x3a0>)
 8000f3a:	4291      	cmp	r1, r2
 8000f3c:	dd00      	ble.n	8000f40 <__aeabi_dmul+0x290>
 8000f3e:	e726      	b.n	8000d8e <__aeabi_dmul+0xde>
 8000f40:	0762      	lsls	r2, r4, #29
 8000f42:	08ed      	lsrs	r5, r5, #3
 8000f44:	0264      	lsls	r4, r4, #9
 8000f46:	0549      	lsls	r1, r1, #21
 8000f48:	4315      	orrs	r5, r2
 8000f4a:	0b24      	lsrs	r4, r4, #12
 8000f4c:	0d4a      	lsrs	r2, r1, #21
 8000f4e:	e710      	b.n	8000d72 <__aeabi_dmul+0xc2>
 8000f50:	4652      	mov	r2, sl
 8000f52:	4332      	orrs	r2, r6
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dmul+0x2a8>
 8000f56:	e07f      	b.n	8001058 <__aeabi_dmul+0x3a8>
 8000f58:	2e00      	cmp	r6, #0
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dmul+0x2ae>
 8000f5c:	e0dc      	b.n	8001118 <__aeabi_dmul+0x468>
 8000f5e:	0030      	movs	r0, r6
 8000f60:	f000 fd6e 	bl	8001a40 <__clzsi2>
 8000f64:	0002      	movs	r2, r0
 8000f66:	3a0b      	subs	r2, #11
 8000f68:	231d      	movs	r3, #29
 8000f6a:	0001      	movs	r1, r0
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	4652      	mov	r2, sl
 8000f70:	3908      	subs	r1, #8
 8000f72:	40da      	lsrs	r2, r3
 8000f74:	408e      	lsls	r6, r1
 8000f76:	4316      	orrs	r6, r2
 8000f78:	4652      	mov	r2, sl
 8000f7a:	408a      	lsls	r2, r1
 8000f7c:	9b00      	ldr	r3, [sp, #0]
 8000f7e:	4935      	ldr	r1, [pc, #212]	; (8001054 <__aeabi_dmul+0x3a4>)
 8000f80:	1a18      	subs	r0, r3, r0
 8000f82:	0003      	movs	r3, r0
 8000f84:	468c      	mov	ip, r1
 8000f86:	4463      	add	r3, ip
 8000f88:	2000      	movs	r0, #0
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	e6d3      	b.n	8000d36 <__aeabi_dmul+0x86>
 8000f8e:	0025      	movs	r5, r4
 8000f90:	4305      	orrs	r5, r0
 8000f92:	d04a      	beq.n	800102a <__aeabi_dmul+0x37a>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d100      	bne.n	8000f9a <__aeabi_dmul+0x2ea>
 8000f98:	e0b0      	b.n	80010fc <__aeabi_dmul+0x44c>
 8000f9a:	0020      	movs	r0, r4
 8000f9c:	f000 fd50 	bl	8001a40 <__clzsi2>
 8000fa0:	0001      	movs	r1, r0
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	390b      	subs	r1, #11
 8000fa6:	231d      	movs	r3, #29
 8000fa8:	0010      	movs	r0, r2
 8000faa:	1a5b      	subs	r3, r3, r1
 8000fac:	0031      	movs	r1, r6
 8000fae:	0035      	movs	r5, r6
 8000fb0:	3808      	subs	r0, #8
 8000fb2:	4084      	lsls	r4, r0
 8000fb4:	40d9      	lsrs	r1, r3
 8000fb6:	4085      	lsls	r5, r0
 8000fb8:	430c      	orrs	r4, r1
 8000fba:	4826      	ldr	r0, [pc, #152]	; (8001054 <__aeabi_dmul+0x3a4>)
 8000fbc:	1a83      	subs	r3, r0, r2
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	469b      	mov	fp, r3
 8000fc6:	e697      	b.n	8000cf8 <__aeabi_dmul+0x48>
 8000fc8:	0005      	movs	r5, r0
 8000fca:	4325      	orrs	r5, r4
 8000fcc:	d126      	bne.n	800101c <__aeabi_dmul+0x36c>
 8000fce:	2208      	movs	r2, #8
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	2400      	movs	r4, #0
 8000fd6:	4691      	mov	r9, r2
 8000fd8:	469b      	mov	fp, r3
 8000fda:	e68d      	b.n	8000cf8 <__aeabi_dmul+0x48>
 8000fdc:	4652      	mov	r2, sl
 8000fde:	9b00      	ldr	r3, [sp, #0]
 8000fe0:	4332      	orrs	r2, r6
 8000fe2:	d110      	bne.n	8001006 <__aeabi_dmul+0x356>
 8000fe4:	4915      	ldr	r1, [pc, #84]	; (800103c <__aeabi_dmul+0x38c>)
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	468c      	mov	ip, r1
 8000fea:	4463      	add	r3, ip
 8000fec:	4649      	mov	r1, r9
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	4319      	orrs	r1, r3
 8000ff4:	4689      	mov	r9, r1
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	e69d      	b.n	8000d36 <__aeabi_dmul+0x86>
 8000ffa:	465b      	mov	r3, fp
 8000ffc:	9701      	str	r7, [sp, #4]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d000      	beq.n	8001004 <__aeabi_dmul+0x354>
 8001002:	e6ad      	b.n	8000d60 <__aeabi_dmul+0xb0>
 8001004:	e6c3      	b.n	8000d8e <__aeabi_dmul+0xde>
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <__aeabi_dmul+0x38c>)
 8001008:	2003      	movs	r0, #3
 800100a:	4694      	mov	ip, r2
 800100c:	4463      	add	r3, ip
 800100e:	464a      	mov	r2, r9
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2303      	movs	r3, #3
 8001014:	431a      	orrs	r2, r3
 8001016:	4691      	mov	r9, r2
 8001018:	4652      	mov	r2, sl
 800101a:	e68c      	b.n	8000d36 <__aeabi_dmul+0x86>
 800101c:	220c      	movs	r2, #12
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2303      	movs	r3, #3
 8001022:	0005      	movs	r5, r0
 8001024:	4691      	mov	r9, r2
 8001026:	469b      	mov	fp, r3
 8001028:	e666      	b.n	8000cf8 <__aeabi_dmul+0x48>
 800102a:	2304      	movs	r3, #4
 800102c:	4699      	mov	r9, r3
 800102e:	2300      	movs	r3, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	2400      	movs	r4, #0
 8001036:	469b      	mov	fp, r3
 8001038:	e65e      	b.n	8000cf8 <__aeabi_dmul+0x48>
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	000007ff 	.word	0x000007ff
 8001040:	fffffc01 	.word	0xfffffc01
 8001044:	08007c3c 	.word	0x08007c3c
 8001048:	000003ff 	.word	0x000003ff
 800104c:	feffffff 	.word	0xfeffffff
 8001050:	000007fe 	.word	0x000007fe
 8001054:	fffffc0d 	.word	0xfffffc0d
 8001058:	4649      	mov	r1, r9
 800105a:	2301      	movs	r3, #1
 800105c:	4319      	orrs	r1, r3
 800105e:	4689      	mov	r9, r1
 8001060:	2600      	movs	r6, #0
 8001062:	2001      	movs	r0, #1
 8001064:	e667      	b.n	8000d36 <__aeabi_dmul+0x86>
 8001066:	2300      	movs	r3, #0
 8001068:	2480      	movs	r4, #128	; 0x80
 800106a:	2500      	movs	r5, #0
 800106c:	4a43      	ldr	r2, [pc, #268]	; (800117c <__aeabi_dmul+0x4cc>)
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	0324      	lsls	r4, r4, #12
 8001072:	e67e      	b.n	8000d72 <__aeabi_dmul+0xc2>
 8001074:	2001      	movs	r0, #1
 8001076:	1a40      	subs	r0, r0, r1
 8001078:	2838      	cmp	r0, #56	; 0x38
 800107a:	dd00      	ble.n	800107e <__aeabi_dmul+0x3ce>
 800107c:	e676      	b.n	8000d6c <__aeabi_dmul+0xbc>
 800107e:	281f      	cmp	r0, #31
 8001080:	dd5b      	ble.n	800113a <__aeabi_dmul+0x48a>
 8001082:	221f      	movs	r2, #31
 8001084:	0023      	movs	r3, r4
 8001086:	4252      	negs	r2, r2
 8001088:	1a51      	subs	r1, r2, r1
 800108a:	40cb      	lsrs	r3, r1
 800108c:	0019      	movs	r1, r3
 800108e:	2820      	cmp	r0, #32
 8001090:	d003      	beq.n	800109a <__aeabi_dmul+0x3ea>
 8001092:	4a3b      	ldr	r2, [pc, #236]	; (8001180 <__aeabi_dmul+0x4d0>)
 8001094:	4462      	add	r2, ip
 8001096:	4094      	lsls	r4, r2
 8001098:	4325      	orrs	r5, r4
 800109a:	1e6a      	subs	r2, r5, #1
 800109c:	4195      	sbcs	r5, r2
 800109e:	002a      	movs	r2, r5
 80010a0:	430a      	orrs	r2, r1
 80010a2:	2107      	movs	r1, #7
 80010a4:	000d      	movs	r5, r1
 80010a6:	2400      	movs	r4, #0
 80010a8:	4015      	ands	r5, r2
 80010aa:	4211      	tst	r1, r2
 80010ac:	d05b      	beq.n	8001166 <__aeabi_dmul+0x4b6>
 80010ae:	210f      	movs	r1, #15
 80010b0:	2400      	movs	r4, #0
 80010b2:	4011      	ands	r1, r2
 80010b4:	2904      	cmp	r1, #4
 80010b6:	d053      	beq.n	8001160 <__aeabi_dmul+0x4b0>
 80010b8:	1d11      	adds	r1, r2, #4
 80010ba:	4291      	cmp	r1, r2
 80010bc:	4192      	sbcs	r2, r2
 80010be:	4252      	negs	r2, r2
 80010c0:	18a4      	adds	r4, r4, r2
 80010c2:	000a      	movs	r2, r1
 80010c4:	0223      	lsls	r3, r4, #8
 80010c6:	d54b      	bpl.n	8001160 <__aeabi_dmul+0x4b0>
 80010c8:	2201      	movs	r2, #1
 80010ca:	2400      	movs	r4, #0
 80010cc:	2500      	movs	r5, #0
 80010ce:	e650      	b.n	8000d72 <__aeabi_dmul+0xc2>
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	031b      	lsls	r3, r3, #12
 80010d4:	421c      	tst	r4, r3
 80010d6:	d009      	beq.n	80010ec <__aeabi_dmul+0x43c>
 80010d8:	421e      	tst	r6, r3
 80010da:	d107      	bne.n	80010ec <__aeabi_dmul+0x43c>
 80010dc:	4333      	orrs	r3, r6
 80010de:	031c      	lsls	r4, r3, #12
 80010e0:	4643      	mov	r3, r8
 80010e2:	0015      	movs	r5, r2
 80010e4:	0b24      	lsrs	r4, r4, #12
 80010e6:	4a25      	ldr	r2, [pc, #148]	; (800117c <__aeabi_dmul+0x4cc>)
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	e642      	b.n	8000d72 <__aeabi_dmul+0xc2>
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	0312      	lsls	r2, r2, #12
 80010f0:	4314      	orrs	r4, r2
 80010f2:	0324      	lsls	r4, r4, #12
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <__aeabi_dmul+0x4cc>)
 80010f6:	0b24      	lsrs	r4, r4, #12
 80010f8:	9701      	str	r7, [sp, #4]
 80010fa:	e63a      	b.n	8000d72 <__aeabi_dmul+0xc2>
 80010fc:	f000 fca0 	bl	8001a40 <__clzsi2>
 8001100:	0001      	movs	r1, r0
 8001102:	0002      	movs	r2, r0
 8001104:	3115      	adds	r1, #21
 8001106:	3220      	adds	r2, #32
 8001108:	291c      	cmp	r1, #28
 800110a:	dc00      	bgt.n	800110e <__aeabi_dmul+0x45e>
 800110c:	e74b      	b.n	8000fa6 <__aeabi_dmul+0x2f6>
 800110e:	0034      	movs	r4, r6
 8001110:	3808      	subs	r0, #8
 8001112:	2500      	movs	r5, #0
 8001114:	4084      	lsls	r4, r0
 8001116:	e750      	b.n	8000fba <__aeabi_dmul+0x30a>
 8001118:	f000 fc92 	bl	8001a40 <__clzsi2>
 800111c:	0003      	movs	r3, r0
 800111e:	001a      	movs	r2, r3
 8001120:	3215      	adds	r2, #21
 8001122:	3020      	adds	r0, #32
 8001124:	2a1c      	cmp	r2, #28
 8001126:	dc00      	bgt.n	800112a <__aeabi_dmul+0x47a>
 8001128:	e71e      	b.n	8000f68 <__aeabi_dmul+0x2b8>
 800112a:	4656      	mov	r6, sl
 800112c:	3b08      	subs	r3, #8
 800112e:	2200      	movs	r2, #0
 8001130:	409e      	lsls	r6, r3
 8001132:	e723      	b.n	8000f7c <__aeabi_dmul+0x2cc>
 8001134:	9b00      	ldr	r3, [sp, #0]
 8001136:	469c      	mov	ip, r3
 8001138:	e6e6      	b.n	8000f08 <__aeabi_dmul+0x258>
 800113a:	4912      	ldr	r1, [pc, #72]	; (8001184 <__aeabi_dmul+0x4d4>)
 800113c:	0022      	movs	r2, r4
 800113e:	4461      	add	r1, ip
 8001140:	002e      	movs	r6, r5
 8001142:	408d      	lsls	r5, r1
 8001144:	408a      	lsls	r2, r1
 8001146:	40c6      	lsrs	r6, r0
 8001148:	1e69      	subs	r1, r5, #1
 800114a:	418d      	sbcs	r5, r1
 800114c:	4332      	orrs	r2, r6
 800114e:	432a      	orrs	r2, r5
 8001150:	40c4      	lsrs	r4, r0
 8001152:	0753      	lsls	r3, r2, #29
 8001154:	d0b6      	beq.n	80010c4 <__aeabi_dmul+0x414>
 8001156:	210f      	movs	r1, #15
 8001158:	4011      	ands	r1, r2
 800115a:	2904      	cmp	r1, #4
 800115c:	d1ac      	bne.n	80010b8 <__aeabi_dmul+0x408>
 800115e:	e7b1      	b.n	80010c4 <__aeabi_dmul+0x414>
 8001160:	0765      	lsls	r5, r4, #29
 8001162:	0264      	lsls	r4, r4, #9
 8001164:	0b24      	lsrs	r4, r4, #12
 8001166:	08d2      	lsrs	r2, r2, #3
 8001168:	4315      	orrs	r5, r2
 800116a:	2200      	movs	r2, #0
 800116c:	e601      	b.n	8000d72 <__aeabi_dmul+0xc2>
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0312      	lsls	r2, r2, #12
 8001172:	4314      	orrs	r4, r2
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	4a01      	ldr	r2, [pc, #4]	; (800117c <__aeabi_dmul+0x4cc>)
 8001178:	0b24      	lsrs	r4, r4, #12
 800117a:	e5fa      	b.n	8000d72 <__aeabi_dmul+0xc2>
 800117c:	000007ff 	.word	0x000007ff
 8001180:	0000043e 	.word	0x0000043e
 8001184:	0000041e 	.word	0x0000041e

08001188 <__aeabi_dsub>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	4657      	mov	r7, sl
 800118c:	464e      	mov	r6, r9
 800118e:	4645      	mov	r5, r8
 8001190:	46de      	mov	lr, fp
 8001192:	b5e0      	push	{r5, r6, r7, lr}
 8001194:	001e      	movs	r6, r3
 8001196:	0017      	movs	r7, r2
 8001198:	004a      	lsls	r2, r1, #1
 800119a:	030b      	lsls	r3, r1, #12
 800119c:	0d52      	lsrs	r2, r2, #21
 800119e:	0a5b      	lsrs	r3, r3, #9
 80011a0:	4690      	mov	r8, r2
 80011a2:	0f42      	lsrs	r2, r0, #29
 80011a4:	431a      	orrs	r2, r3
 80011a6:	0fcd      	lsrs	r5, r1, #31
 80011a8:	4ccd      	ldr	r4, [pc, #820]	; (80014e0 <__aeabi_dsub+0x358>)
 80011aa:	0331      	lsls	r1, r6, #12
 80011ac:	00c3      	lsls	r3, r0, #3
 80011ae:	4694      	mov	ip, r2
 80011b0:	0070      	lsls	r0, r6, #1
 80011b2:	0f7a      	lsrs	r2, r7, #29
 80011b4:	0a49      	lsrs	r1, r1, #9
 80011b6:	00ff      	lsls	r7, r7, #3
 80011b8:	469a      	mov	sl, r3
 80011ba:	46b9      	mov	r9, r7
 80011bc:	0d40      	lsrs	r0, r0, #21
 80011be:	0ff6      	lsrs	r6, r6, #31
 80011c0:	4311      	orrs	r1, r2
 80011c2:	42a0      	cmp	r0, r4
 80011c4:	d100      	bne.n	80011c8 <__aeabi_dsub+0x40>
 80011c6:	e0b1      	b.n	800132c <__aeabi_dsub+0x1a4>
 80011c8:	2201      	movs	r2, #1
 80011ca:	4056      	eors	r6, r2
 80011cc:	46b3      	mov	fp, r6
 80011ce:	42b5      	cmp	r5, r6
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dsub+0x4c>
 80011d2:	e088      	b.n	80012e6 <__aeabi_dsub+0x15e>
 80011d4:	4642      	mov	r2, r8
 80011d6:	1a12      	subs	r2, r2, r0
 80011d8:	2a00      	cmp	r2, #0
 80011da:	dc00      	bgt.n	80011de <__aeabi_dsub+0x56>
 80011dc:	e0ae      	b.n	800133c <__aeabi_dsub+0x1b4>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dsub+0x5c>
 80011e2:	e0c1      	b.n	8001368 <__aeabi_dsub+0x1e0>
 80011e4:	48be      	ldr	r0, [pc, #760]	; (80014e0 <__aeabi_dsub+0x358>)
 80011e6:	4580      	cmp	r8, r0
 80011e8:	d100      	bne.n	80011ec <__aeabi_dsub+0x64>
 80011ea:	e151      	b.n	8001490 <__aeabi_dsub+0x308>
 80011ec:	2080      	movs	r0, #128	; 0x80
 80011ee:	0400      	lsls	r0, r0, #16
 80011f0:	4301      	orrs	r1, r0
 80011f2:	2a38      	cmp	r2, #56	; 0x38
 80011f4:	dd00      	ble.n	80011f8 <__aeabi_dsub+0x70>
 80011f6:	e17b      	b.n	80014f0 <__aeabi_dsub+0x368>
 80011f8:	2a1f      	cmp	r2, #31
 80011fa:	dd00      	ble.n	80011fe <__aeabi_dsub+0x76>
 80011fc:	e1ee      	b.n	80015dc <__aeabi_dsub+0x454>
 80011fe:	2020      	movs	r0, #32
 8001200:	003e      	movs	r6, r7
 8001202:	1a80      	subs	r0, r0, r2
 8001204:	000c      	movs	r4, r1
 8001206:	40d6      	lsrs	r6, r2
 8001208:	40d1      	lsrs	r1, r2
 800120a:	4087      	lsls	r7, r0
 800120c:	4662      	mov	r2, ip
 800120e:	4084      	lsls	r4, r0
 8001210:	1a52      	subs	r2, r2, r1
 8001212:	1e78      	subs	r0, r7, #1
 8001214:	4187      	sbcs	r7, r0
 8001216:	4694      	mov	ip, r2
 8001218:	4334      	orrs	r4, r6
 800121a:	4327      	orrs	r7, r4
 800121c:	1bdc      	subs	r4, r3, r7
 800121e:	42a3      	cmp	r3, r4
 8001220:	419b      	sbcs	r3, r3
 8001222:	4662      	mov	r2, ip
 8001224:	425b      	negs	r3, r3
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	4699      	mov	r9, r3
 800122a:	464b      	mov	r3, r9
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	d400      	bmi.n	8001232 <__aeabi_dsub+0xaa>
 8001230:	e118      	b.n	8001464 <__aeabi_dsub+0x2dc>
 8001232:	464b      	mov	r3, r9
 8001234:	0258      	lsls	r0, r3, #9
 8001236:	0a43      	lsrs	r3, r0, #9
 8001238:	4699      	mov	r9, r3
 800123a:	464b      	mov	r3, r9
 800123c:	2b00      	cmp	r3, #0
 800123e:	d100      	bne.n	8001242 <__aeabi_dsub+0xba>
 8001240:	e137      	b.n	80014b2 <__aeabi_dsub+0x32a>
 8001242:	4648      	mov	r0, r9
 8001244:	f000 fbfc 	bl	8001a40 <__clzsi2>
 8001248:	0001      	movs	r1, r0
 800124a:	3908      	subs	r1, #8
 800124c:	2320      	movs	r3, #32
 800124e:	0022      	movs	r2, r4
 8001250:	4648      	mov	r0, r9
 8001252:	1a5b      	subs	r3, r3, r1
 8001254:	40da      	lsrs	r2, r3
 8001256:	4088      	lsls	r0, r1
 8001258:	408c      	lsls	r4, r1
 800125a:	4643      	mov	r3, r8
 800125c:	4310      	orrs	r0, r2
 800125e:	4588      	cmp	r8, r1
 8001260:	dd00      	ble.n	8001264 <__aeabi_dsub+0xdc>
 8001262:	e136      	b.n	80014d2 <__aeabi_dsub+0x34a>
 8001264:	1ac9      	subs	r1, r1, r3
 8001266:	1c4b      	adds	r3, r1, #1
 8001268:	2b1f      	cmp	r3, #31
 800126a:	dd00      	ble.n	800126e <__aeabi_dsub+0xe6>
 800126c:	e0ea      	b.n	8001444 <__aeabi_dsub+0x2bc>
 800126e:	2220      	movs	r2, #32
 8001270:	0026      	movs	r6, r4
 8001272:	1ad2      	subs	r2, r2, r3
 8001274:	0001      	movs	r1, r0
 8001276:	4094      	lsls	r4, r2
 8001278:	40de      	lsrs	r6, r3
 800127a:	40d8      	lsrs	r0, r3
 800127c:	2300      	movs	r3, #0
 800127e:	4091      	lsls	r1, r2
 8001280:	1e62      	subs	r2, r4, #1
 8001282:	4194      	sbcs	r4, r2
 8001284:	4681      	mov	r9, r0
 8001286:	4698      	mov	r8, r3
 8001288:	4331      	orrs	r1, r6
 800128a:	430c      	orrs	r4, r1
 800128c:	0763      	lsls	r3, r4, #29
 800128e:	d009      	beq.n	80012a4 <__aeabi_dsub+0x11c>
 8001290:	230f      	movs	r3, #15
 8001292:	4023      	ands	r3, r4
 8001294:	2b04      	cmp	r3, #4
 8001296:	d005      	beq.n	80012a4 <__aeabi_dsub+0x11c>
 8001298:	1d23      	adds	r3, r4, #4
 800129a:	42a3      	cmp	r3, r4
 800129c:	41a4      	sbcs	r4, r4
 800129e:	4264      	negs	r4, r4
 80012a0:	44a1      	add	r9, r4
 80012a2:	001c      	movs	r4, r3
 80012a4:	464b      	mov	r3, r9
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	d400      	bmi.n	80012ac <__aeabi_dsub+0x124>
 80012aa:	e0de      	b.n	800146a <__aeabi_dsub+0x2e2>
 80012ac:	4641      	mov	r1, r8
 80012ae:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <__aeabi_dsub+0x358>)
 80012b0:	3101      	adds	r1, #1
 80012b2:	4299      	cmp	r1, r3
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dsub+0x130>
 80012b6:	e0e7      	b.n	8001488 <__aeabi_dsub+0x300>
 80012b8:	464b      	mov	r3, r9
 80012ba:	488a      	ldr	r0, [pc, #552]	; (80014e4 <__aeabi_dsub+0x35c>)
 80012bc:	08e4      	lsrs	r4, r4, #3
 80012be:	4003      	ands	r3, r0
 80012c0:	0018      	movs	r0, r3
 80012c2:	0549      	lsls	r1, r1, #21
 80012c4:	075b      	lsls	r3, r3, #29
 80012c6:	0240      	lsls	r0, r0, #9
 80012c8:	4323      	orrs	r3, r4
 80012ca:	0d4a      	lsrs	r2, r1, #21
 80012cc:	0b04      	lsrs	r4, r0, #12
 80012ce:	0512      	lsls	r2, r2, #20
 80012d0:	07ed      	lsls	r5, r5, #31
 80012d2:	4322      	orrs	r2, r4
 80012d4:	432a      	orrs	r2, r5
 80012d6:	0018      	movs	r0, r3
 80012d8:	0011      	movs	r1, r2
 80012da:	bcf0      	pop	{r4, r5, r6, r7}
 80012dc:	46bb      	mov	fp, r7
 80012de:	46b2      	mov	sl, r6
 80012e0:	46a9      	mov	r9, r5
 80012e2:	46a0      	mov	r8, r4
 80012e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e6:	4642      	mov	r2, r8
 80012e8:	1a12      	subs	r2, r2, r0
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	dd52      	ble.n	8001394 <__aeabi_dsub+0x20c>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dsub+0x16c>
 80012f2:	e09c      	b.n	800142e <__aeabi_dsub+0x2a6>
 80012f4:	45a0      	cmp	r8, r4
 80012f6:	d100      	bne.n	80012fa <__aeabi_dsub+0x172>
 80012f8:	e0ca      	b.n	8001490 <__aeabi_dsub+0x308>
 80012fa:	2080      	movs	r0, #128	; 0x80
 80012fc:	0400      	lsls	r0, r0, #16
 80012fe:	4301      	orrs	r1, r0
 8001300:	2a38      	cmp	r2, #56	; 0x38
 8001302:	dd00      	ble.n	8001306 <__aeabi_dsub+0x17e>
 8001304:	e149      	b.n	800159a <__aeabi_dsub+0x412>
 8001306:	2a1f      	cmp	r2, #31
 8001308:	dc00      	bgt.n	800130c <__aeabi_dsub+0x184>
 800130a:	e197      	b.n	800163c <__aeabi_dsub+0x4b4>
 800130c:	0010      	movs	r0, r2
 800130e:	000e      	movs	r6, r1
 8001310:	3820      	subs	r0, #32
 8001312:	40c6      	lsrs	r6, r0
 8001314:	2a20      	cmp	r2, #32
 8001316:	d004      	beq.n	8001322 <__aeabi_dsub+0x19a>
 8001318:	2040      	movs	r0, #64	; 0x40
 800131a:	1a82      	subs	r2, r0, r2
 800131c:	4091      	lsls	r1, r2
 800131e:	430f      	orrs	r7, r1
 8001320:	46b9      	mov	r9, r7
 8001322:	464c      	mov	r4, r9
 8001324:	1e62      	subs	r2, r4, #1
 8001326:	4194      	sbcs	r4, r2
 8001328:	4334      	orrs	r4, r6
 800132a:	e13a      	b.n	80015a2 <__aeabi_dsub+0x41a>
 800132c:	000a      	movs	r2, r1
 800132e:	433a      	orrs	r2, r7
 8001330:	d028      	beq.n	8001384 <__aeabi_dsub+0x1fc>
 8001332:	46b3      	mov	fp, r6
 8001334:	42b5      	cmp	r5, r6
 8001336:	d02b      	beq.n	8001390 <__aeabi_dsub+0x208>
 8001338:	4a6b      	ldr	r2, [pc, #428]	; (80014e8 <__aeabi_dsub+0x360>)
 800133a:	4442      	add	r2, r8
 800133c:	2a00      	cmp	r2, #0
 800133e:	d05d      	beq.n	80013fc <__aeabi_dsub+0x274>
 8001340:	4642      	mov	r2, r8
 8001342:	4644      	mov	r4, r8
 8001344:	1a82      	subs	r2, r0, r2
 8001346:	2c00      	cmp	r4, #0
 8001348:	d000      	beq.n	800134c <__aeabi_dsub+0x1c4>
 800134a:	e0f5      	b.n	8001538 <__aeabi_dsub+0x3b0>
 800134c:	4665      	mov	r5, ip
 800134e:	431d      	orrs	r5, r3
 8001350:	d100      	bne.n	8001354 <__aeabi_dsub+0x1cc>
 8001352:	e19c      	b.n	800168e <__aeabi_dsub+0x506>
 8001354:	1e55      	subs	r5, r2, #1
 8001356:	2a01      	cmp	r2, #1
 8001358:	d100      	bne.n	800135c <__aeabi_dsub+0x1d4>
 800135a:	e1fb      	b.n	8001754 <__aeabi_dsub+0x5cc>
 800135c:	4c60      	ldr	r4, [pc, #384]	; (80014e0 <__aeabi_dsub+0x358>)
 800135e:	42a2      	cmp	r2, r4
 8001360:	d100      	bne.n	8001364 <__aeabi_dsub+0x1dc>
 8001362:	e1bd      	b.n	80016e0 <__aeabi_dsub+0x558>
 8001364:	002a      	movs	r2, r5
 8001366:	e0f0      	b.n	800154a <__aeabi_dsub+0x3c2>
 8001368:	0008      	movs	r0, r1
 800136a:	4338      	orrs	r0, r7
 800136c:	d100      	bne.n	8001370 <__aeabi_dsub+0x1e8>
 800136e:	e0c3      	b.n	80014f8 <__aeabi_dsub+0x370>
 8001370:	1e50      	subs	r0, r2, #1
 8001372:	2a01      	cmp	r2, #1
 8001374:	d100      	bne.n	8001378 <__aeabi_dsub+0x1f0>
 8001376:	e1a8      	b.n	80016ca <__aeabi_dsub+0x542>
 8001378:	4c59      	ldr	r4, [pc, #356]	; (80014e0 <__aeabi_dsub+0x358>)
 800137a:	42a2      	cmp	r2, r4
 800137c:	d100      	bne.n	8001380 <__aeabi_dsub+0x1f8>
 800137e:	e087      	b.n	8001490 <__aeabi_dsub+0x308>
 8001380:	0002      	movs	r2, r0
 8001382:	e736      	b.n	80011f2 <__aeabi_dsub+0x6a>
 8001384:	2201      	movs	r2, #1
 8001386:	4056      	eors	r6, r2
 8001388:	46b3      	mov	fp, r6
 800138a:	42b5      	cmp	r5, r6
 800138c:	d000      	beq.n	8001390 <__aeabi_dsub+0x208>
 800138e:	e721      	b.n	80011d4 <__aeabi_dsub+0x4c>
 8001390:	4a55      	ldr	r2, [pc, #340]	; (80014e8 <__aeabi_dsub+0x360>)
 8001392:	4442      	add	r2, r8
 8001394:	2a00      	cmp	r2, #0
 8001396:	d100      	bne.n	800139a <__aeabi_dsub+0x212>
 8001398:	e0b5      	b.n	8001506 <__aeabi_dsub+0x37e>
 800139a:	4642      	mov	r2, r8
 800139c:	4644      	mov	r4, r8
 800139e:	1a82      	subs	r2, r0, r2
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dsub+0x21e>
 80013a4:	e138      	b.n	8001618 <__aeabi_dsub+0x490>
 80013a6:	4e4e      	ldr	r6, [pc, #312]	; (80014e0 <__aeabi_dsub+0x358>)
 80013a8:	42b0      	cmp	r0, r6
 80013aa:	d100      	bne.n	80013ae <__aeabi_dsub+0x226>
 80013ac:	e1de      	b.n	800176c <__aeabi_dsub+0x5e4>
 80013ae:	2680      	movs	r6, #128	; 0x80
 80013b0:	4664      	mov	r4, ip
 80013b2:	0436      	lsls	r6, r6, #16
 80013b4:	4334      	orrs	r4, r6
 80013b6:	46a4      	mov	ip, r4
 80013b8:	2a38      	cmp	r2, #56	; 0x38
 80013ba:	dd00      	ble.n	80013be <__aeabi_dsub+0x236>
 80013bc:	e196      	b.n	80016ec <__aeabi_dsub+0x564>
 80013be:	2a1f      	cmp	r2, #31
 80013c0:	dd00      	ble.n	80013c4 <__aeabi_dsub+0x23c>
 80013c2:	e224      	b.n	800180e <__aeabi_dsub+0x686>
 80013c4:	2620      	movs	r6, #32
 80013c6:	1ab4      	subs	r4, r6, r2
 80013c8:	46a2      	mov	sl, r4
 80013ca:	4664      	mov	r4, ip
 80013cc:	4656      	mov	r6, sl
 80013ce:	40b4      	lsls	r4, r6
 80013d0:	46a1      	mov	r9, r4
 80013d2:	001c      	movs	r4, r3
 80013d4:	464e      	mov	r6, r9
 80013d6:	40d4      	lsrs	r4, r2
 80013d8:	4326      	orrs	r6, r4
 80013da:	0034      	movs	r4, r6
 80013dc:	4656      	mov	r6, sl
 80013de:	40b3      	lsls	r3, r6
 80013e0:	1e5e      	subs	r6, r3, #1
 80013e2:	41b3      	sbcs	r3, r6
 80013e4:	431c      	orrs	r4, r3
 80013e6:	4663      	mov	r3, ip
 80013e8:	40d3      	lsrs	r3, r2
 80013ea:	18c9      	adds	r1, r1, r3
 80013ec:	19e4      	adds	r4, r4, r7
 80013ee:	42bc      	cmp	r4, r7
 80013f0:	41bf      	sbcs	r7, r7
 80013f2:	427f      	negs	r7, r7
 80013f4:	46b9      	mov	r9, r7
 80013f6:	4680      	mov	r8, r0
 80013f8:	4489      	add	r9, r1
 80013fa:	e0d8      	b.n	80015ae <__aeabi_dsub+0x426>
 80013fc:	4640      	mov	r0, r8
 80013fe:	4c3b      	ldr	r4, [pc, #236]	; (80014ec <__aeabi_dsub+0x364>)
 8001400:	3001      	adds	r0, #1
 8001402:	4220      	tst	r0, r4
 8001404:	d000      	beq.n	8001408 <__aeabi_dsub+0x280>
 8001406:	e0b4      	b.n	8001572 <__aeabi_dsub+0x3ea>
 8001408:	4640      	mov	r0, r8
 800140a:	2800      	cmp	r0, #0
 800140c:	d000      	beq.n	8001410 <__aeabi_dsub+0x288>
 800140e:	e144      	b.n	800169a <__aeabi_dsub+0x512>
 8001410:	4660      	mov	r0, ip
 8001412:	4318      	orrs	r0, r3
 8001414:	d100      	bne.n	8001418 <__aeabi_dsub+0x290>
 8001416:	e190      	b.n	800173a <__aeabi_dsub+0x5b2>
 8001418:	0008      	movs	r0, r1
 800141a:	4338      	orrs	r0, r7
 800141c:	d000      	beq.n	8001420 <__aeabi_dsub+0x298>
 800141e:	e1aa      	b.n	8001776 <__aeabi_dsub+0x5ee>
 8001420:	4661      	mov	r1, ip
 8001422:	08db      	lsrs	r3, r3, #3
 8001424:	0749      	lsls	r1, r1, #29
 8001426:	430b      	orrs	r3, r1
 8001428:	4661      	mov	r1, ip
 800142a:	08cc      	lsrs	r4, r1, #3
 800142c:	e027      	b.n	800147e <__aeabi_dsub+0x2f6>
 800142e:	0008      	movs	r0, r1
 8001430:	4338      	orrs	r0, r7
 8001432:	d061      	beq.n	80014f8 <__aeabi_dsub+0x370>
 8001434:	1e50      	subs	r0, r2, #1
 8001436:	2a01      	cmp	r2, #1
 8001438:	d100      	bne.n	800143c <__aeabi_dsub+0x2b4>
 800143a:	e139      	b.n	80016b0 <__aeabi_dsub+0x528>
 800143c:	42a2      	cmp	r2, r4
 800143e:	d027      	beq.n	8001490 <__aeabi_dsub+0x308>
 8001440:	0002      	movs	r2, r0
 8001442:	e75d      	b.n	8001300 <__aeabi_dsub+0x178>
 8001444:	0002      	movs	r2, r0
 8001446:	391f      	subs	r1, #31
 8001448:	40ca      	lsrs	r2, r1
 800144a:	0011      	movs	r1, r2
 800144c:	2b20      	cmp	r3, #32
 800144e:	d003      	beq.n	8001458 <__aeabi_dsub+0x2d0>
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	4098      	lsls	r0, r3
 8001456:	4304      	orrs	r4, r0
 8001458:	1e63      	subs	r3, r4, #1
 800145a:	419c      	sbcs	r4, r3
 800145c:	2300      	movs	r3, #0
 800145e:	4699      	mov	r9, r3
 8001460:	4698      	mov	r8, r3
 8001462:	430c      	orrs	r4, r1
 8001464:	0763      	lsls	r3, r4, #29
 8001466:	d000      	beq.n	800146a <__aeabi_dsub+0x2e2>
 8001468:	e712      	b.n	8001290 <__aeabi_dsub+0x108>
 800146a:	464b      	mov	r3, r9
 800146c:	464a      	mov	r2, r9
 800146e:	08e4      	lsrs	r4, r4, #3
 8001470:	075b      	lsls	r3, r3, #29
 8001472:	4323      	orrs	r3, r4
 8001474:	08d4      	lsrs	r4, r2, #3
 8001476:	4642      	mov	r2, r8
 8001478:	4919      	ldr	r1, [pc, #100]	; (80014e0 <__aeabi_dsub+0x358>)
 800147a:	428a      	cmp	r2, r1
 800147c:	d00e      	beq.n	800149c <__aeabi_dsub+0x314>
 800147e:	0324      	lsls	r4, r4, #12
 8001480:	0552      	lsls	r2, r2, #21
 8001482:	0b24      	lsrs	r4, r4, #12
 8001484:	0d52      	lsrs	r2, r2, #21
 8001486:	e722      	b.n	80012ce <__aeabi_dsub+0x146>
 8001488:	000a      	movs	r2, r1
 800148a:	2400      	movs	r4, #0
 800148c:	2300      	movs	r3, #0
 800148e:	e71e      	b.n	80012ce <__aeabi_dsub+0x146>
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	4662      	mov	r2, ip
 8001494:	0752      	lsls	r2, r2, #29
 8001496:	4313      	orrs	r3, r2
 8001498:	4662      	mov	r2, ip
 800149a:	08d4      	lsrs	r4, r2, #3
 800149c:	001a      	movs	r2, r3
 800149e:	4322      	orrs	r2, r4
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dsub+0x31c>
 80014a2:	e1fc      	b.n	800189e <__aeabi_dsub+0x716>
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	0312      	lsls	r2, r2, #12
 80014a8:	4314      	orrs	r4, r2
 80014aa:	0324      	lsls	r4, r4, #12
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <__aeabi_dsub+0x358>)
 80014ae:	0b24      	lsrs	r4, r4, #12
 80014b0:	e70d      	b.n	80012ce <__aeabi_dsub+0x146>
 80014b2:	0020      	movs	r0, r4
 80014b4:	f000 fac4 	bl	8001a40 <__clzsi2>
 80014b8:	0001      	movs	r1, r0
 80014ba:	3118      	adds	r1, #24
 80014bc:	291f      	cmp	r1, #31
 80014be:	dc00      	bgt.n	80014c2 <__aeabi_dsub+0x33a>
 80014c0:	e6c4      	b.n	800124c <__aeabi_dsub+0xc4>
 80014c2:	3808      	subs	r0, #8
 80014c4:	4084      	lsls	r4, r0
 80014c6:	4643      	mov	r3, r8
 80014c8:	0020      	movs	r0, r4
 80014ca:	2400      	movs	r4, #0
 80014cc:	4588      	cmp	r8, r1
 80014ce:	dc00      	bgt.n	80014d2 <__aeabi_dsub+0x34a>
 80014d0:	e6c8      	b.n	8001264 <__aeabi_dsub+0xdc>
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__aeabi_dsub+0x35c>)
 80014d4:	1a5b      	subs	r3, r3, r1
 80014d6:	4010      	ands	r0, r2
 80014d8:	4698      	mov	r8, r3
 80014da:	4681      	mov	r9, r0
 80014dc:	e6d6      	b.n	800128c <__aeabi_dsub+0x104>
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	000007ff 	.word	0x000007ff
 80014e4:	ff7fffff 	.word	0xff7fffff
 80014e8:	fffff801 	.word	0xfffff801
 80014ec:	000007fe 	.word	0x000007fe
 80014f0:	430f      	orrs	r7, r1
 80014f2:	1e7a      	subs	r2, r7, #1
 80014f4:	4197      	sbcs	r7, r2
 80014f6:	e691      	b.n	800121c <__aeabi_dsub+0x94>
 80014f8:	4661      	mov	r1, ip
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	0749      	lsls	r1, r1, #29
 80014fe:	430b      	orrs	r3, r1
 8001500:	4661      	mov	r1, ip
 8001502:	08cc      	lsrs	r4, r1, #3
 8001504:	e7b8      	b.n	8001478 <__aeabi_dsub+0x2f0>
 8001506:	4640      	mov	r0, r8
 8001508:	4cd3      	ldr	r4, [pc, #844]	; (8001858 <__aeabi_dsub+0x6d0>)
 800150a:	3001      	adds	r0, #1
 800150c:	4220      	tst	r0, r4
 800150e:	d000      	beq.n	8001512 <__aeabi_dsub+0x38a>
 8001510:	e0a2      	b.n	8001658 <__aeabi_dsub+0x4d0>
 8001512:	4640      	mov	r0, r8
 8001514:	2800      	cmp	r0, #0
 8001516:	d000      	beq.n	800151a <__aeabi_dsub+0x392>
 8001518:	e101      	b.n	800171e <__aeabi_dsub+0x596>
 800151a:	4660      	mov	r0, ip
 800151c:	4318      	orrs	r0, r3
 800151e:	d100      	bne.n	8001522 <__aeabi_dsub+0x39a>
 8001520:	e15e      	b.n	80017e0 <__aeabi_dsub+0x658>
 8001522:	0008      	movs	r0, r1
 8001524:	4338      	orrs	r0, r7
 8001526:	d000      	beq.n	800152a <__aeabi_dsub+0x3a2>
 8001528:	e15f      	b.n	80017ea <__aeabi_dsub+0x662>
 800152a:	4661      	mov	r1, ip
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	0749      	lsls	r1, r1, #29
 8001530:	430b      	orrs	r3, r1
 8001532:	4661      	mov	r1, ip
 8001534:	08cc      	lsrs	r4, r1, #3
 8001536:	e7a2      	b.n	800147e <__aeabi_dsub+0x2f6>
 8001538:	4dc8      	ldr	r5, [pc, #800]	; (800185c <__aeabi_dsub+0x6d4>)
 800153a:	42a8      	cmp	r0, r5
 800153c:	d100      	bne.n	8001540 <__aeabi_dsub+0x3b8>
 800153e:	e0cf      	b.n	80016e0 <__aeabi_dsub+0x558>
 8001540:	2580      	movs	r5, #128	; 0x80
 8001542:	4664      	mov	r4, ip
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	432c      	orrs	r4, r5
 8001548:	46a4      	mov	ip, r4
 800154a:	2a38      	cmp	r2, #56	; 0x38
 800154c:	dc56      	bgt.n	80015fc <__aeabi_dsub+0x474>
 800154e:	2a1f      	cmp	r2, #31
 8001550:	dd00      	ble.n	8001554 <__aeabi_dsub+0x3cc>
 8001552:	e0d1      	b.n	80016f8 <__aeabi_dsub+0x570>
 8001554:	2520      	movs	r5, #32
 8001556:	001e      	movs	r6, r3
 8001558:	1aad      	subs	r5, r5, r2
 800155a:	4664      	mov	r4, ip
 800155c:	40ab      	lsls	r3, r5
 800155e:	40ac      	lsls	r4, r5
 8001560:	40d6      	lsrs	r6, r2
 8001562:	1e5d      	subs	r5, r3, #1
 8001564:	41ab      	sbcs	r3, r5
 8001566:	4334      	orrs	r4, r6
 8001568:	4323      	orrs	r3, r4
 800156a:	4664      	mov	r4, ip
 800156c:	40d4      	lsrs	r4, r2
 800156e:	1b09      	subs	r1, r1, r4
 8001570:	e049      	b.n	8001606 <__aeabi_dsub+0x47e>
 8001572:	4660      	mov	r0, ip
 8001574:	1bdc      	subs	r4, r3, r7
 8001576:	1a46      	subs	r6, r0, r1
 8001578:	42a3      	cmp	r3, r4
 800157a:	4180      	sbcs	r0, r0
 800157c:	4240      	negs	r0, r0
 800157e:	4681      	mov	r9, r0
 8001580:	0030      	movs	r0, r6
 8001582:	464e      	mov	r6, r9
 8001584:	1b80      	subs	r0, r0, r6
 8001586:	4681      	mov	r9, r0
 8001588:	0200      	lsls	r0, r0, #8
 800158a:	d476      	bmi.n	800167a <__aeabi_dsub+0x4f2>
 800158c:	464b      	mov	r3, r9
 800158e:	4323      	orrs	r3, r4
 8001590:	d000      	beq.n	8001594 <__aeabi_dsub+0x40c>
 8001592:	e652      	b.n	800123a <__aeabi_dsub+0xb2>
 8001594:	2400      	movs	r4, #0
 8001596:	2500      	movs	r5, #0
 8001598:	e771      	b.n	800147e <__aeabi_dsub+0x2f6>
 800159a:	4339      	orrs	r1, r7
 800159c:	000c      	movs	r4, r1
 800159e:	1e62      	subs	r2, r4, #1
 80015a0:	4194      	sbcs	r4, r2
 80015a2:	18e4      	adds	r4, r4, r3
 80015a4:	429c      	cmp	r4, r3
 80015a6:	419b      	sbcs	r3, r3
 80015a8:	425b      	negs	r3, r3
 80015aa:	4463      	add	r3, ip
 80015ac:	4699      	mov	r9, r3
 80015ae:	464b      	mov	r3, r9
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	d400      	bmi.n	80015b6 <__aeabi_dsub+0x42e>
 80015b4:	e756      	b.n	8001464 <__aeabi_dsub+0x2dc>
 80015b6:	2301      	movs	r3, #1
 80015b8:	469c      	mov	ip, r3
 80015ba:	4ba8      	ldr	r3, [pc, #672]	; (800185c <__aeabi_dsub+0x6d4>)
 80015bc:	44e0      	add	r8, ip
 80015be:	4598      	cmp	r8, r3
 80015c0:	d038      	beq.n	8001634 <__aeabi_dsub+0x4ac>
 80015c2:	464b      	mov	r3, r9
 80015c4:	48a6      	ldr	r0, [pc, #664]	; (8001860 <__aeabi_dsub+0x6d8>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	4003      	ands	r3, r0
 80015ca:	0018      	movs	r0, r3
 80015cc:	0863      	lsrs	r3, r4, #1
 80015ce:	4014      	ands	r4, r2
 80015d0:	431c      	orrs	r4, r3
 80015d2:	07c3      	lsls	r3, r0, #31
 80015d4:	431c      	orrs	r4, r3
 80015d6:	0843      	lsrs	r3, r0, #1
 80015d8:	4699      	mov	r9, r3
 80015da:	e657      	b.n	800128c <__aeabi_dsub+0x104>
 80015dc:	0010      	movs	r0, r2
 80015de:	000e      	movs	r6, r1
 80015e0:	3820      	subs	r0, #32
 80015e2:	40c6      	lsrs	r6, r0
 80015e4:	2a20      	cmp	r2, #32
 80015e6:	d004      	beq.n	80015f2 <__aeabi_dsub+0x46a>
 80015e8:	2040      	movs	r0, #64	; 0x40
 80015ea:	1a82      	subs	r2, r0, r2
 80015ec:	4091      	lsls	r1, r2
 80015ee:	430f      	orrs	r7, r1
 80015f0:	46b9      	mov	r9, r7
 80015f2:	464f      	mov	r7, r9
 80015f4:	1e7a      	subs	r2, r7, #1
 80015f6:	4197      	sbcs	r7, r2
 80015f8:	4337      	orrs	r7, r6
 80015fa:	e60f      	b.n	800121c <__aeabi_dsub+0x94>
 80015fc:	4662      	mov	r2, ip
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	1e5a      	subs	r2, r3, #1
 8001604:	4193      	sbcs	r3, r2
 8001606:	1afc      	subs	r4, r7, r3
 8001608:	42a7      	cmp	r7, r4
 800160a:	41bf      	sbcs	r7, r7
 800160c:	427f      	negs	r7, r7
 800160e:	1bcb      	subs	r3, r1, r7
 8001610:	4699      	mov	r9, r3
 8001612:	465d      	mov	r5, fp
 8001614:	4680      	mov	r8, r0
 8001616:	e608      	b.n	800122a <__aeabi_dsub+0xa2>
 8001618:	4666      	mov	r6, ip
 800161a:	431e      	orrs	r6, r3
 800161c:	d100      	bne.n	8001620 <__aeabi_dsub+0x498>
 800161e:	e0be      	b.n	800179e <__aeabi_dsub+0x616>
 8001620:	1e56      	subs	r6, r2, #1
 8001622:	2a01      	cmp	r2, #1
 8001624:	d100      	bne.n	8001628 <__aeabi_dsub+0x4a0>
 8001626:	e109      	b.n	800183c <__aeabi_dsub+0x6b4>
 8001628:	4c8c      	ldr	r4, [pc, #560]	; (800185c <__aeabi_dsub+0x6d4>)
 800162a:	42a2      	cmp	r2, r4
 800162c:	d100      	bne.n	8001630 <__aeabi_dsub+0x4a8>
 800162e:	e119      	b.n	8001864 <__aeabi_dsub+0x6dc>
 8001630:	0032      	movs	r2, r6
 8001632:	e6c1      	b.n	80013b8 <__aeabi_dsub+0x230>
 8001634:	4642      	mov	r2, r8
 8001636:	2400      	movs	r4, #0
 8001638:	2300      	movs	r3, #0
 800163a:	e648      	b.n	80012ce <__aeabi_dsub+0x146>
 800163c:	2020      	movs	r0, #32
 800163e:	000c      	movs	r4, r1
 8001640:	1a80      	subs	r0, r0, r2
 8001642:	003e      	movs	r6, r7
 8001644:	4087      	lsls	r7, r0
 8001646:	4084      	lsls	r4, r0
 8001648:	40d6      	lsrs	r6, r2
 800164a:	1e78      	subs	r0, r7, #1
 800164c:	4187      	sbcs	r7, r0
 800164e:	40d1      	lsrs	r1, r2
 8001650:	4334      	orrs	r4, r6
 8001652:	433c      	orrs	r4, r7
 8001654:	448c      	add	ip, r1
 8001656:	e7a4      	b.n	80015a2 <__aeabi_dsub+0x41a>
 8001658:	4a80      	ldr	r2, [pc, #512]	; (800185c <__aeabi_dsub+0x6d4>)
 800165a:	4290      	cmp	r0, r2
 800165c:	d100      	bne.n	8001660 <__aeabi_dsub+0x4d8>
 800165e:	e0e9      	b.n	8001834 <__aeabi_dsub+0x6ac>
 8001660:	19df      	adds	r7, r3, r7
 8001662:	429f      	cmp	r7, r3
 8001664:	419b      	sbcs	r3, r3
 8001666:	4461      	add	r1, ip
 8001668:	425b      	negs	r3, r3
 800166a:	18c9      	adds	r1, r1, r3
 800166c:	07cc      	lsls	r4, r1, #31
 800166e:	087f      	lsrs	r7, r7, #1
 8001670:	084b      	lsrs	r3, r1, #1
 8001672:	4699      	mov	r9, r3
 8001674:	4680      	mov	r8, r0
 8001676:	433c      	orrs	r4, r7
 8001678:	e6f4      	b.n	8001464 <__aeabi_dsub+0x2dc>
 800167a:	1afc      	subs	r4, r7, r3
 800167c:	42a7      	cmp	r7, r4
 800167e:	41bf      	sbcs	r7, r7
 8001680:	4663      	mov	r3, ip
 8001682:	427f      	negs	r7, r7
 8001684:	1ac9      	subs	r1, r1, r3
 8001686:	1bcb      	subs	r3, r1, r7
 8001688:	4699      	mov	r9, r3
 800168a:	465d      	mov	r5, fp
 800168c:	e5d5      	b.n	800123a <__aeabi_dsub+0xb2>
 800168e:	08ff      	lsrs	r7, r7, #3
 8001690:	074b      	lsls	r3, r1, #29
 8001692:	465d      	mov	r5, fp
 8001694:	433b      	orrs	r3, r7
 8001696:	08cc      	lsrs	r4, r1, #3
 8001698:	e6ee      	b.n	8001478 <__aeabi_dsub+0x2f0>
 800169a:	4662      	mov	r2, ip
 800169c:	431a      	orrs	r2, r3
 800169e:	d000      	beq.n	80016a2 <__aeabi_dsub+0x51a>
 80016a0:	e082      	b.n	80017a8 <__aeabi_dsub+0x620>
 80016a2:	000b      	movs	r3, r1
 80016a4:	433b      	orrs	r3, r7
 80016a6:	d11b      	bne.n	80016e0 <__aeabi_dsub+0x558>
 80016a8:	2480      	movs	r4, #128	; 0x80
 80016aa:	2500      	movs	r5, #0
 80016ac:	0324      	lsls	r4, r4, #12
 80016ae:	e6f9      	b.n	80014a4 <__aeabi_dsub+0x31c>
 80016b0:	19dc      	adds	r4, r3, r7
 80016b2:	429c      	cmp	r4, r3
 80016b4:	419b      	sbcs	r3, r3
 80016b6:	4461      	add	r1, ip
 80016b8:	4689      	mov	r9, r1
 80016ba:	425b      	negs	r3, r3
 80016bc:	4499      	add	r9, r3
 80016be:	464b      	mov	r3, r9
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	d444      	bmi.n	800174e <__aeabi_dsub+0x5c6>
 80016c4:	2301      	movs	r3, #1
 80016c6:	4698      	mov	r8, r3
 80016c8:	e6cc      	b.n	8001464 <__aeabi_dsub+0x2dc>
 80016ca:	1bdc      	subs	r4, r3, r7
 80016cc:	4662      	mov	r2, ip
 80016ce:	42a3      	cmp	r3, r4
 80016d0:	419b      	sbcs	r3, r3
 80016d2:	1a51      	subs	r1, r2, r1
 80016d4:	425b      	negs	r3, r3
 80016d6:	1acb      	subs	r3, r1, r3
 80016d8:	4699      	mov	r9, r3
 80016da:	2301      	movs	r3, #1
 80016dc:	4698      	mov	r8, r3
 80016de:	e5a4      	b.n	800122a <__aeabi_dsub+0xa2>
 80016e0:	08ff      	lsrs	r7, r7, #3
 80016e2:	074b      	lsls	r3, r1, #29
 80016e4:	465d      	mov	r5, fp
 80016e6:	433b      	orrs	r3, r7
 80016e8:	08cc      	lsrs	r4, r1, #3
 80016ea:	e6d7      	b.n	800149c <__aeabi_dsub+0x314>
 80016ec:	4662      	mov	r2, ip
 80016ee:	431a      	orrs	r2, r3
 80016f0:	0014      	movs	r4, r2
 80016f2:	1e63      	subs	r3, r4, #1
 80016f4:	419c      	sbcs	r4, r3
 80016f6:	e679      	b.n	80013ec <__aeabi_dsub+0x264>
 80016f8:	0015      	movs	r5, r2
 80016fa:	4664      	mov	r4, ip
 80016fc:	3d20      	subs	r5, #32
 80016fe:	40ec      	lsrs	r4, r5
 8001700:	46a0      	mov	r8, r4
 8001702:	2a20      	cmp	r2, #32
 8001704:	d005      	beq.n	8001712 <__aeabi_dsub+0x58a>
 8001706:	2540      	movs	r5, #64	; 0x40
 8001708:	4664      	mov	r4, ip
 800170a:	1aaa      	subs	r2, r5, r2
 800170c:	4094      	lsls	r4, r2
 800170e:	4323      	orrs	r3, r4
 8001710:	469a      	mov	sl, r3
 8001712:	4654      	mov	r4, sl
 8001714:	1e63      	subs	r3, r4, #1
 8001716:	419c      	sbcs	r4, r3
 8001718:	4643      	mov	r3, r8
 800171a:	4323      	orrs	r3, r4
 800171c:	e773      	b.n	8001606 <__aeabi_dsub+0x47e>
 800171e:	4662      	mov	r2, ip
 8001720:	431a      	orrs	r2, r3
 8001722:	d023      	beq.n	800176c <__aeabi_dsub+0x5e4>
 8001724:	000a      	movs	r2, r1
 8001726:	433a      	orrs	r2, r7
 8001728:	d000      	beq.n	800172c <__aeabi_dsub+0x5a4>
 800172a:	e0a0      	b.n	800186e <__aeabi_dsub+0x6e6>
 800172c:	4662      	mov	r2, ip
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	0752      	lsls	r2, r2, #29
 8001732:	4313      	orrs	r3, r2
 8001734:	4662      	mov	r2, ip
 8001736:	08d4      	lsrs	r4, r2, #3
 8001738:	e6b0      	b.n	800149c <__aeabi_dsub+0x314>
 800173a:	000b      	movs	r3, r1
 800173c:	433b      	orrs	r3, r7
 800173e:	d100      	bne.n	8001742 <__aeabi_dsub+0x5ba>
 8001740:	e728      	b.n	8001594 <__aeabi_dsub+0x40c>
 8001742:	08ff      	lsrs	r7, r7, #3
 8001744:	074b      	lsls	r3, r1, #29
 8001746:	465d      	mov	r5, fp
 8001748:	433b      	orrs	r3, r7
 800174a:	08cc      	lsrs	r4, r1, #3
 800174c:	e697      	b.n	800147e <__aeabi_dsub+0x2f6>
 800174e:	2302      	movs	r3, #2
 8001750:	4698      	mov	r8, r3
 8001752:	e736      	b.n	80015c2 <__aeabi_dsub+0x43a>
 8001754:	1afc      	subs	r4, r7, r3
 8001756:	42a7      	cmp	r7, r4
 8001758:	41bf      	sbcs	r7, r7
 800175a:	4663      	mov	r3, ip
 800175c:	427f      	negs	r7, r7
 800175e:	1ac9      	subs	r1, r1, r3
 8001760:	1bcb      	subs	r3, r1, r7
 8001762:	4699      	mov	r9, r3
 8001764:	2301      	movs	r3, #1
 8001766:	465d      	mov	r5, fp
 8001768:	4698      	mov	r8, r3
 800176a:	e55e      	b.n	800122a <__aeabi_dsub+0xa2>
 800176c:	074b      	lsls	r3, r1, #29
 800176e:	08ff      	lsrs	r7, r7, #3
 8001770:	433b      	orrs	r3, r7
 8001772:	08cc      	lsrs	r4, r1, #3
 8001774:	e692      	b.n	800149c <__aeabi_dsub+0x314>
 8001776:	1bdc      	subs	r4, r3, r7
 8001778:	4660      	mov	r0, ip
 800177a:	42a3      	cmp	r3, r4
 800177c:	41b6      	sbcs	r6, r6
 800177e:	1a40      	subs	r0, r0, r1
 8001780:	4276      	negs	r6, r6
 8001782:	1b80      	subs	r0, r0, r6
 8001784:	4681      	mov	r9, r0
 8001786:	0200      	lsls	r0, r0, #8
 8001788:	d560      	bpl.n	800184c <__aeabi_dsub+0x6c4>
 800178a:	1afc      	subs	r4, r7, r3
 800178c:	42a7      	cmp	r7, r4
 800178e:	41bf      	sbcs	r7, r7
 8001790:	4663      	mov	r3, ip
 8001792:	427f      	negs	r7, r7
 8001794:	1ac9      	subs	r1, r1, r3
 8001796:	1bcb      	subs	r3, r1, r7
 8001798:	4699      	mov	r9, r3
 800179a:	465d      	mov	r5, fp
 800179c:	e576      	b.n	800128c <__aeabi_dsub+0x104>
 800179e:	08ff      	lsrs	r7, r7, #3
 80017a0:	074b      	lsls	r3, r1, #29
 80017a2:	433b      	orrs	r3, r7
 80017a4:	08cc      	lsrs	r4, r1, #3
 80017a6:	e667      	b.n	8001478 <__aeabi_dsub+0x2f0>
 80017a8:	000a      	movs	r2, r1
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	433a      	orrs	r2, r7
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dsub+0x62a>
 80017b0:	e66f      	b.n	8001492 <__aeabi_dsub+0x30a>
 80017b2:	4662      	mov	r2, ip
 80017b4:	0752      	lsls	r2, r2, #29
 80017b6:	4313      	orrs	r3, r2
 80017b8:	4662      	mov	r2, ip
 80017ba:	08d4      	lsrs	r4, r2, #3
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	0312      	lsls	r2, r2, #12
 80017c0:	4214      	tst	r4, r2
 80017c2:	d007      	beq.n	80017d4 <__aeabi_dsub+0x64c>
 80017c4:	08c8      	lsrs	r0, r1, #3
 80017c6:	4210      	tst	r0, r2
 80017c8:	d104      	bne.n	80017d4 <__aeabi_dsub+0x64c>
 80017ca:	465d      	mov	r5, fp
 80017cc:	0004      	movs	r4, r0
 80017ce:	08fb      	lsrs	r3, r7, #3
 80017d0:	0749      	lsls	r1, r1, #29
 80017d2:	430b      	orrs	r3, r1
 80017d4:	0f5a      	lsrs	r2, r3, #29
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	0752      	lsls	r2, r2, #29
 80017dc:	4313      	orrs	r3, r2
 80017de:	e65d      	b.n	800149c <__aeabi_dsub+0x314>
 80017e0:	074b      	lsls	r3, r1, #29
 80017e2:	08ff      	lsrs	r7, r7, #3
 80017e4:	433b      	orrs	r3, r7
 80017e6:	08cc      	lsrs	r4, r1, #3
 80017e8:	e649      	b.n	800147e <__aeabi_dsub+0x2f6>
 80017ea:	19dc      	adds	r4, r3, r7
 80017ec:	429c      	cmp	r4, r3
 80017ee:	419b      	sbcs	r3, r3
 80017f0:	4461      	add	r1, ip
 80017f2:	4689      	mov	r9, r1
 80017f4:	425b      	negs	r3, r3
 80017f6:	4499      	add	r9, r3
 80017f8:	464b      	mov	r3, r9
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	d400      	bmi.n	8001800 <__aeabi_dsub+0x678>
 80017fe:	e631      	b.n	8001464 <__aeabi_dsub+0x2dc>
 8001800:	464a      	mov	r2, r9
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <__aeabi_dsub+0x6d8>)
 8001804:	401a      	ands	r2, r3
 8001806:	2301      	movs	r3, #1
 8001808:	4691      	mov	r9, r2
 800180a:	4698      	mov	r8, r3
 800180c:	e62a      	b.n	8001464 <__aeabi_dsub+0x2dc>
 800180e:	0016      	movs	r6, r2
 8001810:	4664      	mov	r4, ip
 8001812:	3e20      	subs	r6, #32
 8001814:	40f4      	lsrs	r4, r6
 8001816:	46a0      	mov	r8, r4
 8001818:	2a20      	cmp	r2, #32
 800181a:	d005      	beq.n	8001828 <__aeabi_dsub+0x6a0>
 800181c:	2640      	movs	r6, #64	; 0x40
 800181e:	4664      	mov	r4, ip
 8001820:	1ab2      	subs	r2, r6, r2
 8001822:	4094      	lsls	r4, r2
 8001824:	4323      	orrs	r3, r4
 8001826:	469a      	mov	sl, r3
 8001828:	4654      	mov	r4, sl
 800182a:	1e63      	subs	r3, r4, #1
 800182c:	419c      	sbcs	r4, r3
 800182e:	4643      	mov	r3, r8
 8001830:	431c      	orrs	r4, r3
 8001832:	e5db      	b.n	80013ec <__aeabi_dsub+0x264>
 8001834:	0002      	movs	r2, r0
 8001836:	2400      	movs	r4, #0
 8001838:	2300      	movs	r3, #0
 800183a:	e548      	b.n	80012ce <__aeabi_dsub+0x146>
 800183c:	19dc      	adds	r4, r3, r7
 800183e:	42bc      	cmp	r4, r7
 8001840:	41bf      	sbcs	r7, r7
 8001842:	4461      	add	r1, ip
 8001844:	4689      	mov	r9, r1
 8001846:	427f      	negs	r7, r7
 8001848:	44b9      	add	r9, r7
 800184a:	e738      	b.n	80016be <__aeabi_dsub+0x536>
 800184c:	464b      	mov	r3, r9
 800184e:	4323      	orrs	r3, r4
 8001850:	d100      	bne.n	8001854 <__aeabi_dsub+0x6cc>
 8001852:	e69f      	b.n	8001594 <__aeabi_dsub+0x40c>
 8001854:	e606      	b.n	8001464 <__aeabi_dsub+0x2dc>
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	000007fe 	.word	0x000007fe
 800185c:	000007ff 	.word	0x000007ff
 8001860:	ff7fffff 	.word	0xff7fffff
 8001864:	08ff      	lsrs	r7, r7, #3
 8001866:	074b      	lsls	r3, r1, #29
 8001868:	433b      	orrs	r3, r7
 800186a:	08cc      	lsrs	r4, r1, #3
 800186c:	e616      	b.n	800149c <__aeabi_dsub+0x314>
 800186e:	4662      	mov	r2, ip
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	0752      	lsls	r2, r2, #29
 8001874:	4313      	orrs	r3, r2
 8001876:	4662      	mov	r2, ip
 8001878:	08d4      	lsrs	r4, r2, #3
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	0312      	lsls	r2, r2, #12
 800187e:	4214      	tst	r4, r2
 8001880:	d007      	beq.n	8001892 <__aeabi_dsub+0x70a>
 8001882:	08c8      	lsrs	r0, r1, #3
 8001884:	4210      	tst	r0, r2
 8001886:	d104      	bne.n	8001892 <__aeabi_dsub+0x70a>
 8001888:	465d      	mov	r5, fp
 800188a:	0004      	movs	r4, r0
 800188c:	08fb      	lsrs	r3, r7, #3
 800188e:	0749      	lsls	r1, r1, #29
 8001890:	430b      	orrs	r3, r1
 8001892:	0f5a      	lsrs	r2, r3, #29
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	0752      	lsls	r2, r2, #29
 8001898:	08db      	lsrs	r3, r3, #3
 800189a:	4313      	orrs	r3, r2
 800189c:	e5fe      	b.n	800149c <__aeabi_dsub+0x314>
 800189e:	2300      	movs	r3, #0
 80018a0:	4a01      	ldr	r2, [pc, #4]	; (80018a8 <__aeabi_dsub+0x720>)
 80018a2:	001c      	movs	r4, r3
 80018a4:	e513      	b.n	80012ce <__aeabi_dsub+0x146>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	000007ff 	.word	0x000007ff

080018ac <__aeabi_d2iz>:
 80018ac:	000a      	movs	r2, r1
 80018ae:	b530      	push	{r4, r5, lr}
 80018b0:	4c13      	ldr	r4, [pc, #76]	; (8001900 <__aeabi_d2iz+0x54>)
 80018b2:	0053      	lsls	r3, r2, #1
 80018b4:	0309      	lsls	r1, r1, #12
 80018b6:	0005      	movs	r5, r0
 80018b8:	0b09      	lsrs	r1, r1, #12
 80018ba:	2000      	movs	r0, #0
 80018bc:	0d5b      	lsrs	r3, r3, #21
 80018be:	0fd2      	lsrs	r2, r2, #31
 80018c0:	42a3      	cmp	r3, r4
 80018c2:	dd04      	ble.n	80018ce <__aeabi_d2iz+0x22>
 80018c4:	480f      	ldr	r0, [pc, #60]	; (8001904 <__aeabi_d2iz+0x58>)
 80018c6:	4283      	cmp	r3, r0
 80018c8:	dd02      	ble.n	80018d0 <__aeabi_d2iz+0x24>
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <__aeabi_d2iz+0x5c>)
 80018cc:	18d0      	adds	r0, r2, r3
 80018ce:	bd30      	pop	{r4, r5, pc}
 80018d0:	2080      	movs	r0, #128	; 0x80
 80018d2:	0340      	lsls	r0, r0, #13
 80018d4:	4301      	orrs	r1, r0
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <__aeabi_d2iz+0x60>)
 80018d8:	1ac0      	subs	r0, r0, r3
 80018da:	281f      	cmp	r0, #31
 80018dc:	dd08      	ble.n	80018f0 <__aeabi_d2iz+0x44>
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <__aeabi_d2iz+0x64>)
 80018e0:	1ac3      	subs	r3, r0, r3
 80018e2:	40d9      	lsrs	r1, r3
 80018e4:	000b      	movs	r3, r1
 80018e6:	4258      	negs	r0, r3
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	d1f0      	bne.n	80018ce <__aeabi_d2iz+0x22>
 80018ec:	0018      	movs	r0, r3
 80018ee:	e7ee      	b.n	80018ce <__aeabi_d2iz+0x22>
 80018f0:	4c08      	ldr	r4, [pc, #32]	; (8001914 <__aeabi_d2iz+0x68>)
 80018f2:	40c5      	lsrs	r5, r0
 80018f4:	46a4      	mov	ip, r4
 80018f6:	4463      	add	r3, ip
 80018f8:	4099      	lsls	r1, r3
 80018fa:	000b      	movs	r3, r1
 80018fc:	432b      	orrs	r3, r5
 80018fe:	e7f2      	b.n	80018e6 <__aeabi_d2iz+0x3a>
 8001900:	000003fe 	.word	0x000003fe
 8001904:	0000041d 	.word	0x0000041d
 8001908:	7fffffff 	.word	0x7fffffff
 800190c:	00000433 	.word	0x00000433
 8001910:	00000413 	.word	0x00000413
 8001914:	fffffbed 	.word	0xfffffbed

08001918 <__aeabi_i2d>:
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	2800      	cmp	r0, #0
 800191c:	d016      	beq.n	800194c <__aeabi_i2d+0x34>
 800191e:	17c3      	asrs	r3, r0, #31
 8001920:	18c5      	adds	r5, r0, r3
 8001922:	405d      	eors	r5, r3
 8001924:	0fc4      	lsrs	r4, r0, #31
 8001926:	0028      	movs	r0, r5
 8001928:	f000 f88a 	bl	8001a40 <__clzsi2>
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <__aeabi_i2d+0x5c>)
 800192e:	1a12      	subs	r2, r2, r0
 8001930:	280a      	cmp	r0, #10
 8001932:	dc16      	bgt.n	8001962 <__aeabi_i2d+0x4a>
 8001934:	0003      	movs	r3, r0
 8001936:	002e      	movs	r6, r5
 8001938:	3315      	adds	r3, #21
 800193a:	409e      	lsls	r6, r3
 800193c:	230b      	movs	r3, #11
 800193e:	1a18      	subs	r0, r3, r0
 8001940:	40c5      	lsrs	r5, r0
 8001942:	0552      	lsls	r2, r2, #21
 8001944:	032d      	lsls	r5, r5, #12
 8001946:	0b2d      	lsrs	r5, r5, #12
 8001948:	0d53      	lsrs	r3, r2, #21
 800194a:	e003      	b.n	8001954 <__aeabi_i2d+0x3c>
 800194c:	2400      	movs	r4, #0
 800194e:	2300      	movs	r3, #0
 8001950:	2500      	movs	r5, #0
 8001952:	2600      	movs	r6, #0
 8001954:	051b      	lsls	r3, r3, #20
 8001956:	432b      	orrs	r3, r5
 8001958:	07e4      	lsls	r4, r4, #31
 800195a:	4323      	orrs	r3, r4
 800195c:	0030      	movs	r0, r6
 800195e:	0019      	movs	r1, r3
 8001960:	bd70      	pop	{r4, r5, r6, pc}
 8001962:	380b      	subs	r0, #11
 8001964:	4085      	lsls	r5, r0
 8001966:	0552      	lsls	r2, r2, #21
 8001968:	032d      	lsls	r5, r5, #12
 800196a:	2600      	movs	r6, #0
 800196c:	0b2d      	lsrs	r5, r5, #12
 800196e:	0d53      	lsrs	r3, r2, #21
 8001970:	e7f0      	b.n	8001954 <__aeabi_i2d+0x3c>
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	0000041e 	.word	0x0000041e

08001978 <__aeabi_ui2d>:
 8001978:	b510      	push	{r4, lr}
 800197a:	1e04      	subs	r4, r0, #0
 800197c:	d010      	beq.n	80019a0 <__aeabi_ui2d+0x28>
 800197e:	f000 f85f 	bl	8001a40 <__clzsi2>
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <__aeabi_ui2d+0x48>)
 8001984:	1a1b      	subs	r3, r3, r0
 8001986:	280a      	cmp	r0, #10
 8001988:	dc11      	bgt.n	80019ae <__aeabi_ui2d+0x36>
 800198a:	220b      	movs	r2, #11
 800198c:	0021      	movs	r1, r4
 800198e:	1a12      	subs	r2, r2, r0
 8001990:	40d1      	lsrs	r1, r2
 8001992:	3015      	adds	r0, #21
 8001994:	030a      	lsls	r2, r1, #12
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	4084      	lsls	r4, r0
 800199a:	0b12      	lsrs	r2, r2, #12
 800199c:	0d5b      	lsrs	r3, r3, #21
 800199e:	e001      	b.n	80019a4 <__aeabi_ui2d+0x2c>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2200      	movs	r2, #0
 80019a4:	051b      	lsls	r3, r3, #20
 80019a6:	4313      	orrs	r3, r2
 80019a8:	0020      	movs	r0, r4
 80019aa:	0019      	movs	r1, r3
 80019ac:	bd10      	pop	{r4, pc}
 80019ae:	0022      	movs	r2, r4
 80019b0:	380b      	subs	r0, #11
 80019b2:	4082      	lsls	r2, r0
 80019b4:	055b      	lsls	r3, r3, #21
 80019b6:	0312      	lsls	r2, r2, #12
 80019b8:	2400      	movs	r4, #0
 80019ba:	0b12      	lsrs	r2, r2, #12
 80019bc:	0d5b      	lsrs	r3, r3, #21
 80019be:	e7f1      	b.n	80019a4 <__aeabi_ui2d+0x2c>
 80019c0:	0000041e 	.word	0x0000041e

080019c4 <__aeabi_cdrcmple>:
 80019c4:	4684      	mov	ip, r0
 80019c6:	0010      	movs	r0, r2
 80019c8:	4662      	mov	r2, ip
 80019ca:	468c      	mov	ip, r1
 80019cc:	0019      	movs	r1, r3
 80019ce:	4663      	mov	r3, ip
 80019d0:	e000      	b.n	80019d4 <__aeabi_cdcmpeq>
 80019d2:	46c0      	nop			; (mov r8, r8)

080019d4 <__aeabi_cdcmpeq>:
 80019d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80019d6:	f000 f905 	bl	8001be4 <__ledf2>
 80019da:	2800      	cmp	r0, #0
 80019dc:	d401      	bmi.n	80019e2 <__aeabi_cdcmpeq+0xe>
 80019de:	2100      	movs	r1, #0
 80019e0:	42c8      	cmn	r0, r1
 80019e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080019e4 <__aeabi_dcmpeq>:
 80019e4:	b510      	push	{r4, lr}
 80019e6:	f000 f855 	bl	8001a94 <__eqdf2>
 80019ea:	4240      	negs	r0, r0
 80019ec:	3001      	adds	r0, #1
 80019ee:	bd10      	pop	{r4, pc}

080019f0 <__aeabi_dcmplt>:
 80019f0:	b510      	push	{r4, lr}
 80019f2:	f000 f8f7 	bl	8001be4 <__ledf2>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	db01      	blt.n	80019fe <__aeabi_dcmplt+0xe>
 80019fa:	2000      	movs	r0, #0
 80019fc:	bd10      	pop	{r4, pc}
 80019fe:	2001      	movs	r0, #1
 8001a00:	bd10      	pop	{r4, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)

08001a04 <__aeabi_dcmple>:
 8001a04:	b510      	push	{r4, lr}
 8001a06:	f000 f8ed 	bl	8001be4 <__ledf2>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	dd01      	ble.n	8001a12 <__aeabi_dcmple+0xe>
 8001a0e:	2000      	movs	r0, #0
 8001a10:	bd10      	pop	{r4, pc}
 8001a12:	2001      	movs	r0, #1
 8001a14:	bd10      	pop	{r4, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)

08001a18 <__aeabi_dcmpgt>:
 8001a18:	b510      	push	{r4, lr}
 8001a1a:	f000 f87d 	bl	8001b18 <__gedf2>
 8001a1e:	2800      	cmp	r0, #0
 8001a20:	dc01      	bgt.n	8001a26 <__aeabi_dcmpgt+0xe>
 8001a22:	2000      	movs	r0, #0
 8001a24:	bd10      	pop	{r4, pc}
 8001a26:	2001      	movs	r0, #1
 8001a28:	bd10      	pop	{r4, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)

08001a2c <__aeabi_dcmpge>:
 8001a2c:	b510      	push	{r4, lr}
 8001a2e:	f000 f873 	bl	8001b18 <__gedf2>
 8001a32:	2800      	cmp	r0, #0
 8001a34:	da01      	bge.n	8001a3a <__aeabi_dcmpge+0xe>
 8001a36:	2000      	movs	r0, #0
 8001a38:	bd10      	pop	{r4, pc}
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	bd10      	pop	{r4, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)

08001a40 <__clzsi2>:
 8001a40:	211c      	movs	r1, #28
 8001a42:	2301      	movs	r3, #1
 8001a44:	041b      	lsls	r3, r3, #16
 8001a46:	4298      	cmp	r0, r3
 8001a48:	d301      	bcc.n	8001a4e <__clzsi2+0xe>
 8001a4a:	0c00      	lsrs	r0, r0, #16
 8001a4c:	3910      	subs	r1, #16
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	4298      	cmp	r0, r3
 8001a52:	d301      	bcc.n	8001a58 <__clzsi2+0x18>
 8001a54:	0a00      	lsrs	r0, r0, #8
 8001a56:	3908      	subs	r1, #8
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	4298      	cmp	r0, r3
 8001a5c:	d301      	bcc.n	8001a62 <__clzsi2+0x22>
 8001a5e:	0900      	lsrs	r0, r0, #4
 8001a60:	3904      	subs	r1, #4
 8001a62:	a202      	add	r2, pc, #8	; (adr r2, 8001a6c <__clzsi2+0x2c>)
 8001a64:	5c10      	ldrb	r0, [r2, r0]
 8001a66:	1840      	adds	r0, r0, r1
 8001a68:	4770      	bx	lr
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	02020304 	.word	0x02020304
 8001a70:	01010101 	.word	0x01010101
	...

08001a7c <__clzdi2>:
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	2900      	cmp	r1, #0
 8001a80:	d103      	bne.n	8001a8a <__clzdi2+0xe>
 8001a82:	f7ff ffdd 	bl	8001a40 <__clzsi2>
 8001a86:	3020      	adds	r0, #32
 8001a88:	e002      	b.n	8001a90 <__clzdi2+0x14>
 8001a8a:	0008      	movs	r0, r1
 8001a8c:	f7ff ffd8 	bl	8001a40 <__clzsi2>
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)

08001a94 <__eqdf2>:
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	464e      	mov	r6, r9
 8001a98:	4645      	mov	r5, r8
 8001a9a:	46de      	mov	lr, fp
 8001a9c:	4657      	mov	r7, sl
 8001a9e:	4690      	mov	r8, r2
 8001aa0:	b5e0      	push	{r5, r6, r7, lr}
 8001aa2:	0017      	movs	r7, r2
 8001aa4:	031a      	lsls	r2, r3, #12
 8001aa6:	0b12      	lsrs	r2, r2, #12
 8001aa8:	0005      	movs	r5, r0
 8001aaa:	4684      	mov	ip, r0
 8001aac:	4819      	ldr	r0, [pc, #100]	; (8001b14 <__eqdf2+0x80>)
 8001aae:	030e      	lsls	r6, r1, #12
 8001ab0:	004c      	lsls	r4, r1, #1
 8001ab2:	4691      	mov	r9, r2
 8001ab4:	005a      	lsls	r2, r3, #1
 8001ab6:	0fdb      	lsrs	r3, r3, #31
 8001ab8:	469b      	mov	fp, r3
 8001aba:	0b36      	lsrs	r6, r6, #12
 8001abc:	0d64      	lsrs	r4, r4, #21
 8001abe:	0fc9      	lsrs	r1, r1, #31
 8001ac0:	0d52      	lsrs	r2, r2, #21
 8001ac2:	4284      	cmp	r4, r0
 8001ac4:	d019      	beq.n	8001afa <__eqdf2+0x66>
 8001ac6:	4282      	cmp	r2, r0
 8001ac8:	d010      	beq.n	8001aec <__eqdf2+0x58>
 8001aca:	2001      	movs	r0, #1
 8001acc:	4294      	cmp	r4, r2
 8001ace:	d10e      	bne.n	8001aee <__eqdf2+0x5a>
 8001ad0:	454e      	cmp	r6, r9
 8001ad2:	d10c      	bne.n	8001aee <__eqdf2+0x5a>
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	45c4      	cmp	ip, r8
 8001ad8:	d109      	bne.n	8001aee <__eqdf2+0x5a>
 8001ada:	4559      	cmp	r1, fp
 8001adc:	d017      	beq.n	8001b0e <__eqdf2+0x7a>
 8001ade:	2c00      	cmp	r4, #0
 8001ae0:	d105      	bne.n	8001aee <__eqdf2+0x5a>
 8001ae2:	0030      	movs	r0, r6
 8001ae4:	4328      	orrs	r0, r5
 8001ae6:	1e43      	subs	r3, r0, #1
 8001ae8:	4198      	sbcs	r0, r3
 8001aea:	e000      	b.n	8001aee <__eqdf2+0x5a>
 8001aec:	2001      	movs	r0, #1
 8001aee:	bcf0      	pop	{r4, r5, r6, r7}
 8001af0:	46bb      	mov	fp, r7
 8001af2:	46b2      	mov	sl, r6
 8001af4:	46a9      	mov	r9, r5
 8001af6:	46a0      	mov	r8, r4
 8001af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afa:	0033      	movs	r3, r6
 8001afc:	2001      	movs	r0, #1
 8001afe:	432b      	orrs	r3, r5
 8001b00:	d1f5      	bne.n	8001aee <__eqdf2+0x5a>
 8001b02:	42a2      	cmp	r2, r4
 8001b04:	d1f3      	bne.n	8001aee <__eqdf2+0x5a>
 8001b06:	464b      	mov	r3, r9
 8001b08:	433b      	orrs	r3, r7
 8001b0a:	d1f0      	bne.n	8001aee <__eqdf2+0x5a>
 8001b0c:	e7e2      	b.n	8001ad4 <__eqdf2+0x40>
 8001b0e:	2000      	movs	r0, #0
 8001b10:	e7ed      	b.n	8001aee <__eqdf2+0x5a>
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	000007ff 	.word	0x000007ff

08001b18 <__gedf2>:
 8001b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1a:	4647      	mov	r7, r8
 8001b1c:	46ce      	mov	lr, r9
 8001b1e:	0004      	movs	r4, r0
 8001b20:	0018      	movs	r0, r3
 8001b22:	0016      	movs	r6, r2
 8001b24:	031b      	lsls	r3, r3, #12
 8001b26:	0b1b      	lsrs	r3, r3, #12
 8001b28:	4d2d      	ldr	r5, [pc, #180]	; (8001be0 <__gedf2+0xc8>)
 8001b2a:	004a      	lsls	r2, r1, #1
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	0043      	lsls	r3, r0, #1
 8001b32:	030f      	lsls	r7, r1, #12
 8001b34:	46a4      	mov	ip, r4
 8001b36:	46b0      	mov	r8, r6
 8001b38:	0b3f      	lsrs	r7, r7, #12
 8001b3a:	0d52      	lsrs	r2, r2, #21
 8001b3c:	0fc9      	lsrs	r1, r1, #31
 8001b3e:	0d5b      	lsrs	r3, r3, #21
 8001b40:	0fc0      	lsrs	r0, r0, #31
 8001b42:	42aa      	cmp	r2, r5
 8001b44:	d021      	beq.n	8001b8a <__gedf2+0x72>
 8001b46:	42ab      	cmp	r3, r5
 8001b48:	d013      	beq.n	8001b72 <__gedf2+0x5a>
 8001b4a:	2a00      	cmp	r2, #0
 8001b4c:	d122      	bne.n	8001b94 <__gedf2+0x7c>
 8001b4e:	433c      	orrs	r4, r7
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <__gedf2+0x42>
 8001b54:	464d      	mov	r5, r9
 8001b56:	432e      	orrs	r6, r5
 8001b58:	d022      	beq.n	8001ba0 <__gedf2+0x88>
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d010      	beq.n	8001b80 <__gedf2+0x68>
 8001b5e:	4281      	cmp	r1, r0
 8001b60:	d022      	beq.n	8001ba8 <__gedf2+0x90>
 8001b62:	2002      	movs	r0, #2
 8001b64:	3901      	subs	r1, #1
 8001b66:	4008      	ands	r0, r1
 8001b68:	3801      	subs	r0, #1
 8001b6a:	bcc0      	pop	{r6, r7}
 8001b6c:	46b9      	mov	r9, r7
 8001b6e:	46b0      	mov	r8, r6
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b72:	464d      	mov	r5, r9
 8001b74:	432e      	orrs	r6, r5
 8001b76:	d129      	bne.n	8001bcc <__gedf2+0xb4>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d1f0      	bne.n	8001b5e <__gedf2+0x46>
 8001b7c:	433c      	orrs	r4, r7
 8001b7e:	d1ee      	bne.n	8001b5e <__gedf2+0x46>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d1f2      	bne.n	8001b6a <__gedf2+0x52>
 8001b84:	2001      	movs	r0, #1
 8001b86:	4240      	negs	r0, r0
 8001b88:	e7ef      	b.n	8001b6a <__gedf2+0x52>
 8001b8a:	003d      	movs	r5, r7
 8001b8c:	4325      	orrs	r5, r4
 8001b8e:	d11d      	bne.n	8001bcc <__gedf2+0xb4>
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d0ee      	beq.n	8001b72 <__gedf2+0x5a>
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e2      	bne.n	8001b5e <__gedf2+0x46>
 8001b98:	464c      	mov	r4, r9
 8001b9a:	4326      	orrs	r6, r4
 8001b9c:	d1df      	bne.n	8001b5e <__gedf2+0x46>
 8001b9e:	e7e0      	b.n	8001b62 <__gedf2+0x4a>
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	2c00      	cmp	r4, #0
 8001ba4:	d0e1      	beq.n	8001b6a <__gedf2+0x52>
 8001ba6:	e7dc      	b.n	8001b62 <__gedf2+0x4a>
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dc0a      	bgt.n	8001bc2 <__gedf2+0xaa>
 8001bac:	dbe8      	blt.n	8001b80 <__gedf2+0x68>
 8001bae:	454f      	cmp	r7, r9
 8001bb0:	d8d7      	bhi.n	8001b62 <__gedf2+0x4a>
 8001bb2:	d00e      	beq.n	8001bd2 <__gedf2+0xba>
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	454f      	cmp	r7, r9
 8001bb8:	d2d7      	bcs.n	8001b6a <__gedf2+0x52>
 8001bba:	2900      	cmp	r1, #0
 8001bbc:	d0e2      	beq.n	8001b84 <__gedf2+0x6c>
 8001bbe:	0008      	movs	r0, r1
 8001bc0:	e7d3      	b.n	8001b6a <__gedf2+0x52>
 8001bc2:	4243      	negs	r3, r0
 8001bc4:	4158      	adcs	r0, r3
 8001bc6:	0040      	lsls	r0, r0, #1
 8001bc8:	3801      	subs	r0, #1
 8001bca:	e7ce      	b.n	8001b6a <__gedf2+0x52>
 8001bcc:	2002      	movs	r0, #2
 8001bce:	4240      	negs	r0, r0
 8001bd0:	e7cb      	b.n	8001b6a <__gedf2+0x52>
 8001bd2:	45c4      	cmp	ip, r8
 8001bd4:	d8c5      	bhi.n	8001b62 <__gedf2+0x4a>
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	45c4      	cmp	ip, r8
 8001bda:	d2c6      	bcs.n	8001b6a <__gedf2+0x52>
 8001bdc:	e7ed      	b.n	8001bba <__gedf2+0xa2>
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	000007ff 	.word	0x000007ff

08001be4 <__ledf2>:
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	4647      	mov	r7, r8
 8001be8:	46ce      	mov	lr, r9
 8001bea:	0004      	movs	r4, r0
 8001bec:	0018      	movs	r0, r3
 8001bee:	0016      	movs	r6, r2
 8001bf0:	031b      	lsls	r3, r3, #12
 8001bf2:	0b1b      	lsrs	r3, r3, #12
 8001bf4:	4d2c      	ldr	r5, [pc, #176]	; (8001ca8 <__ledf2+0xc4>)
 8001bf6:	004a      	lsls	r2, r1, #1
 8001bf8:	4699      	mov	r9, r3
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	0043      	lsls	r3, r0, #1
 8001bfe:	030f      	lsls	r7, r1, #12
 8001c00:	46a4      	mov	ip, r4
 8001c02:	46b0      	mov	r8, r6
 8001c04:	0b3f      	lsrs	r7, r7, #12
 8001c06:	0d52      	lsrs	r2, r2, #21
 8001c08:	0fc9      	lsrs	r1, r1, #31
 8001c0a:	0d5b      	lsrs	r3, r3, #21
 8001c0c:	0fc0      	lsrs	r0, r0, #31
 8001c0e:	42aa      	cmp	r2, r5
 8001c10:	d00d      	beq.n	8001c2e <__ledf2+0x4a>
 8001c12:	42ab      	cmp	r3, r5
 8001c14:	d010      	beq.n	8001c38 <__ledf2+0x54>
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	d127      	bne.n	8001c6a <__ledf2+0x86>
 8001c1a:	433c      	orrs	r4, r7
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d111      	bne.n	8001c44 <__ledf2+0x60>
 8001c20:	464d      	mov	r5, r9
 8001c22:	432e      	orrs	r6, r5
 8001c24:	d10e      	bne.n	8001c44 <__ledf2+0x60>
 8001c26:	2000      	movs	r0, #0
 8001c28:	2c00      	cmp	r4, #0
 8001c2a:	d015      	beq.n	8001c58 <__ledf2+0x74>
 8001c2c:	e00e      	b.n	8001c4c <__ledf2+0x68>
 8001c2e:	003d      	movs	r5, r7
 8001c30:	4325      	orrs	r5, r4
 8001c32:	d110      	bne.n	8001c56 <__ledf2+0x72>
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d118      	bne.n	8001c6a <__ledf2+0x86>
 8001c38:	464d      	mov	r5, r9
 8001c3a:	432e      	orrs	r6, r5
 8001c3c:	d10b      	bne.n	8001c56 <__ledf2+0x72>
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	d102      	bne.n	8001c48 <__ledf2+0x64>
 8001c42:	433c      	orrs	r4, r7
 8001c44:	2c00      	cmp	r4, #0
 8001c46:	d00b      	beq.n	8001c60 <__ledf2+0x7c>
 8001c48:	4281      	cmp	r1, r0
 8001c4a:	d014      	beq.n	8001c76 <__ledf2+0x92>
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	3901      	subs	r1, #1
 8001c50:	4008      	ands	r0, r1
 8001c52:	3801      	subs	r0, #1
 8001c54:	e000      	b.n	8001c58 <__ledf2+0x74>
 8001c56:	2002      	movs	r0, #2
 8001c58:	bcc0      	pop	{r6, r7}
 8001c5a:	46b9      	mov	r9, r7
 8001c5c:	46b0      	mov	r8, r6
 8001c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d1f9      	bne.n	8001c58 <__ledf2+0x74>
 8001c64:	2001      	movs	r0, #1
 8001c66:	4240      	negs	r0, r0
 8001c68:	e7f6      	b.n	8001c58 <__ledf2+0x74>
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ec      	bne.n	8001c48 <__ledf2+0x64>
 8001c6e:	464c      	mov	r4, r9
 8001c70:	4326      	orrs	r6, r4
 8001c72:	d1e9      	bne.n	8001c48 <__ledf2+0x64>
 8001c74:	e7ea      	b.n	8001c4c <__ledf2+0x68>
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dd04      	ble.n	8001c84 <__ledf2+0xa0>
 8001c7a:	4243      	negs	r3, r0
 8001c7c:	4158      	adcs	r0, r3
 8001c7e:	0040      	lsls	r0, r0, #1
 8001c80:	3801      	subs	r0, #1
 8001c82:	e7e9      	b.n	8001c58 <__ledf2+0x74>
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dbeb      	blt.n	8001c60 <__ledf2+0x7c>
 8001c88:	454f      	cmp	r7, r9
 8001c8a:	d8df      	bhi.n	8001c4c <__ledf2+0x68>
 8001c8c:	d006      	beq.n	8001c9c <__ledf2+0xb8>
 8001c8e:	2000      	movs	r0, #0
 8001c90:	454f      	cmp	r7, r9
 8001c92:	d2e1      	bcs.n	8001c58 <__ledf2+0x74>
 8001c94:	2900      	cmp	r1, #0
 8001c96:	d0e5      	beq.n	8001c64 <__ledf2+0x80>
 8001c98:	0008      	movs	r0, r1
 8001c9a:	e7dd      	b.n	8001c58 <__ledf2+0x74>
 8001c9c:	45c4      	cmp	ip, r8
 8001c9e:	d8d5      	bhi.n	8001c4c <__ledf2+0x68>
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	45c4      	cmp	ip, r8
 8001ca4:	d2d8      	bcs.n	8001c58 <__ledf2+0x74>
 8001ca6:	e7f5      	b.n	8001c94 <__ledf2+0xb0>
 8001ca8:	000007ff 	.word	0x000007ff

08001cac <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8001cac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8001cae:	f000 fdd5 	bl	800285c <SystemApp_Init>
  SubghzApp_Init();
 8001cb2:	f000 f9d9 	bl	8002068 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8001cb6:	bd10      	pop	{r4, pc}

08001cb8 <MX_SubGHz_Phy_Process>:
void MX_SubGHz_Phy_Process(void)
{
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001cb8:	2001      	movs	r0, #1
{
 8001cba:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001cbc:	4240      	negs	r0, r0
 8001cbe:	f005 fadb 	bl	8007278 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8001cc2:	bd10      	pop	{r4, pc}

08001cc4 <OnledEvent>:

  /* USER CODE END OnRxError_2 */
}

static void OnledEvent(void *context)
{
 8001cc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnledEvent_1 */

  /* USER CODE END OnledEvent_1 */
  LED_Toggle(LED_GREEN);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f001 f8bc 	bl	8002e44 <BSP_LED_Toggle>
  LED_Toggle(LED_RED1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f001 f8b9 	bl	8002e44 <BSP_LED_Toggle>

  UTIL_TIMER_Start(&timerLed);
 8001cd2:	4802      	ldr	r0, [pc, #8]	; (8001cdc <OnledEvent+0x18>)
 8001cd4:	f005 fc32 	bl	800753c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnledEvent_2 */

  /* USER CODE END OnledEvent_2 */
}
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	20000060 	.word	0x20000060

08001ce0 <PingPong_Process>:
{
 8001ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (State)
 8001ce2:	4c89      	ldr	r4, [pc, #548]	; (8001f08 <PingPong_Process+0x228>)
 8001ce4:	7e20      	ldrb	r0, [r4, #24]
 8001ce6:	3801      	subs	r0, #1
 8001ce8:	2804      	cmp	r0, #4
 8001cea:	d869      	bhi.n	8001dc0 <PingPong_Process+0xe0>
 8001cec:	f7fe fa32 	bl	8000154 <__gnu_thumb1_case_uhi>
 8001cf0:	00d10005 	.word	0x00d10005
 8001cf4:	00c500d1 	.word	0x00c500d1
 8001cf8:	0105      	.short	0x0105
      if (isMaster == true)
 8001cfa:	4a84      	ldr	r2, [pc, #528]	; (8001f0c <PingPong_Process+0x22c>)
        if (BufferSize > 0)
 8001cfc:	4b83      	ldr	r3, [pc, #524]	; (8001f0c <PingPong_Process+0x22c>)
      if (isMaster == true)
 8001cfe:	7897      	ldrb	r7, [r2, #2]
        if (BufferSize > 0)
 8001d00:	881b      	ldrh	r3, [r3, #0]
      if (isMaster == true)
 8001d02:	2f00      	cmp	r7, #0
 8001d04:	d061      	beq.n	8001dca <PingPong_Process+0xea>
        if (BufferSize > 0)
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d058      	beq.n	8001dbc <PingPong_Process+0xdc>
          if (strncmp((const char *)Buffer, (const char *)PongMsg, 4) == 0)
 8001d0a:	0025      	movs	r5, r4
 8001d0c:	3519      	adds	r5, #25
 8001d0e:	2204      	movs	r2, #4
 8001d10:	0028      	movs	r0, r5
 8001d12:	497f      	ldr	r1, [pc, #508]	; (8001f10 <PingPong_Process+0x230>)
 8001d14:	f005 fe15 	bl	8007942 <strncmp>
            Radio.SetChannel(RF_FREQUENCY);
 8001d18:	4f7e      	ldr	r7, [pc, #504]	; (8001f14 <PingPong_Process+0x234>)
          if (strncmp((const char *)Buffer, (const char *)PongMsg, 4) == 0)
 8001d1a:	1e06      	subs	r6, r0, #0
            Radio.SetChannel(RF_FREQUENCY);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	9300      	str	r3, [sp, #0]
          if (strncmp((const char *)Buffer, (const char *)PongMsg, 4) == 0)
 8001d20:	d136      	bne.n	8001d90 <PingPong_Process+0xb0>
            UTIL_TIMER_Stop(&timerLed);
 8001d22:	0020      	movs	r0, r4
 8001d24:	f005 fbb6 	bl	8007494 <UTIL_TIMER_Stop>
            LED_Off(LED_GREEN);
 8001d28:	0030      	movs	r0, r6
 8001d2a:	f001 f87b 	bl	8002e24 <BSP_LED_Off>
            LED_Toggle(LED_RED1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f001 f888 	bl	8002e44 <BSP_LED_Toggle>
            Buffer[0] = 'P';
 8001d34:	2350      	movs	r3, #80	; 0x50
 8001d36:	7663      	strb	r3, [r4, #25]
            Buffer[1] = 'I';
 8001d38:	3b07      	subs	r3, #7
 8001d3a:	706b      	strb	r3, [r5, #1]
            Buffer[2] = 'N';
 8001d3c:	3305      	adds	r3, #5
 8001d3e:	70ab      	strb	r3, [r5, #2]
            Buffer[3] = 'G';
 8001d40:	3b07      	subs	r3, #7
 8001d42:	70eb      	strb	r3, [r5, #3]
            for (i = 4; i < BufferSize; i++)
 8001d44:	4b71      	ldr	r3, [pc, #452]	; (8001f0c <PingPong_Process+0x22c>)
 8001d46:	881a      	ldrh	r2, [r3, #0]
 8001d48:	2304      	movs	r3, #4
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d31b      	bcc.n	8001d86 <PingPong_Process+0xa6>
            APP_LOG(TS_ON, VLEVEL_L, "...PING\n\r");
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2100      	movs	r1, #0
 8001d52:	0010      	movs	r0, r2
 8001d54:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <PingPong_Process+0x238>)
 8001d56:	f005 f939 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	0010      	movs	r0, r2
 8001d60:	4b6e      	ldr	r3, [pc, #440]	; (8001f1c <PingPong_Process+0x23c>)
 8001d62:	f005 f933 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001d66:	9b00      	ldr	r3, [sp, #0]
 8001d68:	486d      	ldr	r0, [pc, #436]	; (8001f20 <PingPong_Process+0x240>)
 8001d6a:	4798      	blx	r3
            HAL_Delay(Sx_Board_GetWakeUpTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001d6c:	f001 f878 	bl	8002e60 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8001d70:	3032      	adds	r0, #50	; 0x32
 8001d72:	f000 fdfb 	bl	800296c <HAL_Delay>
            Radio.Send(Buffer, BufferSize);
 8001d76:	0020      	movs	r0, r4
 8001d78:	4b64      	ldr	r3, [pc, #400]	; (8001f0c <PingPong_Process+0x22c>)
 8001d7a:	3019      	adds	r0, #25
 8001d7c:	7819      	ldrb	r1, [r3, #0]
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
        Radio.Send(Buffer, BufferSize);
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4798      	blx	r3
 8001d84:	e01a      	b.n	8001dbc <PingPong_Process+0xdc>
              Buffer[i] = i - 4;
 8001d86:	1f19      	subs	r1, r3, #4
 8001d88:	54e9      	strb	r1, [r5, r3]
            for (i = 4; i < BufferSize; i++)
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e7dc      	b.n	8001d4a <PingPong_Process+0x6a>
          else if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8001d90:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <PingPong_Process+0x230>)
 8001d92:	0028      	movs	r0, r5
 8001d94:	1d59      	adds	r1, r3, #5
 8001d96:	2204      	movs	r2, #4
 8001d98:	f005 fdd3 	bl	8007942 <strncmp>
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001d9c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
          else if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8001d9e:	1e01      	subs	r1, r0, #0
 8001da0:	d10f      	bne.n	8001dc2 <PingPong_Process+0xe2>
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001da2:	2201      	movs	r2, #1
            isMaster = false;
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <PingPong_Process+0x22c>)
 8001da6:	7098      	strb	r0, [r3, #2]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001da8:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <PingPong_Process+0x244>)
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001daa:	0010      	movs	r0, r2
 8001dac:	f005 f90e 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001db0:	485b      	ldr	r0, [pc, #364]	; (8001f20 <PingPong_Process+0x240>)
 8001db2:	9b00      	ldr	r3, [sp, #0]
 8001db4:	4798      	blx	r3
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001db6:	20fa      	movs	r0, #250	; 0xfa
 8001db8:	00c0      	lsls	r0, r0, #3
 8001dba:	47a8      	blx	r5
      State = LOWPOWER;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	7623      	strb	r3, [r4, #24]
}
 8001dc0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <PingPong_Process+0x248>)
 8001dc8:	e7ef      	b.n	8001daa <PingPong_Process+0xca>
        if (BufferSize > 0)
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f6      	beq.n	8001dbc <PingPong_Process+0xdc>
          if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8001dce:	0025      	movs	r5, r4
 8001dd0:	494f      	ldr	r1, [pc, #316]	; (8001f10 <PingPong_Process+0x230>)
 8001dd2:	3519      	adds	r5, #25
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	0028      	movs	r0, r5
 8001dd8:	3105      	adds	r1, #5
 8001dda:	f005 fdb2 	bl	8007942 <strncmp>
            Radio.SetChannel(RF_FREQUENCY);
 8001dde:	4e4d      	ldr	r6, [pc, #308]	; (8001f14 <PingPong_Process+0x234>)
          if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8001de0:	9001      	str	r0, [sp, #4]
            Radio.SetChannel(RF_FREQUENCY);
 8001de2:	68f3      	ldr	r3, [r6, #12]
 8001de4:	9300      	str	r3, [sp, #0]
          if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d136      	bne.n	8001e58 <PingPong_Process+0x178>
            UTIL_TIMER_Stop(&timerLed);
 8001dea:	0020      	movs	r0, r4
 8001dec:	f005 fb52 	bl	8007494 <UTIL_TIMER_Stop>
            LED_Off(LED_RED1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f001 f817 	bl	8002e24 <BSP_LED_Off>
            LED_Toggle(LED_GREEN);
 8001df6:	9801      	ldr	r0, [sp, #4]
 8001df8:	f001 f824 	bl	8002e44 <BSP_LED_Toggle>
            Buffer[0] = 'P';
 8001dfc:	2350      	movs	r3, #80	; 0x50
 8001dfe:	7663      	strb	r3, [r4, #25]
            Buffer[1] = 'O';
 8001e00:	3b01      	subs	r3, #1
 8001e02:	706b      	strb	r3, [r5, #1]
            Buffer[2] = 'N';
 8001e04:	3b01      	subs	r3, #1
 8001e06:	70ab      	strb	r3, [r5, #2]
            Buffer[3] = 'G';
 8001e08:	3b07      	subs	r3, #7
 8001e0a:	70eb      	strb	r3, [r5, #3]
            for (i = 4; i < BufferSize; i++)
 8001e0c:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <PingPong_Process+0x22c>)
 8001e0e:	881a      	ldrh	r2, [r3, #0]
 8001e10:	2304      	movs	r3, #4
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d31b      	bcc.n	8001e4e <PingPong_Process+0x16e>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 8001e16:	2201      	movs	r2, #1
 8001e18:	2100      	movs	r1, #0
 8001e1a:	0010      	movs	r0, r2
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <PingPong_Process+0x24c>)
 8001e1e:	f005 f8d5 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001e22:	9b00      	ldr	r3, [sp, #0]
 8001e24:	483e      	ldr	r0, [pc, #248]	; (8001f20 <PingPong_Process+0x240>)
 8001e26:	4798      	blx	r3
            HAL_Delay(Sx_Board_GetWakeUpTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001e28:	f001 f81a 	bl	8002e60 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8001e2c:	3032      	adds	r0, #50	; 0x32
 8001e2e:	f000 fd9d 	bl	800296c <HAL_Delay>
            Radio.Send(Buffer, BufferSize);
 8001e32:	0020      	movs	r0, r4
 8001e34:	4b35      	ldr	r3, [pc, #212]	; (8001f0c <PingPong_Process+0x22c>)
 8001e36:	3019      	adds	r0, #25
 8001e38:	7819      	ldrb	r1, [r3, #0]
 8001e3a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "...PONG\n\r");
 8001e40:	2201      	movs	r2, #1
 8001e42:	2100      	movs	r1, #0
 8001e44:	0010      	movs	r0, r2
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <PingPong_Process+0x250>)
 8001e48:	f005 f8c0 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
 8001e4c:	e7b6      	b.n	8001dbc <PingPong_Process+0xdc>
              Buffer[i] = i - 4;
 8001e4e:	1f19      	subs	r1, r3, #4
 8001e50:	54e9      	strb	r1, [r5, r3]
            for (i = 4; i < BufferSize; i++)
 8001e52:	3301      	adds	r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e7dc      	b.n	8001e12 <PingPong_Process+0x132>
            isMaster = true;
 8001e58:	2001      	movs	r0, #1
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <PingPong_Process+0x22c>)
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	0039      	movs	r1, r7
            isMaster = true;
 8001e60:	7098      	strb	r0, [r3, #2]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <PingPong_Process+0x248>)
 8001e64:	f005 f8b2 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001e68:	9b00      	ldr	r3, [sp, #0]
 8001e6a:	482d      	ldr	r0, [pc, #180]	; (8001f20 <PingPong_Process+0x240>)
 8001e6c:	4798      	blx	r3
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001e6e:	6b73      	ldr	r3, [r6, #52]	; 0x34
      Radio.Rx(RX_TIMEOUT_VALUE);
 8001e70:	20fa      	movs	r0, #250	; 0xfa
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	00c0      	lsls	r0, r0, #3
 8001e76:	4798      	blx	r3
 8001e78:	e7a0      	b.n	8001dbc <PingPong_Process+0xdc>
      Radio.SetChannel(RF_FREQUENCY);
 8001e7a:	4d26      	ldr	r5, [pc, #152]	; (8001f14 <PingPong_Process+0x234>)
 8001e7c:	4828      	ldr	r0, [pc, #160]	; (8001f20 <PingPong_Process+0x240>)
 8001e7e:	68eb      	ldr	r3, [r5, #12]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	4798      	blx	r3
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <PingPong_Process+0x254>)
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001e86:	2201      	movs	r2, #1
 8001e88:	2100      	movs	r1, #0
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	f005 f89e 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
 8001e90:	e031      	b.n	8001ef6 <PingPong_Process+0x216>
      if (isMaster == true)
 8001e92:	4e1e      	ldr	r6, [pc, #120]	; (8001f0c <PingPong_Process+0x22c>)
            Radio.SetChannel(RF_FREQUENCY);
 8001e94:	4d1f      	ldr	r5, [pc, #124]	; (8001f14 <PingPong_Process+0x234>)
      if (isMaster == true)
 8001e96:	78b1      	ldrb	r1, [r6, #2]
            Radio.SetChannel(RF_FREQUENCY);
 8001e98:	68ef      	ldr	r7, [r5, #12]
      if (isMaster == true)
 8001e9a:	2900      	cmp	r1, #0
 8001e9c:	d024      	beq.n	8001ee8 <PingPong_Process+0x208>
        Buffer[0] = 'P';
 8001e9e:	0022      	movs	r2, r4
 8001ea0:	2350      	movs	r3, #80	; 0x50
 8001ea2:	3219      	adds	r2, #25
 8001ea4:	7663      	strb	r3, [r4, #25]
        Buffer[1] = 'I';
 8001ea6:	3b07      	subs	r3, #7
 8001ea8:	7053      	strb	r3, [r2, #1]
        Buffer[2] = 'N';
 8001eaa:	3305      	adds	r3, #5
 8001eac:	7093      	strb	r3, [r2, #2]
        for (i = 4; i < BufferSize; i++)
 8001eae:	8831      	ldrh	r1, [r6, #0]
        Buffer[3] = 'G';
 8001eb0:	3b07      	subs	r3, #7
 8001eb2:	70d3      	strb	r3, [r2, #3]
        for (i = 4; i < BufferSize; i++)
 8001eb4:	3b43      	subs	r3, #67	; 0x43
 8001eb6:	428b      	cmp	r3, r1
 8001eb8:	d311      	bcc.n	8001ede <PingPong_Process+0x1fe>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <PingPong_Process+0x23c>)
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	f005 f883 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
        Radio.SetChannel(RF_FREQUENCY);
 8001ec6:	4816      	ldr	r0, [pc, #88]	; (8001f20 <PingPong_Process+0x240>)
 8001ec8:	47b8      	blx	r7
        HAL_Delay(Sx_Board_GetWakeUpTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001eca:	f000 ffc9 	bl	8002e60 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8001ece:	3032      	adds	r0, #50	; 0x32
 8001ed0:	f000 fd4c 	bl	800296c <HAL_Delay>
        Radio.Send(Buffer, BufferSize);
 8001ed4:	0020      	movs	r0, r4
 8001ed6:	7831      	ldrb	r1, [r6, #0]
 8001ed8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001eda:	3019      	adds	r0, #25
 8001edc:	e750      	b.n	8001d80 <PingPong_Process+0xa0>
          Buffer[i] = i - 4;
 8001ede:	1f18      	subs	r0, r3, #4
 8001ee0:	54d0      	strb	r0, [r2, r3]
        for (i = 4; i < BufferSize; i++)
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e7e6      	b.n	8001eb6 <PingPong_Process+0x1d6>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <PingPong_Process+0x244>)
 8001eec:	0010      	movs	r0, r2
 8001eee:	f005 f86d 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
        Radio.SetChannel(RF_FREQUENCY);
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <PingPong_Process+0x240>)
 8001ef4:	47b8      	blx	r7
      Radio.Rx(RX_TIMEOUT_VALUE);
 8001ef6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ef8:	e7ba      	b.n	8001e70 <PingPong_Process+0x190>
      Radio.SetChannel(RF_FREQUENCY);
 8001efa:	4d06      	ldr	r5, [pc, #24]	; (8001f14 <PingPong_Process+0x234>)
 8001efc:	4808      	ldr	r0, [pc, #32]	; (8001f20 <PingPong_Process+0x240>)
 8001efe:	68eb      	ldr	r3, [r5, #12]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4798      	blx	r3
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <PingPong_Process+0x244>)
 8001f06:	e7be      	b.n	8001e86 <PingPong_Process+0x1a6>
 8001f08:	20000060 	.word	0x20000060
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	08007980 	.word	0x08007980
 8001f14:	08007b80 	.word	0x08007b80
 8001f18:	08007c7c 	.word	0x08007c7c
 8001f1c:	08007c86 	.word	0x08007c86
 8001f20:	337f9800 	.word	0x337f9800
 8001f24:	08007c98 	.word	0x08007c98
 8001f28:	08007ca9 	.word	0x08007ca9
 8001f2c:	08007cbb 	.word	0x08007cbb
 8001f30:	08007ccd 	.word	0x08007ccd
 8001f34:	08007c9e 	.word	0x08007c9e

08001f38 <OnRxError>:
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 8001f38:	2201      	movs	r2, #1
{
 8001f3a:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	0010      	movs	r0, r2
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <OnRxError+0x24>)
 8001f42:	f005 f843 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <OnRxError+0x28>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	4798      	blx	r3
  State = RX_ERROR;
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <OnRxError+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f50:	2100      	movs	r1, #0
 8001f52:	2001      	movs	r0, #1
  State = RX_ERROR;
 8001f54:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f56:	f005 f961 	bl	800721c <UTIL_SEQ_SetTask>
}
 8001f5a:	bd10      	pop	{r4, pc}
 8001f5c:	08007cd7 	.word	0x08007cd7
 8001f60:	08007b80 	.word	0x08007b80
 8001f64:	20000060 	.word	0x20000060

08001f68 <OnRxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
 8001f68:	2201      	movs	r2, #1
{
 8001f6a:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	0010      	movs	r0, r2
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <OnRxTimeout+0x24>)
 8001f72:	f005 f82b 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <OnRxTimeout+0x28>)
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	4798      	blx	r3
  State = RX_TIMEOUT;
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <OnRxTimeout+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f80:	2100      	movs	r1, #0
 8001f82:	2001      	movs	r0, #1
  State = RX_TIMEOUT;
 8001f84:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f86:	f005 f949 	bl	800721c <UTIL_SEQ_SetTask>
}
 8001f8a:	bd10      	pop	{r4, pc}
 8001f8c:	08007ce3 	.word	0x08007ce3
 8001f90:	08007b80 	.word	0x08007b80
 8001f94:	20000060 	.word	0x20000060

08001f98 <OnTxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8001f98:	2201      	movs	r2, #1
{
 8001f9a:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	0010      	movs	r0, r2
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <OnTxTimeout+0x24>)
 8001fa2:	f005 f813 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <OnTxTimeout+0x28>)
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	4798      	blx	r3
  State = TX_TIMEOUT;
 8001fac:	2205      	movs	r2, #5
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <OnTxTimeout+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2001      	movs	r0, #1
  State = TX_TIMEOUT;
 8001fb4:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fb6:	f005 f931 	bl	800721c <UTIL_SEQ_SetTask>
}
 8001fba:	bd10      	pop	{r4, pc}
 8001fbc:	08007cf1 	.word	0x08007cf1
 8001fc0:	08007b80 	.word	0x08007b80
 8001fc4:	20000060 	.word	0x20000060

08001fc8 <OnTxDone>:
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8001fc8:	2201      	movs	r2, #1
{
 8001fca:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8001fcc:	2100      	movs	r1, #0
 8001fce:	0010      	movs	r0, r2
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <OnTxDone+0x24>)
 8001fd2:	f004 fffb 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <OnTxDone+0x28>)
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	4798      	blx	r3
  State = TX;
 8001fdc:	2204      	movs	r2, #4
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <OnTxDone+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2001      	movs	r0, #1
  State = TX;
 8001fe4:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fe6:	f005 f919 	bl	800721c <UTIL_SEQ_SetTask>
}
 8001fea:	bd10      	pop	{r4, pc}
 8001fec:	08007cff 	.word	0x08007cff
 8001ff0:	08007b80 	.word	0x08007b80
 8001ff4:	20000060 	.word	0x20000060

08001ff8 <OnRxDone>:
{
 8001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffa:	0015      	movs	r5, r2
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 8001ffc:	2201      	movs	r2, #1
{
 8001ffe:	b085      	sub	sp, #20
 8002000:	000e      	movs	r6, r1
 8002002:	001f      	movs	r7, r3
 8002004:	9003      	str	r0, [sp, #12]
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 8002006:	2100      	movs	r1, #0
 8002008:	0010      	movs	r0, r2
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <OnRxDone+0x5c>)
 800200c:	f004 ffde 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_L,  "RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);
 8002010:	2201      	movs	r2, #1
 8002012:	2100      	movs	r1, #0
 8002014:	0010      	movs	r0, r2
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <OnRxDone+0x60>)
 8002018:	9701      	str	r7, [sp, #4]
 800201a:	9500      	str	r5, [sp, #0]
 800201c:	f004 ffd6 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <OnRxDone+0x64>)
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	4798      	blx	r3
  memcpy(Buffer, payload, BufferSize);
 8002026:	4c0e      	ldr	r4, [pc, #56]	; (8002060 <OnRxDone+0x68>)
  BufferSize = size;
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <OnRxDone+0x6c>)
  memcpy(Buffer, payload, BufferSize);
 800202a:	0020      	movs	r0, r4
 800202c:	0032      	movs	r2, r6
 800202e:	9903      	ldr	r1, [sp, #12]
 8002030:	3019      	adds	r0, #25
  BufferSize = size;
 8002032:	801e      	strh	r6, [r3, #0]
  memcpy(Buffer, payload, BufferSize);
 8002034:	f005 fc74 	bl	8007920 <memcpy>
  RssiValue = rssi;
 8002038:	0023      	movs	r3, r4
 800203a:	3359      	adds	r3, #89	; 0x59
 800203c:	701d      	strb	r5, [r3, #0]
  SnrValue = snr;
 800203e:	0023      	movs	r3, r4
  State = RX;
 8002040:	2001      	movs	r0, #1
  SnrValue = snr;
 8002042:	335a      	adds	r3, #90	; 0x5a
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8002044:	2100      	movs	r1, #0
  SnrValue = snr;
 8002046:	701f      	strb	r7, [r3, #0]
  State = RX;
 8002048:	7620      	strb	r0, [r4, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800204a:	f005 f8e7 	bl	800721c <UTIL_SEQ_SetTask>
}
 800204e:	b005      	add	sp, #20
 8002050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	08007d0a 	.word	0x08007d0a
 8002058:	08007d15 	.word	0x08007d15
 800205c:	08007b80 	.word	0x08007b80
 8002060:	20000060 	.word	0x20000060
 8002064:	20000000 	.word	0x20000000

08002068 <SubghzApp_Init>:
{
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n", (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
 800206a:	2400      	movs	r4, #0
 800206c:	2501      	movs	r5, #1
{
 800206e:	b08b      	sub	sp, #44	; 0x2c
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n", (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
 8002070:	0022      	movs	r2, r4
 8002072:	0021      	movs	r1, r4
 8002074:	4b30      	ldr	r3, [pc, #192]	; (8002138 <SubghzApp_Init+0xd0>)
 8002076:	9402      	str	r4, [sp, #8]
 8002078:	9401      	str	r4, [sp, #4]
 800207a:	9500      	str	r5, [sp, #0]
 800207c:	2002      	movs	r0, #2
 800207e:	f004 ffa5 	bl	8006fcc <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&timerLed, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 8002082:	4e2e      	ldr	r6, [pc, #184]	; (800213c <SubghzApp_Init+0xd4>)
 8002084:	0022      	movs	r2, r4
 8002086:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <SubghzApp_Init+0xd8>)
 8002088:	4269      	negs	r1, r5
 800208a:	0030      	movs	r0, r6
 800208c:	9400      	str	r4, [sp, #0]
 800208e:	f005 f9a1 	bl	80073d4 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLed, LED_PERIOD_MS);
 8002092:	21c8      	movs	r1, #200	; 0xc8
 8002094:	0030      	movs	r0, r6
 8002096:	f005 fa93 	bl	80075c0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&timerLed);
 800209a:	0030      	movs	r0, r6
 800209c:	f005 fa4e 	bl	800753c <UTIL_TIMER_Start>
  Radio.Init(&RadioEvents);
 80020a0:	0030      	movs	r0, r6
  RadioEvents.TxDone = OnTxDone;
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <SubghzApp_Init+0xdc>)
  Radio.Init(&RadioEvents);
 80020a4:	305c      	adds	r0, #92	; 0x5c
  RadioEvents.TxDone = OnTxDone;
 80020a6:	65f3      	str	r3, [r6, #92]	; 0x5c
  RadioEvents.RxDone = OnRxDone;
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <SubghzApp_Init+0xe0>)
 80020aa:	6673      	str	r3, [r6, #100]	; 0x64
  RadioEvents.TxTimeout = OnTxTimeout;
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <SubghzApp_Init+0xe4>)
 80020ae:	6633      	str	r3, [r6, #96]	; 0x60
  RadioEvents.RxTimeout = OnRxTimeout;
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <SubghzApp_Init+0xe8>)
 80020b2:	66b3      	str	r3, [r6, #104]	; 0x68
  RadioEvents.RxError = OnRxError;
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <SubghzApp_Init+0xec>)
 80020b6:	66f3      	str	r3, [r6, #108]	; 0x6c
  Radio.Init(&RadioEvents);
 80020b8:	4e27      	ldr	r6, [pc, #156]	; (8002158 <SubghzApp_Init+0xf0>)
 80020ba:	6833      	ldr	r3, [r6, #0]
 80020bc:	4798      	blx	r3
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <SubghzApp_Init+0xf4>)
 80020c0:	0022      	movs	r2, r4
 80020c2:	9308      	str	r3, [sp, #32]
 80020c4:	2308      	movs	r3, #8
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	0028      	movs	r0, r5
 80020cc:	69f7      	ldr	r7, [r6, #28]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	210e      	movs	r1, #14
 80020d2:	0023      	movs	r3, r4
 80020d4:	9407      	str	r4, [sp, #28]
 80020d6:	9406      	str	r4, [sp, #24]
 80020d8:	9405      	str	r4, [sp, #20]
 80020da:	9504      	str	r5, [sp, #16]
 80020dc:	9403      	str	r4, [sp, #12]
 80020de:	9501      	str	r5, [sp, #4]
 80020e0:	47b8      	blx	r7
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80020e2:	2305      	movs	r3, #5
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	3303      	adds	r3, #3
 80020e8:	2207      	movs	r2, #7
 80020ea:	0021      	movs	r1, r4
 80020ec:	0028      	movs	r0, r5
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	69b7      	ldr	r7, [r6, #24]
 80020f2:	002b      	movs	r3, r5
 80020f4:	9509      	str	r5, [sp, #36]	; 0x24
 80020f6:	9408      	str	r4, [sp, #32]
 80020f8:	9407      	str	r4, [sp, #28]
 80020fa:	9406      	str	r4, [sp, #24]
 80020fc:	9505      	str	r5, [sp, #20]
 80020fe:	9404      	str	r4, [sp, #16]
 8002100:	9403      	str	r4, [sp, #12]
 8002102:	9400      	str	r4, [sp, #0]
 8002104:	47b8      	blx	r7
  Radio.SetMaxPayloadLength(MODEM_LORA, BUFFER_SIZE);
 8002106:	2140      	movs	r1, #64	; 0x40
 8002108:	0028      	movs	r0, r5
 800210a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800210c:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 800210e:	68f3      	ldr	r3, [r6, #12]
 8002110:	4813      	ldr	r0, [pc, #76]	; (8002160 <SubghzApp_Init+0xf8>)
 8002112:	4798      	blx	r3
  LED_Init(LED_GREEN);
 8002114:	0020      	movs	r0, r4
 8002116:	f000 fe43 	bl	8002da0 <BSP_LED_Init>
  LED_Init(LED_RED1);
 800211a:	0028      	movs	r0, r5
 800211c:	f000 fe40 	bl	8002da0 <BSP_LED_Init>
  Radio.Rx(RX_TIMEOUT_VALUE);
 8002120:	20fa      	movs	r0, #250	; 0xfa
 8002122:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002124:	00c0      	lsls	r0, r0, #3
 8002126:	4798      	blx	r3
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_PingPong_Process), UTIL_SEQ_RFU, PingPong_Process);
 8002128:	0021      	movs	r1, r4
 800212a:	0028      	movs	r0, r5
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <SubghzApp_Init+0xfc>)
 800212e:	f005 f909 	bl	8007344 <UTIL_SEQ_RegTask>
}
 8002132:	b00b      	add	sp, #44	; 0x2c
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	08007d35 	.word	0x08007d35
 800213c:	20000060 	.word	0x20000060
 8002140:	08001cc5 	.word	0x08001cc5
 8002144:	08001fc9 	.word	0x08001fc9
 8002148:	08001ff9 	.word	0x08001ff9
 800214c:	08001f99 	.word	0x08001f99
 8002150:	08001f69 	.word	0x08001f69
 8002154:	08001f39 	.word	0x08001f39
 8002158:	08007b80 	.word	0x08007b80
 800215c:	00000bb8 	.word	0x00000bb8
 8002160:	337f9800 	.word	0x337f9800
 8002164:	08001ce1 	.word	0x08001ce1

08002168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002168:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 800216a:	2001      	movs	r0, #1
 800216c:	4a08      	ldr	r2, [pc, #32]	; (8002190 <MX_DMA_Init+0x28>)
 800216e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002170:	4301      	orrs	r1, r0
 8002172:	6311      	str	r1, [r2, #48]	; 0x30
 8002174:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002178:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800217a:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800217c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800217e:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002180:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002182:	f001 f8c3 	bl	800330c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002186:	200b      	movs	r0, #11
 8002188:	f001 f8ea 	bl	8003360 <HAL_NVIC_EnableIRQ>

}
 800218c:	bd07      	pop	{r0, r1, r2, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	40021000 	.word	0x40021000

08002194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002194:	b510      	push	{r4, lr}
 8002196:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002198:	222c      	movs	r2, #44	; 0x2c
 800219a:	2100      	movs	r1, #0
 800219c:	a807      	add	r0, sp, #28
 800219e:	f005 fbc8 	bl	8007932 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a2:	2214      	movs	r2, #20
 80021a4:	2100      	movs	r1, #0
 80021a6:	a801      	add	r0, sp, #4
 80021a8:	f005 fbc3 	bl	8007932 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80021ac:	2302      	movs	r3, #2
 80021ae:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80021b0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	031b      	lsls	r3, r3, #12
 80021b6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80021b8:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80021ba:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021bc:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80021be:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80021c2:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c4:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80021c6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c8:	f001 fc7c 	bl	8003ac4 <HAL_RCC_OscConfig>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d000      	beq.n	80021d2 <SystemClock_Config+0x3e>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <SystemClock_Config+0x3c>
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	4a10      	ldr	r2, [pc, #64]	; (8002218 <SystemClock_Config+0x84>)
 80021d6:	055b      	lsls	r3, r3, #21
 80021d8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80021da:	430b      	orrs	r3, r1
 80021dc:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021de:	4a0f      	ldr	r2, [pc, #60]	; (800221c <SystemClock_Config+0x88>)
 80021e0:	490f      	ldr	r1, [pc, #60]	; (8002220 <SystemClock_Config+0x8c>)
 80021e2:	6813      	ldr	r3, [r2, #0]
 80021e4:	4019      	ands	r1, r3
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	430b      	orrs	r3, r1
 80021ec:	6013      	str	r3, [r2, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80021ee:	6851      	ldr	r1, [r2, #4]
 80021f0:	000b      	movs	r3, r1
 80021f2:	4023      	ands	r3, r4
 80021f4:	4221      	tst	r1, r4
 80021f6:	d1fa      	bne.n	80021ee <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021f8:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021fa:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021fc:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021fe:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002200:	3a0c      	subs	r2, #12
 8002202:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002204:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002206:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002208:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800220a:	f001 fee5 	bl	8003fd8 <HAL_RCC_ClockConfig>
 800220e:	2800      	cmp	r0, #0
 8002210:	d000      	beq.n	8002214 <SystemClock_Config+0x80>
  while (1)
 8002212:	e7fe      	b.n	8002212 <SystemClock_Config+0x7e>
}
 8002214:	b014      	add	sp, #80	; 0x50
 8002216:	bd10      	pop	{r4, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	40007000 	.word	0x40007000
 8002220:	ffffe7ff 	.word	0xffffe7ff

08002224 <main>:
{
 8002224:	b510      	push	{r4, lr}
  HAL_Init();
 8002226:	f001 f839 	bl	800329c <HAL_Init>
  SystemClock_Config();
 800222a:	f7ff ffb3 	bl	8002194 <SystemClock_Config>
  MX_SubGHz_Phy_Init();
 800222e:	f7ff fd3d 	bl	8001cac <MX_SubGHz_Phy_Init>
    MX_SubGHz_Phy_Process();
 8002232:	f7ff fd41 	bl	8001cb8 <MX_SubGHz_Phy_Process>
  while (1)
 8002236:	e7fc      	b.n	8002232 <main+0xe>

08002238 <Error_Handler>:
  while (1)
 8002238:	e7fe      	b.n	8002238 <Error_Handler>
	...

0800223c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800223c:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 800223e:	2500      	movs	r5, #0
{
 8002240:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 8002242:	2214      	movs	r2, #20
 8002244:	2100      	movs	r1, #0
 8002246:	a801      	add	r0, sp, #4
 8002248:	f005 fb73 	bl	8007932 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 800224c:	2228      	movs	r2, #40	; 0x28
 800224e:	0029      	movs	r1, r5
 8002250:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 8002252:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002254:	f005 fb6d 	bl	8007932 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002258:	4c26      	ldr	r4, [pc, #152]	; (80022f4 <MX_RTC_Init+0xb8>)
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <MX_RTC_Init+0xbc>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800225c:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 800225e:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002260:	231f      	movs	r3, #31
 8002262:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <MX_RTC_Init+0xc0>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002266:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8002268:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800226a:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800226c:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800226e:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002270:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002272:	f002 f945 	bl	8004500 <HAL_RTC_Init>
 8002276:	42a8      	cmp	r0, r5
 8002278:	d001      	beq.n	800227e <MX_RTC_Init+0x42>
  {
    Error_Handler();
 800227a:	f7ff ffdd 	bl	8002238 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800227e:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002280:	2200      	movs	r2, #0
 8002282:	0020      	movs	r0, r4
  sTime.Hours = 0;
 8002284:	809d      	strh	r5, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002286:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 8002288:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800228a:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800228c:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800228e:	f002 f99f 	bl	80045d0 <HAL_RTC_SetTime>
 8002292:	2800      	cmp	r0, #0
 8002294:	d001      	beq.n	800229a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002296:	f7ff ffcf 	bl	8002238 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800229a:	466a      	mov	r2, sp
 800229c:	2301      	movs	r3, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;
 800229e:	2500      	movs	r5, #0
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022a0:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80022a2:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 80022a4:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 80022a6:	70d5      	strb	r5, [r2, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80022a8:	4669      	mov	r1, sp
 80022aa:	002a      	movs	r2, r5
 80022ac:	0020      	movs	r0, r4
 80022ae:	f002 fa13 	bl	80046d8 <HAL_RTC_SetDate>
 80022b2:	42a8      	cmp	r0, r5
 80022b4:	d001      	beq.n	80022ba <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80022b6:	f7ff ffbf 	bl	8002238 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80022ba:	466b      	mov	r3, sp
 80022bc:	831d      	strh	r5, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 80022be:	769d      	strb	r5, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 80022c0:	23a0      	movs	r3, #160	; 0xa0
 80022c2:	051b      	lsls	r3, r3, #20
 80022c4:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 80022c6:	2319      	movs	r3, #25
 80022c8:	221e      	movs	r2, #30
 80022ca:	446b      	add	r3, sp
 80022cc:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 80022ce:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80022d0:	2200      	movs	r2, #0
  sAlarm.Alarm = RTC_ALARM_A;
 80022d2:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80022d4:	0020      	movs	r0, r4
 80022d6:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 80022d8:	9507      	str	r5, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022da:	9509      	str	r5, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022dc:	950a      	str	r5, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022de:	950b      	str	r5, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80022e0:	950d      	str	r5, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 80022e2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80022e4:	f002 fa64 	bl	80047b0 <HAL_RTC_SetAlarm_IT>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d001      	beq.n	80022f0 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80022ec:	f7ff ffa4 	bl	8002238 <Error_Handler>
  }

}
 80022f0:	b011      	add	sp, #68	; 0x44
 80022f2:	bd30      	pop	{r4, r5, pc}
 80022f4:	200000d8 	.word	0x200000d8
 80022f8:	40002800 	.word	0x40002800
 80022fc:	000003ff 	.word	0x000003ff

08002300 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8002300:	b510      	push	{r4, lr}
 8002302:	0004      	movs	r4, r0
 8002304:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002306:	2238      	movs	r2, #56	; 0x38
 8002308:	2100      	movs	r1, #0
 800230a:	4668      	mov	r0, sp
 800230c:	f005 fb11 	bl	8007932 <memset>
  if (rtcHandle->Instance == RTC)
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_RTC_MspInit+0x50>)
 8002312:	6822      	ldr	r2, [r4, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d118      	bne.n	800234a <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002318:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231a:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800231c:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800231e:	33fc      	adds	r3, #252	; 0xfc
 8002320:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002322:	f001 fbcf 	bl	8003ac4 <HAL_RCC_OscConfig>
 8002326:	2800      	cmp	r0, #0
 8002328:	d001      	beq.n	800232e <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 800232a:	f7ff ff85 	bl	8002238 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_RTC_MspInit+0x54>)
 8002332:	02db      	lsls	r3, r3, #11
 8002334:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002336:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8002338:	430b      	orrs	r3, r1
 800233a:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	0011      	movs	r1, r2
 8002340:	f000 ffe4 	bl	800330c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002344:	2002      	movs	r0, #2
 8002346:	f001 f80b 	bl	8003360 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 800234a:	b00e      	add	sp, #56	; 0x38
 800234c:	bd10      	pop	{r4, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	40002800 	.word	0x40002800
 8002354:	40021000 	.word	0x40021000

08002358 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8002358:	4b01      	ldr	r3, [pc, #4]	; (8002360 <RTC_IF_GetTimerContext+0x8>)
 800235a:	6818      	ldr	r0, [r3, #0]
}
 800235c:	4770      	bx	lr
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	200000fc 	.word	0x200000fc

08002364 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8002364:	2003      	movs	r0, #3
 8002366:	4770      	bx	lr

08002368 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002368:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800236a:	0e41      	lsrs	r1, r0, #25
 800236c:	227d      	movs	r2, #125	; 0x7d
 800236e:	2300      	movs	r3, #0
 8002370:	01c0      	lsls	r0, r0, #7
 8002372:	f7fe f86f 	bl	8000454 <__aeabi_uldivmod>
}
 8002376:	bd10      	pop	{r4, pc}

08002378 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8002378:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800237a:	227d      	movs	r2, #125	; 0x7d
 800237c:	2300      	movs	r3, #0
 800237e:	2100      	movs	r1, #0
 8002380:	f7fe f888 	bl	8000494 <__aeabi_lmul>
 8002384:	0649      	lsls	r1, r1, #25
 8002386:	09c0      	lsrs	r0, r0, #7
 8002388:	4308      	orrs	r0, r1
}
 800238a:	bd10      	pop	{r4, pc}

0800238c <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800238c:	4806      	ldr	r0, [pc, #24]	; (80023a8 <RTC_IF_StopTimer+0x1c>)
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <RTC_IF_StopTimer+0x20>)
 8002390:	6801      	ldr	r1, [r0, #0]
{
 8002392:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002394:	68ca      	ldr	r2, [r1, #12]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	4313      	orrs	r3, r2
 800239a:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	0049      	lsls	r1, r1, #1
 80023a0:	f001 ffe6 	bl	8004370 <HAL_RTC_DeactivateAlarm>
}
 80023a4:	2000      	movs	r0, #0
 80023a6:	bd10      	pop	{r4, pc}
 80023a8:	200000d8 	.word	0x200000d8
 80023ac:	fffffe7f 	.word	0xfffffe7f

080023b0 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 80023b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80023b2:	4e25      	ldr	r6, [pc, #148]	; (8002448 <RTC_GetCalendarValue+0x98>)
{
 80023b4:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80023b6:	2200      	movs	r2, #0
 80023b8:	0030      	movs	r0, r6
{
 80023ba:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80023bc:	f002 fad8 	bl	8004970 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80023c0:	4f22      	ldr	r7, [pc, #136]	; (800244c <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 80023c2:	2200      	movs	r2, #0
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	0029      	movs	r1, r5
 80023c8:	0030      	movs	r0, r6
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	f002 fafa 	bl	80049c4 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80023d0:	2200      	movs	r2, #0
 80023d2:	0021      	movs	r1, r4
 80023d4:	0030      	movs	r0, r6
 80023d6:	f002 facb 	bl	8004970 <HAL_RTC_GetTime>
 80023da:	466b      	mov	r3, sp
 80023dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023de:	889b      	ldrh	r3, [r3, #4]
 80023e0:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d1ec      	bne.n	80023c0 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80023e6:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80023e8:	78ea      	ldrb	r2, [r5, #3]
 80023ea:	4e19      	ldr	r6, [pc, #100]	; (8002450 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80023ec:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80023ee:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80023f0:	400a      	ands	r2, r1
 80023f2:	4253      	negs	r3, r2
 80023f4:	415a      	adcs	r2, r3
 80023f6:	4253      	negs	r3, r2
 80023f8:	4a16      	ldr	r2, [pc, #88]	; (8002454 <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80023fa:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80023fc:	4013      	ands	r3, r2
 80023fe:	4a16      	ldr	r2, [pc, #88]	; (8002458 <RTC_GetCalendarValue+0xa8>)
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002400:	3603      	adds	r6, #3
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002402:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002404:	223d      	movs	r2, #61	; 0x3d
 8002406:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8002408:	007f      	lsls	r7, r7, #1
 800240a:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800240c:	3201      	adds	r2, #1
 800240e:	0fd0      	lsrs	r0, r2, #31
 8002410:	1880      	adds	r0, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 8002412:	78aa      	ldrb	r2, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002414:	08b6      	lsrs	r6, r6, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 8002416:	3a01      	subs	r2, #1
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002418:	1040      	asrs	r0, r0, #1
 800241a:	1996      	adds	r6, r2, r6
 800241c:	1986      	adds	r6, r0, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800241e:	400b      	ands	r3, r1

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8002420:	480e      	ldr	r0, [pc, #56]	; (800245c <RTC_GetCalendarValue+0xac>)
  calendarValue += (RTC_DateStruct->Date - 1);
 8002422:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 8002424:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8002426:	20e1      	movs	r0, #225	; 0xe1
 8002428:	7822      	ldrb	r2, [r4, #0]
 800242a:	0100      	lsls	r0, r0, #4
 800242c:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800242e:	223c      	movs	r2, #60	; 0x3c
 8002430:	7861      	ldrb	r1, [r4, #1]
 8002432:	434a      	muls	r2, r1
 8002434:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8002436:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8002438:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800243a:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 800243c:	6863      	ldr	r3, [r4, #4]
 800243e:	0280      	lsls	r0, r0, #10
 8002440:	1ac0      	subs	r0, r0, r3
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <RTC_GetCalendarValue+0xb0>)
 8002444:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 8002446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002448:	200000d8 	.word	0x200000d8
 800244c:	40002800 	.word	0x40002800
 8002450:	000005b5 	.word	0x000005b5
 8002454:	ffaaaab0 	.word	0xffaaaab0
 8002458:	0099aaa0 	.word	0x0099aaa0
 800245c:	00015180 	.word	0x00015180
 8002460:	000003ff 	.word	0x000003ff

08002464 <RTC_IF_SetTimerContext>:
{
 8002464:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8002466:	4c04      	ldr	r4, [pc, #16]	; (8002478 <RTC_IF_SetTimerContext+0x14>)
 8002468:	0020      	movs	r0, r4
 800246a:	1d21      	adds	r1, r4, #4
 800246c:	3018      	adds	r0, #24
 800246e:	f7ff ff9f 	bl	80023b0 <RTC_GetCalendarValue>
 8002472:	6020      	str	r0, [r4, #0]
}
 8002474:	bd10      	pop	{r4, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	200000fc 	.word	0x200000fc

0800247c <RTC_IF_GetTimerElapsedTime>:
{
 800247c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800247e:	4668      	mov	r0, sp
 8002480:	a901      	add	r1, sp, #4
 8002482:	f7ff ff95 	bl	80023b0 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8002486:	4b02      	ldr	r3, [pc, #8]	; (8002490 <RTC_IF_GetTimerElapsedTime+0x14>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1ac0      	subs	r0, r0, r3
}
 800248c:	b007      	add	sp, #28
 800248e:	bd00      	pop	{pc}
 8002490:	200000fc 	.word	0x200000fc

08002494 <RTC_IF_StartTimer>:
{
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	b087      	sub	sp, #28
 8002498:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 800249a:	f7ff ffef 	bl	800247c <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 800249e:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80024a0:	1a30      	subs	r0, r6, r0
 80024a2:	2803      	cmp	r0, #3
 80024a4:	d800      	bhi.n	80024a8 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 80024a6:	2101      	movs	r1, #1
 80024a8:	2002      	movs	r0, #2
 80024aa:	f004 fe47 	bl	800713c <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 80024ae:	f004 fe71 	bl	8007194 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80024b2:	4c40      	ldr	r4, [pc, #256]	; (80025b4 <RTC_IF_StartTimer+0x120>)
 80024b4:	7923      	ldrb	r3, [r4, #4]
 80024b6:	68a7      	ldr	r7, [r4, #8]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	7963      	ldrb	r3, [r4, #5]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	79a3      	ldrb	r3, [r4, #6]
 80024c0:	9302      	str	r3, [sp, #8]
 80024c2:	79e3      	ldrb	r3, [r4, #7]
 80024c4:	9303      	str	r3, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80024c6:	7e63      	ldrb	r3, [r4, #25]
 80024c8:	9304      	str	r3, [sp, #16]
 80024ca:	7ee3      	ldrb	r3, [r4, #27]
 80024cc:	7ea5      	ldrb	r5, [r4, #26]
 80024ce:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 80024d0:	f7ff ff5c 	bl	800238c <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <RTC_IF_StartTimer+0x124>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80024d6:	05b2      	lsls	r2, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80024d8:	1bdf      	subs	r7, r3, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80024da:	0d92      	lsrs	r2, r2, #22
 80024dc:	18ba      	adds	r2, r7, r2
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 80024de:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 80024e0:	4e36      	ldr	r6, [pc, #216]	; (80025bc <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80024e2:	b292      	uxth	r2, r2
  rtcAlarmDays =  RTC_DateStruct.Date;
 80024e4:	b2a8      	uxth	r0, r5
  while (timeoutValue >= SECONDS_IN_1DAY)
 80024e6:	42b3      	cmp	r3, r6
 80024e8:	d844      	bhi.n	8002574 <RTC_IF_StartTimer+0xe0>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80024ea:	4669      	mov	r1, sp
 80024ec:	880e      	ldrh	r6, [r1, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80024ee:	21e1      	movs	r1, #225	; 0xe1
 80024f0:	0109      	lsls	r1, r1, #4
 80024f2:	428b      	cmp	r3, r1
 80024f4:	d243      	bcs.n	800257e <RTC_IF_StartTimer+0xea>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 80024f6:	4669      	mov	r1, sp
 80024f8:	888f      	ldrh	r7, [r1, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80024fa:	2b3b      	cmp	r3, #59	; 0x3b
 80024fc:	d844      	bhi.n	8002588 <RTC_IF_StartTimer+0xf4>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80024fe:	0a95      	lsrs	r5, r2, #10
 8002500:	02a9      	lsls	r1, r5, #10
 8002502:	1a52      	subs	r2, r2, r1
 8002504:	b292      	uxth	r2, r2
 8002506:	9200      	str	r2, [sp, #0]
 8002508:	9a02      	ldr	r2, [sp, #8]
 800250a:	18ad      	adds	r5, r5, r2
 800250c:	18ed      	adds	r5, r5, r3
 800250e:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8002510:	2d3b      	cmp	r5, #59	; 0x3b
 8002512:	d83d      	bhi.n	8002590 <RTC_IF_StartTimer+0xfc>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8002514:	2f3b      	cmp	r7, #59	; 0x3b
 8002516:	d840      	bhi.n	800259a <RTC_IF_StartTimer+0x106>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8002518:	2e17      	cmp	r6, #23
 800251a:	d843      	bhi.n	80025a4 <RTC_IF_StartTimer+0x110>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800251c:	9a04      	ldr	r2, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 800251e:	9905      	ldr	r1, [sp, #20]
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <RTC_IF_StartTimer+0x12c>)
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002522:	3a01      	subs	r2, #1
  if (RTC_DateStruct.Year % 4 == 0)
 8002524:	0789      	lsls	r1, r1, #30
 8002526:	d142      	bne.n	80025ae <RTC_IF_StartTimer+0x11a>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002528:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800252a:	4288      	cmp	r0, r1
 800252c:	d902      	bls.n	8002534 <RTC_IF_StartTimer+0xa0>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800252e:	f7fd ff8b 	bl	8000448 <__aeabi_idivmod>
 8002532:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8002534:	9a00      	ldr	r2, [sp, #0]
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <RTC_IF_StartTimer+0x124>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8002538:	77a5      	strb	r5, [r4, #30]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 800253e:	23a0      	movs	r3, #160	; 0xa0
 8002540:	051b      	lsls	r3, r3, #20
 8002542:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8002544:	0023      	movs	r3, r4
 8002546:	333c      	adds	r3, #60	; 0x3c
 8002548:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800254a:	9b03      	ldr	r3, [sp, #12]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800254c:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800254e:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8002550:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002552:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8002554:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002556:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8002558:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800255a:	481a      	ldr	r0, [pc, #104]	; (80025c4 <RTC_IF_StartTimer+0x130>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800255c:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800255e:	7726      	strb	r6, [r4, #28]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002560:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8002562:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002564:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002566:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002568:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800256a:	f002 f921 	bl	80047b0 <HAL_RTC_SetAlarm_IT>
}
 800256e:	0028      	movs	r0, r5
 8002570:	b007      	add	sp, #28
 8002572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8002574:	4914      	ldr	r1, [pc, #80]	; (80025c8 <RTC_IF_StartTimer+0x134>)
    rtcAlarmDays++;
 8002576:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8002578:	185b      	adds	r3, r3, r1
    rtcAlarmDays++;
 800257a:	b280      	uxth	r0, r0
 800257c:	e7b3      	b.n	80024e6 <RTC_IF_StartTimer+0x52>
    timeoutValue -= SECONDS_IN_1HOUR;
 800257e:	4d13      	ldr	r5, [pc, #76]	; (80025cc <RTC_IF_StartTimer+0x138>)
    rtcAlarmHours++;
 8002580:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8002582:	195b      	adds	r3, r3, r5
    rtcAlarmHours++;
 8002584:	b2b6      	uxth	r6, r6
 8002586:	e7b4      	b.n	80024f2 <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 8002588:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800258a:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 800258c:	b2bf      	uxth	r7, r7
 800258e:	e7b4      	b.n	80024fa <RTC_IF_StartTimer+0x66>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8002590:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 8002592:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8002594:	b2ad      	uxth	r5, r5
    rtcAlarmMinutes++;
 8002596:	b2bf      	uxth	r7, r7
 8002598:	e7ba      	b.n	8002510 <RTC_IF_StartTimer+0x7c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800259a:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 800259c:	3601      	adds	r6, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800259e:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 80025a0:	b2b6      	uxth	r6, r6
 80025a2:	e7b7      	b.n	8002514 <RTC_IF_StartTimer+0x80>
    rtcAlarmHours -= HOURS_IN_1DAY;
 80025a4:	3e18      	subs	r6, #24
    rtcAlarmDays++;
 80025a6:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 80025a8:	b2b6      	uxth	r6, r6
    rtcAlarmDays++;
 80025aa:	b280      	uxth	r0, r0
 80025ac:	e7b4      	b.n	8002518 <RTC_IF_StartTimer+0x84>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	7b19      	ldrb	r1, [r3, #12]
 80025b2:	e7ba      	b.n	800252a <RTC_IF_StartTimer+0x96>
 80025b4:	200000fc 	.word	0x200000fc
 80025b8:	000003ff 	.word	0x000003ff
 80025bc:	0001517f 	.word	0x0001517f
 80025c0:	0800798c 	.word	0x0800798c
 80025c4:	200000d8 	.word	0x200000d8
 80025c8:	fffeae80 	.word	0xfffeae80
 80025cc:	fffff1f0 	.word	0xfffff1f0

080025d0 <RTC_IF_GetTime>:
{
 80025d0:	b530      	push	{r4, r5, lr}
 80025d2:	b087      	sub	sp, #28
 80025d4:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80025d6:	a901      	add	r1, sp, #4
 80025d8:	4668      	mov	r0, sp
 80025da:	f7ff fee9 	bl	80023b0 <RTC_GetCalendarValue>
 80025de:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 80025e0:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80025e2:	227d      	movs	r2, #125	; 0x7d
 80025e4:	2300      	movs	r3, #0
 80025e6:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 80025e8:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80025ea:	f7fd ff53 	bl	8000494 <__aeabi_lmul>
 80025ee:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 80025f0:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 80025f2:	0aa0      	lsrs	r0, r4, #10
}
 80025f4:	b007      	add	sp, #28
 80025f6:	bd30      	pop	{r4, r5, pc}

080025f8 <RTC_IF_BkUp_Write_Seconds>:
{
 80025f8:	b510      	push	{r4, lr}
 80025fa:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80025fc:	2100      	movs	r1, #0
 80025fe:	4802      	ldr	r0, [pc, #8]	; (8002608 <RTC_IF_BkUp_Write_Seconds+0x10>)
 8002600:	f002 fa02 	bl	8004a08 <HAL_RTCEx_BKUPWrite>
}
 8002604:	bd10      	pop	{r4, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	200000d8 	.word	0x200000d8

0800260c <RTC_IF_BkUp_Write_SubSeconds>:
{
 800260c:	b510      	push	{r4, lr}
 800260e:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002610:	2101      	movs	r1, #1
 8002612:	4802      	ldr	r0, [pc, #8]	; (800261c <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8002614:	f002 f9f8 	bl	8004a08 <HAL_RTCEx_BKUPWrite>
}
 8002618:	bd10      	pop	{r4, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	200000d8 	.word	0x200000d8

08002620 <RTC_IF_BkUp_Read_Seconds>:
{
 8002620:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002622:	2100      	movs	r1, #0
 8002624:	4801      	ldr	r0, [pc, #4]	; (800262c <RTC_IF_BkUp_Read_Seconds+0xc>)
 8002626:	f002 f9f5 	bl	8004a14 <HAL_RTCEx_BKUPRead>
}
 800262a:	bd10      	pop	{r4, pc}
 800262c:	200000d8 	.word	0x200000d8

08002630 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8002630:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002632:	2101      	movs	r1, #1
 8002634:	4801      	ldr	r0, [pc, #4]	; (800263c <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8002636:	f002 f9ed 	bl	8004a14 <HAL_RTCEx_BKUPRead>
}
 800263a:	bd10      	pop	{r4, pc}
 800263c:	200000d8 	.word	0x200000d8

08002640 <RTC_IF_Init>:
{
 8002640:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 8002642:	4c11      	ldr	r4, [pc, #68]	; (8002688 <RTC_IF_Init+0x48>)
{
 8002644:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 8002646:	3444      	adds	r4, #68	; 0x44
 8002648:	7823      	ldrb	r3, [r4, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d119      	bne.n	8002682 <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800264e:	3320      	adds	r3, #32
 8002650:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002652:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002654:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002656:	025b      	lsls	r3, r3, #9
 8002658:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800265a:	f001 fdab 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 800265e:	2800      	cmp	r0, #0
 8002660:	d000      	beq.n	8002664 <RTC_IF_Init+0x24>
      while (1);
 8002662:	e7fe      	b.n	8002662 <RTC_IF_Init+0x22>
    MX_RTC_Init();
 8002664:	f7ff fdea 	bl	800223c <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	4d08      	ldr	r5, [pc, #32]	; (800268c <RTC_IF_Init+0x4c>)
 800266c:	0049      	lsls	r1, r1, #1
 800266e:	0028      	movs	r0, r5
 8002670:	f001 fe7e 	bl	8004370 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002674:	0028      	movs	r0, r5
 8002676:	f002 f9d3 	bl	8004a20 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 800267a:	f7ff fef3 	bl	8002464 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 800267e:	2301      	movs	r3, #1
 8002680:	7023      	strb	r3, [r4, #0]
}
 8002682:	2000      	movs	r0, #0
 8002684:	b00b      	add	sp, #44	; 0x2c
 8002686:	bd30      	pop	{r4, r5, pc}
 8002688:	200000fc 	.word	0x200000fc
 800268c:	200000d8 	.word	0x200000d8

08002690 <RTC_IF_GetTimerValue>:
{
 8002690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 8002692:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <RTC_IF_GetTimerValue+0x1c>)
 8002696:	3344      	adds	r3, #68	; 0x44
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4283      	cmp	r3, r0
 800269c:	d003      	beq.n	80026a6 <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800269e:	4668      	mov	r0, sp
 80026a0:	a901      	add	r1, sp, #4
 80026a2:	f7ff fe85 	bl	80023b0 <RTC_GetCalendarValue>
}
 80026a6:	b007      	add	sp, #28
 80026a8:	bd00      	pop	{pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	200000fc 	.word	0x200000fc

080026b0 <RTC_IF_DelayMs>:
{
 80026b0:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80026b2:	227d      	movs	r2, #125	; 0x7d
 80026b4:	2300      	movs	r3, #0
 80026b6:	0e41      	lsrs	r1, r0, #25
 80026b8:	01c0      	lsls	r0, r0, #7
 80026ba:	f7fd fecb 	bl	8000454 <__aeabi_uldivmod>
 80026be:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 80026c0:	f7ff ffe6 	bl	8002690 <RTC_IF_GetTimerValue>
 80026c4:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 80026c6:	f7ff ffe3 	bl	8002690 <RTC_IF_GetTimerValue>
 80026ca:	1b40      	subs	r0, r0, r5
 80026cc:	42a0      	cmp	r0, r4
 80026ce:	d300      	bcc.n	80026d2 <RTC_IF_DelayMs+0x22>
}
 80026d0:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	e7f7      	b.n	80026c6 <RTC_IF_DelayMs+0x16>

080026d6 <HAL_RTC_AlarmAEventCallback>:
{
 80026d6:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 80026d8:	f004 ff8e 	bl	80075f8 <UTIL_TIMER_IRQ_Handler>
}
 80026dc:	bd10      	pop	{r4, pc}

080026de <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80026de:	4770      	bx	lr

080026e0 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 80026e0:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80026e6:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 80026e8:	f000 fcac 	bl	8003044 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80026ec:	2304      	movs	r3, #4
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <PWR_EnterStopMode+0x24>)
 80026f0:	6811      	ldr	r1, [r2, #0]
 80026f2:	430b      	orrs	r3, r1
 80026f4:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80026fa:	2101      	movs	r1, #1
 80026fc:	0008      	movs	r0, r1
 80026fe:	f001 f949 	bl	8003994 <HAL_PWR_EnterSTOPMode>
}
 8002702:	bd10      	pop	{r4, pc}
 8002704:	40007000 	.word	0x40007000

08002708 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002708:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800270e:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8002710:	2201      	movs	r2, #1
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <PWR_ExitStopMode+0x4c>)
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800271a:	2204      	movs	r2, #4
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	4211      	tst	r1, r2
 8002720:	d0fc      	beq.n	800271c <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	0452      	lsls	r2, r2, #17
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	0492      	lsls	r2, r2, #18
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	4211      	tst	r1, r2
 8002734:	d0fc      	beq.n	8002730 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8002736:	2203      	movs	r2, #3
 8002738:	68d9      	ldr	r1, [r3, #12]
 800273a:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 800273c:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800273e:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	400a      	ands	r2, r1
 8002744:	2a0c      	cmp	r2, #12
 8002746:	d1fb      	bne.n	8002740 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8002748:	f000 fba2 	bl	8002e90 <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274c:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
}
 8002750:	bd10      	pop	{r4, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	40021000 	.word	0x40021000

08002758 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002758:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800275a:	2101      	movs	r1, #1
 800275c:	2000      	movs	r0, #0
 800275e:	f001 f8e1 	bl	8003924 <HAL_PWR_EnterSLEEPMode>
}
 8002762:	bd10      	pop	{r4, pc}

08002764 <PWR_ExitSleepMode>:
 8002764:	4770      	bx	lr

08002766 <PWR_ExitOffMode>:
 8002766:	4770      	bx	lr

08002768 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_MspInit+0x28>)
 800276c:	055b      	lsls	r3, r3, #21
 800276e:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8002770:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	430b      	orrs	r3, r1
 8002774:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8002776:	f001 f8cd 	bl	8003914 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800277a:	f001 f951 	bl	8003a20 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800277e:	2308      	movs	r3, #8
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_MspInit+0x2c>)
 8002782:	6811      	ldr	r1, [r2, #0]
 8002784:	430b      	orrs	r3, r1
 8002786:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8002788:	f001 f940 	bl	8003a0c <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278c:	bd10      	pop	{r4, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	40021000 	.word	0x40021000
 8002794:	40022000 	.word	0x40022000

08002798 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002798:	4770      	bx	lr

0800279a <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 800279a:	46c0      	nop			; (mov r8, r8)
  while (1)
 800279c:	e7fd      	b.n	800279a <HardFault_Handler>

0800279e <SVC_Handler>:
 800279e:	4770      	bx	lr

080027a0 <PendSV_Handler>:
 80027a0:	4770      	bx	lr

080027a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a2:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a4:	f000 fd8e 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a8:	bd10      	pop	{r4, pc}
	...

080027ac <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 80027ac:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80027ae:	4803      	ldr	r0, [pc, #12]	; (80027bc <EXTI0_1_IRQHandler+0x10>)
 80027b0:	f000 ff44 	bl	800363c <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <EXTI0_1_IRQHandler+0x14>)
 80027b6:	f000 ff41 	bl	800363c <HAL_EXTI_IRQHandler>
#endif
}
 80027ba:	bd10      	pop	{r4, pc}
 80027bc:	20000284 	.word	0x20000284
 80027c0:	2000027c 	.word	0x2000027c

080027c4 <EXTI2_3_IRQHandler>:
 80027c4:	4770      	bx	lr
	...

080027c8 <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 80027c8:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 80027ca:	4803      	ldr	r0, [pc, #12]	; (80027d8 <EXTI4_15_IRQHandler+0x10>)
 80027cc:	f000 ff36 	bl	800363c <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <EXTI4_15_IRQHandler+0x14>)
 80027d2:	f000 ff33 	bl	800363c <HAL_EXTI_IRQHandler>
#endif
}
 80027d6:	bd10      	pop	{r4, pc}
 80027d8:	20000274 	.word	0x20000274
 80027dc:	2000028c 	.word	0x2000028c

080027e0 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80027e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 80027e2:	4b02      	ldr	r3, [pc, #8]	; (80027ec <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 80027e4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80027e6:	f000 fed0 	bl	800358a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80027ea:	bd10      	pop	{r4, pc}
 80027ec:	2000018c 	.word	0x2000018c

080027f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80027f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 80027f2:	4802      	ldr	r0, [pc, #8]	; (80027fc <USART2_IRQHandler+0xc>)
 80027f4:	f002 fbe4 	bl	8004fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	2000018c 	.word	0x2000018c

08002800 <RTC_IRQHandler>:



void RTC_IRQHandler(void)
{
 8002800:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002802:	4802      	ldr	r0, [pc, #8]	; (800280c <RTC_IRQHandler+0xc>)
 8002804:	f001 fe16 	bl	8004434 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002808:	bd10      	pop	{r4, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	200000d8 	.word	0x200000d8

08002810 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8002810:	b40c      	push	{r2, r3}
 8002812:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002814:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8002816:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 800281a:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800281c:	f004 ff32 	bl	8007684 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002820:	b003      	add	sp, #12
 8002822:	bc08      	pop	{r3}
 8002824:	b002      	add	sp, #8
 8002826:	4718      	bx	r3
 8002828:	08007d4e 	.word	0x08007d4e

0800282c <TimestampNow>:
{
 800282c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800282e:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 8002830:	ae02      	add	r6, sp, #8
 8002832:	0030      	movs	r0, r6
{
 8002834:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 8002836:	f004 fd95 	bl	8007364 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800283a:	2204      	movs	r2, #4
 800283c:	5eb3      	ldrsh	r3, [r6, r2]
 800283e:	2110      	movs	r1, #16
 8002840:	0020      	movs	r0, r4
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <TimestampNow+0x2c>)
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	9b02      	ldr	r3, [sp, #8]
 8002848:	f7ff ffe2 	bl	8002810 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 800284c:	0020      	movs	r0, r4
 800284e:	f7fd fc5b 	bl	8000108 <strlen>
 8002852:	8028      	strh	r0, [r5, #0]
}
 8002854:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	08007d4e 	.word	0x08007d4e

0800285c <SystemApp_Init>:
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002860:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002862:	2704      	movs	r7, #4
{
 8002864:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 8002866:	f004 fda9 	bl	80073bc <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286a:	220c      	movs	r2, #12
 800286c:	2100      	movs	r1, #0
 800286e:	a807      	add	r0, sp, #28
 8002870:	f005 f85f 	bl	8007932 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002874:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	4c2b      	ldr	r4, [pc, #172]	; (8002924 <SystemApp_Init+0xc8>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	432b      	orrs	r3, r5
 8002880:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	402b      	ands	r3, r5
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800288c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800288e:	4333      	orrs	r3, r6
 8002890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002892:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002894:	4033      	ands	r3, r6
 8002896:	9302      	str	r3, [sp, #8]
 8002898:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800289c:	433b      	orrs	r3, r7
 800289e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028a2:	403b      	ands	r3, r7
 80028a4:	9303      	str	r3, [sp, #12]
 80028a6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028aa:	4313      	orrs	r3, r2
 80028ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028b0:	4013      	ands	r3, r2
 80028b2:	9304      	str	r3, [sp, #16]
 80028b4:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b6:	2303      	movs	r3, #3
 80028b8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <SystemApp_Init+0xcc>)
 80028bc:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f000 fecf 	bl	8003660 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80028c2:	4b1a      	ldr	r3, [pc, #104]	; (800292c <SystemApp_Init+0xd0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	a905      	add	r1, sp, #20
 80028c6:	481a      	ldr	r0, [pc, #104]	; (8002930 <SystemApp_Init+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80028c8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ca:	f000 fec9 	bl	8003660 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ce:	a905      	add	r1, sp, #20
 80028d0:	4818      	ldr	r0, [pc, #96]	; (8002934 <SystemApp_Init+0xd8>)
 80028d2:	f000 fec5 	bl	8003660 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028d6:	a905      	add	r1, sp, #20
 80028d8:	4817      	ldr	r0, [pc, #92]	; (8002938 <SystemApp_Init+0xdc>)
 80028da:	f000 fec1 	bl	8003660 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80028de:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80028e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028e2:	43ab      	bics	r3, r5
 80028e4:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80028e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028e8:	43b3      	bics	r3, r6
 80028ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80028ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028ee:	43bb      	bics	r3, r7
 80028f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80028f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028f4:	4393      	bics	r3, r2
 80028f6:	62e3      	str	r3, [r4, #44]	; 0x2c
  DBG_Init();
 80028f8:	f000 f83e 	bl	8002978 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 80028fc:	f004 fafe 	bl	8006efc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002900:	480e      	ldr	r0, [pc, #56]	; (800293c <SystemApp_Init+0xe0>)
 8002902:	f004 fb15 	bl	8006f30 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002906:	0030      	movs	r0, r6
 8002908:	f004 fb18 	bl	8006f3c <UTIL_ADV_TRACE_SetVerboseLevel>
  Sx_Board_Bus_Init();
 800290c:	f000 fc70 	bl	80031f0 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8002910:	f000 fabe 	bl	8002e90 <CMWX1ZZABZ0XX_RADIO_IoInit>
  UTIL_LPM_Init();
 8002914:	f004 fc0a 	bl	800712c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002918:	0029      	movs	r1, r5
 800291a:	0028      	movs	r0, r5
 800291c:	f004 fc24 	bl	8007168 <UTIL_LPM_SetOffMode>
}
 8002920:	b00b      	add	sp, #44	; 0x2c
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	00009fff 	.word	0x00009fff
 800292c:	0000ffff 	.word	0x0000ffff
 8002930:	50000400 	.word	0x50000400
 8002934:	50000800 	.word	0x50000800
 8002938:	50001c00 	.word	0x50001c00
 800293c:	0800282d 	.word	0x0800282d

08002940 <UTIL_SEQ_Idle>:
{
 8002940:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 8002942:	f004 fc39 	bl	80071b8 <UTIL_LPM_EnterLowPower>
}
 8002946:	bd10      	pop	{r4, pc}

08002948 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002948:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800294a:	2101      	movs	r1, #1
 800294c:	2004      	movs	r0, #4
 800294e:	f004 fbf5 	bl	800713c <UTIL_LPM_SetStopMode>
}
 8002952:	bd10      	pop	{r4, pc}

08002954 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002954:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002956:	2100      	movs	r1, #0
 8002958:	2004      	movs	r0, #4
 800295a:	f004 fbef 	bl	800713c <UTIL_LPM_SetStopMode>
}
 800295e:	bd10      	pop	{r4, pc}

08002960 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002960:	2000      	movs	r0, #0
 8002962:	4770      	bx	lr

08002964 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8002964:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8002966:	f7ff fe93 	bl	8002690 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 800296a:	bd10      	pop	{r4, pc}

0800296c <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800296c:	b507      	push	{r0, r1, r2, lr}
 800296e:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8002970:	9801      	ldr	r0, [sp, #4]
 8002972:	f7ff fe9d 	bl	80026b0 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002976:	bd07      	pop	{r0, r1, r2, pc}

08002978 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 8002978:	b530      	push	{r4, r5, lr}
 800297a:	b087      	sub	sp, #28
  HAL_DBGMCU_EnableDBGStandbyMode();

#elif defined (DEBUGGER_ON) && (DEBUGGER_ON == 0) /* DEBUGGER_OFF */
  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
  /* The 4 debug lines above are simply not set in this case */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	220c      	movs	r2, #12
 800297e:	2100      	movs	r1, #0
 8002980:	a803      	add	r0, sp, #12
 8002982:	f004 ffd6 	bl	8007932 <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8002986:	2303      	movs	r3, #3
 8002988:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 800298a:	23c0      	movs	r3, #192	; 0xc0
  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 800298c:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002990:	4c10      	ldr	r4, [pc, #64]	; (80029d4 <DBG_Init+0x5c>)
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8002992:	01db      	lsls	r3, r3, #7
 8002994:	9301      	str	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002996:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002998:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 800299a:	432b      	orrs	r3, r5
 800299c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800299e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80029a2:	402b      	ands	r3, r5
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	f000 fe5a 	bl	8003660 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE() ;
 80029ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029ae:	43ab      	bics	r3, r5
 80029b0:	62e3      	str	r3, [r4, #44]	; 0x2c

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80029b6:	03db      	lsls	r3, r3, #15
 80029b8:	4313      	orrs	r3, r2
 80029ba:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode();
 80029bc:	f000 fc8e 	bl	80032dc <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80029c0:	f000 fc94 	bl	80032ec <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80029c4:	f000 fc9a 	bl	80032fc <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 80029c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029ca:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <DBG_Init+0x60>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	6363      	str	r3, [r4, #52]	; 0x34
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80029d0:	b007      	add	sp, #28
 80029d2:	bd30      	pop	{r4, r5, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	ffbfffff 	.word	0xffbfffff

080029dc <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 80029dc:	480a      	ldr	r0, [pc, #40]	; (8002a08 <MX_USART2_Init+0x2c>)
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <MX_USART2_Init+0x30>)
{
 80029e0:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 80029e2:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 80029e4:	23e1      	movs	r3, #225	; 0xe1
 80029e6:	025b      	lsls	r3, r3, #9
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX;
 80029e8:	2208      	movs	r2, #8
  husart2.Init.BaudRate   = USART_BAUDRATE;
 80029ea:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ec:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX;
 80029ee:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029f0:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 80029f2:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 80029f4:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80029f6:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 80029f8:	f002 fe7a 	bl	80056f0 <HAL_UART_Init>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d001      	beq.n	8002a04 <MX_USART2_Init+0x28>
  {
    Error_Handler();
 8002a00:	f7ff fc1a 	bl	8002238 <Error_Handler>
  }
}
 8002a04:	bd10      	pop	{r4, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	2000018c 	.word	0x2000018c
 8002a0c:	40004400 	.word	0x40004400

08002a10 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a12:	0005      	movs	r5, r0
 8002a14:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a16:	2214      	movs	r2, #20
 8002a18:	2100      	movs	r1, #0
 8002a1a:	a804      	add	r0, sp, #16
 8002a1c:	f004 ff89 	bl	8007932 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a20:	2224      	movs	r2, #36	; 0x24
 8002a22:	2100      	movs	r1, #0
 8002a24:	a809      	add	r0, sp, #36	; 0x24
 8002a26:	f004 ff84 	bl	8007932 <memset>
  if (uartHandle->Instance == USART2)
 8002a2a:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <HAL_UART_MspInit+0xf8>)
 8002a2c:	682a      	ldr	r2, [r5, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d168      	bne.n	8002b04 <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8002a32:	2201      	movs	r2, #1
 8002a34:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002a36:	2604      	movs	r6, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 8002a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002a3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a40:	4011      	ands	r1, r2
 8002a42:	9101      	str	r1, [sp, #4]
 8002a44:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8002a46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a48:	4311      	orrs	r1, r2
 8002a4a:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a4e:	4011      	ands	r1, r2
 8002a50:	9102      	str	r1, [sp, #8]
 8002a52:	9902      	ldr	r1, [sp, #8]
    __USART2_CLK_ENABLE();
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a58:	0289      	lsls	r1, r1, #10
 8002a5a:	4308      	orrs	r0, r1
 8002a5c:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 8002a5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a60:	4310      	orrs	r0, r2
 8002a62:	6318      	str	r0, [r3, #48]	; 0x30
 8002a64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a66:	4002      	ands	r2, r0
 8002a68:	9203      	str	r2, [sp, #12]
 8002a6a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a6e:	a809      	add	r0, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a70:	4311      	orrs	r1, r2
 8002a72:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a74:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002a76:	960c      	str	r6, [sp, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a78:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a7a:	f001 fb9b 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8002a82:	f7ff fbd9 	bl	8002238 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002a86:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002a8c:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	a904      	add	r1, sp, #16
 8002a90:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002a94:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8002a96:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002a9a:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f000 fde0 	bl	8003660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002aa0:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002aa4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002aa6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002aa8:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002aaa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002aae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002ab2:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002ab4:	f000 fdd4 	bl	8003660 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002ab8:	4f15      	ldr	r7, [pc, #84]	; (8002b10 <HAL_UART_MspInit+0x100>)
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <HAL_UART_MspInit+0x104>)
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_tx.Init.Mode                = DMA_NORMAL;
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8002abc:	0038      	movs	r0, r7
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002abe:	603b      	str	r3, [r7, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	60bb      	str	r3, [r7, #8]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002ac4:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8002ac6:	607e      	str	r6, [r7, #4]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002ac8:	60fc      	str	r4, [r7, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002aca:	613b      	str	r3, [r7, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002acc:	617c      	str	r4, [r7, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002ace:	61bc      	str	r4, [r7, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8002ad0:	61fc      	str	r4, [r7, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8002ad2:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8002ad4:	f000 fc60 	bl	8003398 <HAL_DMA_Init>
 8002ad8:	42a0      	cmp	r0, r4
 8002ada:	d001      	beq.n	8002ae0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002adc:	f7ff fbac 	bl	8002238 <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8002ae6:	66ef      	str	r7, [r5, #108]	; 0x6c
 8002ae8:	62bd      	str	r5, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002aea:	f000 fc0f 	bl	800330c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8002aee:	200b      	movs	r0, #11
 8002af0:	f000 fc36 	bl	8003360 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8002af4:	201c      	movs	r0, #28
 8002af6:	2201      	movs	r2, #1
 8002af8:	2100      	movs	r1, #0
 8002afa:	f000 fc07 	bl	800330c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8002afe:	201c      	movs	r0, #28
 8002b00:	f000 fc2e 	bl	8003360 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b04:	b013      	add	sp, #76	; 0x4c
 8002b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b08:	40004400 	.word	0x40004400
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	20000144 	.word	0x20000144
 8002b14:	40020080 	.word	0x40020080

08002b18 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_UART_MspDeInit+0x30>)
 8002b1a:	6802      	ldr	r2, [r0, #0]
{
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d10f      	bne.n	8002b44 <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002b24:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_UART_MspDeInit+0x34>)
 8002b28:	4909      	ldr	r1, [pc, #36]	; (8002b50 <HAL_UART_MspDeInit+0x38>)
 8002b2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002b2c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8002b2e:	400b      	ands	r3, r1
 8002b30:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002b32:	210c      	movs	r1, #12
 8002b34:	f000 fe5a 	bl	80037ec <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002b38:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002b3a:	f000 fc71 	bl	8003420 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002b3e:	201c      	movs	r0, #28
 8002b40:	f000 fc1a 	bl	8003378 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002b44:	bd10      	pop	{r4, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	40004400 	.word	0x40004400
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	fffdffff 	.word	0xfffdffff

08002b54 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002b54:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <vcom_Init+0x14>)
 8002b58:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002b5a:	f7ff fb05 	bl	8002168 <MX_DMA_Init>
  MX_USART2_Init();
 8002b5e:	f7ff ff3d 	bl	80029dc <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002b62:	2000      	movs	r0, #0
 8002b64:	bd10      	pop	{r4, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	20000210 	.word	0x20000210

08002b6c <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <vcom_DeInit+0x28>)
 8002b70:	0292      	lsls	r2, r2, #10
 8002b72:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8002b74:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8002b76:	430a      	orrs	r2, r1
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8002b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8002b7e:	4807      	ldr	r0, [pc, #28]	; (8002b9c <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8002b80:	400a      	ands	r2, r1
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 8002b84:	f7ff ffc8 	bl	8002b18 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002b88:	200b      	movs	r0, #11
 8002b8a:	f000 fbf5 	bl	8003378 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002b8e:	2000      	movs	r0, #0
 8002b90:	bd10      	pop	{r4, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40021000 	.word	0x40021000
 8002b98:	fffdffff 	.word	0xfffdffff
 8002b9c:	2000018c 	.word	0x2000018c

08002ba0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002ba0:	b510      	push	{r4, lr}
 8002ba2:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8002ba4:	0001      	movs	r1, r0
 8002ba6:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <vcom_Trace_DMA+0x10>)
 8002ba8:	f002 f960 	bl	8004e6c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002bac:	2000      	movs	r0, #0
 8002bae:	bd10      	pop	{r4, pc}
 8002bb0:	2000018c 	.word	0x2000018c

08002bb4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002bb6:	2180      	movs	r1, #128	; 0x80

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002bb8:	4c10      	ldr	r4, [pc, #64]	; (8002bfc <vcom_ReceiveInit+0x48>)
  RxCpltCallback = RxCb;
 8002bba:	4d11      	ldr	r5, [pc, #68]	; (8002c00 <vcom_ReceiveInit+0x4c>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002bbc:	9a01      	ldr	r2, [sp, #4]
  RxCpltCallback = RxCb;
 8002bbe:	6068      	str	r0, [r5, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002bc0:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002bc2:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002bc4:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002bc6:	f002 fe45 	bl	8005854 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	0252      	lsls	r2, r2, #9
 8002bd0:	69d9      	ldr	r1, [r3, #28]
 8002bd2:	4211      	tst	r1, r2
 8002bd4:	d1fc      	bne.n	8002bd0 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	03d2      	lsls	r2, r2, #15
 8002bda:	69d9      	ldr	r1, [r3, #28]
 8002bdc:	4211      	tst	r1, r2
 8002bde:	d0fc      	beq.n	8002bda <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8002be0:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8002be2:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8002be8:	f002 fe7c 	bl	80058e4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8002bec:	0029      	movs	r1, r5
 8002bee:	2201      	movs	r2, #1
 8002bf0:	0020      	movs	r0, r4
 8002bf2:	3108      	adds	r1, #8
 8002bf4:	f002 fdf8 	bl	80057e8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002bfc:	2000018c 	.word	0x2000018c
 8002c00:	20000210 	.word	0x20000210

08002c04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002c04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002c06:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <HAL_UART_TxCpltCallback+0xc>)
 8002c08:	2000      	movs	r0, #0
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002c0e:	bd10      	pop	{r4, pc}
 8002c10:	20000210 	.word	0x20000210

08002c14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002c14:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8002c16:	4c0a      	ldr	r4, [pc, #40]	; (8002c40 <HAL_UART_RxCpltCallback+0x2c>)
{
 8002c18:	0005      	movs	r5, r0
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8002c1a:	6863      	ldr	r3, [r4, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_UART_RxCpltCallback+0x1c>
 8002c20:	1d02      	adds	r2, r0, #4
 8002c22:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	d103      	bne.n	8002c30 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002c28:	0020      	movs	r0, r4
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	3008      	adds	r0, #8
 8002c2e:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8002c30:	0021      	movs	r1, r4
 8002c32:	0028      	movs	r0, r5
 8002c34:	2201      	movs	r2, #1
 8002c36:	3108      	adds	r1, #8
 8002c38:	f002 fdd6 	bl	80057e8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	20000210 	.word	0x20000210

08002c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002c44:	480d      	ldr	r0, [pc, #52]	; (8002c7c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002c46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c48:	480d      	ldr	r0, [pc, #52]	; (8002c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c4a:	490e      	ldr	r1, [pc, #56]	; (8002c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <LoopForever+0xe>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c50:	e002      	b.n	8002c58 <LoopCopyDataInit>

08002c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c56:	3304      	adds	r3, #4

08002c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c5c:	d3f9      	bcc.n	8002c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5e:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c60:	4c0b      	ldr	r4, [pc, #44]	; (8002c90 <LoopForever+0x16>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c64:	e001      	b.n	8002c6a <LoopFillZerobss>

08002c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c68:	3204      	adds	r2, #4

08002c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c6c:	d3fb      	bcc.n	8002c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c6e:	f000 fae7 	bl	8003240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c72:	f004 fe31 	bl	80078d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c76:	f7ff fad5 	bl	8002224 <main>

08002c7a <LoopForever>:

LoopForever:
    b LoopForever
 8002c7a:	e7fe      	b.n	8002c7a <LoopForever>
   ldr   r0, =_estack
 8002c7c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c84:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8002c88:	08007dbc 	.word	0x08007dbc
  ldr r2, =_sbss
 8002c8c:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8002c90:	20000810 	.word	0x20000810

08002c94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c94:	e7fe      	b.n	8002c94 <ADC1_COMP_IRQHandler>
	...

08002c98 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002c98:	23fa      	movs	r3, #250	; 0xfa
{
 8002c9a:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002c9c:	009b      	lsls	r3, r3, #2
{
 8002c9e:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	0013      	movs	r3, r2
 8002ca4:	000a      	movs	r2, r1
 8002ca6:	0001      	movs	r1, r0
 8002ca8:	4804      	ldr	r0, [pc, #16]	; (8002cbc <BSP_SPI1_SendRecv+0x24>)
 8002caa:	f001 ffc7 	bl	8004c3c <HAL_SPI_TransmitReceive>
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d101      	bne.n	8002cb6 <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 8002cb2:	0020      	movs	r0, r4
  }
  return ret;
}
 8002cb4:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002cb6:	2006      	movs	r0, #6
 8002cb8:	4240      	negs	r0, r0
  return ret;
 8002cba:	e7fb      	b.n	8002cb4 <BSP_SPI1_SendRecv+0x1c>
 8002cbc:	2000021c 	.word	0x2000021c

08002cc0 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <MX_SPI1_Init+0x54>)
{
 8002cc2:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8002cc4:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002cc6:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002cc8:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002cce:	33fc      	adds	r3, #252	; 0xfc
 8002cd0:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002cd2:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002cd4:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd6:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cd8:	6145      	str	r5, [r0, #20]
{
 8002cda:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002cdc:	f001 fa5a 	bl	8004194 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8002ce0:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8002ce2:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8002ce4:	490d      	ldr	r1, [pc, #52]	; (8002d1c <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8002ce6:	4290      	cmp	r0, r2
 8002ce8:	d80d      	bhi.n	8002d06 <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cea:	2300      	movs	r3, #0
 8002cec:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002cee:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf0:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002cf2:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002cf4:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8002cf6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002cf8:	0020      	movs	r0, r4
 8002cfa:	f001 ff3d 	bl	8004b78 <HAL_SPI_Init>
 8002cfe:	1e43      	subs	r3, r0, #1
 8002d00:	4198      	sbcs	r0, r3
  return ret;
 8002d02:	b2c0      	uxtb	r0, r0
}
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8002d06:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8002d08:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8002d0a:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d0ec      	beq.n	8002cea <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8002d10:	0840      	lsrs	r0, r0, #1
 8002d12:	e7e8      	b.n	8002ce6 <MX_SPI1_Init+0x26>
 8002d14:	40013000 	.word	0x40013000
 8002d18:	00989680 	.word	0x00989680
 8002d1c:	08007a0c 	.word	0x08007a0c

08002d20 <BSP_SPI1_Init>:
{
 8002d20:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8002d22:	4d1b      	ldr	r5, [pc, #108]	; (8002d90 <BSP_SPI1_Init+0x70>)
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002d26:	0028      	movs	r0, r5
{
 8002d28:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8002d2a:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002d2c:	f002 f880 	bl	8004e30 <HAL_SPI_GetState>
 8002d30:	1e04      	subs	r4, r0, #0
 8002d32:	d002      	beq.n	8002d3a <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8002d34:	2000      	movs	r0, #0
}
 8002d36:	b007      	add	sp, #28
 8002d38:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <BSP_SPI1_Init+0x78>)
 8002d3e:	015b      	lsls	r3, r3, #5
 8002d40:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002d42:	430b      	orrs	r3, r1
 8002d44:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002d4a:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d4c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	3301      	adds	r3, #1
 8002d52:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d54:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002d56:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d58:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002d5a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d5c:	f000 fc80 	bl	8003660 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d60:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002d62:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d64:	a901      	add	r1, sp, #4
 8002d66:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002d68:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002d6a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002d6c:	f000 fc78 	bl	8003660 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002d70:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002d72:	480a      	ldr	r0, [pc, #40]	; (8002d9c <BSP_SPI1_Init+0x7c>)
 8002d74:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002d76:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002d78:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002d7a:	f000 fc71 	bl	8003660 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002d7e:	0028      	movs	r0, r5
 8002d80:	f7ff ff9e 	bl	8002cc0 <MX_SPI1_Init>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d0d5      	beq.n	8002d34 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8002d88:	2008      	movs	r0, #8
 8002d8a:	4240      	negs	r0, r0
  return ret;
 8002d8c:	e7d3      	b.n	8002d36 <BSP_SPI1_Init+0x16>
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	2000021c 	.word	0x2000021c
 8002d94:	40013000 	.word	0x40013000
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	50000400 	.word	0x50000400

08002da0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002da0:	b500      	push	{lr}
 8002da2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002da4:	2803      	cmp	r0, #3
 8002da6:	d80c      	bhi.n	8002dc2 <BSP_LED_Init+0x22>
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <BSP_LED_Init+0x78>)
 8002daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dac:	f7fd f9be 	bl	800012c <__gnu_thumb1_case_uqi>
 8002db0:	2b231b02 	.word	0x2b231b02
 8002db4:	2102      	movs	r1, #2
 8002db6:	430a      	orrs	r2, r1
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <BSP_LED_Init+0x7c>)
 8002dc4:	0042      	lsls	r2, r0, #1
 8002dc6:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002dc8:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002dca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	3303      	adds	r3, #3
 8002dd6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <BSP_LED_Init+0x80>)
 8002dda:	a905      	add	r1, sp, #20
 8002ddc:	58c0      	ldr	r0, [r0, r3]
 8002dde:	f000 fc3f 	bl	8003660 <HAL_GPIO_Init>
}
 8002de2:	b00b      	add	sp, #44	; 0x2c
 8002de4:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002de6:	2101      	movs	r1, #1
 8002de8:	430a      	orrs	r2, r1
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	400b      	ands	r3, r1
 8002df0:	9302      	str	r3, [sp, #8]
 8002df2:	9b02      	ldr	r3, [sp, #8]
 8002df4:	e7e5      	b.n	8002dc2 <BSP_LED_Init+0x22>
 8002df6:	2102      	movs	r1, #2
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	400b      	ands	r3, r1
 8002e00:	9303      	str	r3, [sp, #12]
 8002e02:	9b03      	ldr	r3, [sp, #12]
 8002e04:	e7dd      	b.n	8002dc2 <BSP_LED_Init+0x22>
 8002e06:	2102      	movs	r1, #2
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	400b      	ands	r3, r1
 8002e10:	9304      	str	r3, [sp, #16]
 8002e12:	9b04      	ldr	r3, [sp, #16]
 8002e14:	e7d5      	b.n	8002dc2 <BSP_LED_Init+0x22>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08007a2c 	.word	0x08007a2c
 8002e20:	20000004 	.word	0x20000004

08002e24 <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <BSP_LED_Off+0x18>)
{
 8002e26:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002e28:	0042      	lsls	r2, r0, #1
 8002e2a:	5ad1      	ldrh	r1, [r2, r3]
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <BSP_LED_Off+0x1c>)
 8002e2e:	0080      	lsls	r0, r0, #2
 8002e30:	2200      	movs	r2, #0
 8002e32:	58c0      	ldr	r0, [r0, r3]
 8002e34:	f000 fd60 	bl	80038f8 <HAL_GPIO_WritePin>
}
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	08007a2c 	.word	0x08007a2c
 8002e40:	20000004 	.word	0x20000004

08002e44 <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <BSP_LED_Toggle+0x14>)
{
 8002e46:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002e48:	0042      	lsls	r2, r0, #1
 8002e4a:	5ad1      	ldrh	r1, [r2, r3]
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <BSP_LED_Toggle+0x18>)
 8002e4e:	0080      	lsls	r0, r0, #2
 8002e50:	58c0      	ldr	r0, [r0, r3]
 8002e52:	f000 fd57 	bl	8003904 <HAL_GPIO_TogglePin>
}
 8002e56:	bd10      	pop	{r4, pc}
 8002e58:	08007a2c 	.word	0x08007a2c
 8002e5c:	20000004 	.word	0x20000004

08002e60 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8002e60:	2005      	movs	r0, #5
 8002e62:	4770      	bx	lr

08002e64 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8002e64:	0002      	movs	r2, r0
 8002e66:	b510      	push	{r4, lr}

  if (state == SET)
 8002e68:	2801      	cmp	r0, #1
 8002e6a:	d109      	bne.n	8002e80 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	20a0      	movs	r0, #160	; 0xa0
 8002e70:	0149      	lsls	r1, r1, #5
 8002e72:	05c0      	lsls	r0, r0, #23
 8002e74:	f000 fd40 	bl	80038f8 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8002e78:	2005      	movs	r0, #5
 8002e7a:	f7ff fd77 	bl	800296c <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8002e7e:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	20a0      	movs	r0, #160	; 0xa0
 8002e84:	2200      	movs	r2, #0
 8002e86:	0149      	lsls	r1, r1, #5
 8002e88:	05c0      	lsls	r0, r0, #23
 8002e8a:	f000 fd35 	bl	80038f8 <HAL_GPIO_WritePin>
}
 8002e8e:	e7f6      	b.n	8002e7e <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08002e90 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8002e90:	2300      	movs	r3, #0
{
 8002e92:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002e94:	2702      	movs	r7, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002e96:	2204      	movs	r2, #4
{
 8002e98:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002e9a:	4c65      	ldr	r4, [pc, #404]	; (8003030 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8002e9c:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002e9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002ea0:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002ea2:	433b      	orrs	r3, r7
 8002ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002ea8:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002eaa:	403b      	ands	r3, r7
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002eb2:	4e60      	ldr	r6, [pc, #384]	; (8003034 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002eb4:	433b      	orrs	r3, r7
 8002eb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002eb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002eba:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002ebc:	403b      	ands	r3, r7
 8002ebe:	9302      	str	r3, [sp, #8]
 8002ec0:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8002ec2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ec4:	433b      	orrs	r3, r7
 8002ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ec8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eca:	403b      	ands	r3, r7
 8002ecc:	9303      	str	r3, [sp, #12]
 8002ece:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002ed0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002ed8:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002eda:	4013      	ands	r3, r2
 8002edc:	9304      	str	r3, [sp, #16]
 8002ede:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002ee0:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002ee2:	0001      	movs	r1, r0
 8002ee4:	4854      	ldr	r0, [pc, #336]	; (8003038 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ee6:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002ee8:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 8002eea:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002eec:	f000 fbb8 	bl	8003660 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ef0:	4b52      	ldr	r3, [pc, #328]	; (800303c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002ef2:	a80c      	add	r0, sp, #48	; 0x30
 8002ef4:	0001      	movs	r1, r0
 8002ef6:	4850      	ldr	r0, [pc, #320]	; (8003038 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ef8:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002efa:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002efc:	f000 fbb0 	bl	8003660 <HAL_GPIO_Init>
 8002f00:	a80c      	add	r0, sp, #48	; 0x30
 8002f02:	0001      	movs	r1, r0
 8002f04:	484c      	ldr	r0, [pc, #304]	; (8003038 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002f06:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f08:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f0a:	f000 fba9 	bl	8003660 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f0e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f10:	a80c      	add	r0, sp, #48	; 0x30
 8002f12:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f14:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f16:	484a      	ldr	r0, [pc, #296]	; (8003040 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002f18:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002f1a:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002f1c:	f000 fba0 	bl	8003660 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002f20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f22:	26a0      	movs	r6, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002f24:	433b      	orrs	r3, r7
 8002f26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002f2c:	403b      	ands	r3, r7
 8002f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002f32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f34:	05f6      	lsls	r6, r6, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002f36:	432b      	orrs	r3, r5
 8002f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f3c:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002f3e:	402b      	ands	r3, r5
 8002f40:	930a      	str	r3, [sp, #40]	; 0x28
 8002f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f46:	432b      	orrs	r3, r5
 8002f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4c:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002f4e:	402b      	ands	r3, r5
 8002f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002f54:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f56:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002f58:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f5a:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002f5c:	3380      	adds	r3, #128	; 0x80
 8002f5e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f62:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f64:	f000 fb7c 	bl	8003660 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002f68:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002f6a:	a811      	add	r0, sp, #68	; 0x44
 8002f6c:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002f6e:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002f70:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002f72:	3340      	adds	r3, #64	; 0x40
 8002f74:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002f76:	f000 fb73 	bl	8003660 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002f7a:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002f7c:	a811      	add	r0, sp, #68	; 0x44
 8002f7e:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002f80:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002f82:	482d      	ldr	r0, [pc, #180]	; (8003038 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002f84:	3308      	adds	r3, #8
 8002f86:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002f88:	f000 fb6a 	bl	8003660 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8002f8c:	2080      	movs	r0, #128	; 0x80
 8002f8e:	0200      	lsls	r0, r0, #8
 8002f90:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f92:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 8002f94:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 8002f96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002f98:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8002f9a:	432b      	orrs	r3, r5
 8002f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002fa0:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 8002fa2:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002fa4:	0030      	movs	r0, r6
  RADIO_NSS_CLK_ENABLE();
 8002fa6:	9305      	str	r3, [sp, #20]
 8002fa8:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002faa:	f000 fb59 	bl	8003660 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	002a      	movs	r2, r5
 8002fb2:	0030      	movs	r0, r6
 8002fb4:	0209      	lsls	r1, r1, #8
 8002fb6:	f000 fc9f 	bl	80038f8 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8002fba:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002fbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002fbe:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002fc0:	432b      	orrs	r3, r5
 8002fc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002fc6:	0030      	movs	r0, r6
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002fc8:	402b      	ands	r3, r5
 8002fca:	9306      	str	r3, [sp, #24]
 8002fcc:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8002fce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fd0:	432b      	orrs	r3, r5
 8002fd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fd6:	402b      	ands	r3, r5
 8002fd8:	9307      	str	r3, [sp, #28]
 8002fda:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8002fdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fe2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	9308      	str	r3, [sp, #32]
 8002fe8:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8002fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fec:	4313      	orrs	r3, r2
 8002fee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ff0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ff2:	0014      	movs	r4, r2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	9311      	str	r3, [sp, #68]	; 0x44
 8002ff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002ffe:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003000:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8003002:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8003004:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8003006:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003008:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 800300a:	f000 fb29 	bl	8003660 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 800300e:	0030      	movs	r0, r6
 8003010:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8003012:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8003014:	f000 fb24 	bl	8003660 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8003018:	a90c      	add	r1, sp, #48	; 0x30
 800301a:	4809      	ldr	r0, [pc, #36]	; (8003040 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 800301c:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 800301e:	f000 fb1f 	bl	8003660 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8003022:	4807      	ldr	r0, [pc, #28]	; (8003040 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8003024:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8003026:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8003028:	f000 fb1a 	bl	8003660 <HAL_GPIO_Init>
}
 800302c:	b017      	add	sp, #92	; 0x5c
 800302e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	10110000 	.word	0x10110000
 8003038:	50000400 	.word	0x50000400
 800303c:	10310000 	.word	0x10310000
 8003040:	50000800 	.word	0x50000800

08003044 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8003044:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8003046:	2608      	movs	r6, #8
{
 8003048:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 800304a:	0032      	movs	r2, r6
 800304c:	2100      	movs	r1, #0
 800304e:	a803      	add	r0, sp, #12
 8003050:	f004 fc6f 	bl	8007932 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8003054:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003056:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003058:	4c22      	ldr	r4, [pc, #136]	; (80030e4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 800305a:	4f23      	ldr	r7, [pc, #140]	; (80030e8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800305c:	4669      	mov	r1, sp
 800305e:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 8003060:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003062:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003064:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003066:	f000 fafb 	bl	8003660 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800306c:	4669      	mov	r1, sp
 800306e:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003070:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003072:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003074:	f000 faf4 	bl	8003660 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003078:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800307a:	4669      	mov	r1, sp
 800307c:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 800307e:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003080:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003082:	f000 faed 	bl	8003660 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003086:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003088:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 800308a:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800308c:	4818      	ldr	r0, [pc, #96]	; (80030f0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 800308e:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003090:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003092:	f000 fae5 	bl	8003660 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003096:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003098:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800309c:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800309e:	05ed      	lsls	r5, r5, #23
 80030a0:	0028      	movs	r0, r5
 80030a2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80030a6:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80030a8:	f000 fada 	bl	8003660 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80030ac:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80030ae:	0028      	movs	r0, r5
 80030b0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80030b2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80030b4:	f000 fad4 	bl	8003660 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80030b8:	0020      	movs	r0, r4
 80030ba:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80030bc:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80030be:	f000 facf 	bl	8003660 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 80030c2:	0039      	movs	r1, r7
 80030c4:	0028      	movs	r0, r5
 80030c6:	2200      	movs	r2, #0
 80030c8:	f000 fc16 	bl	80038f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 80030cc:	0028      	movs	r0, r5
 80030ce:	2200      	movs	r2, #0
 80030d0:	2140      	movs	r1, #64	; 0x40
 80030d2:	f000 fc11 	bl	80038f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 80030d6:	2200      	movs	r2, #0
 80030d8:	0031      	movs	r1, r6
 80030da:	0020      	movs	r0, r4
 80030dc:	f000 fc0c 	bl	80038f8 <HAL_GPIO_WritePin>
}
 80030e0:	b00b      	add	sp, #44	; 0x2c
 80030e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e4:	50000400 	.word	0x50000400
 80030e8:	10110000 	.word	0x10110000
 80030ec:	10310000 	.word	0x10310000
 80030f0:	50000800 	.word	0x50000800

080030f4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 80030f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030f6:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f8:	f3ef 8310 	mrs	r3, PRIMASK
 80030fc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80030fe:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8003100:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8003102:	4e11      	ldr	r6, [pc, #68]	; (8003148 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 8003104:	4d11      	ldr	r5, [pc, #68]	; (800314c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 8003106:	00e3      	lsls	r3, r4, #3
 8003108:	18f6      	adds	r6, r6, r3
 800310a:	00a7      	lsls	r7, r4, #2
 800310c:	5979      	ldr	r1, [r7, r5]
 800310e:	0030      	movs	r0, r6
 8003110:	f000 fa8d 	bl	800362e <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8003114:	9b00      	ldr	r3, [sp, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	59da      	ldr	r2, [r3, r7]
 800311a:	0030      	movs	r0, r6
 800311c:	f000 fa80 	bl	8003620 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8003120:	002b      	movs	r3, r5
 8003122:	3310      	adds	r3, #16
 8003124:	56e6      	ldrsb	r6, [r4, r3]
 8003126:	3514      	adds	r5, #20
 8003128:	2200      	movs	r2, #0
 800312a:	0030      	movs	r0, r6
 800312c:	5979      	ldr	r1, [r7, r5]
 800312e:	f000 f8ed 	bl	800330c <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8003132:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8003134:	0030      	movs	r0, r6
 8003136:	f000 f913 	bl	8003360 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800313a:	2c04      	cmp	r4, #4
 800313c:	d1e1      	bne.n	8003102 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	9b01      	ldr	r3, [sp, #4]
 8003140:	f383 8810 	msr	PRIMASK, r3
}
 8003144:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	20000274 	.word	0x20000274
 800314c:	08007a38 	.word	0x08007a38

08003150 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 8003150:	2000      	movs	r0, #0
 8003152:	4770      	bx	lr

08003154 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 8003154:	3801      	subs	r0, #1
{
 8003156:	b510      	push	{r4, lr}
  switch (state)
 8003158:	2803      	cmp	r0, #3
 800315a:	d811      	bhi.n	8003180 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 800315c:	f7fc ffe6 	bl	800012c <__gnu_thumb1_case_uqi>
 8003160:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8003164:	20a0      	movs	r0, #160	; 0xa0
 8003166:	2201      	movs	r2, #1
 8003168:	2102      	movs	r1, #2
 800316a:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 800316c:	f000 fbc4 	bl	80038f8 <HAL_GPIO_WritePin>
}
 8003170:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8003172:	2201      	movs	r2, #1
 8003174:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8003176:	4809      	ldr	r0, [pc, #36]	; (800319c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8003178:	e7f8      	b.n	800316c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 800317a:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 800317c:	2102      	movs	r1, #2
 800317e:	e7fa      	b.n	8003176 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8003180:	20a0      	movs	r0, #160	; 0xa0
 8003182:	2200      	movs	r2, #0
 8003184:	2102      	movs	r1, #2
 8003186:	05c0      	lsls	r0, r0, #23
 8003188:	f000 fbb6 	bl	80038f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 800318c:	2200      	movs	r2, #0
 800318e:	2104      	movs	r1, #4
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8003192:	f000 fbb1 	bl	80038f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8003196:	2200      	movs	r2, #0
 8003198:	e7f0      	b.n	800317c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	50000800 	.word	0x50000800

080031a0 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 80031a0:	2001      	movs	r0, #1
 80031a2:	4770      	bx	lr

080031a4 <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 80031a4:	b530      	push	{r4, r5, lr}
 80031a6:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 80031a8:	220c      	movs	r2, #12
 80031aa:	2100      	movs	r1, #0
 80031ac:	a803      	add	r0, sp, #12
 80031ae:	f004 fbc0 	bl	8007932 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b2:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 80031b4:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80031b6:	4d0d      	ldr	r5, [pc, #52]	; (80031ec <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 80031b8:	a901      	add	r1, sp, #4
 80031ba:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 80031bc:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031be:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 80031c0:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80031c2:	f000 fa4d 	bl	8003660 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80031c6:	2200      	movs	r2, #0
 80031c8:	0021      	movs	r1, r4
 80031ca:	0028      	movs	r0, r5
 80031cc:	f000 fb94 	bl	80038f8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80031d0:	0020      	movs	r0, r4
 80031d2:	f7ff fbcb 	bl	800296c <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80031d8:	0028      	movs	r0, r5
 80031da:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 80031dc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80031de:	f000 fa3f 	bl	8003660 <HAL_GPIO_Init>
  HAL_Delay(6);
 80031e2:	2006      	movs	r0, #6
 80031e4:	f7ff fbc2 	bl	800296c <HAL_Delay>
}
 80031e8:	b007      	add	sp, #28
 80031ea:	bd30      	pop	{r4, r5, pc}
 80031ec:	50000800 	.word	0x50000800

080031f0 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 80031f0:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 80031f2:	f7ff fd95 	bl	8002d20 <BSP_SPI1_Init>
}
 80031f6:	bd10      	pop	{r4, pc}

080031f8 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 80031f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80031fa:	240e      	movs	r4, #14
{
 80031fc:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80031fe:	446c      	add	r4, sp
{
 8003200:	80d8      	strh	r0, [r3, #6]
 8003202:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8003204:	2201      	movs	r2, #1
 8003206:	0021      	movs	r1, r4
 8003208:	0018      	movs	r0, r3
 800320a:	f7ff fd45 	bl	8002c98 <BSP_SPI1_SendRecv>
  return rxData;
 800320e:	8820      	ldrh	r0, [r4, #0]
}
 8003210:	b004      	add	sp, #16
 8003212:	bd10      	pop	{r4, pc}

08003214 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 8003214:	0002      	movs	r2, r0
 8003216:	b510      	push	{r4, lr}
  if (state == 0)
 8003218:	2800      	cmp	r0, #0
 800321a:	d106      	bne.n	800322a <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	20a0      	movs	r0, #160	; 0xa0
 8003220:	0209      	lsls	r1, r1, #8
 8003222:	05c0      	lsls	r0, r0, #23
 8003224:	f000 fb68 	bl	80038f8 <HAL_GPIO_WritePin>
}
 8003228:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800322a:	2201      	movs	r2, #1
 800322c:	e7f6      	b.n	800321c <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08003230 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8003230:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8003232:	2102      	movs	r1, #2
 8003234:	4801      	ldr	r0, [pc, #4]	; (800323c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 8003236:	f000 fb59 	bl	80038ec <HAL_GPIO_ReadPin>
}
 800323a:	bd10      	pop	{r4, pc}
 800323c:	50000400 	.word	0x50000400

08003240 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <SystemInit+0x44>)
 8003244:	0052      	lsls	r2, r2, #1
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	490e      	ldr	r1, [pc, #56]	; (8003288 <SystemInit+0x48>)
 8003250:	400a      	ands	r2, r1
 8003252:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	490d      	ldr	r1, [pc, #52]	; (800328c <SystemInit+0x4c>)
 8003258:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800325a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800325c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	438a      	bics	r2, r1
 8003262:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	490a      	ldr	r1, [pc, #40]	; (8003290 <SystemInit+0x50>)
 8003268:	400a      	ands	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	4909      	ldr	r1, [pc, #36]	; (8003294 <SystemInit+0x54>)
 8003270:	400a      	ands	r2, r1
 8003272:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003278:	2280      	movs	r2, #128	; 0x80
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <SystemInit+0x58>)
 800327c:	0512      	lsls	r2, r2, #20
 800327e:	609a      	str	r2, [r3, #8]
#endif
}
 8003280:	4770      	bx	lr
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	40021000 	.word	0x40021000
 8003288:	88ff400c 	.word	0x88ff400c
 800328c:	fef6fff6 	.word	0xfef6fff6
 8003290:	fffbffff 	.word	0xfffbffff
 8003294:	ff02ffff 	.word	0xff02ffff
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800329c:	2302      	movs	r3, #2
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HAL_Init+0x24>)
{
 80032a0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032a2:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032a4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032aa:	f7ff fb59 	bl	8002960 <HAL_InitTick>
 80032ae:	1e04      	subs	r4, r0, #0
 80032b0:	d103      	bne.n	80032ba <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032b2:	f7ff fa59 	bl	8002768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80032b6:	0020      	movs	r0, r4
 80032b8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80032ba:	2401      	movs	r4, #1
 80032bc:	e7fb      	b.n	80032b6 <HAL_Init+0x1a>
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	40022000 	.word	0x40022000

080032c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80032c4:	4a03      	ldr	r2, [pc, #12]	; (80032d4 <HAL_IncTick+0x10>)
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <HAL_IncTick+0x14>)
 80032c8:	6811      	ldr	r1, [r2, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	185b      	adds	r3, r3, r1
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	4770      	bx	lr
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	20000294 	.word	0x20000294
 80032d8:	2000001c 	.word	0x2000001c

080032dc <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80032dc:	2101      	movs	r1, #1
 80032de:	4a02      	ldr	r2, [pc, #8]	; (80032e8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80032e0:	6853      	ldr	r3, [r2, #4]
 80032e2:	438b      	bics	r3, r1
 80032e4:	6053      	str	r3, [r2, #4]
}
 80032e6:	4770      	bx	lr
 80032e8:	40015800 	.word	0x40015800

080032ec <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80032ec:	2102      	movs	r1, #2
 80032ee:	4a02      	ldr	r2, [pc, #8]	; (80032f8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80032f0:	6853      	ldr	r3, [r2, #4]
 80032f2:	438b      	bics	r3, r1
 80032f4:	6053      	str	r3, [r2, #4]
}
 80032f6:	4770      	bx	lr
 80032f8:	40015800 	.word	0x40015800

080032fc <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80032fc:	2104      	movs	r1, #4
 80032fe:	4a02      	ldr	r2, [pc, #8]	; (8003308 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8003300:	6853      	ldr	r3, [r2, #4]
 8003302:	438b      	bics	r3, r1
 8003304:	6053      	str	r3, [r2, #4]
}
 8003306:	4770      	bx	lr
 8003308:	40015800 	.word	0x40015800

0800330c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800330c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800330e:	25ff      	movs	r5, #255	; 0xff
 8003310:	2403      	movs	r4, #3
 8003312:	002a      	movs	r2, r5
 8003314:	4004      	ands	r4, r0
 8003316:	00e4      	lsls	r4, r4, #3
 8003318:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800331a:	0189      	lsls	r1, r1, #6
 800331c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800331e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003320:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003322:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003324:	2800      	cmp	r0, #0
 8003326:	db0a      	blt.n	800333e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003328:	24c0      	movs	r4, #192	; 0xc0
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_NVIC_SetPriority+0x4c>)
 800332c:	0880      	lsrs	r0, r0, #2
 800332e:	0080      	lsls	r0, r0, #2
 8003330:	18c0      	adds	r0, r0, r3
 8003332:	00a4      	lsls	r4, r4, #2
 8003334:	5903      	ldr	r3, [r0, r4]
 8003336:	401a      	ands	r2, r3
 8003338:	4311      	orrs	r1, r2
 800333a:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800333c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800333e:	200f      	movs	r0, #15
 8003340:	4003      	ands	r3, r0
 8003342:	3b08      	subs	r3, #8
 8003344:	4805      	ldr	r0, [pc, #20]	; (800335c <HAL_NVIC_SetPriority+0x50>)
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	181b      	adds	r3, r3, r0
 800334c:	69d8      	ldr	r0, [r3, #28]
 800334e:	4002      	ands	r2, r0
 8003350:	4311      	orrs	r1, r2
 8003352:	61d9      	str	r1, [r3, #28]
 8003354:	e7f2      	b.n	800333c <HAL_NVIC_SetPriority+0x30>
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	e000e100 	.word	0xe000e100
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003360:	2800      	cmp	r0, #0
 8003362:	db05      	blt.n	8003370 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003364:	231f      	movs	r3, #31
 8003366:	4018      	ands	r0, r3
 8003368:	3b1e      	subs	r3, #30
 800336a:	4083      	lsls	r3, r0
 800336c:	4a01      	ldr	r2, [pc, #4]	; (8003374 <HAL_NVIC_EnableIRQ+0x14>)
 800336e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003370:	4770      	bx	lr
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	e000e100 	.word	0xe000e100

08003378 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003378:	2800      	cmp	r0, #0
 800337a:	db09      	blt.n	8003390 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337c:	231f      	movs	r3, #31
 800337e:	4018      	ands	r0, r3
 8003380:	3b1e      	subs	r3, #30
 8003382:	4083      	lsls	r3, r0
 8003384:	4a03      	ldr	r2, [pc, #12]	; (8003394 <HAL_NVIC_DisableIRQ+0x1c>)
 8003386:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800338c:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003390:	4770      	bx	lr
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	e000e104 	.word	0xe000e104

08003398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
  if(hdma == NULL)
 800339e:	2c00      	cmp	r4, #0
 80033a0:	d035      	beq.n	800340e <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033a2:	6825      	ldr	r5, [r4, #0]
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_DMA_Init+0x78>)
 80033a6:	2114      	movs	r1, #20
 80033a8:	18e8      	adds	r0, r5, r3
 80033aa:	f7fc fedd 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80033ae:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033b0:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80033b2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033b4:	2302      	movs	r3, #2
 80033b6:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033b8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ba:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033bc:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033c0:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033c2:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80033c4:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c6:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80033c8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ca:	433b      	orrs	r3, r7
 80033cc:	6967      	ldr	r7, [r4, #20]
 80033ce:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d0:	69a7      	ldr	r7, [r4, #24]
 80033d2:	433b      	orrs	r3, r7
 80033d4:	69e7      	ldr	r7, [r4, #28]
 80033d6:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d8:	6a27      	ldr	r7, [r4, #32]
 80033da:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80033dc:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033de:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	01db      	lsls	r3, r3, #7
 80033e4:	4299      	cmp	r1, r3
 80033e6:	d00c      	beq.n	8003402 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033e8:	251c      	movs	r5, #28
 80033ea:	4028      	ands	r0, r5
 80033ec:	3d0d      	subs	r5, #13
 80033ee:	4085      	lsls	r5, r0
 80033f0:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_DMA_Init+0x84>)
 80033f2:	680b      	ldr	r3, [r1, #0]
 80033f4:	43ab      	bics	r3, r5
 80033f6:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033f8:	6863      	ldr	r3, [r4, #4]
 80033fa:	680d      	ldr	r5, [r1, #0]
 80033fc:	4083      	lsls	r3, r0
 80033fe:	432b      	orrs	r3, r5
 8003400:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003402:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003404:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003406:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003408:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800340a:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 800340c:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800340e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003410:	bffdfff8 	.word	0xbffdfff8
 8003414:	40020000 	.word	0x40020000
 8003418:	ffff800f 	.word	0xffff800f
 800341c:	400200a8 	.word	0x400200a8

08003420 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	2501      	movs	r5, #1
 8003424:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8003426:	0028      	movs	r0, r5
  if (NULL == hdma )
 8003428:	2c00      	cmp	r4, #0
 800342a:	d021      	beq.n	8003470 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800342c:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800342e:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8003430:	6833      	ldr	r3, [r6, #0]
 8003432:	43ab      	bics	r3, r5
 8003434:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <HAL_DMA_DeInit+0x54>)
 8003438:	18f0      	adds	r0, r6, r3
 800343a:	f7fc fe95 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800343e:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003440:	0083      	lsls	r3, r0, #2
 8003442:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003444:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8003446:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003448:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800344a:	390d      	subs	r1, #13
 800344c:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003450:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8003452:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8003454:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003456:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003458:	4d08      	ldr	r5, [pc, #32]	; (800347c <HAL_DMA_DeInit+0x5c>)
 800345a:	682a      	ldr	r2, [r5, #0]
 800345c:	438a      	bics	r2, r1
 800345e:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8003460:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003462:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003464:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003466:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003468:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800346a:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 800346c:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 800346e:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003470:	bd70      	pop	{r4, r5, r6, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	bffdfff8 	.word	0xbffdfff8
 8003478:	40020000 	.word	0x40020000
 800347c:	400200a8 	.word	0x400200a8

08003480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003482:	1d45      	adds	r5, r0, #5
{
 8003484:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8003486:	7feb      	ldrb	r3, [r5, #31]
{
 8003488:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800348a:	2002      	movs	r0, #2
 800348c:	2b01      	cmp	r3, #1
 800348e:	d029      	beq.n	80034e4 <HAL_DMA_Start_IT+0x64>
 8003490:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8003492:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8003494:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003496:	7ffb      	ldrb	r3, [r7, #31]
 8003498:	2600      	movs	r6, #0
 800349a:	469c      	mov	ip, r3
 800349c:	4660      	mov	r0, ip
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2801      	cmp	r0, #1
 80034a2:	d12a      	bne.n	80034fa <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a4:	3001      	adds	r0, #1
 80034a6:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034a8:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034aa:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034ac:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80034ae:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034b0:	361c      	adds	r6, #28
 80034b2:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 80034b4:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034b6:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 80034b8:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034ba:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80034bc:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034be:	9b01      	ldr	r3, [sp, #4]
 80034c0:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c2:	68a3      	ldr	r3, [r4, #8]
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d10e      	bne.n	80034e6 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034c8:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ca:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80034cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00c      	beq.n	80034ec <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d2:	230e      	movs	r3, #14
 80034d4:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034d6:	4313      	orrs	r3, r2
 80034d8:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80034da:	2301      	movs	r3, #1
 80034dc:	6802      	ldr	r2, [r0, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2000      	movs	r0, #0
}
 80034e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80034e6:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80034e8:	60c2      	str	r2, [r0, #12]
 80034ea:	e7ef      	b.n	80034cc <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ec:	2204      	movs	r2, #4
 80034ee:	6803      	ldr	r3, [r0, #0]
 80034f0:	4393      	bics	r3, r2
 80034f2:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034f4:	6802      	ldr	r2, [r0, #0]
 80034f6:	230a      	movs	r3, #10
 80034f8:	e7ed      	b.n	80034d6 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 80034fa:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 80034fc:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 80034fe:	e7f1      	b.n	80034e4 <HAL_DMA_Start_IT+0x64>

08003500 <HAL_DMA_Abort>:
{
 8003500:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003502:	1d85      	adds	r5, r0, #6
 8003504:	7feb      	ldrb	r3, [r5, #31]
 8003506:	1d44      	adds	r4, r0, #5
 8003508:	2b02      	cmp	r3, #2
 800350a:	d005      	beq.n	8003518 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350c:	2304      	movs	r3, #4
 800350e:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003510:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003512:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003514:	77e3      	strb	r3, [r4, #31]
}
 8003516:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003518:	210e      	movs	r1, #14
 800351a:	6803      	ldr	r3, [r0, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	438a      	bics	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003522:	2201      	movs	r2, #1
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	4391      	bics	r1, r2
 8003528:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800352a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800352c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800352e:	201c      	movs	r0, #28
 8003530:	4003      	ands	r3, r0
 8003532:	0010      	movs	r0, r2
 8003534:	4098      	lsls	r0, r3
 8003536:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003538:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800353a:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 800353c:	77e0      	strb	r0, [r4, #31]
    return status;
 800353e:	e7ea      	b.n	8003516 <HAL_DMA_Abort+0x16>

08003540 <HAL_DMA_Abort_IT>:
{
 8003540:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003542:	1d84      	adds	r4, r0, #6
 8003544:	7fe3      	ldrb	r3, [r4, #31]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d004      	beq.n	8003554 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354a:	2304      	movs	r3, #4
 800354c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800354e:	3b03      	subs	r3, #3
}
 8003550:	0018      	movs	r0, r3
 8003552:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003554:	210e      	movs	r1, #14
 8003556:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003558:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	438a      	bics	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003560:	2201      	movs	r2, #1
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	4391      	bics	r1, r2
 8003566:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003568:	231c      	movs	r3, #28
 800356a:	402b      	ands	r3, r5
 800356c:	0015      	movs	r5, r2
 800356e:	409d      	lsls	r5, r3
 8003570:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8003572:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003574:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003576:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003578:	2400      	movs	r4, #0
 800357a:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 800357c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003580:	42a2      	cmp	r2, r4
 8003582:	d0e5      	beq.n	8003550 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003584:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	0023      	movs	r3, r4
 8003588:	e7e2      	b.n	8003550 <HAL_DMA_Abort_IT+0x10>

0800358a <HAL_DMA_IRQHandler>:
{
 800358a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800358c:	221c      	movs	r2, #28
 800358e:	2704      	movs	r7, #4
 8003590:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003592:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003594:	4032      	ands	r2, r6
 8003596:	003e      	movs	r6, r7
 8003598:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800359a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800359c:	6803      	ldr	r3, [r0, #0]
 800359e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80035a0:	4235      	tst	r5, r6
 80035a2:	d00d      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x36>
 80035a4:	423c      	tst	r4, r7
 80035a6:	d00b      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	0692      	lsls	r2, r2, #26
 80035ac:	d402      	bmi.n	80035b4 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	43ba      	bics	r2, r7
 80035b2:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80035b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80035b6:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d019      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80035bc:	4798      	blx	r3
  return;
 80035be:	e017      	b.n	80035f0 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80035c0:	2702      	movs	r7, #2
 80035c2:	003e      	movs	r6, r7
 80035c4:	4096      	lsls	r6, r2
 80035c6:	4235      	tst	r5, r6
 80035c8:	d013      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x68>
 80035ca:	423c      	tst	r4, r7
 80035cc:	d011      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	0692      	lsls	r2, r2, #26
 80035d2:	d406      	bmi.n	80035e2 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035d4:	240a      	movs	r4, #10
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	43a2      	bics	r2, r4
 80035da:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80035dc:	2201      	movs	r2, #1
 80035de:	1d83      	adds	r3, r0, #6
 80035e0:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80035e2:	2200      	movs	r2, #0
 80035e4:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80035e6:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80035e8:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80035ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d1e5      	bne.n	80035bc <HAL_DMA_IRQHandler+0x32>
}
 80035f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80035f2:	2608      	movs	r6, #8
 80035f4:	0037      	movs	r7, r6
 80035f6:	4097      	lsls	r7, r2
 80035f8:	423d      	tst	r5, r7
 80035fa:	d0f9      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x66>
 80035fc:	4234      	tst	r4, r6
 80035fe:	d0f7      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003600:	250e      	movs	r5, #14
 8003602:	681c      	ldr	r4, [r3, #0]
 8003604:	43ac      	bics	r4, r5
 8003606:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003608:	2301      	movs	r3, #1
 800360a:	001c      	movs	r4, r3
 800360c:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800360e:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003610:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003612:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003614:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003616:	2200      	movs	r2, #0
 8003618:	1d43      	adds	r3, r0, #5
 800361a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800361c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800361e:	e7e5      	b.n	80035ec <HAL_DMA_IRQHandler+0x62>

08003620 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003620:	0003      	movs	r3, r0
 8003622:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8003624:	d101      	bne.n	800362a <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003626:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8003628:	4770      	bx	lr
      status = HAL_ERROR;
 800362a:	2001      	movs	r0, #1
 800362c:	e7fc      	b.n	8003628 <HAL_EXTI_RegisterCallback+0x8>

0800362e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800362e:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8003630:	2001      	movs	r0, #1
  if (hexti == NULL)
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8003636:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8003638:	6019      	str	r1, [r3, #0]
  }
}
 800363a:	4770      	bx	lr

0800363c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800363c:	221f      	movs	r2, #31
 800363e:	6803      	ldr	r3, [r0, #0]
{
 8003640:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003642:	401a      	ands	r2, r3
 8003644:	2301      	movs	r3, #1
 8003646:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_EXTI_IRQHandler+0x20>)
 800364a:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 800364c:	420b      	tst	r3, r1
 800364e:	d004      	beq.n	800365a <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8003650:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003652:	6843      	ldr	r3, [r0, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d000      	beq.n	800365a <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8003658:	4798      	blx	r3
    }
  }
}
 800365a:	bd10      	pop	{r4, pc}
 800365c:	40010400 	.word	0x40010400

08003660 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003660:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <HAL_GPIO_Init+0x16c>)
{
 8003662:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003664:	1882      	adds	r2, r0, r2
 8003666:	1e54      	subs	r4, r2, #1
 8003668:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800366a:	2300      	movs	r3, #0
{
 800366c:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800366e:	3205      	adds	r2, #5
{
 8003670:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003672:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003674:	9a02      	ldr	r2, [sp, #8]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	0014      	movs	r4, r2
 800367a:	40dc      	lsrs	r4, r3
 800367c:	d101      	bne.n	8003682 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800367e:	b007      	add	sp, #28
 8003680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003682:	2101      	movs	r1, #1
 8003684:	000d      	movs	r5, r1
 8003686:	0014      	movs	r4, r2
 8003688:	409d      	lsls	r5, r3
 800368a:	402c      	ands	r4, r5
 800368c:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 800368e:	422a      	tst	r2, r5
 8003690:	d100      	bne.n	8003694 <HAL_GPIO_Init+0x34>
 8003692:	e099      	b.n	80037c8 <HAL_GPIO_Init+0x168>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003694:	9a02      	ldr	r2, [sp, #8]
 8003696:	005f      	lsls	r7, r3, #1
 8003698:	6854      	ldr	r4, [r2, #4]
 800369a:	2210      	movs	r2, #16
 800369c:	0026      	movs	r6, r4
 800369e:	4396      	bics	r6, r2
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80036a0:	3a0d      	subs	r2, #13
 80036a2:	40ba      	lsls	r2, r7
 80036a4:	43d2      	mvns	r2, r2
 80036a6:	9203      	str	r2, [sp, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036a8:	0032      	movs	r2, r6
 80036aa:	3a01      	subs	r2, #1
 80036ac:	9604      	str	r6, [sp, #16]
 80036ae:	428a      	cmp	r2, r1
 80036b0:	d80f      	bhi.n	80036d2 <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 80036b2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80036b4:	9a03      	ldr	r2, [sp, #12]
 80036b6:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b8:	9a02      	ldr	r2, [sp, #8]
 80036ba:	68d2      	ldr	r2, [r2, #12]
 80036bc:	40ba      	lsls	r2, r7
 80036be:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80036c0:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80036c2:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c4:	43aa      	bics	r2, r5
 80036c6:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036c8:	0922      	lsrs	r2, r4, #4
 80036ca:	400a      	ands	r2, r1
 80036cc:	409a      	lsls	r2, r3
 80036ce:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80036d0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80036d2:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036d4:	9a03      	ldr	r2, [sp, #12]
 80036d6:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d8:	9a02      	ldr	r2, [sp, #8]
 80036da:	6892      	ldr	r2, [r2, #8]
 80036dc:	40ba      	lsls	r2, r7
 80036de:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80036e0:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036e2:	9a04      	ldr	r2, [sp, #16]
 80036e4:	2a02      	cmp	r2, #2
 80036e6:	d10e      	bne.n	8003706 <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80036e8:	2507      	movs	r5, #7
 80036ea:	210f      	movs	r1, #15
 80036ec:	401d      	ands	r5, r3
 80036ee:	00ad      	lsls	r5, r5, #2
 80036f0:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	0092      	lsls	r2, r2, #2
 80036f6:	1882      	adds	r2, r0, r2
 80036f8:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80036fa:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80036fc:	9902      	ldr	r1, [sp, #8]
 80036fe:	6909      	ldr	r1, [r1, #16]
 8003700:	40a9      	lsls	r1, r5
 8003702:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003704:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8003706:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003708:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370a:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800370c:	402a      	ands	r2, r5
 800370e:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003710:	0022      	movs	r2, r4
 8003712:	4032      	ands	r2, r6
 8003714:	40ba      	lsls	r2, r7
 8003716:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 8003718:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800371a:	00e2      	lsls	r2, r4, #3
 800371c:	d554      	bpl.n	80037c8 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	2701      	movs	r7, #1
 8003720:	4d2b      	ldr	r5, [pc, #172]	; (80037d0 <HAL_GPIO_Init+0x170>)
 8003722:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003724:	433a      	orrs	r2, r7
 8003726:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003728:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <HAL_GPIO_Init+0x174>)
 800372a:	089d      	lsrs	r5, r3, #2
 800372c:	00ad      	lsls	r5, r5, #2
 800372e:	18ad      	adds	r5, r5, r2
 8003730:	68aa      	ldr	r2, [r5, #8]
 8003732:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003734:	001a      	movs	r2, r3
 8003736:	4032      	ands	r2, r6
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	9203      	str	r2, [sp, #12]
 800373c:	220f      	movs	r2, #15
 800373e:	9903      	ldr	r1, [sp, #12]
 8003740:	408a      	lsls	r2, r1
 8003742:	4661      	mov	r1, ip
 8003744:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003746:	22a0      	movs	r2, #160	; 0xa0
 8003748:	05d2      	lsls	r2, r2, #23
 800374a:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800374c:	9104      	str	r1, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800374e:	2200      	movs	r2, #0
 8003750:	4560      	cmp	r0, ip
 8003752:	d011      	beq.n	8003778 <HAL_GPIO_Init+0x118>
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <HAL_GPIO_Init+0x178>)
 8003756:	4694      	mov	ip, r2
 8003758:	003a      	movs	r2, r7
 800375a:	4560      	cmp	r0, ip
 800375c:	d00c      	beq.n	8003778 <HAL_GPIO_Init+0x118>
 800375e:	4f1f      	ldr	r7, [pc, #124]	; (80037dc <HAL_GPIO_Init+0x17c>)
 8003760:	1892      	adds	r2, r2, r2
 8003762:	42b8      	cmp	r0, r7
 8003764:	d008      	beq.n	8003778 <HAL_GPIO_Init+0x118>
 8003766:	4f1e      	ldr	r7, [pc, #120]	; (80037e0 <HAL_GPIO_Init+0x180>)
 8003768:	0032      	movs	r2, r6
 800376a:	42b8      	cmp	r0, r7
 800376c:	d004      	beq.n	8003778 <HAL_GPIO_Init+0x118>
 800376e:	4e1d      	ldr	r6, [pc, #116]	; (80037e4 <HAL_GPIO_Init+0x184>)
 8003770:	3201      	adds	r2, #1
 8003772:	42b0      	cmp	r0, r6
 8003774:	d000      	beq.n	8003778 <HAL_GPIO_Init+0x118>
 8003776:	9a05      	ldr	r2, [sp, #20]
 8003778:	9903      	ldr	r1, [sp, #12]
 800377a:	408a      	lsls	r2, r1
 800377c:	9904      	ldr	r1, [sp, #16]
 800377e:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003780:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003782:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 8003784:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 8003786:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_GPIO_Init+0x188>)
        temp &= ~((uint32_t)iocurrent);
 8003788:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800378a:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 800378c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800378e:	03e1      	lsls	r1, r4, #15
 8003790:	d401      	bmi.n	8003796 <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8003792:	003e      	movs	r6, r7
 8003794:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8003796:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8003798:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 800379a:	9e01      	ldr	r6, [sp, #4]
 800379c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800379e:	03a1      	lsls	r1, r4, #14
 80037a0:	d401      	bmi.n	80037a6 <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 80037a2:	003e      	movs	r6, r7
 80037a4:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80037a6:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80037a8:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 80037aa:	9e01      	ldr	r6, [sp, #4]
 80037ac:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ae:	02e1      	lsls	r1, r4, #11
 80037b0:	d401      	bmi.n	80037b6 <HAL_GPIO_Init+0x156>
        temp &= ~((uint32_t)iocurrent);
 80037b2:	003e      	movs	r6, r7
 80037b4:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80037b6:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80037b8:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80037ba:	9f01      	ldr	r7, [sp, #4]
 80037bc:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037be:	02a1      	lsls	r1, r4, #10
 80037c0:	d401      	bmi.n	80037c6 <HAL_GPIO_Init+0x166>
        temp &= ~((uint32_t)iocurrent);
 80037c2:	402e      	ands	r6, r5
 80037c4:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80037c6:	60d7      	str	r7, [r2, #12]
    position++;
 80037c8:	3301      	adds	r3, #1
 80037ca:	e753      	b.n	8003674 <HAL_GPIO_Init+0x14>
 80037cc:	afffe400 	.word	0xafffe400
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010000 	.word	0x40010000
 80037d8:	50000400 	.word	0x50000400
 80037dc:	50000800 	.word	0x50000800
 80037e0:	50000c00 	.word	0x50000c00
 80037e4:	50001000 	.word	0x50001000
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037ee:	4a38      	ldr	r2, [pc, #224]	; (80038d0 <HAL_GPIO_DeInit+0xe4>)
{
 80037f0:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037f2:	1882      	adds	r2, r0, r2
{
 80037f4:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037f6:	1e51      	subs	r1, r2, #1
 80037f8:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 80037fa:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80037fc:	3205      	adds	r2, #5
 80037fe:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 8003800:	9a02      	ldr	r2, [sp, #8]
 8003802:	40da      	lsrs	r2, r3
 8003804:	d101      	bne.n	800380a <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8003806:	b007      	add	sp, #28
 8003808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800380a:	2701      	movs	r7, #1
 800380c:	003a      	movs	r2, r7
 800380e:	409a      	lsls	r2, r3
 8003810:	9c02      	ldr	r4, [sp, #8]
 8003812:	9201      	str	r2, [sp, #4]
 8003814:	4014      	ands	r4, r2
    if (iocurrent)
 8003816:	9901      	ldr	r1, [sp, #4]
 8003818:	9a02      	ldr	r2, [sp, #8]
 800381a:	420a      	tst	r2, r1
 800381c:	d056      	beq.n	80038cc <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800381e:	4a2d      	ldr	r2, [pc, #180]	; (80038d4 <HAL_GPIO_DeInit+0xe8>)
 8003820:	0899      	lsrs	r1, r3, #2
 8003822:	0089      	lsls	r1, r1, #2
 8003824:	1889      	adds	r1, r1, r2
 8003826:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003828:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 800382a:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800382c:	2203      	movs	r2, #3
 800382e:	4015      	ands	r5, r2
 8003830:	00ad      	lsls	r5, r5, #2
 8003832:	320c      	adds	r2, #12
 8003834:	40aa      	lsls	r2, r5
 8003836:	9203      	str	r2, [sp, #12]
 8003838:	4032      	ands	r2, r6
 800383a:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800383c:	22a0      	movs	r2, #160	; 0xa0
 800383e:	05d2      	lsls	r2, r2, #23
 8003840:	4694      	mov	ip, r2
 8003842:	2200      	movs	r2, #0
 8003844:	4560      	cmp	r0, ip
 8003846:	d011      	beq.n	800386c <HAL_GPIO_DeInit+0x80>
 8003848:	4a23      	ldr	r2, [pc, #140]	; (80038d8 <HAL_GPIO_DeInit+0xec>)
 800384a:	4694      	mov	ip, r2
 800384c:	003a      	movs	r2, r7
 800384e:	4560      	cmp	r0, ip
 8003850:	d00c      	beq.n	800386c <HAL_GPIO_DeInit+0x80>
 8003852:	4f22      	ldr	r7, [pc, #136]	; (80038dc <HAL_GPIO_DeInit+0xf0>)
 8003854:	1892      	adds	r2, r2, r2
 8003856:	42b8      	cmp	r0, r7
 8003858:	d008      	beq.n	800386c <HAL_GPIO_DeInit+0x80>
 800385a:	4f21      	ldr	r7, [pc, #132]	; (80038e0 <HAL_GPIO_DeInit+0xf4>)
 800385c:	3201      	adds	r2, #1
 800385e:	42b8      	cmp	r0, r7
 8003860:	d004      	beq.n	800386c <HAL_GPIO_DeInit+0x80>
 8003862:	4e20      	ldr	r6, [pc, #128]	; (80038e4 <HAL_GPIO_DeInit+0xf8>)
 8003864:	3201      	adds	r2, #1
 8003866:	42b0      	cmp	r0, r6
 8003868:	d000      	beq.n	800386c <HAL_GPIO_DeInit+0x80>
 800386a:	9a05      	ldr	r2, [sp, #20]
 800386c:	40aa      	lsls	r2, r5
 800386e:	9d04      	ldr	r5, [sp, #16]
 8003870:	42aa      	cmp	r2, r5
 8003872:	d110      	bne.n	8003896 <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003874:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <HAL_GPIO_DeInit+0xfc>)
 8003876:	6815      	ldr	r5, [r2, #0]
 8003878:	43a5      	bics	r5, r4
 800387a:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800387c:	6855      	ldr	r5, [r2, #4]
 800387e:	43a5      	bics	r5, r4
 8003880:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003882:	6895      	ldr	r5, [r2, #8]
 8003884:	43a5      	bics	r5, r4
 8003886:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003888:	68d5      	ldr	r5, [r2, #12]
 800388a:	43a5      	bics	r5, r4
 800388c:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800388e:	688a      	ldr	r2, [r1, #8]
 8003890:	9c03      	ldr	r4, [sp, #12]
 8003892:	43a2      	bics	r2, r4
 8003894:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003896:	2103      	movs	r1, #3
 8003898:	005c      	lsls	r4, r3, #1
 800389a:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800389c:	2407      	movs	r4, #7
 800389e:	260f      	movs	r6, #15
 80038a0:	401c      	ands	r4, r3
 80038a2:	00a4      	lsls	r4, r4, #2
 80038a4:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80038a6:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80038a8:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80038aa:	430a      	orrs	r2, r1
 80038ac:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80038ae:	08da      	lsrs	r2, r3, #3
 80038b0:	0092      	lsls	r2, r2, #2
 80038b2:	1882      	adds	r2, r0, r2
 80038b4:	6a15      	ldr	r5, [r2, #32]
 80038b6:	43b5      	bics	r5, r6
 80038b8:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038ba:	68c2      	ldr	r2, [r0, #12]
 80038bc:	438a      	bics	r2, r1
 80038be:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80038c0:	6842      	ldr	r2, [r0, #4]
 80038c2:	43a2      	bics	r2, r4
 80038c4:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80038c6:	6882      	ldr	r2, [r0, #8]
 80038c8:	438a      	bics	r2, r1
 80038ca:	6082      	str	r2, [r0, #8]
    position++;
 80038cc:	3301      	adds	r3, #1
 80038ce:	e797      	b.n	8003800 <HAL_GPIO_DeInit+0x14>
 80038d0:	afffe400 	.word	0xafffe400
 80038d4:	40010000 	.word	0x40010000
 80038d8:	50000400 	.word	0x50000400
 80038dc:	50000800 	.word	0x50000800
 80038e0:	50000c00 	.word	0x50000c00
 80038e4:	50001000 	.word	0x50001000
 80038e8:	40010400 	.word	0x40010400

080038ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ec:	6900      	ldr	r0, [r0, #16]
 80038ee:	4008      	ands	r0, r1
 80038f0:	1e43      	subs	r3, r0, #1
 80038f2:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80038f4:	b2c0      	uxtb	r0, r0
}
 80038f6:	4770      	bx	lr

080038f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038f8:	2a00      	cmp	r2, #0
 80038fa:	d001      	beq.n	8003900 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038fc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80038fe:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003900:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003902:	e7fc      	b.n	80038fe <HAL_GPIO_WritePin+0x6>

08003904 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003904:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003906:	0013      	movs	r3, r2
 8003908:	400b      	ands	r3, r1
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	4391      	bics	r1, r2
 800390e:	4319      	orrs	r1, r3
 8003910:	6181      	str	r1, [r0, #24]
}
 8003912:	4770      	bx	lr

08003914 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8003914:	2110      	movs	r1, #16
 8003916:	4a02      	ldr	r2, [pc, #8]	; (8003920 <HAL_PWR_DisablePVD+0xc>)
 8003918:	6813      	ldr	r3, [r2, #0]
 800391a:	438b      	bics	r3, r1
 800391c:	6013      	str	r3, [r2, #0]
}
 800391e:	4770      	bx	lr
 8003920:	40007000 	.word	0x40007000

08003924 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003924:	4b17      	ldr	r3, [pc, #92]	; (8003984 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8003926:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003928:	4a17      	ldr	r2, [pc, #92]	; (8003988 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800392a:	681e      	ldr	r6, [r3, #0]
{
 800392c:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800392e:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003930:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003932:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003934:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003936:	0080      	lsls	r0, r0, #2
 8003938:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800393a:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 800393c:	4206      	tst	r6, r0
 800393e:	d005      	beq.n	800394c <HAL_PWR_EnterSLEEPMode+0x28>
 8003940:	2a00      	cmp	r2, #0
 8003942:	d003      	beq.n	800394c <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	4e11      	ldr	r6, [pc, #68]	; (800398c <HAL_PWR_EnterSLEEPMode+0x68>)
 8003948:	4030      	ands	r0, r6
 800394a:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800394c:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 800394e:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003950:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003952:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003954:	4d0e      	ldr	r5, [pc, #56]	; (8003990 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8003956:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003958:	6928      	ldr	r0, [r5, #16]
 800395a:	3601      	adds	r6, #1
 800395c:	43b0      	bics	r0, r6
 800395e:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003960:	2901      	cmp	r1, #1
 8003962:	d10b      	bne.n	800397c <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003964:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8003966:	2c00      	cmp	r4, #0
 8003968:	d006      	beq.n	8003978 <HAL_PWR_EnterSLEEPMode+0x54>
 800396a:	2a00      	cmp	r2, #0
 800396c:	d004      	beq.n	8003978 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8003978:	46c0      	nop			; (mov r8, r8)

}
 800397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 800397c:	bf40      	sev
    __WFE();
 800397e:	bf20      	wfe
    __WFE();
 8003980:	bf20      	wfe
 8003982:	e7f0      	b.n	8003966 <HAL_PWR_EnterSLEEPMode+0x42>
 8003984:	40007000 	.word	0x40007000
 8003988:	40010000 	.word	0x40010000
 800398c:	fffffdff 	.word	0xfffffdff
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_PWR_EnterSTOPMode+0x68>)
{
 8003996:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003998:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800399a:	681e      	ldr	r6, [r3, #0]
{
 800399c:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800399e:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80039a0:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80039a2:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80039a4:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80039a6:	0080      	lsls	r0, r0, #2
 80039a8:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80039aa:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 80039ac:	4206      	tst	r6, r0
 80039ae:	d005      	beq.n	80039bc <HAL_PWR_EnterSTOPMode+0x28>
 80039b0:	2a00      	cmp	r2, #0
 80039b2:	d003      	beq.n	80039bc <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	4e13      	ldr	r6, [pc, #76]	; (8003a04 <HAL_PWR_EnterSTOPMode+0x70>)
 80039b8:	4030      	ands	r0, r6
 80039ba:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80039bc:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 80039be:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80039c0:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80039c2:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80039c4:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 80039c6:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80039c8:	480f      	ldr	r0, [pc, #60]	; (8003a08 <HAL_PWR_EnterSTOPMode+0x74>)
 80039ca:	6906      	ldr	r6, [r0, #16]
 80039cc:	4335      	orrs	r5, r6
 80039ce:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80039d0:	2901      	cmp	r1, #1
 80039d2:	d10e      	bne.n	80039f2 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80039d4:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80039d6:	2504      	movs	r5, #4
 80039d8:	6901      	ldr	r1, [r0, #16]
 80039da:	43a9      	bics	r1, r5
 80039dc:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80039de:	2c00      	cmp	r4, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_PWR_EnterSTOPMode+0x5c>
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80039e6:	2280      	movs	r2, #128	; 0x80
 80039e8:	6819      	ldr	r1, [r3, #0]
 80039ea:	0092      	lsls	r2, r2, #2
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
  }
}
 80039f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 80039f2:	bf40      	sev
    __WFE();
 80039f4:	bf20      	wfe
    __WFE();
 80039f6:	bf20      	wfe
 80039f8:	e7ed      	b.n	80039d6 <HAL_PWR_EnterSTOPMode+0x42>
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	40007000 	.word	0x40007000
 8003a00:	40010000 	.word	0x40010000
 8003a04:	fffffdff 	.word	0xfffffdff
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	4a03      	ldr	r2, [pc, #12]	; (8003a1c <HAL_PWREx_EnableFastWakeUp+0x10>)
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	6811      	ldr	r1, [r2, #0]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6013      	str	r3, [r2, #0]
}
 8003a18:	4770      	bx	lr
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	40007000 	.word	0x40007000

08003a20 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	6811      	ldr	r1, [r2, #0]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6013      	str	r3, [r2, #0]
}
 8003a2c:	4770      	bx	lr
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	40007000 	.word	0x40007000

08003a34 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a34:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003a38:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003a3a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003a3c:	4022      	ands	r2, r4
 8003a3e:	2a08      	cmp	r2, #8
 8003a40:	d031      	beq.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x72>
 8003a42:	2a0c      	cmp	r2, #12
 8003a44:	d009      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x26>
 8003a46:	2a04      	cmp	r2, #4
 8003a48:	d125      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a4a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003a4c:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a4e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003a50:	17c0      	asrs	r0, r0, #31
 8003a52:	4018      	ands	r0, r3
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x80>)
 8003a56:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a5a:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a5c:	4816      	ldr	r0, [pc, #88]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a5e:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a60:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a62:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a64:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a66:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a68:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a6c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6e:	4211      	tst	r1, r2
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <HAL_RCC_GetSysClockFreq+0x88>)
 8003a74:	2300      	movs	r3, #0
 8003a76:	2100      	movs	r1, #0
 8003a78:	f7fc fd0c 	bl	8000494 <__aeabi_lmul>
 8003a7c:	0022      	movs	r2, r4
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f7fc fce8 	bl	8000454 <__aeabi_uldivmod>
 8003a84:	e7e8      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2310      	movs	r3, #16
 8003a8a:	421a      	tst	r2, r3
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003a8e:	4a0c      	ldr	r2, [pc, #48]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003a90:	e7f0      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a92:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x80>)
 8003a94:	e7ee      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a96:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a98:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a9a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	4098      	lsls	r0, r3
      break;
 8003aa4:	e7d8      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa6:	4805      	ldr	r0, [pc, #20]	; (8003abc <HAL_RCC_GetSysClockFreq+0x88>)
 8003aa8:	e7d6      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x24>
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	ff48e500 	.word	0xff48e500
 8003ab4:	00f42400 	.word	0x00f42400
 8003ab8:	08007a5c 	.word	0x08007a5c
 8003abc:	007a1200 	.word	0x007a1200
 8003ac0:	003d0900 	.word	0x003d0900

08003ac4 <HAL_RCC_OscConfig>:
{
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac6:	0005      	movs	r5, r0
 8003ac8:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d05a      	beq.n	8003b84 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	230c      	movs	r3, #12
 8003ad0:	4cb8      	ldr	r4, [pc, #736]	; (8003db4 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad2:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad6:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	025b      	lsls	r3, r3, #9
 8003ade:	0019      	movs	r1, r3
 8003ae0:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	07d2      	lsls	r2, r2, #31
 8003ae4:	d442      	bmi.n	8003b6c <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae6:	682b      	ldr	r3, [r5, #0]
 8003ae8:	079b      	lsls	r3, r3, #30
 8003aea:	d500      	bpl.n	8003aee <HAL_RCC_OscConfig+0x2a>
 8003aec:	e08b      	b.n	8003c06 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aee:	682b      	ldr	r3, [r5, #0]
 8003af0:	06db      	lsls	r3, r3, #27
 8003af2:	d529      	bpl.n	8003b48 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003af4:	2e00      	cmp	r6, #0
 8003af6:	d000      	beq.n	8003afa <HAL_RCC_OscConfig+0x36>
 8003af8:	e0e4      	b.n	8003cc4 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	059b      	lsls	r3, r3, #22
 8003afe:	d502      	bpl.n	8003b06 <HAL_RCC_OscConfig+0x42>
 8003b00:	69eb      	ldr	r3, [r5, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d03e      	beq.n	8003b84 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b06:	6862      	ldr	r2, [r4, #4]
 8003b08:	49ab      	ldr	r1, [pc, #684]	; (8003db8 <HAL_RCC_OscConfig+0x2f4>)
 8003b0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b12:	6861      	ldr	r1, [r4, #4]
 8003b14:	6a2a      	ldr	r2, [r5, #32]
 8003b16:	0209      	lsls	r1, r1, #8
 8003b18:	0a09      	lsrs	r1, r1, #8
 8003b1a:	0612      	lsls	r2, r2, #24
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b20:	2280      	movs	r2, #128	; 0x80
 8003b22:	0b5b      	lsrs	r3, r3, #13
 8003b24:	3301      	adds	r3, #1
 8003b26:	0212      	lsls	r2, r2, #8
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003b2c:	68e1      	ldr	r1, [r4, #12]
 8003b2e:	060a      	lsls	r2, r1, #24
 8003b30:	49a2      	ldr	r1, [pc, #648]	; (8003dbc <HAL_RCC_OscConfig+0x2f8>)
 8003b32:	0f12      	lsrs	r2, r2, #28
 8003b34:	5c8a      	ldrb	r2, [r1, r2]
 8003b36:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b38:	4aa1      	ldr	r2, [pc, #644]	; (8003dc0 <HAL_RCC_OscConfig+0x2fc>)
 8003b3a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003b3c:	4ba1      	ldr	r3, [pc, #644]	; (8003dc4 <HAL_RCC_OscConfig+0x300>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	f7fe ff0e 	bl	8002960 <HAL_InitTick>
        if(status != HAL_OK)
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d134      	bne.n	8003bb2 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	071b      	lsls	r3, r3, #28
 8003b4c:	d500      	bpl.n	8003b50 <HAL_RCC_OscConfig+0x8c>
 8003b4e:	e0f0      	b.n	8003d32 <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	075b      	lsls	r3, r3, #29
 8003b54:	d500      	bpl.n	8003b58 <HAL_RCC_OscConfig+0x94>
 8003b56:	e112      	b.n	8003d7e <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	069b      	lsls	r3, r3, #26
 8003b5c:	d500      	bpl.n	8003b60 <HAL_RCC_OscConfig+0x9c>
 8003b5e:	e196      	b.n	8003e8e <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b60:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d000      	beq.n	8003b68 <HAL_RCC_OscConfig+0xa4>
 8003b66:	e1c5      	b.n	8003ef4 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8003b68:	2000      	movs	r0, #0
 8003b6a:	e022      	b.n	8003bb2 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b6c:	2e08      	cmp	r6, #8
 8003b6e:	d003      	beq.n	8003b78 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b70:	2e0c      	cmp	r6, #12
 8003b72:	d109      	bne.n	8003b88 <HAL_RCC_OscConfig+0xc4>
 8003b74:	2f00      	cmp	r7, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	039b      	lsls	r3, r3, #14
 8003b7c:	d5b3      	bpl.n	8003ae6 <HAL_RCC_OscConfig+0x22>
 8003b7e:	686b      	ldr	r3, [r5, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1b0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8003b84:	2001      	movs	r0, #1
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b88:	686a      	ldr	r2, [r5, #4]
 8003b8a:	428a      	cmp	r2, r1
 8003b8c:	d113      	bne.n	8003bb6 <HAL_RCC_OscConfig+0xf2>
 8003b8e:	6822      	ldr	r2, [r4, #0]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003b94:	f7fe fee6 	bl	8002964 <HAL_GetTick>
 8003b98:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	0292      	lsls	r2, r2, #10
 8003ba0:	4213      	tst	r3, r2
 8003ba2:	d1a0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fede 	bl	8002964 <HAL_GetTick>
 8003ba8:	9b00      	ldr	r3, [sp, #0]
 8003baa:	1ac0      	subs	r0, r0, r3
 8003bac:	2864      	cmp	r0, #100	; 0x64
 8003bae:	d9f4      	bls.n	8003b9a <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8003bb0:	2003      	movs	r0, #3
}
 8003bb2:	b005      	add	sp, #20
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb6:	21a0      	movs	r1, #160	; 0xa0
 8003bb8:	02c9      	lsls	r1, r1, #11
 8003bba:	428a      	cmp	r2, r1
 8003bbc:	d105      	bne.n	8003bca <HAL_RCC_OscConfig+0x106>
 8003bbe:	2280      	movs	r2, #128	; 0x80
 8003bc0:	6821      	ldr	r1, [r4, #0]
 8003bc2:	02d2      	lsls	r2, r2, #11
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	6022      	str	r2, [r4, #0]
 8003bc8:	e7e1      	b.n	8003b8e <HAL_RCC_OscConfig+0xca>
 8003bca:	6821      	ldr	r1, [r4, #0]
 8003bcc:	487e      	ldr	r0, [pc, #504]	; (8003dc8 <HAL_RCC_OscConfig+0x304>)
 8003bce:	4001      	ands	r1, r0
 8003bd0:	6021      	str	r1, [r4, #0]
 8003bd2:	6821      	ldr	r1, [r4, #0]
 8003bd4:	400b      	ands	r3, r1
 8003bd6:	9303      	str	r3, [sp, #12]
 8003bd8:	9b03      	ldr	r3, [sp, #12]
 8003bda:	497c      	ldr	r1, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x308>)
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	400b      	ands	r3, r1
 8003be0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be2:	2a00      	cmp	r2, #0
 8003be4:	d1d6      	bne.n	8003b94 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8003be6:	f7fe febd 	bl	8002964 <HAL_GetTick>
 8003bea:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	0292      	lsls	r2, r2, #10
 8003bf2:	4213      	tst	r3, r2
 8003bf4:	d100      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x134>
 8003bf6:	e776      	b.n	8003ae6 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fe feb4 	bl	8002964 <HAL_GetTick>
 8003bfc:	9b00      	ldr	r3, [sp, #0]
 8003bfe:	1ac0      	subs	r0, r0, r3
 8003c00:	2864      	cmp	r0, #100	; 0x64
 8003c02:	d9f3      	bls.n	8003bec <HAL_RCC_OscConfig+0x128>
 8003c04:	e7d4      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003c06:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003c08:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003c0a:	4213      	tst	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003c0e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003c10:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003c12:	4311      	orrs	r1, r2
 8003c14:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c16:	2e04      	cmp	r6, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c1a:	2e0c      	cmp	r6, #12
 8003c1c:	d124      	bne.n	8003c68 <HAL_RCC_OscConfig+0x1a4>
 8003c1e:	2f00      	cmp	r7, #0
 8003c20:	d122      	bne.n	8003c68 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	0752      	lsls	r2, r2, #29
 8003c26:	d501      	bpl.n	8003c2c <HAL_RCC_OscConfig+0x168>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ab      	beq.n	8003b84 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2c:	6861      	ldr	r1, [r4, #4]
 8003c2e:	692a      	ldr	r2, [r5, #16]
 8003c30:	4867      	ldr	r0, [pc, #412]	; (8003dd0 <HAL_RCC_OscConfig+0x30c>)
 8003c32:	0212      	lsls	r2, r2, #8
 8003c34:	4001      	ands	r1, r0
 8003c36:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c38:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	438a      	bics	r2, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c44:	f7ff fef6 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8003c48:	68e3      	ldr	r3, [r4, #12]
 8003c4a:	4a5c      	ldr	r2, [pc, #368]	; (8003dbc <HAL_RCC_OscConfig+0x2f8>)
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	0f1b      	lsrs	r3, r3, #28
 8003c50:	5cd3      	ldrb	r3, [r2, r3]
 8003c52:	40d8      	lsrs	r0, r3
 8003c54:	4b5a      	ldr	r3, [pc, #360]	; (8003dc0 <HAL_RCC_OscConfig+0x2fc>)
 8003c56:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003c58:	4b5a      	ldr	r3, [pc, #360]	; (8003dc4 <HAL_RCC_OscConfig+0x300>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	f7fe fe80 	bl	8002960 <HAL_InitTick>
      if(status != HAL_OK)
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d100      	bne.n	8003c66 <HAL_RCC_OscConfig+0x1a2>
 8003c64:	e743      	b.n	8003aee <HAL_RCC_OscConfig+0x2a>
 8003c66:	e7a4      	b.n	8003bb2 <HAL_RCC_OscConfig+0xee>
      if(hsi_state != RCC_HSI_OFF)
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d019      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c6c:	2109      	movs	r1, #9
 8003c6e:	6822      	ldr	r2, [r4, #0]
 8003c70:	438a      	bics	r2, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c76:	f7fe fe75 	bl	8002964 <HAL_GetTick>
 8003c7a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	4213      	tst	r3, r2
 8003c82:	d007      	beq.n	8003c94 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	6862      	ldr	r2, [r4, #4]
 8003c86:	692b      	ldr	r3, [r5, #16]
 8003c88:	4951      	ldr	r1, [pc, #324]	; (8003dd0 <HAL_RCC_OscConfig+0x30c>)
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	6063      	str	r3, [r4, #4]
 8003c92:	e72c      	b.n	8003aee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c94:	f7fe fe66 	bl	8002964 <HAL_GetTick>
 8003c98:	1bc0      	subs	r0, r0, r7
 8003c9a:	2802      	cmp	r0, #2
 8003c9c:	d9ee      	bls.n	8003c7c <HAL_RCC_OscConfig+0x1b8>
 8003c9e:	e787      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ca8:	f7fe fe5c 	bl	8002964 <HAL_GetTick>
 8003cac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cae:	2204      	movs	r2, #4
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	4213      	tst	r3, r2
 8003cb4:	d100      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x1f4>
 8003cb6:	e71a      	b.n	8003aee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb8:	f7fe fe54 	bl	8002964 <HAL_GetTick>
 8003cbc:	1bc0      	subs	r0, r0, r7
 8003cbe:	2802      	cmp	r0, #2
 8003cc0:	d9f5      	bls.n	8003cae <HAL_RCC_OscConfig+0x1ea>
 8003cc2:	e775      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cc4:	69eb      	ldr	r3, [r5, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d020      	beq.n	8003d0c <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fe46 	bl	8002964 <HAL_GetTick>
 8003cd8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	0092      	lsls	r2, r2, #2
 8003ce0:	4213      	tst	r3, r2
 8003ce2:	d00d      	beq.n	8003d00 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <HAL_RCC_OscConfig+0x2f4>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003cec:	4313      	orrs	r3, r2
 8003cee:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf0:	6862      	ldr	r2, [r4, #4]
 8003cf2:	6a2b      	ldr	r3, [r5, #32]
 8003cf4:	0212      	lsls	r2, r2, #8
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	0a12      	lsrs	r2, r2, #8
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	6063      	str	r3, [r4, #4]
 8003cfe:	e723      	b.n	8003b48 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d00:	f7fe fe30 	bl	8002964 <HAL_GetTick>
 8003d04:	1bc0      	subs	r0, r0, r7
 8003d06:	2802      	cmp	r0, #2
 8003d08:	d9e7      	bls.n	8003cda <HAL_RCC_OscConfig+0x216>
 8003d0a:	e751      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <HAL_RCC_OscConfig+0x310>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003d14:	f7fe fe26 	bl	8002964 <HAL_GetTick>
 8003d18:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d1a:	2280      	movs	r2, #128	; 0x80
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	0092      	lsls	r2, r2, #2
 8003d20:	4213      	tst	r3, r2
 8003d22:	d100      	bne.n	8003d26 <HAL_RCC_OscConfig+0x262>
 8003d24:	e710      	b.n	8003b48 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d26:	f7fe fe1d 	bl	8002964 <HAL_GetTick>
 8003d2a:	1bc0      	subs	r0, r0, r7
 8003d2c:	2802      	cmp	r0, #2
 8003d2e:	d9f4      	bls.n	8003d1a <HAL_RCC_OscConfig+0x256>
 8003d30:	e73e      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d32:	696a      	ldr	r2, [r5, #20]
 8003d34:	2301      	movs	r3, #1
 8003d36:	2a00      	cmp	r2, #0
 8003d38:	d010      	beq.n	8003d5c <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8003d3a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d40:	f7fe fe10 	bl	8002964 <HAL_GetTick>
 8003d44:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d46:	2202      	movs	r2, #2
 8003d48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d4a:	4213      	tst	r3, r2
 8003d4c:	d000      	beq.n	8003d50 <HAL_RCC_OscConfig+0x28c>
 8003d4e:	e6ff      	b.n	8003b50 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d50:	f7fe fe08 	bl	8002964 <HAL_GetTick>
 8003d54:	1bc0      	subs	r0, r0, r7
 8003d56:	2802      	cmp	r0, #2
 8003d58:	d9f5      	bls.n	8003d46 <HAL_RCC_OscConfig+0x282>
 8003d5a:	e729      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8003d5c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003d5e:	439a      	bics	r2, r3
 8003d60:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d62:	f7fe fdff 	bl	8002964 <HAL_GetTick>
 8003d66:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d68:	2202      	movs	r2, #2
 8003d6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d6c:	4213      	tst	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <HAL_RCC_OscConfig+0x2ae>
 8003d70:	e6ee      	b.n	8003b50 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d72:	f7fe fdf7 	bl	8002964 <HAL_GetTick>
 8003d76:	1bc0      	subs	r0, r0, r7
 8003d78:	2802      	cmp	r0, #2
 8003d7a:	d9f5      	bls.n	8003d68 <HAL_RCC_OscConfig+0x2a4>
 8003d7c:	e718      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003d80:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d84:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d88:	421a      	tst	r2, r3
 8003d8a:	d104      	bne.n	8003d96 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	2280      	movs	r2, #128	; 0x80
 8003d98:	4f0f      	ldr	r7, [pc, #60]	; (8003dd8 <HAL_RCC_OscConfig+0x314>)
 8003d9a:	0052      	lsls	r2, r2, #1
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	4213      	tst	r3, r2
 8003da0:	d01c      	beq.n	8003ddc <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da2:	2280      	movs	r2, #128	; 0x80
 8003da4:	68ab      	ldr	r3, [r5, #8]
 8003da6:	0052      	lsls	r2, r2, #1
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d12b      	bne.n	8003e04 <HAL_RCC_OscConfig+0x340>
 8003dac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003dae:	4313      	orrs	r3, r2
 8003db0:	6523      	str	r3, [r4, #80]	; 0x50
 8003db2:	e04c      	b.n	8003e4e <HAL_RCC_OscConfig+0x38a>
 8003db4:	40021000 	.word	0x40021000
 8003db8:	ffff1fff 	.word	0xffff1fff
 8003dbc:	08007a65 	.word	0x08007a65
 8003dc0:	20000018 	.word	0x20000018
 8003dc4:	20000020 	.word	0x20000020
 8003dc8:	fffeffff 	.word	0xfffeffff
 8003dcc:	fffbffff 	.word	0xfffbffff
 8003dd0:	ffffe0ff 	.word	0xffffe0ff
 8003dd4:	fffffeff 	.word	0xfffffeff
 8003dd8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ddc:	2280      	movs	r2, #128	; 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	0052      	lsls	r2, r2, #1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003de6:	f7fe fdbd 	bl	8002964 <HAL_GetTick>
 8003dea:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	0052      	lsls	r2, r2, #1
 8003df2:	4213      	tst	r3, r2
 8003df4:	d1d5      	bne.n	8003da2 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df6:	f7fe fdb5 	bl	8002964 <HAL_GetTick>
 8003dfa:	9b01      	ldr	r3, [sp, #4]
 8003dfc:	1ac0      	subs	r0, r0, r3
 8003dfe:	2864      	cmp	r0, #100	; 0x64
 8003e00:	d9f4      	bls.n	8003dec <HAL_RCC_OscConfig+0x328>
 8003e02:	e6d5      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d116      	bne.n	8003e36 <HAL_RCC_OscConfig+0x372>
 8003e08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e0a:	4a6b      	ldr	r2, [pc, #428]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	6523      	str	r3, [r4, #80]	; 0x50
 8003e10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e12:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_RCC_OscConfig+0x4f8>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003e18:	f7fe fda4 	bl	8002964 <HAL_GetTick>
 8003e1c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e22:	0092      	lsls	r2, r2, #2
 8003e24:	4213      	tst	r3, r2
 8003e26:	d01a      	beq.n	8003e5e <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fe fd9c 	bl	8002964 <HAL_GetTick>
 8003e2c:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_RCC_OscConfig+0x4fc>)
 8003e2e:	1bc0      	subs	r0, r0, r7
 8003e30:	4298      	cmp	r0, r3
 8003e32:	d9f4      	bls.n	8003e1e <HAL_RCC_OscConfig+0x35a>
 8003e34:	e6bc      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e36:	21a0      	movs	r1, #160	; 0xa0
 8003e38:	00c9      	lsls	r1, r1, #3
 8003e3a:	428b      	cmp	r3, r1
 8003e3c:	d118      	bne.n	8003e70 <HAL_RCC_OscConfig+0x3ac>
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6523      	str	r3, [r4, #80]	; 0x50
 8003e48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003e4e:	f7fe fd89 	bl	8002964 <HAL_GetTick>
 8003e52:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e58:	0092      	lsls	r2, r2, #2
 8003e5a:	4213      	tst	r3, r2
 8003e5c:	d010      	beq.n	8003e80 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 8003e5e:	9b00      	ldr	r3, [sp, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d000      	beq.n	8003e66 <HAL_RCC_OscConfig+0x3a2>
 8003e64:	e678      	b.n	8003b58 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e68:	4a56      	ldr	r2, [pc, #344]	; (8003fc4 <HAL_RCC_OscConfig+0x500>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003e6e:	e673      	b.n	8003b58 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e72:	4a51      	ldr	r2, [pc, #324]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	6523      	str	r3, [r4, #80]	; 0x50
 8003e78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e7a:	4a50      	ldr	r2, [pc, #320]	; (8003fbc <HAL_RCC_OscConfig+0x4f8>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	e797      	b.n	8003db0 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fe fd70 	bl	8002964 <HAL_GetTick>
 8003e84:	4b4e      	ldr	r3, [pc, #312]	; (8003fc0 <HAL_RCC_OscConfig+0x4fc>)
 8003e86:	1bc0      	subs	r0, r0, r7
 8003e88:	4298      	cmp	r0, r3
 8003e8a:	d9e3      	bls.n	8003e54 <HAL_RCC_OscConfig+0x390>
 8003e8c:	e690      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e8e:	69a9      	ldr	r1, [r5, #24]
 8003e90:	2301      	movs	r3, #1
 8003e92:	4a4d      	ldr	r2, [pc, #308]	; (8003fc8 <HAL_RCC_OscConfig+0x504>)
 8003e94:	2900      	cmp	r1, #0
 8003e96:	d018      	beq.n	8003eca <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8003e98:	68a1      	ldr	r1, [r4, #8]
 8003e9a:	4319      	orrs	r1, r3
 8003e9c:	60a1      	str	r1, [r4, #8]
 8003e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6363      	str	r3, [r4, #52]	; 0x34
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	6a11      	ldr	r1, [r2, #32]
 8003ea8:	019b      	lsls	r3, r3, #6
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003eae:	f7fe fd59 	bl	8002964 <HAL_GetTick>
 8003eb2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	68a3      	ldr	r3, [r4, #8]
 8003eb8:	4213      	tst	r3, r2
 8003eba:	d000      	beq.n	8003ebe <HAL_RCC_OscConfig+0x3fa>
 8003ebc:	e650      	b.n	8003b60 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ebe:	f7fe fd51 	bl	8002964 <HAL_GetTick>
 8003ec2:	1bc0      	subs	r0, r0, r7
 8003ec4:	2802      	cmp	r0, #2
 8003ec6:	d9f5      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3f0>
 8003ec8:	e672      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 8003eca:	68a1      	ldr	r1, [r4, #8]
 8003ecc:	4399      	bics	r1, r3
 8003ece:	60a1      	str	r1, [r4, #8]
 8003ed0:	6a13      	ldr	r3, [r2, #32]
 8003ed2:	493e      	ldr	r1, [pc, #248]	; (8003fcc <HAL_RCC_OscConfig+0x508>)
 8003ed4:	400b      	ands	r3, r1
 8003ed6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fd44 	bl	8002964 <HAL_GetTick>
 8003edc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ede:	2202      	movs	r2, #2
 8003ee0:	68a3      	ldr	r3, [r4, #8]
 8003ee2:	4213      	tst	r3, r2
 8003ee4:	d100      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x424>
 8003ee6:	e63b      	b.n	8003b60 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee8:	f7fe fd3c 	bl	8002964 <HAL_GetTick>
 8003eec:	1bc0      	subs	r0, r0, r7
 8003eee:	2802      	cmp	r0, #2
 8003ef0:	d9f5      	bls.n	8003ede <HAL_RCC_OscConfig+0x41a>
 8003ef2:	e65d      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef4:	2e0c      	cmp	r6, #12
 8003ef6:	d043      	beq.n	8003f80 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef8:	4a35      	ldr	r2, [pc, #212]	; (8003fd0 <HAL_RCC_OscConfig+0x50c>)
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d12e      	bne.n	8003f5c <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 8003efe:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f00:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003f02:	4013      	ands	r3, r2
 8003f04:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f06:	f7fe fd2d 	bl	8002964 <HAL_GetTick>
 8003f0a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f0c:	04bf      	lsls	r7, r7, #18
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	423b      	tst	r3, r7
 8003f12:	d11d      	bne.n	8003f50 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f14:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003f16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f18:	68e2      	ldr	r2, [r4, #12]
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	492d      	ldr	r1, [pc, #180]	; (8003fd4 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f1e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f20:	400a      	ands	r2, r1
 8003f22:	4313      	orrs	r3, r2
 8003f24:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f26:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	045b      	lsls	r3, r3, #17
 8003f32:	4313      	orrs	r3, r2
 8003f34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f36:	f7fe fd15 	bl	8002964 <HAL_GetTick>
 8003f3a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	4233      	tst	r3, r6
 8003f40:	d000      	beq.n	8003f44 <HAL_RCC_OscConfig+0x480>
 8003f42:	e611      	b.n	8003b68 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fe fd0e 	bl	8002964 <HAL_GetTick>
 8003f48:	1b40      	subs	r0, r0, r5
 8003f4a:	2802      	cmp	r0, #2
 8003f4c:	d9f6      	bls.n	8003f3c <HAL_RCC_OscConfig+0x478>
 8003f4e:	e62f      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fe fd08 	bl	8002964 <HAL_GetTick>
 8003f54:	1b80      	subs	r0, r0, r6
 8003f56:	2802      	cmp	r0, #2
 8003f58:	d9d9      	bls.n	8003f0e <HAL_RCC_OscConfig+0x44a>
 8003f5a:	e629      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8003f5c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f5e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4013      	ands	r3, r2
 8003f62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f64:	f7fe fcfe 	bl	8002964 <HAL_GetTick>
 8003f68:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f6a:	04b6      	lsls	r6, r6, #18
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	4233      	tst	r3, r6
 8003f70:	d100      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4b0>
 8003f72:	e5f9      	b.n	8003b68 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fe fcf6 	bl	8002964 <HAL_GetTick>
 8003f78:	1b40      	subs	r0, r0, r5
 8003f7a:	2802      	cmp	r0, #2
 8003f7c:	d9f6      	bls.n	8003f6c <HAL_RCC_OscConfig+0x4a8>
 8003f7e:	e617      	b.n	8003bb0 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8003f80:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d100      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4c4>
 8003f86:	e614      	b.n	8003bb2 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f88:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003f8a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003f8e:	0252      	lsls	r2, r2, #9
 8003f90:	401a      	ands	r2, r3
 8003f92:	428a      	cmp	r2, r1
 8003f94:	d000      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4d4>
 8003f96:	e5f5      	b.n	8003b84 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f98:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f9c:	0392      	lsls	r2, r2, #14
 8003f9e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa0:	428a      	cmp	r2, r1
 8003fa2:	d000      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
 8003fa4:	e5ee      	b.n	8003b84 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003fa6:	22c0      	movs	r2, #192	; 0xc0
 8003fa8:	0412      	lsls	r2, r2, #16
 8003faa:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d100      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4f0>
 8003fb2:	e5d9      	b.n	8003b68 <HAL_RCC_OscConfig+0xa4>
 8003fb4:	e5e6      	b.n	8003b84 <HAL_RCC_OscConfig+0xc0>
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	fffffeff 	.word	0xfffffeff
 8003fbc:	fffffbff 	.word	0xfffffbff
 8003fc0:	00001388 	.word	0x00001388
 8003fc4:	efffffff 	.word	0xefffffff
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	ffffdfff 	.word	0xffffdfff
 8003fd0:	feffffff 	.word	0xfeffffff
 8003fd4:	ff02ffff 	.word	0xff02ffff

08003fd8 <HAL_RCC_ClockConfig>:
{
 8003fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fda:	1e04      	subs	r4, r0, #0
 8003fdc:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8003fe0:	2001      	movs	r0, #1
}
 8003fe2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe4:	2501      	movs	r5, #1
 8003fe6:	4e5b      	ldr	r6, [pc, #364]	; (8004154 <HAL_RCC_ClockConfig+0x17c>)
 8003fe8:	9a01      	ldr	r2, [sp, #4]
 8003fea:	6833      	ldr	r3, [r6, #0]
 8003fec:	402b      	ands	r3, r5
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d331      	bcc.n	8004056 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff2:	6822      	ldr	r2, [r4, #0]
 8003ff4:	0793      	lsls	r3, r2, #30
 8003ff6:	d443      	bmi.n	8004080 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff8:	07d3      	lsls	r3, r2, #31
 8003ffa:	d449      	bmi.n	8004090 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	2501      	movs	r5, #1
 8003ffe:	6833      	ldr	r3, [r6, #0]
 8004000:	9a01      	ldr	r2, [sp, #4]
 8004002:	402b      	ands	r3, r5
 8004004:	4293      	cmp	r3, r2
 8004006:	d909      	bls.n	800401c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004008:	6833      	ldr	r3, [r6, #0]
 800400a:	43ab      	bics	r3, r5
 800400c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800400e:	f7fe fca9 	bl	8002964 <HAL_GetTick>
 8004012:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004014:	6833      	ldr	r3, [r6, #0]
 8004016:	422b      	tst	r3, r5
 8004018:	d000      	beq.n	800401c <HAL_RCC_ClockConfig+0x44>
 800401a:	e08c      	b.n	8004136 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	4d4e      	ldr	r5, [pc, #312]	; (8004158 <HAL_RCC_ClockConfig+0x180>)
 8004020:	0753      	lsls	r3, r2, #29
 8004022:	d500      	bpl.n	8004026 <HAL_RCC_ClockConfig+0x4e>
 8004024:	e08f      	b.n	8004146 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004026:	0713      	lsls	r3, r2, #28
 8004028:	d506      	bpl.n	8004038 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800402a:	68e9      	ldr	r1, [r5, #12]
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	4a4b      	ldr	r2, [pc, #300]	; (800415c <HAL_RCC_ClockConfig+0x184>)
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	400a      	ands	r2, r1
 8004034:	4313      	orrs	r3, r2
 8004036:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004038:	f7ff fcfc 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 800403c:	68eb      	ldr	r3, [r5, #12]
 800403e:	4a48      	ldr	r2, [pc, #288]	; (8004160 <HAL_RCC_ClockConfig+0x188>)
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	0f1b      	lsrs	r3, r3, #28
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	40d8      	lsrs	r0, r3
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_RCC_ClockConfig+0x18c>)
 800404a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800404c:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCC_ClockConfig+0x190>)
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	f7fe fc86 	bl	8002960 <HAL_InitTick>
  if(status != HAL_OK)
 8004054:	e7c5      	b.n	8003fe2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	6833      	ldr	r3, [r6, #0]
 8004058:	9a01      	ldr	r2, [sp, #4]
 800405a:	43ab      	bics	r3, r5
 800405c:	4313      	orrs	r3, r2
 800405e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004060:	f7fe fc80 	bl	8002964 <HAL_GetTick>
 8004064:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	6833      	ldr	r3, [r6, #0]
 8004068:	9a01      	ldr	r2, [sp, #4]
 800406a:	402b      	ands	r3, r5
 800406c:	4293      	cmp	r3, r2
 800406e:	d0c0      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fe fc78 	bl	8002964 <HAL_GetTick>
 8004074:	4b3d      	ldr	r3, [pc, #244]	; (800416c <HAL_RCC_ClockConfig+0x194>)
 8004076:	1bc0      	subs	r0, r0, r7
 8004078:	4298      	cmp	r0, r3
 800407a:	d9f4      	bls.n	8004066 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800407c:	2003      	movs	r0, #3
 800407e:	e7b0      	b.n	8003fe2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004080:	20f0      	movs	r0, #240	; 0xf0
 8004082:	4935      	ldr	r1, [pc, #212]	; (8004158 <HAL_RCC_ClockConfig+0x180>)
 8004084:	68cb      	ldr	r3, [r1, #12]
 8004086:	4383      	bics	r3, r0
 8004088:	68a0      	ldr	r0, [r4, #8]
 800408a:	4303      	orrs	r3, r0
 800408c:	60cb      	str	r3, [r1, #12]
 800408e:	e7b3      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004090:	4d31      	ldr	r5, [pc, #196]	; (8004158 <HAL_RCC_ClockConfig+0x180>)
 8004092:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004094:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	2a02      	cmp	r2, #2
 8004098:	d118      	bne.n	80040cc <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800409a:	039b      	lsls	r3, r3, #14
 800409c:	d5a0      	bpl.n	8003fe0 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409e:	2103      	movs	r1, #3
 80040a0:	68eb      	ldr	r3, [r5, #12]
 80040a2:	438b      	bics	r3, r1
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80040a8:	f7fe fc5c 	bl	8002964 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ac:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80040ae:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d118      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040b4:	220c      	movs	r2, #12
 80040b6:	68eb      	ldr	r3, [r5, #12]
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d09e      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040be:	f7fe fc51 	bl	8002964 <HAL_GetTick>
 80040c2:	4b2a      	ldr	r3, [pc, #168]	; (800416c <HAL_RCC_ClockConfig+0x194>)
 80040c4:	1bc0      	subs	r0, r0, r7
 80040c6:	4298      	cmp	r0, r3
 80040c8:	d9f4      	bls.n	80040b4 <HAL_RCC_ClockConfig+0xdc>
 80040ca:	e7d7      	b.n	800407c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040cc:	2a03      	cmp	r2, #3
 80040ce:	d102      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040d0:	019b      	lsls	r3, r3, #6
 80040d2:	d4e4      	bmi.n	800409e <HAL_RCC_ClockConfig+0xc6>
 80040d4:	e784      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040d6:	2a01      	cmp	r2, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040da:	075b      	lsls	r3, r3, #29
 80040dc:	d4df      	bmi.n	800409e <HAL_RCC_ClockConfig+0xc6>
 80040de:	e77f      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040e0:	059b      	lsls	r3, r3, #22
 80040e2:	d4dc      	bmi.n	800409e <HAL_RCC_ClockConfig+0xc6>
 80040e4:	e77c      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d10b      	bne.n	8004102 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ea:	220c      	movs	r2, #12
 80040ec:	68eb      	ldr	r3, [r5, #12]
 80040ee:	4013      	ands	r3, r2
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d083      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fe fc36 	bl	8002964 <HAL_GetTick>
 80040f8:	4b1c      	ldr	r3, [pc, #112]	; (800416c <HAL_RCC_ClockConfig+0x194>)
 80040fa:	1bc0      	subs	r0, r0, r7
 80040fc:	4298      	cmp	r0, r3
 80040fe:	d9f4      	bls.n	80040ea <HAL_RCC_ClockConfig+0x112>
 8004100:	e7bc      	b.n	800407c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004102:	2b01      	cmp	r3, #1
 8004104:	d011      	beq.n	800412a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004106:	220c      	movs	r2, #12
 8004108:	68eb      	ldr	r3, [r5, #12]
 800410a:	4213      	tst	r3, r2
 800410c:	d100      	bne.n	8004110 <HAL_RCC_ClockConfig+0x138>
 800410e:	e775      	b.n	8003ffc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004110:	f7fe fc28 	bl	8002964 <HAL_GetTick>
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <HAL_RCC_ClockConfig+0x194>)
 8004116:	1bc0      	subs	r0, r0, r7
 8004118:	4298      	cmp	r0, r3
 800411a:	d9f4      	bls.n	8004106 <HAL_RCC_ClockConfig+0x12e>
 800411c:	e7ae      	b.n	800407c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411e:	f7fe fc21 	bl	8002964 <HAL_GetTick>
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_RCC_ClockConfig+0x194>)
 8004124:	1bc0      	subs	r0, r0, r7
 8004126:	4298      	cmp	r0, r3
 8004128:	d8a8      	bhi.n	800407c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800412a:	220c      	movs	r2, #12
 800412c:	68eb      	ldr	r3, [r5, #12]
 800412e:	4013      	ands	r3, r2
 8004130:	2b04      	cmp	r3, #4
 8004132:	d1f4      	bne.n	800411e <HAL_RCC_ClockConfig+0x146>
 8004134:	e762      	b.n	8003ffc <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004136:	f7fe fc15 	bl	8002964 <HAL_GetTick>
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_RCC_ClockConfig+0x194>)
 800413c:	1bc0      	subs	r0, r0, r7
 800413e:	4298      	cmp	r0, r3
 8004140:	d800      	bhi.n	8004144 <HAL_RCC_ClockConfig+0x16c>
 8004142:	e767      	b.n	8004014 <HAL_RCC_ClockConfig+0x3c>
 8004144:	e79a      	b.n	800407c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004146:	68eb      	ldr	r3, [r5, #12]
 8004148:	4909      	ldr	r1, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x198>)
 800414a:	400b      	ands	r3, r1
 800414c:	68e1      	ldr	r1, [r4, #12]
 800414e:	430b      	orrs	r3, r1
 8004150:	60eb      	str	r3, [r5, #12]
 8004152:	e768      	b.n	8004026 <HAL_RCC_ClockConfig+0x4e>
 8004154:	40022000 	.word	0x40022000
 8004158:	40021000 	.word	0x40021000
 800415c:	ffffc7ff 	.word	0xffffc7ff
 8004160:	08007a65 	.word	0x08007a65
 8004164:	20000018 	.word	0x20000018
 8004168:	20000020 	.word	0x20000020
 800416c:	00001388 	.word	0x00001388
 8004170:	fffff8ff 	.word	0xfffff8ff

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004176:	4a05      	ldr	r2, [pc, #20]	; (800418c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	055b      	lsls	r3, r3, #21
 800417c:	0f5b      	lsrs	r3, r3, #29
 800417e:	5cd3      	ldrb	r3, [r2, r3]
 8004180:	4a03      	ldr	r2, [pc, #12]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004182:	6810      	ldr	r0, [r2, #0]
 8004184:	40d8      	lsrs	r0, r3
}
 8004186:	4770      	bx	lr
 8004188:	40021000 	.word	0x40021000
 800418c:	08007a75 	.word	0x08007a75
 8004190:	20000018 	.word	0x20000018

08004194 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004196:	4a05      	ldr	r2, [pc, #20]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	049b      	lsls	r3, r3, #18
 800419c:	0f5b      	lsrs	r3, r3, #29
 800419e:	5cd3      	ldrb	r3, [r2, r3]
 80041a0:	4a03      	ldr	r2, [pc, #12]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80041a2:	6810      	ldr	r0, [r2, #0]
 80041a4:	40d8      	lsrs	r0, r3
}
 80041a6:	4770      	bx	lr
 80041a8:	40021000 	.word	0x40021000
 80041ac:	08007a75 	.word	0x08007a75
 80041b0:	20000018 	.word	0x20000018

080041b4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041b4:	6803      	ldr	r3, [r0, #0]
{
 80041b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041b8:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041ba:	069b      	lsls	r3, r3, #26
 80041bc:	d53e      	bpl.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x88>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80041c0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c2:	4c60      	ldr	r4, [pc, #384]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80041c4:	055b      	lsls	r3, r3, #21
 80041c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80041c8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ca:	421a      	tst	r2, r3
 80041cc:	d104      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041d0:	4313      	orrs	r3, r2
 80041d2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	2780      	movs	r7, #128	; 0x80
 80041da:	4e5b      	ldr	r6, [pc, #364]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80041dc:	007f      	lsls	r7, r7, #1
 80041de:	6833      	ldr	r3, [r6, #0]
 80041e0:	423b      	tst	r3, r7
 80041e2:	d06d      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041e4:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80041e6:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041e8:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80041ea:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80041ec:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041ee:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80041f0:	029b      	lsls	r3, r3, #10
 80041f2:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041f4:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80041f6:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041f8:	428a      	cmp	r2, r1
 80041fa:	d000      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80041fc:	e071      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80041fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004200:	0011      	movs	r1, r2
 8004202:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004204:	421a      	tst	r2, r3
 8004206:	d000      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004208:	e074      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800420a:	6869      	ldr	r1, [r5, #4]
 800420c:	23c0      	movs	r3, #192	; 0xc0
 800420e:	000a      	movs	r2, r1
 8004210:	029b      	lsls	r3, r3, #10
 8004212:	401a      	ands	r2, r3
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	484c      	ldr	r0, [pc, #304]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800421c:	4003      	ands	r3, r0
 800421e:	20c0      	movs	r0, #192	; 0xc0
 8004220:	0380      	lsls	r0, r0, #14
 8004222:	4001      	ands	r1, r0
 8004224:	430b      	orrs	r3, r1
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800422a:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800422c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800422e:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004230:	2b01      	cmp	r3, #1
 8004232:	d103      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004236:	4a46      	ldr	r2, [pc, #280]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004238:	4013      	ands	r3, r2
 800423a:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	07da      	lsls	r2, r3, #31
 8004240:	d506      	bpl.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004242:	2003      	movs	r0, #3
 8004244:	493f      	ldr	r1, [pc, #252]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004246:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004248:	4382      	bics	r2, r0
 800424a:	68a8      	ldr	r0, [r5, #8]
 800424c:	4302      	orrs	r2, r0
 800424e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004250:	079a      	lsls	r2, r3, #30
 8004252:	d506      	bpl.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004254:	200c      	movs	r0, #12
 8004256:	493b      	ldr	r1, [pc, #236]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004258:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800425a:	4382      	bics	r2, r0
 800425c:	68e8      	ldr	r0, [r5, #12]
 800425e:	4302      	orrs	r2, r0
 8004260:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004262:	075a      	lsls	r2, r3, #29
 8004264:	d506      	bpl.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004266:	4937      	ldr	r1, [pc, #220]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004268:	483a      	ldr	r0, [pc, #232]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800426a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800426c:	4002      	ands	r2, r0
 800426e:	6928      	ldr	r0, [r5, #16]
 8004270:	4302      	orrs	r2, r0
 8004272:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004274:	071a      	lsls	r2, r3, #28
 8004276:	d506      	bpl.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004278:	4932      	ldr	r1, [pc, #200]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800427a:	4837      	ldr	r0, [pc, #220]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800427c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800427e:	4002      	ands	r2, r0
 8004280:	6968      	ldr	r0, [r5, #20]
 8004282:	4302      	orrs	r2, r0
 8004284:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004286:	05da      	lsls	r2, r3, #23
 8004288:	d506      	bpl.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800428a:	492e      	ldr	r1, [pc, #184]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800428c:	4833      	ldr	r0, [pc, #204]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800428e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004290:	4002      	ands	r2, r0
 8004292:	69a8      	ldr	r0, [r5, #24]
 8004294:	4302      	orrs	r2, r0
 8004296:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004298:	065a      	lsls	r2, r3, #25
 800429a:	d506      	bpl.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800429c:	4929      	ldr	r1, [pc, #164]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800429e:	4830      	ldr	r0, [pc, #192]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80042a2:	4002      	ands	r2, r0
 80042a4:	6a28      	ldr	r0, [r5, #32]
 80042a6:	4302      	orrs	r2, r0
 80042a8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80042aa:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	d517      	bpl.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80042b0:	4a24      	ldr	r2, [pc, #144]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80042b2:	492c      	ldr	r1, [pc, #176]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80042b6:	400b      	ands	r3, r1
 80042b8:	69e9      	ldr	r1, [r5, #28]
 80042ba:	430b      	orrs	r3, r1
 80042bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042be:	e00f      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	433b      	orrs	r3, r7
 80042c4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80042c6:	f7fe fb4d 	bl	8002964 <HAL_GetTick>
 80042ca:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	6833      	ldr	r3, [r6, #0]
 80042ce:	423b      	tst	r3, r7
 80042d0:	d188      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d2:	f7fe fb47 	bl	8002964 <HAL_GetTick>
 80042d6:	9b01      	ldr	r3, [sp, #4]
 80042d8:	1ac0      	subs	r0, r0, r3
 80042da:	2864      	cmp	r0, #100	; 0x64
 80042dc:	d9f6      	bls.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x118>
          return HAL_TIMEOUT;
 80042de:	2003      	movs	r0, #3
}
 80042e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042e2:	429e      	cmp	r6, r3
 80042e4:	d000      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80042e6:	e78a      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042e8:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80042ea:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042ec:	0392      	lsls	r2, r2, #14
 80042ee:	d400      	bmi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80042f0:	e785      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80042f2:	e7f5      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80042f4:	42b1      	cmp	r1, r6
 80042f6:	d100      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x146>
 80042f8:	e787      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x56>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	069b      	lsls	r3, r3, #26
 80042fe:	d400      	bmi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004300:	e783      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004302:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004304:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004306:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004308:	0312      	lsls	r2, r2, #12
 800430a:	4302      	orrs	r2, r0
 800430c:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800430e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004312:	4815      	ldr	r0, [pc, #84]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004314:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004316:	4002      	ands	r2, r0
 8004318:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800431a:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800431c:	05cb      	lsls	r3, r1, #23
 800431e:	d400      	bmi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004320:	e773      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x56>
        tickstart = HAL_GetTick();
 8004322:	f7fe fb1f 	bl	8002964 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004326:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004328:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432a:	00bf      	lsls	r7, r7, #2
 800432c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800432e:	423b      	tst	r3, r7
 8004330:	d000      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004332:	e76a      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x56>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fe fb16 	bl	8002964 <HAL_GetTick>
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433a:	1b80      	subs	r0, r0, r6
 800433c:	4298      	cmp	r0, r3
 800433e:	d9f5      	bls.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004340:	e7cd      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
 800434c:	ffcfffff 	.word	0xffcfffff
 8004350:	efffffff 	.word	0xefffffff
 8004354:	fffff3ff 	.word	0xfffff3ff
 8004358:	ffffcfff 	.word	0xffffcfff
 800435c:	fffcffff 	.word	0xfffcffff
 8004360:	fbffffff 	.word	0xfbffffff
 8004364:	fff3ffff 	.word	0xfff3ffff
 8004368:	fff7ffff 	.word	0xfff7ffff
 800436c:	00001388 	.word	0x00001388

08004370 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004372:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004374:	1c45      	adds	r5, r0, #1
 8004376:	7feb      	ldrb	r3, [r5, #31]
{
 8004378:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800437a:	0038      	movs	r0, r7
 800437c:	2b01      	cmp	r3, #1
 800437e:	d027      	beq.n	80043d0 <HAL_RTC_DeactivateAlarm+0x60>
 8004380:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004382:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004384:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8004386:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004388:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	625a      	str	r2, [r3, #36]	; 0x24
 800438e:	3a77      	subs	r2, #119	; 0x77
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004392:	32ad      	adds	r2, #173	; 0xad
 8004394:	4291      	cmp	r1, r2
 8004396:	d12a      	bne.n	80043ee <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	4922      	ldr	r1, [pc, #136]	; (8004424 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800439c:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800439e:	400a      	ands	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	4920      	ldr	r1, [pc, #128]	; (8004428 <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043a6:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80043a8:	400a      	ands	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80043ac:	f7fe fada 	bl	8002964 <HAL_GetTick>
 80043b0:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80043b2:	2201      	movs	r2, #1
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	401a      	ands	r2, r3
 80043ba:	9201      	str	r2, [sp, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	4213      	tst	r3, r2
 80043c0:	d007      	beq.n	80043d2 <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043c2:	22ff      	movs	r2, #255	; 0xff
 80043c4:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043c6:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80043ca:	2301      	movs	r3, #1
 80043cc:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 80043ce:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 80043d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043d2:	f7fe fac7 	bl	8002964 <HAL_GetTick>
 80043d6:	9b00      	ldr	r3, [sp, #0]
 80043d8:	1ac0      	subs	r0, r0, r3
 80043da:	42b8      	cmp	r0, r7
 80043dc:	d9e9      	bls.n	80043b2 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043de:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043e0:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043e6:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80043e8:	9b01      	ldr	r3, [sp, #4]
 80043ea:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 80043ec:	e7f0      	b.n	80043d0 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	490e      	ldr	r1, [pc, #56]	; (800442c <HAL_RTC_DeactivateAlarm+0xbc>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	490d      	ldr	r1, [pc, #52]	; (8004430 <HAL_RTC_DeactivateAlarm+0xc0>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80043fe:	f7fe fab1 	bl	8002964 <HAL_GetTick>
 8004402:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	001a      	movs	r2, r3
 800440a:	403a      	ands	r2, r7
 800440c:	9201      	str	r2, [sp, #4]
 800440e:	423b      	tst	r3, r7
 8004410:	d1d7      	bne.n	80043c2 <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004412:	f7fe faa7 	bl	8002964 <HAL_GetTick>
 8004416:	9b00      	ldr	r3, [sp, #0]
 8004418:	1ac0      	subs	r0, r0, r3
 800441a:	23fa      	movs	r3, #250	; 0xfa
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4298      	cmp	r0, r3
 8004420:	d9f0      	bls.n	8004404 <HAL_RTC_DeactivateAlarm+0x94>
 8004422:	e7dc      	b.n	80043de <HAL_RTC_DeactivateAlarm+0x6e>
 8004424:	fffffeff 	.word	0xfffffeff
 8004428:	ffffefff 	.word	0xffffefff
 800442c:	fffffdff 	.word	0xfffffdff
 8004430:	ffffdfff 	.word	0xffffdfff

08004434 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004434:	6803      	ldr	r3, [r0, #0]
{
 8004436:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004438:	689a      	ldr	r2, [r3, #8]
{
 800443a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800443c:	04d2      	lsls	r2, r2, #19
 800443e:	d50a      	bpl.n	8004456 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	05db      	lsls	r3, r3, #23
 8004444:	d507      	bpl.n	8004456 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004446:	f7fe f946 	bl	80026d6 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800444a:	6821      	ldr	r1, [r4, #0]
 800444c:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <HAL_RTC_AlarmIRQHandler+0x54>)
 800444e:	68ca      	ldr	r2, [r1, #12]
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	4313      	orrs	r3, r2
 8004454:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	0492      	lsls	r2, r2, #18
 800445c:	d50b      	bpl.n	8004476 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	059b      	lsls	r3, r3, #22
 8004462:	d508      	bpl.n	8004476 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004464:	0020      	movs	r0, r4
 8004466:	f000 faf5 	bl	8004a54 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800446a:	6821      	ldr	r1, [r4, #0]
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RTC_AlarmIRQHandler+0x58>)
 800446e:	68ca      	ldr	r2, [r1, #12]
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	4313      	orrs	r3, r2
 8004474:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004476:	2280      	movs	r2, #128	; 0x80
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RTC_AlarmIRQHandler+0x5c>)
 800447a:	0292      	lsls	r2, r2, #10
 800447c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800447e:	2301      	movs	r3, #1
 8004480:	3402      	adds	r4, #2
 8004482:	77e3      	strb	r3, [r4, #31]
}
 8004484:	bd10      	pop	{r4, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	fffffe7f 	.word	0xfffffe7f
 800448c:	fffffd7f 	.word	0xfffffd7f
 8004490:	40010400 	.word	0x40010400

08004494 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004494:	21a0      	movs	r1, #160	; 0xa0
 8004496:	6802      	ldr	r2, [r0, #0]
{
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800449a:	68d3      	ldr	r3, [r2, #12]
{
 800449c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800449e:	438b      	bics	r3, r1
 80044a0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80044a2:	f7fe fa5f 	bl	8002964 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044a6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80044a8:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044aa:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044ac:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4233      	tst	r3, r6
 80044b4:	d001      	beq.n	80044ba <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80044b6:	2000      	movs	r0, #0
}
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044ba:	f7fe fa53 	bl	8002964 <HAL_GetTick>
 80044be:	1b40      	subs	r0, r0, r5
 80044c0:	42b8      	cmp	r0, r7
 80044c2:	d9f4      	bls.n	80044ae <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80044c4:	2003      	movs	r0, #3
 80044c6:	e7f7      	b.n	80044b8 <HAL_RTC_WaitForSynchro+0x24>

080044c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80044ca:	2640      	movs	r6, #64	; 0x40
 80044cc:	6803      	ldr	r3, [r0, #0]
{
 80044ce:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	4232      	tst	r2, r6
 80044d4:	d001      	beq.n	80044da <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80044d6:	2000      	movs	r0, #0
}
 80044d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80044da:	2201      	movs	r2, #1
 80044dc:	4252      	negs	r2, r2
 80044de:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80044e0:	f7fe fa40 	bl	8002964 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044e4:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80044e6:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044e8:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	4233      	tst	r3, r6
 80044f0:	d1f1      	bne.n	80044d6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044f2:	f7fe fa37 	bl	8002964 <HAL_GetTick>
 80044f6:	1b40      	subs	r0, r0, r5
 80044f8:	42b8      	cmp	r0, r7
 80044fa:	d9f6      	bls.n	80044ea <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80044fc:	2003      	movs	r0, #3
 80044fe:	e7eb      	b.n	80044d8 <RTC_EnterInitMode+0x10>

08004500 <HAL_RTC_Init>:
{
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004504:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8004506:	2800      	cmp	r0, #0
 8004508:	d01a      	beq.n	8004540 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800450a:	1c86      	adds	r6, r0, #2
 800450c:	7ff3      	ldrb	r3, [r6, #31]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8004514:	1943      	adds	r3, r0, r5
 8004516:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8004518:	f7fd fef2 	bl	8002300 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800451c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800451e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004520:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004522:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004524:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004526:	625a      	str	r2, [r3, #36]	; 0x24
 8004528:	3a77      	subs	r2, #119	; 0x77
 800452a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800452c:	f7ff ffcc 	bl	80044c8 <RTC_EnterInitMode>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	1e05      	subs	r5, r0, #0
 8004534:	d006      	beq.n	8004544 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004536:	22ff      	movs	r2, #255	; 0xff
 8004538:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800453a:	2304      	movs	r3, #4
 800453c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800453e:	2501      	movs	r5, #1
}
 8004540:	0028      	movs	r0, r5
 8004542:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	491b      	ldr	r1, [pc, #108]	; (80045b4 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004548:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800454a:	400a      	ands	r2, r1
 800454c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800454e:	6862      	ldr	r2, [r4, #4]
 8004550:	6899      	ldr	r1, [r3, #8]
 8004552:	4302      	orrs	r2, r0
 8004554:	69a0      	ldr	r0, [r4, #24]
 8004556:	4302      	orrs	r2, r0
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800455c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800455e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004560:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004562:	68a2      	ldr	r2, [r4, #8]
 8004564:	6919      	ldr	r1, [r3, #16]
 8004566:	0412      	lsls	r2, r2, #16
 8004568:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800456a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800456c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	438a      	bics	r2, r1
 8004572:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004576:	397d      	subs	r1, #125	; 0x7d
 8004578:	438a      	bics	r2, r1
 800457a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800457c:	69e2      	ldr	r2, [r4, #28]
 800457e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004580:	4302      	orrs	r2, r0
 8004582:	430a      	orrs	r2, r1
 8004584:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	069b      	lsls	r3, r3, #26
 800458a:	d40c      	bmi.n	80045a6 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800458c:	0020      	movs	r0, r4
 800458e:	f7ff ff81 	bl	8004494 <HAL_RTC_WaitForSynchro>
 8004592:	2800      	cmp	r0, #0
 8004594:	d007      	beq.n	80045a6 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004596:	22ff      	movs	r2, #255	; 0xff
 8004598:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 800459a:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800459c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800459e:	2304      	movs	r3, #4
 80045a0:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80045a2:	77e5      	strb	r5, [r4, #31]
 80045a4:	e7cb      	b.n	800453e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045a6:	22ff      	movs	r2, #255	; 0xff
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80045ac:	2301      	movs	r3, #1
 80045ae:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80045b0:	e7c6      	b.n	8004540 <HAL_RTC_Init+0x40>
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	ff8fffbf 	.word	0xff8fffbf

080045b8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80045b8:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80045ba:	2809      	cmp	r0, #9
 80045bc:	d803      	bhi.n	80045c6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	4318      	orrs	r0, r3
 80045c2:	b2c0      	uxtb	r0, r0
}
 80045c4:	4770      	bx	lr
    Param -= 10U;
 80045c6:	380a      	subs	r0, #10
    bcdhigh++;
 80045c8:	3301      	adds	r3, #1
    Param -= 10U;
 80045ca:	b2c0      	uxtb	r0, r0
 80045cc:	e7f5      	b.n	80045ba <RTC_ByteToBcd2+0x2>
	...

080045d0 <HAL_RTC_SetTime>:
{
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80045d2:	1c43      	adds	r3, r0, #1
{
 80045d4:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80045d6:	9301      	str	r3, [sp, #4]
{
 80045d8:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80045da:	7fd9      	ldrb	r1, [r3, #31]
 80045dc:	2302      	movs	r3, #2
{
 80045de:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80045e0:	001f      	movs	r7, r3
 80045e2:	2901      	cmp	r1, #1
 80045e4:	d036      	beq.n	8004654 <HAL_RTC_SetTime+0x84>
 80045e6:	2101      	movs	r1, #1
 80045e8:	1840      	adds	r0, r0, r1
 80045ea:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045ec:	18e9      	adds	r1, r5, r3
 80045ee:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045f0:	682f      	ldr	r7, [r5, #0]
 80045f2:	7820      	ldrb	r0, [r4, #0]
 80045f4:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045f6:	9102      	str	r1, [sp, #8]
 80045f8:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	d12d      	bne.n	800465a <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0011      	movs	r1, r2
 8004602:	4019      	ands	r1, r3
 8004604:	421a      	tst	r2, r3
 8004606:	d100      	bne.n	800460a <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8004608:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800460a:	f7ff ffd5 	bl	80045b8 <RTC_ByteToBcd2>
 800460e:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004610:	0030      	movs	r0, r6
 8004612:	f7ff ffd1 	bl	80045b8 <RTC_ByteToBcd2>
 8004616:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004618:	78a0      	ldrb	r0, [r4, #2]
 800461a:	f7ff ffcd 	bl	80045b8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800461e:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004620:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004622:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004624:	4303      	orrs	r3, r0
 8004626:	0412      	lsls	r2, r2, #16
 8004628:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800462a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800462c:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800462e:	23ca      	movs	r3, #202	; 0xca
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
 8004632:	3b77      	subs	r3, #119	; 0x77
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004636:	0028      	movs	r0, r5
 8004638:	f7ff ff46 	bl	80044c8 <RTC_EnterInitMode>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	1e07      	subs	r7, r0, #0
 8004640:	d019      	beq.n	8004676 <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004642:	22ff      	movs	r2, #255	; 0xff
 8004644:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004646:	2304      	movs	r3, #4
 8004648:	9a02      	ldr	r2, [sp, #8]
 800464a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800464c:	2300      	movs	r3, #0
 800464e:	9a01      	ldr	r2, [sp, #4]
 8004650:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8004652:	2701      	movs	r7, #1
}
 8004654:	0038      	movs	r0, r7
 8004656:	b005      	add	sp, #20
 8004658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	0011      	movs	r1, r2
 800465e:	4019      	ands	r1, r3
 8004660:	421a      	tst	r2, r3
 8004662:	d100      	bne.n	8004666 <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8004664:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004666:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004668:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800466a:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800466c:	78e3      	ldrb	r3, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 800466e:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004670:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004672:	4306      	orrs	r6, r0
 8004674:	e7da      	b.n	800462c <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004676:	4816      	ldr	r0, [pc, #88]	; (80046d0 <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004678:	4916      	ldr	r1, [pc, #88]	; (80046d4 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800467a:	4006      	ands	r6, r0
 800467c:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800467e:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004680:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004682:	400a      	ands	r2, r1
 8004684:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004686:	68e2      	ldr	r2, [r4, #12]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	4302      	orrs	r2, r0
 800468c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800468e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004690:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	438a      	bics	r2, r1
 8004696:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	069b      	lsls	r3, r3, #26
 800469c:	d40d      	bmi.n	80046ba <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800469e:	0028      	movs	r0, r5
 80046a0:	f7ff fef8 	bl	8004494 <HAL_RTC_WaitForSynchro>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d008      	beq.n	80046ba <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046a8:	22ff      	movs	r2, #255	; 0xff
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80046ae:	2304      	movs	r3, #4
 80046b0:	9a02      	ldr	r2, [sp, #8]
 80046b2:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80046b4:	9b01      	ldr	r3, [sp, #4]
 80046b6:	77df      	strb	r7, [r3, #31]
 80046b8:	e7cb      	b.n	8004652 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ba:	22ff      	movs	r2, #255	; 0xff
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80046c0:	2301      	movs	r3, #1
 80046c2:	9a02      	ldr	r2, [sp, #8]
 80046c4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80046c6:	2300      	movs	r3, #0
 80046c8:	9a01      	ldr	r2, [sp, #4]
 80046ca:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 80046cc:	e7c2      	b.n	8004654 <HAL_RTC_SetTime+0x84>
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	007f7f7f 	.word	0x007f7f7f
 80046d4:	fffbffff 	.word	0xfffbffff

080046d8 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 80046d8:	2302      	movs	r3, #2
{
 80046da:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80046dc:	1c47      	adds	r7, r0, #1
{
 80046de:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80046e0:	7ff9      	ldrb	r1, [r7, #31]
{
 80046e2:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80046e4:	001d      	movs	r5, r3
{
 80046e6:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80046e8:	2901      	cmp	r1, #1
 80046ea:	d036      	beq.n	800475a <HAL_RTC_SetDate+0x82>
 80046ec:	2101      	movs	r1, #1
 80046ee:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046f0:	18c1      	adds	r1, r0, r3
 80046f2:	77cb      	strb	r3, [r1, #31]
 80046f4:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 80046f6:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80046f8:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 80046fa:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046fc:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80046fe:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 8004700:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004702:	2a00      	cmp	r2, #0
 8004704:	d14c      	bne.n	80047a0 <HAL_RTC_SetDate+0xc8>
 8004706:	3210      	adds	r2, #16
 8004708:	4213      	tst	r3, r2
 800470a:	d002      	beq.n	8004712 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800470c:	4393      	bics	r3, r2
 800470e:	330a      	adds	r3, #10
 8004710:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004712:	f7ff ff51 	bl	80045b8 <RTC_ByteToBcd2>
 8004716:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004718:	7870      	ldrb	r0, [r6, #1]
 800471a:	f7ff ff4d 	bl	80045b8 <RTC_ByteToBcd2>
 800471e:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004720:	0028      	movs	r0, r5
 8004722:	f7ff ff49 	bl	80045b8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004726:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004728:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800472a:	041d      	lsls	r5, r3, #16
 800472c:	9b02      	ldr	r3, [sp, #8]
 800472e:	4318      	orrs	r0, r3
 8004730:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004732:	22ca      	movs	r2, #202	; 0xca
 8004734:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004736:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004738:	625a      	str	r2, [r3, #36]	; 0x24
 800473a:	3a77      	subs	r2, #119	; 0x77
 800473c:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800473e:	f7ff fec3 	bl	80044c8 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004742:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	1e05      	subs	r5, r0, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800474a:	22ff      	movs	r2, #255	; 0xff
 800474c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800474e:	2304      	movs	r3, #4
 8004750:	9a01      	ldr	r2, [sp, #4]
 8004752:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004754:	2300      	movs	r3, #0
 8004756:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004758:	2501      	movs	r5, #1
}
 800475a:	0028      	movs	r0, r5
 800475c:	b005      	add	sp, #20
 800475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004760:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004762:	4812      	ldr	r0, [pc, #72]	; (80047ac <HAL_RTC_SetDate+0xd4>)
 8004764:	4006      	ands	r6, r0
 8004766:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	438a      	bics	r2, r1
 800476c:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	069b      	lsls	r3, r3, #26
 8004772:	d40c      	bmi.n	800478e <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004774:	0020      	movs	r0, r4
 8004776:	f7ff fe8d 	bl	8004494 <HAL_RTC_WaitForSynchro>
 800477a:	2800      	cmp	r0, #0
 800477c:	d007      	beq.n	800478e <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800477e:	22ff      	movs	r2, #255	; 0xff
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004784:	2304      	movs	r3, #4
 8004786:	9a01      	ldr	r2, [sp, #4]
 8004788:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800478a:	77fd      	strb	r5, [r7, #31]
 800478c:	e7e4      	b.n	8004758 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800478e:	22ff      	movs	r2, #255	; 0xff
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004794:	2301      	movs	r3, #1
 8004796:	9a01      	ldr	r2, [sp, #4]
 8004798:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800479a:	2300      	movs	r3, #0
 800479c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800479e:	e7dc      	b.n	800475a <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80047a0:	9a02      	ldr	r2, [sp, #8]
 80047a2:	0406      	lsls	r6, r0, #16
 80047a4:	4316      	orrs	r6, r2
 80047a6:	4335      	orrs	r5, r6
                  (((uint32_t)sDate->Month) << 8U) | \
 80047a8:	021e      	lsls	r6, r3, #8
 80047aa:	e7c2      	b.n	8004732 <HAL_RTC_SetDate+0x5a>
 80047ac:	00ffff3f 	.word	0x00ffff3f

080047b0 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80047b0:	2302      	movs	r3, #2
{
 80047b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b4:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80047b6:	1c41      	adds	r1, r0, #1
 80047b8:	7fce      	ldrb	r6, [r1, #31]
{
 80047ba:	0004      	movs	r4, r0
 80047bc:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80047be:	0018      	movs	r0, r3
 80047c0:	2e01      	cmp	r6, #1
 80047c2:	d100      	bne.n	80047c6 <HAL_RTC_SetAlarm_IT+0x16>
 80047c4:	e095      	b.n	80048f2 <HAL_RTC_SetAlarm_IT+0x142>
 80047c6:	3801      	subs	r0, #1
 80047c8:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ca:	18e1      	adds	r1, r4, r3
 80047cc:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 80047ce:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047d0:	6826      	ldr	r6, [r4, #0]
 80047d2:	9101      	str	r1, [sp, #4]
 80047d4:	7828      	ldrb	r0, [r5, #0]
 80047d6:	78af      	ldrb	r7, [r5, #2]
 80047d8:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80047da:	2a00      	cmp	r2, #0
 80047dc:	d165      	bne.n	80048aa <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047de:	68b2      	ldr	r2, [r6, #8]
 80047e0:	0011      	movs	r1, r2
 80047e2:	4019      	ands	r1, r3
 80047e4:	421a      	tst	r2, r3
 80047e6:	d100      	bne.n	80047ea <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047e8:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80047ea:	f7ff fee5 	bl	80045b8 <RTC_ByteToBcd2>
 80047ee:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80047f0:	9801      	ldr	r0, [sp, #4]
 80047f2:	f7ff fee1 	bl	80045b8 <RTC_ByteToBcd2>
 80047f6:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80047f8:	0038      	movs	r0, r7
 80047fa:	f7ff fedd 	bl	80045b8 <RTC_ByteToBcd2>
 80047fe:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004800:	1c6b      	adds	r3, r5, #1
 8004802:	7fd8      	ldrb	r0, [r3, #31]
 8004804:	f7ff fed8 	bl	80045b8 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004808:	696a      	ldr	r2, [r5, #20]
 800480a:	69eb      	ldr	r3, [r5, #28]
 800480c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800480e:	78ea      	ldrb	r2, [r5, #3]
 8004810:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004812:	4313      	orrs	r3, r2
 8004814:	431f      	orrs	r7, r3
 8004816:	9b02      	ldr	r3, [sp, #8]
 8004818:	041b      	lsls	r3, r3, #16
 800481a:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800481c:	9b01      	ldr	r3, [sp, #4]
 800481e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004820:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004822:	69aa      	ldr	r2, [r5, #24]
 8004824:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004826:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004828:	4313      	orrs	r3, r2
 800482a:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800482c:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 800482e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004830:	6273      	str	r3, [r6, #36]	; 0x24
 8004832:	3b77      	subs	r3, #119	; 0x77
 8004834:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004836:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004838:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 800483a:	429a      	cmp	r2, r3
 800483c:	d15b      	bne.n	80048f6 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800483e:	68b3      	ldr	r3, [r6, #8]
 8004840:	4a41      	ldr	r2, [pc, #260]	; (8004948 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004842:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004844:	4013      	ands	r3, r2
 8004846:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004848:	68f2      	ldr	r2, [r6, #12]
 800484a:	4b40      	ldr	r3, [pc, #256]	; (800494c <HAL_RTC_SetAlarm_IT+0x19c>)
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	4313      	orrs	r3, r2
 8004850:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004852:	f7fe f887 	bl	8002964 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004856:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004858:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800485a:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	0011      	movs	r1, r2
 8004862:	4029      	ands	r1, r5
 8004864:	9103      	str	r1, [sp, #12]
 8004866:	422a      	tst	r2, r5
 8004868:	d034      	beq.n	80048d4 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800486a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800486c:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004870:	2280      	movs	r2, #128	; 0x80
 8004872:	6899      	ldr	r1, [r3, #8]
 8004874:	0052      	lsls	r2, r2, #1
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800487a:	2280      	movs	r2, #128	; 0x80
 800487c:	6899      	ldr	r1, [r3, #8]
 800487e:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004884:	2280      	movs	r2, #128	; 0x80
 8004886:	4b32      	ldr	r3, [pc, #200]	; (8004950 <HAL_RTC_SetAlarm_IT+0x1a0>)
 8004888:	0292      	lsls	r2, r2, #10
 800488a:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800488c:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800488e:	4311      	orrs	r1, r2
 8004890:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004892:	6899      	ldr	r1, [r3, #8]
 8004894:	430a      	orrs	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004898:	22ff      	movs	r2, #255	; 0xff
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800489e:	3afe      	subs	r2, #254	; 0xfe
 80048a0:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 80048a2:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 80048a4:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80048a6:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80048a8:	e023      	b.n	80048f2 <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048aa:	68b2      	ldr	r2, [r6, #8]
 80048ac:	0011      	movs	r1, r2
 80048ae:	4019      	ands	r1, r3
 80048b0:	421a      	tst	r2, r3
 80048b2:	d100      	bne.n	80048b6 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048b4:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048b6:	69eb      	ldr	r3, [r5, #28]
 80048b8:	696a      	ldr	r2, [r5, #20]
 80048ba:	0400      	lsls	r0, r0, #16
 80048bc:	4313      	orrs	r3, r2
 80048be:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80048c0:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048c2:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80048c4:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048c6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80048c8:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80048ca:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80048cc:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048ce:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80048d0:	7fd8      	ldrb	r0, [r3, #31]
 80048d2:	e7a6      	b.n	8004822 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048d4:	f7fe f846 	bl	8002964 <HAL_GetTick>
 80048d8:	9b02      	ldr	r3, [sp, #8]
 80048da:	1ac0      	subs	r0, r0, r3
 80048dc:	42b0      	cmp	r0, r6
 80048de:	d9bd      	bls.n	800485c <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048e0:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048e2:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048e8:	1ca3      	adds	r3, r4, #2
 80048ea:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	3401      	adds	r4, #1
 80048f0:	77e3      	strb	r3, [r4, #31]
}
 80048f2:	b005      	add	sp, #20
 80048f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80048f6:	68b3      	ldr	r3, [r6, #8]
 80048f8:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80048fa:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80048fc:	4013      	ands	r3, r2
 80048fe:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004900:	68f2      	ldr	r2, [r6, #12]
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <HAL_RTC_SetAlarm_IT+0x1a8>)
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	4313      	orrs	r3, r2
 8004908:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800490a:	f7fe f82b 	bl	8002964 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800490e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004910:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004912:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	0011      	movs	r1, r2
 800491a:	4029      	ands	r1, r5
 800491c:	9103      	str	r1, [sp, #12]
 800491e:	422a      	tst	r2, r5
 8004920:	d00b      	beq.n	800493a <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004922:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004924:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004926:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004928:	2280      	movs	r2, #128	; 0x80
 800492a:	6899      	ldr	r1, [r3, #8]
 800492c:	0092      	lsls	r2, r2, #2
 800492e:	430a      	orrs	r2, r1
 8004930:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004932:	2280      	movs	r2, #128	; 0x80
 8004934:	6899      	ldr	r1, [r3, #8]
 8004936:	0192      	lsls	r2, r2, #6
 8004938:	e7a2      	b.n	8004880 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800493a:	f7fe f813 	bl	8002964 <HAL_GetTick>
 800493e:	9b02      	ldr	r3, [sp, #8]
 8004940:	1ac0      	subs	r0, r0, r3
 8004942:	42b0      	cmp	r0, r6
 8004944:	d9e6      	bls.n	8004914 <HAL_RTC_SetAlarm_IT+0x164>
 8004946:	e7cb      	b.n	80048e0 <HAL_RTC_SetAlarm_IT+0x130>
 8004948:	fffffeff 	.word	0xfffffeff
 800494c:	fffffe7f 	.word	0xfffffe7f
 8004950:	40010400 	.word	0x40010400
 8004954:	fffffdff 	.word	0xfffffdff
 8004958:	fffffd7f 	.word	0xfffffd7f

0800495c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800495c:	0902      	lsrs	r2, r0, #4
{
 800495e:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004960:	200a      	movs	r0, #10
 8004962:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004964:	220f      	movs	r2, #15
 8004966:	4013      	ands	r3, r2
 8004968:	18c0      	adds	r0, r0, r3
 800496a:	b2c0      	uxtb	r0, r0
}
 800496c:	4770      	bx	lr
	...

08004970 <HAL_RTC_GetTime>:
{
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004974:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004976:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004978:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800497a:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800497c:	690b      	ldr	r3, [r1, #16]
 800497e:	045b      	lsls	r3, r3, #17
 8004980:	0c5b      	lsrs	r3, r3, #17
 8004982:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004984:	680b      	ldr	r3, [r1, #0]
 8004986:	490e      	ldr	r1, [pc, #56]	; (80049c0 <HAL_RTC_GetTime+0x50>)
 8004988:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800498a:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800498c:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800498e:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004990:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004992:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004994:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004996:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004998:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800499a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800499c:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800499e:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d10a      	bne.n	80049ba <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80049a4:	f7ff ffda 	bl	800495c <RTC_Bcd2ToByte>
 80049a8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80049aa:	0030      	movs	r0, r6
 80049ac:	f7ff ffd6 	bl	800495c <RTC_Bcd2ToByte>
 80049b0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80049b2:	0028      	movs	r0, r5
 80049b4:	f7ff ffd2 	bl	800495c <RTC_Bcd2ToByte>
 80049b8:	70a0      	strb	r0, [r4, #2]
}
 80049ba:	2000      	movs	r0, #0
 80049bc:	bd70      	pop	{r4, r5, r6, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	007f7f7f 	.word	0x007f7f7f

080049c4 <HAL_RTC_GetDate>:
{
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80049c8:	6803      	ldr	r3, [r0, #0]
 80049ca:	490e      	ldr	r1, [pc, #56]	; (8004a04 <HAL_RTC_GetDate+0x40>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80049d0:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80049d2:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80049d4:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80049d6:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80049d8:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80049da:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80049dc:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80049de:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80049e0:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80049e2:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80049e4:	2a00      	cmp	r2, #0
 80049e6:	d10a      	bne.n	80049fe <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049e8:	f7ff ffb8 	bl	800495c <RTC_Bcd2ToByte>
 80049ec:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80049ee:	0028      	movs	r0, r5
 80049f0:	f7ff ffb4 	bl	800495c <RTC_Bcd2ToByte>
 80049f4:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049f6:	0030      	movs	r0, r6
 80049f8:	f7ff ffb0 	bl	800495c <RTC_Bcd2ToByte>
 80049fc:	70a0      	strb	r0, [r4, #2]
}
 80049fe:	2000      	movs	r0, #0
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	00ffff3f 	.word	0x00ffff3f

08004a08 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004a08:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004a0a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004a0c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004a0e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004a10:	600a      	str	r2, [r1, #0]
}
 8004a12:	4770      	bx	lr

08004a14 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004a14:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004a16:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004a18:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8004a1a:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004a1c:	6808      	ldr	r0, [r1, #0]
}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a20:	2202      	movs	r2, #2
{
 8004a22:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8004a24:	1c41      	adds	r1, r0, #1
 8004a26:	7fcc      	ldrb	r4, [r1, #31]
{
 8004a28:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8004a2a:	0010      	movs	r0, r2
 8004a2c:	2c01      	cmp	r4, #1
 8004a2e:	d010      	beq.n	8004a52 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a30:	1898      	adds	r0, r3, r2
 8004a32:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	32c8      	adds	r2, #200	; 0xc8
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24
 8004a3a:	3a77      	subs	r2, #119	; 0x77
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8004a3e:	689c      	ldr	r4, [r3, #8]
 8004a40:	3a33      	subs	r2, #51	; 0x33
 8004a42:	4322      	orrs	r2, r4
 8004a44:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a46:	22ff      	movs	r2, #255	; 0xff
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a4e:	2000      	movs	r0, #0
 8004a50:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8004a52:	bd10      	pop	{r4, pc}

08004a54 <HAL_RTCEx_AlarmBEventCallback>:
 8004a54:	4770      	bx	lr
	...

08004a58 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a5a:	001d      	movs	r5, r3
 8004a5c:	0017      	movs	r7, r2
 8004a5e:	b085      	sub	sp, #20
 8004a60:	000e      	movs	r6, r1
 8004a62:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a64:	f7fd ff7e 	bl	8002964 <HAL_GetTick>
 8004a68:	19ed      	adds	r5, r5, r7
 8004a6a:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004a6c:	f7fd ff7a 	bl	8002964 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a70:	4b25      	ldr	r3, [pc, #148]	; (8004b08 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8004a72:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	015b      	lsls	r3, r3, #5
 8004a78:	0d1b      	lsrs	r3, r3, #20
 8004a7a:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a7c:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004a7e:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a80:	6893      	ldr	r3, [r2, #8]
 8004a82:	4033      	ands	r3, r6
 8004a84:	429e      	cmp	r6, r3
 8004a86:	d001      	beq.n	8004a8c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8004a88:	2000      	movs	r0, #0
 8004a8a:	e032      	b.n	8004af2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8004a8c:	1c7b      	adds	r3, r7, #1
 8004a8e:	d0f7      	beq.n	8004a80 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a90:	f7fd ff68 	bl	8002964 <HAL_GetTick>
 8004a94:	9b01      	ldr	r3, [sp, #4]
 8004a96:	1ac0      	subs	r0, r0, r3
 8004a98:	42a8      	cmp	r0, r5
 8004a9a:	d32c      	bcc.n	8004af6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a9c:	21e0      	movs	r1, #224	; 0xe0
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	438a      	bics	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa6:	2282      	movs	r2, #130	; 0x82
 8004aa8:	6861      	ldr	r1, [r4, #4]
 8004aaa:	0052      	lsls	r2, r2, #1
 8004aac:	4291      	cmp	r1, r2
 8004aae:	d10c      	bne.n	8004aca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8004ab0:	2180      	movs	r1, #128	; 0x80
 8004ab2:	68a2      	ldr	r2, [r4, #8]
 8004ab4:	0209      	lsls	r1, r1, #8
 8004ab6:	428a      	cmp	r2, r1
 8004ab8:	d003      	beq.n	8004ac2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	00c9      	lsls	r1, r1, #3
 8004abe:	428a      	cmp	r2, r1
 8004ac0:	d103      	bne.n	8004aca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8004ac2:	2140      	movs	r1, #64	; 0x40
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	438a      	bics	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aca:	2180      	movs	r1, #128	; 0x80
 8004acc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ace:	0189      	lsls	r1, r1, #6
 8004ad0:	428a      	cmp	r2, r1
 8004ad2:	d106      	bne.n	8004ae2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	480d      	ldr	r0, [pc, #52]	; (8004b0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8004ad8:	4001      	ands	r1, r0
 8004ada:	6019      	str	r1, [r3, #0]
 8004adc:	6819      	ldr	r1, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004ae2:	0023      	movs	r3, r4
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	3351      	adds	r3, #81	; 0x51
 8004ae8:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004aea:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004aec:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004aee:	3450      	adds	r4, #80	; 0x50
 8004af0:	7023      	strb	r3, [r4, #0]
}
 8004af2:	b005      	add	sp, #20
 8004af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004af6:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004af8:	1e5a      	subs	r2, r3, #1
 8004afa:	4193      	sbcs	r3, r2
 8004afc:	425b      	negs	r3, r3
 8004afe:	401d      	ands	r5, r3
      count--;
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	e7ba      	b.n	8004a7c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	20000018 	.word	0x20000018
 8004b0c:	ffffdfff 	.word	0xffffdfff

08004b10 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b10:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <SPI_EndRxTxTransaction+0x5c>)
{
 8004b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b14:	0004      	movs	r4, r0
 8004b16:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	4915      	ldr	r1, [pc, #84]	; (8004b70 <SPI_EndRxTxTransaction+0x60>)
{
 8004b1c:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b1e:	f7fb fb23 	bl	8000168 <__udivsi3>
 8004b22:	23fa      	movs	r3, #250	; 0xfa
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4343      	muls	r3, r0
 8004b28:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2a:	2382      	movs	r3, #130	; 0x82
 8004b2c:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b2e:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4299      	cmp	r1, r3
 8004b34:	d10d      	bne.n	8004b52 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b36:	0033      	movs	r3, r6
 8004b38:	002a      	movs	r2, r5
 8004b3a:	2180      	movs	r1, #128	; 0x80
 8004b3c:	0020      	movs	r0, r4
 8004b3e:	f7ff ff8b 	bl	8004a58 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d00f      	beq.n	8004b66 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b46:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004b48:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8004b50:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8004b52:	9b01      	ldr	r3, [sp, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d006      	beq.n	8004b66 <SPI_EndRxTxTransaction+0x56>
      count--;
 8004b58:	9b01      	ldr	r3, [sp, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4213      	tst	r3, r2
 8004b64:	d1f5      	bne.n	8004b52 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8004b66:	2000      	movs	r0, #0
 8004b68:	e7f2      	b.n	8004b50 <SPI_EndRxTxTransaction+0x40>
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	20000018 	.word	0x20000018
 8004b70:	016e3600 	.word	0x016e3600

08004b74 <HAL_SPI_MspInit>:
}
 8004b74:	4770      	bx	lr
	...

08004b78 <HAL_SPI_Init>:
{
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004b7c:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004b7e:	2c00      	cmp	r4, #0
 8004b80:	d054      	beq.n	8004c2c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d152      	bne.n	8004c2e <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b88:	2282      	movs	r2, #130	; 0x82
 8004b8a:	6861      	ldr	r1, [r4, #4]
 8004b8c:	0052      	lsls	r2, r2, #1
 8004b8e:	4291      	cmp	r1, r2
 8004b90:	d000      	beq.n	8004b94 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b92:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b94:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b96:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b98:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b9a:	3551      	adds	r5, #81	; 0x51
 8004b9c:	782b      	ldrb	r3, [r5, #0]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8004ba4:	0023      	movs	r3, r4
 8004ba6:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8004ba8:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004baa:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8004bac:	f7ff ffe2 	bl	8004b74 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004bb0:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8004bb2:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8004bb4:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8004bb6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bb8:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8004bba:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bbc:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8004bbe:	4393      	bics	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bc2:	2382      	movs	r3, #130	; 0x82
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4033      	ands	r3, r6
 8004bc8:	2684      	movs	r6, #132	; 0x84
 8004bca:	0236      	lsls	r6, r6, #8
 8004bcc:	403e      	ands	r6, r7
 8004bce:	4333      	orrs	r3, r6
 8004bd0:	2680      	movs	r6, #128	; 0x80
 8004bd2:	68e7      	ldr	r7, [r4, #12]
 8004bd4:	0136      	lsls	r6, r6, #4
 8004bd6:	403e      	ands	r6, r7
 8004bd8:	4333      	orrs	r3, r6
 8004bda:	6926      	ldr	r6, [r4, #16]
 8004bdc:	69a2      	ldr	r2, [r4, #24]
 8004bde:	4030      	ands	r0, r6
 8004be0:	2601      	movs	r6, #1
 8004be2:	4303      	orrs	r3, r0
 8004be4:	6960      	ldr	r0, [r4, #20]
 8004be6:	69e7      	ldr	r7, [r4, #28]
 8004be8:	4030      	ands	r0, r6
 8004bea:	4303      	orrs	r3, r0
 8004bec:	2080      	movs	r0, #128	; 0x80
 8004bee:	0080      	lsls	r0, r0, #2
 8004bf0:	4010      	ands	r0, r2
 8004bf2:	4303      	orrs	r3, r0
 8004bf4:	2038      	movs	r0, #56	; 0x38
 8004bf6:	4038      	ands	r0, r7
 8004bf8:	4303      	orrs	r3, r0
 8004bfa:	2080      	movs	r0, #128	; 0x80
 8004bfc:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bfe:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c00:	4038      	ands	r0, r7
 8004c02:	4303      	orrs	r3, r0
 8004c04:	2080      	movs	r0, #128	; 0x80
 8004c06:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004c08:	0180      	lsls	r0, r0, #6
 8004c0a:	4038      	ands	r0, r7
 8004c0c:	4303      	orrs	r3, r0
 8004c0e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c10:	2304      	movs	r3, #4
 8004c12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c14:	401a      	ands	r2, r3
 8004c16:	330c      	adds	r3, #12
 8004c18:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c1a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c20:	69cb      	ldr	r3, [r1, #28]
 8004c22:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <HAL_SPI_Init+0xc0>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c28:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c2a:	702e      	strb	r6, [r5, #0]
}
 8004c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c32:	6163      	str	r3, [r4, #20]
 8004c34:	e7ae      	b.n	8004b94 <HAL_SPI_Init+0x1c>
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	fffff7ff 	.word	0xfffff7ff

08004c3c <HAL_SPI_TransmitReceive>:
{
 8004c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c3e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8004c40:	0003      	movs	r3, r0
 8004c42:	3350      	adds	r3, #80	; 0x50
{
 8004c44:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8004c46:	781a      	ldrb	r2, [r3, #0]
{
 8004c48:	0004      	movs	r4, r0
 8004c4a:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8004c4c:	2002      	movs	r0, #2
{
 8004c4e:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8004c50:	2a01      	cmp	r2, #1
 8004c52:	d100      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x1a>
 8004c54:	e092      	b.n	8004d7c <HAL_SPI_TransmitReceive+0x140>
 8004c56:	2201      	movs	r2, #1
 8004c58:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004c5a:	f7fd fe83 	bl	8002964 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004c5e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8004c60:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8004c62:	3351      	adds	r3, #81	; 0x51
 8004c64:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004c66:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004c68:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d00a      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x48>
 8004c6e:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8004c70:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4299      	cmp	r1, r3
 8004c76:	d000      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0x3e>
 8004c78:	e079      	b.n	8004d6e <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c7a:	68a3      	ldr	r3, [r4, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d176      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x132>
 8004c80:	2a04      	cmp	r2, #4
 8004c82:	d174      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8004c84:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c86:	2d00      	cmp	r5, #0
 8004c88:	d071      	beq.n	8004d6e <HAL_SPI_TransmitReceive+0x132>
 8004c8a:	2f00      	cmp	r7, #0
 8004c8c:	d06f      	beq.n	8004d6e <HAL_SPI_TransmitReceive+0x132>
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	d06d      	beq.n	8004d6e <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c92:	0023      	movs	r3, r4
 8004c94:	3351      	adds	r3, #81	; 0x51
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	2a04      	cmp	r2, #4
 8004c9a:	d001      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c9c:	2205      	movs	r2, #5
 8004c9e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca0:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca2:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8004ca6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ca8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004caa:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8004cac:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004cae:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cb0:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cb2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cb4:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cb6:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cb8:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cba:	4210      	tst	r0, r2
 8004cbc:	d102      	bne.n	8004cc4 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4302      	orrs	r2, r0
 8004cc2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cc4:	2280      	movs	r2, #128	; 0x80
 8004cc6:	68e0      	ldr	r0, [r4, #12]
 8004cc8:	0112      	lsls	r2, r2, #4
 8004cca:	4290      	cmp	r0, r2
 8004ccc:	d158      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cce:	2900      	cmp	r1, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0x9a>
 8004cd2:	2e01      	cmp	r6, #1
 8004cd4:	d107      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cda:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004cdc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cde:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004ce6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce8:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cea:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10e      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0xd4>
 8004cf2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cf8:	0020      	movs	r0, r4
 8004cfa:	9a01      	ldr	r2, [sp, #4]
 8004cfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004cfe:	f7ff ff07 	bl	8004b10 <SPI_EndRxTxTransaction>
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d100      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0xcc>
 8004d06:	e088      	b.n	8004e1a <HAL_SPI_TransmitReceive+0x1de>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d08:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8004d0a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d0c:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8004d0e:	e02e      	b.n	8004d6e <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d10:	6821      	ldr	r1, [r4, #0]
 8004d12:	688b      	ldr	r3, [r1, #8]
 8004d14:	423b      	tst	r3, r7
 8004d16:	d00e      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0xfa>
 8004d18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0xfa>
 8004d1e:	2d01      	cmp	r5, #1
 8004d20:	d109      	bne.n	8004d36 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8004d22:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d26:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d28:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d2a:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d36:	688b      	ldr	r3, [r1, #8]
 8004d38:	001a      	movs	r2, r3
 8004d3a:	4032      	ands	r2, r6
 8004d3c:	4233      	tst	r3, r6
 8004d3e:	d00c      	beq.n	8004d5a <HAL_SPI_TransmitReceive+0x11e>
 8004d40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8004d46:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d48:	68c9      	ldr	r1, [r1, #12]
 8004d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d4c:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d4e:	3302      	adds	r3, #2
 8004d50:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004d52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d5a:	f7fd fe03 	bl	8002964 <HAL_GetTick>
 8004d5e:	9b01      	ldr	r3, [sp, #4]
 8004d60:	1ac0      	subs	r0, r0, r3
 8004d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d64:	4298      	cmp	r0, r3
 8004d66:	d3c1      	bcc.n	8004cec <HAL_SPI_TransmitReceive+0xb0>
 8004d68:	3301      	adds	r3, #1
 8004d6a:	d0bf      	beq.n	8004cec <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8004d6c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004d6e:	0023      	movs	r3, r4
 8004d70:	2201      	movs	r2, #1
 8004d72:	3351      	adds	r3, #81	; 0x51
 8004d74:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004d76:	2300      	movs	r3, #0
 8004d78:	3450      	adds	r4, #80	; 0x50
 8004d7a:	7023      	strb	r3, [r4, #0]
}
 8004d7c:	b005      	add	sp, #20
 8004d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x14c>
 8004d84:	2e01      	cmp	r6, #1
 8004d86:	d108      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d88:	782a      	ldrb	r2, [r5, #0]
 8004d8a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d8e:	3301      	adds	r3, #1
 8004d90:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004d92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004d9a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d9c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d9e:	002e      	movs	r6, r5
 8004da0:	e030      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x1c8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	423a      	tst	r2, r7
 8004da8:	d00f      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x18e>
 8004daa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004dac:	2a00      	cmp	r2, #0
 8004dae:	d00c      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x18e>
 8004db0:	2d01      	cmp	r5, #1
 8004db2:	d10a      	bne.n	8004dca <HAL_SPI_TransmitReceive+0x18e>
        txallowed = 0U;
 8004db4:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004db6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004dbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	6899      	ldr	r1, [r3, #8]
 8004dce:	000a      	movs	r2, r1
 8004dd0:	4032      	ands	r2, r6
 8004dd2:	4231      	tst	r1, r6
 8004dd4:	d00d      	beq.n	8004df2 <HAL_SPI_TransmitReceive+0x1b6>
 8004dd6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	d00a      	beq.n	8004df2 <HAL_SPI_TransmitReceive+0x1b6>
        txallowed = 1U;
 8004ddc:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004de2:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8004de4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004de6:	3301      	adds	r3, #1
 8004de8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004dea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004df2:	f7fd fdb7 	bl	8002964 <HAL_GetTick>
 8004df6:	9b01      	ldr	r3, [sp, #4]
 8004df8:	1ac0      	subs	r0, r0, r3
 8004dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfc:	4298      	cmp	r0, r3
 8004dfe:	d308      	bcc.n	8004e12 <HAL_SPI_TransmitReceive+0x1d6>
 8004e00:	3301      	adds	r3, #1
 8004e02:	d1b3      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x130>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1cb      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x166>
 8004e0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1c8      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x166>
 8004e10:	e772      	b.n	8004cf8 <HAL_SPI_TransmitReceive+0xbc>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f5      	bne.n	8004e04 <HAL_SPI_TransmitReceive+0x1c8>
 8004e18:	e7a8      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e1a:	68a3      	ldr	r3, [r4, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1a6      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	9003      	str	r0, [sp, #12]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	9203      	str	r2, [sp, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	9303      	str	r3, [sp, #12]
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	e79e      	b.n	8004d6e <HAL_SPI_TransmitReceive+0x132>

08004e30 <HAL_SPI_GetState>:
  return hspi->State;
 8004e30:	3051      	adds	r0, #81	; 0x51
 8004e32:	7800      	ldrb	r0, [r0, #0]
 8004e34:	b2c0      	uxtb	r0, r0
}
 8004e36:	4770      	bx	lr

08004e38 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e38:	6803      	ldr	r3, [r0, #0]
 8004e3a:	490b      	ldr	r1, [pc, #44]	; (8004e68 <UART_EndRxTransfer+0x30>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	400a      	ands	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	3123      	adds	r1, #35	; 0x23
 8004e46:	31ff      	adds	r1, #255	; 0xff
 8004e48:	438a      	bics	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004e4e:	428a      	cmp	r2, r1
 8004e50:	d103      	bne.n	8004e5a <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	310f      	adds	r1, #15
 8004e56:	438a      	bics	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e62:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004e64:	4770      	bx	lr
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	fffffedf 	.word	0xfffffedf

08004e6c <HAL_UART_Transmit_DMA>:
{
 8004e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e6e:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004e70:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8004e72:	0004      	movs	r4, r0
    return HAL_BUSY;
 8004e74:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004e76:	2a20      	cmp	r2, #32
 8004e78:	d13a      	bne.n	8004ef0 <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 8004e7a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d037      	beq.n	8004ef0 <HAL_UART_Transmit_DMA+0x84>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d035      	beq.n	8004ef0 <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e84:	2280      	movs	r2, #128	; 0x80
 8004e86:	68a0      	ldr	r0, [r4, #8]
 8004e88:	0152      	lsls	r2, r2, #5
 8004e8a:	4290      	cmp	r0, r2
 8004e8c:	d106      	bne.n	8004e9c <HAL_UART_Transmit_DMA+0x30>
 8004e8e:	6922      	ldr	r2, [r4, #16]
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	d103      	bne.n	8004e9c <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e94:	3201      	adds	r2, #1
      return HAL_ERROR;
 8004e96:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e98:	4211      	tst	r1, r2
 8004e9a:	d129      	bne.n	8004ef0 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 8004e9c:	0025      	movs	r5, r4
 8004e9e:	3574      	adds	r5, #116	; 0x74
 8004ea0:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 8004ea2:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004ea4:	2a01      	cmp	r2, #1
 8004ea6:	d023      	beq.n	8004ef0 <HAL_UART_Transmit_DMA+0x84>
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 8004eac:	0022      	movs	r2, r4
 8004eae:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8004eb0:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb2:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8004eb4:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8004eb6:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb8:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8004eba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	1d27      	adds	r7, r4, #4
 8004ebe:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec0:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8004ec2:	42b0      	cmp	r0, r6
 8004ec4:	d015      	beq.n	8004ef2 <HAL_UART_Transmit_DMA+0x86>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004ec6:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8004ec8:	6386      	str	r6, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004eca:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ecc:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <HAL_UART_Transmit_DMA+0x9c>)
 8004ece:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ed0:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <HAL_UART_Transmit_DMA+0xa0>)
 8004ed2:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ed4:	4a0e      	ldr	r2, [pc, #56]	; (8004f10 <HAL_UART_Transmit_DMA+0xa4>)
 8004ed6:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004ed8:	9a01      	ldr	r2, [sp, #4]
 8004eda:	3228      	adds	r2, #40	; 0x28
 8004edc:	f7fe fad0 	bl	8003480 <HAL_DMA_Start_IT>
 8004ee0:	42b0      	cmp	r0, r6
 8004ee2:	d006      	beq.n	8004ef2 <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ee4:	2310      	movs	r3, #16
        return HAL_ERROR;
 8004ee6:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8004eea:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8004eec:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004eee:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004ef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004ef2:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8004ef4:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004ef6:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8004ef8:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004efa:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8004efc:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004efe:	6899      	ldr	r1, [r3, #8]
 8004f00:	1892      	adds	r2, r2, r2
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8004f06:	e7f3      	b.n	8004ef0 <HAL_UART_Transmit_DMA+0x84>
 8004f08:	08004f15 	.word	0x08004f15
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f57 	.word	0x08004f57

08004f14 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f14:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f16:	681b      	ldr	r3, [r3, #0]
{
 8004f18:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f20:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f22:	4019      	ands	r1, r3
 8004f24:	421a      	tst	r2, r3
 8004f26:	d10c      	bne.n	8004f42 <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8004f28:	0003      	movs	r3, r0
 8004f2a:	3352      	adds	r3, #82	; 0x52
 8004f2c:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	6803      	ldr	r3, [r0, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	438a      	bics	r2, r1
 8004f36:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f38:	2240      	movs	r2, #64	; 0x40
 8004f3a:	6819      	ldr	r1, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f40:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004f42:	f7fd fe5f 	bl	8002c04 <HAL_UART_TxCpltCallback>
}
 8004f46:	e7fb      	b.n	8004f40 <UART_DMATransmitCplt+0x2c>

08004f48 <HAL_UART_TxHalfCpltCallback>:
 8004f48:	4770      	bx	lr

08004f4a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f4a:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004f4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004f4e:	f7ff fffb 	bl	8004f48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f52:	bd10      	pop	{r4, pc}

08004f54 <HAL_UART_ErrorCallback>:
 8004f54:	4770      	bx	lr

08004f56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f56:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f58:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f5a:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004f5c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004f5e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f60:	6898      	ldr	r0, [r3, #8]
 8004f62:	0600      	lsls	r0, r0, #24
 8004f64:	d50b      	bpl.n	8004f7e <UART_DMAError+0x28>
 8004f66:	2a21      	cmp	r2, #33	; 0x21
 8004f68:	d109      	bne.n	8004f7e <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f6a:	0022      	movs	r2, r4
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	3252      	adds	r2, #82	; 0x52
 8004f70:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	30c0      	adds	r0, #192	; 0xc0
 8004f76:	4382      	bics	r2, r0
 8004f78:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	065b      	lsls	r3, r3, #25
 8004f82:	d508      	bpl.n	8004f96 <UART_DMAError+0x40>
 8004f84:	2922      	cmp	r1, #34	; 0x22
 8004f86:	d106      	bne.n	8004f96 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004f88:	0023      	movs	r3, r4
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8004f8e:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8004f90:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8004f92:	f7ff ff51 	bl	8004e38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f96:	2310      	movs	r3, #16
 8004f98:	1d22      	adds	r2, r4, #4
 8004f9a:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f9c:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8004fa2:	f7ff ffd7 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa6:	bd10      	pop	{r4, pc}

08004fa8 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fa8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	0002      	movs	r2, r0
{
 8004fae:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8004fb0:	325a      	adds	r2, #90	; 0x5a
 8004fb2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8004fb4:	3a08      	subs	r2, #8
 8004fb6:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb8:	f7ff ffcc 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fbc:	bd10      	pop	{r4, pc}

08004fbe <HAL_UARTEx_RxEventCallback>:
}
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fc0:	6803      	ldr	r3, [r0, #0]
{
 8004fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fc4:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fc6:	4a85      	ldr	r2, [pc, #532]	; (80051dc <HAL_UART_IRQHandler+0x21c>)
{
 8004fc8:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fca:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fcc:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8004fce:	4211      	tst	r1, r2
 8004fd0:	d10b      	bne.n	8004fea <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	4211      	tst	r1, r2
 8004fd6:	d100      	bne.n	8004fda <HAL_UART_IRQHandler+0x1a>
 8004fd8:	e076      	b.n	80050c8 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fda:	4210      	tst	r0, r2
 8004fdc:	d100      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x20>
 8004fde:	e073      	b.n	80050c8 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8004fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8004fe2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d165      	bne.n	80050b4 <HAL_UART_IRQHandler+0xf4>
 8004fe8:	e065      	b.n	80050b6 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fea:	2201      	movs	r2, #1
 8004fec:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fee:	4d7c      	ldr	r5, [pc, #496]	; (80051e0 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ff0:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ff2:	4005      	ands	r5, r0
 8004ff4:	433d      	orrs	r5, r7
 8004ff6:	d067      	beq.n	80050c8 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ff8:	1d25      	adds	r5, r4, #4
 8004ffa:	4211      	tst	r1, r2
 8004ffc:	d005      	beq.n	800500a <HAL_UART_IRQHandler+0x4a>
 8004ffe:	05c6      	lsls	r6, r0, #23
 8005000:	d503      	bpl.n	800500a <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005002:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005004:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005006:	4332      	orrs	r2, r6
 8005008:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800500a:	2202      	movs	r2, #2
 800500c:	4211      	tst	r1, r2
 800500e:	d006      	beq.n	800501e <HAL_UART_IRQHandler+0x5e>
 8005010:	2f00      	cmp	r7, #0
 8005012:	d004      	beq.n	800501e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005014:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005016:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005018:	1892      	adds	r2, r2, r2
 800501a:	4332      	orrs	r2, r6
 800501c:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800501e:	2204      	movs	r2, #4
 8005020:	4211      	tst	r1, r2
 8005022:	d006      	beq.n	8005032 <HAL_UART_IRQHandler+0x72>
 8005024:	2f00      	cmp	r7, #0
 8005026:	d004      	beq.n	8005032 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005028:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800502a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800502c:	3a02      	subs	r2, #2
 800502e:	4332      	orrs	r2, r6
 8005030:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005032:	2208      	movs	r2, #8
 8005034:	4211      	tst	r1, r2
 8005036:	d007      	beq.n	8005048 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005038:	2620      	movs	r6, #32
 800503a:	4006      	ands	r6, r0
 800503c:	433e      	orrs	r6, r7
 800503e:	d003      	beq.n	8005048 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005040:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005042:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005044:	4332      	orrs	r2, r6
 8005046:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005048:	2280      	movs	r2, #128	; 0x80
 800504a:	0112      	lsls	r2, r2, #4
 800504c:	4211      	tst	r1, r2
 800504e:	d006      	beq.n	800505e <HAL_UART_IRQHandler+0x9e>
 8005050:	0146      	lsls	r6, r0, #5
 8005052:	d504      	bpl.n	800505e <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005054:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005056:	2320      	movs	r3, #32
 8005058:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800505a:	4313      	orrs	r3, r2
 800505c:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800505e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d028      	beq.n	80050b6 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005064:	2320      	movs	r3, #32
 8005066:	4219      	tst	r1, r3
 8005068:	d006      	beq.n	8005078 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800506a:	4218      	tst	r0, r3
 800506c:	d004      	beq.n	8005078 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 800506e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8005074:	0020      	movs	r0, r4
 8005076:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005078:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800507a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800507c:	2740      	movs	r7, #64	; 0x40
 800507e:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005080:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005082:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005084:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8005086:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005088:	431e      	orrs	r6, r3
 800508a:	d019      	beq.n	80050c0 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 800508c:	f7ff fed4 	bl	8004e38 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	423a      	tst	r2, r7
 8005096:	d00f      	beq.n	80050b8 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005098:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800509a:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509c:	43ba      	bics	r2, r7
 800509e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d009      	beq.n	80050b8 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050a4:	4b4f      	ldr	r3, [pc, #316]	; (80051e4 <HAL_UART_IRQHandler+0x224>)
 80050a6:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050a8:	f7fe fa4a 	bl	8003540 <HAL_DMA_Abort_IT>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050b0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80050b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80050b4:	4798      	blx	r3
}
 80050b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80050b8:	0020      	movs	r0, r4
 80050ba:	f7ff ff4b 	bl	8004f54 <HAL_UART_ErrorCallback>
 80050be:	e7fa      	b.n	80050b6 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 80050c0:	f7ff ff48 	bl	8004f54 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	67ee      	str	r6, [r5, #124]	; 0x7c
 80050c6:	e7f6      	b.n	80050b6 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80050ca:	2d01      	cmp	r5, #1
 80050cc:	d161      	bne.n	8005192 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80050ce:	2210      	movs	r2, #16
 80050d0:	4211      	tst	r1, r2
 80050d2:	d05e      	beq.n	8005192 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80050d4:	4210      	tst	r0, r2
 80050d6:	d05c      	beq.n	8005192 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050d8:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	2640      	movs	r6, #64	; 0x40
 80050de:	000f      	movs	r7, r1
 80050e0:	4037      	ands	r7, r6
 80050e2:	4231      	tst	r1, r6
 80050e4:	d038      	beq.n	8005158 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050e6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80050e8:	680f      	ldr	r7, [r1, #0]
 80050ea:	9100      	str	r1, [sp, #0]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 80050f0:	2900      	cmp	r1, #0
 80050f2:	d0e0      	beq.n	80050b6 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80050f4:	2058      	movs	r0, #88	; 0x58
 80050f6:	4684      	mov	ip, r0
 80050f8:	44a4      	add	ip, r4
 80050fa:	4660      	mov	r0, ip
 80050fc:	8800      	ldrh	r0, [r0, #0]
 80050fe:	4288      	cmp	r0, r1
 8005100:	d9d9      	bls.n	80050b6 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8005102:	205a      	movs	r0, #90	; 0x5a
 8005104:	4684      	mov	ip, r0
 8005106:	44a4      	add	ip, r4
 8005108:	4660      	mov	r0, ip
 800510a:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800510c:	683f      	ldr	r7, [r7, #0]
 800510e:	2120      	movs	r1, #32
 8005110:	0038      	movs	r0, r7
 8005112:	4008      	ands	r0, r1
 8005114:	9001      	str	r0, [sp, #4]
 8005116:	420f      	tst	r7, r1
 8005118:	d112      	bne.n	8005140 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511a:	681f      	ldr	r7, [r3, #0]
 800511c:	4832      	ldr	r0, [pc, #200]	; (80051e8 <HAL_UART_IRQHandler+0x228>)
 800511e:	4007      	ands	r7, r0
 8005120:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005124:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005126:	43af      	bics	r7, r5
 8005128:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800512a:	689d      	ldr	r5, [r3, #8]
 800512c:	43b5      	bics	r5, r6
 800512e:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8005130:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005132:	9901      	ldr	r1, [sp, #4]
 8005134:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	4391      	bics	r1, r2
 800513a:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800513c:	f7fe f9e0 	bl	8003500 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005140:	0023      	movs	r3, r4
 8005142:	0022      	movs	r2, r4
 8005144:	335a      	adds	r3, #90	; 0x5a
 8005146:	3258      	adds	r2, #88	; 0x58
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	8811      	ldrh	r1, [r2, #0]
 800514c:	1ac9      	subs	r1, r1, r3
 800514e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005150:	0020      	movs	r0, r4
 8005152:	f7ff ff34 	bl	8004fbe <HAL_UARTEx_RxEventCallback>
 8005156:	e7ae      	b.n	80050b6 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005158:	0026      	movs	r6, r4
 800515a:	365a      	adds	r6, #90	; 0x5a
 800515c:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 800515e:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005160:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8005162:	2900      	cmp	r1, #0
 8005164:	d0a7      	beq.n	80050b6 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005166:	0021      	movs	r1, r4
 8005168:	3158      	adds	r1, #88	; 0x58
 800516a:	8809      	ldrh	r1, [r1, #0]
 800516c:	1a09      	subs	r1, r1, r0
 800516e:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8005170:	2900      	cmp	r1, #0
 8005172:	d0a0      	beq.n	80050b6 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	4e1d      	ldr	r6, [pc, #116]	; (80051ec <HAL_UART_IRQHandler+0x22c>)
 8005178:	4030      	ands	r0, r6
 800517a:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517c:	6898      	ldr	r0, [r3, #8]
 800517e:	43a8      	bics	r0, r5
 8005180:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005182:	2020      	movs	r0, #32
 8005184:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005188:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 800518a:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518c:	4390      	bics	r0, r2
 800518e:	6018      	str	r0, [r3, #0]
 8005190:	e7de      	b.n	8005150 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005192:	2280      	movs	r2, #128	; 0x80
 8005194:	0352      	lsls	r2, r2, #13
 8005196:	4211      	tst	r1, r2
 8005198:	d006      	beq.n	80051a8 <HAL_UART_IRQHandler+0x1e8>
 800519a:	0275      	lsls	r5, r6, #9
 800519c:	d504      	bpl.n	80051a8 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 800519e:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051a0:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80051a2:	f000 fb55 	bl	8005850 <HAL_UARTEx_WakeupCallback>
    return;
 80051a6:	e786      	b.n	80050b6 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051a8:	2280      	movs	r2, #128	; 0x80
 80051aa:	4211      	tst	r1, r2
 80051ac:	d003      	beq.n	80051b6 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051ae:	4210      	tst	r0, r2
 80051b0:	d001      	beq.n	80051b6 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 80051b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80051b4:	e715      	b.n	8004fe2 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051b6:	2540      	movs	r5, #64	; 0x40
 80051b8:	4229      	tst	r1, r5
 80051ba:	d100      	bne.n	80051be <HAL_UART_IRQHandler+0x1fe>
 80051bc:	e77b      	b.n	80050b6 <HAL_UART_IRQHandler+0xf6>
 80051be:	4228      	tst	r0, r5
 80051c0:	d100      	bne.n	80051c4 <HAL_UART_IRQHandler+0x204>
 80051c2:	e778      	b.n	80050b6 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051c4:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051c6:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051c8:	43aa      	bics	r2, r5
 80051ca:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80051cc:	2320      	movs	r3, #32
 80051ce:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 80051d4:	f7fd fd16 	bl	8002c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d8:	e76d      	b.n	80050b6 <HAL_UART_IRQHandler+0xf6>
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	0000080f 	.word	0x0000080f
 80051e0:	04000120 	.word	0x04000120
 80051e4:	08004fa9 	.word	0x08004fa9
 80051e8:	fffffeff 	.word	0xfffffeff
 80051ec:	fffffedf 	.word	0xfffffedf

080051f0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051f0:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80051f2:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051f4:	6803      	ldr	r3, [r0, #0]
{
 80051f6:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051f8:	2a22      	cmp	r2, #34	; 0x22
 80051fa:	d134      	bne.n	8005266 <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 80051fc:	0002      	movs	r2, r0
 80051fe:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005202:	8812      	ldrh	r2, [r2, #0]
 8005204:	4013      	ands	r3, r2
 8005206:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005208:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800520a:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800520c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800520e:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8005210:	3301      	adds	r3, #1
 8005212:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005214:	8813      	ldrh	r3, [r2, #0]
 8005216:	3b01      	subs	r3, #1
 8005218:	b29b      	uxth	r3, r3
 800521a:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800521c:	8813      	ldrh	r3, [r2, #0]
 800521e:	b299      	uxth	r1, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11b      	bne.n	800525c <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005224:	6803      	ldr	r3, [r0, #0]
 8005226:	4812      	ldr	r0, [pc, #72]	; (8005270 <UART_RxISR_8BIT+0x80>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4002      	ands	r2, r0
 800522c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	3023      	adds	r0, #35	; 0x23
 8005232:	30ff      	adds	r0, #255	; 0xff
 8005234:	4382      	bics	r2, r0
 8005236:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005238:	2220      	movs	r2, #32
 800523a:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800523c:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 800523e:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005240:	4282      	cmp	r2, r0
 8005242:	d10c      	bne.n	800525e <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005244:	2110      	movs	r1, #16
 8005246:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005248:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524a:	438a      	bics	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800524e:	0023      	movs	r3, r4
 8005250:	3358      	adds	r3, #88	; 0x58
 8005252:	8819      	ldrh	r1, [r3, #0]
 8005254:	f7ff feb3 	bl	8004fbe <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005258:	2300      	movs	r3, #0
 800525a:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800525c:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800525e:	0020      	movs	r0, r4
 8005260:	f7fd fcd8 	bl	8002c14 <HAL_UART_RxCpltCallback>
 8005264:	e7f8      	b.n	8005258 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005266:	2208      	movs	r2, #8
 8005268:	6999      	ldr	r1, [r3, #24]
 800526a:	430a      	orrs	r2, r1
 800526c:	619a      	str	r2, [r3, #24]
}
 800526e:	e7f5      	b.n	800525c <UART_RxISR_8BIT+0x6c>
 8005270:	fffffedf 	.word	0xfffffedf

08005274 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005274:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8005276:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005278:	6803      	ldr	r3, [r0, #0]
{
 800527a:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800527c:	2a22      	cmp	r2, #34	; 0x22
 800527e:	d131      	bne.n	80052e4 <UART_RxISR_16BIT+0x70>
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005280:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8005282:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005284:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005286:	8800      	ldrh	r0, [r0, #0]
 8005288:	4001      	ands	r1, r0
 800528a:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800528c:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 800528e:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8005290:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005292:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8005294:	880a      	ldrh	r2, [r1, #0]
 8005296:	3a01      	subs	r2, #1
 8005298:	b292      	uxth	r2, r2
 800529a:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 800529c:	880a      	ldrh	r2, [r1, #0]
 800529e:	b291      	uxth	r1, r2
 80052a0:	2a00      	cmp	r2, #0
 80052a2:	d11a      	bne.n	80052da <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4812      	ldr	r0, [pc, #72]	; (80052f0 <UART_RxISR_16BIT+0x7c>)
 80052a8:	4002      	ands	r2, r0
 80052aa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	3023      	adds	r0, #35	; 0x23
 80052b0:	30ff      	adds	r0, #255	; 0xff
 80052b2:	4382      	bics	r2, r0
 80052b4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052b6:	2220      	movs	r2, #32
 80052b8:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ba:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 80052bc:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052be:	4282      	cmp	r2, r0
 80052c0:	d10c      	bne.n	80052dc <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c2:	2110      	movs	r1, #16
 80052c4:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052c6:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c8:	438a      	bics	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052cc:	0023      	movs	r3, r4
 80052ce:	3358      	adds	r3, #88	; 0x58
 80052d0:	8819      	ldrh	r1, [r3, #0]
 80052d2:	f7ff fe74 	bl	8004fbe <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d6:	2300      	movs	r3, #0
 80052d8:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052da:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80052dc:	0020      	movs	r0, r4
 80052de:	f7fd fc99 	bl	8002c14 <HAL_UART_RxCpltCallback>
 80052e2:	e7f8      	b.n	80052d6 <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052e4:	2208      	movs	r2, #8
 80052e6:	6999      	ldr	r1, [r3, #24]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	619a      	str	r2, [r3, #24]
}
 80052ec:	e7f5      	b.n	80052da <UART_RxISR_16BIT+0x66>
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	fffffedf 	.word	0xfffffedf

080052f4 <UART_SetConfig>:
{
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052f8:	6925      	ldr	r5, [r4, #16]
 80052fa:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80052fc:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052fe:	4329      	orrs	r1, r5
 8005300:	6965      	ldr	r5, [r4, #20]
 8005302:	69c3      	ldr	r3, [r0, #28]
 8005304:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005306:	6810      	ldr	r0, [r2, #0]
 8005308:	4d79      	ldr	r5, [pc, #484]	; (80054f0 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800530a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800530c:	4028      	ands	r0, r5
 800530e:	4301      	orrs	r1, r0
 8005310:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005312:	6851      	ldr	r1, [r2, #4]
 8005314:	4877      	ldr	r0, [pc, #476]	; (80054f4 <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005316:	4d78      	ldr	r5, [pc, #480]	; (80054f8 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005318:	4001      	ands	r1, r0
 800531a:	68e0      	ldr	r0, [r4, #12]
 800531c:	4301      	orrs	r1, r0
 800531e:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005320:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005322:	42aa      	cmp	r2, r5
 8005324:	d001      	beq.n	800532a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8005326:	6a21      	ldr	r1, [r4, #32]
 8005328:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800532a:	6891      	ldr	r1, [r2, #8]
 800532c:	4e73      	ldr	r6, [pc, #460]	; (80054fc <UART_SetConfig+0x208>)
 800532e:	4031      	ands	r1, r6
 8005330:	4301      	orrs	r1, r0
 8005332:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005334:	4972      	ldr	r1, [pc, #456]	; (8005500 <UART_SetConfig+0x20c>)
 8005336:	428a      	cmp	r2, r1
 8005338:	d10f      	bne.n	800535a <UART_SetConfig+0x66>
 800533a:	2103      	movs	r1, #3
 800533c:	4a71      	ldr	r2, [pc, #452]	; (8005504 <UART_SetConfig+0x210>)
 800533e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005340:	400a      	ands	r2, r1
 8005342:	3a01      	subs	r2, #1
 8005344:	4970      	ldr	r1, [pc, #448]	; (8005508 <UART_SetConfig+0x214>)
 8005346:	2a02      	cmp	r2, #2
 8005348:	d910      	bls.n	800536c <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800534a:	2280      	movs	r2, #128	; 0x80
 800534c:	0212      	lsls	r2, r2, #8
 800534e:	4293      	cmp	r3, r2
 8005350:	d000      	beq.n	8005354 <UART_SetConfig+0x60>
 8005352:	e0a3      	b.n	800549c <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005354:	f7fe ff1e 	bl	8004194 <HAL_RCC_GetPCLK2Freq>
 8005358:	e0c5      	b.n	80054e6 <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800535a:	496c      	ldr	r1, [pc, #432]	; (800550c <UART_SetConfig+0x218>)
 800535c:	428a      	cmp	r2, r1
 800535e:	d118      	bne.n	8005392 <UART_SetConfig+0x9e>
 8005360:	200c      	movs	r0, #12
 8005362:	4a68      	ldr	r2, [pc, #416]	; (8005504 <UART_SetConfig+0x210>)
 8005364:	4968      	ldr	r1, [pc, #416]	; (8005508 <UART_SetConfig+0x214>)
 8005366:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005368:	3103      	adds	r1, #3
 800536a:	4002      	ands	r2, r0
 800536c:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	0212      	lsls	r2, r2, #8
 8005372:	4293      	cmp	r3, r2
 8005374:	d000      	beq.n	8005378 <UART_SetConfig+0x84>
 8005376:	e083      	b.n	8005480 <UART_SetConfig+0x18c>
    switch (clocksource)
 8005378:	2808      	cmp	r0, #8
 800537a:	d824      	bhi.n	80053c6 <UART_SetConfig+0xd2>
 800537c:	f7fa fee0 	bl	8000140 <__gnu_thumb1_case_shi>
 8005380:	ffea00b1 	.word	0xffea00b1
 8005384:	0023005c 	.word	0x0023005c
 8005388:	0023007d 	.word	0x0023007d
 800538c:	00230023 	.word	0x00230023
 8005390:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005392:	495f      	ldr	r1, [pc, #380]	; (8005510 <UART_SetConfig+0x21c>)
 8005394:	428a      	cmp	r2, r1
 8005396:	d100      	bne.n	800539a <UART_SetConfig+0xa6>
 8005398:	e09f      	b.n	80054da <UART_SetConfig+0x1e6>
 800539a:	495e      	ldr	r1, [pc, #376]	; (8005514 <UART_SetConfig+0x220>)
 800539c:	428a      	cmp	r2, r1
 800539e:	d100      	bne.n	80053a2 <UART_SetConfig+0xae>
 80053a0:	e09b      	b.n	80054da <UART_SetConfig+0x1e6>
 80053a2:	42aa      	cmp	r2, r5
 80053a4:	d10f      	bne.n	80053c6 <UART_SetConfig+0xd2>
 80053a6:	21c0      	movs	r1, #192	; 0xc0
 80053a8:	2080      	movs	r0, #128	; 0x80
 80053aa:	4a56      	ldr	r2, [pc, #344]	; (8005504 <UART_SetConfig+0x210>)
 80053ac:	0109      	lsls	r1, r1, #4
 80053ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80053b0:	0100      	lsls	r0, r0, #4
 80053b2:	400b      	ands	r3, r1
 80053b4:	4283      	cmp	r3, r0
 80053b6:	d016      	beq.n	80053e6 <UART_SetConfig+0xf2>
 80053b8:	d807      	bhi.n	80053ca <UART_SetConfig+0xd6>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <UART_SetConfig+0xe0>
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	00d2      	lsls	r2, r2, #3
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d035      	beq.n	8005432 <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c6:	2001      	movs	r0, #1
 80053c8:	e009      	b.n	80053de <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ca:	428b      	cmp	r3, r1
 80053cc:	d1fb      	bne.n	80053c6 <UART_SetConfig+0xd2>
 80053ce:	2080      	movs	r0, #128	; 0x80
 80053d0:	0200      	lsls	r0, r0, #8
 80053d2:	e012      	b.n	80053fa <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d4:	f7fe fece 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053d8:	2800      	cmp	r0, #0
 80053da:	d10e      	bne.n	80053fa <UART_SetConfig+0x106>
 80053dc:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80053e2:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80053e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053e6:	2310      	movs	r3, #16
 80053e8:	6810      	ldr	r0, [r2, #0]
 80053ea:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053ec:	4243      	negs	r3, r0
 80053ee:	4158      	adcs	r0, r3
 80053f0:	4b49      	ldr	r3, [pc, #292]	; (8005518 <UART_SetConfig+0x224>)
 80053f2:	4240      	negs	r0, r0
 80053f4:	4018      	ands	r0, r3
 80053f6:	4b49      	ldr	r3, [pc, #292]	; (800551c <UART_SetConfig+0x228>)
 80053f8:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053fa:	2203      	movs	r2, #3
 80053fc:	6863      	ldr	r3, [r4, #4]
 80053fe:	435a      	muls	r2, r3
 8005400:	4290      	cmp	r0, r2
 8005402:	d3e0      	bcc.n	80053c6 <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005404:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005406:	4290      	cmp	r0, r2
 8005408:	d8dd      	bhi.n	80053c6 <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800540a:	2700      	movs	r7, #0
 800540c:	0e02      	lsrs	r2, r0, #24
 800540e:	0201      	lsls	r1, r0, #8
 8005410:	085e      	lsrs	r6, r3, #1
 8005412:	1989      	adds	r1, r1, r6
 8005414:	417a      	adcs	r2, r7
 8005416:	0008      	movs	r0, r1
 8005418:	0011      	movs	r1, r2
 800541a:	001a      	movs	r2, r3
 800541c:	003b      	movs	r3, r7
 800541e:	f7fb f819 	bl	8000454 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005422:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <UART_SetConfig+0x22c>)
 8005424:	18c2      	adds	r2, r0, r3
 8005426:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <UART_SetConfig+0x230>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005428:	429a      	cmp	r2, r3
 800542a:	d8cc      	bhi.n	80053c6 <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	60d8      	str	r0, [r3, #12]
 8005430:	e7d4      	b.n	80053dc <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005432:	f7fe faff 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
        break;
 8005436:	e7cf      	b.n	80053d8 <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005438:	4b32      	ldr	r3, [pc, #200]	; (8005504 <UART_SetConfig+0x210>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800543a:	4a38      	ldr	r2, [pc, #224]	; (800551c <UART_SetConfig+0x228>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	2310      	movs	r3, #16
 8005440:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005442:	4243      	negs	r3, r0
 8005444:	4158      	adcs	r0, r3
 8005446:	4b34      	ldr	r3, [pc, #208]	; (8005518 <UART_SetConfig+0x224>)
 8005448:	4240      	negs	r0, r0
 800544a:	4003      	ands	r3, r0
 800544c:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800544e:	0058      	lsls	r0, r3, #1
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	6861      	ldr	r1, [r4, #4]
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	18c0      	adds	r0, r0, r3
 8005458:	f7fa fe86 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545c:	4932      	ldr	r1, [pc, #200]	; (8005528 <UART_SetConfig+0x234>)
 800545e:	b282      	uxth	r2, r0
 8005460:	3a10      	subs	r2, #16
 8005462:	0403      	lsls	r3, r0, #16
 8005464:	428a      	cmp	r2, r1
 8005466:	d8ae      	bhi.n	80053c6 <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005468:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800546a:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800546c:	4390      	bics	r0, r2
 800546e:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8005470:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005472:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8005474:	4318      	orrs	r0, r3
 8005476:	60d0      	str	r0, [r2, #12]
 8005478:	e7b0      	b.n	80053dc <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fe fadb 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 800547e:	e032      	b.n	80054e6 <UART_SetConfig+0x1f2>
    switch (clocksource)
 8005480:	2808      	cmp	r0, #8
 8005482:	d8a0      	bhi.n	80053c6 <UART_SetConfig+0xd2>
 8005484:	f7fa fe48 	bl	8000118 <__gnu_thumb1_case_sqi>
 8005488:	9f0d0a05 	.word	0x9f0d0a05
 800548c:	9f9f9f23 	.word	0x9f9f9f23
 8005490:	26          	.byte	0x26
 8005491:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8005492:	f7fe fe6f 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005496:	2800      	cmp	r0, #0
 8005498:	d0a0      	beq.n	80053dc <UART_SetConfig+0xe8>
 800549a:	e00d      	b.n	80054b8 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 800549c:	f7fe fe7a 	bl	8004194 <HAL_RCC_GetPCLK2Freq>
        break;
 80054a0:	e7f9      	b.n	8005496 <UART_SetConfig+0x1a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a2:	4b18      	ldr	r3, [pc, #96]	; (8005504 <UART_SetConfig+0x210>)
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	2310      	movs	r3, #16
 80054a8:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054aa:	4243      	negs	r3, r0
 80054ac:	4158      	adcs	r0, r3
 80054ae:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <UART_SetConfig+0x224>)
 80054b0:	4240      	negs	r0, r0
 80054b2:	4018      	ands	r0, r3
 80054b4:	4b19      	ldr	r3, [pc, #100]	; (800551c <UART_SetConfig+0x228>)
 80054b6:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	6861      	ldr	r1, [r4, #4]
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	1818      	adds	r0, r3, r0
 80054c0:	f7fa fe52 	bl	8000168 <__udivsi3>
 80054c4:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c6:	0002      	movs	r2, r0
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <UART_SetConfig+0x234>)
 80054ca:	3a10      	subs	r2, #16
 80054cc:	e7ac      	b.n	8005428 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 80054ce:	f7fe fab1 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
        break;
 80054d2:	e7e0      	b.n	8005496 <UART_SetConfig+0x1a2>
    switch (clocksource)
 80054d4:	2080      	movs	r0, #128	; 0x80
 80054d6:	0200      	lsls	r0, r0, #8
 80054d8:	e7ee      	b.n	80054b8 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054da:	2280      	movs	r2, #128	; 0x80
 80054dc:	0212      	lsls	r2, r2, #8
 80054de:	4293      	cmp	r3, r2
 80054e0:	d1d7      	bne.n	8005492 <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e2:	f7fe fe47 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80054e6:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80054e8:	d100      	bne.n	80054ec <UART_SetConfig+0x1f8>
 80054ea:	e777      	b.n	80053dc <UART_SetConfig+0xe8>
 80054ec:	e7af      	b.n	800544e <UART_SetConfig+0x15a>
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	efff69f3 	.word	0xefff69f3
 80054f4:	ffffcfff 	.word	0xffffcfff
 80054f8:	40004800 	.word	0x40004800
 80054fc:	fffff4ff 	.word	0xfffff4ff
 8005500:	40013800 	.word	0x40013800
 8005504:	40021000 	.word	0x40021000
 8005508:	08007a7d 	.word	0x08007a7d
 800550c:	40004400 	.word	0x40004400
 8005510:	40004c00 	.word	0x40004c00
 8005514:	40005000 	.word	0x40005000
 8005518:	00b71b00 	.word	0x00b71b00
 800551c:	003d0900 	.word	0x003d0900
 8005520:	fffffd00 	.word	0xfffffd00
 8005524:	000ffcff 	.word	0x000ffcff
 8005528:	0000ffef 	.word	0x0000ffef

0800552c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800552c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800552e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005530:	07da      	lsls	r2, r3, #31
 8005532:	d506      	bpl.n	8005542 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005534:	6801      	ldr	r1, [r0, #0]
 8005536:	4c28      	ldr	r4, [pc, #160]	; (80055d8 <UART_AdvFeatureConfig+0xac>)
 8005538:	684a      	ldr	r2, [r1, #4]
 800553a:	4022      	ands	r2, r4
 800553c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800553e:	4322      	orrs	r2, r4
 8005540:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005542:	079a      	lsls	r2, r3, #30
 8005544:	d506      	bpl.n	8005554 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005546:	6801      	ldr	r1, [r0, #0]
 8005548:	4c24      	ldr	r4, [pc, #144]	; (80055dc <UART_AdvFeatureConfig+0xb0>)
 800554a:	684a      	ldr	r2, [r1, #4]
 800554c:	4022      	ands	r2, r4
 800554e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005550:	4322      	orrs	r2, r4
 8005552:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005554:	075a      	lsls	r2, r3, #29
 8005556:	d506      	bpl.n	8005566 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005558:	6801      	ldr	r1, [r0, #0]
 800555a:	4c21      	ldr	r4, [pc, #132]	; (80055e0 <UART_AdvFeatureConfig+0xb4>)
 800555c:	684a      	ldr	r2, [r1, #4]
 800555e:	4022      	ands	r2, r4
 8005560:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005562:	4322      	orrs	r2, r4
 8005564:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005566:	071a      	lsls	r2, r3, #28
 8005568:	d506      	bpl.n	8005578 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800556a:	6801      	ldr	r1, [r0, #0]
 800556c:	4c1d      	ldr	r4, [pc, #116]	; (80055e4 <UART_AdvFeatureConfig+0xb8>)
 800556e:	684a      	ldr	r2, [r1, #4]
 8005570:	4022      	ands	r2, r4
 8005572:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005574:	4322      	orrs	r2, r4
 8005576:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005578:	06da      	lsls	r2, r3, #27
 800557a:	d506      	bpl.n	800558a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800557c:	6801      	ldr	r1, [r0, #0]
 800557e:	4c1a      	ldr	r4, [pc, #104]	; (80055e8 <UART_AdvFeatureConfig+0xbc>)
 8005580:	688a      	ldr	r2, [r1, #8]
 8005582:	4022      	ands	r2, r4
 8005584:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005586:	4322      	orrs	r2, r4
 8005588:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800558a:	069a      	lsls	r2, r3, #26
 800558c:	d506      	bpl.n	800559c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800558e:	6801      	ldr	r1, [r0, #0]
 8005590:	4c16      	ldr	r4, [pc, #88]	; (80055ec <UART_AdvFeatureConfig+0xc0>)
 8005592:	688a      	ldr	r2, [r1, #8]
 8005594:	4022      	ands	r2, r4
 8005596:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005598:	4322      	orrs	r2, r4
 800559a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800559c:	065a      	lsls	r2, r3, #25
 800559e:	d510      	bpl.n	80055c2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a0:	6801      	ldr	r1, [r0, #0]
 80055a2:	4d13      	ldr	r5, [pc, #76]	; (80055f0 <UART_AdvFeatureConfig+0xc4>)
 80055a4:	684a      	ldr	r2, [r1, #4]
 80055a6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80055a8:	402a      	ands	r2, r5
 80055aa:	4322      	orrs	r2, r4
 80055ac:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	0352      	lsls	r2, r2, #13
 80055b2:	4294      	cmp	r4, r2
 80055b4:	d105      	bne.n	80055c2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055b6:	684a      	ldr	r2, [r1, #4]
 80055b8:	4c0e      	ldr	r4, [pc, #56]	; (80055f4 <UART_AdvFeatureConfig+0xc8>)
 80055ba:	4022      	ands	r2, r4
 80055bc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80055be:	4322      	orrs	r2, r4
 80055c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055c2:	061b      	lsls	r3, r3, #24
 80055c4:	d506      	bpl.n	80055d4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055c6:	6802      	ldr	r2, [r0, #0]
 80055c8:	490b      	ldr	r1, [pc, #44]	; (80055f8 <UART_AdvFeatureConfig+0xcc>)
 80055ca:	6853      	ldr	r3, [r2, #4]
 80055cc:	400b      	ands	r3, r1
 80055ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6053      	str	r3, [r2, #4]
}
 80055d4:	bd30      	pop	{r4, r5, pc}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	fffdffff 	.word	0xfffdffff
 80055dc:	fffeffff 	.word	0xfffeffff
 80055e0:	fffbffff 	.word	0xfffbffff
 80055e4:	ffff7fff 	.word	0xffff7fff
 80055e8:	ffffefff 	.word	0xffffefff
 80055ec:	ffffdfff 	.word	0xffffdfff
 80055f0:	ffefffff 	.word	0xffefffff
 80055f4:	ff9fffff 	.word	0xff9fffff
 80055f8:	fff7ffff 	.word	0xfff7ffff

080055fc <UART_WaitOnFlagUntilTimeout>:
{
 80055fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055fe:	2780      	movs	r7, #128	; 0x80
{
 8005600:	0004      	movs	r4, r0
 8005602:	000d      	movs	r5, r1
 8005604:	0016      	movs	r6, r2
 8005606:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005608:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	69d3      	ldr	r3, [r2, #28]
 800560e:	402b      	ands	r3, r5
 8005610:	1b5b      	subs	r3, r3, r5
 8005612:	4259      	negs	r1, r3
 8005614:	414b      	adcs	r3, r1
 8005616:	42b3      	cmp	r3, r6
 8005618:	d001      	beq.n	800561e <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 800561a:	2000      	movs	r0, #0
 800561c:	e01c      	b.n	8005658 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800561e:	9b08      	ldr	r3, [sp, #32]
 8005620:	3301      	adds	r3, #1
 8005622:	d0f3      	beq.n	800560c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005624:	f7fd f99e 	bl	8002964 <HAL_GetTick>
 8005628:	9b01      	ldr	r3, [sp, #4]
 800562a:	9a08      	ldr	r2, [sp, #32]
 800562c:	1ac0      	subs	r0, r0, r3
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	4290      	cmp	r0, r2
 8005632:	d801      	bhi.n	8005638 <UART_WaitOnFlagUntilTimeout+0x3c>
 8005634:	2a00      	cmp	r2, #0
 8005636:	d110      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4913      	ldr	r1, [pc, #76]	; (8005688 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800563c:	400a      	ands	r2, r1
 800563e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	31a3      	adds	r1, #163	; 0xa3
 8005644:	31ff      	adds	r1, #255	; 0xff
 8005646:	438a      	bics	r2, r1
 8005648:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800564a:	2320      	movs	r3, #32
 800564c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800564e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005650:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8005652:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005654:	3474      	adds	r4, #116	; 0x74
 8005656:	7023      	strb	r3, [r4, #0]
}
 8005658:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800565a:	2104      	movs	r1, #4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	420a      	tst	r2, r1
 8005660:	d0d3      	beq.n	800560a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	423a      	tst	r2, r7
 8005666:	d0d0      	beq.n	800560a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005668:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4906      	ldr	r1, [pc, #24]	; (8005688 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800566e:	400a      	ands	r2, r1
 8005670:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	31a3      	adds	r1, #163	; 0xa3
 8005676:	31ff      	adds	r1, #255	; 0xff
 8005678:	438a      	bics	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800567c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800567e:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8005680:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005682:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005684:	67d3      	str	r3, [r2, #124]	; 0x7c
 8005686:	e7e3      	b.n	8005650 <UART_WaitOnFlagUntilTimeout+0x54>
 8005688:	fffffe5f 	.word	0xfffffe5f

0800568c <UART_CheckIdleState>:
{
 800568c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568e:	2600      	movs	r6, #0
{
 8005690:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	1d03      	adds	r3, r0, #4
 8005694:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005696:	f7fd f965 	bl	8002964 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800569a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800569c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	071b      	lsls	r3, r3, #28
 80056a2:	d416      	bmi.n	80056d2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	075b      	lsls	r3, r3, #29
 80056aa:	d50a      	bpl.n	80056c2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ac:	2180      	movs	r1, #128	; 0x80
 80056ae:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <UART_CheckIdleState+0x60>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	0020      	movs	r0, r4
 80056b6:	002b      	movs	r3, r5
 80056b8:	03c9      	lsls	r1, r1, #15
 80056ba:	f7ff ff9f 	bl	80055fc <UART_WaitOnFlagUntilTimeout>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d112      	bne.n	80056e8 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80056c2:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80056c6:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056c8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80056cc:	3474      	adds	r4, #116	; 0x74
 80056ce:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80056d0:	e00b      	b.n	80056ea <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <UART_CheckIdleState+0x60>)
 80056d6:	0032      	movs	r2, r6
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	0389      	lsls	r1, r1, #14
 80056dc:	0003      	movs	r3, r0
 80056de:	0020      	movs	r0, r4
 80056e0:	f7ff ff8c 	bl	80055fc <UART_WaitOnFlagUntilTimeout>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d0dd      	beq.n	80056a4 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80056e8:	2003      	movs	r0, #3
}
 80056ea:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80056ec:	01ffffff 	.word	0x01ffffff

080056f0 <HAL_UART_Init>:
{
 80056f0:	b510      	push	{r4, lr}
 80056f2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80056f4:	d101      	bne.n	80056fa <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80056f6:	2001      	movs	r0, #1
}
 80056f8:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80056fa:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005700:	0002      	movs	r2, r0
 8005702:	3274      	adds	r2, #116	; 0x74
 8005704:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005706:	f7fd f983 	bl	8002a10 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800570a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800570c:	2101      	movs	r1, #1
 800570e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005710:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005712:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005714:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005716:	438b      	bics	r3, r1
 8005718:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800571a:	f7ff fdeb 	bl	80052f4 <UART_SetConfig>
 800571e:	2801      	cmp	r0, #1
 8005720:	d0e9      	beq.n	80056f6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005728:	0020      	movs	r0, r4
 800572a:	f7ff feff 	bl	800552c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	4907      	ldr	r1, [pc, #28]	; (8005750 <HAL_UART_Init+0x60>)
 8005732:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005734:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005736:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005738:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	438a      	bics	r2, r1
 8005740:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005742:	2201      	movs	r2, #1
 8005744:	6819      	ldr	r1, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800574a:	f7ff ff9f 	bl	800568c <UART_CheckIdleState>
 800574e:	e7d3      	b.n	80056f8 <HAL_UART_Init+0x8>
 8005750:	ffffb7ff 	.word	0xffffb7ff

08005754 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005754:	0003      	movs	r3, r0
 8005756:	3358      	adds	r3, #88	; 0x58
{
 8005758:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 800575a:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 800575c:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 800575e:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8005760:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8005762:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8005764:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8005766:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005768:	0164      	lsls	r4, r4, #5
 800576a:	3304      	adds	r3, #4
 800576c:	42a1      	cmp	r1, r4
 800576e:	d124      	bne.n	80057ba <UART_Start_Receive_IT+0x66>
 8005770:	6902      	ldr	r2, [r0, #16]
 8005772:	2a00      	cmp	r2, #0
 8005774:	d11f      	bne.n	80057b6 <UART_Start_Receive_IT+0x62>
 8005776:	4a19      	ldr	r2, [pc, #100]	; (80057dc <UART_Start_Receive_IT+0x88>)
 8005778:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577a:	2200      	movs	r2, #0
 800577c:	1d03      	adds	r3, r0, #4
 800577e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005780:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005784:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	6894      	ldr	r4, [r2, #8]
 8005788:	3b21      	subs	r3, #33	; 0x21
 800578a:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578c:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578e:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005790:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8005792:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005794:	42a1      	cmp	r1, r4
 8005796:	d103      	bne.n	80057a0 <UART_Start_Receive_IT+0x4c>
 8005798:	6901      	ldr	r1, [r0, #16]
 800579a:	2900      	cmp	r1, #0
 800579c:	d100      	bne.n	80057a0 <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 800579e:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <UART_Start_Receive_IT+0x90>)
 80057a0:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80057a2:	0003      	movs	r3, r0
 80057a4:	2000      	movs	r0, #0
 80057a6:	3374      	adds	r3, #116	; 0x74
 80057a8:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057aa:	2390      	movs	r3, #144	; 0x90
 80057ac:	6811      	ldr	r1, [r2, #0]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	430b      	orrs	r3, r1
 80057b2:	6013      	str	r3, [r2, #0]
}
 80057b4:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80057b6:	22ff      	movs	r2, #255	; 0xff
 80057b8:	e7de      	b.n	8005778 <UART_Start_Receive_IT+0x24>
 80057ba:	2900      	cmp	r1, #0
 80057bc:	d104      	bne.n	80057c8 <UART_Start_Receive_IT+0x74>
 80057be:	6902      	ldr	r2, [r0, #16]
 80057c0:	2a00      	cmp	r2, #0
 80057c2:	d0f8      	beq.n	80057b6 <UART_Start_Receive_IT+0x62>
 80057c4:	227f      	movs	r2, #127	; 0x7f
 80057c6:	e7d7      	b.n	8005778 <UART_Start_Receive_IT+0x24>
 80057c8:	2480      	movs	r4, #128	; 0x80
 80057ca:	0564      	lsls	r4, r4, #21
 80057cc:	42a1      	cmp	r1, r4
 80057ce:	d1d3      	bne.n	8005778 <UART_Start_Receive_IT+0x24>
 80057d0:	6902      	ldr	r2, [r0, #16]
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	d0f6      	beq.n	80057c4 <UART_Start_Receive_IT+0x70>
 80057d6:	223f      	movs	r2, #63	; 0x3f
 80057d8:	e7ce      	b.n	8005778 <UART_Start_Receive_IT+0x24>
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	000001ff 	.word	0x000001ff
 80057e0:	080051f1 	.word	0x080051f1
 80057e4:	08005275 	.word	0x08005275

080057e8 <HAL_UART_Receive_IT>:
{
 80057e8:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ea:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ee:	2c20      	cmp	r4, #32
 80057f0:	d129      	bne.n	8005846 <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 80057f2:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 80057f4:	2900      	cmp	r1, #0
 80057f6:	d026      	beq.n	8005846 <HAL_UART_Receive_IT+0x5e>
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d024      	beq.n	8005846 <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	6884      	ldr	r4, [r0, #8]
 8005800:	015b      	lsls	r3, r3, #5
 8005802:	429c      	cmp	r4, r3
 8005804:	d106      	bne.n	8005814 <HAL_UART_Receive_IT+0x2c>
 8005806:	6903      	ldr	r3, [r0, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800580c:	2401      	movs	r4, #1
      return HAL_ERROR;
 800580e:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8005810:	4221      	tst	r1, r4
 8005812:	d118      	bne.n	8005846 <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 8005814:	0004      	movs	r4, r0
 8005816:	3474      	adds	r4, #116	; 0x74
 8005818:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 800581a:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 800581c:	2d01      	cmp	r5, #1
 800581e:	d012      	beq.n	8005846 <HAL_UART_Receive_IT+0x5e>
 8005820:	3b01      	subs	r3, #1
 8005822:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005824:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005826:	4c09      	ldr	r4, [pc, #36]	; (800584c <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005828:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800582a:	6803      	ldr	r3, [r0, #0]
 800582c:	42a3      	cmp	r3, r4
 800582e:	d007      	beq.n	8005840 <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005830:	685c      	ldr	r4, [r3, #4]
 8005832:	0224      	lsls	r4, r4, #8
 8005834:	d504      	bpl.n	8005840 <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005836:	2480      	movs	r4, #128	; 0x80
 8005838:	681d      	ldr	r5, [r3, #0]
 800583a:	04e4      	lsls	r4, r4, #19
 800583c:	432c      	orrs	r4, r5
 800583e:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8005840:	f7ff ff88 	bl	8005754 <UART_Start_Receive_IT>
 8005844:	0003      	movs	r3, r0
}
 8005846:	0018      	movs	r0, r3
 8005848:	bd70      	pop	{r4, r5, r6, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	40004800 	.word	0x40004800

08005850 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005850:	4770      	bx	lr
	...

08005854 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005854:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005856:	0005      	movs	r5, r0
{
 8005858:	b085      	sub	sp, #20
 800585a:	9203      	str	r2, [sp, #12]
 800585c:	9102      	str	r1, [sp, #8]
  __HAL_LOCK(huart);
 800585e:	3574      	adds	r5, #116	; 0x74
 8005860:	782b      	ldrb	r3, [r5, #0]
{
 8005862:	0004      	movs	r4, r0
 8005864:	000f      	movs	r7, r1
 8005866:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8005868:	2002      	movs	r0, #2
{
 800586a:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 800586c:	2b01      	cmp	r3, #1
 800586e:	d030      	beq.n	80058d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>

  huart->gState = HAL_UART_STATE_BUSY;
 8005870:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8005872:	3801      	subs	r0, #1
 8005874:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005876:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	6819      	ldr	r1, [r3, #0]
 800587c:	4381      	bics	r1, r0
 800587e:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005880:	6899      	ldr	r1, [r3, #8]
 8005882:	4816      	ldr	r0, [pc, #88]	; (80058dc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
 8005884:	4001      	ands	r1, r0
 8005886:	4339      	orrs	r1, r7
 8005888:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800588a:	2f00      	cmp	r7, #0
 800588c:	d10c      	bne.n	80058a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x54>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800588e:	6859      	ldr	r1, [r3, #4]
 8005890:	3210      	adds	r2, #16
 8005892:	4391      	bics	r1, r2
 8005894:	88b2      	ldrh	r2, [r6, #4]
 8005896:	79b0      	ldrb	r0, [r6, #6]
 8005898:	4311      	orrs	r1, r2
 800589a:	6059      	str	r1, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	0600      	lsls	r0, r0, #24
 80058a0:	0212      	lsls	r2, r2, #8
 80058a2:	0a12      	lsrs	r2, r2, #8
 80058a4:	4302      	orrs	r2, r0
 80058a6:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 80058a8:	2201      	movs	r2, #1
 80058aa:	6819      	ldr	r1, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80058b0:	f7fd f858 	bl	8002964 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b4:	2180      	movs	r1, #128	; 0x80
 80058b6:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8c>)
  tickstart = HAL_GetTick();
 80058b8:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ba:	9200      	str	r2, [sp, #0]
 80058bc:	0020      	movs	r0, r4
 80058be:	2200      	movs	r2, #0
 80058c0:	03c9      	lsls	r1, r1, #15
 80058c2:	f7ff fe9b 	bl	80055fc <UART_WaitOnFlagUntilTimeout>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	d105      	bne.n	80058d6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80058ca:	2320      	movs	r3, #32
 80058cc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80058ce:	2300      	movs	r3, #0
 80058d0:	702b      	strb	r3, [r5, #0]
}
 80058d2:	b005      	add	sp, #20
 80058d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 80058d6:	2003      	movs	r0, #3
 80058d8:	e7f9      	b.n	80058ce <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	ffcfffff 	.word	0xffcfffff
 80058e0:	01ffffff 	.word	0x01ffffff

080058e4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80058e4:	0001      	movs	r1, r0
 80058e6:	2302      	movs	r3, #2
{
 80058e8:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 80058ea:	3174      	adds	r1, #116	; 0x74
 80058ec:	780c      	ldrb	r4, [r1, #0]
{
 80058ee:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 80058f0:	0018      	movs	r0, r3
 80058f2:	2c01      	cmp	r4, #1
 80058f4:	d005      	beq.n	8005902 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	6810      	ldr	r0, [r2, #0]
 80058fa:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 80058fc:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80058fe:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8005900:	7008      	strb	r0, [r1, #0]
}
 8005902:	bd10      	pop	{r4, pc}

08005904 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 8005904:	4b01      	ldr	r3, [pc, #4]	; (800590c <SX1276GetStatus+0x8>)
 8005906:	7918      	ldrb	r0, [r3, #4]
}
 8005908:	4770      	bx	lr
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	20000298 	.word	0x20000298

08005910 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005910:	4a09      	ldr	r2, [pc, #36]	; (8005938 <GetFskBandwidthRegValue+0x28>)
{
 8005912:	2300      	movs	r3, #0
 8005914:	0011      	movs	r1, r2
 8005916:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005918:	6814      	ldr	r4, [r2, #0]
 800591a:	4284      	cmp	r4, r0
 800591c:	d802      	bhi.n	8005924 <GetFskBandwidthRegValue+0x14>
 800591e:	6894      	ldr	r4, [r2, #8]
 8005920:	4284      	cmp	r4, r0
 8005922:	d804      	bhi.n	800592e <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005924:	3301      	adds	r3, #1
 8005926:	3208      	adds	r2, #8
 8005928:	2b15      	cmp	r3, #21
 800592a:	d1f5      	bne.n	8005918 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 800592c:	e7fe      	b.n	800592c <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	18cb      	adds	r3, r1, r3
 8005932:	7918      	ldrb	r0, [r3, #4]
}
 8005934:	bd10      	pop	{r4, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	08007ad0 	.word	0x08007ad0

0800593c <SX1276GetTimeOnAir>:
{
 800593c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800593e:	0014      	movs	r4, r2
 8005940:	aa08      	add	r2, sp, #32
 8005942:	8816      	ldrh	r6, [r2, #0]
 8005944:	aa09      	add	r2, sp, #36	; 0x24
 8005946:	7817      	ldrb	r7, [r2, #0]
 8005948:	aa0a      	add	r2, sp, #40	; 0x28
 800594a:	7812      	ldrb	r2, [r2, #0]
 800594c:	000d      	movs	r5, r1
 800594e:	a90b      	add	r1, sp, #44	; 0x2c
 8005950:	4694      	mov	ip, r2
 8005952:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 8005954:	2800      	cmp	r0, #0
 8005956:	d009      	beq.n	800596c <SX1276GetTimeOnAir+0x30>
 8005958:	2801      	cmp	r0, #1
 800595a:	d017      	beq.n	800598c <SX1276GetTimeOnAir+0x50>
 800595c:	2401      	movs	r4, #1
 800595e:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 8005960:	1900      	adds	r0, r0, r4
 8005962:	0021      	movs	r1, r4
 8005964:	3801      	subs	r0, #1
 8005966:	f7fa fbff 	bl	8000168 <__udivsi3>
}
 800596a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 800596c:	1e4b      	subs	r3, r1, #1
 800596e:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005970:	427b      	negs	r3, r7
 8005972:	415f      	adcs	r7, r3
               ( ( crcOn == true ) ? 2 : 0 ) 
 8005974:	0049      	lsls	r1, r1, #1
               ( 0 ) + // Address filter size
 8005976:	000a      	movs	r2, r1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8005978:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 800597a:	19be      	adds	r6, r7, r6
    return ( preambleLen << 3 ) +
 800597c:	00f6      	lsls	r6, r6, #3
               ( 0 ) + // Address filter size
 800597e:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005980:	3618      	adds	r6, #24
               ) << 3 
 8005982:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 8005984:	1996      	adds	r6, r2, r6
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8005986:	0080      	lsls	r0, r0, #2
 8005988:	4370      	muls	r0, r6
        break;
 800598a:	e7e9      	b.n	8005960 <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 800598c:	3304      	adds	r3, #4
 800598e:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005990:	1f63      	subs	r3, r4, #5
 8005992:	2b01      	cmp	r3, #1
 8005994:	d804      	bhi.n	80059a0 <SX1276GetTimeOnAir+0x64>
    {
        if( preambleLen < 12 )
 8005996:	1c33      	adds	r3, r6, #0
 8005998:	2e0c      	cmp	r6, #12
 800599a:	d200      	bcs.n	800599e <SX1276GetTimeOnAir+0x62>
 800599c:	230c      	movs	r3, #12
 800599e:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	d136      	bne.n	8005a12 <SX1276GetTimeOnAir+0xd6>
 80059a4:	0023      	movs	r3, r4
 80059a6:	2001      	movs	r0, #1
 80059a8:	002a      	movs	r2, r5
 80059aa:	3b0b      	subs	r3, #11
 80059ac:	4298      	cmp	r0, r3
 80059ae:	416a      	adcs	r2, r5
 80059b0:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80059b2:	b2db      	uxtb	r3, r3
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
                            ( crcOn ? 16 : 0 ) -
 80059b4:	1e48      	subs	r0, r1, #1
 80059b6:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80059b8:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 80059ba:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80059bc:	00d2      	lsls	r2, r2, #3
 80059be:	1810      	adds	r0, r2, r0
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 80059c0:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 80059c2:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 80059c4:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 80059c6:	4297      	cmp	r7, r2
 80059c8:	d100      	bne.n	80059cc <SX1276GetTimeOnAir+0x90>
 80059ca:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 80059cc:	1880      	adds	r0, r0, r2
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80059ce:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 80059d0:	2c06      	cmp	r4, #6
 80059d2:	d903      	bls.n	80059dc <SX1276GetTimeOnAir+0xa0>
        ceilNumerator += 8;
 80059d4:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d000      	beq.n	80059dc <SX1276GetTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 80059da:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80059dc:	43c3      	mvns	r3, r0
 80059de:	17db      	asrs	r3, r3, #31
 80059e0:	4018      	ands	r0, r3
 80059e2:	1840      	adds	r0, r0, r1
 80059e4:	3801      	subs	r0, #1
 80059e6:	f7fa fc49 	bl	800027c <__divsi3>
 80059ea:	9b01      	ldr	r3, [sp, #4]
 80059ec:	4343      	muls	r3, r0
 80059ee:	199e      	adds	r6, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 80059f0:	0032      	movs	r2, r6
 80059f2:	320e      	adds	r2, #14
    if( datarate <= 6 )
 80059f4:	2c06      	cmp	r4, #6
 80059f6:	d900      	bls.n	80059fa <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 80059f8:	3a02      	subs	r2, #2
    switch( bw )
 80059fa:	2d03      	cmp	r5, #3
 80059fc:	d811      	bhi.n	8005a22 <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80059fe:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8005a00:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005a02:	3201      	adds	r2, #1
 8005a04:	40ba      	lsls	r2, r7
 8005a06:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <SX1276GetTimeOnAir+0xe8>)
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8005a08:	0080      	lsls	r0, r0, #2
 8005a0a:	00ad      	lsls	r5, r5, #2
 8005a0c:	4350      	muls	r0, r2
 8005a0e:	58ec      	ldr	r4, [r5, r3]
 8005a10:	e7a6      	b.n	8005960 <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 8005a12:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005a14:	2d01      	cmp	r5, #1
 8005a16:	d1cd      	bne.n	80059b4 <SX1276GetTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005a18:	0023      	movs	r3, r4
 8005a1a:	3b0c      	subs	r3, #12
 8005a1c:	4258      	negs	r0, r3
 8005a1e:	4143      	adcs	r3, r0
 8005a20:	e7c7      	b.n	80059b2 <SX1276GetTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 8005a22:	deff      	udf	#255	; 0xff
 8005a24:	08007a90 	.word	0x08007a90

08005a28 <SX1276GetWakeupTime>:
{
 8005a28:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8005a2a:	f7fd fa19 	bl	8002e60 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8005a2e:	3002      	adds	r0, #2
}
 8005a30:	bd10      	pop	{r4, pc}

08005a32 <SX1276WriteBuffer>:
{
 8005a32:	b570      	push	{r4, r5, r6, lr}
 8005a34:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 8005a36:	2000      	movs	r0, #0
{
 8005a38:	000c      	movs	r4, r1
 8005a3a:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 8005a3c:	f7fd fbea 	bl	8003214 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 8005a40:	2080      	movs	r0, #128	; 0x80
 8005a42:	4330      	orrs	r0, r6
 8005a44:	b280      	uxth	r0, r0
 8005a46:	f7fd fbd7 	bl	80031f8 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8005a4a:	1965      	adds	r5, r4, r5
 8005a4c:	42ac      	cmp	r4, r5
 8005a4e:	d103      	bne.n	8005a58 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 8005a50:	2001      	movs	r0, #1
 8005a52:	f7fd fbdf 	bl	8003214 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8005a56:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 8005a58:	7820      	ldrb	r0, [r4, #0]
 8005a5a:	f7fd fbcd 	bl	80031f8 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8005a5e:	3401      	adds	r4, #1
 8005a60:	e7f4      	b.n	8005a4c <SX1276WriteBuffer+0x1a>

08005a62 <SX1276Write>:
{
 8005a62:	b507      	push	{r0, r1, r2, lr}
 8005a64:	466b      	mov	r3, sp
 8005a66:	71d9      	strb	r1, [r3, #7]
 8005a68:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	f7ff ffe0 	bl	8005a32 <SX1276WriteBuffer>
}
 8005a72:	bd07      	pop	{r0, r1, r2, pc}

08005a74 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8005a74:	4b11      	ldr	r3, [pc, #68]	; (8005abc <SX1276SetChannel+0x48>)
{
 8005a76:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 8005a78:	4911      	ldr	r1, [pc, #68]	; (8005ac0 <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 8005a7a:	6098      	str	r0, [r3, #8]
{
 8005a7c:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 8005a7e:	f7fa fbf9 	bl	8000274 <__aeabi_uidivmod>
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <SX1276SetChannel+0x50>)
 8005a84:	0208      	lsls	r0, r1, #8
 8005a86:	18c0      	adds	r0, r0, r3
 8005a88:	490d      	ldr	r1, [pc, #52]	; (8005ac0 <SX1276SetChannel+0x4c>)
 8005a8a:	f7fa fb6d 	bl	8000168 <__udivsi3>
 8005a8e:	490c      	ldr	r1, [pc, #48]	; (8005ac0 <SX1276SetChannel+0x4c>)
 8005a90:	0004      	movs	r4, r0
 8005a92:	0028      	movs	r0, r5
 8005a94:	f7fa fb68 	bl	8000168 <__udivsi3>
 8005a98:	0200      	lsls	r0, r0, #8
 8005a9a:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8005a9c:	0c21      	lsrs	r1, r4, #16
 8005a9e:	2006      	movs	r0, #6
 8005aa0:	b2c9      	uxtb	r1, r1
 8005aa2:	f7ff ffde 	bl	8005a62 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8005aa6:	0a21      	lsrs	r1, r4, #8
 8005aa8:	2007      	movs	r0, #7
 8005aaa:	b2c9      	uxtb	r1, r1
 8005aac:	f7ff ffd9 	bl	8005a62 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8005ab0:	2008      	movs	r0, #8
 8005ab2:	b2e1      	uxtb	r1, r4
 8005ab4:	f7ff ffd5 	bl	8005a62 <SX1276Write>
}
 8005ab8:	bd70      	pop	{r4, r5, r6, pc}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	20000298 	.word	0x20000298
 8005ac0:	00003d09 	.word	0x00003d09
 8005ac4:	00001e84 	.word	0x00001e84

08005ac8 <SX1276ReadBuffer>:
{
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 8005acc:	2000      	movs	r0, #0
{
 8005ace:	000c      	movs	r4, r1
 8005ad0:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 8005ad2:	f7fd fb9f 	bl	8003214 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 8005ad6:	207f      	movs	r0, #127	; 0x7f
 8005ad8:	4028      	ands	r0, r5
 8005ada:	f7fd fb8d 	bl	80031f8 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 8005ade:	19a6      	adds	r6, r4, r6
 8005ae0:	42b4      	cmp	r4, r6
 8005ae2:	d103      	bne.n	8005aec <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	f7fd fb95 	bl	8003214 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 8005aec:	2000      	movs	r0, #0
 8005aee:	f7fd fb83 	bl	80031f8 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 8005af2:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 8005af4:	3401      	adds	r4, #1
 8005af6:	e7f3      	b.n	8005ae0 <SX1276ReadBuffer+0x18>

08005af8 <SX1276Read>:
{
 8005af8:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8005afa:	466b      	mov	r3, sp
 8005afc:	1ddc      	adds	r4, r3, #7
 8005afe:	2201      	movs	r2, #1
 8005b00:	0021      	movs	r1, r4
 8005b02:	f7ff ffe1 	bl	8005ac8 <SX1276ReadBuffer>
    return data;
 8005b06:	7820      	ldrb	r0, [r4, #0]
}
 8005b08:	bd16      	pop	{r1, r2, r4, pc}
	...

08005b0c <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 8005b0c:	b570      	push	{r4, r5, r6, lr}
    uint32_t afcChannel = 0;

    switch( SX1276.Settings.State )
 8005b0e:	4c2c      	ldr	r4, [pc, #176]	; (8005bc0 <SX1276OnDio2Irq+0xb4>)
 8005b10:	7925      	ldrb	r5, [r4, #4]
 8005b12:	2d01      	cmp	r5, #1
 8005b14:	d002      	beq.n	8005b1c <SX1276OnDio2Irq+0x10>
 8005b16:	2d02      	cmp	r5, #2
 8005b18:	d049      	beq.n	8005bae <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8005b1c:	7963      	ldrb	r3, [r4, #5]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d017      	beq.n	8005b52 <SX1276OnDio2Irq+0x46>
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d1f9      	bne.n	8005b1a <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005b26:	3453      	adds	r4, #83	; 0x53
 8005b28:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005b2a:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f4      	beq.n	8005b1a <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005b30:	2012      	movs	r0, #18
 8005b32:	f7ff ff96 	bl	8005a62 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005b36:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <SX1276OnDio2Irq+0xb8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0ed      	beq.n	8005b1a <SX1276OnDio2Irq+0xe>
 8005b3e:	695c      	ldr	r4, [r3, #20]
 8005b40:	2c00      	cmp	r4, #0
 8005b42:	d0ea      	beq.n	8005b1a <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005b44:	201c      	movs	r0, #28
 8005b46:	f7ff ffd7 	bl	8005af8 <SX1276Read>
 8005b4a:	233f      	movs	r3, #63	; 0x3f
 8005b4c:	4018      	ands	r0, r3
 8005b4e:	47a0      	blx	r4
}
 8005b50:	e7e3      	b.n	8005b1a <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005b52:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005b54:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005b56:	3330      	adds	r3, #48	; 0x30
 8005b58:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005b5a:	3631      	adds	r6, #49	; 0x31
 8005b5c:	7833      	ldrb	r3, [r6, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1db      	bne.n	8005b1a <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8005b62:	0020      	movs	r0, r4
 8005b64:	3068      	adds	r0, #104	; 0x68
 8005b66:	f001 fc95 	bl	8007494 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005b6a:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8005b6c:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005b6e:	f7ff ffc3 	bl	8005af8 <SX1276Read>
 8005b72:	0023      	movs	r3, r4
 8005b74:	0840      	lsrs	r0, r0, #1
 8005b76:	3332      	adds	r3, #50	; 0x32
 8005b78:	4240      	negs	r0, r0
 8005b7a:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005b7c:	201b      	movs	r0, #27
 8005b7e:	f7ff ffbb 	bl	8005af8 <SX1276Read>
 8005b82:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8005b84:	201c      	movs	r0, #28
 8005b86:	f7ff ffb7 	bl	8005af8 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005b8a:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <SX1276OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005b8e:	4305      	orrs	r5, r0
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8005b90:	b2c0      	uxtb	r0, r0
 8005b92:	4358      	muls	r0, r3
 8005b94:	0a2d      	lsrs	r5, r5, #8
 8005b96:	435d      	muls	r5, r3
 8005b98:	3080      	adds	r0, #128	; 0x80
 8005b9a:	0a00      	lsrs	r0, r0, #8
 8005b9c:	1940      	adds	r0, r0, r5
 8005b9e:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8005ba0:	200c      	movs	r0, #12
 8005ba2:	f7ff ffa9 	bl	8005af8 <SX1276Read>
 8005ba6:	3438      	adds	r4, #56	; 0x38
 8005ba8:	0940      	lsrs	r0, r0, #5
 8005baa:	7020      	strb	r0, [r4, #0]
 8005bac:	e7b5      	b.n	8005b1a <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8005bae:	7963      	ldrb	r3, [r4, #5]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d1b2      	bne.n	8005b1a <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005bb4:	3453      	adds	r4, #83	; 0x53
 8005bb6:	7823      	ldrb	r3, [r4, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0ae      	beq.n	8005b1a <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005bbc:	0029      	movs	r1, r5
 8005bbe:	e7b7      	b.n	8005b30 <SX1276OnDio2Irq+0x24>
 8005bc0:	20000298 	.word	0x20000298
 8005bc4:	20000318 	.word	0x20000318
 8005bc8:	00003d09 	.word	0x00003d09

08005bcc <RxChainCalibration>:
{
 8005bcc:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8005bce:	2009      	movs	r0, #9
 8005bd0:	f7ff ff92 	bl	8005af8 <SX1276Read>
 8005bd4:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005bd6:	2006      	movs	r0, #6
 8005bd8:	f7ff ff8e 	bl	8005af8 <SX1276Read>
 8005bdc:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8005bde:	2007      	movs	r0, #7
 8005be0:	f7ff ff8a 	bl	8005af8 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005be4:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8005be6:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005be8:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8005bea:	2008      	movs	r0, #8
 8005bec:	f7ff ff84 	bl	8005af8 <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8005bf0:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005bf2:	4304      	orrs	r4, r0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8005bf4:	b2c0      	uxtb	r0, r0
 8005bf6:	4358      	muls	r0, r3
 8005bf8:	0a24      	lsrs	r4, r4, #8
 8005bfa:	435c      	muls	r4, r3
 8005bfc:	3080      	adds	r0, #128	; 0x80
 8005bfe:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8005c00:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8005c02:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 8005c04:	2009      	movs	r0, #9
 8005c06:	f7ff ff2c 	bl	8005a62 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005c0a:	203b      	movs	r0, #59	; 0x3b
 8005c0c:	f7ff ff74 	bl	8005af8 <SX1276Read>
 8005c10:	2140      	movs	r1, #64	; 0x40
 8005c12:	4301      	orrs	r1, r0
 8005c14:	b2c9      	uxtb	r1, r1
 8005c16:	203b      	movs	r0, #59	; 0x3b
 8005c18:	f7ff ff23 	bl	8005a62 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005c1c:	2620      	movs	r6, #32
 8005c1e:	203b      	movs	r0, #59	; 0x3b
 8005c20:	f7ff ff6a 	bl	8005af8 <SX1276Read>
 8005c24:	4230      	tst	r0, r6
 8005c26:	d1fa      	bne.n	8005c1e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8005c28:	480d      	ldr	r0, [pc, #52]	; (8005c60 <RxChainCalibration+0x94>)
 8005c2a:	f7ff ff23 	bl	8005a74 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005c2e:	203b      	movs	r0, #59	; 0x3b
 8005c30:	f7ff ff62 	bl	8005af8 <SX1276Read>
 8005c34:	2140      	movs	r1, #64	; 0x40
 8005c36:	4301      	orrs	r1, r0
 8005c38:	b2c9      	uxtb	r1, r1
 8005c3a:	203b      	movs	r0, #59	; 0x3b
 8005c3c:	f7ff ff11 	bl	8005a62 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005c40:	2620      	movs	r6, #32
 8005c42:	203b      	movs	r0, #59	; 0x3b
 8005c44:	f7ff ff58 	bl	8005af8 <SX1276Read>
 8005c48:	4230      	tst	r0, r6
 8005c4a:	d1fa      	bne.n	8005c42 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8005c4c:	0029      	movs	r1, r5
 8005c4e:	2009      	movs	r0, #9
 8005c50:	f7ff ff07 	bl	8005a62 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8005c54:	0020      	movs	r0, r4
 8005c56:	f7ff ff0d 	bl	8005a74 <SX1276SetChannel>
}
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	00003d09 	.word	0x00003d09
 8005c60:	33bca100 	.word	0x33bca100

08005c64 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <SX1276OnDio4Irq+0x18>)
 8005c66:	795a      	ldrb	r2, [r3, #5]
 8005c68:	2a00      	cmp	r2, #0
 8005c6a:	d105      	bne.n	8005c78 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005c6c:	3330      	adds	r3, #48	; 0x30
 8005c6e:	781a      	ldrb	r2, [r3, #0]
 8005c70:	2a00      	cmp	r2, #0
 8005c72:	d101      	bne.n	8005c78 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005c74:	3201      	adds	r2, #1
 8005c76:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8005c78:	4770      	bx	lr
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	20000298 	.word	0x20000298

08005c80 <SX1276OnDio3Irq>:
{
 8005c80:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <SX1276OnDio3Irq+0x4c>)
 8005c84:	795c      	ldrb	r4, [r3, #5]
 8005c86:	2c01      	cmp	r4, #1
 8005c88:	d112      	bne.n	8005cb0 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8005c8a:	2012      	movs	r0, #18
 8005c8c:	f7ff ff34 	bl	8005af8 <SX1276Read>
 8005c90:	0005      	movs	r5, r0
 8005c92:	4e0f      	ldr	r6, [pc, #60]	; (8005cd0 <SX1276OnDio3Irq+0x50>)
 8005c94:	4025      	ands	r5, r4
 8005c96:	4220      	tst	r0, r4
 8005c98:	d00b      	beq.n	8005cb2 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8005c9a:	2105      	movs	r1, #5
 8005c9c:	2012      	movs	r0, #18
 8005c9e:	f7ff fee0 	bl	8005a62 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005ca2:	6833      	ldr	r3, [r6, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <SX1276OnDio3Irq+0x30>
 8005ca8:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8005caa:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10b      	bne.n	8005cc8 <SX1276OnDio3Irq+0x48>
}
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	2012      	movs	r0, #18
 8005cb6:	f7ff fed4 	bl	8005a62 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005cba:	6833      	ldr	r3, [r6, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f7      	beq.n	8005cb0 <SX1276OnDio3Irq+0x30>
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f4      	beq.n	8005cb0 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 8005cc6:	0028      	movs	r0, r5
 8005cc8:	4798      	blx	r3
}
 8005cca:	e7f1      	b.n	8005cb0 <SX1276OnDio3Irq+0x30>
 8005ccc:	20000298 	.word	0x20000298
 8005cd0:	20000318 	.word	0x20000318

08005cd4 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 8005cd8:	2805      	cmp	r0, #5
 8005cda:	d111      	bne.n	8005d00 <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 8005cdc:	2001      	movs	r0, #1
 8005cde:	f7fd f8c1 	bl	8002e64 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 8005ce2:	2001      	movs	r0, #1
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 8005ce4:	f7fd fa36 	bl	8003154 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005ce8:	2001      	movs	r0, #1
 8005cea:	f7ff ff05 	bl	8005af8 <SX1276Read>
 8005cee:	2307      	movs	r3, #7
 8005cf0:	0001      	movs	r1, r0
 8005cf2:	4399      	bics	r1, r3
 8005cf4:	4321      	orrs	r1, r4
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	b2c9      	uxtb	r1, r1
 8005cfa:	f7ff feb2 	bl	8005a62 <SX1276Write>
}
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8005d00:	2009      	movs	r0, #9
 8005d02:	f7ff fef9 	bl	8005af8 <SX1276Read>
 8005d06:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 8005d08:	2001      	movs	r0, #1
 8005d0a:	f7fd f8ab 	bl	8002e64 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 8005d0e:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005d10:	062b      	lsls	r3, r5, #24
 8005d12:	d4e7      	bmi.n	8005ce4 <SX1276SetOpMode.part.0+0x10>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 8005d14:	2002      	movs	r0, #2
 8005d16:	e7e5      	b.n	8005ce4 <SX1276SetOpMode.part.0+0x10>

08005d18 <SX1276SetStby>:
{
 8005d18:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8005d1a:	4c09      	ldr	r4, [pc, #36]	; (8005d40 <SX1276SetStby+0x28>)
 8005d1c:	1d20      	adds	r0, r4, #4
 8005d1e:	f001 fbb9 	bl	8007494 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8005d22:	0020      	movs	r0, r4
 8005d24:	301c      	adds	r0, #28
 8005d26:	f001 fbb5 	bl	8007494 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8005d2a:	4c06      	ldr	r4, [pc, #24]	; (8005d44 <SX1276SetStby+0x2c>)
 8005d2c:	0020      	movs	r0, r4
 8005d2e:	3068      	adds	r0, #104	; 0x68
 8005d30:	f001 fbb0 	bl	8007494 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 8005d34:	2001      	movs	r0, #1
 8005d36:	f7ff ffcd 	bl	8005cd4 <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	7123      	strb	r3, [r4, #4]
}
 8005d3e:	bd10      	pop	{r4, pc}
 8005d40:	20000318 	.word	0x20000318
 8005d44:	20000298 	.word	0x20000298

08005d48 <SX1276SetRx>:
{
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 8005d4c:	4879      	ldr	r0, [pc, #484]	; (8005f34 <SX1276SetRx+0x1ec>)
 8005d4e:	301c      	adds	r0, #28
 8005d50:	f001 fba0 	bl	8007494 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 8005d54:	4c78      	ldr	r4, [pc, #480]	; (8005f38 <SX1276SetRx+0x1f0>)
 8005d56:	7965      	ldrb	r5, [r4, #5]
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	d02f      	beq.n	8005dbc <SX1276SetRx+0x74>
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	2d01      	cmp	r5, #1
 8005d60:	d151      	bne.n	8005e06 <SX1276SetRx+0xbe>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005d62:	0023      	movs	r3, r4
 8005d64:	3355      	adds	r3, #85	; 0x55
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2641      	movs	r6, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8005d6a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d100      	bne.n	8005d72 <SX1276SetRx+0x2a>
 8005d70:	e06f      	b.n	8005e52 <SX1276SetRx+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8005d72:	f7ff fec1 	bl	8005af8 <SX1276Read>
 8005d76:	4306      	orrs	r6, r0
 8005d78:	b2f1      	uxtb	r1, r6
 8005d7a:	2033      	movs	r0, #51	; 0x33
 8005d7c:	f7ff fe71 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8005d80:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005d82:	203b      	movs	r0, #59	; 0x3b
 8005d84:	f7ff fe6d 	bl	8005a62 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005d88:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8005d8a:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d900      	bls.n	8005d92 <SX1276SetRx+0x4a>
 8005d90:	e0b8      	b.n	8005f04 <SX1276SetRx+0x1bc>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8005d92:	f7ff feb1 	bl	8005af8 <SX1276Read>
 8005d96:	217f      	movs	r1, #127	; 0x7f
 8005d98:	4001      	ands	r1, r0
 8005d9a:	2031      	movs	r0, #49	; 0x31
 8005d9c:	f7ff fe61 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8005da0:	2030      	movs	r0, #48	; 0x30
 8005da2:	2100      	movs	r1, #0
 8005da4:	f7ff fe5d 	bl	8005a62 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8005da8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005daa:	2808      	cmp	r0, #8
 8005dac:	d865      	bhi.n	8005e7a <SX1276SetRx+0x132>
 8005dae:	f7fa f9bd 	bl	800012c <__gnu_thumb1_case_uqi>
 8005db2:	815b      	.short	0x815b
 8005db4:	9d968f88 	.word	0x9d968f88
 8005db8:	a4a4      	.short	0xa4a4
 8005dba:	a4          	.byte	0xa4
 8005dbb:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8005dbc:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005dbe:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8005dc0:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005dc2:	f7ff fe99 	bl	8005af8 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8005dc6:	2103      	movs	r1, #3
 8005dc8:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005dca:	3109      	adds	r1, #9
 8005dcc:	4301      	orrs	r1, r0
 8005dce:	2040      	movs	r0, #64	; 0x40
 8005dd0:	f7ff fe47 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8005dd4:	2041      	movs	r0, #65	; 0x41
 8005dd6:	f7ff fe8f 	bl	8005af8 <SX1276Read>
 8005dda:	213f      	movs	r1, #63	; 0x3f
 8005ddc:	4249      	negs	r1, r1
 8005dde:	4301      	orrs	r1, r0
 8005de0:	b2c9      	uxtb	r1, r1
 8005de2:	2041      	movs	r0, #65	; 0x41
 8005de4:	f7ff fe3d 	bl	8005a62 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8005de8:	2035      	movs	r0, #53	; 0x35
 8005dea:	f7ff fe85 	bl	8005af8 <SX1276Read>
 8005dee:	233f      	movs	r3, #63	; 0x3f
 8005df0:	4018      	ands	r0, r3
 8005df2:	0023      	movs	r3, r4
 8005df4:	333e      	adds	r3, #62	; 0x3e
 8005df6:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8005df8:	211e      	movs	r1, #30
 8005dfa:	200d      	movs	r0, #13
 8005dfc:	f7ff fe31 	bl	8005a62 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8005e00:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005e02:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8005e04:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8005e06:	2280      	movs	r2, #128	; 0x80
 8005e08:	2100      	movs	r1, #0
 8005e0a:	484c      	ldr	r0, [pc, #304]	; (8005f3c <SX1276SetRx+0x1f4>)
 8005e0c:	0052      	lsls	r2, r2, #1
 8005e0e:	f001 fd90 	bl	8007932 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8005e12:	2301      	movs	r3, #1
 8005e14:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8005e16:	2f00      	cmp	r7, #0
 8005e18:	d008      	beq.n	8005e2c <SX1276SetRx+0xe4>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005e1a:	4b46      	ldr	r3, [pc, #280]	; (8005f34 <SX1276SetRx+0x1ec>)
 8005e1c:	0039      	movs	r1, r7
 8005e1e:	1d1d      	adds	r5, r3, #4
 8005e20:	0028      	movs	r0, r5
 8005e22:	f001 fbcd 	bl	80075c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005e26:	0028      	movs	r0, r5
 8005e28:	f001 fb88 	bl	800753c <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8005e2c:	7963      	ldrb	r3, [r4, #5]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d000      	beq.n	8005e34 <SX1276SetRx+0xec>
 8005e32:	e078      	b.n	8005f26 <SX1276SetRx+0x1de>
    if( opMode == RF_OPMODE_SLEEP )
 8005e34:	2005      	movs	r0, #5
 8005e36:	f7ff ff4d 	bl	8005cd4 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 8005e3a:	2e00      	cmp	r6, #0
 8005e3c:	d108      	bne.n	8005e50 <SX1276SetRx+0x108>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8005e3e:	0025      	movs	r5, r4
 8005e40:	3568      	adds	r5, #104	; 0x68
 8005e42:	0028      	movs	r0, r5
 8005e44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e46:	f001 fbbb 	bl	80075c0 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 8005e4a:	0028      	movs	r0, r5
 8005e4c:	f001 fb76 	bl	800753c <UTIL_TIMER_Start>
}
 8005e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8005e52:	f7ff fe51 	bl	8005af8 <SX1276Read>
 8005e56:	0001      	movs	r1, r0
 8005e58:	43b1      	bics	r1, r6
 8005e5a:	4329      	orrs	r1, r5
 8005e5c:	b2c9      	uxtb	r1, r1
 8005e5e:	2033      	movs	r0, #51	; 0x33
 8005e60:	f7ff fdff 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005e64:	211d      	movs	r1, #29
 8005e66:	e78c      	b.n	8005d82 <SX1276SetRx+0x3a>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8005e68:	2148      	movs	r1, #72	; 0x48
 8005e6a:	202f      	movs	r0, #47	; 0x2f
 8005e6c:	f7ff fdf9 	bl	8005a62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8005e70:	68a3      	ldr	r3, [r4, #8]
 8005e72:	4a33      	ldr	r2, [pc, #204]	; (8005f40 <SX1276SetRx+0x1f8>)
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8005e74:	1898      	adds	r0, r3, r2
 8005e76:	f7ff fdfd 	bl	8005a74 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8005e7a:	0023      	movs	r3, r4
 8005e7c:	3356      	adds	r3, #86	; 0x56
 8005e7e:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005e80:	0023      	movs	r3, r4
 8005e82:	3353      	adds	r3, #83	; 0x53
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d044      	beq.n	8005f14 <SX1276SetRx+0x1cc>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005e8a:	211d      	movs	r1, #29
 8005e8c:	2011      	movs	r0, #17
 8005e8e:	f7ff fde8 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8005e92:	2040      	movs	r0, #64	; 0x40
 8005e94:	f7ff fe30 	bl	8005af8 <SX1276Read>
 8005e98:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8005e9a:	4001      	ands	r1, r0
 8005e9c:	2040      	movs	r0, #64	; 0x40
 8005e9e:	f7ff fde0 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	200f      	movs	r0, #15
 8005ea6:	f7ff fddc 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8005eaa:	2100      	movs	r1, #0
 8005eac:	200d      	movs	r0, #13
 8005eae:	f7ff fdd8 	bl	8005a62 <SX1276Write>
        break;
 8005eb2:	e7a8      	b.n	8005e06 <SX1276SetRx+0xbe>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005eb4:	2144      	movs	r1, #68	; 0x44
 8005eb6:	202f      	movs	r0, #47	; 0x2f
 8005eb8:	f7ff fdd3 	bl	8005a62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8005ebc:	68a3      	ldr	r3, [r4, #8]
 8005ebe:	4a21      	ldr	r2, [pc, #132]	; (8005f44 <SX1276SetRx+0x1fc>)
 8005ec0:	e7d8      	b.n	8005e74 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005ec2:	2144      	movs	r1, #68	; 0x44
 8005ec4:	202f      	movs	r0, #47	; 0x2f
 8005ec6:	f7ff fdcc 	bl	8005a62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8005eca:	68a3      	ldr	r3, [r4, #8]
 8005ecc:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <SX1276SetRx+0x200>)
 8005ece:	e7d1      	b.n	8005e74 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005ed0:	2144      	movs	r1, #68	; 0x44
 8005ed2:	202f      	movs	r0, #47	; 0x2f
 8005ed4:	f7ff fdc5 	bl	8005a62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8005ed8:	68a3      	ldr	r3, [r4, #8]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <SX1276SetRx+0x204>)
 8005edc:	e7ca      	b.n	8005e74 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005ede:	2144      	movs	r1, #68	; 0x44
 8005ee0:	202f      	movs	r0, #47	; 0x2f
 8005ee2:	f7ff fdbe 	bl	8005a62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8005ee6:	68a3      	ldr	r3, [r4, #8]
 8005ee8:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <SX1276SetRx+0x208>)
 8005eea:	e7c3      	b.n	8005e74 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005eec:	2144      	movs	r1, #68	; 0x44
 8005eee:	202f      	movs	r0, #47	; 0x2f
 8005ef0:	f7ff fdb7 	bl	8005a62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8005ef4:	68a3      	ldr	r3, [r4, #8]
 8005ef6:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <SX1276SetRx+0x20c>)
 8005ef8:	e7bc      	b.n	8005e74 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8005efa:	2140      	movs	r1, #64	; 0x40
 8005efc:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8005efe:	f7ff fdb0 	bl	8005a62 <SX1276Write>
 8005f02:	e7ba      	b.n	8005e7a <SX1276SetRx+0x132>
 8005f04:	f7ff fdf8 	bl	8005af8 <SX1276Read>
 8005f08:	2180      	movs	r1, #128	; 0x80
 8005f0a:	4249      	negs	r1, r1
 8005f0c:	4301      	orrs	r1, r0
 8005f0e:	b2c9      	uxtb	r1, r1
 8005f10:	2031      	movs	r0, #49	; 0x31
 8005f12:	e7f4      	b.n	8005efe <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005f14:	211f      	movs	r1, #31
 8005f16:	2011      	movs	r0, #17
 8005f18:	f7ff fda3 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8005f1c:	2040      	movs	r0, #64	; 0x40
 8005f1e:	f7ff fdeb 	bl	8005af8 <SX1276Read>
 8005f22:	213f      	movs	r1, #63	; 0x3f
 8005f24:	e7b9      	b.n	8005e9a <SX1276SetRx+0x152>
        if( rxContinuous == true )
 8005f26:	2005      	movs	r0, #5
 8005f28:	2e00      	cmp	r6, #0
 8005f2a:	d100      	bne.n	8005f2e <SX1276SetRx+0x1e6>
    if( opMode == RF_OPMODE_SLEEP )
 8005f2c:	2006      	movs	r0, #6
 8005f2e:	f7ff fed1 	bl	8005cd4 <SX1276SetOpMode.part.0>
}
 8005f32:	e78d      	b.n	8005e50 <SX1276SetRx+0x108>
 8005f34:	20000318 	.word	0x20000318
 8005f38:	20000298 	.word	0x20000298
 8005f3c:	2000034c 	.word	0x2000034c
 8005f40:	00001e82 	.word	0x00001e82
 8005f44:	000028b4 	.word	0x000028b4
 8005f48:	00003d04 	.word	0x00003d04
 8005f4c:	0000515e 	.word	0x0000515e
 8005f50:	00007a12 	.word	0x00007a12
 8005f54:	0000a2c6 	.word	0x0000a2c6

08005f58 <SX1276StartCad>:
{
 8005f58:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8005f5a:	4c0b      	ldr	r4, [pc, #44]	; (8005f88 <SX1276StartCad+0x30>)
 8005f5c:	7963      	ldrb	r3, [r4, #5]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d110      	bne.n	8005f84 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8005f62:	21fa      	movs	r1, #250	; 0xfa
 8005f64:	2011      	movs	r0, #17
 8005f66:	f7ff fd7c 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8005f6a:	2040      	movs	r0, #64	; 0x40
 8005f6c:	f7ff fdc4 	bl	8005af8 <SX1276Read>
 8005f70:	2503      	movs	r5, #3
 8005f72:	43a8      	bics	r0, r5
 8005f74:	b2c1      	uxtb	r1, r0
 8005f76:	2040      	movs	r0, #64	; 0x40
 8005f78:	f7ff fd73 	bl	8005a62 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8005f7c:	2007      	movs	r0, #7
 8005f7e:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 8005f80:	f7ff fea8 	bl	8005cd4 <SX1276SetOpMode.part.0>
}
 8005f84:	bd70      	pop	{r4, r5, r6, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	20000298 	.word	0x20000298

08005f8c <SX1276ReadRssi>:
{
 8005f8c:	b510      	push	{r4, lr}
    switch( modem )
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d004      	beq.n	8005f9c <SX1276ReadRssi+0x10>
 8005f92:	2801      	cmp	r0, #1
 8005f94:	d00a      	beq.n	8005fac <SX1276ReadRssi+0x20>
 8005f96:	2001      	movs	r0, #1
 8005f98:	4240      	negs	r0, r0
}
 8005f9a:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005f9c:	2011      	movs	r0, #17
 8005f9e:	f7ff fdab 	bl	8005af8 <SX1276Read>
 8005fa2:	0840      	lsrs	r0, r0, #1
 8005fa4:	b2c0      	uxtb	r0, r0
 8005fa6:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8005fa8:	b200      	sxth	r0, r0
 8005faa:	e7f6      	b.n	8005f9a <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8005fac:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <SX1276ReadRssi+0x3c>)
 8005fae:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <SX1276ReadRssi+0x40>)
 8005fb0:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8005fb2:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d903      	bls.n	8005fc0 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8005fb8:	f7ff fd9e 	bl	8005af8 <SX1276Read>
 8005fbc:	389d      	subs	r0, #157	; 0x9d
 8005fbe:	e7f3      	b.n	8005fa8 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8005fc0:	f7ff fd9a 	bl	8005af8 <SX1276Read>
 8005fc4:	38a4      	subs	r0, #164	; 0xa4
 8005fc6:	e7ef      	b.n	8005fa8 <SX1276ReadRssi+0x1c>
 8005fc8:	20000298 	.word	0x20000298
 8005fcc:	1f4add40 	.word	0x1f4add40

08005fd0 <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 8005fd0:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	f7ff fd90 	bl	8005af8 <SX1276Read>
 8005fd8:	21f8      	movs	r1, #248	; 0xf8
 8005fda:	4001      	ands	r1, r0
 8005fdc:	2001      	movs	r0, #1
 8005fde:	f7ff fd40 	bl	8005a62 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f7fd f8b6 	bl	8003154 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f7fc ff3b 	bl	8002e64 <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 8005fee:	bd10      	pop	{r4, pc}

08005ff0 <SX1276SetModem>:
{
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	f7ff fd7f 	bl	8005af8 <SX1276Read>
 8005ffa:	b2c0      	uxtb	r0, r0
 8005ffc:	4b16      	ldr	r3, [pc, #88]	; (8006058 <SX1276SetModem+0x68>)
        SX1276.Settings.Modem = MODEM_LORA;
 8005ffe:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 8006000:	42a0      	cmp	r0, r4
 8006002:	d101      	bne.n	8006008 <SX1276SetModem+0x18>
 8006004:	7158      	strb	r0, [r3, #5]
}
 8006006:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 8006008:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800600a:	2c01      	cmp	r4, #1
 800600c:	d012      	beq.n	8006034 <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800600e:	f7ff ffdf 	bl	8005fd0 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8006012:	2001      	movs	r0, #1
 8006014:	f7ff fd70 	bl	8005af8 <SX1276Read>
 8006018:	217f      	movs	r1, #127	; 0x7f
 800601a:	4001      	ands	r1, r0
 800601c:	2001      	movs	r0, #1
 800601e:	f7ff fd20 	bl	8005a62 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006022:	2100      	movs	r1, #0
 8006024:	2040      	movs	r0, #64	; 0x40
 8006026:	f7ff fd1c 	bl	8005a62 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800602a:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800602c:	2041      	movs	r0, #65	; 0x41
 800602e:	f7ff fd18 	bl	8005a62 <SX1276Write>
        break;
 8006032:	e7e8      	b.n	8006006 <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006034:	f7ff ffcc 	bl	8005fd0 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8006038:	0020      	movs	r0, r4
 800603a:	f7ff fd5d 	bl	8005af8 <SX1276Read>
 800603e:	2180      	movs	r1, #128	; 0x80
 8006040:	4249      	negs	r1, r1
 8006042:	4301      	orrs	r1, r0
 8006044:	b2c9      	uxtb	r1, r1
 8006046:	0020      	movs	r0, r4
 8006048:	f7ff fd0b 	bl	8005a62 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800604c:	2100      	movs	r1, #0
 800604e:	2040      	movs	r0, #64	; 0x40
 8006050:	f7ff fd07 	bl	8005a62 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8006054:	2100      	movs	r1, #0
 8006056:	e7e9      	b.n	800602c <SX1276SetModem+0x3c>
 8006058:	20000298 	.word	0x20000298

0800605c <SX1276Init>:
{
 800605c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800605e:	4d21      	ldr	r5, [pc, #132]	; (80060e4 <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006060:	2400      	movs	r4, #0
    RadioEvents = events;
 8006062:	6028      	str	r0, [r5, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006064:	2101      	movs	r1, #1
 8006066:	0028      	movs	r0, r5
 8006068:	4e1f      	ldr	r6, [pc, #124]	; (80060e8 <SX1276Init+0x8c>)
 800606a:	0022      	movs	r2, r4
 800606c:	0033      	movs	r3, r6
 800606e:	9400      	str	r4, [sp, #0]
 8006070:	4249      	negs	r1, r1
 8006072:	301c      	adds	r0, #28
 8006074:	f001 f9ae 	bl	80073d4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8006078:	2101      	movs	r1, #1
 800607a:	0033      	movs	r3, r6
 800607c:	0022      	movs	r2, r4
 800607e:	1d28      	adds	r0, r5, #4
 8006080:	9400      	str	r4, [sp, #0]
 8006082:	4249      	negs	r1, r1
 8006084:	f001 f9a6 	bl	80073d4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8006088:	4d18      	ldr	r5, [pc, #96]	; (80060ec <SX1276Init+0x90>)
 800608a:	2101      	movs	r1, #1
 800608c:	0028      	movs	r0, r5
 800608e:	0033      	movs	r3, r6
 8006090:	0022      	movs	r2, r4
 8006092:	4249      	negs	r1, r1
 8006094:	9400      	str	r4, [sp, #0]
 8006096:	3068      	adds	r0, #104	; 0x68
 8006098:	f001 f99c 	bl	80073d4 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 800609c:	2001      	movs	r0, #1
 800609e:	f7fc fee1 	bl	8002e64 <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 80060a2:	f7fd f87f 	bl	80031a4 <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 80060a6:	f7ff fd91 	bl	8005bcc <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80060aa:	f7ff ff91 	bl	8005fd0 <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 80060ae:	4810      	ldr	r0, [pc, #64]	; (80060f0 <SX1276Init+0x94>)
 80060b0:	f7fd f820 	bl	80030f4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80060b4:	4e0f      	ldr	r6, [pc, #60]	; (80060f4 <SX1276Init+0x98>)
 80060b6:	0034      	movs	r4, r6
 80060b8:	3640      	adds	r6, #64	; 0x40
 80060ba:	3410      	adds	r4, #16
        SX1276SetModem( RadioRegsInit[i].Modem );
 80060bc:	7820      	ldrb	r0, [r4, #0]
 80060be:	f7ff ff97 	bl	8005ff0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80060c2:	78a1      	ldrb	r1, [r4, #2]
 80060c4:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80060c6:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80060c8:	f7ff fccb 	bl	8005a62 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80060cc:	42b4      	cmp	r4, r6
 80060ce:	d1f5      	bne.n	80060bc <SX1276Init+0x60>
    SX1276SetModem( MODEM_FSK );
 80060d0:	2000      	movs	r0, #0
 80060d2:	f7ff ff8d 	bl	8005ff0 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	712b      	strb	r3, [r5, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 80060da:	f7fc fec1 	bl	8002e60 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 80060de:	3002      	adds	r0, #2
}
 80060e0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	20000318 	.word	0x20000318
 80060e8:	08006461 	.word	0x08006461
 80060ec:	20000298 	.word	0x20000298
 80060f0:	20000024 	.word	0x20000024
 80060f4:	08007a90 	.word	0x08007a90

080060f8 <SX1276SetMaxPayloadLength>:
{
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	0004      	movs	r4, r0
 80060fc:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 80060fe:	f7ff ff77 	bl	8005ff0 <SX1276SetModem>
    switch( modem )
 8006102:	2c00      	cmp	r4, #0
 8006104:	d002      	beq.n	800610c <SX1276SetMaxPayloadLength+0x14>
 8006106:	2c01      	cmp	r4, #1
 8006108:	d00a      	beq.n	8006120 <SX1276SetMaxPayloadLength+0x28>
}
 800610a:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <SX1276SetMaxPayloadLength+0x30>)
 800610e:	3303      	adds	r3, #3
 8006110:	7fdb      	ldrb	r3, [r3, #31]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f9      	bne.n	800610a <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8006116:	0029      	movs	r1, r5
 8006118:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800611a:	f7ff fca2 	bl	8005a62 <SX1276Write>
}
 800611e:	e7f4      	b.n	800610a <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8006120:	0029      	movs	r1, r5
 8006122:	2023      	movs	r0, #35	; 0x23
 8006124:	e7f9      	b.n	800611a <SX1276SetMaxPayloadLength+0x22>
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	20000298 	.word	0x20000298

0800612c <SX1276SetPublicNetwork>:
{
 800612c:	b510      	push	{r4, lr}
 800612e:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8006130:	2001      	movs	r0, #1
 8006132:	f7ff ff5d 	bl	8005ff0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8006138:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800613a:	335c      	adds	r3, #92	; 0x5c
 800613c:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800613e:	2c00      	cmp	r4, #0
 8006140:	d100      	bne.n	8006144 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8006142:	2112      	movs	r1, #18
 8006144:	2039      	movs	r0, #57	; 0x39
 8006146:	f7ff fc8c 	bl	8005a62 <SX1276Write>
}
 800614a:	bd10      	pop	{r4, pc}
 800614c:	20000298 	.word	0x20000298

08006150 <SX1276SetRxConfig>:
{
 8006150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006152:	b08d      	sub	sp, #52	; 0x34
 8006154:	9306      	str	r3, [sp, #24]
 8006156:	ab12      	add	r3, sp, #72	; 0x48
 8006158:	0016      	movs	r6, r2
 800615a:	cb04      	ldmia	r3!, {r2}
 800615c:	0004      	movs	r4, r0
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	9208      	str	r2, [sp, #32]
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	ab14      	add	r3, sp, #80	; 0x50
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	aa0c      	add	r2, sp, #48	; 0x30
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	ab15      	add	r3, sp, #84	; 0x54
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	000d      	movs	r5, r1
 8006172:	9302      	str	r3, [sp, #8]
 8006174:	ab16      	add	r3, sp, #88	; 0x58
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	9303      	str	r3, [sp, #12]
 800617a:	ab17      	add	r3, sp, #92	; 0x5c
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	ab18      	add	r3, sp, #96	; 0x60
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	930a      	str	r3, [sp, #40]	; 0x28
 8006186:	ab19      	add	r3, sp, #100	; 0x64
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	930b      	str	r3, [sp, #44]	; 0x2c
 800618c:	2319      	movs	r3, #25
 800618e:	189b      	adds	r3, r3, r2
 8006190:	7fdf      	ldrb	r7, [r3, #31]
 8006192:	231d      	movs	r3, #29
 8006194:	189b      	adds	r3, r3, r2
 8006196:	7fdb      	ldrb	r3, [r3, #31]
 8006198:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 800619a:	f7ff ff29 	bl	8005ff0 <SX1276SetModem>
    switch( modem )
 800619e:	2c00      	cmp	r4, #0
 80061a0:	d004      	beq.n	80061ac <SX1276SetRxConfig+0x5c>
 80061a2:	2c01      	cmp	r4, #1
 80061a4:	d100      	bne.n	80061a8 <SX1276SetRxConfig+0x58>
 80061a6:	e084      	b.n	80062b2 <SX1276SetRxConfig+0x162>
}
 80061a8:	b00d      	add	sp, #52	; 0x34
 80061aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80061ac:	4ca6      	ldr	r4, [pc, #664]	; (8006448 <SX1276SetRxConfig+0x2f8>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80061ae:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80061b0:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80061b2:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80061b4:	1ce3      	adds	r3, r4, #3
 80061b6:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80061b8:	9a03      	ldr	r2, [sp, #12]
 80061ba:	1d23      	adds	r3, r4, #4
 80061bc:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80061be:	9a04      	ldr	r2, [sp, #16]
 80061c0:	1d63      	adds	r3, r4, #5
 80061c2:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80061c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80061c6:	1da3      	adds	r3, r4, #6
 80061c8:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80061ca:	1de3      	adds	r3, r4, #7
 80061cc:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80061ce:	9b01      	ldr	r3, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 80061d0:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80061d2:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80061d4:	0030      	movs	r0, r6
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80061d6:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80061d8:	f7fb fbce 	bl	8001978 <__aeabi_ui2d>
 80061dc:	0002      	movs	r2, r0
 80061de:	000b      	movs	r3, r1
 80061e0:	0006      	movs	r6, r0
 80061e2:	000f      	movs	r7, r1
 80061e4:	2000      	movs	r0, #0
 80061e6:	4999      	ldr	r1, [pc, #612]	; (800644c <SX1276SetRxConfig+0x2fc>)
 80061e8:	f7fa fa6c 	bl	80006c4 <__aeabi_ddiv>
 80061ec:	2200      	movs	r2, #0
 80061ee:	4b98      	ldr	r3, [pc, #608]	; (8006450 <SX1276SetRxConfig+0x300>)
 80061f0:	f7fa fd5e 	bl	8000cb0 <__aeabi_dmul>
 80061f4:	9006      	str	r0, [sp, #24]
 80061f6:	9107      	str	r1, [sp, #28]
 80061f8:	9805      	ldr	r0, [sp, #20]
 80061fa:	f7fb fb8d 	bl	8001918 <__aeabi_i2d>
 80061fe:	0002      	movs	r2, r0
 8006200:	000b      	movs	r3, r1
 8006202:	9806      	ldr	r0, [sp, #24]
 8006204:	9907      	ldr	r1, [sp, #28]
 8006206:	f7fa fd53 	bl	8000cb0 <__aeabi_dmul>
 800620a:	2200      	movs	r2, #0
 800620c:	4b91      	ldr	r3, [pc, #580]	; (8006454 <SX1276SetRxConfig+0x304>)
 800620e:	f7fa fd4f 	bl	8000cb0 <__aeabi_dmul>
 8006212:	f7fa f96d 	bl	80004f0 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8006216:	0032      	movs	r2, r6
 8006218:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800621a:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800621c:	498e      	ldr	r1, [pc, #568]	; (8006458 <SX1276SetRxConfig+0x308>)
 800621e:	2000      	movs	r0, #0
 8006220:	f7fa fa50 	bl	80006c4 <__aeabi_ddiv>
 8006224:	f7fa f964 	bl	80004f0 <__aeabi_d2uiz>
 8006228:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800622a:	0a21      	lsrs	r1, r4, #8
 800622c:	2002      	movs	r0, #2
 800622e:	f7ff fc18 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8006232:	b2e1      	uxtb	r1, r4
 8006234:	2003      	movs	r0, #3
 8006236:	f7ff fc14 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800623a:	0028      	movs	r0, r5
 800623c:	f7ff fb68 	bl	8005910 <GetFskBandwidthRegValue>
 8006240:	0001      	movs	r1, r0
 8006242:	2012      	movs	r0, #18
 8006244:	f7ff fc0d 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8006248:	9808      	ldr	r0, [sp, #32]
 800624a:	f7ff fb61 	bl	8005910 <GetFskBandwidthRegValue>
 800624e:	0001      	movs	r1, r0
 8006250:	2013      	movs	r0, #19
 8006252:	f7ff fc06 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	2025      	movs	r0, #37	; 0x25
 800625a:	0a19      	lsrs	r1, r3, #8
 800625c:	f7ff fc01 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006260:	466b      	mov	r3, sp
 8006262:	2026      	movs	r0, #38	; 0x26
 8006264:	7919      	ldrb	r1, [r3, #4]
 8006266:	f7ff fbfc 	bl	8005a62 <SX1276Write>
            if( fixLen == 1 )
 800626a:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800626c:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 800626e:	2b00      	cmp	r3, #0
 8006270:	d100      	bne.n	8006274 <SX1276SetRxConfig+0x124>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8006272:	21ff      	movs	r1, #255	; 0xff
 8006274:	2032      	movs	r0, #50	; 0x32
 8006276:	f7ff fbf4 	bl	8005a62 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800627a:	2030      	movs	r0, #48	; 0x30
 800627c:	f7ff fc3c 	bl	8005af8 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8006280:	216f      	movs	r1, #111	; 0x6f
 8006282:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006284:	2100      	movs	r1, #0
 8006286:	9b02      	ldr	r3, [sp, #8]
 8006288:	428b      	cmp	r3, r1
 800628a:	d100      	bne.n	800628e <SX1276SetRxConfig+0x13e>
 800628c:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 800628e:	9b04      	ldr	r3, [sp, #16]
 8006290:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006292:	4318      	orrs	r0, r3
 8006294:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8006296:	b2c9      	uxtb	r1, r1
 8006298:	2030      	movs	r0, #48	; 0x30
 800629a:	f7ff fbe2 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800629e:	2031      	movs	r0, #49	; 0x31
 80062a0:	f7ff fc2a 	bl	8005af8 <SX1276Read>
 80062a4:	2140      	movs	r1, #64	; 0x40
 80062a6:	4301      	orrs	r1, r0
 80062a8:	2031      	movs	r0, #49	; 0x31
 80062aa:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80062ac:	f7ff fbd9 	bl	8005a62 <SX1276Write>
}
 80062b0:	e77a      	b.n	80061a8 <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 80062b2:	2d02      	cmp	r5, #2
 80062b4:	d900      	bls.n	80062b8 <SX1276SetRxConfig+0x168>
                while( 1 );
 80062b6:	e7fe      	b.n	80062b6 <SX1276SetRxConfig+0x166>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80062b8:	4b63      	ldr	r3, [pc, #396]	; (8006448 <SX1276SetRxConfig+0x2f8>)
            SX1276.Settings.LoRa.Coderate = coderate;
 80062ba:	9906      	ldr	r1, [sp, #24]
 80062bc:	001a      	movs	r2, r3
 80062be:	324d      	adds	r2, #77	; 0x4d
 80062c0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80062c2:	001a      	movs	r2, r3
 80062c4:	9901      	ldr	r1, [sp, #4]
 80062c6:	324e      	adds	r2, #78	; 0x4e
 80062c8:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80062ca:	001a      	movs	r2, r3
 80062cc:	9902      	ldr	r1, [sp, #8]
 80062ce:	3250      	adds	r2, #80	; 0x50
 80062d0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80062d2:	001a      	movs	r2, r3
 80062d4:	9903      	ldr	r1, [sp, #12]
 80062d6:	3251      	adds	r2, #81	; 0x51
 80062d8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80062da:	001a      	movs	r2, r3
 80062dc:	9904      	ldr	r1, [sp, #16]
 80062de:	3252      	adds	r2, #82	; 0x52
 80062e0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80062e2:	001a      	movs	r2, r3
 80062e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062e6:	3253      	adds	r2, #83	; 0x53
 80062e8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80062ea:	001a      	movs	r2, r3
 80062ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062ee:	3254      	adds	r2, #84	; 0x54
 80062f0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80062f2:	001a      	movs	r2, r3
 80062f4:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 80062f6:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80062f8:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80062fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80062fc:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80062fe:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8006300:	3356      	adds	r3, #86	; 0x56
 8006302:	2406      	movs	r4, #6
 8006304:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 8006306:	2e06      	cmp	r6, #6
 8006308:	d303      	bcc.n	8006312 <SX1276SetRxConfig+0x1c2>
 800630a:	0034      	movs	r4, r6
 800630c:	2e0c      	cmp	r6, #12
 800630e:	d900      	bls.n	8006312 <SX1276SetRxConfig+0x1c2>
 8006310:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006312:	2d07      	cmp	r5, #7
 8006314:	d17d      	bne.n	8006412 <SX1276SetRxConfig+0x2c2>
 8006316:	0022      	movs	r2, r4
 8006318:	2300      	movs	r3, #0
 800631a:	2101      	movs	r1, #1
 800631c:	3a0b      	subs	r2, #11
 800631e:	4291      	cmp	r1, r2
 8006320:	415b      	adcs	r3, r3
 8006322:	b2db      	uxtb	r3, r3
 8006324:	4f48      	ldr	r7, [pc, #288]	; (8006448 <SX1276SetRxConfig+0x2f8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006326:	201d      	movs	r0, #29
 8006328:	374c      	adds	r7, #76	; 0x4c
 800632a:	703b      	strb	r3, [r7, #0]
 800632c:	f7ff fbe4 	bl	8005af8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006330:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006332:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006334:	0059      	lsls	r1, r3, #1
 8006336:	9b02      	ldr	r3, [sp, #8]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006338:	0124      	lsls	r4, r4, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800633a:	4319      	orrs	r1, r3
 800633c:	012b      	lsls	r3, r5, #4
 800633e:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006340:	b2c9      	uxtb	r1, r1
 8006342:	f7ff fb8e 	bl	8005a62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006346:	201e      	movs	r0, #30
 8006348:	f7ff fbd6 	bl	8005af8 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800634c:	9b05      	ldr	r3, [sp, #20]
 800634e:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006350:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8006352:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006354:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006356:	4319      	orrs	r1, r3
 8006358:	4321      	orrs	r1, r4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800635a:	2408      	movs	r4, #8
 800635c:	4020      	ands	r0, r4
            SX1276Write( REG_LR_MODEMCONFIG2,
 800635e:	4301      	orrs	r1, r0
 8006360:	b2c9      	uxtb	r1, r1
 8006362:	201e      	movs	r0, #30
 8006364:	f7ff fb7d 	bl	8005a62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006368:	2026      	movs	r0, #38	; 0x26
 800636a:	f7ff fbc5 	bl	8005af8 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800636e:	7839      	ldrb	r1, [r7, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006370:	43a0      	bics	r0, r4
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006372:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006374:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006376:	b2c9      	uxtb	r1, r1
 8006378:	2026      	movs	r0, #38	; 0x26
 800637a:	f7ff fb72 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800637e:	466b      	mov	r3, sp
 8006380:	201f      	movs	r0, #31
 8006382:	7d19      	ldrb	r1, [r3, #20]
 8006384:	f7ff fb6d 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006388:	9b01      	ldr	r3, [sp, #4]
 800638a:	2020      	movs	r0, #32
 800638c:	0a19      	lsrs	r1, r3, #8
 800638e:	f7ff fb68 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006392:	466b      	mov	r3, sp
 8006394:	2021      	movs	r0, #33	; 0x21
 8006396:	7919      	ldrb	r1, [r3, #4]
 8006398:	f7ff fb63 	bl	8005a62 <SX1276Write>
            if( fixLen == 1 )
 800639c:	9b02      	ldr	r3, [sp, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <SX1276SetRxConfig+0x25a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80063a2:	2022      	movs	r0, #34	; 0x22
 80063a4:	9903      	ldr	r1, [sp, #12]
 80063a6:	f7ff fb5c 	bl	8005a62 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80063aa:	4b27      	ldr	r3, [pc, #156]	; (8006448 <SX1276SetRxConfig+0x2f8>)
 80063ac:	3353      	adds	r3, #83	; 0x53
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00f      	beq.n	80063d4 <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80063b4:	2044      	movs	r0, #68	; 0x44
 80063b6:	f7ff fb9f 	bl	8005af8 <SX1276Read>
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	4249      	negs	r1, r1
 80063be:	4301      	orrs	r1, r0
 80063c0:	b2c9      	uxtb	r1, r1
 80063c2:	2044      	movs	r0, #68	; 0x44
 80063c4:	f7ff fb4d 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80063c8:	4b1f      	ldr	r3, [pc, #124]	; (8006448 <SX1276SetRxConfig+0x2f8>)
 80063ca:	2024      	movs	r0, #36	; 0x24
 80063cc:	3354      	adds	r3, #84	; 0x54
 80063ce:	7819      	ldrb	r1, [r3, #0]
 80063d0:	f7ff fb47 	bl	8005a62 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80063d4:	2d09      	cmp	r5, #9
 80063d6:	d128      	bne.n	800642a <SX1276SetRxConfig+0x2da>
 80063d8:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <SX1276SetRxConfig+0x2f8>)
 80063da:	4b20      	ldr	r3, [pc, #128]	; (800645c <SX1276SetRxConfig+0x30c>)
 80063dc:	6892      	ldr	r2, [r2, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80063de:	2102      	movs	r1, #2
 80063e0:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d91d      	bls.n	8006422 <SX1276SetRxConfig+0x2d2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80063e6:	f7ff fb3c 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80063ea:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80063ec:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80063ee:	f7ff fb38 	bl	8005a62 <SX1276Write>
            if( datarate == 6 )
 80063f2:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063f4:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80063f6:	2e06      	cmp	r6, #6
 80063f8:	d81a      	bhi.n	8006430 <SX1276SetRxConfig+0x2e0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063fa:	f7ff fb7d 	bl	8005af8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063fe:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006400:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006402:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006404:	b2c9      	uxtb	r1, r1
 8006406:	2031      	movs	r0, #49	; 0x31
 8006408:	f7ff fb2b 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800640c:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800640e:	2037      	movs	r0, #55	; 0x37
 8006410:	e74c      	b.n	80062ac <SX1276SetRxConfig+0x15c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006412:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006414:	2d08      	cmp	r5, #8
 8006416:	d185      	bne.n	8006324 <SX1276SetRxConfig+0x1d4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006418:	330b      	adds	r3, #11
 800641a:	42b3      	cmp	r3, r6
 800641c:	419b      	sbcs	r3, r3
 800641e:	425b      	negs	r3, r3
 8006420:	e780      	b.n	8006324 <SX1276SetRxConfig+0x1d4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006422:	f7ff fb1e 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8006426:	217f      	movs	r1, #127	; 0x7f
 8006428:	e7e0      	b.n	80063ec <SX1276SetRxConfig+0x29c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800642a:	2103      	movs	r1, #3
 800642c:	2036      	movs	r0, #54	; 0x36
 800642e:	e7de      	b.n	80063ee <SX1276SetRxConfig+0x29e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006430:	f7ff fb62 	bl	8005af8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006434:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006436:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006438:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800643a:	b2c9      	uxtb	r1, r1
 800643c:	2031      	movs	r0, #49	; 0x31
 800643e:	f7ff fb10 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006442:	210a      	movs	r1, #10
 8006444:	e7e3      	b.n	800640e <SX1276SetRxConfig+0x2be>
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	20000298 	.word	0x20000298
 800644c:	3ff00000 	.word	0x3ff00000
 8006450:	40200000 	.word	0x40200000
 8006454:	408f4000 	.word	0x408f4000
 8006458:	417e8480 	.word	0x417e8480
 800645c:	1f4add40 	.word	0x1f4add40

08006460 <SX1276OnTimeoutIrq>:
{
 8006460:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8006462:	4c2a      	ldr	r4, [pc, #168]	; (800650c <SX1276OnTimeoutIrq+0xac>)
 8006464:	7923      	ldrb	r3, [r4, #4]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d002      	beq.n	8006470 <SX1276OnTimeoutIrq+0x10>
 800646a:	2b02      	cmp	r3, #2
 800646c:	d02a      	beq.n	80064c4 <SX1276OnTimeoutIrq+0x64>
}
 800646e:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8006470:	7963      	ldrb	r3, [r4, #5]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d117      	bne.n	80064a6 <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006476:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006478:	210b      	movs	r1, #11
 800647a:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800647c:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800647e:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006480:	f7ff faef 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006484:	2110      	movs	r1, #16
 8006486:	203f      	movs	r0, #63	; 0x3f
 8006488:	f7ff faeb 	bl	8005a62 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800648c:	1de3      	adds	r3, r4, #7
 800648e:	7fdb      	ldrb	r3, [r3, #31]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d011      	beq.n	80064b8 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006494:	200d      	movs	r0, #13
 8006496:	f7ff fb2f 	bl	8005af8 <SX1276Read>
 800649a:	2140      	movs	r1, #64	; 0x40
 800649c:	4301      	orrs	r1, r0
 800649e:	b2c9      	uxtb	r1, r1
 80064a0:	200d      	movs	r0, #13
 80064a2:	f7ff fade 	bl	8005a62 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80064a6:	4b1a      	ldr	r3, [pc, #104]	; (8006510 <SX1276OnTimeoutIrq+0xb0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0df      	beq.n	800646e <SX1276OnTimeoutIrq+0xe>
 80064ae:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0dc      	beq.n	800646e <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 80064b4:	4798      	blx	r3
}
 80064b6:	e7da      	b.n	800646e <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 80064b8:	0020      	movs	r0, r4
 80064ba:	3068      	adds	r0, #104	; 0x68
                SX1276.Settings.State = RF_IDLE;
 80064bc:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 80064be:	f000 ffe9 	bl	8007494 <UTIL_TIMER_Stop>
 80064c2:	e7f0      	b.n	80064a6 <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 80064c4:	f7fc fe6e 	bl	80031a4 <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 80064c8:	f7ff fb80 	bl	8005bcc <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80064cc:	f7ff fd80 	bl	8005fd0 <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80064d0:	4e10      	ldr	r6, [pc, #64]	; (8006514 <SX1276OnTimeoutIrq+0xb4>)
 80064d2:	0035      	movs	r5, r6
 80064d4:	3640      	adds	r6, #64	; 0x40
 80064d6:	3510      	adds	r5, #16
            SX1276SetModem( RadioRegsInit[i].Modem );
 80064d8:	7828      	ldrb	r0, [r5, #0]
 80064da:	f7ff fd89 	bl	8005ff0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80064de:	78a9      	ldrb	r1, [r5, #2]
 80064e0:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80064e2:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80064e4:	f7ff fabd 	bl	8005a62 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80064e8:	42b5      	cmp	r5, r6
 80064ea:	d1f5      	bne.n	80064d8 <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 80064ec:	2000      	movs	r0, #0
 80064ee:	f7ff fd7f 	bl	8005ff0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80064f2:	0023      	movs	r3, r4
 80064f4:	335c      	adds	r3, #92	; 0x5c
 80064f6:	7818      	ldrb	r0, [r3, #0]
 80064f8:	f7ff fe18 	bl	800612c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006500:	4b03      	ldr	r3, [pc, #12]	; (8006510 <SX1276OnTimeoutIrq+0xb0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0b2      	beq.n	800646e <SX1276OnTimeoutIrq+0xe>
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	e7d1      	b.n	80064b0 <SX1276OnTimeoutIrq+0x50>
 800650c:	20000298 	.word	0x20000298
 8006510:	20000318 	.word	0x20000318
 8006514:	08007a90 	.word	0x08007a90

08006518 <SX1276SetSleep>:
{
 8006518:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800651a:	4c0a      	ldr	r4, [pc, #40]	; (8006544 <SX1276SetSleep+0x2c>)
 800651c:	1d20      	adds	r0, r4, #4
 800651e:	f000 ffb9 	bl	8007494 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8006522:	0020      	movs	r0, r4
 8006524:	301c      	adds	r0, #28
 8006526:	f000 ffb5 	bl	8007494 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800652a:	4c07      	ldr	r4, [pc, #28]	; (8006548 <SX1276SetSleep+0x30>)
 800652c:	0020      	movs	r0, r4
 800652e:	3068      	adds	r0, #104	; 0x68
 8006530:	f000 ffb0 	bl	8007494 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006534:	f7ff fd4c 	bl	8005fd0 <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 8006538:	2000      	movs	r0, #0
 800653a:	f7fc fc93 	bl	8002e64 <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800653e:	2300      	movs	r3, #0
 8006540:	7123      	strb	r3, [r4, #4]
}
 8006542:	bd10      	pop	{r4, pc}
 8006544:	20000318 	.word	0x20000318
 8006548:	20000298 	.word	0x20000298

0800654c <SX1276IsChannelFree>:
{
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	0007      	movs	r7, r0
 8006550:	000c      	movs	r4, r1
 8006552:	0016      	movs	r6, r2
 8006554:	001d      	movs	r5, r3
    SX1276SetSleep( );
 8006556:	f7ff ffdf 	bl	8006518 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800655a:	2000      	movs	r0, #0
 800655c:	f7ff fd48 	bl	8005ff0 <SX1276SetModem>
    SX1276SetChannel( freq );
 8006560:	0038      	movs	r0, r7
 8006562:	f7ff fa87 	bl	8005a74 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8006566:	0020      	movs	r0, r4
 8006568:	f7ff f9d2 	bl	8005910 <GetFskBandwidthRegValue>
 800656c:	0004      	movs	r4, r0
 800656e:	0001      	movs	r1, r0
 8006570:	2012      	movs	r0, #18
 8006572:	f7ff fa76 	bl	8005a62 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8006576:	0021      	movs	r1, r4
 8006578:	2013      	movs	r0, #19
 800657a:	f7ff fa72 	bl	8005a62 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800657e:	2005      	movs	r0, #5
 8006580:	f7ff fba8 	bl	8005cd4 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 8006584:	2001      	movs	r0, #1
 8006586:	f7fc f9f1 	bl	800296c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800658a:	f000 ff3f 	bl	800740c <UTIL_TIMER_GetCurrentTime>
 800658e:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006590:	0020      	movs	r0, r4
 8006592:	f000 ff45 	bl	8007420 <UTIL_TIMER_GetElapsedTime>
 8006596:	42a8      	cmp	r0, r5
 8006598:	d304      	bcc.n	80065a4 <SX1276IsChannelFree+0x58>
    bool status = true;
 800659a:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800659c:	f7ff ffbc 	bl	8006518 <SX1276SetSleep>
}
 80065a0:	0020      	movs	r0, r4
 80065a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 80065a4:	2000      	movs	r0, #0
 80065a6:	f7ff fcf1 	bl	8005f8c <SX1276ReadRssi>
        if( rssi > rssiThresh )
 80065aa:	42b0      	cmp	r0, r6
 80065ac:	ddf0      	ble.n	8006590 <SX1276IsChannelFree+0x44>
            status = false;
 80065ae:	2400      	movs	r4, #0
 80065b0:	e7f4      	b.n	800659c <SX1276IsChannelFree+0x50>

080065b2 <SX1276Random>:
{
 80065b2:	b570      	push	{r4, r5, r6, lr}
 80065b4:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 80065b6:	2001      	movs	r0, #1
 80065b8:	f7ff fd1a 	bl	8005ff0 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80065bc:	21ff      	movs	r1, #255	; 0xff
 80065be:	2011      	movs	r0, #17
 80065c0:	f7ff fa4f 	bl	8005a62 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 80065c4:	2005      	movs	r0, #5
 80065c6:	f7ff fb85 	bl	8005cd4 <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 80065ca:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 80065cc:	2601      	movs	r6, #1
 80065ce:	0030      	movs	r0, r6
 80065d0:	f7fc f9cc 	bl	800296c <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80065d4:	202c      	movs	r0, #44	; 0x2c
 80065d6:	f7ff fa8f 	bl	8005af8 <SX1276Read>
 80065da:	4030      	ands	r0, r6
 80065dc:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 80065de:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80065e0:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 80065e2:	2c20      	cmp	r4, #32
 80065e4:	d1f3      	bne.n	80065ce <SX1276Random+0x1c>
    SX1276SetSleep( );
 80065e6:	f7ff ff97 	bl	8006518 <SX1276SetSleep>
}
 80065ea:	0028      	movs	r0, r5
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080065f0 <SX1276SetTxConfig>:
{
 80065f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f2:	b08d      	sub	sp, #52	; 0x34
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	ab12      	add	r3, sp, #72	; 0x48
 80065f8:	cb80      	ldmia	r3!, {r7}
 80065fa:	9206      	str	r2, [sp, #24]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	0006      	movs	r6, r0
 8006600:	9307      	str	r3, [sp, #28]
 8006602:	ab14      	add	r3, sp, #80	; 0x50
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	000c      	movs	r4, r1
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	ab15      	add	r3, sp, #84	; 0x54
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	9302      	str	r3, [sp, #8]
 8006610:	ab16      	add	r3, sp, #88	; 0x58
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	9303      	str	r3, [sp, #12]
 8006616:	ab17      	add	r3, sp, #92	; 0x5c
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	9308      	str	r3, [sp, #32]
 800661c:	ab18      	add	r3, sp, #96	; 0x60
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	930a      	str	r3, [sp, #40]	; 0x28
 8006622:	ab19      	add	r3, sp, #100	; 0x64
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8006628:	4bb6      	ldr	r3, [pc, #728]	; (8006904 <SX1276SetTxConfig+0x314>)
 800662a:	791d      	ldrb	r5, [r3, #4]
 800662c:	2d01      	cmp	r5, #1
 800662e:	d106      	bne.n	800663e <SX1276SetTxConfig+0x4e>
 8006630:	2800      	cmp	r0, #0
 8006632:	d104      	bne.n	800663e <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 8006634:	f7ff ff70 	bl	8006518 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8006638:	0028      	movs	r0, r5
 800663a:	f7fc f997 	bl	800296c <HAL_Delay>
    SX1276SetModem( modem );
 800663e:	0030      	movs	r0, r6
 8006640:	f7ff fcd6 	bl	8005ff0 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 8006644:	2009      	movs	r0, #9
 8006646:	f7ff fa57 	bl	8005af8 <SX1276Read>
 800664a:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 800664c:	204d      	movs	r0, #77	; 0x4d
 800664e:	f7ff fa53 	bl	8005af8 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8006652:	4bac      	ldr	r3, [pc, #688]	; (8006904 <SX1276SetTxConfig+0x314>)
    paDac = SX1276Read( REG_PADAC );
 8006654:	0005      	movs	r5, r0
 8006656:	9005      	str	r0, [sp, #20]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8006658:	6898      	ldr	r0, [r3, #8]
 800665a:	f7fc fd79 	bl	8003150 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800665e:	2800      	cmp	r0, #0
 8006660:	d029      	beq.n	80066b6 <SX1276SetTxConfig+0xc6>
 8006662:	3802      	subs	r0, #2
 8006664:	b2c3      	uxtb	r3, r0
 8006666:	2080      	movs	r0, #128	; 0x80
 8006668:	2b01      	cmp	r3, #1
 800666a:	d900      	bls.n	800666e <SX1276SetTxConfig+0x7e>
    uint8_t board_config = 0;
 800666c:	2000      	movs	r0, #0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800666e:	237f      	movs	r3, #127	; 0x7f
 8006670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006672:	401a      	ands	r2, r3
 8006674:	4310      	orrs	r0, r2
 8006676:	b241      	sxtb	r1, r0
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8006678:	0603      	lsls	r3, r0, #24
 800667a:	d52a      	bpl.n	80066d2 <SX1276SetTxConfig+0xe2>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800667c:	230f      	movs	r3, #15
 800667e:	2507      	movs	r5, #7
 8006680:	4399      	bics	r1, r3
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8006682:	9b05      	ldr	r3, [sp, #20]
        if( power > 17 )
 8006684:	2c11      	cmp	r4, #17
 8006686:	dd1a      	ble.n	80066be <SX1276SetTxConfig+0xce>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8006688:	431d      	orrs	r5, r3
 800668a:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800668c:	1c23      	adds	r3, r4, #0
 800668e:	2c14      	cmp	r4, #20
 8006690:	dd00      	ble.n	8006694 <SX1276SetTxConfig+0xa4>
 8006692:	2314      	movs	r3, #20
 8006694:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8006696:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 8006698:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800669a:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800669c:	f7ff f9e1 	bl	8005a62 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80066a0:	0029      	movs	r1, r5
 80066a2:	204d      	movs	r0, #77	; 0x4d
 80066a4:	f7ff f9dd 	bl	8005a62 <SX1276Write>
    switch( modem )
 80066a8:	2e00      	cmp	r6, #0
 80066aa:	d021      	beq.n	80066f0 <SX1276SetTxConfig+0x100>
 80066ac:	2e01      	cmp	r6, #1
 80066ae:	d100      	bne.n	80066b2 <SX1276SetTxConfig+0xc2>
 80066b0:	e07f      	b.n	80067b2 <SX1276SetTxConfig+0x1c2>
}
 80066b2:	b00d      	add	sp, #52	; 0x34
 80066b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 80066b6:	2c0e      	cmp	r4, #14
 80066b8:	ddd9      	ble.n	800666e <SX1276SetTxConfig+0x7e>
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 80066ba:	2080      	movs	r0, #128	; 0x80
 80066bc:	e7d7      	b.n	800666e <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80066be:	43ab      	bics	r3, r5
 80066c0:	2504      	movs	r5, #4
 80066c2:	432b      	orrs	r3, r5
 80066c4:	b2dd      	uxtb	r5, r3
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80066c6:	1c23      	adds	r3, r4, #0
 80066c8:	2c02      	cmp	r4, #2
 80066ca:	da00      	bge.n	80066ce <SX1276SetTxConfig+0xde>
 80066cc:	2302      	movs	r3, #2
 80066ce:	3b02      	subs	r3, #2
 80066d0:	e7e1      	b.n	8006696 <SX1276SetTxConfig+0xa6>
        if( power > 0 )
 80066d2:	2c00      	cmp	r4, #0
 80066d4:	dd05      	ble.n	80066e2 <SX1276SetTxConfig+0xf2>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80066d6:	1c23      	adds	r3, r4, #0
 80066d8:	2c0f      	cmp	r4, #15
 80066da:	dd00      	ble.n	80066de <SX1276SetTxConfig+0xee>
 80066dc:	230f      	movs	r3, #15
 80066de:	2170      	movs	r1, #112	; 0x70
 80066e0:	e7d9      	b.n	8006696 <SX1276SetTxConfig+0xa6>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 80066e2:	1c21      	adds	r1, r4, #0
 80066e4:	1d23      	adds	r3, r4, #4
 80066e6:	da01      	bge.n	80066ec <SX1276SetTxConfig+0xfc>
 80066e8:	4b87      	ldr	r3, [pc, #540]	; (8006908 <SX1276SetTxConfig+0x318>)
 80066ea:	7819      	ldrb	r1, [r3, #0]
 80066ec:	3104      	adds	r1, #4
 80066ee:	e7d3      	b.n	8006698 <SX1276SetTxConfig+0xa8>
            SX1276.Settings.Fsk.Power = power;
 80066f0:	4b84      	ldr	r3, [pc, #528]	; (8006904 <SX1276SetTxConfig+0x314>)
            SX1276.Settings.Fsk.Fdev = fdev;
 80066f2:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80066f4:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.Fsk.Fdev = fdev;
 80066f6:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80066f8:	9a04      	ldr	r2, [sp, #16]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80066fa:	9806      	ldr	r0, [sp, #24]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80066fc:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80066fe:	9a01      	ldr	r2, [sp, #4]
            SX1276.Settings.Fsk.Power = power;
 8006700:	731e      	strb	r6, [r3, #12]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006702:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006704:	1cda      	adds	r2, r3, #3
 8006706:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006708:	9903      	ldr	r1, [sp, #12]
 800670a:	1d5a      	adds	r2, r3, #5
 800670c:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800670e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006710:	1d9a      	adds	r2, r3, #6
 8006712:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006714:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 8006716:	61df      	str	r7, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006718:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800671a:	f7fb f92d 	bl	8001978 <__aeabi_ui2d>
 800671e:	2200      	movs	r2, #0
 8006720:	4b7a      	ldr	r3, [pc, #488]	; (800690c <SX1276SetTxConfig+0x31c>)
 8006722:	f7f9 ffcf 	bl	80006c4 <__aeabi_ddiv>
 8006726:	f7f9 fee3 	bl	80004f0 <__aeabi_d2uiz>
 800672a:	b284      	uxth	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800672c:	0a21      	lsrs	r1, r4, #8
 800672e:	2004      	movs	r0, #4
 8006730:	f7ff f997 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8006734:	b2e1      	uxtb	r1, r4
 8006736:	2005      	movs	r0, #5
 8006738:	f7ff f993 	bl	8005a62 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800673c:	0038      	movs	r0, r7
 800673e:	f7fb f91b 	bl	8001978 <__aeabi_ui2d>
 8006742:	0002      	movs	r2, r0
 8006744:	000b      	movs	r3, r1
 8006746:	2000      	movs	r0, #0
 8006748:	4971      	ldr	r1, [pc, #452]	; (8006910 <SX1276SetTxConfig+0x320>)
 800674a:	f7f9 ffbb 	bl	80006c4 <__aeabi_ddiv>
 800674e:	f7f9 fecf 	bl	80004f0 <__aeabi_d2uiz>
 8006752:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8006754:	0a21      	lsrs	r1, r4, #8
 8006756:	2002      	movs	r0, #2
 8006758:	f7ff f983 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800675c:	2003      	movs	r0, #3
 800675e:	b2e1      	uxtb	r1, r4
 8006760:	f7ff f97f 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	2025      	movs	r0, #37	; 0x25
 8006768:	0a19      	lsrs	r1, r3, #8
 800676a:	f7ff f97a 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800676e:	466b      	mov	r3, sp
 8006770:	2026      	movs	r0, #38	; 0x26
 8006772:	7919      	ldrb	r1, [r3, #4]
 8006774:	f7ff f975 	bl	8005a62 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006778:	2030      	movs	r0, #48	; 0x30
 800677a:	f7ff f9bd 	bl	8005af8 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800677e:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006780:	9b02      	ldr	r3, [sp, #8]
                           RF_PACKETCONFIG1_CRC_MASK &
 8006782:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006784:	0031      	movs	r1, r6
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <SX1276SetTxConfig+0x19e>
 800678a:	2180      	movs	r1, #128	; 0x80
 800678c:	4249      	negs	r1, r1
                           ( crcOn << 4 ) );
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006792:	4318      	orrs	r0, r3
 8006794:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8006796:	b2c9      	uxtb	r1, r1
 8006798:	2030      	movs	r0, #48	; 0x30
 800679a:	f7ff f962 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800679e:	2031      	movs	r0, #49	; 0x31
 80067a0:	f7ff f9aa 	bl	8005af8 <SX1276Read>
 80067a4:	2140      	movs	r1, #64	; 0x40
 80067a6:	4301      	orrs	r1, r0
 80067a8:	2031      	movs	r0, #49	; 0x31
 80067aa:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80067ac:	f7ff f959 	bl	8005a62 <SX1276Write>
}
 80067b0:	e77f      	b.n	80066b2 <SX1276SetTxConfig+0xc2>
            SX1276.Settings.LoRa.Power = power;
 80067b2:	4b54      	ldr	r3, [pc, #336]	; (8006904 <SX1276SetTxConfig+0x314>)
 80067b4:	2100      	movs	r1, #0
 80067b6:	001a      	movs	r2, r3
 80067b8:	3240      	adds	r2, #64	; 0x40
 80067ba:	7011      	strb	r1, [r2, #0]
            if( bandwidth > 2 )
 80067bc:	9a04      	ldr	r2, [sp, #16]
 80067be:	2a02      	cmp	r2, #2
 80067c0:	d900      	bls.n	80067c4 <SX1276SetTxConfig+0x1d4>
                while( 1 );
 80067c2:	e7fe      	b.n	80067c2 <SX1276SetTxConfig+0x1d2>
            SX1276.Settings.LoRa.Coderate = coderate;
 80067c4:	001a      	movs	r2, r3
 80067c6:	9907      	ldr	r1, [sp, #28]
 80067c8:	324d      	adds	r2, #77	; 0x4d
 80067ca:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80067cc:	001a      	movs	r2, r3
 80067ce:	9901      	ldr	r1, [sp, #4]
 80067d0:	324e      	adds	r2, #78	; 0x4e
 80067d2:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80067d4:	001a      	movs	r2, r3
 80067d6:	9902      	ldr	r1, [sp, #8]
 80067d8:	3250      	adds	r2, #80	; 0x50
 80067da:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80067dc:	001a      	movs	r2, r3
 80067de:	9908      	ldr	r1, [sp, #32]
 80067e0:	3253      	adds	r2, #83	; 0x53
 80067e2:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80067e4:	001a      	movs	r2, r3
 80067e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067e8:	3254      	adds	r2, #84	; 0x54
 80067ea:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80067ec:	001a      	movs	r2, r3
 80067ee:	9903      	ldr	r1, [sp, #12]
 80067f0:	3252      	adds	r2, #82	; 0x52
 80067f2:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80067f4:	001a      	movs	r2, r3
 80067f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067f8:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 80067fa:	9d04      	ldr	r5, [sp, #16]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80067fc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80067fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 8006800:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006802:	2406      	movs	r4, #6
 8006804:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8006806:	649f      	str	r7, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8006808:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 800680a:	2f06      	cmp	r7, #6
 800680c:	d303      	bcc.n	8006816 <SX1276SetTxConfig+0x226>
 800680e:	003c      	movs	r4, r7
 8006810:	2f0c      	cmp	r7, #12
 8006812:	d900      	bls.n	8006816 <SX1276SetTxConfig+0x226>
 8006814:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006816:	2d07      	cmp	r5, #7
 8006818:	d160      	bne.n	80068dc <SX1276SetTxConfig+0x2ec>
 800681a:	0022      	movs	r2, r4
 800681c:	2300      	movs	r3, #0
 800681e:	2101      	movs	r1, #1
 8006820:	3a0b      	subs	r2, #11
 8006822:	4291      	cmp	r1, r2
 8006824:	415b      	adcs	r3, r3
 8006826:	b2db      	uxtb	r3, r3
 8006828:	4e36      	ldr	r6, [pc, #216]	; (8006904 <SX1276SetTxConfig+0x314>)
 800682a:	0032      	movs	r2, r6
 800682c:	324c      	adds	r2, #76	; 0x4c
 800682e:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006830:	9b08      	ldr	r3, [sp, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00f      	beq.n	8006856 <SX1276SetTxConfig+0x266>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006836:	2044      	movs	r0, #68	; 0x44
 8006838:	f7ff f95e 	bl	8005af8 <SX1276Read>
 800683c:	2180      	movs	r1, #128	; 0x80
 800683e:	4249      	negs	r1, r1
 8006840:	4301      	orrs	r1, r0
 8006842:	b2c9      	uxtb	r1, r1
 8006844:	2044      	movs	r0, #68	; 0x44
 8006846:	f7ff f90c 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800684a:	0033      	movs	r3, r6
 800684c:	3354      	adds	r3, #84	; 0x54
 800684e:	2024      	movs	r0, #36	; 0x24
 8006850:	7819      	ldrb	r1, [r3, #0]
 8006852:	f7ff f906 	bl	8005a62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006856:	201d      	movs	r0, #29
 8006858:	f7ff f94e 	bl	8005af8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800685c:	9b07      	ldr	r3, [sp, #28]
 800685e:	012d      	lsls	r5, r5, #4
 8006860:	0059      	lsls	r1, r3, #1
 8006862:	9b02      	ldr	r3, [sp, #8]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006864:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006866:	430b      	orrs	r3, r1
 8006868:	0019      	movs	r1, r3
 800686a:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800686c:	b2c9      	uxtb	r1, r1
 800686e:	f7ff f8f8 	bl	8005a62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006872:	201e      	movs	r0, #30
 8006874:	f7ff f940 	bl	8005af8 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8006878:	210b      	movs	r1, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	0124      	lsls	r4, r4, #4
 800687e:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006880:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8006882:	4001      	ands	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006884:	4321      	orrs	r1, r4
 8006886:	b2c9      	uxtb	r1, r1
 8006888:	201e      	movs	r0, #30
 800688a:	f7ff f8ea 	bl	8005a62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800688e:	2026      	movs	r0, #38	; 0x26
 8006890:	f7ff f932 	bl	8005af8 <SX1276Read>
 8006894:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006896:	364c      	adds	r6, #76	; 0x4c
 8006898:	7831      	ldrb	r1, [r6, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800689a:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800689c:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800689e:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 80068a0:	b2c9      	uxtb	r1, r1
 80068a2:	2026      	movs	r0, #38	; 0x26
 80068a4:	f7ff f8dd 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80068a8:	9b01      	ldr	r3, [sp, #4]
 80068aa:	2020      	movs	r0, #32
 80068ac:	0a19      	lsrs	r1, r3, #8
 80068ae:	f7ff f8d8 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80068b2:	466b      	mov	r3, sp
 80068b4:	2021      	movs	r0, #33	; 0x21
 80068b6:	7919      	ldrb	r1, [r3, #4]
 80068b8:	f7ff f8d3 	bl	8005a62 <SX1276Write>
            if( datarate == 6 )
 80068bc:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80068be:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80068c0:	2f06      	cmp	r7, #6
 80068c2:	d813      	bhi.n	80068ec <SX1276SetTxConfig+0x2fc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80068c4:	f7ff f918 	bl	8005af8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80068c8:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80068ca:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80068cc:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80068ce:	b2c9      	uxtb	r1, r1
 80068d0:	2031      	movs	r0, #49	; 0x31
 80068d2:	f7ff f8c6 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80068d6:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80068d8:	2037      	movs	r0, #55	; 0x37
 80068da:	e767      	b.n	80067ac <SX1276SetTxConfig+0x1bc>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80068dc:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80068de:	2d08      	cmp	r5, #8
 80068e0:	d1a2      	bne.n	8006828 <SX1276SetTxConfig+0x238>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80068e2:	330b      	adds	r3, #11
 80068e4:	42bb      	cmp	r3, r7
 80068e6:	419b      	sbcs	r3, r3
 80068e8:	425b      	negs	r3, r3
 80068ea:	e79d      	b.n	8006828 <SX1276SetTxConfig+0x238>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80068ec:	f7ff f904 	bl	8005af8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80068f0:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80068f2:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80068f4:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80068f6:	b2c9      	uxtb	r1, r1
 80068f8:	2031      	movs	r0, #49	; 0x31
 80068fa:	f7ff f8b2 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80068fe:	210a      	movs	r1, #10
 8006900:	e7ea      	b.n	80068d8 <SX1276SetTxConfig+0x2e8>
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	20000298 	.word	0x20000298
 8006908:	08007d57 	.word	0x08007d57
 800690c:	404e8480 	.word	0x404e8480
 8006910:	417e8480 	.word	0x417e8480

08006914 <SX1276SetTxContinuousWave>:
{
 8006914:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 8006916:	24fa      	movs	r4, #250	; 0xfa
{
 8006918:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800691a:	00a4      	lsls	r4, r4, #2
 800691c:	4354      	muls	r4, r2
{
 800691e:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8006920:	f7ff f8a8 	bl	8005a74 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8006924:	2305      	movs	r3, #5
 8006926:	9302      	str	r3, [sp, #8]
 8006928:	2396      	movs	r3, #150	; 0x96
 800692a:	2000      	movs	r0, #0
 800692c:	015b      	lsls	r3, r3, #5
 800692e:	0002      	movs	r2, r0
 8006930:	0029      	movs	r1, r5
 8006932:	9007      	str	r0, [sp, #28]
 8006934:	9006      	str	r0, [sp, #24]
 8006936:	9005      	str	r0, [sp, #20]
 8006938:	9004      	str	r0, [sp, #16]
 800693a:	9003      	str	r0, [sp, #12]
 800693c:	9001      	str	r0, [sp, #4]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	9408      	str	r4, [sp, #32]
 8006942:	0003      	movs	r3, r0
 8006944:	f7ff fe54 	bl	80065f0 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8006948:	2031      	movs	r0, #49	; 0x31
 800694a:	f7ff f8d5 	bl	8005af8 <SX1276Read>
 800694e:	2540      	movs	r5, #64	; 0x40
 8006950:	43a8      	bics	r0, r5
 8006952:	b2c1      	uxtb	r1, r0
 8006954:	2031      	movs	r0, #49	; 0x31
 8006956:	f7ff f884 	bl	8005a62 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800695a:	0028      	movs	r0, r5
 800695c:	21f0      	movs	r1, #240	; 0xf0
 800695e:	f7ff f880 	bl	8005a62 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8006962:	21a0      	movs	r1, #160	; 0xa0
 8006964:	2041      	movs	r0, #65	; 0x41
 8006966:	f7ff f87c 	bl	8005a62 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800696a:	4d08      	ldr	r5, [pc, #32]	; (800698c <SX1276SetTxContinuousWave+0x78>)
 800696c:	0021      	movs	r1, r4
 800696e:	351c      	adds	r5, #28
 8006970:	0028      	movs	r0, r5
 8006972:	f000 fe25 	bl	80075c0 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 8006976:	2202      	movs	r2, #2
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800697a:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800697c:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800697e:	f000 fddd 	bl	800753c <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8006982:	2003      	movs	r0, #3
 8006984:	f7ff f9a6 	bl	8005cd4 <SX1276SetOpMode.part.0>
}
 8006988:	b00b      	add	sp, #44	; 0x2c
 800698a:	bd30      	pop	{r4, r5, pc}
 800698c:	20000318 	.word	0x20000318
 8006990:	20000298 	.word	0x20000298

08006994 <SX1276OnDio0Irq>:
{
 8006994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 8006996:	466b      	mov	r3, sp
 8006998:	1dde      	adds	r6, r3, #7
 800699a:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 800699c:	4c8a      	ldr	r4, [pc, #552]	; (8006bc8 <SX1276OnDio0Irq+0x234>)
    volatile uint8_t irqFlags = 0;
 800699e:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 80069a0:	7923      	ldrb	r3, [r4, #4]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d003      	beq.n	80069ae <SX1276OnDio0Irq+0x1a>
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d100      	bne.n	80069ac <SX1276OnDio0Irq+0x18>
 80069aa:	e0f8      	b.n	8006b9e <SX1276OnDio0Irq+0x20a>
}
 80069ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 80069ae:	7963      	ldrb	r3, [r4, #5]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d023      	beq.n	80069fc <SX1276OnDio0Irq+0x68>
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d1f9      	bne.n	80069ac <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80069b8:	2140      	movs	r1, #64	; 0x40
 80069ba:	2012      	movs	r0, #18
 80069bc:	f7ff f851 	bl	8005a62 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80069c0:	2012      	movs	r0, #18
 80069c2:	f7ff f899 	bl	8005af8 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80069c6:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80069c8:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80069ca:	7833      	ldrb	r3, [r6, #0]
 80069cc:	4d7f      	ldr	r5, [pc, #508]	; (8006bcc <SX1276OnDio0Irq+0x238>)
 80069ce:	420b      	tst	r3, r1
 80069d0:	d100      	bne.n	80069d4 <SX1276OnDio0Irq+0x40>
 80069d2:	e08a      	b.n	8006aea <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80069d4:	2012      	movs	r0, #18
 80069d6:	f7ff f844 	bl	8005a62 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80069da:	0023      	movs	r3, r4
 80069dc:	3356      	adds	r3, #86	; 0x56
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d100      	bne.n	80069e6 <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 80069e4:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 80069e6:	1d28      	adds	r0, r5, #4
 80069e8:	f000 fd54 	bl	8007494 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0dc      	beq.n	80069ac <SX1276OnDio0Irq+0x18>
 80069f2:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0d9      	beq.n	80069ac <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 80069f8:	4798      	blx	r3
}
 80069fa:	e7d7      	b.n	80069ac <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80069fc:	1d63      	adds	r3, r4, #5
 80069fe:	7fdb      	ldrb	r3, [r3, #31]
 8006a00:	4d72      	ldr	r5, [pc, #456]	; (8006bcc <SX1276OnDio0Irq+0x238>)
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d030      	beq.n	8006a68 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8006a06:	203f      	movs	r0, #63	; 0x3f
 8006a08:	f7ff f876 	bl	8005af8 <SX1276Read>
 8006a0c:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8006a0e:	7833      	ldrb	r3, [r6, #0]
 8006a10:	079b      	lsls	r3, r3, #30
 8006a12:	d429      	bmi.n	8006a68 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006a14:	210b      	movs	r1, #11
 8006a16:	203e      	movs	r0, #62	; 0x3e
 8006a18:	f7ff f823 	bl	8005a62 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006a1c:	2110      	movs	r1, #16
 8006a1e:	203f      	movs	r0, #63	; 0x3f
 8006a20:	f7ff f81f 	bl	8005a62 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8006a24:	1d28      	adds	r0, r5, #4
 8006a26:	f000 fd35 	bl	8007494 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8006a2a:	1de3      	adds	r3, r4, #7
 8006a2c:	7fde      	ldrb	r6, [r3, #31]
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	d110      	bne.n	8006a54 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 8006a32:	0020      	movs	r0, r4
 8006a34:	3068      	adds	r0, #104	; 0x68
 8006a36:	f000 fd2d 	bl	8007494 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 8006a3a:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <SX1276OnDio0Irq+0xb6>
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d000      	beq.n	8006a4a <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8006a48:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006a4e:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8006a50:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8006a52:	e7ab      	b.n	80069ac <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006a54:	200d      	movs	r0, #13
 8006a56:	f7ff f84f 	bl	8005af8 <SX1276Read>
 8006a5a:	2140      	movs	r1, #64	; 0x40
 8006a5c:	4301      	orrs	r1, r0
 8006a5e:	b2c9      	uxtb	r1, r1
 8006a60:	200d      	movs	r0, #13
 8006a62:	f7fe fffe 	bl	8005a62 <SX1276Write>
 8006a66:	e7e9      	b.n	8006a3c <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006a68:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8006a6a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8006a6c:	0013      	movs	r3, r2
 8006a6e:	4e58      	ldr	r6, [pc, #352]	; (8006bd0 <SX1276OnDio0Irq+0x23c>)
 8006a70:	430b      	orrs	r3, r1
 8006a72:	d10a      	bne.n	8006a8a <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006a74:	1ce3      	adds	r3, r4, #3
 8006a76:	7fd8      	ldrb	r0, [r3, #31]
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d127      	bne.n	8006acc <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 8006a7c:	0021      	movs	r1, r4
 8006a7e:	2201      	movs	r2, #1
 8006a80:	313a      	adds	r1, #58	; 0x3a
 8006a82:	f7ff f821 	bl	8005ac8 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006a86:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8006a88:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006a8a:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006a90:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 8006a92:	f7ff f819 	bl	8005ac8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006a96:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8006a98:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006a9a:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8006a9c:	f000 fcfa 	bl	8007494 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8006aa0:	1de3      	adds	r3, r4, #7
 8006aa2:	7fdb      	ldrb	r3, [r3, #31]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d116      	bne.n	8006ad6 <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 8006aa8:	0020      	movs	r0, r4
 8006aaa:	3068      	adds	r0, #104	; 0x68
                    SX1276.Settings.State = RF_IDLE;
 8006aac:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8006aae:	f000 fcf1 	bl	8007494 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006ab2:	682b      	ldr	r3, [r5, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0c8      	beq.n	8006a4a <SX1276OnDio0Irq+0xb6>
 8006ab8:	689d      	ldr	r5, [r3, #8]
 8006aba:	2d00      	cmp	r5, #0
 8006abc:	d0c5      	beq.n	8006a4a <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8006abe:	2232      	movs	r2, #50	; 0x32
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	0030      	movs	r0, r6
 8006ac4:	56a2      	ldrsb	r2, [r4, r2]
 8006ac6:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8006ac8:	47a8      	blx	r5
 8006aca:	e7be      	b.n	8006a4a <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006acc:	2032      	movs	r0, #50	; 0x32
 8006ace:	f7ff f813 	bl	8005af8 <SX1276Read>
 8006ad2:	8760      	strh	r0, [r4, #58]	; 0x3a
 8006ad4:	e7d7      	b.n	8006a86 <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006ad6:	200d      	movs	r0, #13
 8006ad8:	f7ff f80e 	bl	8005af8 <SX1276Read>
 8006adc:	2140      	movs	r1, #64	; 0x40
 8006ade:	4301      	orrs	r1, r0
 8006ae0:	b2c9      	uxtb	r1, r1
 8006ae2:	200d      	movs	r0, #13
 8006ae4:	f7fe ffbd 	bl	8005a62 <SX1276Write>
 8006ae8:	e7e3      	b.n	8006ab2 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8006aea:	2019      	movs	r0, #25
 8006aec:	f7ff f804 	bl	8005af8 <SX1276Read>
 8006af0:	0027      	movs	r7, r4
 8006af2:	b240      	sxtb	r0, r0
 8006af4:	3002      	adds	r0, #2
 8006af6:	3760      	adds	r7, #96	; 0x60
 8006af8:	1080      	asrs	r0, r0, #2
 8006afa:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8006afc:	201a      	movs	r0, #26
 8006afe:	f7fe fffb 	bl	8005af8 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006b02:	2300      	movs	r3, #0
 8006b04:	0022      	movs	r2, r4
 8006b06:	56fb      	ldrsb	r3, [r7, r3]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006b08:	b201      	sxth	r1, r0
 8006b0a:	1109      	asrs	r1, r1, #4
 8006b0c:	4f31      	ldr	r7, [pc, #196]	; (8006bd4 <SX1276OnDio0Irq+0x240>)
 8006b0e:	b289      	uxth	r1, r1
 8006b10:	b286      	uxth	r6, r0
 8006b12:	3262      	adds	r2, #98	; 0x62
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	da3a      	bge.n	8006b8e <SX1276OnDio0Irq+0x1fa>
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8006b18:	b298      	uxth	r0, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006b1a:	68a3      	ldr	r3, [r4, #8]
 8006b1c:	42bb      	cmp	r3, r7
 8006b1e:	d934      	bls.n	8006b8a <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006b20:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006b22:	1830      	adds	r0, r6, r0
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006b24:	1808      	adds	r0, r1, r0
 8006b26:	8010      	strh	r0, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006b28:	0026      	movs	r6, r4
 8006b2a:	2013      	movs	r0, #19
 8006b2c:	f7fe ffe4 	bl	8005af8 <SX1276Read>
 8006b30:	3664      	adds	r6, #100	; 0x64
 8006b32:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8006b34:	2010      	movs	r0, #16
 8006b36:	f7fe ffdf 	bl	8005af8 <SX1276Read>
 8006b3a:	0001      	movs	r1, r0
 8006b3c:	200d      	movs	r0, #13
 8006b3e:	f7fe ff90 	bl	8005a62 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 8006b42:	7832      	ldrb	r2, [r6, #0]
 8006b44:	4e22      	ldr	r6, [pc, #136]	; (8006bd0 <SX1276OnDio0Irq+0x23c>)
 8006b46:	2000      	movs	r0, #0
 8006b48:	0031      	movs	r1, r6
 8006b4a:	f7fe ffbd 	bl	8005ac8 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8006b4e:	0023      	movs	r3, r4
 8006b50:	3356      	adds	r3, #86	; 0x56
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d100      	bne.n	8006b5a <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 8006b58:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8006b5a:	1d28      	adds	r0, r5, #4
 8006b5c:	f000 fc9a 	bl	8007494 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d100      	bne.n	8006b68 <SX1276OnDio0Irq+0x1d4>
 8006b66:	e721      	b.n	80069ac <SX1276OnDio0Irq+0x18>
 8006b68:	689d      	ldr	r5, [r3, #8]
 8006b6a:	2d00      	cmp	r5, #0
 8006b6c:	d100      	bne.n	8006b70 <SX1276OnDio0Irq+0x1dc>
 8006b6e:	e71d      	b.n	80069ac <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8006b70:	0023      	movs	r3, r4
 8006b72:	0022      	movs	r2, r4
 8006b74:	3360      	adds	r3, #96	; 0x60
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	3464      	adds	r4, #100	; 0x64
 8006b7a:	3262      	adds	r2, #98	; 0x62
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	5e52      	ldrsh	r2, [r2, r1]
 8006b80:	0030      	movs	r0, r6
 8006b82:	7821      	ldrb	r1, [r4, #0]
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	47a8      	blx	r5
 8006b88:	e710      	b.n	80069ac <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006b8a:	38a4      	subs	r0, #164	; 0xa4
 8006b8c:	e7c9      	b.n	8006b22 <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006b8e:	68a3      	ldr	r3, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006b90:	0030      	movs	r0, r6
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006b92:	42bb      	cmp	r3, r7
 8006b94:	d901      	bls.n	8006b9a <SX1276OnDio0Irq+0x206>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006b96:	389d      	subs	r0, #157	; 0x9d
 8006b98:	e7c4      	b.n	8006b24 <SX1276OnDio0Irq+0x190>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006b9a:	38a4      	subs	r0, #164	; 0xa4
 8006b9c:	e7c2      	b.n	8006b24 <SX1276OnDio0Irq+0x190>
            TimerStop( &TxTimeoutTimer );
 8006b9e:	4d0b      	ldr	r5, [pc, #44]	; (8006bcc <SX1276OnDio0Irq+0x238>)
 8006ba0:	0028      	movs	r0, r5
 8006ba2:	301c      	adds	r0, #28
 8006ba4:	f000 fc76 	bl	8007494 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 8006ba8:	7963      	ldrb	r3, [r4, #5]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d103      	bne.n	8006bb6 <SX1276OnDio0Irq+0x222>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8006bae:	2108      	movs	r1, #8
 8006bb0:	2012      	movs	r0, #18
 8006bb2:	f7fe ff56 	bl	8005a62 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006bba:	682b      	ldr	r3, [r5, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d100      	bne.n	8006bc2 <SX1276OnDio0Irq+0x22e>
 8006bc0:	e6f4      	b.n	80069ac <SX1276OnDio0Irq+0x18>
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	e716      	b.n	80069f4 <SX1276OnDio0Irq+0x60>
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	20000298 	.word	0x20000298
 8006bcc:	20000318 	.word	0x20000318
 8006bd0:	2000034c 	.word	0x2000034c
 8006bd4:	1f4add40 	.word	0x1f4add40

08006bd8 <SX1276Send>:
{
 8006bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bda:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 8006bdc:	4c61      	ldr	r4, [pc, #388]	; (8006d64 <SX1276Send+0x18c>)
{
 8006bde:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 8006be0:	7965      	ldrb	r5, [r4, #5]
{
 8006be2:	1dde      	adds	r6, r3, #7
 8006be4:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 8006be6:	2d00      	cmp	r5, #0
 8006be8:	d01c      	beq.n	8006c24 <SX1276Send+0x4c>
 8006bea:	2d01      	cmp	r5, #1
 8006bec:	d046      	beq.n	8006c7c <SX1276Send+0xa4>
 8006bee:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 8006bf0:	4d5d      	ldr	r5, [pc, #372]	; (8006d68 <SX1276Send+0x190>)
 8006bf2:	1d28      	adds	r0, r5, #4
 8006bf4:	f000 fc4e 	bl	8007494 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006bf8:	0028      	movs	r0, r5
 8006bfa:	0031      	movs	r1, r6
 8006bfc:	301c      	adds	r0, #28
 8006bfe:	f000 fcdf 	bl	80075c0 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 8006c02:	7963      	ldrb	r3, [r4, #5]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d100      	bne.n	8006c0a <SX1276Send+0x32>
 8006c08:	e077      	b.n	8006cfa <SX1276Send+0x122>
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d100      	bne.n	8006c10 <SX1276Send+0x38>
 8006c0e:	e08d      	b.n	8006d2c <SX1276Send+0x154>
    TimerStart( &TxTimeoutTimer );
 8006c10:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8006c12:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8006c14:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 8006c16:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8006c18:	f000 fc90 	bl	800753c <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 8006c1c:	2003      	movs	r0, #3
 8006c1e:	f7ff f859 	bl	8005cd4 <SX1276SetOpMode.part.0>
}
 8006c22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 8006c24:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006c26:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8006c28:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8006c2a:	1ce3      	adds	r3, r4, #3
 8006c2c:	7fd8      	ldrb	r0, [r3, #31]
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d117      	bne.n	8006c62 <SX1276Send+0x8a>
    SX1276WriteBuffer( 0, buffer, size );
 8006c32:	2201      	movs	r2, #1
 8006c34:	0031      	movs	r1, r6
 8006c36:	f7fe fefc 	bl	8005a32 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8006c3a:	7832      	ldrb	r2, [r6, #0]
 8006c3c:	1e53      	subs	r3, r2, #1
 8006c3e:	2b3f      	cmp	r3, #63	; 0x3f
 8006c40:	d813      	bhi.n	8006c6a <SX1276Send+0x92>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006c42:	0023      	movs	r3, r4
 8006c44:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8006c46:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8006c48:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8006c4a:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 8006c4c:	782a      	ldrb	r2, [r5, #0]
 8006c4e:	0039      	movs	r1, r7
 8006c50:	2000      	movs	r0, #0
 8006c52:	f7fe feee 	bl	8005a32 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006c56:	782b      	ldrb	r3, [r5, #0]
 8006c58:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8006c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 8006c60:	e7c6      	b.n	8006bf0 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006c62:	2032      	movs	r0, #50	; 0x32
 8006c64:	f7fe fefd 	bl	8005a62 <SX1276Write>
 8006c68:	e7e7      	b.n	8006c3a <SX1276Send+0x62>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 8006c6a:	b292      	uxth	r2, r2
 8006c6c:	0039      	movs	r1, r7
 8006c6e:	483f      	ldr	r0, [pc, #252]	; (8006d6c <SX1276Send+0x194>)
 8006c70:	f000 fac6 	bl	8007200 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8006c74:	0023      	movs	r3, r4
 8006c76:	2220      	movs	r2, #32
 8006c78:	333f      	adds	r3, #63	; 0x3f
 8006c7a:	e7e4      	b.n	8006c46 <SX1276Send+0x6e>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006c7c:	0023      	movs	r3, r4
 8006c7e:	3355      	adds	r3, #85	; 0x55
 8006c80:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006c82:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d02c      	beq.n	8006ce2 <SX1276Send+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006c88:	f7fe ff36 	bl	8005af8 <SX1276Read>
 8006c8c:	2341      	movs	r3, #65	; 0x41
 8006c8e:	4398      	bics	r0, r3
 8006c90:	b2c1      	uxtb	r1, r0
 8006c92:	2033      	movs	r0, #51	; 0x33
 8006c94:	f7fe fee5 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006c98:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006c9a:	203b      	movs	r0, #59	; 0x3b
 8006c9c:	f7fe fee1 	bl	8005a62 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006ca0:	0023      	movs	r3, r4
 8006ca2:	7831      	ldrb	r1, [r6, #0]
 8006ca4:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006ca6:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006ca8:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006caa:	f7fe feda 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8006cae:	2100      	movs	r1, #0
 8006cb0:	200e      	movs	r0, #14
 8006cb2:	f7fe fed6 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	200d      	movs	r0, #13
 8006cba:	f7fe fed2 	bl	8005a62 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8006cbe:	2001      	movs	r0, #1
 8006cc0:	f7fe ff1a 	bl	8005af8 <SX1276Read>
 8006cc4:	23f8      	movs	r3, #248	; 0xf8
 8006cc6:	4398      	bics	r0, r3
 8006cc8:	d104      	bne.n	8006cd4 <SX1276Send+0xfc>
                SX1276SetStby( );
 8006cca:	f7ff f825 	bl	8005d18 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 8006cce:	2001      	movs	r0, #1
 8006cd0:	f7fb fe4c 	bl	800296c <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 8006cd4:	7832      	ldrb	r2, [r6, #0]
 8006cd6:	0039      	movs	r1, r7
 8006cd8:	2000      	movs	r0, #0
 8006cda:	f7fe feaa 	bl	8005a32 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006cde:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 8006ce0:	e786      	b.n	8006bf0 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006ce2:	f7fe ff09 	bl	8005af8 <SX1276Read>
 8006ce6:	2341      	movs	r3, #65	; 0x41
 8006ce8:	0001      	movs	r1, r0
 8006cea:	4399      	bics	r1, r3
 8006cec:	4329      	orrs	r1, r5
 8006cee:	b2c9      	uxtb	r1, r1
 8006cf0:	2033      	movs	r0, #51	; 0x33
 8006cf2:	f7fe feb6 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006cf6:	211d      	movs	r1, #29
 8006cf8:	e7cf      	b.n	8006c9a <SX1276Send+0xc2>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006cfa:	2040      	movs	r0, #64	; 0x40
 8006cfc:	f7fe fefc 	bl	8005af8 <SX1276Read>
 8006d00:	2103      	movs	r1, #3
 8006d02:	4001      	ands	r1, r0
 8006d04:	2040      	movs	r0, #64	; 0x40
 8006d06:	f7fe feac 	bl	8005a62 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006d0a:	2041      	movs	r0, #65	; 0x41
 8006d0c:	f7fe fef4 	bl	8005af8 <SX1276Read>
 8006d10:	213e      	movs	r1, #62	; 0x3e
 8006d12:	4001      	ands	r1, r0
 8006d14:	2041      	movs	r0, #65	; 0x41
 8006d16:	f7fe fea4 	bl	8005a62 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006d1a:	2035      	movs	r0, #53	; 0x35
 8006d1c:	f7fe feec 	bl	8005af8 <SX1276Read>
 8006d20:	233f      	movs	r3, #63	; 0x3f
 8006d22:	4018      	ands	r0, r3
 8006d24:	0023      	movs	r3, r4
 8006d26:	333e      	adds	r3, #62	; 0x3e
 8006d28:	7018      	strb	r0, [r3, #0]
        break;
 8006d2a:	e771      	b.n	8006c10 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006d2c:	0023      	movs	r3, r4
 8006d2e:	3353      	adds	r3, #83	; 0x53
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00d      	beq.n	8006d52 <SX1276Send+0x17a>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006d36:	21f5      	movs	r1, #245	; 0xf5
 8006d38:	2011      	movs	r0, #17
 8006d3a:	f7fe fe92 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006d3e:	2040      	movs	r0, #64	; 0x40
 8006d40:	f7fe feda 	bl	8005af8 <SX1276Read>
 8006d44:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006d46:	4001      	ands	r1, r0
 8006d48:	2040      	movs	r0, #64	; 0x40
 8006d4a:	4301      	orrs	r1, r0
 8006d4c:	f7fe fe89 	bl	8005a62 <SX1276Write>
 8006d50:	e75e      	b.n	8006c10 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006d52:	21f7      	movs	r1, #247	; 0xf7
 8006d54:	2011      	movs	r0, #17
 8006d56:	f7fe fe84 	bl	8005a62 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006d5a:	2040      	movs	r0, #64	; 0x40
 8006d5c:	f7fe fecc 	bl	8005af8 <SX1276Read>
 8006d60:	213f      	movs	r1, #63	; 0x3f
 8006d62:	e7f0      	b.n	8006d46 <SX1276Send+0x16e>
 8006d64:	20000298 	.word	0x20000298
 8006d68:	20000318 	.word	0x20000318
 8006d6c:	2000034c 	.word	0x2000034c

08006d70 <SX1276OnDio1Irq>:
{
 8006d70:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8006d72:	4c39      	ldr	r4, [pc, #228]	; (8006e58 <SX1276OnDio1Irq+0xe8>)
 8006d74:	7925      	ldrb	r5, [r4, #4]
 8006d76:	2d01      	cmp	r5, #1
 8006d78:	d002      	beq.n	8006d80 <SX1276OnDio1Irq+0x10>
 8006d7a:	2d02      	cmp	r5, #2
 8006d7c:	d050      	beq.n	8006e20 <SX1276OnDio1Irq+0xb0>
}
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8006d80:	7963      	ldrb	r3, [r4, #5]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d017      	beq.n	8006db6 <SX1276OnDio1Irq+0x46>
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d1f9      	bne.n	8006d7e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8006d8a:	f7fc fa51 	bl	8003230 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d0f5      	beq.n	8006d7e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8006d92:	4d32      	ldr	r5, [pc, #200]	; (8006e5c <SX1276OnDio1Irq+0xec>)
 8006d94:	1d28      	adds	r0, r5, #4
 8006d96:	f000 fb7d 	bl	8007494 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8006d9a:	2180      	movs	r1, #128	; 0x80
 8006d9c:	2012      	movs	r0, #18
 8006d9e:	f7fe fe60 	bl	8005a62 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006da6:	682b      	ldr	r3, [r5, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0e8      	beq.n	8006d7e <SX1276OnDio1Irq+0xe>
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0e5      	beq.n	8006d7e <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8006db2:	4798      	blx	r3
 8006db4:	e7e3      	b.n	8006d7e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8006db6:	f7fc fa3b 	bl	8003230 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d0df      	beq.n	8006d7e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8006dbe:	0020      	movs	r0, r4
 8006dc0:	3068      	adds	r0, #104	; 0x68
 8006dc2:	f000 fb67 	bl	8007494 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006dc6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8006dc8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	d108      	bne.n	8006de0 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006dce:	1ce3      	adds	r3, r4, #3
 8006dd0:	7fd8      	ldrb	r0, [r3, #31]
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d119      	bne.n	8006e0a <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 8006dd6:	0021      	movs	r1, r4
 8006dd8:	002a      	movs	r2, r5
 8006dda:	313a      	adds	r1, #58	; 0x3a
 8006ddc:	f7fe fe74 	bl	8005ac8 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006de0:	0025      	movs	r5, r4
 8006de2:	353e      	adds	r5, #62	; 0x3e
 8006de4:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8006de6:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006de8:	491d      	ldr	r1, [pc, #116]	; (8006e60 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006dea:	782b      	ldrb	r3, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006dec:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006dee:	1a12      	subs	r2, r2, r0
 8006df0:	429a      	cmp	r2, r3
 8006df2:	db0f      	blt.n	8006e14 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006df4:	3b01      	subs	r3, #1
    SX1276ReadBuffer( 0, buffer, size );
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	2000      	movs	r0, #0
 8006dfa:	f7fe fe65 	bl	8005ac8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8006dfe:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006e00:	782b      	ldrb	r3, [r5, #0]
 8006e02:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006e04:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8006e06:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8006e08:	e7b9      	b.n	8006d7e <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006e0a:	2032      	movs	r0, #50	; 0x32
 8006e0c:	f7fe fe74 	bl	8005af8 <SX1276Read>
 8006e10:	8760      	strh	r0, [r4, #58]	; 0x3a
 8006e12:	e7e5      	b.n	8006de0 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 8006e14:	2000      	movs	r0, #0
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	f7fe fe56 	bl	8005ac8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8006e1c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8006e1e:	e7f2      	b.n	8006e06 <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 8006e20:	7965      	ldrb	r5, [r4, #5]
 8006e22:	2d00      	cmp	r5, #0
 8006e24:	d1ab      	bne.n	8006d7e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 8006e26:	f7fc fa03 	bl	8003230 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006e2a:	2801      	cmp	r0, #1
 8006e2c:	d0a7      	beq.n	8006d7e <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006e2e:	0026      	movs	r6, r4
 8006e30:	363f      	adds	r6, #63	; 0x3f
 8006e32:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8006e34:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8006e36:	490a      	ldr	r1, [pc, #40]	; (8006e60 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006e38:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8006e3a:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006e3c:	1a1b      	subs	r3, r3, r0
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	dd05      	ble.n	8006e4e <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 8006e42:	0028      	movs	r0, r5
 8006e44:	f7fe fdf5 	bl	8005a32 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006e48:	7833      	ldrb	r3, [r6, #0]
 8006e4a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006e4c:	e7da      	b.n	8006e04 <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 8006e4e:	0028      	movs	r0, r5
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	f7fe fdee 	bl	8005a32 <SX1276WriteBuffer>
 8006e56:	e7e1      	b.n	8006e1c <SX1276OnDio1Irq+0xac>
 8006e58:	20000298 	.word	0x20000298
 8006e5c:	20000318 	.word	0x20000318
 8006e60:	2000034c 	.word	0x2000034c

08006e64 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8006e64:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e66:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e6a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8006e6c:	4b16      	ldr	r3, [pc, #88]	; (8006ec8 <TRACE_AllocateBufer+0x64>)
 8006e6e:	8a5d      	ldrh	r5, [r3, #18]
 8006e70:	8a1a      	ldrh	r2, [r3, #16]
 8006e72:	4295      	cmp	r5, r2
 8006e74:	d114      	bne.n	8006ea0 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8006e76:	2280      	movs	r2, #128	; 0x80
 8006e78:	0092      	lsls	r2, r2, #2
 8006e7a:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8006e7c:	b292      	uxth	r2, r2
 8006e7e:	4290      	cmp	r0, r2
 8006e80:	d306      	bcc.n	8006e90 <TRACE_AllocateBufer+0x2c>
 8006e82:	4285      	cmp	r5, r0
 8006e84:	d916      	bls.n	8006eb4 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8006e86:	2201      	movs	r2, #1
 8006e88:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8006e8a:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8006e8c:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8006e8e:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8006e90:	8a5a      	ldrh	r2, [r3, #18]
 8006e92:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8006e94:	1812      	adds	r2, r2, r0
 8006e96:	05d2      	lsls	r2, r2, #23
 8006e98:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 8006e9a:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8006e9c:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8006e9e:	e00b      	b.n	8006eb8 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8006ea0:	4295      	cmp	r5, r2
 8006ea2:	d90c      	bls.n	8006ebe <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8006ea4:	2680      	movs	r6, #128	; 0x80
 8006ea6:	00b6      	lsls	r6, r6, #2
 8006ea8:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8006eaa:	b2b6      	uxth	r6, r6
 8006eac:	4286      	cmp	r6, r0
 8006eae:	d8ef      	bhi.n	8006e90 <TRACE_AllocateBufer+0x2c>
 8006eb0:	4282      	cmp	r2, r0
 8006eb2:	d8e8      	bhi.n	8006e86 <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 8006eb4:	2001      	movs	r0, #1
 8006eb6:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb8:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 8006ebc:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8006ebe:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 8006ec0:	b292      	uxth	r2, r2
 8006ec2:	4282      	cmp	r2, r0
 8006ec4:	d8e4      	bhi.n	8006e90 <TRACE_AllocateBufer+0x2c>
 8006ec6:	e7f5      	b.n	8006eb4 <TRACE_AllocateBufer+0x50>
 8006ec8:	2000044c 	.word	0x2000044c

08006ecc <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ecc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006ed0:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8006ed2:	4a03      	ldr	r2, [pc, #12]	; (8006ee0 <TRACE_Lock+0x14>)
 8006ed4:	8ad3      	ldrh	r3, [r2, #22]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eda:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8006ede:	4770      	bx	lr
 8006ee0:	2000044c 	.word	0x2000044c

08006ee4 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006ee8:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8006eea:	4a03      	ldr	r2, [pc, #12]	; (8006ef8 <TRACE_UnLock+0x14>)
 8006eec:	8ad3      	ldrh	r3, [r2, #22]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8006ef6:	4770      	bx	lr
 8006ef8:	2000044c 	.word	0x2000044c

08006efc <UTIL_ADV_TRACE_Init>:
{
 8006efc:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8006efe:	2218      	movs	r2, #24
 8006f00:	2100      	movs	r1, #0
 8006f02:	4807      	ldr	r0, [pc, #28]	; (8006f20 <UTIL_ADV_TRACE_Init+0x24>)
 8006f04:	f000 f985 	bl	8007212 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8006f08:	2280      	movs	r2, #128	; 0x80
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4805      	ldr	r0, [pc, #20]	; (8006f24 <UTIL_ADV_TRACE_Init+0x28>)
 8006f0e:	0092      	lsls	r2, r2, #2
 8006f10:	f000 f97f 	bl	8007212 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8006f14:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <UTIL_ADV_TRACE_Init+0x2c>)
 8006f16:	4805      	ldr	r0, [pc, #20]	; (8006f2c <UTIL_ADV_TRACE_Init+0x30>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4798      	blx	r3
}
 8006f1c:	bd10      	pop	{r4, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	2000044c 	.word	0x2000044c
 8006f24:	20000564 	.word	0x20000564
 8006f28:	080079fc 	.word	0x080079fc
 8006f2c:	08007099 	.word	0x08007099

08006f30 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 8006f30:	4b01      	ldr	r3, [pc, #4]	; (8006f38 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8006f32:	6058      	str	r0, [r3, #4]
}
 8006f34:	4770      	bx	lr
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	2000044c 	.word	0x2000044c

08006f3c <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8006f3c:	4b01      	ldr	r3, [pc, #4]	; (8006f44 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8006f3e:	7218      	strb	r0, [r3, #8]
}
 8006f40:	4770      	bx	lr
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	2000044c 	.word	0x2000044c

08006f48 <TRACE_Send>:
{
 8006f48:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f4a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006f4e:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8006f50:	4c1b      	ldr	r4, [pc, #108]	; (8006fc0 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 8006f52:	8ae5      	ldrh	r5, [r4, #22]
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	d12e      	bne.n	8006fb6 <TRACE_Send+0x6e>
    TRACE_Lock();
 8006f58:	f7ff ffb8 	bl	8006ecc <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8006f5c:	8a20      	ldrh	r0, [r4, #16]
 8006f5e:	8a62      	ldrh	r2, [r4, #18]
 8006f60:	4290      	cmp	r0, r2
 8006f62:	d026      	beq.n	8006fb2 <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8006f64:	78a1      	ldrb	r1, [r4, #2]
 8006f66:	2901      	cmp	r1, #1
 8006f68:	d110      	bne.n	8006f8c <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8006f6a:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8006f6c:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8006f6e:	1a1b      	subs	r3, r3, r0
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8006f74:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8006f76:	8025      	strh	r5, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d109      	bne.n	8006f90 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8006f7c:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8006f7e:	8223      	strh	r3, [r4, #16]
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8006f80:	8a23      	ldrh	r3, [r4, #16]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d912      	bls.n	8006fac <TRACE_Send+0x64>
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8006f86:	1ad2      	subs	r2, r2, r3
 8006f88:	82a2      	strh	r2, [r4, #20]
 8006f8a:	e001      	b.n	8006f90 <TRACE_Send+0x48>
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	d0f7      	beq.n	8006f80 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8006f90:	8a25      	ldrh	r5, [r4, #16]
 8006f92:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <TRACE_Send+0x7c>)
 8006f94:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f96:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 8006f9a:	f7fb fcd5 	bl	8002948 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <TRACE_Send+0x80>)
 8006fa0:	8aa1      	ldrh	r1, [r4, #20]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	0028      	movs	r0, r5
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	4798      	blx	r3
}
 8006faa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8006fac:	2280      	movs	r2, #128	; 0x80
 8006fae:	0092      	lsls	r2, r2, #2
 8006fb0:	e7e9      	b.n	8006f86 <TRACE_Send+0x3e>
      TRACE_UnLock();
 8006fb2:	f7ff ff97 	bl	8006ee4 <TRACE_UnLock>
 8006fb6:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 8006fba:	2000      	movs	r0, #0
}
 8006fbc:	e7f5      	b.n	8006faa <TRACE_Send+0x62>
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	2000044c 	.word	0x2000044c
 8006fc4:	20000564 	.word	0x20000564
 8006fc8:	080079fc 	.word	0x080079fc

08006fcc <UTIL_ADV_TRACE_COND_FSend>:
{
 8006fcc:	b408      	push	{r3}
 8006fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fd0:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	466c      	mov	r4, sp
 8006fd6:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8006fd8:	4b2c      	ldr	r3, [pc, #176]	; (800708c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8006fda:	7a1c      	ldrb	r4, [r3, #8]
 8006fdc:	4284      	cmp	r4, r0
 8006fde:	d350      	bcc.n	8007082 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8006fe0:	68d8      	ldr	r0, [r3, #12]
 8006fe2:	4008      	ands	r0, r1
 8006fe4:	4288      	cmp	r0, r1
 8006fe6:	d14e      	bne.n	8007086 <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d004      	beq.n	8006ff8 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	d002      	beq.n	8006ff8 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8006ff2:	4669      	mov	r1, sp
 8006ff4:	a802      	add	r0, sp, #8
 8006ff6:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006ff8:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 8006ffa:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006ffc:	0049      	lsls	r1, r1, #1
 8006ffe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007000:	4823      	ldr	r0, [pc, #140]	; (8007090 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 8007002:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007004:	f000 fb3e 	bl	8007684 <tiny_vsnprintf_like>
 8007008:	0005      	movs	r5, r0
  TRACE_Lock();
 800700a:	f7ff ff5f 	bl	8006ecc <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800700e:	466b      	mov	r3, sp
 8007010:	8818      	ldrh	r0, [r3, #0]
 8007012:	1c9c      	adds	r4, r3, #2
 8007014:	1940      	adds	r0, r0, r5
 8007016:	0021      	movs	r1, r4
 8007018:	b280      	uxth	r0, r0
 800701a:	f7ff ff23 	bl	8006e64 <TRACE_AllocateBufer>
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	d02a      	beq.n	8007078 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 8007022:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8007024:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 8007026:	466b      	mov	r3, sp
 8007028:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800702a:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	8826      	ldrh	r6, [r4, #0]
 8007030:	4818      	ldr	r0, [pc, #96]	; (8007094 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8007032:	b297      	uxth	r7, r2
 8007034:	19f1      	adds	r1, r6, r7
 8007036:	b289      	uxth	r1, r1
 8007038:	42bb      	cmp	r3, r7
 800703a:	d815      	bhi.n	8007068 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800703c:	199b      	adds	r3, r3, r6
 800703e:	b29b      	uxth	r3, r3
 8007040:	2d00      	cmp	r5, #0
 8007042:	d000      	beq.n	8007046 <UTIL_ADV_TRACE_COND_FSend+0x7a>
 8007044:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007046:	2180      	movs	r1, #128	; 0x80
 8007048:	8823      	ldrh	r3, [r4, #0]
 800704a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800704c:	0049      	lsls	r1, r1, #1
 800704e:	18c0      	adds	r0, r0, r3
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	f000 fb17 	bl	8007684 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8007056:	f7ff ff45 	bl	8006ee4 <TRACE_UnLock>
    return TRACE_Send();
 800705a:	f7ff ff75 	bl	8006f48 <TRACE_Send>
}
 800705e:	b006      	add	sp, #24
 8007060:	bcf0      	pop	{r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	b001      	add	sp, #4
 8007066:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8007068:	466d      	mov	r5, sp
 800706a:	2708      	movs	r7, #8
 800706c:	19ed      	adds	r5, r5, r7
 800706e:	5cad      	ldrb	r5, [r5, r2]
 8007070:	3201      	adds	r2, #1
 8007072:	5445      	strb	r5, [r0, r1]
 8007074:	4665      	mov	r5, ip
 8007076:	e7dc      	b.n	8007032 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 8007078:	f7ff ff34 	bl	8006ee4 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800707c:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800707e:	4240      	negs	r0, r0
 8007080:	e7ed      	b.n	800705e <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 8007082:	2005      	movs	r0, #5
 8007084:	e7fb      	b.n	800707e <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8007086:	2006      	movs	r0, #6
 8007088:	e7f9      	b.n	800707e <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	2000044c 	.word	0x2000044c
 8007090:	20000464 	.word	0x20000464
 8007094:	20000564 	.word	0x20000564

08007098 <TRACE_TxCpltCallback>:
{ 
 8007098:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800709e:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80070a0:	4b1f      	ldr	r3, [pc, #124]	; (8007120 <TRACE_TxCpltCallback+0x88>)
 80070a2:	789a      	ldrb	r2, [r3, #2]
 80070a4:	2a02      	cmp	r2, #2
 80070a6:	d11e      	bne.n	80070e6 <TRACE_TxCpltCallback+0x4e>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80070a8:	2200      	movs	r2, #0
 80070aa:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80070ac:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80070ae:	8a1d      	ldrh	r5, [r3, #16]
 80070b0:	8a59      	ldrh	r1, [r3, #18]
 80070b2:	428d      	cmp	r5, r1
 80070b4:	d02d      	beq.n	8007112 <TRACE_TxCpltCallback+0x7a>
 80070b6:	8ada      	ldrh	r2, [r3, #22]
 80070b8:	2a01      	cmp	r2, #1
 80070ba:	d12a      	bne.n	8007112 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80070bc:	7898      	ldrb	r0, [r3, #2]
 80070be:	2801      	cmp	r0, #1
 80070c0:	d117      	bne.n	80070f2 <TRACE_TxCpltCallback+0x5a>
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80070c2:	3001      	adds	r0, #1
 80070c4:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 80070c6:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80070c8:	881a      	ldrh	r2, [r3, #0]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 80070ca:	8018      	strh	r0, [r3, #0]
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80070cc:	1b52      	subs	r2, r2, r5
 80070ce:	b292      	uxth	r2, r2
 80070d0:	829a      	strh	r2, [r3, #20]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 80070d2:	4282      	cmp	r2, r0
 80070d4:	d10f      	bne.n	80070f6 <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80070d6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80070d8:	821a      	strh	r2, [r3, #16]
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80070da:	8a1a      	ldrh	r2, [r3, #16]
 80070dc:	4291      	cmp	r1, r2
 80070de:	d915      	bls.n	800710c <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80070e0:	1a89      	subs	r1, r1, r2
 80070e2:	8299      	strh	r1, [r3, #20]
 80070e4:	e007      	b.n	80070f6 <TRACE_TxCpltCallback+0x5e>
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80070e6:	8a1a      	ldrh	r2, [r3, #16]
 80070e8:	8a99      	ldrh	r1, [r3, #20]
 80070ea:	1852      	adds	r2, r2, r1
 80070ec:	05d2      	lsls	r2, r2, #23
 80070ee:	0dd2      	lsrs	r2, r2, #23
 80070f0:	e7dc      	b.n	80070ac <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d0f1      	beq.n	80070da <TRACE_TxCpltCallback+0x42>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f6:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 80070fa:	8a18      	ldrh	r0, [r3, #16]
 80070fc:	8a99      	ldrh	r1, [r3, #20]
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <TRACE_TxCpltCallback+0x8c>)
 8007100:	18c0      	adds	r0, r0, r3
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <TRACE_TxCpltCallback+0x90>)
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	4798      	blx	r3
}
 800710a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800710c:	2180      	movs	r1, #128	; 0x80
 800710e:	0089      	lsls	r1, r1, #2
 8007110:	e7e6      	b.n	80070e0 <TRACE_TxCpltCallback+0x48>
    UTIL_ADV_TRACE_PostSendHook();      
 8007112:	f7fb fc1f 	bl	8002954 <UTIL_ADV_TRACE_PostSendHook>
 8007116:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 800711a:	f7ff fee3 	bl	8006ee4 <TRACE_UnLock>
}
 800711e:	e7f4      	b.n	800710a <TRACE_TxCpltCallback+0x72>
 8007120:	2000044c 	.word	0x2000044c
 8007124:	20000564 	.word	0x20000564
 8007128:	080079fc 	.word	0x080079fc

0800712c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800712c:	2200      	movs	r2, #0
 800712e:	4b02      	ldr	r3, [pc, #8]	; (8007138 <UTIL_LPM_Init+0xc>)
 8007130:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007132:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007134:	4770      	bx	lr
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	20000764 	.word	0x20000764

0800713c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800713c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800713e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007142:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8007144:	2900      	cmp	r1, #0
 8007146:	d008      	beq.n	800715a <UTIL_LPM_SetStopMode+0x1e>
 8007148:	2901      	cmp	r1, #1
 800714a:	d103      	bne.n	8007154 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <UTIL_LPM_SetStopMode+0x28>)
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4310      	orrs	r0, r2
 8007152:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007154:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007158:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800715a:	4a02      	ldr	r2, [pc, #8]	; (8007164 <UTIL_LPM_SetStopMode+0x28>)
 800715c:	6813      	ldr	r3, [r2, #0]
 800715e:	4383      	bics	r3, r0
 8007160:	6013      	str	r3, [r2, #0]
      break;
 8007162:	e7f7      	b.n	8007154 <UTIL_LPM_SetStopMode+0x18>
 8007164:	20000764 	.word	0x20000764

08007168 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007168:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800716a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800716e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8007170:	2900      	cmp	r1, #0
 8007172:	d008      	beq.n	8007186 <UTIL_LPM_SetOffMode+0x1e>
 8007174:	2901      	cmp	r1, #1
 8007176:	d103      	bne.n	8007180 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8007178:	4b05      	ldr	r3, [pc, #20]	; (8007190 <UTIL_LPM_SetOffMode+0x28>)
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4310      	orrs	r0, r2
 800717e:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007180:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007184:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8007186:	4a02      	ldr	r2, [pc, #8]	; (8007190 <UTIL_LPM_SetOffMode+0x28>)
 8007188:	6853      	ldr	r3, [r2, #4]
 800718a:	4383      	bics	r3, r0
 800718c:	6053      	str	r3, [r2, #4]
      break;
 800718e:	e7f7      	b.n	8007180 <UTIL_LPM_SetOffMode+0x18>
 8007190:	20000764 	.word	0x20000764

08007194 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007194:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007198:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800719a:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <UTIL_LPM_GetMode+0x20>)
 800719e:	6819      	ldr	r1, [r3, #0]
 80071a0:	4281      	cmp	r1, r0
 80071a2:	d103      	bne.n	80071ac <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80071a4:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 80071a6:	4243      	negs	r3, r0
 80071a8:	4158      	adcs	r0, r3
 80071aa:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ac:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 80071b0:	4770      	bx	lr
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000764 	.word	0x20000764

080071b8 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 80071b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ba:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80071be:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80071c0:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <UTIL_LPM_EnterLowPower+0x40>)
 80071c2:	4c0e      	ldr	r4, [pc, #56]	; (80071fc <UTIL_LPM_EnterLowPower+0x44>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	d008      	beq.n	80071dc <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	9301      	str	r3, [sp, #4]
 80071ce:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80071d0:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d6:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80071da:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <UTIL_LPM_EnterLowPower+0x34>
        UTIL_PowerDriver.EnterStopMode( );
 80071e2:	68a3      	ldr	r3, [r4, #8]
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80071e8:	68e3      	ldr	r3, [r4, #12]
 80071ea:	e7f2      	b.n	80071d2 <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80071f2:	6963      	ldr	r3, [r4, #20]
 80071f4:	e7ed      	b.n	80071d2 <UTIL_LPM_EnterLowPower+0x1a>
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	20000764 	.word	0x20000764
 80071fc:	080079e4 	.word	0x080079e4

08007200 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8007200:	2300      	movs	r3, #0
{
 8007202:	b510      	push	{r4, lr}
  while( size-- )
 8007204:	4293      	cmp	r3, r2
 8007206:	d100      	bne.n	800720a <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 8007208:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800720a:	5ccc      	ldrb	r4, [r1, r3]
 800720c:	54c4      	strb	r4, [r0, r3]
 800720e:	3301      	adds	r3, #1
 8007210:	e7f8      	b.n	8007204 <UTIL_MEM_cpy_8+0x4>

08007212 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8007212:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 8007214:	f000 fb8d 	bl	8007932 <memset>
  }
}
 8007218:	bd10      	pop	{r4, pc}
	...

0800721c <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800721c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800721e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007222:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007226:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4302      	orrs	r2, r0
 800722c:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800722e:	185b      	adds	r3, r3, r1
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	4310      	orrs	r0, r2
 8007234:	6118      	str	r0, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007236:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800723a:	bd10      	pop	{r4, pc}
 800723c:	2000076c 	.word	0x2000076c

08007240 <UTIL_SEQ_PreIdle>:
 8007240:	4770      	bx	lr

08007242 <UTIL_SEQ_PostIdle>:
 8007242:	4770      	bx	lr

08007244 <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 8007244:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8007246:	0c02      	lsrs	r2, r0, #16
 8007248:	429a      	cmp	r2, r3
 800724a:	d101      	bne.n	8007250 <SEQ_BitPosition+0xc>
 800724c:	0400      	lsls	r0, r0, #16
 800724e:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8007250:	0e02      	lsrs	r2, r0, #24
 8007252:	d102      	bne.n	800725a <SEQ_BitPosition+0x16>
 8007254:	3308      	adds	r3, #8
 8007256:	b2db      	uxtb	r3, r3
 8007258:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800725a:	0f02      	lsrs	r2, r0, #28
 800725c:	d102      	bne.n	8007264 <SEQ_BitPosition+0x20>
 800725e:	3304      	adds	r3, #4
 8007260:	b2db      	uxtb	r3, r3
 8007262:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 8007264:	221f      	movs	r2, #31
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	4a02      	ldr	r2, [pc, #8]	; (8007274 <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800726a:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800726c:	5c10      	ldrb	r0, [r2, r0]
 800726e:	1a18      	subs	r0, r3, r0
 8007270:	b2c0      	uxtb	r0, r0
}
 8007272:	4770      	bx	lr
 8007274:	08007bec 	.word	0x08007bec

08007278 <UTIL_SEQ_Run>:
{
 8007278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800727a:	4e2f      	ldr	r6, [pc, #188]	; (8007338 <UTIL_SEQ_Run+0xc0>)
 800727c:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 800727e:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 8007280:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 8007282:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8007284:	4c2d      	ldr	r4, [pc, #180]	; (800733c <UTIL_SEQ_Run+0xc4>)
 8007286:	6830      	ldr	r0, [r6, #0]
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	6873      	ldr	r3, [r6, #4]
 800728c:	4002      	ands	r2, r0
 800728e:	4213      	tst	r3, r2
 8007290:	d037      	beq.n	8007302 <UTIL_SEQ_Run+0x8a>
 8007292:	68a1      	ldr	r1, [r4, #8]
 8007294:	6862      	ldr	r2, [r4, #4]
 8007296:	000d      	movs	r5, r1
 8007298:	4015      	ands	r5, r2
 800729a:	4211      	tst	r1, r2
 800729c:	d131      	bne.n	8007302 <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800729e:	6922      	ldr	r2, [r4, #16]
 80072a0:	4003      	ands	r3, r0
 80072a2:	0010      	movs	r0, r2
 80072a4:	4018      	ands	r0, r3
 80072a6:	421a      	tst	r2, r3
 80072a8:	d102      	bne.n	80072b0 <UTIL_SEQ_Run+0x38>
      counter++;
 80072aa:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80072ac:	69a0      	ldr	r0, [r4, #24]
 80072ae:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80072b0:	00ed      	lsls	r5, r5, #3
 80072b2:	1963      	adds	r3, r4, r5
 80072b4:	695a      	ldr	r2, [r3, #20]
 80072b6:	4202      	tst	r2, r0
 80072b8:	d102      	bne.n	80072c0 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80072ba:	2201      	movs	r2, #1
 80072bc:	4252      	negs	r2, r2
 80072be:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80072c0:	1965      	adds	r5, r4, r5
 80072c2:	696f      	ldr	r7, [r5, #20]
 80072c4:	4038      	ands	r0, r7
 80072c6:	f7ff ffbd 	bl	8007244 <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80072ca:	2301      	movs	r3, #1
 80072cc:	4083      	lsls	r3, r0
 80072ce:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80072d0:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80072d2:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80072d8:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80072da:	2301      	movs	r3, #1
 80072dc:	68e2      	ldr	r2, [r4, #12]
 80072de:	4093      	lsls	r3, r2
 80072e0:	6822      	ldr	r2, [r4, #0]
 80072e2:	439a      	bics	r2, r3
 80072e4:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80072e6:	69a2      	ldr	r2, [r4, #24]
 80072e8:	439a      	bics	r2, r3
 80072ea:	61a2      	str	r2, [r4, #24]
 80072ec:	6922      	ldr	r2, [r4, #16]
 80072ee:	439a      	bics	r2, r3
 80072f0:	6122      	str	r2, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f2:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 80072f6:	68e3      	ldr	r3, [r4, #12]
 80072f8:	4a11      	ldr	r2, [pc, #68]	; (8007340 <UTIL_SEQ_Run+0xc8>)
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	589b      	ldr	r3, [r3, r2]
 80072fe:	4798      	blx	r3
 8007300:	e7c0      	b.n	8007284 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007302:	2301      	movs	r3, #1
 8007304:	425b      	negs	r3, r3
 8007306:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 8007308:	f7ff ff9a 	bl	8007240 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800730c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007310:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8007312:	6822      	ldr	r2, [r4, #0]
 8007314:	6833      	ldr	r3, [r6, #0]
 8007316:	6861      	ldr	r1, [r4, #4]
 8007318:	4013      	ands	r3, r2
 800731a:	6872      	ldr	r2, [r6, #4]
 800731c:	4013      	ands	r3, r2
 800731e:	68a2      	ldr	r2, [r4, #8]
 8007320:	400a      	ands	r2, r1
 8007322:	4313      	orrs	r3, r2
 8007324:	d101      	bne.n	800732a <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 8007326:	f7fb fb0b 	bl	8002940 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800732a:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800732e:	f7ff ff88 	bl	8007242 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8007332:	9b01      	ldr	r3, [sp, #4]
 8007334:	6073      	str	r3, [r6, #4]
}
 8007336:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007338:	2000003c 	.word	0x2000003c
 800733c:	2000076c 	.word	0x2000076c
 8007340:	2000078c 	.word	0x2000078c

08007344 <UTIL_SEQ_RegTask>:
{
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007348:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800734c:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800734e:	f7ff ff79 	bl	8007244 <SEQ_BitPosition>
 8007352:	4b03      	ldr	r3, [pc, #12]	; (8007360 <UTIL_SEQ_RegTask+0x1c>)
 8007354:	0080      	lsls	r0, r0, #2
 8007356:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007358:	f385 8810 	msr	PRIMASK, r5
}
 800735c:	bd70      	pop	{r4, r5, r6, pc}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	2000078c 	.word	0x2000078c

08007364 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8007364:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8007366:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8007368:	4e12      	ldr	r6, [pc, #72]	; (80073b4 <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800736a:	aa02      	add	r2, sp, #8
 800736c:	8093      	strh	r3, [r2, #4]
 800736e:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8007370:	6933      	ldr	r3, [r6, #16]
{
 8007372:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8007374:	a803      	add	r0, sp, #12
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800737a:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800737c:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8007382:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8007384:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 800738a:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800738c:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 800738e:	0089      	lsls	r1, r1, #2
  c.Seconds = a.Seconds + b.Seconds;
 8007390:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8007392:	ab02      	add	r3, sp, #8
 8007394:	889b      	ldrh	r3, [r3, #4]
 8007396:	195b      	adds	r3, r3, r5
 8007398:	b29a      	uxth	r2, r3
 800739a:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800739c:	428b      	cmp	r3, r1
 800739e:	db03      	blt.n	80073a8 <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <SysTimeGet+0x54>)
    c.Seconds++;
 80073a2:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 80073a4:	18d2      	adds	r2, r2, r3
 80073a6:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 80073a8:	6020      	str	r0, [r4, #0]
}
 80073aa:	0020      	movs	r0, r4
  return sysTime;
 80073ac:	80a3      	strh	r3, [r4, #4]
}
 80073ae:	b004      	add	sp, #16
 80073b0:	bd70      	pop	{r4, r5, r6, pc}
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	080079a4 	.word	0x080079a4
 80073b8:	fffffc18 	.word	0xfffffc18

080073bc <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80073bc:	2200      	movs	r2, #0
{
 80073be:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 80073c0:	4b02      	ldr	r3, [pc, #8]	; (80073cc <UTIL_TIMER_Init+0x10>)
 80073c2:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80073c4:	4b02      	ldr	r3, [pc, #8]	; (80073d0 <UTIL_TIMER_Init+0x14>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4798      	blx	r3
}
 80073ca:	bd10      	pop	{r4, pc}
 80073cc:	2000080c 	.word	0x2000080c
 80073d0:	080079b8 	.word	0x080079b8

080073d4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80073d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073d6:	0004      	movs	r4, r0
 80073d8:	0017      	movs	r7, r2
 80073da:	0008      	movs	r0, r1
 80073dc:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 80073de:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 80073e0:	2c00      	cmp	r4, #0
 80073e2:	d00f      	beq.n	8007404 <UTIL_TIMER_Create+0x30>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00d      	beq.n	8007404 <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 80073e8:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80073ea:	4b07      	ldr	r3, [pc, #28]	; (8007408 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 80073ec:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	4798      	blx	r3
    TimerObject->argument = Argument;
 80073f4:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80073f6:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80073f8:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 80073fa:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80073fc:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80073fe:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8007400:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8007402:	6165      	str	r5, [r4, #20]
  }
}
 8007404:	0028      	movs	r0, r5
 8007406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007408:	080079b8 	.word	0x080079b8

0800740c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800740c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800740e:	4c03      	ldr	r4, [pc, #12]	; (800741c <UTIL_TIMER_GetCurrentTime+0x10>)
 8007410:	69e3      	ldr	r3, [r4, #28]
 8007412:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8007414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007416:	4798      	blx	r3
}
 8007418:	bd10      	pop	{r4, pc}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	080079b8 	.word	0x080079b8

08007420 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8007420:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8007422:	4d06      	ldr	r5, [pc, #24]	; (800743c <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 8007424:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8007426:	69eb      	ldr	r3, [r5, #28]
 8007428:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800742a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800742c:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800742e:	0030      	movs	r0, r6
 8007430:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8007432:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007434:	1a20      	subs	r0, r4, r0
 8007436:	4798      	blx	r3
}
 8007438:	bd70      	pop	{r4, r5, r6, pc}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	080079b8 	.word	0x080079b8

08007440 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007440:	4a05      	ldr	r2, [pc, #20]	; (8007458 <TimerExists+0x18>)
{
 8007442:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007444:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 8007446:	2800      	cmp	r0, #0
 8007448:	d100      	bne.n	800744c <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 800744a:	4770      	bx	lr
    if( cur == TimerObject )
 800744c:	4298      	cmp	r0, r3
 800744e:	d001      	beq.n	8007454 <TimerExists+0x14>
    cur = cur->Next;
 8007450:	6940      	ldr	r0, [r0, #20]
 8007452:	e7f8      	b.n	8007446 <TimerExists+0x6>
      return true;
 8007454:	2001      	movs	r0, #1
 8007456:	e7f8      	b.n	800744a <TimerExists+0xa>
 8007458:	2000080c 	.word	0x2000080c

0800745c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800745c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800745e:	4e0c      	ldr	r6, [pc, #48]	; (8007490 <TimerSetTimeout+0x34>)
{
 8007460:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8007462:	6a33      	ldr	r3, [r6, #32]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	4798      	blx	r3
  TimerObject->IsPending = 1;
 8007468:	2301      	movs	r3, #1
 800746a:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800746c:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800746e:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8007470:	6827      	ldr	r7, [r4, #0]
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	4798      	blx	r3
 8007476:	1940      	adds	r0, r0, r5
 8007478:	4287      	cmp	r7, r0
 800747a:	d203      	bcs.n	8007484 <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800747c:	9b01      	ldr	r3, [sp, #4]
 800747e:	4798      	blx	r3
 8007480:	1945      	adds	r5, r0, r5
 8007482:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8007484:	68b3      	ldr	r3, [r6, #8]
 8007486:	6820      	ldr	r0, [r4, #0]
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	4798      	blx	r3
}
 800748c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	080079b8 	.word	0x080079b8

08007494 <UTIL_TIMER_Stop>:
{
 8007494:	0003      	movs	r3, r0
 8007496:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 8007498:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800749a:	2b00      	cmp	r3, #0
 800749c:	d016      	beq.n	80074cc <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800749e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80074a2:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80074a4:	4c11      	ldr	r4, [pc, #68]	; (80074ec <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 80074a6:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80074a8:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	d00b      	beq.n	80074c6 <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 80074ae:	2100      	movs	r1, #0
 80074b0:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d111      	bne.n	80074da <UTIL_TIMER_Stop+0x46>
          if( TimerListHead->Next != NULL )
 80074b6:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 80074b8:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 80074ba:	428e      	cmp	r6, r1
 80074bc:	d007      	beq.n	80074ce <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 80074be:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 80074c0:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 80074c2:	f7ff ffcb 	bl	800745c <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c6:	f385 8810 	msr	PRIMASK, r5
}
 80074ca:	2000      	movs	r0, #0
}
 80074cc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <UTIL_TIMER_Stop+0x5c>)
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	4798      	blx	r3
            TimerListHead = NULL;
 80074d6:	6026      	str	r6, [r4, #0]
 80074d8:	e7f5      	b.n	80074c6 <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 80074da:	0011      	movs	r1, r2
 80074dc:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 80074de:	2a00      	cmp	r2, #0
 80074e0:	d0f1      	beq.n	80074c6 <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d1f9      	bne.n	80074da <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	614b      	str	r3, [r1, #20]
 80074ea:	e7ec      	b.n	80074c6 <UTIL_TIMER_Stop+0x32>
 80074ec:	2000080c 	.word	0x2000080c
 80074f0:	080079b8 	.word	0x080079b8

080074f4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80074f4:	4b09      	ldr	r3, [pc, #36]	; (800751c <TimerInsertTimer+0x28>)
{
 80074f6:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80074f8:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80074fa:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 80074fc:	6959      	ldr	r1, [r3, #20]
 80074fe:	2900      	cmp	r1, #0
 8007500:	d102      	bne.n	8007508 <TimerInsertTimer+0x14>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8007502:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 8007504:	6141      	str	r1, [r0, #20]
 8007506:	e008      	b.n	800751a <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 8007508:	6801      	ldr	r1, [r0, #0]
 800750a:	6814      	ldr	r4, [r2, #0]
 800750c:	42a1      	cmp	r1, r4
 800750e:	d902      	bls.n	8007516 <TimerInsertTimer+0x22>
        next = next->Next;
 8007510:	0013      	movs	r3, r2
 8007512:	6952      	ldr	r2, [r2, #20]
 8007514:	e7f2      	b.n	80074fc <TimerInsertTimer+0x8>
        cur->Next = TimerObject;
 8007516:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 8007518:	6142      	str	r2, [r0, #20]
}
 800751a:	bd10      	pop	{r4, pc}
 800751c:	2000080c 	.word	0x2000080c

08007520 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007520:	4a05      	ldr	r2, [pc, #20]	; (8007538 <TimerInsertNewHeadTimer+0x18>)
{
 8007522:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007524:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800752a:	2100      	movs	r1, #0
 800752c:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800752e:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8007530:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8007532:	f7ff ff93 	bl	800745c <TimerSetTimeout>
}
 8007536:	bd10      	pop	{r4, pc}
 8007538:	2000080c 	.word	0x2000080c

0800753c <UTIL_TIMER_Start>:
{
 800753c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800753e:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 8007540:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8007542:	2800      	cmp	r0, #0
 8007544:	d025      	beq.n	8007592 <UTIL_TIMER_Start+0x56>
 8007546:	f7ff ff7b 	bl	8007440 <TimerExists>
 800754a:	2800      	cmp	r0, #0
 800754c:	d121      	bne.n	8007592 <UTIL_TIMER_Start+0x56>
 800754e:	7a65      	ldrb	r5, [r4, #9]
 8007550:	2d00      	cmp	r5, #0
 8007552:	d12e      	bne.n	80075b2 <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007554:	f3ef 8310 	mrs	r3, PRIMASK
 8007558:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800755a:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800755c:	4e16      	ldr	r6, [pc, #88]	; (80075b8 <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 800755e:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8007560:	6a33      	ldr	r3, [r6, #32]
 8007562:	9301      	str	r3, [sp, #4]
 8007564:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 8007566:	4287      	cmp	r7, r0
 8007568:	d200      	bcs.n	800756c <UTIL_TIMER_Start+0x30>
 800756a:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 8007572:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 8007574:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 8007576:	4f11      	ldr	r7, [pc, #68]	; (80075bc <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 8007578:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 8007580:	6933      	ldr	r3, [r6, #16]
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 8007586:	0020      	movs	r0, r4
 8007588:	f7ff ffca 	bl	8007520 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758c:	9b00      	ldr	r3, [sp, #0]
 800758e:	f383 8810 	msr	PRIMASK, r3
}
 8007592:	0028      	movs	r0, r5
 8007594:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8007596:	69b3      	ldr	r3, [r6, #24]
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80075a0:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 80075a2:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4298      	cmp	r0, r3
 80075a8:	d3ed      	bcc.n	8007586 <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 80075aa:	0020      	movs	r0, r4
 80075ac:	f7ff ffa2 	bl	80074f4 <TimerInsertTimer>
 80075b0:	e7ec      	b.n	800758c <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80075b2:	2501      	movs	r5, #1
 80075b4:	e7ed      	b.n	8007592 <UTIL_TIMER_Start+0x56>
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	080079b8 	.word	0x080079b8
 80075bc:	2000080c 	.word	0x2000080c

080075c0 <UTIL_TIMER_SetPeriod>:
{
 80075c0:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 80075c2:	2301      	movs	r3, #1
{
 80075c4:	0004      	movs	r4, r0
 80075c6:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 80075c8:	2c00      	cmp	r4, #0
 80075ca:	d011      	beq.n	80075f0 <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <UTIL_TIMER_SetPeriod+0x34>)
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	4798      	blx	r3
 80075d4:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80075d6:	0020      	movs	r0, r4
 80075d8:	f7ff ff32 	bl	8007440 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80075dc:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 80075de:	4298      	cmp	r0, r3
 80075e0:	d006      	beq.n	80075f0 <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 80075e2:	0020      	movs	r0, r4
 80075e4:	f7ff ff56 	bl	8007494 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80075e8:	0020      	movs	r0, r4
 80075ea:	f7ff ffa7 	bl	800753c <UTIL_TIMER_Start>
 80075ee:	0003      	movs	r3, r0
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	bd16      	pop	{r1, r2, r4, pc}
 80075f4:	080079b8 	.word	0x080079b8

080075f8 <UTIL_TIMER_IRQ_Handler>:
{
 80075f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075fa:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80075fe:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8007600:	4e1e      	ldr	r6, [pc, #120]	; (800767c <UTIL_TIMER_IRQ_Handler+0x84>)
 8007602:	6973      	ldr	r3, [r6, #20]
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8007608:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800760a:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	4798      	blx	r3
  if ( TimerListHead != NULL )
 8007610:	4d1b      	ldr	r5, [pc, #108]	; (8007680 <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 8007612:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 8007614:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 8007616:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01f      	beq.n	800765c <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 800761c:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800761e:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 8007620:	4288      	cmp	r0, r1
 8007622:	d900      	bls.n	8007626 <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 8007624:	1822      	adds	r2, r4, r0
 8007626:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8007628:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800762a:	e7f5      	b.n	8007618 <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800762c:	681c      	ldr	r4, [r3, #0]
 800762e:	2c00      	cmp	r4, #0
 8007630:	d004      	beq.n	800763c <UTIL_TIMER_IRQ_Handler+0x44>
 8007632:	69b3      	ldr	r3, [r6, #24]
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	4798      	blx	r3
 8007638:	4284      	cmp	r4, r0
 800763a:	d212      	bcs.n	8007662 <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 800763c:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800763e:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 8007640:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 8007642:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 8007648:	68e3      	ldr	r3, [r4, #12]
 800764a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800764c:	2280      	movs	r2, #128	; 0x80
 800764e:	8963      	ldrh	r3, [r4, #10]
 8007650:	0052      	lsls	r2, r2, #1
 8007652:	4293      	cmp	r3, r2
 8007654:	d102      	bne.n	800765c <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 8007656:	0020      	movs	r0, r4
 8007658:	f7ff ff70 	bl	800753c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e4      	bne.n	800762c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8007662:	6828      	ldr	r0, [r5, #0]
 8007664:	2800      	cmp	r0, #0
 8007666:	d102      	bne.n	800766e <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007668:	f387 8810 	msr	PRIMASK, r7
}
 800766c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800766e:	7a03      	ldrb	r3, [r0, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1f9      	bne.n	8007668 <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 8007674:	f7ff fef2 	bl	800745c <TimerSetTimeout>
 8007678:	e7f6      	b.n	8007668 <UTIL_TIMER_IRQ_Handler+0x70>
 800767a:	46c0      	nop			; (mov r8, r8)
 800767c:	080079b8 	.word	0x080079b8
 8007680:	2000080c 	.word	0x2000080c

08007684 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8007684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007686:	b09d      	sub	sp, #116	; 0x74
 8007688:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800768a:	2000      	movs	r0, #0
{
 800768c:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800768e:	9f02      	ldr	r7, [sp, #8]
{
 8007690:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 8007692:	4281      	cmp	r1, r0
 8007694:	dc0a      	bgt.n	80076ac <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 8007696:	b01d      	add	sp, #116	; 0x74
 8007698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800769a:	4298      	cmp	r0, r3
 800769c:	da0d      	bge.n	80076ba <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 800769e:	2925      	cmp	r1, #37	; 0x25
 80076a0:	d00e      	beq.n	80076c0 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 80076a2:	7039      	strb	r1, [r7, #0]
      continue;
 80076a4:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 80076a6:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80076a8:	9a01      	ldr	r2, [sp, #4]
 80076aa:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 80076ac:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80076ae:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 80076b0:	1af8      	subs	r0, r7, r3
 80076b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b4:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80076b6:	2900      	cmp	r1, #0
 80076b8:	d1ef      	bne.n	800769a <tiny_vsnprintf_like+0x16>
  *str = '\0';
 80076ba:	2300      	movs	r3, #0
 80076bc:	703b      	strb	r3, [r7, #0]
  return str - buf;
 80076be:	e7ea      	b.n	8007696 <tiny_vsnprintf_like+0x12>
    fmt++;
 80076c0:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 80076c2:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 80076c4:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 80076c6:	0010      	movs	r0, r2
 80076c8:	3830      	subs	r0, #48	; 0x30
 80076ca:	9204      	str	r2, [sp, #16]
 80076cc:	4241      	negs	r1, r0
 80076ce:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 80076d0:	b2c0      	uxtb	r0, r0
      flags |= ZEROPAD;
 80076d2:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 80076d4:	2809      	cmp	r0, #9
 80076d6:	d92e      	bls.n	8007736 <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 80076d8:	2001      	movs	r0, #1
 80076da:	4240      	negs	r0, r0
 80076dc:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 80076de:	9801      	ldr	r0, [sp, #4]
 80076e0:	7800      	ldrb	r0, [r0, #0]
 80076e2:	2869      	cmp	r0, #105	; 0x69
 80076e4:	d100      	bne.n	80076e8 <tiny_vsnprintf_like+0x64>
 80076e6:	e0a4      	b.n	8007832 <tiny_vsnprintf_like+0x1ae>
 80076e8:	d829      	bhi.n	800773e <tiny_vsnprintf_like+0xba>
 80076ea:	2863      	cmp	r0, #99	; 0x63
 80076ec:	d038      	beq.n	8007760 <tiny_vsnprintf_like+0xdc>
 80076ee:	2864      	cmp	r0, #100	; 0x64
 80076f0:	d100      	bne.n	80076f4 <tiny_vsnprintf_like+0x70>
 80076f2:	e09e      	b.n	8007832 <tiny_vsnprintf_like+0x1ae>
 80076f4:	2858      	cmp	r0, #88	; 0x58
 80076f6:	d066      	beq.n	80077c6 <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 80076f8:	0039      	movs	r1, r7
 80076fa:	2825      	cmp	r0, #37	; 0x25
 80076fc:	d126      	bne.n	800774c <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 80076fe:	9801      	ldr	r0, [sp, #4]
 8007700:	7800      	ldrb	r0, [r0, #0]
 8007702:	2800      	cmp	r0, #0
 8007704:	d100      	bne.n	8007708 <tiny_vsnprintf_like+0x84>
 8007706:	e098      	b.n	800783a <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 8007708:	1c4f      	adds	r7, r1, #1
 800770a:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 800770c:	9902      	ldr	r1, [sp, #8]
 800770e:	1a79      	subs	r1, r7, r1
 8007710:	4299      	cmp	r1, r3
 8007712:	db00      	blt.n	8007716 <tiny_vsnprintf_like+0x92>
 8007714:	e08f      	b.n	8007836 <tiny_vsnprintf_like+0x1b2>
 8007716:	e7c7      	b.n	80076a8 <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8007718:	9d01      	ldr	r5, [sp, #4]
 800771a:	3501      	adds	r5, #1
 800771c:	9501      	str	r5, [sp, #4]
 800771e:	9d00      	ldr	r5, [sp, #0]
 8007720:	4375      	muls	r5, r6
 8007722:	1828      	adds	r0, r5, r0
 8007724:	3830      	subs	r0, #48	; 0x30
 8007726:	9000      	str	r0, [sp, #0]
 8007728:	9801      	ldr	r0, [sp, #4]
 800772a:	7800      	ldrb	r0, [r0, #0]
 800772c:	0005      	movs	r5, r0
 800772e:	3d30      	subs	r5, #48	; 0x30
 8007730:	2d09      	cmp	r5, #9
 8007732:	d9f1      	bls.n	8007718 <tiny_vsnprintf_like+0x94>
 8007734:	e7d3      	b.n	80076de <tiny_vsnprintf_like+0x5a>
  int i = 0;
 8007736:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8007738:	260a      	movs	r6, #10
  int i = 0;
 800773a:	9000      	str	r0, [sp, #0]
 800773c:	e7f4      	b.n	8007728 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 800773e:	2875      	cmp	r0, #117	; 0x75
 8007740:	d079      	beq.n	8007836 <tiny_vsnprintf_like+0x1b2>
 8007742:	2510      	movs	r5, #16
 8007744:	2878      	cmp	r0, #120	; 0x78
 8007746:	d041      	beq.n	80077cc <tiny_vsnprintf_like+0x148>
 8007748:	2873      	cmp	r0, #115	; 0x73
 800774a:	d01d      	beq.n	8007788 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800774c:	2025      	movs	r0, #37	; 0x25
 800774e:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 8007750:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 8007752:	1c79      	adds	r1, r7, #1
 8007754:	000f      	movs	r7, r1
    base = 10;
 8007756:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 8007758:	1a08      	subs	r0, r1, r0
 800775a:	4298      	cmp	r0, r3
 800775c:	da36      	bge.n	80077cc <tiny_vsnprintf_like+0x148>
 800775e:	e7ce      	b.n	80076fe <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 8007760:	2500      	movs	r5, #0
 8007762:	9b00      	ldr	r3, [sp, #0]
 8007764:	42ab      	cmp	r3, r5
 8007766:	dd00      	ble.n	800776a <tiny_vsnprintf_like+0xe6>
 8007768:	1e5d      	subs	r5, r3, #1
 800776a:	002a      	movs	r2, r5
 800776c:	2120      	movs	r1, #32
 800776e:	0038      	movs	r0, r7
 8007770:	f000 f8df 	bl	8007932 <memset>
 8007774:	9a00      	ldr	r2, [sp, #0]
 8007776:	2301      	movs	r3, #1
 8007778:	197d      	adds	r5, r7, r5
 800777a:	2a00      	cmp	r2, #0
 800777c:	dd00      	ble.n	8007780 <tiny_vsnprintf_like+0xfc>
 800777e:	0013      	movs	r3, r2
 8007780:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 8007782:	cc08      	ldmia	r4!, {r3}
 8007784:	702b      	strb	r3, [r5, #0]
        continue;
 8007786:	e78f      	b.n	80076a8 <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 8007788:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 800778a:	2e00      	cmp	r6, #0
 800778c:	d100      	bne.n	8007790 <tiny_vsnprintf_like+0x10c>
 800778e:	4e4f      	ldr	r6, [pc, #316]	; (80078cc <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 8007790:	0030      	movs	r0, r6
 8007792:	f7f8 fcb9 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 8007796:	2300      	movs	r3, #0
 8007798:	9303      	str	r3, [sp, #12]
 800779a:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 800779c:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 800779e:	4283      	cmp	r3, r0
 80077a0:	db01      	blt.n	80077a6 <tiny_vsnprintf_like+0x122>
 80077a2:	1a1b      	subs	r3, r3, r0
 80077a4:	9303      	str	r3, [sp, #12]
 80077a6:	0038      	movs	r0, r7
 80077a8:	2120      	movs	r1, #32
 80077aa:	9a03      	ldr	r2, [sp, #12]
 80077ac:	f000 f8c1 	bl	8007932 <memset>
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 80077b4:	2300      	movs	r3, #0
 80077b6:	42ab      	cmp	r3, r5
 80077b8:	db01      	blt.n	80077be <tiny_vsnprintf_like+0x13a>
 80077ba:	197f      	adds	r7, r7, r5
 80077bc:	e774      	b.n	80076a8 <tiny_vsnprintf_like+0x24>
 80077be:	5cf2      	ldrb	r2, [r6, r3]
 80077c0:	54fa      	strb	r2, [r7, r3]
 80077c2:	3301      	adds	r3, #1
 80077c4:	e7f7      	b.n	80077b6 <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 80077c6:	2240      	movs	r2, #64	; 0x40
        base = 16;
 80077c8:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 80077ca:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80077cc:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 80077ce:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80077d0:	1a3e      	subs	r6, r7, r0
 80077d2:	0020      	movs	r0, r4
 80077d4:	1b9e      	subs	r6, r3, r6
 80077d6:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 80077d8:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80077da:	9005      	str	r0, [sp, #20]
  if (type & UPPERCASE)  dig = upper_digits;
 80077dc:	483c      	ldr	r0, [pc, #240]	; (80078d0 <tiny_vsnprintf_like+0x24c>)
 80077de:	9007      	str	r0, [sp, #28]
 80077e0:	2040      	movs	r0, #64	; 0x40
 80077e2:	4202      	tst	r2, r0
 80077e4:	d101      	bne.n	80077ea <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 80077e6:	4a3b      	ldr	r2, [pc, #236]	; (80078d4 <tiny_vsnprintf_like+0x250>)
 80077e8:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 80077ea:	2230      	movs	r2, #48	; 0x30
 80077ec:	9208      	str	r2, [sp, #32]
 80077ee:	9a04      	ldr	r2, [sp, #16]
 80077f0:	2a30      	cmp	r2, #48	; 0x30
 80077f2:	d001      	beq.n	80077f8 <tiny_vsnprintf_like+0x174>
 80077f4:	2220      	movs	r2, #32
 80077f6:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 80077f8:	2900      	cmp	r1, #0
 80077fa:	d023      	beq.n	8007844 <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	da21      	bge.n	8007844 <tiny_vsnprintf_like+0x1c0>
      size--;
 8007800:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 8007802:	425b      	negs	r3, r3
      size--;
 8007804:	3a01      	subs	r2, #1
 8007806:	9200      	str	r2, [sp, #0]
      sign = '-';
 8007808:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 800780a:	2400      	movs	r4, #0
 800780c:	9203      	str	r2, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800780e:	0018      	movs	r0, r3
 8007810:	0029      	movs	r1, r5
 8007812:	9306      	str	r3, [sp, #24]
 8007814:	f7f8 fd2e 	bl	8000274 <__aeabi_uidivmod>
 8007818:	0022      	movs	r2, r4
 800781a:	4684      	mov	ip, r0
 800781c:	9b07      	ldr	r3, [sp, #28]
 800781e:	3401      	adds	r4, #1
 8007820:	5c59      	ldrb	r1, [r3, r1]
 8007822:	ab0b      	add	r3, sp, #44	; 0x2c
 8007824:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 8007826:	9a06      	ldr	r2, [sp, #24]
 8007828:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 800782a:	4663      	mov	r3, ip
    while (num != 0)
 800782c:	4295      	cmp	r5, r2
 800782e:	d9ee      	bls.n	800780e <tiny_vsnprintf_like+0x18a>
 8007830:	e011      	b.n	8007856 <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 8007832:	2202      	movs	r2, #2
 8007834:	430a      	orrs	r2, r1
    base = 10;
 8007836:	250a      	movs	r5, #10
 8007838:	e7c8      	b.n	80077cc <tiny_vsnprintf_like+0x148>
          --fmt;
 800783a:	9801      	ldr	r0, [sp, #4]
 800783c:	000f      	movs	r7, r1
 800783e:	3801      	subs	r0, #1
 8007840:	9001      	str	r0, [sp, #4]
 8007842:	e763      	b.n	800770c <tiny_vsnprintf_like+0x88>
  if (num == 0)
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <tiny_vsnprintf_like+0x1c8>
 8007848:	2200      	movs	r2, #0
 800784a:	e7de      	b.n	800780a <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 800784c:	2130      	movs	r1, #48	; 0x30
 800784e:	2001      	movs	r0, #1
 8007850:	aa0b      	add	r2, sp, #44	; 0x2c
 8007852:	7011      	strb	r1, [r2, #0]
 8007854:	9303      	str	r3, [sp, #12]
  size -= precision;
 8007856:	9b00      	ldr	r3, [sp, #0]
 8007858:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	2b30      	cmp	r3, #48	; 0x30
 800785e:	d006      	beq.n	800786e <tiny_vsnprintf_like+0x1ea>
 8007860:	003b      	movs	r3, r7
 8007862:	2220      	movs	r2, #32
 8007864:	0021      	movs	r1, r4
 8007866:	001f      	movs	r7, r3
 8007868:	3c01      	subs	r4, #1
 800786a:	2900      	cmp	r1, #0
 800786c:	dc0c      	bgt.n	8007888 <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 800786e:	9b03      	ldr	r3, [sp, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <tiny_vsnprintf_like+0x1fc>
 8007874:	1c79      	adds	r1, r7, #1
 8007876:	3e01      	subs	r6, #1
 8007878:	703b      	strb	r3, [r7, #0]
 800787a:	000f      	movs	r7, r1
 800787c:	2e00      	cmp	r6, #0
 800787e:	d009      	beq.n	8007894 <tiny_vsnprintf_like+0x210>
 8007880:	003b      	movs	r3, r7
 8007882:	0032      	movs	r2, r6
 8007884:	1ba4      	subs	r4, r4, r6
 8007886:	e00f      	b.n	80078a8 <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007888:	3301      	adds	r3, #1
 800788a:	3e01      	subs	r6, #1
 800788c:	0019      	movs	r1, r3
 800788e:	703a      	strb	r2, [r7, #0]
 8007890:	2e00      	cmp	r6, #0
 8007892:	d1e7      	bne.n	8007864 <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007894:	000f      	movs	r7, r1
 8007896:	9c05      	ldr	r4, [sp, #20]
 8007898:	e706      	b.n	80076a8 <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 800789a:	9e08      	ldr	r6, [sp, #32]
 800789c:	3301      	adds	r3, #1
 800789e:	3a01      	subs	r2, #1
 80078a0:	0019      	movs	r1, r3
 80078a2:	702e      	strb	r6, [r5, #0]
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	d0f5      	beq.n	8007894 <tiny_vsnprintf_like+0x210>
 80078a8:	18a1      	adds	r1, r4, r2
 80078aa:	001d      	movs	r5, r3
 80078ac:	2900      	cmp	r1, #0
 80078ae:	dcf4      	bgt.n	800789a <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80078b0:	ad0b      	add	r5, sp, #44	; 0x2c
 80078b2:	189a      	adds	r2, r3, r2
 80078b4:	001c      	movs	r4, r3
 80078b6:	3801      	subs	r0, #1
 80078b8:	d201      	bcs.n	80078be <tiny_vsnprintf_like+0x23a>
 80078ba:	0019      	movs	r1, r3
 80078bc:	e7ea      	b.n	8007894 <tiny_vsnprintf_like+0x210>
 80078be:	5d46      	ldrb	r6, [r0, r5]
 80078c0:	3301      	adds	r3, #1
 80078c2:	0019      	movs	r1, r3
 80078c4:	7026      	strb	r6, [r4, #0]
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d1f4      	bne.n	80078b4 <tiny_vsnprintf_like+0x230>
 80078ca:	e7e3      	b.n	8007894 <tiny_vsnprintf_like+0x210>
 80078cc:	08007d58 	.word	0x08007d58
 80078d0:	08007d5f 	.word	0x08007d5f
 80078d4:	08007d84 	.word	0x08007d84

080078d8 <__libc_init_array>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	2600      	movs	r6, #0
 80078dc:	4d0c      	ldr	r5, [pc, #48]	; (8007910 <__libc_init_array+0x38>)
 80078de:	4c0d      	ldr	r4, [pc, #52]	; (8007914 <__libc_init_array+0x3c>)
 80078e0:	1b64      	subs	r4, r4, r5
 80078e2:	10a4      	asrs	r4, r4, #2
 80078e4:	42a6      	cmp	r6, r4
 80078e6:	d109      	bne.n	80078fc <__libc_init_array+0x24>
 80078e8:	2600      	movs	r6, #0
 80078ea:	f000 f83d 	bl	8007968 <_init>
 80078ee:	4d0a      	ldr	r5, [pc, #40]	; (8007918 <__libc_init_array+0x40>)
 80078f0:	4c0a      	ldr	r4, [pc, #40]	; (800791c <__libc_init_array+0x44>)
 80078f2:	1b64      	subs	r4, r4, r5
 80078f4:	10a4      	asrs	r4, r4, #2
 80078f6:	42a6      	cmp	r6, r4
 80078f8:	d105      	bne.n	8007906 <__libc_init_array+0x2e>
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	00b3      	lsls	r3, r6, #2
 80078fe:	58eb      	ldr	r3, [r5, r3]
 8007900:	4798      	blx	r3
 8007902:	3601      	adds	r6, #1
 8007904:	e7ee      	b.n	80078e4 <__libc_init_array+0xc>
 8007906:	00b3      	lsls	r3, r6, #2
 8007908:	58eb      	ldr	r3, [r5, r3]
 800790a:	4798      	blx	r3
 800790c:	3601      	adds	r6, #1
 800790e:	e7f2      	b.n	80078f6 <__libc_init_array+0x1e>
 8007910:	08007db4 	.word	0x08007db4
 8007914:	08007db4 	.word	0x08007db4
 8007918:	08007db4 	.word	0x08007db4
 800791c:	08007db8 	.word	0x08007db8

08007920 <memcpy>:
 8007920:	2300      	movs	r3, #0
 8007922:	b510      	push	{r4, lr}
 8007924:	429a      	cmp	r2, r3
 8007926:	d100      	bne.n	800792a <memcpy+0xa>
 8007928:	bd10      	pop	{r4, pc}
 800792a:	5ccc      	ldrb	r4, [r1, r3]
 800792c:	54c4      	strb	r4, [r0, r3]
 800792e:	3301      	adds	r3, #1
 8007930:	e7f8      	b.n	8007924 <memcpy+0x4>

08007932 <memset>:
 8007932:	0003      	movs	r3, r0
 8007934:	1882      	adds	r2, r0, r2
 8007936:	4293      	cmp	r3, r2
 8007938:	d100      	bne.n	800793c <memset+0xa>
 800793a:	4770      	bx	lr
 800793c:	7019      	strb	r1, [r3, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	e7f9      	b.n	8007936 <memset+0x4>

08007942 <strncmp>:
 8007942:	b530      	push	{r4, r5, lr}
 8007944:	0005      	movs	r5, r0
 8007946:	1e10      	subs	r0, r2, #0
 8007948:	d008      	beq.n	800795c <strncmp+0x1a>
 800794a:	2400      	movs	r4, #0
 800794c:	3a01      	subs	r2, #1
 800794e:	5d2b      	ldrb	r3, [r5, r4]
 8007950:	5d08      	ldrb	r0, [r1, r4]
 8007952:	4283      	cmp	r3, r0
 8007954:	d101      	bne.n	800795a <strncmp+0x18>
 8007956:	4294      	cmp	r4, r2
 8007958:	d101      	bne.n	800795e <strncmp+0x1c>
 800795a:	1a18      	subs	r0, r3, r0
 800795c:	bd30      	pop	{r4, r5, pc}
 800795e:	3401      	adds	r4, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f4      	bne.n	800794e <strncmp+0xc>
 8007964:	e7f9      	b.n	800795a <strncmp+0x18>
	...

08007968 <_init>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr

08007974 <_fini>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797a:	bc08      	pop	{r3}
 800797c:	469e      	mov	lr, r3
 800797e:	4770      	bx	lr
