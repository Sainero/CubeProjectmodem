
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007800  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007cf0  08007cf0  00017cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000044  20000000  08007cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007cc  20000044  08007d3c  00020044  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000810  08007d3c  00020810  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   000263cd  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006409  00000000  00000000  00046439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001370  00000000  00000000  0004c848  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001888  00000000  00000000  0004dbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001d453  00000000  00000000  0004f440  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001ab9d  00000000  00000000  0006c893  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009edea  00000000  00000000  00087430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0012621a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000037f4  00000000  00000000  00126298  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000c335  00000000  00000000  00129a8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000044 	.word	0x20000044
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080078a8 	.word	0x080078a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000048 	.word	0x20000048
 8000104:	080078a8 	.word	0x080078a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	1c08      	adds	r0, r1, #0
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	; (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	ffffffd9 	.word	0xffffffd9
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f84e 	bl	8000510 <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_lmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46ce      	mov	lr, r9
 8000484:	4647      	mov	r7, r8
 8000486:	0415      	lsls	r5, r2, #16
 8000488:	0c2d      	lsrs	r5, r5, #16
 800048a:	002e      	movs	r6, r5
 800048c:	b580      	push	{r7, lr}
 800048e:	0407      	lsls	r7, r0, #16
 8000490:	0c14      	lsrs	r4, r2, #16
 8000492:	0c3f      	lsrs	r7, r7, #16
 8000494:	4699      	mov	r9, r3
 8000496:	0c03      	lsrs	r3, r0, #16
 8000498:	437e      	muls	r6, r7
 800049a:	435d      	muls	r5, r3
 800049c:	4367      	muls	r7, r4
 800049e:	4363      	muls	r3, r4
 80004a0:	197f      	adds	r7, r7, r5
 80004a2:	0c34      	lsrs	r4, r6, #16
 80004a4:	19e4      	adds	r4, r4, r7
 80004a6:	469c      	mov	ip, r3
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	d903      	bls.n	80004b4 <__aeabi_lmul+0x34>
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	025b      	lsls	r3, r3, #9
 80004b0:	4698      	mov	r8, r3
 80004b2:	44c4      	add	ip, r8
 80004b4:	464b      	mov	r3, r9
 80004b6:	4343      	muls	r3, r0
 80004b8:	4351      	muls	r1, r2
 80004ba:	0c25      	lsrs	r5, r4, #16
 80004bc:	0436      	lsls	r6, r6, #16
 80004be:	4465      	add	r5, ip
 80004c0:	0c36      	lsrs	r6, r6, #16
 80004c2:	0424      	lsls	r4, r4, #16
 80004c4:	19a4      	adds	r4, r4, r6
 80004c6:	195b      	adds	r3, r3, r5
 80004c8:	1859      	adds	r1, r3, r1
 80004ca:	0020      	movs	r0, r4
 80004cc:	bc0c      	pop	{r2, r3}
 80004ce:	4690      	mov	r8, r2
 80004d0:	4699      	mov	r9, r3
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004d4 <__aeabi_d2uiz>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2200      	movs	r2, #0
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <__aeabi_d2uiz+0x38>)
 80004da:	0004      	movs	r4, r0
 80004dc:	000d      	movs	r5, r1
 80004de:	f001 fa6b 	bl	80019b8 <__aeabi_dcmpge>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d104      	bne.n	80004f0 <__aeabi_d2uiz+0x1c>
 80004e6:	0020      	movs	r0, r4
 80004e8:	0029      	movs	r1, r5
 80004ea:	f001 f98f 	bl	800180c <__aeabi_d2iz>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <__aeabi_d2uiz+0x38>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0020      	movs	r0, r4
 80004f6:	0029      	movs	r1, r5
 80004f8:	f000 fe40 	bl	800117c <__aeabi_dsub>
 80004fc:	f001 f986 	bl	800180c <__aeabi_d2iz>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	469c      	mov	ip, r3
 8000506:	4460      	add	r0, ip
 8000508:	e7f1      	b.n	80004ee <__aeabi_d2uiz+0x1a>
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	41e00000 	.word	0x41e00000

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	464f      	mov	r7, r9
 8000514:	4646      	mov	r6, r8
 8000516:	46d6      	mov	lr, sl
 8000518:	b5c0      	push	{r6, r7, lr}
 800051a:	0004      	movs	r4, r0
 800051c:	b082      	sub	sp, #8
 800051e:	000d      	movs	r5, r1
 8000520:	4691      	mov	r9, r2
 8000522:	4698      	mov	r8, r3
 8000524:	428b      	cmp	r3, r1
 8000526:	d82f      	bhi.n	8000588 <__udivmoddi4+0x78>
 8000528:	d02c      	beq.n	8000584 <__udivmoddi4+0x74>
 800052a:	4641      	mov	r1, r8
 800052c:	4648      	mov	r0, r9
 800052e:	f001 fa6b 	bl	8001a08 <__clzdi2>
 8000532:	0029      	movs	r1, r5
 8000534:	0006      	movs	r6, r0
 8000536:	0020      	movs	r0, r4
 8000538:	f001 fa66 	bl	8001a08 <__clzdi2>
 800053c:	1a33      	subs	r3, r6, r0
 800053e:	469c      	mov	ip, r3
 8000540:	3b20      	subs	r3, #32
 8000542:	469a      	mov	sl, r3
 8000544:	d500      	bpl.n	8000548 <__udivmoddi4+0x38>
 8000546:	e076      	b.n	8000636 <__udivmoddi4+0x126>
 8000548:	464b      	mov	r3, r9
 800054a:	4652      	mov	r2, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001f      	movs	r7, r3
 8000550:	464b      	mov	r3, r9
 8000552:	4662      	mov	r2, ip
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d828      	bhi.n	80005ae <__udivmoddi4+0x9e>
 800055c:	d025      	beq.n	80005aa <__udivmoddi4+0x9a>
 800055e:	4653      	mov	r3, sl
 8000560:	1ba4      	subs	r4, r4, r6
 8000562:	41bd      	sbcs	r5, r7
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <__udivmoddi4+0x5a>
 8000568:	e07b      	b.n	8000662 <__udivmoddi4+0x152>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	4652      	mov	r2, sl
 8000576:	4093      	lsls	r3, r2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	4662      	mov	r2, ip
 800057e:	4093      	lsls	r3, r2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	e018      	b.n	80005b6 <__udivmoddi4+0xa6>
 8000584:	4282      	cmp	r2, r0
 8000586:	d9d0      	bls.n	800052a <__udivmoddi4+0x1a>
 8000588:	2200      	movs	r2, #0
 800058a:	2300      	movs	r3, #0
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <__udivmoddi4+0x8a>
 8000596:	601c      	str	r4, [r3, #0]
 8000598:	605d      	str	r5, [r3, #4]
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	b002      	add	sp, #8
 80005a0:	bc1c      	pop	{r2, r3, r4}
 80005a2:	4690      	mov	r8, r2
 80005a4:	4699      	mov	r9, r3
 80005a6:	46a2      	mov	sl, r4
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d9d7      	bls.n	800055e <__udivmoddi4+0x4e>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4663      	mov	r3, ip
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e9      	beq.n	8000590 <__udivmoddi4+0x80>
 80005bc:	07fb      	lsls	r3, r7, #31
 80005be:	4698      	mov	r8, r3
 80005c0:	4641      	mov	r1, r8
 80005c2:	0872      	lsrs	r2, r6, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	087b      	lsrs	r3, r7, #1
 80005c8:	4666      	mov	r6, ip
 80005ca:	e00e      	b.n	80005ea <__udivmoddi4+0xda>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d101      	bne.n	80005d4 <__udivmoddi4+0xc4>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	d80c      	bhi.n	80005ee <__udivmoddi4+0xde>
 80005d4:	1aa4      	subs	r4, r4, r2
 80005d6:	419d      	sbcs	r5, r3
 80005d8:	2001      	movs	r0, #1
 80005da:	1924      	adds	r4, r4, r4
 80005dc:	416d      	adcs	r5, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1824      	adds	r4, r4, r0
 80005e4:	414d      	adcs	r5, r1
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d006      	beq.n	80005f8 <__udivmoddi4+0xe8>
 80005ea:	42ab      	cmp	r3, r5
 80005ec:	d9ee      	bls.n	80005cc <__udivmoddi4+0xbc>
 80005ee:	3e01      	subs	r6, #1
 80005f0:	1924      	adds	r4, r4, r4
 80005f2:	416d      	adcs	r5, r5
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d1f8      	bne.n	80005ea <__udivmoddi4+0xda>
 80005f8:	9800      	ldr	r0, [sp, #0]
 80005fa:	9901      	ldr	r1, [sp, #4]
 80005fc:	4653      	mov	r3, sl
 80005fe:	1900      	adds	r0, r0, r4
 8000600:	4169      	adcs	r1, r5
 8000602:	2b00      	cmp	r3, #0
 8000604:	db23      	blt.n	800064e <__udivmoddi4+0x13e>
 8000606:	002b      	movs	r3, r5
 8000608:	4652      	mov	r2, sl
 800060a:	40d3      	lsrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4664      	mov	r4, ip
 8000610:	40e2      	lsrs	r2, r4
 8000612:	001c      	movs	r4, r3
 8000614:	4653      	mov	r3, sl
 8000616:	0015      	movs	r5, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	db2d      	blt.n	8000678 <__udivmoddi4+0x168>
 800061c:	0026      	movs	r6, r4
 800061e:	4657      	mov	r7, sl
 8000620:	40be      	lsls	r6, r7
 8000622:	0033      	movs	r3, r6
 8000624:	0026      	movs	r6, r4
 8000626:	4667      	mov	r7, ip
 8000628:	40be      	lsls	r6, r7
 800062a:	0032      	movs	r2, r6
 800062c:	1a80      	subs	r0, r0, r2
 800062e:	4199      	sbcs	r1, r3
 8000630:	9000      	str	r0, [sp, #0]
 8000632:	9101      	str	r1, [sp, #4]
 8000634:	e7ac      	b.n	8000590 <__udivmoddi4+0x80>
 8000636:	4662      	mov	r2, ip
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	464a      	mov	r2, r9
 800063e:	40da      	lsrs	r2, r3
 8000640:	4661      	mov	r1, ip
 8000642:	0013      	movs	r3, r2
 8000644:	4642      	mov	r2, r8
 8000646:	408a      	lsls	r2, r1
 8000648:	0017      	movs	r7, r2
 800064a:	431f      	orrs	r7, r3
 800064c:	e780      	b.n	8000550 <__udivmoddi4+0x40>
 800064e:	4662      	mov	r2, ip
 8000650:	2320      	movs	r3, #32
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	4666      	mov	r6, ip
 8000658:	409a      	lsls	r2, r3
 800065a:	0023      	movs	r3, r4
 800065c:	40f3      	lsrs	r3, r6
 800065e:	4313      	orrs	r3, r2
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0xfc>
 8000662:	4662      	mov	r2, ip
 8000664:	2320      	movs	r3, #32
 8000666:	2100      	movs	r1, #0
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	2200      	movs	r2, #0
 800066c:	9100      	str	r1, [sp, #0]
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	2201      	movs	r2, #1
 8000672:	40da      	lsrs	r2, r3
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	e780      	b.n	800057a <__udivmoddi4+0x6a>
 8000678:	2320      	movs	r3, #32
 800067a:	4662      	mov	r2, ip
 800067c:	0026      	movs	r6, r4
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	40de      	lsrs	r6, r3
 8000682:	002f      	movs	r7, r5
 8000684:	46b0      	mov	r8, r6
 8000686:	4666      	mov	r6, ip
 8000688:	40b7      	lsls	r7, r6
 800068a:	4646      	mov	r6, r8
 800068c:	003b      	movs	r3, r7
 800068e:	4333      	orrs	r3, r6
 8000690:	e7c8      	b.n	8000624 <__udivmoddi4+0x114>
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <__aeabi_ddiv>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	4657      	mov	r7, sl
 8000698:	46de      	mov	lr, fp
 800069a:	464e      	mov	r6, r9
 800069c:	4645      	mov	r5, r8
 800069e:	b5e0      	push	{r5, r6, r7, lr}
 80006a0:	4683      	mov	fp, r0
 80006a2:	0007      	movs	r7, r0
 80006a4:	030e      	lsls	r6, r1, #12
 80006a6:	0048      	lsls	r0, r1, #1
 80006a8:	b085      	sub	sp, #20
 80006aa:	4692      	mov	sl, r2
 80006ac:	001c      	movs	r4, r3
 80006ae:	0b36      	lsrs	r6, r6, #12
 80006b0:	0d40      	lsrs	r0, r0, #21
 80006b2:	0fcd      	lsrs	r5, r1, #31
 80006b4:	2800      	cmp	r0, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_ddiv+0x26>
 80006b8:	e09d      	b.n	80007f6 <__aeabi_ddiv+0x162>
 80006ba:	4b95      	ldr	r3, [pc, #596]	; (8000910 <__aeabi_ddiv+0x27c>)
 80006bc:	4298      	cmp	r0, r3
 80006be:	d039      	beq.n	8000734 <__aeabi_ddiv+0xa0>
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	00f6      	lsls	r6, r6, #3
 80006c4:	041b      	lsls	r3, r3, #16
 80006c6:	431e      	orrs	r6, r3
 80006c8:	4a92      	ldr	r2, [pc, #584]	; (8000914 <__aeabi_ddiv+0x280>)
 80006ca:	0f7b      	lsrs	r3, r7, #29
 80006cc:	4333      	orrs	r3, r6
 80006ce:	4699      	mov	r9, r3
 80006d0:	4694      	mov	ip, r2
 80006d2:	0003      	movs	r3, r0
 80006d4:	4463      	add	r3, ip
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2300      	movs	r3, #0
 80006da:	2600      	movs	r6, #0
 80006dc:	00ff      	lsls	r7, r7, #3
 80006de:	9302      	str	r3, [sp, #8]
 80006e0:	0323      	lsls	r3, r4, #12
 80006e2:	0b1b      	lsrs	r3, r3, #12
 80006e4:	4698      	mov	r8, r3
 80006e6:	0063      	lsls	r3, r4, #1
 80006e8:	0fe4      	lsrs	r4, r4, #31
 80006ea:	4652      	mov	r2, sl
 80006ec:	0d5b      	lsrs	r3, r3, #21
 80006ee:	9401      	str	r4, [sp, #4]
 80006f0:	d100      	bne.n	80006f4 <__aeabi_ddiv+0x60>
 80006f2:	e0b3      	b.n	800085c <__aeabi_ddiv+0x1c8>
 80006f4:	4986      	ldr	r1, [pc, #536]	; (8000910 <__aeabi_ddiv+0x27c>)
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d100      	bne.n	80006fc <__aeabi_ddiv+0x68>
 80006fa:	e09e      	b.n	800083a <__aeabi_ddiv+0x1a6>
 80006fc:	4642      	mov	r2, r8
 80006fe:	00d1      	lsls	r1, r2, #3
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	0412      	lsls	r2, r2, #16
 8000704:	430a      	orrs	r2, r1
 8000706:	4651      	mov	r1, sl
 8000708:	0f49      	lsrs	r1, r1, #29
 800070a:	4311      	orrs	r1, r2
 800070c:	468b      	mov	fp, r1
 800070e:	4981      	ldr	r1, [pc, #516]	; (8000914 <__aeabi_ddiv+0x280>)
 8000710:	4652      	mov	r2, sl
 8000712:	468c      	mov	ip, r1
 8000714:	9900      	ldr	r1, [sp, #0]
 8000716:	4463      	add	r3, ip
 8000718:	1acb      	subs	r3, r1, r3
 800071a:	2100      	movs	r1, #0
 800071c:	00d2      	lsls	r2, r2, #3
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	002b      	movs	r3, r5
 8000722:	4063      	eors	r3, r4
 8000724:	469a      	mov	sl, r3
 8000726:	2e0f      	cmp	r6, #15
 8000728:	d900      	bls.n	800072c <__aeabi_ddiv+0x98>
 800072a:	e105      	b.n	8000938 <__aeabi_ddiv+0x2a4>
 800072c:	4b7a      	ldr	r3, [pc, #488]	; (8000918 <__aeabi_ddiv+0x284>)
 800072e:	00b6      	lsls	r6, r6, #2
 8000730:	599b      	ldr	r3, [r3, r6]
 8000732:	469f      	mov	pc, r3
 8000734:	465b      	mov	r3, fp
 8000736:	4333      	orrs	r3, r6
 8000738:	4699      	mov	r9, r3
 800073a:	d000      	beq.n	800073e <__aeabi_ddiv+0xaa>
 800073c:	e0b8      	b.n	80008b0 <__aeabi_ddiv+0x21c>
 800073e:	2302      	movs	r3, #2
 8000740:	2608      	movs	r6, #8
 8000742:	2700      	movs	r7, #0
 8000744:	9000      	str	r0, [sp, #0]
 8000746:	9302      	str	r3, [sp, #8]
 8000748:	e7ca      	b.n	80006e0 <__aeabi_ddiv+0x4c>
 800074a:	46cb      	mov	fp, r9
 800074c:	003a      	movs	r2, r7
 800074e:	9902      	ldr	r1, [sp, #8]
 8000750:	9501      	str	r5, [sp, #4]
 8000752:	9b01      	ldr	r3, [sp, #4]
 8000754:	469a      	mov	sl, r3
 8000756:	2902      	cmp	r1, #2
 8000758:	d027      	beq.n	80007aa <__aeabi_ddiv+0x116>
 800075a:	2903      	cmp	r1, #3
 800075c:	d100      	bne.n	8000760 <__aeabi_ddiv+0xcc>
 800075e:	e280      	b.n	8000c62 <__aeabi_ddiv+0x5ce>
 8000760:	2901      	cmp	r1, #1
 8000762:	d044      	beq.n	80007ee <__aeabi_ddiv+0x15a>
 8000764:	496d      	ldr	r1, [pc, #436]	; (800091c <__aeabi_ddiv+0x288>)
 8000766:	9b00      	ldr	r3, [sp, #0]
 8000768:	468c      	mov	ip, r1
 800076a:	4463      	add	r3, ip
 800076c:	001c      	movs	r4, r3
 800076e:	2c00      	cmp	r4, #0
 8000770:	dd38      	ble.n	80007e4 <__aeabi_ddiv+0x150>
 8000772:	0753      	lsls	r3, r2, #29
 8000774:	d000      	beq.n	8000778 <__aeabi_ddiv+0xe4>
 8000776:	e213      	b.n	8000ba0 <__aeabi_ddiv+0x50c>
 8000778:	08d2      	lsrs	r2, r2, #3
 800077a:	465b      	mov	r3, fp
 800077c:	01db      	lsls	r3, r3, #7
 800077e:	d509      	bpl.n	8000794 <__aeabi_ddiv+0x100>
 8000780:	4659      	mov	r1, fp
 8000782:	4b67      	ldr	r3, [pc, #412]	; (8000920 <__aeabi_ddiv+0x28c>)
 8000784:	4019      	ands	r1, r3
 8000786:	468b      	mov	fp, r1
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	00c9      	lsls	r1, r1, #3
 800078c:	468c      	mov	ip, r1
 800078e:	9b00      	ldr	r3, [sp, #0]
 8000790:	4463      	add	r3, ip
 8000792:	001c      	movs	r4, r3
 8000794:	4b63      	ldr	r3, [pc, #396]	; (8000924 <__aeabi_ddiv+0x290>)
 8000796:	429c      	cmp	r4, r3
 8000798:	dc07      	bgt.n	80007aa <__aeabi_ddiv+0x116>
 800079a:	465b      	mov	r3, fp
 800079c:	0564      	lsls	r4, r4, #21
 800079e:	075f      	lsls	r7, r3, #29
 80007a0:	025b      	lsls	r3, r3, #9
 80007a2:	4317      	orrs	r7, r2
 80007a4:	0b1b      	lsrs	r3, r3, #12
 80007a6:	0d62      	lsrs	r2, r4, #21
 80007a8:	e002      	b.n	80007b0 <__aeabi_ddiv+0x11c>
 80007aa:	2300      	movs	r3, #0
 80007ac:	2700      	movs	r7, #0
 80007ae:	4a58      	ldr	r2, [pc, #352]	; (8000910 <__aeabi_ddiv+0x27c>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	031b      	lsls	r3, r3, #12
 80007b4:	0b1c      	lsrs	r4, r3, #12
 80007b6:	0d0b      	lsrs	r3, r1, #20
 80007b8:	051b      	lsls	r3, r3, #20
 80007ba:	4323      	orrs	r3, r4
 80007bc:	0514      	lsls	r4, r2, #20
 80007be:	4a5a      	ldr	r2, [pc, #360]	; (8000928 <__aeabi_ddiv+0x294>)
 80007c0:	0038      	movs	r0, r7
 80007c2:	4013      	ands	r3, r2
 80007c4:	431c      	orrs	r4, r3
 80007c6:	4653      	mov	r3, sl
 80007c8:	0064      	lsls	r4, r4, #1
 80007ca:	07db      	lsls	r3, r3, #31
 80007cc:	0864      	lsrs	r4, r4, #1
 80007ce:	431c      	orrs	r4, r3
 80007d0:	0021      	movs	r1, r4
 80007d2:	b005      	add	sp, #20
 80007d4:	bc3c      	pop	{r2, r3, r4, r5}
 80007d6:	4690      	mov	r8, r2
 80007d8:	4699      	mov	r9, r3
 80007da:	46a2      	mov	sl, r4
 80007dc:	46ab      	mov	fp, r5
 80007de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e0:	2201      	movs	r2, #1
 80007e2:	4252      	negs	r2, r2
 80007e4:	2301      	movs	r3, #1
 80007e6:	1b1b      	subs	r3, r3, r4
 80007e8:	2b38      	cmp	r3, #56	; 0x38
 80007ea:	dc00      	bgt.n	80007ee <__aeabi_ddiv+0x15a>
 80007ec:	e1ad      	b.n	8000b4a <__aeabi_ddiv+0x4b6>
 80007ee:	2200      	movs	r2, #0
 80007f0:	2300      	movs	r3, #0
 80007f2:	2700      	movs	r7, #0
 80007f4:	e7dc      	b.n	80007b0 <__aeabi_ddiv+0x11c>
 80007f6:	465b      	mov	r3, fp
 80007f8:	4333      	orrs	r3, r6
 80007fa:	4699      	mov	r9, r3
 80007fc:	d05e      	beq.n	80008bc <__aeabi_ddiv+0x228>
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_ddiv+0x170>
 8000802:	e18a      	b.n	8000b1a <__aeabi_ddiv+0x486>
 8000804:	0030      	movs	r0, r6
 8000806:	f001 f8e1 	bl	80019cc <__clzsi2>
 800080a:	0003      	movs	r3, r0
 800080c:	3b0b      	subs	r3, #11
 800080e:	2b1c      	cmp	r3, #28
 8000810:	dd00      	ble.n	8000814 <__aeabi_ddiv+0x180>
 8000812:	e17b      	b.n	8000b0c <__aeabi_ddiv+0x478>
 8000814:	221d      	movs	r2, #29
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	465a      	mov	r2, fp
 800081a:	0001      	movs	r1, r0
 800081c:	40da      	lsrs	r2, r3
 800081e:	3908      	subs	r1, #8
 8000820:	408e      	lsls	r6, r1
 8000822:	0013      	movs	r3, r2
 8000824:	465f      	mov	r7, fp
 8000826:	4333      	orrs	r3, r6
 8000828:	4699      	mov	r9, r3
 800082a:	408f      	lsls	r7, r1
 800082c:	4b3f      	ldr	r3, [pc, #252]	; (800092c <__aeabi_ddiv+0x298>)
 800082e:	2600      	movs	r6, #0
 8000830:	1a1b      	subs	r3, r3, r0
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2300      	movs	r3, #0
 8000836:	9302      	str	r3, [sp, #8]
 8000838:	e752      	b.n	80006e0 <__aeabi_ddiv+0x4c>
 800083a:	4641      	mov	r1, r8
 800083c:	4653      	mov	r3, sl
 800083e:	430b      	orrs	r3, r1
 8000840:	493b      	ldr	r1, [pc, #236]	; (8000930 <__aeabi_ddiv+0x29c>)
 8000842:	469b      	mov	fp, r3
 8000844:	468c      	mov	ip, r1
 8000846:	9b00      	ldr	r3, [sp, #0]
 8000848:	4463      	add	r3, ip
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	465b      	mov	r3, fp
 800084e:	2b00      	cmp	r3, #0
 8000850:	d13b      	bne.n	80008ca <__aeabi_ddiv+0x236>
 8000852:	2302      	movs	r3, #2
 8000854:	2200      	movs	r2, #0
 8000856:	431e      	orrs	r6, r3
 8000858:	2102      	movs	r1, #2
 800085a:	e761      	b.n	8000720 <__aeabi_ddiv+0x8c>
 800085c:	4643      	mov	r3, r8
 800085e:	4313      	orrs	r3, r2
 8000860:	469b      	mov	fp, r3
 8000862:	d037      	beq.n	80008d4 <__aeabi_ddiv+0x240>
 8000864:	4643      	mov	r3, r8
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_ddiv+0x1d8>
 800086a:	e162      	b.n	8000b32 <__aeabi_ddiv+0x49e>
 800086c:	4640      	mov	r0, r8
 800086e:	f001 f8ad 	bl	80019cc <__clzsi2>
 8000872:	0003      	movs	r3, r0
 8000874:	3b0b      	subs	r3, #11
 8000876:	2b1c      	cmp	r3, #28
 8000878:	dd00      	ble.n	800087c <__aeabi_ddiv+0x1e8>
 800087a:	e153      	b.n	8000b24 <__aeabi_ddiv+0x490>
 800087c:	0002      	movs	r2, r0
 800087e:	4641      	mov	r1, r8
 8000880:	3a08      	subs	r2, #8
 8000882:	4091      	lsls	r1, r2
 8000884:	4688      	mov	r8, r1
 8000886:	211d      	movs	r1, #29
 8000888:	1acb      	subs	r3, r1, r3
 800088a:	4651      	mov	r1, sl
 800088c:	40d9      	lsrs	r1, r3
 800088e:	000b      	movs	r3, r1
 8000890:	4641      	mov	r1, r8
 8000892:	430b      	orrs	r3, r1
 8000894:	469b      	mov	fp, r3
 8000896:	4653      	mov	r3, sl
 8000898:	4093      	lsls	r3, r2
 800089a:	001a      	movs	r2, r3
 800089c:	9b00      	ldr	r3, [sp, #0]
 800089e:	4925      	ldr	r1, [pc, #148]	; (8000934 <__aeabi_ddiv+0x2a0>)
 80008a0:	469c      	mov	ip, r3
 80008a2:	4460      	add	r0, ip
 80008a4:	0003      	movs	r3, r0
 80008a6:	468c      	mov	ip, r1
 80008a8:	4463      	add	r3, ip
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2100      	movs	r1, #0
 80008ae:	e737      	b.n	8000720 <__aeabi_ddiv+0x8c>
 80008b0:	2303      	movs	r3, #3
 80008b2:	46b1      	mov	r9, r6
 80008b4:	9000      	str	r0, [sp, #0]
 80008b6:	260c      	movs	r6, #12
 80008b8:	9302      	str	r3, [sp, #8]
 80008ba:	e711      	b.n	80006e0 <__aeabi_ddiv+0x4c>
 80008bc:	2300      	movs	r3, #0
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	2604      	movs	r6, #4
 80008c4:	2700      	movs	r7, #0
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	e70a      	b.n	80006e0 <__aeabi_ddiv+0x4c>
 80008ca:	2303      	movs	r3, #3
 80008cc:	46c3      	mov	fp, r8
 80008ce:	431e      	orrs	r6, r3
 80008d0:	2103      	movs	r1, #3
 80008d2:	e725      	b.n	8000720 <__aeabi_ddiv+0x8c>
 80008d4:	3301      	adds	r3, #1
 80008d6:	431e      	orrs	r6, r3
 80008d8:	2200      	movs	r2, #0
 80008da:	2101      	movs	r1, #1
 80008dc:	e720      	b.n	8000720 <__aeabi_ddiv+0x8c>
 80008de:	2300      	movs	r3, #0
 80008e0:	469a      	mov	sl, r3
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	2700      	movs	r7, #0
 80008e6:	031b      	lsls	r3, r3, #12
 80008e8:	4a09      	ldr	r2, [pc, #36]	; (8000910 <__aeabi_ddiv+0x27c>)
 80008ea:	e761      	b.n	80007b0 <__aeabi_ddiv+0x11c>
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	4649      	mov	r1, r9
 80008f0:	031b      	lsls	r3, r3, #12
 80008f2:	4219      	tst	r1, r3
 80008f4:	d100      	bne.n	80008f8 <__aeabi_ddiv+0x264>
 80008f6:	e0e2      	b.n	8000abe <__aeabi_ddiv+0x42a>
 80008f8:	4659      	mov	r1, fp
 80008fa:	4219      	tst	r1, r3
 80008fc:	d000      	beq.n	8000900 <__aeabi_ddiv+0x26c>
 80008fe:	e0de      	b.n	8000abe <__aeabi_ddiv+0x42a>
 8000900:	430b      	orrs	r3, r1
 8000902:	031b      	lsls	r3, r3, #12
 8000904:	0017      	movs	r7, r2
 8000906:	0b1b      	lsrs	r3, r3, #12
 8000908:	46a2      	mov	sl, r4
 800090a:	4a01      	ldr	r2, [pc, #4]	; (8000910 <__aeabi_ddiv+0x27c>)
 800090c:	e750      	b.n	80007b0 <__aeabi_ddiv+0x11c>
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	000007ff 	.word	0x000007ff
 8000914:	fffffc01 	.word	0xfffffc01
 8000918:	08007b38 	.word	0x08007b38
 800091c:	000003ff 	.word	0x000003ff
 8000920:	feffffff 	.word	0xfeffffff
 8000924:	000007fe 	.word	0x000007fe
 8000928:	800fffff 	.word	0x800fffff
 800092c:	fffffc0d 	.word	0xfffffc0d
 8000930:	fffff801 	.word	0xfffff801
 8000934:	000003f3 	.word	0x000003f3
 8000938:	45d9      	cmp	r9, fp
 800093a:	d900      	bls.n	800093e <__aeabi_ddiv+0x2aa>
 800093c:	e0cb      	b.n	8000ad6 <__aeabi_ddiv+0x442>
 800093e:	d100      	bne.n	8000942 <__aeabi_ddiv+0x2ae>
 8000940:	e0c6      	b.n	8000ad0 <__aeabi_ddiv+0x43c>
 8000942:	003c      	movs	r4, r7
 8000944:	4648      	mov	r0, r9
 8000946:	2700      	movs	r7, #0
 8000948:	9b00      	ldr	r3, [sp, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	465b      	mov	r3, fp
 8000950:	0e16      	lsrs	r6, r2, #24
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	431e      	orrs	r6, r3
 8000956:	0213      	lsls	r3, r2, #8
 8000958:	4698      	mov	r8, r3
 800095a:	0433      	lsls	r3, r6, #16
 800095c:	0c1b      	lsrs	r3, r3, #16
 800095e:	4699      	mov	r9, r3
 8000960:	0c31      	lsrs	r1, r6, #16
 8000962:	9101      	str	r1, [sp, #4]
 8000964:	f7ff fc7c 	bl	8000260 <__aeabi_uidivmod>
 8000968:	464a      	mov	r2, r9
 800096a:	4342      	muls	r2, r0
 800096c:	040b      	lsls	r3, r1, #16
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	0005      	movs	r5, r0
 8000972:	4319      	orrs	r1, r3
 8000974:	428a      	cmp	r2, r1
 8000976:	d907      	bls.n	8000988 <__aeabi_ddiv+0x2f4>
 8000978:	1989      	adds	r1, r1, r6
 800097a:	3d01      	subs	r5, #1
 800097c:	428e      	cmp	r6, r1
 800097e:	d803      	bhi.n	8000988 <__aeabi_ddiv+0x2f4>
 8000980:	428a      	cmp	r2, r1
 8000982:	d901      	bls.n	8000988 <__aeabi_ddiv+0x2f4>
 8000984:	1e85      	subs	r5, r0, #2
 8000986:	1989      	adds	r1, r1, r6
 8000988:	1a88      	subs	r0, r1, r2
 800098a:	9901      	ldr	r1, [sp, #4]
 800098c:	f7ff fc68 	bl	8000260 <__aeabi_uidivmod>
 8000990:	0409      	lsls	r1, r1, #16
 8000992:	468c      	mov	ip, r1
 8000994:	464a      	mov	r2, r9
 8000996:	0421      	lsls	r1, r4, #16
 8000998:	4664      	mov	r4, ip
 800099a:	4342      	muls	r2, r0
 800099c:	0c09      	lsrs	r1, r1, #16
 800099e:	0003      	movs	r3, r0
 80009a0:	4321      	orrs	r1, r4
 80009a2:	428a      	cmp	r2, r1
 80009a4:	d904      	bls.n	80009b0 <__aeabi_ddiv+0x31c>
 80009a6:	1989      	adds	r1, r1, r6
 80009a8:	3b01      	subs	r3, #1
 80009aa:	428e      	cmp	r6, r1
 80009ac:	d800      	bhi.n	80009b0 <__aeabi_ddiv+0x31c>
 80009ae:	e0f1      	b.n	8000b94 <__aeabi_ddiv+0x500>
 80009b0:	042d      	lsls	r5, r5, #16
 80009b2:	431d      	orrs	r5, r3
 80009b4:	46ab      	mov	fp, r5
 80009b6:	4643      	mov	r3, r8
 80009b8:	1a89      	subs	r1, r1, r2
 80009ba:	4642      	mov	r2, r8
 80009bc:	0c28      	lsrs	r0, r5, #16
 80009be:	0412      	lsls	r2, r2, #16
 80009c0:	0c1d      	lsrs	r5, r3, #16
 80009c2:	465b      	mov	r3, fp
 80009c4:	0c14      	lsrs	r4, r2, #16
 80009c6:	0022      	movs	r2, r4
 80009c8:	041b      	lsls	r3, r3, #16
 80009ca:	0c1b      	lsrs	r3, r3, #16
 80009cc:	435a      	muls	r2, r3
 80009ce:	9403      	str	r4, [sp, #12]
 80009d0:	436b      	muls	r3, r5
 80009d2:	4344      	muls	r4, r0
 80009d4:	9502      	str	r5, [sp, #8]
 80009d6:	4368      	muls	r0, r5
 80009d8:	191b      	adds	r3, r3, r4
 80009da:	0c15      	lsrs	r5, r2, #16
 80009dc:	18eb      	adds	r3, r5, r3
 80009de:	429c      	cmp	r4, r3
 80009e0:	d903      	bls.n	80009ea <__aeabi_ddiv+0x356>
 80009e2:	2480      	movs	r4, #128	; 0x80
 80009e4:	0264      	lsls	r4, r4, #9
 80009e6:	46a4      	mov	ip, r4
 80009e8:	4460      	add	r0, ip
 80009ea:	0c1c      	lsrs	r4, r3, #16
 80009ec:	0415      	lsls	r5, r2, #16
 80009ee:	041b      	lsls	r3, r3, #16
 80009f0:	0c2d      	lsrs	r5, r5, #16
 80009f2:	1820      	adds	r0, r4, r0
 80009f4:	195d      	adds	r5, r3, r5
 80009f6:	4281      	cmp	r1, r0
 80009f8:	d377      	bcc.n	8000aea <__aeabi_ddiv+0x456>
 80009fa:	d073      	beq.n	8000ae4 <__aeabi_ddiv+0x450>
 80009fc:	1a0c      	subs	r4, r1, r0
 80009fe:	4aa2      	ldr	r2, [pc, #648]	; (8000c88 <__aeabi_ddiv+0x5f4>)
 8000a00:	1b7d      	subs	r5, r7, r5
 8000a02:	42af      	cmp	r7, r5
 8000a04:	41bf      	sbcs	r7, r7
 8000a06:	4694      	mov	ip, r2
 8000a08:	9b00      	ldr	r3, [sp, #0]
 8000a0a:	427f      	negs	r7, r7
 8000a0c:	4463      	add	r3, ip
 8000a0e:	1be0      	subs	r0, r4, r7
 8000a10:	001c      	movs	r4, r3
 8000a12:	4286      	cmp	r6, r0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_ddiv+0x384>
 8000a16:	e0db      	b.n	8000bd0 <__aeabi_ddiv+0x53c>
 8000a18:	9901      	ldr	r1, [sp, #4]
 8000a1a:	f7ff fc21 	bl	8000260 <__aeabi_uidivmod>
 8000a1e:	464a      	mov	r2, r9
 8000a20:	4342      	muls	r2, r0
 8000a22:	040b      	lsls	r3, r1, #16
 8000a24:	0c29      	lsrs	r1, r5, #16
 8000a26:	0007      	movs	r7, r0
 8000a28:	4319      	orrs	r1, r3
 8000a2a:	428a      	cmp	r2, r1
 8000a2c:	d907      	bls.n	8000a3e <__aeabi_ddiv+0x3aa>
 8000a2e:	1989      	adds	r1, r1, r6
 8000a30:	3f01      	subs	r7, #1
 8000a32:	428e      	cmp	r6, r1
 8000a34:	d803      	bhi.n	8000a3e <__aeabi_ddiv+0x3aa>
 8000a36:	428a      	cmp	r2, r1
 8000a38:	d901      	bls.n	8000a3e <__aeabi_ddiv+0x3aa>
 8000a3a:	1e87      	subs	r7, r0, #2
 8000a3c:	1989      	adds	r1, r1, r6
 8000a3e:	1a88      	subs	r0, r1, r2
 8000a40:	9901      	ldr	r1, [sp, #4]
 8000a42:	f7ff fc0d 	bl	8000260 <__aeabi_uidivmod>
 8000a46:	0409      	lsls	r1, r1, #16
 8000a48:	464a      	mov	r2, r9
 8000a4a:	4689      	mov	r9, r1
 8000a4c:	0429      	lsls	r1, r5, #16
 8000a4e:	464d      	mov	r5, r9
 8000a50:	4342      	muls	r2, r0
 8000a52:	0c09      	lsrs	r1, r1, #16
 8000a54:	0003      	movs	r3, r0
 8000a56:	4329      	orrs	r1, r5
 8000a58:	428a      	cmp	r2, r1
 8000a5a:	d907      	bls.n	8000a6c <__aeabi_ddiv+0x3d8>
 8000a5c:	1989      	adds	r1, r1, r6
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	428e      	cmp	r6, r1
 8000a62:	d803      	bhi.n	8000a6c <__aeabi_ddiv+0x3d8>
 8000a64:	428a      	cmp	r2, r1
 8000a66:	d901      	bls.n	8000a6c <__aeabi_ddiv+0x3d8>
 8000a68:	1e83      	subs	r3, r0, #2
 8000a6a:	1989      	adds	r1, r1, r6
 8000a6c:	043f      	lsls	r7, r7, #16
 8000a6e:	1a89      	subs	r1, r1, r2
 8000a70:	003a      	movs	r2, r7
 8000a72:	9f03      	ldr	r7, [sp, #12]
 8000a74:	431a      	orrs	r2, r3
 8000a76:	0038      	movs	r0, r7
 8000a78:	0413      	lsls	r3, r2, #16
 8000a7a:	0c1b      	lsrs	r3, r3, #16
 8000a7c:	4358      	muls	r0, r3
 8000a7e:	4681      	mov	r9, r0
 8000a80:	9802      	ldr	r0, [sp, #8]
 8000a82:	0c15      	lsrs	r5, r2, #16
 8000a84:	436f      	muls	r7, r5
 8000a86:	4343      	muls	r3, r0
 8000a88:	4345      	muls	r5, r0
 8000a8a:	4648      	mov	r0, r9
 8000a8c:	0c00      	lsrs	r0, r0, #16
 8000a8e:	4684      	mov	ip, r0
 8000a90:	19db      	adds	r3, r3, r7
 8000a92:	4463      	add	r3, ip
 8000a94:	429f      	cmp	r7, r3
 8000a96:	d903      	bls.n	8000aa0 <__aeabi_ddiv+0x40c>
 8000a98:	2080      	movs	r0, #128	; 0x80
 8000a9a:	0240      	lsls	r0, r0, #9
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4465      	add	r5, ip
 8000aa0:	4648      	mov	r0, r9
 8000aa2:	0c1f      	lsrs	r7, r3, #16
 8000aa4:	0400      	lsls	r0, r0, #16
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	0c00      	lsrs	r0, r0, #16
 8000aaa:	197d      	adds	r5, r7, r5
 8000aac:	1818      	adds	r0, r3, r0
 8000aae:	42a9      	cmp	r1, r5
 8000ab0:	d200      	bcs.n	8000ab4 <__aeabi_ddiv+0x420>
 8000ab2:	e084      	b.n	8000bbe <__aeabi_ddiv+0x52a>
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_ddiv+0x424>
 8000ab6:	e07f      	b.n	8000bb8 <__aeabi_ddiv+0x524>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	431a      	orrs	r2, r3
 8000abc:	e657      	b.n	800076e <__aeabi_ddiv+0xda>
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	031b      	lsls	r3, r3, #12
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	031b      	lsls	r3, r3, #12
 8000ac8:	0b1b      	lsrs	r3, r3, #12
 8000aca:	46aa      	mov	sl, r5
 8000acc:	4a6f      	ldr	r2, [pc, #444]	; (8000c8c <__aeabi_ddiv+0x5f8>)
 8000ace:	e66f      	b.n	80007b0 <__aeabi_ddiv+0x11c>
 8000ad0:	42ba      	cmp	r2, r7
 8000ad2:	d900      	bls.n	8000ad6 <__aeabi_ddiv+0x442>
 8000ad4:	e735      	b.n	8000942 <__aeabi_ddiv+0x2ae>
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	07dc      	lsls	r4, r3, #31
 8000ada:	0858      	lsrs	r0, r3, #1
 8000adc:	087b      	lsrs	r3, r7, #1
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	07ff      	lsls	r7, r7, #31
 8000ae2:	e734      	b.n	800094e <__aeabi_ddiv+0x2ba>
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	42af      	cmp	r7, r5
 8000ae8:	d289      	bcs.n	80009fe <__aeabi_ddiv+0x36a>
 8000aea:	4447      	add	r7, r8
 8000aec:	4547      	cmp	r7, r8
 8000aee:	41a4      	sbcs	r4, r4
 8000af0:	465b      	mov	r3, fp
 8000af2:	4264      	negs	r4, r4
 8000af4:	19a4      	adds	r4, r4, r6
 8000af6:	1864      	adds	r4, r4, r1
 8000af8:	3b01      	subs	r3, #1
 8000afa:	42a6      	cmp	r6, r4
 8000afc:	d21e      	bcs.n	8000b3c <__aeabi_ddiv+0x4a8>
 8000afe:	42a0      	cmp	r0, r4
 8000b00:	d86d      	bhi.n	8000bde <__aeabi_ddiv+0x54a>
 8000b02:	d100      	bne.n	8000b06 <__aeabi_ddiv+0x472>
 8000b04:	e0b6      	b.n	8000c74 <__aeabi_ddiv+0x5e0>
 8000b06:	1a24      	subs	r4, r4, r0
 8000b08:	469b      	mov	fp, r3
 8000b0a:	e778      	b.n	80009fe <__aeabi_ddiv+0x36a>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	465a      	mov	r2, fp
 8000b10:	3b28      	subs	r3, #40	; 0x28
 8000b12:	409a      	lsls	r2, r3
 8000b14:	2700      	movs	r7, #0
 8000b16:	4691      	mov	r9, r2
 8000b18:	e688      	b.n	800082c <__aeabi_ddiv+0x198>
 8000b1a:	4658      	mov	r0, fp
 8000b1c:	f000 ff56 	bl	80019cc <__clzsi2>
 8000b20:	3020      	adds	r0, #32
 8000b22:	e672      	b.n	800080a <__aeabi_ddiv+0x176>
 8000b24:	0003      	movs	r3, r0
 8000b26:	4652      	mov	r2, sl
 8000b28:	3b28      	subs	r3, #40	; 0x28
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	4693      	mov	fp, r2
 8000b2e:	2200      	movs	r2, #0
 8000b30:	e6b4      	b.n	800089c <__aeabi_ddiv+0x208>
 8000b32:	4650      	mov	r0, sl
 8000b34:	f000 ff4a 	bl	80019cc <__clzsi2>
 8000b38:	3020      	adds	r0, #32
 8000b3a:	e69a      	b.n	8000872 <__aeabi_ddiv+0x1de>
 8000b3c:	42a6      	cmp	r6, r4
 8000b3e:	d1e2      	bne.n	8000b06 <__aeabi_ddiv+0x472>
 8000b40:	45b8      	cmp	r8, r7
 8000b42:	d9dc      	bls.n	8000afe <__aeabi_ddiv+0x46a>
 8000b44:	1a34      	subs	r4, r6, r0
 8000b46:	469b      	mov	fp, r3
 8000b48:	e759      	b.n	80009fe <__aeabi_ddiv+0x36a>
 8000b4a:	2b1f      	cmp	r3, #31
 8000b4c:	dc65      	bgt.n	8000c1a <__aeabi_ddiv+0x586>
 8000b4e:	4c50      	ldr	r4, [pc, #320]	; (8000c90 <__aeabi_ddiv+0x5fc>)
 8000b50:	9900      	ldr	r1, [sp, #0]
 8000b52:	46a4      	mov	ip, r4
 8000b54:	465c      	mov	r4, fp
 8000b56:	4461      	add	r1, ip
 8000b58:	0008      	movs	r0, r1
 8000b5a:	408c      	lsls	r4, r1
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	4082      	lsls	r2, r0
 8000b60:	40d9      	lsrs	r1, r3
 8000b62:	1e50      	subs	r0, r2, #1
 8000b64:	4182      	sbcs	r2, r0
 8000b66:	430c      	orrs	r4, r1
 8000b68:	4314      	orrs	r4, r2
 8000b6a:	465a      	mov	r2, fp
 8000b6c:	40da      	lsrs	r2, r3
 8000b6e:	0013      	movs	r3, r2
 8000b70:	0762      	lsls	r2, r4, #29
 8000b72:	d009      	beq.n	8000b88 <__aeabi_ddiv+0x4f4>
 8000b74:	220f      	movs	r2, #15
 8000b76:	4022      	ands	r2, r4
 8000b78:	2a04      	cmp	r2, #4
 8000b7a:	d005      	beq.n	8000b88 <__aeabi_ddiv+0x4f4>
 8000b7c:	0022      	movs	r2, r4
 8000b7e:	1d14      	adds	r4, r2, #4
 8000b80:	4294      	cmp	r4, r2
 8000b82:	4189      	sbcs	r1, r1
 8000b84:	4249      	negs	r1, r1
 8000b86:	185b      	adds	r3, r3, r1
 8000b88:	021a      	lsls	r2, r3, #8
 8000b8a:	d562      	bpl.n	8000c52 <__aeabi_ddiv+0x5be>
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2700      	movs	r7, #0
 8000b92:	e60d      	b.n	80007b0 <__aeabi_ddiv+0x11c>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	d800      	bhi.n	8000b9a <__aeabi_ddiv+0x506>
 8000b98:	e70a      	b.n	80009b0 <__aeabi_ddiv+0x31c>
 8000b9a:	1e83      	subs	r3, r0, #2
 8000b9c:	1989      	adds	r1, r1, r6
 8000b9e:	e707      	b.n	80009b0 <__aeabi_ddiv+0x31c>
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d100      	bne.n	8000baa <__aeabi_ddiv+0x516>
 8000ba8:	e5e6      	b.n	8000778 <__aeabi_ddiv+0xe4>
 8000baa:	1d17      	adds	r7, r2, #4
 8000bac:	4297      	cmp	r7, r2
 8000bae:	4192      	sbcs	r2, r2
 8000bb0:	4253      	negs	r3, r2
 8000bb2:	449b      	add	fp, r3
 8000bb4:	08fa      	lsrs	r2, r7, #3
 8000bb6:	e5e0      	b.n	800077a <__aeabi_ddiv+0xe6>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_ddiv+0x52a>
 8000bbc:	e5d7      	b.n	800076e <__aeabi_ddiv+0xda>
 8000bbe:	1871      	adds	r1, r6, r1
 8000bc0:	1e53      	subs	r3, r2, #1
 8000bc2:	42b1      	cmp	r1, r6
 8000bc4:	d327      	bcc.n	8000c16 <__aeabi_ddiv+0x582>
 8000bc6:	42a9      	cmp	r1, r5
 8000bc8:	d315      	bcc.n	8000bf6 <__aeabi_ddiv+0x562>
 8000bca:	d058      	beq.n	8000c7e <__aeabi_ddiv+0x5ea>
 8000bcc:	001a      	movs	r2, r3
 8000bce:	e773      	b.n	8000ab8 <__aeabi_ddiv+0x424>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dc00      	bgt.n	8000bd6 <__aeabi_ddiv+0x542>
 8000bd4:	e604      	b.n	80007e0 <__aeabi_ddiv+0x14c>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	449b      	add	fp, r3
 8000bdc:	e5cd      	b.n	800077a <__aeabi_ddiv+0xe6>
 8000bde:	2302      	movs	r3, #2
 8000be0:	4447      	add	r7, r8
 8000be2:	4547      	cmp	r7, r8
 8000be4:	4189      	sbcs	r1, r1
 8000be6:	425b      	negs	r3, r3
 8000be8:	469c      	mov	ip, r3
 8000bea:	4249      	negs	r1, r1
 8000bec:	1989      	adds	r1, r1, r6
 8000bee:	190c      	adds	r4, r1, r4
 8000bf0:	44e3      	add	fp, ip
 8000bf2:	1a24      	subs	r4, r4, r0
 8000bf4:	e703      	b.n	80009fe <__aeabi_ddiv+0x36a>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	005f      	lsls	r7, r3, #1
 8000bfa:	4547      	cmp	r7, r8
 8000bfc:	419b      	sbcs	r3, r3
 8000bfe:	46b8      	mov	r8, r7
 8000c00:	425b      	negs	r3, r3
 8000c02:	199e      	adds	r6, r3, r6
 8000c04:	3a02      	subs	r2, #2
 8000c06:	1989      	adds	r1, r1, r6
 8000c08:	42a9      	cmp	r1, r5
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_ddiv+0x57a>
 8000c0c:	e754      	b.n	8000ab8 <__aeabi_ddiv+0x424>
 8000c0e:	4540      	cmp	r0, r8
 8000c10:	d000      	beq.n	8000c14 <__aeabi_ddiv+0x580>
 8000c12:	e751      	b.n	8000ab8 <__aeabi_ddiv+0x424>
 8000c14:	e5ab      	b.n	800076e <__aeabi_ddiv+0xda>
 8000c16:	001a      	movs	r2, r3
 8000c18:	e7f6      	b.n	8000c08 <__aeabi_ddiv+0x574>
 8000c1a:	211f      	movs	r1, #31
 8000c1c:	465f      	mov	r7, fp
 8000c1e:	4249      	negs	r1, r1
 8000c20:	1b0c      	subs	r4, r1, r4
 8000c22:	40e7      	lsrs	r7, r4
 8000c24:	2b20      	cmp	r3, #32
 8000c26:	d007      	beq.n	8000c38 <__aeabi_ddiv+0x5a4>
 8000c28:	491a      	ldr	r1, [pc, #104]	; (8000c94 <__aeabi_ddiv+0x600>)
 8000c2a:	9b00      	ldr	r3, [sp, #0]
 8000c2c:	468c      	mov	ip, r1
 8000c2e:	4463      	add	r3, ip
 8000c30:	0018      	movs	r0, r3
 8000c32:	465b      	mov	r3, fp
 8000c34:	4083      	lsls	r3, r0
 8000c36:	431a      	orrs	r2, r3
 8000c38:	1e50      	subs	r0, r2, #1
 8000c3a:	4182      	sbcs	r2, r0
 8000c3c:	433a      	orrs	r2, r7
 8000c3e:	2707      	movs	r7, #7
 8000c40:	2300      	movs	r3, #0
 8000c42:	4017      	ands	r7, r2
 8000c44:	d009      	beq.n	8000c5a <__aeabi_ddiv+0x5c6>
 8000c46:	210f      	movs	r1, #15
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4011      	ands	r1, r2
 8000c4c:	0014      	movs	r4, r2
 8000c4e:	2904      	cmp	r1, #4
 8000c50:	d195      	bne.n	8000b7e <__aeabi_ddiv+0x4ea>
 8000c52:	0022      	movs	r2, r4
 8000c54:	075f      	lsls	r7, r3, #29
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	0b1b      	lsrs	r3, r3, #12
 8000c5a:	08d2      	lsrs	r2, r2, #3
 8000c5c:	4317      	orrs	r7, r2
 8000c5e:	2200      	movs	r2, #0
 8000c60:	e5a6      	b.n	80007b0 <__aeabi_ddiv+0x11c>
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	4659      	mov	r1, fp
 8000c66:	031b      	lsls	r3, r3, #12
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	031b      	lsls	r3, r3, #12
 8000c6c:	0017      	movs	r7, r2
 8000c6e:	0b1b      	lsrs	r3, r3, #12
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <__aeabi_ddiv+0x5f8>)
 8000c72:	e59d      	b.n	80007b0 <__aeabi_ddiv+0x11c>
 8000c74:	42bd      	cmp	r5, r7
 8000c76:	d8b2      	bhi.n	8000bde <__aeabi_ddiv+0x54a>
 8000c78:	469b      	mov	fp, r3
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	e6bf      	b.n	80009fe <__aeabi_ddiv+0x36a>
 8000c7e:	4580      	cmp	r8, r0
 8000c80:	d3b9      	bcc.n	8000bf6 <__aeabi_ddiv+0x562>
 8000c82:	001a      	movs	r2, r3
 8000c84:	e7c3      	b.n	8000c0e <__aeabi_ddiv+0x57a>
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	000003ff 	.word	0x000003ff
 8000c8c:	000007ff 	.word	0x000007ff
 8000c90:	0000041e 	.word	0x0000041e
 8000c94:	0000043e 	.word	0x0000043e

08000c98 <__aeabi_dmul>:
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	4657      	mov	r7, sl
 8000c9c:	46de      	mov	lr, fp
 8000c9e:	464e      	mov	r6, r9
 8000ca0:	4645      	mov	r5, r8
 8000ca2:	b5e0      	push	{r5, r6, r7, lr}
 8000ca4:	4683      	mov	fp, r0
 8000ca6:	0006      	movs	r6, r0
 8000ca8:	030f      	lsls	r7, r1, #12
 8000caa:	0048      	lsls	r0, r1, #1
 8000cac:	b087      	sub	sp, #28
 8000cae:	4692      	mov	sl, r2
 8000cb0:	001d      	movs	r5, r3
 8000cb2:	0b3f      	lsrs	r7, r7, #12
 8000cb4:	0d40      	lsrs	r0, r0, #21
 8000cb6:	0fcc      	lsrs	r4, r1, #31
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dmul+0x26>
 8000cbc:	e06f      	b.n	8000d9e <__aeabi_dmul+0x106>
 8000cbe:	4bde      	ldr	r3, [pc, #888]	; (8001038 <__aeabi_dmul+0x3a0>)
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	d038      	beq.n	8000d36 <__aeabi_dmul+0x9e>
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	00ff      	lsls	r7, r7, #3
 8000cc8:	041b      	lsls	r3, r3, #16
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	0f73      	lsrs	r3, r6, #29
 8000cce:	433b      	orrs	r3, r7
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	4bda      	ldr	r3, [pc, #872]	; (800103c <__aeabi_dmul+0x3a4>)
 8000cd4:	2700      	movs	r7, #0
 8000cd6:	4699      	mov	r9, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	469b      	mov	fp, r3
 8000cdc:	00f6      	lsls	r6, r6, #3
 8000cde:	4481      	add	r9, r0
 8000ce0:	032b      	lsls	r3, r5, #12
 8000ce2:	0069      	lsls	r1, r5, #1
 8000ce4:	0b1b      	lsrs	r3, r3, #12
 8000ce6:	4652      	mov	r2, sl
 8000ce8:	4698      	mov	r8, r3
 8000cea:	0d49      	lsrs	r1, r1, #21
 8000cec:	0fed      	lsrs	r5, r5, #31
 8000cee:	2900      	cmp	r1, #0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_dmul+0x5c>
 8000cf2:	e085      	b.n	8000e00 <__aeabi_dmul+0x168>
 8000cf4:	4bd0      	ldr	r3, [pc, #832]	; (8001038 <__aeabi_dmul+0x3a0>)
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dmul+0x64>
 8000cfa:	e073      	b.n	8000de4 <__aeabi_dmul+0x14c>
 8000cfc:	4643      	mov	r3, r8
 8000cfe:	00da      	lsls	r2, r3, #3
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	041b      	lsls	r3, r3, #16
 8000d04:	4313      	orrs	r3, r2
 8000d06:	4652      	mov	r2, sl
 8000d08:	48cc      	ldr	r0, [pc, #816]	; (800103c <__aeabi_dmul+0x3a4>)
 8000d0a:	0f52      	lsrs	r2, r2, #29
 8000d0c:	4684      	mov	ip, r0
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	4652      	mov	r2, sl
 8000d12:	2000      	movs	r0, #0
 8000d14:	4461      	add	r1, ip
 8000d16:	00d2      	lsls	r2, r2, #3
 8000d18:	4489      	add	r9, r1
 8000d1a:	0021      	movs	r1, r4
 8000d1c:	4069      	eors	r1, r5
 8000d1e:	9100      	str	r1, [sp, #0]
 8000d20:	468c      	mov	ip, r1
 8000d22:	2101      	movs	r1, #1
 8000d24:	4449      	add	r1, r9
 8000d26:	468a      	mov	sl, r1
 8000d28:	2f0f      	cmp	r7, #15
 8000d2a:	d900      	bls.n	8000d2e <__aeabi_dmul+0x96>
 8000d2c:	e090      	b.n	8000e50 <__aeabi_dmul+0x1b8>
 8000d2e:	49c4      	ldr	r1, [pc, #784]	; (8001040 <__aeabi_dmul+0x3a8>)
 8000d30:	00bf      	lsls	r7, r7, #2
 8000d32:	59cf      	ldr	r7, [r1, r7]
 8000d34:	46bf      	mov	pc, r7
 8000d36:	465b      	mov	r3, fp
 8000d38:	433b      	orrs	r3, r7
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_dmul+0xa8>
 8000d3e:	e16a      	b.n	8001016 <__aeabi_dmul+0x37e>
 8000d40:	2302      	movs	r3, #2
 8000d42:	2708      	movs	r7, #8
 8000d44:	2600      	movs	r6, #0
 8000d46:	4681      	mov	r9, r0
 8000d48:	469b      	mov	fp, r3
 8000d4a:	e7c9      	b.n	8000ce0 <__aeabi_dmul+0x48>
 8000d4c:	0032      	movs	r2, r6
 8000d4e:	4658      	mov	r0, fp
 8000d50:	9b01      	ldr	r3, [sp, #4]
 8000d52:	4661      	mov	r1, ip
 8000d54:	9100      	str	r1, [sp, #0]
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dmul+0xc4>
 8000d5a:	e075      	b.n	8000e48 <__aeabi_dmul+0x1b0>
 8000d5c:	2803      	cmp	r0, #3
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dmul+0xca>
 8000d60:	e1fe      	b.n	8001160 <__aeabi_dmul+0x4c8>
 8000d62:	2801      	cmp	r0, #1
 8000d64:	d000      	beq.n	8000d68 <__aeabi_dmul+0xd0>
 8000d66:	e12c      	b.n	8000fc2 <__aeabi_dmul+0x32a>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	2700      	movs	r7, #0
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	2500      	movs	r5, #0
 8000d70:	033f      	lsls	r7, r7, #12
 8000d72:	0d2a      	lsrs	r2, r5, #20
 8000d74:	0b3f      	lsrs	r7, r7, #12
 8000d76:	48b3      	ldr	r0, [pc, #716]	; (8001044 <__aeabi_dmul+0x3ac>)
 8000d78:	0512      	lsls	r2, r2, #20
 8000d7a:	433a      	orrs	r2, r7
 8000d7c:	4002      	ands	r2, r0
 8000d7e:	051b      	lsls	r3, r3, #20
 8000d80:	4313      	orrs	r3, r2
 8000d82:	9a00      	ldr	r2, [sp, #0]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	07d1      	lsls	r1, r2, #31
 8000d88:	085b      	lsrs	r3, r3, #1
 8000d8a:	430b      	orrs	r3, r1
 8000d8c:	0030      	movs	r0, r6
 8000d8e:	0019      	movs	r1, r3
 8000d90:	b007      	add	sp, #28
 8000d92:	bc3c      	pop	{r2, r3, r4, r5}
 8000d94:	4690      	mov	r8, r2
 8000d96:	4699      	mov	r9, r3
 8000d98:	46a2      	mov	sl, r4
 8000d9a:	46ab      	mov	fp, r5
 8000d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d9e:	465b      	mov	r3, fp
 8000da0:	433b      	orrs	r3, r7
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dmul+0x110>
 8000da6:	e12f      	b.n	8001008 <__aeabi_dmul+0x370>
 8000da8:	2f00      	cmp	r7, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_dmul+0x116>
 8000dac:	e1a5      	b.n	80010fa <__aeabi_dmul+0x462>
 8000dae:	0038      	movs	r0, r7
 8000db0:	f000 fe0c 	bl	80019cc <__clzsi2>
 8000db4:	0003      	movs	r3, r0
 8000db6:	3b0b      	subs	r3, #11
 8000db8:	2b1c      	cmp	r3, #28
 8000dba:	dd00      	ble.n	8000dbe <__aeabi_dmul+0x126>
 8000dbc:	e196      	b.n	80010ec <__aeabi_dmul+0x454>
 8000dbe:	221d      	movs	r2, #29
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	465a      	mov	r2, fp
 8000dc4:	0001      	movs	r1, r0
 8000dc6:	40da      	lsrs	r2, r3
 8000dc8:	465e      	mov	r6, fp
 8000dca:	3908      	subs	r1, #8
 8000dcc:	408f      	lsls	r7, r1
 8000dce:	0013      	movs	r3, r2
 8000dd0:	408e      	lsls	r6, r1
 8000dd2:	433b      	orrs	r3, r7
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	4b9c      	ldr	r3, [pc, #624]	; (8001048 <__aeabi_dmul+0x3b0>)
 8000dd8:	2700      	movs	r7, #0
 8000dda:	1a1b      	subs	r3, r3, r0
 8000ddc:	4699      	mov	r9, r3
 8000dde:	2300      	movs	r3, #0
 8000de0:	469b      	mov	fp, r3
 8000de2:	e77d      	b.n	8000ce0 <__aeabi_dmul+0x48>
 8000de4:	4641      	mov	r1, r8
 8000de6:	4653      	mov	r3, sl
 8000de8:	430b      	orrs	r3, r1
 8000dea:	4993      	ldr	r1, [pc, #588]	; (8001038 <__aeabi_dmul+0x3a0>)
 8000dec:	468c      	mov	ip, r1
 8000dee:	44e1      	add	r9, ip
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d000      	beq.n	8000df6 <__aeabi_dmul+0x15e>
 8000df4:	e11a      	b.n	800102c <__aeabi_dmul+0x394>
 8000df6:	2202      	movs	r2, #2
 8000df8:	2002      	movs	r0, #2
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	e78c      	b.n	8000d1a <__aeabi_dmul+0x82>
 8000e00:	4313      	orrs	r3, r2
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dmul+0x16e>
 8000e04:	e10d      	b.n	8001022 <__aeabi_dmul+0x38a>
 8000e06:	4643      	mov	r3, r8
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dmul+0x176>
 8000e0c:	e181      	b.n	8001112 <__aeabi_dmul+0x47a>
 8000e0e:	4640      	mov	r0, r8
 8000e10:	f000 fddc 	bl	80019cc <__clzsi2>
 8000e14:	0002      	movs	r2, r0
 8000e16:	3a0b      	subs	r2, #11
 8000e18:	2a1c      	cmp	r2, #28
 8000e1a:	dd00      	ble.n	8000e1e <__aeabi_dmul+0x186>
 8000e1c:	e172      	b.n	8001104 <__aeabi_dmul+0x46c>
 8000e1e:	0001      	movs	r1, r0
 8000e20:	4643      	mov	r3, r8
 8000e22:	3908      	subs	r1, #8
 8000e24:	408b      	lsls	r3, r1
 8000e26:	4698      	mov	r8, r3
 8000e28:	231d      	movs	r3, #29
 8000e2a:	1a9a      	subs	r2, r3, r2
 8000e2c:	4653      	mov	r3, sl
 8000e2e:	40d3      	lsrs	r3, r2
 8000e30:	001a      	movs	r2, r3
 8000e32:	4643      	mov	r3, r8
 8000e34:	4313      	orrs	r3, r2
 8000e36:	4652      	mov	r2, sl
 8000e38:	408a      	lsls	r2, r1
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	1a08      	subs	r0, r1, r0
 8000e3e:	4982      	ldr	r1, [pc, #520]	; (8001048 <__aeabi_dmul+0x3b0>)
 8000e40:	4689      	mov	r9, r1
 8000e42:	4481      	add	r9, r0
 8000e44:	2000      	movs	r0, #0
 8000e46:	e768      	b.n	8000d1a <__aeabi_dmul+0x82>
 8000e48:	4b7b      	ldr	r3, [pc, #492]	; (8001038 <__aeabi_dmul+0x3a0>)
 8000e4a:	2700      	movs	r7, #0
 8000e4c:	2600      	movs	r6, #0
 8000e4e:	e78e      	b.n	8000d6e <__aeabi_dmul+0xd6>
 8000e50:	0c14      	lsrs	r4, r2, #16
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	0c12      	lsrs	r2, r2, #16
 8000e56:	0011      	movs	r1, r2
 8000e58:	0c37      	lsrs	r7, r6, #16
 8000e5a:	0436      	lsls	r6, r6, #16
 8000e5c:	0c35      	lsrs	r5, r6, #16
 8000e5e:	4379      	muls	r1, r7
 8000e60:	0028      	movs	r0, r5
 8000e62:	468c      	mov	ip, r1
 8000e64:	002e      	movs	r6, r5
 8000e66:	4360      	muls	r0, r4
 8000e68:	4460      	add	r0, ip
 8000e6a:	4683      	mov	fp, r0
 8000e6c:	4356      	muls	r6, r2
 8000e6e:	0021      	movs	r1, r4
 8000e70:	0c30      	lsrs	r0, r6, #16
 8000e72:	4680      	mov	r8, r0
 8000e74:	4658      	mov	r0, fp
 8000e76:	4379      	muls	r1, r7
 8000e78:	4440      	add	r0, r8
 8000e7a:	9102      	str	r1, [sp, #8]
 8000e7c:	4584      	cmp	ip, r0
 8000e7e:	d906      	bls.n	8000e8e <__aeabi_dmul+0x1f6>
 8000e80:	4688      	mov	r8, r1
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	468c      	mov	ip, r1
 8000e88:	44e0      	add	r8, ip
 8000e8a:	4641      	mov	r1, r8
 8000e8c:	9102      	str	r1, [sp, #8]
 8000e8e:	0436      	lsls	r6, r6, #16
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	0c36      	lsrs	r6, r6, #16
 8000e94:	0400      	lsls	r0, r0, #16
 8000e96:	468b      	mov	fp, r1
 8000e98:	1981      	adds	r1, r0, r6
 8000e9a:	0c1e      	lsrs	r6, r3, #16
 8000e9c:	041b      	lsls	r3, r3, #16
 8000e9e:	0c1b      	lsrs	r3, r3, #16
 8000ea0:	9103      	str	r1, [sp, #12]
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	4379      	muls	r1, r7
 8000ea6:	468c      	mov	ip, r1
 8000ea8:	0028      	movs	r0, r5
 8000eaa:	4375      	muls	r5, r6
 8000eac:	4465      	add	r5, ip
 8000eae:	46a8      	mov	r8, r5
 8000eb0:	4358      	muls	r0, r3
 8000eb2:	0c05      	lsrs	r5, r0, #16
 8000eb4:	4445      	add	r5, r8
 8000eb6:	4377      	muls	r7, r6
 8000eb8:	42a9      	cmp	r1, r5
 8000eba:	d903      	bls.n	8000ec4 <__aeabi_dmul+0x22c>
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0249      	lsls	r1, r1, #9
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	4467      	add	r7, ip
 8000ec4:	0c29      	lsrs	r1, r5, #16
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	0039      	movs	r1, r7
 8000eca:	0400      	lsls	r0, r0, #16
 8000ecc:	0c00      	lsrs	r0, r0, #16
 8000ece:	042d      	lsls	r5, r5, #16
 8000ed0:	182d      	adds	r5, r5, r0
 8000ed2:	4461      	add	r1, ip
 8000ed4:	44ab      	add	fp, r5
 8000ed6:	9105      	str	r1, [sp, #20]
 8000ed8:	4659      	mov	r1, fp
 8000eda:	9104      	str	r1, [sp, #16]
 8000edc:	9901      	ldr	r1, [sp, #4]
 8000ede:	040f      	lsls	r7, r1, #16
 8000ee0:	0c3f      	lsrs	r7, r7, #16
 8000ee2:	0c08      	lsrs	r0, r1, #16
 8000ee4:	0039      	movs	r1, r7
 8000ee6:	4351      	muls	r1, r2
 8000ee8:	4342      	muls	r2, r0
 8000eea:	4690      	mov	r8, r2
 8000eec:	0002      	movs	r2, r0
 8000eee:	468c      	mov	ip, r1
 8000ef0:	0c09      	lsrs	r1, r1, #16
 8000ef2:	468b      	mov	fp, r1
 8000ef4:	4362      	muls	r2, r4
 8000ef6:	437c      	muls	r4, r7
 8000ef8:	4444      	add	r4, r8
 8000efa:	445c      	add	r4, fp
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d903      	bls.n	8000f08 <__aeabi_dmul+0x270>
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	0249      	lsls	r1, r1, #9
 8000f04:	4688      	mov	r8, r1
 8000f06:	4442      	add	r2, r8
 8000f08:	0c21      	lsrs	r1, r4, #16
 8000f0a:	4688      	mov	r8, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	0c09      	lsrs	r1, r1, #16
 8000f12:	468c      	mov	ip, r1
 8000f14:	0039      	movs	r1, r7
 8000f16:	4359      	muls	r1, r3
 8000f18:	4343      	muls	r3, r0
 8000f1a:	4370      	muls	r0, r6
 8000f1c:	437e      	muls	r6, r7
 8000f1e:	0c0f      	lsrs	r7, r1, #16
 8000f20:	18f6      	adds	r6, r6, r3
 8000f22:	0424      	lsls	r4, r4, #16
 8000f24:	19be      	adds	r6, r7, r6
 8000f26:	4464      	add	r4, ip
 8000f28:	4442      	add	r2, r8
 8000f2a:	468c      	mov	ip, r1
 8000f2c:	42b3      	cmp	r3, r6
 8000f2e:	d903      	bls.n	8000f38 <__aeabi_dmul+0x2a0>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	025b      	lsls	r3, r3, #9
 8000f34:	4698      	mov	r8, r3
 8000f36:	4440      	add	r0, r8
 8000f38:	9b02      	ldr	r3, [sp, #8]
 8000f3a:	4661      	mov	r1, ip
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	9b04      	ldr	r3, [sp, #16]
 8000f40:	0437      	lsls	r7, r6, #16
 8000f42:	4443      	add	r3, r8
 8000f44:	469b      	mov	fp, r3
 8000f46:	45ab      	cmp	fp, r5
 8000f48:	41ad      	sbcs	r5, r5
 8000f4a:	426b      	negs	r3, r5
 8000f4c:	040d      	lsls	r5, r1, #16
 8000f4e:	9905      	ldr	r1, [sp, #20]
 8000f50:	0c2d      	lsrs	r5, r5, #16
 8000f52:	468c      	mov	ip, r1
 8000f54:	197f      	adds	r7, r7, r5
 8000f56:	4467      	add	r7, ip
 8000f58:	18fd      	adds	r5, r7, r3
 8000f5a:	46a8      	mov	r8, r5
 8000f5c:	465d      	mov	r5, fp
 8000f5e:	192d      	adds	r5, r5, r4
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	41a4      	sbcs	r4, r4
 8000f64:	4693      	mov	fp, r2
 8000f66:	4264      	negs	r4, r4
 8000f68:	46a4      	mov	ip, r4
 8000f6a:	44c3      	add	fp, r8
 8000f6c:	44dc      	add	ip, fp
 8000f6e:	428f      	cmp	r7, r1
 8000f70:	41bf      	sbcs	r7, r7
 8000f72:	4598      	cmp	r8, r3
 8000f74:	419b      	sbcs	r3, r3
 8000f76:	4593      	cmp	fp, r2
 8000f78:	4192      	sbcs	r2, r2
 8000f7a:	45a4      	cmp	ip, r4
 8000f7c:	41a4      	sbcs	r4, r4
 8000f7e:	425b      	negs	r3, r3
 8000f80:	427f      	negs	r7, r7
 8000f82:	431f      	orrs	r7, r3
 8000f84:	0c36      	lsrs	r6, r6, #16
 8000f86:	4252      	negs	r2, r2
 8000f88:	4264      	negs	r4, r4
 8000f8a:	19bf      	adds	r7, r7, r6
 8000f8c:	4322      	orrs	r2, r4
 8000f8e:	18bf      	adds	r7, r7, r2
 8000f90:	4662      	mov	r2, ip
 8000f92:	1838      	adds	r0, r7, r0
 8000f94:	0243      	lsls	r3, r0, #9
 8000f96:	0dd2      	lsrs	r2, r2, #23
 8000f98:	9903      	ldr	r1, [sp, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	026a      	lsls	r2, r5, #9
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	1e50      	subs	r0, r2, #1
 8000fa2:	4182      	sbcs	r2, r0
 8000fa4:	4661      	mov	r1, ip
 8000fa6:	0ded      	lsrs	r5, r5, #23
 8000fa8:	432a      	orrs	r2, r5
 8000faa:	024e      	lsls	r6, r1, #9
 8000fac:	4332      	orrs	r2, r6
 8000fae:	01d9      	lsls	r1, r3, #7
 8000fb0:	d400      	bmi.n	8000fb4 <__aeabi_dmul+0x31c>
 8000fb2:	e0b3      	b.n	800111c <__aeabi_dmul+0x484>
 8000fb4:	2601      	movs	r6, #1
 8000fb6:	0850      	lsrs	r0, r2, #1
 8000fb8:	4032      	ands	r2, r6
 8000fba:	4302      	orrs	r2, r0
 8000fbc:	07de      	lsls	r6, r3, #31
 8000fbe:	4332      	orrs	r2, r6
 8000fc0:	085b      	lsrs	r3, r3, #1
 8000fc2:	4c22      	ldr	r4, [pc, #136]	; (800104c <__aeabi_dmul+0x3b4>)
 8000fc4:	4454      	add	r4, sl
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	dd62      	ble.n	8001090 <__aeabi_dmul+0x3f8>
 8000fca:	0751      	lsls	r1, r2, #29
 8000fcc:	d009      	beq.n	8000fe2 <__aeabi_dmul+0x34a>
 8000fce:	200f      	movs	r0, #15
 8000fd0:	4010      	ands	r0, r2
 8000fd2:	2804      	cmp	r0, #4
 8000fd4:	d005      	beq.n	8000fe2 <__aeabi_dmul+0x34a>
 8000fd6:	1d10      	adds	r0, r2, #4
 8000fd8:	4290      	cmp	r0, r2
 8000fda:	4192      	sbcs	r2, r2
 8000fdc:	4252      	negs	r2, r2
 8000fde:	189b      	adds	r3, r3, r2
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	01d9      	lsls	r1, r3, #7
 8000fe4:	d504      	bpl.n	8000ff0 <__aeabi_dmul+0x358>
 8000fe6:	2480      	movs	r4, #128	; 0x80
 8000fe8:	4819      	ldr	r0, [pc, #100]	; (8001050 <__aeabi_dmul+0x3b8>)
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	4003      	ands	r3, r0
 8000fee:	4454      	add	r4, sl
 8000ff0:	4818      	ldr	r0, [pc, #96]	; (8001054 <__aeabi_dmul+0x3bc>)
 8000ff2:	4284      	cmp	r4, r0
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_dmul+0x360>
 8000ff6:	e727      	b.n	8000e48 <__aeabi_dmul+0x1b0>
 8000ff8:	075e      	lsls	r6, r3, #29
 8000ffa:	025b      	lsls	r3, r3, #9
 8000ffc:	08d2      	lsrs	r2, r2, #3
 8000ffe:	0b1f      	lsrs	r7, r3, #12
 8001000:	0563      	lsls	r3, r4, #21
 8001002:	4316      	orrs	r6, r2
 8001004:	0d5b      	lsrs	r3, r3, #21
 8001006:	e6b2      	b.n	8000d6e <__aeabi_dmul+0xd6>
 8001008:	2300      	movs	r3, #0
 800100a:	4699      	mov	r9, r3
 800100c:	3301      	adds	r3, #1
 800100e:	2704      	movs	r7, #4
 8001010:	2600      	movs	r6, #0
 8001012:	469b      	mov	fp, r3
 8001014:	e664      	b.n	8000ce0 <__aeabi_dmul+0x48>
 8001016:	2303      	movs	r3, #3
 8001018:	9701      	str	r7, [sp, #4]
 800101a:	4681      	mov	r9, r0
 800101c:	270c      	movs	r7, #12
 800101e:	469b      	mov	fp, r3
 8001020:	e65e      	b.n	8000ce0 <__aeabi_dmul+0x48>
 8001022:	2201      	movs	r2, #1
 8001024:	2001      	movs	r0, #1
 8001026:	4317      	orrs	r7, r2
 8001028:	2200      	movs	r2, #0
 800102a:	e676      	b.n	8000d1a <__aeabi_dmul+0x82>
 800102c:	2303      	movs	r3, #3
 800102e:	2003      	movs	r0, #3
 8001030:	431f      	orrs	r7, r3
 8001032:	4643      	mov	r3, r8
 8001034:	e671      	b.n	8000d1a <__aeabi_dmul+0x82>
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	000007ff 	.word	0x000007ff
 800103c:	fffffc01 	.word	0xfffffc01
 8001040:	08007b78 	.word	0x08007b78
 8001044:	800fffff 	.word	0x800fffff
 8001048:	fffffc0d 	.word	0xfffffc0d
 800104c:	000003ff 	.word	0x000003ff
 8001050:	feffffff 	.word	0xfeffffff
 8001054:	000007fe 	.word	0x000007fe
 8001058:	2300      	movs	r3, #0
 800105a:	2780      	movs	r7, #128	; 0x80
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	033f      	lsls	r7, r7, #12
 8001060:	2600      	movs	r6, #0
 8001062:	4b43      	ldr	r3, [pc, #268]	; (8001170 <__aeabi_dmul+0x4d8>)
 8001064:	e683      	b.n	8000d6e <__aeabi_dmul+0xd6>
 8001066:	9b01      	ldr	r3, [sp, #4]
 8001068:	0032      	movs	r2, r6
 800106a:	46a4      	mov	ip, r4
 800106c:	4658      	mov	r0, fp
 800106e:	e670      	b.n	8000d52 <__aeabi_dmul+0xba>
 8001070:	46ac      	mov	ip, r5
 8001072:	e66e      	b.n	8000d52 <__aeabi_dmul+0xba>
 8001074:	2780      	movs	r7, #128	; 0x80
 8001076:	9901      	ldr	r1, [sp, #4]
 8001078:	033f      	lsls	r7, r7, #12
 800107a:	4239      	tst	r1, r7
 800107c:	d02d      	beq.n	80010da <__aeabi_dmul+0x442>
 800107e:	423b      	tst	r3, r7
 8001080:	d12b      	bne.n	80010da <__aeabi_dmul+0x442>
 8001082:	431f      	orrs	r7, r3
 8001084:	033f      	lsls	r7, r7, #12
 8001086:	0b3f      	lsrs	r7, r7, #12
 8001088:	9500      	str	r5, [sp, #0]
 800108a:	0016      	movs	r6, r2
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <__aeabi_dmul+0x4d8>)
 800108e:	e66e      	b.n	8000d6e <__aeabi_dmul+0xd6>
 8001090:	2501      	movs	r5, #1
 8001092:	1b2d      	subs	r5, r5, r4
 8001094:	2d38      	cmp	r5, #56	; 0x38
 8001096:	dd00      	ble.n	800109a <__aeabi_dmul+0x402>
 8001098:	e666      	b.n	8000d68 <__aeabi_dmul+0xd0>
 800109a:	2d1f      	cmp	r5, #31
 800109c:	dc40      	bgt.n	8001120 <__aeabi_dmul+0x488>
 800109e:	4835      	ldr	r0, [pc, #212]	; (8001174 <__aeabi_dmul+0x4dc>)
 80010a0:	001c      	movs	r4, r3
 80010a2:	4450      	add	r0, sl
 80010a4:	0016      	movs	r6, r2
 80010a6:	4082      	lsls	r2, r0
 80010a8:	4084      	lsls	r4, r0
 80010aa:	40ee      	lsrs	r6, r5
 80010ac:	1e50      	subs	r0, r2, #1
 80010ae:	4182      	sbcs	r2, r0
 80010b0:	4334      	orrs	r4, r6
 80010b2:	4314      	orrs	r4, r2
 80010b4:	40eb      	lsrs	r3, r5
 80010b6:	0762      	lsls	r2, r4, #29
 80010b8:	d009      	beq.n	80010ce <__aeabi_dmul+0x436>
 80010ba:	220f      	movs	r2, #15
 80010bc:	4022      	ands	r2, r4
 80010be:	2a04      	cmp	r2, #4
 80010c0:	d005      	beq.n	80010ce <__aeabi_dmul+0x436>
 80010c2:	0022      	movs	r2, r4
 80010c4:	1d14      	adds	r4, r2, #4
 80010c6:	4294      	cmp	r4, r2
 80010c8:	4180      	sbcs	r0, r0
 80010ca:	4240      	negs	r0, r0
 80010cc:	181b      	adds	r3, r3, r0
 80010ce:	021a      	lsls	r2, r3, #8
 80010d0:	d53e      	bpl.n	8001150 <__aeabi_dmul+0x4b8>
 80010d2:	2301      	movs	r3, #1
 80010d4:	2700      	movs	r7, #0
 80010d6:	2600      	movs	r6, #0
 80010d8:	e649      	b.n	8000d6e <__aeabi_dmul+0xd6>
 80010da:	2780      	movs	r7, #128	; 0x80
 80010dc:	9b01      	ldr	r3, [sp, #4]
 80010de:	033f      	lsls	r7, r7, #12
 80010e0:	431f      	orrs	r7, r3
 80010e2:	033f      	lsls	r7, r7, #12
 80010e4:	0b3f      	lsrs	r7, r7, #12
 80010e6:	9400      	str	r4, [sp, #0]
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <__aeabi_dmul+0x4d8>)
 80010ea:	e640      	b.n	8000d6e <__aeabi_dmul+0xd6>
 80010ec:	0003      	movs	r3, r0
 80010ee:	465a      	mov	r2, fp
 80010f0:	3b28      	subs	r3, #40	; 0x28
 80010f2:	409a      	lsls	r2, r3
 80010f4:	2600      	movs	r6, #0
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	e66d      	b.n	8000dd6 <__aeabi_dmul+0x13e>
 80010fa:	4658      	mov	r0, fp
 80010fc:	f000 fc66 	bl	80019cc <__clzsi2>
 8001100:	3020      	adds	r0, #32
 8001102:	e657      	b.n	8000db4 <__aeabi_dmul+0x11c>
 8001104:	0003      	movs	r3, r0
 8001106:	4652      	mov	r2, sl
 8001108:	3b28      	subs	r3, #40	; 0x28
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	e693      	b.n	8000e3a <__aeabi_dmul+0x1a2>
 8001112:	4650      	mov	r0, sl
 8001114:	f000 fc5a 	bl	80019cc <__clzsi2>
 8001118:	3020      	adds	r0, #32
 800111a:	e67b      	b.n	8000e14 <__aeabi_dmul+0x17c>
 800111c:	46ca      	mov	sl, r9
 800111e:	e750      	b.n	8000fc2 <__aeabi_dmul+0x32a>
 8001120:	201f      	movs	r0, #31
 8001122:	001e      	movs	r6, r3
 8001124:	4240      	negs	r0, r0
 8001126:	1b04      	subs	r4, r0, r4
 8001128:	40e6      	lsrs	r6, r4
 800112a:	2d20      	cmp	r5, #32
 800112c:	d003      	beq.n	8001136 <__aeabi_dmul+0x49e>
 800112e:	4c12      	ldr	r4, [pc, #72]	; (8001178 <__aeabi_dmul+0x4e0>)
 8001130:	4454      	add	r4, sl
 8001132:	40a3      	lsls	r3, r4
 8001134:	431a      	orrs	r2, r3
 8001136:	1e50      	subs	r0, r2, #1
 8001138:	4182      	sbcs	r2, r0
 800113a:	4332      	orrs	r2, r6
 800113c:	2607      	movs	r6, #7
 800113e:	2700      	movs	r7, #0
 8001140:	4016      	ands	r6, r2
 8001142:	d009      	beq.n	8001158 <__aeabi_dmul+0x4c0>
 8001144:	200f      	movs	r0, #15
 8001146:	2300      	movs	r3, #0
 8001148:	4010      	ands	r0, r2
 800114a:	0014      	movs	r4, r2
 800114c:	2804      	cmp	r0, #4
 800114e:	d1b9      	bne.n	80010c4 <__aeabi_dmul+0x42c>
 8001150:	0022      	movs	r2, r4
 8001152:	075e      	lsls	r6, r3, #29
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	0b1f      	lsrs	r7, r3, #12
 8001158:	08d2      	lsrs	r2, r2, #3
 800115a:	4316      	orrs	r6, r2
 800115c:	2300      	movs	r3, #0
 800115e:	e606      	b.n	8000d6e <__aeabi_dmul+0xd6>
 8001160:	2780      	movs	r7, #128	; 0x80
 8001162:	033f      	lsls	r7, r7, #12
 8001164:	431f      	orrs	r7, r3
 8001166:	033f      	lsls	r7, r7, #12
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0016      	movs	r6, r2
 800116c:	4b00      	ldr	r3, [pc, #0]	; (8001170 <__aeabi_dmul+0x4d8>)
 800116e:	e5fe      	b.n	8000d6e <__aeabi_dmul+0xd6>
 8001170:	000007ff 	.word	0x000007ff
 8001174:	0000041e 	.word	0x0000041e
 8001178:	0000043e 	.word	0x0000043e

0800117c <__aeabi_dsub>:
 800117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117e:	4657      	mov	r7, sl
 8001180:	464e      	mov	r6, r9
 8001182:	4645      	mov	r5, r8
 8001184:	46de      	mov	lr, fp
 8001186:	000c      	movs	r4, r1
 8001188:	0309      	lsls	r1, r1, #12
 800118a:	b5e0      	push	{r5, r6, r7, lr}
 800118c:	0a49      	lsrs	r1, r1, #9
 800118e:	0f46      	lsrs	r6, r0, #29
 8001190:	005f      	lsls	r7, r3, #1
 8001192:	4331      	orrs	r1, r6
 8001194:	031e      	lsls	r6, r3, #12
 8001196:	0fdb      	lsrs	r3, r3, #31
 8001198:	0a76      	lsrs	r6, r6, #9
 800119a:	469b      	mov	fp, r3
 800119c:	0f53      	lsrs	r3, r2, #29
 800119e:	4333      	orrs	r3, r6
 80011a0:	4ec8      	ldr	r6, [pc, #800]	; (80014c4 <__aeabi_dsub+0x348>)
 80011a2:	0065      	lsls	r5, r4, #1
 80011a4:	00c0      	lsls	r0, r0, #3
 80011a6:	0fe4      	lsrs	r4, r4, #31
 80011a8:	00d2      	lsls	r2, r2, #3
 80011aa:	0d6d      	lsrs	r5, r5, #21
 80011ac:	46a2      	mov	sl, r4
 80011ae:	4681      	mov	r9, r0
 80011b0:	0d7f      	lsrs	r7, r7, #21
 80011b2:	469c      	mov	ip, r3
 80011b4:	4690      	mov	r8, r2
 80011b6:	42b7      	cmp	r7, r6
 80011b8:	d100      	bne.n	80011bc <__aeabi_dsub+0x40>
 80011ba:	e0b9      	b.n	8001330 <__aeabi_dsub+0x1b4>
 80011bc:	465b      	mov	r3, fp
 80011be:	2601      	movs	r6, #1
 80011c0:	4073      	eors	r3, r6
 80011c2:	469b      	mov	fp, r3
 80011c4:	1bee      	subs	r6, r5, r7
 80011c6:	45a3      	cmp	fp, r4
 80011c8:	d100      	bne.n	80011cc <__aeabi_dsub+0x50>
 80011ca:	e083      	b.n	80012d4 <__aeabi_dsub+0x158>
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	dd63      	ble.n	8001298 <__aeabi_dsub+0x11c>
 80011d0:	2f00      	cmp	r7, #0
 80011d2:	d000      	beq.n	80011d6 <__aeabi_dsub+0x5a>
 80011d4:	e0b1      	b.n	800133a <__aeabi_dsub+0x1be>
 80011d6:	4663      	mov	r3, ip
 80011d8:	4313      	orrs	r3, r2
 80011da:	d100      	bne.n	80011de <__aeabi_dsub+0x62>
 80011dc:	e123      	b.n	8001426 <__aeabi_dsub+0x2aa>
 80011de:	1e73      	subs	r3, r6, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d000      	beq.n	80011e6 <__aeabi_dsub+0x6a>
 80011e4:	e1ba      	b.n	800155c <__aeabi_dsub+0x3e0>
 80011e6:	1a86      	subs	r6, r0, r2
 80011e8:	4663      	mov	r3, ip
 80011ea:	42b0      	cmp	r0, r6
 80011ec:	4180      	sbcs	r0, r0
 80011ee:	2501      	movs	r5, #1
 80011f0:	1ac9      	subs	r1, r1, r3
 80011f2:	4240      	negs	r0, r0
 80011f4:	1a09      	subs	r1, r1, r0
 80011f6:	020b      	lsls	r3, r1, #8
 80011f8:	d400      	bmi.n	80011fc <__aeabi_dsub+0x80>
 80011fa:	e147      	b.n	800148c <__aeabi_dsub+0x310>
 80011fc:	0249      	lsls	r1, r1, #9
 80011fe:	0a4b      	lsrs	r3, r1, #9
 8001200:	4698      	mov	r8, r3
 8001202:	4643      	mov	r3, r8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d100      	bne.n	800120a <__aeabi_dsub+0x8e>
 8001208:	e189      	b.n	800151e <__aeabi_dsub+0x3a2>
 800120a:	4640      	mov	r0, r8
 800120c:	f000 fbde 	bl	80019cc <__clzsi2>
 8001210:	0003      	movs	r3, r0
 8001212:	3b08      	subs	r3, #8
 8001214:	2b1f      	cmp	r3, #31
 8001216:	dd00      	ble.n	800121a <__aeabi_dsub+0x9e>
 8001218:	e17c      	b.n	8001514 <__aeabi_dsub+0x398>
 800121a:	2220      	movs	r2, #32
 800121c:	0030      	movs	r0, r6
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	4641      	mov	r1, r8
 8001222:	40d0      	lsrs	r0, r2
 8001224:	4099      	lsls	r1, r3
 8001226:	0002      	movs	r2, r0
 8001228:	409e      	lsls	r6, r3
 800122a:	430a      	orrs	r2, r1
 800122c:	429d      	cmp	r5, r3
 800122e:	dd00      	ble.n	8001232 <__aeabi_dsub+0xb6>
 8001230:	e16a      	b.n	8001508 <__aeabi_dsub+0x38c>
 8001232:	1b5d      	subs	r5, r3, r5
 8001234:	1c6b      	adds	r3, r5, #1
 8001236:	2b1f      	cmp	r3, #31
 8001238:	dd00      	ble.n	800123c <__aeabi_dsub+0xc0>
 800123a:	e194      	b.n	8001566 <__aeabi_dsub+0x3ea>
 800123c:	2120      	movs	r1, #32
 800123e:	0010      	movs	r0, r2
 8001240:	0035      	movs	r5, r6
 8001242:	1ac9      	subs	r1, r1, r3
 8001244:	408e      	lsls	r6, r1
 8001246:	40da      	lsrs	r2, r3
 8001248:	4088      	lsls	r0, r1
 800124a:	40dd      	lsrs	r5, r3
 800124c:	1e71      	subs	r1, r6, #1
 800124e:	418e      	sbcs	r6, r1
 8001250:	0011      	movs	r1, r2
 8001252:	2207      	movs	r2, #7
 8001254:	4328      	orrs	r0, r5
 8001256:	2500      	movs	r5, #0
 8001258:	4306      	orrs	r6, r0
 800125a:	4032      	ands	r2, r6
 800125c:	2a00      	cmp	r2, #0
 800125e:	d009      	beq.n	8001274 <__aeabi_dsub+0xf8>
 8001260:	230f      	movs	r3, #15
 8001262:	4033      	ands	r3, r6
 8001264:	2b04      	cmp	r3, #4
 8001266:	d005      	beq.n	8001274 <__aeabi_dsub+0xf8>
 8001268:	1d33      	adds	r3, r6, #4
 800126a:	42b3      	cmp	r3, r6
 800126c:	41b6      	sbcs	r6, r6
 800126e:	4276      	negs	r6, r6
 8001270:	1989      	adds	r1, r1, r6
 8001272:	001e      	movs	r6, r3
 8001274:	020b      	lsls	r3, r1, #8
 8001276:	d400      	bmi.n	800127a <__aeabi_dsub+0xfe>
 8001278:	e23d      	b.n	80016f6 <__aeabi_dsub+0x57a>
 800127a:	1c6a      	adds	r2, r5, #1
 800127c:	4b91      	ldr	r3, [pc, #580]	; (80014c4 <__aeabi_dsub+0x348>)
 800127e:	0555      	lsls	r5, r2, #21
 8001280:	0d6d      	lsrs	r5, r5, #21
 8001282:	429a      	cmp	r2, r3
 8001284:	d100      	bne.n	8001288 <__aeabi_dsub+0x10c>
 8001286:	e119      	b.n	80014bc <__aeabi_dsub+0x340>
 8001288:	4a8f      	ldr	r2, [pc, #572]	; (80014c8 <__aeabi_dsub+0x34c>)
 800128a:	08f6      	lsrs	r6, r6, #3
 800128c:	400a      	ands	r2, r1
 800128e:	0757      	lsls	r7, r2, #29
 8001290:	0252      	lsls	r2, r2, #9
 8001292:	4337      	orrs	r7, r6
 8001294:	0b12      	lsrs	r2, r2, #12
 8001296:	e09b      	b.n	80013d0 <__aeabi_dsub+0x254>
 8001298:	2e00      	cmp	r6, #0
 800129a:	d000      	beq.n	800129e <__aeabi_dsub+0x122>
 800129c:	e0c5      	b.n	800142a <__aeabi_dsub+0x2ae>
 800129e:	1c6e      	adds	r6, r5, #1
 80012a0:	0576      	lsls	r6, r6, #21
 80012a2:	0d76      	lsrs	r6, r6, #21
 80012a4:	2e01      	cmp	r6, #1
 80012a6:	dc00      	bgt.n	80012aa <__aeabi_dsub+0x12e>
 80012a8:	e148      	b.n	800153c <__aeabi_dsub+0x3c0>
 80012aa:	4667      	mov	r7, ip
 80012ac:	1a86      	subs	r6, r0, r2
 80012ae:	1bcb      	subs	r3, r1, r7
 80012b0:	42b0      	cmp	r0, r6
 80012b2:	41bf      	sbcs	r7, r7
 80012b4:	427f      	negs	r7, r7
 80012b6:	46b8      	mov	r8, r7
 80012b8:	001f      	movs	r7, r3
 80012ba:	4643      	mov	r3, r8
 80012bc:	1aff      	subs	r7, r7, r3
 80012be:	003b      	movs	r3, r7
 80012c0:	46b8      	mov	r8, r7
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	d500      	bpl.n	80012c8 <__aeabi_dsub+0x14c>
 80012c6:	e15f      	b.n	8001588 <__aeabi_dsub+0x40c>
 80012c8:	4337      	orrs	r7, r6
 80012ca:	d19a      	bne.n	8001202 <__aeabi_dsub+0x86>
 80012cc:	2200      	movs	r2, #0
 80012ce:	2400      	movs	r4, #0
 80012d0:	2500      	movs	r5, #0
 80012d2:	e079      	b.n	80013c8 <__aeabi_dsub+0x24c>
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	dc00      	bgt.n	80012da <__aeabi_dsub+0x15e>
 80012d8:	e0fa      	b.n	80014d0 <__aeabi_dsub+0x354>
 80012da:	2f00      	cmp	r7, #0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dsub+0x164>
 80012de:	e08d      	b.n	80013fc <__aeabi_dsub+0x280>
 80012e0:	4b78      	ldr	r3, [pc, #480]	; (80014c4 <__aeabi_dsub+0x348>)
 80012e2:	429d      	cmp	r5, r3
 80012e4:	d067      	beq.n	80013b6 <__aeabi_dsub+0x23a>
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	4667      	mov	r7, ip
 80012ea:	041b      	lsls	r3, r3, #16
 80012ec:	431f      	orrs	r7, r3
 80012ee:	46bc      	mov	ip, r7
 80012f0:	2e38      	cmp	r6, #56	; 0x38
 80012f2:	dc00      	bgt.n	80012f6 <__aeabi_dsub+0x17a>
 80012f4:	e152      	b.n	800159c <__aeabi_dsub+0x420>
 80012f6:	4663      	mov	r3, ip
 80012f8:	4313      	orrs	r3, r2
 80012fa:	1e5a      	subs	r2, r3, #1
 80012fc:	4193      	sbcs	r3, r2
 80012fe:	181e      	adds	r6, r3, r0
 8001300:	4286      	cmp	r6, r0
 8001302:	4180      	sbcs	r0, r0
 8001304:	4240      	negs	r0, r0
 8001306:	1809      	adds	r1, r1, r0
 8001308:	020b      	lsls	r3, r1, #8
 800130a:	d400      	bmi.n	800130e <__aeabi_dsub+0x192>
 800130c:	e0be      	b.n	800148c <__aeabi_dsub+0x310>
 800130e:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <__aeabi_dsub+0x348>)
 8001310:	3501      	adds	r5, #1
 8001312:	429d      	cmp	r5, r3
 8001314:	d100      	bne.n	8001318 <__aeabi_dsub+0x19c>
 8001316:	e0d2      	b.n	80014be <__aeabi_dsub+0x342>
 8001318:	4a6b      	ldr	r2, [pc, #428]	; (80014c8 <__aeabi_dsub+0x34c>)
 800131a:	0873      	lsrs	r3, r6, #1
 800131c:	400a      	ands	r2, r1
 800131e:	2101      	movs	r1, #1
 8001320:	400e      	ands	r6, r1
 8001322:	431e      	orrs	r6, r3
 8001324:	0851      	lsrs	r1, r2, #1
 8001326:	07d3      	lsls	r3, r2, #31
 8001328:	2207      	movs	r2, #7
 800132a:	431e      	orrs	r6, r3
 800132c:	4032      	ands	r2, r6
 800132e:	e795      	b.n	800125c <__aeabi_dsub+0xe0>
 8001330:	001e      	movs	r6, r3
 8001332:	4316      	orrs	r6, r2
 8001334:	d000      	beq.n	8001338 <__aeabi_dsub+0x1bc>
 8001336:	e745      	b.n	80011c4 <__aeabi_dsub+0x48>
 8001338:	e740      	b.n	80011bc <__aeabi_dsub+0x40>
 800133a:	4b62      	ldr	r3, [pc, #392]	; (80014c4 <__aeabi_dsub+0x348>)
 800133c:	429d      	cmp	r5, r3
 800133e:	d03a      	beq.n	80013b6 <__aeabi_dsub+0x23a>
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	4667      	mov	r7, ip
 8001344:	041b      	lsls	r3, r3, #16
 8001346:	431f      	orrs	r7, r3
 8001348:	46bc      	mov	ip, r7
 800134a:	2e38      	cmp	r6, #56	; 0x38
 800134c:	dd00      	ble.n	8001350 <__aeabi_dsub+0x1d4>
 800134e:	e0eb      	b.n	8001528 <__aeabi_dsub+0x3ac>
 8001350:	2e1f      	cmp	r6, #31
 8001352:	dc00      	bgt.n	8001356 <__aeabi_dsub+0x1da>
 8001354:	e13a      	b.n	80015cc <__aeabi_dsub+0x450>
 8001356:	0033      	movs	r3, r6
 8001358:	4667      	mov	r7, ip
 800135a:	3b20      	subs	r3, #32
 800135c:	40df      	lsrs	r7, r3
 800135e:	003b      	movs	r3, r7
 8001360:	2e20      	cmp	r6, #32
 8001362:	d005      	beq.n	8001370 <__aeabi_dsub+0x1f4>
 8001364:	2740      	movs	r7, #64	; 0x40
 8001366:	1bbf      	subs	r7, r7, r6
 8001368:	4666      	mov	r6, ip
 800136a:	40be      	lsls	r6, r7
 800136c:	4332      	orrs	r2, r6
 800136e:	4690      	mov	r8, r2
 8001370:	4646      	mov	r6, r8
 8001372:	1e72      	subs	r2, r6, #1
 8001374:	4196      	sbcs	r6, r2
 8001376:	4333      	orrs	r3, r6
 8001378:	e0da      	b.n	8001530 <__aeabi_dsub+0x3b4>
 800137a:	2b00      	cmp	r3, #0
 800137c:	d100      	bne.n	8001380 <__aeabi_dsub+0x204>
 800137e:	e214      	b.n	80017aa <__aeabi_dsub+0x62e>
 8001380:	4663      	mov	r3, ip
 8001382:	4313      	orrs	r3, r2
 8001384:	d100      	bne.n	8001388 <__aeabi_dsub+0x20c>
 8001386:	e168      	b.n	800165a <__aeabi_dsub+0x4de>
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	074e      	lsls	r6, r1, #29
 800138c:	08c0      	lsrs	r0, r0, #3
 800138e:	08c9      	lsrs	r1, r1, #3
 8001390:	031b      	lsls	r3, r3, #12
 8001392:	4306      	orrs	r6, r0
 8001394:	4219      	tst	r1, r3
 8001396:	d008      	beq.n	80013aa <__aeabi_dsub+0x22e>
 8001398:	4660      	mov	r0, ip
 800139a:	08c0      	lsrs	r0, r0, #3
 800139c:	4218      	tst	r0, r3
 800139e:	d104      	bne.n	80013aa <__aeabi_dsub+0x22e>
 80013a0:	4663      	mov	r3, ip
 80013a2:	0001      	movs	r1, r0
 80013a4:	08d2      	lsrs	r2, r2, #3
 80013a6:	075e      	lsls	r6, r3, #29
 80013a8:	4316      	orrs	r6, r2
 80013aa:	00f3      	lsls	r3, r6, #3
 80013ac:	4699      	mov	r9, r3
 80013ae:	00c9      	lsls	r1, r1, #3
 80013b0:	0f72      	lsrs	r2, r6, #29
 80013b2:	4d44      	ldr	r5, [pc, #272]	; (80014c4 <__aeabi_dsub+0x348>)
 80013b4:	4311      	orrs	r1, r2
 80013b6:	464b      	mov	r3, r9
 80013b8:	08de      	lsrs	r6, r3, #3
 80013ba:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <__aeabi_dsub+0x348>)
 80013bc:	074f      	lsls	r7, r1, #29
 80013be:	4337      	orrs	r7, r6
 80013c0:	08ca      	lsrs	r2, r1, #3
 80013c2:	429d      	cmp	r5, r3
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dsub+0x24c>
 80013c6:	e06e      	b.n	80014a6 <__aeabi_dsub+0x32a>
 80013c8:	0312      	lsls	r2, r2, #12
 80013ca:	056d      	lsls	r5, r5, #21
 80013cc:	0b12      	lsrs	r2, r2, #12
 80013ce:	0d6d      	lsrs	r5, r5, #21
 80013d0:	2100      	movs	r1, #0
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	0b13      	lsrs	r3, r2, #12
 80013d6:	0d0a      	lsrs	r2, r1, #20
 80013d8:	0512      	lsls	r2, r2, #20
 80013da:	431a      	orrs	r2, r3
 80013dc:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <__aeabi_dsub+0x350>)
 80013de:	052d      	lsls	r5, r5, #20
 80013e0:	4013      	ands	r3, r2
 80013e2:	432b      	orrs	r3, r5
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	07e4      	lsls	r4, r4, #31
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	4323      	orrs	r3, r4
 80013ec:	0038      	movs	r0, r7
 80013ee:	0019      	movs	r1, r3
 80013f0:	bc3c      	pop	{r2, r3, r4, r5}
 80013f2:	4690      	mov	r8, r2
 80013f4:	4699      	mov	r9, r3
 80013f6:	46a2      	mov	sl, r4
 80013f8:	46ab      	mov	fp, r5
 80013fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013fc:	4663      	mov	r3, ip
 80013fe:	4313      	orrs	r3, r2
 8001400:	d011      	beq.n	8001426 <__aeabi_dsub+0x2aa>
 8001402:	1e73      	subs	r3, r6, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d000      	beq.n	800140a <__aeabi_dsub+0x28e>
 8001408:	e107      	b.n	800161a <__aeabi_dsub+0x49e>
 800140a:	1886      	adds	r6, r0, r2
 800140c:	4286      	cmp	r6, r0
 800140e:	4180      	sbcs	r0, r0
 8001410:	4461      	add	r1, ip
 8001412:	4240      	negs	r0, r0
 8001414:	1809      	adds	r1, r1, r0
 8001416:	2501      	movs	r5, #1
 8001418:	020b      	lsls	r3, r1, #8
 800141a:	d537      	bpl.n	800148c <__aeabi_dsub+0x310>
 800141c:	2502      	movs	r5, #2
 800141e:	e77b      	b.n	8001318 <__aeabi_dsub+0x19c>
 8001420:	003e      	movs	r6, r7
 8001422:	4661      	mov	r1, ip
 8001424:	4691      	mov	r9, r2
 8001426:	0035      	movs	r5, r6
 8001428:	e7c5      	b.n	80013b6 <__aeabi_dsub+0x23a>
 800142a:	465c      	mov	r4, fp
 800142c:	2d00      	cmp	r5, #0
 800142e:	d000      	beq.n	8001432 <__aeabi_dsub+0x2b6>
 8001430:	e0e1      	b.n	80015f6 <__aeabi_dsub+0x47a>
 8001432:	000b      	movs	r3, r1
 8001434:	4303      	orrs	r3, r0
 8001436:	d0f3      	beq.n	8001420 <__aeabi_dsub+0x2a4>
 8001438:	1c73      	adds	r3, r6, #1
 800143a:	d100      	bne.n	800143e <__aeabi_dsub+0x2c2>
 800143c:	e1ac      	b.n	8001798 <__aeabi_dsub+0x61c>
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <__aeabi_dsub+0x348>)
 8001440:	429f      	cmp	r7, r3
 8001442:	d100      	bne.n	8001446 <__aeabi_dsub+0x2ca>
 8001444:	e13a      	b.n	80016bc <__aeabi_dsub+0x540>
 8001446:	43f3      	mvns	r3, r6
 8001448:	2b38      	cmp	r3, #56	; 0x38
 800144a:	dd00      	ble.n	800144e <__aeabi_dsub+0x2d2>
 800144c:	e16f      	b.n	800172e <__aeabi_dsub+0x5b2>
 800144e:	2b1f      	cmp	r3, #31
 8001450:	dd00      	ble.n	8001454 <__aeabi_dsub+0x2d8>
 8001452:	e18c      	b.n	800176e <__aeabi_dsub+0x5f2>
 8001454:	2520      	movs	r5, #32
 8001456:	000e      	movs	r6, r1
 8001458:	1aed      	subs	r5, r5, r3
 800145a:	40ae      	lsls	r6, r5
 800145c:	46b0      	mov	r8, r6
 800145e:	0006      	movs	r6, r0
 8001460:	46aa      	mov	sl, r5
 8001462:	40de      	lsrs	r6, r3
 8001464:	4645      	mov	r5, r8
 8001466:	4335      	orrs	r5, r6
 8001468:	002e      	movs	r6, r5
 800146a:	4655      	mov	r5, sl
 800146c:	40d9      	lsrs	r1, r3
 800146e:	40a8      	lsls	r0, r5
 8001470:	4663      	mov	r3, ip
 8001472:	1e45      	subs	r5, r0, #1
 8001474:	41a8      	sbcs	r0, r5
 8001476:	1a5b      	subs	r3, r3, r1
 8001478:	469c      	mov	ip, r3
 800147a:	4330      	orrs	r0, r6
 800147c:	1a16      	subs	r6, r2, r0
 800147e:	42b2      	cmp	r2, r6
 8001480:	4192      	sbcs	r2, r2
 8001482:	4663      	mov	r3, ip
 8001484:	4252      	negs	r2, r2
 8001486:	1a99      	subs	r1, r3, r2
 8001488:	003d      	movs	r5, r7
 800148a:	e6b4      	b.n	80011f6 <__aeabi_dsub+0x7a>
 800148c:	2207      	movs	r2, #7
 800148e:	4032      	ands	r2, r6
 8001490:	2a00      	cmp	r2, #0
 8001492:	d000      	beq.n	8001496 <__aeabi_dsub+0x31a>
 8001494:	e6e4      	b.n	8001260 <__aeabi_dsub+0xe4>
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <__aeabi_dsub+0x348>)
 8001498:	08f6      	lsrs	r6, r6, #3
 800149a:	074f      	lsls	r7, r1, #29
 800149c:	4337      	orrs	r7, r6
 800149e:	08ca      	lsrs	r2, r1, #3
 80014a0:	429d      	cmp	r5, r3
 80014a2:	d000      	beq.n	80014a6 <__aeabi_dsub+0x32a>
 80014a4:	e790      	b.n	80013c8 <__aeabi_dsub+0x24c>
 80014a6:	003b      	movs	r3, r7
 80014a8:	4313      	orrs	r3, r2
 80014aa:	d100      	bne.n	80014ae <__aeabi_dsub+0x332>
 80014ac:	e1a6      	b.n	80017fc <__aeabi_dsub+0x680>
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	031b      	lsls	r3, r3, #12
 80014b2:	431a      	orrs	r2, r3
 80014b4:	0312      	lsls	r2, r2, #12
 80014b6:	0b12      	lsrs	r2, r2, #12
 80014b8:	4d02      	ldr	r5, [pc, #8]	; (80014c4 <__aeabi_dsub+0x348>)
 80014ba:	e789      	b.n	80013d0 <__aeabi_dsub+0x254>
 80014bc:	0015      	movs	r5, r2
 80014be:	2200      	movs	r2, #0
 80014c0:	2700      	movs	r7, #0
 80014c2:	e785      	b.n	80013d0 <__aeabi_dsub+0x254>
 80014c4:	000007ff 	.word	0x000007ff
 80014c8:	ff7fffff 	.word	0xff7fffff
 80014cc:	800fffff 	.word	0x800fffff
 80014d0:	2e00      	cmp	r6, #0
 80014d2:	d000      	beq.n	80014d6 <__aeabi_dsub+0x35a>
 80014d4:	e0c7      	b.n	8001666 <__aeabi_dsub+0x4ea>
 80014d6:	1c6b      	adds	r3, r5, #1
 80014d8:	055e      	lsls	r6, r3, #21
 80014da:	0d76      	lsrs	r6, r6, #21
 80014dc:	2e01      	cmp	r6, #1
 80014de:	dc00      	bgt.n	80014e2 <__aeabi_dsub+0x366>
 80014e0:	e0f0      	b.n	80016c4 <__aeabi_dsub+0x548>
 80014e2:	4dc8      	ldr	r5, [pc, #800]	; (8001804 <__aeabi_dsub+0x688>)
 80014e4:	42ab      	cmp	r3, r5
 80014e6:	d100      	bne.n	80014ea <__aeabi_dsub+0x36e>
 80014e8:	e0b9      	b.n	800165e <__aeabi_dsub+0x4e2>
 80014ea:	1885      	adds	r5, r0, r2
 80014ec:	000a      	movs	r2, r1
 80014ee:	4285      	cmp	r5, r0
 80014f0:	4189      	sbcs	r1, r1
 80014f2:	4462      	add	r2, ip
 80014f4:	4249      	negs	r1, r1
 80014f6:	1851      	adds	r1, r2, r1
 80014f8:	2207      	movs	r2, #7
 80014fa:	07ce      	lsls	r6, r1, #31
 80014fc:	086d      	lsrs	r5, r5, #1
 80014fe:	432e      	orrs	r6, r5
 8001500:	0849      	lsrs	r1, r1, #1
 8001502:	4032      	ands	r2, r6
 8001504:	001d      	movs	r5, r3
 8001506:	e6a9      	b.n	800125c <__aeabi_dsub+0xe0>
 8001508:	49bf      	ldr	r1, [pc, #764]	; (8001808 <__aeabi_dsub+0x68c>)
 800150a:	1aed      	subs	r5, r5, r3
 800150c:	4011      	ands	r1, r2
 800150e:	2207      	movs	r2, #7
 8001510:	4032      	ands	r2, r6
 8001512:	e6a3      	b.n	800125c <__aeabi_dsub+0xe0>
 8001514:	0032      	movs	r2, r6
 8001516:	3828      	subs	r0, #40	; 0x28
 8001518:	4082      	lsls	r2, r0
 800151a:	2600      	movs	r6, #0
 800151c:	e686      	b.n	800122c <__aeabi_dsub+0xb0>
 800151e:	0030      	movs	r0, r6
 8001520:	f000 fa54 	bl	80019cc <__clzsi2>
 8001524:	3020      	adds	r0, #32
 8001526:	e673      	b.n	8001210 <__aeabi_dsub+0x94>
 8001528:	4663      	mov	r3, ip
 800152a:	4313      	orrs	r3, r2
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	4193      	sbcs	r3, r2
 8001530:	1ac6      	subs	r6, r0, r3
 8001532:	42b0      	cmp	r0, r6
 8001534:	4180      	sbcs	r0, r0
 8001536:	4240      	negs	r0, r0
 8001538:	1a09      	subs	r1, r1, r0
 800153a:	e65c      	b.n	80011f6 <__aeabi_dsub+0x7a>
 800153c:	000e      	movs	r6, r1
 800153e:	4667      	mov	r7, ip
 8001540:	4306      	orrs	r6, r0
 8001542:	4317      	orrs	r7, r2
 8001544:	2d00      	cmp	r5, #0
 8001546:	d15e      	bne.n	8001606 <__aeabi_dsub+0x48a>
 8001548:	2e00      	cmp	r6, #0
 800154a:	d000      	beq.n	800154e <__aeabi_dsub+0x3d2>
 800154c:	e0f3      	b.n	8001736 <__aeabi_dsub+0x5ba>
 800154e:	2f00      	cmp	r7, #0
 8001550:	d100      	bne.n	8001554 <__aeabi_dsub+0x3d8>
 8001552:	e11e      	b.n	8001792 <__aeabi_dsub+0x616>
 8001554:	465c      	mov	r4, fp
 8001556:	4661      	mov	r1, ip
 8001558:	4691      	mov	r9, r2
 800155a:	e72c      	b.n	80013b6 <__aeabi_dsub+0x23a>
 800155c:	4fa9      	ldr	r7, [pc, #676]	; (8001804 <__aeabi_dsub+0x688>)
 800155e:	42be      	cmp	r6, r7
 8001560:	d07b      	beq.n	800165a <__aeabi_dsub+0x4de>
 8001562:	001e      	movs	r6, r3
 8001564:	e6f1      	b.n	800134a <__aeabi_dsub+0x1ce>
 8001566:	0010      	movs	r0, r2
 8001568:	3d1f      	subs	r5, #31
 800156a:	40e8      	lsrs	r0, r5
 800156c:	2b20      	cmp	r3, #32
 800156e:	d003      	beq.n	8001578 <__aeabi_dsub+0x3fc>
 8001570:	2140      	movs	r1, #64	; 0x40
 8001572:	1acb      	subs	r3, r1, r3
 8001574:	409a      	lsls	r2, r3
 8001576:	4316      	orrs	r6, r2
 8001578:	1e73      	subs	r3, r6, #1
 800157a:	419e      	sbcs	r6, r3
 800157c:	2207      	movs	r2, #7
 800157e:	4306      	orrs	r6, r0
 8001580:	4032      	ands	r2, r6
 8001582:	2100      	movs	r1, #0
 8001584:	2500      	movs	r5, #0
 8001586:	e783      	b.n	8001490 <__aeabi_dsub+0x314>
 8001588:	1a16      	subs	r6, r2, r0
 800158a:	4663      	mov	r3, ip
 800158c:	42b2      	cmp	r2, r6
 800158e:	4180      	sbcs	r0, r0
 8001590:	1a59      	subs	r1, r3, r1
 8001592:	4240      	negs	r0, r0
 8001594:	1a0b      	subs	r3, r1, r0
 8001596:	4698      	mov	r8, r3
 8001598:	465c      	mov	r4, fp
 800159a:	e632      	b.n	8001202 <__aeabi_dsub+0x86>
 800159c:	2e1f      	cmp	r6, #31
 800159e:	dd00      	ble.n	80015a2 <__aeabi_dsub+0x426>
 80015a0:	e0ab      	b.n	80016fa <__aeabi_dsub+0x57e>
 80015a2:	2720      	movs	r7, #32
 80015a4:	1bbb      	subs	r3, r7, r6
 80015a6:	469a      	mov	sl, r3
 80015a8:	4663      	mov	r3, ip
 80015aa:	4657      	mov	r7, sl
 80015ac:	40bb      	lsls	r3, r7
 80015ae:	4699      	mov	r9, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	464f      	mov	r7, r9
 80015b4:	40f3      	lsrs	r3, r6
 80015b6:	431f      	orrs	r7, r3
 80015b8:	003b      	movs	r3, r7
 80015ba:	4657      	mov	r7, sl
 80015bc:	40ba      	lsls	r2, r7
 80015be:	1e57      	subs	r7, r2, #1
 80015c0:	41ba      	sbcs	r2, r7
 80015c2:	4313      	orrs	r3, r2
 80015c4:	4662      	mov	r2, ip
 80015c6:	40f2      	lsrs	r2, r6
 80015c8:	1889      	adds	r1, r1, r2
 80015ca:	e698      	b.n	80012fe <__aeabi_dsub+0x182>
 80015cc:	2720      	movs	r7, #32
 80015ce:	1bbb      	subs	r3, r7, r6
 80015d0:	469a      	mov	sl, r3
 80015d2:	4663      	mov	r3, ip
 80015d4:	4657      	mov	r7, sl
 80015d6:	40bb      	lsls	r3, r7
 80015d8:	4699      	mov	r9, r3
 80015da:	0013      	movs	r3, r2
 80015dc:	464f      	mov	r7, r9
 80015de:	40f3      	lsrs	r3, r6
 80015e0:	431f      	orrs	r7, r3
 80015e2:	003b      	movs	r3, r7
 80015e4:	4657      	mov	r7, sl
 80015e6:	40ba      	lsls	r2, r7
 80015e8:	1e57      	subs	r7, r2, #1
 80015ea:	41ba      	sbcs	r2, r7
 80015ec:	4313      	orrs	r3, r2
 80015ee:	4662      	mov	r2, ip
 80015f0:	40f2      	lsrs	r2, r6
 80015f2:	1a89      	subs	r1, r1, r2
 80015f4:	e79c      	b.n	8001530 <__aeabi_dsub+0x3b4>
 80015f6:	4b83      	ldr	r3, [pc, #524]	; (8001804 <__aeabi_dsub+0x688>)
 80015f8:	429f      	cmp	r7, r3
 80015fa:	d05f      	beq.n	80016bc <__aeabi_dsub+0x540>
 80015fc:	2580      	movs	r5, #128	; 0x80
 80015fe:	042d      	lsls	r5, r5, #16
 8001600:	4273      	negs	r3, r6
 8001602:	4329      	orrs	r1, r5
 8001604:	e720      	b.n	8001448 <__aeabi_dsub+0x2cc>
 8001606:	2e00      	cmp	r6, #0
 8001608:	d10c      	bne.n	8001624 <__aeabi_dsub+0x4a8>
 800160a:	2f00      	cmp	r7, #0
 800160c:	d100      	bne.n	8001610 <__aeabi_dsub+0x494>
 800160e:	e0d0      	b.n	80017b2 <__aeabi_dsub+0x636>
 8001610:	465c      	mov	r4, fp
 8001612:	4661      	mov	r1, ip
 8001614:	4691      	mov	r9, r2
 8001616:	4d7b      	ldr	r5, [pc, #492]	; (8001804 <__aeabi_dsub+0x688>)
 8001618:	e6cd      	b.n	80013b6 <__aeabi_dsub+0x23a>
 800161a:	4f7a      	ldr	r7, [pc, #488]	; (8001804 <__aeabi_dsub+0x688>)
 800161c:	42be      	cmp	r6, r7
 800161e:	d01c      	beq.n	800165a <__aeabi_dsub+0x4de>
 8001620:	001e      	movs	r6, r3
 8001622:	e665      	b.n	80012f0 <__aeabi_dsub+0x174>
 8001624:	2f00      	cmp	r7, #0
 8001626:	d018      	beq.n	800165a <__aeabi_dsub+0x4de>
 8001628:	08c0      	lsrs	r0, r0, #3
 800162a:	074e      	lsls	r6, r1, #29
 800162c:	4306      	orrs	r6, r0
 800162e:	2080      	movs	r0, #128	; 0x80
 8001630:	08c9      	lsrs	r1, r1, #3
 8001632:	0300      	lsls	r0, r0, #12
 8001634:	4201      	tst	r1, r0
 8001636:	d008      	beq.n	800164a <__aeabi_dsub+0x4ce>
 8001638:	4663      	mov	r3, ip
 800163a:	08dc      	lsrs	r4, r3, #3
 800163c:	4204      	tst	r4, r0
 800163e:	d104      	bne.n	800164a <__aeabi_dsub+0x4ce>
 8001640:	0021      	movs	r1, r4
 8001642:	46da      	mov	sl, fp
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	075e      	lsls	r6, r3, #29
 8001648:	4316      	orrs	r6, r2
 800164a:	00f3      	lsls	r3, r6, #3
 800164c:	4699      	mov	r9, r3
 800164e:	2401      	movs	r4, #1
 8001650:	4653      	mov	r3, sl
 8001652:	00c9      	lsls	r1, r1, #3
 8001654:	0f72      	lsrs	r2, r6, #29
 8001656:	4311      	orrs	r1, r2
 8001658:	401c      	ands	r4, r3
 800165a:	4d6a      	ldr	r5, [pc, #424]	; (8001804 <__aeabi_dsub+0x688>)
 800165c:	e6ab      	b.n	80013b6 <__aeabi_dsub+0x23a>
 800165e:	001d      	movs	r5, r3
 8001660:	2200      	movs	r2, #0
 8001662:	2700      	movs	r7, #0
 8001664:	e6b4      	b.n	80013d0 <__aeabi_dsub+0x254>
 8001666:	2d00      	cmp	r5, #0
 8001668:	d159      	bne.n	800171e <__aeabi_dsub+0x5a2>
 800166a:	000b      	movs	r3, r1
 800166c:	4303      	orrs	r3, r0
 800166e:	d100      	bne.n	8001672 <__aeabi_dsub+0x4f6>
 8001670:	e6d6      	b.n	8001420 <__aeabi_dsub+0x2a4>
 8001672:	1c73      	adds	r3, r6, #1
 8001674:	d100      	bne.n	8001678 <__aeabi_dsub+0x4fc>
 8001676:	e0b2      	b.n	80017de <__aeabi_dsub+0x662>
 8001678:	4b62      	ldr	r3, [pc, #392]	; (8001804 <__aeabi_dsub+0x688>)
 800167a:	429f      	cmp	r7, r3
 800167c:	d01e      	beq.n	80016bc <__aeabi_dsub+0x540>
 800167e:	43f3      	mvns	r3, r6
 8001680:	2b38      	cmp	r3, #56	; 0x38
 8001682:	dc6f      	bgt.n	8001764 <__aeabi_dsub+0x5e8>
 8001684:	2b1f      	cmp	r3, #31
 8001686:	dd00      	ble.n	800168a <__aeabi_dsub+0x50e>
 8001688:	e097      	b.n	80017ba <__aeabi_dsub+0x63e>
 800168a:	2520      	movs	r5, #32
 800168c:	000e      	movs	r6, r1
 800168e:	1aed      	subs	r5, r5, r3
 8001690:	40ae      	lsls	r6, r5
 8001692:	46b0      	mov	r8, r6
 8001694:	0006      	movs	r6, r0
 8001696:	46aa      	mov	sl, r5
 8001698:	40de      	lsrs	r6, r3
 800169a:	4645      	mov	r5, r8
 800169c:	4335      	orrs	r5, r6
 800169e:	002e      	movs	r6, r5
 80016a0:	4655      	mov	r5, sl
 80016a2:	40a8      	lsls	r0, r5
 80016a4:	40d9      	lsrs	r1, r3
 80016a6:	1e45      	subs	r5, r0, #1
 80016a8:	41a8      	sbcs	r0, r5
 80016aa:	448c      	add	ip, r1
 80016ac:	4306      	orrs	r6, r0
 80016ae:	18b6      	adds	r6, r6, r2
 80016b0:	4296      	cmp	r6, r2
 80016b2:	4192      	sbcs	r2, r2
 80016b4:	4251      	negs	r1, r2
 80016b6:	4461      	add	r1, ip
 80016b8:	003d      	movs	r5, r7
 80016ba:	e625      	b.n	8001308 <__aeabi_dsub+0x18c>
 80016bc:	003d      	movs	r5, r7
 80016be:	4661      	mov	r1, ip
 80016c0:	4691      	mov	r9, r2
 80016c2:	e678      	b.n	80013b6 <__aeabi_dsub+0x23a>
 80016c4:	000b      	movs	r3, r1
 80016c6:	4303      	orrs	r3, r0
 80016c8:	2d00      	cmp	r5, #0
 80016ca:	d000      	beq.n	80016ce <__aeabi_dsub+0x552>
 80016cc:	e655      	b.n	800137a <__aeabi_dsub+0x1fe>
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f5      	beq.n	80016be <__aeabi_dsub+0x542>
 80016d2:	4663      	mov	r3, ip
 80016d4:	4313      	orrs	r3, r2
 80016d6:	d100      	bne.n	80016da <__aeabi_dsub+0x55e>
 80016d8:	e66d      	b.n	80013b6 <__aeabi_dsub+0x23a>
 80016da:	1886      	adds	r6, r0, r2
 80016dc:	4286      	cmp	r6, r0
 80016de:	4180      	sbcs	r0, r0
 80016e0:	4461      	add	r1, ip
 80016e2:	4240      	negs	r0, r0
 80016e4:	1809      	adds	r1, r1, r0
 80016e6:	2200      	movs	r2, #0
 80016e8:	020b      	lsls	r3, r1, #8
 80016ea:	d400      	bmi.n	80016ee <__aeabi_dsub+0x572>
 80016ec:	e6d0      	b.n	8001490 <__aeabi_dsub+0x314>
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <__aeabi_dsub+0x68c>)
 80016f0:	3501      	adds	r5, #1
 80016f2:	4019      	ands	r1, r3
 80016f4:	e5b2      	b.n	800125c <__aeabi_dsub+0xe0>
 80016f6:	46b1      	mov	r9, r6
 80016f8:	e65d      	b.n	80013b6 <__aeabi_dsub+0x23a>
 80016fa:	0033      	movs	r3, r6
 80016fc:	4667      	mov	r7, ip
 80016fe:	3b20      	subs	r3, #32
 8001700:	40df      	lsrs	r7, r3
 8001702:	003b      	movs	r3, r7
 8001704:	2e20      	cmp	r6, #32
 8001706:	d005      	beq.n	8001714 <__aeabi_dsub+0x598>
 8001708:	2740      	movs	r7, #64	; 0x40
 800170a:	1bbf      	subs	r7, r7, r6
 800170c:	4666      	mov	r6, ip
 800170e:	40be      	lsls	r6, r7
 8001710:	4332      	orrs	r2, r6
 8001712:	4690      	mov	r8, r2
 8001714:	4646      	mov	r6, r8
 8001716:	1e72      	subs	r2, r6, #1
 8001718:	4196      	sbcs	r6, r2
 800171a:	4333      	orrs	r3, r6
 800171c:	e5ef      	b.n	80012fe <__aeabi_dsub+0x182>
 800171e:	4b39      	ldr	r3, [pc, #228]	; (8001804 <__aeabi_dsub+0x688>)
 8001720:	429f      	cmp	r7, r3
 8001722:	d0cb      	beq.n	80016bc <__aeabi_dsub+0x540>
 8001724:	2580      	movs	r5, #128	; 0x80
 8001726:	042d      	lsls	r5, r5, #16
 8001728:	4273      	negs	r3, r6
 800172a:	4329      	orrs	r1, r5
 800172c:	e7a8      	b.n	8001680 <__aeabi_dsub+0x504>
 800172e:	4308      	orrs	r0, r1
 8001730:	1e41      	subs	r1, r0, #1
 8001732:	4188      	sbcs	r0, r1
 8001734:	e6a2      	b.n	800147c <__aeabi_dsub+0x300>
 8001736:	2f00      	cmp	r7, #0
 8001738:	d100      	bne.n	800173c <__aeabi_dsub+0x5c0>
 800173a:	e63c      	b.n	80013b6 <__aeabi_dsub+0x23a>
 800173c:	4663      	mov	r3, ip
 800173e:	1a86      	subs	r6, r0, r2
 8001740:	1acf      	subs	r7, r1, r3
 8001742:	42b0      	cmp	r0, r6
 8001744:	419b      	sbcs	r3, r3
 8001746:	425b      	negs	r3, r3
 8001748:	1afb      	subs	r3, r7, r3
 800174a:	4698      	mov	r8, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	d54e      	bpl.n	80017ee <__aeabi_dsub+0x672>
 8001750:	1a16      	subs	r6, r2, r0
 8001752:	4663      	mov	r3, ip
 8001754:	42b2      	cmp	r2, r6
 8001756:	4192      	sbcs	r2, r2
 8001758:	1a59      	subs	r1, r3, r1
 800175a:	4252      	negs	r2, r2
 800175c:	1a89      	subs	r1, r1, r2
 800175e:	465c      	mov	r4, fp
 8001760:	2200      	movs	r2, #0
 8001762:	e57b      	b.n	800125c <__aeabi_dsub+0xe0>
 8001764:	4301      	orrs	r1, r0
 8001766:	000e      	movs	r6, r1
 8001768:	1e71      	subs	r1, r6, #1
 800176a:	418e      	sbcs	r6, r1
 800176c:	e79f      	b.n	80016ae <__aeabi_dsub+0x532>
 800176e:	001d      	movs	r5, r3
 8001770:	000e      	movs	r6, r1
 8001772:	3d20      	subs	r5, #32
 8001774:	40ee      	lsrs	r6, r5
 8001776:	46b0      	mov	r8, r6
 8001778:	2b20      	cmp	r3, #32
 800177a:	d004      	beq.n	8001786 <__aeabi_dsub+0x60a>
 800177c:	2540      	movs	r5, #64	; 0x40
 800177e:	1aeb      	subs	r3, r5, r3
 8001780:	4099      	lsls	r1, r3
 8001782:	4308      	orrs	r0, r1
 8001784:	4681      	mov	r9, r0
 8001786:	4648      	mov	r0, r9
 8001788:	4643      	mov	r3, r8
 800178a:	1e41      	subs	r1, r0, #1
 800178c:	4188      	sbcs	r0, r1
 800178e:	4318      	orrs	r0, r3
 8001790:	e674      	b.n	800147c <__aeabi_dsub+0x300>
 8001792:	2200      	movs	r2, #0
 8001794:	2400      	movs	r4, #0
 8001796:	e617      	b.n	80013c8 <__aeabi_dsub+0x24c>
 8001798:	1a16      	subs	r6, r2, r0
 800179a:	4663      	mov	r3, ip
 800179c:	42b2      	cmp	r2, r6
 800179e:	4192      	sbcs	r2, r2
 80017a0:	1a59      	subs	r1, r3, r1
 80017a2:	4252      	negs	r2, r2
 80017a4:	1a89      	subs	r1, r1, r2
 80017a6:	003d      	movs	r5, r7
 80017a8:	e525      	b.n	80011f6 <__aeabi_dsub+0x7a>
 80017aa:	4661      	mov	r1, ip
 80017ac:	4691      	mov	r9, r2
 80017ae:	4d15      	ldr	r5, [pc, #84]	; (8001804 <__aeabi_dsub+0x688>)
 80017b0:	e601      	b.n	80013b6 <__aeabi_dsub+0x23a>
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	2400      	movs	r4, #0
 80017b6:	0312      	lsls	r2, r2, #12
 80017b8:	e679      	b.n	80014ae <__aeabi_dsub+0x332>
 80017ba:	001d      	movs	r5, r3
 80017bc:	000e      	movs	r6, r1
 80017be:	3d20      	subs	r5, #32
 80017c0:	40ee      	lsrs	r6, r5
 80017c2:	46b0      	mov	r8, r6
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d004      	beq.n	80017d2 <__aeabi_dsub+0x656>
 80017c8:	2540      	movs	r5, #64	; 0x40
 80017ca:	1aeb      	subs	r3, r5, r3
 80017cc:	4099      	lsls	r1, r3
 80017ce:	4308      	orrs	r0, r1
 80017d0:	4681      	mov	r9, r0
 80017d2:	464e      	mov	r6, r9
 80017d4:	4643      	mov	r3, r8
 80017d6:	1e71      	subs	r1, r6, #1
 80017d8:	418e      	sbcs	r6, r1
 80017da:	431e      	orrs	r6, r3
 80017dc:	e767      	b.n	80016ae <__aeabi_dsub+0x532>
 80017de:	1886      	adds	r6, r0, r2
 80017e0:	4296      	cmp	r6, r2
 80017e2:	419b      	sbcs	r3, r3
 80017e4:	4461      	add	r1, ip
 80017e6:	425b      	negs	r3, r3
 80017e8:	18c9      	adds	r1, r1, r3
 80017ea:	003d      	movs	r5, r7
 80017ec:	e58c      	b.n	8001308 <__aeabi_dsub+0x18c>
 80017ee:	4647      	mov	r7, r8
 80017f0:	4337      	orrs	r7, r6
 80017f2:	d0ce      	beq.n	8001792 <__aeabi_dsub+0x616>
 80017f4:	2207      	movs	r2, #7
 80017f6:	4641      	mov	r1, r8
 80017f8:	4032      	ands	r2, r6
 80017fa:	e649      	b.n	8001490 <__aeabi_dsub+0x314>
 80017fc:	2700      	movs	r7, #0
 80017fe:	003a      	movs	r2, r7
 8001800:	e5e6      	b.n	80013d0 <__aeabi_dsub+0x254>
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	000007ff 	.word	0x000007ff
 8001808:	ff7fffff 	.word	0xff7fffff

0800180c <__aeabi_d2iz>:
 800180c:	b530      	push	{r4, r5, lr}
 800180e:	4d14      	ldr	r5, [pc, #80]	; (8001860 <__aeabi_d2iz+0x54>)
 8001810:	030a      	lsls	r2, r1, #12
 8001812:	004b      	lsls	r3, r1, #1
 8001814:	0b12      	lsrs	r2, r2, #12
 8001816:	0d5b      	lsrs	r3, r3, #21
 8001818:	0fc9      	lsrs	r1, r1, #31
 800181a:	2400      	movs	r4, #0
 800181c:	42ab      	cmp	r3, r5
 800181e:	dd11      	ble.n	8001844 <__aeabi_d2iz+0x38>
 8001820:	4c10      	ldr	r4, [pc, #64]	; (8001864 <__aeabi_d2iz+0x58>)
 8001822:	42a3      	cmp	r3, r4
 8001824:	dc10      	bgt.n	8001848 <__aeabi_d2iz+0x3c>
 8001826:	2480      	movs	r4, #128	; 0x80
 8001828:	0364      	lsls	r4, r4, #13
 800182a:	4322      	orrs	r2, r4
 800182c:	4c0e      	ldr	r4, [pc, #56]	; (8001868 <__aeabi_d2iz+0x5c>)
 800182e:	1ae4      	subs	r4, r4, r3
 8001830:	2c1f      	cmp	r4, #31
 8001832:	dd0c      	ble.n	800184e <__aeabi_d2iz+0x42>
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <__aeabi_d2iz+0x60>)
 8001836:	1ac3      	subs	r3, r0, r3
 8001838:	40da      	lsrs	r2, r3
 800183a:	0013      	movs	r3, r2
 800183c:	425c      	negs	r4, r3
 800183e:	2900      	cmp	r1, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_d2iz+0x38>
 8001842:	001c      	movs	r4, r3
 8001844:	0020      	movs	r0, r4
 8001846:	bd30      	pop	{r4, r5, pc}
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <__aeabi_d2iz+0x64>)
 800184a:	18cc      	adds	r4, r1, r3
 800184c:	e7fa      	b.n	8001844 <__aeabi_d2iz+0x38>
 800184e:	4d09      	ldr	r5, [pc, #36]	; (8001874 <__aeabi_d2iz+0x68>)
 8001850:	40e0      	lsrs	r0, r4
 8001852:	46ac      	mov	ip, r5
 8001854:	4463      	add	r3, ip
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	4303      	orrs	r3, r0
 800185c:	e7ee      	b.n	800183c <__aeabi_d2iz+0x30>
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	000003fe 	.word	0x000003fe
 8001864:	0000041d 	.word	0x0000041d
 8001868:	00000433 	.word	0x00000433
 800186c:	00000413 	.word	0x00000413
 8001870:	7fffffff 	.word	0x7fffffff
 8001874:	fffffbed 	.word	0xfffffbed

08001878 <__aeabi_i2d>:
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	2800      	cmp	r0, #0
 800187c:	d02d      	beq.n	80018da <__aeabi_i2d+0x62>
 800187e:	17c3      	asrs	r3, r0, #31
 8001880:	18c5      	adds	r5, r0, r3
 8001882:	405d      	eors	r5, r3
 8001884:	0fc4      	lsrs	r4, r0, #31
 8001886:	0028      	movs	r0, r5
 8001888:	f000 f8a0 	bl	80019cc <__clzsi2>
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <__aeabi_i2d+0x6c>)
 800188e:	1a1b      	subs	r3, r3, r0
 8001890:	055b      	lsls	r3, r3, #21
 8001892:	0d5b      	lsrs	r3, r3, #21
 8001894:	280a      	cmp	r0, #10
 8001896:	dd15      	ble.n	80018c4 <__aeabi_i2d+0x4c>
 8001898:	380b      	subs	r0, #11
 800189a:	4085      	lsls	r5, r0
 800189c:	2200      	movs	r2, #0
 800189e:	032d      	lsls	r5, r5, #12
 80018a0:	0b2d      	lsrs	r5, r5, #12
 80018a2:	2100      	movs	r1, #0
 80018a4:	0010      	movs	r0, r2
 80018a6:	032d      	lsls	r5, r5, #12
 80018a8:	0d0a      	lsrs	r2, r1, #20
 80018aa:	0b2d      	lsrs	r5, r5, #12
 80018ac:	0512      	lsls	r2, r2, #20
 80018ae:	432a      	orrs	r2, r5
 80018b0:	4d0d      	ldr	r5, [pc, #52]	; (80018e8 <__aeabi_i2d+0x70>)
 80018b2:	051b      	lsls	r3, r3, #20
 80018b4:	402a      	ands	r2, r5
 80018b6:	4313      	orrs	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	07e4      	lsls	r4, r4, #31
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	4323      	orrs	r3, r4
 80018c0:	0019      	movs	r1, r3
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
 80018c4:	0002      	movs	r2, r0
 80018c6:	0029      	movs	r1, r5
 80018c8:	3215      	adds	r2, #21
 80018ca:	4091      	lsls	r1, r2
 80018cc:	000a      	movs	r2, r1
 80018ce:	210b      	movs	r1, #11
 80018d0:	1a08      	subs	r0, r1, r0
 80018d2:	40c5      	lsrs	r5, r0
 80018d4:	032d      	lsls	r5, r5, #12
 80018d6:	0b2d      	lsrs	r5, r5, #12
 80018d8:	e7e3      	b.n	80018a2 <__aeabi_i2d+0x2a>
 80018da:	2400      	movs	r4, #0
 80018dc:	2300      	movs	r3, #0
 80018de:	2500      	movs	r5, #0
 80018e0:	2200      	movs	r2, #0
 80018e2:	e7de      	b.n	80018a2 <__aeabi_i2d+0x2a>
 80018e4:	0000041e 	.word	0x0000041e
 80018e8:	800fffff 	.word	0x800fffff

080018ec <__aeabi_ui2d>:
 80018ec:	b510      	push	{r4, lr}
 80018ee:	1e04      	subs	r4, r0, #0
 80018f0:	d025      	beq.n	800193e <__aeabi_ui2d+0x52>
 80018f2:	f000 f86b 	bl	80019cc <__clzsi2>
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <__aeabi_ui2d+0x5c>)
 80018f8:	1a1b      	subs	r3, r3, r0
 80018fa:	055b      	lsls	r3, r3, #21
 80018fc:	0d5b      	lsrs	r3, r3, #21
 80018fe:	280a      	cmp	r0, #10
 8001900:	dd12      	ble.n	8001928 <__aeabi_ui2d+0x3c>
 8001902:	380b      	subs	r0, #11
 8001904:	4084      	lsls	r4, r0
 8001906:	2200      	movs	r2, #0
 8001908:	0324      	lsls	r4, r4, #12
 800190a:	0b24      	lsrs	r4, r4, #12
 800190c:	2100      	movs	r1, #0
 800190e:	0010      	movs	r0, r2
 8001910:	0324      	lsls	r4, r4, #12
 8001912:	0d0a      	lsrs	r2, r1, #20
 8001914:	0b24      	lsrs	r4, r4, #12
 8001916:	0512      	lsls	r2, r2, #20
 8001918:	4322      	orrs	r2, r4
 800191a:	4c0c      	ldr	r4, [pc, #48]	; (800194c <__aeabi_ui2d+0x60>)
 800191c:	051b      	lsls	r3, r3, #20
 800191e:	4022      	ands	r2, r4
 8001920:	4313      	orrs	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	0859      	lsrs	r1, r3, #1
 8001926:	bd10      	pop	{r4, pc}
 8001928:	0002      	movs	r2, r0
 800192a:	0021      	movs	r1, r4
 800192c:	3215      	adds	r2, #21
 800192e:	4091      	lsls	r1, r2
 8001930:	000a      	movs	r2, r1
 8001932:	210b      	movs	r1, #11
 8001934:	1a08      	subs	r0, r1, r0
 8001936:	40c4      	lsrs	r4, r0
 8001938:	0324      	lsls	r4, r4, #12
 800193a:	0b24      	lsrs	r4, r4, #12
 800193c:	e7e6      	b.n	800190c <__aeabi_ui2d+0x20>
 800193e:	2300      	movs	r3, #0
 8001940:	2400      	movs	r4, #0
 8001942:	2200      	movs	r2, #0
 8001944:	e7e2      	b.n	800190c <__aeabi_ui2d+0x20>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	0000041e 	.word	0x0000041e
 800194c:	800fffff 	.word	0x800fffff

08001950 <__aeabi_cdrcmple>:
 8001950:	4684      	mov	ip, r0
 8001952:	1c10      	adds	r0, r2, #0
 8001954:	4662      	mov	r2, ip
 8001956:	468c      	mov	ip, r1
 8001958:	1c19      	adds	r1, r3, #0
 800195a:	4663      	mov	r3, ip
 800195c:	e000      	b.n	8001960 <__aeabi_cdcmpeq>
 800195e:	46c0      	nop			; (mov r8, r8)

08001960 <__aeabi_cdcmpeq>:
 8001960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001962:	f000 f8fd 	bl	8001b60 <__ledf2>
 8001966:	2800      	cmp	r0, #0
 8001968:	d401      	bmi.n	800196e <__aeabi_cdcmpeq+0xe>
 800196a:	2100      	movs	r1, #0
 800196c:	42c8      	cmn	r0, r1
 800196e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001970 <__aeabi_dcmpeq>:
 8001970:	b510      	push	{r4, lr}
 8001972:	f000 f855 	bl	8001a20 <__eqdf2>
 8001976:	4240      	negs	r0, r0
 8001978:	3001      	adds	r0, #1
 800197a:	bd10      	pop	{r4, pc}

0800197c <__aeabi_dcmplt>:
 800197c:	b510      	push	{r4, lr}
 800197e:	f000 f8ef 	bl	8001b60 <__ledf2>
 8001982:	2800      	cmp	r0, #0
 8001984:	db01      	blt.n	800198a <__aeabi_dcmplt+0xe>
 8001986:	2000      	movs	r0, #0
 8001988:	bd10      	pop	{r4, pc}
 800198a:	2001      	movs	r0, #1
 800198c:	bd10      	pop	{r4, pc}
 800198e:	46c0      	nop			; (mov r8, r8)

08001990 <__aeabi_dcmple>:
 8001990:	b510      	push	{r4, lr}
 8001992:	f000 f8e5 	bl	8001b60 <__ledf2>
 8001996:	2800      	cmp	r0, #0
 8001998:	dd01      	ble.n	800199e <__aeabi_dcmple+0xe>
 800199a:	2000      	movs	r0, #0
 800199c:	bd10      	pop	{r4, pc}
 800199e:	2001      	movs	r0, #1
 80019a0:	bd10      	pop	{r4, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)

080019a4 <__aeabi_dcmpgt>:
 80019a4:	b510      	push	{r4, lr}
 80019a6:	f000 f877 	bl	8001a98 <__gedf2>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	dc01      	bgt.n	80019b2 <__aeabi_dcmpgt+0xe>
 80019ae:	2000      	movs	r0, #0
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	2001      	movs	r0, #1
 80019b4:	bd10      	pop	{r4, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)

080019b8 <__aeabi_dcmpge>:
 80019b8:	b510      	push	{r4, lr}
 80019ba:	f000 f86d 	bl	8001a98 <__gedf2>
 80019be:	2800      	cmp	r0, #0
 80019c0:	da01      	bge.n	80019c6 <__aeabi_dcmpge+0xe>
 80019c2:	2000      	movs	r0, #0
 80019c4:	bd10      	pop	{r4, pc}
 80019c6:	2001      	movs	r0, #1
 80019c8:	bd10      	pop	{r4, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)

080019cc <__clzsi2>:
 80019cc:	211c      	movs	r1, #28
 80019ce:	2301      	movs	r3, #1
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	4298      	cmp	r0, r3
 80019d4:	d301      	bcc.n	80019da <__clzsi2+0xe>
 80019d6:	0c00      	lsrs	r0, r0, #16
 80019d8:	3910      	subs	r1, #16
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	4298      	cmp	r0, r3
 80019de:	d301      	bcc.n	80019e4 <__clzsi2+0x18>
 80019e0:	0a00      	lsrs	r0, r0, #8
 80019e2:	3908      	subs	r1, #8
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	4298      	cmp	r0, r3
 80019e8:	d301      	bcc.n	80019ee <__clzsi2+0x22>
 80019ea:	0900      	lsrs	r0, r0, #4
 80019ec:	3904      	subs	r1, #4
 80019ee:	a202      	add	r2, pc, #8	; (adr r2, 80019f8 <__clzsi2+0x2c>)
 80019f0:	5c10      	ldrb	r0, [r2, r0]
 80019f2:	1840      	adds	r0, r0, r1
 80019f4:	4770      	bx	lr
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	02020304 	.word	0x02020304
 80019fc:	01010101 	.word	0x01010101
	...

08001a08 <__clzdi2>:
 8001a08:	b510      	push	{r4, lr}
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d103      	bne.n	8001a16 <__clzdi2+0xe>
 8001a0e:	f7ff ffdd 	bl	80019cc <__clzsi2>
 8001a12:	3020      	adds	r0, #32
 8001a14:	e002      	b.n	8001a1c <__clzdi2+0x14>
 8001a16:	1c08      	adds	r0, r1, #0
 8001a18:	f7ff ffd8 	bl	80019cc <__clzsi2>
 8001a1c:	bd10      	pop	{r4, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)

08001a20 <__eqdf2>:
 8001a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a22:	464f      	mov	r7, r9
 8001a24:	4646      	mov	r6, r8
 8001a26:	46d6      	mov	lr, sl
 8001a28:	4684      	mov	ip, r0
 8001a2a:	b5c0      	push	{r6, r7, lr}
 8001a2c:	4680      	mov	r8, r0
 8001a2e:	4e19      	ldr	r6, [pc, #100]	; (8001a94 <__eqdf2+0x74>)
 8001a30:	0318      	lsls	r0, r3, #12
 8001a32:	030f      	lsls	r7, r1, #12
 8001a34:	004d      	lsls	r5, r1, #1
 8001a36:	0b00      	lsrs	r0, r0, #12
 8001a38:	005c      	lsls	r4, r3, #1
 8001a3a:	4682      	mov	sl, r0
 8001a3c:	0b3f      	lsrs	r7, r7, #12
 8001a3e:	0d6d      	lsrs	r5, r5, #21
 8001a40:	0fc9      	lsrs	r1, r1, #31
 8001a42:	4691      	mov	r9, r2
 8001a44:	0d64      	lsrs	r4, r4, #21
 8001a46:	0fdb      	lsrs	r3, r3, #31
 8001a48:	2001      	movs	r0, #1
 8001a4a:	42b5      	cmp	r5, r6
 8001a4c:	d00a      	beq.n	8001a64 <__eqdf2+0x44>
 8001a4e:	42b4      	cmp	r4, r6
 8001a50:	d003      	beq.n	8001a5a <__eqdf2+0x3a>
 8001a52:	42a5      	cmp	r5, r4
 8001a54:	d101      	bne.n	8001a5a <__eqdf2+0x3a>
 8001a56:	4557      	cmp	r7, sl
 8001a58:	d00c      	beq.n	8001a74 <__eqdf2+0x54>
 8001a5a:	bc1c      	pop	{r2, r3, r4}
 8001a5c:	4690      	mov	r8, r2
 8001a5e:	4699      	mov	r9, r3
 8001a60:	46a2      	mov	sl, r4
 8001a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a64:	4666      	mov	r6, ip
 8001a66:	433e      	orrs	r6, r7
 8001a68:	d1f7      	bne.n	8001a5a <__eqdf2+0x3a>
 8001a6a:	42ac      	cmp	r4, r5
 8001a6c:	d1f5      	bne.n	8001a5a <__eqdf2+0x3a>
 8001a6e:	4654      	mov	r4, sl
 8001a70:	4314      	orrs	r4, r2
 8001a72:	d1f2      	bne.n	8001a5a <__eqdf2+0x3a>
 8001a74:	2001      	movs	r0, #1
 8001a76:	45c8      	cmp	r8, r9
 8001a78:	d1ef      	bne.n	8001a5a <__eqdf2+0x3a>
 8001a7a:	4299      	cmp	r1, r3
 8001a7c:	d007      	beq.n	8001a8e <__eqdf2+0x6e>
 8001a7e:	2d00      	cmp	r5, #0
 8001a80:	d1eb      	bne.n	8001a5a <__eqdf2+0x3a>
 8001a82:	4663      	mov	r3, ip
 8001a84:	431f      	orrs	r7, r3
 8001a86:	0038      	movs	r0, r7
 8001a88:	1e47      	subs	r7, r0, #1
 8001a8a:	41b8      	sbcs	r0, r7
 8001a8c:	e7e5      	b.n	8001a5a <__eqdf2+0x3a>
 8001a8e:	2000      	movs	r0, #0
 8001a90:	e7e3      	b.n	8001a5a <__eqdf2+0x3a>
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	000007ff 	.word	0x000007ff

08001a98 <__gedf2>:
 8001a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9a:	464f      	mov	r7, r9
 8001a9c:	4646      	mov	r6, r8
 8001a9e:	46d6      	mov	lr, sl
 8001aa0:	004d      	lsls	r5, r1, #1
 8001aa2:	b5c0      	push	{r6, r7, lr}
 8001aa4:	030e      	lsls	r6, r1, #12
 8001aa6:	0fc9      	lsrs	r1, r1, #31
 8001aa8:	468a      	mov	sl, r1
 8001aaa:	492c      	ldr	r1, [pc, #176]	; (8001b5c <__gedf2+0xc4>)
 8001aac:	031f      	lsls	r7, r3, #12
 8001aae:	005c      	lsls	r4, r3, #1
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	0b36      	lsrs	r6, r6, #12
 8001ab4:	0d6d      	lsrs	r5, r5, #21
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	0b3f      	lsrs	r7, r7, #12
 8001aba:	0d64      	lsrs	r4, r4, #21
 8001abc:	0fdb      	lsrs	r3, r3, #31
 8001abe:	428d      	cmp	r5, r1
 8001ac0:	d01e      	beq.n	8001b00 <__gedf2+0x68>
 8001ac2:	428c      	cmp	r4, r1
 8001ac4:	d016      	beq.n	8001af4 <__gedf2+0x5c>
 8001ac6:	2d00      	cmp	r5, #0
 8001ac8:	d11e      	bne.n	8001b08 <__gedf2+0x70>
 8001aca:	4330      	orrs	r0, r6
 8001acc:	4684      	mov	ip, r0
 8001ace:	2c00      	cmp	r4, #0
 8001ad0:	d101      	bne.n	8001ad6 <__gedf2+0x3e>
 8001ad2:	433a      	orrs	r2, r7
 8001ad4:	d023      	beq.n	8001b1e <__gedf2+0x86>
 8001ad6:	4662      	mov	r2, ip
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d01a      	beq.n	8001b12 <__gedf2+0x7a>
 8001adc:	459a      	cmp	sl, r3
 8001ade:	d029      	beq.n	8001b34 <__gedf2+0x9c>
 8001ae0:	4651      	mov	r1, sl
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	3901      	subs	r1, #1
 8001ae6:	4008      	ands	r0, r1
 8001ae8:	3801      	subs	r0, #1
 8001aea:	bc1c      	pop	{r2, r3, r4}
 8001aec:	4690      	mov	r8, r2
 8001aee:	4699      	mov	r9, r3
 8001af0:	46a2      	mov	sl, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	0039      	movs	r1, r7
 8001af6:	4311      	orrs	r1, r2
 8001af8:	d0e5      	beq.n	8001ac6 <__gedf2+0x2e>
 8001afa:	2002      	movs	r0, #2
 8001afc:	4240      	negs	r0, r0
 8001afe:	e7f4      	b.n	8001aea <__gedf2+0x52>
 8001b00:	4330      	orrs	r0, r6
 8001b02:	d1fa      	bne.n	8001afa <__gedf2+0x62>
 8001b04:	42ac      	cmp	r4, r5
 8001b06:	d00f      	beq.n	8001b28 <__gedf2+0x90>
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	d10f      	bne.n	8001b2c <__gedf2+0x94>
 8001b0c:	433a      	orrs	r2, r7
 8001b0e:	d0e7      	beq.n	8001ae0 <__gedf2+0x48>
 8001b10:	e00c      	b.n	8001b2c <__gedf2+0x94>
 8001b12:	2201      	movs	r2, #1
 8001b14:	3b01      	subs	r3, #1
 8001b16:	4393      	bics	r3, r2
 8001b18:	0018      	movs	r0, r3
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	e7e5      	b.n	8001aea <__gedf2+0x52>
 8001b1e:	4663      	mov	r3, ip
 8001b20:	2000      	movs	r0, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0e1      	beq.n	8001aea <__gedf2+0x52>
 8001b26:	e7db      	b.n	8001ae0 <__gedf2+0x48>
 8001b28:	433a      	orrs	r2, r7
 8001b2a:	d1e6      	bne.n	8001afa <__gedf2+0x62>
 8001b2c:	459a      	cmp	sl, r3
 8001b2e:	d1d7      	bne.n	8001ae0 <__gedf2+0x48>
 8001b30:	42a5      	cmp	r5, r4
 8001b32:	dcd5      	bgt.n	8001ae0 <__gedf2+0x48>
 8001b34:	42a5      	cmp	r5, r4
 8001b36:	db05      	blt.n	8001b44 <__gedf2+0xac>
 8001b38:	42be      	cmp	r6, r7
 8001b3a:	d8d1      	bhi.n	8001ae0 <__gedf2+0x48>
 8001b3c:	d008      	beq.n	8001b50 <__gedf2+0xb8>
 8001b3e:	2000      	movs	r0, #0
 8001b40:	42be      	cmp	r6, r7
 8001b42:	d2d2      	bcs.n	8001aea <__gedf2+0x52>
 8001b44:	4650      	mov	r0, sl
 8001b46:	2301      	movs	r3, #1
 8001b48:	3801      	subs	r0, #1
 8001b4a:	4398      	bics	r0, r3
 8001b4c:	3001      	adds	r0, #1
 8001b4e:	e7cc      	b.n	8001aea <__gedf2+0x52>
 8001b50:	45c8      	cmp	r8, r9
 8001b52:	d8c5      	bhi.n	8001ae0 <__gedf2+0x48>
 8001b54:	2000      	movs	r0, #0
 8001b56:	45c8      	cmp	r8, r9
 8001b58:	d3f4      	bcc.n	8001b44 <__gedf2+0xac>
 8001b5a:	e7c6      	b.n	8001aea <__gedf2+0x52>
 8001b5c:	000007ff 	.word	0x000007ff

08001b60 <__ledf2>:
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	464f      	mov	r7, r9
 8001b64:	4646      	mov	r6, r8
 8001b66:	46d6      	mov	lr, sl
 8001b68:	004d      	lsls	r5, r1, #1
 8001b6a:	b5c0      	push	{r6, r7, lr}
 8001b6c:	030e      	lsls	r6, r1, #12
 8001b6e:	0fc9      	lsrs	r1, r1, #31
 8001b70:	468a      	mov	sl, r1
 8001b72:	492e      	ldr	r1, [pc, #184]	; (8001c2c <__ledf2+0xcc>)
 8001b74:	031f      	lsls	r7, r3, #12
 8001b76:	005c      	lsls	r4, r3, #1
 8001b78:	4680      	mov	r8, r0
 8001b7a:	0b36      	lsrs	r6, r6, #12
 8001b7c:	0d6d      	lsrs	r5, r5, #21
 8001b7e:	4691      	mov	r9, r2
 8001b80:	0b3f      	lsrs	r7, r7, #12
 8001b82:	0d64      	lsrs	r4, r4, #21
 8001b84:	0fdb      	lsrs	r3, r3, #31
 8001b86:	428d      	cmp	r5, r1
 8001b88:	d018      	beq.n	8001bbc <__ledf2+0x5c>
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d011      	beq.n	8001bb2 <__ledf2+0x52>
 8001b8e:	2d00      	cmp	r5, #0
 8001b90:	d118      	bne.n	8001bc4 <__ledf2+0x64>
 8001b92:	4330      	orrs	r0, r6
 8001b94:	4684      	mov	ip, r0
 8001b96:	2c00      	cmp	r4, #0
 8001b98:	d11e      	bne.n	8001bd8 <__ledf2+0x78>
 8001b9a:	433a      	orrs	r2, r7
 8001b9c:	d11c      	bne.n	8001bd8 <__ledf2+0x78>
 8001b9e:	4663      	mov	r3, ip
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d030      	beq.n	8001c08 <__ledf2+0xa8>
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	2002      	movs	r0, #2
 8001baa:	3901      	subs	r1, #1
 8001bac:	4008      	ands	r0, r1
 8001bae:	3801      	subs	r0, #1
 8001bb0:	e02a      	b.n	8001c08 <__ledf2+0xa8>
 8001bb2:	0039      	movs	r1, r7
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	d0ea      	beq.n	8001b8e <__ledf2+0x2e>
 8001bb8:	2002      	movs	r0, #2
 8001bba:	e025      	b.n	8001c08 <__ledf2+0xa8>
 8001bbc:	4330      	orrs	r0, r6
 8001bbe:	d1fb      	bne.n	8001bb8 <__ledf2+0x58>
 8001bc0:	42ac      	cmp	r4, r5
 8001bc2:	d026      	beq.n	8001c12 <__ledf2+0xb2>
 8001bc4:	2c00      	cmp	r4, #0
 8001bc6:	d126      	bne.n	8001c16 <__ledf2+0xb6>
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	d124      	bne.n	8001c16 <__ledf2+0xb6>
 8001bcc:	4651      	mov	r1, sl
 8001bce:	2002      	movs	r0, #2
 8001bd0:	3901      	subs	r1, #1
 8001bd2:	4008      	ands	r0, r1
 8001bd4:	3801      	subs	r0, #1
 8001bd6:	e017      	b.n	8001c08 <__ledf2+0xa8>
 8001bd8:	4662      	mov	r2, ip
 8001bda:	2a00      	cmp	r2, #0
 8001bdc:	d00f      	beq.n	8001bfe <__ledf2+0x9e>
 8001bde:	459a      	cmp	sl, r3
 8001be0:	d1e1      	bne.n	8001ba6 <__ledf2+0x46>
 8001be2:	42a5      	cmp	r5, r4
 8001be4:	db05      	blt.n	8001bf2 <__ledf2+0x92>
 8001be6:	42be      	cmp	r6, r7
 8001be8:	d8dd      	bhi.n	8001ba6 <__ledf2+0x46>
 8001bea:	d019      	beq.n	8001c20 <__ledf2+0xc0>
 8001bec:	2000      	movs	r0, #0
 8001bee:	42be      	cmp	r6, r7
 8001bf0:	d20a      	bcs.n	8001c08 <__ledf2+0xa8>
 8001bf2:	4650      	mov	r0, sl
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	3801      	subs	r0, #1
 8001bf8:	4398      	bics	r0, r3
 8001bfa:	3001      	adds	r0, #1
 8001bfc:	e004      	b.n	8001c08 <__ledf2+0xa8>
 8001bfe:	2201      	movs	r2, #1
 8001c00:	3b01      	subs	r3, #1
 8001c02:	4393      	bics	r3, r2
 8001c04:	0018      	movs	r0, r3
 8001c06:	3001      	adds	r0, #1
 8001c08:	bc1c      	pop	{r2, r3, r4}
 8001c0a:	4690      	mov	r8, r2
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	46a2      	mov	sl, r4
 8001c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c12:	433a      	orrs	r2, r7
 8001c14:	d1d0      	bne.n	8001bb8 <__ledf2+0x58>
 8001c16:	459a      	cmp	sl, r3
 8001c18:	d1c5      	bne.n	8001ba6 <__ledf2+0x46>
 8001c1a:	42a5      	cmp	r5, r4
 8001c1c:	dcc3      	bgt.n	8001ba6 <__ledf2+0x46>
 8001c1e:	e7e0      	b.n	8001be2 <__ledf2+0x82>
 8001c20:	45c8      	cmp	r8, r9
 8001c22:	d8c0      	bhi.n	8001ba6 <__ledf2+0x46>
 8001c24:	2000      	movs	r0, #0
 8001c26:	45c8      	cmp	r8, r9
 8001c28:	d3e3      	bcc.n	8001bf2 <__ledf2+0x92>
 8001c2a:	e7ed      	b.n	8001c08 <__ledf2+0xa8>
 8001c2c:	000007ff 	.word	0x000007ff

08001c30 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8001c30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8001c32:	f000 fdc5 	bl	80027c0 <SystemApp_Init>
  SubghzApp_Init();
 8001c36:	f000 f9c9 	bl	8001fcc <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8001c3a:	bd10      	pop	{r4, pc}

08001c3c <MX_SubGHz_Phy_Process>:
void MX_SubGHz_Phy_Process(void)
{
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c3c:	2001      	movs	r0, #1
{
 8001c3e:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c40:	4240      	negs	r0, r0
 8001c42:	f005 facf 	bl	80071e4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8001c46:	bd10      	pop	{r4, pc}

08001c48 <OnledEvent>:

  /* USER CODE END OnRxError_2 */
}

static void OnledEvent(void *context)
{
 8001c48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnledEvent_1 */

  /* USER CODE END OnledEvent_1 */
  LED_Toggle(LED_GREEN);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f001 f8ae 	bl	8002dac <BSP_LED_Toggle>
  LED_Toggle(LED_RED1);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f001 f8ab 	bl	8002dac <BSP_LED_Toggle>

  UTIL_TIMER_Start(&timerLed);
 8001c56:	4802      	ldr	r0, [pc, #8]	; (8001c60 <OnledEvent+0x18>)
 8001c58:	f005 fc26 	bl	80074a8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnledEvent_2 */

  /* USER CODE END OnledEvent_2 */
}
 8001c5c:	bd10      	pop	{r4, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	20000060 	.word	0x20000060

08001c64 <PingPong_Process>:
  switch (State)
 8001c64:	4b83      	ldr	r3, [pc, #524]	; (8001e74 <PingPong_Process+0x210>)
{
 8001c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (State)
 8001c68:	7e18      	ldrb	r0, [r3, #24]
 8001c6a:	3801      	subs	r0, #1
 8001c6c:	2804      	cmp	r0, #4
 8001c6e:	d865      	bhi.n	8001d3c <PingPong_Process+0xd8>
 8001c70:	f7fe fa66 	bl	8000140 <__gnu_thumb1_case_uhi>
 8001c74:	00c90005 	.word	0x00c90005
 8001c78:	00bc00c9 	.word	0x00bc00c9
 8001c7c:	00f9      	.short	0x00f9
 8001c7e:	4f7e      	ldr	r7, [pc, #504]	; (8001e78 <PingPong_Process+0x214>)
      if (isMaster == true)
 8001c80:	78be      	ldrb	r6, [r7, #2]
 8001c82:	883b      	ldrh	r3, [r7, #0]
 8001c84:	2e00      	cmp	r6, #0
 8001c86:	d05e      	beq.n	8001d46 <PingPong_Process+0xe2>
        if (BufferSize > 0)
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d054      	beq.n	8001d36 <PingPong_Process+0xd2>
          if (strncmp((const char *)Buffer, (const char *)PongMsg, 4) == 0)
 8001c8c:	4d7b      	ldr	r5, [pc, #492]	; (8001e7c <PingPong_Process+0x218>)
 8001c8e:	4c7c      	ldr	r4, [pc, #496]	; (8001e80 <PingPong_Process+0x21c>)
 8001c90:	2204      	movs	r2, #4
 8001c92:	0029      	movs	r1, r5
 8001c94:	0020      	movs	r0, r4
 8001c96:	f005 fdf6 	bl	8007886 <strncmp>
 8001c9a:	4e7a      	ldr	r6, [pc, #488]	; (8001e84 <PingPong_Process+0x220>)
 8001c9c:	9001      	str	r0, [sp, #4]
 8001c9e:	68f3      	ldr	r3, [r6, #12]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d133      	bne.n	8001d0e <PingPong_Process+0xaa>
            UTIL_TIMER_Stop(&timerLed);
 8001ca6:	4873      	ldr	r0, [pc, #460]	; (8001e74 <PingPong_Process+0x210>)
 8001ca8:	f005 fbaa 	bl	8007400 <UTIL_TIMER_Stop>
            LED_Off(LED_GREEN);
 8001cac:	9801      	ldr	r0, [sp, #4]
 8001cae:	f001 f86d 	bl	8002d8c <BSP_LED_Off>
            LED_Toggle(LED_RED1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f001 f87a 	bl	8002dac <BSP_LED_Toggle>
            Buffer[0] = 'P';
 8001cb8:	2350      	movs	r3, #80	; 0x50
 8001cba:	7023      	strb	r3, [r4, #0]
            Buffer[1] = 'I';
 8001cbc:	3b07      	subs	r3, #7
 8001cbe:	7063      	strb	r3, [r4, #1]
            Buffer[2] = 'N';
 8001cc0:	3305      	adds	r3, #5
 8001cc2:	70a3      	strb	r3, [r4, #2]
            for (i = 4; i < BufferSize; i++)
 8001cc4:	883a      	ldrh	r2, [r7, #0]
            Buffer[3] = 'G';
 8001cc6:	3b07      	subs	r3, #7
 8001cc8:	70e3      	strb	r3, [r4, #3]
            for (i = 4; i < BufferSize; i++)
 8001cca:	3b43      	subs	r3, #67	; 0x43
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d319      	bcc.n	8001d04 <PingPong_Process+0xa0>
            APP_LOG(TS_ON, VLEVEL_L, "...PING\n\r");
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <PingPong_Process+0x224>)
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	0010      	movs	r0, r2
 8001cd8:	f005 f926 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2100      	movs	r1, #0
 8001ce0:	0010      	movs	r0, r2
 8001ce2:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <PingPong_Process+0x228>)
 8001ce4:	f005 f920 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001ce8:	9b00      	ldr	r3, [sp, #0]
 8001cea:	4869      	ldr	r0, [pc, #420]	; (8001e90 <PingPong_Process+0x22c>)
 8001cec:	4798      	blx	r3
            HAL_Delay(Sx_Board_GetWakeUpTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001cee:	f001 f86b 	bl	8002dc8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8001cf2:	3032      	adds	r0, #50	; 0x32
 8001cf4:	f000 fdec 	bl	80028d0 <HAL_Delay>
            Radio.Send(Buffer, BufferSize);
 8001cf8:	7839      	ldrb	r1, [r7, #0]
 8001cfa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        Radio.Send(Buffer, BufferSize);
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	0020      	movs	r0, r4
 8001d00:	4798      	blx	r3
 8001d02:	e018      	b.n	8001d36 <PingPong_Process+0xd2>
              Buffer[i] = i - 4;
 8001d04:	1f19      	subs	r1, r3, #4
 8001d06:	54e1      	strb	r1, [r4, r3]
            for (i = 4; i < BufferSize; i++)
 8001d08:	3301      	adds	r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	e7de      	b.n	8001ccc <PingPong_Process+0x68>
          else if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8001d0e:	1d69      	adds	r1, r5, #5
 8001d10:	0020      	movs	r0, r4
 8001d12:	2204      	movs	r2, #4
 8001d14:	f005 fdb7 	bl	8007886 <strncmp>
 8001d18:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8001d1a:	1e01      	subs	r1, r0, #0
 8001d1c:	d10f      	bne.n	8001d3e <PingPong_Process+0xda>
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <PingPong_Process+0x230>)
            isMaster = false;
 8001d22:	70b8      	strb	r0, [r7, #2]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001d24:	0010      	movs	r0, r2
 8001d26:	f005 f8ff 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001d2a:	4859      	ldr	r0, [pc, #356]	; (8001e90 <PingPong_Process+0x22c>)
 8001d2c:	9b00      	ldr	r3, [sp, #0]
 8001d2e:	4798      	blx	r3
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001d30:	20fa      	movs	r0, #250	; 0xfa
 8001d32:	00c0      	lsls	r0, r0, #3
 8001d34:	47a0      	blx	r4
      State = LOWPOWER;
 8001d36:	2300      	movs	r3, #0
 8001d38:	4a4e      	ldr	r2, [pc, #312]	; (8001e74 <PingPong_Process+0x210>)
 8001d3a:	7613      	strb	r3, [r2, #24]
}
 8001d3c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001d3e:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <PingPong_Process+0x234>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	2100      	movs	r1, #0
 8001d44:	e7ee      	b.n	8001d24 <PingPong_Process+0xc0>
        if (BufferSize > 0)
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f5      	beq.n	8001d36 <PingPong_Process+0xd2>
          if (strncmp((const char *)Buffer, (const char *)PingMsg, 4) == 0)
 8001d4a:	494c      	ldr	r1, [pc, #304]	; (8001e7c <PingPong_Process+0x218>)
 8001d4c:	4c4c      	ldr	r4, [pc, #304]	; (8001e80 <PingPong_Process+0x21c>)
 8001d4e:	2204      	movs	r2, #4
 8001d50:	3105      	adds	r1, #5
 8001d52:	0020      	movs	r0, r4
 8001d54:	f005 fd97 	bl	8007886 <strncmp>
 8001d58:	4d4a      	ldr	r5, [pc, #296]	; (8001e84 <PingPong_Process+0x220>)
 8001d5a:	9001      	str	r0, [sp, #4]
 8001d5c:	68eb      	ldr	r3, [r5, #12]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d133      	bne.n	8001dcc <PingPong_Process+0x168>
            UTIL_TIMER_Stop(&timerLed);
 8001d64:	4843      	ldr	r0, [pc, #268]	; (8001e74 <PingPong_Process+0x210>)
 8001d66:	f005 fb4b 	bl	8007400 <UTIL_TIMER_Stop>
            LED_Off(LED_RED1);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f001 f80e 	bl	8002d8c <BSP_LED_Off>
            LED_Toggle(LED_GREEN);
 8001d70:	9801      	ldr	r0, [sp, #4]
 8001d72:	f001 f81b 	bl	8002dac <BSP_LED_Toggle>
            Buffer[0] = 'P';
 8001d76:	2350      	movs	r3, #80	; 0x50
 8001d78:	7023      	strb	r3, [r4, #0]
            Buffer[1] = 'O';
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	7063      	strb	r3, [r4, #1]
            Buffer[2] = 'N';
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	70a3      	strb	r3, [r4, #2]
            for (i = 4; i < BufferSize; i++)
 8001d82:	883a      	ldrh	r2, [r7, #0]
            Buffer[3] = 'G';
 8001d84:	3b07      	subs	r3, #7
 8001d86:	70e3      	strb	r3, [r4, #3]
            for (i = 4; i < BufferSize; i++)
 8001d88:	3b43      	subs	r3, #67	; 0x43
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d319      	bcc.n	8001dc2 <PingPong_Process+0x15e>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2100      	movs	r1, #0
 8001d92:	0010      	movs	r0, r2
 8001d94:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <PingPong_Process+0x238>)
 8001d96:	f005 f8c7 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001d9a:	9b00      	ldr	r3, [sp, #0]
 8001d9c:	483c      	ldr	r0, [pc, #240]	; (8001e90 <PingPong_Process+0x22c>)
 8001d9e:	4798      	blx	r3
            HAL_Delay(Sx_Board_GetWakeUpTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001da0:	f001 f812 	bl	8002dc8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8001da4:	3032      	adds	r0, #50	; 0x32
 8001da6:	f000 fd93 	bl	80028d0 <HAL_Delay>
            Radio.Send(Buffer, BufferSize);
 8001daa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001dac:	7839      	ldrb	r1, [r7, #0]
 8001dae:	0020      	movs	r0, r4
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "...PONG\n\r");
 8001db4:	2201      	movs	r2, #1
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <PingPong_Process+0x23c>)
 8001db8:	2100      	movs	r1, #0
 8001dba:	0010      	movs	r0, r2
 8001dbc:	f005 f8b4 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
 8001dc0:	e7b9      	b.n	8001d36 <PingPong_Process+0xd2>
              Buffer[i] = i - 4;
 8001dc2:	1f19      	subs	r1, r3, #4
 8001dc4:	54e1      	strb	r1, [r4, r3]
            for (i = 4; i < BufferSize; i++)
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e7de      	b.n	8001d8a <PingPong_Process+0x126>
            isMaster = true;
 8001dcc:	2001      	movs	r0, #1
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <PingPong_Process+0x234>)
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	0031      	movs	r1, r6
            isMaster = true;
 8001dd4:	70b8      	strb	r0, [r7, #2]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8001dd6:	f005 f8a7 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
            Radio.SetChannel(RF_FREQUENCY);
 8001dda:	482d      	ldr	r0, [pc, #180]	; (8001e90 <PingPong_Process+0x22c>)
 8001ddc:	9b00      	ldr	r3, [sp, #0]
 8001dde:	4798      	blx	r3
            Radio.Rx(RX_TIMEOUT_VALUE);
 8001de0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      Radio.Rx(RX_TIMEOUT_VALUE);
 8001de2:	20fa      	movs	r0, #250	; 0xfa
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	00c0      	lsls	r0, r0, #3
 8001de8:	4798      	blx	r3
 8001dea:	e7a4      	b.n	8001d36 <PingPong_Process+0xd2>
      Radio.SetChannel(RF_FREQUENCY);
 8001dec:	4c25      	ldr	r4, [pc, #148]	; (8001e84 <PingPong_Process+0x220>)
 8001dee:	4828      	ldr	r0, [pc, #160]	; (8001e90 <PingPong_Process+0x22c>)
 8001df0:	68e3      	ldr	r3, [r4, #12]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4798      	blx	r3
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 8001df6:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <PingPong_Process+0x240>)
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001df8:	2201      	movs	r2, #1
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	0010      	movs	r0, r2
 8001dfe:	f005 f893 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 8001e02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e04:	e7ed      	b.n	8001de2 <PingPong_Process+0x17e>
      if (isMaster == true)
 8001e06:	4e1c      	ldr	r6, [pc, #112]	; (8001e78 <PingPong_Process+0x214>)
 8001e08:	4d1e      	ldr	r5, [pc, #120]	; (8001e84 <PingPong_Process+0x220>)
 8001e0a:	78b1      	ldrb	r1, [r6, #2]
 8001e0c:	68ef      	ldr	r7, [r5, #12]
 8001e0e:	2900      	cmp	r1, #0
 8001e10:	d021      	beq.n	8001e56 <PingPong_Process+0x1f2>
        Buffer[0] = 'P';
 8001e12:	2350      	movs	r3, #80	; 0x50
 8001e14:	4c1a      	ldr	r4, [pc, #104]	; (8001e80 <PingPong_Process+0x21c>)
        for (i = 4; i < BufferSize; i++)
 8001e16:	8832      	ldrh	r2, [r6, #0]
        Buffer[0] = 'P';
 8001e18:	7023      	strb	r3, [r4, #0]
        Buffer[1] = 'I';
 8001e1a:	3b07      	subs	r3, #7
 8001e1c:	7063      	strb	r3, [r4, #1]
        Buffer[2] = 'N';
 8001e1e:	3305      	adds	r3, #5
 8001e20:	70a3      	strb	r3, [r4, #2]
        Buffer[3] = 'G';
 8001e22:	3b07      	subs	r3, #7
 8001e24:	70e3      	strb	r3, [r4, #3]
        for (i = 4; i < BufferSize; i++)
 8001e26:	3b43      	subs	r3, #67	; 0x43
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d30f      	bcc.n	8001e4c <PingPong_Process+0x1e8>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <PingPong_Process+0x228>)
 8001e30:	2100      	movs	r1, #0
 8001e32:	0010      	movs	r0, r2
 8001e34:	f005 f878 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
        Radio.SetChannel(RF_FREQUENCY);
 8001e38:	4815      	ldr	r0, [pc, #84]	; (8001e90 <PingPong_Process+0x22c>)
 8001e3a:	47b8      	blx	r7
        HAL_Delay(Sx_Board_GetWakeUpTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001e3c:	f000 ffc4 	bl	8002dc8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8001e40:	3032      	adds	r0, #50	; 0x32
 8001e42:	f000 fd45 	bl	80028d0 <HAL_Delay>
        Radio.Send(Buffer, BufferSize);
 8001e46:	7831      	ldrb	r1, [r6, #0]
 8001e48:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001e4a:	e757      	b.n	8001cfc <PingPong_Process+0x98>
          Buffer[i] = i - 4;
 8001e4c:	1f19      	subs	r1, r3, #4
 8001e4e:	54e1      	strb	r1, [r4, r3]
        for (i = 4; i < BufferSize; i++)
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	e7e8      	b.n	8001e28 <PingPong_Process+0x1c4>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001e56:	2201      	movs	r2, #1
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <PingPong_Process+0x230>)
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	f005 f864 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
        Radio.SetChannel(RF_FREQUENCY);
 8001e60:	480b      	ldr	r0, [pc, #44]	; (8001e90 <PingPong_Process+0x22c>)
 8001e62:	47b8      	blx	r7
 8001e64:	e7bc      	b.n	8001de0 <PingPong_Process+0x17c>
      Radio.SetChannel(RF_FREQUENCY);
 8001e66:	4c07      	ldr	r4, [pc, #28]	; (8001e84 <PingPong_Process+0x220>)
 8001e68:	4809      	ldr	r0, [pc, #36]	; (8001e90 <PingPong_Process+0x22c>)
 8001e6a:	68e3      	ldr	r3, [r4, #12]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4798      	blx	r3
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <PingPong_Process+0x230>)
 8001e72:	e7c1      	b.n	8001df8 <PingPong_Process+0x194>
 8001e74:	20000060 	.word	0x20000060
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	080078c0 	.word	0x080078c0
 8001e80:	200005b0 	.word	0x200005b0
 8001e84:	08007abc 	.word	0x08007abc
 8001e88:	08007bb8 	.word	0x08007bb8
 8001e8c:	08007bc2 	.word	0x08007bc2
 8001e90:	337f9800 	.word	0x337f9800
 8001e94:	08007bd4 	.word	0x08007bd4
 8001e98:	08007be5 	.word	0x08007be5
 8001e9c:	08007bf7 	.word	0x08007bf7
 8001ea0:	08007c09 	.word	0x08007c09
 8001ea4:	08007bda 	.word	0x08007bda

08001ea8 <OnRxError>:
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 8001ea8:	2201      	movs	r2, #1
{
 8001eaa:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 8001eac:	2100      	movs	r1, #0
 8001eae:	0010      	movs	r0, r2
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <OnRxError+0x24>)
 8001eb2:	f005 f839 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <OnRxError+0x28>)
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	4798      	blx	r3
  State = RX_ERROR;
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <OnRxError+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2001      	movs	r0, #1
  State = RX_ERROR;
 8001ec4:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001ec6:	f005 f95f 	bl	8007188 <UTIL_SEQ_SetTask>
}
 8001eca:	bd10      	pop	{r4, pc}
 8001ecc:	08007c13 	.word	0x08007c13
 8001ed0:	08007abc 	.word	0x08007abc
 8001ed4:	20000060 	.word	0x20000060

08001ed8 <OnRxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
 8001ed8:	2201      	movs	r2, #1
{
 8001eda:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
 8001edc:	2100      	movs	r1, #0
 8001ede:	0010      	movs	r0, r2
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <OnRxTimeout+0x24>)
 8001ee2:	f005 f821 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <OnRxTimeout+0x28>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	4798      	blx	r3
  State = RX_TIMEOUT;
 8001eec:	2202      	movs	r2, #2
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <OnRxTimeout+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2001      	movs	r0, #1
  State = RX_TIMEOUT;
 8001ef4:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001ef6:	f005 f947 	bl	8007188 <UTIL_SEQ_SetTask>
}
 8001efa:	bd10      	pop	{r4, pc}
 8001efc:	08007c1f 	.word	0x08007c1f
 8001f00:	08007abc 	.word	0x08007abc
 8001f04:	20000060 	.word	0x20000060

08001f08 <OnTxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8001f08:	2201      	movs	r2, #1
{
 8001f0a:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	0010      	movs	r0, r2
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <OnTxTimeout+0x24>)
 8001f12:	f005 f809 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <OnTxTimeout+0x28>)
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	4798      	blx	r3
  State = TX_TIMEOUT;
 8001f1c:	2205      	movs	r2, #5
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <OnTxTimeout+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f20:	2100      	movs	r1, #0
 8001f22:	2001      	movs	r0, #1
  State = TX_TIMEOUT;
 8001f24:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f26:	f005 f92f 	bl	8007188 <UTIL_SEQ_SetTask>
}
 8001f2a:	bd10      	pop	{r4, pc}
 8001f2c:	08007c2d 	.word	0x08007c2d
 8001f30:	08007abc 	.word	0x08007abc
 8001f34:	20000060 	.word	0x20000060

08001f38 <OnTxDone>:
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8001f38:	2201      	movs	r2, #1
{
 8001f3a:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	0010      	movs	r0, r2
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <OnTxDone+0x24>)
 8001f42:	f004 fff1 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <OnTxDone+0x28>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	4798      	blx	r3
  State = TX;
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <OnTxDone+0x2c>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f50:	2100      	movs	r1, #0
 8001f52:	2001      	movs	r0, #1
  State = TX;
 8001f54:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001f56:	f005 f917 	bl	8007188 <UTIL_SEQ_SetTask>
}
 8001f5a:	bd10      	pop	{r4, pc}
 8001f5c:	08007c3b 	.word	0x08007c3b
 8001f60:	08007abc 	.word	0x08007abc
 8001f64:	20000060 	.word	0x20000060

08001f68 <OnRxDone>:
{
 8001f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f6a:	0015      	movs	r5, r2
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 8001f6c:	2201      	movs	r2, #1
{
 8001f6e:	000e      	movs	r6, r1
 8001f70:	0007      	movs	r7, r0
 8001f72:	001c      	movs	r4, r3
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 8001f74:	2100      	movs	r1, #0
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <OnRxDone+0x4c>)
 8001f78:	0010      	movs	r0, r2
 8001f7a:	f004 ffd5 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_L,  "RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	9500      	str	r5, [sp, #0]
 8001f82:	2100      	movs	r1, #0
 8001f84:	0010      	movs	r0, r2
 8001f86:	9401      	str	r4, [sp, #4]
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <OnRxDone+0x50>)
 8001f8a:	f004 ffcd 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <OnRxDone+0x54>)
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	4798      	blx	r3
  BufferSize = size;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <OnRxDone+0x58>)
  memcpy(Buffer, payload, BufferSize);
 8001f96:	0032      	movs	r2, r6
 8001f98:	0039      	movs	r1, r7
 8001f9a:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <OnRxDone+0x5c>)
  BufferSize = size;
 8001f9c:	801e      	strh	r6, [r3, #0]
  memcpy(Buffer, payload, BufferSize);
 8001f9e:	f005 fc61 	bl	8007864 <memcpy>
  State = RX;
 8001fa2:	2001      	movs	r0, #1
  RssiValue = rssi;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <OnRxDone+0x60>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fa6:	2100      	movs	r1, #0
  RssiValue = rssi;
 8001fa8:	765d      	strb	r5, [r3, #25]
  SnrValue = snr;
 8001faa:	769c      	strb	r4, [r3, #26]
  State = RX;
 8001fac:	7618      	strb	r0, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8001fae:	f005 f8eb 	bl	8007188 <UTIL_SEQ_SetTask>
}
 8001fb2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001fb4:	08007c46 	.word	0x08007c46
 8001fb8:	08007c51 	.word	0x08007c51
 8001fbc:	08007abc 	.word	0x08007abc
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	200005b0 	.word	0x200005b0
 8001fc8:	20000060 	.word	0x20000060

08001fcc <SubghzApp_Init>:
{
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n", (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
 8001fce:	2400      	movs	r4, #0
 8001fd0:	2501      	movs	r5, #1
{
 8001fd2:	b08b      	sub	sp, #44	; 0x2c
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n", (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
 8001fd4:	0022      	movs	r2, r4
 8001fd6:	0021      	movs	r1, r4
 8001fd8:	9402      	str	r4, [sp, #8]
 8001fda:	9401      	str	r4, [sp, #4]
 8001fdc:	9500      	str	r5, [sp, #0]
 8001fde:	4b2f      	ldr	r3, [pc, #188]	; (800209c <SubghzApp_Init+0xd0>)
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	f004 ffa1 	bl	8006f28 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&timerLed, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 8001fe6:	4e2e      	ldr	r6, [pc, #184]	; (80020a0 <SubghzApp_Init+0xd4>)
 8001fe8:	0022      	movs	r2, r4
 8001fea:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <SubghzApp_Init+0xd8>)
 8001fec:	4269      	negs	r1, r5
 8001fee:	9400      	str	r4, [sp, #0]
 8001ff0:	0030      	movs	r0, r6
 8001ff2:	f005 f9a5 	bl	8007340 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLed, LED_PERIOD_MS);
 8001ff6:	21c8      	movs	r1, #200	; 0xc8
 8001ff8:	0030      	movs	r0, r6
 8001ffa:	f005 fa93 	bl	8007524 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&timerLed);
 8001ffe:	0030      	movs	r0, r6
 8002000:	f005 fa52 	bl	80074a8 <UTIL_TIMER_Start>
  Radio.Init(&RadioEvents);
 8002004:	0030      	movs	r0, r6
  RadioEvents.TxDone = OnTxDone;
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <SubghzApp_Init+0xdc>)
  Radio.Init(&RadioEvents);
 8002008:	301c      	adds	r0, #28
  RadioEvents.TxDone = OnTxDone;
 800200a:	61f3      	str	r3, [r6, #28]
  RadioEvents.RxDone = OnRxDone;
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <SubghzApp_Init+0xe0>)
 800200e:	6273      	str	r3, [r6, #36]	; 0x24
  RadioEvents.TxTimeout = OnTxTimeout;
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <SubghzApp_Init+0xe4>)
 8002012:	6233      	str	r3, [r6, #32]
  RadioEvents.RxTimeout = OnRxTimeout;
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <SubghzApp_Init+0xe8>)
 8002016:	62b3      	str	r3, [r6, #40]	; 0x28
  RadioEvents.RxError = OnRxError;
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <SubghzApp_Init+0xec>)
 800201a:	62f3      	str	r3, [r6, #44]	; 0x2c
  Radio.Init(&RadioEvents);
 800201c:	4e27      	ldr	r6, [pc, #156]	; (80020bc <SubghzApp_Init+0xf0>)
 800201e:	6833      	ldr	r3, [r6, #0]
 8002020:	4798      	blx	r3
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8002022:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <SubghzApp_Init+0xf4>)
 8002024:	0022      	movs	r2, r4
 8002026:	9308      	str	r3, [sp, #32]
 8002028:	2308      	movs	r3, #8
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	3b01      	subs	r3, #1
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	0028      	movs	r0, r5
 8002032:	0023      	movs	r3, r4
 8002034:	69f7      	ldr	r7, [r6, #28]
 8002036:	9407      	str	r4, [sp, #28]
 8002038:	9406      	str	r4, [sp, #24]
 800203a:	9405      	str	r4, [sp, #20]
 800203c:	9504      	str	r5, [sp, #16]
 800203e:	9403      	str	r4, [sp, #12]
 8002040:	9501      	str	r5, [sp, #4]
 8002042:	210e      	movs	r1, #14
 8002044:	47b8      	blx	r7
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8002046:	2305      	movs	r3, #5
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	3303      	adds	r3, #3
 800204c:	2207      	movs	r2, #7
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	0021      	movs	r1, r4
 8002052:	002b      	movs	r3, r5
 8002054:	0028      	movs	r0, r5
 8002056:	9509      	str	r5, [sp, #36]	; 0x24
 8002058:	9408      	str	r4, [sp, #32]
 800205a:	9407      	str	r4, [sp, #28]
 800205c:	9406      	str	r4, [sp, #24]
 800205e:	9505      	str	r5, [sp, #20]
 8002060:	9404      	str	r4, [sp, #16]
 8002062:	9403      	str	r4, [sp, #12]
 8002064:	9400      	str	r4, [sp, #0]
 8002066:	69b7      	ldr	r7, [r6, #24]
 8002068:	47b8      	blx	r7
  Radio.SetMaxPayloadLength(MODEM_LORA, BUFFER_SIZE);
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	0028      	movs	r0, r5
 800206e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002070:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 8002072:	68f3      	ldr	r3, [r6, #12]
 8002074:	4813      	ldr	r0, [pc, #76]	; (80020c4 <SubghzApp_Init+0xf8>)
 8002076:	4798      	blx	r3
  LED_Init(LED_GREEN);
 8002078:	0020      	movs	r0, r4
 800207a:	f000 fe45 	bl	8002d08 <BSP_LED_Init>
  LED_Init(LED_RED1);
 800207e:	0028      	movs	r0, r5
 8002080:	f000 fe42 	bl	8002d08 <BSP_LED_Init>
  Radio.Rx(RX_TIMEOUT_VALUE);
 8002084:	20fa      	movs	r0, #250	; 0xfa
 8002086:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002088:	00c0      	lsls	r0, r0, #3
 800208a:	4798      	blx	r3
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_PingPong_Process), UTIL_SEQ_RFU, PingPong_Process);
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <SubghzApp_Init+0xfc>)
 800208e:	0021      	movs	r1, r4
 8002090:	0028      	movs	r0, r5
 8002092:	f005 f90d 	bl	80072b0 <UTIL_SEQ_RegTask>
}
 8002096:	b00b      	add	sp, #44	; 0x2c
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	08007c71 	.word	0x08007c71
 80020a0:	20000060 	.word	0x20000060
 80020a4:	08001c49 	.word	0x08001c49
 80020a8:	08001f39 	.word	0x08001f39
 80020ac:	08001f69 	.word	0x08001f69
 80020b0:	08001f09 	.word	0x08001f09
 80020b4:	08001ed9 	.word	0x08001ed9
 80020b8:	08001ea9 	.word	0x08001ea9
 80020bc:	08007abc 	.word	0x08007abc
 80020c0:	00000bb8 	.word	0x00000bb8
 80020c4:	337f9800 	.word	0x337f9800
 80020c8:	08001c65 	.word	0x08001c65

080020cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020cc:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <MX_DMA_Init+0x28>)
 80020d2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020d4:	4301      	orrs	r1, r0
 80020d6:	6311      	str	r1, [r2, #48]	; 0x30
 80020d8:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020dc:	4003      	ands	r3, r0
 80020de:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80020e0:	0011      	movs	r1, r2
 80020e2:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80020e6:	f001 f8c3 	bl	8003270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80020ea:	200b      	movs	r0, #11
 80020ec:	f001 f8ea 	bl	80032c4 <HAL_NVIC_EnableIRQ>

}
 80020f0:	bd07      	pop	{r0, r1, r2, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000

080020f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f8:	b510      	push	{r4, lr}
 80020fa:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fc:	222c      	movs	r2, #44	; 0x2c
 80020fe:	2100      	movs	r1, #0
 8002100:	a807      	add	r0, sp, #28
 8002102:	f005 fbb8 	bl	8007876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002106:	2214      	movs	r2, #20
 8002108:	2100      	movs	r1, #0
 800210a:	a801      	add	r0, sp, #4
 800210c:	f005 fbb3 	bl	8007876 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8002110:	2302      	movs	r3, #2
 8002112:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8002114:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	031b      	lsls	r3, r3, #12
 800211a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800211c:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800211e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002120:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002122:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002124:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8002126:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002128:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800212a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212c:	f001 fc74 	bl	8003a18 <HAL_RCC_OscConfig>
 8002130:	2800      	cmp	r0, #0
 8002132:	d000      	beq.n	8002136 <SystemClock_Config+0x3e>
 8002134:	e7fe      	b.n	8002134 <SystemClock_Config+0x3c>
  {
    Error_Handler();
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	4a10      	ldr	r2, [pc, #64]	; (800217c <SystemClock_Config+0x84>)
 800213a:	055b      	lsls	r3, r3, #21
 800213c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800213e:	430b      	orrs	r3, r1
 8002140:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <SystemClock_Config+0x88>)
 8002144:	490f      	ldr	r1, [pc, #60]	; (8002184 <SystemClock_Config+0x8c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4011      	ands	r1, r2
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	0112      	lsls	r2, r2, #4
 800214e:	430a      	orrs	r2, r1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	001a      	movs	r2, r3

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8002154:	6853      	ldr	r3, [r2, #4]
 8002156:	4023      	ands	r3, r4
 8002158:	d1fc      	bne.n	8002154 <SystemClock_Config+0x5c>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800215a:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800215c:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800215e:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002160:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002162:	3a0c      	subs	r2, #12
 8002164:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002166:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002168:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800216a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800216c:	f001 fee4 	bl	8003f38 <HAL_RCC_ClockConfig>
 8002170:	2800      	cmp	r0, #0
 8002172:	d000      	beq.n	8002176 <SystemClock_Config+0x7e>
 8002174:	e7fe      	b.n	8002174 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
}
 8002176:	b014      	add	sp, #80	; 0x50
 8002178:	bd10      	pop	{r4, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
 8002184:	ffffe7ff 	.word	0xffffe7ff

08002188 <main>:
{
 8002188:	b510      	push	{r4, lr}
  HAL_Init();
 800218a:	f001 f839 	bl	8003200 <HAL_Init>
  SystemClock_Config();
 800218e:	f7ff ffb3 	bl	80020f8 <SystemClock_Config>
  MX_SubGHz_Phy_Init();
 8002192:	f7ff fd4d 	bl	8001c30 <MX_SubGHz_Phy_Init>
    MX_SubGHz_Phy_Process();
 8002196:	f7ff fd51 	bl	8001c3c <MX_SubGHz_Phy_Process>
 800219a:	e7fc      	b.n	8002196 <main+0xe>

0800219c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800219c:	e7fe      	b.n	800219c <Error_Handler>
	...

080021a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80021a2:	2400      	movs	r4, #0
{
 80021a4:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 80021a6:	af01      	add	r7, sp, #4
 80021a8:	2214      	movs	r2, #20
 80021aa:	2100      	movs	r1, #0
 80021ac:	0038      	movs	r0, r7
  RTC_AlarmTypeDef sAlarm = {0};
 80021ae:	ae06      	add	r6, sp, #24
  RTC_TimeTypeDef sTime = {0};
 80021b0:	f005 fb61 	bl	8007876 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80021b4:	2228      	movs	r2, #40	; 0x28
 80021b6:	0021      	movs	r1, r4
 80021b8:	0030      	movs	r0, r6
  RTC_DateTypeDef sDate = {0};
 80021ba:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80021bc:	f005 fb5b 	bl	8007876 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021c0:	4d23      	ldr	r5, [pc, #140]	; (8002250 <MX_RTC_Init+0xb0>)
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021c4:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 80021c6:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80021c8:	231f      	movs	r3, #31
 80021ca:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021ce:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80021d0:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021d2:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021d4:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021d6:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021d8:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021da:	f002 f93d 	bl	8004458 <HAL_RTC_Init>
 80021de:	42a0      	cmp	r0, r4
 80021e0:	d001      	beq.n	80021e6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80021e2:	f7ff ffdb 	bl	800219c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80021e6:	803c      	strh	r4, [r7, #0]
  sTime.Minutes = 0;
 80021e8:	70bc      	strb	r4, [r7, #2]
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80021ea:	2200      	movs	r2, #0
 80021ec:	0039      	movs	r1, r7
 80021ee:	0028      	movs	r0, r5
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021f0:	60fc      	str	r4, [r7, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021f2:	613c      	str	r4, [r7, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80021f4:	f002 f998 	bl	8004528 <HAL_RTC_SetTime>
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d001      	beq.n	8002200 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80021fc:	f7ff ffce 	bl	800219c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002202:	2200      	movs	r2, #0
 8002204:	4669      	mov	r1, sp
 8002206:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002208:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800220a:	f002 fa0d 	bl	8004628 <HAL_RTC_SetDate>
 800220e:	2800      	cmp	r0, #0
 8002210:	d001      	beq.n	8002216 <MX_RTC_Init+0x76>
  {
    Error_Handler();
 8002212:	f7ff ffc3 	bl	800219c <Error_Handler>
  sAlarm.AlarmTime.Seconds = 0;
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8002216:	23a0      	movs	r3, #160	; 0xa0
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	61b3      	str	r3, [r6, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 800221c:	2319      	movs	r3, #25
 800221e:	211e      	movs	r1, #30
 8002220:	446b      	add	r3, sp
 8002222:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8002224:	2380      	movs	r3, #128	; 0x80
  sAlarm.AlarmTime.Hours = 0;
 8002226:	2200      	movs	r2, #0
  sAlarm.Alarm = RTC_ALARM_A;
 8002228:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800222a:	0031      	movs	r1, r6
 800222c:	0028      	movs	r0, r5
  sAlarm.AlarmTime.Hours = 0;
 800222e:	8032      	strh	r2, [r6, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002230:	70b2      	strb	r2, [r6, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002232:	6072      	str	r2, [r6, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002234:	60f2      	str	r2, [r6, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002236:	6132      	str	r2, [r6, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002238:	6172      	str	r2, [r6, #20]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800223a:	61f2      	str	r2, [r6, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800223c:	6273      	str	r3, [r6, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800223e:	f002 fa5f 	bl	8004700 <HAL_RTC_SetAlarm_IT>
 8002242:	2800      	cmp	r0, #0
 8002244:	d001      	beq.n	800224a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002246:	f7ff ffa9 	bl	800219c <Error_Handler>
  }

}
 800224a:	b011      	add	sp, #68	; 0x44
 800224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	200005f0 	.word	0x200005f0
 8002254:	40002800 	.word	0x40002800
 8002258:	000003ff 	.word	0x000003ff
 800225c:	00010101 	.word	0x00010101

08002260 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8002260:	b510      	push	{r4, lr}
 8002262:	0004      	movs	r4, r0
 8002264:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002266:	2238      	movs	r2, #56	; 0x38
 8002268:	2100      	movs	r1, #0
 800226a:	4668      	mov	r0, sp
 800226c:	f005 fb03 	bl	8007876 <memset>
  if (rtcHandle->Instance == RTC)
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_RTC_MspInit+0x50>)
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d118      	bne.n	80022aa <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002278:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227a:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800227c:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800227e:	33fc      	adds	r3, #252	; 0xfc
 8002280:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002282:	f001 fbc9 	bl	8003a18 <HAL_RCC_OscConfig>
 8002286:	2800      	cmp	r0, #0
 8002288:	d001      	beq.n	800228e <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 800228a:	f7ff ff87 	bl	800219c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <HAL_RTC_MspInit+0x54>)
 8002292:	02db      	lsls	r3, r3, #11
 8002294:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002296:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8002298:	430b      	orrs	r3, r1
 800229a:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	0011      	movs	r1, r2
 80022a0:	f000 ffe6 	bl	8003270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80022a4:	2002      	movs	r0, #2
 80022a6:	f001 f80d 	bl	80032c4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80022aa:	b00e      	add	sp, #56	; 0x38
 80022ac:	bd10      	pop	{r4, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	40002800 	.word	0x40002800
 80022b4:	40021000 	.word	0x40021000

080022b8 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 80022b8:	4b01      	ldr	r3, [pc, #4]	; (80022c0 <RTC_IF_GetTimerContext+0x8>)
 80022ba:	6818      	ldr	r0, [r3, #0]
}
 80022bc:	4770      	bx	lr
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	20000098 	.word	0x20000098

080022c4 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 80022c4:	2003      	movs	r0, #3
 80022c6:	4770      	bx	lr

080022c8 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80022c8:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80022ca:	0e41      	lsrs	r1, r0, #25
 80022cc:	227d      	movs	r2, #125	; 0x7d
 80022ce:	01c0      	lsls	r0, r0, #7
 80022d0:	2300      	movs	r3, #0
 80022d2:	f7fe f8b5 	bl	8000440 <__aeabi_uldivmod>
}
 80022d6:	bd10      	pop	{r4, pc}

080022d8 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 80022d8:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80022da:	227d      	movs	r2, #125	; 0x7d
 80022dc:	2300      	movs	r3, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	f7fe f8ce 	bl	8000480 <__aeabi_lmul>
 80022e4:	0649      	lsls	r1, r1, #25
 80022e6:	09c0      	lsrs	r0, r0, #7
 80022e8:	4308      	orrs	r0, r1
}
 80022ea:	bd10      	pop	{r4, pc}

080022ec <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80022ec:	4806      	ldr	r0, [pc, #24]	; (8002308 <RTC_IF_StopTimer+0x1c>)
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <RTC_IF_StopTimer+0x20>)
 80022f0:	6801      	ldr	r1, [r0, #0]
{
 80022f2:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80022f4:	68ca      	ldr	r2, [r1, #12]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0049      	lsls	r1, r1, #1
 8002300:	f001 ffe4 	bl	80042cc <HAL_RTC_DeactivateAlarm>
}
 8002304:	2000      	movs	r0, #0
 8002306:	bd10      	pop	{r4, pc}
 8002308:	200005f0 	.word	0x200005f0
 800230c:	fffffe7f 	.word	0xfffffe7f

08002310 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8002310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002312:	4e25      	ldr	r6, [pc, #148]	; (80023a8 <RTC_GetCalendarValue+0x98>)
{
 8002314:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002316:	2200      	movs	r2, #0
 8002318:	0030      	movs	r0, r6
{
 800231a:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800231c:	f002 fac0 	bl	80048a0 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002320:	4f22      	ldr	r7, [pc, #136]	; (80023ac <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8002322:	2200      	movs	r2, #0
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	0029      	movs	r1, r5
 8002328:	0030      	movs	r0, r6
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	f002 fae2 	bl	80048f4 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002330:	2200      	movs	r2, #0
 8002332:	0021      	movs	r1, r4
 8002334:	0030      	movs	r0, r6
 8002336:	f002 fab3 	bl	80048a0 <HAL_RTC_GetTime>
 800233a:	466b      	mov	r3, sp
 800233c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233e:	889b      	ldrh	r3, [r3, #4]
 8002340:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8002342:	429a      	cmp	r2, r3
 8002344:	d1ec      	bne.n	8002320 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002346:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002348:	78ea      	ldrb	r2, [r5, #3]
 800234a:	4e19      	ldr	r6, [pc, #100]	; (80023b0 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800234c:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800234e:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002350:	400a      	ands	r2, r1
 8002352:	4253      	negs	r3, r2
 8002354:	4153      	adcs	r3, r2
 8002356:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <RTC_GetCalendarValue+0xa4>)
 8002358:	425b      	negs	r3, r3
 800235a:	4013      	ands	r3, r2
 800235c:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <RTC_GetCalendarValue+0xa8>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800235e:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002360:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002362:	223d      	movs	r2, #61	; 0x3d
 8002364:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8002366:	007f      	lsls	r7, r7, #1
 8002368:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800236a:	3201      	adds	r2, #1
 800236c:	0fd0      	lsrs	r0, r2, #31
 800236e:	1882      	adds	r2, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 8002370:	78a8      	ldrb	r0, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002372:	3603      	adds	r6, #3
 8002374:	3801      	subs	r0, #1
 8002376:	08b6      	lsrs	r6, r6, #2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002378:	1052      	asrs	r2, r2, #1
 800237a:	1986      	adds	r6, r0, r6
 800237c:	1996      	adds	r6, r2, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800237e:	400b      	ands	r3, r1

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8002380:	480e      	ldr	r0, [pc, #56]	; (80023bc <RTC_GetCalendarValue+0xac>)
  calendarValue += (RTC_DateStruct->Date - 1);
 8002382:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 8002384:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8002386:	20e1      	movs	r0, #225	; 0xe1
 8002388:	7822      	ldrb	r2, [r4, #0]
 800238a:	0100      	lsls	r0, r0, #4
 800238c:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800238e:	223c      	movs	r2, #60	; 0x3c
 8002390:	7861      	ldrb	r1, [r4, #1]
 8002392:	434a      	muls	r2, r1
 8002394:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8002396:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8002398:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800239a:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 800239c:	6863      	ldr	r3, [r4, #4]
 800239e:	0280      	lsls	r0, r0, #10
 80023a0:	1ac0      	subs	r0, r0, r3
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <RTC_GetCalendarValue+0xb0>)
 80023a4:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 80023a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023a8:	200005f0 	.word	0x200005f0
 80023ac:	40002800 	.word	0x40002800
 80023b0:	000005b5 	.word	0x000005b5
 80023b4:	ffaaaab0 	.word	0xffaaaab0
 80023b8:	0099aaa0 	.word	0x0099aaa0
 80023bc:	00015180 	.word	0x00015180
 80023c0:	000003ff 	.word	0x000003ff

080023c4 <RTC_IF_SetTimerContext>:
{
 80023c4:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80023c6:	4c04      	ldr	r4, [pc, #16]	; (80023d8 <RTC_IF_SetTimerContext+0x14>)
 80023c8:	0020      	movs	r0, r4
 80023ca:	1d21      	adds	r1, r4, #4
 80023cc:	3018      	adds	r0, #24
 80023ce:	f7ff ff9f 	bl	8002310 <RTC_GetCalendarValue>
 80023d2:	6020      	str	r0, [r4, #0]
}
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	20000098 	.word	0x20000098

080023dc <RTC_IF_GetTimerElapsedTime>:
{
 80023dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80023de:	a901      	add	r1, sp, #4
 80023e0:	4668      	mov	r0, sp
 80023e2:	f7ff ff95 	bl	8002310 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80023e6:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <RTC_IF_GetTimerElapsedTime+0x14>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1ac0      	subs	r0, r0, r3
}
 80023ec:	b007      	add	sp, #28
 80023ee:	bd00      	pop	{pc}
 80023f0:	20000098 	.word	0x20000098

080023f4 <RTC_IF_StartTimer>:
{
 80023f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f6:	b087      	sub	sp, #28
 80023f8:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80023fa:	f7ff ffef 	bl	80023dc <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 80023fe:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8002400:	1a30      	subs	r0, r6, r0
 8002402:	2803      	cmp	r0, #3
 8002404:	d800      	bhi.n	8002408 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8002406:	2101      	movs	r1, #1
 8002408:	2002      	movs	r0, #2
 800240a:	f004 fe45 	bl	8007098 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 800240e:	f004 fe6f 	bl	80070f0 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8002412:	4c40      	ldr	r4, [pc, #256]	; (8002514 <RTC_IF_StartTimer+0x120>)
 8002414:	7963      	ldrb	r3, [r4, #5]
 8002416:	68a7      	ldr	r7, [r4, #8]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	79a3      	ldrb	r3, [r4, #6]
 800241c:	7925      	ldrb	r5, [r4, #4]
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	79e3      	ldrb	r3, [r4, #7]
 8002422:	9302      	str	r3, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8002424:	7e63      	ldrb	r3, [r4, #25]
 8002426:	9303      	str	r3, [sp, #12]
 8002428:	7ea3      	ldrb	r3, [r4, #26]
 800242a:	9304      	str	r3, [sp, #16]
 800242c:	7ee3      	ldrb	r3, [r4, #27]
 800242e:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 8002430:	f7ff ff5c 	bl	80022ec <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 8002434:	4669      	mov	r1, sp
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002436:	4a38      	ldr	r2, [pc, #224]	; (8002518 <RTC_IF_StartTimer+0x124>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002438:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 800243a:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800243c:	0d9b      	lsrs	r3, r3, #22
 800243e:	18fb      	adds	r3, r7, r3
  rtcAlarmDays =  RTC_DateStruct.Date;
 8002440:	8a08      	ldrh	r0, [r1, #16]
 8002442:	9204      	str	r2, [sp, #16]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002444:	4a35      	ldr	r2, [pc, #212]	; (800251c <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002446:	b29b      	uxth	r3, r3
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8002448:	0ab6      	lsrs	r6, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 800244a:	4296      	cmp	r6, r2
 800244c:	d842      	bhi.n	80024d4 <RTC_IF_StartTimer+0xe0>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800244e:	4a34      	ldr	r2, [pc, #208]	; (8002520 <RTC_IF_StartTimer+0x12c>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8002450:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8002452:	4296      	cmp	r6, r2
 8002454:	d843      	bhi.n	80024de <RTC_IF_StartTimer+0xea>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8002456:	466a      	mov	r2, sp
 8002458:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800245a:	2e3b      	cmp	r6, #59	; 0x3b
 800245c:	d844      	bhi.n	80024e8 <RTC_IF_StartTimer+0xf4>
 800245e:	0a9a      	lsrs	r2, r3, #10
 8002460:	0291      	lsls	r1, r2, #10
 8002462:	1a5b      	subs	r3, r3, r1
 8002464:	b29b      	uxth	r3, r3
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	9b01      	ldr	r3, [sp, #4]
 800246a:	18d2      	adds	r2, r2, r3
 800246c:	1996      	adds	r6, r2, r6
 800246e:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8002470:	2e3b      	cmp	r6, #59	; 0x3b
 8002472:	d83d      	bhi.n	80024f0 <RTC_IF_StartTimer+0xfc>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8002474:	2f3b      	cmp	r7, #59	; 0x3b
 8002476:	d840      	bhi.n	80024fa <RTC_IF_StartTimer+0x106>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8002478:	2d17      	cmp	r5, #23
 800247a:	d843      	bhi.n	8002504 <RTC_IF_StartTimer+0x110>
 800247c:	9a03      	ldr	r2, [sp, #12]
  if (RTC_DateStruct.Year % 4 == 0)
 800247e:	9905      	ldr	r1, [sp, #20]
 8002480:	3a01      	subs	r2, #1
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <RTC_IF_StartTimer+0x130>)
 8002484:	0789      	lsls	r1, r1, #30
 8002486:	d142      	bne.n	800250e <RTC_IF_StartTimer+0x11a>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002488:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800248a:	4288      	cmp	r0, r1
 800248c:	d902      	bls.n	8002494 <RTC_IF_StartTimer+0xa0>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800248e:	f7fd ffd1 	bl	8000434 <__aeabi_idivmod>
 8002492:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8002494:	9a00      	ldr	r2, [sp, #0]
 8002496:	9b04      	ldr	r3, [sp, #16]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8002498:	7725      	strb	r5, [r4, #28]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 800249e:	23a0      	movs	r3, #160	; 0xa0
 80024a0:	051b      	lsls	r3, r3, #20
 80024a2:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80024a4:	0023      	movs	r3, r4
 80024a6:	333c      	adds	r3, #60	; 0x3c
 80024a8:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80024aa:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80024ac:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80024ae:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80024b0:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80024b2:	2380      	movs	r3, #128	; 0x80
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80024b4:	311c      	adds	r1, #28
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80024b6:	005b      	lsls	r3, r3, #1
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80024b8:	002a      	movs	r2, r5
 80024ba:	481b      	ldr	r0, [pc, #108]	; (8002528 <RTC_IF_StartTimer+0x134>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80024bc:	77a6      	strb	r6, [r4, #30]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80024be:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80024c0:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80024c2:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80024c4:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024c6:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024c8:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80024ca:	f002 f919 	bl	8004700 <HAL_RTC_SetAlarm_IT>
}
 80024ce:	0028      	movs	r0, r5
 80024d0:	b007      	add	sp, #28
 80024d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 80024d4:	4915      	ldr	r1, [pc, #84]	; (800252c <RTC_IF_StartTimer+0x138>)
    rtcAlarmDays++;
 80024d6:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 80024d8:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 80024da:	b280      	uxth	r0, r0
 80024dc:	e7b5      	b.n	800244a <RTC_IF_StartTimer+0x56>
    timeoutValue -= SECONDS_IN_1HOUR;
 80024de:	4914      	ldr	r1, [pc, #80]	; (8002530 <RTC_IF_StartTimer+0x13c>)
    rtcAlarmHours++;
 80024e0:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 80024e2:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 80024e4:	b2ad      	uxth	r5, r5
 80024e6:	e7b4      	b.n	8002452 <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 80024e8:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 80024ea:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 80024ec:	b2bf      	uxth	r7, r7
 80024ee:	e7b4      	b.n	800245a <RTC_IF_StartTimer+0x66>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80024f0:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 80024f2:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80024f4:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 80024f6:	b2bf      	uxth	r7, r7
 80024f8:	e7ba      	b.n	8002470 <RTC_IF_StartTimer+0x7c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80024fa:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 80024fc:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80024fe:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8002500:	b2ad      	uxth	r5, r5
 8002502:	e7b7      	b.n	8002474 <RTC_IF_StartTimer+0x80>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002504:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 8002506:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002508:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 800250a:	b280      	uxth	r0, r0
 800250c:	e7b4      	b.n	8002478 <RTC_IF_StartTimer+0x84>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800250e:	189b      	adds	r3, r3, r2
 8002510:	7b19      	ldrb	r1, [r3, #12]
 8002512:	e7ba      	b.n	800248a <RTC_IF_StartTimer+0x96>
 8002514:	20000098 	.word	0x20000098
 8002518:	000003ff 	.word	0x000003ff
 800251c:	0001517f 	.word	0x0001517f
 8002520:	00000e0f 	.word	0x00000e0f
 8002524:	080078cc 	.word	0x080078cc
 8002528:	200005f0 	.word	0x200005f0
 800252c:	fffeae80 	.word	0xfffeae80
 8002530:	fffff1f0 	.word	0xfffff1f0

08002534 <RTC_IF_GetTime>:
{
 8002534:	b530      	push	{r4, r5, lr}
 8002536:	b087      	sub	sp, #28
 8002538:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800253a:	a901      	add	r1, sp, #4
 800253c:	4668      	mov	r0, sp
 800253e:	f7ff fee7 	bl	8002310 <RTC_GetCalendarValue>
 8002542:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002544:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002546:	227d      	movs	r2, #125	; 0x7d
 8002548:	2300      	movs	r3, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 800254a:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800254c:	2100      	movs	r1, #0
 800254e:	f7fd ff97 	bl	8000480 <__aeabi_lmul>
 8002552:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8002554:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8002556:	0aa0      	lsrs	r0, r4, #10
}
 8002558:	b007      	add	sp, #28
 800255a:	bd30      	pop	{r4, r5, pc}

0800255c <RTC_IF_BkUp_Write_Seconds>:
{
 800255c:	b510      	push	{r4, lr}
 800255e:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002560:	2100      	movs	r1, #0
 8002562:	4802      	ldr	r0, [pc, #8]	; (800256c <RTC_IF_BkUp_Write_Seconds+0x10>)
 8002564:	f002 f9e8 	bl	8004938 <HAL_RTCEx_BKUPWrite>
}
 8002568:	bd10      	pop	{r4, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	200005f0 	.word	0x200005f0

08002570 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8002570:	b510      	push	{r4, lr}
 8002572:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002574:	2101      	movs	r1, #1
 8002576:	4802      	ldr	r0, [pc, #8]	; (8002580 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8002578:	f002 f9de 	bl	8004938 <HAL_RTCEx_BKUPWrite>
}
 800257c:	bd10      	pop	{r4, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	200005f0 	.word	0x200005f0

08002584 <RTC_IF_BkUp_Read_Seconds>:
{
 8002584:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002586:	2100      	movs	r1, #0
 8002588:	4801      	ldr	r0, [pc, #4]	; (8002590 <RTC_IF_BkUp_Read_Seconds+0xc>)
 800258a:	f002 f9db 	bl	8004944 <HAL_RTCEx_BKUPRead>
}
 800258e:	bd10      	pop	{r4, pc}
 8002590:	200005f0 	.word	0x200005f0

08002594 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8002594:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002596:	2101      	movs	r1, #1
 8002598:	4801      	ldr	r0, [pc, #4]	; (80025a0 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 800259a:	f002 f9d3 	bl	8004944 <HAL_RTCEx_BKUPRead>
}
 800259e:	bd10      	pop	{r4, pc}
 80025a0:	200005f0 	.word	0x200005f0

080025a4 <RTC_IF_Init>:
{
 80025a4:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 80025a6:	4c11      	ldr	r4, [pc, #68]	; (80025ec <RTC_IF_Init+0x48>)
{
 80025a8:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 80025aa:	3444      	adds	r4, #68	; 0x44
 80025ac:	7823      	ldrb	r3, [r4, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d119      	bne.n	80025e6 <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025b2:	3320      	adds	r3, #32
 80025b4:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025b6:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b8:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025ba:	025b      	lsls	r3, r3, #9
 80025bc:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025be:	f001 fda9 	bl	8004114 <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d000      	beq.n	80025c8 <RTC_IF_Init+0x24>
 80025c6:	e7fe      	b.n	80025c6 <RTC_IF_Init+0x22>
    MX_RTC_Init();
 80025c8:	f7ff fdea 	bl	80021a0 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	4d08      	ldr	r5, [pc, #32]	; (80025f0 <RTC_IF_Init+0x4c>)
 80025d0:	0049      	lsls	r1, r1, #1
 80025d2:	0028      	movs	r0, r5
 80025d4:	f001 fe7a 	bl	80042cc <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80025d8:	0028      	movs	r0, r5
 80025da:	f002 f9b9 	bl	8004950 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 80025de:	f7ff fef1 	bl	80023c4 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 80025e2:	2301      	movs	r3, #1
 80025e4:	7023      	strb	r3, [r4, #0]
}
 80025e6:	2000      	movs	r0, #0
 80025e8:	b00b      	add	sp, #44	; 0x2c
 80025ea:	bd30      	pop	{r4, r5, pc}
 80025ec:	20000098 	.word	0x20000098
 80025f0:	200005f0 	.word	0x200005f0

080025f4 <RTC_IF_GetTimerValue>:
{
 80025f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 80025f6:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <RTC_IF_GetTimerValue+0x1c>)
 80025fa:	3344      	adds	r3, #68	; 0x44
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4283      	cmp	r3, r0
 8002600:	d003      	beq.n	800260a <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8002602:	a901      	add	r1, sp, #4
 8002604:	4668      	mov	r0, sp
 8002606:	f7ff fe83 	bl	8002310 <RTC_GetCalendarValue>
}
 800260a:	b007      	add	sp, #28
 800260c:	bd00      	pop	{pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	20000098 	.word	0x20000098

08002614 <RTC_IF_DelayMs>:
{
 8002614:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002616:	0e41      	lsrs	r1, r0, #25
 8002618:	227d      	movs	r2, #125	; 0x7d
 800261a:	2300      	movs	r3, #0
 800261c:	01c0      	lsls	r0, r0, #7
 800261e:	f7fd ff0f 	bl	8000440 <__aeabi_uldivmod>
 8002622:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8002624:	f7ff ffe6 	bl	80025f4 <RTC_IF_GetTimerValue>
 8002628:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800262a:	f7ff ffe3 	bl	80025f4 <RTC_IF_GetTimerValue>
 800262e:	1b40      	subs	r0, r0, r5
 8002630:	42a0      	cmp	r0, r4
 8002632:	d300      	bcc.n	8002636 <RTC_IF_DelayMs+0x22>
}
 8002634:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	e7f7      	b.n	800262a <RTC_IF_DelayMs+0x16>

0800263a <HAL_RTC_AlarmAEventCallback>:
{
 800263a:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 800263c:	f004 ff8e 	bl	800755c <UTIL_TIMER_IRQ_Handler>
}
 8002640:	bd10      	pop	{r4, pc}

08002642 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002642:	4770      	bx	lr

08002644 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8002644:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002646:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800264a:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 800264c:	f000 fcae 	bl	8002fac <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8002650:	2304      	movs	r3, #4
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <PWR_EnterStopMode+0x24>)
 8002654:	6811      	ldr	r1, [r2, #0]
 8002656:	430b      	orrs	r3, r1
 8002658:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265a:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800265e:	2101      	movs	r1, #1
 8002660:	0008      	movs	r0, r1
 8002662:	f001 f941 	bl	80038e8 <HAL_PWR_EnterSTOPMode>
}
 8002666:	bd10      	pop	{r4, pc}
 8002668:	40007000 	.word	0x40007000

0800266c <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800266c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800266e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002672:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8002674:	2201      	movs	r2, #1
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <PWR_ExitStopMode+0x4c>)
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800267e:	2204      	movs	r2, #4
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	4211      	tst	r1, r2
 8002684:	d0fc      	beq.n	8002680 <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	0452      	lsls	r2, r2, #17
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	0492      	lsls	r2, r2, #18
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	4211      	tst	r1, r2
 8002698:	d0fc      	beq.n	8002694 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800269a:	2203      	movs	r2, #3
 800269c:	68d9      	ldr	r1, [r3, #12]
 800269e:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80026a0:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80026a2:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	400a      	ands	r2, r1
 80026a8:	2a0c      	cmp	r2, #12
 80026aa:	d1fb      	bne.n	80026a4 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 80026ac:	f000 fba4 	bl	8002df8 <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b0:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
}
 80026b4:	bd10      	pop	{r4, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	40021000 	.word	0x40021000

080026bc <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80026bc:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80026be:	2101      	movs	r1, #1
 80026c0:	2000      	movs	r0, #0
 80026c2:	f001 f8db 	bl	800387c <HAL_PWR_EnterSLEEPMode>
}
 80026c6:	bd10      	pop	{r4, pc}

080026c8 <PWR_ExitSleepMode>:
 80026c8:	4770      	bx	lr

080026ca <PWR_ExitOffMode>:
 80026ca:	4770      	bx	lr

080026cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_MspInit+0x28>)
 80026d0:	055b      	lsls	r3, r3, #21
 80026d2:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 80026d4:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 80026da:	f001 f8c7 	bl	800386c <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 80026de:	f001 f947 	bl	8003970 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 80026e2:	2308      	movs	r3, #8
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_MspInit+0x2c>)
 80026e6:	6811      	ldr	r1, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 80026ec:	f001 f936 	bl	800395c <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f0:	bd10      	pop	{r4, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40022000 	.word	0x40022000

080026fc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026fc:	4770      	bx	lr

080026fe <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	e7fd      	b.n	80026fe <HardFault_Handler>

08002702 <SVC_Handler>:
 8002702:	4770      	bx	lr

08002704 <PendSV_Handler>:
 8002704:	4770      	bx	lr

08002706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002706:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002708:	f000 fd8e 	bl	8003228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800270c:	bd10      	pop	{r4, pc}
	...

08002710 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8002710:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002712:	4803      	ldr	r0, [pc, #12]	; (8002720 <EXTI0_1_IRQHandler+0x10>)
 8002714:	f000 ff44 	bl	80035a0 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <EXTI0_1_IRQHandler+0x14>)
 800271a:	f000 ff41 	bl	80035a0 <HAL_EXTI_IRQHandler>
#endif
}
 800271e:	bd10      	pop	{r4, pc}
 8002720:	2000074c 	.word	0x2000074c
 8002724:	20000744 	.word	0x20000744

08002728 <EXTI2_3_IRQHandler>:
 8002728:	4770      	bx	lr
	...

0800272c <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 800272c:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 800272e:	4803      	ldr	r0, [pc, #12]	; (800273c <EXTI4_15_IRQHandler+0x10>)
 8002730:	f000 ff36 	bl	80035a0 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <EXTI4_15_IRQHandler+0x14>)
 8002736:	f000 ff33 	bl	80035a0 <HAL_EXTI_IRQHandler>
#endif
}
 800273a:	bd10      	pop	{r4, pc}
 800273c:	2000073c 	.word	0x2000073c
 8002740:	20000754 	.word	0x20000754

08002744 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002744:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8002746:	4b02      	ldr	r3, [pc, #8]	; (8002750 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8002748:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800274a:	f000 fed0 	bl	80034ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800274e:	bd10      	pop	{r4, pc}
 8002750:	2000065c 	.word	0x2000065c

08002754 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002754:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8002756:	4802      	ldr	r0, [pc, #8]	; (8002760 <USART2_IRQHandler+0xc>)
 8002758:	f002 fbc0 	bl	8004edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800275c:	bd10      	pop	{r4, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	2000065c 	.word	0x2000065c

08002764 <RTC_IRQHandler>:



void RTC_IRQHandler(void)
{
 8002764:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002766:	4802      	ldr	r0, [pc, #8]	; (8002770 <RTC_IRQHandler+0xc>)
 8002768:	f001 fe10 	bl	800438c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800276c:	bd10      	pop	{r4, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	200005f0 	.word	0x200005f0

08002774 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8002774:	b40c      	push	{r2, r3}
 8002776:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 800277a:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800277c:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 800277e:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002780:	f004 ff34 	bl	80075ec <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002784:	b003      	add	sp, #12
 8002786:	bc08      	pop	{r3}
 8002788:	b002      	add	sp, #8
 800278a:	4718      	bx	r3
 800278c:	08007c8a 	.word	0x08007c8a

08002790 <TimestampNow>:
{
 8002790:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002792:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 8002794:	ad02      	add	r5, sp, #8
 8002796:	0028      	movs	r0, r5
{
 8002798:	000e      	movs	r6, r1
  SysTime_t curtime = SysTimeGet();
 800279a:	f004 fd99 	bl	80072d0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800279e:	2204      	movs	r2, #4
 80027a0:	5eab      	ldrsh	r3, [r5, r2]
 80027a2:	2110      	movs	r1, #16
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <TimestampNow+0x2c>)
 80027a8:	9b02      	ldr	r3, [sp, #8]
 80027aa:	0020      	movs	r0, r4
 80027ac:	f7ff ffe2 	bl	8002774 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 80027b0:	0020      	movs	r0, r4
 80027b2:	f7fd fca9 	bl	8000108 <strlen>
 80027b6:	8030      	strh	r0, [r6, #0]
}
 80027b8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	08007c8a 	.word	0x08007c8a

080027c0 <SystemApp_Init>:
{
 80027c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c4:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c6:	2704      	movs	r7, #4
{
 80027c8:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 80027ca:	f004 fdad 	bl	8007328 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ce:	220c      	movs	r2, #12
 80027d0:	2100      	movs	r1, #0
 80027d2:	a807      	add	r0, sp, #28
 80027d4:	f005 f84f 	bl	8007876 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027d8:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4c2b      	ldr	r4, [pc, #172]	; (8002888 <SystemApp_Init+0xc8>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e2:	432b      	orrs	r3, r5
 80027e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	402b      	ands	r3, r5
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027f2:	4333      	orrs	r3, r6
 80027f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027f8:	4033      	ands	r3, r6
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002800:	433b      	orrs	r3, r7
 8002802:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002804:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002806:	403b      	ands	r3, r7
 8002808:	9303      	str	r3, [sp, #12]
 800280a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800280c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800280e:	4313      	orrs	r3, r2
 8002810:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002812:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002814:	4013      	ands	r3, r2
 8002816:	9304      	str	r3, [sp, #16]
 8002818:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281a:	2303      	movs	r3, #3
 800281c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <SystemApp_Init+0xcc>)
 8002820:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f000 fecf 	bl	80035c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <SystemApp_Init+0xd0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	a905      	add	r1, sp, #20
 800282a:	481a      	ldr	r0, [pc, #104]	; (8002894 <SystemApp_Init+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800282c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f000 fec9 	bl	80035c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002832:	a905      	add	r1, sp, #20
 8002834:	4818      	ldr	r0, [pc, #96]	; (8002898 <SystemApp_Init+0xd8>)
 8002836:	f000 fec5 	bl	80035c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800283a:	a905      	add	r1, sp, #20
 800283c:	4817      	ldr	r0, [pc, #92]	; (800289c <SystemApp_Init+0xdc>)
 800283e:	f000 fec1 	bl	80035c4 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002842:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002844:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002846:	43ab      	bics	r3, r5
 8002848:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800284a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800284c:	43b3      	bics	r3, r6
 800284e:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002852:	43bb      	bics	r3, r7
 8002854:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002858:	4393      	bics	r3, r2
 800285a:	62e3      	str	r3, [r4, #44]	; 0x2c
  DBG_Init();
 800285c:	f000 f83e 	bl	80028dc <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8002860:	f004 fafa 	bl	8006e58 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002864:	480e      	ldr	r0, [pc, #56]	; (80028a0 <SystemApp_Init+0xe0>)
 8002866:	f004 fb11 	bl	8006e8c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800286a:	0030      	movs	r0, r6
 800286c:	f004 fb14 	bl	8006e98 <UTIL_ADV_TRACE_SetVerboseLevel>
  Sx_Board_Bus_Init();
 8002870:	f000 fc72 	bl	8003158 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8002874:	f000 fac0 	bl	8002df8 <CMWX1ZZABZ0XX_RADIO_IoInit>
  UTIL_LPM_Init();
 8002878:	f004 fc06 	bl	8007088 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800287c:	0029      	movs	r1, r5
 800287e:	0028      	movs	r0, r5
 8002880:	f004 fc20 	bl	80070c4 <UTIL_LPM_SetOffMode>
}
 8002884:	b00b      	add	sp, #44	; 0x2c
 8002886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	00009fff 	.word	0x00009fff
 8002890:	0000ffff 	.word	0x0000ffff
 8002894:	50000400 	.word	0x50000400
 8002898:	50000800 	.word	0x50000800
 800289c:	50001c00 	.word	0x50001c00
 80028a0:	08002791 	.word	0x08002791

080028a4 <UTIL_SEQ_Idle>:
{
 80028a4:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 80028a6:	f004 fc35 	bl	8007114 <UTIL_LPM_EnterLowPower>
}
 80028aa:	bd10      	pop	{r4, pc}

080028ac <UTIL_ADV_TRACE_PreSendHook>:
{
 80028ac:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80028ae:	2101      	movs	r1, #1
 80028b0:	2004      	movs	r0, #4
 80028b2:	f004 fbf1 	bl	8007098 <UTIL_LPM_SetStopMode>
}
 80028b6:	bd10      	pop	{r4, pc}

080028b8 <UTIL_ADV_TRACE_PostSendHook>:
{
 80028b8:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80028ba:	2100      	movs	r1, #0
 80028bc:	2004      	movs	r0, #4
 80028be:	f004 fbeb 	bl	8007098 <UTIL_LPM_SetStopMode>
}
 80028c2:	bd10      	pop	{r4, pc}

080028c4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80028c4:	2000      	movs	r0, #0
 80028c6:	4770      	bx	lr

080028c8 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 80028c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 80028ca:	f7ff fe93 	bl	80025f4 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80028ce:	bd10      	pop	{r4, pc}

080028d0 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80028d0:	b507      	push	{r0, r1, r2, lr}
 80028d2:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 80028d4:	9801      	ldr	r0, [sp, #4]
 80028d6:	f7ff fe9d 	bl	8002614 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80028da:	bd07      	pop	{r0, r1, r2, pc}

080028dc <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 80028dc:	b530      	push	{r4, r5, lr}
 80028de:	b087      	sub	sp, #28
  HAL_DBGMCU_EnableDBGStandbyMode();

#elif defined (DEBUGGER_ON) && (DEBUGGER_ON == 0) /* DEBUGGER_OFF */
  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
  /* The 4 debug lines above are simply not set in this case */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	220c      	movs	r2, #12
 80028e2:	2100      	movs	r1, #0
 80028e4:	a803      	add	r0, sp, #12
 80028e6:	f004 ffc6 	bl	8007876 <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 80028ea:	2303      	movs	r3, #3
 80028ec:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 80028ee:	23c0      	movs	r3, #192	; 0xc0
  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80028f0:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80028f4:	4c10      	ldr	r4, [pc, #64]	; (8002938 <DBG_Init+0x5c>)
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 80028f6:	01db      	lsls	r3, r3, #7
 80028f8:	9301      	str	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80028fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80028fe:	432b      	orrs	r3, r5
 8002900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002902:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002906:	402b      	ands	r3, r5
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290c:	f000 fe5a 	bl	80035c4 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE() ;
 8002910:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002912:	43ab      	bics	r3, r5
 8002914:	62e3      	str	r3, [r4, #44]	; 0x2c

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800291a:	03db      	lsls	r3, r3, #15
 800291c:	4313      	orrs	r3, r2
 800291e:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode();
 8002920:	f000 fc8e 	bl	8003240 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002924:	f000 fc94 	bl	8003250 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002928:	f000 fc9a 	bl	8003260 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 800292c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800292e:	4a03      	ldr	r2, [pc, #12]	; (800293c <DBG_Init+0x60>)
 8002930:	4013      	ands	r3, r2
 8002932:	6363      	str	r3, [r4, #52]	; 0x34
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8002934:	b007      	add	sp, #28
 8002936:	bd30      	pop	{r4, r5, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	ffbfffff 	.word	0xffbfffff

08002940 <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 8002940:	480a      	ldr	r0, [pc, #40]	; (800296c <MX_USART2_Init+0x2c>)
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <MX_USART2_Init+0x30>)
{
 8002944:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 8002946:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8002948:	23e1      	movs	r3, #225	; 0xe1
 800294a:	025b      	lsls	r3, r3, #9
 800294c:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX;
 800294e:	2208      	movs	r2, #8
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002950:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX;
 8002952:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002954:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8002956:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8002958:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800295a:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 800295c:	f002 fe3e 	bl	80055dc <HAL_UART_Init>
 8002960:	2800      	cmp	r0, #0
 8002962:	d001      	beq.n	8002968 <MX_USART2_Init+0x28>
  {
    Error_Handler();
 8002964:	f7ff fc1a 	bl	800219c <Error_Handler>
  }
}
 8002968:	bd10      	pop	{r4, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	2000065c 	.word	0x2000065c
 8002970:	40004400 	.word	0x40004400

08002974 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	0006      	movs	r6, r0
 8002978:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297a:	2214      	movs	r2, #20
 800297c:	2100      	movs	r1, #0
 800297e:	a804      	add	r0, sp, #16
 8002980:	f004 ff79 	bl	8007876 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002984:	2224      	movs	r2, #36	; 0x24
 8002986:	2100      	movs	r1, #0
 8002988:	a809      	add	r0, sp, #36	; 0x24
 800298a:	f004 ff74 	bl	8007876 <memset>
  if (uartHandle->Instance == USART2)
 800298e:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <HAL_UART_MspInit+0xf8>)
 8002990:	6832      	ldr	r2, [r6, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d168      	bne.n	8002a68 <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8002996:	2201      	movs	r2, #1
 8002998:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800299a:	2504      	movs	r5, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 800299c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299e:	4311      	orrs	r1, r2
 80029a0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80029a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a4:	4011      	ands	r1, r2
 80029a6:	9101      	str	r1, [sp, #4]
 80029a8:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 80029aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ac:	4311      	orrs	r1, r2
 80029ae:	62d9      	str	r1, [r3, #44]	; 0x2c
 80029b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b2:	4011      	ands	r1, r2
 80029b4:	9102      	str	r1, [sp, #8]
 80029b6:	9902      	ldr	r1, [sp, #8]
    __USART2_CLK_ENABLE();
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029bc:	0289      	lsls	r1, r1, #10
 80029be:	4308      	orrs	r0, r1
 80029c0:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 80029c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029c4:	4310      	orrs	r0, r2
 80029c6:	6318      	str	r0, [r3, #48]	; 0x30
 80029c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029ca:	4002      	ands	r2, r0
 80029cc:	9203      	str	r2, [sp, #12]
 80029ce:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d2:	a809      	add	r0, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d4:	4311      	orrs	r1, r2
 80029d6:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029d8:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80029da:	950c      	str	r5, [sp, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029dc:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029de:	f001 fb99 	bl	8004114 <HAL_RCCEx_PeriphCLKConfig>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d001      	beq.n	80029ea <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 80029e6:	f7ff fbd9 	bl	800219c <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80029ea:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80029f0:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80029f2:	a904      	add	r1, sp, #16
 80029f4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80029f8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 80029fa:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80029fe:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002a00:	f000 fde0 	bl	80035c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002a04:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002a06:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002a08:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002a0c:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002a12:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002a16:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002a18:	f000 fdd4 	bl	80035c4 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002a1c:	4f15      	ldr	r7, [pc, #84]	; (8002a74 <HAL_UART_MspInit+0x100>)
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_UART_MspInit+0x104>)
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_tx.Init.Mode                = DMA_NORMAL;
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8002a20:	0038      	movs	r0, r7
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002a22:	603b      	str	r3, [r7, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002a24:	2310      	movs	r3, #16
 8002a26:	60bb      	str	r3, [r7, #8]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002a28:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8002a2a:	607d      	str	r5, [r7, #4]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002a2c:	60fc      	str	r4, [r7, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002a2e:	613b      	str	r3, [r7, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a30:	617c      	str	r4, [r7, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002a32:	61bc      	str	r4, [r7, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8002a34:	61fc      	str	r4, [r7, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8002a36:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8002a38:	f000 fc60 	bl	80032fc <HAL_DMA_Init>
 8002a3c:	42a0      	cmp	r0, r4
 8002a3e:	d001      	beq.n	8002a44 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002a40:	f7ff fbac 	bl	800219c <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002a44:	2201      	movs	r2, #1
 8002a46:	2100      	movs	r1, #0
 8002a48:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8002a4a:	66f7      	str	r7, [r6, #108]	; 0x6c
 8002a4c:	62be      	str	r6, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002a4e:	f000 fc0f 	bl	8003270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8002a52:	200b      	movs	r0, #11
 8002a54:	f000 fc36 	bl	80032c4 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8002a58:	201c      	movs	r0, #28
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	f000 fc07 	bl	8003270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8002a62:	201c      	movs	r0, #28
 8002a64:	f000 fc2e 	bl	80032c4 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a68:	b013      	add	sp, #76	; 0x4c
 8002a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a6c:	40004400 	.word	0x40004400
 8002a70:	40021000 	.word	0x40021000
 8002a74:	20000614 	.word	0x20000614
 8002a78:	40020080 	.word	0x40020080

08002a7c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_UART_MspDeInit+0x30>)
 8002a7e:	6802      	ldr	r2, [r0, #0]
{
 8002a80:	b510      	push	{r4, lr}
 8002a82:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d10f      	bne.n	8002aa8 <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002a88:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_UART_MspDeInit+0x34>)
 8002a8c:	4909      	ldr	r1, [pc, #36]	; (8002ab4 <HAL_UART_MspDeInit+0x38>)
 8002a8e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002a90:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8002a92:	400b      	ands	r3, r1
 8002a94:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002a96:	210c      	movs	r1, #12
 8002a98:	f000 fe54 	bl	8003744 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002a9c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002a9e:	f000 fc71 	bl	8003384 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002aa2:	201c      	movs	r0, #28
 8002aa4:	f000 fc1a 	bl	80032dc <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002aa8:	bd10      	pop	{r4, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	40004400 	.word	0x40004400
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	fffdffff 	.word	0xfffdffff

08002ab8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002ab8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <vcom_Init+0x14>)
 8002abc:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002abe:	f7ff fb05 	bl	80020cc <MX_DMA_Init>
  MX_USART2_Init();
 8002ac2:	f7ff ff3d 	bl	8002940 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	bd10      	pop	{r4, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	200000e0 	.word	0x200000e0

08002ad0 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <vcom_DeInit+0x28>)
 8002ad4:	0292      	lsls	r2, r2, #10
 8002ad6:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8002ad8:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8002ada:	430a      	orrs	r2, r1
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8002ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae0:	4906      	ldr	r1, [pc, #24]	; (8002afc <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8002ae2:	4807      	ldr	r0, [pc, #28]	; (8002b00 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 8002ae8:	f7ff ffc8 	bl	8002a7c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002aec:	200b      	movs	r0, #11
 8002aee:	f000 fbf5 	bl	80032dc <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002af2:	2000      	movs	r0, #0
 8002af4:	bd10      	pop	{r4, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40021000 	.word	0x40021000
 8002afc:	fffdffff 	.word	0xfffdffff
 8002b00:	2000065c 	.word	0x2000065c

08002b04 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002b04:	b510      	push	{r4, lr}
 8002b06:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8002b08:	0001      	movs	r1, r0
 8002b0a:	4802      	ldr	r0, [pc, #8]	; (8002b14 <vcom_Trace_DMA+0x10>)
 8002b0c:	f002 f940 	bl	8004d90 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002b10:	2000      	movs	r0, #0
 8002b12:	bd10      	pop	{r4, pc}
 8002b14:	2000065c 	.word	0x2000065c

08002b18 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002b18:	b513      	push	{r0, r1, r4, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002b1a:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback = RxCb;
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <vcom_ReceiveInit+0x48>)

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002b1e:	4c11      	ldr	r4, [pc, #68]	; (8002b64 <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 8002b20:	6058      	str	r0, [r3, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002b22:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002b24:	9a01      	ldr	r2, [sp, #4]
 8002b26:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002b28:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8002b2a:	f002 fe07 	bl	800573c <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	0252      	lsls	r2, r2, #9
 8002b34:	69d9      	ldr	r1, [r3, #28]
 8002b36:	4211      	tst	r1, r2
 8002b38:	d1fc      	bne.n	8002b34 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	03d2      	lsls	r2, r2, #15
 8002b3e:	69d9      	ldr	r1, [r3, #28]
 8002b40:	4211      	tst	r1, r2
 8002b42:	d0fc      	beq.n	8002b3e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8002b44:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8002b46:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8002b4c:	f002 fe3a 	bl	80057c4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8002b50:	2201      	movs	r2, #1
 8002b52:	4905      	ldr	r1, [pc, #20]	; (8002b68 <vcom_ReceiveInit+0x50>)
 8002b54:	0020      	movs	r0, r4
 8002b56:	f002 fdbd 	bl	80056d4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	bd16      	pop	{r1, r2, r4, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	200000e0 	.word	0x200000e0
 8002b64:	2000065c 	.word	0x2000065c
 8002b68:	200006e0 	.word	0x200006e0

08002b6c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002b6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002b6e:	4b02      	ldr	r3, [pc, #8]	; (8002b78 <HAL_UART_TxCpltCallback+0xc>)
 8002b70:	2000      	movs	r0, #0
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002b76:	bd10      	pop	{r4, pc}
 8002b78:	200000e0 	.word	0x200000e0

08002b7c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_UART_RxCpltCallback+0x28>)
{
 8002b7e:	b570      	push	{r4, r5, r6, lr}
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8002b80:	685b      	ldr	r3, [r3, #4]
{
 8002b82:	0004      	movs	r4, r0
 8002b84:	4d08      	ldr	r5, [pc, #32]	; (8002ba8 <HAL_UART_RxCpltCallback+0x2c>)
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <HAL_UART_RxCpltCallback+0x1c>
 8002b8a:	1d02      	adds	r2, r0, #4
 8002b8c:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	d102      	bne.n	8002b98 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002b92:	2101      	movs	r1, #1
 8002b94:	0028      	movs	r0, r5
 8002b96:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8002b98:	0029      	movs	r1, r5
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f002 fd99 	bl	80056d4 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	200000e0 	.word	0x200000e0
 8002ba8:	200006e0 	.word	0x200006e0

08002bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002bae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bb2:	490e      	ldr	r1, [pc, #56]	; (8002bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <LoopForever+0xe>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb8:	e002      	b.n	8002bc0 <LoopCopyDataInit>

08002bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bbe:	3304      	adds	r3, #4

08002bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc4:	d3f9      	bcc.n	8002bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bc8:	4c0b      	ldr	r4, [pc, #44]	; (8002bf8 <LoopForever+0x16>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bcc:	e001      	b.n	8002bd2 <LoopFillZerobss>

08002bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd0:	3204      	adds	r2, #4

08002bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd4:	d3fb      	bcc.n	8002bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bd6:	f000 fae5 	bl	80031a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bda:	f004 fe1f 	bl	800781c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bde:	f7ff fad3 	bl	8002188 <main>

08002be2 <LoopForever>:

LoopForever:
    b LoopForever
 8002be2:	e7fe      	b.n	8002be2 <LoopForever>
   ldr   r0, =_estack
 8002be4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bec:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8002bf0:	08007cf8 	.word	0x08007cf8
  ldr r2, =_sbss
 8002bf4:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8002bf8:	20000810 	.word	0x20000810

08002bfc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bfc:	e7fe      	b.n	8002bfc <ADC1_COMP_IRQHandler>
	...

08002c00 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002c00:	23fa      	movs	r3, #250	; 0xfa
{
 8002c02:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002c04:	009b      	lsls	r3, r3, #2
{
 8002c06:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	000a      	movs	r2, r1
 8002c0e:	0001      	movs	r1, r0
 8002c10:	4804      	ldr	r0, [pc, #16]	; (8002c24 <BSP_SPI1_SendRecv+0x24>)
 8002c12:	f001 ffab 	bl	8004b6c <HAL_SPI_TransmitReceive>
 8002c16:	2800      	cmp	r0, #0
 8002c18:	d101      	bne.n	8002c1e <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 8002c1a:	0020      	movs	r0, r4
  }
  return ret;
}
 8002c1c:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002c1e:	2006      	movs	r0, #6
 8002c20:	4240      	negs	r0, r0
  return ret;
 8002c22:	e7fb      	b.n	8002c1c <BSP_SPI1_SendRecv+0x1c>
 8002c24:	200006e4 	.word	0x200006e4

08002c28 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <MX_SPI1_Init+0x54>)
{
 8002c2a:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8002c2c:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002c2e:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002c30:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002c36:	33fc      	adds	r3, #252	; 0xfc
 8002c38:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002c3a:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002c3c:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c3e:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c40:	6145      	str	r5, [r0, #20]
{
 8002c42:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002c44:	f001 fa56 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8002c48:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8002c4a:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8002c4c:	490d      	ldr	r1, [pc, #52]	; (8002c84 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8002c4e:	4290      	cmp	r0, r2
 8002c50:	d80d      	bhi.n	8002c6e <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c52:	2300      	movs	r3, #0
 8002c54:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002c56:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c58:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002c5a:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002c5c:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8002c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002c60:	0020      	movs	r0, r4
 8002c62:	f001 ff21 	bl	8004aa8 <HAL_SPI_Init>
 8002c66:	1e43      	subs	r3, r0, #1
 8002c68:	4198      	sbcs	r0, r3
  return ret;
 8002c6a:	b2c0      	uxtb	r0, r0
}
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8002c6e:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8002c70:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8002c72:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d0ec      	beq.n	8002c52 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8002c78:	0840      	lsrs	r0, r0, #1
 8002c7a:	e7e8      	b.n	8002c4e <MX_SPI1_Init+0x26>
 8002c7c:	40013000 	.word	0x40013000
 8002c80:	00989680 	.word	0x00989680
 8002c84:	0800794c 	.word	0x0800794c

08002c88 <BSP_SPI1_Init>:
{
 8002c88:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8002c8a:	4d1b      	ldr	r5, [pc, #108]	; (8002cf8 <BSP_SPI1_Init+0x70>)
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <BSP_SPI1_Init+0x74>)
{
 8002c8e:	b087      	sub	sp, #28
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002c90:	0028      	movs	r0, r5
  hspi1.Instance  = SPI1;
 8002c92:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002c94:	f002 f85d 	bl	8004d52 <HAL_SPI_GetState>
 8002c98:	1e04      	subs	r4, r0, #0
 8002c9a:	d002      	beq.n	8002ca2 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8002c9c:	2000      	movs	r0, #0
}
 8002c9e:	b007      	add	sp, #28
 8002ca0:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <BSP_SPI1_Init+0x78>)
 8002ca6:	015b      	lsls	r3, r3, #5
 8002ca8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002caa:	430b      	orrs	r3, r1
 8002cac:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002cb2:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002cb4:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb8:	3301      	adds	r3, #1
 8002cba:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002cbc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002cbe:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002cc0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002cc2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002cc4:	f000 fc7e 	bl	80035c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002cc8:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002cca:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ccc:	a901      	add	r1, sp, #4
 8002cce:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002cd0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002cd2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002cd4:	f000 fc76 	bl	80035c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002cd8:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002cda:	480a      	ldr	r0, [pc, #40]	; (8002d04 <BSP_SPI1_Init+0x7c>)
 8002cdc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002cde:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002ce0:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002ce2:	f000 fc6f 	bl	80035c4 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002ce6:	0028      	movs	r0, r5
 8002ce8:	f7ff ff9e 	bl	8002c28 <MX_SPI1_Init>
 8002cec:	2800      	cmp	r0, #0
 8002cee:	d0d5      	beq.n	8002c9c <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8002cf0:	2008      	movs	r0, #8
 8002cf2:	4240      	negs	r0, r0
  return ret;
 8002cf4:	e7d3      	b.n	8002c9e <BSP_SPI1_Init+0x16>
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	200006e4 	.word	0x200006e4
 8002cfc:	40013000 	.word	0x40013000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	50000400 	.word	0x50000400

08002d08 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002d08:	b500      	push	{lr}
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d0e:	2803      	cmp	r0, #3
 8002d10:	d80c      	bhi.n	8002d2c <BSP_LED_Init+0x24>
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <BSP_LED_Init+0x78>)
 8002d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d16:	f7fd fa09 	bl	800012c <__gnu_thumb1_case_uqi>
 8002d1a:	1b02      	.short	0x1b02
 8002d1c:	2b23      	.short	0x2b23
 8002d1e:	2002      	movs	r0, #2
 8002d20:	4301      	orrs	r1, r0
 8002d22:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	4003      	ands	r3, r0
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <BSP_LED_Init+0x7c>)
 8002d2e:	0051      	lsls	r1, r2, #1
 8002d30:	5acb      	ldrh	r3, [r1, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002d32:	0092      	lsls	r2, r2, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002d34:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d36:	2301      	movs	r3, #1
 8002d38:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3e:	3303      	adds	r3, #3
 8002d40:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <BSP_LED_Init+0x80>)
 8002d44:	a905      	add	r1, sp, #20
 8002d46:	58d0      	ldr	r0, [r2, r3]
 8002d48:	f000 fc3c 	bl	80035c4 <HAL_GPIO_Init>
}
 8002d4c:	b00b      	add	sp, #44	; 0x2c
 8002d4e:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d50:	2001      	movs	r0, #1
 8002d52:	4301      	orrs	r1, r0
 8002d54:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	4003      	ands	r3, r0
 8002d5a:	9302      	str	r3, [sp, #8]
 8002d5c:	9b02      	ldr	r3, [sp, #8]
 8002d5e:	e7e5      	b.n	8002d2c <BSP_LED_Init+0x24>
 8002d60:	2002      	movs	r0, #2
 8002d62:	4301      	orrs	r1, r0
 8002d64:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	4003      	ands	r3, r0
 8002d6a:	9303      	str	r3, [sp, #12]
 8002d6c:	9b03      	ldr	r3, [sp, #12]
 8002d6e:	e7dd      	b.n	8002d2c <BSP_LED_Init+0x24>
 8002d70:	2002      	movs	r0, #2
 8002d72:	4301      	orrs	r1, r0
 8002d74:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	4003      	ands	r3, r0
 8002d7a:	9304      	str	r3, [sp, #16]
 8002d7c:	9b04      	ldr	r3, [sp, #16]
 8002d7e:	e7d5      	b.n	8002d2c <BSP_LED_Init+0x24>
 8002d80:	40021000 	.word	0x40021000
 8002d84:	0800796c 	.word	0x0800796c
 8002d88:	20000004 	.word	0x20000004

08002d8c <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <BSP_LED_Off+0x18>)
{
 8002d8e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002d90:	0042      	lsls	r2, r0, #1
 8002d92:	5ad1      	ldrh	r1, [r2, r3]
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <BSP_LED_Off+0x1c>)
 8002d96:	0080      	lsls	r0, r0, #2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	58c0      	ldr	r0, [r0, r3]
 8002d9c:	f000 fd58 	bl	8003850 <HAL_GPIO_WritePin>
}
 8002da0:	bd10      	pop	{r4, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	0800796c 	.word	0x0800796c
 8002da8:	20000004 	.word	0x20000004

08002dac <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <BSP_LED_Toggle+0x14>)
{
 8002dae:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002db0:	0042      	lsls	r2, r0, #1
 8002db2:	5ad1      	ldrh	r1, [r2, r3]
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <BSP_LED_Toggle+0x18>)
 8002db6:	0080      	lsls	r0, r0, #2
 8002db8:	58c0      	ldr	r0, [r0, r3]
 8002dba:	f000 fd4f 	bl	800385c <HAL_GPIO_TogglePin>
}
 8002dbe:	bd10      	pop	{r4, pc}
 8002dc0:	0800796c 	.word	0x0800796c
 8002dc4:	20000004 	.word	0x20000004

08002dc8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8002dc8:	2005      	movs	r0, #5
 8002dca:	4770      	bx	lr

08002dcc <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8002dcc:	b510      	push	{r4, lr}
 8002dce:	0002      	movs	r2, r0

  if (state == SET)
 8002dd0:	2801      	cmp	r0, #1
 8002dd2:	d109      	bne.n	8002de8 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	20a0      	movs	r0, #160	; 0xa0
 8002dd8:	0149      	lsls	r1, r1, #5
 8002dda:	05c0      	lsls	r0, r0, #23
 8002ddc:	f000 fd38 	bl	8003850 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8002de0:	2005      	movs	r0, #5
 8002de2:	f7ff fd75 	bl	80028d0 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8002de6:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	20a0      	movs	r0, #160	; 0xa0
 8002dec:	2200      	movs	r2, #0
 8002dee:	0149      	lsls	r1, r1, #5
 8002df0:	05c0      	lsls	r0, r0, #23
 8002df2:	f000 fd2d 	bl	8003850 <HAL_GPIO_WritePin>
}
 8002df6:	e7f6      	b.n	8002de6 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08002df8 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8002df8:	2300      	movs	r3, #0
{
 8002dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002dfc:	2602      	movs	r6, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002dfe:	2204      	movs	r2, #4
{
 8002e00:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002e02:	4c65      	ldr	r4, [pc, #404]	; (8002f98 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8002e04:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002e06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002e08:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002e0a:	4333      	orrs	r3, r6
 8002e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e10:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8002e12:	4033      	ands	r3, r6
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e1a:	4f60      	ldr	r7, [pc, #384]	; (8002f9c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002e1c:	4333      	orrs	r3, r6
 8002e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e22:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8002e24:	4033      	ands	r3, r6
 8002e26:	9302      	str	r3, [sp, #8]
 8002e28:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8002e2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e2c:	4333      	orrs	r3, r6
 8002e2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e32:	4033      	ands	r3, r6
 8002e34:	9303      	str	r3, [sp, #12]
 8002e36:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002e38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002e40:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8002e42:	4013      	ands	r3, r2
 8002e44:	9304      	str	r3, [sp, #16]
 8002e46:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e48:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e4a:	0001      	movs	r1, r0
 8002e4c:	4854      	ldr	r0, [pc, #336]	; (8002fa0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e4e:	970d      	str	r7, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e50:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 8002e52:	960e      	str	r6, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e54:	f000 fbb6 	bl	80035c4 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e58:	4b52      	ldr	r3, [pc, #328]	; (8002fa4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e5a:	a80c      	add	r0, sp, #48	; 0x30
 8002e5c:	0001      	movs	r1, r0
 8002e5e:	4850      	ldr	r0, [pc, #320]	; (8002fa0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e60:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e62:	960c      	str	r6, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e64:	f000 fbae 	bl	80035c4 <HAL_GPIO_Init>
 8002e68:	a80c      	add	r0, sp, #48	; 0x30
 8002e6a:	0001      	movs	r1, r0
 8002e6c:	484c      	ldr	r0, [pc, #304]	; (8002fa0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e6e:	970d      	str	r7, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e70:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e72:	f000 fba7 	bl	80035c4 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e76:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e78:	a80c      	add	r0, sp, #48	; 0x30
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e7a:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e7c:	0001      	movs	r1, r0
 8002e7e:	484a      	ldr	r0, [pc, #296]	; (8002fa8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002e80:	970d      	str	r7, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002e82:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002e84:	f000 fb9e 	bl	80035c4 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002e88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e8a:	27a0      	movs	r7, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002e8c:	4333      	orrs	r3, r6
 8002e8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e92:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8002e94:	4033      	ands	r3, r6
 8002e96:	9309      	str	r3, [sp, #36]	; 0x24
 8002e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002e9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002e9c:	05ff      	lsls	r7, r7, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002e9e:	432b      	orrs	r3, r5
 8002ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ea2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ea4:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8002ea6:	402b      	ands	r3, r5
 8002ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8002eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eae:	432b      	orrs	r3, r5
 8002eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002eb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb4:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8002eb6:	402b      	ands	r3, r5
 8002eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002ebc:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ebe:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8002ec0:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ec2:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8002ec4:	3380      	adds	r3, #128	; 0x80
 8002ec6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002eca:	9613      	str	r6, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ecc:	f000 fb7a 	bl	80035c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002ed0:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ed2:	a811      	add	r0, sp, #68	; 0x44
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8002ed4:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ed6:	0001      	movs	r1, r0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002ed8:	3340      	adds	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002eda:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8002edc:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ede:	f000 fb71 	bl	80035c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002ee2:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002ee4:	a811      	add	r0, sp, #68	; 0x44
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8002ee6:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002ee8:	0001      	movs	r1, r0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002eea:	3308      	adds	r3, #8
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002eec:	482c      	ldr	r0, [pc, #176]	; (8002fa0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8002eee:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002ef0:	f000 fb68 	bl	80035c4 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8002ef4:	2080      	movs	r0, #128	; 0x80
 8002ef6:	0200      	lsls	r0, r0, #8
 8002ef8:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efa:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 8002efc:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 8002efe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002f00:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8002f02:	432b      	orrs	r3, r5
 8002f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002f08:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 8002f0a:	402b      	ands	r3, r5
 8002f0c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002f0e:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 8002f10:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8002f12:	f000 fb57 	bl	80035c4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	002a      	movs	r2, r5
 8002f1a:	0038      	movs	r0, r7
 8002f1c:	0209      	lsls	r1, r1, #8
 8002f1e:	f000 fc97 	bl	8003850 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8002f22:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002f24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002f26:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002f28:	432b      	orrs	r3, r5
 8002f2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002f2e:	0038      	movs	r0, r7
  RADIO_TCXO_VCC_CLK_ENABLE();
 8002f30:	402b      	ands	r3, r5
 8002f32:	9306      	str	r3, [sp, #24]
 8002f34:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8002f36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f38:	432b      	orrs	r3, r5
 8002f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f3e:	402b      	ands	r3, r5
 8002f40:	9307      	str	r3, [sp, #28]
 8002f42:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8002f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f46:	4313      	orrs	r3, r2
 8002f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	9308      	str	r3, [sp, #32]
 8002f50:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8002f52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f54:	4313      	orrs	r3, r2
 8002f56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f5a:	0014      	movs	r4, r2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	9311      	str	r3, [sp, #68]	; 0x44
 8002f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002f66:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002f68:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002f6a:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002f6c:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8002f6e:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f70:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8002f72:	f000 fb27 	bl	80035c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8002f76:	a90c      	add	r1, sp, #48	; 0x30
 8002f78:	0038      	movs	r0, r7
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8002f7a:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8002f7c:	f000 fb22 	bl	80035c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8002f80:	a90c      	add	r1, sp, #48	; 0x30
 8002f82:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8002f84:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8002f86:	f000 fb1d 	bl	80035c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8002f8a:	a90c      	add	r1, sp, #48	; 0x30
 8002f8c:	4806      	ldr	r0, [pc, #24]	; (8002fa8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8002f8e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8002f90:	f000 fb18 	bl	80035c4 <HAL_GPIO_Init>
}
 8002f94:	b017      	add	sp, #92	; 0x5c
 8002f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	10110000 	.word	0x10110000
 8002fa0:	50000400 	.word	0x50000400
 8002fa4:	10310000 	.word	0x10310000
 8002fa8:	50000800 	.word	0x50000800

08002fac <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8002fae:	2608      	movs	r6, #8
{
 8002fb0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8002fb2:	0032      	movs	r2, r6
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	a803      	add	r0, sp, #12
 8002fb8:	f004 fc5d 	bl	8007876 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8002fbc:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002fbe:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002fc0:	4c22      	ldr	r4, [pc, #136]	; (800304c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002fc2:	4f23      	ldr	r7, [pc, #140]	; (8003050 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002fc4:	4669      	mov	r1, sp
 8002fc6:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 8002fc8:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002fca:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002fcc:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002fce:	f000 faf9 	bl	80035c4 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002fd4:	4669      	mov	r1, sp
 8002fd6:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002fd8:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002fda:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002fdc:	f000 faf2 	bl	80035c4 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002fe0:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002fe2:	4669      	mov	r1, sp
 8002fe4:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002fe6:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002fe8:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002fea:	f000 faeb 	bl	80035c4 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002fee:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002ff0:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002ff2:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002ff4:	4818      	ldr	r0, [pc, #96]	; (8003058 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8002ff6:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8002ff8:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8002ffa:	f000 fae3 	bl	80035c4 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ffe:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003000:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003002:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003004:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003006:	05ed      	lsls	r5, r5, #23
 8003008:	a905      	add	r1, sp, #20
 800300a:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800300e:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003010:	f000 fad8 	bl	80035c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8003014:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003016:	a905      	add	r1, sp, #20
 8003018:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800301a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800301c:	f000 fad2 	bl	80035c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003020:	a905      	add	r1, sp, #20
 8003022:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8003024:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003026:	f000 facd 	bl	80035c4 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 800302a:	0039      	movs	r1, r7
 800302c:	0028      	movs	r0, r5
 800302e:	2200      	movs	r2, #0
 8003030:	f000 fc0e 	bl	8003850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8003034:	0028      	movs	r0, r5
 8003036:	2200      	movs	r2, #0
 8003038:	2140      	movs	r1, #64	; 0x40
 800303a:	f000 fc09 	bl	8003850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 800303e:	2200      	movs	r2, #0
 8003040:	0031      	movs	r1, r6
 8003042:	0020      	movs	r0, r4
 8003044:	f000 fc04 	bl	8003850 <HAL_GPIO_WritePin>
}
 8003048:	b00b      	add	sp, #44	; 0x2c
 800304a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304c:	50000400 	.word	0x50000400
 8003050:	10110000 	.word	0x10110000
 8003054:	10310000 	.word	0x10310000
 8003058:	50000800 	.word	0x50000800

0800305c <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 800305c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800305e:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003060:	f3ef 8310 	mrs	r3, PRIMASK
 8003064:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003066:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8003068:	2400      	movs	r4, #0
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 800306c:	4d11      	ldr	r5, [pc, #68]	; (80030b4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 800306e:	00e6      	lsls	r6, r4, #3
 8003070:	18f6      	adds	r6, r6, r3
 8003072:	00a7      	lsls	r7, r4, #2
 8003074:	5979      	ldr	r1, [r7, r5]
 8003076:	0030      	movs	r0, r6
 8003078:	f000 fa8b 	bl	8003592 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 800307c:	9b00      	ldr	r3, [sp, #0]
 800307e:	2100      	movs	r1, #0
 8003080:	59da      	ldr	r2, [r3, r7]
 8003082:	0030      	movs	r0, r6
 8003084:	f000 fa7e 	bl	8003584 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8003088:	002b      	movs	r3, r5
 800308a:	3310      	adds	r3, #16
 800308c:	56e6      	ldrsb	r6, [r4, r3]
 800308e:	3514      	adds	r5, #20
 8003090:	2200      	movs	r2, #0
 8003092:	5979      	ldr	r1, [r7, r5]
 8003094:	0030      	movs	r0, r6
 8003096:	f000 f8eb 	bl	8003270 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800309a:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 800309c:	0030      	movs	r0, r6
 800309e:	f000 f911 	bl	80032c4 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80030a2:	2c04      	cmp	r4, #4
 80030a4:	d1e1      	bne.n	800306a <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	9b01      	ldr	r3, [sp, #4]
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	2000073c 	.word	0x2000073c
 80030b4:	08007978 	.word	0x08007978

080030b8 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 80030b8:	2000      	movs	r0, #0
 80030ba:	4770      	bx	lr

080030bc <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 80030bc:	3801      	subs	r0, #1
{
 80030be:	b510      	push	{r4, lr}
  switch (state)
 80030c0:	2803      	cmp	r0, #3
 80030c2:	d811      	bhi.n	80030e8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 80030c4:	f7fd f832 	bl	800012c <__gnu_thumb1_case_uqi>
 80030c8:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 80030cc:	20a0      	movs	r0, #160	; 0xa0
 80030ce:	2201      	movs	r2, #1
 80030d0:	2102      	movs	r1, #2
 80030d2:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80030d4:	f000 fbbc 	bl	8003850 <HAL_GPIO_WritePin>
}
 80030d8:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 80030da:	2201      	movs	r2, #1
 80030dc:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80030de:	4809      	ldr	r0, [pc, #36]	; (8003104 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80030e0:	e7f8      	b.n	80030d4 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 80030e2:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80030e4:	2102      	movs	r1, #2
 80030e6:	e7fa      	b.n	80030de <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80030e8:	20a0      	movs	r0, #160	; 0xa0
 80030ea:	2200      	movs	r2, #0
 80030ec:	2102      	movs	r1, #2
 80030ee:	05c0      	lsls	r0, r0, #23
 80030f0:	f000 fbae 	bl	8003850 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2104      	movs	r1, #4
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80030fa:	f000 fba9 	bl	8003850 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80030fe:	2200      	movs	r2, #0
 8003100:	e7f0      	b.n	80030e4 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	50000800 	.word	0x50000800

08003108 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 8003108:	2001      	movs	r0, #1
 800310a:	4770      	bx	lr

0800310c <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 800310c:	b530      	push	{r4, r5, lr}
 800310e:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8003110:	220c      	movs	r2, #12
 8003112:	2100      	movs	r1, #0
 8003114:	a803      	add	r0, sp, #12
 8003116:	f004 fbae 	bl	8007876 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800311a:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 800311c:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800311e:	4d0d      	ldr	r5, [pc, #52]	; (8003154 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 8003120:	a901      	add	r1, sp, #4
 8003122:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003124:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003126:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 8003128:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800312a:	f000 fa4b 	bl	80035c4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 800312e:	2200      	movs	r2, #0
 8003130:	0021      	movs	r1, r4
 8003132:	0028      	movs	r0, r5
 8003134:	f000 fb8c 	bl	8003850 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003138:	0020      	movs	r0, r4
 800313a:	f7ff fbc9 	bl	80028d0 <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003140:	a901      	add	r1, sp, #4
 8003142:	0028      	movs	r0, r5
  initStruct.Mode = GPIO_NOPULL;
 8003144:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003146:	f000 fa3d 	bl	80035c4 <HAL_GPIO_Init>
  HAL_Delay(6);
 800314a:	2006      	movs	r0, #6
 800314c:	f7ff fbc0 	bl	80028d0 <HAL_Delay>
}
 8003150:	b007      	add	sp, #28
 8003152:	bd30      	pop	{r4, r5, pc}
 8003154:	50000800 	.word	0x50000800

08003158 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 8003158:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 800315a:	f7ff fd95 	bl	8002c88 <BSP_SPI1_Init>
}
 800315e:	bd10      	pop	{r4, pc}

08003160 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 8003160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8003162:	240e      	movs	r4, #14
{
 8003164:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8003166:	446c      	add	r4, sp
{
 8003168:	80d8      	strh	r0, [r3, #6]
 800316a:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 800316c:	2201      	movs	r2, #1
 800316e:	0021      	movs	r1, r4
 8003170:	0018      	movs	r0, r3
 8003172:	f7ff fd45 	bl	8002c00 <BSP_SPI1_SendRecv>
  return rxData;
 8003176:	8820      	ldrh	r0, [r4, #0]
}
 8003178:	b004      	add	sp, #16
 800317a:	bd10      	pop	{r4, pc}

0800317c <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 800317c:	b510      	push	{r4, lr}
 800317e:	1e02      	subs	r2, r0, #0
  if (state == 0)
 8003180:	d106      	bne.n	8003190 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x14>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003182:	2180      	movs	r1, #128	; 0x80
 8003184:	20a0      	movs	r0, #160	; 0xa0
 8003186:	0209      	lsls	r1, r1, #8
 8003188:	05c0      	lsls	r0, r0, #23
 800318a:	f000 fb61 	bl	8003850 <HAL_GPIO_WritePin>
}
 800318e:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003190:	2201      	movs	r2, #1
 8003192:	e7f6      	b.n	8003182 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x6>

08003194 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8003194:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8003196:	2102      	movs	r1, #2
 8003198:	4801      	ldr	r0, [pc, #4]	; (80031a0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 800319a:	f000 fb53 	bl	8003844 <HAL_GPIO_ReadPin>
}
 800319e:	bd10      	pop	{r4, pc}
 80031a0:	50000400 	.word	0x50000400

080031a4 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <SystemInit+0x44>)
 80031a8:	0052      	lsls	r2, r2, #1
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	490e      	ldr	r1, [pc, #56]	; (80031ec <SystemInit+0x48>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	490d      	ldr	r1, [pc, #52]	; (80031f0 <SystemInit+0x4c>)
 80031bc:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80031be:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80031c0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	438a      	bics	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	490a      	ldr	r1, [pc, #40]	; (80031f4 <SystemInit+0x50>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	4909      	ldr	r1, [pc, #36]	; (80031f8 <SystemInit+0x54>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <SystemInit+0x58>)
 80031e0:	0512      	lsls	r2, r2, #20
 80031e2:	609a      	str	r2, [r3, #8]
#endif
}
 80031e4:	4770      	bx	lr
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	40021000 	.word	0x40021000
 80031ec:	88ff400c 	.word	0x88ff400c
 80031f0:	fef6fff6 	.word	0xfef6fff6
 80031f4:	fffbffff 	.word	0xfffbffff
 80031f8:	ff02ffff 	.word	0xff02ffff
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003200:	2302      	movs	r3, #2
 8003202:	4a08      	ldr	r2, [pc, #32]	; (8003224 <HAL_Init+0x24>)
{
 8003204:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003206:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003208:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800320a:	430b      	orrs	r3, r1
 800320c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800320e:	f7ff fb59 	bl	80028c4 <HAL_InitTick>
 8003212:	1e04      	subs	r4, r0, #0
 8003214:	d103      	bne.n	800321e <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003216:	f7ff fa59 	bl	80026cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800321a:	0020      	movs	r0, r4
 800321c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800321e:	2401      	movs	r4, #1
 8003220:	e7fb      	b.n	800321a <HAL_Init+0x1a>
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	40022000 	.word	0x40022000

08003228 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003228:	4a03      	ldr	r2, [pc, #12]	; (8003238 <HAL_IncTick+0x10>)
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <HAL_IncTick+0x14>)
 800322c:	6811      	ldr	r1, [r2, #0]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	185b      	adds	r3, r3, r1
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	4770      	bx	lr
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	2000075c 	.word	0x2000075c
 800323c:	2000001c 	.word	0x2000001c

08003240 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003240:	2101      	movs	r1, #1
 8003242:	4a02      	ldr	r2, [pc, #8]	; (800324c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8003244:	6853      	ldr	r3, [r2, #4]
 8003246:	438b      	bics	r3, r1
 8003248:	6053      	str	r3, [r2, #4]
}
 800324a:	4770      	bx	lr
 800324c:	40015800 	.word	0x40015800

08003250 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003250:	2102      	movs	r1, #2
 8003252:	4a02      	ldr	r2, [pc, #8]	; (800325c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8003254:	6853      	ldr	r3, [r2, #4]
 8003256:	438b      	bics	r3, r1
 8003258:	6053      	str	r3, [r2, #4]
}
 800325a:	4770      	bx	lr
 800325c:	40015800 	.word	0x40015800

08003260 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003260:	2104      	movs	r1, #4
 8003262:	4a02      	ldr	r2, [pc, #8]	; (800326c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8003264:	6853      	ldr	r3, [r2, #4]
 8003266:	438b      	bics	r3, r1
 8003268:	6053      	str	r3, [r2, #4]
}
 800326a:	4770      	bx	lr
 800326c:	40015800 	.word	0x40015800

08003270 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003270:	b530      	push	{r4, r5, lr}
 8003272:	25ff      	movs	r5, #255	; 0xff
 8003274:	2403      	movs	r4, #3
 8003276:	002a      	movs	r2, r5
 8003278:	b2c3      	uxtb	r3, r0
 800327a:	401c      	ands	r4, r3
 800327c:	00e4      	lsls	r4, r4, #3
 800327e:	40a2      	lsls	r2, r4
 8003280:	0189      	lsls	r1, r1, #6
 8003282:	4029      	ands	r1, r5
 8003284:	43d2      	mvns	r2, r2
 8003286:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003288:	2800      	cmp	r0, #0
 800328a:	db0a      	blt.n	80032a2 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800328c:	24c0      	movs	r4, #192	; 0xc0
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_NVIC_SetPriority+0x4c>)
 8003290:	0880      	lsrs	r0, r0, #2
 8003292:	0080      	lsls	r0, r0, #2
 8003294:	18c0      	adds	r0, r0, r3
 8003296:	00a4      	lsls	r4, r4, #2
 8003298:	5903      	ldr	r3, [r0, r4]
 800329a:	401a      	ands	r2, r3
 800329c:	4311      	orrs	r1, r2
 800329e:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80032a0:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032a2:	200f      	movs	r0, #15
 80032a4:	4003      	ands	r3, r0
 80032a6:	3b08      	subs	r3, #8
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <HAL_NVIC_SetPriority+0x50>)
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	181b      	adds	r3, r3, r0
 80032b0:	69d8      	ldr	r0, [r3, #28]
 80032b2:	4002      	ands	r2, r0
 80032b4:	4311      	orrs	r1, r2
 80032b6:	61d9      	str	r1, [r3, #28]
 80032b8:	e7f2      	b.n	80032a0 <HAL_NVIC_SetPriority+0x30>
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	e000e100 	.word	0xe000e100
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80032c4:	2800      	cmp	r0, #0
 80032c6:	db05      	blt.n	80032d4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c8:	231f      	movs	r3, #31
 80032ca:	4018      	ands	r0, r3
 80032cc:	3b1e      	subs	r3, #30
 80032ce:	4083      	lsls	r3, r0
 80032d0:	4a01      	ldr	r2, [pc, #4]	; (80032d8 <HAL_NVIC_EnableIRQ+0x14>)
 80032d2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80032d4:	4770      	bx	lr
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	e000e100 	.word	0xe000e100

080032dc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80032dc:	2800      	cmp	r0, #0
 80032de:	db09      	blt.n	80032f4 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e0:	231f      	movs	r3, #31
 80032e2:	4018      	ands	r0, r3
 80032e4:	3b1e      	subs	r3, #30
 80032e6:	4083      	lsls	r3, r0
 80032e8:	4a03      	ldr	r2, [pc, #12]	; (80032f8 <HAL_NVIC_DisableIRQ+0x1c>)
 80032ea:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80032ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032f0:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80032f4:	4770      	bx	lr
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	e000e104 	.word	0xe000e104

080032fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003300:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003302:	2c00      	cmp	r4, #0
 8003304:	d035      	beq.n	8003372 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003306:	6825      	ldr	r5, [r4, #0]
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_DMA_Init+0x78>)
 800330a:	2114      	movs	r1, #20
 800330c:	18e8      	adds	r0, r5, r3
 800330e:	f7fc ff21 	bl	8000154 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003312:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003314:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003316:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003318:	2302      	movs	r3, #2
 800331a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800331c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800331e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003320:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003324:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003326:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003328:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800332c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332e:	433b      	orrs	r3, r7
 8003330:	6967      	ldr	r7, [r4, #20]
 8003332:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003334:	69a7      	ldr	r7, [r4, #24]
 8003336:	433b      	orrs	r3, r7
 8003338:	69e7      	ldr	r7, [r4, #28]
 800333a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800333c:	6a27      	ldr	r7, [r4, #32]
 800333e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003340:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003342:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	01db      	lsls	r3, r3, #7
 8003348:	4299      	cmp	r1, r3
 800334a:	d00c      	beq.n	8003366 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800334c:	251c      	movs	r5, #28
 800334e:	4028      	ands	r0, r5
 8003350:	3d0d      	subs	r5, #13
 8003352:	4085      	lsls	r5, r0
 8003354:	490a      	ldr	r1, [pc, #40]	; (8003380 <HAL_DMA_Init+0x84>)
 8003356:	680b      	ldr	r3, [r1, #0]
 8003358:	43ab      	bics	r3, r5
 800335a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800335c:	6863      	ldr	r3, [r4, #4]
 800335e:	680d      	ldr	r5, [r1, #0]
 8003360:	4083      	lsls	r3, r0
 8003362:	432b      	orrs	r3, r5
 8003364:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003366:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003368:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800336a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800336c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800336e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003370:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003374:	bffdfff8 	.word	0xbffdfff8
 8003378:	40020000 	.word	0x40020000
 800337c:	ffff800f 	.word	0xffff800f
 8003380:	400200a8 	.word	0x400200a8

08003384 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	2501      	movs	r5, #1
 8003388:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 800338a:	0028      	movs	r0, r5
  if (NULL == hdma )
 800338c:	2c00      	cmp	r4, #0
 800338e:	d021      	beq.n	80033d4 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003390:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003392:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8003394:	6833      	ldr	r3, [r6, #0]
 8003396:	43ab      	bics	r3, r5
 8003398:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800339a:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_DMA_DeInit+0x54>)
 800339c:	18f0      	adds	r0, r6, r3
 800339e:	f7fc fed9 	bl	8000154 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033a2:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033a4:	0083      	lsls	r3, r0, #2
 80033a6:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033a8:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 80033aa:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033ac:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033ae:	390d      	subs	r1, #13
 80033b0:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80033b4:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 80033b6:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 80033b8:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033ba:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033bc:	4d08      	ldr	r5, [pc, #32]	; (80033e0 <HAL_DMA_DeInit+0x5c>)
 80033be:	682a      	ldr	r2, [r5, #0]
 80033c0:	438a      	bics	r2, r1
 80033c2:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 80033c4:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80033c6:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80033c8:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80033ca:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033cc:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80033ce:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 80033d0:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 80033d2:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	bffdfff8 	.word	0xbffdfff8
 80033dc:	40020000 	.word	0x40020000
 80033e0:	400200a8 	.word	0x400200a8

080033e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033e6:	1d44      	adds	r4, r0, #5
 80033e8:	7fe6      	ldrb	r6, [r4, #31]
{
 80033ea:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 80033ec:	2002      	movs	r0, #2
 80033ee:	2e01      	cmp	r6, #1
 80033f0:	d02b      	beq.n	800344a <HAL_DMA_Start_IT+0x66>
 80033f2:	3801      	subs	r0, #1
 80033f4:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 80033f6:	1da8      	adds	r0, r5, #6
 80033f8:	7fc6      	ldrb	r6, [r0, #31]
 80033fa:	4684      	mov	ip, r0
 80033fc:	b2f6      	uxtb	r6, r6
 80033fe:	2002      	movs	r0, #2
 8003400:	2700      	movs	r7, #0
 8003402:	2e01      	cmp	r6, #1
 8003404:	d12c      	bne.n	8003460 <HAL_DMA_Start_IT+0x7c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003406:	4664      	mov	r4, ip
 8003408:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800340a:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340c:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800340e:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003410:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 8003412:	43b0      	bics	r0, r6
 8003414:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003416:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8003418:	9001      	str	r0, [sp, #4]
 800341a:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800341c:	4007      	ands	r7, r0
 800341e:	40be      	lsls	r6, r7
 8003420:	9801      	ldr	r0, [sp, #4]
 8003422:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003424:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003426:	68ab      	ldr	r3, [r5, #8]
 8003428:	6828      	ldr	r0, [r5, #0]
 800342a:	2b10      	cmp	r3, #16
 800342c:	d10e      	bne.n	800344c <HAL_DMA_Start_IT+0x68>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800342e:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003430:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003432:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00c      	beq.n	8003452 <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003438:	230e      	movs	r3, #14
 800343a:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800343c:	4313      	orrs	r3, r2
 800343e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003440:	2301      	movs	r3, #1
 8003442:	6802      	ldr	r2, [r0, #0]
 8003444:	4313      	orrs	r3, r2
 8003446:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003448:	2000      	movs	r0, #0
}
 800344a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800344c:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800344e:	60e2      	str	r2, [r4, #12]
 8003450:	e7ef      	b.n	8003432 <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003452:	2204      	movs	r2, #4
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	4393      	bics	r3, r2
 8003458:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	230a      	movs	r3, #10
 800345e:	e7ed      	b.n	800343c <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 8003460:	77e7      	strb	r7, [r4, #31]
 8003462:	e7f2      	b.n	800344a <HAL_DMA_Start_IT+0x66>

08003464 <HAL_DMA_Abort>:
{
 8003464:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003466:	1d85      	adds	r5, r0, #6
 8003468:	7feb      	ldrb	r3, [r5, #31]
 800346a:	1d44      	adds	r4, r0, #5
 800346c:	2b02      	cmp	r3, #2
 800346e:	d005      	beq.n	800347c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003470:	2304      	movs	r3, #4
 8003472:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003474:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003476:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003478:	77e3      	strb	r3, [r4, #31]
}
 800347a:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800347c:	210e      	movs	r1, #14
 800347e:	6803      	ldr	r3, [r0, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	438a      	bics	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003486:	2201      	movs	r2, #1
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	4391      	bics	r1, r2
 800348c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800348e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003490:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003492:	201c      	movs	r0, #28
 8003494:	4003      	ands	r3, r0
 8003496:	0010      	movs	r0, r2
 8003498:	4098      	lsls	r0, r3
 800349a:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800349c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800349e:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 80034a0:	77e0      	strb	r0, [r4, #31]
    return status;
 80034a2:	e7ea      	b.n	800347a <HAL_DMA_Abort+0x16>

080034a4 <HAL_DMA_Abort_IT>:
{
 80034a4:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034a6:	1d84      	adds	r4, r0, #6
 80034a8:	7fe3      	ldrb	r3, [r4, #31]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d004      	beq.n	80034b8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ae:	2304      	movs	r3, #4
 80034b0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80034b2:	3b03      	subs	r3, #3
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b8:	210e      	movs	r1, #14
 80034ba:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034bc:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	438a      	bics	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80034c4:	2201      	movs	r2, #1
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	4391      	bics	r1, r2
 80034ca:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034cc:	231c      	movs	r3, #28
 80034ce:	402b      	ands	r3, r5
 80034d0:	0015      	movs	r5, r2
 80034d2:	409d      	lsls	r5, r3
 80034d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80034d6:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034d8:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80034da:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80034dc:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80034de:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80034e0:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80034e4:	42a2      	cmp	r2, r4
 80034e6:	d0e5      	beq.n	80034b4 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80034e8:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	0023      	movs	r3, r4
 80034ec:	e7e2      	b.n	80034b4 <HAL_DMA_Abort_IT+0x10>

080034ee <HAL_DMA_IRQHandler>:
{
 80034ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80034f0:	221c      	movs	r2, #28
 80034f2:	2704      	movs	r7, #4
 80034f4:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80034f8:	4032      	ands	r2, r6
 80034fa:	003e      	movs	r6, r7
 80034fc:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034fe:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003500:	6803      	ldr	r3, [r0, #0]
 8003502:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003504:	4235      	tst	r5, r6
 8003506:	d00d      	beq.n	8003524 <HAL_DMA_IRQHandler+0x36>
 8003508:	423c      	tst	r4, r7
 800350a:	d00b      	beq.n	8003524 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	0692      	lsls	r2, r2, #26
 8003510:	d402      	bmi.n	8003518 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	43ba      	bics	r2, r7
 8003516:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003518:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800351a:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003520:	4798      	blx	r3
  return;
 8003522:	e017      	b.n	8003554 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003524:	2702      	movs	r7, #2
 8003526:	003e      	movs	r6, r7
 8003528:	4096      	lsls	r6, r2
 800352a:	4235      	tst	r5, r6
 800352c:	d013      	beq.n	8003556 <HAL_DMA_IRQHandler+0x68>
 800352e:	423c      	tst	r4, r7
 8003530:	d011      	beq.n	8003556 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	0692      	lsls	r2, r2, #26
 8003536:	d406      	bmi.n	8003546 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003538:	240a      	movs	r4, #10
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	43a2      	bics	r2, r4
 800353e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003540:	2201      	movs	r2, #1
 8003542:	1d83      	adds	r3, r0, #6
 8003544:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003546:	2200      	movs	r2, #0
 8003548:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800354a:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800354c:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800354e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003550:	4293      	cmp	r3, r2
 8003552:	d1e5      	bne.n	8003520 <HAL_DMA_IRQHandler+0x32>
}
 8003554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003556:	2608      	movs	r6, #8
 8003558:	0037      	movs	r7, r6
 800355a:	4097      	lsls	r7, r2
 800355c:	423d      	tst	r5, r7
 800355e:	d0f9      	beq.n	8003554 <HAL_DMA_IRQHandler+0x66>
 8003560:	4234      	tst	r4, r6
 8003562:	d0f7      	beq.n	8003554 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003564:	250e      	movs	r5, #14
 8003566:	681c      	ldr	r4, [r3, #0]
 8003568:	43ac      	bics	r4, r5
 800356a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800356c:	2301      	movs	r3, #1
 800356e:	001c      	movs	r4, r3
 8003570:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003572:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003574:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003576:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003578:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800357a:	2200      	movs	r2, #0
 800357c:	1d43      	adds	r3, r0, #5
 800357e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003580:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003582:	e7e5      	b.n	8003550 <HAL_DMA_IRQHandler+0x62>

08003584 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8003584:	2900      	cmp	r1, #0
 8003586:	d102      	bne.n	800358e <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003588:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	0008      	movs	r0, r1
      status = HAL_ERROR;
      break;
  }

  return status;
}
 800358c:	4770      	bx	lr
      status = HAL_ERROR;
 800358e:	2001      	movs	r0, #1
 8003590:	e7fc      	b.n	800358c <HAL_EXTI_RegisterCallback+0x8>

08003592 <HAL_EXTI_GetHandle>:
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
  if (hexti == NULL)
 8003594:	2800      	cmp	r0, #0
 8003596:	d001      	beq.n	800359c <HAL_EXTI_GetHandle+0xa>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
    hexti->Line = ExtiLine;
 800359a:	6001      	str	r1, [r0, #0]
  }
}
 800359c:	0018      	movs	r0, r3
 800359e:	4770      	bx	lr

080035a0 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80035a0:	221f      	movs	r2, #31
 80035a2:	6803      	ldr	r3, [r0, #0]
{
 80035a4:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80035a6:	401a      	ands	r2, r3
 80035a8:	2301      	movs	r3, #1
 80035aa:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HAL_EXTI_IRQHandler+0x20>)
 80035ae:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 80035b0:	420b      	tst	r3, r1
 80035b2:	d004      	beq.n	80035be <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80035b4:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80035b6:	6843      	ldr	r3, [r0, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d000      	beq.n	80035be <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 80035bc:	4798      	blx	r3
    }
  }
}
 80035be:	bd10      	pop	{r4, pc}
 80035c0:	40010400 	.word	0x40010400

080035c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035c6:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_GPIO_Init+0x160>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80035c8:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035ca:	1882      	adds	r2, r0, r2
 80035cc:	1e54      	subs	r4, r2, #1
 80035ce:	41a2      	sbcs	r2, r4
{
 80035d0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 80035d2:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 80035d4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035d6:	3205      	adds	r2, #5
 80035d8:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80035da:	9a04      	ldr	r2, [sp, #16]
 80035dc:	40da      	lsrs	r2, r3
 80035de:	d101      	bne.n	80035e4 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80035e0:	b007      	add	sp, #28
 80035e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80035e4:	2701      	movs	r7, #1
 80035e6:	003a      	movs	r2, r7
 80035e8:	409a      	lsls	r2, r3
 80035ea:	9203      	str	r2, [sp, #12]
 80035ec:	9c03      	ldr	r4, [sp, #12]
 80035ee:	9a04      	ldr	r2, [sp, #16]
 80035f0:	4022      	ands	r2, r4
 80035f2:	9201      	str	r2, [sp, #4]
    if (iocurrent)
 80035f4:	d100      	bne.n	80035f8 <HAL_GPIO_Init+0x34>
 80035f6:	e092      	b.n	800371e <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035f8:	684a      	ldr	r2, [r1, #4]
 80035fa:	005c      	lsls	r4, r3, #1
 80035fc:	4694      	mov	ip, r2
 80035fe:	2210      	movs	r2, #16
 8003600:	4666      	mov	r6, ip
 8003602:	4396      	bics	r6, r2
 8003604:	3a0d      	subs	r2, #13
 8003606:	40a2      	lsls	r2, r4
 8003608:	43d2      	mvns	r2, r2
 800360a:	9202      	str	r2, [sp, #8]
 800360c:	1e72      	subs	r2, r6, #1
 800360e:	42ba      	cmp	r2, r7
 8003610:	d80f      	bhi.n	8003632 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8003612:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003614:	9a02      	ldr	r2, [sp, #8]
 8003616:	4015      	ands	r5, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003618:	68ca      	ldr	r2, [r1, #12]
 800361a:	40a2      	lsls	r2, r4
 800361c:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 800361e:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8003620:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003622:	9a03      	ldr	r2, [sp, #12]
 8003624:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003626:	4662      	mov	r2, ip
 8003628:	0912      	lsrs	r2, r2, #4
 800362a:	403a      	ands	r2, r7
 800362c:	409a      	lsls	r2, r3
 800362e:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8003630:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003632:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003634:	9a02      	ldr	r2, [sp, #8]
 8003636:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003638:	688a      	ldr	r2, [r1, #8]
 800363a:	40a2      	lsls	r2, r4
 800363c:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 800363e:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003640:	2e02      	cmp	r6, #2
 8003642:	d10d      	bne.n	8003660 <HAL_GPIO_Init+0x9c>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003644:	2507      	movs	r5, #7
 8003646:	270f      	movs	r7, #15
 8003648:	401d      	ands	r5, r3
 800364a:	00ad      	lsls	r5, r5, #2
 800364c:	40af      	lsls	r7, r5
        temp = GPIOx->AFR[position >> 3U];
 800364e:	08da      	lsrs	r2, r3, #3
 8003650:	0092      	lsls	r2, r2, #2
 8003652:	1882      	adds	r2, r0, r2
 8003654:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003656:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003658:	690f      	ldr	r7, [r1, #16]
 800365a:	40af      	lsls	r7, r5
 800365c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800365e:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8003660:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003662:	9a02      	ldr	r2, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003664:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003666:	402a      	ands	r2, r5
 8003668:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800366a:	4662      	mov	r2, ip
 800366c:	4032      	ands	r2, r6
 800366e:	40a2      	lsls	r2, r4
 8003670:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8003672:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003674:	4662      	mov	r2, ip
 8003676:	00d2      	lsls	r2, r2, #3
 8003678:	d551      	bpl.n	800371e <HAL_GPIO_Init+0x15a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2501      	movs	r5, #1
 800367c:	4c2a      	ldr	r4, [pc, #168]	; (8003728 <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800367e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003680:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003682:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003684:	001d      	movs	r5, r3
 8003686:	4035      	ands	r5, r6
 8003688:	00ad      	lsls	r5, r5, #2
 800368a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368c:	6362      	str	r2, [r4, #52]	; 0x34
 800368e:	4a27      	ldr	r2, [pc, #156]	; (800372c <HAL_GPIO_Init+0x168>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8003690:	089c      	lsrs	r4, r3, #2
 8003692:	00a4      	lsls	r4, r4, #2
 8003694:	18a4      	adds	r4, r4, r2
 8003696:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003698:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800369a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800369c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800369e:	05ff      	lsls	r7, r7, #23
 80036a0:	2200      	movs	r2, #0
 80036a2:	42b8      	cmp	r0, r7
 80036a4:	d010      	beq.n	80036c8 <HAL_GPIO_Init+0x104>
 80036a6:	4f22      	ldr	r7, [pc, #136]	; (8003730 <HAL_GPIO_Init+0x16c>)
 80036a8:	3201      	adds	r2, #1
 80036aa:	42b8      	cmp	r0, r7
 80036ac:	d00c      	beq.n	80036c8 <HAL_GPIO_Init+0x104>
 80036ae:	4f21      	ldr	r7, [pc, #132]	; (8003734 <HAL_GPIO_Init+0x170>)
 80036b0:	3201      	adds	r2, #1
 80036b2:	42b8      	cmp	r0, r7
 80036b4:	d008      	beq.n	80036c8 <HAL_GPIO_Init+0x104>
 80036b6:	4f20      	ldr	r7, [pc, #128]	; (8003738 <HAL_GPIO_Init+0x174>)
 80036b8:	0032      	movs	r2, r6
 80036ba:	42b8      	cmp	r0, r7
 80036bc:	d004      	beq.n	80036c8 <HAL_GPIO_Init+0x104>
 80036be:	4e1f      	ldr	r6, [pc, #124]	; (800373c <HAL_GPIO_Init+0x178>)
 80036c0:	3201      	adds	r2, #1
 80036c2:	42b0      	cmp	r0, r6
 80036c4:	d000      	beq.n	80036c8 <HAL_GPIO_Init+0x104>
 80036c6:	9a05      	ldr	r2, [sp, #20]
 80036c8:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ca:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80036cc:	9d02      	ldr	r5, [sp, #8]
 80036ce:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80036d2:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 80036d4:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 80036d6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80036d8:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 80036da:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80036dc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036de:	03ff      	lsls	r7, r7, #15
 80036e0:	d401      	bmi.n	80036e6 <HAL_GPIO_Init+0x122>
        temp &= ~((uint32_t)iocurrent);
 80036e2:	0035      	movs	r5, r6
 80036e4:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036e6:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80036e8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80036ea:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80036ec:	9d01      	ldr	r5, [sp, #4]
 80036ee:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036f0:	03bf      	lsls	r7, r7, #14
 80036f2:	d401      	bmi.n	80036f8 <HAL_GPIO_Init+0x134>
        temp &= ~((uint32_t)iocurrent);
 80036f4:	0035      	movs	r5, r6
 80036f6:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036f8:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80036fa:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80036fc:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80036fe:	9d01      	ldr	r5, [sp, #4]
 8003700:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003702:	02ff      	lsls	r7, r7, #11
 8003704:	d401      	bmi.n	800370a <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 8003706:	0035      	movs	r5, r6
 8003708:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800370a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800370c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800370e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003710:	9e01      	ldr	r6, [sp, #4]
 8003712:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003714:	02bf      	lsls	r7, r7, #10
 8003716:	d401      	bmi.n	800371c <HAL_GPIO_Init+0x158>
        temp &= ~((uint32_t)iocurrent);
 8003718:	4025      	ands	r5, r4
 800371a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800371c:	60d6      	str	r6, [r2, #12]
    position++;
 800371e:	3301      	adds	r3, #1
 8003720:	e75b      	b.n	80035da <HAL_GPIO_Init+0x16>
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	afffe400 	.word	0xafffe400
 8003728:	40021000 	.word	0x40021000
 800372c:	40010000 	.word	0x40010000
 8003730:	50000400 	.word	0x50000400
 8003734:	50000800 	.word	0x50000800
 8003738:	50000c00 	.word	0x50000c00
 800373c:	50001000 	.word	0x50001000
 8003740:	40010400 	.word	0x40010400

08003744 <HAL_GPIO_DeInit>:
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003744:	4a38      	ldr	r2, [pc, #224]	; (8003828 <HAL_GPIO_DeInit+0xe4>)
{
 8003746:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003748:	1882      	adds	r2, r0, r2
 800374a:	1e54      	subs	r4, r2, #1
 800374c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800374e:	2300      	movs	r3, #0
{
 8003750:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003752:	3205      	adds	r2, #5
 8003754:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 8003756:	000a      	movs	r2, r1
 8003758:	40da      	lsrs	r2, r3
 800375a:	d101      	bne.n	8003760 <HAL_GPIO_DeInit+0x1c>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 800375c:	b007      	add	sp, #28
 800375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8003760:	2701      	movs	r7, #1
 8003762:	003a      	movs	r2, r7
 8003764:	409a      	lsls	r2, r3
 8003766:	9201      	str	r2, [sp, #4]
 8003768:	400a      	ands	r2, r1
 800376a:	9203      	str	r2, [sp, #12]
    if (iocurrent)
 800376c:	d059      	beq.n	8003822 <HAL_GPIO_DeInit+0xde>
 800376e:	4a2f      	ldr	r2, [pc, #188]	; (800382c <HAL_GPIO_DeInit+0xe8>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003770:	089c      	lsrs	r4, r3, #2
 8003772:	00a4      	lsls	r4, r4, #2
 8003774:	18a4      	adds	r4, r4, r2
 8003776:	68a2      	ldr	r2, [r4, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003778:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 800377a:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800377c:	2203      	movs	r2, #3
 800377e:	4015      	ands	r5, r2
 8003780:	00ad      	lsls	r5, r5, #2
 8003782:	320c      	adds	r2, #12
 8003784:	40aa      	lsls	r2, r5
 8003786:	9202      	str	r2, [sp, #8]
 8003788:	4032      	ands	r2, r6
 800378a:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800378c:	22a0      	movs	r2, #160	; 0xa0
 800378e:	05d2      	lsls	r2, r2, #23
 8003790:	4694      	mov	ip, r2
 8003792:	2200      	movs	r2, #0
 8003794:	4560      	cmp	r0, ip
 8003796:	d011      	beq.n	80037bc <HAL_GPIO_DeInit+0x78>
 8003798:	4a25      	ldr	r2, [pc, #148]	; (8003830 <HAL_GPIO_DeInit+0xec>)
 800379a:	4694      	mov	ip, r2
 800379c:	003a      	movs	r2, r7
 800379e:	4560      	cmp	r0, ip
 80037a0:	d00c      	beq.n	80037bc <HAL_GPIO_DeInit+0x78>
 80037a2:	4f24      	ldr	r7, [pc, #144]	; (8003834 <HAL_GPIO_DeInit+0xf0>)
 80037a4:	1892      	adds	r2, r2, r2
 80037a6:	42b8      	cmp	r0, r7
 80037a8:	d008      	beq.n	80037bc <HAL_GPIO_DeInit+0x78>
 80037aa:	4f23      	ldr	r7, [pc, #140]	; (8003838 <HAL_GPIO_DeInit+0xf4>)
 80037ac:	3201      	adds	r2, #1
 80037ae:	42b8      	cmp	r0, r7
 80037b0:	d004      	beq.n	80037bc <HAL_GPIO_DeInit+0x78>
 80037b2:	4e22      	ldr	r6, [pc, #136]	; (800383c <HAL_GPIO_DeInit+0xf8>)
 80037b4:	3201      	adds	r2, #1
 80037b6:	42b0      	cmp	r0, r6
 80037b8:	d000      	beq.n	80037bc <HAL_GPIO_DeInit+0x78>
 80037ba:	9a05      	ldr	r2, [sp, #20]
 80037bc:	40aa      	lsls	r2, r5
 80037be:	9d04      	ldr	r5, [sp, #16]
 80037c0:	42aa      	cmp	r2, r5
 80037c2:	d112      	bne.n	80037ea <HAL_GPIO_DeInit+0xa6>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80037c4:	9e03      	ldr	r6, [sp, #12]
 80037c6:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <HAL_GPIO_DeInit+0xfc>)
 80037c8:	43f6      	mvns	r6, r6
 80037ca:	6815      	ldr	r5, [r2, #0]
 80037cc:	4035      	ands	r5, r6
 80037ce:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80037d0:	6855      	ldr	r5, [r2, #4]
 80037d2:	4035      	ands	r5, r6
 80037d4:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80037d6:	6895      	ldr	r5, [r2, #8]
 80037d8:	4035      	ands	r5, r6
 80037da:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80037dc:	68d5      	ldr	r5, [r2, #12]
 80037de:	402e      	ands	r6, r5
 80037e0:	60d6      	str	r6, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037e2:	68a2      	ldr	r2, [r4, #8]
 80037e4:	9d02      	ldr	r5, [sp, #8]
 80037e6:	43aa      	bics	r2, r5
 80037e8:	60a2      	str	r2, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80037ea:	2203      	movs	r2, #3
 80037ec:	005d      	lsls	r5, r3, #1
 80037ee:	40aa      	lsls	r2, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80037f0:	2507      	movs	r5, #7
 80037f2:	270f      	movs	r7, #15
 80037f4:	401d      	ands	r5, r3
 80037f6:	00ad      	lsls	r5, r5, #2
 80037f8:	40af      	lsls	r7, r5
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037fa:	43d5      	mvns	r5, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80037fc:	6804      	ldr	r4, [r0, #0]
 80037fe:	4314      	orrs	r4, r2
 8003800:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003802:	08dc      	lsrs	r4, r3, #3
 8003804:	00a4      	lsls	r4, r4, #2
 8003806:	1904      	adds	r4, r0, r4
 8003808:	6a26      	ldr	r6, [r4, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800380a:	9a01      	ldr	r2, [sp, #4]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800380c:	43be      	bics	r6, r7
 800380e:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003810:	68c4      	ldr	r4, [r0, #12]
 8003812:	402c      	ands	r4, r5
 8003814:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003816:	6844      	ldr	r4, [r0, #4]
 8003818:	4394      	bics	r4, r2
 800381a:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800381c:	6882      	ldr	r2, [r0, #8]
 800381e:	402a      	ands	r2, r5
 8003820:	6082      	str	r2, [r0, #8]
    position++;
 8003822:	3301      	adds	r3, #1
 8003824:	e797      	b.n	8003756 <HAL_GPIO_DeInit+0x12>
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	afffe400 	.word	0xafffe400
 800382c:	40010000 	.word	0x40010000
 8003830:	50000400 	.word	0x50000400
 8003834:	50000800 	.word	0x50000800
 8003838:	50000c00 	.word	0x50000c00
 800383c:	50001000 	.word	0x50001000
 8003840:	40010400 	.word	0x40010400

08003844 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003844:	6900      	ldr	r0, [r0, #16]
 8003846:	4008      	ands	r0, r1
 8003848:	1e41      	subs	r1, r0, #1
 800384a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800384c:	b2c0      	uxtb	r0, r0
}
 800384e:	4770      	bx	lr

08003850 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003850:	2a00      	cmp	r2, #0
 8003852:	d001      	beq.n	8003858 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003854:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003856:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003858:	6281      	str	r1, [r0, #40]	; 0x28
}
 800385a:	e7fc      	b.n	8003856 <HAL_GPIO_WritePin+0x6>

0800385c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800385c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800385e:	0013      	movs	r3, r2
 8003860:	400b      	ands	r3, r1
 8003862:	041b      	lsls	r3, r3, #16
 8003864:	4391      	bics	r1, r2
 8003866:	4319      	orrs	r1, r3
 8003868:	6181      	str	r1, [r0, #24]
}
 800386a:	4770      	bx	lr

0800386c <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 800386c:	2110      	movs	r1, #16
 800386e:	4a02      	ldr	r2, [pc, #8]	; (8003878 <HAL_PWR_DisablePVD+0xc>)
 8003870:	6813      	ldr	r3, [r2, #0]
 8003872:	438b      	bics	r3, r1
 8003874:	6013      	str	r3, [r2, #0]
}
 8003876:	4770      	bx	lr
 8003878:	40007000 	.word	0x40007000

0800387c <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800387c:	2280      	movs	r2, #128	; 0x80
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_PWR_EnterSLEEPMode+0x5c>)
{
 8003880:	b570      	push	{r4, r5, r6, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003882:	681d      	ldr	r5, [r3, #0]
 8003884:	0092      	lsls	r2, r2, #2
 8003886:	4015      	ands	r5, r2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003888:	4a14      	ldr	r2, [pc, #80]	; (80038dc <HAL_PWR_EnterSLEEPMode+0x60>)
 800388a:	6a14      	ldr	r4, [r2, #32]
 800388c:	2201      	movs	r2, #1
 800388e:	4014      	ands	r4, r2
  if((ulpbit != 0) && (vrefinbit != 0))
 8003890:	2d00      	cmp	r5, #0
 8003892:	d005      	beq.n	80038a0 <HAL_PWR_EnterSLEEPMode+0x24>
 8003894:	2c00      	cmp	r4, #0
 8003896:	d003      	beq.n	80038a0 <HAL_PWR_EnterSLEEPMode+0x24>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4e11      	ldr	r6, [pc, #68]	; (80038e0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800389c:	4032      	ands	r2, r6
 800389e:	601a      	str	r2, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80038a0:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 80038a2:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80038a4:	43b2      	bics	r2, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80038a6:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 80038a8:	6018      	str	r0, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80038aa:	480e      	ldr	r0, [pc, #56]	; (80038e4 <HAL_PWR_EnterSLEEPMode+0x68>)
 80038ac:	3601      	adds	r6, #1
 80038ae:	6902      	ldr	r2, [r0, #16]
 80038b0:	43b2      	bics	r2, r6
 80038b2:	6102      	str	r2, [r0, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80038b4:	2901      	cmp	r1, #1
 80038b6:	d10b      	bne.n	80038d0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80038b8:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 80038ba:	2d00      	cmp	r5, #0
 80038bc:	d006      	beq.n	80038cc <HAL_PWR_EnterSLEEPMode+0x50>
 80038be:	2c00      	cmp	r4, #0
 80038c0:	d004      	beq.n	80038cc <HAL_PWR_EnterSLEEPMode+0x50>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80038cc:	46c0      	nop			; (mov r8, r8)

}
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
    __SEV();
 80038d0:	bf40      	sev
    __WFE();
 80038d2:	bf20      	wfe
    __WFE();
 80038d4:	bf20      	wfe
 80038d6:	e7f0      	b.n	80038ba <HAL_PWR_EnterSLEEPMode+0x3e>
 80038d8:	40007000 	.word	0x40007000
 80038dc:	40010000 	.word	0x40010000
 80038e0:	fffffdff 	.word	0xfffffdff
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	4b18      	ldr	r3, [pc, #96]	; (800394c <HAL_PWR_EnterSTOPMode+0x64>)
{
 80038ec:	b570      	push	{r4, r5, r6, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80038ee:	681d      	ldr	r5, [r3, #0]
 80038f0:	0092      	lsls	r2, r2, #2
 80038f2:	4015      	ands	r5, r2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80038f4:	4a16      	ldr	r2, [pc, #88]	; (8003950 <HAL_PWR_EnterSTOPMode+0x68>)
 80038f6:	6a14      	ldr	r4, [r2, #32]
 80038f8:	2201      	movs	r2, #1
 80038fa:	4014      	ands	r4, r2
  if((ulpbit != 0) && (vrefinbit != 0))
 80038fc:	2d00      	cmp	r5, #0
 80038fe:	d005      	beq.n	800390c <HAL_PWR_EnterSTOPMode+0x24>
 8003900:	2c00      	cmp	r4, #0
 8003902:	d003      	beq.n	800390c <HAL_PWR_EnterSTOPMode+0x24>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4e13      	ldr	r6, [pc, #76]	; (8003954 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003908:	4032      	ands	r2, r6
 800390a:	601a      	str	r2, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800390c:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 800390e:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003910:	43b2      	bics	r2, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003912:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 8003914:	6018      	str	r0, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003916:	2004      	movs	r0, #4
 8003918:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <HAL_PWR_EnterSTOPMode+0x70>)
 800391a:	6916      	ldr	r6, [r2, #16]
 800391c:	4330      	orrs	r0, r6
 800391e:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003920:	2901      	cmp	r1, #1
 8003922:	d10e      	bne.n	8003942 <HAL_PWR_EnterSTOPMode+0x5a>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003924:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003926:	2004      	movs	r0, #4
 8003928:	6911      	ldr	r1, [r2, #16]
 800392a:	4381      	bics	r1, r0
 800392c:	6111      	str	r1, [r2, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800392e:	2d00      	cmp	r5, #0
 8003930:	d006      	beq.n	8003940 <HAL_PWR_EnterSTOPMode+0x58>
 8003932:	2c00      	cmp	r4, #0
 8003934:	d004      	beq.n	8003940 <HAL_PWR_EnterSTOPMode+0x58>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	0092      	lsls	r2, r2, #2
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
  }
}
 8003940:	bd70      	pop	{r4, r5, r6, pc}
    __SEV();
 8003942:	bf40      	sev
    __WFE();
 8003944:	bf20      	wfe
    __WFE();
 8003946:	bf20      	wfe
 8003948:	e7ed      	b.n	8003926 <HAL_PWR_EnterSTOPMode+0x3e>
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	40007000 	.word	0x40007000
 8003950:	40010000 	.word	0x40010000
 8003954:	fffffdff 	.word	0xfffffdff
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	4a03      	ldr	r2, [pc, #12]	; (800396c <HAL_PWREx_EnableFastWakeUp+0x10>)
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	6811      	ldr	r1, [r2, #0]
 8003964:	430b      	orrs	r3, r1
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	4770      	bx	lr
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	40007000 	.word	0x40007000

08003970 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	4a03      	ldr	r2, [pc, #12]	; (8003980 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	6811      	ldr	r1, [r2, #0]
 8003978:	430b      	orrs	r3, r1
 800397a:	6013      	str	r3, [r2, #0]
}
 800397c:	4770      	bx	lr
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	40007000 	.word	0x40007000

08003984 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003984:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003986:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8003988:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800398a:	68d4      	ldr	r4, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800398c:	4023      	ands	r3, r4
 800398e:	2b08      	cmp	r3, #8
 8003990:	d034      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x78>
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d00c      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x2c>
 8003996:	2b04      	cmp	r3, #4
 8003998:	d128      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800399a:	6810      	ldr	r0, [r2, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80039a0:	4243      	negs	r3, r0
 80039a2:	4158      	adcs	r0, r3
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x80>)
 80039a6:	4240      	negs	r0, r0
 80039a8:	4018      	ands	r0, r3
 80039aa:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x84>)
 80039ac:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039b0:	02a3      	lsls	r3, r4, #10
 80039b2:	4916      	ldr	r1, [pc, #88]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x88>)
 80039b4:	0f1b      	lsrs	r3, r3, #28
 80039b6:	5cc8      	ldrb	r0, [r1, r3]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	68d5      	ldr	r5, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039bc:	0224      	lsls	r4, r4, #8
 80039be:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c0:	025b      	lsls	r3, r3, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039c2:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c4:	401d      	ands	r5, r3
 80039c6:	d009      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x8c>)
 80039ca:	2300      	movs	r3, #0
 80039cc:	2100      	movs	r1, #0
 80039ce:	f7fc fd57 	bl	8000480 <__aeabi_lmul>
 80039d2:	0022      	movs	r2, r4
 80039d4:	2300      	movs	r3, #0
 80039d6:	f7fc fd33 	bl	8000440 <__aeabi_uldivmod>
 80039da:	e7e8      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039dc:	2310      	movs	r3, #16
 80039de:	6816      	ldr	r6, [r2, #0]
 80039e0:	401e      	ands	r6, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80039e4:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x84>)
 80039e6:	e7f0      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039e8:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x90>)
 80039ea:	e7ee      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039ec:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80039ee:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039f0:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039f6:	3301      	adds	r3, #1
 80039f8:	4098      	lsls	r0, r3
 80039fa:	e7d8      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 80039fc:	4804      	ldr	r0, [pc, #16]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x8c>)
 80039fe:	e7d6      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x2a>
 8003a00:	40021000 	.word	0x40021000
 8003a04:	00b71b00 	.word	0x00b71b00
 8003a08:	003d0900 	.word	0x003d0900
 8003a0c:	0800799c 	.word	0x0800799c
 8003a10:	007a1200 	.word	0x007a1200
 8003a14:	00f42400 	.word	0x00f42400

08003a18 <HAL_RCC_OscConfig>:
{
 8003a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1a:	0005      	movs	r5, r0
 8003a1c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d102      	bne.n	8003a28 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003a22:	2001      	movs	r0, #1
}
 8003a24:	b007      	add	sp, #28
 8003a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a28:	230c      	movs	r3, #12
 8003a2a:	4cc3      	ldr	r4, [pc, #780]	; (8003d38 <HAL_RCC_OscConfig+0x320>)
 8003a2c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a2e:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a30:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	025b      	lsls	r3, r3, #9
 8003a36:	401a      	ands	r2, r3
 8003a38:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3a:	6802      	ldr	r2, [r0, #0]
 8003a3c:	07d2      	lsls	r2, r2, #31
 8003a3e:	d442      	bmi.n	8003ac6 <HAL_RCC_OscConfig+0xae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	079b      	lsls	r3, r3, #30
 8003a44:	d500      	bpl.n	8003a48 <HAL_RCC_OscConfig+0x30>
 8003a46:	e088      	b.n	8003b5a <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	06db      	lsls	r3, r3, #27
 8003a4c:	d529      	bpl.n	8003aa2 <HAL_RCC_OscConfig+0x8a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4e:	2e00      	cmp	r6, #0
 8003a50:	d000      	beq.n	8003a54 <HAL_RCC_OscConfig+0x3c>
 8003a52:	e0e3      	b.n	8003c1c <HAL_RCC_OscConfig+0x204>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	059b      	lsls	r3, r3, #22
 8003a58:	d502      	bpl.n	8003a60 <HAL_RCC_OscConfig+0x48>
 8003a5a:	69eb      	ldr	r3, [r5, #28]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0e0      	beq.n	8003a22 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a60:	6862      	ldr	r2, [r4, #4]
 8003a62:	49b6      	ldr	r1, [pc, #728]	; (8003d3c <HAL_RCC_OscConfig+0x324>)
 8003a64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a66:	400a      	ands	r2, r1
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6c:	6861      	ldr	r1, [r4, #4]
 8003a6e:	6a2a      	ldr	r2, [r5, #32]
 8003a70:	0209      	lsls	r1, r1, #8
 8003a72:	0a09      	lsrs	r1, r1, #8
 8003a74:	0612      	lsls	r2, r2, #24
 8003a76:	430a      	orrs	r2, r1
 8003a78:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	0b5b      	lsrs	r3, r3, #13
 8003a7e:	3301      	adds	r3, #1
 8003a80:	0212      	lsls	r2, r2, #8
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003a86:	68e1      	ldr	r1, [r4, #12]
 8003a88:	060a      	lsls	r2, r1, #24
 8003a8a:	49ad      	ldr	r1, [pc, #692]	; (8003d40 <HAL_RCC_OscConfig+0x328>)
 8003a8c:	0f12      	lsrs	r2, r2, #28
 8003a8e:	5c8a      	ldrb	r2, [r1, r2]
 8003a90:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a92:	4aac      	ldr	r2, [pc, #688]	; (8003d44 <HAL_RCC_OscConfig+0x32c>)
 8003a94:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003a96:	4bac      	ldr	r3, [pc, #688]	; (8003d48 <HAL_RCC_OscConfig+0x330>)
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f7fe ff13 	bl	80028c4 <HAL_InitTick>
        if(status != HAL_OK)
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d1c0      	bne.n	8003a24 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa2:	682b      	ldr	r3, [r5, #0]
 8003aa4:	071b      	lsls	r3, r3, #28
 8003aa6:	d500      	bpl.n	8003aaa <HAL_RCC_OscConfig+0x92>
 8003aa8:	e0ef      	b.n	8003c8a <HAL_RCC_OscConfig+0x272>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aaa:	682b      	ldr	r3, [r5, #0]
 8003aac:	075b      	lsls	r3, r3, #29
 8003aae:	d500      	bpl.n	8003ab2 <HAL_RCC_OscConfig+0x9a>
 8003ab0:	e111      	b.n	8003cd6 <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ab2:	682b      	ldr	r3, [r5, #0]
 8003ab4:	069b      	lsls	r3, r3, #26
 8003ab6:	d500      	bpl.n	8003aba <HAL_RCC_OscConfig+0xa2>
 8003ab8:	e198      	b.n	8003dec <HAL_RCC_OscConfig+0x3d4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d000      	beq.n	8003ac2 <HAL_RCC_OscConfig+0xaa>
 8003ac0:	e1c7      	b.n	8003e52 <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	e7ae      	b.n	8003a24 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac6:	2e08      	cmp	r6, #8
 8003ac8:	d004      	beq.n	8003ad4 <HAL_RCC_OscConfig+0xbc>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aca:	2e0c      	cmp	r6, #12
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCC_OscConfig+0xca>
 8003ace:	9a01      	ldr	r2, [sp, #4]
 8003ad0:	2a00      	cmp	r2, #0
 8003ad2:	d006      	beq.n	8003ae2 <HAL_RCC_OscConfig+0xca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	039b      	lsls	r3, r3, #14
 8003ad8:	d5b2      	bpl.n	8003a40 <HAL_RCC_OscConfig+0x28>
 8003ada:	686b      	ldr	r3, [r5, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1af      	bne.n	8003a40 <HAL_RCC_OscConfig+0x28>
 8003ae0:	e79f      	b.n	8003a22 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae2:	686a      	ldr	r2, [r5, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d111      	bne.n	8003b0c <HAL_RCC_OscConfig+0xf4>
 8003ae8:	6822      	ldr	r2, [r4, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003aee:	f7fe feeb 	bl	80028c8 <HAL_GetTick>
 8003af2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003af4:	2280      	movs	r2, #128	; 0x80
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	0292      	lsls	r2, r2, #10
 8003afa:	4213      	tst	r3, r2
 8003afc:	d1a0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afe:	f7fe fee3 	bl	80028c8 <HAL_GetTick>
 8003b02:	1bc0      	subs	r0, r0, r7
 8003b04:	2864      	cmp	r0, #100	; 0x64
 8003b06:	d9f5      	bls.n	8003af4 <HAL_RCC_OscConfig+0xdc>
            return HAL_TIMEOUT;
 8003b08:	2003      	movs	r0, #3
 8003b0a:	e78b      	b.n	8003a24 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0c:	21a0      	movs	r1, #160	; 0xa0
 8003b0e:	02c9      	lsls	r1, r1, #11
 8003b10:	428a      	cmp	r2, r1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_OscConfig+0x108>
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	6821      	ldr	r1, [r4, #0]
 8003b18:	02d2      	lsls	r2, r2, #11
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	6022      	str	r2, [r4, #0]
 8003b1e:	e7e3      	b.n	8003ae8 <HAL_RCC_OscConfig+0xd0>
 8003b20:	6821      	ldr	r1, [r4, #0]
 8003b22:	488a      	ldr	r0, [pc, #552]	; (8003d4c <HAL_RCC_OscConfig+0x334>)
 8003b24:	4001      	ands	r1, r0
 8003b26:	6021      	str	r1, [r4, #0]
 8003b28:	6821      	ldr	r1, [r4, #0]
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	9305      	str	r3, [sp, #20]
 8003b2e:	9b05      	ldr	r3, [sp, #20]
 8003b30:	4987      	ldr	r1, [pc, #540]	; (8003d50 <HAL_RCC_OscConfig+0x338>)
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	400b      	ands	r3, r1
 8003b36:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	d1d8      	bne.n	8003aee <HAL_RCC_OscConfig+0xd6>
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fec4 	bl	80028c8 <HAL_GetTick>
 8003b40:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	0292      	lsls	r2, r2, #10
 8003b48:	4213      	tst	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <HAL_RCC_OscConfig+0x136>
 8003b4c:	e778      	b.n	8003a40 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4e:	f7fe febb 	bl	80028c8 <HAL_GetTick>
 8003b52:	1bc0      	subs	r0, r0, r7
 8003b54:	2864      	cmp	r0, #100	; 0x64
 8003b56:	d9f4      	bls.n	8003b42 <HAL_RCC_OscConfig+0x12a>
 8003b58:	e7d6      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003b5a:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003b5c:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003b5e:	4213      	tst	r3, r2
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_OscConfig+0x152>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003b62:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003b64:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003b66:	4311      	orrs	r1, r2
 8003b68:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b6a:	2e04      	cmp	r6, #4
 8003b6c:	d004      	beq.n	8003b78 <HAL_RCC_OscConfig+0x160>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b6e:	2e0c      	cmp	r6, #12
 8003b70:	d126      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x1a8>
 8003b72:	9a01      	ldr	r2, [sp, #4]
 8003b74:	2a00      	cmp	r2, #0
 8003b76:	d123      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x1a8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b78:	6822      	ldr	r2, [r4, #0]
 8003b7a:	0752      	lsls	r2, r2, #29
 8003b7c:	d502      	bpl.n	8003b84 <HAL_RCC_OscConfig+0x16c>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d100      	bne.n	8003b84 <HAL_RCC_OscConfig+0x16c>
 8003b82:	e74e      	b.n	8003a22 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b84:	6861      	ldr	r1, [r4, #4]
 8003b86:	692a      	ldr	r2, [r5, #16]
 8003b88:	4872      	ldr	r0, [pc, #456]	; (8003d54 <HAL_RCC_OscConfig+0x33c>)
 8003b8a:	0212      	lsls	r2, r2, #8
 8003b8c:	4001      	ands	r1, r0
 8003b8e:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b90:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b92:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b94:	6822      	ldr	r2, [r4, #0]
 8003b96:	438a      	bics	r2, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b9c:	f7ff fef2 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003ba0:	68e3      	ldr	r3, [r4, #12]
 8003ba2:	4a67      	ldr	r2, [pc, #412]	; (8003d40 <HAL_RCC_OscConfig+0x328>)
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	0f1b      	lsrs	r3, r3, #28
 8003ba8:	5cd3      	ldrb	r3, [r2, r3]
 8003baa:	40d8      	lsrs	r0, r3
 8003bac:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_RCC_OscConfig+0x32c>)
 8003bae:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003bb0:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCC_OscConfig+0x330>)
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	f7fe fe86 	bl	80028c4 <HAL_InitTick>
      if(status != HAL_OK)
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d100      	bne.n	8003bbe <HAL_RCC_OscConfig+0x1a6>
 8003bbc:	e744      	b.n	8003a48 <HAL_RCC_OscConfig+0x30>
 8003bbe:	e731      	b.n	8003a24 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d019      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x1e0>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bc4:	2109      	movs	r1, #9
 8003bc6:	6822      	ldr	r2, [r4, #0]
 8003bc8:	438a      	bics	r2, r1
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003bce:	f7fe fe7b 	bl	80028c8 <HAL_GetTick>
 8003bd2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	4213      	tst	r3, r2
 8003bda:	d007      	beq.n	8003bec <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bdc:	6862      	ldr	r2, [r4, #4]
 8003bde:	692b      	ldr	r3, [r5, #16]
 8003be0:	495c      	ldr	r1, [pc, #368]	; (8003d54 <HAL_RCC_OscConfig+0x33c>)
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	400a      	ands	r2, r1
 8003be6:	4313      	orrs	r3, r2
 8003be8:	6063      	str	r3, [r4, #4]
 8003bea:	e72d      	b.n	8003a48 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe fe6c 	bl	80028c8 <HAL_GetTick>
 8003bf0:	1bc0      	subs	r0, r0, r7
 8003bf2:	2802      	cmp	r0, #2
 8003bf4:	d9ee      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x1bc>
 8003bf6:	e787      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI_DISABLE();
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	4393      	bics	r3, r2
 8003bfe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c00:	f7fe fe62 	bl	80028c8 <HAL_GetTick>
 8003c04:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c06:	2204      	movs	r2, #4
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	4213      	tst	r3, r2
 8003c0c:	d100      	bne.n	8003c10 <HAL_RCC_OscConfig+0x1f8>
 8003c0e:	e71b      	b.n	8003a48 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c10:	f7fe fe5a 	bl	80028c8 <HAL_GetTick>
 8003c14:	1bc0      	subs	r0, r0, r7
 8003c16:	2802      	cmp	r0, #2
 8003c18:	d9f5      	bls.n	8003c06 <HAL_RCC_OscConfig+0x1ee>
 8003c1a:	e775      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c1c:	69eb      	ldr	r3, [r5, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d020      	beq.n	8003c64 <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_MSI_ENABLE();
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	6822      	ldr	r2, [r4, #0]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fe4c 	bl	80028c8 <HAL_GetTick>
 8003c30:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	0092      	lsls	r2, r2, #2
 8003c38:	4213      	tst	r3, r2
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c3c:	6863      	ldr	r3, [r4, #4]
 8003c3e:	4a3f      	ldr	r2, [pc, #252]	; (8003d3c <HAL_RCC_OscConfig+0x324>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003c44:	4313      	orrs	r3, r2
 8003c46:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c48:	6862      	ldr	r2, [r4, #4]
 8003c4a:	6a2b      	ldr	r3, [r5, #32]
 8003c4c:	0212      	lsls	r2, r2, #8
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	0a12      	lsrs	r2, r2, #8
 8003c52:	4313      	orrs	r3, r2
 8003c54:	6063      	str	r3, [r4, #4]
 8003c56:	e724      	b.n	8003aa2 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c58:	f7fe fe36 	bl	80028c8 <HAL_GetTick>
 8003c5c:	1bc0      	subs	r0, r0, r7
 8003c5e:	2802      	cmp	r0, #2
 8003c60:	d9e7      	bls.n	8003c32 <HAL_RCC_OscConfig+0x21a>
 8003c62:	e751      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_MSI_DISABLE();
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	4a3c      	ldr	r2, [pc, #240]	; (8003d58 <HAL_RCC_OscConfig+0x340>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fe2c 	bl	80028c8 <HAL_GetTick>
 8003c70:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c72:	2280      	movs	r2, #128	; 0x80
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	4213      	tst	r3, r2
 8003c7a:	d100      	bne.n	8003c7e <HAL_RCC_OscConfig+0x266>
 8003c7c:	e711      	b.n	8003aa2 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c7e:	f7fe fe23 	bl	80028c8 <HAL_GetTick>
 8003c82:	1bc0      	subs	r0, r0, r7
 8003c84:	2802      	cmp	r0, #2
 8003c86:	d9f4      	bls.n	8003c72 <HAL_RCC_OscConfig+0x25a>
 8003c88:	e73e      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8a:	696a      	ldr	r2, [r5, #20]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	2a00      	cmp	r2, #0
 8003c90:	d010      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8003c92:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c94:	4313      	orrs	r3, r2
 8003c96:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003c98:	f7fe fe16 	bl	80028c8 <HAL_GetTick>
 8003c9c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003ca2:	4213      	tst	r3, r2
 8003ca4:	d000      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x290>
 8003ca6:	e700      	b.n	8003aaa <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7fe fe0e 	bl	80028c8 <HAL_GetTick>
 8003cac:	1bc0      	subs	r0, r0, r7
 8003cae:	2802      	cmp	r0, #2
 8003cb0:	d9f5      	bls.n	8003c9e <HAL_RCC_OscConfig+0x286>
 8003cb2:	e729      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
      __HAL_RCC_LSI_DISABLE();
 8003cb4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003cb6:	439a      	bics	r2, r3
 8003cb8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003cba:	f7fe fe05 	bl	80028c8 <HAL_GetTick>
 8003cbe:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003cc4:	4213      	tst	r3, r2
 8003cc6:	d100      	bne.n	8003cca <HAL_RCC_OscConfig+0x2b2>
 8003cc8:	e6ef      	b.n	8003aaa <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cca:	f7fe fdfd 	bl	80028c8 <HAL_GetTick>
 8003cce:	1bc0      	subs	r0, r0, r7
 8003cd0:	2802      	cmp	r0, #2
 8003cd2:	d9f5      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x2a8>
 8003cd4:	e718      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003cd8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003cdc:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003cde:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce0:	421a      	tst	r2, r3
 8003ce2:	d104      	bne.n	8003cee <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003cea:	2301      	movs	r3, #1
 8003cec:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	4f1a      	ldr	r7, [pc, #104]	; (8003d5c <HAL_RCC_OscConfig+0x344>)
 8003cf2:	0052      	lsls	r2, r2, #1
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4213      	tst	r3, r2
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCC_OscConfig+0x2f4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfa:	2280      	movs	r2, #128	; 0x80
 8003cfc:	68ab      	ldr	r3, [r5, #8]
 8003cfe:	0052      	lsls	r2, r2, #1
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d12d      	bne.n	8003d60 <HAL_RCC_OscConfig+0x348>
 8003d04:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003d06:	4313      	orrs	r3, r2
 8003d08:	6523      	str	r3, [r4, #80]	; 0x50
 8003d0a:	e04e      	b.n	8003daa <HAL_RCC_OscConfig+0x392>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	0052      	lsls	r2, r2, #1
 8003d12:	4313      	orrs	r3, r2
 8003d14:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003d16:	f7fe fdd7 	bl	80028c8 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8003d1e:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	9303      	str	r3, [sp, #12]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9a03      	ldr	r2, [sp, #12]
 8003d26:	4213      	tst	r3, r2
 8003d28:	d1e7      	bne.n	8003cfa <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2a:	f7fe fdcd 	bl	80028c8 <HAL_GetTick>
 8003d2e:	9b02      	ldr	r3, [sp, #8]
 8003d30:	1ac0      	subs	r0, r0, r3
 8003d32:	2864      	cmp	r0, #100	; 0x64
 8003d34:	d9f5      	bls.n	8003d22 <HAL_RCC_OscConfig+0x30a>
 8003d36:	e6e7      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	ffff1fff 	.word	0xffff1fff
 8003d40:	080079a5 	.word	0x080079a5
 8003d44:	20000018 	.word	0x20000018
 8003d48:	20000020 	.word	0x20000020
 8003d4c:	fffeffff 	.word	0xfffeffff
 8003d50:	fffbffff 	.word	0xfffbffff
 8003d54:	ffffe0ff 	.word	0xffffe0ff
 8003d58:	fffffeff 	.word	0xfffffeff
 8003d5c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d116      	bne.n	8003d92 <HAL_RCC_OscConfig+0x37a>
 8003d64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d66:	4a6c      	ldr	r2, [pc, #432]	; (8003f18 <HAL_RCC_OscConfig+0x500>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	6523      	str	r3, [r4, #80]	; 0x50
 8003d6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d6e:	4a6b      	ldr	r2, [pc, #428]	; (8003f1c <HAL_RCC_OscConfig+0x504>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d74:	f7fe fda8 	bl	80028c8 <HAL_GetTick>
 8003d78:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d7e:	0092      	lsls	r2, r2, #2
 8003d80:	4213      	tst	r3, r2
 8003d82:	d02a      	beq.n	8003dda <HAL_RCC_OscConfig+0x3c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d84:	f7fe fda0 	bl	80028c8 <HAL_GetTick>
 8003d88:	4b65      	ldr	r3, [pc, #404]	; (8003f20 <HAL_RCC_OscConfig+0x508>)
 8003d8a:	1bc0      	subs	r0, r0, r7
 8003d8c:	4298      	cmp	r0, r3
 8003d8e:	d9f4      	bls.n	8003d7a <HAL_RCC_OscConfig+0x362>
 8003d90:	e6ba      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d92:	21a0      	movs	r1, #160	; 0xa0
 8003d94:	00c9      	lsls	r1, r1, #3
 8003d96:	428b      	cmp	r3, r1
 8003d98:	d10b      	bne.n	8003db2 <HAL_RCC_OscConfig+0x39a>
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6523      	str	r3, [r4, #80]	; 0x50
 8003da4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003da6:	431a      	orrs	r2, r3
 8003da8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003daa:	f7fe fd8d 	bl	80028c8 <HAL_GetTick>
 8003dae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db0:	e00e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003db4:	4a58      	ldr	r2, [pc, #352]	; (8003f18 <HAL_RCC_OscConfig+0x500>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	6523      	str	r3, [r4, #80]	; 0x50
 8003dba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003dbc:	4a57      	ldr	r2, [pc, #348]	; (8003f1c <HAL_RCC_OscConfig+0x504>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	e7a2      	b.n	8003d08 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe fd81 	bl	80028c8 <HAL_GetTick>
 8003dc6:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <HAL_RCC_OscConfig+0x508>)
 8003dc8:	1bc0      	subs	r0, r0, r7
 8003dca:	4298      	cmp	r0, r3
 8003dcc:	d900      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x3b8>
 8003dce:	e69b      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003dd4:	0092      	lsls	r2, r2, #2
 8003dd6:	4213      	tst	r3, r2
 8003dd8:	d0f3      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x3aa>
    if(pwrclkchanged == SET)
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d000      	beq.n	8003de2 <HAL_RCC_OscConfig+0x3ca>
 8003de0:	e667      	b.n	8003ab2 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003de4:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_RCC_OscConfig+0x50c>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	63a3      	str	r3, [r4, #56]	; 0x38
 8003dea:	e662      	b.n	8003ab2 <HAL_RCC_OscConfig+0x9a>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dec:	69a9      	ldr	r1, [r5, #24]
 8003dee:	2301      	movs	r3, #1
 8003df0:	4a4d      	ldr	r2, [pc, #308]	; (8003f28 <HAL_RCC_OscConfig+0x510>)
 8003df2:	2900      	cmp	r1, #0
 8003df4:	d018      	beq.n	8003e28 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI48_ENABLE();
 8003df6:	68a1      	ldr	r1, [r4, #8]
 8003df8:	4319      	orrs	r1, r3
 8003dfa:	60a1      	str	r1, [r4, #8]
 8003dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6363      	str	r3, [r4, #52]	; 0x34
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	6a11      	ldr	r1, [r2, #32]
 8003e06:	019b      	lsls	r3, r3, #6
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fd5c 	bl	80028c8 <HAL_GetTick>
 8003e10:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e12:	2202      	movs	r2, #2
 8003e14:	68a3      	ldr	r3, [r4, #8]
 8003e16:	4213      	tst	r3, r2
 8003e18:	d000      	beq.n	8003e1c <HAL_RCC_OscConfig+0x404>
 8003e1a:	e64e      	b.n	8003aba <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1c:	f7fe fd54 	bl	80028c8 <HAL_GetTick>
 8003e20:	1bc0      	subs	r0, r0, r7
 8003e22:	2802      	cmp	r0, #2
 8003e24:	d9f5      	bls.n	8003e12 <HAL_RCC_OscConfig+0x3fa>
 8003e26:	e66f      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI48_DISABLE();
 8003e28:	68a1      	ldr	r1, [r4, #8]
 8003e2a:	4399      	bics	r1, r3
 8003e2c:	60a1      	str	r1, [r4, #8]
 8003e2e:	6a13      	ldr	r3, [r2, #32]
 8003e30:	493e      	ldr	r1, [pc, #248]	; (8003f2c <HAL_RCC_OscConfig+0x514>)
 8003e32:	400b      	ands	r3, r1
 8003e34:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003e36:	f7fe fd47 	bl	80028c8 <HAL_GetTick>
 8003e3a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	68a3      	ldr	r3, [r4, #8]
 8003e40:	4213      	tst	r3, r2
 8003e42:	d100      	bne.n	8003e46 <HAL_RCC_OscConfig+0x42e>
 8003e44:	e639      	b.n	8003aba <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e46:	f7fe fd3f 	bl	80028c8 <HAL_GetTick>
 8003e4a:	1bc0      	subs	r0, r0, r7
 8003e4c:	2802      	cmp	r0, #2
 8003e4e:	d9f5      	bls.n	8003e3c <HAL_RCC_OscConfig+0x424>
 8003e50:	e65a      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e52:	2e0c      	cmp	r6, #12
 8003e54:	d043      	beq.n	8003ede <HAL_RCC_OscConfig+0x4c6>
 8003e56:	4a36      	ldr	r2, [pc, #216]	; (8003f30 <HAL_RCC_OscConfig+0x518>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d12e      	bne.n	8003eba <HAL_RCC_OscConfig+0x4a2>
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e5e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003e60:	4013      	ands	r3, r2
 8003e62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e64:	f7fe fd30 	bl	80028c8 <HAL_GetTick>
 8003e68:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e6a:	04b6      	lsls	r6, r6, #18
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	4233      	tst	r3, r6
 8003e70:	d11d      	bne.n	8003eae <HAL_RCC_OscConfig+0x496>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e72:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003e74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003e76:	68e2      	ldr	r2, [r4, #12]
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	492e      	ldr	r1, [pc, #184]	; (8003f34 <HAL_RCC_OscConfig+0x51c>)
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e82:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	6822      	ldr	r2, [r4, #0]
 8003e8c:	045b      	lsls	r3, r3, #17
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e92:	f7fe fd19 	bl	80028c8 <HAL_GetTick>
 8003e96:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e98:	04ad      	lsls	r5, r5, #18
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	422b      	tst	r3, r5
 8003e9e:	d000      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x48a>
 8003ea0:	e60f      	b.n	8003ac2 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fe fd11 	bl	80028c8 <HAL_GetTick>
 8003ea6:	1b80      	subs	r0, r0, r6
 8003ea8:	2802      	cmp	r0, #2
 8003eaa:	d9f6      	bls.n	8003e9a <HAL_RCC_OscConfig+0x482>
 8003eac:	e62c      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fe fd0b 	bl	80028c8 <HAL_GetTick>
 8003eb2:	1bc0      	subs	r0, r0, r7
 8003eb4:	2802      	cmp	r0, #2
 8003eb6:	d9d9      	bls.n	8003e6c <HAL_RCC_OscConfig+0x454>
 8003eb8:	e626      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_PLL_DISABLE();
 8003eba:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ebc:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ec2:	f7fe fd01 	bl	80028c8 <HAL_GetTick>
 8003ec6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ec8:	04ad      	lsls	r5, r5, #18
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	422b      	tst	r3, r5
 8003ece:	d100      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x4ba>
 8003ed0:	e5f7      	b.n	8003ac2 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fe fcf9 	bl	80028c8 <HAL_GetTick>
 8003ed6:	1b80      	subs	r0, r0, r6
 8003ed8:	2802      	cmp	r0, #2
 8003eda:	d9f6      	bls.n	8003eca <HAL_RCC_OscConfig+0x4b2>
 8003edc:	e614      	b.n	8003b08 <HAL_RCC_OscConfig+0xf0>
        return HAL_ERROR;
 8003ede:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d100      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x4ce>
 8003ee4:	e59e      	b.n	8003a24 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003ee8:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003eec:	0252      	lsls	r2, r2, #9
 8003eee:	401a      	ands	r2, r3
        return HAL_ERROR;
 8003ef0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	428a      	cmp	r2, r1
 8003ef4:	d000      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4e0>
 8003ef6:	e595      	b.n	8003a24 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ef8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003efc:	0392      	lsls	r2, r2, #14
 8003efe:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f00:	428a      	cmp	r2, r1
 8003f02:	d000      	beq.n	8003f06 <HAL_RCC_OscConfig+0x4ee>
 8003f04:	e58e      	b.n	8003a24 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f06:	20c0      	movs	r0, #192	; 0xc0
 8003f08:	0400      	lsls	r0, r0, #16
 8003f0a:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f0c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003f0e:	1a18      	subs	r0, r3, r0
 8003f10:	1e43      	subs	r3, r0, #1
 8003f12:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003f14:	b2c0      	uxtb	r0, r0
 8003f16:	e585      	b.n	8003a24 <HAL_RCC_OscConfig+0xc>
 8003f18:	fffffeff 	.word	0xfffffeff
 8003f1c:	fffffbff 	.word	0xfffffbff
 8003f20:	00001388 	.word	0x00001388
 8003f24:	efffffff 	.word	0xefffffff
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	ffffdfff 	.word	0xffffdfff
 8003f30:	feffffff 	.word	0xfeffffff
 8003f34:	ff02ffff 	.word	0xff02ffff

08003f38 <HAL_RCC_ClockConfig>:
{
 8003f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f3a:	1e06      	subs	r6, r0, #0
 8003f3c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8003f40:	2001      	movs	r0, #1
}
 8003f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	2501      	movs	r5, #1
 8003f46:	4c5b      	ldr	r4, [pc, #364]	; (80040b4 <HAL_RCC_ClockConfig+0x17c>)
 8003f48:	9a01      	ldr	r2, [sp, #4]
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	402b      	ands	r3, r5
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d331      	bcc.n	8003fb6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f52:	6832      	ldr	r2, [r6, #0]
 8003f54:	0793      	lsls	r3, r2, #30
 8003f56:	d443      	bmi.n	8003fe0 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f58:	07d3      	lsls	r3, r2, #31
 8003f5a:	d449      	bmi.n	8003ff0 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5c:	2501      	movs	r5, #1
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	9a01      	ldr	r2, [sp, #4]
 8003f62:	402b      	ands	r3, r5
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d909      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	43ab      	bics	r3, r5
 8003f6c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003f6e:	f7fe fcab 	bl	80028c8 <HAL_GetTick>
 8003f72:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	422b      	tst	r3, r5
 8003f78:	d000      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x44>
 8003f7a:	e08c      	b.n	8004096 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	6832      	ldr	r2, [r6, #0]
 8003f7e:	4c4e      	ldr	r4, [pc, #312]	; (80040b8 <HAL_RCC_ClockConfig+0x180>)
 8003f80:	0753      	lsls	r3, r2, #29
 8003f82:	d500      	bpl.n	8003f86 <HAL_RCC_ClockConfig+0x4e>
 8003f84:	e08f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f86:	0713      	lsls	r3, r2, #28
 8003f88:	d506      	bpl.n	8003f98 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f8a:	68e2      	ldr	r2, [r4, #12]
 8003f8c:	6933      	ldr	r3, [r6, #16]
 8003f8e:	494b      	ldr	r1, [pc, #300]	; (80040bc <HAL_RCC_ClockConfig+0x184>)
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	400a      	ands	r2, r1
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f98:	f7ff fcf4 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003f9c:	68e3      	ldr	r3, [r4, #12]
 8003f9e:	4a48      	ldr	r2, [pc, #288]	; (80040c0 <HAL_RCC_ClockConfig+0x188>)
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	0f1b      	lsrs	r3, r3, #28
 8003fa4:	5cd3      	ldrb	r3, [r2, r3]
 8003fa6:	40d8      	lsrs	r0, r3
 8003fa8:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <HAL_RCC_ClockConfig+0x18c>)
 8003faa:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003fac:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <HAL_RCC_ClockConfig+0x190>)
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	f7fe fc88 	bl	80028c4 <HAL_InitTick>
 8003fb4:	e7c5      	b.n	8003f42 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	9a01      	ldr	r2, [sp, #4]
 8003fba:	43ab      	bics	r3, r5
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003fc0:	f7fe fc82 	bl	80028c8 <HAL_GetTick>
 8003fc4:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	9a01      	ldr	r2, [sp, #4]
 8003fca:	402b      	ands	r3, r5
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d0c0      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd0:	f7fe fc7a 	bl	80028c8 <HAL_GetTick>
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	; (80040cc <HAL_RCC_ClockConfig+0x194>)
 8003fd6:	1bc0      	subs	r0, r0, r7
 8003fd8:	4298      	cmp	r0, r3
 8003fda:	d9f4      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8003fdc:	2003      	movs	r0, #3
 8003fde:	e7b0      	b.n	8003f42 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	20f0      	movs	r0, #240	; 0xf0
 8003fe2:	4935      	ldr	r1, [pc, #212]	; (80040b8 <HAL_RCC_ClockConfig+0x180>)
 8003fe4:	68cb      	ldr	r3, [r1, #12]
 8003fe6:	4383      	bics	r3, r0
 8003fe8:	68b0      	ldr	r0, [r6, #8]
 8003fea:	4303      	orrs	r3, r0
 8003fec:	60cb      	str	r3, [r1, #12]
 8003fee:	e7b3      	b.n	8003f58 <HAL_RCC_ClockConfig+0x20>
 8003ff0:	4d31      	ldr	r5, [pc, #196]	; (80040b8 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff2:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ff4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff6:	2a02      	cmp	r2, #2
 8003ff8:	d118      	bne.n	800402c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ffa:	039b      	lsls	r3, r3, #14
 8003ffc:	d5a0      	bpl.n	8003f40 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffe:	2103      	movs	r1, #3
 8004000:	68eb      	ldr	r3, [r5, #12]
 8004002:	438b      	bics	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004008:	f7fe fc5e 	bl	80028c8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800400e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004010:	2b02      	cmp	r3, #2
 8004012:	d118      	bne.n	8004046 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004014:	220c      	movs	r2, #12
 8004016:	68eb      	ldr	r3, [r5, #12]
 8004018:	4013      	ands	r3, r2
 800401a:	2b08      	cmp	r3, #8
 800401c:	d09e      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401e:	f7fe fc53 	bl	80028c8 <HAL_GetTick>
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCC_ClockConfig+0x194>)
 8004024:	1bc0      	subs	r0, r0, r7
 8004026:	4298      	cmp	r0, r3
 8004028:	d9f4      	bls.n	8004014 <HAL_RCC_ClockConfig+0xdc>
 800402a:	e7d7      	b.n	8003fdc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402c:	2a03      	cmp	r2, #3
 800402e:	d102      	bne.n	8004036 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	d4e4      	bmi.n	8003ffe <HAL_RCC_ClockConfig+0xc6>
 8004034:	e784      	b.n	8003f40 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004036:	2a01      	cmp	r2, #1
 8004038:	d102      	bne.n	8004040 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800403a:	075b      	lsls	r3, r3, #29
 800403c:	d4df      	bmi.n	8003ffe <HAL_RCC_ClockConfig+0xc6>
 800403e:	e77f      	b.n	8003f40 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004040:	059b      	lsls	r3, r3, #22
 8004042:	d4dc      	bmi.n	8003ffe <HAL_RCC_ClockConfig+0xc6>
 8004044:	e77c      	b.n	8003f40 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004046:	2b03      	cmp	r3, #3
 8004048:	d10b      	bne.n	8004062 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800404a:	220c      	movs	r2, #12
 800404c:	68eb      	ldr	r3, [r5, #12]
 800404e:	4013      	ands	r3, r2
 8004050:	4293      	cmp	r3, r2
 8004052:	d083      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fe fc38 	bl	80028c8 <HAL_GetTick>
 8004058:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <HAL_RCC_ClockConfig+0x194>)
 800405a:	1bc0      	subs	r0, r0, r7
 800405c:	4298      	cmp	r0, r3
 800405e:	d9f4      	bls.n	800404a <HAL_RCC_ClockConfig+0x112>
 8004060:	e7bc      	b.n	8003fdc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004062:	2b01      	cmp	r3, #1
 8004064:	d011      	beq.n	800408a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004066:	220c      	movs	r2, #12
 8004068:	68eb      	ldr	r3, [r5, #12]
 800406a:	4213      	tst	r3, r2
 800406c:	d100      	bne.n	8004070 <HAL_RCC_ClockConfig+0x138>
 800406e:	e775      	b.n	8003f5c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fe fc2a 	bl	80028c8 <HAL_GetTick>
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <HAL_RCC_ClockConfig+0x194>)
 8004076:	1bc0      	subs	r0, r0, r7
 8004078:	4298      	cmp	r0, r3
 800407a:	d9f4      	bls.n	8004066 <HAL_RCC_ClockConfig+0x12e>
 800407c:	e7ae      	b.n	8003fdc <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407e:	f7fe fc23 	bl	80028c8 <HAL_GetTick>
 8004082:	4b12      	ldr	r3, [pc, #72]	; (80040cc <HAL_RCC_ClockConfig+0x194>)
 8004084:	1bc0      	subs	r0, r0, r7
 8004086:	4298      	cmp	r0, r3
 8004088:	d8a8      	bhi.n	8003fdc <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800408a:	220c      	movs	r2, #12
 800408c:	68eb      	ldr	r3, [r5, #12]
 800408e:	4013      	ands	r3, r2
 8004090:	2b04      	cmp	r3, #4
 8004092:	d1f4      	bne.n	800407e <HAL_RCC_ClockConfig+0x146>
 8004094:	e762      	b.n	8003f5c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004096:	f7fe fc17 	bl	80028c8 <HAL_GetTick>
 800409a:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <HAL_RCC_ClockConfig+0x194>)
 800409c:	1bc0      	subs	r0, r0, r7
 800409e:	4298      	cmp	r0, r3
 80040a0:	d800      	bhi.n	80040a4 <HAL_RCC_ClockConfig+0x16c>
 80040a2:	e767      	b.n	8003f74 <HAL_RCC_ClockConfig+0x3c>
 80040a4:	e79a      	b.n	8003fdc <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a6:	68e3      	ldr	r3, [r4, #12]
 80040a8:	4909      	ldr	r1, [pc, #36]	; (80040d0 <HAL_RCC_ClockConfig+0x198>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	68f1      	ldr	r1, [r6, #12]
 80040ae:	430b      	orrs	r3, r1
 80040b0:	60e3      	str	r3, [r4, #12]
 80040b2:	e768      	b.n	8003f86 <HAL_RCC_ClockConfig+0x4e>
 80040b4:	40022000 	.word	0x40022000
 80040b8:	40021000 	.word	0x40021000
 80040bc:	ffffc7ff 	.word	0xffffc7ff
 80040c0:	080079a5 	.word	0x080079a5
 80040c4:	20000018 	.word	0x20000018
 80040c8:	20000020 	.word	0x20000020
 80040cc:	00001388 	.word	0x00001388
 80040d0:	fffff8ff 	.word	0xfffff8ff

080040d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80040d6:	4a05      	ldr	r2, [pc, #20]	; (80040ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	055b      	lsls	r3, r3, #21
 80040dc:	0f5b      	lsrs	r3, r3, #29
 80040de:	5cd3      	ldrb	r3, [r2, r3]
 80040e0:	4a03      	ldr	r2, [pc, #12]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80040e2:	6810      	ldr	r0, [r2, #0]
 80040e4:	40d8      	lsrs	r0, r3
}
 80040e6:	4770      	bx	lr
 80040e8:	40021000 	.word	0x40021000
 80040ec:	080079b5 	.word	0x080079b5
 80040f0:	20000018 	.word	0x20000018

080040f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x14>)
 80040f6:	4a05      	ldr	r2, [pc, #20]	; (800410c <HAL_RCC_GetPCLK2Freq+0x18>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	049b      	lsls	r3, r3, #18
 80040fc:	0f5b      	lsrs	r3, r3, #29
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	4a03      	ldr	r2, [pc, #12]	; (8004110 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004102:	6810      	ldr	r0, [r2, #0]
 8004104:	40d8      	lsrs	r0, r3
}
 8004106:	4770      	bx	lr
 8004108:	40021000 	.word	0x40021000
 800410c:	080079b5 	.word	0x080079b5
 8004110:	20000018 	.word	0x20000018

08004114 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004114:	6803      	ldr	r3, [r0, #0]
{
 8004116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004118:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800411a:	069b      	lsls	r3, r3, #26
 800411c:	d53d      	bpl.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x86>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004120:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004122:	4c5f      	ldr	r4, [pc, #380]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004124:	055b      	lsls	r3, r3, #21
 8004126:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004128:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412a:	421a      	tst	r2, r3
 800412c:	d104      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004130:	4313      	orrs	r3, r2
 8004132:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004134:	2301      	movs	r3, #1
 8004136:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	2780      	movs	r7, #128	; 0x80
 800413a:	4e5a      	ldr	r6, [pc, #360]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800413c:	007f      	lsls	r7, r7, #1
 800413e:	6833      	ldr	r3, [r6, #0]
 8004140:	423b      	tst	r3, r7
 8004142:	d06c      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004144:	6868      	ldr	r0, [r5, #4]
 8004146:	23c0      	movs	r3, #192	; 0xc0
 8004148:	26c0      	movs	r6, #192	; 0xc0
 800414a:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800414c:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800414e:	03b6      	lsls	r6, r6, #14
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004154:	4032      	ands	r2, r6
 8004156:	4019      	ands	r1, r3
 8004158:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800415a:	4290      	cmp	r0, r2
 800415c:	d000      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800415e:	e06f      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004160:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004162:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004164:	d000      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004166:	e074      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004168:	6869      	ldr	r1, [r5, #4]
 800416a:	23c0      	movs	r3, #192	; 0xc0
 800416c:	000a      	movs	r2, r1
 800416e:	029b      	lsls	r3, r3, #10
 8004170:	401a      	ands	r2, r3
 8004172:	429a      	cmp	r2, r3
 8004174:	d107      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	484b      	ldr	r0, [pc, #300]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800417a:	4003      	ands	r3, r0
 800417c:	20c0      	movs	r0, #192	; 0xc0
 800417e:	0380      	lsls	r0, r0, #14
 8004180:	4001      	ands	r1, r0
 8004182:	430b      	orrs	r3, r1
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004188:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800418a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800418c:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800418e:	2b01      	cmp	r3, #1
 8004190:	d103      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004192:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004194:	4a45      	ldr	r2, [pc, #276]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004196:	4013      	ands	r3, r2
 8004198:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800419a:	682b      	ldr	r3, [r5, #0]
 800419c:	07da      	lsls	r2, r3, #31
 800419e:	d506      	bpl.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a0:	2003      	movs	r0, #3
 80041a2:	493f      	ldr	r1, [pc, #252]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041a4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80041a6:	4382      	bics	r2, r0
 80041a8:	68a8      	ldr	r0, [r5, #8]
 80041aa:	4302      	orrs	r2, r0
 80041ac:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ae:	079a      	lsls	r2, r3, #30
 80041b0:	d506      	bpl.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b2:	200c      	movs	r0, #12
 80041b4:	493a      	ldr	r1, [pc, #232]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041b6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80041b8:	4382      	bics	r2, r0
 80041ba:	68e8      	ldr	r0, [r5, #12]
 80041bc:	4302      	orrs	r2, r0
 80041be:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c0:	075a      	lsls	r2, r3, #29
 80041c2:	d506      	bpl.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c4:	4936      	ldr	r1, [pc, #216]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041c6:	483a      	ldr	r0, [pc, #232]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80041c8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80041ca:	4002      	ands	r2, r0
 80041cc:	6928      	ldr	r0, [r5, #16]
 80041ce:	4302      	orrs	r2, r0
 80041d0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d2:	071a      	lsls	r2, r3, #28
 80041d4:	d506      	bpl.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041d6:	4932      	ldr	r1, [pc, #200]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041d8:	4836      	ldr	r0, [pc, #216]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80041da:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80041dc:	4002      	ands	r2, r0
 80041de:	6968      	ldr	r0, [r5, #20]
 80041e0:	4302      	orrs	r2, r0
 80041e2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041e4:	05da      	lsls	r2, r3, #23
 80041e6:	d506      	bpl.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e8:	492d      	ldr	r1, [pc, #180]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041ea:	4833      	ldr	r0, [pc, #204]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041ec:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80041ee:	4002      	ands	r2, r0
 80041f0:	69a8      	ldr	r0, [r5, #24]
 80041f2:	4302      	orrs	r2, r0
 80041f4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041f6:	065a      	lsls	r2, r3, #25
 80041f8:	d506      	bpl.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041fa:	4929      	ldr	r1, [pc, #164]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041fc:	482f      	ldr	r0, [pc, #188]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041fe:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004200:	4002      	ands	r2, r0
 8004202:	6a28      	ldr	r0, [r5, #32]
 8004204:	4302      	orrs	r2, r0
 8004206:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004208:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	d517      	bpl.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800420e:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004210:	492b      	ldr	r1, [pc, #172]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004212:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004214:	400b      	ands	r3, r1
 8004216:	69e9      	ldr	r1, [r5, #28]
 8004218:	430b      	orrs	r3, r1
 800421a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800421c:	e00f      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421e:	6833      	ldr	r3, [r6, #0]
 8004220:	433b      	orrs	r3, r7
 8004222:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004224:	f7fe fb50 	bl	80028c8 <HAL_GetTick>
 8004228:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	6833      	ldr	r3, [r6, #0]
 800422c:	423b      	tst	r3, r7
 800422e:	d189      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004230:	f7fe fb4a 	bl	80028c8 <HAL_GetTick>
 8004234:	9b01      	ldr	r3, [sp, #4]
 8004236:	1ac0      	subs	r0, r0, r3
 8004238:	2864      	cmp	r0, #100	; 0x64
 800423a:	d9f6      	bls.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x116>
          return HAL_TIMEOUT;
 800423c:	2003      	movs	r0, #3
}
 800423e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004240:	4299      	cmp	r1, r3
 8004242:	d000      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8004244:	e78c      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004246:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8004248:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800424a:	039b      	lsls	r3, r3, #14
 800424c:	d400      	bmi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800424e:	e787      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8004250:	e7f5      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004252:	428b      	cmp	r3, r1
 8004254:	d100      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004256:	e787      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	069b      	lsls	r3, r3, #26
 800425c:	d400      	bmi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800425e:	e783      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004260:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004262:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004264:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004266:	0312      	lsls	r2, r2, #12
 8004268:	4302      	orrs	r2, r0
 800426a:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800426c:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800426e:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004270:	4814      	ldr	r0, [pc, #80]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004272:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004274:	4002      	ands	r2, r0
 8004276:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004278:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800427a:	05cb      	lsls	r3, r1, #23
 800427c:	d400      	bmi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800427e:	e773      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8004280:	f7fe fb22 	bl	80028c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004284:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004286:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004288:	00bf      	lsls	r7, r7, #2
 800428a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800428c:	423b      	tst	r3, r7
 800428e:	d000      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004290:	e76a      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fe fb19 	bl	80028c8 <HAL_GetTick>
 8004296:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004298:	1b80      	subs	r0, r0, r6
 800429a:	4298      	cmp	r0, r3
 800429c:	d9f5      	bls.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x176>
 800429e:	e7cd      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x128>
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
 80042a8:	ffcfffff 	.word	0xffcfffff
 80042ac:	efffffff 	.word	0xefffffff
 80042b0:	fffff3ff 	.word	0xfffff3ff
 80042b4:	ffffcfff 	.word	0xffffcfff
 80042b8:	fffcffff 	.word	0xfffcffff
 80042bc:	fbffffff 	.word	0xfbffffff
 80042c0:	fff3ffff 	.word	0xfff3ffff
 80042c4:	fff7ffff 	.word	0xfff7ffff
 80042c8:	00001388 	.word	0x00001388

080042cc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80042cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042ce:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042d0:	1c45      	adds	r5, r0, #1
 80042d2:	7feb      	ldrb	r3, [r5, #31]
{
 80042d4:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80042d6:	0038      	movs	r0, r7
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d024      	beq.n	8004326 <HAL_RTC_DeactivateAlarm+0x5a>
 80042dc:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042de:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 80042e0:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e2:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042e4:	19e6      	adds	r6, r4, r7
 80042e6:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24
 80042ea:	3a77      	subs	r2, #119	; 0x77
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80042ee:	32ad      	adds	r2, #173	; 0xad
 80042f0:	4291      	cmp	r1, r2
 80042f2:	d128      	bne.n	8004346 <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	4921      	ldr	r1, [pc, #132]	; (800437c <HAL_RTC_DeactivateAlarm+0xb0>)
 80042f8:	400a      	ands	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	4920      	ldr	r1, [pc, #128]	; (8004380 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004300:	400a      	ands	r2, r1
 8004302:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004304:	f7fe fae0 	bl	80028c8 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004308:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 800430a:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	68df      	ldr	r7, [r3, #12]
 8004312:	9b01      	ldr	r3, [sp, #4]
 8004314:	401f      	ands	r7, r3
 8004316:	d007      	beq.n	8004328 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004318:	22ff      	movs	r2, #255	; 0xff
 800431a:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800431c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800431e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004320:	2301      	movs	r3, #1
 8004322:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8004324:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8004326:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004328:	f7fe face 	bl	80028c8 <HAL_GetTick>
 800432c:	9b00      	ldr	r3, [sp, #0]
 800432e:	1ac0      	subs	r0, r0, r3
 8004330:	23fa      	movs	r3, #250	; 0xfa
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4298      	cmp	r0, r3
 8004336:	d9ea      	bls.n	800430e <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004338:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800433a:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004340:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004342:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 8004344:	e7ef      	b.n	8004326 <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	490e      	ldr	r1, [pc, #56]	; (8004384 <HAL_RTC_DeactivateAlarm+0xb8>)
 800434a:	400a      	ands	r2, r1
 800434c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	490d      	ldr	r1, [pc, #52]	; (8004388 <HAL_RTC_DeactivateAlarm+0xbc>)
 8004352:	400a      	ands	r2, r1
 8004354:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004356:	f7fe fab7 	bl	80028c8 <HAL_GetTick>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800435a:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 800435c:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	68df      	ldr	r7, [r3, #12]
 8004362:	9b01      	ldr	r3, [sp, #4]
 8004364:	401f      	ands	r7, r3
 8004366:	d1d7      	bne.n	8004318 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004368:	f7fe faae 	bl	80028c8 <HAL_GetTick>
 800436c:	9b00      	ldr	r3, [sp, #0]
 800436e:	1ac0      	subs	r0, r0, r3
 8004370:	23fa      	movs	r3, #250	; 0xfa
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4298      	cmp	r0, r3
 8004376:	d9f2      	bls.n	800435e <HAL_RTC_DeactivateAlarm+0x92>
 8004378:	e7de      	b.n	8004338 <HAL_RTC_DeactivateAlarm+0x6c>
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	fffffeff 	.word	0xfffffeff
 8004380:	ffffefff 	.word	0xffffefff
 8004384:	fffffdff 	.word	0xfffffdff
 8004388:	ffffdfff 	.word	0xffffdfff

0800438c <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800438c:	6803      	ldr	r3, [r0, #0]
{
 800438e:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004390:	689a      	ldr	r2, [r3, #8]
{
 8004392:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004394:	04d2      	lsls	r2, r2, #19
 8004396:	d50a      	bpl.n	80043ae <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	05db      	lsls	r3, r3, #23
 800439c:	d507      	bpl.n	80043ae <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800439e:	f7fe f94c 	bl	800263a <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80043a2:	6821      	ldr	r1, [r4, #0]
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <HAL_RTC_AlarmIRQHandler+0x54>)
 80043a6:	68ca      	ldr	r2, [r1, #12]
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	0492      	lsls	r2, r2, #18
 80043b4:	d50b      	bpl.n	80043ce <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	059b      	lsls	r3, r3, #22
 80043ba:	d508      	bpl.n	80043ce <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80043bc:	0020      	movs	r0, r4
 80043be:	f000 fae1 	bl	8004984 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <HAL_RTC_AlarmIRQHandler+0x58>)
 80043c6:	68ca      	ldr	r2, [r1, #12]
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80043ce:	2280      	movs	r2, #128	; 0x80
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80043d2:	0292      	lsls	r2, r2, #10
 80043d4:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043d6:	2301      	movs	r3, #1
 80043d8:	3402      	adds	r4, #2
 80043da:	77e3      	strb	r3, [r4, #31]
}
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	fffffe7f 	.word	0xfffffe7f
 80043e4:	fffffd7f 	.word	0xfffffd7f
 80043e8:	40010400 	.word	0x40010400

080043ec <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043ec:	21a0      	movs	r1, #160	; 0xa0
 80043ee:	6802      	ldr	r2, [r0, #0]
{
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043f2:	68d3      	ldr	r3, [r2, #12]
{
 80043f4:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043f6:	438b      	bics	r3, r1
 80043f8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80043fa:	f7fe fa65 	bl	80028c8 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043fe:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004400:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004402:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004404:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	422b      	tst	r3, r5
 800440c:	d001      	beq.n	8004412 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800440e:	2000      	movs	r0, #0
}
 8004410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004412:	f7fe fa59 	bl	80028c8 <HAL_GetTick>
 8004416:	1b80      	subs	r0, r0, r6
 8004418:	42b8      	cmp	r0, r7
 800441a:	d9f4      	bls.n	8004406 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800441c:	2003      	movs	r0, #3
 800441e:	e7f7      	b.n	8004410 <HAL_RTC_WaitForSynchro+0x24>

08004420 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004422:	2440      	movs	r4, #64	; 0x40
 8004424:	6803      	ldr	r3, [r0, #0]
{
 8004426:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	4222      	tst	r2, r4
 800442c:	d001      	beq.n	8004432 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800442e:	2000      	movs	r0, #0
}
 8004430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004432:	2201      	movs	r2, #1
 8004434:	4252      	negs	r2, r2
 8004436:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004438:	f7fe fa46 	bl	80028c8 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800443c:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 800443e:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004440:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4223      	tst	r3, r4
 8004448:	d1f1      	bne.n	800442e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800444a:	f7fe fa3d 	bl	80028c8 <HAL_GetTick>
 800444e:	1b80      	subs	r0, r0, r6
 8004450:	42b8      	cmp	r0, r7
 8004452:	d9f6      	bls.n	8004442 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8004454:	2003      	movs	r0, #3
 8004456:	e7eb      	b.n	8004430 <RTC_EnterInitMode+0x10>

08004458 <HAL_RTC_Init>:
{
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800445c:	2501      	movs	r5, #1
  if (hrtc == NULL)
 800445e:	2800      	cmp	r0, #0
 8004460:	d01a      	beq.n	8004498 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004462:	1c86      	adds	r6, r0, #2
 8004464:	7ff3      	ldrb	r3, [r6, #31]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 800446c:	1942      	adds	r2, r0, r5
 800446e:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8004470:	f7fd fef6 	bl	8002260 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004474:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004476:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004478:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800447a:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800447c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800447e:	625a      	str	r2, [r3, #36]	; 0x24
 8004480:	3a77      	subs	r2, #119	; 0x77
 8004482:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004484:	f7ff ffcc 	bl	8004420 <RTC_EnterInitMode>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	1e05      	subs	r5, r0, #0
 800448c:	d006      	beq.n	800449c <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800448e:	22ff      	movs	r2, #255	; 0xff
 8004490:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004492:	2304      	movs	r3, #4
 8004494:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8004496:	2501      	movs	r5, #1
}
 8004498:	0028      	movs	r0, r5
 800449a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	491b      	ldr	r1, [pc, #108]	; (800450c <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044a0:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044a2:	400a      	ands	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	4302      	orrs	r2, r0
 80044ac:	69a0      	ldr	r0, [r4, #24]
 80044ae:	4302      	orrs	r2, r0
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044b4:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044b6:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80044ba:	68a2      	ldr	r2, [r4, #8]
 80044bc:	6919      	ldr	r1, [r3, #16]
 80044be:	0412      	lsls	r2, r2, #16
 80044c0:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80044c2:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80044c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	438a      	bics	r2, r1
 80044ca:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80044cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ce:	397d      	subs	r1, #125	; 0x7d
 80044d0:	438a      	bics	r2, r1
 80044d2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044d4:	69e2      	ldr	r2, [r4, #28]
 80044d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80044d8:	4302      	orrs	r2, r0
 80044da:	430a      	orrs	r2, r1
 80044dc:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	069b      	lsls	r3, r3, #26
 80044e2:	d40c      	bmi.n	80044fe <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044e4:	0020      	movs	r0, r4
 80044e6:	f7ff ff81 	bl	80043ec <HAL_RTC_WaitForSynchro>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d007      	beq.n	80044fe <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ee:	22ff      	movs	r2, #255	; 0xff
 80044f0:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80044f2:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80044f6:	2304      	movs	r3, #4
 80044f8:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80044fa:	77e5      	strb	r5, [r4, #31]
 80044fc:	e7cb      	b.n	8004496 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044fe:	22ff      	movs	r2, #255	; 0xff
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004504:	2301      	movs	r3, #1
 8004506:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8004508:	e7c6      	b.n	8004498 <HAL_RTC_Init+0x40>
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	ff8fffbf 	.word	0xff8fffbf

08004510 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004510:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8004512:	2809      	cmp	r0, #9
 8004514:	d803      	bhi.n	800451e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	4318      	orrs	r0, r3
 800451a:	b2c0      	uxtb	r0, r0
}
 800451c:	4770      	bx	lr
    Param -= 10U;
 800451e:	380a      	subs	r0, #10
    bcdhigh++;
 8004520:	3301      	adds	r3, #1
    Param -= 10U;
 8004522:	b2c0      	uxtb	r0, r0
 8004524:	e7f5      	b.n	8004512 <RTC_ByteToBcd2+0x2>
	...

08004528 <HAL_RTC_SetTime>:
{
 8004528:	2302      	movs	r3, #2
 800452a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800452c:	1c47      	adds	r7, r0, #1
{
 800452e:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004530:	7ff9      	ldrb	r1, [r7, #31]
{
 8004532:	b085      	sub	sp, #20
 8004534:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004536:	001e      	movs	r6, r3
 8004538:	2901      	cmp	r1, #1
 800453a:	d037      	beq.n	80045ac <HAL_RTC_SetTime+0x84>
 800453c:	2101      	movs	r1, #1
 800453e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004540:	18c1      	adds	r1, r0, r3
 8004542:	77cb      	strb	r3, [r1, #31]
 8004544:	9101      	str	r1, [sp, #4]
 8004546:	2140      	movs	r1, #64	; 0x40
 8004548:	6806      	ldr	r6, [r0, #0]
 800454a:	7863      	ldrb	r3, [r4, #1]
 800454c:	7820      	ldrb	r0, [r4, #0]
 800454e:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004550:	68b3      	ldr	r3, [r6, #8]
 8004552:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8004554:	2a00      	cmp	r2, #0
 8004556:	d12c      	bne.n	80045b2 <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004558:	2b00      	cmp	r3, #0
 800455a:	d100      	bne.n	800455e <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 800455c:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800455e:	f7ff ffd7 	bl	8004510 <RTC_ByteToBcd2>
 8004562:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004564:	9802      	ldr	r0, [sp, #8]
 8004566:	f7ff ffd3 	bl	8004510 <RTC_ByteToBcd2>
 800456a:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800456c:	78a0      	ldrb	r0, [r4, #2]
 800456e:	f7ff ffcf 	bl	8004510 <RTC_ByteToBcd2>
 8004572:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004574:	78e0      	ldrb	r0, [r4, #3]
 8004576:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004578:	4318      	orrs	r0, r3
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004580:	9b02      	ldr	r3, [sp, #8]
 8004582:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004584:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004586:	23ca      	movs	r3, #202	; 0xca
 8004588:	6273      	str	r3, [r6, #36]	; 0x24
 800458a:	3b77      	subs	r3, #119	; 0x77
 800458c:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800458e:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004590:	0028      	movs	r0, r5
 8004592:	f7ff ff45 	bl	8004420 <RTC_EnterInitMode>
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	1e06      	subs	r6, r0, #0
 800459a:	d016      	beq.n	80045ca <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800459c:	22ff      	movs	r2, #255	; 0xff
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045a0:	2304      	movs	r3, #4
 80045a2:	9a01      	ldr	r2, [sp, #4]
 80045a4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80045a6:	2300      	movs	r3, #0
 80045a8:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80045aa:	2601      	movs	r6, #1
}
 80045ac:	0030      	movs	r0, r6
 80045ae:	b005      	add	sp, #20
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d100      	bne.n	80045b8 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 80045b6:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80045b8:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045ba:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80045bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045be:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 80045c0:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80045c2:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80045c4:	78e3      	ldrb	r3, [r4, #3]
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	e7dc      	b.n	8004584 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80045ca:	4815      	ldr	r0, [pc, #84]	; (8004620 <HAL_RTC_SetTime+0xf8>)
 80045cc:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80045ce:	4915      	ldr	r1, [pc, #84]	; (8004624 <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80045d0:	4002      	ands	r2, r0
 80045d2:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80045d4:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80045d6:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80045d8:	400a      	ands	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80045dc:	68e2      	ldr	r2, [r4, #12]
 80045de:	6899      	ldr	r1, [r3, #8]
 80045e0:	4302      	orrs	r2, r0
 80045e2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80045e4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80045e6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	438a      	bics	r2, r1
 80045ec:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	069b      	lsls	r3, r3, #26
 80045f2:	d40c      	bmi.n	800460e <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045f4:	0028      	movs	r0, r5
 80045f6:	f7ff fef9 	bl	80043ec <HAL_RTC_WaitForSynchro>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d007      	beq.n	800460e <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045fe:	22ff      	movs	r2, #255	; 0xff
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004604:	2304      	movs	r3, #4
 8004606:	9a01      	ldr	r2, [sp, #4]
 8004608:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800460a:	77fe      	strb	r6, [r7, #31]
 800460c:	e7cd      	b.n	80045aa <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800460e:	22ff      	movs	r2, #255	; 0xff
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004614:	2301      	movs	r3, #1
 8004616:	9a01      	ldr	r2, [sp, #4]
 8004618:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800461a:	2300      	movs	r3, #0
 800461c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800461e:	e7c5      	b.n	80045ac <HAL_RTC_SetTime+0x84>
 8004620:	007f7f7f 	.word	0x007f7f7f
 8004624:	fffbffff 	.word	0xfffbffff

08004628 <HAL_RTC_SetDate>:
{
 8004628:	2302      	movs	r3, #2
 800462a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800462c:	1c47      	adds	r7, r0, #1
{
 800462e:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8004630:	7ff9      	ldrb	r1, [r7, #31]
{
 8004632:	b085      	sub	sp, #20
 8004634:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004636:	001d      	movs	r5, r3
 8004638:	2901      	cmp	r1, #1
 800463a:	d036      	beq.n	80046aa <HAL_RTC_SetDate+0x82>
 800463c:	2101      	movs	r1, #1
 800463e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004640:	18c1      	adds	r1, r0, r3
 8004642:	9101      	str	r1, [sp, #4]
 8004644:	77cb      	strb	r3, [r1, #31]
 8004646:	7831      	ldrb	r1, [r6, #0]
 8004648:	78f0      	ldrb	r0, [r6, #3]
 800464a:	0349      	lsls	r1, r1, #13
 800464c:	7873      	ldrb	r3, [r6, #1]
 800464e:	78b5      	ldrb	r5, [r6, #2]
 8004650:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004652:	2a00      	cmp	r2, #0
 8004654:	d14c      	bne.n	80046f0 <HAL_RTC_SetDate+0xc8>
 8004656:	3210      	adds	r2, #16
 8004658:	4213      	tst	r3, r2
 800465a:	d002      	beq.n	8004662 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800465c:	4393      	bics	r3, r2
 800465e:	330a      	adds	r3, #10
 8004660:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004662:	f7ff ff55 	bl	8004510 <RTC_ByteToBcd2>
 8004666:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004668:	7870      	ldrb	r0, [r6, #1]
 800466a:	f7ff ff51 	bl	8004510 <RTC_ByteToBcd2>
 800466e:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004670:	0028      	movs	r0, r5
 8004672:	f7ff ff4d 	bl	8004510 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004676:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004678:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800467a:	041d      	lsls	r5, r3, #16
 800467c:	9b02      	ldr	r3, [sp, #8]
 800467e:	4318      	orrs	r0, r3
 8004680:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004682:	22ca      	movs	r2, #202	; 0xca
 8004684:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004686:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
 800468a:	3a77      	subs	r2, #119	; 0x77
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800468e:	f7ff fec7 	bl	8004420 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004692:	432e      	orrs	r6, r5
 8004694:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004696:	1e05      	subs	r5, r0, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800469a:	22ff      	movs	r2, #255	; 0xff
 800469c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800469e:	2304      	movs	r3, #4
 80046a0:	9a01      	ldr	r2, [sp, #4]
 80046a2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80046a4:	2300      	movs	r3, #0
 80046a6:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80046a8:	2501      	movs	r5, #1
}
 80046aa:	0028      	movs	r0, r5
 80046ac:	b005      	add	sp, #20
 80046ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80046b0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046b2:	4812      	ldr	r0, [pc, #72]	; (80046fc <HAL_RTC_SetDate+0xd4>)
 80046b4:	4006      	ands	r6, r0
 80046b6:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	438a      	bics	r2, r1
 80046bc:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	069b      	lsls	r3, r3, #26
 80046c2:	d40c      	bmi.n	80046de <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046c4:	0020      	movs	r0, r4
 80046c6:	f7ff fe91 	bl	80043ec <HAL_RTC_WaitForSynchro>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d007      	beq.n	80046de <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ce:	22ff      	movs	r2, #255	; 0xff
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80046d4:	2304      	movs	r3, #4
 80046d6:	9a01      	ldr	r2, [sp, #4]
 80046d8:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80046da:	77fd      	strb	r5, [r7, #31]
 80046dc:	e7e4      	b.n	80046a8 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046de:	22ff      	movs	r2, #255	; 0xff
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80046e4:	2301      	movs	r3, #1
 80046e6:	9a01      	ldr	r2, [sp, #4]
 80046e8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80046ea:	2300      	movs	r3, #0
 80046ec:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80046ee:	e7dc      	b.n	80046aa <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80046f0:	9a02      	ldr	r2, [sp, #8]
 80046f2:	0400      	lsls	r0, r0, #16
 80046f4:	4310      	orrs	r0, r2
 80046f6:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80046f8:	021e      	lsls	r6, r3, #8
 80046fa:	e7c2      	b.n	8004682 <HAL_RTC_SetDate+0x5a>
 80046fc:	00ffff3f 	.word	0x00ffff3f

08004700 <HAL_RTC_SetAlarm_IT>:
{
 8004700:	2302      	movs	r3, #2
 8004702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004704:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004706:	1c41      	adds	r1, r0, #1
 8004708:	7fce      	ldrb	r6, [r1, #31]
{
 800470a:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800470c:	0018      	movs	r0, r3
 800470e:	2e01      	cmp	r6, #1
 8004710:	d100      	bne.n	8004714 <HAL_RTC_SetAlarm_IT+0x14>
 8004712:	e08c      	b.n	800482e <HAL_RTC_SetAlarm_IT+0x12e>
 8004714:	3801      	subs	r0, #1
 8004716:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004718:	18e1      	adds	r1, r4, r3
 800471a:	77cb      	strb	r3, [r1, #31]
 800471c:	2140      	movs	r1, #64	; 0x40
 800471e:	786b      	ldrb	r3, [r5, #1]
 8004720:	6826      	ldr	r6, [r4, #0]
 8004722:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004724:	68b3      	ldr	r3, [r6, #8]
 8004726:	7828      	ldrb	r0, [r5, #0]
 8004728:	78af      	ldrb	r7, [r5, #2]
 800472a:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 800472c:	2a00      	cmp	r2, #0
 800472e:	d15d      	bne.n	80047ec <HAL_RTC_SetAlarm_IT+0xec>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004730:	2b00      	cmp	r3, #0
 8004732:	d100      	bne.n	8004736 <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004734:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004736:	f7ff feeb 	bl	8004510 <RTC_ByteToBcd2>
 800473a:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800473c:	9800      	ldr	r0, [sp, #0]
 800473e:	f7ff fee7 	bl	8004510 <RTC_ByteToBcd2>
 8004742:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004744:	0038      	movs	r0, r7
 8004746:	f7ff fee3 	bl	8004510 <RTC_ByteToBcd2>
 800474a:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800474c:	1c6b      	adds	r3, r5, #1
 800474e:	7fd8      	ldrb	r0, [r3, #31]
 8004750:	f7ff fede 	bl	8004510 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004754:	696a      	ldr	r2, [r5, #20]
 8004756:	69eb      	ldr	r3, [r5, #28]
 8004758:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800475a:	78ea      	ldrb	r2, [r5, #3]
 800475c:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800475e:	4313      	orrs	r3, r2
 8004760:	431f      	orrs	r7, r3
 8004762:	9b01      	ldr	r3, [sp, #4]
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004768:	9b00      	ldr	r3, [sp, #0]
 800476a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800476c:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800476e:	69aa      	ldr	r2, [r5, #24]
 8004770:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004772:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004774:	4313      	orrs	r3, r2
 8004776:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004778:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 800477a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800477c:	6273      	str	r3, [r6, #36]	; 0x24
 800477e:	3b77      	subs	r3, #119	; 0x77
 8004780:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004782:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004784:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004786:	429a      	cmp	r2, r3
 8004788:	d152      	bne.n	8004830 <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800478a:	68b3      	ldr	r3, [r6, #8]
 800478c:	4a3b      	ldr	r2, [pc, #236]	; (800487c <HAL_RTC_SetAlarm_IT+0x17c>)
 800478e:	4013      	ands	r3, r2
 8004790:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004792:	68f2      	ldr	r2, [r6, #12]
 8004794:	4b3a      	ldr	r3, [pc, #232]	; (8004880 <HAL_RTC_SetAlarm_IT+0x180>)
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	4313      	orrs	r3, r2
 800479a:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800479c:	f7fe f894 	bl	80028c8 <HAL_GetTick>
 80047a0:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80047a2:	2201      	movs	r2, #1
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	68dd      	ldr	r5, [r3, #12]
 80047a8:	4015      	ands	r5, r2
 80047aa:	d031      	beq.n	8004810 <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80047ac:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80047ae:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	6899      	ldr	r1, [r3, #8]
 80047b6:	0052      	lsls	r2, r2, #1
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80047bc:	2280      	movs	r2, #128	; 0x80
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80047c2:	430a      	orrs	r2, r1
 80047c4:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <HAL_RTC_SetAlarm_IT+0x184>)
 80047ca:	0292      	lsls	r2, r2, #10
 80047cc:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80047ce:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80047d0:	4311      	orrs	r1, r2
 80047d2:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80047d4:	6899      	ldr	r1, [r3, #8]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047da:	22ff      	movs	r2, #255	; 0xff
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80047e0:	3afe      	subs	r2, #254	; 0xfe
 80047e2:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 80047e4:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 80047e6:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80047e8:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80047ea:	e020      	b.n	800482e <HAL_RTC_SetAlarm_IT+0x12e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d100      	bne.n	80047f2 <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047f0:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80047f2:	69eb      	ldr	r3, [r5, #28]
 80047f4:	696a      	ldr	r2, [r5, #20]
 80047f6:	0400      	lsls	r0, r0, #16
 80047f8:	4313      	orrs	r3, r2
 80047fa:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80047fc:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80047fe:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004800:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004802:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004804:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004806:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004808:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800480a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800480c:	7fd8      	ldrb	r0, [r3, #31]
 800480e:	e7ae      	b.n	800476e <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004810:	f7fe f85a 	bl	80028c8 <HAL_GetTick>
 8004814:	23fa      	movs	r3, #250	; 0xfa
 8004816:	1b80      	subs	r0, r0, r6
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4298      	cmp	r0, r3
 800481c:	d9c1      	bls.n	80047a2 <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800481e:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004820:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004826:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 8004828:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800482a:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 800482c:	77e5      	strb	r5, [r4, #31]
}
 800482e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004830:	68b3      	ldr	r3, [r6, #8]
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <HAL_RTC_SetAlarm_IT+0x188>)
 8004834:	4013      	ands	r3, r2
 8004836:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004838:	68f2      	ldr	r2, [r6, #12]
 800483a:	4b14      	ldr	r3, [pc, #80]	; (800488c <HAL_RTC_SetAlarm_IT+0x18c>)
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	4313      	orrs	r3, r2
 8004840:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8004842:	f7fe f841 	bl	80028c8 <HAL_GetTick>
 8004846:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004848:	2202      	movs	r2, #2
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	68dd      	ldr	r5, [r3, #12]
 800484e:	4015      	ands	r5, r2
 8004850:	d00b      	beq.n	800486a <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004852:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004854:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004856:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004858:	2280      	movs	r2, #128	; 0x80
 800485a:	6899      	ldr	r1, [r3, #8]
 800485c:	0092      	lsls	r2, r2, #2
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	6899      	ldr	r1, [r3, #8]
 8004866:	0192      	lsls	r2, r2, #6
 8004868:	e7ab      	b.n	80047c2 <HAL_RTC_SetAlarm_IT+0xc2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800486a:	f7fe f82d 	bl	80028c8 <HAL_GetTick>
 800486e:	23fa      	movs	r3, #250	; 0xfa
 8004870:	1b80      	subs	r0, r0, r6
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4298      	cmp	r0, r3
 8004876:	d9e7      	bls.n	8004848 <HAL_RTC_SetAlarm_IT+0x148>
 8004878:	e7d1      	b.n	800481e <HAL_RTC_SetAlarm_IT+0x11e>
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	fffffeff 	.word	0xfffffeff
 8004880:	fffffe7f 	.word	0xfffffe7f
 8004884:	40010400 	.word	0x40010400
 8004888:	fffffdff 	.word	0xfffffdff
 800488c:	fffffd7f 	.word	0xfffffd7f

08004890 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004890:	230a      	movs	r3, #10
 8004892:	0902      	lsrs	r2, r0, #4
 8004894:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004896:	220f      	movs	r2, #15
 8004898:	4010      	ands	r0, r2
 800489a:	1818      	adds	r0, r3, r0
 800489c:	b2c0      	uxtb	r0, r0
}
 800489e:	4770      	bx	lr

080048a0 <HAL_RTC_GetTime>:
{
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80048a4:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80048a6:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80048a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80048aa:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80048ac:	690b      	ldr	r3, [r1, #16]
 80048ae:	045b      	lsls	r3, r3, #17
 80048b0:	0c5b      	lsrs	r3, r3, #17
 80048b2:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80048b4:	680b      	ldr	r3, [r1, #0]
 80048b6:	490e      	ldr	r1, [pc, #56]	; (80048f0 <HAL_RTC_GetTime+0x50>)
 80048b8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80048ba:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80048bc:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80048be:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80048c0:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80048c2:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80048c4:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80048c6:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80048c8:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80048ca:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80048cc:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80048ce:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	d10a      	bne.n	80048ea <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80048d4:	f7ff ffdc 	bl	8004890 <RTC_Bcd2ToByte>
 80048d8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80048da:	0030      	movs	r0, r6
 80048dc:	f7ff ffd8 	bl	8004890 <RTC_Bcd2ToByte>
 80048e0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80048e2:	0028      	movs	r0, r5
 80048e4:	f7ff ffd4 	bl	8004890 <RTC_Bcd2ToByte>
 80048e8:	70a0      	strb	r0, [r4, #2]
}
 80048ea:	2000      	movs	r0, #0
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	007f7f7f 	.word	0x007f7f7f

080048f4 <HAL_RTC_GetDate>:
{
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048f8:	6803      	ldr	r3, [r0, #0]
 80048fa:	490e      	ldr	r1, [pc, #56]	; (8004934 <HAL_RTC_GetDate+0x40>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004900:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004902:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004904:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004906:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004908:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800490a:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800490c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800490e:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004910:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004912:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8004914:	2a00      	cmp	r2, #0
 8004916:	d10a      	bne.n	800492e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004918:	f7ff ffba 	bl	8004890 <RTC_Bcd2ToByte>
 800491c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800491e:	0028      	movs	r0, r5
 8004920:	f7ff ffb6 	bl	8004890 <RTC_Bcd2ToByte>
 8004924:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004926:	0030      	movs	r0, r6
 8004928:	f7ff ffb2 	bl	8004890 <RTC_Bcd2ToByte>
 800492c:	70a0      	strb	r0, [r4, #2]
}
 800492e:	2000      	movs	r0, #0
 8004930:	bd70      	pop	{r4, r5, r6, pc}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	00ffff3f 	.word	0x00ffff3f

08004938 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004938:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800493a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800493c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800493e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004940:	600a      	str	r2, [r1, #0]
}
 8004942:	4770      	bx	lr

08004944 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004944:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8004946:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004948:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800494a:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800494c:	6808      	ldr	r0, [r1, #0]
}
 800494e:	4770      	bx	lr

08004950 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004950:	2202      	movs	r2, #2
 8004952:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004954:	1c41      	adds	r1, r0, #1
 8004956:	7fcc      	ldrb	r4, [r1, #31]
{
 8004958:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 800495a:	0010      	movs	r0, r2
 800495c:	2c01      	cmp	r4, #1
 800495e:	d010      	beq.n	8004982 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004960:	1898      	adds	r0, r3, r2

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004962:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004964:	77c2      	strb	r2, [r0, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004966:	32c8      	adds	r2, #200	; 0xc8
 8004968:	625a      	str	r2, [r3, #36]	; 0x24
 800496a:	3a77      	subs	r2, #119	; 0x77
 800496c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800496e:	689c      	ldr	r4, [r3, #8]
 8004970:	3a33      	subs	r2, #51	; 0x33
 8004972:	4322      	orrs	r2, r4
 8004974:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004976:	22ff      	movs	r2, #255	; 0xff
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800497a:	2301      	movs	r3, #1
 800497c:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800497e:	2000      	movs	r0, #0
 8004980:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8004982:	bd10      	pop	{r4, pc}

08004984 <HAL_RTCEx_AlarmBEventCallback>:
 8004984:	4770      	bx	lr
	...

08004988 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	001d      	movs	r5, r3
 800498c:	b085      	sub	sp, #20
 800498e:	0016      	movs	r6, r2
 8004990:	000f      	movs	r7, r1
 8004992:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004994:	f7fd ff98 	bl	80028c8 <HAL_GetTick>
 8004998:	19ad      	adds	r5, r5, r6
 800499a:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800499c:	f7fd ff94 	bl	80028c8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049a0:	4b25      	ldr	r3, [pc, #148]	; (8004a38 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80049a2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	015b      	lsls	r3, r3, #5
 80049a8:	0d1b      	lsrs	r3, r3, #20
 80049aa:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ac:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80049ae:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049b0:	6893      	ldr	r3, [r2, #8]
 80049b2:	403b      	ands	r3, r7
 80049b4:	429f      	cmp	r7, r3
 80049b6:	d001      	beq.n	80049bc <SPI_WaitFlagStateUntilTimeout.constprop.7+0x34>
    }
  }

  return HAL_OK;
 80049b8:	2000      	movs	r0, #0
 80049ba:	e032      	b.n	8004a22 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 80049bc:	1c73      	adds	r3, r6, #1
 80049be:	d0f7      	beq.n	80049b0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049c0:	f7fd ff82 	bl	80028c8 <HAL_GetTick>
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	1ac0      	subs	r0, r0, r3
 80049c8:	42a8      	cmp	r0, r5
 80049ca:	d32c      	bcc.n	8004a26 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049cc:	21e0      	movs	r1, #224	; 0xe0
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	438a      	bics	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d6:	2282      	movs	r2, #130	; 0x82
 80049d8:	6861      	ldr	r1, [r4, #4]
 80049da:	0052      	lsls	r2, r2, #1
 80049dc:	4291      	cmp	r1, r2
 80049de:	d10c      	bne.n	80049fa <SPI_WaitFlagStateUntilTimeout.constprop.7+0x72>
 80049e0:	2180      	movs	r1, #128	; 0x80
 80049e2:	68a2      	ldr	r2, [r4, #8]
 80049e4:	0209      	lsls	r1, r1, #8
 80049e6:	428a      	cmp	r2, r1
 80049e8:	d003      	beq.n	80049f2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	00c9      	lsls	r1, r1, #3
 80049ee:	428a      	cmp	r2, r1
 80049f0:	d103      	bne.n	80049fa <SPI_WaitFlagStateUntilTimeout.constprop.7+0x72>
          __HAL_SPI_DISABLE(hspi);
 80049f2:	2140      	movs	r1, #64	; 0x40
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	438a      	bics	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049fa:	2180      	movs	r1, #128	; 0x80
 80049fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80049fe:	0189      	lsls	r1, r1, #6
 8004a00:	428a      	cmp	r2, r1
 8004a02:	d106      	bne.n	8004a12 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x8a>
          SPI_RESET_CRC(hspi);
 8004a04:	6819      	ldr	r1, [r3, #0]
 8004a06:	480d      	ldr	r0, [pc, #52]	; (8004a3c <SPI_WaitFlagStateUntilTimeout.constprop.7+0xb4>)
 8004a08:	4001      	ands	r1, r0
 8004a0a:	6019      	str	r1, [r3, #0]
 8004a0c:	6819      	ldr	r1, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004a12:	0023      	movs	r3, r4
 8004a14:	2201      	movs	r2, #1
 8004a16:	3351      	adds	r3, #81	; 0x51
 8004a18:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2003      	movs	r0, #3
 8004a1e:	3450      	adds	r4, #80	; 0x50
 8004a20:	7023      	strb	r3, [r4, #0]
}
 8004a22:	b005      	add	sp, #20
 8004a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8004a26:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004a28:	1e5a      	subs	r2, r3, #1
 8004a2a:	4193      	sbcs	r3, r2
 8004a2c:	425b      	negs	r3, r3
 8004a2e:	401d      	ands	r5, r3
      count--;
 8004a30:	9b03      	ldr	r3, [sp, #12]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	e7ba      	b.n	80049ac <SPI_WaitFlagStateUntilTimeout.constprop.7+0x24>
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	20000018 	.word	0x20000018
 8004a3c:	ffffdfff 	.word	0xffffdfff

08004a40 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a40:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <SPI_EndRxTxTransaction+0x5c>)
{
 8004a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a44:	0004      	movs	r4, r0
 8004a46:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	4915      	ldr	r1, [pc, #84]	; (8004aa0 <SPI_EndRxTxTransaction+0x60>)
{
 8004a4c:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a4e:	f7fb fb81 	bl	8000154 <__udivsi3>
 8004a52:	23fa      	movs	r3, #250	; 0xfa
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4358      	muls	r0, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a58:	2382      	movs	r3, #130	; 0x82
 8004a5a:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a5c:	9001      	str	r0, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a5e:	005b      	lsls	r3, r3, #1
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a60:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d10d      	bne.n	8004a82 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a66:	0033      	movs	r3, r6
 8004a68:	002a      	movs	r2, r5
 8004a6a:	2180      	movs	r1, #128	; 0x80
 8004a6c:	0020      	movs	r0, r4
 8004a6e:	f7ff ff8b 	bl	8004988 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d00f      	beq.n	8004a96 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a76:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004a78:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8004a80:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8004a82:	9b01      	ldr	r3, [sp, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d006      	beq.n	8004a96 <SPI_EndRxTxTransaction+0x56>
      count--;
 8004a88:	9b01      	ldr	r3, [sp, #4]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	4213      	tst	r3, r2
 8004a94:	d1f5      	bne.n	8004a82 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8004a96:	2000      	movs	r0, #0
 8004a98:	e7f2      	b.n	8004a80 <SPI_EndRxTxTransaction+0x40>
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	20000018 	.word	0x20000018
 8004aa0:	016e3600 	.word	0x016e3600

08004aa4 <HAL_SPI_MspInit>:
}
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_SPI_Init>:
{
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004aac:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004aae:	2c00      	cmp	r4, #0
 8004ab0:	d054      	beq.n	8004b5c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d152      	bne.n	8004b5e <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ab8:	2282      	movs	r2, #130	; 0x82
 8004aba:	6861      	ldr	r1, [r4, #4]
 8004abc:	0052      	lsls	r2, r2, #1
 8004abe:	4291      	cmp	r1, r2
 8004ac0:	d000      	beq.n	8004ac4 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ac2:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac4:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ac6:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aca:	3551      	adds	r5, #81	; 0x51
 8004acc:	782b      	ldrb	r3, [r5, #0]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d105      	bne.n	8004ae0 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8004ad4:	0022      	movs	r2, r4
 8004ad6:	3250      	adds	r2, #80	; 0x50
 8004ad8:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8004ada:	0020      	movs	r0, r4
 8004adc:	f7ff ffe2 	bl	8004aa4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae0:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8004ae2:	2240      	movs	r2, #64	; 0x40
 8004ae4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae6:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8004ae8:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aea:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8004aec:	4393      	bics	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004af0:	2382      	movs	r3, #130	; 0x82
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	4033      	ands	r3, r6
 8004af6:	2684      	movs	r6, #132	; 0x84
 8004af8:	68a7      	ldr	r7, [r4, #8]
 8004afa:	0236      	lsls	r6, r6, #8
 8004afc:	403e      	ands	r6, r7
 8004afe:	4333      	orrs	r3, r6
 8004b00:	2680      	movs	r6, #128	; 0x80
 8004b02:	68e7      	ldr	r7, [r4, #12]
 8004b04:	0136      	lsls	r6, r6, #4
 8004b06:	403e      	ands	r6, r7
 8004b08:	4333      	orrs	r3, r6
 8004b0a:	6926      	ldr	r6, [r4, #16]
 8004b0c:	69a2      	ldr	r2, [r4, #24]
 8004b0e:	4030      	ands	r0, r6
 8004b10:	2601      	movs	r6, #1
 8004b12:	4303      	orrs	r3, r0
 8004b14:	6960      	ldr	r0, [r4, #20]
 8004b16:	69e7      	ldr	r7, [r4, #28]
 8004b18:	4030      	ands	r0, r6
 8004b1a:	4303      	orrs	r3, r0
 8004b1c:	2080      	movs	r0, #128	; 0x80
 8004b1e:	0080      	lsls	r0, r0, #2
 8004b20:	4010      	ands	r0, r2
 8004b22:	4303      	orrs	r3, r0
 8004b24:	2038      	movs	r0, #56	; 0x38
 8004b26:	4038      	ands	r0, r7
 8004b28:	4303      	orrs	r3, r0
 8004b2a:	2080      	movs	r0, #128	; 0x80
 8004b2c:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b2e:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b30:	4038      	ands	r0, r7
 8004b32:	4303      	orrs	r3, r0
 8004b34:	2080      	movs	r0, #128	; 0x80
 8004b36:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004b38:	0180      	lsls	r0, r0, #6
 8004b3a:	4038      	ands	r0, r7
 8004b3c:	4303      	orrs	r3, r0
 8004b3e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b40:	2304      	movs	r3, #4
 8004b42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004b44:	401a      	ands	r2, r3
 8004b46:	330c      	adds	r3, #12
 8004b48:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b4a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b50:	69cb      	ldr	r3, [r1, #28]
 8004b52:	4a05      	ldr	r2, [pc, #20]	; (8004b68 <HAL_SPI_Init+0xc0>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b58:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b5a:	702e      	strb	r6, [r5, #0]
}
 8004b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b62:	6163      	str	r3, [r4, #20]
 8004b64:	e7ae      	b.n	8004ac4 <HAL_SPI_Init+0x1c>
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	fffff7ff 	.word	0xfffff7ff

08004b6c <HAL_SPI_TransmitReceive>:
{
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8004b70:	0003      	movs	r3, r0
 8004b72:	3350      	adds	r3, #80	; 0x50
{
 8004b74:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8004b76:	781a      	ldrb	r2, [r3, #0]
{
 8004b78:	0004      	movs	r4, r0
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8004b7e:	2002      	movs	r0, #2
 8004b80:	2a01      	cmp	r2, #1
 8004b82:	d100      	bne.n	8004b86 <HAL_SPI_TransmitReceive+0x1a>
 8004b84:	e099      	b.n	8004cba <HAL_SPI_TransmitReceive+0x14e>
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004b8a:	f7fd fe9d 	bl	80028c8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004b8e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8004b90:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8004b92:	3351      	adds	r3, #81	; 0x51
 8004b94:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004b96:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004b98:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_SPI_TransmitReceive+0x4c>
 8004b9e:	2282      	movs	r2, #130	; 0x82
    errorcode = HAL_BUSY;
 8004ba0:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ba2:	0052      	lsls	r2, r2, #1
 8004ba4:	4291      	cmp	r1, r2
 8004ba6:	d000      	beq.n	8004baa <HAL_SPI_TransmitReceive+0x3e>
 8004ba8:	e080      	b.n	8004cac <HAL_SPI_TransmitReceive+0x140>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004baa:	68a2      	ldr	r2, [r4, #8]
 8004bac:	2a00      	cmp	r2, #0
 8004bae:	d000      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0x46>
 8004bb0:	e07c      	b.n	8004cac <HAL_SPI_TransmitReceive+0x140>
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d000      	beq.n	8004bb8 <HAL_SPI_TransmitReceive+0x4c>
 8004bb6:	e079      	b.n	8004cac <HAL_SPI_TransmitReceive+0x140>
    errorcode = HAL_ERROR;
 8004bb8:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bba:	2d00      	cmp	r5, #0
 8004bbc:	d076      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x140>
 8004bbe:	2f00      	cmp	r7, #0
 8004bc0:	d074      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x140>
 8004bc2:	2e00      	cmp	r6, #0
 8004bc4:	d072      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bc6:	0023      	movs	r3, r4
 8004bc8:	3351      	adds	r3, #81	; 0x51
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	2a04      	cmp	r2, #4
 8004bce:	d001      	beq.n	8004bd4 <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bd0:	2205      	movs	r2, #5
 8004bd2:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd4:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd6:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8004bda:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bdc:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bde:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8004be0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004be2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be4:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004be6:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004be8:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bea:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004bec:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bee:	4210      	tst	r0, r2
 8004bf0:	d102      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	4302      	orrs	r2, r0
 8004bf6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bf8:	2280      	movs	r2, #128	; 0x80
 8004bfa:	68e0      	ldr	r0, [r4, #12]
 8004bfc:	0112      	lsls	r2, r2, #4
 8004bfe:	4290      	cmp	r0, r2
 8004c00:	d15d      	bne.n	8004cbe <HAL_SPI_TransmitReceive+0x152>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c02:	2900      	cmp	r1, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_SPI_TransmitReceive+0x9e>
 8004c06:	2e01      	cmp	r6, #1
 8004c08:	d107      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0a:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004c10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c12:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004c1a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c1c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c1e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d115      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0xe6>
 8004c26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d112      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c2c:	9a01      	ldr	r2, [sp, #4]
 8004c2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c30:	0020      	movs	r0, r4
 8004c32:	f7ff ff05 	bl	8004a40 <SPI_EndRxTxTransaction>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d000      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0xd0>
 8004c3a:	e086      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x1de>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c3c:	68a3      	ldr	r3, [r4, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d134      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	9003      	str	r0, [sp, #12]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	9203      	str	r2, [sp, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	9303      	str	r3, [sp, #12]
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	e02c      	b.n	8004cac <HAL_SPI_TransmitReceive+0x140>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	6893      	ldr	r3, [r2, #8]
 8004c56:	423b      	tst	r3, r7
 8004c58:	d00e      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x10c>
 8004c5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x10c>
 8004c60:	2d01      	cmp	r5, #1
 8004c62:	d109      	bne.n	8004c78 <HAL_SPI_TransmitReceive+0x10c>
        txallowed = 0U;
 8004c64:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c68:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c6c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004c70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c78:	6893      	ldr	r3, [r2, #8]
 8004c7a:	4233      	tst	r3, r6
 8004c7c:	d00c      	beq.n	8004c98 <HAL_SPI_TransmitReceive+0x12c>
 8004c7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 1U;
 8004c84:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c86:	68d2      	ldr	r2, [r2, #12]
 8004c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c98:	f7fd fe16 	bl	80028c8 <HAL_GetTick>
 8004c9c:	9b01      	ldr	r3, [sp, #4]
 8004c9e:	1ac0      	subs	r0, r0, r3
 8004ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca2:	4283      	cmp	r3, r0
 8004ca4:	d8bc      	bhi.n	8004c20 <HAL_SPI_TransmitReceive+0xb4>
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	d0ba      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0xb4>
        errorcode = HAL_TIMEOUT;
 8004caa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004cac:	0023      	movs	r3, r4
 8004cae:	2201      	movs	r2, #1
 8004cb0:	3351      	adds	r3, #81	; 0x51
 8004cb2:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	3450      	adds	r4, #80	; 0x50
 8004cb8:	7023      	strb	r3, [r4, #0]
}
 8004cba:	b005      	add	sp, #20
 8004cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cbe:	2900      	cmp	r1, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_SPI_TransmitReceive+0x15a>
 8004cc2:	2e01      	cmp	r6, #1
 8004cc4:	d108      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x16c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cc6:	782a      	ldrb	r2, [r5, #0]
 8004cc8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ccc:	3301      	adds	r3, #1
 8004cce:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004cd8:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cda:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cdc:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x17e>
 8004ce4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0a0      	beq.n	8004c2c <HAL_SPI_TransmitReceive+0xc0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	423a      	tst	r2, r7
 8004cf0:	d00f      	beq.n	8004d12 <HAL_SPI_TransmitReceive+0x1a6>
 8004cf2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	d00c      	beq.n	8004d12 <HAL_SPI_TransmitReceive+0x1a6>
 8004cf8:	2d01      	cmp	r5, #1
 8004cfa:	d10a      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 8004cfc:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d00:	7812      	ldrb	r2, [r2, #0]
 8004d02:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004d04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d06:	3301      	adds	r3, #1
 8004d08:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	4232      	tst	r2, r6
 8004d18:	d00d      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x1ca>
 8004d1a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004d1c:	2a00      	cmp	r2, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8004d20:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d26:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8004d28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004d2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d36:	f7fd fdc7 	bl	80028c8 <HAL_GetTick>
 8004d3a:	9b01      	ldr	r3, [sp, #4]
 8004d3c:	1ac0      	subs	r0, r0, r3
 8004d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d40:	4283      	cmp	r3, r0
 8004d42:	d8cc      	bhi.n	8004cde <HAL_SPI_TransmitReceive+0x172>
 8004d44:	3301      	adds	r3, #1
 8004d46:	d0ca      	beq.n	8004cde <HAL_SPI_TransmitReceive+0x172>
 8004d48:	e7af      	b.n	8004caa <HAL_SPI_TransmitReceive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d4a:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8004d4c:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d4e:	6563      	str	r3, [r4, #84]	; 0x54
 8004d50:	e7ac      	b.n	8004cac <HAL_SPI_TransmitReceive+0x140>

08004d52 <HAL_SPI_GetState>:
  return hspi->State;
 8004d52:	3051      	adds	r0, #81	; 0x51
 8004d54:	7800      	ldrb	r0, [r0, #0]
 8004d56:	b2c0      	uxtb	r0, r0
}
 8004d58:	4770      	bx	lr
	...

08004d5c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5c:	6803      	ldr	r3, [r0, #0]
 8004d5e:	490b      	ldr	r1, [pc, #44]	; (8004d8c <UART_EndRxTransfer+0x30>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	400a      	ands	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	3123      	adds	r1, #35	; 0x23
 8004d6a:	31ff      	adds	r1, #255	; 0xff
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d70:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004d72:	428a      	cmp	r2, r1
 8004d74:	d103      	bne.n	8004d7e <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	310f      	adds	r1, #15
 8004d7a:	438a      	bics	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d82:	2300      	movs	r3, #0
 8004d84:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d86:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004d88:	4770      	bx	lr
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	fffffedf 	.word	0xfffffedf

08004d90 <HAL_UART_Transmit_DMA>:
{
 8004d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d92:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004d94:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8004d96:	0004      	movs	r4, r0
    return HAL_BUSY;
 8004d98:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004d9a:	2a20      	cmp	r2, #32
 8004d9c:	d138      	bne.n	8004e10 <HAL_UART_Transmit_DMA+0x80>
      return HAL_ERROR;
 8004d9e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004da0:	2900      	cmp	r1, #0
 8004da2:	d035      	beq.n	8004e10 <HAL_UART_Transmit_DMA+0x80>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d033      	beq.n	8004e10 <HAL_UART_Transmit_DMA+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da8:	2280      	movs	r2, #128	; 0x80
 8004daa:	68a5      	ldr	r5, [r4, #8]
 8004dac:	0152      	lsls	r2, r2, #5
 8004dae:	4295      	cmp	r5, r2
 8004db0:	d104      	bne.n	8004dbc <HAL_UART_Transmit_DMA+0x2c>
 8004db2:	6922      	ldr	r2, [r4, #16]
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Transmit_DMA+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004db8:	4201      	tst	r1, r0
 8004dba:	d129      	bne.n	8004e10 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8004dbc:	0025      	movs	r5, r4
 8004dbe:	3574      	adds	r5, #116	; 0x74
 8004dc0:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 8004dc2:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004dc4:	2a01      	cmp	r2, #1
 8004dc6:	d023      	beq.n	8004e10 <HAL_UART_Transmit_DMA+0x80>
 8004dc8:	2201      	movs	r2, #1
 8004dca:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 8004dcc:	0022      	movs	r2, r4
 8004dce:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8004dd0:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd2:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8004dd4:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8004dd6:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd8:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8004dda:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	1d27      	adds	r7, r4, #4
 8004dde:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004de0:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8004de2:	42b0      	cmp	r0, r6
 8004de4:	d015      	beq.n	8004e12 <HAL_UART_Transmit_DMA+0x82>
 8004de6:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8004de8:	6386      	str	r6, [r0, #56]	; 0x38
 8004dea:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004dec:	4a0e      	ldr	r2, [pc, #56]	; (8004e28 <HAL_UART_Transmit_DMA+0x98>)
 8004dee:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004df0:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <HAL_UART_Transmit_DMA+0x9c>)
 8004df2:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004df4:	4a0e      	ldr	r2, [pc, #56]	; (8004e30 <HAL_UART_Transmit_DMA+0xa0>)
 8004df6:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004df8:	9a01      	ldr	r2, [sp, #4]
 8004dfa:	3228      	adds	r2, #40	; 0x28
 8004dfc:	f7fe faf2 	bl	80033e4 <HAL_DMA_Start_IT>
 8004e00:	42b0      	cmp	r0, r6
 8004e02:	d006      	beq.n	8004e12 <HAL_UART_Transmit_DMA+0x82>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e04:	2310      	movs	r3, #16
        return HAL_ERROR;
 8004e06:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e08:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8004e0a:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8004e0c:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004e0e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004e10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e12:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8004e14:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e16:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8004e18:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e1a:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e1c:	6899      	ldr	r1, [r3, #8]
 8004e1e:	1892      	adds	r2, r2, r2
 8004e20:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8004e22:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e24:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8004e26:	e7f3      	b.n	8004e10 <HAL_UART_Transmit_DMA+0x80>
 8004e28:	08004e35 	.word	0x08004e35
 8004e2c:	08004e67 	.word	0x08004e67
 8004e30:	08004e73 	.word	0x08004e73

08004e34 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004e34:	2120      	movs	r1, #32
 8004e36:	6803      	ldr	r3, [r0, #0]
{
 8004e38:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004e3a:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e3c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004e3e:	400b      	ands	r3, r1
 8004e40:	d10c      	bne.n	8004e5c <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8004e42:	0011      	movs	r1, r2
 8004e44:	3152      	adds	r1, #82	; 0x52
 8004e46:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	438a      	bics	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e5a:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004e5c:	0010      	movs	r0, r2
 8004e5e:	f7fd fe85 	bl	8002b6c <HAL_UART_TxCpltCallback>
}
 8004e62:	e7fa      	b.n	8004e5a <UART_DMATransmitCplt+0x26>

08004e64 <HAL_UART_TxHalfCpltCallback>:
 8004e64:	4770      	bx	lr

08004e66 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e66:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e68:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004e6a:	f7ff fffb 	bl	8004e64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e6e:	bd10      	pop	{r4, pc}

08004e70 <HAL_UART_ErrorCallback>:
 8004e70:	4770      	bx	lr

08004e72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e72:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e74:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e76:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e78:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e7a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e7c:	6898      	ldr	r0, [r3, #8]
 8004e7e:	0600      	lsls	r0, r0, #24
 8004e80:	d50b      	bpl.n	8004e9a <UART_DMAError+0x28>
 8004e82:	2a21      	cmp	r2, #33	; 0x21
 8004e84:	d109      	bne.n	8004e9a <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e86:	0022      	movs	r2, r4
 8004e88:	2000      	movs	r0, #0
 8004e8a:	3252      	adds	r2, #82	; 0x52
 8004e8c:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	30c0      	adds	r0, #192	; 0xc0
 8004e92:	4382      	bics	r2, r0
 8004e94:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004e96:	2220      	movs	r2, #32
 8004e98:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	065b      	lsls	r3, r3, #25
 8004e9e:	d508      	bpl.n	8004eb2 <UART_DMAError+0x40>
 8004ea0:	2922      	cmp	r1, #34	; 0x22
 8004ea2:	d106      	bne.n	8004eb2 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004ea4:	0023      	movs	r3, r4
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	335a      	adds	r3, #90	; 0x5a
 8004eaa:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8004eac:	0020      	movs	r0, r4
 8004eae:	f7ff ff55 	bl	8004d5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004eb2:	2310      	movs	r3, #16
 8004eb4:	1d22      	adds	r2, r4, #4
 8004eb6:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eb8:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8004ebe:	f7ff ffd7 	bl	8004e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ec2:	bd10      	pop	{r4, pc}

08004ec4 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ec4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	0002      	movs	r2, r0
{
 8004eca:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8004ecc:	325a      	adds	r2, #90	; 0x5a
 8004ece:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8004ed0:	3a08      	subs	r2, #8
 8004ed2:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ed4:	f7ff ffcc 	bl	8004e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed8:	bd10      	pop	{r4, pc}

08004eda <HAL_UARTEx_RxEventCallback>:
}
 8004eda:	4770      	bx	lr

08004edc <HAL_UART_IRQHandler>:
{
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ede:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ee0:	4a82      	ldr	r2, [pc, #520]	; (80050ec <HAL_UART_IRQHandler+0x210>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ee2:	69d9      	ldr	r1, [r3, #28]
{
 8004ee4:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ee6:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ee8:	689f      	ldr	r7, [r3, #8]
  if (errorflags == 0U)
 8004eea:	4211      	tst	r1, r2
 8004eec:	d10b      	bne.n	8004f06 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eee:	2220      	movs	r2, #32
 8004ef0:	4211      	tst	r1, r2
 8004ef2:	d100      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x1a>
 8004ef4:	e076      	b.n	8004fe4 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ef6:	4210      	tst	r0, r2
 8004ef8:	d100      	bne.n	8004efc <HAL_UART_IRQHandler+0x20>
 8004efa:	e073      	b.n	8004fe4 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8004efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8004efe:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d165      	bne.n	8004fd0 <HAL_UART_IRQHandler+0xf4>
 8004f04:	e065      	b.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f06:	2201      	movs	r2, #1
 8004f08:	003e      	movs	r6, r7
 8004f0a:	4016      	ands	r6, r2
 8004f0c:	d102      	bne.n	8004f14 <HAL_UART_IRQHandler+0x38>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f0e:	4d78      	ldr	r5, [pc, #480]	; (80050f0 <HAL_UART_IRQHandler+0x214>)
 8004f10:	4228      	tst	r0, r5
 8004f12:	d067      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x108>
 8004f14:	1d25      	adds	r5, r4, #4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f16:	4211      	tst	r1, r2
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0x4a>
 8004f1a:	05c7      	lsls	r7, r0, #23
 8004f1c:	d503      	bpl.n	8004f26 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f1e:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f20:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8004f22:	433a      	orrs	r2, r7
 8004f24:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f26:	2202      	movs	r2, #2
 8004f28:	4211      	tst	r1, r2
 8004f2a:	d006      	beq.n	8004f3a <HAL_UART_IRQHandler+0x5e>
 8004f2c:	2e00      	cmp	r6, #0
 8004f2e:	d004      	beq.n	8004f3a <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f30:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f32:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8004f34:	1892      	adds	r2, r2, r2
 8004f36:	433a      	orrs	r2, r7
 8004f38:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f3a:	2204      	movs	r2, #4
 8004f3c:	4211      	tst	r1, r2
 8004f3e:	d006      	beq.n	8004f4e <HAL_UART_IRQHandler+0x72>
 8004f40:	2e00      	cmp	r6, #0
 8004f42:	d004      	beq.n	8004f4e <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f44:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f46:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8004f48:	3a02      	subs	r2, #2
 8004f4a:	433a      	orrs	r2, r7
 8004f4c:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f4e:	070a      	lsls	r2, r1, #28
 8004f50:	d508      	bpl.n	8004f64 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f52:	0682      	lsls	r2, r0, #26
 8004f54:	d401      	bmi.n	8004f5a <HAL_UART_IRQHandler+0x7e>
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	d004      	beq.n	8004f64 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f5e:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8004f60:	4332      	orrs	r2, r6
 8004f62:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f64:	2280      	movs	r2, #128	; 0x80
 8004f66:	0112      	lsls	r2, r2, #4
 8004f68:	4211      	tst	r1, r2
 8004f6a:	d006      	beq.n	8004f7a <HAL_UART_IRQHandler+0x9e>
 8004f6c:	0146      	lsls	r6, r0, #5
 8004f6e:	d504      	bpl.n	8004f7a <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f70:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f72:	2320      	movs	r3, #32
 8004f74:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8004f76:	4313      	orrs	r3, r2
 8004f78:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f7a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d028      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f80:	2320      	movs	r3, #32
 8004f82:	4219      	tst	r1, r3
 8004f84:	d006      	beq.n	8004f94 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f86:	4218      	tst	r0, r3
 8004f88:	d004      	beq.n	8004f94 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8004f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8004f90:	0020      	movs	r0, r4
 8004f92:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f94:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004f96:	6fee      	ldr	r6, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f98:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8004f9a:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f9c:	065b      	lsls	r3, r3, #25
 8004f9e:	d402      	bmi.n	8004fa6 <HAL_UART_IRQHandler+0xca>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fa0:	2328      	movs	r3, #40	; 0x28
 8004fa2:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa4:	d01a      	beq.n	8004fdc <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8004fa6:	f7ff fed9 	bl	8004d5c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004faa:	2140      	movs	r1, #64	; 0x40
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	420a      	tst	r2, r1
 8004fb2:	d00f      	beq.n	8004fd4 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb4:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004fb6:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb8:	438a      	bics	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fc0:	4b4c      	ldr	r3, [pc, #304]	; (80050f4 <HAL_UART_IRQHandler+0x218>)
 8004fc2:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fc4:	f7fe fa6e 	bl	80034a4 <HAL_DMA_Abort_IT>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d002      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fcc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004fce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004fd0:	4798      	blx	r3
}
 8004fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8004fd4:	0020      	movs	r0, r4
 8004fd6:	f7ff ff4b 	bl	8004e70 <HAL_UART_ErrorCallback>
 8004fda:	e7fa      	b.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8004fdc:	f7ff ff48 	bl	8004e70 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	67ee      	str	r6, [r5, #124]	; 0x7c
 8004fe2:	e7f6      	b.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004fe6:	2d01      	cmp	r5, #1
 8004fe8:	d15c      	bne.n	80050a4 <HAL_UART_IRQHandler+0x1c8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004fea:	2210      	movs	r2, #16
 8004fec:	4211      	tst	r1, r2
 8004fee:	d059      	beq.n	80050a4 <HAL_UART_IRQHandler+0x1c8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004ff0:	4210      	tst	r0, r2
 8004ff2:	d057      	beq.n	80050a4 <HAL_UART_IRQHandler+0x1c8>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff4:	2140      	movs	r1, #64	; 0x40
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ff6:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	6898      	ldr	r0, [r3, #8]
 8004ffa:	4008      	ands	r0, r1
 8004ffc:	d035      	beq.n	800506a <HAL_UART_IRQHandler+0x18e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ffe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005000:	6806      	ldr	r6, [r0, #0]
 8005002:	6871      	ldr	r1, [r6, #4]
 8005004:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8005006:	2900      	cmp	r1, #0
 8005008:	d0e3      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800500a:	2758      	movs	r7, #88	; 0x58
 800500c:	46bc      	mov	ip, r7
 800500e:	44a4      	add	ip, r4
 8005010:	4667      	mov	r7, ip
 8005012:	883f      	ldrh	r7, [r7, #0]
 8005014:	428f      	cmp	r7, r1
 8005016:	d9dc      	bls.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8005018:	275a      	movs	r7, #90	; 0x5a
 800501a:	46bc      	mov	ip, r7
 800501c:	44a4      	add	ip, r4
 800501e:	4667      	mov	r7, ip
 8005020:	8039      	strh	r1, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005022:	6831      	ldr	r1, [r6, #0]
 8005024:	2620      	movs	r6, #32
 8005026:	4031      	ands	r1, r6
 8005028:	468c      	mov	ip, r1
 800502a:	d112      	bne.n	8005052 <HAL_UART_IRQHandler+0x176>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800502c:	6819      	ldr	r1, [r3, #0]
 800502e:	4f32      	ldr	r7, [pc, #200]	; (80050f8 <HAL_UART_IRQHandler+0x21c>)
 8005030:	4039      	ands	r1, r7
 8005032:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005034:	6899      	ldr	r1, [r3, #8]
 8005036:	43a9      	bics	r1, r5
 8005038:	6099      	str	r1, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503a:	6899      	ldr	r1, [r3, #8]
 800503c:	353f      	adds	r5, #63	; 0x3f
 800503e:	43a9      	bics	r1, r5
 8005040:	6099      	str	r1, [r3, #8]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005042:	4661      	mov	r1, ip
          huart->RxState = HAL_UART_STATE_READY;
 8005044:	67e6      	str	r6, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	4391      	bics	r1, r2
 800504c:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800504e:	f7fe fa09 	bl	8003464 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005052:	0023      	movs	r3, r4
 8005054:	0022      	movs	r2, r4
 8005056:	335a      	adds	r3, #90	; 0x5a
 8005058:	3258      	adds	r2, #88	; 0x58
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	8811      	ldrh	r1, [r2, #0]
 800505e:	1ac9      	subs	r1, r1, r3
 8005060:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005062:	0020      	movs	r0, r4
 8005064:	f7ff ff39 	bl	8004eda <HAL_UARTEx_RxEventCallback>
 8005068:	e7b3      	b.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800506a:	0026      	movs	r6, r4
 800506c:	365a      	adds	r6, #90	; 0x5a
 800506e:	8837      	ldrh	r7, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8005070:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005072:	b2bf      	uxth	r7, r7
      if (  (huart->RxXferCount > 0U)
 8005074:	2900      	cmp	r1, #0
 8005076:	d0ac      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005078:	0021      	movs	r1, r4
 800507a:	3158      	adds	r1, #88	; 0x58
 800507c:	8809      	ldrh	r1, [r1, #0]
 800507e:	1bc9      	subs	r1, r1, r7
 8005080:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8005082:	2900      	cmp	r1, #0
 8005084:	d0a5      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005086:	681e      	ldr	r6, [r3, #0]
 8005088:	4f1c      	ldr	r7, [pc, #112]	; (80050fc <HAL_UART_IRQHandler+0x220>)
 800508a:	403e      	ands	r6, r7
 800508c:	601e      	str	r6, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	689e      	ldr	r6, [r3, #8]
 8005090:	43ae      	bics	r6, r5
        huart->RxState = HAL_UART_STATE_READY;
 8005092:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	609e      	str	r6, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005096:	67e5      	str	r5, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005098:	6620      	str	r0, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 800509a:	6660      	str	r0, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	4390      	bics	r0, r2
 80050a0:	6018      	str	r0, [r3, #0]
 80050a2:	e7de      	b.n	8005062 <HAL_UART_IRQHandler+0x186>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	0352      	lsls	r2, r2, #13
 80050a8:	4211      	tst	r1, r2
 80050aa:	d006      	beq.n	80050ba <HAL_UART_IRQHandler+0x1de>
 80050ac:	027d      	lsls	r5, r7, #9
 80050ae:	d504      	bpl.n	80050ba <HAL_UART_IRQHandler+0x1de>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050b0:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80050b2:	0020      	movs	r0, r4
 80050b4:	f000 fb40 	bl	8005738 <HAL_UARTEx_WakeupCallback>
    return;
 80050b8:	e78b      	b.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	4211      	tst	r1, r2
 80050be:	d003      	beq.n	80050c8 <HAL_UART_IRQHandler+0x1ec>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050c0:	4210      	tst	r0, r2
 80050c2:	d001      	beq.n	80050c8 <HAL_UART_IRQHandler+0x1ec>
    if (huart->TxISR != NULL)
 80050c4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80050c6:	e71a      	b.n	8004efe <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050c8:	2540      	movs	r5, #64	; 0x40
 80050ca:	4229      	tst	r1, r5
 80050cc:	d100      	bne.n	80050d0 <HAL_UART_IRQHandler+0x1f4>
 80050ce:	e780      	b.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
 80050d0:	4228      	tst	r0, r5
 80050d2:	d100      	bne.n	80050d6 <HAL_UART_IRQHandler+0x1fa>
 80050d4:	e77d      	b.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d6:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050d8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050da:	43aa      	bics	r2, r5
 80050dc:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80050de:	2320      	movs	r3, #32
 80050e0:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 80050e6:	f7fd fd41 	bl	8002b6c <HAL_UART_TxCpltCallback>
 80050ea:	e772      	b.n	8004fd2 <HAL_UART_IRQHandler+0xf6>
 80050ec:	0000080f 	.word	0x0000080f
 80050f0:	04000120 	.word	0x04000120
 80050f4:	08004ec5 	.word	0x08004ec5
 80050f8:	fffffeff 	.word	0xfffffeff
 80050fc:	fffffedf 	.word	0xfffffedf

08005100 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005100:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8005102:	b510      	push	{r4, lr}
 8005104:	6803      	ldr	r3, [r0, #0]
 8005106:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005108:	2a22      	cmp	r2, #34	; 0x22
 800510a:	d134      	bne.n	8005176 <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 800510c:	0002      	movs	r2, r0
 800510e:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005112:	8812      	ldrh	r2, [r2, #0]
 8005114:	4013      	ands	r3, r2
 8005116:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005118:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800511a:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800511c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800511e:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8005120:	3301      	adds	r3, #1
 8005122:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005124:	8813      	ldrh	r3, [r2, #0]
 8005126:	3b01      	subs	r3, #1
 8005128:	b29b      	uxth	r3, r3
 800512a:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800512c:	8812      	ldrh	r2, [r2, #0]
 800512e:	b292      	uxth	r2, r2
 8005130:	2a00      	cmp	r2, #0
 8005132:	d11b      	bne.n	800516c <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005134:	6803      	ldr	r3, [r0, #0]
 8005136:	4812      	ldr	r0, [pc, #72]	; (8005180 <UART_RxISR_8BIT+0x80>)
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	4001      	ands	r1, r0
 800513c:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	6899      	ldr	r1, [r3, #8]
 8005140:	3023      	adds	r0, #35	; 0x23
 8005142:	30ff      	adds	r0, #255	; 0xff
 8005144:	4381      	bics	r1, r0
 8005146:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005148:	2120      	movs	r1, #32
 800514a:	67e1      	str	r1, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800514c:	6662      	str	r2, [r4, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005150:	4282      	cmp	r2, r0
 8005152:	d10c      	bne.n	800516e <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	3910      	subs	r1, #16
 8005158:	438a      	bics	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800515c:	0023      	movs	r3, r4
 800515e:	3358      	adds	r3, #88	; 0x58
 8005160:	8819      	ldrh	r1, [r3, #0]
 8005162:	0020      	movs	r0, r4
 8005164:	f7ff feb9 	bl	8004eda <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	2300      	movs	r3, #0
 800516a:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800516c:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800516e:	0020      	movs	r0, r4
 8005170:	f7fd fd04 	bl	8002b7c <HAL_UART_RxCpltCallback>
 8005174:	e7f8      	b.n	8005168 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005176:	2208      	movs	r2, #8
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	430a      	orrs	r2, r1
 800517c:	619a      	str	r2, [r3, #24]
}
 800517e:	e7f5      	b.n	800516c <UART_RxISR_8BIT+0x6c>
 8005180:	fffffedf 	.word	0xfffffedf

08005184 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005184:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8005186:	b510      	push	{r4, lr}
 8005188:	6803      	ldr	r3, [r0, #0]
 800518a:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800518c:	2a22      	cmp	r2, #34	; 0x22
 800518e:	d131      	bne.n	80051f4 <UART_RxISR_16BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005190:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8005192:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005194:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005196:	8800      	ldrh	r0, [r0, #0]
 8005198:	4001      	ands	r1, r0
 800519a:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800519c:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 800519e:	3202      	adds	r2, #2
 80051a0:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 80051a2:	315a      	adds	r1, #90	; 0x5a
 80051a4:	880a      	ldrh	r2, [r1, #0]
 80051a6:	3a01      	subs	r2, #1
 80051a8:	b292      	uxth	r2, r2
 80051aa:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 80051ac:	880a      	ldrh	r2, [r1, #0]
 80051ae:	b292      	uxth	r2, r2
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d11a      	bne.n	80051ea <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	4812      	ldr	r0, [pc, #72]	; (8005200 <UART_RxISR_16BIT+0x7c>)
 80051b8:	4001      	ands	r1, r0
 80051ba:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051bc:	6899      	ldr	r1, [r3, #8]
 80051be:	3023      	adds	r0, #35	; 0x23
 80051c0:	30ff      	adds	r0, #255	; 0xff
 80051c2:	4381      	bics	r1, r0
 80051c4:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051c6:	2120      	movs	r1, #32
 80051c8:	67e1      	str	r1, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051ca:	6662      	str	r2, [r4, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80051ce:	4282      	cmp	r2, r0
 80051d0:	d10c      	bne.n	80051ec <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	3910      	subs	r1, #16
 80051d6:	438a      	bics	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051da:	0023      	movs	r3, r4
 80051dc:	3358      	adds	r3, #88	; 0x58
 80051de:	8819      	ldrh	r1, [r3, #0]
 80051e0:	0020      	movs	r0, r4
 80051e2:	f7ff fe7a 	bl	8004eda <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e6:	2300      	movs	r3, #0
 80051e8:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051ea:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80051ec:	0020      	movs	r0, r4
 80051ee:	f7fd fcc5 	bl	8002b7c <HAL_UART_RxCpltCallback>
 80051f2:	e7f8      	b.n	80051e6 <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051f4:	2208      	movs	r2, #8
 80051f6:	6999      	ldr	r1, [r3, #24]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	619a      	str	r2, [r3, #24]
}
 80051fc:	e7f5      	b.n	80051ea <UART_RxISR_16BIT+0x66>
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	fffffedf 	.word	0xfffffedf

08005204 <UART_SetConfig>:
{
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005208:	6925      	ldr	r5, [r4, #16]
 800520a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800520c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800520e:	432a      	orrs	r2, r5
 8005210:	6965      	ldr	r5, [r4, #20]
 8005212:	69c1      	ldr	r1, [r0, #28]
 8005214:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	4d70      	ldr	r5, [pc, #448]	; (80053dc <UART_SetConfig+0x1d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800521a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800521c:	4028      	ands	r0, r5
 800521e:	4302      	orrs	r2, r0
 8005220:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	486e      	ldr	r0, [pc, #440]	; (80053e0 <UART_SetConfig+0x1dc>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005226:	4d6f      	ldr	r5, [pc, #444]	; (80053e4 <UART_SetConfig+0x1e0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005228:	4002      	ands	r2, r0
 800522a:	68e0      	ldr	r0, [r4, #12]
 800522c:	4302      	orrs	r2, r0
 800522e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005230:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005232:	42ab      	cmp	r3, r5
 8005234:	d001      	beq.n	800523a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8005236:	6a22      	ldr	r2, [r4, #32]
 8005238:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	4e6a      	ldr	r6, [pc, #424]	; (80053e8 <UART_SetConfig+0x1e4>)
 800523e:	4032      	ands	r2, r6
 8005240:	4302      	orrs	r2, r0
 8005242:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005244:	4a69      	ldr	r2, [pc, #420]	; (80053ec <UART_SetConfig+0x1e8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d113      	bne.n	8005272 <UART_SetConfig+0x6e>
 800524a:	2203      	movs	r2, #3
 800524c:	4b68      	ldr	r3, [pc, #416]	; (80053f0 <UART_SetConfig+0x1ec>)
 800524e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005250:	4013      	ands	r3, r2
 8005252:	4a68      	ldr	r2, [pc, #416]	; (80053f4 <UART_SetConfig+0x1f0>)
 8005254:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	4299      	cmp	r1, r3
 800525c:	d000      	beq.n	8005260 <UART_SetConfig+0x5c>
 800525e:	e08f      	b.n	8005380 <UART_SetConfig+0x17c>
    switch (clocksource)
 8005260:	2808      	cmp	r0, #8
 8005262:	d827      	bhi.n	80052b4 <UART_SetConfig+0xb0>
 8005264:	f7fa ff62 	bl	800012c <__gnu_thumb1_case_uqi>
 8005268:	26686560 	.word	0x26686560
 800526c:	26262686 	.word	0x26262686
 8005270:	89          	.byte	0x89
 8005271:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005272:	4a61      	ldr	r2, [pc, #388]	; (80053f8 <UART_SetConfig+0x1f4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d107      	bne.n	8005288 <UART_SetConfig+0x84>
 8005278:	220c      	movs	r2, #12
 800527a:	4b5d      	ldr	r3, [pc, #372]	; (80053f0 <UART_SetConfig+0x1ec>)
 800527c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527e:	401a      	ands	r2, r3
 8005280:	4b5c      	ldr	r3, [pc, #368]	; (80053f4 <UART_SetConfig+0x1f0>)
 8005282:	189b      	adds	r3, r3, r2
 8005284:	7918      	ldrb	r0, [r3, #4]
 8005286:	e7e6      	b.n	8005256 <UART_SetConfig+0x52>
 8005288:	4a5c      	ldr	r2, [pc, #368]	; (80053fc <UART_SetConfig+0x1f8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <UART_SetConfig+0x8c>
 800528e:	e09c      	b.n	80053ca <UART_SetConfig+0x1c6>
 8005290:	4a5b      	ldr	r2, [pc, #364]	; (8005400 <UART_SetConfig+0x1fc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d100      	bne.n	8005298 <UART_SetConfig+0x94>
 8005296:	e098      	b.n	80053ca <UART_SetConfig+0x1c6>
 8005298:	42ab      	cmp	r3, r5
 800529a:	d10b      	bne.n	80052b4 <UART_SetConfig+0xb0>
 800529c:	21c0      	movs	r1, #192	; 0xc0
 800529e:	2080      	movs	r0, #128	; 0x80
 80052a0:	4a53      	ldr	r2, [pc, #332]	; (80053f0 <UART_SetConfig+0x1ec>)
 80052a2:	0109      	lsls	r1, r1, #4
 80052a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80052a6:	00c0      	lsls	r0, r0, #3
 80052a8:	400b      	ands	r3, r1
 80052aa:	4283      	cmp	r3, r0
 80052ac:	d039      	beq.n	8005322 <UART_SetConfig+0x11e>
 80052ae:	d803      	bhi.n	80052b8 <UART_SetConfig+0xb4>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 80052b4:	2001      	movs	r0, #1
 80052b6:	e00d      	b.n	80052d4 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b8:	2080      	movs	r0, #128	; 0x80
 80052ba:	0100      	lsls	r0, r0, #4
 80052bc:	4283      	cmp	r3, r0
 80052be:	d00d      	beq.n	80052dc <UART_SetConfig+0xd8>
 80052c0:	428b      	cmp	r3, r1
 80052c2:	d1f7      	bne.n	80052b4 <UART_SetConfig+0xb0>
        pclk = (uint32_t) LSE_VALUE;
 80052c4:	2080      	movs	r0, #128	; 0x80
 80052c6:	0200      	lsls	r0, r0, #8
 80052c8:	e00f      	b.n	80052ea <UART_SetConfig+0xe6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ca:	f7fe ff03 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d10b      	bne.n	80052ea <UART_SetConfig+0xe6>
 80052d2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80052d8:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80052da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052dc:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 80052de:	4b49      	ldr	r3, [pc, #292]	; (8005404 <UART_SetConfig+0x200>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052e0:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 80052e2:	17c0      	asrs	r0, r0, #31
 80052e4:	4018      	ands	r0, r3
 80052e6:	4b48      	ldr	r3, [pc, #288]	; (8005408 <UART_SetConfig+0x204>)
 80052e8:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052ea:	2203      	movs	r2, #3
 80052ec:	6863      	ldr	r3, [r4, #4]
 80052ee:	435a      	muls	r2, r3
 80052f0:	4282      	cmp	r2, r0
 80052f2:	d8df      	bhi.n	80052b4 <UART_SetConfig+0xb0>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052f4:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052f6:	4282      	cmp	r2, r0
 80052f8:	d3dc      	bcc.n	80052b4 <UART_SetConfig+0xb0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052fa:	2700      	movs	r7, #0
 80052fc:	0e02      	lsrs	r2, r0, #24
 80052fe:	0201      	lsls	r1, r0, #8
 8005300:	085e      	lsrs	r6, r3, #1
 8005302:	1989      	adds	r1, r1, r6
 8005304:	417a      	adcs	r2, r7
 8005306:	0008      	movs	r0, r1
 8005308:	0011      	movs	r1, r2
 800530a:	001a      	movs	r2, r3
 800530c:	003b      	movs	r3, r7
 800530e:	f7fb f897 	bl	8000440 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005312:	4b3e      	ldr	r3, [pc, #248]	; (800540c <UART_SetConfig+0x208>)
 8005314:	18c2      	adds	r2, r0, r3
 8005316:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <UART_SetConfig+0x20c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005318:	429a      	cmp	r2, r3
 800531a:	d8cb      	bhi.n	80052b4 <UART_SetConfig+0xb0>
        huart->Instance->BRR = usartdiv;
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	60d8      	str	r0, [r3, #12]
 8005320:	e7d7      	b.n	80052d2 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8005322:	f7fe fb2f 	bl	8003984 <HAL_RCC_GetSysClockFreq>
        break;
 8005326:	e7d2      	b.n	80052ce <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005328:	f7fe fed4 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800532c:	2800      	cmp	r0, #0
 800532e:	d10b      	bne.n	8005348 <UART_SetConfig+0x144>
 8005330:	e7cf      	b.n	80052d2 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005332:	f7fe fedf 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005336:	e7f9      	b.n	800532c <UART_SetConfig+0x128>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005338:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <UART_SetConfig+0x1ec>)
 800533a:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 800533c:	4b31      	ldr	r3, [pc, #196]	; (8005404 <UART_SetConfig+0x200>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533e:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8005340:	17c0      	asrs	r0, r0, #31
 8005342:	4018      	ands	r0, r3
 8005344:	4b30      	ldr	r3, [pc, #192]	; (8005408 <UART_SetConfig+0x204>)
 8005346:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005348:	6863      	ldr	r3, [r4, #4]
 800534a:	0040      	lsls	r0, r0, #1
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	18c0      	adds	r0, r0, r3
 8005350:	6861      	ldr	r1, [r4, #4]
 8005352:	f7fa feff 	bl	8000154 <__udivsi3>
 8005356:	0403      	lsls	r3, r0, #16
 8005358:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800535a:	492e      	ldr	r1, [pc, #184]	; (8005414 <UART_SetConfig+0x210>)
 800535c:	3a10      	subs	r2, #16
 800535e:	428a      	cmp	r2, r1
 8005360:	d8a8      	bhi.n	80052b4 <UART_SetConfig+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005362:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005364:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005366:	4390      	bics	r0, r2
 8005368:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800536a:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800536c:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800536e:	4318      	orrs	r0, r3
 8005370:	60d0      	str	r0, [r2, #12]
 8005372:	e7ae      	b.n	80052d2 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8005374:	f7fe fb06 	bl	8003984 <HAL_RCC_GetSysClockFreq>
        break;
 8005378:	e7d8      	b.n	800532c <UART_SetConfig+0x128>
        pclk = (uint32_t) LSE_VALUE;
 800537a:	2080      	movs	r0, #128	; 0x80
 800537c:	0200      	lsls	r0, r0, #8
 800537e:	e7e3      	b.n	8005348 <UART_SetConfig+0x144>
    switch (clocksource)
 8005380:	2808      	cmp	r0, #8
 8005382:	d897      	bhi.n	80052b4 <UART_SetConfig+0xb0>
 8005384:	f7fa fec8 	bl	8000118 <__gnu_thumb1_case_sqi>
 8005388:	96080525 	.word	0x96080525
 800538c:	9696961b 	.word	0x9696961b
 8005390:	1e          	.byte	0x1e
 8005391:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK2Freq();
 8005392:	f7fe feaf 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005396:	e01e      	b.n	80053d6 <UART_SetConfig+0x1d2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <UART_SetConfig+0x1ec>)
 800539a:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 800539c:	4b19      	ldr	r3, [pc, #100]	; (8005404 <UART_SetConfig+0x200>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800539e:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 80053a0:	17c0      	asrs	r0, r0, #31
 80053a2:	4018      	ands	r0, r3
 80053a4:	4b18      	ldr	r3, [pc, #96]	; (8005408 <UART_SetConfig+0x204>)
 80053a6:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053a8:	6863      	ldr	r3, [r4, #4]
 80053aa:	6861      	ldr	r1, [r4, #4]
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	1818      	adds	r0, r3, r0
 80053b0:	f7fa fed0 	bl	8000154 <__udivsi3>
 80053b4:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b6:	0002      	movs	r2, r0
 80053b8:	4b16      	ldr	r3, [pc, #88]	; (8005414 <UART_SetConfig+0x210>)
 80053ba:	3a10      	subs	r2, #16
 80053bc:	e7ac      	b.n	8005318 <UART_SetConfig+0x114>
        pclk = HAL_RCC_GetSysClockFreq();
 80053be:	f7fe fae1 	bl	8003984 <HAL_RCC_GetSysClockFreq>
        break;
 80053c2:	e008      	b.n	80053d6 <UART_SetConfig+0x1d2>
        pclk = (uint32_t) LSE_VALUE;
 80053c4:	2080      	movs	r0, #128	; 0x80
 80053c6:	0200      	lsls	r0, r0, #8
 80053c8:	e7ee      	b.n	80053a8 <UART_SetConfig+0x1a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	4299      	cmp	r1, r3
 80053d0:	d0aa      	beq.n	8005328 <UART_SetConfig+0x124>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d2:	f7fe fe7f 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d1e6      	bne.n	80053a8 <UART_SetConfig+0x1a4>
 80053da:	e77a      	b.n	80052d2 <UART_SetConfig+0xce>
 80053dc:	efff69f3 	.word	0xefff69f3
 80053e0:	ffffcfff 	.word	0xffffcfff
 80053e4:	40004800 	.word	0x40004800
 80053e8:	fffff4ff 	.word	0xfffff4ff
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40021000 	.word	0x40021000
 80053f4:	080079bd 	.word	0x080079bd
 80053f8:	40004400 	.word	0x40004400
 80053fc:	40004c00 	.word	0x40004c00
 8005400:	40005000 	.word	0x40005000
 8005404:	ff48e500 	.word	0xff48e500
 8005408:	00f42400 	.word	0x00f42400
 800540c:	fffffd00 	.word	0xfffffd00
 8005410:	000ffcff 	.word	0x000ffcff
 8005414:	0000ffef 	.word	0x0000ffef

08005418 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005418:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800541a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800541c:	07da      	lsls	r2, r3, #31
 800541e:	d506      	bpl.n	800542e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005420:	6801      	ldr	r1, [r0, #0]
 8005422:	4c28      	ldr	r4, [pc, #160]	; (80054c4 <UART_AdvFeatureConfig+0xac>)
 8005424:	684a      	ldr	r2, [r1, #4]
 8005426:	4022      	ands	r2, r4
 8005428:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800542a:	4322      	orrs	r2, r4
 800542c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800542e:	079a      	lsls	r2, r3, #30
 8005430:	d506      	bpl.n	8005440 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005432:	6801      	ldr	r1, [r0, #0]
 8005434:	4c24      	ldr	r4, [pc, #144]	; (80054c8 <UART_AdvFeatureConfig+0xb0>)
 8005436:	684a      	ldr	r2, [r1, #4]
 8005438:	4022      	ands	r2, r4
 800543a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800543c:	4322      	orrs	r2, r4
 800543e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005440:	075a      	lsls	r2, r3, #29
 8005442:	d506      	bpl.n	8005452 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005444:	6801      	ldr	r1, [r0, #0]
 8005446:	4c21      	ldr	r4, [pc, #132]	; (80054cc <UART_AdvFeatureConfig+0xb4>)
 8005448:	684a      	ldr	r2, [r1, #4]
 800544a:	4022      	ands	r2, r4
 800544c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800544e:	4322      	orrs	r2, r4
 8005450:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005452:	071a      	lsls	r2, r3, #28
 8005454:	d506      	bpl.n	8005464 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005456:	6801      	ldr	r1, [r0, #0]
 8005458:	4c1d      	ldr	r4, [pc, #116]	; (80054d0 <UART_AdvFeatureConfig+0xb8>)
 800545a:	684a      	ldr	r2, [r1, #4]
 800545c:	4022      	ands	r2, r4
 800545e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005460:	4322      	orrs	r2, r4
 8005462:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005464:	06da      	lsls	r2, r3, #27
 8005466:	d506      	bpl.n	8005476 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005468:	6801      	ldr	r1, [r0, #0]
 800546a:	4c1a      	ldr	r4, [pc, #104]	; (80054d4 <UART_AdvFeatureConfig+0xbc>)
 800546c:	688a      	ldr	r2, [r1, #8]
 800546e:	4022      	ands	r2, r4
 8005470:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005472:	4322      	orrs	r2, r4
 8005474:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005476:	069a      	lsls	r2, r3, #26
 8005478:	d506      	bpl.n	8005488 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547a:	6801      	ldr	r1, [r0, #0]
 800547c:	4c16      	ldr	r4, [pc, #88]	; (80054d8 <UART_AdvFeatureConfig+0xc0>)
 800547e:	688a      	ldr	r2, [r1, #8]
 8005480:	4022      	ands	r2, r4
 8005482:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005484:	4322      	orrs	r2, r4
 8005486:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005488:	065a      	lsls	r2, r3, #25
 800548a:	d510      	bpl.n	80054ae <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800548c:	6801      	ldr	r1, [r0, #0]
 800548e:	4d13      	ldr	r5, [pc, #76]	; (80054dc <UART_AdvFeatureConfig+0xc4>)
 8005490:	684a      	ldr	r2, [r1, #4]
 8005492:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005494:	402a      	ands	r2, r5
 8005496:	4322      	orrs	r2, r4
 8005498:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	0352      	lsls	r2, r2, #13
 800549e:	4294      	cmp	r4, r2
 80054a0:	d105      	bne.n	80054ae <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054a2:	684a      	ldr	r2, [r1, #4]
 80054a4:	4c0e      	ldr	r4, [pc, #56]	; (80054e0 <UART_AdvFeatureConfig+0xc8>)
 80054a6:	4022      	ands	r2, r4
 80054a8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80054aa:	4322      	orrs	r2, r4
 80054ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ae:	061b      	lsls	r3, r3, #24
 80054b0:	d506      	bpl.n	80054c0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054b2:	6802      	ldr	r2, [r0, #0]
 80054b4:	490b      	ldr	r1, [pc, #44]	; (80054e4 <UART_AdvFeatureConfig+0xcc>)
 80054b6:	6853      	ldr	r3, [r2, #4]
 80054b8:	400b      	ands	r3, r1
 80054ba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80054bc:	430b      	orrs	r3, r1
 80054be:	6053      	str	r3, [r2, #4]
}
 80054c0:	bd30      	pop	{r4, r5, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	fffdffff 	.word	0xfffdffff
 80054c8:	fffeffff 	.word	0xfffeffff
 80054cc:	fffbffff 	.word	0xfffbffff
 80054d0:	ffff7fff 	.word	0xffff7fff
 80054d4:	ffffefff 	.word	0xffffefff
 80054d8:	ffffdfff 	.word	0xffffdfff
 80054dc:	ffefffff 	.word	0xffefffff
 80054e0:	ff9fffff 	.word	0xff9fffff
 80054e4:	fff7ffff 	.word	0xfff7ffff

080054e8 <UART_WaitOnFlagUntilTimeout>:
{
 80054e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054ea:	2780      	movs	r7, #128	; 0x80
{
 80054ec:	0004      	movs	r4, r0
 80054ee:	000e      	movs	r6, r1
 80054f0:	0015      	movs	r5, r2
 80054f2:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f4:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	69d3      	ldr	r3, [r2, #28]
 80054fa:	4033      	ands	r3, r6
 80054fc:	1b9b      	subs	r3, r3, r6
 80054fe:	4259      	negs	r1, r3
 8005500:	414b      	adcs	r3, r1
 8005502:	42ab      	cmp	r3, r5
 8005504:	d001      	beq.n	800550a <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8005506:	2000      	movs	r0, #0
 8005508:	e01c      	b.n	8005544 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800550a:	9b08      	ldr	r3, [sp, #32]
 800550c:	3301      	adds	r3, #1
 800550e:	d0f3      	beq.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005510:	f7fd f9da 	bl	80028c8 <HAL_GetTick>
 8005514:	9b01      	ldr	r3, [sp, #4]
 8005516:	9a08      	ldr	r2, [sp, #32]
 8005518:	1ac0      	subs	r0, r0, r3
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	4290      	cmp	r0, r2
 800551e:	d801      	bhi.n	8005524 <UART_WaitOnFlagUntilTimeout+0x3c>
 8005520:	2a00      	cmp	r2, #0
 8005522:	d110      	bne.n	8005546 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4913      	ldr	r1, [pc, #76]	; (8005574 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005528:	400a      	ands	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	31a3      	adds	r1, #163	; 0xa3
 8005530:	31ff      	adds	r1, #255	; 0xff
 8005532:	438a      	bics	r2, r1
 8005534:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005536:	2320      	movs	r3, #32
 8005538:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800553a:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800553c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800553e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005540:	3474      	adds	r4, #116	; 0x74
 8005542:	7023      	strb	r3, [r4, #0]
}
 8005544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005546:	2104      	movs	r1, #4
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	420a      	tst	r2, r1
 800554c:	d0d3      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	423a      	tst	r2, r7
 8005552:	d0d0      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005554:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4906      	ldr	r1, [pc, #24]	; (8005574 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800555a:	400a      	ands	r2, r1
 800555c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	31a3      	adds	r1, #163	; 0xa3
 8005562:	31ff      	adds	r1, #255	; 0xff
 8005564:	438a      	bics	r2, r1
 8005566:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005568:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800556a:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 800556c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800556e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005570:	67d3      	str	r3, [r2, #124]	; 0x7c
 8005572:	e7e3      	b.n	800553c <UART_WaitOnFlagUntilTimeout+0x54>
 8005574:	fffffe5f 	.word	0xfffffe5f

08005578 <UART_CheckIdleState>:
{
 8005578:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557a:	2600      	movs	r6, #0
{
 800557c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557e:	1d03      	adds	r3, r0, #4
 8005580:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005582:	f7fd f9a1 	bl	80028c8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005586:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005588:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	071b      	lsls	r3, r3, #28
 800558e:	d416      	bmi.n	80055be <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	075b      	lsls	r3, r3, #29
 8005596:	d50a      	bpl.n	80055ae <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005598:	2180      	movs	r1, #128	; 0x80
 800559a:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <UART_CheckIdleState+0x60>)
 800559c:	2200      	movs	r2, #0
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	03c9      	lsls	r1, r1, #15
 80055a2:	002b      	movs	r3, r5
 80055a4:	0020      	movs	r0, r4
 80055a6:	f7ff ff9f 	bl	80054e8 <UART_WaitOnFlagUntilTimeout>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d112      	bne.n	80055d4 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80055ae:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80055b2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055b4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80055b8:	3474      	adds	r4, #116	; 0x74
 80055ba:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80055bc:	e00b      	b.n	80055d6 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055be:	2180      	movs	r1, #128	; 0x80
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <UART_CheckIdleState+0x60>)
 80055c2:	0032      	movs	r2, r6
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	0389      	lsls	r1, r1, #14
 80055c8:	0003      	movs	r3, r0
 80055ca:	0020      	movs	r0, r4
 80055cc:	f7ff ff8c 	bl	80054e8 <UART_WaitOnFlagUntilTimeout>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d0dd      	beq.n	8005590 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80055d4:	2003      	movs	r0, #3
}
 80055d6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80055d8:	01ffffff 	.word	0x01ffffff

080055dc <HAL_UART_Init>:
{
 80055dc:	b510      	push	{r4, lr}
 80055de:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80055e2:	2001      	movs	r0, #1
}
 80055e4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d104      	bne.n	80055f6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80055ec:	0002      	movs	r2, r0
 80055ee:	3274      	adds	r2, #116	; 0x74
 80055f0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80055f2:	f7fd f9bf 	bl	8002974 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80055f6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80055f8:	2101      	movs	r1, #1
 80055fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80055fe:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005600:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005602:	438b      	bics	r3, r1
 8005604:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005606:	f7ff fdfd 	bl	8005204 <UART_SetConfig>
 800560a:	2801      	cmp	r0, #1
 800560c:	d0e9      	beq.n	80055e2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800560e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005614:	0020      	movs	r0, r4
 8005616:	f7ff feff 	bl	8005418 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	4907      	ldr	r1, [pc, #28]	; (800563c <HAL_UART_Init+0x60>)
 800561e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005620:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005622:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005624:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	438a      	bics	r2, r1
 800562c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800562e:	2201      	movs	r2, #1
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005636:	f7ff ff9f 	bl	8005578 <UART_CheckIdleState>
 800563a:	e7d3      	b.n	80055e4 <HAL_UART_Init+0x8>
 800563c:	ffffb7ff 	.word	0xffffb7ff

08005640 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005640:	0003      	movs	r3, r0
 8005642:	3358      	adds	r3, #88	; 0x58
{
 8005644:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8005646:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 8005648:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 800564a:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 800564c:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 800564e:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8005650:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8005652:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005654:	0164      	lsls	r4, r4, #5
 8005656:	3304      	adds	r3, #4
 8005658:	42a1      	cmp	r1, r4
 800565a:	d123      	bne.n	80056a4 <UART_Start_Receive_IT+0x64>
 800565c:	6902      	ldr	r2, [r0, #16]
 800565e:	2a00      	cmp	r2, #0
 8005660:	d11e      	bne.n	80056a0 <UART_Start_Receive_IT+0x60>
 8005662:	4a19      	ldr	r2, [pc, #100]	; (80056c8 <UART_Start_Receive_IT+0x88>)
 8005664:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005666:	2200      	movs	r2, #0
 8005668:	1d03      	adds	r3, r0, #4
 800566a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800566c:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566e:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005670:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	6894      	ldr	r4, [r2, #8]
 8005674:	3b21      	subs	r3, #33	; 0x21
 8005676:	4323      	orrs	r3, r4
 8005678:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	015b      	lsls	r3, r3, #5
 800567e:	4299      	cmp	r1, r3
 8005680:	d120      	bne.n	80056c4 <UART_Start_Receive_IT+0x84>
 8005682:	6903      	ldr	r3, [r0, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11d      	bne.n	80056c4 <UART_Start_Receive_IT+0x84>
    huart->RxISR = UART_RxISR_16BIT;
 8005688:	4b10      	ldr	r3, [pc, #64]	; (80056cc <UART_Start_Receive_IT+0x8c>)
    huart->RxISR = UART_RxISR_8BIT;
 800568a:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800568c:	0003      	movs	r3, r0
 800568e:	2000      	movs	r0, #0
 8005690:	3374      	adds	r3, #116	; 0x74
 8005692:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005694:	2390      	movs	r3, #144	; 0x90
 8005696:	6811      	ldr	r1, [r2, #0]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	430b      	orrs	r3, r1
 800569c:	6013      	str	r3, [r2, #0]
}
 800569e:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80056a0:	22ff      	movs	r2, #255	; 0xff
 80056a2:	e7df      	b.n	8005664 <UART_Start_Receive_IT+0x24>
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d104      	bne.n	80056b2 <UART_Start_Receive_IT+0x72>
 80056a8:	6902      	ldr	r2, [r0, #16]
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	d0f8      	beq.n	80056a0 <UART_Start_Receive_IT+0x60>
 80056ae:	227f      	movs	r2, #127	; 0x7f
 80056b0:	e7d8      	b.n	8005664 <UART_Start_Receive_IT+0x24>
 80056b2:	2480      	movs	r4, #128	; 0x80
 80056b4:	0564      	lsls	r4, r4, #21
 80056b6:	42a1      	cmp	r1, r4
 80056b8:	d1d4      	bne.n	8005664 <UART_Start_Receive_IT+0x24>
 80056ba:	6902      	ldr	r2, [r0, #16]
 80056bc:	2a00      	cmp	r2, #0
 80056be:	d0f6      	beq.n	80056ae <UART_Start_Receive_IT+0x6e>
 80056c0:	223f      	movs	r2, #63	; 0x3f
 80056c2:	e7cf      	b.n	8005664 <UART_Start_Receive_IT+0x24>
    huart->RxISR = UART_RxISR_8BIT;
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <UART_Start_Receive_IT+0x90>)
 80056c6:	e7e0      	b.n	800568a <UART_Start_Receive_IT+0x4a>
 80056c8:	000001ff 	.word	0x000001ff
 80056cc:	08005185 	.word	0x08005185
 80056d0:	08005101 	.word	0x08005101

080056d4 <HAL_UART_Receive_IT>:
{
 80056d4:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80056d6:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 80056d8:	0003      	movs	r3, r0
    return HAL_BUSY;
 80056da:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80056dc:	2c20      	cmp	r4, #32
 80056de:	d127      	bne.n	8005730 <HAL_UART_Receive_IT+0x5c>
      return HAL_ERROR;
 80056e0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80056e2:	2900      	cmp	r1, #0
 80056e4:	d024      	beq.n	8005730 <HAL_UART_Receive_IT+0x5c>
 80056e6:	2a00      	cmp	r2, #0
 80056e8:	d022      	beq.n	8005730 <HAL_UART_Receive_IT+0x5c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ea:	2480      	movs	r4, #128	; 0x80
 80056ec:	689d      	ldr	r5, [r3, #8]
 80056ee:	0164      	lsls	r4, r4, #5
 80056f0:	42a5      	cmp	r5, r4
 80056f2:	d104      	bne.n	80056fe <HAL_UART_Receive_IT+0x2a>
 80056f4:	691c      	ldr	r4, [r3, #16]
 80056f6:	2c00      	cmp	r4, #0
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 80056fa:	4201      	tst	r1, r0
 80056fc:	d118      	bne.n	8005730 <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 80056fe:	001c      	movs	r4, r3
 8005700:	3474      	adds	r4, #116	; 0x74
 8005702:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8005704:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005706:	2d01      	cmp	r5, #1
 8005708:	d012      	beq.n	8005730 <HAL_UART_Receive_IT+0x5c>
 800570a:	3801      	subs	r0, #1
 800570c:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005710:	4c08      	ldr	r4, [pc, #32]	; (8005734 <HAL_UART_Receive_IT+0x60>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005712:	6618      	str	r0, [r3, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	42a0      	cmp	r0, r4
 8005718:	d007      	beq.n	800572a <HAL_UART_Receive_IT+0x56>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800571a:	6844      	ldr	r4, [r0, #4]
 800571c:	0224      	lsls	r4, r4, #8
 800571e:	d504      	bpl.n	800572a <HAL_UART_Receive_IT+0x56>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005720:	2480      	movs	r4, #128	; 0x80
 8005722:	6805      	ldr	r5, [r0, #0]
 8005724:	04e4      	lsls	r4, r4, #19
 8005726:	432c      	orrs	r4, r5
 8005728:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 800572a:	0018      	movs	r0, r3
 800572c:	f7ff ff88 	bl	8005640 <UART_Start_Receive_IT>
}
 8005730:	bd70      	pop	{r4, r5, r6, pc}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	40004800 	.word	0x40004800

08005738 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005738:	4770      	bx	lr
	...

0800573c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800573c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573e:	0005      	movs	r5, r0
{
 8005740:	9102      	str	r1, [sp, #8]
 8005742:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 8005744:	3574      	adds	r5, #116	; 0x74
 8005746:	782b      	ldrb	r3, [r5, #0]
{
 8005748:	0004      	movs	r4, r0
 800574a:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 800574c:	2002      	movs	r0, #2
 800574e:	2b01      	cmp	r3, #1
 8005750:	d030      	beq.n	80057b4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8005752:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8005754:	3801      	subs	r0, #1
 8005756:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005758:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4382      	bics	r2, r0
 8005760:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	4815      	ldr	r0, [pc, #84]	; (80057bc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>)
 8005766:	4002      	ands	r2, r0
 8005768:	430a      	orrs	r2, r1
 800576a:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800576c:	2900      	cmp	r1, #0
 800576e:	d10c      	bne.n	800578a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x4e>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005770:	2210      	movs	r2, #16
 8005772:	6859      	ldr	r1, [r3, #4]
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005774:	79b0      	ldrb	r0, [r6, #6]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005776:	4391      	bics	r1, r2
 8005778:	88b2      	ldrh	r2, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800577a:	0600      	lsls	r0, r0, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800577c:	4311      	orrs	r1, r2
 800577e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	0212      	lsls	r2, r2, #8
 8005784:	0a12      	lsrs	r2, r2, #8
 8005786:	4302      	orrs	r2, r0
 8005788:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 800578a:	2201      	movs	r2, #1
 800578c:	6819      	ldr	r1, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005792:	f7fd f899 	bl	80028c8 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005796:	2180      	movs	r1, #128	; 0x80
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
  tickstart = HAL_GetTick();
 800579a:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800579c:	9200      	str	r2, [sp, #0]
 800579e:	03c9      	lsls	r1, r1, #15
 80057a0:	2200      	movs	r2, #0
 80057a2:	0020      	movs	r0, r4
 80057a4:	f7ff fea0 	bl	80054e8 <UART_WaitOnFlagUntilTimeout>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d105      	bne.n	80057b8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 80057ac:	2320      	movs	r3, #32
 80057ae:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80057b0:	2300      	movs	r3, #0
 80057b2:	702b      	strb	r3, [r5, #0]
}
 80057b4:	b004      	add	sp, #16
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIMEOUT;
 80057b8:	2003      	movs	r0, #3
 80057ba:	e7f9      	b.n	80057b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
 80057bc:	ffcfffff 	.word	0xffcfffff
 80057c0:	01ffffff 	.word	0x01ffffff

080057c4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80057c4:	0002      	movs	r2, r0
 80057c6:	2302      	movs	r3, #2
{
 80057c8:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 80057ca:	3274      	adds	r2, #116	; 0x74
 80057cc:	7814      	ldrb	r4, [r2, #0]
{
 80057ce:	0001      	movs	r1, r0
  __HAL_LOCK(huart);
 80057d0:	0018      	movs	r0, r3
 80057d2:	2c01      	cmp	r4, #1
 80057d4:	d005      	beq.n	80057e2 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80057d6:	6809      	ldr	r1, [r1, #0]
 80057d8:	6808      	ldr	r0, [r1, #0]
 80057da:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 80057dc:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80057de:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(huart);
 80057e0:	7010      	strb	r0, [r2, #0]
}
 80057e2:	bd10      	pop	{r4, pc}

080057e4 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 80057e4:	4b01      	ldr	r3, [pc, #4]	; (80057ec <SX1276GetStatus+0x8>)
 80057e6:	7918      	ldrb	r0, [r3, #4]
}
 80057e8:	4770      	bx	lr
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	20000790 	.word	0x20000790

080057f0 <GetFskBandwidthRegValue>:
{
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 80057f0:	2200      	movs	r2, #0
 80057f2:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80057f4:	4907      	ldr	r1, [pc, #28]	; (8005814 <GetFskBandwidthRegValue+0x24>)
 80057f6:	00d3      	lsls	r3, r2, #3
 80057f8:	185b      	adds	r3, r3, r1
 80057fa:	681c      	ldr	r4, [r3, #0]
 80057fc:	4284      	cmp	r4, r0
 80057fe:	d802      	bhi.n	8005806 <GetFskBandwidthRegValue+0x16>
 8005800:	689c      	ldr	r4, [r3, #8]
 8005802:	4284      	cmp	r4, r0
 8005804:	d803      	bhi.n	800580e <GetFskBandwidthRegValue+0x1e>
 8005806:	3201      	adds	r2, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005808:	2a15      	cmp	r2, #21
 800580a:	d1f4      	bne.n	80057f6 <GetFskBandwidthRegValue+0x6>
 800580c:	e7fe      	b.n	800580c <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 800580e:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8005810:	bd10      	pop	{r4, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	08007a0c 	.word	0x08007a0c

08005818 <SX1276GetTimeOnAir>:
{
 8005818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800581a:	0014      	movs	r4, r2
 800581c:	aa08      	add	r2, sp, #32
 800581e:	8817      	ldrh	r7, [r2, #0]
 8005820:	aa09      	add	r2, sp, #36	; 0x24
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	000d      	movs	r5, r1
 8005826:	4694      	mov	ip, r2
 8005828:	a90b      	add	r1, sp, #44	; 0x2c
 800582a:	aa0a      	add	r2, sp, #40	; 0x28
 800582c:	7812      	ldrb	r2, [r2, #0]
 800582e:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 8005830:	2800      	cmp	r0, #0
 8005832:	d004      	beq.n	800583e <SX1276GetTimeOnAir+0x26>
 8005834:	2801      	cmp	r0, #1
 8005836:	d017      	beq.n	8005868 <SX1276GetTimeOnAir+0x50>
    uint32_t denominator = 1;
 8005838:	2401      	movs	r4, #1
    uint32_t numerator = 0;
 800583a:	2000      	movs	r0, #0
 800583c:	e00e      	b.n	800585c <SX1276GetTimeOnAir+0x44>
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 800583e:	4660      	mov	r0, ip
 8005840:	4243      	negs	r3, r0
 8005842:	4158      	adcs	r0, r3
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8005844:	1e4b      	subs	r3, r1, #1
 8005846:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005848:	19c7      	adds	r7, r0, r7
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800584a:	20fa      	movs	r0, #250	; 0xfa
               ( ( crcOn == true ) ? 2 : 0 ) 
 800584c:	0049      	lsls	r1, r1, #1
    return ( preambleLen << 3 ) +
 800584e:	00ff      	lsls	r7, r7, #3
               ( 0 ) + // Address filter size
 8005850:	1852      	adds	r2, r2, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005852:	3718      	adds	r7, #24
               ) << 3 
 8005854:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 8005856:	19d2      	adds	r2, r2, r7
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8005858:	0080      	lsls	r0, r0, #2
 800585a:	4350      	muls	r0, r2
    return ( numerator + denominator - 1 ) / denominator;
 800585c:	1900      	adds	r0, r0, r4
 800585e:	0021      	movs	r1, r4
 8005860:	3801      	subs	r0, #1
 8005862:	f7fa fc77 	bl	8000154 <__udivsi3>
}
 8005866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 8005868:	3304      	adds	r3, #4
 800586a:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800586c:	1f63      	subs	r3, r4, #5
 800586e:	2b01      	cmp	r3, #1
 8005870:	d804      	bhi.n	800587c <SX1276GetTimeOnAir+0x64>
 8005872:	1c3b      	adds	r3, r7, #0
 8005874:	2f0c      	cmp	r7, #12
 8005876:	d200      	bcs.n	800587a <SX1276GetTimeOnAir+0x62>
 8005878:	230c      	movs	r3, #12
 800587a:	b29f      	uxth	r7, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800587c:	2d00      	cmp	r5, #0
 800587e:	d136      	bne.n	80058ee <SX1276GetTimeOnAir+0xd6>
 8005880:	0023      	movs	r3, r4
 8005882:	2001      	movs	r0, #1
 8005884:	002e      	movs	r6, r5
 8005886:	3b0b      	subs	r3, #11
 8005888:	4298      	cmp	r0, r3
 800588a:	416e      	adcs	r6, r5
 800588c:	0033      	movs	r3, r6
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800588e:	b2db      	uxtb	r3, r3
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
                            ( crcOn ? 16 : 0 ) -
 8005890:	1e48      	subs	r0, r1, #1
 8005892:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005894:	00d2      	lsls	r2, r2, #3
                            ( crcOn ? 16 : 0 ) -
 8005896:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005898:	1810      	adds	r0, r2, r0
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 800589a:	4666      	mov	r6, ip
 800589c:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 800589e:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 80058a0:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 80058a2:	4296      	cmp	r6, r2
 80058a4:	d100      	bne.n	80058a8 <SX1276GetTimeOnAir+0x90>
 80058a6:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 80058a8:	1880      	adds	r0, r0, r2

    if( datarate <= 6 )
 80058aa:	2c06      	cmp	r4, #6
 80058ac:	d903      	bls.n	80058b6 <SX1276GetTimeOnAir+0x9e>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 80058ae:	3008      	adds	r0, #8

        if( lowDatareOptimize == true )
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d000      	beq.n	80058b6 <SX1276GetTimeOnAir+0x9e>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80058b4:	3908      	subs	r1, #8
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80058b6:	43c3      	mvns	r3, r0
 80058b8:	17db      	asrs	r3, r3, #31
 80058ba:	4018      	ands	r0, r3
 80058bc:	1840      	adds	r0, r0, r1
 80058be:	3801      	subs	r0, #1
 80058c0:	f7fa fcd2 	bl	8000268 <__divsi3>
 80058c4:	9e01      	ldr	r6, [sp, #4]
 80058c6:	4346      	muls	r6, r0
 80058c8:	19f7      	adds	r7, r6, r7

    if( datarate <= 6 )
    {
        intermediate += 2;
 80058ca:	003a      	movs	r2, r7
 80058cc:	320e      	adds	r2, #14
    if( datarate <= 6 )
 80058ce:	2c06      	cmp	r4, #6
 80058d0:	d900      	bls.n	80058d4 <SX1276GetTimeOnAir+0xbc>
    int32_t intermediate =
 80058d2:	3a02      	subs	r2, #2
 80058d4:	2d02      	cmp	r5, #2
 80058d6:	d812      	bhi.n	80058fe <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80058d8:	0092      	lsls	r2, r2, #2
 80058da:	3c02      	subs	r4, #2
 80058dc:	3201      	adds	r2, #1
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 80058de:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80058e0:	40a2      	lsls	r2, r4
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <SX1276GetTimeOnAir+0xe8>)
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 80058e4:	0080      	lsls	r0, r0, #2
 80058e6:	00ad      	lsls	r5, r5, #2
 80058e8:	4350      	muls	r0, r2
 80058ea:	58ec      	ldr	r4, [r5, r3]
 80058ec:	e7b6      	b.n	800585c <SX1276GetTimeOnAir+0x44>
    bool    lowDatareOptimize = false;
 80058ee:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80058f0:	2d01      	cmp	r5, #1
 80058f2:	d1cd      	bne.n	8005890 <SX1276GetTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80058f4:	0023      	movs	r3, r4
 80058f6:	3b0c      	subs	r3, #12
 80058f8:	4258      	negs	r0, r3
 80058fa:	4143      	adcs	r3, r0
 80058fc:	e7c7      	b.n	800588e <SX1276GetTimeOnAir+0x76>
 80058fe:	deff      	udf	#255	; 0xff
 8005900:	080079d0 	.word	0x080079d0

08005904 <SX1276GetWakeupTime>:
{
 8005904:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8005906:	f7fd fa5f 	bl	8002dc8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800590a:	3002      	adds	r0, #2
}
 800590c:	bd10      	pop	{r4, pc}

0800590e <SX1276WriteBuffer>:
{
 800590e:	b570      	push	{r4, r5, r6, lr}
 8005910:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 8005912:	2000      	movs	r0, #0
{
 8005914:	000c      	movs	r4, r1
 8005916:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 8005918:	f7fd fc30 	bl	800317c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 800591c:	2080      	movs	r0, #128	; 0x80
 800591e:	4330      	orrs	r0, r6
 8005920:	b280      	uxth	r0, r0
 8005922:	f7fd fc1d 	bl	8003160 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 8005926:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 8005928:	42ac      	cmp	r4, r5
 800592a:	d103      	bne.n	8005934 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 800592c:	2001      	movs	r0, #1
 800592e:	f7fd fc25 	bl	800317c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 8005932:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 8005934:	7820      	ldrb	r0, [r4, #0]
 8005936:	f7fd fc13 	bl	8003160 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 800593a:	3401      	adds	r4, #1
 800593c:	e7f4      	b.n	8005928 <SX1276WriteBuffer+0x1a>

0800593e <SX1276Write>:
{
 800593e:	b507      	push	{r0, r1, r2, lr}
 8005940:	466b      	mov	r3, sp
 8005942:	71d9      	strb	r1, [r3, #7]
 8005944:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8005946:	2201      	movs	r2, #1
 8005948:	0019      	movs	r1, r3
 800594a:	f7ff ffe0 	bl	800590e <SX1276WriteBuffer>
}
 800594e:	bd07      	pop	{r0, r1, r2, pc}

08005950 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8005950:	4b11      	ldr	r3, [pc, #68]	; (8005998 <SX1276SetChannel+0x48>)
{
 8005952:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 8005954:	4911      	ldr	r1, [pc, #68]	; (800599c <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 8005956:	6098      	str	r0, [r3, #8]
{
 8005958:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 800595a:	f7fa fc81 	bl	8000260 <__aeabi_uidivmod>
 800595e:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <SX1276SetChannel+0x50>)
 8005960:	0208      	lsls	r0, r1, #8
 8005962:	18c0      	adds	r0, r0, r3
 8005964:	490d      	ldr	r1, [pc, #52]	; (800599c <SX1276SetChannel+0x4c>)
 8005966:	f7fa fbf5 	bl	8000154 <__udivsi3>
 800596a:	490c      	ldr	r1, [pc, #48]	; (800599c <SX1276SetChannel+0x4c>)
 800596c:	0004      	movs	r4, r0
 800596e:	0028      	movs	r0, r5
 8005970:	f7fa fbf0 	bl	8000154 <__udivsi3>
 8005974:	0200      	lsls	r0, r0, #8
 8005976:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8005978:	0c21      	lsrs	r1, r4, #16
 800597a:	b2c9      	uxtb	r1, r1
 800597c:	2006      	movs	r0, #6
 800597e:	f7ff ffde 	bl	800593e <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8005982:	0a21      	lsrs	r1, r4, #8
 8005984:	b2c9      	uxtb	r1, r1
 8005986:	2007      	movs	r0, #7
 8005988:	f7ff ffd9 	bl	800593e <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 800598c:	b2e1      	uxtb	r1, r4
 800598e:	2008      	movs	r0, #8
 8005990:	f7ff ffd5 	bl	800593e <SX1276Write>
}
 8005994:	bd70      	pop	{r4, r5, r6, pc}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	20000790 	.word	0x20000790
 800599c:	00003d09 	.word	0x00003d09
 80059a0:	00001e84 	.word	0x00001e84

080059a4 <SX1276ReadBuffer>:
{
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 80059a8:	2000      	movs	r0, #0
{
 80059aa:	000c      	movs	r4, r1
 80059ac:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 80059ae:	f7fd fbe5 	bl	800317c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 80059b2:	207f      	movs	r0, #127	; 0x7f
 80059b4:	4030      	ands	r0, r6
 80059b6:	f7fd fbd3 	bl	8003160 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 80059ba:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 80059bc:	42ac      	cmp	r4, r5
 80059be:	d103      	bne.n	80059c8 <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 80059c0:	2001      	movs	r0, #1
 80059c2:	f7fd fbdb 	bl	800317c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 80059c8:	2000      	movs	r0, #0
 80059ca:	f7fd fbc9 	bl	8003160 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 80059ce:	7020      	strb	r0, [r4, #0]
 80059d0:	3401      	adds	r4, #1
 80059d2:	e7f3      	b.n	80059bc <SX1276ReadBuffer+0x18>

080059d4 <SX1276Read>:
{
 80059d4:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 80059d6:	466b      	mov	r3, sp
 80059d8:	1ddc      	adds	r4, r3, #7
 80059da:	2201      	movs	r2, #1
 80059dc:	0021      	movs	r1, r4
 80059de:	f7ff ffe1 	bl	80059a4 <SX1276ReadBuffer>
    return data;
 80059e2:	7820      	ldrb	r0, [r4, #0]
}
 80059e4:	bd16      	pop	{r1, r2, r4, pc}
	...

080059e8 <RxChainCalibration>:
{
 80059e8:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80059ea:	2009      	movs	r0, #9
 80059ec:	f7ff fff2 	bl	80059d4 <SX1276Read>
 80059f0:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80059f2:	2006      	movs	r0, #6
 80059f4:	f7ff ffee 	bl	80059d4 <SX1276Read>
 80059f8:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80059fa:	2007      	movs	r0, #7
 80059fc:	f7ff ffea 	bl	80059d4 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005a00:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8005a02:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005a04:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8005a06:	2008      	movs	r0, #8
 8005a08:	f7ff ffe4 	bl	80059d4 <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005a0e:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8005a10:	b2c4      	uxtb	r4, r0
 8005a12:	435c      	muls	r4, r3
 8005a14:	0a00      	lsrs	r0, r0, #8
 8005a16:	4358      	muls	r0, r3
 8005a18:	3480      	adds	r4, #128	; 0x80
 8005a1a:	0a24      	lsrs	r4, r4, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8005a1c:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8005a1e:	1824      	adds	r4, r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8005a20:	2009      	movs	r0, #9
 8005a22:	f7ff ff8c 	bl	800593e <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005a26:	203b      	movs	r0, #59	; 0x3b
 8005a28:	f7ff ffd4 	bl	80059d4 <SX1276Read>
 8005a2c:	2140      	movs	r1, #64	; 0x40
 8005a2e:	4301      	orrs	r1, r0
 8005a30:	b2c9      	uxtb	r1, r1
 8005a32:	203b      	movs	r0, #59	; 0x3b
 8005a34:	f7ff ff83 	bl	800593e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005a38:	2620      	movs	r6, #32
 8005a3a:	203b      	movs	r0, #59	; 0x3b
 8005a3c:	f7ff ffca 	bl	80059d4 <SX1276Read>
 8005a40:	4230      	tst	r0, r6
 8005a42:	d1fa      	bne.n	8005a3a <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8005a44:	480d      	ldr	r0, [pc, #52]	; (8005a7c <RxChainCalibration+0x94>)
 8005a46:	f7ff ff83 	bl	8005950 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8005a4a:	203b      	movs	r0, #59	; 0x3b
 8005a4c:	f7ff ffc2 	bl	80059d4 <SX1276Read>
 8005a50:	2140      	movs	r1, #64	; 0x40
 8005a52:	4301      	orrs	r1, r0
 8005a54:	b2c9      	uxtb	r1, r1
 8005a56:	203b      	movs	r0, #59	; 0x3b
 8005a58:	f7ff ff71 	bl	800593e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005a5c:	2620      	movs	r6, #32
 8005a5e:	203b      	movs	r0, #59	; 0x3b
 8005a60:	f7ff ffb8 	bl	80059d4 <SX1276Read>
 8005a64:	4230      	tst	r0, r6
 8005a66:	d1fa      	bne.n	8005a5e <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8005a68:	0029      	movs	r1, r5
 8005a6a:	2009      	movs	r0, #9
 8005a6c:	f7ff ff67 	bl	800593e <SX1276Write>
    SX1276SetChannel( initialFreq );
 8005a70:	0020      	movs	r0, r4
 8005a72:	f7ff ff6d 	bl	8005950 <SX1276SetChannel>
}
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	00003d09 	.word	0x00003d09
 8005a7c:	33bca100 	.word	0x33bca100

08005a80 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <SX1276OnDio4Irq+0x18>)
 8005a82:	795a      	ldrb	r2, [r3, #5]
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	d105      	bne.n	8005a94 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005a88:	3330      	adds	r3, #48	; 0x30
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	d101      	bne.n	8005a94 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005a90:	3201      	adds	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8005a94:	4770      	bx	lr
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	20000790 	.word	0x20000790

08005a9c <SX1276OnDio3Irq>:
{
 8005a9c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <SX1276OnDio3Irq+0x4c>)
 8005aa0:	795d      	ldrb	r5, [r3, #5]
 8005aa2:	2d01      	cmp	r5, #1
 8005aa4:	d111      	bne.n	8005aca <SX1276OnDio3Irq+0x2e>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8005aa6:	2012      	movs	r0, #18
 8005aa8:	f7ff ff94 	bl	80059d4 <SX1276Read>
 8005aac:	4028      	ands	r0, r5
 8005aae:	1e04      	subs	r4, r0, #0
 8005ab0:	4e0e      	ldr	r6, [pc, #56]	; (8005aec <SX1276OnDio3Irq+0x50>)
 8005ab2:	d00b      	beq.n	8005acc <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8005ab4:	2105      	movs	r1, #5
 8005ab6:	2012      	movs	r0, #18
 8005ab8:	f7ff ff41 	bl	800593e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005abc:	6833      	ldr	r3, [r6, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <SX1276OnDio3Irq+0x2e>
 8005ac2:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8005ac4:	0028      	movs	r0, r5
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <SX1276OnDio3Irq+0x46>
}
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8005acc:	2104      	movs	r1, #4
 8005ace:	2012      	movs	r0, #18
 8005ad0:	f7ff ff35 	bl	800593e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005ad4:	6833      	ldr	r3, [r6, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f7      	beq.n	8005aca <SX1276OnDio3Irq+0x2e>
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f4      	beq.n	8005aca <SX1276OnDio3Irq+0x2e>
                RadioEvents->CadDone( false );
 8005ae0:	0020      	movs	r0, r4
 8005ae2:	4798      	blx	r3
}
 8005ae4:	e7f1      	b.n	8005aca <SX1276OnDio3Irq+0x2e>
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	20000790 	.word	0x20000790
 8005aec:	200000e8 	.word	0x200000e8

08005af0 <SX1276OnDio2Irq>:
{
 8005af0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8005af2:	4c2c      	ldr	r4, [pc, #176]	; (8005ba4 <SX1276OnDio2Irq+0xb4>)
 8005af4:	7925      	ldrb	r5, [r4, #4]
 8005af6:	2d01      	cmp	r5, #1
 8005af8:	d002      	beq.n	8005b00 <SX1276OnDio2Irq+0x10>
 8005afa:	2d02      	cmp	r5, #2
 8005afc:	d048      	beq.n	8005b90 <SX1276OnDio2Irq+0xa0>
}
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8005b00:	7963      	ldrb	r3, [r4, #5]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d017      	beq.n	8005b36 <SX1276OnDio2Irq+0x46>
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d1f9      	bne.n	8005afe <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005b0a:	3453      	adds	r4, #83	; 0x53
 8005b0c:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005b0e:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f4      	beq.n	8005afe <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005b14:	2012      	movs	r0, #18
 8005b16:	f7ff ff12 	bl	800593e <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005b1a:	4b23      	ldr	r3, [pc, #140]	; (8005ba8 <SX1276OnDio2Irq+0xb8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0ed      	beq.n	8005afe <SX1276OnDio2Irq+0xe>
 8005b22:	695c      	ldr	r4, [r3, #20]
 8005b24:	2c00      	cmp	r4, #0
 8005b26:	d0ea      	beq.n	8005afe <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005b28:	201c      	movs	r0, #28
 8005b2a:	f7ff ff53 	bl	80059d4 <SX1276Read>
 8005b2e:	233f      	movs	r3, #63	; 0x3f
 8005b30:	4018      	ands	r0, r3
 8005b32:	47a0      	blx	r4
}
 8005b34:	e7e3      	b.n	8005afe <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005b36:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005b38:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005b3a:	3330      	adds	r3, #48	; 0x30
 8005b3c:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005b3e:	3631      	adds	r6, #49	; 0x31
 8005b40:	7833      	ldrb	r3, [r6, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1db      	bne.n	8005afe <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8005b46:	4819      	ldr	r0, [pc, #100]	; (8005bac <SX1276OnDio2Irq+0xbc>)
 8005b48:	f001 fc5a 	bl	8007400 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005b4c:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8005b4e:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005b50:	f7ff ff40 	bl	80059d4 <SX1276Read>
 8005b54:	0023      	movs	r3, r4
 8005b56:	0840      	lsrs	r0, r0, #1
 8005b58:	3332      	adds	r3, #50	; 0x32
 8005b5a:	4240      	negs	r0, r0
 8005b5c:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005b5e:	201b      	movs	r0, #27
 8005b60:	f7ff ff38 	bl	80059d4 <SX1276Read>
 8005b64:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8005b66:	201c      	movs	r0, #28
 8005b68:	f7ff ff34 	bl	80059d4 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005b6c:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8005b6e:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <SX1276OnDio2Irq+0xc0>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005b70:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8005b72:	b2c3      	uxtb	r3, r0
 8005b74:	4353      	muls	r3, r2
 8005b76:	0a00      	lsrs	r0, r0, #8
 8005b78:	4350      	muls	r0, r2
 8005b7a:	3380      	adds	r3, #128	; 0x80
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	1818      	adds	r0, r3, r0
 8005b80:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8005b82:	200c      	movs	r0, #12
 8005b84:	f7ff ff26 	bl	80059d4 <SX1276Read>
 8005b88:	3438      	adds	r4, #56	; 0x38
 8005b8a:	0940      	lsrs	r0, r0, #5
 8005b8c:	7020      	strb	r0, [r4, #0]
 8005b8e:	e7b6      	b.n	8005afe <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8005b90:	7963      	ldrb	r3, [r4, #5]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d1b3      	bne.n	8005afe <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005b96:	3453      	adds	r4, #83	; 0x53
 8005b98:	7823      	ldrb	r3, [r4, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0af      	beq.n	8005afe <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005b9e:	0029      	movs	r1, r5
 8005ba0:	e7b8      	b.n	8005b14 <SX1276OnDio2Irq+0x24>
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	20000790 	.word	0x20000790
 8005ba8:	200000e8 	.word	0x200000e8
 8005bac:	20000778 	.word	0x20000778
 8005bb0:	00003d09 	.word	0x00003d09

08005bb4 <SX1276SetOpMode.part.3>:
static void SX1276SetOpMode( uint8_t opMode )
 8005bb4:	b510      	push	{r4, lr}
      Sx_Board_SetXO( SET ); 
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	f7fd f908 	bl	8002dcc <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	f7fd fa7d 	bl	80030bc <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	f7ff ff06 	bl	80059d4 <SX1276Read>
 8005bc8:	2307      	movs	r3, #7
 8005bca:	2105      	movs	r1, #5
 8005bcc:	4398      	bics	r0, r3
 8005bce:	4301      	orrs	r1, r0
 8005bd0:	b2c9      	uxtb	r1, r1
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f7ff feb3 	bl	800593e <SX1276Write>
}
 8005bd8:	bd10      	pop	{r4, pc}

08005bda <SX1276SetOpMode>:
{
 8005bda:	b570      	push	{r4, r5, r6, lr}
 8005bdc:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 8005bde:	d10e      	bne.n	8005bfe <SX1276SetOpMode+0x24>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005be0:	2001      	movs	r0, #1
 8005be2:	f7ff fef7 	bl	80059d4 <SX1276Read>
 8005be6:	21f8      	movs	r1, #248	; 0xf8
 8005be8:	4001      	ands	r1, r0
 8005bea:	2001      	movs	r0, #1
 8005bec:	f7ff fea7 	bl	800593e <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 8005bf0:	0020      	movs	r0, r4
 8005bf2:	f7fd fa63 	bl	80030bc <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 8005bf6:	0020      	movs	r0, r4
 8005bf8:	f7fd f8e8 	bl	8002dcc <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
    else if ( opMode == RF_OPMODE_RECEIVER )
 8005bfe:	2805      	cmp	r0, #5
 8005c00:	d102      	bne.n	8005c08 <SX1276SetOpMode+0x2e>
 8005c02:	f7ff ffd7 	bl	8005bb4 <SX1276SetOpMode.part.3>
 8005c06:	e7f9      	b.n	8005bfc <SX1276SetOpMode+0x22>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8005c08:	2009      	movs	r0, #9
 8005c0a:	f7ff fee3 	bl	80059d4 <SX1276Read>
 8005c0e:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 8005c10:	2001      	movs	r0, #1
 8005c12:	f7fd f8db 	bl	8002dcc <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 8005c16:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005c18:	062b      	lsls	r3, r5, #24
 8005c1a:	d400      	bmi.n	8005c1e <SX1276SetOpMode+0x44>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 8005c1c:	2002      	movs	r0, #2
 8005c1e:	f7fd fa4d 	bl	80030bc <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8005c22:	2001      	movs	r0, #1
 8005c24:	f7ff fed6 	bl	80059d4 <SX1276Read>
 8005c28:	2307      	movs	r3, #7
 8005c2a:	0001      	movs	r1, r0
 8005c2c:	4399      	bics	r1, r3
 8005c2e:	4321      	orrs	r1, r4
 8005c30:	b2c9      	uxtb	r1, r1
 8005c32:	2001      	movs	r0, #1
 8005c34:	f7ff fe83 	bl	800593e <SX1276Write>
}
 8005c38:	e7e0      	b.n	8005bfc <SX1276SetOpMode+0x22>
	...

08005c3c <SX1276SetSleep>:
{
 8005c3c:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8005c3e:	4809      	ldr	r0, [pc, #36]	; (8005c64 <SX1276SetSleep+0x28>)
 8005c40:	f001 fbde 	bl	8007400 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8005c44:	4808      	ldr	r0, [pc, #32]	; (8005c68 <SX1276SetSleep+0x2c>)
 8005c46:	f001 fbdb 	bl	8007400 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8005c4a:	4808      	ldr	r0, [pc, #32]	; (8005c6c <SX1276SetSleep+0x30>)
 8005c4c:	f001 fbd8 	bl	8007400 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8005c50:	2000      	movs	r0, #0
 8005c52:	f7ff ffc2 	bl	8005bda <SX1276SetOpMode>
    Sx_Board_SetXO( RESET );
 8005c56:	2000      	movs	r0, #0
 8005c58:	f7fd f8b8 	bl	8002dcc <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <SX1276SetSleep+0x34>)
 8005c60:	711a      	strb	r2, [r3, #4]
}
 8005c62:	bd10      	pop	{r4, pc}
 8005c64:	200007f8 	.word	0x200007f8
 8005c68:	20000760 	.word	0x20000760
 8005c6c:	20000778 	.word	0x20000778
 8005c70:	20000790 	.word	0x20000790

08005c74 <SX1276SetStby>:
{
 8005c74:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8005c76:	4808      	ldr	r0, [pc, #32]	; (8005c98 <SX1276SetStby+0x24>)
 8005c78:	f001 fbc2 	bl	8007400 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8005c7c:	4807      	ldr	r0, [pc, #28]	; (8005c9c <SX1276SetStby+0x28>)
 8005c7e:	f001 fbbf 	bl	8007400 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8005c82:	4807      	ldr	r0, [pc, #28]	; (8005ca0 <SX1276SetStby+0x2c>)
 8005c84:	f001 fbbc 	bl	8007400 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8005c88:	2001      	movs	r0, #1
 8005c8a:	f7ff ffa6 	bl	8005bda <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <SX1276SetStby+0x30>)
 8005c92:	711a      	strb	r2, [r3, #4]
}
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	200007f8 	.word	0x200007f8
 8005c9c:	20000760 	.word	0x20000760
 8005ca0:	20000778 	.word	0x20000778
 8005ca4:	20000790 	.word	0x20000790

08005ca8 <SX1276SetRx>:
{
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	0006      	movs	r6, r0
    TimerStop( &TxTimeoutTimer );
 8005cac:	4878      	ldr	r0, [pc, #480]	; (8005e90 <SX1276SetRx+0x1e8>)
 8005cae:	f001 fba7 	bl	8007400 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 8005cb2:	4c78      	ldr	r4, [pc, #480]	; (8005e94 <SX1276SetRx+0x1ec>)
 8005cb4:	7965      	ldrb	r5, [r4, #5]
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	d003      	beq.n	8005cc2 <SX1276SetRx+0x1a>
 8005cba:	2d01      	cmp	r5, #1
 8005cbc:	d049      	beq.n	8005d52 <SX1276SetRx+0xaa>
    bool rxContinuous = false;
 8005cbe:	2700      	movs	r7, #0
 8005cc0:	e024      	b.n	8005d0c <SX1276SetRx+0x64>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8005cc2:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005cc4:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8005cc6:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005cc8:	f7ff fe84 	bl	80059d4 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8005ccc:	2103      	movs	r1, #3
 8005cce:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005cd0:	3109      	adds	r1, #9
 8005cd2:	4301      	orrs	r1, r0
 8005cd4:	2040      	movs	r0, #64	; 0x40
 8005cd6:	f7ff fe32 	bl	800593e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8005cda:	2041      	movs	r0, #65	; 0x41
 8005cdc:	f7ff fe7a 	bl	80059d4 <SX1276Read>
 8005ce0:	213f      	movs	r1, #63	; 0x3f
 8005ce2:	4249      	negs	r1, r1
 8005ce4:	4301      	orrs	r1, r0
 8005ce6:	b2c9      	uxtb	r1, r1
 8005ce8:	2041      	movs	r0, #65	; 0x41
 8005cea:	f7ff fe28 	bl	800593e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8005cee:	2035      	movs	r0, #53	; 0x35
 8005cf0:	f7ff fe70 	bl	80059d4 <SX1276Read>
 8005cf4:	233f      	movs	r3, #63	; 0x3f
 8005cf6:	4018      	ands	r0, r3
 8005cf8:	0023      	movs	r3, r4
 8005cfa:	333e      	adds	r3, #62	; 0x3e
 8005cfc:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8005cfe:	211e      	movs	r1, #30
 8005d00:	200d      	movs	r0, #13
 8005d02:	f7ff fe1c 	bl	800593e <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8005d06:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005d08:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8005d0a:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8005d0c:	2280      	movs	r2, #128	; 0x80
 8005d0e:	2100      	movs	r1, #0
 8005d10:	0052      	lsls	r2, r2, #1
 8005d12:	4861      	ldr	r0, [pc, #388]	; (8005e98 <SX1276SetRx+0x1f0>)
 8005d14:	f001 fdaf 	bl	8007876 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8005d1c:	2e00      	cmp	r6, #0
 8005d1e:	d007      	beq.n	8005d30 <SX1276SetRx+0x88>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005d20:	4d5e      	ldr	r5, [pc, #376]	; (8005e9c <SX1276SetRx+0x1f4>)
 8005d22:	0031      	movs	r1, r6
 8005d24:	0028      	movs	r0, r5
 8005d26:	f001 fbfd 	bl	8007524 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005d2a:	0028      	movs	r0, r5
 8005d2c:	f001 fbbc 	bl	80074a8 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8005d30:	7963      	ldrb	r3, [r4, #5]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d000      	beq.n	8005d38 <SX1276SetRx+0x90>
 8005d36:	e0a1      	b.n	8005e7c <SX1276SetRx+0x1d4>
 8005d38:	f7ff ff3c 	bl	8005bb4 <SX1276SetOpMode.part.3>
        if( rxContinuous == false )
 8005d3c:	2f00      	cmp	r7, #0
 8005d3e:	d107      	bne.n	8005d50 <SX1276SetRx+0xa8>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8005d40:	4d57      	ldr	r5, [pc, #348]	; (8005ea0 <SX1276SetRx+0x1f8>)
 8005d42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005d44:	0028      	movs	r0, r5
 8005d46:	f001 fbed 	bl	8007524 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 8005d4a:	0028      	movs	r0, r5
 8005d4c:	f001 fbac 	bl	80074a8 <UTIL_TIMER_Start>
}
 8005d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005d52:	0023      	movs	r3, r4
 8005d54:	3355      	adds	r3, #85	; 0x55
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8005d5a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d023      	beq.n	8005da8 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8005d60:	f7ff fe38 	bl	80059d4 <SX1276Read>
 8005d64:	4338      	orrs	r0, r7
 8005d66:	b2c1      	uxtb	r1, r0
 8005d68:	2033      	movs	r0, #51	; 0x33
 8005d6a:	f7ff fde8 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8005d6e:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005d70:	203b      	movs	r0, #59	; 0x3b
 8005d72:	f7ff fde4 	bl	800593e <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005d76:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8005d78:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d86d      	bhi.n	8005e5a <SX1276SetRx+0x1b2>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8005d7e:	f7ff fe29 	bl	80059d4 <SX1276Read>
 8005d82:	217f      	movs	r1, #127	; 0x7f
 8005d84:	4001      	ands	r1, r0
 8005d86:	2031      	movs	r0, #49	; 0x31
 8005d88:	f7ff fdd9 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8005d8c:	2030      	movs	r0, #48	; 0x30
 8005d8e:	2100      	movs	r1, #0
 8005d90:	f7ff fdd5 	bl	800593e <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8005d94:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005d96:	2808      	cmp	r0, #8
 8005d98:	d81a      	bhi.n	8005dd0 <SX1276SetRx+0x128>
 8005d9a:	f7fa f9c7 	bl	800012c <__gnu_thumb1_case_uqi>
 8005d9e:	3610      	.short	0x3610
 8005da0:	524b443d 	.word	0x524b443d
 8005da4:	5959      	.short	0x5959
 8005da6:	59          	.byte	0x59
 8005da7:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8005da8:	f7ff fe14 	bl	80059d4 <SX1276Read>
 8005dac:	0001      	movs	r1, r0
 8005dae:	43b9      	bics	r1, r7
 8005db0:	4329      	orrs	r1, r5
 8005db2:	b2c9      	uxtb	r1, r1
 8005db4:	2033      	movs	r0, #51	; 0x33
 8005db6:	f7ff fdc2 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005dba:	211d      	movs	r1, #29
 8005dbc:	e7d8      	b.n	8005d70 <SX1276SetRx+0xc8>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8005dbe:	2148      	movs	r1, #72	; 0x48
 8005dc0:	202f      	movs	r0, #47	; 0x2f
 8005dc2:	f7ff fdbc 	bl	800593e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8005dc6:	68a3      	ldr	r3, [r4, #8]
 8005dc8:	4a36      	ldr	r2, [pc, #216]	; (8005ea4 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8005dca:	1898      	adds	r0, r3, r2
 8005dcc:	f7ff fdc0 	bl	8005950 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8005dd0:	0023      	movs	r3, r4
 8005dd2:	3356      	adds	r3, #86	; 0x56
 8005dd4:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005dd6:	0023      	movs	r3, r4
 8005dd8:	3353      	adds	r3, #83	; 0x53
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d044      	beq.n	8005e6a <SX1276SetRx+0x1c2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005de0:	211d      	movs	r1, #29
 8005de2:	2011      	movs	r0, #17
 8005de4:	f7ff fdab 	bl	800593e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8005de8:	2040      	movs	r0, #64	; 0x40
 8005dea:	f7ff fdf3 	bl	80059d4 <SX1276Read>
 8005dee:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8005df0:	4001      	ands	r1, r0
 8005df2:	2040      	movs	r0, #64	; 0x40
 8005df4:	f7ff fda3 	bl	800593e <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8005df8:	2100      	movs	r1, #0
 8005dfa:	200f      	movs	r0, #15
 8005dfc:	f7ff fd9f 	bl	800593e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8005e00:	2100      	movs	r1, #0
 8005e02:	200d      	movs	r0, #13
 8005e04:	f7ff fd9b 	bl	800593e <SX1276Write>
        break;
 8005e08:	e780      	b.n	8005d0c <SX1276SetRx+0x64>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005e0a:	2144      	movs	r1, #68	; 0x44
 8005e0c:	202f      	movs	r0, #47	; 0x2f
 8005e0e:	f7ff fd96 	bl	800593e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8005e12:	68a3      	ldr	r3, [r4, #8]
 8005e14:	4a24      	ldr	r2, [pc, #144]	; (8005ea8 <SX1276SetRx+0x200>)
 8005e16:	e7d8      	b.n	8005dca <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005e18:	2144      	movs	r1, #68	; 0x44
 8005e1a:	202f      	movs	r0, #47	; 0x2f
 8005e1c:	f7ff fd8f 	bl	800593e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8005e20:	68a3      	ldr	r3, [r4, #8]
 8005e22:	4a22      	ldr	r2, [pc, #136]	; (8005eac <SX1276SetRx+0x204>)
 8005e24:	e7d1      	b.n	8005dca <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005e26:	2144      	movs	r1, #68	; 0x44
 8005e28:	202f      	movs	r0, #47	; 0x2f
 8005e2a:	f7ff fd88 	bl	800593e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8005e2e:	68a3      	ldr	r3, [r4, #8]
 8005e30:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <SX1276SetRx+0x208>)
 8005e32:	e7ca      	b.n	8005dca <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005e34:	2144      	movs	r1, #68	; 0x44
 8005e36:	202f      	movs	r0, #47	; 0x2f
 8005e38:	f7ff fd81 	bl	800593e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8005e3c:	68a3      	ldr	r3, [r4, #8]
 8005e3e:	4a1d      	ldr	r2, [pc, #116]	; (8005eb4 <SX1276SetRx+0x20c>)
 8005e40:	e7c3      	b.n	8005dca <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8005e42:	2144      	movs	r1, #68	; 0x44
 8005e44:	202f      	movs	r0, #47	; 0x2f
 8005e46:	f7ff fd7a 	bl	800593e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8005e4a:	68a3      	ldr	r3, [r4, #8]
 8005e4c:	4a1a      	ldr	r2, [pc, #104]	; (8005eb8 <SX1276SetRx+0x210>)
 8005e4e:	e7bc      	b.n	8005dca <SX1276SetRx+0x122>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8005e50:	2140      	movs	r1, #64	; 0x40
 8005e52:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8005e54:	f7ff fd73 	bl	800593e <SX1276Write>
 8005e58:	e7ba      	b.n	8005dd0 <SX1276SetRx+0x128>
 8005e5a:	f7ff fdbb 	bl	80059d4 <SX1276Read>
 8005e5e:	2180      	movs	r1, #128	; 0x80
 8005e60:	4249      	negs	r1, r1
 8005e62:	4301      	orrs	r1, r0
 8005e64:	b2c9      	uxtb	r1, r1
 8005e66:	2031      	movs	r0, #49	; 0x31
 8005e68:	e7f4      	b.n	8005e54 <SX1276SetRx+0x1ac>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8005e6a:	211f      	movs	r1, #31
 8005e6c:	2011      	movs	r0, #17
 8005e6e:	f7ff fd66 	bl	800593e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8005e72:	2040      	movs	r0, #64	; 0x40
 8005e74:	f7ff fdae 	bl	80059d4 <SX1276Read>
 8005e78:	213f      	movs	r1, #63	; 0x3f
 8005e7a:	e7b9      	b.n	8005df0 <SX1276SetRx+0x148>
        if( rxContinuous == true )
 8005e7c:	2f00      	cmp	r7, #0
 8005e7e:	d002      	beq.n	8005e86 <SX1276SetRx+0x1de>
 8005e80:	f7ff fe98 	bl	8005bb4 <SX1276SetOpMode.part.3>
 8005e84:	e764      	b.n	8005d50 <SX1276SetRx+0xa8>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8005e86:	2006      	movs	r0, #6
 8005e88:	f7ff fea7 	bl	8005bda <SX1276SetOpMode>
}
 8005e8c:	e760      	b.n	8005d50 <SX1276SetRx+0xa8>
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	20000760 	.word	0x20000760
 8005e94:	20000790 	.word	0x20000790
 8005e98:	200000ec 	.word	0x200000ec
 8005e9c:	200007f8 	.word	0x200007f8
 8005ea0:	20000778 	.word	0x20000778
 8005ea4:	00001e82 	.word	0x00001e82
 8005ea8:	000028b4 	.word	0x000028b4
 8005eac:	00003d04 	.word	0x00003d04
 8005eb0:	0000515e 	.word	0x0000515e
 8005eb4:	00007a12 	.word	0x00007a12
 8005eb8:	0000a2c6 	.word	0x0000a2c6

08005ebc <SX1276StartCad>:
{
 8005ebc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8005ebe:	4c0b      	ldr	r4, [pc, #44]	; (8005eec <SX1276StartCad+0x30>)
 8005ec0:	7963      	ldrb	r3, [r4, #5]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d110      	bne.n	8005ee8 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8005ec6:	21fa      	movs	r1, #250	; 0xfa
 8005ec8:	2011      	movs	r0, #17
 8005eca:	f7ff fd38 	bl	800593e <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8005ece:	2040      	movs	r0, #64	; 0x40
 8005ed0:	f7ff fd80 	bl	80059d4 <SX1276Read>
 8005ed4:	2503      	movs	r5, #3
 8005ed6:	43a8      	bics	r0, r5
 8005ed8:	b2c1      	uxtb	r1, r0
 8005eda:	2040      	movs	r0, #64	; 0x40
 8005edc:	f7ff fd2f 	bl	800593e <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8005ee0:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 8005ee2:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8005ee4:	f7ff fe79 	bl	8005bda <SX1276SetOpMode>
}
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	20000790 	.word	0x20000790

08005ef0 <SX1276ReadRssi>:
{
 8005ef0:	b510      	push	{r4, lr}
    switch( modem )
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d004      	beq.n	8005f00 <SX1276ReadRssi+0x10>
 8005ef6:	2801      	cmp	r0, #1
 8005ef8:	d00a      	beq.n	8005f10 <SX1276ReadRssi+0x20>
        rssi = -1;
 8005efa:	2001      	movs	r0, #1
 8005efc:	4240      	negs	r0, r0
 8005efe:	e006      	b.n	8005f0e <SX1276ReadRssi+0x1e>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005f00:	2011      	movs	r0, #17
 8005f02:	f7ff fd67 	bl	80059d4 <SX1276Read>
 8005f06:	0840      	lsrs	r0, r0, #1
 8005f08:	b2c0      	uxtb	r0, r0
 8005f0a:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8005f0c:	b200      	sxth	r0, r0
}
 8005f0e:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8005f10:	4a06      	ldr	r2, [pc, #24]	; (8005f2c <SX1276ReadRssi+0x3c>)
 8005f12:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <SX1276ReadRssi+0x40>)
 8005f14:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8005f16:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d903      	bls.n	8005f24 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8005f1c:	f7ff fd5a 	bl	80059d4 <SX1276Read>
 8005f20:	389d      	subs	r0, #157	; 0x9d
 8005f22:	e7f3      	b.n	8005f0c <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8005f24:	f7ff fd56 	bl	80059d4 <SX1276Read>
 8005f28:	38a4      	subs	r0, #164	; 0xa4
 8005f2a:	e7ef      	b.n	8005f0c <SX1276ReadRssi+0x1c>
 8005f2c:	20000790 	.word	0x20000790
 8005f30:	1f4add40 	.word	0x1f4add40

08005f34 <SX1276SetModem>:
{
 8005f34:	b510      	push	{r4, lr}
 8005f36:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8005f38:	2001      	movs	r0, #1
 8005f3a:	f7ff fd4b 	bl	80059d4 <SX1276Read>
 8005f3e:	4b19      	ldr	r3, [pc, #100]	; (8005fa4 <SX1276SetModem+0x70>)
 8005f40:	0602      	lsls	r2, r0, #24
 8005f42:	d51b      	bpl.n	8005f7c <SX1276SetModem+0x48>
        SX1276.Settings.Modem = MODEM_LORA;
 8005f44:	2201      	movs	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 8005f46:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 8005f48:	795a      	ldrb	r2, [r3, #5]
 8005f4a:	42a2      	cmp	r2, r4
 8005f4c:	d015      	beq.n	8005f7a <SX1276SetModem+0x46>
    SX1276.Settings.Modem = modem;
 8005f4e:	715c      	strb	r4, [r3, #5]
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8005f50:	2000      	movs	r0, #0
    switch( SX1276.Settings.Modem )
 8005f52:	2c01      	cmp	r4, #1
 8005f54:	d014      	beq.n	8005f80 <SX1276SetModem+0x4c>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8005f56:	f7ff fe40 	bl	8005bda <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	f7ff fd3a 	bl	80059d4 <SX1276Read>
 8005f60:	217f      	movs	r1, #127	; 0x7f
 8005f62:	4001      	ands	r1, r0
 8005f64:	2001      	movs	r0, #1
 8005f66:	f7ff fcea 	bl	800593e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	2040      	movs	r0, #64	; 0x40
 8005f6e:	f7ff fce6 	bl	800593e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8005f72:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8005f74:	2041      	movs	r0, #65	; 0x41
 8005f76:	f7ff fce2 	bl	800593e <SX1276Write>
}
 8005f7a:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_FSK;
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	e7e2      	b.n	8005f46 <SX1276SetModem+0x12>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8005f80:	f7ff fe2b 	bl	8005bda <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8005f84:	0020      	movs	r0, r4
 8005f86:	f7ff fd25 	bl	80059d4 <SX1276Read>
 8005f8a:	2180      	movs	r1, #128	; 0x80
 8005f8c:	4249      	negs	r1, r1
 8005f8e:	4301      	orrs	r1, r0
 8005f90:	b2c9      	uxtb	r1, r1
 8005f92:	0020      	movs	r0, r4
 8005f94:	f7ff fcd3 	bl	800593e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8005f98:	2100      	movs	r1, #0
 8005f9a:	2040      	movs	r0, #64	; 0x40
 8005f9c:	f7ff fccf 	bl	800593e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	e7e7      	b.n	8005f74 <SX1276SetModem+0x40>
 8005fa4:	20000790 	.word	0x20000790

08005fa8 <SX1276Init>:
{
 8005fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8005faa:	2400      	movs	r4, #0
 8005fac:	2101      	movs	r1, #1
 8005fae:	4d1f      	ldr	r5, [pc, #124]	; (800602c <SX1276Init+0x84>)
    RadioEvents = events;
 8005fb0:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8005fb2:	0022      	movs	r2, r4
    RadioEvents = events;
 8005fb4:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8005fb6:	4249      	negs	r1, r1
 8005fb8:	002b      	movs	r3, r5
 8005fba:	9400      	str	r4, [sp, #0]
 8005fbc:	481d      	ldr	r0, [pc, #116]	; (8006034 <SX1276Init+0x8c>)
 8005fbe:	f001 f9bf 	bl	8007340 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	002b      	movs	r3, r5
 8005fc6:	0022      	movs	r2, r4
 8005fc8:	9400      	str	r4, [sp, #0]
 8005fca:	4249      	negs	r1, r1
 8005fcc:	481a      	ldr	r0, [pc, #104]	; (8006038 <SX1276Init+0x90>)
 8005fce:	f001 f9b7 	bl	8007340 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	002b      	movs	r3, r5
 8005fd6:	0022      	movs	r2, r4
 8005fd8:	4249      	negs	r1, r1
 8005fda:	9400      	str	r4, [sp, #0]
 8005fdc:	4817      	ldr	r0, [pc, #92]	; (800603c <SX1276Init+0x94>)
 8005fde:	f001 f9af 	bl	8007340 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	f7fc fef2 	bl	8002dcc <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 8005fe8:	f7fd f890 	bl	800310c <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 8005fec:	f7ff fcfc 	bl	80059e8 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8005ff0:	0020      	movs	r0, r4
 8005ff2:	f7ff fdf2 	bl	8005bda <SX1276SetOpMode>
    Sx_Board_IoIrqInit( DioIrq );
 8005ff6:	4812      	ldr	r0, [pc, #72]	; (8006040 <SX1276Init+0x98>)
 8005ff8:	f7fd f830 	bl	800305c <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
 8005ffc:	4d11      	ldr	r5, [pc, #68]	; (8006044 <SX1276Init+0x9c>)
 8005ffe:	002c      	movs	r4, r5
 8006000:	353c      	adds	r5, #60	; 0x3c
 8006002:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 8006004:	7820      	ldrb	r0, [r4, #0]
 8006006:	f7ff ff95 	bl	8005f34 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800600a:	78a1      	ldrb	r1, [r4, #2]
 800600c:	7860      	ldrb	r0, [r4, #1]
 800600e:	3403      	adds	r4, #3
 8006010:	f7ff fc95 	bl	800593e <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006014:	42ac      	cmp	r4, r5
 8006016:	d1f5      	bne.n	8006004 <SX1276Init+0x5c>
    SX1276SetModem( MODEM_FSK );
 8006018:	2000      	movs	r0, #0
 800601a:	f7ff ff8b 	bl	8005f34 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800601e:	2200      	movs	r2, #0
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <SX1276Init+0xa0>)
 8006022:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8006024:	f7fc fed0 	bl	8002dc8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8006028:	3002      	adds	r0, #2
}
 800602a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800602c:	08006815 	.word	0x08006815
 8006030:	200000e8 	.word	0x200000e8
 8006034:	20000760 	.word	0x20000760
 8006038:	200007f8 	.word	0x200007f8
 800603c:	20000778 	.word	0x20000778
 8006040:	20000024 	.word	0x20000024
 8006044:	080079d0 	.word	0x080079d0
 8006048:	20000790 	.word	0x20000790

0800604c <SX1276IsChannelFree>:
{
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	0007      	movs	r7, r0
 8006050:	000c      	movs	r4, r1
 8006052:	0016      	movs	r6, r2
 8006054:	001d      	movs	r5, r3
    SX1276SetSleep( );
 8006056:	f7ff fdf1 	bl	8005c3c <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800605a:	2000      	movs	r0, #0
 800605c:	f7ff ff6a 	bl	8005f34 <SX1276SetModem>
    SX1276SetChannel( freq );
 8006060:	0038      	movs	r0, r7
 8006062:	f7ff fc75 	bl	8005950 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8006066:	0020      	movs	r0, r4
 8006068:	f7ff fbc2 	bl	80057f0 <GetFskBandwidthRegValue>
 800606c:	0004      	movs	r4, r0
 800606e:	0001      	movs	r1, r0
 8006070:	2012      	movs	r0, #18
 8006072:	f7ff fc64 	bl	800593e <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8006076:	0021      	movs	r1, r4
 8006078:	2013      	movs	r0, #19
 800607a:	f7ff fc60 	bl	800593e <SX1276Write>
 800607e:	f7ff fd99 	bl	8005bb4 <SX1276SetOpMode.part.3>
    RADIO_DELAY_MS( 1 );
 8006082:	2001      	movs	r0, #1
 8006084:	f7fc fc24 	bl	80028d0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8006088:	f001 f976 	bl	8007378 <UTIL_TIMER_GetCurrentTime>
 800608c:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800608e:	0020      	movs	r0, r4
 8006090:	f001 f97c 	bl	800738c <UTIL_TIMER_GetElapsedTime>
 8006094:	42a8      	cmp	r0, r5
 8006096:	d304      	bcc.n	80060a2 <SX1276IsChannelFree+0x56>
    bool status = true;
 8006098:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800609a:	f7ff fdcf 	bl	8005c3c <SX1276SetSleep>
}
 800609e:	0020      	movs	r0, r4
 80060a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 80060a2:	2000      	movs	r0, #0
 80060a4:	f7ff ff24 	bl	8005ef0 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 80060a8:	42b0      	cmp	r0, r6
 80060aa:	ddf0      	ble.n	800608e <SX1276IsChannelFree+0x42>
            status = false;
 80060ac:	2400      	movs	r4, #0
 80060ae:	e7f4      	b.n	800609a <SX1276IsChannelFree+0x4e>

080060b0 <SX1276Random>:
{
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 80060b4:	2001      	movs	r0, #1
 80060b6:	f7ff ff3d 	bl	8005f34 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80060ba:	21ff      	movs	r1, #255	; 0xff
 80060bc:	2011      	movs	r0, #17
 80060be:	f7ff fc3e 	bl	800593e <SX1276Write>
    uint32_t rnd = 0;
 80060c2:	0025      	movs	r5, r4
 80060c4:	f7ff fd76 	bl	8005bb4 <SX1276SetOpMode.part.3>
        RADIO_DELAY_MS( 1 );
 80060c8:	2601      	movs	r6, #1
 80060ca:	0030      	movs	r0, r6
 80060cc:	f7fc fc00 	bl	80028d0 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80060d0:	202c      	movs	r0, #44	; 0x2c
 80060d2:	f7ff fc7f 	bl	80059d4 <SX1276Read>
 80060d6:	4030      	ands	r0, r6
 80060d8:	40a0      	lsls	r0, r4
 80060da:	3401      	adds	r4, #1
 80060dc:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 80060de:	2c20      	cmp	r4, #32
 80060e0:	d1f3      	bne.n	80060ca <SX1276Random+0x1a>
    SX1276SetSleep( );
 80060e2:	f7ff fdab 	bl	8005c3c <SX1276SetSleep>
}
 80060e6:	0028      	movs	r0, r5
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080060ec <SX1276SetRxConfig>:
{
 80060ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ee:	b08d      	sub	sp, #52	; 0x34
 80060f0:	9306      	str	r3, [sp, #24]
 80060f2:	ab12      	add	r3, sp, #72	; 0x48
 80060f4:	0016      	movs	r6, r2
 80060f6:	cb04      	ldmia	r3!, {r2}
 80060f8:	0004      	movs	r4, r0
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	9208      	str	r2, [sp, #32]
 80060fe:	9301      	str	r3, [sp, #4]
 8006100:	ab14      	add	r3, sp, #80	; 0x50
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	aa0c      	add	r2, sp, #48	; 0x30
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	ab15      	add	r3, sp, #84	; 0x54
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	000d      	movs	r5, r1
 800610e:	9302      	str	r3, [sp, #8]
 8006110:	ab16      	add	r3, sp, #88	; 0x58
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	9303      	str	r3, [sp, #12]
 8006116:	ab17      	add	r3, sp, #92	; 0x5c
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	ab18      	add	r3, sp, #96	; 0x60
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	930a      	str	r3, [sp, #40]	; 0x28
 8006122:	ab19      	add	r3, sp, #100	; 0x64
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	930b      	str	r3, [sp, #44]	; 0x2c
 8006128:	2319      	movs	r3, #25
 800612a:	189b      	adds	r3, r3, r2
 800612c:	7fdf      	ldrb	r7, [r3, #31]
 800612e:	231d      	movs	r3, #29
 8006130:	189b      	adds	r3, r3, r2
 8006132:	7fdb      	ldrb	r3, [r3, #31]
 8006134:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 8006136:	f7ff fefd 	bl	8005f34 <SX1276SetModem>
    switch( modem )
 800613a:	2c00      	cmp	r4, #0
 800613c:	d004      	beq.n	8006148 <SX1276SetRxConfig+0x5c>
 800613e:	2c01      	cmp	r4, #1
 8006140:	d100      	bne.n	8006144 <SX1276SetRxConfig+0x58>
 8006142:	e084      	b.n	800624e <SX1276SetRxConfig+0x162>
}
 8006144:	b00d      	add	sp, #52	; 0x34
 8006146:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006148:	4ca8      	ldr	r4, [pc, #672]	; (80063ec <SX1276SetRxConfig+0x300>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800614a:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800614c:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800614e:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006150:	1ce3      	adds	r3, r4, #3
 8006152:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8006154:	9a03      	ldr	r2, [sp, #12]
 8006156:	1d23      	adds	r3, r4, #4
 8006158:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800615a:	9a04      	ldr	r2, [sp, #16]
 800615c:	1d63      	adds	r3, r4, #5
 800615e:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8006160:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006162:	1da3      	adds	r3, r4, #6
 8006164:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8006166:	1de3      	adds	r3, r4, #7
 8006168:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800616a:	9b01      	ldr	r3, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 800616c:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800616e:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006170:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8006172:	0030      	movs	r0, r6
 8006174:	f7fb fbba 	bl	80018ec <__aeabi_ui2d>
 8006178:	0002      	movs	r2, r0
 800617a:	000b      	movs	r3, r1
 800617c:	0006      	movs	r6, r0
 800617e:	000f      	movs	r7, r1
 8006180:	2000      	movs	r0, #0
 8006182:	499b      	ldr	r1, [pc, #620]	; (80063f0 <SX1276SetRxConfig+0x304>)
 8006184:	f7fa fa86 	bl	8000694 <__aeabi_ddiv>
 8006188:	2200      	movs	r2, #0
 800618a:	4b9a      	ldr	r3, [pc, #616]	; (80063f4 <SX1276SetRxConfig+0x308>)
 800618c:	f7fa fd84 	bl	8000c98 <__aeabi_dmul>
 8006190:	9006      	str	r0, [sp, #24]
 8006192:	9107      	str	r1, [sp, #28]
 8006194:	9805      	ldr	r0, [sp, #20]
 8006196:	f7fb fb6f 	bl	8001878 <__aeabi_i2d>
 800619a:	0002      	movs	r2, r0
 800619c:	000b      	movs	r3, r1
 800619e:	9806      	ldr	r0, [sp, #24]
 80061a0:	9907      	ldr	r1, [sp, #28]
 80061a2:	f7fa fd79 	bl	8000c98 <__aeabi_dmul>
 80061a6:	2200      	movs	r2, #0
 80061a8:	4b93      	ldr	r3, [pc, #588]	; (80063f8 <SX1276SetRxConfig+0x30c>)
 80061aa:	f7fa fd75 	bl	8000c98 <__aeabi_dmul>
 80061ae:	f7fa f991 	bl	80004d4 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80061b2:	0032      	movs	r2, r6
 80061b4:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80061b6:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80061b8:	4990      	ldr	r1, [pc, #576]	; (80063fc <SX1276SetRxConfig+0x310>)
 80061ba:	2000      	movs	r0, #0
 80061bc:	f7fa fa6a 	bl	8000694 <__aeabi_ddiv>
 80061c0:	f7fa f988 	bl	80004d4 <__aeabi_d2uiz>
 80061c4:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80061c6:	0a21      	lsrs	r1, r4, #8
 80061c8:	2002      	movs	r0, #2
 80061ca:	f7ff fbb8 	bl	800593e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80061ce:	b2e1      	uxtb	r1, r4
 80061d0:	2003      	movs	r0, #3
 80061d2:	f7ff fbb4 	bl	800593e <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80061d6:	0028      	movs	r0, r5
 80061d8:	f7ff fb0a 	bl	80057f0 <GetFskBandwidthRegValue>
 80061dc:	0001      	movs	r1, r0
 80061de:	2012      	movs	r0, #18
 80061e0:	f7ff fbad 	bl	800593e <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80061e4:	9808      	ldr	r0, [sp, #32]
 80061e6:	f7ff fb03 	bl	80057f0 <GetFskBandwidthRegValue>
 80061ea:	0001      	movs	r1, r0
 80061ec:	2013      	movs	r0, #19
 80061ee:	f7ff fba6 	bl	800593e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	2025      	movs	r0, #37	; 0x25
 80061f6:	0a19      	lsrs	r1, r3, #8
 80061f8:	f7ff fba1 	bl	800593e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80061fc:	466b      	mov	r3, sp
 80061fe:	2026      	movs	r0, #38	; 0x26
 8006200:	7919      	ldrb	r1, [r3, #4]
 8006202:	f7ff fb9c 	bl	800593e <SX1276Write>
            if( fixLen == 1 )
 8006206:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8006208:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 800620a:	2b00      	cmp	r3, #0
 800620c:	d100      	bne.n	8006210 <SX1276SetRxConfig+0x124>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800620e:	21ff      	movs	r1, #255	; 0xff
 8006210:	2032      	movs	r0, #50	; 0x32
 8006212:	f7ff fb94 	bl	800593e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006216:	2030      	movs	r0, #48	; 0x30
 8006218:	f7ff fbdc 	bl	80059d4 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800621c:	216f      	movs	r1, #111	; 0x6f
 800621e:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006220:	2100      	movs	r1, #0
 8006222:	9b02      	ldr	r3, [sp, #8]
 8006224:	428b      	cmp	r3, r1
 8006226:	d100      	bne.n	800622a <SX1276SetRxConfig+0x13e>
 8006228:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 800622a:	9b04      	ldr	r3, [sp, #16]
 800622c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800622e:	4318      	orrs	r0, r3
 8006230:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8006232:	b2c9      	uxtb	r1, r1
 8006234:	2030      	movs	r0, #48	; 0x30
 8006236:	f7ff fb82 	bl	800593e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800623a:	2031      	movs	r0, #49	; 0x31
 800623c:	f7ff fbca 	bl	80059d4 <SX1276Read>
 8006240:	2140      	movs	r1, #64	; 0x40
 8006242:	4301      	orrs	r1, r0
 8006244:	2031      	movs	r0, #49	; 0x31
 8006246:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006248:	f7ff fb79 	bl	800593e <SX1276Write>
}
 800624c:	e77a      	b.n	8006144 <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 800624e:	2d02      	cmp	r5, #2
 8006250:	d900      	bls.n	8006254 <SX1276SetRxConfig+0x168>
 8006252:	e7fe      	b.n	8006252 <SX1276SetRxConfig+0x166>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006254:	4b65      	ldr	r3, [pc, #404]	; (80063ec <SX1276SetRxConfig+0x300>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8006256:	9906      	ldr	r1, [sp, #24]
 8006258:	001a      	movs	r2, r3
 800625a:	324d      	adds	r2, #77	; 0x4d
 800625c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800625e:	001a      	movs	r2, r3
 8006260:	9901      	ldr	r1, [sp, #4]
 8006262:	324e      	adds	r2, #78	; 0x4e
 8006264:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8006266:	001a      	movs	r2, r3
 8006268:	9902      	ldr	r1, [sp, #8]
 800626a:	3250      	adds	r2, #80	; 0x50
 800626c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800626e:	001a      	movs	r2, r3
 8006270:	9903      	ldr	r1, [sp, #12]
 8006272:	3251      	adds	r2, #81	; 0x51
 8006274:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8006276:	001a      	movs	r2, r3
 8006278:	9904      	ldr	r1, [sp, #16]
 800627a:	3252      	adds	r2, #82	; 0x52
 800627c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800627e:	001a      	movs	r2, r3
 8006280:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006282:	3253      	adds	r2, #83	; 0x53
 8006284:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006286:	001a      	movs	r2, r3
 8006288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800628a:	3254      	adds	r2, #84	; 0x54
 800628c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800628e:	001a      	movs	r2, r3
 8006290:	3255      	adds	r2, #85	; 0x55
 8006292:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8006294:	001a      	movs	r2, r3
 8006296:	9909      	ldr	r1, [sp, #36]	; 0x24
            bandwidth += 7;
 8006298:	1dec      	adds	r4, r5, #7
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800629a:	3256      	adds	r2, #86	; 0x56
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800629c:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800629e:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80062a0:	7011      	strb	r1, [r2, #0]
            if( datarate > 12 )
 80062a2:	2e0c      	cmp	r6, #12
 80062a4:	d900      	bls.n	80062a8 <SX1276SetRxConfig+0x1bc>
 80062a6:	e09c      	b.n	80063e2 <SX1276SetRxConfig+0x2f6>
            else if( datarate < 6 )
 80062a8:	2e05      	cmp	r6, #5
 80062aa:	d800      	bhi.n	80062ae <SX1276SetRxConfig+0x1c2>
 80062ac:	e085      	b.n	80063ba <SX1276SetRxConfig+0x2ce>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80062ae:	2c07      	cmp	r4, #7
 80062b0:	d17c      	bne.n	80063ac <SX1276SetRxConfig+0x2c0>
 80062b2:	0032      	movs	r2, r6
 80062b4:	3a0b      	subs	r2, #11
 80062b6:	2a01      	cmp	r2, #1
 80062b8:	d87c      	bhi.n	80063b4 <SX1276SetRxConfig+0x2c8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80062ba:	2201      	movs	r2, #1
 80062bc:	334c      	adds	r3, #76	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80062be:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80062c0:	701a      	strb	r2, [r3, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80062c2:	f7ff fb87 	bl	80059d4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062c6:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80062c8:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062ca:	0059      	lsls	r1, r3, #1
 80062cc:	9b02      	ldr	r3, [sp, #8]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80062ce:	2708      	movs	r7, #8
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80062d0:	4319      	orrs	r1, r3
 80062d2:	0123      	lsls	r3, r4, #4
 80062d4:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80062d6:	b2c9      	uxtb	r1, r1
 80062d8:	f7ff fb31 	bl	800593e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80062dc:	201e      	movs	r0, #30
 80062de:	f7ff fb79 	bl	80059d4 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80062e2:	9b05      	ldr	r3, [sp, #20]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80062e4:	4038      	ands	r0, r7
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80062e6:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80062e8:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80062ea:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80062ec:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80062ee:	4319      	orrs	r1, r3
 80062f0:	4301      	orrs	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80062f2:	0130      	lsls	r0, r6, #4
            SX1276Write( REG_LR_MODEMCONFIG2,
 80062f4:	4301      	orrs	r1, r0
 80062f6:	b2c9      	uxtb	r1, r1
 80062f8:	201e      	movs	r0, #30
 80062fa:	f7ff fb20 	bl	800593e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80062fe:	2026      	movs	r0, #38	; 0x26
 8006300:	f7ff fb68 	bl	80059d4 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006304:	4d39      	ldr	r5, [pc, #228]	; (80063ec <SX1276SetRxConfig+0x300>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006306:	43b8      	bics	r0, r7
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006308:	002b      	movs	r3, r5
 800630a:	334c      	adds	r3, #76	; 0x4c
 800630c:	7819      	ldrb	r1, [r3, #0]
 800630e:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006310:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006312:	b2c9      	uxtb	r1, r1
 8006314:	2026      	movs	r0, #38	; 0x26
 8006316:	f7ff fb12 	bl	800593e <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800631a:	466b      	mov	r3, sp
 800631c:	201f      	movs	r0, #31
 800631e:	7d19      	ldrb	r1, [r3, #20]
 8006320:	f7ff fb0d 	bl	800593e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006324:	9b01      	ldr	r3, [sp, #4]
 8006326:	2020      	movs	r0, #32
 8006328:	0a19      	lsrs	r1, r3, #8
 800632a:	f7ff fb08 	bl	800593e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800632e:	466b      	mov	r3, sp
 8006330:	2021      	movs	r0, #33	; 0x21
 8006332:	7919      	ldrb	r1, [r3, #4]
 8006334:	f7ff fb03 	bl	800593e <SX1276Write>
            if( fixLen == 1 )
 8006338:	9b02      	ldr	r3, [sp, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <SX1276SetRxConfig+0x25a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800633e:	9903      	ldr	r1, [sp, #12]
 8006340:	2022      	movs	r0, #34	; 0x22
 8006342:	f7ff fafc 	bl	800593e <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006346:	002b      	movs	r3, r5
 8006348:	3353      	adds	r3, #83	; 0x53
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00f      	beq.n	8006370 <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006350:	2044      	movs	r0, #68	; 0x44
 8006352:	f7ff fb3f 	bl	80059d4 <SX1276Read>
 8006356:	2180      	movs	r1, #128	; 0x80
 8006358:	4249      	negs	r1, r1
 800635a:	4301      	orrs	r1, r0
 800635c:	b2c9      	uxtb	r1, r1
 800635e:	2044      	movs	r0, #68	; 0x44
 8006360:	f7ff faed 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006364:	002b      	movs	r3, r5
 8006366:	3354      	adds	r3, #84	; 0x54
 8006368:	7819      	ldrb	r1, [r3, #0]
 800636a:	2024      	movs	r0, #36	; 0x24
 800636c:	f7ff fae7 	bl	800593e <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006370:	2c09      	cmp	r4, #9
 8006372:	d128      	bne.n	80063c6 <SX1276SetRxConfig+0x2da>
 8006374:	4b22      	ldr	r3, [pc, #136]	; (8006400 <SX1276SetRxConfig+0x314>)
 8006376:	68aa      	ldr	r2, [r5, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006378:	2102      	movs	r1, #2
 800637a:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800637c:	429a      	cmp	r2, r3
 800637e:	d91e      	bls.n	80063be <SX1276SetRxConfig+0x2d2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006380:	f7ff fadd 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8006384:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8006386:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8006388:	f7ff fad9 	bl	800593e <SX1276Write>
 800638c:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800638e:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8006390:	2e06      	cmp	r6, #6
 8006392:	d11b      	bne.n	80063cc <SX1276SetRxConfig+0x2e0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006394:	f7ff fb1e 	bl	80059d4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006398:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800639a:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800639c:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800639e:	b2c9      	uxtb	r1, r1
 80063a0:	2031      	movs	r0, #49	; 0x31
 80063a2:	f7ff facc 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063a6:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063a8:	2037      	movs	r0, #55	; 0x37
 80063aa:	e74d      	b.n	8006248 <SX1276SetRxConfig+0x15c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80063ac:	2c08      	cmp	r4, #8
 80063ae:	d101      	bne.n	80063b4 <SX1276SetRxConfig+0x2c8>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80063b0:	2e0c      	cmp	r6, #12
 80063b2:	d082      	beq.n	80062ba <SX1276SetRxConfig+0x1ce>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80063b4:	334c      	adds	r3, #76	; 0x4c
 80063b6:	2200      	movs	r2, #0
 80063b8:	e781      	b.n	80062be <SX1276SetRxConfig+0x1d2>
                datarate = 6;
 80063ba:	2606      	movs	r6, #6
 80063bc:	e7fa      	b.n	80063b4 <SX1276SetRxConfig+0x2c8>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80063be:	f7ff fabe 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80063c2:	217f      	movs	r1, #127	; 0x7f
 80063c4:	e7df      	b.n	8006386 <SX1276SetRxConfig+0x29a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80063c6:	2103      	movs	r1, #3
 80063c8:	2036      	movs	r0, #54	; 0x36
 80063ca:	e7dd      	b.n	8006388 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063cc:	f7ff fb02 	bl	80059d4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063d0:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80063d2:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80063d4:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80063d6:	b2c9      	uxtb	r1, r1
 80063d8:	2031      	movs	r0, #49	; 0x31
 80063da:	f7ff fab0 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80063de:	210a      	movs	r1, #10
 80063e0:	e7e2      	b.n	80063a8 <SX1276SetRxConfig+0x2bc>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80063e2:	260c      	movs	r6, #12
 80063e4:	2d02      	cmp	r5, #2
 80063e6:	d0e5      	beq.n	80063b4 <SX1276SetRxConfig+0x2c8>
 80063e8:	e767      	b.n	80062ba <SX1276SetRxConfig+0x1ce>
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	20000790 	.word	0x20000790
 80063f0:	3ff00000 	.word	0x3ff00000
 80063f4:	40200000 	.word	0x40200000
 80063f8:	408f4000 	.word	0x408f4000
 80063fc:	417e8480 	.word	0x417e8480
 8006400:	1f4add40 	.word	0x1f4add40

08006404 <SX1276SetTxConfig>:
{
 8006404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006406:	b08d      	sub	sp, #52	; 0x34
 8006408:	9303      	str	r3, [sp, #12]
 800640a:	ab12      	add	r3, sp, #72	; 0x48
 800640c:	cb40      	ldmia	r3!, {r6}
 800640e:	9002      	str	r0, [sp, #8]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	9206      	str	r2, [sp, #24]
 8006414:	9307      	str	r3, [sp, #28]
 8006416:	ab14      	add	r3, sp, #80	; 0x50
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	000d      	movs	r5, r1
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	ab15      	add	r3, sp, #84	; 0x54
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	9304      	str	r3, [sp, #16]
 8006424:	ab16      	add	r3, sp, #88	; 0x58
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	9305      	str	r3, [sp, #20]
 800642a:	ab17      	add	r3, sp, #92	; 0x5c
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	9308      	str	r3, [sp, #32]
 8006430:	ab18      	add	r3, sp, #96	; 0x60
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	930a      	str	r3, [sp, #40]	; 0x28
 8006436:	ab19      	add	r3, sp, #100	; 0x64
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800643c:	4bbb      	ldr	r3, [pc, #748]	; (800672c <SX1276SetTxConfig+0x328>)
 800643e:	791c      	ldrb	r4, [r3, #4]
 8006440:	2c01      	cmp	r4, #1
 8006442:	d106      	bne.n	8006452 <SX1276SetTxConfig+0x4e>
 8006444:	2800      	cmp	r0, #0
 8006446:	d104      	bne.n	8006452 <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 8006448:	f7ff fbf8 	bl	8005c3c <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800644c:	0020      	movs	r0, r4
 800644e:	f7fc fa3f 	bl	80028d0 <HAL_Delay>
    SX1276SetModem( modem );
 8006452:	9802      	ldr	r0, [sp, #8]
 8006454:	f7ff fd6e 	bl	8005f34 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 8006458:	2009      	movs	r0, #9
 800645a:	f7ff fabb 	bl	80059d4 <SX1276Read>
 800645e:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 8006460:	204d      	movs	r0, #77	; 0x4d
 8006462:	f7ff fab7 	bl	80059d4 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8006466:	4bb1      	ldr	r3, [pc, #708]	; (800672c <SX1276SetTxConfig+0x328>)
    paDac = SX1276Read( REG_PADAC );
 8006468:	0007      	movs	r7, r0
 800646a:	0004      	movs	r4, r0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800646c:	6898      	ldr	r0, [r3, #8]
 800646e:	f7fc fe23 	bl	80030b8 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 8006472:	2800      	cmp	r0, #0
 8006474:	d02c      	beq.n	80064d0 <SX1276SetTxConfig+0xcc>
 8006476:	3802      	subs	r0, #2
 8006478:	b2c1      	uxtb	r1, r0
    uint8_t board_config = 0;
 800647a:	2000      	movs	r0, #0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800647c:	2901      	cmp	r1, #1
 800647e:	d929      	bls.n	80064d4 <SX1276SetTxConfig+0xd0>
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 8006480:	217f      	movs	r1, #127	; 0x7f
 8006482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006484:	400b      	ands	r3, r1
 8006486:	0019      	movs	r1, r3
 8006488:	4301      	orrs	r1, r0
 800648a:	b249      	sxtb	r1, r1
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800648c:	2900      	cmp	r1, #0
 800648e:	da36      	bge.n	80064fe <SX1276SetTxConfig+0xfa>
 8006490:	2307      	movs	r3, #7
        if( power > 17 )
 8006492:	2d11      	cmp	r5, #17
 8006494:	dd20      	ble.n	80064d8 <SX1276SetTxConfig+0xd4>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8006496:	431f      	orrs	r7, r3
 8006498:	230f      	movs	r3, #15
 800649a:	b2fc      	uxtb	r4, r7
 800649c:	4399      	bics	r1, r3
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800649e:	43e3      	mvns	r3, r4
 80064a0:	075b      	lsls	r3, r3, #29
 80064a2:	d121      	bne.n	80064e8 <SX1276SetTxConfig+0xe4>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80064a4:	1c2b      	adds	r3, r5, #0
 80064a6:	2d14      	cmp	r5, #20
 80064a8:	dd19      	ble.n	80064de <SX1276SetTxConfig+0xda>
 80064aa:	2314      	movs	r3, #20
 80064ac:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80064ae:	4319      	orrs	r1, r3
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 80064b0:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 80064b2:	2009      	movs	r0, #9
 80064b4:	f7ff fa43 	bl	800593e <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80064b8:	0021      	movs	r1, r4
 80064ba:	204d      	movs	r0, #77	; 0x4d
 80064bc:	f7ff fa3f 	bl	800593e <SX1276Write>
    switch( modem )
 80064c0:	9b02      	ldr	r3, [sp, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d02a      	beq.n	800651c <SX1276SetTxConfig+0x118>
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d100      	bne.n	80064cc <SX1276SetTxConfig+0xc8>
 80064ca:	e088      	b.n	80065de <SX1276SetTxConfig+0x1da>
}
 80064cc:	b00d      	add	sp, #52	; 0x34
 80064ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 80064d0:	2d0e      	cmp	r5, #14
 80064d2:	ddd5      	ble.n	8006480 <SX1276SetTxConfig+0x7c>
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 80064d4:	2080      	movs	r0, #128	; 0x80
 80064d6:	e7d3      	b.n	8006480 <SX1276SetTxConfig+0x7c>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80064d8:	439f      	bics	r7, r3
 80064da:	2304      	movs	r3, #4
 80064dc:	e7db      	b.n	8006496 <SX1276SetTxConfig+0x92>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80064de:	b26a      	sxtb	r2, r5
 80064e0:	2a05      	cmp	r2, #5
 80064e2:	dae3      	bge.n	80064ac <SX1276SetTxConfig+0xa8>
 80064e4:	2305      	movs	r3, #5
 80064e6:	e7e1      	b.n	80064ac <SX1276SetTxConfig+0xa8>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80064e8:	1c2b      	adds	r3, r5, #0
 80064ea:	2d11      	cmp	r5, #17
 80064ec:	dd02      	ble.n	80064f4 <SX1276SetTxConfig+0xf0>
 80064ee:	2311      	movs	r3, #17
 80064f0:	3b02      	subs	r3, #2
 80064f2:	e7dc      	b.n	80064ae <SX1276SetTxConfig+0xaa>
 80064f4:	b26a      	sxtb	r2, r5
 80064f6:	2a02      	cmp	r2, #2
 80064f8:	dafa      	bge.n	80064f0 <SX1276SetTxConfig+0xec>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e7f8      	b.n	80064f0 <SX1276SetTxConfig+0xec>
        if( power > 0 )
 80064fe:	2d00      	cmp	r5, #0
 8006500:	dd05      	ble.n	800650e <SX1276SetTxConfig+0x10a>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8006502:	1c2b      	adds	r3, r5, #0
 8006504:	2d0f      	cmp	r5, #15
 8006506:	dd00      	ble.n	800650a <SX1276SetTxConfig+0x106>
 8006508:	230f      	movs	r3, #15
 800650a:	2170      	movs	r1, #112	; 0x70
 800650c:	e7cf      	b.n	80064ae <SX1276SetTxConfig+0xaa>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800650e:	1c29      	adds	r1, r5, #0
 8006510:	1d2b      	adds	r3, r5, #4
 8006512:	da01      	bge.n	8006518 <SX1276SetTxConfig+0x114>
 8006514:	4b86      	ldr	r3, [pc, #536]	; (8006730 <SX1276SetTxConfig+0x32c>)
 8006516:	7819      	ldrb	r1, [r3, #0]
 8006518:	3104      	adds	r1, #4
 800651a:	e7c9      	b.n	80064b0 <SX1276SetTxConfig+0xac>
            SX1276.Settings.Fsk.Power = power;
 800651c:	4b83      	ldr	r3, [pc, #524]	; (800672c <SX1276SetTxConfig+0x328>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800651e:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006520:	9904      	ldr	r1, [sp, #16]
            SX1276.Settings.Fsk.Fdev = fdev;
 8006522:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006524:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.Power = power;
 8006526:	731d      	strb	r5, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006528:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800652a:	9a01      	ldr	r2, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 800652c:	61de      	str	r6, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800652e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006530:	1cda      	adds	r2, r3, #3
 8006532:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006534:	9905      	ldr	r1, [sp, #20]
 8006536:	1d5a      	adds	r2, r3, #5
 8006538:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800653a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800653c:	1d9a      	adds	r2, r3, #6
 800653e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006540:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8006542:	9806      	ldr	r0, [sp, #24]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006544:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8006546:	f7fb f9d1 	bl	80018ec <__aeabi_ui2d>
 800654a:	2200      	movs	r2, #0
 800654c:	4b79      	ldr	r3, [pc, #484]	; (8006734 <SX1276SetTxConfig+0x330>)
 800654e:	f7fa f8a1 	bl	8000694 <__aeabi_ddiv>
 8006552:	f7f9 ffbf 	bl	80004d4 <__aeabi_d2uiz>
 8006556:	b284      	uxth	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8006558:	0a21      	lsrs	r1, r4, #8
 800655a:	2004      	movs	r0, #4
 800655c:	f7ff f9ef 	bl	800593e <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8006560:	b2e1      	uxtb	r1, r4
 8006562:	2005      	movs	r0, #5
 8006564:	f7ff f9eb 	bl	800593e <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8006568:	0030      	movs	r0, r6
 800656a:	f7fb f9bf 	bl	80018ec <__aeabi_ui2d>
 800656e:	0002      	movs	r2, r0
 8006570:	000b      	movs	r3, r1
 8006572:	2000      	movs	r0, #0
 8006574:	4970      	ldr	r1, [pc, #448]	; (8006738 <SX1276SetTxConfig+0x334>)
 8006576:	f7fa f88d 	bl	8000694 <__aeabi_ddiv>
 800657a:	f7f9 ffab 	bl	80004d4 <__aeabi_d2uiz>
 800657e:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8006580:	0a21      	lsrs	r1, r4, #8
 8006582:	2002      	movs	r0, #2
 8006584:	f7ff f9db 	bl	800593e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8006588:	b2e1      	uxtb	r1, r4
 800658a:	2003      	movs	r0, #3
 800658c:	f7ff f9d7 	bl	800593e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006590:	9b01      	ldr	r3, [sp, #4]
 8006592:	2025      	movs	r0, #37	; 0x25
 8006594:	0a19      	lsrs	r1, r3, #8
 8006596:	f7ff f9d2 	bl	800593e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800659a:	466b      	mov	r3, sp
 800659c:	2026      	movs	r0, #38	; 0x26
 800659e:	7919      	ldrb	r1, [r3, #4]
 80065a0:	f7ff f9cd 	bl	800593e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80065a4:	2030      	movs	r0, #48	; 0x30
 80065a6:	f7ff fa15 	bl	80059d4 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80065aa:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80065ac:	9b04      	ldr	r3, [sp, #16]
                           RF_PACKETCONFIG1_CRC_MASK &
 80065ae:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80065b0:	9902      	ldr	r1, [sp, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <SX1276SetTxConfig+0x1b6>
 80065b6:	2180      	movs	r1, #128	; 0x80
 80065b8:	4249      	negs	r1, r1
                           ( crcOn << 4 ) );
 80065ba:	9b05      	ldr	r3, [sp, #20]
 80065bc:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80065be:	4318      	orrs	r0, r3
 80065c0:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 80065c2:	b2c9      	uxtb	r1, r1
 80065c4:	2030      	movs	r0, #48	; 0x30
 80065c6:	f7ff f9ba 	bl	800593e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80065ca:	2031      	movs	r0, #49	; 0x31
 80065cc:	f7ff fa02 	bl	80059d4 <SX1276Read>
 80065d0:	2140      	movs	r1, #64	; 0x40
 80065d2:	4301      	orrs	r1, r0
 80065d4:	2031      	movs	r0, #49	; 0x31
 80065d6:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80065d8:	f7ff f9b1 	bl	800593e <SX1276Write>
}
 80065dc:	e776      	b.n	80064cc <SX1276SetTxConfig+0xc8>
            SX1276.Settings.LoRa.Power = power;
 80065de:	4c53      	ldr	r4, [pc, #332]	; (800672c <SX1276SetTxConfig+0x328>)
 80065e0:	0023      	movs	r3, r4
 80065e2:	3340      	adds	r3, #64	; 0x40
 80065e4:	701d      	strb	r5, [r3, #0]
            if( bandwidth > 2 )
 80065e6:	9b03      	ldr	r3, [sp, #12]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d900      	bls.n	80065ee <SX1276SetTxConfig+0x1ea>
 80065ec:	e7fe      	b.n	80065ec <SX1276SetTxConfig+0x1e8>
            bandwidth += 7;
 80065ee:	9b03      	ldr	r3, [sp, #12]
            SX1276.Settings.LoRa.Coderate = coderate;
 80065f0:	9a07      	ldr	r2, [sp, #28]
            bandwidth += 7;
 80065f2:	1ddd      	adds	r5, r3, #7
            SX1276.Settings.LoRa.Coderate = coderate;
 80065f4:	0023      	movs	r3, r4
 80065f6:	334d      	adds	r3, #77	; 0x4d
 80065f8:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80065fa:	0023      	movs	r3, r4
 80065fc:	9a01      	ldr	r2, [sp, #4]
 80065fe:	334e      	adds	r3, #78	; 0x4e
 8006600:	801a      	strh	r2, [r3, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8006602:	0023      	movs	r3, r4
 8006604:	9a04      	ldr	r2, [sp, #16]
 8006606:	3350      	adds	r3, #80	; 0x50
 8006608:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800660a:	0023      	movs	r3, r4
 800660c:	9a08      	ldr	r2, [sp, #32]
 800660e:	3353      	adds	r3, #83	; 0x53
 8006610:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006612:	0023      	movs	r3, r4
 8006614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006616:	3354      	adds	r3, #84	; 0x54
 8006618:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800661a:	0023      	movs	r3, r4
 800661c:	9a05      	ldr	r2, [sp, #20]
 800661e:	3352      	adds	r3, #82	; 0x52
 8006620:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006622:	0023      	movs	r3, r4
 8006624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006626:	3355      	adds	r3, #85	; 0x55
 8006628:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800662a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800662c:	6465      	str	r5, [r4, #68]	; 0x44
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800662e:	65a3      	str	r3, [r4, #88]	; 0x58
            SX1276.Settings.LoRa.Datarate = datarate;
 8006630:	64a6      	str	r6, [r4, #72]	; 0x48
 8006632:	0023      	movs	r3, r4
            if( datarate > 12 )
 8006634:	2e0c      	cmp	r6, #12
 8006636:	d874      	bhi.n	8006722 <SX1276SetTxConfig+0x31e>
            else if( datarate < 6 )
 8006638:	2e05      	cmp	r6, #5
 800663a:	d965      	bls.n	8006708 <SX1276SetTxConfig+0x304>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800663c:	2d07      	cmp	r5, #7
 800663e:	d15c      	bne.n	80066fa <SX1276SetTxConfig+0x2f6>
 8006640:	0032      	movs	r2, r6
 8006642:	3a0b      	subs	r2, #11
 8006644:	2a01      	cmp	r2, #1
 8006646:	d85c      	bhi.n	8006702 <SX1276SetTxConfig+0x2fe>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8006648:	2201      	movs	r2, #1
 800664a:	334c      	adds	r3, #76	; 0x4c
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800664c:	701a      	strb	r2, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800664e:	9b08      	ldr	r3, [sp, #32]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00f      	beq.n	8006674 <SX1276SetTxConfig+0x270>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006654:	2044      	movs	r0, #68	; 0x44
 8006656:	f7ff f9bd 	bl	80059d4 <SX1276Read>
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	4249      	negs	r1, r1
 800665e:	4301      	orrs	r1, r0
 8006660:	b2c9      	uxtb	r1, r1
 8006662:	2044      	movs	r0, #68	; 0x44
 8006664:	f7ff f96b 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006668:	4b30      	ldr	r3, [pc, #192]	; (800672c <SX1276SetTxConfig+0x328>)
 800666a:	2024      	movs	r0, #36	; 0x24
 800666c:	3354      	adds	r3, #84	; 0x54
 800666e:	7819      	ldrb	r1, [r3, #0]
 8006670:	f7ff f965 	bl	800593e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006674:	201d      	movs	r0, #29
 8006676:	f7ff f9ad 	bl	80059d4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800667a:	9b07      	ldr	r3, [sp, #28]
 800667c:	012d      	lsls	r5, r5, #4
 800667e:	0059      	lsls	r1, r3, #1
 8006680:	9b04      	ldr	r3, [sp, #16]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006682:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006684:	430b      	orrs	r3, r1
 8006686:	0019      	movs	r1, r3
 8006688:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800668a:	b2c9      	uxtb	r1, r1
 800668c:	f7ff f957 	bl	800593e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006690:	201e      	movs	r0, #30
 8006692:	f7ff f99f 	bl	80059d4 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8006696:	9b05      	ldr	r3, [sp, #20]
 8006698:	0131      	lsls	r1, r6, #4
 800669a:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800669c:	4319      	orrs	r1, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800669e:	230b      	movs	r3, #11
 80066a0:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80066a2:	4301      	orrs	r1, r0
 80066a4:	b2c9      	uxtb	r1, r1
 80066a6:	201e      	movs	r0, #30
 80066a8:	f7ff f949 	bl	800593e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80066ac:	2026      	movs	r0, #38	; 0x26
 80066ae:	f7ff f991 	bl	80059d4 <SX1276Read>
 80066b2:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80066b4:	344c      	adds	r4, #76	; 0x4c
 80066b6:	7821      	ldrb	r1, [r4, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80066b8:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80066ba:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80066bc:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 80066be:	b2c9      	uxtb	r1, r1
 80066c0:	2026      	movs	r0, #38	; 0x26
 80066c2:	f7ff f93c 	bl	800593e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80066c6:	9b01      	ldr	r3, [sp, #4]
 80066c8:	2020      	movs	r0, #32
 80066ca:	0a19      	lsrs	r1, r3, #8
 80066cc:	f7ff f937 	bl	800593e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80066d0:	466b      	mov	r3, sp
 80066d2:	2021      	movs	r0, #33	; 0x21
 80066d4:	7919      	ldrb	r1, [r3, #4]
 80066d6:	f7ff f932 	bl	800593e <SX1276Write>
 80066da:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80066dc:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80066de:	2e06      	cmp	r6, #6
 80066e0:	d114      	bne.n	800670c <SX1276SetTxConfig+0x308>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80066e2:	f7ff f977 	bl	80059d4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80066e6:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80066e8:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80066ea:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80066ec:	b2c9      	uxtb	r1, r1
 80066ee:	2031      	movs	r0, #49	; 0x31
 80066f0:	f7ff f925 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80066f4:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80066f6:	2037      	movs	r0, #55	; 0x37
 80066f8:	e76e      	b.n	80065d8 <SX1276SetTxConfig+0x1d4>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80066fa:	2d08      	cmp	r5, #8
 80066fc:	d101      	bne.n	8006702 <SX1276SetTxConfig+0x2fe>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80066fe:	2e0c      	cmp	r6, #12
 8006700:	d0a2      	beq.n	8006648 <SX1276SetTxConfig+0x244>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006702:	334c      	adds	r3, #76	; 0x4c
 8006704:	2200      	movs	r2, #0
 8006706:	e7a1      	b.n	800664c <SX1276SetTxConfig+0x248>
                datarate = 6;
 8006708:	2606      	movs	r6, #6
 800670a:	e7fa      	b.n	8006702 <SX1276SetTxConfig+0x2fe>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800670c:	f7ff f962 	bl	80059d4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006710:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006712:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006714:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006716:	b2c9      	uxtb	r1, r1
 8006718:	2031      	movs	r0, #49	; 0x31
 800671a:	f7ff f910 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800671e:	210a      	movs	r1, #10
 8006720:	e7e9      	b.n	80066f6 <SX1276SetTxConfig+0x2f2>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006722:	9a03      	ldr	r2, [sp, #12]
 8006724:	260c      	movs	r6, #12
 8006726:	2a02      	cmp	r2, #2
 8006728:	d0eb      	beq.n	8006702 <SX1276SetTxConfig+0x2fe>
 800672a:	e78d      	b.n	8006648 <SX1276SetTxConfig+0x244>
 800672c:	20000790 	.word	0x20000790
 8006730:	08007c93 	.word	0x08007c93
 8006734:	404e8480 	.word	0x404e8480
 8006738:	417e8480 	.word	0x417e8480

0800673c <SX1276SetTxContinuousWave>:
{
 800673c:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800673e:	24fa      	movs	r4, #250	; 0xfa
{
 8006740:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 8006742:	00a4      	lsls	r4, r4, #2
 8006744:	4354      	muls	r4, r2
{
 8006746:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8006748:	f7ff f902 	bl	8005950 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800674c:	2305      	movs	r3, #5
 800674e:	9302      	str	r3, [sp, #8]
 8006750:	2396      	movs	r3, #150	; 0x96
 8006752:	2000      	movs	r0, #0
 8006754:	015b      	lsls	r3, r3, #5
 8006756:	0002      	movs	r2, r0
 8006758:	0029      	movs	r1, r5
 800675a:	9007      	str	r0, [sp, #28]
 800675c:	9006      	str	r0, [sp, #24]
 800675e:	9005      	str	r0, [sp, #20]
 8006760:	9004      	str	r0, [sp, #16]
 8006762:	9003      	str	r0, [sp, #12]
 8006764:	9001      	str	r0, [sp, #4]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	9408      	str	r4, [sp, #32]
 800676a:	0003      	movs	r3, r0
 800676c:	f7ff fe4a 	bl	8006404 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8006770:	2031      	movs	r0, #49	; 0x31
 8006772:	f7ff f92f 	bl	80059d4 <SX1276Read>
 8006776:	2540      	movs	r5, #64	; 0x40
 8006778:	43a8      	bics	r0, r5
 800677a:	b2c1      	uxtb	r1, r0
 800677c:	2031      	movs	r0, #49	; 0x31
 800677e:	f7ff f8de 	bl	800593e <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8006782:	0028      	movs	r0, r5
 8006784:	21f0      	movs	r1, #240	; 0xf0
 8006786:	f7ff f8da 	bl	800593e <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800678a:	21a0      	movs	r1, #160	; 0xa0
 800678c:	2041      	movs	r0, #65	; 0x41
 800678e:	f7ff f8d6 	bl	800593e <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006792:	4d08      	ldr	r5, [pc, #32]	; (80067b4 <SX1276SetTxContinuousWave+0x78>)
 8006794:	0021      	movs	r1, r4
 8006796:	0028      	movs	r0, r5
 8006798:	f000 fec4 	bl	8007524 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800679c:	2202      	movs	r2, #2
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 80067a0:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 80067a2:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80067a4:	f000 fe80 	bl	80074a8 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80067a8:	2003      	movs	r0, #3
 80067aa:	f7ff fa16 	bl	8005bda <SX1276SetOpMode>
}
 80067ae:	b00b      	add	sp, #44	; 0x2c
 80067b0:	bd30      	pop	{r4, r5, pc}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	20000760 	.word	0x20000760
 80067b8:	20000790 	.word	0x20000790

080067bc <SX1276SetMaxPayloadLength>:
{
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	0004      	movs	r4, r0
 80067c0:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 80067c2:	f7ff fbb7 	bl	8005f34 <SX1276SetModem>
    switch( modem )
 80067c6:	2c00      	cmp	r4, #0
 80067c8:	d002      	beq.n	80067d0 <SX1276SetMaxPayloadLength+0x14>
 80067ca:	2c01      	cmp	r4, #1
 80067cc:	d00a      	beq.n	80067e4 <SX1276SetMaxPayloadLength+0x28>
}
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <SX1276SetMaxPayloadLength+0x30>)
 80067d2:	3303      	adds	r3, #3
 80067d4:	7fdb      	ldrb	r3, [r3, #31]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f9      	bne.n	80067ce <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80067da:	0029      	movs	r1, r5
 80067dc:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80067de:	f7ff f8ae 	bl	800593e <SX1276Write>
}
 80067e2:	e7f4      	b.n	80067ce <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80067e4:	0029      	movs	r1, r5
 80067e6:	2023      	movs	r0, #35	; 0x23
 80067e8:	e7f9      	b.n	80067de <SX1276SetMaxPayloadLength+0x22>
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	20000790 	.word	0x20000790

080067f0 <SX1276SetPublicNetwork>:
{
 80067f0:	b510      	push	{r4, lr}
 80067f2:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 80067f4:	2001      	movs	r0, #1
 80067f6:	f7ff fb9d 	bl	8005f34 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80067fc:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80067fe:	335c      	adds	r3, #92	; 0x5c
 8006800:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8006802:	2c00      	cmp	r4, #0
 8006804:	d100      	bne.n	8006808 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8006806:	2112      	movs	r1, #18
 8006808:	2039      	movs	r0, #57	; 0x39
 800680a:	f7ff f898 	bl	800593e <SX1276Write>
}
 800680e:	bd10      	pop	{r4, pc}
 8006810:	20000790 	.word	0x20000790

08006814 <SX1276OnTimeoutIrq>:
{
 8006814:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8006816:	4c2a      	ldr	r4, [pc, #168]	; (80068c0 <SX1276OnTimeoutIrq+0xac>)
 8006818:	7923      	ldrb	r3, [r4, #4]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d002      	beq.n	8006824 <SX1276OnTimeoutIrq+0x10>
 800681e:	2b02      	cmp	r3, #2
 8006820:	d029      	beq.n	8006876 <SX1276OnTimeoutIrq+0x62>
}
 8006822:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8006824:	7963      	ldrb	r3, [r4, #5]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d117      	bne.n	800685a <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800682a:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800682c:	210b      	movs	r1, #11
 800682e:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006830:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006832:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006834:	f7ff f883 	bl	800593e <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006838:	2110      	movs	r1, #16
 800683a:	203f      	movs	r0, #63	; 0x3f
 800683c:	f7ff f87f 	bl	800593e <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8006840:	1de3      	adds	r3, r4, #7
 8006842:	7fdb      	ldrb	r3, [r3, #31]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d011      	beq.n	800686c <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006848:	200d      	movs	r0, #13
 800684a:	f7ff f8c3 	bl	80059d4 <SX1276Read>
 800684e:	2140      	movs	r1, #64	; 0x40
 8006850:	4301      	orrs	r1, r0
 8006852:	b2c9      	uxtb	r1, r1
 8006854:	200d      	movs	r0, #13
 8006856:	f7ff f872 	bl	800593e <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800685a:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <SX1276OnTimeoutIrq+0xb0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0df      	beq.n	8006822 <SX1276OnTimeoutIrq+0xe>
 8006862:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0dc      	beq.n	8006822 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8006868:	4798      	blx	r3
}
 800686a:	e7da      	b.n	8006822 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800686c:	4816      	ldr	r0, [pc, #88]	; (80068c8 <SX1276OnTimeoutIrq+0xb4>)
                SX1276.Settings.State = RF_IDLE;
 800686e:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8006870:	f000 fdc6 	bl	8007400 <UTIL_TIMER_Stop>
 8006874:	e7f1      	b.n	800685a <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 8006876:	f7fc fc49 	bl	800310c <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 800687a:	f7ff f8b5 	bl	80059e8 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800687e:	2000      	movs	r0, #0
 8006880:	f7ff f9ab 	bl	8005bda <SX1276SetOpMode>
 8006884:	4e11      	ldr	r6, [pc, #68]	; (80068cc <SX1276OnTimeoutIrq+0xb8>)
 8006886:	0035      	movs	r5, r6
 8006888:	363c      	adds	r6, #60	; 0x3c
 800688a:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 800688c:	7828      	ldrb	r0, [r5, #0]
 800688e:	f7ff fb51 	bl	8005f34 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006892:	78a9      	ldrb	r1, [r5, #2]
 8006894:	7868      	ldrb	r0, [r5, #1]
 8006896:	3503      	adds	r5, #3
 8006898:	f7ff f851 	bl	800593e <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800689c:	42b5      	cmp	r5, r6
 800689e:	d1f5      	bne.n	800688c <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 80068a0:	2000      	movs	r0, #0
 80068a2:	f7ff fb47 	bl	8005f34 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80068a6:	0023      	movs	r3, r4
 80068a8:	335c      	adds	r3, #92	; 0x5c
 80068aa:	7818      	ldrb	r0, [r3, #0]
 80068ac:	f7ff ffa0 	bl	80067f0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80068b4:	4b03      	ldr	r3, [pc, #12]	; (80068c4 <SX1276OnTimeoutIrq+0xb0>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0b2      	beq.n	8006822 <SX1276OnTimeoutIrq+0xe>
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	e7d1      	b.n	8006864 <SX1276OnTimeoutIrq+0x50>
 80068c0:	20000790 	.word	0x20000790
 80068c4:	200000e8 	.word	0x200000e8
 80068c8:	20000778 	.word	0x20000778
 80068cc:	080079d0 	.word	0x080079d0

080068d0 <SX1276Send>:
{
 80068d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068d2:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 80068d4:	4c60      	ldr	r4, [pc, #384]	; (8006a58 <SX1276Send+0x188>)
{
 80068d6:	1dde      	adds	r6, r3, #7
 80068d8:	7031      	strb	r1, [r6, #0]
    switch( SX1276.Settings.Modem )
 80068da:	7965      	ldrb	r5, [r4, #5]
{
 80068dc:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 80068de:	2d00      	cmp	r5, #0
 80068e0:	d003      	beq.n	80068ea <SX1276Send+0x1a>
 80068e2:	2d01      	cmp	r5, #1
 80068e4:	d043      	beq.n	800696e <SX1276Send+0x9e>
    uint32_t txTimeout = 0;
 80068e6:	2600      	movs	r6, #0
 80068e8:	e01d      	b.n	8006926 <SX1276Send+0x56>
            SX1276.Settings.FskPacketHandler.Size = size;
 80068ea:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80068ec:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80068ee:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 80068f0:	1ce3      	adds	r3, r4, #3
 80068f2:	7fd8      	ldrb	r0, [r3, #31]
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d12d      	bne.n	8006954 <SX1276Send+0x84>
    SX1276WriteBuffer( 0, buffer, size );
 80068f8:	2201      	movs	r2, #1
 80068fa:	0031      	movs	r1, r6
 80068fc:	f7ff f807 	bl	800590e <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8006900:	7832      	ldrb	r2, [r6, #0]
 8006902:	1e53      	subs	r3, r2, #1
 8006904:	2b3f      	cmp	r3, #63	; 0x3f
 8006906:	d829      	bhi.n	800695c <SX1276Send+0x8c>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006908:	0023      	movs	r3, r4
 800690a:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800690c:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800690e:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8006910:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 8006912:	782a      	ldrb	r2, [r5, #0]
 8006914:	0039      	movs	r1, r7
 8006916:	2000      	movs	r0, #0
 8006918:	f7fe fff9 	bl	800590e <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800691c:	782b      	ldrb	r3, [r5, #0]
 800691e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8006920:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006922:	189b      	adds	r3, r3, r2
 8006924:	87a3      	strh	r3, [r4, #60]	; 0x3c
    TimerStop( &RxTimeoutTimer );
 8006926:	484d      	ldr	r0, [pc, #308]	; (8006a5c <SX1276Send+0x18c>)
 8006928:	f000 fd6a 	bl	8007400 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800692c:	4d4c      	ldr	r5, [pc, #304]	; (8006a60 <SX1276Send+0x190>)
 800692e:	0031      	movs	r1, r6
 8006930:	0028      	movs	r0, r5
 8006932:	f000 fdf7 	bl	8007524 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 8006936:	7963      	ldrb	r3, [r4, #5]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d057      	beq.n	80069ec <SX1276Send+0x11c>
 800693c:	2b01      	cmp	r3, #1
 800693e:	d100      	bne.n	8006942 <SX1276Send+0x72>
 8006940:	e06d      	b.n	8006a1e <SX1276Send+0x14e>
    SX1276.Settings.State = RF_TX_RUNNING;
 8006942:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8006944:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8006946:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8006948:	f000 fdae 	bl	80074a8 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800694c:	2003      	movs	r0, #3
 800694e:	f7ff f944 	bl	8005bda <SX1276SetOpMode>
}
 8006952:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006954:	2032      	movs	r0, #50	; 0x32
 8006956:	f7fe fff2 	bl	800593e <SX1276Write>
 800695a:	e7d1      	b.n	8006900 <SX1276Send+0x30>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 800695c:	b292      	uxth	r2, r2
 800695e:	0039      	movs	r1, r7
 8006960:	4840      	ldr	r0, [pc, #256]	; (8006a64 <SX1276Send+0x194>)
 8006962:	f000 fbfb 	bl	800715c <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8006966:	0023      	movs	r3, r4
 8006968:	2220      	movs	r2, #32
 800696a:	333f      	adds	r3, #63	; 0x3f
 800696c:	e7ce      	b.n	800690c <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800696e:	0023      	movs	r3, r4
 8006970:	3355      	adds	r3, #85	; 0x55
 8006972:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006974:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006976:	2b00      	cmp	r3, #0
 8006978:	d02c      	beq.n	80069d4 <SX1276Send+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800697a:	f7ff f82b 	bl	80059d4 <SX1276Read>
 800697e:	2341      	movs	r3, #65	; 0x41
 8006980:	4398      	bics	r0, r3
 8006982:	b2c1      	uxtb	r1, r0
 8006984:	2033      	movs	r0, #51	; 0x33
 8006986:	f7fe ffda 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800698a:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800698c:	203b      	movs	r0, #59	; 0x3b
 800698e:	f7fe ffd6 	bl	800593e <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006992:	0023      	movs	r3, r4
 8006994:	7831      	ldrb	r1, [r6, #0]
 8006996:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006998:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800699a:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800699c:	f7fe ffcf 	bl	800593e <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80069a0:	2100      	movs	r1, #0
 80069a2:	200e      	movs	r0, #14
 80069a4:	f7fe ffcb 	bl	800593e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80069a8:	2100      	movs	r1, #0
 80069aa:	200d      	movs	r0, #13
 80069ac:	f7fe ffc7 	bl	800593e <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80069b0:	2001      	movs	r0, #1
 80069b2:	f7ff f80f 	bl	80059d4 <SX1276Read>
 80069b6:	23f8      	movs	r3, #248	; 0xf8
 80069b8:	4398      	bics	r0, r3
 80069ba:	d104      	bne.n	80069c6 <SX1276Send+0xf6>
                SX1276SetStby( );
 80069bc:	f7ff f95a 	bl	8005c74 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 80069c0:	2001      	movs	r0, #1
 80069c2:	f7fb ff85 	bl	80028d0 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 80069c6:	7832      	ldrb	r2, [r6, #0]
 80069c8:	0039      	movs	r1, r7
 80069ca:	2000      	movs	r0, #0
 80069cc:	f7fe ff9f 	bl	800590e <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80069d0:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 80069d2:	e7a8      	b.n	8006926 <SX1276Send+0x56>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80069d4:	f7fe fffe 	bl	80059d4 <SX1276Read>
 80069d8:	2341      	movs	r3, #65	; 0x41
 80069da:	0001      	movs	r1, r0
 80069dc:	4399      	bics	r1, r3
 80069de:	4329      	orrs	r1, r5
 80069e0:	b2c9      	uxtb	r1, r1
 80069e2:	2033      	movs	r0, #51	; 0x33
 80069e4:	f7fe ffab 	bl	800593e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80069e8:	211d      	movs	r1, #29
 80069ea:	e7cf      	b.n	800698c <SX1276Send+0xbc>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80069ec:	2040      	movs	r0, #64	; 0x40
 80069ee:	f7fe fff1 	bl	80059d4 <SX1276Read>
 80069f2:	2103      	movs	r1, #3
 80069f4:	4001      	ands	r1, r0
 80069f6:	2040      	movs	r0, #64	; 0x40
 80069f8:	f7fe ffa1 	bl	800593e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80069fc:	2041      	movs	r0, #65	; 0x41
 80069fe:	f7fe ffe9 	bl	80059d4 <SX1276Read>
 8006a02:	213e      	movs	r1, #62	; 0x3e
 8006a04:	4001      	ands	r1, r0
 8006a06:	2041      	movs	r0, #65	; 0x41
 8006a08:	f7fe ff99 	bl	800593e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006a0c:	2035      	movs	r0, #53	; 0x35
 8006a0e:	f7fe ffe1 	bl	80059d4 <SX1276Read>
 8006a12:	233f      	movs	r3, #63	; 0x3f
 8006a14:	4018      	ands	r0, r3
 8006a16:	0023      	movs	r3, r4
 8006a18:	333e      	adds	r3, #62	; 0x3e
 8006a1a:	7018      	strb	r0, [r3, #0]
 8006a1c:	e791      	b.n	8006942 <SX1276Send+0x72>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006a1e:	0023      	movs	r3, r4
 8006a20:	3353      	adds	r3, #83	; 0x53
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00d      	beq.n	8006a44 <SX1276Send+0x174>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006a28:	21f5      	movs	r1, #245	; 0xf5
 8006a2a:	2011      	movs	r0, #17
 8006a2c:	f7fe ff87 	bl	800593e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006a30:	2040      	movs	r0, #64	; 0x40
 8006a32:	f7fe ffcf 	bl	80059d4 <SX1276Read>
 8006a36:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006a38:	4001      	ands	r1, r0
 8006a3a:	2040      	movs	r0, #64	; 0x40
 8006a3c:	4301      	orrs	r1, r0
 8006a3e:	f7fe ff7e 	bl	800593e <SX1276Write>
 8006a42:	e77e      	b.n	8006942 <SX1276Send+0x72>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006a44:	21f7      	movs	r1, #247	; 0xf7
 8006a46:	2011      	movs	r0, #17
 8006a48:	f7fe ff79 	bl	800593e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006a4c:	2040      	movs	r0, #64	; 0x40
 8006a4e:	f7fe ffc1 	bl	80059d4 <SX1276Read>
 8006a52:	213f      	movs	r1, #63	; 0x3f
 8006a54:	e7f0      	b.n	8006a38 <SX1276Send+0x168>
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	20000790 	.word	0x20000790
 8006a5c:	200007f8 	.word	0x200007f8
 8006a60:	20000760 	.word	0x20000760
 8006a64:	200000ec 	.word	0x200000ec

08006a68 <SX1276OnDio1Irq>:
{
 8006a68:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8006a6a:	4c39      	ldr	r4, [pc, #228]	; (8006b50 <SX1276OnDio1Irq+0xe8>)
 8006a6c:	7925      	ldrb	r5, [r4, #4]
 8006a6e:	2d01      	cmp	r5, #1
 8006a70:	d002      	beq.n	8006a78 <SX1276OnDio1Irq+0x10>
 8006a72:	2d02      	cmp	r5, #2
 8006a74:	d050      	beq.n	8006b18 <SX1276OnDio1Irq+0xb0>
}
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8006a78:	7963      	ldrb	r3, [r4, #5]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d017      	beq.n	8006aae <SX1276OnDio1Irq+0x46>
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d1f9      	bne.n	8006a76 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8006a82:	f7fc fb87 	bl	8003194 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d0f5      	beq.n	8006a76 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8006a8a:	4832      	ldr	r0, [pc, #200]	; (8006b54 <SX1276OnDio1Irq+0xec>)
 8006a8c:	f000 fcb8 	bl	8007400 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8006a90:	2180      	movs	r1, #128	; 0x80
 8006a92:	2012      	movs	r0, #18
 8006a94:	f7fe ff53 	bl	800593e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006a9c:	4b2e      	ldr	r3, [pc, #184]	; (8006b58 <SX1276OnDio1Irq+0xf0>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0e8      	beq.n	8006a76 <SX1276OnDio1Irq+0xe>
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0e5      	beq.n	8006a76 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8006aaa:	4798      	blx	r3
 8006aac:	e7e3      	b.n	8006a76 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8006aae:	f7fc fb71 	bl	8003194 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d0df      	beq.n	8006a76 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8006ab6:	4829      	ldr	r0, [pc, #164]	; (8006b5c <SX1276OnDio1Irq+0xf4>)
 8006ab8:	f000 fca2 	bl	8007400 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006abc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <SX1276OnDio1Irq+0x70>
 8006ac2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d107      	bne.n	8006ad8 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006ac8:	1ce3      	adds	r3, r4, #3
 8006aca:	7fd8      	ldrb	r0, [r3, #31]
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d118      	bne.n	8006b02 <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 8006ad0:	002a      	movs	r2, r5
 8006ad2:	4923      	ldr	r1, [pc, #140]	; (8006b60 <SX1276OnDio1Irq+0xf8>)
 8006ad4:	f7fe ff66 	bl	80059a4 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006ad8:	0025      	movs	r5, r4
 8006ada:	353e      	adds	r5, #62	; 0x3e
 8006adc:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8006ade:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8006ae0:	4920      	ldr	r1, [pc, #128]	; (8006b64 <SX1276OnDio1Irq+0xfc>)
 8006ae2:	782b      	ldrb	r3, [r5, #0]
 8006ae4:	1841      	adds	r1, r0, r1
 8006ae6:	1a12      	subs	r2, r2, r0
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	db0f      	blt.n	8006b0c <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006aec:	3b01      	subs	r3, #1
    SX1276ReadBuffer( 0, buffer, size );
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	2000      	movs	r0, #0
 8006af2:	f7fe ff57 	bl	80059a4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8006af6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006af8:	782b      	ldrb	r3, [r5, #0]
 8006afa:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006afc:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8006afe:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8006b00:	e7b9      	b.n	8006a76 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006b02:	2032      	movs	r0, #50	; 0x32
 8006b04:	f7fe ff66 	bl	80059d4 <SX1276Read>
 8006b08:	8760      	strh	r0, [r4, #58]	; 0x3a
 8006b0a:	e7e5      	b.n	8006ad8 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f7fe ff48 	bl	80059a4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8006b14:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8006b16:	e7f2      	b.n	8006afe <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 8006b18:	7965      	ldrb	r5, [r4, #5]
 8006b1a:	2d00      	cmp	r5, #0
 8006b1c:	d1ab      	bne.n	8006a76 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 8006b1e:	f7fc fb39 	bl	8003194 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8006b22:	2801      	cmp	r0, #1
 8006b24:	d0a7      	beq.n	8006a76 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006b26:	0026      	movs	r6, r4
 8006b28:	363f      	adds	r6, #63	; 0x3f
 8006b2a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8006b2c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8006b2e:	490d      	ldr	r1, [pc, #52]	; (8006b64 <SX1276OnDio1Irq+0xfc>)
 8006b30:	7832      	ldrb	r2, [r6, #0]
 8006b32:	1841      	adds	r1, r0, r1
 8006b34:	1a1b      	subs	r3, r3, r0
 8006b36:	4293      	cmp	r3, r2
 8006b38:	dd05      	ble.n	8006b46 <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 8006b3a:	0028      	movs	r0, r5
 8006b3c:	f7fe fee7 	bl	800590e <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006b40:	7833      	ldrb	r3, [r6, #0]
 8006b42:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8006b44:	e7da      	b.n	8006afc <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	0028      	movs	r0, r5
 8006b4a:	f7fe fee0 	bl	800590e <SX1276WriteBuffer>
 8006b4e:	e7e1      	b.n	8006b14 <SX1276OnDio1Irq+0xac>
 8006b50:	20000790 	.word	0x20000790
 8006b54:	200007f8 	.word	0x200007f8
 8006b58:	200000e8 	.word	0x200000e8
 8006b5c:	20000778 	.word	0x20000778
 8006b60:	200007ca 	.word	0x200007ca
 8006b64:	200000ec 	.word	0x200000ec

08006b68 <SX1276OnDio0Irq>:
{
 8006b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 8006b6a:	466b      	mov	r3, sp
 8006b6c:	1ddd      	adds	r5, r3, #7
 8006b6e:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8006b70:	4c8a      	ldr	r4, [pc, #552]	; (8006d9c <SX1276OnDio0Irq+0x234>)
    volatile uint8_t irqFlags = 0;
 8006b72:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 8006b74:	7923      	ldrb	r3, [r4, #4]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d003      	beq.n	8006b82 <SX1276OnDio0Irq+0x1a>
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d100      	bne.n	8006b80 <SX1276OnDio0Irq+0x18>
 8006b7e:	e0fa      	b.n	8006d76 <SX1276OnDio0Irq+0x20e>
}
 8006b80:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 8006b82:	7963      	ldrb	r3, [r4, #5]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d024      	beq.n	8006bd2 <SX1276OnDio0Irq+0x6a>
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d1f9      	bne.n	8006b80 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8006b8c:	2140      	movs	r1, #64	; 0x40
 8006b8e:	2012      	movs	r0, #18
 8006b90:	f7fe fed5 	bl	800593e <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8006b94:	2012      	movs	r0, #18
 8006b96:	f7fe ff1d 	bl	80059d4 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8006b9a:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8006b9c:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8006b9e:	782b      	ldrb	r3, [r5, #0]
 8006ba0:	4e7f      	ldr	r6, [pc, #508]	; (8006da0 <SX1276OnDio0Irq+0x238>)
 8006ba2:	4d80      	ldr	r5, [pc, #512]	; (8006da4 <SX1276OnDio0Irq+0x23c>)
 8006ba4:	420b      	tst	r3, r1
 8006ba6:	d100      	bne.n	8006baa <SX1276OnDio0Irq+0x42>
 8006ba8:	e089      	b.n	8006cbe <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8006baa:	2012      	movs	r0, #18
 8006bac:	f7fe fec7 	bl	800593e <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8006bb0:	0023      	movs	r3, r4
 8006bb2:	3356      	adds	r3, #86	; 0x56
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d100      	bne.n	8006bbc <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 8006bba:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8006bbc:	0030      	movs	r0, r6
 8006bbe:	f000 fc1f 	bl	8007400 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0db      	beq.n	8006b80 <SX1276OnDio0Irq+0x18>
 8006bc8:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0d8      	beq.n	8006b80 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8006bce:	4798      	blx	r3
}
 8006bd0:	e7d6      	b.n	8006b80 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8006bd2:	1d63      	adds	r3, r4, #5
 8006bd4:	7fdb      	ldrb	r3, [r3, #31]
 8006bd6:	4f72      	ldr	r7, [pc, #456]	; (8006da0 <SX1276OnDio0Irq+0x238>)
 8006bd8:	4e72      	ldr	r6, [pc, #456]	; (8006da4 <SX1276OnDio0Irq+0x23c>)
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d02f      	beq.n	8006c3e <SX1276OnDio0Irq+0xd6>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8006bde:	203f      	movs	r0, #63	; 0x3f
 8006be0:	f7fe fef8 	bl	80059d4 <SX1276Read>
 8006be4:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8006be6:	782b      	ldrb	r3, [r5, #0]
 8006be8:	079b      	lsls	r3, r3, #30
 8006bea:	d428      	bmi.n	8006c3e <SX1276OnDio0Irq+0xd6>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006bec:	210b      	movs	r1, #11
 8006bee:	203e      	movs	r0, #62	; 0x3e
 8006bf0:	f7fe fea5 	bl	800593e <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006bf4:	2110      	movs	r1, #16
 8006bf6:	203f      	movs	r0, #63	; 0x3f
 8006bf8:	f7fe fea1 	bl	800593e <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8006bfc:	0038      	movs	r0, r7
 8006bfe:	f000 fbff 	bl	8007400 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8006c02:	1de3      	adds	r3, r4, #7
 8006c04:	7fdd      	ldrb	r5, [r3, #31]
 8006c06:	2d00      	cmp	r5, #0
 8006c08:	d10f      	bne.n	8006c2a <SX1276OnDio0Irq+0xc2>
                            TimerStop( &RxTimeoutSyncWord );
 8006c0a:	4867      	ldr	r0, [pc, #412]	; (8006da8 <SX1276OnDio0Irq+0x240>)
 8006c0c:	f000 fbf8 	bl	8007400 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 8006c10:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006c12:	6833      	ldr	r3, [r6, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <SX1276OnDio0Irq+0xb8>
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d000      	beq.n	8006c20 <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 8006c1e:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006c20:	2300      	movs	r3, #0
 8006c22:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006c24:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8006c26:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8006c28:	e7aa      	b.n	8006b80 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006c2a:	200d      	movs	r0, #13
 8006c2c:	f7fe fed2 	bl	80059d4 <SX1276Read>
 8006c30:	2140      	movs	r1, #64	; 0x40
 8006c32:	4301      	orrs	r1, r0
 8006c34:	b2c9      	uxtb	r1, r1
 8006c36:	200d      	movs	r0, #13
 8006c38:	f7fe fe81 	bl	800593e <SX1276Write>
 8006c3c:	e7e9      	b.n	8006c12 <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006c3e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8006c40:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8006c42:	4d5a      	ldr	r5, [pc, #360]	; (8006dac <SX1276OnDio0Irq+0x244>)
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	d10b      	bne.n	8006c60 <SX1276OnDio0Irq+0xf8>
 8006c48:	2900      	cmp	r1, #0
 8006c4a:	d109      	bne.n	8006c60 <SX1276OnDio0Irq+0xf8>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006c4c:	1ce3      	adds	r3, r4, #3
 8006c4e:	7fd8      	ldrb	r0, [r3, #31]
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d125      	bne.n	8006ca0 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 8006c54:	3201      	adds	r2, #1
 8006c56:	4956      	ldr	r1, [pc, #344]	; (8006db0 <SX1276OnDio0Irq+0x248>)
 8006c58:	f7fe fea4 	bl	80059a4 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006c5c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8006c5e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006c60:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8006c62:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006c64:	1869      	adds	r1, r5, r1
    SX1276ReadBuffer( 0, buffer, size );
 8006c66:	2000      	movs	r0, #0
 8006c68:	f7fe fe9c 	bl	80059a4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006c6c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8006c6e:	0038      	movs	r0, r7
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006c70:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8006c72:	f000 fbc5 	bl	8007400 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8006c76:	1de3      	adds	r3, r4, #7
 8006c78:	7fdb      	ldrb	r3, [r3, #31]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d115      	bne.n	8006caa <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 8006c7e:	484a      	ldr	r0, [pc, #296]	; (8006da8 <SX1276OnDio0Irq+0x240>)
                    SX1276.Settings.State = RF_IDLE;
 8006c80:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8006c82:	f000 fbbd 	bl	8007400 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006c86:	6833      	ldr	r3, [r6, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0c9      	beq.n	8006c20 <SX1276OnDio0Irq+0xb8>
 8006c8c:	689e      	ldr	r6, [r3, #8]
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	d0c6      	beq.n	8006c20 <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8006c92:	2232      	movs	r2, #50	; 0x32
 8006c94:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8006c96:	56a2      	ldrsb	r2, [r4, r2]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	0028      	movs	r0, r5
 8006c9c:	47b0      	blx	r6
 8006c9e:	e7bf      	b.n	8006c20 <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006ca0:	2032      	movs	r0, #50	; 0x32
 8006ca2:	f7fe fe97 	bl	80059d4 <SX1276Read>
 8006ca6:	8760      	strh	r0, [r4, #58]	; 0x3a
 8006ca8:	e7d8      	b.n	8006c5c <SX1276OnDio0Irq+0xf4>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006caa:	200d      	movs	r0, #13
 8006cac:	f7fe fe92 	bl	80059d4 <SX1276Read>
 8006cb0:	2140      	movs	r1, #64	; 0x40
 8006cb2:	4301      	orrs	r1, r0
 8006cb4:	b2c9      	uxtb	r1, r1
 8006cb6:	200d      	movs	r0, #13
 8006cb8:	f7fe fe41 	bl	800593e <SX1276Write>
 8006cbc:	e7e3      	b.n	8006c86 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8006cbe:	2019      	movs	r0, #25
 8006cc0:	f7fe fe88 	bl	80059d4 <SX1276Read>
 8006cc4:	0027      	movs	r7, r4
 8006cc6:	b240      	sxtb	r0, r0
 8006cc8:	3002      	adds	r0, #2
 8006cca:	3760      	adds	r7, #96	; 0x60
 8006ccc:	1080      	asrs	r0, r0, #2
 8006cce:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8006cd0:	201a      	movs	r0, #26
 8006cd2:	f7fe fe7f 	bl	80059d4 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	0021      	movs	r1, r4
 8006cda:	56fb      	ldrsb	r3, [r7, r3]
 8006cdc:	4a35      	ldr	r2, [pc, #212]	; (8006db4 <SX1276OnDio0Irq+0x24c>)
 8006cde:	b207      	sxth	r7, r0
 8006ce0:	113f      	asrs	r7, r7, #4
 8006ce2:	b2bf      	uxth	r7, r7
 8006ce4:	b280      	uxth	r0, r0
 8006ce6:	4694      	mov	ip, r2
 8006ce8:	3162      	adds	r1, #98	; 0x62
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	da3a      	bge.n	8006d64 <SX1276OnDio0Irq+0x1fc>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006cee:	68a2      	ldr	r2, [r4, #8]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	4562      	cmp	r2, ip
 8006cf4:	d934      	bls.n	8006d60 <SX1276OnDio0Irq+0x1f8>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006cf6:	3b9d      	subs	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006cf8:	18c3      	adds	r3, r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006cfa:	18fb      	adds	r3, r7, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006cfc:	2013      	movs	r0, #19
 8006cfe:	0027      	movs	r7, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006d00:	800b      	strh	r3, [r1, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006d02:	f7fe fe67 	bl	80059d4 <SX1276Read>
 8006d06:	3764      	adds	r7, #100	; 0x64
 8006d08:	7038      	strb	r0, [r7, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8006d0a:	2010      	movs	r0, #16
 8006d0c:	f7fe fe62 	bl	80059d4 <SX1276Read>
 8006d10:	0001      	movs	r1, r0
 8006d12:	200d      	movs	r0, #13
 8006d14:	f7fe fe13 	bl	800593e <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 8006d18:	783a      	ldrb	r2, [r7, #0]
 8006d1a:	4f24      	ldr	r7, [pc, #144]	; (8006dac <SX1276OnDio0Irq+0x244>)
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	0039      	movs	r1, r7
 8006d20:	f7fe fe40 	bl	80059a4 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8006d24:	0023      	movs	r3, r4
 8006d26:	3356      	adds	r3, #86	; 0x56
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d100      	bne.n	8006d30 <SX1276OnDio0Irq+0x1c8>
                        SX1276.Settings.State = RF_IDLE;
 8006d2e:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8006d30:	0030      	movs	r0, r6
 8006d32:	f000 fb65 	bl	8007400 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006d36:	682b      	ldr	r3, [r5, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d100      	bne.n	8006d3e <SX1276OnDio0Irq+0x1d6>
 8006d3c:	e720      	b.n	8006b80 <SX1276OnDio0Irq+0x18>
 8006d3e:	689d      	ldr	r5, [r3, #8]
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	d100      	bne.n	8006d46 <SX1276OnDio0Irq+0x1de>
 8006d44:	e71c      	b.n	8006b80 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8006d46:	0023      	movs	r3, r4
 8006d48:	0022      	movs	r2, r4
 8006d4a:	3360      	adds	r3, #96	; 0x60
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	3464      	adds	r4, #100	; 0x64
 8006d50:	3262      	adds	r2, #98	; 0x62
 8006d52:	2100      	movs	r1, #0
 8006d54:	5e52      	ldrsh	r2, [r2, r1]
 8006d56:	b25b      	sxtb	r3, r3
 8006d58:	7821      	ldrb	r1, [r4, #0]
 8006d5a:	0038      	movs	r0, r7
 8006d5c:	47a8      	blx	r5
 8006d5e:	e70f      	b.n	8006b80 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006d60:	3ba4      	subs	r3, #164	; 0xa4
 8006d62:	e7c9      	b.n	8006cf8 <SX1276OnDio0Irq+0x190>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006d64:	68a3      	ldr	r3, [r4, #8]
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d902      	bls.n	8006d70 <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006d6a:	0003      	movs	r3, r0
 8006d6c:	3b9d      	subs	r3, #157	; 0x9d
 8006d6e:	e7c4      	b.n	8006cfa <SX1276OnDio0Irq+0x192>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006d70:	0003      	movs	r3, r0
 8006d72:	3ba4      	subs	r3, #164	; 0xa4
 8006d74:	e7c1      	b.n	8006cfa <SX1276OnDio0Irq+0x192>
            TimerStop( &TxTimeoutTimer );
 8006d76:	4810      	ldr	r0, [pc, #64]	; (8006db8 <SX1276OnDio0Irq+0x250>)
 8006d78:	f000 fb42 	bl	8007400 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 8006d7c:	7963      	ldrb	r3, [r4, #5]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d103      	bne.n	8006d8a <SX1276OnDio0Irq+0x222>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8006d82:	2108      	movs	r1, #8
 8006d84:	2012      	movs	r0, #18
 8006d86:	f7fe fdda 	bl	800593e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006d8e:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <SX1276OnDio0Irq+0x23c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d100      	bne.n	8006d98 <SX1276OnDio0Irq+0x230>
 8006d96:	e6f3      	b.n	8006b80 <SX1276OnDio0Irq+0x18>
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	e716      	b.n	8006bca <SX1276OnDio0Irq+0x62>
 8006d9c:	20000790 	.word	0x20000790
 8006da0:	200007f8 	.word	0x200007f8
 8006da4:	200000e8 	.word	0x200000e8
 8006da8:	20000778 	.word	0x20000778
 8006dac:	200000ec 	.word	0x200000ec
 8006db0:	200007ca 	.word	0x200007ca
 8006db4:	1f4add40 	.word	0x1f4add40
 8006db8:	20000760 	.word	0x20000760

08006dbc <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8006dbc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dbe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006dc2:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8006dc4:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <TRACE_AllocateBufer+0x68>)
 8006dc6:	8a5d      	ldrh	r5, [r3, #18]
 8006dc8:	8a1a      	ldrh	r2, [r3, #16]
 8006dca:	4295      	cmp	r5, r2
 8006dcc:	d115      	bne.n	8006dfa <TRACE_AllocateBufer+0x3e>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8006dce:	2280      	movs	r2, #128	; 0x80
 8006dd0:	0092      	lsls	r2, r2, #2
 8006dd2:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	4290      	cmp	r0, r2
 8006dd8:	d306      	bcc.n	8006de8 <TRACE_AllocateBufer+0x2c>
 8006dda:	4285      	cmp	r5, r0
 8006ddc:	d917      	bls.n	8006e0e <TRACE_AllocateBufer+0x52>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8006dde:	2201      	movs	r2, #1
 8006de0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8006de2:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8006de4:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8006de6:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8006de8:	8a5a      	ldrh	r2, [r3, #18]
 8006dea:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8006dec:	8a5a      	ldrh	r2, [r3, #18]
 8006dee:	1880      	adds	r0, r0, r2
 8006df0:	05c0      	lsls	r0, r0, #23
 8006df2:	0dc0      	lsrs	r0, r0, #23
 8006df4:	8258      	strh	r0, [r3, #18]
    ret = 0;
 8006df6:	2000      	movs	r0, #0
 8006df8:	e00b      	b.n	8006e12 <TRACE_AllocateBufer+0x56>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8006dfa:	4295      	cmp	r5, r2
 8006dfc:	d90c      	bls.n	8006e18 <TRACE_AllocateBufer+0x5c>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8006dfe:	2680      	movs	r6, #128	; 0x80
 8006e00:	00b6      	lsls	r6, r6, #2
 8006e02:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8006e04:	b2b6      	uxth	r6, r6
 8006e06:	4286      	cmp	r6, r0
 8006e08:	d8ee      	bhi.n	8006de8 <TRACE_AllocateBufer+0x2c>
 8006e0a:	4282      	cmp	r2, r0
 8006e0c:	d8e7      	bhi.n	8006dde <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 8006e0e:	2001      	movs	r0, #1
 8006e10:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e12:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8006e18:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 8006e1a:	b292      	uxth	r2, r2
 8006e1c:	4282      	cmp	r2, r0
 8006e1e:	d8e3      	bhi.n	8006de8 <TRACE_AllocateBufer+0x2c>
 8006e20:	e7f5      	b.n	8006e0e <TRACE_AllocateBufer+0x52>
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	200001ec 	.word	0x200001ec

08006e28 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e2c:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8006e2e:	4a03      	ldr	r2, [pc, #12]	; (8006e3c <TRACE_Lock+0x14>)
 8006e30:	8ad3      	ldrh	r3, [r2, #22]
 8006e32:	3301      	adds	r3, #1
 8006e34:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e36:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8006e3a:	4770      	bx	lr
 8006e3c:	200001ec 	.word	0x200001ec

08006e40 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e44:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8006e46:	4a03      	ldr	r2, [pc, #12]	; (8006e54 <TRACE_UnLock+0x14>)
 8006e48:	8ad3      	ldrh	r3, [r2, #22]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8006e52:	4770      	bx	lr
 8006e54:	200001ec 	.word	0x200001ec

08006e58 <UTIL_ADV_TRACE_Init>:
{
 8006e58:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8006e5a:	2218      	movs	r2, #24
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4807      	ldr	r0, [pc, #28]	; (8006e7c <UTIL_ADV_TRACE_Init+0x24>)
 8006e60:	f000 f986 	bl	8007170 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8006e64:	2280      	movs	r2, #128	; 0x80
 8006e66:	2100      	movs	r1, #0
 8006e68:	0092      	lsls	r2, r2, #2
 8006e6a:	4805      	ldr	r0, [pc, #20]	; (8006e80 <UTIL_ADV_TRACE_Init+0x28>)
 8006e6c:	f000 f980 	bl	8007170 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8006e70:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <UTIL_ADV_TRACE_Init+0x2c>)
 8006e72:	4805      	ldr	r0, [pc, #20]	; (8006e88 <UTIL_ADV_TRACE_Init+0x30>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4798      	blx	r3
}
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	200001ec 	.word	0x200001ec
 8006e80:	20000304 	.word	0x20000304
 8006e84:	0800793c 	.word	0x0800793c
 8006e88:	08006ff5 	.word	0x08006ff5

08006e8c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 8006e8c:	4b01      	ldr	r3, [pc, #4]	; (8006e94 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8006e8e:	6058      	str	r0, [r3, #4]
}
 8006e90:	4770      	bx	lr
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	200001ec 	.word	0x200001ec

08006e98 <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8006e98:	4b01      	ldr	r3, [pc, #4]	; (8006ea0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8006e9a:	7218      	strb	r0, [r3, #8]
}
 8006e9c:	4770      	bx	lr
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	200001ec 	.word	0x200001ec

08006ea4 <TRACE_Send>:
{
 8006ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006eaa:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8006eac:	4c1b      	ldr	r4, [pc, #108]	; (8006f1c <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 8006eae:	8ae7      	ldrh	r7, [r4, #22]
 8006eb0:	2f00      	cmp	r7, #0
 8006eb2:	d12e      	bne.n	8006f12 <TRACE_Send+0x6e>
    TRACE_Lock();
 8006eb4:	f7ff ffb8 	bl	8006e28 <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8006eb8:	8a25      	ldrh	r5, [r4, #16]
 8006eba:	8a62      	ldrh	r2, [r4, #18]
 8006ebc:	4295      	cmp	r5, r2
 8006ebe:	d026      	beq.n	8006f0e <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8006ec0:	78a3      	ldrb	r3, [r4, #2]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d10a      	bne.n	8006edc <TRACE_Send+0x38>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8006ec6:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8006ec8:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8006eca:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8006ecc:	1b5b      	subs	r3, r3, r5
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8006ed2:	8027      	strh	r7, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8006ed8:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8006eda:	8223      	strh	r3, [r4, #16]
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8006edc:	78a3      	ldrb	r3, [r4, #2]
 8006ede:	8a25      	ldrh	r5, [r4, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <TRACE_Send+0x48>
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8006ee4:	42aa      	cmp	r2, r5
 8006ee6:	d90d      	bls.n	8006f04 <TRACE_Send+0x60>
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8006ee8:	1b52      	subs	r2, r2, r5
 8006eea:	82a2      	strh	r2, [r4, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eec:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 8006ef0:	f7fb fcdc 	bl	80028ac <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <TRACE_Send+0x7c>)
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8006ef6:	480b      	ldr	r0, [pc, #44]	; (8006f24 <TRACE_Send+0x80>)
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	8aa1      	ldrh	r1, [r4, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8006efc:	1828      	adds	r0, r5, r0
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	4798      	blx	r3
}
 8006f02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8006f04:	2380      	movs	r3, #128	; 0x80
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	1b5b      	subs	r3, r3, r5
 8006f0a:	82a3      	strh	r3, [r4, #20]
 8006f0c:	e7ee      	b.n	8006eec <TRACE_Send+0x48>
      TRACE_UnLock();
 8006f0e:	f7ff ff97 	bl	8006e40 <TRACE_UnLock>
 8006f12:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 8006f16:	2000      	movs	r0, #0
  return ret;
 8006f18:	e7f3      	b.n	8006f02 <TRACE_Send+0x5e>
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	200001ec 	.word	0x200001ec
 8006f20:	0800793c 	.word	0x0800793c
 8006f24:	20000304 	.word	0x20000304

08006f28 <UTIL_ADV_TRACE_COND_FSend>:
{
 8006f28:	b408      	push	{r3}
 8006f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f2c:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	466c      	mov	r4, sp
 8006f32:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8006f34:	4b2c      	ldr	r3, [pc, #176]	; (8006fe8 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8006f36:	7a1c      	ldrb	r4, [r3, #8]
 8006f38:	4284      	cmp	r4, r0
 8006f3a:	d350      	bcc.n	8006fde <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8006f3c:	68d8      	ldr	r0, [r3, #12]
 8006f3e:	4008      	ands	r0, r1
 8006f40:	4288      	cmp	r0, r1
 8006f42:	d14e      	bne.n	8006fe2 <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 8006f4a:	2a00      	cmp	r2, #0
 8006f4c:	d002      	beq.n	8006f54 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8006f4e:	4669      	mov	r1, sp
 8006f50:	a802      	add	r0, sp, #8
 8006f52:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006f54:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 8006f56:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006f58:	0049      	lsls	r1, r1, #1
 8006f5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f5c:	4823      	ldr	r0, [pc, #140]	; (8006fec <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 8006f5e:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006f60:	f000 fb44 	bl	80075ec <tiny_vsnprintf_like>
 8006f64:	0005      	movs	r5, r0
  TRACE_Lock();
 8006f66:	f7ff ff5f 	bl	8006e28 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8006f6a:	466b      	mov	r3, sp
 8006f6c:	8818      	ldrh	r0, [r3, #0]
 8006f6e:	1c9c      	adds	r4, r3, #2
 8006f70:	1940      	adds	r0, r0, r5
 8006f72:	b280      	uxth	r0, r0
 8006f74:	0021      	movs	r1, r4
 8006f76:	f7ff ff21 	bl	8006dbc <TRACE_AllocateBufer>
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	d02a      	beq.n	8006fd4 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2101      	movs	r1, #1
 8006f82:	466b      	mov	r3, sp
 8006f84:	0015      	movs	r5, r2
 8006f86:	468c      	mov	ip, r1
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	8826      	ldrh	r6, [r4, #0]
 8006f8c:	4818      	ldr	r0, [pc, #96]	; (8006ff0 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8006f8e:	b297      	uxth	r7, r2
 8006f90:	19f1      	adds	r1, r6, r7
 8006f92:	b289      	uxth	r1, r1
 8006f94:	42bb      	cmp	r3, r7
 8006f96:	d815      	bhi.n	8006fc4 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8006f98:	199b      	adds	r3, r3, r6
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2d00      	cmp	r5, #0
 8006f9e:	d000      	beq.n	8006fa2 <UTIL_ADV_TRACE_COND_FSend+0x7a>
 8006fa0:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8006fa2:	2180      	movs	r1, #128	; 0x80
 8006fa4:	8823      	ldrh	r3, [r4, #0]
 8006fa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fa8:	0049      	lsls	r1, r1, #1
 8006faa:	18c0      	adds	r0, r0, r3
 8006fac:	9b01      	ldr	r3, [sp, #4]
 8006fae:	f000 fb1d 	bl	80075ec <tiny_vsnprintf_like>
    TRACE_UnLock();
 8006fb2:	f7ff ff45 	bl	8006e40 <TRACE_UnLock>
    return TRACE_Send();
 8006fb6:	f7ff ff75 	bl	8006ea4 <TRACE_Send>
}
 8006fba:	b006      	add	sp, #24
 8006fbc:	bcf0      	pop	{r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	b001      	add	sp, #4
 8006fc2:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8006fc4:	466d      	mov	r5, sp
 8006fc6:	2708      	movs	r7, #8
 8006fc8:	19ed      	adds	r5, r5, r7
 8006fca:	5cad      	ldrb	r5, [r5, r2]
 8006fcc:	3201      	adds	r2, #1
 8006fce:	5445      	strb	r5, [r0, r1]
 8006fd0:	4665      	mov	r5, ip
 8006fd2:	e7dc      	b.n	8006f8e <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 8006fd4:	f7ff ff34 	bl	8006e40 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8006fd8:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 8006fda:	4240      	negs	r0, r0
 8006fdc:	e7ed      	b.n	8006fba <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 8006fde:	2005      	movs	r0, #5
 8006fe0:	e7fb      	b.n	8006fda <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8006fe2:	2006      	movs	r0, #6
 8006fe4:	e7f9      	b.n	8006fda <UTIL_ADV_TRACE_COND_FSend+0xb2>
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	200001ec 	.word	0x200001ec
 8006fec:	20000204 	.word	0x20000204
 8006ff0:	20000304 	.word	0x20000304

08006ff4 <TRACE_TxCpltCallback>:
{ 
 8006ff4:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006ffa:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8006ffc:	4b1f      	ldr	r3, [pc, #124]	; (800707c <TRACE_TxCpltCallback+0x88>)
 8006ffe:	789a      	ldrb	r2, [r3, #2]
 8007000:	2a02      	cmp	r2, #2
 8007002:	d12b      	bne.n	800705c <TRACE_TxCpltCallback+0x68>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007004:	2200      	movs	r2, #0
 8007006:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007008:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800700a:	8a18      	ldrh	r0, [r3, #16]
 800700c:	8a59      	ldrh	r1, [r3, #18]
 800700e:	4288      	cmp	r0, r1
 8007010:	d02d      	beq.n	800706e <TRACE_TxCpltCallback+0x7a>
 8007012:	8ada      	ldrh	r2, [r3, #22]
 8007014:	2a01      	cmp	r2, #1
 8007016:	d12a      	bne.n	800706e <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8007018:	789a      	ldrb	r2, [r3, #2]
 800701a:	2a01      	cmp	r2, #1
 800701c:	d10b      	bne.n	8007036 <TRACE_TxCpltCallback+0x42>
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800701e:	881a      	ldrh	r2, [r3, #0]
 8007020:	1a12      	subs	r2, r2, r0
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8007022:	2002      	movs	r0, #2
 8007024:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007026:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8007028:	b292      	uxth	r2, r2
 800702a:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800702c:	8018      	strh	r0, [r3, #0]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800702e:	4282      	cmp	r2, r0
 8007030:	d109      	bne.n	8007046 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007032:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007034:	821a      	strh	r2, [r3, #16]
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8007036:	789a      	ldrb	r2, [r3, #2]
 8007038:	2a00      	cmp	r2, #0
 800703a:	d104      	bne.n	8007046 <TRACE_TxCpltCallback+0x52>
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800703c:	8a1a      	ldrh	r2, [r3, #16]
 800703e:	4291      	cmp	r1, r2
 8007040:	d912      	bls.n	8007068 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007042:	1a89      	subs	r1, r1, r2
 8007044:	8299      	strh	r1, [r3, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007046:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 800704a:	8a18      	ldrh	r0, [r3, #16]
 800704c:	8a99      	ldrh	r1, [r3, #20]
 800704e:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <TRACE_TxCpltCallback+0x8c>)
 8007050:	18c0      	adds	r0, r0, r3
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <TRACE_TxCpltCallback+0x90>)
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	4798      	blx	r3
}
 800705a:	bd13      	pop	{r0, r1, r4, pc}
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800705c:	8a1a      	ldrh	r2, [r3, #16]
 800705e:	8a99      	ldrh	r1, [r3, #20]
 8007060:	1852      	adds	r2, r2, r1
 8007062:	05d2      	lsls	r2, r2, #23
 8007064:	0dd2      	lsrs	r2, r2, #23
 8007066:	e7cf      	b.n	8007008 <TRACE_TxCpltCallback+0x14>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007068:	2180      	movs	r1, #128	; 0x80
 800706a:	0089      	lsls	r1, r1, #2
 800706c:	e7e9      	b.n	8007042 <TRACE_TxCpltCallback+0x4e>
    UTIL_ADV_TRACE_PostSendHook();      
 800706e:	f7fb fc23 	bl	80028b8 <UTIL_ADV_TRACE_PostSendHook>
 8007072:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 8007076:	f7ff fee3 	bl	8006e40 <TRACE_UnLock>
}
 800707a:	e7ee      	b.n	800705a <TRACE_TxCpltCallback+0x66>
 800707c:	200001ec 	.word	0x200001ec
 8007080:	20000304 	.word	0x20000304
 8007084:	0800793c 	.word	0x0800793c

08007088 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007088:	2200      	movs	r2, #0
 800708a:	4b02      	ldr	r3, [pc, #8]	; (8007094 <UTIL_LPM_Init+0xc>)
 800708c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800708e:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007090:	4770      	bx	lr
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	20000504 	.word	0x20000504

08007098 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007098:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800709e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80070a0:	2900      	cmp	r1, #0
 80070a2:	d008      	beq.n	80070b6 <UTIL_LPM_SetStopMode+0x1e>
 80070a4:	2901      	cmp	r1, #1
 80070a6:	d103      	bne.n	80070b0 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80070a8:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <UTIL_LPM_SetStopMode+0x28>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4310      	orrs	r0, r2
 80070ae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b0:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80070b4:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 80070b6:	4a02      	ldr	r2, [pc, #8]	; (80070c0 <UTIL_LPM_SetStopMode+0x28>)
 80070b8:	6813      	ldr	r3, [r2, #0]
 80070ba:	4383      	bics	r3, r0
 80070bc:	6013      	str	r3, [r2, #0]
      break;
 80070be:	e7f7      	b.n	80070b0 <UTIL_LPM_SetStopMode+0x18>
 80070c0:	20000504 	.word	0x20000504

080070c4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80070c4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80070ca:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80070cc:	2900      	cmp	r1, #0
 80070ce:	d008      	beq.n	80070e2 <UTIL_LPM_SetOffMode+0x1e>
 80070d0:	2901      	cmp	r1, #1
 80070d2:	d103      	bne.n	80070dc <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <UTIL_LPM_SetOffMode+0x28>)
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	4310      	orrs	r0, r2
 80070da:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070dc:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80070e0:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 80070e2:	4a02      	ldr	r2, [pc, #8]	; (80070ec <UTIL_LPM_SetOffMode+0x28>)
 80070e4:	6853      	ldr	r3, [r2, #4]
 80070e6:	4383      	bics	r3, r0
 80070e8:	6053      	str	r3, [r2, #4]
      break;
 80070ea:	e7f7      	b.n	80070dc <UTIL_LPM_SetOffMode+0x18>
 80070ec:	20000504 	.word	0x20000504

080070f0 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80070f4:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 80070f6:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <UTIL_LPM_GetMode+0x20>)
 80070fa:	6819      	ldr	r1, [r3, #0]
 80070fc:	4281      	cmp	r1, r0
 80070fe:	d103      	bne.n	8007108 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8007100:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 8007102:	4243      	negs	r3, r0
 8007104:	4158      	adcs	r0, r3
 8007106:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007108:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800710c:	4770      	bx	lr
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	20000504 	.word	0x20000504

08007114 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 8007114:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007116:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800711a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <UTIL_LPM_EnterLowPower+0x40>)
 800711e:	4c0e      	ldr	r4, [pc, #56]	; (8007158 <UTIL_LPM_EnterLowPower+0x44>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	2a00      	cmp	r2, #0
 8007124:	d008      	beq.n	8007138 <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800712c:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8007136:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d004      	beq.n	8007148 <UTIL_LPM_EnterLowPower+0x34>
        UTIL_PowerDriver.EnterStopMode( );
 800713e:	68a3      	ldr	r3, [r4, #8]
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8007144:	68e3      	ldr	r3, [r4, #12]
 8007146:	e7f2      	b.n	800712e <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800714e:	6963      	ldr	r3, [r4, #20]
 8007150:	e7ed      	b.n	800712e <UTIL_LPM_EnterLowPower+0x1a>
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	20000504 	.word	0x20000504
 8007158:	08007924 	.word	0x08007924

0800715c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800715c:	2300      	movs	r3, #0
{
 800715e:	b510      	push	{r4, lr}
  while( size-- )
 8007160:	4293      	cmp	r3, r2
 8007162:	d100      	bne.n	8007166 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 8007164:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 8007166:	5ccc      	ldrb	r4, [r1, r3]
 8007168:	54c4      	strb	r4, [r0, r3]
 800716a:	3301      	adds	r3, #1
 800716c:	e7f8      	b.n	8007160 <UTIL_MEM_cpy_8+0x4>
	...

08007170 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <UTIL_MEM_set_8+0x14>)
 8007172:	3a01      	subs	r2, #1
 8007174:	b292      	uxth	r2, r2
 8007176:	429a      	cmp	r2, r3
 8007178:	d100      	bne.n	800717c <UTIL_MEM_set_8+0xc>
  {
    *dst8++ = value;
  }
}
 800717a:	4770      	bx	lr
    *dst8++ = value;
 800717c:	7001      	strb	r1, [r0, #0]
 800717e:	3001      	adds	r0, #1
 8007180:	e7f7      	b.n	8007172 <UTIL_MEM_set_8+0x2>
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	0000ffff 	.word	0x0000ffff

08007188 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007188:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800718a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800718e:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8007190:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007192:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	4302      	orrs	r2, r0
 8007198:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800719a:	185b      	adds	r3, r3, r1
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	4310      	orrs	r0, r2
 80071a0:	6118      	str	r0, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a2:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80071a6:	bd10      	pop	{r4, pc}
 80071a8:	2000050c 	.word	0x2000050c

080071ac <UTIL_SEQ_PreIdle>:
 80071ac:	4770      	bx	lr

080071ae <UTIL_SEQ_PostIdle>:
 80071ae:	4770      	bx	lr

080071b0 <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 80071b0:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80071b2:	0c02      	lsrs	r2, r0, #16
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d101      	bne.n	80071bc <SEQ_BitPosition+0xc>
 80071b8:	0400      	lsls	r0, r0, #16
 80071ba:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80071bc:	0e02      	lsrs	r2, r0, #24
 80071be:	d102      	bne.n	80071c6 <SEQ_BitPosition+0x16>
 80071c0:	3308      	adds	r3, #8
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80071c6:	0f02      	lsrs	r2, r0, #28
 80071c8:	d102      	bne.n	80071d0 <SEQ_BitPosition+0x20>
 80071ca:	3304      	adds	r3, #4
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 80071d0:	221f      	movs	r2, #31
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	4a02      	ldr	r2, [pc, #8]	; (80071e0 <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80071d6:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 80071d8:	5c10      	ldrb	r0, [r2, r0]
 80071da:	1a18      	subs	r0, r3, r0
 80071dc:	b2c0      	uxtb	r0, r0
}
 80071de:	4770      	bx	lr
 80071e0:	08007b28 	.word	0x08007b28

080071e4 <UTIL_SEQ_Run>:
{
 80071e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      counter++;
 80071e6:	2701      	movs	r7, #1
  super_mask_backup = SuperMask;
 80071e8:	4e2e      	ldr	r6, [pc, #184]	; (80072a4 <UTIL_SEQ_Run+0xc0>)
 80071ea:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 80071ec:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 80071ee:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 80071f0:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80071f2:	4c2d      	ldr	r4, [pc, #180]	; (80072a8 <UTIL_SEQ_Run+0xc4>)
 80071f4:	6831      	ldr	r1, [r6, #0]
 80071f6:	6822      	ldr	r2, [r4, #0]
 80071f8:	6873      	ldr	r3, [r6, #4]
 80071fa:	400a      	ands	r2, r1
 80071fc:	4213      	tst	r3, r2
 80071fe:	d036      	beq.n	800726e <UTIL_SEQ_Run+0x8a>
 8007200:	68a5      	ldr	r5, [r4, #8]
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	4015      	ands	r5, r2
 8007206:	d132      	bne.n	800726e <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8007208:	6920      	ldr	r0, [r4, #16]
 800720a:	400b      	ands	r3, r1
 800720c:	4018      	ands	r0, r3
 800720e:	d102      	bne.n	8007216 <UTIL_SEQ_Run+0x32>
      counter++;
 8007210:	003d      	movs	r5, r7
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8007212:	69a0      	ldr	r0, [r4, #24]
 8007214:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007216:	00ed      	lsls	r5, r5, #3
 8007218:	1963      	adds	r3, r4, r5
 800721a:	695a      	ldr	r2, [r3, #20]
 800721c:	4202      	tst	r2, r0
 800721e:	d102      	bne.n	8007226 <UTIL_SEQ_Run+0x42>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007220:	2201      	movs	r2, #1
 8007222:	4252      	negs	r2, r2
 8007224:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007226:	1965      	adds	r5, r4, r5
 8007228:	696b      	ldr	r3, [r5, #20]
 800722a:	4018      	ands	r0, r3
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	f7ff ffbf 	bl	80071b0 <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8007232:	003b      	movs	r3, r7
 8007234:	4083      	lsls	r3, r0
 8007236:	9a00      	ldr	r2, [sp, #0]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007238:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800723a:	439a      	bics	r2, r3
 800723c:	616a      	str	r2, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800723e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007242:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8007244:	003b      	movs	r3, r7
 8007246:	68e2      	ldr	r2, [r4, #12]
 8007248:	4093      	lsls	r3, r2
 800724a:	43db      	mvns	r3, r3
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	401a      	ands	r2, r3
 8007250:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8007252:	69a2      	ldr	r2, [r4, #24]
 8007254:	401a      	ands	r2, r3
 8007256:	61a2      	str	r2, [r4, #24]
 8007258:	6922      	ldr	r2, [r4, #16]
 800725a:	4013      	ands	r3, r2
 800725c:	6123      	str	r3, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800725e:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	4a11      	ldr	r2, [pc, #68]	; (80072ac <UTIL_SEQ_Run+0xc8>)
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	589b      	ldr	r3, [r3, r2]
 800726a:	4798      	blx	r3
 800726c:	e7c1      	b.n	80071f2 <UTIL_SEQ_Run+0xe>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800726e:	2301      	movs	r3, #1
 8007270:	425b      	negs	r3, r3
 8007272:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 8007274:	f7ff ff9a 	bl	80071ac <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007278:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800727c:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	6833      	ldr	r3, [r6, #0]
 8007282:	4013      	ands	r3, r2
 8007284:	6872      	ldr	r2, [r6, #4]
 8007286:	421a      	tst	r2, r3
 8007288:	d105      	bne.n	8007296 <UTIL_SEQ_Run+0xb2>
 800728a:	6863      	ldr	r3, [r4, #4]
 800728c:	68a2      	ldr	r2, [r4, #8]
 800728e:	421a      	tst	r2, r3
 8007290:	d101      	bne.n	8007296 <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 8007292:	f7fb fb07 	bl	80028a4 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007296:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800729a:	f7ff ff88 	bl	80071ae <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	6073      	str	r3, [r6, #4]
}
 80072a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80072a4:	2000003c 	.word	0x2000003c
 80072a8:	2000050c 	.word	0x2000050c
 80072ac:	2000052c 	.word	0x2000052c

080072b0 <UTIL_SEQ_RegTask>:
{
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	0015      	movs	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80072b8:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80072ba:	f7ff ff79 	bl	80071b0 <SEQ_BitPosition>
 80072be:	4b03      	ldr	r3, [pc, #12]	; (80072cc <UTIL_SEQ_RegTask+0x1c>)
 80072c0:	0080      	lsls	r0, r0, #2
 80072c2:	50c5      	str	r5, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c4:	f384 8810 	msr	PRIMASK, r4
}
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	2000052c 	.word	0x2000052c

080072d0 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 80072d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80072d2:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80072d4:	4e11      	ldr	r6, [pc, #68]	; (800731c <SysTimeGet+0x4c>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80072d6:	aa02      	add	r2, sp, #8
 80072d8:	8093      	strh	r3, [r2, #4]
 80072da:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80072dc:	6933      	ldr	r3, [r6, #16]
{
 80072de:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80072e0:	a803      	add	r0, sp, #12
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80072e6:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80072e8:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80072ea:	9301      	str	r3, [sp, #4]
 80072ec:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80072ee:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80072f0:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 80072f6:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 80072f8:	4909      	ldr	r1, [pc, #36]	; (8007320 <SysTimeGet+0x50>)
  c.Seconds = a.Seconds + b.Seconds;
 80072fa:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80072fc:	ab02      	add	r3, sp, #8
 80072fe:	889b      	ldrh	r3, [r3, #4]
 8007300:	195b      	adds	r3, r3, r5
 8007302:	b29b      	uxth	r3, r3
 8007304:	b21a      	sxth	r2, r3
  if( c.SubSeconds >= 1000 )
 8007306:	428a      	cmp	r2, r1
 8007308:	dd03      	ble.n	8007312 <SysTimeGet+0x42>
    c.SubSeconds -= 1000;
 800730a:	4a06      	ldr	r2, [pc, #24]	; (8007324 <SysTimeGet+0x54>)
    c.Seconds++;
 800730c:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800730e:	189b      	adds	r3, r3, r2
 8007310:	b21a      	sxth	r2, r3

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 8007312:	6020      	str	r0, [r4, #0]
}
 8007314:	0020      	movs	r0, r4
  return sysTime;
 8007316:	80a2      	strh	r2, [r4, #4]
}
 8007318:	b004      	add	sp, #16
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	080078e4 	.word	0x080078e4
 8007320:	000003e7 	.word	0x000003e7
 8007324:	fffffc18 	.word	0xfffffc18

08007328 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8007328:	2200      	movs	r2, #0
{
 800732a:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800732c:	4b02      	ldr	r3, [pc, #8]	; (8007338 <UTIL_TIMER_Init+0x10>)
 800732e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <UTIL_TIMER_Init+0x14>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4798      	blx	r3
}
 8007336:	bd10      	pop	{r4, pc}
 8007338:	200005ac 	.word	0x200005ac
 800733c:	080078f8 	.word	0x080078f8

08007340 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8007340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007342:	0005      	movs	r5, r0
 8007344:	0017      	movs	r7, r2
 8007346:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8007348:	2001      	movs	r0, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800734a:	2d00      	cmp	r5, #0
 800734c:	d011      	beq.n	8007372 <UTIL_TIMER_Create+0x32>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00f      	beq.n	8007372 <UTIL_TIMER_Create+0x32>
    TimerObject->Timestamp = 0U;
 8007352:	2400      	movs	r4, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8007354:	4b07      	ldr	r3, [pc, #28]	; (8007374 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 8007356:	602c      	str	r4, [r5, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	0008      	movs	r0, r1
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	4798      	blx	r3
 8007360:	6068      	str	r0, [r5, #4]
    return UTIL_TIMER_OK;
 8007362:	0020      	movs	r0, r4
    TimerObject->argument = Argument;
 8007364:	9b08      	ldr	r3, [sp, #32]
    TimerObject->IsPending = 0U;
 8007366:	812c      	strh	r4, [r5, #8]
    TimerObject->IsRunning = 0U;
 8007368:	72ac      	strb	r4, [r5, #10]
    TimerObject->Callback = Callback;
 800736a:	60ee      	str	r6, [r5, #12]
    TimerObject->argument = Argument;
 800736c:	612b      	str	r3, [r5, #16]
    TimerObject->Mode = Mode;
 800736e:	72ef      	strb	r7, [r5, #11]
    TimerObject->Next = NULL;
 8007370:	616c      	str	r4, [r5, #20]
  }
}
 8007372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007374:	080078f8 	.word	0x080078f8

08007378 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8007378:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800737a:	4c03      	ldr	r4, [pc, #12]	; (8007388 <UTIL_TIMER_GetCurrentTime+0x10>)
 800737c:	69e3      	ldr	r3, [r4, #28]
 800737e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8007380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007382:	4798      	blx	r3
}
 8007384:	bd10      	pop	{r4, pc}
 8007386:	46c0      	nop			; (mov r8, r8)
 8007388:	080078f8 	.word	0x080078f8

0800738c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800738c:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800738e:	4d06      	ldr	r5, [pc, #24]	; (80073a8 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 8007390:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8007392:	69eb      	ldr	r3, [r5, #28]
 8007394:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8007396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8007398:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800739a:	0030      	movs	r0, r6
 800739c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800739e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80073a0:	1a20      	subs	r0, r4, r0
 80073a2:	4798      	blx	r3
}
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	080078f8 	.word	0x080078f8

080073ac <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80073ac:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <TimerExists+0x18>)
 80073ae:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <TimerExists+0xc>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 80073b4:	0018      	movs	r0, r3
}
 80073b6:	4770      	bx	lr
    if( cur == TimerObject )
 80073b8:	4283      	cmp	r3, r0
 80073ba:	d001      	beq.n	80073c0 <TimerExists+0x14>
    cur = cur->Next;
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	e7f7      	b.n	80073b0 <TimerExists+0x4>
      return true;
 80073c0:	2001      	movs	r0, #1
 80073c2:	e7f8      	b.n	80073b6 <TimerExists+0xa>
 80073c4:	200005ac 	.word	0x200005ac

080073c8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80073c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80073ca:	4d0c      	ldr	r5, [pc, #48]	; (80073fc <TimerSetTimeout+0x34>)
{
 80073cc:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80073ce:	6a2b      	ldr	r3, [r5, #32]
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	4798      	blx	r3
  TimerObject->IsPending = 1;
 80073d4:	2301      	movs	r3, #1
 80073d6:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80073d8:	69ab      	ldr	r3, [r5, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80073da:	0006      	movs	r6, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80073dc:	6827      	ldr	r7, [r4, #0]
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	4798      	blx	r3
 80073e2:	1980      	adds	r0, r0, r6
 80073e4:	4287      	cmp	r7, r0
 80073e6:	d203      	bcs.n	80073f0 <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80073e8:	9b01      	ldr	r3, [sp, #4]
 80073ea:	4798      	blx	r3
 80073ec:	1986      	adds	r6, r0, r6
 80073ee:	6026      	str	r6, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80073f0:	68ab      	ldr	r3, [r5, #8]
 80073f2:	6820      	ldr	r0, [r4, #0]
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	4798      	blx	r3
}
 80073f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	080078f8 	.word	0x080078f8

08007400 <UTIL_TIMER_Stop>:
{
 8007400:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007402:	0003      	movs	r3, r0
    ret = UTIL_TIMER_INVALID_PARAM;
 8007404:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 8007406:	2b00      	cmp	r3, #0
 8007408:	d016      	beq.n	8007438 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800740a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800740e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8007410:	4c11      	ldr	r4, [pc, #68]	; (8007458 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 8007412:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8007414:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 8007416:	2a00      	cmp	r2, #0
 8007418:	d00b      	beq.n	8007432 <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800741a:	2100      	movs	r1, #0
 800741c:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800741e:	4293      	cmp	r3, r2
 8007420:	d112      	bne.n	8007448 <UTIL_TIMER_Stop+0x48>
          if( TimerListHead->Next != NULL )
 8007422:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 8007424:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 8007426:	428e      	cmp	r6, r1
 8007428:	d007      	beq.n	800743a <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800742a:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 800742c:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 800742e:	f7ff ffcb 	bl	80073c8 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007432:	f385 8810 	msr	PRIMASK, r5
 8007436:	2000      	movs	r0, #0
}
 8007438:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800743a:	4b08      	ldr	r3, [pc, #32]	; (800745c <UTIL_TIMER_Stop+0x5c>)
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	4798      	blx	r3
            TimerListHead = NULL;
 8007442:	6026      	str	r6, [r4, #0]
 8007444:	e7f5      	b.n	8007432 <UTIL_TIMER_Stop+0x32>
 8007446:	000a      	movs	r2, r1
            cur = cur->Next;
 8007448:	6951      	ldr	r1, [r2, #20]
        while( cur != NULL )
 800744a:	2900      	cmp	r1, #0
 800744c:	d0f1      	beq.n	8007432 <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800744e:	428b      	cmp	r3, r1
 8007450:	d1f9      	bne.n	8007446 <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	6153      	str	r3, [r2, #20]
 8007456:	e7ec      	b.n	8007432 <UTIL_TIMER_Stop+0x32>
 8007458:	200005ac 	.word	0x200005ac
 800745c:	080078f8 	.word	0x080078f8

08007460 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007460:	4b09      	ldr	r3, [pc, #36]	; (8007488 <TimerInsertTimer+0x28>)
 8007462:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8007464:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 8007466:	6959      	ldr	r1, [r3, #20]
 8007468:	2900      	cmp	r1, #0
 800746a:	d102      	bne.n	8007472 <TimerInsertTimer+0x12>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 800746c:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 800746e:	6141      	str	r1, [r0, #20]
 8007470:	e009      	b.n	8007486 <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 8007472:	6801      	ldr	r1, [r0, #0]
 8007474:	468c      	mov	ip, r1
 8007476:	6811      	ldr	r1, [r2, #0]
 8007478:	458c      	cmp	ip, r1
 800747a:	d902      	bls.n	8007482 <TimerInsertTimer+0x22>
 800747c:	0013      	movs	r3, r2
        next = next->Next;
 800747e:	6952      	ldr	r2, [r2, #20]
 8007480:	e7f1      	b.n	8007466 <TimerInsertTimer+0x6>
        cur->Next = TimerObject;
 8007482:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 8007484:	6142      	str	r2, [r0, #20]
}
 8007486:	4770      	bx	lr
 8007488:	200005ac 	.word	0x200005ac

0800748c <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800748c:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <TimerInsertNewHeadTimer+0x18>)
{
 800748e:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007490:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 8007496:	2100      	movs	r1, #0
 8007498:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800749a:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800749c:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800749e:	f7ff ff93 	bl	80073c8 <TimerSetTimeout>
}
 80074a2:	bd10      	pop	{r4, pc}
 80074a4:	200005ac 	.word	0x200005ac

080074a8 <UTIL_TIMER_Start>:
{
 80074a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074aa:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 80074ac:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d024      	beq.n	80074fc <UTIL_TIMER_Start+0x54>
 80074b2:	f7ff ff7b 	bl	80073ac <TimerExists>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d120      	bne.n	80074fc <UTIL_TIMER_Start+0x54>
 80074ba:	7a63      	ldrb	r3, [r4, #9]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d11d      	bne.n	80074fc <UTIL_TIMER_Start+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80074c4:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80074c6:	4d15      	ldr	r5, [pc, #84]	; (800751c <UTIL_TIMER_Start+0x74>)
    ticks = TimerObject->ReloadValue;
 80074c8:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80074ca:	6a2b      	ldr	r3, [r5, #32]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 80074d0:	4287      	cmp	r7, r0
 80074d2:	d200      	bcs.n	80074d6 <UTIL_TIMER_Start+0x2e>
 80074d4:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 80074d6:	2380      	movs	r3, #128	; 0x80
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	8123      	strh	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80074dc:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 80074de:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 80074e0:	4f0f      	ldr	r7, [pc, #60]	; (8007520 <UTIL_TIMER_Start+0x78>)
    TimerObject->IsRunning = 1U;
 80074e2:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10a      	bne.n	8007500 <UTIL_TIMER_Start+0x58>
      UTIL_TimerDriver.SetTimerContext();
 80074ea:	692b      	ldr	r3, [r5, #16]
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 80074f0:	0020      	movs	r0, r4
 80074f2:	f7ff ffcb 	bl	800748c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f6:	f386 8810 	msr	PRIMASK, r6
 80074fa:	2500      	movs	r5, #0
}
 80074fc:	0028      	movs	r0, r5
 80074fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8007500:	69ab      	ldr	r3, [r5, #24]
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800750a:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800750c:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4298      	cmp	r0, r3
 8007512:	d3ed      	bcc.n	80074f0 <UTIL_TIMER_Start+0x48>
        TimerInsertTimer( TimerObject);
 8007514:	0020      	movs	r0, r4
 8007516:	f7ff ffa3 	bl	8007460 <TimerInsertTimer>
 800751a:	e7ec      	b.n	80074f6 <UTIL_TIMER_Start+0x4e>
 800751c:	080078f8 	.word	0x080078f8
 8007520:	200005ac 	.word	0x200005ac

08007524 <UTIL_TIMER_SetPeriod>:
{
 8007524:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 8007526:	2301      	movs	r3, #1
{
 8007528:	1e04      	subs	r4, r0, #0
  if(NULL == TimerObject)
 800752a:	d012      	beq.n	8007552 <UTIL_TIMER_SetPeriod+0x2e>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <UTIL_TIMER_SetPeriod+0x34>)
 800752e:	0008      	movs	r0, r1
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	4798      	blx	r3
 8007536:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8007538:	0020      	movs	r0, r4
 800753a:	f7ff ff37 	bl	80073ac <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800753e:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 8007540:	4298      	cmp	r0, r3
 8007542:	d006      	beq.n	8007552 <UTIL_TIMER_SetPeriod+0x2e>
      (void)UTIL_TIMER_Stop(TimerObject);
 8007544:	0020      	movs	r0, r4
 8007546:	f7ff ff5b 	bl	8007400 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800754a:	0020      	movs	r0, r4
 800754c:	f7ff ffac 	bl	80074a8 <UTIL_TIMER_Start>
 8007550:	0003      	movs	r3, r0
}
 8007552:	0018      	movs	r0, r3
 8007554:	bd16      	pop	{r1, r2, r4, pc}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	080078f8 	.word	0x080078f8

0800755c <UTIL_TIMER_IRQ_Handler>:
{
 800755c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800755e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007562:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8007564:	4e1f      	ldr	r6, [pc, #124]	; (80075e4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8007566:	6973      	ldr	r3, [r6, #20]
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800756c:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800756e:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	4798      	blx	r3
        cur->Timestamp = 0;
 8007574:	2100      	movs	r1, #0
  if ( TimerListHead != NULL )
 8007576:	4d1c      	ldr	r5, [pc, #112]	; (80075e8 <UTIL_TIMER_IRQ_Handler+0x8c>)
  DeltaContext = now  - old; /*intentional wrap around */
 8007578:	1b04      	subs	r4, r0, r4
  if ( TimerListHead != NULL )
 800757a:	682b      	ldr	r3, [r5, #0]
 800757c:	428b      	cmp	r3, r1
 800757e:	d007      	beq.n	8007590 <UTIL_TIMER_IRQ_Handler+0x34>
      if (cur->Timestamp > DeltaContext)
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	42a2      	cmp	r2, r4
 8007584:	d90d      	bls.n	80075a2 <UTIL_TIMER_IRQ_Handler+0x46>
        cur->Timestamp -= DeltaContext;
 8007586:	1b12      	subs	r2, r2, r4
 8007588:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800758a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f7      	bne.n	8007580 <UTIL_TIMER_IRQ_Handler+0x24>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d107      	bne.n	80075a6 <UTIL_TIMER_IRQ_Handler+0x4a>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8007596:	6828      	ldr	r0, [r5, #0]
 8007598:	2800      	cmp	r0, #0
 800759a:	d11d      	bne.n	80075d8 <UTIL_TIMER_IRQ_Handler+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800759c:	f387 8810 	msr	PRIMASK, r7
}
 80075a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        cur->Timestamp = 0;
 80075a2:	6019      	str	r1, [r3, #0]
 80075a4:	e7f1      	b.n	800758a <UTIL_TIMER_IRQ_Handler+0x2e>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80075a6:	681c      	ldr	r4, [r3, #0]
 80075a8:	2c00      	cmp	r4, #0
 80075aa:	d004      	beq.n	80075b6 <UTIL_TIMER_IRQ_Handler+0x5a>
 80075ac:	69b3      	ldr	r3, [r6, #24]
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	4798      	blx	r3
 80075b2:	4284      	cmp	r4, r0
 80075b4:	d2ef      	bcs.n	8007596 <UTIL_TIMER_IRQ_Handler+0x3a>
      cur = TimerListHead;
 80075b6:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 80075b8:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 80075ba:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 80075bc:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 80075c2:	68e3      	ldr	r3, [r4, #12]
 80075c4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80075c6:	2280      	movs	r2, #128	; 0x80
 80075c8:	8963      	ldrh	r3, [r4, #10]
 80075ca:	0052      	lsls	r2, r2, #1
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d1df      	bne.n	8007590 <UTIL_TIMER_IRQ_Handler+0x34>
        (void)UTIL_TIMER_Start(cur);
 80075d0:	0020      	movs	r0, r4
 80075d2:	f7ff ff69 	bl	80074a8 <UTIL_TIMER_Start>
 80075d6:	e7db      	b.n	8007590 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80075d8:	7a03      	ldrb	r3, [r0, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1de      	bne.n	800759c <UTIL_TIMER_IRQ_Handler+0x40>
    TimerSetTimeout( TimerListHead );
 80075de:	f7ff fef3 	bl	80073c8 <TimerSetTimeout>
 80075e2:	e7db      	b.n	800759c <UTIL_TIMER_IRQ_Handler+0x40>
 80075e4:	080078f8 	.word	0x080078f8
 80075e8:	200005ac 	.word	0x200005ac

080075ec <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	b09d      	sub	sp, #116	; 0x74
 80075f0:	9004      	str	r0, [sp, #16]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 80075f2:	2000      	movs	r0, #0
{
 80075f4:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 80075f6:	4281      	cmp	r1, r0
 80075f8:	dd0a      	ble.n	8007610 <tiny_vsnprintf_like+0x24>
 80075fa:	001e      	movs	r6, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80075fc:	9c04      	ldr	r4, [sp, #16]
 80075fe:	9904      	ldr	r1, [sp, #16]
 8007600:	7813      	ldrb	r3, [r2, #0]
 8007602:	1a60      	subs	r0, r4, r1
 8007604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007606:	1e4f      	subs	r7, r1, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d103      	bne.n	8007614 <tiny_vsnprintf_like+0x28>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 800760c:	2300      	movs	r3, #0
 800760e:	7023      	strb	r3, [r4, #0]
  return str - buf;
}
 8007610:	b01d      	add	sp, #116	; 0x74
 8007612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 8007614:	4287      	cmp	r7, r0
 8007616:	ddf9      	ble.n	800760c <tiny_vsnprintf_like+0x20>
    if (*fmt != '%')
 8007618:	2b25      	cmp	r3, #37	; 0x25
 800761a:	d005      	beq.n	8007628 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800761c:	7023      	strb	r3, [r4, #0]
      continue;
 800761e:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 8007620:	3401      	adds	r4, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8007622:	9a01      	ldr	r2, [sp, #4]
 8007624:	3201      	adds	r2, #1
 8007626:	e7ea      	b.n	80075fe <tiny_vsnprintf_like+0x12>
 8007628:	1c53      	adds	r3, r2, #1
    if (*fmt == '0')
 800762a:	7852      	ldrb	r2, [r2, #1]
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	3a30      	subs	r2, #48	; 0x30
 8007630:	4251      	negs	r1, r2
 8007632:	4151      	adcs	r1, r2
    if (is_digit(*fmt))
 8007634:	b2d2      	uxtb	r2, r2
    flags = 0;
 8007636:	000b      	movs	r3, r1
    if (is_digit(*fmt))
 8007638:	2a09      	cmp	r2, #9
 800763a:	d935      	bls.n	80076a8 <tiny_vsnprintf_like+0xbc>
    field_width = -1;
 800763c:	2201      	movs	r2, #1
 800763e:	4252      	negs	r2, r2
 8007640:	9202      	str	r2, [sp, #8]
    switch (*fmt)
 8007642:	9a01      	ldr	r2, [sp, #4]
 8007644:	7812      	ldrb	r2, [r2, #0]
 8007646:	2a69      	cmp	r2, #105	; 0x69
 8007648:	d100      	bne.n	800764c <tiny_vsnprintf_like+0x60>
 800764a:	e094      	b.n	8007776 <tiny_vsnprintf_like+0x18a>
 800764c:	d82e      	bhi.n	80076ac <tiny_vsnprintf_like+0xc0>
 800764e:	2a63      	cmp	r2, #99	; 0x63
 8007650:	d050      	beq.n	80076f4 <tiny_vsnprintf_like+0x108>
 8007652:	2a64      	cmp	r2, #100	; 0x64
 8007654:	d100      	bne.n	8007658 <tiny_vsnprintf_like+0x6c>
 8007656:	e08e      	b.n	8007776 <tiny_vsnprintf_like+0x18a>
 8007658:	2a58      	cmp	r2, #88	; 0x58
 800765a:	d057      	beq.n	800770c <tiny_vsnprintf_like+0x120>
        if (*fmt != '%') *str++ = '%';
 800765c:	2a25      	cmp	r2, #37	; 0x25
 800765e:	d002      	beq.n	8007666 <tiny_vsnprintf_like+0x7a>
 8007660:	2225      	movs	r2, #37	; 0x25
 8007662:	7022      	strb	r2, [r4, #0]
 8007664:	3401      	adds	r4, #1
        CHECK_STR_SIZE(buf, str, size);
 8007666:	9a04      	ldr	r2, [sp, #16]
 8007668:	1aa2      	subs	r2, r4, r2
 800766a:	42ba      	cmp	r2, r7
 800766c:	db00      	blt.n	8007670 <tiny_vsnprintf_like+0x84>
 800766e:	e084      	b.n	800777a <tiny_vsnprintf_like+0x18e>
        if (*fmt)
 8007670:	9a01      	ldr	r2, [sp, #4]
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	2a00      	cmp	r2, #0
 8007676:	d100      	bne.n	800767a <tiny_vsnprintf_like+0x8e>
 8007678:	e081      	b.n	800777e <tiny_vsnprintf_like+0x192>
          *str++ = *fmt;
 800767a:	7022      	strb	r2, [r4, #0]
 800767c:	3401      	adds	r4, #1
        CHECK_STR_SIZE(buf, str, size);
 800767e:	9a04      	ldr	r2, [sp, #16]
 8007680:	1aa2      	subs	r2, r4, r2
 8007682:	42ba      	cmp	r2, r7
 8007684:	da79      	bge.n	800777a <tiny_vsnprintf_like+0x18e>
 8007686:	e7cc      	b.n	8007622 <tiny_vsnprintf_like+0x36>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8007688:	250a      	movs	r5, #10
 800768a:	9a01      	ldr	r2, [sp, #4]
 800768c:	3201      	adds	r2, #1
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	9a02      	ldr	r2, [sp, #8]
 8007692:	436a      	muls	r2, r5
 8007694:	1812      	adds	r2, r2, r0
 8007696:	3a30      	subs	r2, #48	; 0x30
  int i = 0;
 8007698:	9202      	str	r2, [sp, #8]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800769a:	9a01      	ldr	r2, [sp, #4]
 800769c:	7810      	ldrb	r0, [r2, #0]
 800769e:	0002      	movs	r2, r0
 80076a0:	3a30      	subs	r2, #48	; 0x30
 80076a2:	2a09      	cmp	r2, #9
 80076a4:	d9f0      	bls.n	8007688 <tiny_vsnprintf_like+0x9c>
 80076a6:	e7cc      	b.n	8007642 <tiny_vsnprintf_like+0x56>
  int i = 0;
 80076a8:	2200      	movs	r2, #0
 80076aa:	e7f5      	b.n	8007698 <tiny_vsnprintf_like+0xac>
    switch (*fmt)
 80076ac:	2a75      	cmp	r2, #117	; 0x75
 80076ae:	d064      	beq.n	800777a <tiny_vsnprintf_like+0x18e>
 80076b0:	2a78      	cmp	r2, #120	; 0x78
 80076b2:	d02d      	beq.n	8007710 <tiny_vsnprintf_like+0x124>
 80076b4:	2a73      	cmp	r2, #115	; 0x73
 80076b6:	d1d1      	bne.n	800765c <tiny_vsnprintf_like+0x70>
        s = va_arg(args, char *);
 80076b8:	1d35      	adds	r5, r6, #4
 80076ba:	6836      	ldr	r6, [r6, #0]
        if (!s) s = "<NULL>";
 80076bc:	2e00      	cmp	r6, #0
 80076be:	d100      	bne.n	80076c2 <tiny_vsnprintf_like+0xd6>
 80076c0:	4e53      	ldr	r6, [pc, #332]	; (8007810 <tiny_vsnprintf_like+0x224>)
        len = strlen(s);
 80076c2:	0030      	movs	r0, r6
 80076c4:	f7f8 fd20 	bl	8000108 <strlen>
 80076c8:	9b02      	ldr	r3, [sp, #8]
 80076ca:	18e2      	adds	r2, r4, r3
 80076cc:	1b13      	subs	r3, r2, r4
          while (len < field_width--) *str++ = ' ';
 80076ce:	4298      	cmp	r0, r3
 80076d0:	db14      	blt.n	80076fc <tiny_vsnprintf_like+0x110>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80076d2:	2300      	movs	r3, #0
 80076d4:	4283      	cmp	r3, r0
 80076d6:	db15      	blt.n	8007704 <tiny_vsnprintf_like+0x118>
 80076d8:	1824      	adds	r4, r4, r0
        s = va_arg(args, char *);
 80076da:	002e      	movs	r6, r5
 80076dc:	e7a1      	b.n	8007622 <tiny_vsnprintf_like+0x36>
          while (--field_width > 0) *str++ = ' ';
 80076de:	2220      	movs	r2, #32
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	0023      	movs	r3, r4
 80076e4:	1c5c      	adds	r4, r3, #1
 80076e6:	1b0a      	subs	r2, r1, r4
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	dcf8      	bgt.n	80076de <tiny_vsnprintf_like+0xf2>
        *str++ = (unsigned char) va_arg(args, int);
 80076ec:	6832      	ldr	r2, [r6, #0]
 80076ee:	3604      	adds	r6, #4
 80076f0:	701a      	strb	r2, [r3, #0]
        continue;
 80076f2:	e796      	b.n	8007622 <tiny_vsnprintf_like+0x36>
 80076f4:	9a02      	ldr	r2, [sp, #8]
    switch (*fmt)
 80076f6:	0023      	movs	r3, r4
 80076f8:	18a1      	adds	r1, r4, r2
 80076fa:	e7f3      	b.n	80076e4 <tiny_vsnprintf_like+0xf8>
          while (len < field_width--) *str++ = ' ';
 80076fc:	2320      	movs	r3, #32
 80076fe:	7023      	strb	r3, [r4, #0]
 8007700:	3401      	adds	r4, #1
 8007702:	e7e3      	b.n	80076cc <tiny_vsnprintf_like+0xe0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8007704:	5cf2      	ldrb	r2, [r6, r3]
 8007706:	54e2      	strb	r2, [r4, r3]
 8007708:	3301      	adds	r3, #1
 800770a:	e7e3      	b.n	80076d4 <tiny_vsnprintf_like+0xe8>
        flags |= UPPERCASE;
 800770c:	2340      	movs	r3, #64	; 0x40
 800770e:	430b      	orrs	r3, r1
        base = 16;
 8007710:	2210      	movs	r2, #16
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007712:	9d04      	ldr	r5, [sp, #16]
    else if (flags & SIGN)
 8007714:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8007716:	1b65      	subs	r5, r4, r5
 8007718:	1b7d      	subs	r5, r7, r5
  if (type & UPPERCASE)  dig = upper_digits;
 800771a:	2740      	movs	r7, #64	; 0x40
 800771c:	46bc      	mov	ip, r7
 800771e:	4f3d      	ldr	r7, [pc, #244]	; (8007814 <tiny_vsnprintf_like+0x228>)
    base = 10;
 8007720:	9203      	str	r2, [sp, #12]
  if (type & UPPERCASE)  dig = upper_digits;
 8007722:	9707      	str	r7, [sp, #28]
 8007724:	4667      	mov	r7, ip
 8007726:	ce04      	ldmia	r6!, {r2}
    else if (flags & SIGN)
 8007728:	4019      	ands	r1, r3
 800772a:	0010      	movs	r0, r2
  if (type & UPPERCASE)  dig = upper_digits;
 800772c:	423b      	tst	r3, r7
 800772e:	d101      	bne.n	8007734 <tiny_vsnprintf_like+0x148>
  char *dig = lower_digits;
 8007730:	4f39      	ldr	r7, [pc, #228]	; (8007818 <tiny_vsnprintf_like+0x22c>)
 8007732:	9707      	str	r7, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 8007734:	2701      	movs	r7, #1
 8007736:	403b      	ands	r3, r7
 8007738:	9306      	str	r3, [sp, #24]
 800773a:	2320      	movs	r3, #32
 800773c:	9308      	str	r3, [sp, #32]
 800773e:	9b06      	ldr	r3, [sp, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <tiny_vsnprintf_like+0x15c>
 8007744:	2330      	movs	r3, #48	; 0x30
 8007746:	9308      	str	r3, [sp, #32]
  if (type & SIGN)
 8007748:	2900      	cmp	r1, #0
 800774a:	d01c      	beq.n	8007786 <tiny_vsnprintf_like+0x19a>
    if (num < 0)
 800774c:	2a00      	cmp	r2, #0
 800774e:	da1a      	bge.n	8007786 <tiny_vsnprintf_like+0x19a>
      size--;
 8007750:	9b02      	ldr	r3, [sp, #8]
      num = -num;
 8007752:	4250      	negs	r0, r2
      size--;
 8007754:	3b01      	subs	r3, #1
 8007756:	9302      	str	r3, [sp, #8]
      sign = '-';
 8007758:	232d      	movs	r3, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 800775a:	2700      	movs	r7, #0
  if (num == 0)
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	9903      	ldr	r1, [sp, #12]
 8007760:	f7f8 fd7e 	bl	8000260 <__aeabi_uidivmod>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8007764:	9a07      	ldr	r2, [sp, #28]
 8007766:	3701      	adds	r7, #1
 8007768:	5c52      	ldrb	r2, [r2, r1]
 800776a:	1e7b      	subs	r3, r7, #1
 800776c:	a90b      	add	r1, sp, #44	; 0x2c
 800776e:	54ca      	strb	r2, [r1, r3]
    while (num != 0)
 8007770:	2800      	cmp	r0, #0
 8007772:	d1f4      	bne.n	800775e <tiny_vsnprintf_like+0x172>
 8007774:	e00e      	b.n	8007794 <tiny_vsnprintf_like+0x1a8>
        flags |= SIGN;
 8007776:	2302      	movs	r3, #2
 8007778:	430b      	orrs	r3, r1
    base = 10;
 800777a:	220a      	movs	r2, #10
 800777c:	e7c9      	b.n	8007712 <tiny_vsnprintf_like+0x126>
          --fmt;
 800777e:	9a01      	ldr	r2, [sp, #4]
 8007780:	3a01      	subs	r2, #1
 8007782:	9201      	str	r2, [sp, #4]
 8007784:	e77b      	b.n	800767e <tiny_vsnprintf_like+0x92>
  if (num == 0)
 8007786:	2a00      	cmp	r2, #0
 8007788:	d13f      	bne.n	800780a <tiny_vsnprintf_like+0x21e>
    tmp[i++] = '0';
 800778a:	2130      	movs	r1, #48	; 0x30
 800778c:	2701      	movs	r7, #1
 800778e:	ab0b      	add	r3, sp, #44	; 0x2c
 8007790:	7019      	strb	r1, [r3, #0]
 8007792:	9205      	str	r2, [sp, #20]
  size -= precision;
 8007794:	9b02      	ldr	r3, [sp, #8]
 8007796:	1bda      	subs	r2, r3, r7
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8007798:	9b06      	ldr	r3, [sp, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d017      	beq.n	80077ce <tiny_vsnprintf_like+0x1e2>
  if (sign) ASSIGN_STR(sign);
 800779e:	9b05      	ldr	r3, [sp, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d02d      	beq.n	8007800 <tiny_vsnprintf_like+0x214>
 80077a4:	9905      	ldr	r1, [sp, #20]
 80077a6:	3d01      	subs	r5, #1
 80077a8:	1c63      	adds	r3, r4, #1
 80077aa:	7021      	strb	r1, [r4, #0]
 80077ac:	2d00      	cmp	r5, #0
 80077ae:	d128      	bne.n	8007802 <tiny_vsnprintf_like+0x216>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80077b0:	001c      	movs	r4, r3
 80077b2:	e736      	b.n	8007622 <tiny_vsnprintf_like+0x36>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80077b4:	2020      	movs	r0, #32
 80077b6:	7020      	strb	r0, [r4, #0]
 80077b8:	1850      	adds	r0, r2, r1
 80077ba:	1c63      	adds	r3, r4, #1
 80077bc:	2800      	cmp	r0, #0
 80077be:	d0f7      	beq.n	80077b0 <tiny_vsnprintf_like+0x1c4>
 80077c0:	001c      	movs	r4, r3
 80077c2:	1855      	adds	r5, r2, r1
 80077c4:	3a01      	subs	r2, #1
 80077c6:	1c53      	adds	r3, r2, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dcf3      	bgt.n	80077b4 <tiny_vsnprintf_like+0x1c8>
 80077cc:	e7e7      	b.n	800779e <tiny_vsnprintf_like+0x1b2>
 80077ce:	1aa9      	subs	r1, r5, r2
 80077d0:	e7f7      	b.n	80077c2 <tiny_vsnprintf_like+0x1d6>
  while (size-- > 0) ASSIGN_STR(c);
 80077d2:	9808      	ldr	r0, [sp, #32]
 80077d4:	1c59      	adds	r1, r3, #1
 80077d6:	3d01      	subs	r5, #1
 80077d8:	7018      	strb	r0, [r3, #0]
 80077da:	000b      	movs	r3, r1
 80077dc:	2d00      	cmp	r5, #0
 80077de:	d0e7      	beq.n	80077b0 <tiny_vsnprintf_like+0x1c4>
 80077e0:	1951      	adds	r1, r2, r5
 80077e2:	2900      	cmp	r1, #0
 80077e4:	dcf5      	bgt.n	80077d2 <tiny_vsnprintf_like+0x1e6>
 80077e6:	003a      	movs	r2, r7
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80077e8:	a80b      	add	r0, sp, #44	; 0x2c
 80077ea:	3a01      	subs	r2, #1
 80077ec:	d3e0      	bcc.n	80077b0 <tiny_vsnprintf_like+0x1c4>
 80077ee:	5c14      	ldrb	r4, [r2, r0]
 80077f0:	1c59      	adds	r1, r3, #1
 80077f2:	701c      	strb	r4, [r3, #0]
 80077f4:	1bd3      	subs	r3, r2, r7
 80077f6:	195b      	adds	r3, r3, r5
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <tiny_vsnprintf_like+0x21a>
 80077fc:	000b      	movs	r3, r1
 80077fe:	e7f4      	b.n	80077ea <tiny_vsnprintf_like+0x1fe>
  if (sign) ASSIGN_STR(sign);
 8007800:	0023      	movs	r3, r4
 8007802:	1b52      	subs	r2, r2, r5
 8007804:	e7ec      	b.n	80077e0 <tiny_vsnprintf_like+0x1f4>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8007806:	000b      	movs	r3, r1
 8007808:	e7d2      	b.n	80077b0 <tiny_vsnprintf_like+0x1c4>
  if (num == 0)
 800780a:	2300      	movs	r3, #0
 800780c:	e7a5      	b.n	800775a <tiny_vsnprintf_like+0x16e>
 800780e:	46c0      	nop			; (mov r8, r8)
 8007810:	08007c94 	.word	0x08007c94
 8007814:	08007cc0 	.word	0x08007cc0
 8007818:	08007c9b 	.word	0x08007c9b

0800781c <__libc_init_array>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	2600      	movs	r6, #0
 8007820:	4d0c      	ldr	r5, [pc, #48]	; (8007854 <__libc_init_array+0x38>)
 8007822:	4c0d      	ldr	r4, [pc, #52]	; (8007858 <__libc_init_array+0x3c>)
 8007824:	1b64      	subs	r4, r4, r5
 8007826:	10a4      	asrs	r4, r4, #2
 8007828:	42a6      	cmp	r6, r4
 800782a:	d109      	bne.n	8007840 <__libc_init_array+0x24>
 800782c:	2600      	movs	r6, #0
 800782e:	f000 f83b 	bl	80078a8 <_init>
 8007832:	4d0a      	ldr	r5, [pc, #40]	; (800785c <__libc_init_array+0x40>)
 8007834:	4c0a      	ldr	r4, [pc, #40]	; (8007860 <__libc_init_array+0x44>)
 8007836:	1b64      	subs	r4, r4, r5
 8007838:	10a4      	asrs	r4, r4, #2
 800783a:	42a6      	cmp	r6, r4
 800783c:	d105      	bne.n	800784a <__libc_init_array+0x2e>
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	00b3      	lsls	r3, r6, #2
 8007842:	58eb      	ldr	r3, [r5, r3]
 8007844:	4798      	blx	r3
 8007846:	3601      	adds	r6, #1
 8007848:	e7ee      	b.n	8007828 <__libc_init_array+0xc>
 800784a:	00b3      	lsls	r3, r6, #2
 800784c:	58eb      	ldr	r3, [r5, r3]
 800784e:	4798      	blx	r3
 8007850:	3601      	adds	r6, #1
 8007852:	e7f2      	b.n	800783a <__libc_init_array+0x1e>
 8007854:	08007cf0 	.word	0x08007cf0
 8007858:	08007cf0 	.word	0x08007cf0
 800785c:	08007cf0 	.word	0x08007cf0
 8007860:	08007cf4 	.word	0x08007cf4

08007864 <memcpy>:
 8007864:	2300      	movs	r3, #0
 8007866:	b510      	push	{r4, lr}
 8007868:	429a      	cmp	r2, r3
 800786a:	d100      	bne.n	800786e <memcpy+0xa>
 800786c:	bd10      	pop	{r4, pc}
 800786e:	5ccc      	ldrb	r4, [r1, r3]
 8007870:	54c4      	strb	r4, [r0, r3]
 8007872:	3301      	adds	r3, #1
 8007874:	e7f8      	b.n	8007868 <memcpy+0x4>

08007876 <memset>:
 8007876:	0003      	movs	r3, r0
 8007878:	1812      	adds	r2, r2, r0
 800787a:	4293      	cmp	r3, r2
 800787c:	d100      	bne.n	8007880 <memset+0xa>
 800787e:	4770      	bx	lr
 8007880:	7019      	strb	r1, [r3, #0]
 8007882:	3301      	adds	r3, #1
 8007884:	e7f9      	b.n	800787a <memset+0x4>

08007886 <strncmp>:
 8007886:	2300      	movs	r3, #0
 8007888:	b530      	push	{r4, r5, lr}
 800788a:	429a      	cmp	r2, r3
 800788c:	d00a      	beq.n	80078a4 <strncmp+0x1e>
 800788e:	3a01      	subs	r2, #1
 8007890:	5cc4      	ldrb	r4, [r0, r3]
 8007892:	5ccd      	ldrb	r5, [r1, r3]
 8007894:	42ac      	cmp	r4, r5
 8007896:	d104      	bne.n	80078a2 <strncmp+0x1c>
 8007898:	4293      	cmp	r3, r2
 800789a:	d002      	beq.n	80078a2 <strncmp+0x1c>
 800789c:	3301      	adds	r3, #1
 800789e:	2c00      	cmp	r4, #0
 80078a0:	d1f6      	bne.n	8007890 <strncmp+0xa>
 80078a2:	1b63      	subs	r3, r4, r5
 80078a4:	0018      	movs	r0, r3
 80078a6:	bd30      	pop	{r4, r5, pc}

080078a8 <_init>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr

080078b4 <_fini>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr
